
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 e3 81 02 00       	call   c0028208 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 5c 8e 02 c0       	mov    ebx,0xc0028e5c
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 68 8e 02 c0    	cmp    ebx,0xc0028e68
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 cb 02 c0       	mov    eax,0xc002cb78
c0000049:	3d 78 cb 02 c0       	cmp    eax,0xc002cb78
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 cb 02 c0       	push   0xc002cb78
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 cb 02 c0       	mov    eax,0xc002cb78
c0000075:	2d 78 cb 02 c0       	sub    eax,0xc002cb78
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 cb 02 c0       	push   0xc002cb78
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d a8 d1 02 c0 00 	cmp    BYTE PTR ds:0xc002d1a8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 70 8e 02 c0       	mov    ebx,0xc0028e70
c00000bb:	81 eb 6c 8e 02 c0    	sub    ebx,0xc0028e6c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 6c 8e 02 c0       	mov    esi,0xc0028e6c
c00000ca:	a1 ac d1 02 c0       	mov    eax,ds:0xc002d1ac
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ac d1 02 c0       	mov    ds:0xc002d1ac,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ac d1 02 c0       	mov    eax,ds:0xc002d1ac
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 cb 02 c0       	push   0xc002cb78
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 a8 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d1a8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 b0 d1 02 c0       	push   0xc002d1b0
c000012c:	68 78 cb 02 c0       	push   0xc002cb78
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 47 cd 01 00       	call   c001d0ea <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 60 1f 01 00       	call   c001231b <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 25 cd 01 00       	call   c001d0ea <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 cd d1 01 00       	call   c001d5b1 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 e3 d7 01 00       	call   c001dbd0 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 f0 d5 02 c0 	lgdtd  ds:0xc002d5f0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 59 3c 01 00       	call   c001423b <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 c8 d1 02 c0       	mov    ds:0xc002d1c8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 c8 d1 02 c0    	mov    DWORD PTR ds:0xc002d1c8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d c8 d1 02 c0    	mov    ebx,DWORD PTR ds:0xc002d1c8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 80 8e 02 c0 02 	test   BYTE PTR [edx-0x3ffd7180],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 80 8e 02 c0 01 	test   BYTE PTR [edx-0x3ffd7180],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 80 8e 02 c0 08 	test   BYTE PTR [edx-0x3ffd7180],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 80 8e 02 c0 04 	test   BYTE PTR [ebx-0x3ffd7180],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 80 8e 02 c0 01 	test   BYTE PTR [edx-0x3ffd7180],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d e0 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d1e0
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d e0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1e0,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 e4 d1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2e1c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 e4 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2e1c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d e0 d1 02 c0    	mov    DWORD PTR ds:0xc002d1e0,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 0c d2 02 c0    	cmp    DWORD PTR ds:0xc002d20c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 1c d2 02 c0    	mov    ecx,DWORD PTR ds:0xc002d21c
c0000e38:	c7 42 0c 14 d2 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d214
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 1c d2 02 c0    	mov    DWORD PTR ds:0xc002d21c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 0c d2 02 c0    	mov    DWORD PTR ds:0xc002d20c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 e0 d1 02 c0 02 	test   BYTE PTR ds:0xc002d1e0,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 e0 d1 02 c0       	mov    eax,0xc002d1e0
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d e0 d1 02 c0    	mov    edi,DWORD PTR ds:0xc002d1e0
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 e0 d1 02 c0       	mov    eax,0xc002d1e0
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 e4 d1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2e1c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 e4 d1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2e1c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 14 d2 02 c0 	lea    edx,[eax*8-0x3ffd2dec]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 e0 d1 02 c0       	mov    eax,0xc002d1e0
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 20 d2 02 c0    	mov    ebx,DWORD PTR ds:0xc002d220
c00011ba:	81 fb 14 d2 02 c0    	cmp    ebx,0xc002d214
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 14 d2 02 c0       	cmp    eax,0xc002d214
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 10 d2 02 c0    	cmp    DWORD PTR ds:0xc002d210,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 1c d2 02 c0       	mov    ds:0xc002d21c,eax
c00011f6:	a3 20 d2 02 c0       	mov    ds:0xc002d220,eax
c00011fb:	a3 10 d2 02 c0       	mov    ds:0xc002d210,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 14 d2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d214
c0001209:	c7 40 0c 14 d2 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d214
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 20 d2 02 c0       	mov    ds:0xc002d220,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 14 d2 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d214
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 d8 d1 02 c0 	lea    ebp,[edx*4-0x3ffd2e28]
c000125a:	8b 14 95 e0 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e20]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 e0 d1 02 c0 	lea    ecx,[edx*4-0x3ffd2e20]
c0001275:	8b 14 95 e0 d1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2e20]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 14 d5 02 c0 	or     DWORD PTR [edi*4-0x3ffd2aec],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 14 d2 02 c0 	lea    eax,[eax*8-0x3ffd2dec]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 1c d2 02 c0    	mov    DWORD PTR ds:0xc002d21c,ecx
c000132f:	89 0d 20 d2 02 c0    	mov    DWORD PTR ds:0xc002d220,ecx
c0001335:	c7 41 08 14 d2 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d214
c000133c:	c7 41 0c 14 d2 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d214
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 0c d2 02 c0 	lea    edx,[ecx*8-0x3ffd2df4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 14 d5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2aec]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 14 d5 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd2aec]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 0c d2 02 c0 	lea    edx,[eax*4-0x3ffd2df4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 14 d5 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd2aec],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 1c d2 02 c0    	mov    DWORD PTR ds:0xc002d21c,edi
c0001402:	89 3d 20 d2 02 c0    	mov    DWORD PTR ds:0xc002d220,edi
c0001408:	c7 47 08 14 d2 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d214
c000140f:	c7 47 0c 14 d2 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d214
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 10 d2 02 c0    	mov    DWORD PTR ds:0xc002d210,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 0c d2 02 c0       	mov    eax,ds:0xc002d20c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 0c d2 02 c0    	mov    DWORD PTR ds:0xc002d20c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba e0 d1 02 c0       	mov    edx,0xc002d1e0
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d e0 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d1e0,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 e0 d1 02 c0       	mov    eax,0xc002d1e0
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 34 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d534
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 34 d5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d534,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 34 d5 02 c0    	mov    DWORD PTR ds:0xc002d534,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 0c d2 02 c0    	cmp    DWORD PTR ds:0xc002d20c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 0c d2 02 c0    	mov    DWORD PTR ds:0xc002d20c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d e0 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d1e0,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 e0 d1 02 c0       	mov    eax,0xc002d1e0
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 3c d5 02 c0    	push   DWORD PTR ds:0xc002d53c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d e0 d1 02 c0 00 	cmp    DWORD PTR ds:0xc002d1e0,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 e0 d1 02 c0       	mov    eax,0xc002d1e0
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 3c d5 02 c0       	mov    eax,ds:0xc002d53c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 e0 d1 02 c0       	mov    eax,0xc002d1e0
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 0c d2 02 c0 00 	cmp    DWORD PTR ds:0xc002d20c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 e0 d1 02 c0       	mov    eax,0xc002d1e0
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 0c d2 02 c0       	mov    eax,ds:0xc002d20c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 e4 d1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2e1c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 14 d2 02 c0       	mov    eax,0xc002d214
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 0c d5 02 c0       	cmp    eax,0xc002d50c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 48 d5 02 c0       	mov    eax,ds:0xc002d548
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 30 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d530
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 44 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d544
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 54 d5 02 c0    	mov    esi,DWORD PTR ds:0xc002d554
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 e0 d1 02 c0       	mov    eax,0xc002d1e0
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 84 8f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd707c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 e0 d1 02 c0       	mov    eax,ds:0xc002d1e0
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 e0 d1 02 c0       	mov    ds:0xc002d1e0,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 24 d5 02 c0    	mov    DWORD PTR ds:0xc002d524,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 28 d5 02 c0    	mov    DWORD PTR ds:0xc002d528,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 2c d5 02 c0    	mov    DWORD PTR ds:0xc002d52c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 34 d5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d534,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 a0 0c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf360]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 0e ea 01 00       	jmp    c0020600 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 a0 0c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf360]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 3f ea 01 00       	jmp    c0020647 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 a0 0c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcf360]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 67 ea 01 00       	jmp    c002068e <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 5a 46 02 00       	call   c0026564 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 a0 90 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6f60]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 a0 90 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6f60]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba a0 8f 02 c0       	mov    edx,0xc0028fa0
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba c0 90 02 c0       	mov    edx,0xc00290c0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba ac ba 02 c0       	mov    edx,0xc002baac
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba cc 90 02 c0       	mov    edx,0xc00290cc
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba b0 90 02 c0       	mov    edx,0xc00290b0
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 80 d5 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2a80]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 60 d5 02 c0    	mov    ax,ds:0xc002d560
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 60 d5 02 c0    	mov    ds:0xc002d560,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 57 34 02 00       	call   c0026564 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 d2 90 02 c0       	mov    eax,0xc00290d2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 20 90 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6fe0]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 db 90 02 c0       	mov    eax,0xc00290db
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 a0 90 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6f60]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 22 1e 02 00       	call   c0026564 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba b0 90 02 c0       	mov    edx,0xc00290b0
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba a0 8f 02 c0       	mov    edx,0xc0028fa0
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba b0 8f 02 c0       	mov    edx,0xc0028fb0
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 80 d5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2a80]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 80 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2a80],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 e9 07 02 00       	call   c0026564 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 cf 07 02 00       	call   c0026564 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 f7 8f 02 c0       	mov    eax,0xc0028ff7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 f0 8f 02 c0       	mov    eax,0xc0028ff0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 80 d5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2a80]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be e0 8f 02 c0       	mov    esi,0xc0028fe0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 12 ef 01 00       	call   c0026564 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba c0 90 02 c0       	mov    edx,0xc00290c0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba c0 8f 02 c0       	mov    edx,0xc0028fc0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba d0 8f 02 c0       	mov    edx,0xc0028fd0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba e2 90 02 c0       	mov    edx,0xc00290e2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ee 90 02 c0       	mov    edx,0xc00290ee
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 02 91 02 c0       	mov    edx,0xc0029102
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 20 94 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029420
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 20 94 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029420
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 20 92 02 c0       	mov    eax,0xc0029220
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 60 91 02 c0       	mov    eax,0xc0029160
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 20 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ee0]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 66 f8 01 00       	call   c0028037 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 29 f8 01 00       	call   c0028019 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 fd f7 01 00       	call   c0028037 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 b0 ee 01 00       	call   c002773c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 32 f9 01 00       	call   c00281d0 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 77 f7 01 00       	call   c0028037 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 b9 f6 01 00       	call   c0028037 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 86 f6 01 00       	call   c0028019 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 73 f5 01 00       	call   c0028037 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 3b f5 01 00       	call   c0028019 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 20 95 02 c0       	mov    eax,0xc0029520
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 47 f3 01 00       	call   c0028037 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 0c f3 01 00       	call   c0028019 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 80 99 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6680]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 1c f0 01 00       	call   c0027dcb <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 9a e9 01 00       	call   c0027768 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 56 f2 01 00       	call   c002803b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 44 f3 01 00       	call   c002815f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 2e e9 01 00       	call   c0027768 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 d9 f1 01 00       	call   c0028035 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 ba f1 01 00       	call   c0028039 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 50 f3 01 00       	call   c00281f0 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 fa ee 01 00       	call   c0027dcb <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 78 e8 01 00       	call   c0027768 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 34 f1 01 00       	call   c002803b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 22 f2 01 00       	call   c002815f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 0c e8 01 00       	call   c0027768 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 b7 f0 01 00       	call   c0028035 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 97 f0 01 00       	call   c0028039 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 2c f2 01 00       	call   c00281f0 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 d2 ef 01 00       	call   c0028037 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 90 ef 01 00       	call   c0028019 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 78 ef 01 00       	call   c0028037 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 ea ec 01 00       	call   c0027dcb <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 ec df 01 00       	call   c00270eb <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 4f e6 01 00       	call   c0027768 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 a1 ec 01 00       	call   c0027dcb <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 a7 df 01 00       	call   c00270eb <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 76 ec 01 00       	call   c0027dcb <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 c6 ee 01 00       	call   c0028035 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 a3 e5 01 00       	call   c002773c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 25 f0 01 00       	call   c00281d0 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 4c ee 01 00       	call   c0028019 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 47 e5 01 00       	call   c002773c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 c5 eb 01 00       	call   c0027dcb <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 48 e5 01 00       	call   c0027768 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 9a eb 01 00       	call   c0027dcb <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 01 e8 01 00       	call   c0027a4c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 80 de 01 00       	call   c00270eb <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 e0 d7 01 00       	call   c0026a80 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 b7 ee 01 00       	call   c002815f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 a0 e4 01 00       	call   c0027768 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 87 ee 01 00       	call   c002815f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 f9 dd 01 00       	call   c00270eb <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 32 ed 01 00       	call   c002803b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 1a e7 01 00       	call   c0027a4c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 a0 dd 01 00       	call   c00270eb <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 8e ee 01 00       	call   c00281f0 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 60 ea 01 00       	call   c0027dcb <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 b7 e3 01 00       	call   c002773c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 96 ec 01 00       	call   c0028037 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 2f dd 01 00       	call   c00270eb <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 5b e3 01 00       	call   c002773c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 fd ed 01 00       	call   c00281f0 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 ae e9 01 00       	call   c0027dcb <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 2b e3 01 00       	call   c0027768 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 7e e9 01 00       	call   c0027dcb <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 84 dc 01 00       	call   c00270eb <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 54 e9 01 00       	call   c0027dcb <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 a6 eb 01 00       	call   c0028037 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 7d e2 01 00       	call   c002773c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 ff ec 01 00       	call   c00281d0 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 26 eb 01 00       	call   c0028019 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 20 e2 01 00       	call   c002773c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 9e e8 01 00       	call   c0027dcb <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 21 e2 01 00       	call   c0027768 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 73 e8 01 00       	call   c0027dcb <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 da e4 01 00       	call   c0027a4c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 59 db 01 00       	call   c00270eb <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 a9 d4 01 00       	call   c0026a80 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 80 eb 01 00       	call   c002815f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 69 e1 01 00       	call   c0027768 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 50 eb 01 00       	call   c002815f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 c2 da 01 00       	call   c00270eb <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 fb e9 01 00       	call   c002803b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 e2 e3 01 00       	call   c0027a4c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 61 da 01 00       	call   c00270eb <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 4f eb 01 00       	call   c00281f0 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 21 e7 01 00       	call   c0027dcb <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 78 e0 01 00       	call   c002773c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 57 e9 01 00       	call   c0028037 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 f0 d9 01 00       	call   c00270eb <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 1c e0 01 00       	call   c002773c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 91 e6 01 00       	call   c0027dcb <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 97 d9 01 00       	call   c00270eb <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 e0 99 02 c0       	mov    eax,0xc00299e0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 f4 99 02 c0       	mov    eax,0xc00299f4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 0c e5 01 00       	call   c0027dcb <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 8a de 01 00       	call   c0027768 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 1c d1 01 00       	call   c0026a80 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 f3 e7 01 00       	call   c002815f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 dc dd 01 00       	call   c0027768 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 bf e7 01 00       	call   c002815f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 31 d7 01 00       	call   c00270eb <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 91 e7 01 00       	call   c002815f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 80 dd 01 00       	call   c0027768 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 e9 d6 01 00       	call   c00270eb <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 0a d0 01 00       	call   c0026a80 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 e1 e6 01 00       	call   c002815f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 ca dc 01 00       	call   c0027768 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 ad e6 01 00       	call   c002815f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 1f d6 01 00       	call   c00270eb <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 7f e6 01 00       	call   c002815f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 6e dc 01 00       	call   c0027768 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 d7 d5 01 00       	call   c00270eb <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 b5 d5 01 00       	call   c00270eb <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 91 ce 01 00       	call   c0026a80 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 68 e5 01 00       	call   c002815f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 51 db 01 00       	call   c0027768 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 34 e5 01 00       	call   c002815f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 a6 d4 01 00       	call   c00270eb <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 06 e5 01 00       	call   c002815f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 ef da 01 00       	call   c0027768 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 58 d4 01 00       	call   c00270eb <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 b8 e4 01 00       	call   c002815f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 a1 da 01 00       	call   c0027768 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 0a d4 01 00       	call   c00270eb <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 1f cd 01 00       	call   c0026a80 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 f6 e3 01 00       	call   c002815f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 df d9 01 00       	call   c0027768 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 c6 e3 01 00       	call   c002815f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 38 d3 01 00       	call   c00270eb <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 98 e3 01 00       	call   c002815f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 81 d9 01 00       	call   c0027768 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 ea d2 01 00       	call   c00270eb <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 4a e3 01 00       	call   c002815f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 33 d9 01 00       	call   c0027768 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 9c d2 01 00       	call   c00270eb <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 70 d2 01 00       	call   c00270eb <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 cd d8 01 00       	call   c0027768 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 89 e1 01 00       	call   c002803b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 18 d2 01 00       	call   c00270eb <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 75 d8 01 00       	call   c0027768 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 31 e1 01 00       	call   c002803b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 ab ca 01 00       	call   c0026a80 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 82 e1 01 00       	call   c002815f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 6b d7 01 00       	call   c0027768 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 4e e1 01 00       	call   c002815f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 c0 d0 01 00       	call   c00270eb <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 20 e1 01 00       	call   c002815f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 09 d7 01 00       	call   c0027768 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 72 d0 01 00       	call   c00270eb <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 d2 e0 01 00       	call   c002815f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 bb d6 01 00       	call   c0027768 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 24 d0 01 00       	call   c00270eb <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 84 e0 01 00       	call   c002815f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 6d d6 01 00       	call   c0027768 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 d6 cf 01 00       	call   c00270eb <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 36 e0 01 00       	call   c002815f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 1f d6 01 00       	call   c0027768 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 88 cf 01 00       	call   c00270eb <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 8a c8 01 00       	call   c0026a80 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 61 df 01 00       	call   c002815f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 4a d5 01 00       	call   c0027768 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 31 df 01 00       	call   c002815f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 a3 ce 01 00       	call   c00270eb <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 03 df 01 00       	call   c002815f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 ec d4 01 00       	call   c0027768 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 55 ce 01 00       	call   c00270eb <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 b5 de 01 00       	call   c002815f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 9e d4 01 00       	call   c0027768 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 07 ce 01 00       	call   c00270eb <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 67 de 01 00       	call   c002815f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 50 d4 01 00       	call   c0027768 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 b9 cd 01 00       	call   c00270eb <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 19 de 01 00       	call   c002815f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 02 d4 01 00       	call   c0027768 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 6b cd 01 00       	call   c00270eb <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 3f cd 01 00       	call   c00270eb <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 9c d3 01 00       	call   c0027768 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 58 dc 01 00       	call   c002803b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 e7 cc 01 00       	call   c00270eb <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 44 d3 01 00       	call   c0027768 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 00 dc 01 00       	call   c002803b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 8e cc 01 00       	call   c00270eb <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 eb d2 01 00       	call   c0027768 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 a7 db 01 00       	call   c002803b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 35 cc 01 00       	call   c00270eb <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 92 d2 01 00       	call   c0027768 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 4e db 01 00       	call   c002803b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 ac c4 01 00       	call   c0026a80 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 83 db 01 00       	call   c002815f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 6c d1 01 00       	call   c0027768 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 4f db 01 00       	call   c002815f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 c1 ca 01 00       	call   c00270eb <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 21 db 01 00       	call   c002815f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 0a d1 01 00       	call   c0027768 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 73 ca 01 00       	call   c00270eb <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 d3 da 01 00       	call   c002815f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 bc d0 01 00       	call   c0027768 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 25 ca 01 00       	call   c00270eb <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 85 da 01 00       	call   c002815f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 6e d0 01 00       	call   c0027768 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 d7 c9 01 00       	call   c00270eb <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 37 da 01 00       	call   c002815f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 20 d0 01 00       	call   c0027768 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 89 c9 01 00       	call   c00270eb <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 e9 d9 01 00       	call   c002815f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 d2 cf 01 00       	call   c0027768 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 38 c9 01 00       	call   c00270eb <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 98 d9 01 00       	call   c002815f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 81 cf 01 00       	call   c0027768 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 ea c8 01 00       	call   c00270eb <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 e4 c1 01 00       	call   c0026a80 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 bb d8 01 00       	call   c002815f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 a4 ce 01 00       	call   c0027768 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 84 d8 01 00       	call   c002815f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 f6 c7 01 00       	call   c00270eb <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 56 d8 01 00       	call   c002815f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 3f ce 01 00       	call   c0027768 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 a8 c7 01 00       	call   c00270eb <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 08 d8 01 00       	call   c002815f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 f1 cd 01 00       	call   c0027768 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 5a c7 01 00       	call   c00270eb <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 ba d7 01 00       	call   c002815f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 a3 cd 01 00       	call   c0027768 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 0c c7 01 00       	call   c00270eb <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 6c d7 01 00       	call   c002815f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 55 cd 01 00       	call   c0027768 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 be c6 01 00       	call   c00270eb <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 1e d7 01 00       	call   c002815f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 07 cd 01 00       	call   c0027768 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 6d c6 01 00       	call   c00270eb <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 cd d6 01 00       	call   c002815f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 b6 cc 01 00       	call   c0027768 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 25 c6 01 00       	call   c00270eb <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 fe c5 01 00       	call   c00270eb <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 5c cc 01 00       	call   c0027768 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 18 d5 01 00       	call   c002803b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 a7 c5 01 00       	call   c00270eb <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 05 cc 01 00       	call   c0027768 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 c1 d4 01 00       	call   c002803b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 4f c5 01 00       	call   c00270eb <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 ad cb 01 00       	call   c0027768 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 69 d4 01 00       	call   c002803b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 f7 c4 01 00       	call   c00270eb <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 55 cb 01 00       	call   c0027768 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 11 d4 01 00       	call   c002803b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 9f c4 01 00       	call   c00270eb <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 fd ca 01 00       	call   c0027768 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 b9 d3 01 00       	call   c002803b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 4d c4 01 00       	call   c00270eb <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 ab ca 01 00       	call   c0027768 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 67 d3 01 00       	call   c002803b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 7b bc 01 00       	call   c0026a80 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 52 d3 01 00       	call   c002815f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 3b c9 01 00       	call   c0027768 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 22 d3 01 00       	call   c002815f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 94 c2 01 00       	call   c00270eb <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 24 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd65dc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 c8 d2 01 00       	call   c002815f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 b1 c8 01 00       	call   c0027768 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 1c c2 01 00       	call   c00270eb <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 69 d2 01 00       	call   c002815f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 52 c8 01 00       	call   c0027768 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 bd c1 01 00       	call   c00270eb <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 0a d2 01 00       	call   c002815f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 f3 c7 01 00       	call   c0027768 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 5e c1 01 00       	call   c00270eb <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 ab d1 01 00       	call   c002815f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 94 c7 01 00       	call   c0027768 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 ff c0 01 00       	call   c00270eb <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 4c d1 01 00       	call   c002815f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 35 c7 01 00       	call   c0027768 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 a0 c0 01 00       	call   c00270eb <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 ed d0 01 00       	call   c002815f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 d6 c6 01 00       	call   c0027768 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 41 c0 01 00       	call   c00270eb <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 8e d0 01 00       	call   c002815f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 77 c6 01 00       	call   c0027768 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 e2 bf 01 00       	call   c00270eb <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 2f d0 01 00       	call   c002815f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 18 c6 01 00       	call   c0027768 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 83 bf 01 00       	call   c00270eb <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 8d b8 01 00       	call   c0026a80 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 64 cf 01 00       	call   c002815f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 4d c5 01 00       	call   c0027768 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 34 cf 01 00       	call   c002815f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 a6 be 01 00       	call   c00270eb <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 40 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd65c0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 d9 ce 01 00       	call   c002815f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 c2 c4 01 00       	call   c0027768 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 2d be 01 00       	call   c00270eb <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 79 ce 01 00       	call   c002815f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 62 c4 01 00       	call   c0027768 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 cd bd 01 00       	call   c00270eb <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 19 ce 01 00       	call   c002815f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 02 c4 01 00       	call   c0027768 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 6d bd 01 00       	call   c00270eb <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 b9 cd 01 00       	call   c002815f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 a2 c3 01 00       	call   c0027768 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 0d bd 01 00       	call   c00270eb <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 59 cd 01 00       	call   c002815f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 42 c3 01 00       	call   c0027768 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 ad bc 01 00       	call   c00270eb <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 f9 cc 01 00       	call   c002815f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 e2 c2 01 00       	call   c0027768 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 4d bc 01 00       	call   c00270eb <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 99 cc 01 00       	call   c002815f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 82 c2 01 00       	call   c0027768 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 ed bb 01 00       	call   c00270eb <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 39 cc 01 00       	call   c002815f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 22 c2 01 00       	call   c0027768 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 8d bb 01 00       	call   c00270eb <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 5c 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd65a4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 32 bb 01 00       	call   c00270eb <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 8f c1 01 00       	call   c0027768 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 4b ca 01 00       	call   c002803b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 d5 ba 01 00       	call   c00270eb <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 32 c1 01 00       	call   c0027768 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 ee c9 01 00       	call   c002803b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 78 ba 01 00       	call   c00270eb <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 d5 c0 01 00       	call   c0027768 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 91 c9 01 00       	call   c002803b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 1b ba 01 00       	call   c00270eb <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 78 c0 01 00       	call   c0027768 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 34 c9 01 00       	call   c002803b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 be b9 01 00       	call   c00270eb <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 1b c0 01 00       	call   c0027768 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 d7 c8 01 00       	call   c002803b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 61 b9 01 00       	call   c00270eb <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 be bf 01 00       	call   c0027768 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 7a c8 01 00       	call   c002803b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 04 b9 01 00       	call   c00270eb <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 61 bf 01 00       	call   c0027768 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 1d c8 01 00       	call   c002803b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 a7 b8 01 00       	call   c00270eb <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 04 bf 01 00       	call   c0027768 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 c0 c7 01 00       	call   c002803b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 bc be 01 00       	call   c0027768 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 34 c9 01 00       	jmp    c00281f0 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 9e c5 01 00       	call   c0028037 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 5c c5 01 00       	call   c0028019 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 f3 c2 01 00       	call   c0027dcb <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 f4 b5 01 00       	call   c00270eb <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 c3 c2 01 00       	call   c0027dcb <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 2a bf 01 00       	call   c0027a4c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 c9 c4 01 00       	call   c0028019 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 cc c4 01 00       	call   c0028037 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 9f c4 01 00       	call   c0028037 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 98 be 01 00       	call   c0027a4c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 22 c6 01 00       	call   c00281f0 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 fd c5 01 00       	call   c00281f0 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 cf c1 01 00       	call   c0027dcb <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 26 bb 01 00       	call   c002773c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 05 c4 01 00       	call   c0028037 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 9e b4 01 00       	call   c00270eb <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 c2 ba 01 00       	call   c002773c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 64 c5 01 00       	call   c00281f0 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 9c bd 01 00       	call   c0027a4c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 19 b4 01 00       	call   c00270eb <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 45 c0 01 00       	call   c0027dcb <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 45 b3 01 00       	call   c00270eb <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 25 b3 01 00       	call   c00270eb <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 f5 bf 01 00       	call   c0027dcb <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 45 c2 01 00       	call   c0028035 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 24 b9 01 00       	call   c002773c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 a6 c3 01 00       	call   c00281d0 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 cd c1 01 00       	call   c0028019 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 cb b8 01 00       	call   c002773c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 49 bf 01 00       	call   c0027dcb <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 cc b8 01 00       	call   c0027768 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 1e bf 01 00       	call   c0027dcb <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 85 bb 01 00       	call   c0027a4c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 04 b2 01 00       	call   c00270eb <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 ce be 01 00       	call   c0027dcb <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 1a c1 01 00       	call   c0028037 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 0f b8 01 00       	call   c0027768 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 e1 b7 01 00       	call   c0027768 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 1a be 01 00       	call   c0027dcb <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 7e ba 01 00       	call   c0027a4c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 46 ba 01 00       	call   c0027a4c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 c5 b0 01 00       	call   c00270eb <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 b2 c1 01 00       	call   c00281f0 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 84 bd 01 00       	call   c0027dcb <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 db b6 01 00       	call   c002773c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 ba bf 01 00       	call   c0028037 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 52 b0 01 00       	call   c00270eb <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 76 b6 01 00       	call   c002773c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 18 c1 01 00       	call   c00281f0 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 d9 be 01 00       	call   c0028037 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 97 be 01 00       	call   c0028019 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 2e bc 01 00       	call   c0027dcb <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 2f af 01 00       	call   c00270eb <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 fe bb 01 00       	call   c0027dcb <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 65 b8 01 00       	call   c0027a4c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 04 be 01 00       	call   c0028019 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 07 be 01 00       	call   c0028037 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 da bd 01 00       	call   c0028037 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 d3 b7 01 00       	call   c0027a4c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 5d bf 01 00       	call   c00281f0 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 38 bf 01 00       	call   c00281f0 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 0a bb 01 00       	call   c0027dcb <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 61 b4 01 00       	call   c002773c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 40 bd 01 00       	call   c0028037 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 d9 ad 01 00       	call   c00270eb <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 fd b3 01 00       	call   c002773c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 9f be 01 00       	call   c00281f0 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 d7 b6 01 00       	call   c0027a4c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 54 ad 01 00       	call   c00270eb <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 7f b9 01 00       	call   c0027dcb <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 7f ac 01 00       	call   c00270eb <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 5f ac 01 00       	call   c00270eb <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 2f b9 01 00       	call   c0027dcb <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 7f bb 01 00       	call   c0028035 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 5d b2 01 00       	call   c002773c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 df bc 01 00       	call   c00281d0 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 06 bb 01 00       	call   c0028019 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 03 b2 01 00       	call   c002773c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 81 b8 01 00       	call   c0027dcb <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 04 b2 01 00       	call   c0027768 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 56 b8 01 00       	call   c0027dcb <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 bd b4 01 00       	call   c0027a4c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 3c ab 01 00       	call   c00270eb <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 06 b8 01 00       	call   c0027dcb <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 52 ba 01 00       	call   c0028037 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 47 b1 01 00       	call   c0027768 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 19 b1 01 00       	call   c0027768 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 50 b7 01 00       	call   c0027dcb <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 b4 b3 01 00       	call   c0027a4c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 81 b3 01 00       	call   c0027a4c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 00 aa 01 00       	call   c00270eb <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 ed ba 01 00       	call   c00281f0 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 bf b6 01 00       	call   c0027dcb <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 16 b0 01 00       	call   c002773c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 f5 b8 01 00       	call   c0028037 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 8d a9 01 00       	call   c00270eb <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 b1 af 01 00       	call   c002773c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 53 ba 01 00       	call   c00281f0 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 14 b8 01 00       	call   c0028037 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 d2 b7 01 00       	call   c0028019 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 69 b5 01 00       	call   c0027dcb <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 6a a8 01 00       	call   c00270eb <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 39 b5 01 00       	call   c0027dcb <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 a0 b1 01 00       	call   c0027a4c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 3f b7 01 00       	call   c0028019 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 42 b7 01 00       	call   c0028037 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 15 b7 01 00       	call   c0028037 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 0e b1 01 00       	call   c0027a4c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 98 b8 01 00       	call   c00281f0 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 73 b8 01 00       	call   c00281f0 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 45 b4 01 00       	call   c0027dcb <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 9c ad 01 00       	call   c002773c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 7b b6 01 00       	call   c0028037 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 14 a7 01 00       	call   c00270eb <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 38 ad 01 00       	call   c002773c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 da b7 01 00       	call   c00281f0 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 12 b0 01 00       	call   c0027a4c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 8f a6 01 00       	call   c00270eb <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 ba b2 01 00       	call   c0027dcb <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 ba a5 01 00       	call   c00270eb <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 9a a5 01 00       	call   c00270eb <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 6a b2 01 00       	call   c0027dcb <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 ba b4 01 00       	call   c0028035 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 98 ab 01 00       	call   c002773c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 1a b6 01 00       	call   c00281d0 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 41 b4 01 00       	call   c0028019 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 3e ab 01 00       	call   c002773c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 bc b1 01 00       	call   c0027dcb <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 3f ab 01 00       	call   c0027768 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 91 b1 01 00       	call   c0027dcb <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 f8 ad 01 00       	call   c0027a4c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 77 a4 01 00       	call   c00270eb <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 41 b1 01 00       	call   c0027dcb <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 8d b3 01 00       	call   c0028037 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 82 aa 01 00       	call   c0027768 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 54 aa 01 00       	call   c0027768 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 8b b0 01 00       	call   c0027dcb <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 ef ac 01 00       	call   c0027a4c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 bc ac 01 00       	call   c0027a4c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 3b a3 01 00       	call   c00270eb <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 28 b4 01 00       	call   c00281f0 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 fa af 01 00       	call   c0027dcb <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 51 a9 01 00       	call   c002773c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 30 b2 01 00       	call   c0028037 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 c8 a2 01 00       	call   c00270eb <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 ec a8 01 00       	call   c002773c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 8e b3 01 00       	call   c00281f0 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 4f b1 01 00       	call   c0028037 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 0d b1 01 00       	call   c0028019 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 a4 ae 01 00       	call   c0027dcb <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 a5 a1 01 00       	call   c00270eb <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 74 ae 01 00       	call   c0027dcb <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 db aa 01 00       	call   c0027a4c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 7a b0 01 00       	call   c0028019 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 7d b0 01 00       	call   c0028037 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 50 b0 01 00       	call   c0028037 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 49 aa 01 00       	call   c0027a4c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 d3 b1 01 00       	call   c00281f0 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 ae b1 01 00       	call   c00281f0 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 80 ad 01 00       	call   c0027dcb <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 d7 a6 01 00       	call   c002773c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 b6 af 01 00       	call   c0028037 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 4f a0 01 00       	call   c00270eb <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 73 a6 01 00       	call   c002773c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 15 b1 01 00       	call   c00281f0 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 4d a9 01 00       	call   c0027a4c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 ca 9f 01 00       	call   c00270eb <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 f5 ab 01 00       	call   c0027dcb <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 f5 9e 01 00       	call   c00270eb <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 d5 9e 01 00       	call   c00270eb <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 a5 ab 01 00       	call   c0027dcb <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 f5 ad 01 00       	call   c0028035 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 d3 a4 01 00       	call   c002773c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 55 af 01 00       	call   c00281d0 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 7c ad 01 00       	call   c0028019 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 79 a4 01 00       	call   c002773c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 f7 aa 01 00       	call   c0027dcb <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 7a a4 01 00       	call   c0027768 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 cc aa 01 00       	call   c0027dcb <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 33 a7 01 00       	call   c0027a4c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 b2 9d 01 00       	call   c00270eb <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 7c aa 01 00       	call   c0027dcb <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 c8 ac 01 00       	call   c0028037 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 bd a3 01 00       	call   c0027768 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 8f a3 01 00       	call   c0027768 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 c6 a9 01 00       	call   c0027dcb <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 2a a6 01 00       	call   c0027a4c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 f7 a5 01 00       	call   c0027a4c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 76 9c 01 00       	call   c00270eb <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 63 ad 01 00       	call   c00281f0 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 35 a9 01 00       	call   c0027dcb <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 8c a2 01 00       	call   c002773c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 6b ab 01 00       	call   c0028037 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 03 9c 01 00       	call   c00270eb <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 27 a2 01 00       	call   c002773c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 c9 ac 01 00       	call   c00281f0 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 87 aa 01 00       	call   c0028037 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 45 aa 01 00       	call   c0028019 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 dc a7 01 00       	call   c0027dcb <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 dd 9a 01 00       	call   c00270eb <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 ac a7 01 00       	call   c0027dcb <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 13 a4 01 00       	call   c0027a4c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 b2 a9 01 00       	call   c0028019 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 b5 a9 01 00       	call   c0028037 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 88 a9 01 00       	call   c0028037 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 81 a3 01 00       	call   c0027a4c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 0b ab 01 00       	call   c00281f0 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 e2 aa 01 00       	call   c00281f0 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 b4 a6 01 00       	call   c0027dcb <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 0b a0 01 00       	call   c002773c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 ea a8 01 00       	call   c0028037 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 83 99 01 00       	call   c00270eb <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 ab 9f 01 00       	call   c002773c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 4d aa 01 00       	call   c00281f0 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 86 a2 01 00       	call   c0027a4c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 03 99 01 00       	call   c00270eb <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 2f a5 01 00       	call   c0027dcb <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 2f 98 01 00       	call   c00270eb <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 0f 98 01 00       	call   c00270eb <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 df a4 01 00       	call   c0027dcb <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 13 a7 01 00       	call   c0028019 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 0a 9e 01 00       	call   c002773c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 8c a8 01 00       	call   c00281d0 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 b3 a6 01 00       	call   c0028019 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 ad 9d 01 00       	call   c002773c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 2b a4 01 00       	call   c0027dcb <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 ae 9d 01 00       	call   c0027768 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 00 a4 01 00       	call   c0027dcb <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 67 a0 01 00       	call   c0027a4c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 e6 96 01 00       	call   c00270eb <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 b0 a3 01 00       	call   c0027dcb <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 fc a5 01 00       	call   c0028037 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 f1 9c 01 00       	call   c0027768 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 c3 9c 01 00       	call   c0027768 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 07 a3 01 00       	call   c0027dcb <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 6e 9f 01 00       	call   c0027a4c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 57 9c 01 00       	call   c0027768 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 13 a5 01 00       	call   c002803b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 06 9f 01 00       	call   c0027a4c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 85 95 01 00       	call   c00270eb <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 72 a6 01 00       	call   c00281f0 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 44 a2 01 00       	call   c0027dcb <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 9b 9b 01 00       	call   c002773c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 7a a4 01 00       	call   c0028037 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 12 95 01 00       	call   c00270eb <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 3a 9b 01 00       	call   c002773c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 dc a5 01 00       	call   c00281f0 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 84 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd657c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 78 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6588]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 8f a2 01 00       	call   c0028037 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 4d a2 01 00       	call   c0028019 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 39 a2 01 00       	call   c0028037 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 ab 9f 01 00       	call   c0027dcb <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 29 99 01 00       	call   c0027768 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 7b 9f 01 00       	call   c0027dcb <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 81 92 01 00       	call   c00270eb <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 50 9f 01 00       	call   c0027dcb <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 a0 a1 01 00       	call   c0028035 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 81 98 01 00       	call   c002773c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 03 a3 01 00       	call   c00281d0 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 2a a1 01 00       	call   c0028019 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 29 98 01 00       	call   c002773c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 a7 9e 01 00       	call   c0027dcb <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 2a 98 01 00       	call   c0027768 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 7c 9e 01 00       	call   c0027dcb <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 e3 9a 01 00       	call   c0027a4c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 62 91 01 00       	call   c00270eb <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 8a 9a 01 00       	call   c0027a4c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 10 91 01 00       	call   c00270eb <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 fe a1 01 00       	call   c00281f0 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 d0 9d 01 00       	call   c0027dcb <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 27 97 01 00       	call   c002773c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 06 a0 01 00       	call   c0028037 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 9f 90 01 00       	call   c00270eb <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 cb 96 01 00       	call   c002773c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 6d a1 01 00       	call   c00281f0 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 1a 9d 01 00       	call   c0027dcb <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 97 96 01 00       	call   c0027768 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 e8 9c 01 00       	call   c0027dcb <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 ee 8f 01 00       	call   c00270eb <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 be 9c 01 00       	call   c0027dcb <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 12 9f 01 00       	call   c0028039 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 eb 95 01 00       	call   c002773c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 6d a0 01 00       	call   c00281d0 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 94 9e 01 00       	call   c0028019 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 92 95 01 00       	call   c002773c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 10 9c 01 00       	call   c0027dcb <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 93 95 01 00       	call   c0027768 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 e5 9b 01 00       	call   c0027dcb <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 4c 98 01 00       	call   c0027a4c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 cb 8e 01 00       	call   c00270eb <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 e7 97 01 00       	call   c0027a4c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 66 8e 01 00       	call   c00270eb <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 54 9f 01 00       	call   c00281f0 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 26 9b 01 00       	call   c0027dcb <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 7d 94 01 00       	call   c002773c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 5c 9d 01 00       	call   c0028037 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 f5 8d 01 00       	call   c00270eb <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 21 94 01 00       	call   c002773c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 92 9a 01 00       	call   c0027dcb <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 98 8d 01 00       	call   c00270eb <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 9e 9b 02 c0       	mov    eax,0xc0029b9e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 af 9b 02 c0       	mov    eax,0xc0029baf
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c000e4e3:	ff 05 04 0b 03 c0    	inc    DWORD PTR ds:0xc0030b04
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 04 0b 03 c0       	mov    ds:0xc0030b04,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 00 0b 03 c0 00 	cmp    DWORD PTR ds:0xc0030b00,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 00 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b00,0x0
c000e50d:	e8 0d f3 00 00       	call   c001d81f <schedule()>
c000e512:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c000e517:	48                   	dec    eax
c000e518:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 50 d7 02 c0       	mov    eax,ds:0xc002d750
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 e6 9b 02 c0       	push   0xc0029be6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 e8 d5 02 c0       	mov    eax,0xc002d5e8
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 ef 9b 02 c0       	push   0xc0029bef
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 64 65 02 c0       	mov    eax,0xc0026564
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 f9 9b 02 c0       	push   0xc0029bf9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 98 62 02 c0       	mov    eax,0xc0026298
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 02 9c 02 c0       	push   0xc0029c02
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 64 66 02 c0       	mov    eax,0xc0026664
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 0c 9c 02 c0       	push   0xc0029c0c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 e4 63 02 c0       	mov    eax,0xc00263e4
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 15 9c 02 c0       	push   0xc0029c15
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 ec d5 02 c0       	mov    eax,0xc002d5ec
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 22 9c 02 c0       	push   0xc0029c22
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 ed d5 02 c0       	mov    eax,0xc002d5ed
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 8b 54 00 00       	call   c0013af8 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 2f 9c 02 c0       	push   0xc0029c2f
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 30 0b 03 c0    	push   DWORD PTR ds:0xc0030b30
c000e6be:	68 48 9c 02 c0       	push   0xc0029c48
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 37 ed 00 00       	call   c001d402 <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 1a ef 00 00       	call   c001d5fa <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 de df 01 c0       	push   0xc001dfde
c000e6e9:	ff 35 30 0b 03 c0    	push   DWORD PTR ds:0xc0030b30
c000e6ef:	e8 06 ef 00 00       	call   c001d5fa <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 e8 0a 03 c0       	mov    ds:0xc0030ae8,eax
c000e6fc:	68 2c 9d 02 c0       	push   0xc0029d2c
c000e701:	c6 05 ed d5 02 c0 01 	mov    BYTE PTR ds:0xc002d5ed,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 77 fc 00 00       	call   c001e389 <Vm::initialise8086()>
c000e712:	e8 a9 41 00 00       	call   c00128c0 <Fs::initVFS()>
c000e717:	c7 04 24 55 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c55
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 2c 9d 02 c0       	push   0xc0029d2c
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 43 d5 00 00       	call   c001bc8f <Sys::loadSyscalls()>
c000e74c:	e8 3b b4 00 00       	call   c0019b8c <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 6f 9c 02 c0       	push   0xc0029c6f
c000e75b:	68 78 9c 02 c0       	push   0xc0029c78
c000e760:	e8 ec c2 00 00       	call   c001aa51 <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 43 4c 00 00       	call   c00133b0 <User::loadClockSettings(int)>
c000e76d:	c7 04 24 50 9d 02 c0 	mov    DWORD PTR [esp],0xc0029d50
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 2e 53 00 00       	call   c0013ab8 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 80 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c80
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 59 af 00 00       	call   c00196f4 <Krnl::startCPUs()>
c000e79b:	c7 04 24 9a 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c9a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d e8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5e8
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 ab 9c 02 c0       	push   0xc0029cab
c000e7b6:	e8 a4 e6 00 00       	call   c001ce5f <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 c6 e8 00 00       	call   c001d08a <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 24 f2 00 00       	call   c001d9f5 <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 c7 9c 02 c0       	push   0xc0029cc7
c000e7e5:	50                   	push   eax
c000e7e6:	e8 87 53 00 00       	call   c0013b72 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 9c 9d 02 c0       	mov    edx,0xc0029d9c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 01 d6 02 c0 04 	test   BYTE PTR ds:0xc002d601,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 a7 78 01 00       	call   c0026226 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 cc 9c 00 00       	call   c0018686 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 a5 9c 00 00       	call   c0018686 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 83 9c 00 00       	call   c0018686 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 61 9c 00 00       	call   c0018686 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 00 d6 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d600,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 6f 9b 00 00       	call   c0018602 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 4a 9b 00 00       	call   c0018602 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 11 77 01 00       	call   c00261e0 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 ce 76 01 00       	call   c00261c0 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 66 9b 00 00       	call   c0018686 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 d0 9c 02 c0       	push   0xc0029cd0
c000eb62:	e8 2e b1 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 d6 9c 02 c0       	push   0xc0029cd6
c000eb9a:	e8 f6 b0 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 70 9d 02 c0       	push   0xc0029d70
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 00 d6 02 c0 04 	test   BYTE PTR ds:0xc002d600,0x4
c000ec03:	0f 94 05 20 c5 02 c0 	sete   BYTE PTR ds:0xc002c520
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 e1 8c 00 00       	call   c00178fa <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 46 4d 00 00       	call   c001396e <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 80 9c 02 c0 	mov    DWORD PTR [esp],0xc0029c80
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 e2 9a 00 00       	call   c001873e <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 03 4d 00 00       	call   c001396e <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 7f 52 00 00       	call   c0013f06 <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 d3 4c 00 00       	call   c001396e <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 dc 9c 02 c0       	push   0xc0029cdc
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 53 ea 00 00       	call   c001d71c <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 f7 9c 02 c0       	push   0xc0029cf7
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 1e 38 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 08 9d 02 c0       	push   0xc0029d08
c000ed34:	e8 5c af 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 15 9d 02 c0       	push   0xc0029d15
c000ed49:	e8 47 af 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 1f 9d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029d1f
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 30 af 00 00       	jmp    c0019c95 <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 f2 d5 02 c0       	mov    ds:0xc002d5f2,eax
c000ee21:	66 89 15 f0 d5 02 c0 	mov    WORD PTR ds:0xc002d5f0,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c000ef38:	48                   	dec    eax
c000ef39:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 e8 d5 02 c0    	push   DWORD PTR ds:0xc002d5e8
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 e1 92 01 00       	call   c0028270 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 d8 92 01 00       	call   c0028270 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 f8 d5 02 c0 ff 07 	mov    WORD PTR ds:0xc002d5f8,0x7ff
c000f085:	a3 fa d5 02 c0       	mov    ds:0xc002d5fa,eax
c000f08a:	0f 01 1d f8 d5 02 c0 	lidtd  ds:0xc002d5f8
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 50 d7 02 c0    	push   DWORD PTR ds:0xc002d750
c000f37c:	e8 db 26 00 00       	call   c0011a5c <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 45 17 00 00       	call   c0010ae4 <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 76 17 00 00       	call   c0010b24 <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 e8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5e8
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d b4 c3 02 c0    	mov    ecx,DWORD PTR ds:0xc002c3b4
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 b4 c3 02 c0       	mov    eax,ds:0xc002c3b4
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 c0 9d 02 c0       	push   0xc0029dc0
c000f455:	e8 db 30 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 b4 c3 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c3b4,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d 50 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d750
c000f481:	8b 2d b4 c3 02 c0    	mov    ebp,DWORD PTR ds:0xc002c3b4
c000f487:	e8 b1 04 00 00       	call   c000f93d <Phys::allocatePage()>
c000f48c:	68 01 04 00 00       	push   0x401
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 c1 24 00 00       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d b4 c3 02 c0    	mov    ebx,DWORD PTR ds:0xc002c3b4
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 f0 9d 02 c0       	push   0xc0029df0
c000f50d:	e8 83 a7 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 f5 9d 02 c0       	push   0xc0029df5
c000f523:	e8 6d a7 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c000f543:	48                   	dec    eax
c000f544:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 50 d7 02 c0    	push   DWORD PTR ds:0xc002d750
c000f561:	e8 f6 24 00 00       	call   c0011a5c <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 50 d7 02 c0    	push   DWORD PTR ds:0xc002d750
c000f577:	e8 8a 21 00 00       	call   c0011706 <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 fc 9d 02 c0       	push   0xc0029dfc
c000f6a4:	e8 8c 2e 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 38 09 00 00       	call   c000ffe6 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 c0 c3 02 c0 	movzx  eax,BYTE PTR ds:0xc002c3c0
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 c0 c3 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3c40]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 f6 c3 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd3c0a],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 f5 c3 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd3c0b]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 c0 c3 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd3c40]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 14 9e 02 c0       	push   0xc0029e14
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 00 d6 02 c0       	mov    ds:0xc002d600,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 24 03 00 00       	call   c000fa7a <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 01 1c 00 00       	call   c001135c <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 c8 1d 00 00       	call   c001152e <VAS::VAS()>
c000f766:	89 1d 50 d7 02 c0    	mov    DWORD PTR ds:0xc002d750,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 e8 d5 02 c0    	mov    DWORD PTR ds:0xc002d5e8,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 3c 20 00 00       	call   c00117de <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 d2                	xor    edx,edx
c000f7ac:	57                   	push   edi
c000f7ad:	31 ed                	xor    ebp,ebp
c000f7af:	56                   	push   esi
c000f7b0:	31 c9                	xor    ecx,ecx
c000f7b2:	53                   	push   ebx
c000f7b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7b7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7bd:	31 c0                	xor    eax,eax
c000f7bf:	c1 ee 0c             	shr    esi,0xc
c000f7c2:	eb 17                	jmp    c000f7db <Phys::allocateDMA(unsigned long)+0x32>
c000f7c4:	85 c9                	test   ecx,ecx
c000f7c6:	75 04                	jne    c000f7cc <Phys::allocateDMA(unsigned long)+0x23>
c000f7c8:	89 d5                	mov    ebp,edx
c000f7ca:	89 d0                	mov    eax,edx
c000f7cc:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f7cf:	39 de                	cmp    esi,ebx
c000f7d1:	74 20                	je     c000f7f3 <Phys::allocateDMA(unsigned long)+0x4a>
c000f7d3:	42                   	inc    edx
c000f7d4:	89 d9                	mov    ecx,ebx
c000f7d6:	83 fa 2f             	cmp    edx,0x2f
c000f7d9:	7f 11                	jg     c000f7ec <Phys::allocateDMA(unsigned long)+0x43>
c000f7db:	80 ba 40 d6 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd29c0],0x0
c000f7e2:	74 e0                	je     c000f7c4 <Phys::allocateDMA(unsigned long)+0x1b>
c000f7e4:	31 c9                	xor    ecx,ecx
c000f7e6:	42                   	inc    edx
c000f7e7:	83 fa 2f             	cmp    edx,0x2f
c000f7ea:	7e ef                	jle    c000f7db <Phys::allocateDMA(unsigned long)+0x32>
c000f7ec:	5b                   	pop    ebx
c000f7ed:	31 c0                	xor    eax,eax
c000f7ef:	5e                   	pop    esi
c000f7f0:	5f                   	pop    edi
c000f7f1:	5d                   	pop    ebp
c000f7f2:	c3                   	ret    
c000f7f3:	8d 14 30             	lea    edx,[eax+esi*1]
c000f7f6:	89 d7                	mov    edi,edx
c000f7f8:	4f                   	dec    edi
c000f7f9:	79 03                	jns    c000f7fe <Phys::allocateDMA(unsigned long)+0x55>
c000f7fb:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f7fe:	c1 ff 04             	sar    edi,0x4
c000f801:	89 c2                	mov    edx,eax
c000f803:	c1 fa 04             	sar    edx,0x4
c000f806:	39 fa                	cmp    edx,edi
c000f808:	75 2f                	jne    c000f839 <Phys::allocateDMA(unsigned long)+0x90>
c000f80a:	85 db                	test   ebx,ebx
c000f80c:	74 1a                	je     c000f828 <Phys::allocateDMA(unsigned long)+0x7f>
c000f80e:	be 40 d6 02 c0       	mov    esi,0xc002d640
c000f813:	8d 90 40 d6 02 c0    	lea    edx,[eax-0x3ffd29c0]
c000f819:	f7 d6                	not    esi
c000f81b:	29 c6                	sub    esi,eax
c000f81d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f820:	42                   	inc    edx
c000f821:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f824:	39 d9                	cmp    ecx,ebx
c000f826:	7f f5                	jg     c000f81d <Phys::allocateDMA(unsigned long)+0x74>
c000f828:	85 ff                	test   edi,edi
c000f82a:	74 13                	je     c000f83f <Phys::allocateDMA(unsigned long)+0x96>
c000f82c:	5b                   	pop    ebx
c000f82d:	05 50 20 0c 00       	add    eax,0xc2050
c000f832:	5e                   	pop    esi
c000f833:	c1 e0 0c             	shl    eax,0xc
c000f836:	5f                   	pop    edi
c000f837:	5d                   	pop    ebp
c000f838:	c3                   	ret    
c000f839:	89 ea                	mov    edx,ebp
c000f83b:	31 c9                	xor    ecx,ecx
c000f83d:	eb a7                	jmp    c000f7e6 <Phys::allocateDMA(unsigned long)+0x3d>
c000f83f:	5b                   	pop    ebx
c000f840:	c1 e0 0c             	shl    eax,0xc
c000f843:	5e                   	pop    esi
c000f844:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f849:	5f                   	pop    edi
c000f84a:	5d                   	pop    ebp
c000f84b:	c3                   	ret    

c000f84c <Phys::freeDMA(unsigned long, unsigned long)>:
c000f84c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f850:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f854:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f85a:	c1 e9 0c             	shr    ecx,0xc
c000f85d:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f862:	76 25                	jbe    c000f889 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f864:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f869:	c1 e8 0c             	shr    eax,0xc
c000f86c:	8d 50 10             	lea    edx,[eax+0x10]
c000f86f:	85 c9                	test   ecx,ecx
c000f871:	74 15                	je     c000f888 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f873:	8d 82 40 d6 02 c0    	lea    eax,[edx-0x3ffd29c0]
c000f879:	8d 94 11 40 d6 02 c0 	lea    edx,[ecx+edx*1-0x3ffd29c0]
c000f880:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f883:	40                   	inc    eax
c000f884:	39 d0                	cmp    eax,edx
c000f886:	75 f8                	jne    c000f880 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f888:	c3                   	ret    
c000f889:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f88f:	c1 ea 0c             	shr    edx,0xc
c000f892:	eb db                	jmp    c000f86f <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f894 <Phys::setPageState(unsigned long, bool)>:
c000f894:	56                   	push   esi
c000f895:	ba 01 00 00 00       	mov    edx,0x1
c000f89a:	53                   	push   ebx
c000f89b:	8b 35 04 c5 02 c0    	mov    esi,DWORD PTR ds:0xc002c504
c000f8a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8a9:	89 c8                	mov    eax,ecx
c000f8ab:	83 e1 07             	and    ecx,0x7
c000f8ae:	c1 e8 03             	shr    eax,0x3
c000f8b1:	d3 e3                	shl    ebx,cl
c000f8b3:	01 c6                	add    esi,eax
c000f8b5:	d3 e2                	shl    edx,cl
c000f8b7:	f7 d2                	not    edx
c000f8b9:	20 16                	and    BYTE PTR [esi],dl
c000f8bb:	03 05 04 c5 02 c0    	add    eax,DWORD PTR ds:0xc002c504
c000f8c1:	08 18                	or     BYTE PTR [eax],bl
c000f8c3:	5b                   	pop    ebx
c000f8c4:	5e                   	pop    esi
c000f8c5:	c3                   	ret    

c000f8c6 <Phys::getPageState(unsigned long)>:
c000f8c6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8ca:	8b 15 04 c5 02 c0    	mov    edx,DWORD PTR ds:0xc002c504
c000f8d0:	89 c8                	mov    eax,ecx
c000f8d2:	83 e1 07             	and    ecx,0x7
c000f8d5:	c1 e8 03             	shr    eax,0x3
c000f8d8:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f8dc:	d3 f8                	sar    eax,cl
c000f8de:	83 e0 01             	and    eax,0x1
c000f8e1:	c3                   	ret    

c000f8e2 <Phys::freePage(unsigned long)>:
c000f8e2:	53                   	push   ebx
c000f8e3:	83 ec 08             	sub    esp,0x8
c000f8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8ea:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000f8ef:	76 3a                	jbe    c000f92b <Phys::freePage(unsigned long)+0x49>
c000f8f1:	c1 e8 0c             	shr    eax,0xc
c000f8f4:	50                   	push   eax
c000f8f5:	89 c3                	mov    ebx,eax
c000f8f7:	e8 ca ff ff ff       	call   c000f8c6 <Phys::getPageState(unsigned long)>
c000f8fc:	5a                   	pop    edx
c000f8fd:	84 c0                	test   al,al
c000f8ff:	74 19                	je     c000f91a <Phys::freePage(unsigned long)+0x38>
c000f901:	83 ec 08             	sub    esp,0x8
c000f904:	ff 0d 30 d6 02 c0    	dec    DWORD PTR ds:0xc002d630
c000f90a:	6a 00                	push   0x0
c000f90c:	53                   	push   ebx
c000f90d:	e8 82 ff ff ff       	call   c000f894 <Phys::setPageState(unsigned long, bool)>
c000f912:	83 c4 10             	add    esp,0x10
c000f915:	83 c4 08             	add    esp,0x8
c000f918:	5b                   	pop    ebx
c000f919:	c3                   	ret    
c000f91a:	c7 44 24 10 33 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029e33
c000f922:	83 c4 08             	add    esp,0x8
c000f925:	5b                   	pop    ebx
c000f926:	e9 6a a3 00 00       	jmp    c0019c95 <Krnl::panic(char const*)>
c000f92b:	68 00 10 00 00       	push   0x1000
c000f930:	50                   	push   eax
c000f931:	e8 16 ff ff ff       	call   c000f84c <Phys::freeDMA(unsigned long, unsigned long)>
c000f936:	59                   	pop    ecx
c000f937:	5b                   	pop    ebx
c000f938:	83 c4 08             	add    esp,0x8
c000f93b:	5b                   	pop    ebx
c000f93c:	c3                   	ret    

c000f93d <Phys::allocatePage()>:
c000f93d:	56                   	push   esi
c000f93e:	53                   	push   ebx
c000f93f:	51                   	push   ecx
c000f940:	8b 35 24 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d624
c000f946:	89 f3                	mov    ebx,esi
c000f948:	eb 0a                	jmp    c000f954 <Phys::allocatePage()+0x17>
c000f94a:	89 1d 24 d6 02 c0    	mov    DWORD PTR ds:0xc002d624,ebx
c000f950:	39 de                	cmp    esi,ebx
c000f952:	74 24                	je     c000f978 <Phys::allocatePage()+0x3b>
c000f954:	53                   	push   ebx
c000f955:	e8 6c ff ff ff       	call   c000f8c6 <Phys::getPageState(unsigned long)>
c000f95a:	5a                   	pop    edx
c000f95b:	84 c0                	test   al,al
c000f95d:	74 6b                	je     c000f9ca <Phys::allocatePage()+0x8d>
c000f95f:	43                   	inc    ebx
c000f960:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f966:	75 e2                	jne    c000f94a <Phys::allocatePage()+0xd>
c000f968:	31 db                	xor    ebx,ebx
c000f96a:	c7 05 24 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d624,0x0
c000f974:	39 de                	cmp    esi,ebx
c000f976:	75 dc                	jne    c000f954 <Phys::allocatePage()+0x17>
c000f978:	83 ec 0c             	sub    esp,0xc
c000f97b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f980:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f983:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f989:	e8 e4 28 00 00       	call   c0012272 <VAS::scanForEviction()>
c000f98e:	83 c4 10             	add    esp,0x10
c000f991:	85 c0                	test   eax,eax
c000f993:	75 4d                	jne    c000f9e2 <Phys::allocatePage()+0xa5>
c000f995:	83 ec 0c             	sub    esp,0xc
c000f998:	68 00 10 00 00       	push   0x1000
c000f99d:	e8 07 fe ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000f9a2:	83 c4 10             	add    esp,0x10
c000f9a5:	85 c0                	test   eax,eax
c000f9a7:	75 39                	jne    c000f9e2 <Phys::allocatePage()+0xa5>
c000f9a9:	83 ec 0c             	sub    esp,0xc
c000f9ac:	68 49 9e 02 c0       	push   0xc0029e49
c000f9b1:	e8 df a2 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c000f9b6:	83 c4 10             	add    esp,0x10
c000f9b9:	8b 1d 24 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d624
c000f9bf:	53                   	push   ebx
c000f9c0:	e8 01 ff ff ff       	call   c000f8c6 <Phys::getPageState(unsigned long)>
c000f9c5:	5a                   	pop    edx
c000f9c6:	84 c0                	test   al,al
c000f9c8:	75 95                	jne    c000f95f <Phys::allocatePage()+0x22>
c000f9ca:	6a 01                	push   0x1
c000f9cc:	53                   	push   ebx
c000f9cd:	e8 c2 fe ff ff       	call   c000f894 <Phys::setPageState(unsigned long, bool)>
c000f9d2:	a1 24 d6 02 c0       	mov    eax,ds:0xc002d624
c000f9d7:	59                   	pop    ecx
c000f9d8:	ff 05 30 d6 02 c0    	inc    DWORD PTR ds:0xc002d630
c000f9de:	c1 e0 0c             	shl    eax,0xc
c000f9e1:	5b                   	pop    ebx
c000f9e2:	5a                   	pop    edx
c000f9e3:	5b                   	pop    ebx
c000f9e4:	5e                   	pop    esi
c000f9e5:	c3                   	ret    

c000f9e6 <Phys::allocateContiguousPages(int)>:
c000f9e6:	57                   	push   edi
c000f9e7:	56                   	push   esi
c000f9e8:	53                   	push   ebx
c000f9e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f9ed:	fa                   	cli    
c000f9ee:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c000f9f4:	31 db                	xor    ebx,ebx
c000f9f6:	85 db                	test   ebx,ebx
c000f9f8:	75 11                	jne    c000fa0b <Phys::allocateContiguousPages(int)+0x25>
c000f9fa:	e8 3e ff ff ff       	call   c000f93d <Phys::allocatePage()>
c000f9ff:	83 fe 01             	cmp    esi,0x1
c000fa02:	89 c7                	mov    edi,eax
c000fa04:	74 21                	je     c000fa27 <Phys::allocateContiguousPages(int)+0x41>
c000fa06:	bb 01 00 00 00       	mov    ebx,0x1
c000fa0b:	e8 2d ff ff ff       	call   c000f93d <Phys::allocatePage()>
c000fa10:	89 da                	mov    edx,ebx
c000fa12:	c1 e2 0c             	shl    edx,0xc
c000fa15:	01 fa                	add    edx,edi
c000fa17:	39 c2                	cmp    edx,eax
c000fa19:	74 20                	je     c000fa3b <Phys::allocateContiguousPages(int)+0x55>
c000fa1b:	bb 01 00 00 00       	mov    ebx,0x1
c000fa20:	89 c7                	mov    edi,eax
c000fa22:	83 fe 01             	cmp    esi,0x1
c000fa25:	75 e4                	jne    c000fa0b <Phys::allocateContiguousPages(int)+0x25>
c000fa27:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c000fa2c:	48                   	dec    eax
c000fa2d:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c000fa32:	75 01                	jne    c000fa35 <Phys::allocateContiguousPages(int)+0x4f>
c000fa34:	fb                   	sti    
c000fa35:	89 f8                	mov    eax,edi
c000fa37:	5b                   	pop    ebx
c000fa38:	5e                   	pop    esi
c000fa39:	5f                   	pop    edi
c000fa3a:	c3                   	ret    
c000fa3b:	43                   	inc    ebx
c000fa3c:	39 f3                	cmp    ebx,esi
c000fa3e:	75 b6                	jne    c000f9f6 <Phys::allocateContiguousPages(int)+0x10>
c000fa40:	eb e5                	jmp    c000fa27 <Phys::allocateContiguousPages(int)+0x41>

c000fa42 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fa42:	56                   	push   esi
c000fa43:	53                   	push   ebx
c000fa44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa48:	39 1d 28 d6 02 c0    	cmp    DWORD PTR ds:0xc002d628,ebx
c000fa4e:	73 06                	jae    c000fa56 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fa50:	89 1d 28 d6 02 c0    	mov    DWORD PTR ds:0xc002d628,ebx
c000fa56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa5a:	c1 eb 0c             	shr    ebx,0xc
c000fa5d:	c1 e8 0c             	shr    eax,0xc
c000fa60:	39 d8                	cmp    eax,ebx
c000fa62:	73 13                	jae    c000fa77 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fa64:	6a 00                	push   0x0
c000fa66:	8d 70 01             	lea    esi,[eax+0x1]
c000fa69:	50                   	push   eax
c000fa6a:	e8 25 fe ff ff       	call   c000f894 <Phys::setPageState(unsigned long, bool)>
c000fa6f:	5a                   	pop    edx
c000fa70:	89 f0                	mov    eax,esi
c000fa72:	59                   	pop    ecx
c000fa73:	39 f3                	cmp    ebx,esi
c000fa75:	75 ed                	jne    c000fa64 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fa77:	5b                   	pop    ebx
c000fa78:	5e                   	pop    esi
c000fa79:	c3                   	ret    

c000fa7a <Phys::physicalMemorySetup(unsigned int)>:
c000fa7a:	55                   	push   ebp
c000fa7b:	57                   	push   edi
c000fa7c:	56                   	push   esi
c000fa7d:	53                   	push   ebx
c000fa7e:	31 db                	xor    ebx,ebx
c000fa80:	83 ec 40             	sub    esp,0x40
c000fa83:	6a 30                	push   0x30
c000fa85:	6a 00                	push   0x0
c000fa87:	68 40 d6 02 c0       	push   0xc002d640
c000fa8c:	e8 bf 0c ff ff       	call   c0000750 <memset>
c000fa91:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fa95:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fa9a:	05 00 10 00 00       	add    eax,0x1000
c000fa9f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000faa3:	5a                   	pop    edx
c000faa4:	59                   	pop    ecx
c000faa5:	50                   	push   eax
c000faa6:	68 57 9e 02 c0       	push   0xc0029e57
c000faab:	e8 85 2a 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c000fab0:	83 c4 10             	add    esp,0x10
c000fab3:	83 ec 08             	sub    esp,0x8
c000fab6:	6a 01                	push   0x1
c000fab8:	53                   	push   ebx
c000fab9:	43                   	inc    ebx
c000faba:	e8 d5 fd ff ff       	call   c000f894 <Phys::setPageState(unsigned long, bool)>
c000fabf:	83 c4 10             	add    esp,0x10
c000fac2:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fac8:	75 e9                	jne    c000fab3 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000faca:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fad1:	66 85 c0             	test   ax,ax
c000fad4:	0f 84 b5 01 00 00    	je     c000fc8f <Phys::physicalMemorySetup(unsigned int)+0x215>
c000fada:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fade:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000fae4:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000fae9:	8b 0d 08 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000608
c000faef:	8b 1d 0c 06 00 c2    	mov    ebx,DWORD PTR ds:0xc200060c
c000faf5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000faf9:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c000fafd:	01 c1                	add    ecx,eax
c000faff:	11 d3                	adc    ebx,edx
c000fb01:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000fb05:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fb09:	31 ff                	xor    edi,edi
c000fb0b:	89 d3                	mov    ebx,edx
c000fb0d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb11:	8b 35 10 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000610
c000fb17:	09 cb                	or     ebx,ecx
c000fb19:	0f 85 80 01 00 00    	jne    c000fc9f <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb1f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fb23:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fb2b:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb30:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000fb34:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fb3c:	eb 49                	jmp    c000fb87 <Phys::physicalMemorySetup(unsigned int)+0x10d>
c000fb3e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000fb42:	83 c3 18             	add    ebx,0x18
c000fb45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb49:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fb4d:	39 d0                	cmp    eax,edx
c000fb4f:	0f 84 4a 01 00 00    	je     c000fc9f <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb55:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000fb58:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000fb5b:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000fb5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fb60:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fb64:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fb68:	01 c6                	add    esi,eax
c000fb6a:	89 d5                	mov    ebp,edx
c000fb6c:	11 d7                	adc    edi,edx
c000fb6e:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000fb72:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c000fb76:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fb79:	31 ff                	xor    edi,edi
c000fb7b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000fb7f:	09 cd                	or     ebp,ecx
c000fb81:	0f 85 18 01 00 00    	jne    c000fc9f <Phys::physicalMemorySetup(unsigned int)+0x225>
c000fb87:	89 f1                	mov    ecx,esi
c000fb89:	83 f1 01             	xor    ecx,0x1
c000fb8c:	09 f9                	or     ecx,edi
c000fb8e:	75 ae                	jne    c000fb3e <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fb90:	be 00 00 08 00       	mov    esi,0x80000
c000fb95:	89 cf                	mov    edi,ecx
c000fb97:	39 c6                	cmp    esi,eax
c000fb99:	19 d7                	sbb    edi,edx
c000fb9b:	0f 82 98 00 00 00    	jb     c000fc39 <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fba1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000fba5:	89 cd                	mov    ebp,ecx
c000fba7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbaf:	19 fd                	sbb    ebp,edi
c000fbb1:	0f 83 82 00 00 00    	jae    c000fc39 <Phys::physicalMemorySetup(unsigned int)+0x1bf>
c000fbb7:	b8 00 00 0a 00       	mov    eax,0xa0000
c000fbbc:	39 f0                	cmp    eax,esi
c000fbbe:	19 f9                	sbb    ecx,edi
c000fbc0:	0f 82 03 01 00 00    	jb     c000fcc9 <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000fbc6:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fbcb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbcf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fbd3:	81 c6 00 00 f8 ff    	add    esi,0xfff80000
c000fbd9:	83 d7 ff             	adc    edi,0xffffffff
c000fbdc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000fbe0:	31 c0                	xor    eax,eax
c000fbe2:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000fbe6:	39 f2                	cmp    edx,esi
c000fbe8:	89 c2                	mov    edx,eax
c000fbea:	19 fa                	sbb    edx,edi
c000fbec:	0f 83 4c ff ff ff    	jae    c000fb3e <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fbf2:	b8 00 00 08 00       	mov    eax,0x80000
c000fbf7:	83 ec 08             	sub    esp,0x8
c000fbfa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbfe:	50                   	push   eax
c000fbff:	e8 3e fe ff ff       	call   c000fa42 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc0c:	83 c4 0c             	add    esp,0xc
c000fc0f:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc13:	03 05 34 d6 02 c0    	add    eax,DWORD PTR ds:0xc002d634
c000fc19:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc20:	a3 34 d6 02 c0       	mov    ds:0xc002d634,eax
c000fc25:	52                   	push   edx
c000fc26:	50                   	push   eax
c000fc27:	68 7d 9e 02 c0       	push   0xc0029e7d
c000fc2c:	e8 04 29 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c000fc31:	83 c4 10             	add    esp,0x10
c000fc34:	e9 05 ff ff ff       	jmp    c000fb3e <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc39:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fc3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc41:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc45:	39 ee                	cmp    esi,ebp
c000fc47:	1b 7c 24 2c          	sbb    edi,DWORD PTR [esp+0x2c]
c000fc4b:	0f 82 ed fe ff ff    	jb     c000fb3e <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc51:	be ff 1f 00 00       	mov    esi,0x1fff
c000fc56:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c000fc5a:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000fc5e:	0f 83 da fe ff ff    	jae    c000fb3e <Phys::physicalMemorySetup(unsigned int)+0xc4>
c000fc64:	39 e8                	cmp    eax,ebp
c000fc66:	89 d1                	mov    ecx,edx
c000fc68:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fc6c:	73 89                	jae    c000fbf7 <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc76:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fc7a:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fc7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fc86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc8a:	e9 68 ff ff ff       	jmp    c000fbf7 <Phys::physicalMemorySetup(unsigned int)+0x17d>
c000fc8f:	83 ec 0c             	sub    esp,0xc
c000fc92:	68 6f 9e 02 c0       	push   0xc0029e6f
c000fc97:	e8 f9 9f 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c000fc9c:	83 c4 10             	add    esp,0x10
c000fc9f:	bb 40 01 00 00       	mov    ebx,0x140
c000fca4:	83 ec 08             	sub    esp,0x8
c000fca7:	6a 00                	push   0x0
c000fca9:	53                   	push   ebx
c000fcaa:	43                   	inc    ebx
c000fcab:	e8 e4 fb ff ff       	call   c000f894 <Phys::setPageState(unsigned long, bool)>
c000fcb0:	ff 05 34 d6 02 c0    	inc    DWORD PTR ds:0xc002d634
c000fcb6:	83 c4 10             	add    esp,0x10
c000fcb9:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fcbf:	75 e3                	jne    c000fca4 <Phys::physicalMemorySetup(unsigned int)+0x22a>
c000fcc1:	83 c4 3c             	add    esp,0x3c
c000fcc4:	5b                   	pop    ebx
c000fcc5:	5e                   	pop    esi
c000fcc6:	5f                   	pop    edi
c000fcc7:	5d                   	pop    ebp
c000fcc8:	c3                   	ret    
c000fcc9:	c7 44 24 10 00 00 0a 00 	mov    DWORD PTR [esp+0x10],0xa0000
c000fcd1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fcd9:	e9 e8 fe ff ff       	jmp    c000fbc6 <Phys::physicalMemorySetup(unsigned int)+0x14c>

c000fcde <Pipe::isAtty()>:
c000fcde:	31 c0                	xor    eax,eax
c000fce0:	c3                   	ret    
c000fce1:	90                   	nop

c000fce2 <Pipe::~Pipe()>:
c000fce2:	83 ec 0c             	sub    esp,0xc
c000fce5:	ba dc 9e 02 c0       	mov    edx,0xc0029edc
c000fcea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcee:	89 10                	mov    DWORD PTR [eax],edx
c000fcf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcf4:	83 ec 0c             	sub    esp,0xc
c000fcf7:	50                   	push   eax
c000fcf8:	e8 3f 12 00 00       	call   c0010f3c <UnixFile::~UnixFile()>
c000fcfd:	83 c4 10             	add    esp,0x10
c000fd00:	90                   	nop
c000fd01:	83 c4 0c             	add    esp,0xc
c000fd04:	c3                   	ret    
c000fd05:	90                   	nop

c000fd06 <Pipe::~Pipe()>:
c000fd06:	83 ec 0c             	sub    esp,0xc
c000fd09:	83 ec 0c             	sub    esp,0xc
c000fd0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd10:	e8 cd ff ff ff       	call   c000fce2 <Pipe::~Pipe()>
c000fd15:	83 c4 10             	add    esp,0x10
c000fd18:	83 ec 08             	sub    esp,0x8
c000fd1b:	6a 20                	push   0x20
c000fd1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd21:	e8 37 27 00 00       	call   c001245d <operator delete(void*, unsigned long)>
c000fd26:	83 c4 10             	add    esp,0x10
c000fd29:	83 c4 0c             	add    esp,0xc
c000fd2c:	c3                   	ret    
c000fd2d:	90                   	nop

c000fd2e <Pipe::read(unsigned long long, void*, int*)>:
c000fd2e:	55                   	push   ebp
c000fd2f:	57                   	push   edi
c000fd30:	56                   	push   esi
c000fd31:	53                   	push   ebx
c000fd32:	83 ec 1c             	sub    esp,0x1c
c000fd35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fd39:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fd3d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fd41:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fd44:	89 c8                	mov    eax,ecx
c000fd46:	99                   	cdq    
c000fd47:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fd4b:	74 24                	je     c000fd71 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd4d:	39 f9                	cmp    ecx,edi
c000fd4f:	89 d1                	mov    ecx,edx
c000fd51:	19 f1                	sbb    ecx,esi
c000fd53:	73 1c                	jae    c000fd71 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fd55:	fa                   	cli    
c000fd56:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c000fd5c:	e8 be da 00 00       	call   c001d81f <schedule()>
c000fd61:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c000fd66:	48                   	dec    eax
c000fd67:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c000fd6c:	75 d3                	jne    c000fd41 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd6e:	fb                   	sti    
c000fd6f:	eb d0                	jmp    c000fd41 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fd71:	39 f8                	cmp    eax,edi
c000fd73:	89 d1                	mov    ecx,edx
c000fd75:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fd78:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fd7c:	19 f1                	sbb    ecx,esi
c000fd7e:	73 07                	jae    c000fd87 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fd80:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd83:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fd87:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fd8a:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fd8d:	29 f7                	sub    edi,esi
c000fd8f:	89 f8                	mov    eax,edi
c000fd91:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fd95:	99                   	cdq    
c000fd96:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fd99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd9d:	19 d0                	sbb    eax,edx
c000fd9f:	73 07                	jae    c000fda8 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fda1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fda4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fda8:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fdab:	89 ea                	mov    edx,ebp
c000fdad:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fdb1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fdb6:	74 0d                	je     c000fdc5 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fdb8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fdbb:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fdbf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdc3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdc5:	85 d2                	test   edx,edx
c000fdc7:	74 11                	je     c000fdda <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fdc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fdcd:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fdd0:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fdd4:	89 d1                	mov    ecx,edx
c000fdd6:	89 c7                	mov    edi,eax
c000fdd8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdda:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fddd:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fde0:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fde3:	99                   	cdq    
c000fde4:	89 f7                	mov    edi,esi
c000fde6:	03 04 24             	add    eax,DWORD PTR [esp]
c000fde9:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fded:	c1 ff 1f             	sar    edi,0x1f
c000fdf0:	57                   	push   edi
c000fdf1:	56                   	push   esi
c000fdf2:	52                   	push   edx
c000fdf3:	50                   	push   eax
c000fdf4:	e8 6b 68 01 00       	call   c0026664 <__umoddi3>
c000fdf9:	83 c4 10             	add    esp,0x10
c000fdfc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fdff:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe04:	75 10                	jne    c000fe16 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe06:	83 ec 0c             	sub    esp,0xc
c000fe09:	68 99 9e 02 c0       	push   0xc0029e99
c000fe0e:	e8 82 9e 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c000fe13:	83 c4 10             	add    esp,0x10
c000fe16:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe1a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe1d:	89 10                	mov    DWORD PTR [eax],edx
c000fe1f:	83 c4 1c             	add    esp,0x1c
c000fe22:	31 c0                	xor    eax,eax
c000fe24:	5b                   	pop    ebx
c000fe25:	5e                   	pop    esi
c000fe26:	5f                   	pop    edi
c000fe27:	5d                   	pop    ebp
c000fe28:	c3                   	ret    
c000fe29:	90                   	nop

c000fe2a <Pipe::write(unsigned long long, void*, int*)>:
c000fe2a:	55                   	push   ebp
c000fe2b:	57                   	push   edi
c000fe2c:	56                   	push   esi
c000fe2d:	53                   	push   ebx
c000fe2e:	83 ec 1c             	sub    esp,0x1c
c000fe31:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fe35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fe39:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fe3c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fe40:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe43:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe47:	89 d8                	mov    eax,ebx
c000fe49:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fe4c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fe50:	89 d6                	mov    esi,edx
c000fe52:	89 d7                	mov    edi,edx
c000fe54:	c1 ff 1f             	sar    edi,0x1f
c000fe57:	03 34 24             	add    esi,DWORD PTR [esp]
c000fe5a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fe5e:	c1 f8 1f             	sar    eax,0x1f
c000fe61:	39 f3                	cmp    ebx,esi
c000fe63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe6b:	19 f8                	sbb    eax,edi
c000fe6d:	b8 01 00 00 00       	mov    eax,0x1
c000fe72:	72 6e                	jb     c000fee2 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fe74:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fe77:	01 d0                	add    eax,edx
c000fe79:	99                   	cdq    
c000fe7a:	f7 fb                	idiv   ebx
c000fe7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe80:	29 d3                	sub    ebx,edx
c000fe82:	89 d7                	mov    edi,edx
c000fe84:	89 de                	mov    esi,ebx
c000fe86:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe89:	c1 fb 1f             	sar    ebx,0x1f
c000fe8c:	39 f2                	cmp    edx,esi
c000fe8e:	19 d8                	sbb    eax,ebx
c000fe90:	b8 00 00 00 00       	mov    eax,0x0
c000fe95:	72 04                	jb     c000fe9b <Pipe::write(unsigned long long, void*, int*)+0x71>
c000fe97:	89 d0                	mov    eax,edx
c000fe99:	29 f0                	sub    eax,esi
c000fe9b:	89 d3                	mov    ebx,edx
c000fe9d:	29 c3                	sub    ebx,eax
c000fe9f:	74 0b                	je     c000feac <Pipe::write(unsigned long long, void*, int*)+0x82>
c000fea1:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fea4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000fea8:	89 d9                	mov    ecx,ebx
c000feaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000feac:	85 c0                	test   eax,eax
c000feae:	74 0d                	je     c000febd <Pipe::write(unsigned long long, void*, int*)+0x93>
c000feb0:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000feb4:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000feb7:	89 de                	mov    esi,ebx
c000feb9:	89 c1                	mov    ecx,eax
c000febb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000febd:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000fec0:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fec5:	75 10                	jne    c000fed7 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000fec7:	83 ec 0c             	sub    esp,0xc
c000feca:	68 b5 9e 02 c0       	push   0xc0029eb5
c000fecf:	e8 c1 9d 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c000fed4:	83 c4 10             	add    esp,0x10
c000fed7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fedb:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000fede:	89 08                	mov    DWORD PTR [eax],ecx
c000fee0:	31 c0                	xor    eax,eax
c000fee2:	83 c4 1c             	add    esp,0x1c
c000fee5:	5b                   	pop    ebx
c000fee6:	5e                   	pop    esi
c000fee7:	5f                   	pop    edi
c000fee8:	5d                   	pop    ebp
c000fee9:	c3                   	ret    

c000feea <Pipe::Pipe(int)>:
c000feea:	83 ec 0c             	sub    esp,0xc
c000feed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fef1:	83 ec 08             	sub    esp,0x8
c000fef4:	6a 00                	push   0x0
c000fef6:	50                   	push   eax
c000fef7:	e8 5e 0e 00 00       	call   c0010d5a <UnixFile::UnixFile(int)>
c000fefc:	83 c4 10             	add    esp,0x10
c000feff:	ba dc 9e 02 c0       	mov    edx,0xc0029edc
c000ff04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff08:	89 10                	mov    DWORD PTR [eax],edx
c000ff0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff0e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff12:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff19:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff24:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff2f:	83 ec 0c             	sub    esp,0xc
c000ff32:	50                   	push   eax
c000ff33:	e8 61 f6 ff ff       	call   c000f599 <malloc>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	89 c2                	mov    edx,eax
c000ff3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff41:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ff44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff48:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ff4c:	90                   	nop
c000ff4d:	83 c4 0c             	add    esp,0xc
c000ff50:	c3                   	ret    
c000ff51:	90                   	nop

c000ff52 <VgaText::isAtty()>:
c000ff52:	b0 01                	mov    al,0x1
c000ff54:	c3                   	ret    
c000ff55:	90                   	nop

c000ff56 <VgaText::~VgaText()>:
c000ff56:	83 ec 0c             	sub    esp,0xc
c000ff59:	ba 64 9f 02 c0       	mov    edx,0xc0029f64
c000ff5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff62:	89 10                	mov    DWORD PTR [eax],edx
c000ff64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff68:	83 ec 0c             	sub    esp,0xc
c000ff6b:	50                   	push   eax
c000ff6c:	e8 cb 0f 00 00       	call   c0010f3c <UnixFile::~UnixFile()>
c000ff71:	83 c4 10             	add    esp,0x10
c000ff74:	90                   	nop
c000ff75:	83 c4 0c             	add    esp,0xc
c000ff78:	c3                   	ret    
c000ff79:	90                   	nop

c000ff7a <VgaText::~VgaText()>:
c000ff7a:	83 ec 0c             	sub    esp,0xc
c000ff7d:	83 ec 0c             	sub    esp,0xc
c000ff80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff84:	e8 cd ff ff ff       	call   c000ff56 <VgaText::~VgaText()>
c000ff89:	83 c4 10             	add    esp,0x10
c000ff8c:	83 ec 08             	sub    esp,0x8
c000ff8f:	68 c4 02 00 00       	push   0x2c4
c000ff94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff98:	e8 c0 24 00 00       	call   c001245d <operator delete(void*, unsigned long)>
c000ff9d:	83 c4 10             	add    esp,0x10
c000ffa0:	83 c4 0c             	add    esp,0xc
c000ffa3:	c3                   	ret    

c000ffa4 <VgaText::read(unsigned long long, void*, int*)>:
c000ffa4:	83 ec 10             	sub    esp,0x10
c000ffa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ffab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ffaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffb3:	e8 38 5a 00 00       	call   c00159f0 <readKeyboard(VgaText*, char*, unsigned long)>
c000ffb8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ffbc:	89 02                	mov    DWORD PTR [edx],eax
c000ffbe:	31 c0                	xor    eax,eax
c000ffc0:	83 c4 1c             	add    esp,0x1c
c000ffc3:	c3                   	ret    

c000ffc4 <setTerminalScrollLock(bool)>:
c000ffc4:	c3                   	ret    

c000ffc5 <addToTerminalCycle(VgaText*)>:
c000ffc5:	8b 15 a0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6a0
c000ffcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffcf:	85 d2                	test   edx,edx
c000ffd1:	75 09                	jne    c000ffdc <addToTerminalCycle(VgaText*)+0x17>
c000ffd3:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000ffd6:	a3 a0 d6 02 c0       	mov    ds:0xc002d6a0,eax
c000ffdb:	c3                   	ret    
c000ffdc:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000ffdf:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000ffe2:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000ffe5:	c3                   	ret    

c000ffe6 <installVgaTextImplementation()>:
c000ffe6:	83 ec 10             	sub    esp,0x10
c000ffe9:	6a 20                	push   0x20
c000ffeb:	6a 00                	push   0x0
c000ffed:	68 80 d6 02 c0       	push   0xc002d680
c000fff2:	e8 59 07 ff ff       	call   c0000750 <memset>
c000fff7:	83 c4 1c             	add    esp,0x1c
c000fffa:	c3                   	ret    

c000fffb <scrollTerminalScrollLock(int)>:
c000fffb:	c3                   	ret    

c000fffc <VgaText::updateTitle()>:
c000fffc:	53                   	push   ebx
c000fffd:	31 c0                	xor    eax,eax
c000ffff:	83 ec 58             	sub    esp,0x58
c0010002:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010006:	89 e1                	mov    ecx,esp
c0010008:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c001000c:	40                   	inc    eax
c001000d:	83 f8 50             	cmp    eax,0x50
c0010010:	75 f6                	jne    c0010008 <VgaText::updateTitle()+0xc>
c0010012:	31 c0                	xor    eax,eax
c0010014:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c001001b:	84 db                	test   bl,bl
c001001d:	74 06                	je     c0010025 <VgaText::updateTitle()+0x29>
c001001f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010022:	40                   	inc    eax
c0010023:	eb ef                	jmp    c0010014 <VgaText::updateTitle()+0x18>
c0010025:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010028:	85 c0                	test   eax,eax
c001002a:	74 09                	je     c0010035 <VgaText::updateTitle()+0x39>
c001002c:	53                   	push   ebx
c001002d:	53                   	push   ebx
c001002e:	51                   	push   ecx
c001002f:	52                   	push   edx
c0010030:	ff d0                	call   eax
c0010032:	83 c4 10             	add    esp,0x10
c0010035:	83 c4 58             	add    esp,0x58
c0010038:	5b                   	pop    ebx
c0010039:	c3                   	ret    

c001003a <VgaText::load()>:
c001003a:	53                   	push   ebx
c001003b:	31 c0                	xor    eax,eax
c001003d:	83 ec 58             	sub    esp,0x58
c0010040:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010044:	89 e2                	mov    edx,esp
c0010046:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001004a:	40                   	inc    eax
c001004b:	83 f8 50             	cmp    eax,0x50
c001004e:	75 f6                	jne    c0010046 <VgaText::load()+0xc>
c0010050:	31 c0                	xor    eax,eax
c0010052:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010059:	84 c9                	test   cl,cl
c001005b:	74 06                	je     c0010063 <VgaText::load()+0x29>
c001005d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010060:	40                   	inc    eax
c0010061:	eb ef                	jmp    c0010052 <VgaText::load()+0x18>
c0010063:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010066:	85 c0                	test   eax,eax
c0010068:	74 09                	je     c0010073 <VgaText::load()+0x39>
c001006a:	51                   	push   ecx
c001006b:	51                   	push   ecx
c001006c:	52                   	push   edx
c001006d:	53                   	push   ebx
c001006e:	ff d0                	call   eax
c0010070:	83 c4 10             	add    esp,0x10
c0010073:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010076:	85 c0                	test   eax,eax
c0010078:	74 09                	je     c0010083 <VgaText::load()+0x49>
c001007a:	83 ec 0c             	sub    esp,0xc
c001007d:	53                   	push   ebx
c001007e:	ff d0                	call   eax
c0010080:	83 c4 10             	add    esp,0x10
c0010083:	83 c4 58             	add    esp,0x58
c0010086:	5b                   	pop    ebx
c0010087:	c3                   	ret    

c0010088 <VgaText::updateCursor()>:
c0010088:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001008c:	39 05 a4 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6a4,eax
c0010092:	75 09                	jne    c001009d <VgaText::updateCursor()+0x15>
c0010094:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010097:	85 c0                	test   eax,eax
c0010099:	74 02                	je     c001009d <VgaText::updateCursor()+0x15>
c001009b:	ff e0                	jmp    eax
c001009d:	c3                   	ret    

c001009e <VgaText::doANSI_SGR(int)>:
c001009e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100a6:	85 d2                	test   edx,edx
c00100a8:	75 0b                	jne    c00100b5 <VgaText::doANSI_SGR(int)+0x17>
c00100aa:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00100ad:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00100b0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00100b3:	eb 59                	jmp    c001010e <VgaText::doANSI_SGR(int)+0x70>
c00100b5:	83 fa 07             	cmp    edx,0x7
c00100b8:	75 0b                	jne    c00100c5 <VgaText::doANSI_SGR(int)+0x27>
c00100ba:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00100bd:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00100c0:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00100c3:	eb 49                	jmp    c001010e <VgaText::doANSI_SGR(int)+0x70>
c00100c5:	83 fa 1b             	cmp    edx,0x1b
c00100c8:	74 e0                	je     c00100aa <VgaText::doANSI_SGR(int)+0xc>
c00100ca:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00100cd:	83 f9 07             	cmp    ecx,0x7
c00100d0:	77 09                	ja     c00100db <VgaText::doANSI_SGR(int)+0x3d>
c00100d2:	8b 14 8d 40 c5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3ac0]
c00100d9:	eb 20                	jmp    c00100fb <VgaText::doANSI_SGR(int)+0x5d>
c00100db:	8d 4a d8             	lea    ecx,[edx-0x28]
c00100de:	83 f9 07             	cmp    ecx,0x7
c00100e1:	77 09                	ja     c00100ec <VgaText::doANSI_SGR(int)+0x4e>
c00100e3:	8b 14 8d 40 c5 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3ac0]
c00100ea:	eb 22                	jmp    c001010e <VgaText::doANSI_SGR(int)+0x70>
c00100ec:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00100ef:	83 f9 07             	cmp    ecx,0x7
c00100f2:	77 0b                	ja     c00100ff <VgaText::doANSI_SGR(int)+0x61>
c00100f4:	8b 14 95 f8 c3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3c08]
c00100fb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00100fe:	c3                   	ret    
c00100ff:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010102:	83 f9 07             	cmp    ecx,0x7
c0010105:	77 0a                	ja     c0010111 <VgaText::doANSI_SGR(int)+0x73>
c0010107:	8b 14 95 d0 c3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3c30]
c001010e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010111:	c3                   	ret    

c0010112 <VgaText::setDefaultBgColour(VgaColour)>:
c0010112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010116:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001011a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001011d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010120:	c3                   	ret    
c0010121:	90                   	nop

c0010122 <VgaText::setDefaultFgColour(VgaColour)>:
c0010122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010126:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001012a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001012d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010130:	c3                   	ret    
c0010131:	90                   	nop

c0010132 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010132:	53                   	push   ebx
c0010133:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010137:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001013b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001013f:	51                   	push   ecx
c0010140:	e8 cd ff ff ff       	call   c0010112 <VgaText::setDefaultBgColour(VgaColour)>
c0010145:	58                   	pop    eax
c0010146:	5a                   	pop    edx
c0010147:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001014b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001014f:	5b                   	pop    ebx
c0010150:	eb d0                	jmp    c0010122 <VgaText::setDefaultFgColour(VgaColour)>

c0010152 <VgaText::setTitleTextColour(VgaColour)>:
c0010152:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010156:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001015a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001015d:	e9 9a fe ff ff       	jmp    c000fffc <VgaText::updateTitle()>

c0010162 <VgaText::setTitleColour(VgaColour)>:
c0010162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010166:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001016a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001016d:	e9 8a fe ff ff       	jmp    c000fffc <VgaText::updateTitle()>

c0010172 <VgaText::setTitle(char*)>:
c0010172:	53                   	push   ebx
c0010173:	83 ec 10             	sub    esp,0x10
c0010176:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001017a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001017e:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010184:	50                   	push   eax
c0010185:	e8 82 06 ff ff       	call   c000080c <strcpy>
c001018a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001018e:	83 c4 18             	add    esp,0x18
c0010191:	5b                   	pop    ebx
c0010192:	e9 65 fe ff ff       	jmp    c000fffc <VgaText::updateTitle()>
c0010197:	90                   	nop

c0010198 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010198:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001019c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00101a1:	83 e0 0f             	and    eax,0xf
c00101a4:	c1 e2 04             	shl    edx,0x4
c00101a7:	09 d0                	or     eax,edx
c00101a9:	c3                   	ret    

c00101aa <VgaText::scrollScreen()>:
c00101aa:	55                   	push   ebp
c00101ab:	b9 01 00 00 00       	mov    ecx,0x1
c00101b0:	57                   	push   edi
c00101b1:	56                   	push   esi
c00101b2:	53                   	push   ebx
c00101b3:	83 ec 0c             	sub    esp,0xc
c00101b6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00101ba:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00101c0:	31 ff                	xor    edi,edi
c00101c2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00101c5:	83 f9 17             	cmp    ecx,0x17
c00101c8:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00101cb:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00101d2:	75 27                	jne    c00101fb <VgaText::scrollScreen()+0x51>
c00101d4:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00101d7:	01 f5                	add    ebp,esi
c00101d9:	f7 c7 01 00 00 00    	test   edi,0x1
c00101df:	74 16                	je     c00101f7 <VgaText::scrollScreen()+0x4d>
c00101e1:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00101e5:	50                   	push   eax
c00101e6:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00101ea:	50                   	push   eax
c00101eb:	e8 a8 ff ff ff       	call   c0010198 <VgaText::combineColours(unsigned char, unsigned char)>
c00101f0:	5a                   	pop    edx
c00101f1:	5a                   	pop    edx
c00101f2:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00101f5:	eb 04                	jmp    c00101fb <VgaText::scrollScreen()+0x51>
c00101f7:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00101fb:	47                   	inc    edi
c00101fc:	46                   	inc    esi
c00101fd:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010203:	75 bd                	jne    c00101c2 <VgaText::scrollScreen()+0x18>
c0010205:	41                   	inc    ecx
c0010206:	83 f9 18             	cmp    ecx,0x18
c0010209:	75 af                	jne    c00101ba <VgaText::scrollScreen()+0x10>
c001020b:	39 1d a4 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6a4,ebx
c0010211:	75 1b                	jne    c001022e <VgaText::scrollScreen()+0x84>
c0010213:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010217:	74 05                	je     c001021e <VgaText::scrollScreen()+0x74>
c0010219:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c001021c:	eb 10                	jmp    c001022e <VgaText::scrollScreen()+0x84>
c001021e:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010221:	85 c0                	test   eax,eax
c0010223:	74 09                	je     c001022e <VgaText::scrollScreen()+0x84>
c0010225:	83 ec 0c             	sub    esp,0xc
c0010228:	53                   	push   ebx
c0010229:	ff d0                	call   eax
c001022b:	83 c4 10             	add    esp,0x10
c001022e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010232:	83 c4 0c             	add    esp,0xc
c0010235:	5b                   	pop    ebx
c0010236:	5e                   	pop    esi
c0010237:	5f                   	pop    edi
c0010238:	5d                   	pop    ebp
c0010239:	e9 4a fe ff ff       	jmp    c0010088 <VgaText::updateCursor()>

c001023e <VgaText::combineCharAndColour(char, unsigned char)>:
c001023e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010243:	c1 e0 08             	shl    eax,0x8
c0010246:	89 c2                	mov    edx,eax
c0010248:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001024d:	09 d0                	or     eax,edx
c001024f:	c3                   	ret    

c0010250 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010250:	56                   	push   esi
c0010251:	53                   	push   ebx
c0010252:	51                   	push   ecx
c0010253:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010257:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001025c:	50                   	push   eax
c001025d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010262:	50                   	push   eax
c0010263:	e8 30 ff ff ff       	call   c0010198 <VgaText::combineColours(unsigned char, unsigned char)>
c0010268:	5b                   	pop    ebx
c0010269:	0f b6 c0             	movzx  eax,al
c001026c:	5e                   	pop    esi
c001026d:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010272:	50                   	push   eax
c0010273:	53                   	push   ebx
c0010274:	e8 c5 ff ff ff       	call   c001023e <VgaText::combineCharAndColour(char, unsigned char)>
c0010279:	5a                   	pop    edx
c001027a:	5e                   	pop    esi
c001027b:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c001027e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010284:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010288:	0f b7 d2             	movzx  edx,dx
c001028b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001028f:	39 0d a4 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6a4,ecx
c0010295:	75 10                	jne    c00102a7 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010297:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001029a:	85 c0                	test   eax,eax
c001029c:	74 09                	je     c00102a7 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001029e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00102a2:	5a                   	pop    edx
c00102a3:	5b                   	pop    ebx
c00102a4:	5e                   	pop    esi
c00102a5:	ff e0                	jmp    eax
c00102a7:	58                   	pop    eax
c00102a8:	5b                   	pop    ebx
c00102a9:	5e                   	pop    esi
c00102aa:	c3                   	ret    
c00102ab:	90                   	nop

c00102ac <VgaText::getCursorX()>:
c00102ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102b0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00102b3:	c3                   	ret    

c00102b4 <VgaText::getCursorY()>:
c00102b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102b8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00102bb:	c3                   	ret    

c00102bc <VgaText::setCursor(int, int)>:
c00102bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102c4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00102c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102cb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00102ce:	e9 b5 fd ff ff       	jmp    c0010088 <VgaText::updateCursor()>

c00102d3 <setActiveTerminal(VgaText*)>:
c00102d3:	53                   	push   ebx
c00102d4:	83 ec 08             	sub    esp,0x8
c00102d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102db:	85 db                	test   ebx,ebx
c00102dd:	75 11                	jne    c00102f0 <setActiveTerminal(VgaText*)+0x1d>
c00102df:	c7 44 24 10 f0 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ef0
c00102e7:	83 c4 08             	add    esp,0x8
c00102ea:	5b                   	pop    ebx
c00102eb:	e9 a5 99 00 00       	jmp    c0019c95 <Krnl::panic(char const*)>
c00102f0:	a1 a4 d6 02 c0       	mov    eax,ds:0xc002d6a4
c00102f5:	85 c0                	test   eax,eax
c00102f7:	74 0c                	je     c0010305 <setActiveTerminal(VgaText*)+0x32>
c00102f9:	83 ec 0c             	sub    esp,0xc
c00102fc:	50                   	push   eax
c00102fd:	e8 86 fd ff ff       	call   c0010088 <VgaText::updateCursor()>
c0010302:	83 c4 10             	add    esp,0x10
c0010305:	89 1d a4 d6 02 c0    	mov    DWORD PTR ds:0xc002d6a4,ebx
c001030b:	51                   	push   ecx
c001030c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001030f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010312:	53                   	push   ebx
c0010313:	e8 a4 ff ff ff       	call   c00102bc <VgaText::setCursor(int, int)>
c0010318:	83 c4 10             	add    esp,0x10
c001031b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001031f:	75 07                	jne    c0010328 <setActiveTerminal(VgaText*)+0x55>
c0010321:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010328:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001032c:	83 c4 08             	add    esp,0x8
c001032f:	5b                   	pop    ebx
c0010330:	e9 05 fd ff ff       	jmp    c001003a <VgaText::load()>

c0010335 <doTerminalCycle()>:
c0010335:	83 ec 18             	sub    esp,0x18
c0010338:	a1 a0 d6 02 c0       	mov    eax,ds:0xc002d6a0
c001033d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010340:	50                   	push   eax
c0010341:	a3 a0 d6 02 c0       	mov    ds:0xc002d6a0,eax
c0010346:	e8 88 ff ff ff       	call   c00102d3 <setActiveTerminal(VgaText*)>
c001034b:	83 c4 1c             	add    esp,0x1c
c001034e:	c3                   	ret    
c001034f:	90                   	nop

c0010350 <VgaText::setCursorX(int)>:
c0010350:	83 ec 10             	sub    esp,0x10
c0010353:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010357:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001035a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001035e:	50                   	push   eax
c001035f:	e8 58 ff ff ff       	call   c00102bc <VgaText::setCursor(int, int)>
c0010364:	83 c4 1c             	add    esp,0x1c
c0010367:	c3                   	ret    

c0010368 <VgaText::setCursorY(int)>:
c0010368:	83 ec 10             	sub    esp,0x10
c001036b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001036f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010373:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010376:	50                   	push   eax
c0010377:	e8 40 ff ff ff       	call   c00102bc <VgaText::setCursor(int, int)>
c001037c:	83 c4 1c             	add    esp,0x1c
c001037f:	c3                   	ret    

c0010380 <VgaText::incrementCursor(bool)>:
c0010380:	56                   	push   esi
c0010381:	53                   	push   ebx
c0010382:	51                   	push   ecx
c0010383:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010387:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001038b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001038e:	40                   	inc    eax
c001038f:	83 f8 50             	cmp    eax,0x50
c0010392:	74 05                	je     c0010399 <VgaText::incrementCursor(bool)+0x19>
c0010394:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010397:	eb 24                	jmp    c00103bd <VgaText::incrementCursor(bool)+0x3d>
c0010399:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001039c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00103a3:	8d 50 01             	lea    edx,[eax+0x1]
c00103a6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00103a9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00103ac:	75 0f                	jne    c00103bd <VgaText::incrementCursor(bool)+0x3d>
c00103ae:	83 ec 0c             	sub    esp,0xc
c00103b1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00103b4:	53                   	push   ebx
c00103b5:	e8 f0 fd ff ff       	call   c00101aa <VgaText::scrollScreen()>
c00103ba:	83 c4 10             	add    esp,0x10
c00103bd:	89 f0                	mov    eax,esi
c00103bf:	84 c0                	test   al,al
c00103c1:	74 0c                	je     c00103cf <VgaText::incrementCursor(bool)+0x4f>
c00103c3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103c7:	5a                   	pop    edx
c00103c8:	5b                   	pop    ebx
c00103c9:	5e                   	pop    esi
c00103ca:	e9 b9 fc ff ff       	jmp    c0010088 <VgaText::updateCursor()>
c00103cf:	58                   	pop    eax
c00103d0:	5b                   	pop    ebx
c00103d1:	5e                   	pop    esi
c00103d2:	c3                   	ret    
c00103d3:	90                   	nop

c00103d4 <VgaText::decrementCursor(bool)>:
c00103d4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00103d8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103dc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00103df:	85 c0                	test   eax,eax
c00103e1:	74 04                	je     c00103e7 <VgaText::decrementCursor(bool)+0x13>
c00103e3:	48                   	dec    eax
c00103e4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00103e7:	84 c9                	test   cl,cl
c00103e9:	74 09                	je     c00103f4 <VgaText::decrementCursor(bool)+0x20>
c00103eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00103ef:	e9 94 fc ff ff       	jmp    c0010088 <VgaText::updateCursor()>
c00103f4:	c3                   	ret    
c00103f5:	90                   	nop

c00103f6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00103f6:	53                   	push   ebx
c00103f7:	83 ec 08             	sub    esp,0x8
c00103fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010402:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010406:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001040a:	3c 07                	cmp    al,0x7
c001040c:	75 2a                	jne    c0010438 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001040e:	a1 58 d7 02 c0       	mov    eax,ds:0xc002d758
c0010413:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001041b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010423:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001042b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001042f:	83 c4 08             	add    esp,0x8
c0010432:	5b                   	pop    ebx
c0010433:	e9 0a 2f 00 00       	jmp    c0013342 <Buzzer::beep(int, int, bool)>
c0010438:	3c 0d                	cmp    al,0xd
c001043a:	75 09                	jne    c0010445 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c001043c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010443:	eb 2c                	jmp    c0010471 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010445:	3c 0a                	cmp    al,0xa
c0010447:	75 31                	jne    c001047a <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010449:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001044c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010453:	8d 50 01             	lea    edx,[eax+0x1]
c0010456:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010459:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001045c:	75 0f                	jne    c001046d <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c001045e:	83 ec 0c             	sub    esp,0xc
c0010461:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010464:	53                   	push   ebx
c0010465:	e8 40 fd ff ff       	call   c00101aa <VgaText::scrollScreen()>
c001046a:	83 c4 10             	add    esp,0x10
c001046d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010471:	83 c4 08             	add    esp,0x8
c0010474:	5b                   	pop    ebx
c0010475:	e9 0e fc ff ff       	jmp    c0010088 <VgaText::updateCursor()>
c001047a:	3c 08                	cmp    al,0x8
c001047c:	75 25                	jne    c00104a3 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c001047e:	50                   	push   eax
c001047f:	50                   	push   eax
c0010480:	6a 01                	push   0x1
c0010482:	53                   	push   ebx
c0010483:	e8 4c ff ff ff       	call   c00103d4 <VgaText::decrementCursor(bool)>
c0010488:	5a                   	pop    edx
c0010489:	59                   	pop    ecx
c001048a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001048d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010490:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010493:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010496:	6a 20                	push   0x20
c0010498:	53                   	push   ebx
c0010499:	e8 b2 fd ff ff       	call   c0010250 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001049e:	83 c4 28             	add    esp,0x28
c00104a1:	5b                   	pop    ebx
c00104a2:	c3                   	ret    
c00104a3:	83 ec 08             	sub    esp,0x8
c00104a6:	0f be c0             	movsx  eax,al
c00104a9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104ac:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104af:	51                   	push   ecx
c00104b0:	52                   	push   edx
c00104b1:	50                   	push   eax
c00104b2:	53                   	push   ebx
c00104b3:	e8 98 fd ff ff       	call   c0010250 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00104b8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00104bc:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00104c4:	83 c4 28             	add    esp,0x28
c00104c7:	5b                   	pop    ebx
c00104c8:	e9 b3 fe ff ff       	jmp    c0010380 <VgaText::incrementCursor(bool)>
c00104cd:	90                   	nop

c00104ce <VgaText::doUpdate()>:
c00104ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d2:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00104d5:	85 c0                	test   eax,eax
c00104d7:	74 02                	je     c00104db <VgaText::doUpdate()+0xd>
c00104d9:	ff e0                	jmp    eax
c00104db:	c3                   	ret    

c00104dc <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00104dc:	55                   	push   ebp
c00104dd:	31 ed                	xor    ebp,ebp
c00104df:	57                   	push   edi
c00104e0:	56                   	push   esi
c00104e1:	53                   	push   ebx
c00104e2:	83 ec 1c             	sub    esp,0x1c
c00104e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00104e9:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00104ee:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00104f5:	50                   	push   eax
c00104f6:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00104fb:	50                   	push   eax
c00104fc:	e8 97 fc ff ff       	call   c0010198 <VgaText::combineColours(unsigned char, unsigned char)>
c0010501:	59                   	pop    ecx
c0010502:	0f b6 c0             	movzx  eax,al
c0010505:	5e                   	pop    esi
c0010506:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001050b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001050f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010512:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010516:	0f b7 f6             	movzx  esi,si
c0010519:	01 f6                	add    esi,esi
c001051b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001051e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010521:	84 c0                	test   al,al
c0010523:	0f 84 fd 00 00 00    	je     c0010626 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010529:	3c 0d                	cmp    al,0xd
c001052b:	75 0c                	jne    c0010539 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c001052d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010534:	e9 e7 00 00 00       	jmp    c0010620 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010539:	3c 0a                	cmp    al,0xa
c001053b:	75 47                	jne    c0010584 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c001053d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010540:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010547:	8d 48 01             	lea    ecx,[eax+0x1]
c001054a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c001054d:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010550:	75 0f                	jne    c0010561 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010552:	83 ec 0c             	sub    esp,0xc
c0010555:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010558:	53                   	push   ebx
c0010559:	e8 4c fc ff ff       	call   c00101aa <VgaText::scrollScreen()>
c001055e:	83 c4 10             	add    esp,0x10
c0010561:	83 ec 0c             	sub    esp,0xc
c0010564:	31 ed                	xor    ebp,ebp
c0010566:	53                   	push   ebx
c0010567:	e8 1c fb ff ff       	call   c0010088 <VgaText::updateCursor()>
c001056c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010571:	83 c4 10             	add    esp,0x10
c0010574:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010577:	0f b7 f6             	movzx  esi,si
c001057a:	01 f6                	add    esi,esi
c001057c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001057f:	e9 9c 00 00 00       	jmp    c0010620 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010584:	3c 08                	cmp    al,0x8
c0010586:	75 35                	jne    c00105bd <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010588:	56                   	push   esi
c0010589:	56                   	push   esi
c001058a:	6a 01                	push   0x1
c001058c:	53                   	push   ebx
c001058d:	e8 42 fe ff ff       	call   c00103d4 <VgaText::decrementCursor(bool)>
c0010592:	58                   	pop    eax
c0010593:	5a                   	pop    edx
c0010594:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010597:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001059a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001059d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00105a0:	6a 20                	push   0x20
c00105a2:	53                   	push   ebx
c00105a3:	e8 a8 fc ff ff       	call   c0010250 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00105a8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105ad:	83 c4 20             	add    esp,0x20
c00105b0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105b3:	0f b7 f6             	movzx  esi,si
c00105b6:	01 f6                	add    esi,esi
c00105b8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105bb:	eb 63                	jmp    c0010620 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105bd:	51                   	push   ecx
c00105be:	51                   	push   ecx
c00105bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00105c3:	50                   	push   eax
c00105c4:	e8 75 fc ff ff       	call   c001023e <VgaText::combineCharAndColour(char, unsigned char)>
c00105c9:	83 c4 10             	add    esp,0x10
c00105cc:	66 89 06             	mov    WORD PTR [esi],ax
c00105cf:	39 1d a4 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6a4,ebx
c00105d5:	75 21                	jne    c00105f8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00105d7:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c00105da:	85 c0                	test   eax,eax
c00105dc:	74 1a                	je     c00105f8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00105de:	52                   	push   edx
c00105df:	52                   	push   edx
c00105e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00105e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00105e6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00105ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00105ee:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c00105f1:	51                   	push   ecx
c00105f2:	53                   	push   ebx
c00105f3:	ff d0                	call   eax
c00105f5:	83 c4 20             	add    esp,0x20
c00105f8:	83 c6 02             	add    esi,0x2
c00105fb:	50                   	push   eax
c00105fc:	50                   	push   eax
c00105fd:	6a 00                	push   0x0
c00105ff:	53                   	push   ebx
c0010600:	e8 7b fd ff ff       	call   c0010380 <VgaText::incrementCursor(bool)>
c0010605:	83 c4 10             	add    esp,0x10
c0010608:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001060c:	75 0d                	jne    c001061b <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001060e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010613:	0f b7 f6             	movzx  esi,si
c0010616:	01 f6                	add    esi,esi
c0010618:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001061b:	bd 01 00 00 00       	mov    ebp,0x1
c0010620:	47                   	inc    edi
c0010621:	e9 f8 fe ff ff       	jmp    c001051e <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010626:	83 ec 0c             	sub    esp,0xc
c0010629:	53                   	push   ebx
c001062a:	e8 59 fa ff ff       	call   c0010088 <VgaText::updateCursor()>
c001062f:	83 c4 10             	add    esp,0x10
c0010632:	89 e8                	mov    eax,ebp
c0010634:	84 c0                	test   al,al
c0010636:	74 0c                	je     c0010644 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010638:	83 ec 0c             	sub    esp,0xc
c001063b:	53                   	push   ebx
c001063c:	e8 8d fe ff ff       	call   c00104ce <VgaText::doUpdate()>
c0010641:	83 c4 10             	add    esp,0x10
c0010644:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001064b:	83 c4 1c             	add    esp,0x1c
c001064e:	5b                   	pop    ebx
c001064f:	5e                   	pop    esi
c0010650:	5f                   	pop    edi
c0010651:	5d                   	pop    ebp
c0010652:	c3                   	ret    
c0010653:	90                   	nop

c0010654 <VgaText::clearScreen()>:
c0010654:	57                   	push   edi
c0010655:	56                   	push   esi
c0010656:	31 f6                	xor    esi,esi
c0010658:	53                   	push   ebx
c0010659:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001065d:	52                   	push   edx
c001065e:	6a 00                	push   0x0
c0010660:	6a 00                	push   0x0
c0010662:	53                   	push   ebx
c0010663:	e8 54 fc ff ff       	call   c00102bc <VgaText::setCursor(int, int)>
c0010668:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001066f:	83 c4 10             	add    esp,0x10
c0010672:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010675:	7e 20                	jle    c0010697 <VgaText::clearScreen()+0x43>
c0010677:	31 ff                	xor    edi,edi
c0010679:	50                   	push   eax
c001067a:	50                   	push   eax
c001067b:	56                   	push   esi
c001067c:	57                   	push   edi
c001067d:	47                   	inc    edi
c001067e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010681:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010684:	6a 20                	push   0x20
c0010686:	53                   	push   ebx
c0010687:	e8 c4 fb ff ff       	call   c0010250 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001068c:	83 c4 20             	add    esp,0x20
c001068f:	83 ff 50             	cmp    edi,0x50
c0010692:	75 e5                	jne    c0010679 <VgaText::clearScreen()+0x25>
c0010694:	46                   	inc    esi
c0010695:	eb db                	jmp    c0010672 <VgaText::clearScreen()+0x1e>
c0010697:	83 ec 0c             	sub    esp,0xc
c001069a:	53                   	push   ebx
c001069b:	e8 2e fe ff ff       	call   c00104ce <VgaText::doUpdate()>
c00106a0:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106a7:	83 c4 10             	add    esp,0x10
c00106aa:	5b                   	pop    ebx
c00106ab:	5e                   	pop    esi
c00106ac:	5f                   	pop    edi
c00106ad:	c3                   	ret    

c00106ae <VgaText::putchar(char)>:
c00106ae:	56                   	push   esi
c00106af:	53                   	push   ebx
c00106b0:	83 ec 14             	sub    esp,0x14
c00106b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00106b7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00106bb:	3c 5b                	cmp    al,0x5b
c00106bd:	75 18                	jne    c00106d7 <VgaText::putchar(char)+0x29>
c00106bf:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00106c3:	74 1f                	je     c00106e4 <VgaText::putchar(char)+0x36>
c00106c5:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00106cb:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00106d2:	e9 bd 00 00 00       	jmp    c0010794 <VgaText::putchar(char)+0xe6>
c00106d7:	3c 1b                	cmp    al,0x1b
c00106d9:	75 09                	jne    c00106e4 <VgaText::putchar(char)+0x36>
c00106db:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00106df:	e9 b0 00 00 00       	jmp    c0010794 <VgaText::putchar(char)+0xe6>
c00106e4:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00106e7:	84 c9                	test   cl,cl
c00106e9:	0f 84 92 00 00 00    	je     c0010781 <VgaText::putchar(char)+0xd3>
c00106ef:	8d 50 c0             	lea    edx,[eax-0x40]
c00106f2:	80 fa 3e             	cmp    dl,0x3e
c00106f5:	77 76                	ja     c001076d <VgaText::putchar(char)+0xbf>
c00106f7:	3c 6d                	cmp    al,0x6d
c00106f9:	75 47                	jne    c0010742 <VgaText::putchar(char)+0x94>
c00106fb:	31 f6                	xor    esi,esi
c00106fd:	31 d2                	xor    edx,edx
c00106ff:	31 c0                	xor    eax,eax
c0010701:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010704:	7e 2d                	jle    c0010733 <VgaText::putchar(char)+0x85>
c0010706:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001070b:	80 fa 3b             	cmp    dl,0x3b
c001070e:	75 17                	jne    c0010727 <VgaText::putchar(char)+0x79>
c0010710:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010714:	50                   	push   eax
c0010715:	53                   	push   ebx
c0010716:	e8 83 f9 ff ff       	call   c001009e <VgaText::doANSI_SGR(int)>
c001071b:	59                   	pop    ecx
c001071c:	31 d2                	xor    edx,edx
c001071e:	58                   	pop    eax
c001071f:	31 c0                	xor    eax,eax
c0010721:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010725:	eb 09                	jmp    c0010730 <VgaText::putchar(char)+0x82>
c0010727:	6b c0 0a             	imul   eax,eax,0xa
c001072a:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001072e:	88 ca                	mov    dl,cl
c0010730:	46                   	inc    esi
c0010731:	eb ce                	jmp    c0010701 <VgaText::putchar(char)+0x53>
c0010733:	84 d2                	test   dl,dl
c0010735:	74 2e                	je     c0010765 <VgaText::putchar(char)+0xb7>
c0010737:	50                   	push   eax
c0010738:	53                   	push   ebx
c0010739:	e8 60 f9 ff ff       	call   c001009e <VgaText::doANSI_SGR(int)>
c001073e:	58                   	pop    eax
c001073f:	5a                   	pop    edx
c0010740:	eb 23                	jmp    c0010765 <VgaText::putchar(char)+0xb7>
c0010742:	3c 4a                	cmp    al,0x4a
c0010744:	75 1f                	jne    c0010765 <VgaText::putchar(char)+0xb7>
c0010746:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c001074a:	75 19                	jne    c0010765 <VgaText::putchar(char)+0xb7>
c001074c:	83 ec 0c             	sub    esp,0xc
c001074f:	53                   	push   ebx
c0010750:	e8 ff fe ff ff       	call   c0010654 <VgaText::clearScreen()>
c0010755:	83 c4 0c             	add    esp,0xc
c0010758:	6a 00                	push   0x0
c001075a:	6a 00                	push   0x0
c001075c:	53                   	push   ebx
c001075d:	e8 5a fb ff ff       	call   c00102bc <VgaText::setCursor(int, int)>
c0010762:	83 c4 10             	add    esp,0x10
c0010765:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c001076b:	eb 27                	jmp    c0010794 <VgaText::putchar(char)+0xe6>
c001076d:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010770:	83 fa 0e             	cmp    edx,0xe
c0010773:	7f 1f                	jg     c0010794 <VgaText::putchar(char)+0xe6>
c0010775:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010778:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c001077b:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c001077f:	eb 13                	jmp    c0010794 <VgaText::putchar(char)+0xe6>
c0010781:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010784:	0f be c0             	movsx  eax,al
c0010787:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001078a:	50                   	push   eax
c001078b:	53                   	push   ebx
c001078c:	e8 65 fc ff ff       	call   c00103f6 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010791:	83 c4 10             	add    esp,0x10
c0010794:	83 c4 14             	add    esp,0x14
c0010797:	5b                   	pop    ebx
c0010798:	5e                   	pop    esi
c0010799:	c3                   	ret    

c001079a <VgaText::putx(unsigned int)>:
c001079a:	57                   	push   edi
c001079b:	b9 11 00 00 00       	mov    ecx,0x11
c00107a0:	56                   	push   esi
c00107a1:	be fe 9e 02 c0       	mov    esi,0xc0029efe
c00107a6:	53                   	push   ebx
c00107a7:	83 ec 20             	sub    esp,0x20
c00107aa:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00107ae:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00107b2:	fc                   	cld    
c00107b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107b5:	be 08 00 00 00       	mov    esi,0x8
c00107ba:	50                   	push   eax
c00107bb:	50                   	push   eax
c00107bc:	89 d8                	mov    eax,ebx
c00107be:	c1 e3 04             	shl    ebx,0x4
c00107c1:	c1 e8 1c             	shr    eax,0x1c
c00107c4:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00107c9:	50                   	push   eax
c00107ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00107ce:	e8 db fe ff ff       	call   c00106ae <VgaText::putchar(char)>
c00107d3:	83 c4 10             	add    esp,0x10
c00107d6:	4e                   	dec    esi
c00107d7:	75 e1                	jne    c00107ba <VgaText::putx(unsigned int)+0x20>
c00107d9:	83 c4 20             	add    esp,0x20
c00107dc:	5b                   	pop    ebx
c00107dd:	5e                   	pop    esi
c00107de:	5f                   	pop    edi
c00107df:	c3                   	ret    

c00107e0 <VgaText::puts(char const*)>:
c00107e0:	53                   	push   ebx
c00107e1:	83 ec 08             	sub    esp,0x8
c00107e4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00107e8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00107eb:	84 c0                	test   al,al
c00107ed:	74 12                	je     c0010801 <VgaText::puts(char const*)+0x21>
c00107ef:	43                   	inc    ebx
c00107f0:	51                   	push   ecx
c00107f1:	51                   	push   ecx
c00107f2:	50                   	push   eax
c00107f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107f7:	e8 b2 fe ff ff       	call   c00106ae <VgaText::putchar(char)>
c00107fc:	83 c4 10             	add    esp,0x10
c00107ff:	eb e7                	jmp    c00107e8 <VgaText::puts(char const*)+0x8>
c0010801:	83 c4 08             	add    esp,0x8
c0010804:	5b                   	pop    ebx
c0010805:	c3                   	ret    

c0010806 <VgaText::VgaText(char const*)>:
c0010806:	57                   	push   edi
c0010807:	56                   	push   esi
c0010808:	53                   	push   ebx
c0010809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001080d:	83 ec 08             	sub    esp,0x8
c0010810:	6a 00                	push   0x0
c0010812:	50                   	push   eax
c0010813:	e8 42 05 00 00       	call   c0010d5a <UnixFile::UnixFile(int)>
c0010818:	83 c4 10             	add    esp,0x10
c001081b:	ba 64 9f 02 c0       	mov    edx,0xc0029f64
c0010820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010824:	89 10                	mov    DWORD PTR [eax],edx
c0010826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082a:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010835:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001083c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010840:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010848:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001084c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010850:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085b:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010866:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001086d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010871:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001087c:	8d 50 60             	lea    edx,[eax+0x60]
c001087f:	bb 80 d6 02 c0       	mov    ebx,0xc002d680
c0010884:	b8 08 00 00 00       	mov    eax,0x8
c0010889:	fc                   	cld    
c001088a:	89 d7                	mov    edi,edx
c001088c:	89 de                	mov    esi,ebx
c001088e:	89 c1                	mov    ecx,eax
c0010890:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010896:	05 82 00 00 00       	add    eax,0x82
c001089b:	83 ec 08             	sub    esp,0x8
c001089e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a2:	50                   	push   eax
c00108a3:	e8 64 ff fe ff       	call   c000080c <strcpy>
c00108a8:	83 c4 10             	add    esp,0x10
c00108ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108af:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c00108b6:	83 ec 0c             	sub    esp,0xc
c00108b9:	6a 01                	push   0x1
c00108bb:	e8 dd 08 00 00       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c00108c0:	83 c4 10             	add    esp,0x10
c00108c3:	89 c2                	mov    edx,eax
c00108c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00108cc:	8b 1d 50 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d750
c00108d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00108d9:	89 c6                	mov    esi,eax
c00108db:	e8 5d f0 ff ff       	call   c000f93d <Phys::allocatePage()>
c00108e0:	6a 05                	push   0x5
c00108e2:	56                   	push   esi
c00108e3:	50                   	push   eax
c00108e4:	53                   	push   ebx
c00108e5:	e8 70 10 00 00       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c00108ea:	83 c4 10             	add    esp,0x10
c00108ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00108f4:	83 ec 04             	sub    esp,0x4
c00108f7:	68 00 0f 00 00       	push   0xf00
c00108fc:	6a 00                	push   0x0
c00108fe:	50                   	push   eax
c00108ff:	e8 4c fe fe ff       	call   c0000750 <memset>
c0010904:	83 c4 10             	add    esp,0x10
c0010907:	83 ec 04             	sub    esp,0x4
c001090a:	6a 00                	push   0x0
c001090c:	6a 07                	push   0x7
c001090e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010912:	e8 1b f8 ff ff       	call   c0010132 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010917:	83 c4 10             	add    esp,0x10
c001091a:	83 ec 04             	sub    esp,0x4
c001091d:	6a 00                	push   0x0
c001091f:	6a 00                	push   0x0
c0010921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010925:	e8 92 f9 ff ff       	call   c00102bc <VgaText::setCursor(int, int)>
c001092a:	83 c4 10             	add    esp,0x10
c001092d:	83 ec 0c             	sub    esp,0xc
c0010930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010934:	e8 1b fd ff ff       	call   c0010654 <VgaText::clearScreen()>
c0010939:	83 c4 10             	add    esp,0x10
c001093c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010940:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010948:	05 02 01 00 00       	add    eax,0x102
c001094d:	83 ec 04             	sub    esp,0x4
c0010950:	68 96 00 00 00       	push   0x96
c0010955:	6a 00                	push   0x0
c0010957:	50                   	push   eax
c0010958:	e8 f3 fd fe ff       	call   c0000750 <memset>
c001095d:	83 c4 10             	add    esp,0x10
c0010960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010964:	05 98 01 00 00       	add    eax,0x198
c0010969:	83 ec 04             	sub    esp,0x4
c001096c:	68 2c 01 00 00       	push   0x12c
c0010971:	6a 00                	push   0x0
c0010973:	50                   	push   eax
c0010974:	e8 d7 fd fe ff       	call   c0000750 <memset>
c0010979:	83 c4 10             	add    esp,0x10
c001097c:	90                   	nop
c001097d:	5b                   	pop    ebx
c001097e:	5e                   	pop    esi
c001097f:	5f                   	pop    edi
c0010980:	c3                   	ret    
c0010981:	90                   	nop

c0010982 <VgaText::receiveKey(unsigned char)>:
c0010982:	55                   	push   ebp
c0010983:	57                   	push   edi
c0010984:	56                   	push   esi
c0010985:	53                   	push   ebx
c0010986:	83 ec 1c             	sub    esp,0x1c
c0010989:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001098d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010991:	84 db                	test   bl,bl
c0010993:	0f 84 c9 00 00 00    	je     c0010a62 <VgaText::receiveKey(unsigned char)+0xe0>
c0010999:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c001099f:	80 fb 08             	cmp    bl,0x8
c00109a2:	75 2c                	jne    c00109d0 <VgaText::receiveKey(unsigned char)+0x4e>
c00109a4:	83 ec 0c             	sub    esp,0xc
c00109a7:	57                   	push   edi
c00109a8:	e8 bf fd fe ff       	call   c000076c <strlen>
c00109ad:	83 c4 10             	add    esp,0x10
c00109b0:	85 c0                	test   eax,eax
c00109b2:	74 41                	je     c00109f5 <VgaText::receiveKey(unsigned char)+0x73>
c00109b4:	50                   	push   eax
c00109b5:	50                   	push   eax
c00109b6:	6a 08                	push   0x8
c00109b8:	56                   	push   esi
c00109b9:	e8 f0 fc ff ff       	call   c00106ae <VgaText::putchar(char)>
c00109be:	89 3c 24             	mov    DWORD PTR [esp],edi
c00109c1:	e8 a6 fd fe ff       	call   c000076c <strlen>
c00109c6:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c00109ce:	eb 22                	jmp    c00109f2 <VgaText::receiveKey(unsigned char)+0x70>
c00109d0:	0f be c3             	movsx  eax,bl
c00109d3:	52                   	push   edx
c00109d4:	52                   	push   edx
c00109d5:	50                   	push   eax
c00109d6:	56                   	push   esi
c00109d7:	e8 d2 fc ff ff       	call   c00106ae <VgaText::putchar(char)>
c00109dc:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00109e0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00109e5:	59                   	pop    ecx
c00109e6:	5d                   	pop    ebp
c00109e7:	8d 44 24 16          	lea    eax,[esp+0x16]
c00109eb:	50                   	push   eax
c00109ec:	57                   	push   edi
c00109ed:	e8 5a ff fe ff       	call   c000094c <strcat>
c00109f2:	83 c4 10             	add    esp,0x10
c00109f5:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c00109fc:	75 05                	jne    c0010a03 <VgaText::receiveKey(unsigned char)+0x81>
c00109fe:	80 fb 0a             	cmp    bl,0xa
c0010a01:	75 53                	jne    c0010a56 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a03:	83 ec 0c             	sub    esp,0xc
c0010a06:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a0c:	53                   	push   ebx
c0010a0d:	e8 5a fd fe ff       	call   c000076c <strlen>
c0010a12:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a15:	89 c5                	mov    ebp,eax
c0010a17:	e8 50 fd fe ff       	call   c000076c <strlen>
c0010a1c:	83 c4 10             	add    esp,0x10
c0010a1f:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010a23:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010a28:	76 10                	jbe    c0010a3a <VgaText::receiveKey(unsigned char)+0xb8>
c0010a2a:	83 ec 0c             	sub    esp,0xc
c0010a2d:	68 0f 9f 02 c0       	push   0xc0029f0f
c0010a32:	e8 5e 92 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0010a37:	83 c4 10             	add    esp,0x10
c0010a3a:	50                   	push   eax
c0010a3b:	50                   	push   eax
c0010a3c:	57                   	push   edi
c0010a3d:	53                   	push   ebx
c0010a3e:	e8 09 ff fe ff       	call   c000094c <strcat>
c0010a43:	83 c4 0c             	add    esp,0xc
c0010a46:	68 96 00 00 00       	push   0x96
c0010a4b:	6a 00                	push   0x0
c0010a4d:	57                   	push   edi
c0010a4e:	e8 fd fc fe ff       	call   c0000750 <memset>
c0010a53:	83 c4 10             	add    esp,0x10
c0010a56:	83 ec 0c             	sub    esp,0xc
c0010a59:	56                   	push   esi
c0010a5a:	e8 6f fa ff ff       	call   c00104ce <VgaText::doUpdate()>
c0010a5f:	83 c4 10             	add    esp,0x10
c0010a62:	83 c4 1c             	add    esp,0x1c
c0010a65:	5b                   	pop    ebx
c0010a66:	5e                   	pop    esi
c0010a67:	5f                   	pop    edi
c0010a68:	5d                   	pop    ebp
c0010a69:	c3                   	ret    

c0010a6a <VgaText::write(unsigned long long, void*, int*)>:
c0010a6a:	55                   	push   ebp
c0010a6b:	57                   	push   edi
c0010a6c:	56                   	push   esi
c0010a6d:	53                   	push   ebx
c0010a6e:	83 ec 0c             	sub    esp,0xc
c0010a71:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010a75:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010a79:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a7d:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010a84:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010a87:	39 eb                	cmp    ebx,ebp
c0010a89:	74 13                	je     c0010a9e <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010a8b:	43                   	inc    ebx
c0010a8c:	50                   	push   eax
c0010a8d:	50                   	push   eax
c0010a8e:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010a92:	50                   	push   eax
c0010a93:	56                   	push   esi
c0010a94:	e8 15 fc ff ff       	call   c00106ae <VgaText::putchar(char)>
c0010a99:	83 c4 10             	add    esp,0x10
c0010a9c:	eb e9                	jmp    c0010a87 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010a9e:	83 ec 0c             	sub    esp,0xc
c0010aa1:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010aa8:	56                   	push   esi
c0010aa9:	e8 20 fa ff ff       	call   c00104ce <VgaText::doUpdate()>
c0010aae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010ab2:	89 38                	mov    DWORD PTR [eax],edi
c0010ab4:	83 c4 1c             	add    esp,0x1c
c0010ab7:	31 c0                	xor    eax,eax
c0010ab9:	5b                   	pop    ebx
c0010aba:	5e                   	pop    esi
c0010abb:	5f                   	pop    edi
c0010abc:	5d                   	pop    ebp
c0010abd:	c3                   	ret    

c0010abe <newTerminal(char*)>:
c0010abe:	83 ec 28             	sub    esp,0x28
c0010ac1:	68 c4 02 00 00       	push   0x2c4
c0010ac6:	e8 ce ea ff ff       	call   c000f599 <malloc>
c0010acb:	5a                   	pop    edx
c0010acc:	59                   	pop    ecx
c0010acd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010ad1:	50                   	push   eax
c0010ad2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010ad6:	e8 2b fd ff ff       	call   c0010806 <VgaText::VgaText(char const*)>
c0010adb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010adf:	83 c4 2c             	add    esp,0x2c
c0010ae2:	c3                   	ret    
c0010ae3:	90                   	nop

c0010ae4 <TSS::TSS()>:
c0010ae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ae8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010aef:	90                   	nop
c0010af0:	c3                   	ret    
c0010af1:	90                   	nop

c0010af2 <TSS::setESP(unsigned long)>:
c0010af2:	55                   	push   ebp
c0010af3:	89 e5                	mov    ebp,esp
c0010af5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010af8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010afb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010afe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b01:	90                   	nop
c0010b02:	5d                   	pop    ebp
c0010b03:	c3                   	ret    

c0010b04 <TSS::flush()>:
c0010b04:	55                   	push   ebp
c0010b05:	89 e5                	mov    ebp,esp
c0010b07:	83 ec 10             	sub    esp,0x10
c0010b0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b0f:	83 c8 03             	or     eax,0x3
c0010b12:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b16:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b1a:	66 89 d0             	mov    ax,dx
c0010b1d:	0f 00 d8             	ltr    ax
c0010b20:	90                   	nop
c0010b21:	c9                   	leave  
c0010b22:	c3                   	ret    
c0010b23:	90                   	nop

c0010b24 <TSS::setup(unsigned long, unsigned long)>:
c0010b24:	55                   	push   ebp
c0010b25:	89 e5                	mov    ebp,esp
c0010b27:	83 ec 18             	sub    esp,0x18
c0010b2a:	83 ec 0c             	sub    esp,0xc
c0010b2d:	6a 68                	push   0x68
c0010b2f:	e8 65 ea ff ff       	call   c000f599 <malloc>
c0010b34:	83 c4 10             	add    esp,0x10
c0010b37:	89 c2                	mov    edx,eax
c0010b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b3c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b42:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b45:	83 ec 04             	sub    esp,0x4
c0010b48:	6a 68                	push   0x68
c0010b4a:	6a 00                	push   0x0
c0010b4c:	50                   	push   eax
c0010b4d:	e8 fe fb fe ff       	call   c0000750 <memset>
c0010b52:	83 c4 10             	add    esp,0x10
c0010b55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b5b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010b61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b67:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010b6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b73:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b76:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b7f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010b85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b8b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010b91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b97:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ba0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ba3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010baf:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010bb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bbb:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010bca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010bcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bd3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010bd6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010bd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bdf:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010be6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bec:	0f 20 da             	mov    edx,cr3
c0010bef:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010bf2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010bf5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010bf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bfe:	83 ec 08             	sub    esp,0x8
c0010c01:	50                   	push   eax
c0010c02:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c05:	50                   	push   eax
c0010c06:	e8 87 e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c0b:	83 c4 10             	add    esp,0x10
c0010c0e:	83 ec 08             	sub    esp,0x8
c0010c11:	6a 68                	push   0x68
c0010c13:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c16:	50                   	push   eax
c0010c17:	e8 92 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c1c:	83 c4 10             	add    esp,0x10
c0010c1f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010c23:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c26:	83 e0 0f             	and    eax,0xf
c0010c29:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c2c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c2f:	83 c8 40             	or     eax,0x40
c0010c32:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c35:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0010c3a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c40:	05 78 01 00 00       	add    eax,0x178
c0010c45:	83 ec 04             	sub    esp,0x4
c0010c48:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010c4b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010c4e:	50                   	push   eax
c0010c4f:	e8 8e e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010c54:	83 c4 10             	add    esp,0x10
c0010c57:	89 c2                	mov    edx,eax
c0010c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c5c:	89 10                	mov    DWORD PTR [eax],edx
c0010c5e:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0010c63:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c69:	05 78 01 00 00       	add    eax,0x178
c0010c6e:	83 ec 0c             	sub    esp,0xc
c0010c71:	50                   	push   eax
c0010c72:	e8 95 e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010c77:	83 c4 10             	add    esp,0x10
c0010c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c7f:	c9                   	leave  
c0010c80:	c3                   	ret    
c0010c81:	90                   	nop

c0010c82 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010c82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010c8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c8d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010c92:	75 08                	jne    c0010c9c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010c94:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010c9a:	eb 38                	jmp    c0010cd4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010c9c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010ca1:	75 17                	jne    c0010cba <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010ca3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ca8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010cab:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010cb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0010cb3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010cb7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010cba:	89 c1                	mov    ecx,eax
c0010cbc:	83 e1 fd             	and    ecx,0xfffffffd
c0010cbf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010cc5:	74 cd                	je     c0010c94 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010cc7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010ccc:	83 e0 ef             	and    eax,0xffffffef
c0010ccf:	83 f8 08             	cmp    eax,0x8
c0010cd2:	76 c0                	jbe    c0010c94 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010cd4:	31 c0                	xor    eax,eax
c0010cd6:	c3                   	ret    
c0010cd7:	90                   	nop

c0010cd8 <ReservedFilename::isAtty()>:
c0010cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cdc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010cdf:	31 c0                	xor    eax,eax
c0010ce1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010ce7:	74 09                	je     c0010cf2 <ReservedFilename::isAtty()+0x1a>
c0010ce9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010cef:	0f 94 c0             	sete   al
c0010cf2:	c3                   	ret    
c0010cf3:	90                   	nop

c0010cf4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cf8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010cfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d03:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d08:	75 08                	jne    c0010d12 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d0a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d10:	eb 3d                	jmp    c0010d4f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d12:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d17:	75 17                	jne    c0010d30 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d1e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d21:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d27:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d29:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d2d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010d30:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d35:	75 04                	jne    c0010d3b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010d37:	89 0a                	mov    DWORD PTR [edx],ecx
c0010d39:	eb 14                	jmp    c0010d4f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d3b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010d40:	74 c8                	je     c0010d0a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d42:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d47:	83 e0 ef             	and    eax,0xffffffef
c0010d4a:	83 f8 08             	cmp    eax,0x8
c0010d4d:	76 bb                	jbe    c0010d0a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010d4f:	31 c0                	xor    eax,eax
c0010d51:	c3                   	ret    

c0010d52 <UnixFile::getFileDescriptor()>:
c0010d52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d59:	c3                   	ret    

c0010d5a <UnixFile::UnixFile(int)>:
c0010d5a:	53                   	push   ebx
c0010d5b:	83 ec 28             	sub    esp,0x28
c0010d5e:	ba 2c a0 02 c0       	mov    edx,0xc002a02c
c0010d63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d67:	89 10                	mov    DWORD PTR [eax],edx
c0010d69:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010d71:	0f 8f 8c 01 00 00    	jg     c0010f03 <UnixFile::UnixFile(int)+0x1a9>
c0010d77:	a1 80 c5 02 c0       	mov    eax,ds:0xc002c580
c0010d7c:	8d 50 01             	lea    edx,[eax+0x1]
c0010d7f:	89 15 80 c5 02 c0    	mov    DWORD PTR ds:0xc002c580,edx
c0010d85:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010d89:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d8c:	83 ec 08             	sub    esp,0x8
c0010d8f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010d93:	68 38 d7 02 c0       	push   0xc002d738
c0010d98:	e8 39 75 01 00       	call   c00282d6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010d9d:	83 c4 10             	add    esp,0x10
c0010da0:	a0 34 d7 02 c0       	mov    al,ds:0xc002d734
c0010da5:	83 f0 01             	xor    eax,0x1
c0010da8:	84 c0                	test   al,al
c0010daa:	0f 84 54 01 00 00    	je     c0010f04 <UnixFile::UnixFile(int)+0x1aa>
c0010db0:	c6 05 34 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d734,0x1
c0010db7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010dbf:	83 ec 0c             	sub    esp,0xc
c0010dc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010dc6:	e8 ce e7 ff ff       	call   c000f599 <malloc>
c0010dcb:	83 c4 10             	add    esp,0x10
c0010dce:	89 c3                	mov    ebx,eax
c0010dd0:	83 ec 08             	sub    esp,0x8
c0010dd3:	68 03 ff ff 0f       	push   0xfffff03
c0010dd8:	53                   	push   ebx
c0010dd9:	e8 2c 01 00 00       	call   c0010f0a <ReservedFilename::ReservedFilename(int)>
c0010dde:	83 c4 10             	add    esp,0x10
c0010de1:	89 1d 2c d7 02 c0    	mov    DWORD PTR ds:0xc002d72c,ebx
c0010de7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010def:	83 ec 0c             	sub    esp,0xc
c0010df2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010df6:	e8 9e e7 ff ff       	call   c000f599 <malloc>
c0010dfb:	83 c4 10             	add    esp,0x10
c0010dfe:	89 c3                	mov    ebx,eax
c0010e00:	83 ec 08             	sub    esp,0x8
c0010e03:	68 01 ff ff 0f       	push   0xfffff01
c0010e08:	53                   	push   ebx
c0010e09:	e8 fc 00 00 00       	call   c0010f0a <ReservedFilename::ReservedFilename(int)>
c0010e0e:	83 c4 10             	add    esp,0x10
c0010e11:	89 1d 30 d7 02 c0    	mov    DWORD PTR ds:0xc002d730,ebx
c0010e17:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e1f:	83 ec 0c             	sub    esp,0xc
c0010e22:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010e26:	e8 6e e7 ff ff       	call   c000f599 <malloc>
c0010e2b:	83 c4 10             	add    esp,0x10
c0010e2e:	89 c3                	mov    ebx,eax
c0010e30:	83 ec 08             	sub    esp,0x8
c0010e33:	68 00 ff ff 0f       	push   0xfffff00
c0010e38:	53                   	push   ebx
c0010e39:	e8 cc 00 00 00       	call   c0010f0a <ReservedFilename::ReservedFilename(int)>
c0010e3e:	83 c4 10             	add    esp,0x10
c0010e41:	89 1d 24 d7 02 c0    	mov    DWORD PTR ds:0xc002d724,ebx
c0010e47:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010e4f:	83 ec 0c             	sub    esp,0xc
c0010e52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e56:	e8 3e e7 ff ff       	call   c000f599 <malloc>
c0010e5b:	83 c4 10             	add    esp,0x10
c0010e5e:	89 c3                	mov    ebx,eax
c0010e60:	83 ec 08             	sub    esp,0x8
c0010e63:	68 02 ff ff 0f       	push   0xfffff02
c0010e68:	53                   	push   ebx
c0010e69:	e8 9c 00 00 00       	call   c0010f0a <ReservedFilename::ReservedFilename(int)>
c0010e6e:	83 c4 10             	add    esp,0x10
c0010e71:	89 1d 28 d7 02 c0    	mov    DWORD PTR ds:0xc002d728,ebx
c0010e77:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010e7f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010e84:	7f 7e                	jg     c0010f04 <UnixFile::UnixFile(int)+0x1aa>
c0010e86:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010e8e:	83 ec 0c             	sub    esp,0xc
c0010e91:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010e95:	e8 ff e6 ff ff       	call   c000f599 <malloc>
c0010e9a:	83 c4 10             	add    esp,0x10
c0010e9d:	89 c3                	mov    ebx,eax
c0010e9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ea3:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010ea8:	83 ec 08             	sub    esp,0x8
c0010eab:	50                   	push   eax
c0010eac:	53                   	push   ebx
c0010ead:	e8 58 00 00 00       	call   c0010f0a <ReservedFilename::ReservedFilename(int)>
c0010eb2:	83 c4 10             	add    esp,0x10
c0010eb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010eb9:	89 1c 85 00 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2900],ebx
c0010ec0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010ec8:	83 ec 0c             	sub    esp,0xc
c0010ecb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010ecf:	e8 c5 e6 ff ff       	call   c000f599 <malloc>
c0010ed4:	83 c4 10             	add    esp,0x10
c0010ed7:	89 c3                	mov    ebx,eax
c0010ed9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010edd:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010ee2:	83 ec 08             	sub    esp,0x8
c0010ee5:	50                   	push   eax
c0010ee6:	53                   	push   ebx
c0010ee7:	e8 1e 00 00 00       	call   c0010f0a <ReservedFilename::ReservedFilename(int)>
c0010eec:	83 c4 10             	add    esp,0x10
c0010eef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ef3:	89 1c 85 c0 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2940],ebx
c0010efa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010efe:	e9 7c ff ff ff       	jmp    c0010e7f <UnixFile::UnixFile(int)+0x125>
c0010f03:	90                   	nop
c0010f04:	83 c4 28             	add    esp,0x28
c0010f07:	5b                   	pop    ebx
c0010f08:	c3                   	ret    
c0010f09:	90                   	nop

c0010f0a <ReservedFilename::ReservedFilename(int)>:
c0010f0a:	83 ec 0c             	sub    esp,0xc
c0010f0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f11:	83 ec 08             	sub    esp,0x8
c0010f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f18:	50                   	push   eax
c0010f19:	e8 3c fe ff ff       	call   c0010d5a <UnixFile::UnixFile(int)>
c0010f1e:	83 c4 10             	add    esp,0x10
c0010f21:	ba 48 a0 02 c0       	mov    edx,0xc002a048
c0010f26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f2a:	89 10                	mov    DWORD PTR [eax],edx
c0010f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f30:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f37:	90                   	nop
c0010f38:	83 c4 0c             	add    esp,0xc
c0010f3b:	c3                   	ret    

c0010f3c <UnixFile::~UnixFile()>:
c0010f3c:	83 ec 1c             	sub    esp,0x1c
c0010f3f:	ba 2c a0 02 c0       	mov    edx,0xc002a02c
c0010f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f48:	89 10                	mov    DWORD PTR [eax],edx
c0010f4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f51:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010f56:	7f 73                	jg     c0010fcb <UnixFile::~UnixFile()+0x8f>
c0010f58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f60:	83 ec 0c             	sub    esp,0xc
c0010f63:	68 38 d7 02 c0       	push   0xc002d738
c0010f68:	e8 3d 74 01 00       	call   c00283aa <LinkedList<UnixFile>::getFirstElement()>
c0010f6d:	83 c4 10             	add    esp,0x10
c0010f70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f74:	83 ec 0c             	sub    esp,0xc
c0010f77:	68 38 d7 02 c0       	push   0xc002d738
c0010f7c:	e8 31 74 01 00       	call   c00283b2 <LinkedList<UnixFile>::removeFirst()>
c0010f81:	83 c4 10             	add    esp,0x10
c0010f84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f88:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010f8c:	74 40                	je     c0010fce <UnixFile::~UnixFile()+0x92>
c0010f8e:	83 ec 08             	sub    esp,0x8
c0010f91:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f95:	68 38 d7 02 c0       	push   0xc002d738
c0010f9a:	e8 37 73 01 00       	call   c00282d6 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010f9f:	83 c4 10             	add    esp,0x10
c0010fa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fa6:	8d 50 01             	lea    edx,[eax+0x1]
c0010fa9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010fad:	3d 88 13 00 00       	cmp    eax,0x1388
c0010fb2:	0f 94 c0             	sete   al
c0010fb5:	84 c0                	test   al,al
c0010fb7:	74 a7                	je     c0010f60 <UnixFile::~UnixFile()+0x24>
c0010fb9:	83 ec 0c             	sub    esp,0xc
c0010fbc:	68 04 a0 02 c0       	push   0xc002a004
c0010fc1:	e8 cf 8c 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0010fc6:	83 c4 10             	add    esp,0x10
c0010fc9:	eb 95                	jmp    c0010f60 <UnixFile::~UnixFile()+0x24>
c0010fcb:	90                   	nop
c0010fcc:	eb 01                	jmp    c0010fcf <UnixFile::~UnixFile()+0x93>
c0010fce:	90                   	nop
c0010fcf:	90                   	nop
c0010fd0:	83 c4 1c             	add    esp,0x1c
c0010fd3:	c3                   	ret    

c0010fd4 <UnixFile::~UnixFile()>:
c0010fd4:	83 ec 0c             	sub    esp,0xc
c0010fd7:	83 ec 0c             	sub    esp,0xc
c0010fda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fde:	e8 59 ff ff ff       	call   c0010f3c <UnixFile::~UnixFile()>
c0010fe3:	83 c4 10             	add    esp,0x10
c0010fe6:	83 ec 08             	sub    esp,0x8
c0010fe9:	6a 0c                	push   0xc
c0010feb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fef:	e8 69 14 00 00       	call   c001245d <operator delete(void*, unsigned long)>
c0010ff4:	83 c4 10             	add    esp,0x10
c0010ff7:	83 c4 0c             	add    esp,0xc
c0010ffa:	c3                   	ret    
c0010ffb:	90                   	nop

c0010ffc <ReservedFilename::~ReservedFilename()>:
c0010ffc:	83 ec 0c             	sub    esp,0xc
c0010fff:	ba 48 a0 02 c0       	mov    edx,0xc002a048
c0011004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011008:	89 10                	mov    DWORD PTR [eax],edx
c001100a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100e:	83 ec 0c             	sub    esp,0xc
c0011011:	50                   	push   eax
c0011012:	e8 25 ff ff ff       	call   c0010f3c <UnixFile::~UnixFile()>
c0011017:	83 c4 10             	add    esp,0x10
c001101a:	90                   	nop
c001101b:	83 c4 0c             	add    esp,0xc
c001101e:	c3                   	ret    
c001101f:	90                   	nop

c0011020 <ReservedFilename::~ReservedFilename()>:
c0011020:	83 ec 0c             	sub    esp,0xc
c0011023:	83 ec 0c             	sub    esp,0xc
c0011026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001102a:	e8 cd ff ff ff       	call   c0010ffc <ReservedFilename::~ReservedFilename()>
c001102f:	83 c4 10             	add    esp,0x10
c0011032:	83 ec 08             	sub    esp,0x8
c0011035:	6a 0c                	push   0xc
c0011037:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001103b:	e8 1d 14 00 00       	call   c001245d <operator delete(void*, unsigned long)>
c0011040:	83 c4 10             	add    esp,0x10
c0011043:	83 c4 0c             	add    esp,0xc
c0011046:	c3                   	ret    

c0011047 <getFromFileDescriptor(int)>:
c0011047:	53                   	push   ebx
c0011048:	83 ec 08             	sub    esp,0x8
c001104b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001104f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011055:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001105b:	7f 2c                	jg     c0011089 <getFromFileDescriptor(int)+0x42>
c001105d:	83 ec 0c             	sub    esp,0xc
c0011060:	68 38 d7 02 c0       	push   0xc002d738
c0011065:	e8 40 73 01 00       	call   c00283aa <LinkedList<UnixFile>::getFirstElement()>
c001106a:	83 c4 10             	add    esp,0x10
c001106d:	85 c0                	test   eax,eax
c001106f:	75 04                	jne    c0011075 <getFromFileDescriptor(int)+0x2e>
c0011071:	31 c0                	xor    eax,eax
c0011073:	eb 6e                	jmp    c00110e3 <getFromFileDescriptor(int)+0x9c>
c0011075:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011078:	74 69                	je     c00110e3 <getFromFileDescriptor(int)+0x9c>
c001107a:	52                   	push   edx
c001107b:	52                   	push   edx
c001107c:	50                   	push   eax
c001107d:	68 38 d7 02 c0       	push   0xc002d738
c0011082:	e8 cd 73 01 00       	call   c0028454 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011087:	eb e1                	jmp    c001106a <getFromFileDescriptor(int)+0x23>
c0011089:	a1 2c d7 02 c0       	mov    eax,ds:0xc002d72c
c001108e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011094:	74 4d                	je     c00110e3 <getFromFileDescriptor(int)+0x9c>
c0011096:	a1 30 d7 02 c0       	mov    eax,ds:0xc002d730
c001109b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00110a1:	74 40                	je     c00110e3 <getFromFileDescriptor(int)+0x9c>
c00110a3:	a1 28 d7 02 c0       	mov    eax,ds:0xc002d728
c00110a8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00110ae:	74 33                	je     c00110e3 <getFromFileDescriptor(int)+0x9c>
c00110b0:	a1 24 d7 02 c0       	mov    eax,ds:0xc002d724
c00110b5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00110bb:	74 26                	je     c00110e3 <getFromFileDescriptor(int)+0x9c>
c00110bd:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00110c3:	83 f8 08             	cmp    eax,0x8
c00110c6:	77 09                	ja     c00110d1 <getFromFileDescriptor(int)+0x8a>
c00110c8:	8b 04 85 00 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2900]
c00110cf:	eb 12                	jmp    c00110e3 <getFromFileDescriptor(int)+0x9c>
c00110d1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00110d7:	83 fb 08             	cmp    ebx,0x8
c00110da:	77 95                	ja     c0011071 <getFromFileDescriptor(int)+0x2a>
c00110dc:	8b 04 9d c0 d6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2940]
c00110e3:	83 c4 08             	add    esp,0x8
c00110e6:	5b                   	pop    ebx
c00110e7:	c3                   	ret    

c00110e8 <__static_initialization_and_destruction_0(int, int)>:
c00110e8:	83 ec 0c             	sub    esp,0xc
c00110eb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00110f0:	75 34                	jne    c0011126 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00110f2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00110fa:	75 2a                	jne    c0011126 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00110fc:	83 ec 0c             	sub    esp,0xc
c00110ff:	68 38 d7 02 c0       	push   0xc002d738
c0011104:	e8 8b 71 01 00       	call   c0028294 <LinkedList<UnixFile>::LinkedList()>
c0011109:	83 c4 10             	add    esp,0x10
c001110c:	83 ec 04             	sub    esp,0x4
c001110f:	68 b0 c3 02 c0       	push   0xc002c3b0
c0011114:	68 38 d7 02 c0       	push   0xc002d738
c0011119:	68 92 82 02 c0       	push   0xc0028292
c001111e:	e8 b4 12 00 00       	call   c00123d7 <__cxa_atexit>
c0011123:	83 c4 10             	add    esp,0x10
c0011126:	90                   	nop
c0011127:	83 c4 0c             	add    esp,0xc
c001112a:	c3                   	ret    

c001112b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001112b:	83 ec 0c             	sub    esp,0xc
c001112e:	83 ec 08             	sub    esp,0x8
c0011131:	68 ff ff 00 00       	push   0xffff
c0011136:	6a 01                	push   0x1
c0011138:	e8 ab ff ff ff       	call   c00110e8 <__static_initialization_and_destruction_0(int, int)>
c001113d:	83 c4 10             	add    esp,0x10
c0011140:	83 c4 0c             	add    esp,0xc
c0011143:	c3                   	ret    

c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011144:	53                   	push   ebx
c0011145:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011149:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001114d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011153:	89 c8                	mov    eax,ecx
c0011155:	d1 e8                	shr    eax,1
c0011157:	03 05 88 c5 02 c0    	add    eax,DWORD PTR ds:0xc002c588
c001115d:	83 e1 01             	and    ecx,0x1
c0011160:	8a 10                	mov    dl,BYTE PTR [eax]
c0011162:	75 09                	jne    c001116d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011164:	83 e2 f0             	and    edx,0xfffffff0
c0011167:	09 da                	or     edx,ebx
c0011169:	88 10                	mov    BYTE PTR [eax],dl
c001116b:	5b                   	pop    ebx
c001116c:	c3                   	ret    
c001116d:	c1 e3 04             	shl    ebx,0x4
c0011170:	83 e2 0f             	and    edx,0xf
c0011173:	09 da                	or     edx,ebx
c0011175:	88 10                	mov    BYTE PTR [eax],dl
c0011177:	5b                   	pop    ebx
c0011178:	c3                   	ret    

c0011179 <Virt::getPageState(unsigned long)>:
c0011179:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001117d:	8b 0d 88 c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c588
c0011183:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011189:	89 d0                	mov    eax,edx
c001118b:	d1 e8                	shr    eax,1
c001118d:	83 e2 01             	and    edx,0x1
c0011190:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011193:	75 04                	jne    c0011199 <Virt::getPageState(unsigned long)+0x20>
c0011195:	83 e0 0f             	and    eax,0xf
c0011198:	c3                   	ret    
c0011199:	c0 e8 04             	shr    al,0x4
c001119c:	c3                   	ret    

c001119d <Virt::allocateKernelVirtualPages(int)>:
c001119d:	55                   	push   ebp
c001119e:	31 ed                	xor    ebp,ebp
c00111a0:	57                   	push   edi
c00111a1:	56                   	push   esi
c00111a2:	53                   	push   ebx
c00111a3:	31 db                	xor    ebx,ebx
c00111a5:	83 ec 1c             	sub    esp,0x1c
c00111a8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00111ac:	8b 3d 84 c5 02 c0    	mov    edi,DWORD PTR ds:0xc002c584
c00111b2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00111b7:	57                   	push   edi
c00111b8:	e8 bc ff ff ff       	call   c0011179 <Virt::getPageState(unsigned long)>
c00111bd:	5a                   	pop    edx
c00111be:	84 c0                	test   al,al
c00111c0:	75 3a                	jne    c00111fc <Virt::allocateKernelVirtualPages(int)+0x5f>
c00111c2:	85 db                	test   ebx,ebx
c00111c4:	75 02                	jne    c00111c8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00111c6:	89 fd                	mov    ebp,edi
c00111c8:	43                   	inc    ebx
c00111c9:	39 f3                	cmp    ebx,esi
c00111cb:	74 5a                	je     c0011227 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00111cd:	47                   	inc    edi
c00111ce:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00111d4:	76 31                	jbe    c0011207 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00111d6:	c7 05 84 c5 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c584,0xc8000
c00111e0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00111e5:	75 28                	jne    c001120f <Virt::allocateKernelVirtualPages(int)+0x72>
c00111e7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00111ec:	bf 00 80 0c 00       	mov    edi,0xc8000
c00111f1:	57                   	push   edi
c00111f2:	e8 82 ff ff ff       	call   c0011179 <Virt::getPageState(unsigned long)>
c00111f7:	5a                   	pop    edx
c00111f8:	84 c0                	test   al,al
c00111fa:	74 c6                	je     c00111c2 <Virt::allocateKernelVirtualPages(int)+0x25>
c00111fc:	31 db                	xor    ebx,ebx
c00111fe:	47                   	inc    edi
c00111ff:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011205:	77 cf                	ja     c00111d6 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011207:	89 3d 84 c5 02 c0    	mov    DWORD PTR ds:0xc002c584,edi
c001120d:	eb a8                	jmp    c00111b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001120f:	83 ec 0c             	sub    esp,0xc
c0011212:	68 5c a0 02 c0       	push   0xc002a05c
c0011217:	e8 79 8a 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c001121c:	8b 3d 84 c5 02 c0    	mov    edi,DWORD PTR ds:0xc002c584
c0011222:	83 c4 10             	add    esp,0x10
c0011225:	eb 90                	jmp    c00111b7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011227:	89 2d 84 c5 02 c0    	mov    DWORD PTR ds:0xc002c584,ebp
c001122d:	4b                   	dec    ebx
c001122e:	74 5f                	je     c001128f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011230:	85 f6                	test   esi,esi
c0011232:	74 3d                	je     c0011271 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011234:	89 e8                	mov    eax,ebp
c0011236:	31 db                	xor    ebx,ebx
c0011238:	8d 7e ff             	lea    edi,[esi-0x1]
c001123b:	eb 14                	jmp    c0011251 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001123d:	6a 01                	push   0x1
c001123f:	43                   	inc    ebx
c0011240:	50                   	push   eax
c0011241:	e8 fe fe ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011246:	58                   	pop    eax
c0011247:	39 f3                	cmp    ebx,esi
c0011249:	5a                   	pop    edx
c001124a:	74 25                	je     c0011271 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001124c:	a1 84 c5 02 c0       	mov    eax,ds:0xc002c584
c0011251:	8d 50 01             	lea    edx,[eax+0x1]
c0011254:	85 db                	test   ebx,ebx
c0011256:	89 15 84 c5 02 c0    	mov    DWORD PTR ds:0xc002c584,edx
c001125c:	74 20                	je     c001127e <Virt::allocateKernelVirtualPages(int)+0xe1>
c001125e:	39 df                	cmp    edi,ebx
c0011260:	75 db                	jne    c001123d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011262:	6a 03                	push   0x3
c0011264:	43                   	inc    ebx
c0011265:	50                   	push   eax
c0011266:	e8 d9 fe ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001126b:	59                   	pop    ecx
c001126c:	39 f3                	cmp    ebx,esi
c001126e:	58                   	pop    eax
c001126f:	75 db                	jne    c001124c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011271:	83 c4 1c             	add    esp,0x1c
c0011274:	89 e8                	mov    eax,ebp
c0011276:	5b                   	pop    ebx
c0011277:	c1 e0 0c             	shl    eax,0xc
c001127a:	5e                   	pop    esi
c001127b:	5f                   	pop    edi
c001127c:	5d                   	pop    ebp
c001127d:	c3                   	ret    
c001127e:	6a 02                	push   0x2
c0011280:	bb 01 00 00 00       	mov    ebx,0x1
c0011285:	50                   	push   eax
c0011286:	e8 b9 fe ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001128b:	58                   	pop    eax
c001128c:	5a                   	pop    edx
c001128d:	eb bd                	jmp    c001124c <Virt::allocateKernelVirtualPages(int)+0xaf>
c001128f:	6a 04                	push   0x4
c0011291:	8d 45 01             	lea    eax,[ebp+0x1]
c0011294:	55                   	push   ebp
c0011295:	a3 84 c5 02 c0       	mov    ds:0xc002c584,eax
c001129a:	e8 a5 fe ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001129f:	59                   	pop    ecx
c00112a0:	89 e8                	mov    eax,ebp
c00112a2:	5b                   	pop    ebx
c00112a3:	c1 e0 0c             	shl    eax,0xc
c00112a6:	83 c4 1c             	add    esp,0x1c
c00112a9:	5b                   	pop    ebx
c00112aa:	5e                   	pop    esi
c00112ab:	5f                   	pop    edi
c00112ac:	5d                   	pop    ebp
c00112ad:	c3                   	ret    

c00112ae <Virt::freeSwapfilePage(unsigned long)>:
c00112ae:	53                   	push   ebx
c00112af:	8b 15 4c d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d74c
c00112b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00112b9:	b8 01 00 00 00       	mov    eax,0x1
c00112be:	89 cb                	mov    ebx,ecx
c00112c0:	d3 e0                	shl    eax,cl
c00112c2:	c1 eb 05             	shr    ebx,0x5
c00112c5:	f7 d0                	not    eax
c00112c7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00112ca:	5b                   	pop    ebx
c00112cb:	c3                   	ret    

c00112cc <Virt::swapIDToSector(unsigned long)>:
c00112cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112d0:	0f af 05 8c c5 02 c0 	imul   eax,DWORD PTR ds:0xc002c58c
c00112d7:	03 05 94 c5 02 c0    	add    eax,DWORD PTR ds:0xc002c594
c00112dd:	c3                   	ret    

c00112de <Virt::allocateSwapfilePage()>:
c00112de:	55                   	push   ebp
c00112df:	31 d2                	xor    edx,edx
c00112e1:	57                   	push   edi
c00112e2:	56                   	push   esi
c00112e3:	53                   	push   ebx
c00112e4:	83 ec 0c             	sub    esp,0xc
c00112e7:	8b 0d 8c c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c58c
c00112ed:	a1 90 c5 02 c0       	mov    eax,ds:0xc002c590
c00112f2:	f7 f1                	div    ecx
c00112f4:	39 0d 90 c5 02 c0    	cmp    DWORD PTR ds:0xc002c590,ecx
c00112fa:	72 2d                	jb     c0011329 <Virt::allocateSwapfilePage()+0x4b>
c00112fc:	8b 35 4c d7 02 c0    	mov    esi,DWORD PTR ds:0xc002d74c
c0011302:	8b 16                	mov    edx,DWORD PTR [esi]
c0011304:	f6 c2 01             	test   dl,0x1
c0011307:	74 3c                	je     c0011345 <Virt::allocateSwapfilePage()+0x67>
c0011309:	31 c9                	xor    ecx,ecx
c001130b:	bf 01 00 00 00       	mov    edi,0x1
c0011310:	eb 12                	jmp    c0011324 <Virt::allocateSwapfilePage()+0x46>
c0011312:	89 fd                	mov    ebp,edi
c0011314:	89 ca                	mov    edx,ecx
c0011316:	d3 e5                	shl    ebp,cl
c0011318:	c1 ea 05             	shr    edx,0x5
c001131b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001131e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011320:	85 ea                	test   edx,ebp
c0011322:	74 2a                	je     c001134e <Virt::allocateSwapfilePage()+0x70>
c0011324:	41                   	inc    ecx
c0011325:	39 c8                	cmp    eax,ecx
c0011327:	77 e9                	ja     c0011312 <Virt::allocateSwapfilePage()+0x34>
c0011329:	83 ec 0c             	sub    esp,0xc
c001132c:	68 e3 a1 02 c0       	push   0xc002a1e3
c0011331:	e8 5f 89 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0011336:	83 c4 10             	add    esp,0x10
c0011339:	31 c9                	xor    ecx,ecx
c001133b:	83 c4 0c             	add    esp,0xc
c001133e:	89 c8                	mov    eax,ecx
c0011340:	5b                   	pop    ebx
c0011341:	5e                   	pop    esi
c0011342:	5f                   	pop    edi
c0011343:	5d                   	pop    ebp
c0011344:	c3                   	ret    
c0011345:	89 f3                	mov    ebx,esi
c0011347:	bd 01 00 00 00       	mov    ebp,0x1
c001134c:	31 c9                	xor    ecx,ecx
c001134e:	09 ea                	or     edx,ebp
c0011350:	89 c8                	mov    eax,ecx
c0011352:	89 13                	mov    DWORD PTR [ebx],edx
c0011354:	83 c4 0c             	add    esp,0xc
c0011357:	5b                   	pop    ebx
c0011358:	5e                   	pop    esi
c0011359:	5f                   	pop    edi
c001135a:	5d                   	pop    ebp
c001135b:	c3                   	ret    

c001135c <Virt::virtualMemorySetup()>:
c001135c:	53                   	push   ebx
c001135d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011362:	6a 0f                	push   0xf
c0011364:	53                   	push   ebx
c0011365:	43                   	inc    ebx
c0011366:	e8 d9 fd ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001136b:	58                   	pop    eax
c001136c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011372:	5a                   	pop    edx
c0011373:	75 ed                	jne    c0011362 <Virt::virtualMemorySetup()+0x6>
c0011375:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001137a:	6a 00                	push   0x0
c001137c:	53                   	push   ebx
c001137d:	43                   	inc    ebx
c001137e:	e8 c1 fd ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011383:	59                   	pop    ecx
c0011384:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001138a:	58                   	pop    eax
c001138b:	75 ed                	jne    c001137a <Virt::virtualMemorySetup()+0x1e>
c001138d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011392:	6a 0f                	push   0xf
c0011394:	53                   	push   ebx
c0011395:	43                   	inc    ebx
c0011396:	e8 a9 fd ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001139b:	58                   	pop    eax
c001139c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00113a2:	5a                   	pop    edx
c00113a3:	75 ed                	jne    c0011392 <Virt::virtualMemorySetup()+0x36>
c00113a5:	5b                   	pop    ebx
c00113a6:	c3                   	ret    

c00113a7 <Virt::setupPageSwapping(int)>:
c00113a7:	57                   	push   edi
c00113a8:	56                   	push   esi
c00113a9:	53                   	push   ebx
c00113aa:	83 ec 1c             	sub    esp,0x1c
c00113ad:	68 14 01 00 00       	push   0x114
c00113b2:	e8 e2 e1 ff ff       	call   c000f599 <malloc>
c00113b7:	83 c4 0c             	add    esp,0xc
c00113ba:	89 c6                	mov    esi,eax
c00113bc:	ff 35 30 0b 03 c0    	push   DWORD PTR ds:0xc0030b30
c00113c2:	68 fa a1 02 c0       	push   0xc002a1fa
c00113c7:	50                   	push   eax
c00113c8:	e8 c7 16 00 00       	call   c0012a94 <File::File(char const*, Process*)>
c00113cd:	89 34 24             	mov    DWORD PTR [esp],esi
c00113d0:	e8 9b 18 00 00       	call   c0012c70 <File::unlink()>
c00113d5:	58                   	pop    eax
c00113d6:	5a                   	pop    edx
c00113d7:	6a 12                	push   0x12
c00113d9:	56                   	push   esi
c00113da:	e8 19 17 00 00       	call   c0012af8 <File::open(FileOpenMode)>
c00113df:	83 c4 10             	add    esp,0x10
c00113e2:	85 c0                	test   eax,eax
c00113e4:	0f 85 2f 01 00 00    	jne    c0011519 <Virt::setupPageSwapping(int)+0x172>
c00113ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00113ee:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00113f6:	c1 e3 08             	shl    ebx,0x8
c00113f9:	83 ec 0c             	sub    esp,0xc
c00113fc:	68 00 00 01 00       	push   0x10000
c0011401:	e8 93 e1 ff ff       	call   c000f599 <malloc>
c0011406:	83 c4 0c             	add    esp,0xc
c0011409:	89 c7                	mov    edi,eax
c001140b:	68 00 00 01 00       	push   0x10000
c0011410:	68 ee 00 00 00       	push   0xee
c0011415:	50                   	push   eax
c0011416:	e8 35 f3 fe ff       	call   c0000750 <memset>
c001141b:	83 c4 10             	add    esp,0x10
c001141e:	85 db                	test   ebx,ebx
c0011420:	79 03                	jns    c0011425 <Virt::setupPageSwapping(int)+0x7e>
c0011422:	83 c3 0f             	add    ebx,0xf
c0011425:	c1 fb 04             	sar    ebx,0x4
c0011428:	4b                   	dec    ebx
c0011429:	83 fb ff             	cmp    ebx,0xffffffff
c001142c:	74 41                	je     c001146f <Virt::setupPageSwapping(int)+0xc8>
c001142e:	83 ec 0c             	sub    esp,0xc
c0011431:	8b 06                	mov    eax,DWORD PTR [esi]
c0011433:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011437:	52                   	push   edx
c0011438:	57                   	push   edi
c0011439:	6a 00                	push   0x0
c001143b:	68 00 00 01 00       	push   0x10000
c0011440:	56                   	push   esi
c0011441:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011444:	83 c4 20             	add    esp,0x20
c0011447:	85 c0                	test   eax,eax
c0011449:	0f 85 b5 00 00 00    	jne    c0011504 <Virt::setupPageSwapping(int)+0x15d>
c001144f:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c0011457:	74 cf                	je     c0011428 <Virt::setupPageSwapping(int)+0x81>
c0011459:	83 ec 0c             	sub    esp,0xc
c001145c:	4b                   	dec    ebx
c001145d:	68 2c a2 02 c0       	push   0xc002a22c
c0011462:	e8 2e 88 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0011467:	83 c4 10             	add    esp,0x10
c001146a:	83 fb ff             	cmp    ebx,0xffffffff
c001146d:	75 bf                	jne    c001142e <Virt::setupPageSwapping(int)+0x87>
c001146f:	83 ec 0c             	sub    esp,0xc
c0011472:	56                   	push   esi
c0011473:	e8 de 16 00 00       	call   c0012b56 <File::close()>
c0011478:	89 3c 24             	mov    DWORD PTR [esp],edi
c001147b:	e8 39 e1 ff ff       	call   c000f5b9 <rfree>
c0011480:	83 c4 10             	add    esp,0x10
c0011483:	85 f6                	test   esi,esi
c0011485:	74 0c                	je     c0011493 <Virt::setupPageSwapping(int)+0xec>
c0011487:	83 ec 0c             	sub    esp,0xc
c001148a:	8b 06                	mov    eax,DWORD PTR [esi]
c001148c:	56                   	push   esi
c001148d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011490:	83 c4 10             	add    esp,0x10
c0011493:	83 ec 08             	sub    esp,0x8
c0011496:	a1 e8 db 02 c0       	mov    eax,ds:0xc002dbe8
c001149b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00114a1:	8b 10                	mov    edx,DWORD PTR [eax]
c00114a3:	68 fa a1 02 c0       	push   0xc002a1fa
c00114a8:	50                   	push   eax
c00114a9:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00114ac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00114b0:	c6 05 98 c5 02 c0 43 	mov    BYTE PTR ds:0xc002c598,0x43
c00114b7:	c1 e2 0b             	shl    edx,0xb
c00114ba:	a3 94 c5 02 c0       	mov    ds:0xc002c594,eax
c00114bf:	89 15 90 c5 02 c0    	mov    DWORD PTR ds:0xc002c590,edx
c00114c5:	c7 05 8c c5 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c58c,0x8
c00114cf:	c1 ea 08             	shr    edx,0x8
c00114d2:	89 14 24             	mov    DWORD PTR [esp],edx
c00114d5:	e8 bf e0 ff ff       	call   c000f599 <malloc>
c00114da:	83 c4 0c             	add    esp,0xc
c00114dd:	89 c1                	mov    ecx,eax
c00114df:	a3 4c d7 02 c0       	mov    ds:0xc002d74c,eax
c00114e4:	31 d2                	xor    edx,edx
c00114e6:	a1 90 c5 02 c0       	mov    eax,ds:0xc002c590
c00114eb:	f7 35 8c c5 02 c0    	div    DWORD PTR ds:0xc002c58c
c00114f1:	c1 e8 05             	shr    eax,0x5
c00114f4:	50                   	push   eax
c00114f5:	6a 00                	push   0x0
c00114f7:	51                   	push   ecx
c00114f8:	e8 53 f2 fe ff       	call   c0000750 <memset>
c00114fd:	83 c4 20             	add    esp,0x20
c0011500:	5b                   	pop    ebx
c0011501:	5e                   	pop    esi
c0011502:	5f                   	pop    edi
c0011503:	c3                   	ret    
c0011504:	83 ec 0c             	sub    esp,0xc
c0011507:	68 2c a2 02 c0       	push   0xc002a22c
c001150c:	e8 84 87 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0011511:	83 c4 10             	add    esp,0x10
c0011514:	e9 36 ff ff ff       	jmp    c001144f <Virt::setupPageSwapping(int)+0xa8>
c0011519:	83 ec 0c             	sub    esp,0xc
c001151c:	68 11 a2 02 c0       	push   0xc002a211
c0011521:	e8 6f 87 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0011526:	83 c4 10             	add    esp,0x10
c0011529:	e9 bc fe ff ff       	jmp    c00113ea <Virt::setupPageSwapping(int)+0x43>

c001152e <VAS::VAS()>:
c001152e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011532:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011539:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001153d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011544:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011548:	a3 50 d7 02 c0       	mov    ds:0xc002d750,eax
c001154d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011551:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011555:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011559:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001155c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011560:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011567:	90                   	nop
c0011568:	c3                   	ret    
c0011569:	90                   	nop

c001156a <VAS::VAS(VAS*)>:
c001156a:	83 ec 0c             	sub    esp,0xc
c001156d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011571:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001157c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011583:	83 ec 0c             	sub    esp,0xc
c0011586:	68 7c a0 02 c0       	push   0xc002a07c
c001158b:	e8 05 87 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0011590:	83 c4 10             	add    esp,0x10
c0011593:	90                   	nop
c0011594:	83 c4 0c             	add    esp,0xc
c0011597:	c3                   	ret    

c0011598 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011598:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001159c:	89 c2                	mov    edx,eax
c001159e:	c1 e8 0a             	shr    eax,0xa
c00115a1:	c1 ea 16             	shr    edx,0x16
c00115a4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00115a9:	19 c9                	sbb    ecx,ecx
c00115ab:	c1 e2 0c             	shl    edx,0xc
c00115ae:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115b4:	25 fc 0f 00 00       	and    eax,0xffc
c00115b9:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115c0:	01 d0                	add    eax,edx
c00115c2:	c3                   	ret    
c00115c3:	90                   	nop

c00115c4 <VAS::getPageTableEntry(unsigned long)>:
c00115c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115c8:	89 ca                	mov    edx,ecx
c00115ca:	c1 e9 0a             	shr    ecx,0xa
c00115cd:	c1 ea 16             	shr    edx,0x16
c00115d0:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115d6:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115dc:	c1 e0 0c             	shl    eax,0xc
c00115df:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115e2:	c3                   	ret    

c00115e3 <Virt::freeKernelVirtualPages(unsigned long)>:
c00115e3:	57                   	push   edi
c00115e4:	56                   	push   esi
c00115e5:	be 01 00 00 00       	mov    esi,0x1
c00115ea:	53                   	push   ebx
c00115eb:	83 ec 10             	sub    esp,0x10
c00115ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115f2:	c1 eb 0c             	shr    ebx,0xc
c00115f5:	eb 3f                	jmp    c0011636 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00115f7:	83 ec 08             	sub    esp,0x8
c00115fa:	57                   	push   edi
c00115fb:	ff 35 50 d7 02 c0    	push   DWORD PTR ds:0xc002d750
c0011601:	e8 be ff ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c0011606:	83 c4 10             	add    esp,0x10
c0011609:	8b 00                	mov    eax,DWORD PTR [eax]
c001160b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001160f:	f6 c4 04             	test   ah,0x4
c0011612:	75 5f                	jne    c0011673 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011614:	80 fa 04             	cmp    dl,0x4
c0011617:	74 78                	je     c0011691 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011619:	80 fa 02             	cmp    dl,0x2
c001161c:	0f 84 88 00 00 00    	je     c00116aa <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011622:	80 fa 03             	cmp    dl,0x3
c0011625:	0f 84 ad 00 00 00    	je     c00116d8 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001162b:	fe ca                	dec    dl
c001162d:	0f 84 92 00 00 00    	je     c00116c5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011633:	43                   	inc    ebx
c0011634:	31 f6                	xor    esi,esi
c0011636:	53                   	push   ebx
c0011637:	89 df                	mov    edi,ebx
c0011639:	e8 3b fb ff ff       	call   c0011179 <Virt::getPageState(unsigned long)>
c001163e:	c1 e7 0c             	shl    edi,0xc
c0011641:	59                   	pop    ecx
c0011642:	84 c0                	test   al,al
c0011644:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011648:	75 ad                	jne    c00115f7 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001164a:	83 ec 0c             	sub    esp,0xc
c001164d:	68 32 a2 02 c0       	push   0xc002a232
c0011652:	e8 3e 86 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0011657:	58                   	pop    eax
c0011658:	5a                   	pop    edx
c0011659:	57                   	push   edi
c001165a:	ff 35 50 d7 02 c0    	push   DWORD PTR ds:0xc002d750
c0011660:	e8 5f ff ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c0011665:	83 c4 10             	add    esp,0x10
c0011668:	8b 00                	mov    eax,DWORD PTR [eax]
c001166a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001166e:	f6 c4 04             	test   ah,0x4
c0011671:	74 c0                	je     c0011633 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011673:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011677:	25 00 f0 ff ff       	and    eax,0xfffff000
c001167c:	83 ec 0c             	sub    esp,0xc
c001167f:	50                   	push   eax
c0011680:	e8 5d e2 ff ff       	call   c000f8e2 <Phys::freePage(unsigned long)>
c0011685:	83 c4 10             	add    esp,0x10
c0011688:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001168c:	80 fa 04             	cmp    dl,0x4
c001168f:	75 88                	jne    c0011619 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011691:	89 f0                	mov    eax,esi
c0011693:	84 c0                	test   al,al
c0011695:	75 47                	jne    c00116de <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011697:	c7 44 24 20 a0 a0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a0a0
c001169f:	83 c4 10             	add    esp,0x10
c00116a2:	5b                   	pop    ebx
c00116a3:	5e                   	pop    esi
c00116a4:	5f                   	pop    edi
c00116a5:	e9 eb 85 00 00       	jmp    c0019c95 <Krnl::panic(char const*)>
c00116aa:	89 f0                	mov    eax,esi
c00116ac:	84 c0                	test   al,al
c00116ae:	75 15                	jne    c00116c5 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116b0:	83 ec 0c             	sub    esp,0xc
c00116b3:	68 4e a2 02 c0       	push   0xc002a24e
c00116b8:	e8 d8 85 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c00116bd:	83 c4 10             	add    esp,0x10
c00116c0:	e9 6e ff ff ff       	jmp    c0011633 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116c5:	83 ec 08             	sub    esp,0x8
c00116c8:	6a 00                	push   0x0
c00116ca:	53                   	push   ebx
c00116cb:	e8 74 fa ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116d0:	83 c4 10             	add    esp,0x10
c00116d3:	e9 5b ff ff ff       	jmp    c0011633 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116d8:	89 f0                	mov    eax,esi
c00116da:	84 c0                	test   al,al
c00116dc:	75 15                	jne    c00116f3 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116de:	83 ec 08             	sub    esp,0x8
c00116e1:	6a 00                	push   0x0
c00116e3:	53                   	push   ebx
c00116e4:	e8 5b fa ff ff       	call   c0011144 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116e9:	83 c4 10             	add    esp,0x10
c00116ec:	83 c4 10             	add    esp,0x10
c00116ef:	5b                   	pop    ebx
c00116f0:	5e                   	pop    esi
c00116f1:	5f                   	pop    edi
c00116f2:	c3                   	ret    
c00116f3:	c7 44 24 20 6a a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a26a
c00116fb:	83 c4 10             	add    esp,0x10
c00116fe:	5b                   	pop    ebx
c00116ff:	5e                   	pop    esi
c0011700:	5f                   	pop    edi
c0011701:	e9 8f 85 00 00       	jmp    c0019c95 <Krnl::panic(char const*)>

c0011706 <VAS::freeAllocatedPages(unsigned long)>:
c0011706:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001170a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001170e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011712:	74 09                	je     c001171d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011714:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011718:	e9 c6 fe ff ff       	jmp    c00115e3 <Virt::freeKernelVirtualPages(unsigned long)>
c001171d:	c7 44 24 04 c4 a0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a0c4
c0011725:	e9 0b 0e 00 00       	jmp    c0012535 <Dbg::kprintf(char const*, ...)>

c001172a <VAS::virtualToPhysical(unsigned long)>:
c001172a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001172e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011732:	e8 8d fe ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c0011737:	5a                   	pop    edx
c0011738:	8b 00                	mov    eax,DWORD PTR [eax]
c001173a:	59                   	pop    ecx
c001173b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011740:	c3                   	ret    
c0011741:	90                   	nop

c0011742 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011742:	55                   	push   ebp
c0011743:	57                   	push   edi
c0011744:	56                   	push   esi
c0011745:	53                   	push   ebx
c0011746:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001174a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001174e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011752:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011756:	85 db                	test   ebx,ebx
c0011758:	7e 22                	jle    c001177c <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001175a:	c1 e3 0c             	shl    ebx,0xc
c001175d:	01 f3                	add    ebx,esi
c001175f:	56                   	push   esi
c0011760:	81 c6 00 10 00 00    	add    esi,0x1000
c0011766:	55                   	push   ebp
c0011767:	e8 58 fe ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c001176c:	5a                   	pop    edx
c001176d:	59                   	pop    ecx
c001176e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011770:	21 f9                	and    ecx,edi
c0011772:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011776:	39 f3                	cmp    ebx,esi
c0011778:	89 08                	mov    DWORD PTR [eax],ecx
c001177a:	75 e3                	jne    c001175f <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001177c:	5b                   	pop    ebx
c001177d:	5e                   	pop    esi
c001177e:	5f                   	pop    edi
c001177f:	5d                   	pop    ebp
c0011780:	c3                   	ret    
c0011781:	90                   	nop

c0011782 <VAS::setToWriteCombining(unsigned long, int)>:
c0011782:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0011787:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001178d:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011794:	75 01                	jne    c0011797 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011796:	c3                   	ret    
c0011797:	68 80 00 00 00       	push   0x80
c001179c:	6a ff                	push   0xffffffff
c001179e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00117aa:	e8 93 ff ff ff       	call   c0011742 <VAS::reflagRange(unsigned long, int, int, int)>
c00117af:	83 c4 14             	add    esp,0x14
c00117b2:	c3                   	ret    
c00117b3:	90                   	nop

c00117b4 <VAS::mapOtherVASIn(bool, VAS*)>:
c00117b4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00117b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117bd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00117c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117c4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00117c7:	19 c0                	sbb    eax,eax
c00117c9:	83 ca 03             	or     edx,0x3
c00117cc:	83 e0 fc             	and    eax,0xfffffffc
c00117cf:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117d6:	0f 20 d8             	mov    eax,cr3
c00117d9:	0f 22 d8             	mov    cr3,eax
c00117dc:	c3                   	ret    
c00117dd:	90                   	nop

c00117de <VAS::~VAS()>:
c00117de:	83 ec 2c             	sub    esp,0x2c
c00117e1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117e9:	fa                   	cli    
c00117ea:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c00117ef:	40                   	inc    eax
c00117f0:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c00117f5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00117fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00117fc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117ff:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011805:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011809:	6a 01                	push   0x1
c001180b:	50                   	push   eax
c001180c:	e8 a3 ff ff ff       	call   c00117b4 <VAS::mapOtherVASIn(bool, VAS*)>
c0011811:	83 c4 0c             	add    esp,0xc
c0011814:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001181c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011824:	0f 8f d4 00 00 00    	jg     c00118fe <VAS::~VAS()+0x120>
c001182a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001182e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011831:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011835:	c1 e2 02             	shl    edx,0x2
c0011838:	01 d0                	add    eax,edx
c001183a:	8b 00                	mov    eax,DWORD PTR [eax]
c001183c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011844:	83 e0 01             	and    eax,0x1
c0011847:	0f 84 a8 00 00 00    	je     c00118f5 <VAS::~VAS()+0x117>
c001184d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011855:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001185d:	7f 72                	jg     c00118d1 <VAS::~VAS()+0xf3>
c001185f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011863:	c1 e0 0a             	shl    eax,0xa
c0011866:	89 c2                	mov    edx,eax
c0011868:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001186c:	01 d0                	add    eax,edx
c001186e:	c1 e0 0c             	shl    eax,0xc
c0011871:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011875:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001187a:	8b 00                	mov    eax,DWORD PTR [eax]
c001187c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001187f:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011885:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011889:	6a 01                	push   0x1
c001188b:	50                   	push   eax
c001188c:	e8 07 fd ff ff       	call   c0011598 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011891:	83 c4 0c             	add    esp,0xc
c0011894:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011898:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001189c:	8b 00                	mov    eax,DWORD PTR [eax]
c001189e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118a6:	25 01 04 00 00       	and    eax,0x401
c00118ab:	3d 01 04 00 00       	cmp    eax,0x401
c00118b0:	75 19                	jne    c00118cb <VAS::~VAS()+0xed>
c00118b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118b6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118bb:	83 ec 0c             	sub    esp,0xc
c00118be:	50                   	push   eax
c00118bf:	e8 1e e0 ff ff       	call   c000f8e2 <Phys::freePage(unsigned long)>
c00118c4:	83 c4 10             	add    esp,0x10
c00118c7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118cb:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118cf:	eb 84                	jmp    c0011855 <VAS::~VAS()+0x77>
c00118d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118d5:	25 00 04 00 00       	and    eax,0x400
c00118da:	74 19                	je     c00118f5 <VAS::~VAS()+0x117>
c00118dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118e5:	83 ec 0c             	sub    esp,0xc
c00118e8:	50                   	push   eax
c00118e9:	e8 f4 df ff ff       	call   c000f8e2 <Phys::freePage(unsigned long)>
c00118ee:	83 c4 10             	add    esp,0x10
c00118f1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118f5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00118f9:	e9 1e ff ff ff       	jmp    c001181c <VAS::~VAS()+0x3e>
c00118fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011902:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011905:	83 ec 0c             	sub    esp,0xc
c0011908:	50                   	push   eax
c0011909:	e8 d5 fc ff ff       	call   c00115e3 <Virt::freeKernelVirtualPages(unsigned long)>
c001190e:	83 c4 10             	add    esp,0x10
c0011911:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011915:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011918:	83 ec 0c             	sub    esp,0xc
c001191b:	50                   	push   eax
c001191c:	e8 c1 df ff ff       	call   c000f8e2 <Phys::freePage(unsigned long)>
c0011921:	83 c4 10             	add    esp,0x10
c0011924:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011928:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001192c:	c1 e0 02             	shl    eax,0x2
c001192f:	83 ec 08             	sub    esp,0x8
c0011932:	50                   	push   eax
c0011933:	68 e8 a0 02 c0       	push   0xc002a0e8
c0011938:	e8 f8 0b 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001193d:	83 c4 10             	add    esp,0x10
c0011940:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0011945:	48                   	dec    eax
c0011946:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001194b:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0011950:	85 c0                	test   eax,eax
c0011952:	75 01                	jne    c0011955 <VAS::~VAS()+0x177>
c0011954:	fb                   	sti    
c0011955:	90                   	nop
c0011956:	83 c4 2c             	add    esp,0x2c
c0011959:	c3                   	ret    

c001195a <VAS::mapPage(unsigned long, unsigned long, int)>:
c001195a:	55                   	push   ebp
c001195b:	57                   	push   edi
c001195c:	56                   	push   esi
c001195d:	53                   	push   ebx
c001195e:	83 ec 1c             	sub    esp,0x1c
c0011961:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011965:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011969:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001196f:	77 08                	ja     c0011979 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011971:	0f 20 d8             	mov    eax,cr3
c0011974:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011977:	75 47                	jne    c00119c0 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011979:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001197d:	09 d8                	or     eax,ebx
c001197f:	a9 ff 0f 00 00       	test   eax,0xfff
c0011984:	75 57                	jne    c00119dd <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011986:	89 de                	mov    esi,ebx
c0011988:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001198b:	c1 ee 16             	shr    esi,0x16
c001198e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011995:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011999:	74 54                	je     c00119ef <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001199b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001199f:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00119a5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00119a9:	c1 e6 0c             	shl    esi,0xc
c00119ac:	c1 eb 0a             	shr    ebx,0xa
c00119af:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119b5:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119b8:	83 c4 1c             	add    esp,0x1c
c00119bb:	5b                   	pop    ebx
c00119bc:	5e                   	pop    esi
c00119bd:	5f                   	pop    edi
c00119be:	5d                   	pop    ebp
c00119bf:	c3                   	ret    
c00119c0:	83 ec 0c             	sub    esp,0xc
c00119c3:	68 08 a1 02 c0       	push   0xc002a108
c00119c8:	e8 68 0b 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c00119cd:	83 c4 10             	add    esp,0x10
c00119d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119d4:	09 d8                	or     eax,ebx
c00119d6:	a9 ff 0f 00 00       	test   eax,0xfff
c00119db:	74 a9                	je     c0011986 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119dd:	83 ec 0c             	sub    esp,0xc
c00119e0:	68 70 a1 02 c0       	push   0xc002a170
c00119e5:	e8 ab 82 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c00119ea:	83 c4 10             	add    esp,0x10
c00119ed:	eb 97                	jmp    c0011986 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119f3:	e8 45 df ff ff       	call   c000f93d <Phys::allocatePage()>
c00119f8:	83 ec 0c             	sub    esp,0xc
c00119fb:	89 c5                	mov    ebp,eax
c00119fd:	8b 0d 50 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d750
c0011a03:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a07:	6a 01                	push   0x1
c0011a09:	e8 8f f7 ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c0011a0e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a15:	6a 01                	push   0x1
c0011a17:	50                   	push   eax
c0011a18:	55                   	push   ebp
c0011a19:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a1f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a23:	51                   	push   ecx
c0011a24:	e8 27 02 00 00       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a29:	83 c4 1c             	add    esp,0x1c
c0011a2c:	68 00 10 00 00       	push   0x1000
c0011a31:	6a 00                	push   0x0
c0011a33:	50                   	push   eax
c0011a34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a38:	e8 13 ed fe ff       	call   c0000750 <memset>
c0011a3d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a41:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a44:	e8 9a fb ff ff       	call   c00115e3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a49:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a4d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011a50:	83 c4 10             	add    esp,0x10
c0011a53:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a56:	e9 40 ff ff ff       	jmp    c001199b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011a5b:	90                   	nop

c0011a5c <VAS::allocatePages(int, int)>:
c0011a5c:	55                   	push   ebp
c0011a5d:	57                   	push   edi
c0011a5e:	56                   	push   esi
c0011a5f:	53                   	push   ebx
c0011a60:	83 ec 1c             	sub    esp,0x1c
c0011a63:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a67:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0011a6c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011a72:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a78:	83 e0 01             	and    eax,0x1
c0011a7b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a7f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a83:	0f 85 cc 00 00 00    	jne    c0011b55 <VAS::allocatePages(int, int)+0xf9>
c0011a89:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a90:	85 c0                	test   eax,eax
c0011a92:	0f 84 a1 00 00 00    	je     c0011b39 <VAS::allocatePages(int, int)+0xdd>
c0011a98:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011a9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011aa0:	c1 e6 0c             	shl    esi,0xc
c0011aa3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011aa7:	85 c0                	test   eax,eax
c0011aa9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011aac:	7e 33                	jle    c0011ae1 <VAS::allocatePages(int, int)+0x85>
c0011aae:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011ab2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ab6:	81 cd 00 04 00 00    	or     ebp,0x400
c0011abc:	e8 7c de ff ff       	call   c000f93d <Phys::allocatePage()>
c0011ac1:	55                   	push   ebp
c0011ac2:	53                   	push   ebx
c0011ac3:	50                   	push   eax
c0011ac4:	57                   	push   edi
c0011ac5:	e8 90 fe ff ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011aca:	83 c4 10             	add    esp,0x10
c0011acd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ad2:	74 03                	je     c0011ad7 <VAS::allocatePages(int, int)+0x7b>
c0011ad4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ad7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011add:	39 de                	cmp    esi,ebx
c0011adf:	75 db                	jne    c0011abc <VAS::allocatePages(int, int)+0x60>
c0011ae1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ae6:	75 12                	jne    c0011afa <VAS::allocatePages(int, int)+0x9e>
c0011ae8:	0f 20 d8             	mov    eax,cr3
c0011aeb:	0f 22 d8             	mov    cr3,eax
c0011aee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011af2:	83 c4 1c             	add    esp,0x1c
c0011af5:	5b                   	pop    ebx
c0011af6:	5e                   	pop    esi
c0011af7:	5f                   	pop    edi
c0011af8:	5d                   	pop    ebp
c0011af9:	c3                   	ret    
c0011afa:	c1 ee 0a             	shr    esi,0xa
c0011afd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b01:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b07:	c1 eb 0a             	shr    ebx,0xa
c0011b0a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b10:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b16:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b1c:	39 c3                	cmp    ebx,eax
c0011b1e:	77 ce                	ja     c0011aee <VAS::allocatePages(int, int)+0x92>
c0011b20:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b23:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b29:	39 d8                	cmp    eax,ebx
c0011b2b:	73 f3                	jae    c0011b20 <VAS::allocatePages(int, int)+0xc4>
c0011b2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b31:	83 c4 1c             	add    esp,0x1c
c0011b34:	5b                   	pop    ebx
c0011b35:	5e                   	pop    esi
c0011b36:	5f                   	pop    edi
c0011b37:	5d                   	pop    ebp
c0011b38:	c3                   	ret    
c0011b39:	83 ec 0c             	sub    esp,0xc
c0011b3c:	68 94 a1 02 c0       	push   0xc002a194
c0011b41:	e8 4f 81 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0011b46:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b49:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b4d:	83 c4 10             	add    esp,0x10
c0011b50:	e9 43 ff ff ff       	jmp    c0011a98 <VAS::allocatePages(int, int)+0x3c>
c0011b55:	83 ec 0c             	sub    esp,0xc
c0011b58:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b5c:	e8 3c f6 ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c0011b61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b65:	83 c4 10             	add    esp,0x10
c0011b68:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b6d:	0f 87 9b 00 00 00    	ja     c0011c0e <VAS::allocatePages(int, int)+0x1b2>
c0011b73:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b77:	85 d2                	test   edx,edx
c0011b79:	7e 3c                	jle    c0011bb7 <VAS::allocatePages(int, int)+0x15b>
c0011b7b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b7f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b87:	c1 e5 0c             	shl    ebp,0xc
c0011b8a:	81 ce 00 04 00 00    	or     esi,0x400
c0011b90:	01 dd                	add    ebp,ebx
c0011b92:	e8 a6 dd ff ff       	call   c000f93d <Phys::allocatePage()>
c0011b97:	56                   	push   esi
c0011b98:	53                   	push   ebx
c0011b99:	50                   	push   eax
c0011b9a:	57                   	push   edi
c0011b9b:	e8 ba fd ff ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ba0:	83 c4 10             	add    esp,0x10
c0011ba3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ba8:	74 03                	je     c0011bad <VAS::allocatePages(int, int)+0x151>
c0011baa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bad:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bb3:	39 dd                	cmp    ebp,ebx
c0011bb5:	75 db                	jne    c0011b92 <VAS::allocatePages(int, int)+0x136>
c0011bb7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bbc:	0f 84 26 ff ff ff    	je     c0011ae8 <VAS::allocatePages(int, int)+0x8c>
c0011bc2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bc6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bca:	89 d3                	mov    ebx,edx
c0011bcc:	c1 e0 0c             	shl    eax,0xc
c0011bcf:	c1 eb 0a             	shr    ebx,0xa
c0011bd2:	01 d0                	add    eax,edx
c0011bd4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bda:	c1 e8 0a             	shr    eax,0xa
c0011bdd:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011be3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011be8:	2d 00 00 40 00       	sub    eax,0x400000
c0011bed:	39 c3                	cmp    ebx,eax
c0011bef:	0f 87 f9 fe ff ff    	ja     c0011aee <VAS::allocatePages(int, int)+0x92>
c0011bf5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bf8:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bfe:	39 d8                	cmp    eax,ebx
c0011c00:	73 f3                	jae    c0011bf5 <VAS::allocatePages(int, int)+0x199>
c0011c02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c06:	83 c4 1c             	add    esp,0x1c
c0011c09:	5b                   	pop    ebx
c0011c0a:	5e                   	pop    esi
c0011c0b:	5f                   	pop    edi
c0011c0c:	5d                   	pop    ebp
c0011c0d:	c3                   	ret    
c0011c0e:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0011c13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c19:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c20:	0f 84 4d ff ff ff    	je     c0011b73 <VAS::allocatePages(int, int)+0x117>
c0011c26:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c2e:	e9 40 ff ff ff       	jmp    c0011b73 <VAS::allocatePages(int, int)+0x117>
c0011c33:	90                   	nop

c0011c34 <VAS::setCPUSpecific(unsigned long)>:
c0011c34:	83 ec 0c             	sub    esp,0xc
c0011c37:	6a 05                	push   0x5
c0011c39:	68 00 00 40 c2       	push   0xc2400000
c0011c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c46:	e8 0f fd ff ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c4b:	83 c4 1c             	add    esp,0x1c
c0011c4e:	c3                   	ret    
c0011c4f:	90                   	nop

c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c50:	55                   	push   ebp
c0011c51:	57                   	push   edi
c0011c52:	56                   	push   esi
c0011c53:	53                   	push   ebx
c0011c54:	83 ec 1c             	sub    esp,0x1c
c0011c57:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0011c5c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c60:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c66:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c6a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c70:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c74:	83 e0 01             	and    eax,0x1
c0011c77:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c7b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c7f:	85 c0                	test   eax,eax
c0011c81:	7e 39                	jle    c0011cbc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011c83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c87:	89 f3                	mov    ebx,esi
c0011c89:	c1 e0 0c             	shl    eax,0xc
c0011c8c:	01 f0                	add    eax,esi
c0011c8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c92:	55                   	push   ebp
c0011c93:	53                   	push   ebx
c0011c94:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c98:	29 f0                	sub    eax,esi
c0011c9a:	01 d8                	add    eax,ebx
c0011c9c:	50                   	push   eax
c0011c9d:	57                   	push   edi
c0011c9e:	e8 b7 fc ff ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ca3:	83 c4 10             	add    esp,0x10
c0011ca6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cab:	74 03                	je     c0011cb0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011cad:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cb0:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cb6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011cba:	75 d6                	jne    c0011c92 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011cbc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011cc1:	75 10                	jne    c0011cd3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011cc3:	0f 20 d8             	mov    eax,cr3
c0011cc6:	0f 22 d8             	mov    cr3,eax
c0011cc9:	83 c4 1c             	add    esp,0x1c
c0011ccc:	89 f0                	mov    eax,esi
c0011cce:	5b                   	pop    ebx
c0011ccf:	5e                   	pop    esi
c0011cd0:	5f                   	pop    edi
c0011cd1:	5d                   	pop    ebp
c0011cd2:	c3                   	ret    
c0011cd3:	89 f3                	mov    ebx,esi
c0011cd5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cd9:	c1 eb 0a             	shr    ebx,0xa
c0011cdc:	c1 e0 0c             	shl    eax,0xc
c0011cdf:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ce5:	01 f0                	add    eax,esi
c0011ce7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ced:	c1 e8 0a             	shr    eax,0xa
c0011cf0:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cf5:	2d 00 00 40 00       	sub    eax,0x400000
c0011cfa:	39 c3                	cmp    ebx,eax
c0011cfc:	77 cb                	ja     c0011cc9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011cfe:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d01:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d07:	39 d8                	cmp    eax,ebx
c0011d09:	73 f3                	jae    c0011cfe <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d0b:	83 c4 1c             	add    esp,0x1c
c0011d0e:	89 f0                	mov    eax,esi
c0011d10:	5b                   	pop    ebx
c0011d11:	5e                   	pop    esi
c0011d12:	5f                   	pop    edi
c0011d13:	5d                   	pop    ebp
c0011d14:	c3                   	ret    
c0011d15:	90                   	nop

c0011d16 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d16:	55                   	push   ebp
c0011d17:	57                   	push   edi
c0011d18:	56                   	push   esi
c0011d19:	53                   	push   ebx
c0011d1a:	83 ec 1c             	sub    esp,0x1c
c0011d1d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d21:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d25:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d29:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d2d:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d32:	75 4a                	jne    c0011d7e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d34:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d38:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d3b:	c1 eb 16             	shr    ebx,0x16
c0011d3e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d45:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d49:	74 4d                	je     c0011d98 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d4b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d4f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d53:	c1 e8 0a             	shr    eax,0xa
c0011d56:	80 fa 01             	cmp    dl,0x1
c0011d59:	19 d2                	sbb    edx,edx
c0011d5b:	c1 e3 0c             	shl    ebx,0xc
c0011d5e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d62:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d68:	25 fc 0f 00 00       	and    eax,0xffc
c0011d6d:	01 d8                	add    eax,ebx
c0011d6f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d76:	83 c4 1c             	add    esp,0x1c
c0011d79:	5b                   	pop    ebx
c0011d7a:	5e                   	pop    esi
c0011d7b:	5f                   	pop    edi
c0011d7c:	5d                   	pop    ebp
c0011d7d:	c3                   	ret    
c0011d7e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d82:	83 ec 0c             	sub    esp,0xc
c0011d85:	68 c0 a1 02 c0       	push   0xc002a1c0
c0011d8a:	e8 06 7f 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0011d8f:	83 c4 10             	add    esp,0x10
c0011d92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d96:	eb 9c                	jmp    c0011d34 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011d98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d9c:	e8 9c db ff ff       	call   c000f93d <Phys::allocatePage()>
c0011da1:	83 ec 0c             	sub    esp,0xc
c0011da4:	89 c5                	mov    ebp,eax
c0011da6:	8b 0d 50 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d750
c0011dac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011db0:	6a 01                	push   0x1
c0011db2:	e8 e6 f3 ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c0011db7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011dbe:	6a 01                	push   0x1
c0011dc0:	50                   	push   eax
c0011dc1:	55                   	push   ebp
c0011dc2:	81 cd 07 04 00 00    	or     ebp,0x407
c0011dc8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dcc:	51                   	push   ecx
c0011dcd:	e8 7e fe ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dd2:	83 c4 1c             	add    esp,0x1c
c0011dd5:	68 00 10 00 00       	push   0x1000
c0011dda:	6a 00                	push   0x0
c0011ddc:	50                   	push   eax
c0011ddd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011de1:	e8 6a e9 fe ff       	call   c0000750 <memset>
c0011de6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011dea:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011ded:	e8 f1 f7 ff ff       	call   c00115e3 <Virt::freeKernelVirtualPages(unsigned long)>
c0011df2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011df5:	83 c4 10             	add    esp,0x10
c0011df8:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011dfb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011dff:	e9 47 ff ff ff       	jmp    c0011d4b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e04 <VAS::VAS(bool)>:
c0011e04:	53                   	push   ebx
c0011e05:	83 ec 28             	sub    esp,0x28
c0011e08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e0c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e14:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e1f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e2a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e2e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e31:	e8 07 db ff ff       	call   c000f93d <Phys::allocatePage()>
c0011e36:	89 c2                	mov    edx,eax
c0011e38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e3c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011e3f:	8b 1d 50 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d750
c0011e45:	83 ec 0c             	sub    esp,0xc
c0011e48:	6a 01                	push   0x1
c0011e4a:	e8 4e f3 ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c0011e4f:	83 c4 10             	add    esp,0x10
c0011e52:	89 c2                	mov    edx,eax
c0011e54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e58:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011e5b:	83 ec 0c             	sub    esp,0xc
c0011e5e:	6a 03                	push   0x3
c0011e60:	6a 01                	push   0x1
c0011e62:	52                   	push   edx
c0011e63:	50                   	push   eax
c0011e64:	53                   	push   ebx
c0011e65:	e8 e6 fd ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e6a:	83 c4 20             	add    esp,0x20
c0011e6d:	89 c2                	mov    edx,eax
c0011e6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e73:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e76:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e7e:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e86:	7f 1c                	jg     c0011ea4 <VAS::VAS(bool)+0xa0>
c0011e88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e8f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e93:	c1 e2 02             	shl    edx,0x2
c0011e96:	01 d0                	add    eax,edx
c0011e98:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011e9e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011ea2:	eb da                	jmp    c0011e7e <VAS::VAS(bool)+0x7a>
c0011ea4:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011eac:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011eb4:	7f 7a                	jg     c0011f30 <VAS::VAS(bool)+0x12c>
c0011eb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011eba:	2d 00 02 00 00       	sub    eax,0x200
c0011ebf:	c1 e0 0c             	shl    eax,0xc
c0011ec2:	83 c8 03             	or     eax,0x3
c0011ec5:	89 c2                	mov    edx,eax
c0011ec7:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0011ecc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ed2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011ed8:	83 e0 10             	and    eax,0x10
c0011edb:	84 c0                	test   al,al
c0011edd:	74 07                	je     c0011ee6 <VAS::VAS(bool)+0xe2>
c0011edf:	b8 00 01 00 00       	mov    eax,0x100
c0011ee4:	eb 05                	jmp    c0011eeb <VAS::VAS(bool)+0xe7>
c0011ee6:	b8 00 00 00 00       	mov    eax,0x0
c0011eeb:	09 d0                	or     eax,edx
c0011eed:	89 c1                	mov    ecx,eax
c0011eef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ef6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011efa:	c1 e2 02             	shl    edx,0x2
c0011efd:	01 d0                	add    eax,edx
c0011eff:	89 ca                	mov    edx,ecx
c0011f01:	89 10                	mov    DWORD PTR [eax],edx
c0011f03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f07:	2d 40 03 00 00       	sub    eax,0x340
c0011f0c:	83 f8 7f             	cmp    eax,0x7f
c0011f0f:	77 16                	ja     c0011f27 <VAS::VAS(bool)+0x123>
c0011f11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f18:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f1c:	c1 e2 02             	shl    edx,0x2
c0011f1f:	01 d0                	add    eax,edx
c0011f21:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f27:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f2b:	e9 7c ff ff ff       	jmp    c0011eac <VAS::VAS(bool)+0xa8>
c0011f30:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0011f35:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f3b:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f41:	83 e0 10             	and    eax,0x10
c0011f44:	84 c0                	test   al,al
c0011f46:	74 07                	je     c0011f4f <VAS::VAS(bool)+0x14b>
c0011f48:	b8 03 41 00 00       	mov    eax,0x4103
c0011f4d:	eb 05                	jmp    c0011f54 <VAS::VAS(bool)+0x150>
c0011f4f:	b8 03 40 00 00       	mov    eax,0x4003
c0011f54:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f58:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011f5b:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f61:	89 02                	mov    DWORD PTR [edx],eax
c0011f63:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0011f68:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f6e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f74:	83 ec 08             	sub    esp,0x8
c0011f77:	50                   	push   eax
c0011f78:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f7c:	e8 b3 fc ff ff       	call   c0011c34 <VAS::setCPUSpecific(unsigned long)>
c0011f81:	83 c4 10             	add    esp,0x10
c0011f84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f88:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011f8b:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0011f90:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f96:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f9c:	83 e0 10             	and    eax,0x10
c0011f9f:	84 c0                	test   al,al
c0011fa1:	74 07                	je     c0011faa <VAS::VAS(bool)+0x1a6>
c0011fa3:	b8 00 01 00 00       	mov    eax,0x100
c0011fa8:	eb 05                	jmp    c0011faf <VAS::VAS(bool)+0x1ab>
c0011faa:	b8 00 00 00 00       	mov    eax,0x0
c0011faf:	09 c2                	or     edx,eax
c0011fb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fb5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011fb8:	05 fc 0f 00 00       	add    eax,0xffc
c0011fbd:	83 ca 03             	or     edx,0x3
c0011fc0:	89 10                	mov    DWORD PTR [eax],edx
c0011fc2:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0011fc7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fcd:	83 ec 0c             	sub    esp,0xc
c0011fd0:	50                   	push   eax
c0011fd1:	e8 98 1c 00 00       	call   c0013c6e <Device::getName()>
c0011fd6:	83 c4 10             	add    esp,0x10
c0011fd9:	83 ec 08             	sub    esp,0x8
c0011fdc:	68 84 a2 02 c0       	push   0xc002a284
c0011fe1:	50                   	push   eax
c0011fe2:	e8 b1 e8 fe ff       	call   c0000898 <strcmp>
c0011fe7:	83 c4 10             	add    esp,0x10
c0011fea:	85 c0                	test   eax,eax
c0011fec:	0f 94 c0             	sete   al
c0011fef:	84 c0                	test   al,al
c0011ff1:	0f 84 87 00 00 00    	je     c001207e <VAS::VAS(bool)+0x27a>
c0011ff7:	fa                   	cli    
c0011ff8:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0011ffd:	40                   	inc    eax
c0011ffe:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c0012003:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0012008:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001200e:	05 7c 09 00 00       	add    eax,0x97c
c0012013:	83 ec 0c             	sub    esp,0xc
c0012016:	50                   	push   eax
c0012017:	e8 02 d0 ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001201c:	83 c4 10             	add    esp,0x10
c001201f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012024:	89 c3                	mov    ebx,eax
c0012026:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c001202b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012031:	05 7c 09 00 00       	add    eax,0x97c
c0012036:	83 ec 0c             	sub    esp,0xc
c0012039:	50                   	push   eax
c001203a:	e8 df cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001203f:	83 c4 10             	add    esp,0x10
c0012042:	83 ec 08             	sub    esp,0x8
c0012045:	50                   	push   eax
c0012046:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001204a:	e8 75 f5 ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c001204f:	83 c4 10             	add    esp,0x10
c0012052:	8b 00                	mov    eax,DWORD PTR [eax]
c0012054:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012059:	6a 11                	push   0x11
c001205b:	53                   	push   ebx
c001205c:	50                   	push   eax
c001205d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012061:	e8 f4 f8 ff ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012066:	83 c4 10             	add    esp,0x10
c0012069:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001206e:	48                   	dec    eax
c001206f:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c0012074:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0012079:	85 c0                	test   eax,eax
c001207b:	75 01                	jne    c001207e <VAS::VAS(bool)+0x27a>
c001207d:	fb                   	sti    
c001207e:	90                   	nop
c001207f:	83 c4 28             	add    esp,0x28
c0012082:	5b                   	pop    ebx
c0012083:	c3                   	ret    

c0012084 <VAS::evict(unsigned long)>:
c0012084:	55                   	push   ebp
c0012085:	57                   	push   edi
c0012086:	56                   	push   esi
c0012087:	53                   	push   ebx
c0012088:	83 ec 1c             	sub    esp,0x1c
c001208b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001208f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012093:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012097:	e8 42 f2 ff ff       	call   c00112de <Virt::allocateSwapfilePage()>
c001209c:	89 c7                	mov    edi,eax
c001209e:	a1 8c c5 02 c0       	mov    eax,ds:0xc002c58c
c00120a3:	85 c0                	test   eax,eax
c00120a5:	7e 3d                	jle    c00120e4 <VAS::evict(unsigned long)+0x60>
c00120a7:	89 ee                	mov    esi,ebp
c00120a9:	31 db                	xor    ebx,ebx
c00120ab:	83 ec 0c             	sub    esp,0xc
c00120ae:	57                   	push   edi
c00120af:	e8 18 f2 ff ff       	call   c00112cc <Virt::swapIDToSector(unsigned long)>
c00120b4:	89 34 24             	mov    DWORD PTR [esp],esi
c00120b7:	01 d8                	add    eax,ebx
c00120b9:	6a 01                	push   0x1
c00120bb:	31 d2                	xor    edx,edx
c00120bd:	43                   	inc    ebx
c00120be:	52                   	push   edx
c00120bf:	81 c6 00 02 00 00    	add    esi,0x200
c00120c5:	50                   	push   eax
c00120c6:	0f be 05 98 c5 02 c0 	movsx  eax,BYTE PTR ds:0xc002c598
c00120cd:	ff 34 85 dc da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2524]
c00120d4:	e8 11 3e 00 00       	call   c0015eea <LogicalDisk::write(unsigned long long, int, void*)>
c00120d9:	83 c4 20             	add    esp,0x20
c00120dc:	39 1d 8c c5 02 c0    	cmp    DWORD PTR ds:0xc002c58c,ebx
c00120e2:	7f c7                	jg     c00120ab <VAS::evict(unsigned long)+0x27>
c00120e4:	83 ec 08             	sub    esp,0x8
c00120e7:	c1 e7 0b             	shl    edi,0xb
c00120ea:	55                   	push   ebp
c00120eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00120ef:	e8 d0 f4 ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c00120f4:	83 c4 0c             	add    esp,0xc
c00120f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00120f9:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00120ff:	09 d7                	or     edi,edx
c0012101:	89 38                	mov    DWORD PTR [eax],edi
c0012103:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c0012108:	40                   	inc    eax
c0012109:	a3 48 d7 02 c0       	mov    ds:0xc002d748,eax
c001210e:	0f 20 da             	mov    edx,cr3
c0012111:	0f 22 da             	mov    cr3,edx
c0012114:	50                   	push   eax
c0012115:	55                   	push   ebp
c0012116:	68 92 a2 02 c0       	push   0xc002a292
c001211b:	e8 15 04 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0012120:	a1 44 d7 02 c0       	mov    eax,ds:0xc002d744
c0012125:	c7 44 24 40 a7 a2 02 c0 	mov    DWORD PTR [esp+0x40],0xc002a2a7
c001212d:	8d 50 01             	lea    edx,[eax+0x1]
c0012130:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012134:	89 15 44 d7 02 c0    	mov    DWORD PTR ds:0xc002d744,edx
c001213a:	83 c4 2c             	add    esp,0x2c
c001213d:	5b                   	pop    ebx
c001213e:	5e                   	pop    esi
c001213f:	5f                   	pop    edi
c0012140:	5d                   	pop    ebp
c0012141:	e9 ef 03 00 00       	jmp    c0012535 <Dbg::kprintf(char const*, ...)>

c0012146 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012146:	55                   	push   ebp
c0012147:	57                   	push   edi
c0012148:	56                   	push   esi
c0012149:	53                   	push   ebx
c001214a:	83 ec 0c             	sub    esp,0xc
c001214d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012151:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012157:	0f 84 f8 00 00 00    	je     c0012255 <VAS::tryLoadBackOffDisk(unsigned long)+0x10f>
c001215d:	56                   	push   esi
c001215e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012162:	e8 5d f4 ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c0012167:	5b                   	pop    ebx
c0012168:	85 c0                	test   eax,eax
c001216a:	5f                   	pop    edi
c001216b:	89 c3                	mov    ebx,eax
c001216d:	0f 84 e2 00 00 00    	je     c0012255 <VAS::tryLoadBackOffDisk(unsigned long)+0x10f>
c0012173:	8b 38                	mov    edi,DWORD PTR [eax]
c0012175:	31 c0                	xor    eax,eax
c0012177:	89 fa                	mov    edx,edi
c0012179:	81 e2 01 04 00 00    	and    edx,0x401
c001217f:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012185:	0f 85 cc 00 00 00    	jne    c0012257 <VAS::tryLoadBackOffDisk(unsigned long)+0x111>
c001218b:	e8 ad d7 ff ff       	call   c000f93d <Phys::allocatePage()>
c0012190:	c1 ef 0b             	shr    edi,0xb
c0012193:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012195:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001219b:	09 c2                	or     edx,eax
c001219d:	81 ca 01 08 00 00    	or     edx,0x801
c00121a3:	89 13                	mov    DWORD PTR [ebx],edx
c00121a5:	8b 0d 8c c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c58c
c00121ab:	85 c9                	test   ecx,ecx
c00121ad:	7e 3d                	jle    c00121ec <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c00121af:	89 f5                	mov    ebp,esi
c00121b1:	31 db                	xor    ebx,ebx
c00121b3:	83 ec 0c             	sub    esp,0xc
c00121b6:	57                   	push   edi
c00121b7:	e8 10 f1 ff ff       	call   c00112cc <Virt::swapIDToSector(unsigned long)>
c00121bc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00121bf:	01 d8                	add    eax,ebx
c00121c1:	6a 01                	push   0x1
c00121c3:	31 d2                	xor    edx,edx
c00121c5:	43                   	inc    ebx
c00121c6:	52                   	push   edx
c00121c7:	81 c5 00 02 00 00    	add    ebp,0x200
c00121cd:	50                   	push   eax
c00121ce:	0f be 05 98 c5 02 c0 	movsx  eax,BYTE PTR ds:0xc002c598
c00121d5:	ff 34 85 dc da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2524]
c00121dc:	e8 9d 3c 00 00       	call   c0015e7e <LogicalDisk::read(unsigned long long, int, void*)>
c00121e1:	83 c4 20             	add    esp,0x20
c00121e4:	39 1d 8c c5 02 c0    	cmp    DWORD PTR ds:0xc002c58c,ebx
c00121ea:	7f c7                	jg     c00121b3 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c00121ec:	a1 48 d7 02 c0       	mov    eax,ds:0xc002d748
c00121f1:	48                   	dec    eax
c00121f2:	52                   	push   edx
c00121f3:	a3 48 d7 02 c0       	mov    ds:0xc002d748,eax
c00121f8:	50                   	push   eax
c00121f9:	56                   	push   esi
c00121fa:	68 b8 a2 02 c0       	push   0xc002a2b8
c00121ff:	e8 31 03 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0012204:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012207:	e8 a2 f0 ff ff       	call   c00112ae <Virt::freeSwapfilePage(unsigned long)>
c001220c:	c7 04 24 cd a2 02 c0 	mov    DWORD PTR [esp],0xc002a2cd
c0012213:	e8 1d 03 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0012218:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001221d:	83 c4 10             	add    esp,0x10
c0012220:	48                   	dec    eax
c0012221:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c0012226:	85 c0                	test   eax,eax
c0012228:	75 01                	jne    c001222b <VAS::tryLoadBackOffDisk(unsigned long)+0xe5>
c001222a:	fb                   	sti    
c001222b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001222f:	25 ff 0f 00 00       	and    eax,0xfff
c0012234:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012239:	77 24                	ja     c001225f <VAS::tryLoadBackOffDisk(unsigned long)+0x119>
c001223b:	0f 20 d8             	mov    eax,cr3
c001223e:	0f 22 d8             	mov    cr3,eax
c0012241:	83 ec 0c             	sub    esp,0xc
c0012244:	68 f3 a2 02 c0       	push   0xc002a2f3
c0012249:	e8 e7 02 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001224e:	83 c4 10             	add    esp,0x10
c0012251:	b0 01                	mov    al,0x1
c0012253:	eb 02                	jmp    c0012257 <VAS::tryLoadBackOffDisk(unsigned long)+0x111>
c0012255:	31 c0                	xor    eax,eax
c0012257:	83 c4 0c             	add    esp,0xc
c001225a:	5b                   	pop    ebx
c001225b:	5e                   	pop    esi
c001225c:	5f                   	pop    edi
c001225d:	5d                   	pop    ebp
c001225e:	c3                   	ret    
c001225f:	83 ec 0c             	sub    esp,0xc
c0012262:	68 e3 a2 02 c0       	push   0xc002a2e3
c0012267:	e8 c9 02 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001226c:	83 c4 10             	add    esp,0x10
c001226f:	eb ca                	jmp    c001223b <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012271:	90                   	nop

c0012272 <VAS::scanForEviction()>:
c0012272:	57                   	push   edi
c0012273:	56                   	push   esi
c0012274:	53                   	push   ebx
c0012275:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012279:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001227c:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012282:	75 0e                	jne    c0012292 <VAS::scanForEviction()+0x20>
c0012284:	89 da                	mov    edx,ebx
c0012286:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012289:	c1 ea 16             	shr    edx,0x16
c001228c:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012290:	74 48                	je     c00122da <VAS::scanForEviction()+0x68>
c0012292:	53                   	push   ebx
c0012293:	56                   	push   esi
c0012294:	e8 2b f3 ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c0012299:	5a                   	pop    edx
c001229a:	8b 38                	mov    edi,DWORD PTR [eax]
c001229c:	59                   	pop    ecx
c001229d:	89 fa                	mov    edx,edi
c001229f:	81 e2 01 08 00 00    	and    edx,0x801
c00122a5:	81 fa 01 08 00 00    	cmp    edx,0x801
c00122ab:	74 3d                	je     c00122ea <VAS::scanForEviction()+0x78>
c00122ad:	81 c3 00 10 00 00    	add    ebx,0x1000
c00122b3:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c00122b9:	76 2a                	jbe    c00122e5 <VAS::scanForEviction()+0x73>
c00122bb:	31 db                	xor    ebx,ebx
c00122bd:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00122c4:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00122ca:	75 c6                	jne    c0012292 <VAS::scanForEviction()+0x20>
c00122cc:	89 da                	mov    edx,ebx
c00122ce:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00122d1:	c1 ea 16             	shr    edx,0x16
c00122d4:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00122d8:	75 b8                	jne    c0012292 <VAS::scanForEviction()+0x20>
c00122da:	81 c3 00 00 40 00    	add    ebx,0x400000
c00122e0:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00122e3:	eb 97                	jmp    c001227c <VAS::scanForEviction()+0xa>
c00122e5:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00122e8:	eb 92                	jmp    c001227c <VAS::scanForEviction()+0xa>
c00122ea:	f7 c7 20 00 00 00    	test   edi,0x20
c00122f0:	74 0a                	je     c00122fc <VAS::scanForEviction()+0x8a>
c00122f2:	83 e7 df             	and    edi,0xffffffdf
c00122f5:	89 38                	mov    DWORD PTR [eax],edi
c00122f7:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00122fa:	eb b1                	jmp    c00122ad <VAS::scanForEviction()+0x3b>
c00122fc:	83 ec 08             	sub    esp,0x8
c00122ff:	53                   	push   ebx
c0012300:	56                   	push   esi
c0012301:	e8 7e fd ff ff       	call   c0012084 <VAS::evict(unsigned long)>
c0012306:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c001230d:	83 c4 10             	add    esp,0x10
c0012310:	89 f8                	mov    eax,edi
c0012312:	5b                   	pop    ebx
c0012313:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012318:	5e                   	pop    esi
c0012319:	5f                   	pop    edi
c001231a:	c3                   	ret    

c001231b <mapVASFirstTime>:
c001231b:	55                   	push   ebp
c001231c:	57                   	push   edi
c001231d:	56                   	push   esi
c001231e:	53                   	push   ebx
c001231f:	83 ec 0c             	sub    esp,0xc
c0012322:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012327:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001232a:	4a                   	dec    edx
c001232b:	0f 84 8e 00 00 00    	je     c00123bf <mapVASFirstTime+0xa4>
c0012331:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012334:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012337:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001233c:	c1 e5 15             	shl    ebp,0x15
c001233f:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012344:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001234a:	29 eb                	sub    ebx,ebp
c001234c:	29 ee                	sub    esi,ebp
c001234e:	e8 ea d5 ff ff       	call   c000f93d <Phys::allocatePage()>
c0012353:	83 ec 0c             	sub    esp,0xc
c0012356:	68 03 04 00 00       	push   0x403
c001235b:	6a 01                	push   0x1
c001235d:	53                   	push   ebx
c001235e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012364:	50                   	push   eax
c0012365:	57                   	push   edi
c0012366:	e8 e5 f8 ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001236b:	83 c4 20             	add    esp,0x20
c001236e:	39 f3                	cmp    ebx,esi
c0012370:	75 dc                	jne    c001234e <mapVASFirstTime+0x33>
c0012372:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012377:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c001237c:	29 ee                	sub    esi,ebp
c001237e:	29 e8                	sub    eax,ebp
c0012380:	89 c5                	mov    ebp,eax
c0012382:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012386:	19 db                	sbb    ebx,ebx
c0012388:	e8 b0 d5 ff ff       	call   c000f93d <Phys::allocatePage()>
c001238d:	83 e3 04             	and    ebx,0x4
c0012390:	83 ec 0c             	sub    esp,0xc
c0012393:	81 c3 03 04 00 00    	add    ebx,0x403
c0012399:	53                   	push   ebx
c001239a:	6a 01                	push   0x1
c001239c:	56                   	push   esi
c001239d:	81 ee 00 10 00 00    	sub    esi,0x1000
c00123a3:	50                   	push   eax
c00123a4:	57                   	push   edi
c00123a5:	e8 a6 f8 ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123aa:	83 c4 20             	add    esp,0x20
c00123ad:	39 f5                	cmp    ebp,esi
c00123af:	75 d1                	jne    c0012382 <mapVASFirstTime+0x67>
c00123b1:	0f 20 d8             	mov    eax,cr3
c00123b4:	0f 22 d8             	mov    cr3,eax
c00123b7:	83 c4 0c             	add    esp,0xc
c00123ba:	5b                   	pop    ebx
c00123bb:	5e                   	pop    esi
c00123bc:	5f                   	pop    edi
c00123bd:	5d                   	pop    ebp
c00123be:	c3                   	ret    
c00123bf:	83 ec 0c             	sub    esp,0xc
c00123c2:	68 01 a3 02 c0       	push   0xc002a301
c00123c7:	e8 69 01 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c00123cc:	83 c4 10             	add    esp,0x10
c00123cf:	83 c4 0c             	add    esp,0xc
c00123d2:	5b                   	pop    ebx
c00123d3:	5e                   	pop    esi
c00123d4:	5f                   	pop    edi
c00123d5:	5d                   	pop    ebp
c00123d6:	c3                   	ret    

c00123d7 <__cxa_atexit>:
c00123d7:	31 c0                	xor    eax,eax
c00123d9:	c3                   	ret    

c00123da <__cxa_finalize>:
c00123da:	c3                   	ret    

c00123db <__stack_chk_fail>:
c00123db:	55                   	push   ebp
c00123dc:	89 e5                	mov    ebp,esp
c00123de:	83 ec 14             	sub    esp,0x14
c00123e1:	68 1a a3 02 c0       	push   0xc002a31a
c00123e6:	e8 4a 01 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c00123eb:	58                   	pop    eax
c00123ec:	5a                   	pop    edx
c00123ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00123f0:	68 6a a3 02 c0       	push   0xc002a36a
c00123f5:	e8 3b 01 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c00123fa:	59                   	pop    ecx
c00123fb:	58                   	pop    eax
c00123fc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00123ff:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012402:	68 6a a3 02 c0       	push   0xc002a36a
c0012407:	e8 29 01 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001240c:	5a                   	pop    edx
c001240d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012410:	59                   	pop    ecx
c0012411:	8b 00                	mov    eax,DWORD PTR [eax]
c0012413:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012416:	68 6a a3 02 c0       	push   0xc002a36a
c001241b:	e8 15 01 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0012420:	5a                   	pop    edx
c0012421:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012424:	59                   	pop    ecx
c0012425:	8b 00                	mov    eax,DWORD PTR [eax]
c0012427:	8b 00                	mov    eax,DWORD PTR [eax]
c0012429:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001242c:	68 6a a3 02 c0       	push   0xc002a36a
c0012431:	e8 ff 00 00 00       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0012436:	c7 04 24 72 a3 02 c0 	mov    DWORD PTR [esp],0xc002a372
c001243d:	e8 53 78 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0012442:	83 c4 10             	add    esp,0x10
c0012445:	c9                   	leave  
c0012446:	c3                   	ret    

c0012447 <__cxa_pure_virtual>:
c0012447:	83 ec 18             	sub    esp,0x18
c001244a:	68 8a a3 02 c0       	push   0xc002a38a
c001244f:	e8 41 78 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0012454:	83 c4 1c             	add    esp,0x1c
c0012457:	c3                   	ret    

c0012458 <operator new[](unsigned long)>:
c0012458:	e9 3c d1 ff ff       	jmp    c000f599 <malloc>

c001245d <operator delete(void*, unsigned long)>:
c001245d:	e9 57 d1 ff ff       	jmp    c000f5b9 <rfree>

c0012462 <operator delete[](void*)>:
c0012462:	e9 52 d1 ff ff       	jmp    c000f5b9 <rfree>

c0012467 <operator delete[](void*, unsigned long)>:
c0012467:	e9 4d d1 ff ff       	jmp    c000f5b9 <rfree>

c001246c <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001246c:	55                   	push   ebp
c001246d:	b9 11 00 00 00       	mov    ecx,0x11
c0012472:	57                   	push   edi
c0012473:	56                   	push   esi
c0012474:	be fe 9e 02 c0       	mov    esi,0xc0029efe
c0012479:	53                   	push   ebx
c001247a:	83 ec 20             	sub    esp,0x20
c001247d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012481:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012485:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012489:	fc                   	cld    
c001248a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001248c:	89 ee                	mov    esi,ebp
c001248e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012492:	eb 02                	jmp    c0012496 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012494:	89 c6                	mov    esi,eax
c0012496:	31 d2                	xor    edx,edx
c0012498:	41                   	inc    ecx
c0012499:	89 f0                	mov    eax,esi
c001249b:	f7 f3                	div    ebx
c001249d:	39 de                	cmp    esi,ebx
c001249f:	73 f3                	jae    c0012494 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c00124a1:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00124a4:	eb 02                	jmp    c00124a8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c00124a6:	89 c5                	mov    ebp,eax
c00124a8:	31 d2                	xor    edx,edx
c00124aa:	49                   	dec    ecx
c00124ab:	89 e8                	mov    eax,ebp
c00124ad:	f7 f3                	div    ebx
c00124af:	39 dd                	cmp    ebp,ebx
c00124b1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00124b5:	88 11                	mov    BYTE PTR [ecx],dl
c00124b7:	73 ed                	jae    c00124a6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c00124b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00124bd:	83 c4 20             	add    esp,0x20
c00124c0:	5b                   	pop    ebx
c00124c1:	5e                   	pop    esi
c00124c2:	5f                   	pop    edi
c00124c3:	5d                   	pop    ebp
c00124c4:	c3                   	ret    

c00124c5 <Dbg::logc(char)>:
c00124c5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00124c9:	ba fd 03 00 00       	mov    edx,0x3fd
c00124ce:	ec                   	in     al,dx
c00124cf:	a8 20                	test   al,0x20
c00124d1:	74 fb                	je     c00124ce <Dbg::logc(char)+0x9>
c00124d3:	ba f8 03 00 00       	mov    edx,0x3f8
c00124d8:	88 c8                	mov    al,cl
c00124da:	ee                   	out    dx,al
c00124db:	c3                   	ret    

c00124dc <Dbg::logs(char*)>:
c00124dc:	53                   	push   ebx
c00124dd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00124e1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00124e4:	84 c0                	test   al,al
c00124e6:	74 0f                	je     c00124f7 <Dbg::logs(char*)+0x1b>
c00124e8:	50                   	push   eax
c00124e9:	43                   	inc    ebx
c00124ea:	e8 d6 ff ff ff       	call   c00124c5 <Dbg::logc(char)>
c00124ef:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00124f2:	5a                   	pop    edx
c00124f3:	84 c0                	test   al,al
c00124f5:	75 f1                	jne    c00124e8 <Dbg::logs(char*)+0xc>
c00124f7:	5b                   	pop    ebx
c00124f8:	c3                   	ret    

c00124f9 <Dbg::logWriteInt(unsigned int)>:
c00124f9:	83 ec 10             	sub    esp,0x10
c00124fc:	6a 0a                	push   0xa
c00124fe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012502:	50                   	push   eax
c0012503:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012507:	e8 60 ff ff ff       	call   c001246c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001250c:	50                   	push   eax
c001250d:	e8 ca ff ff ff       	call   c00124dc <Dbg::logs(char*)>
c0012512:	83 c4 20             	add    esp,0x20
c0012515:	c3                   	ret    

c0012516 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012516:	83 ec 10             	sub    esp,0x10
c0012519:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001251d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012521:	50                   	push   eax
c0012522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012526:	e8 41 ff ff ff       	call   c001246c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001252b:	50                   	push   eax
c001252c:	e8 ab ff ff ff       	call   c00124dc <Dbg::logs(char*)>
c0012531:	83 c4 20             	add    esp,0x20
c0012534:	c3                   	ret    

c0012535 <Dbg::kprintf(char const*, ...)>:
c0012535:	55                   	push   ebp
c0012536:	57                   	push   edi
c0012537:	56                   	push   esi
c0012538:	53                   	push   ebx
c0012539:	83 ec 0c             	sub    esp,0xc
c001253c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012540:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012544:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012548:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001254b:	84 c0                	test   al,al
c001254d:	74 4a                	je     c0012599 <Dbg::kprintf(char const*, ...)+0x64>
c001254f:	31 db                	xor    ebx,ebx
c0012551:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012554:	3c 25                	cmp    al,0x25
c0012556:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012559:	0f 85 e4 00 00 00    	jne    c0012643 <Dbg::kprintf(char const*, ...)+0x10e>
c001255f:	83 c3 02             	add    ebx,0x2
c0012562:	8a 07                	mov    al,BYTE PTR [edi]
c0012564:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012567:	83 e8 25             	sub    eax,0x25
c001256a:	3c 53                	cmp    al,0x53
c001256c:	0f 87 ba 00 00 00    	ja     c001262c <Dbg::kprintf(char const*, ...)+0xf7>
c0012572:	0f b6 c0             	movzx  eax,al
c0012575:	ff 24 85 a0 a3 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5c60]
c001257c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012580:	89 c8                	mov    eax,ecx
c0012582:	83 c1 04             	add    ecx,0x4
c0012585:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012589:	ff 30                	push   DWORD PTR [eax]
c001258b:	e8 69 ff ff ff       	call   c00124f9 <Dbg::logWriteInt(unsigned int)>
c0012590:	5f                   	pop    edi
c0012591:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012595:	84 c0                	test   al,al
c0012597:	75 b8                	jne    c0012551 <Dbg::kprintf(char const*, ...)+0x1c>
c0012599:	83 c4 0c             	add    esp,0xc
c001259c:	5b                   	pop    ebx
c001259d:	5e                   	pop    esi
c001259e:	5f                   	pop    edi
c001259f:	5d                   	pop    ebp
c00125a0:	c3                   	ret    
c00125a1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00125a5:	89 c8                	mov    eax,ecx
c00125a7:	83 c1 04             	add    ecx,0x4
c00125aa:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00125ae:	ff 30                	push   DWORD PTR [eax]
c00125b0:	e8 27 ff ff ff       	call   c00124dc <Dbg::logs(char*)>
c00125b5:	58                   	pop    eax
c00125b6:	eb d9                	jmp    c0012591 <Dbg::kprintf(char const*, ...)+0x5c>
c00125b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00125bc:	89 d0                	mov    eax,edx
c00125be:	83 c2 04             	add    edx,0x4
c00125c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00125c5:	ff 30                	push   DWORD PTR [eax]
c00125c7:	e8 2d ff ff ff       	call   c00124f9 <Dbg::logWriteInt(unsigned int)>
c00125cc:	58                   	pop    eax
c00125cd:	eb c2                	jmp    c0012591 <Dbg::kprintf(char const*, ...)+0x5c>
c00125cf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00125d3:	89 d0                	mov    eax,edx
c00125d5:	83 c2 04             	add    edx,0x4
c00125d8:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00125db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00125df:	50                   	push   eax
c00125e0:	e8 e0 fe ff ff       	call   c00124c5 <Dbg::logc(char)>
c00125e5:	58                   	pop    eax
c00125e6:	eb a9                	jmp    c0012591 <Dbg::kprintf(char const*, ...)+0x5c>
c00125e8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00125ec:	89 c8                	mov    eax,ecx
c00125ee:	83 c1 04             	add    ecx,0x4
c00125f1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00125f5:	6a 10                	push   0x10
c00125f7:	ff 30                	push   DWORD PTR [eax]
c00125f9:	e8 18 ff ff ff       	call   c0012516 <Dbg::logWriteIntBase(unsigned int, int)>
c00125fe:	59                   	pop    ecx
c00125ff:	5f                   	pop    edi
c0012600:	eb 8f                	jmp    c0012591 <Dbg::kprintf(char const*, ...)+0x5c>
c0012602:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012606:	89 d0                	mov    eax,edx
c0012608:	83 c2 08             	add    edx,0x8
c001260b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001260f:	6a 10                	push   0x10
c0012611:	ff 30                	push   DWORD PTR [eax]
c0012613:	e8 fe fe ff ff       	call   c0012516 <Dbg::logWriteIntBase(unsigned int, int)>
c0012618:	58                   	pop    eax
c0012619:	5a                   	pop    edx
c001261a:	e9 72 ff ff ff       	jmp    c0012591 <Dbg::kprintf(char const*, ...)+0x5c>
c001261f:	6a 25                	push   0x25
c0012621:	e8 9f fe ff ff       	call   c00124c5 <Dbg::logc(char)>
c0012626:	58                   	pop    eax
c0012627:	e9 65 ff ff ff       	jmp    c0012591 <Dbg::kprintf(char const*, ...)+0x5c>
c001262c:	6a 25                	push   0x25
c001262e:	e8 92 fe ff ff       	call   c00124c5 <Dbg::logc(char)>
c0012633:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012636:	50                   	push   eax
c0012637:	e8 89 fe ff ff       	call   c00124c5 <Dbg::logc(char)>
c001263c:	5a                   	pop    edx
c001263d:	59                   	pop    ecx
c001263e:	e9 4e ff ff ff       	jmp    c0012591 <Dbg::kprintf(char const*, ...)+0x5c>
c0012643:	50                   	push   eax
c0012644:	89 eb                	mov    ebx,ebp
c0012646:	e8 7a fe ff ff       	call   c00124c5 <Dbg::logc(char)>
c001264b:	89 fd                	mov    ebp,edi
c001264d:	58                   	pop    eax
c001264e:	e9 3e ff ff ff       	jmp    c0012591 <Dbg::kprintf(char const*, ...)+0x5c>
c0012653:	90                   	nop

c0012654 <File::read(unsigned long long, void*, int*)>:
c0012654:	53                   	push   ebx
c0012655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012659:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001265d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012664:	3c 19                	cmp    al,0x19
c0012666:	77 35                	ja     c001269d <File::read(unsigned long long, void*, int*)+0x49>
c0012668:	8b 04 85 e0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2420]
c001266f:	85 c0                	test   eax,eax
c0012671:	74 2a                	je     c001269d <File::read(unsigned long long, void*, int*)+0x49>
c0012673:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012679:	85 c0                	test   eax,eax
c001267b:	74 20                	je     c001269d <File::read(unsigned long long, void*, int*)+0x49>
c001267d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012681:	74 21                	je     c00126a4 <File::read(unsigned long long, void*, int*)+0x50>
c0012683:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012685:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012689:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001268f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012693:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012697:	5b                   	pop    ebx
c0012698:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c001269b:	ff e0                	jmp    eax
c001269d:	b8 0b 00 00 00       	mov    eax,0xb
c00126a2:	eb 05                	jmp    c00126a9 <File::read(unsigned long long, void*, int*)+0x55>
c00126a4:	b8 05 00 00 00       	mov    eax,0x5
c00126a9:	5b                   	pop    ebx
c00126aa:	c3                   	ret    
c00126ab:	90                   	nop

c00126ac <File::write(unsigned long long, void*, int*)>:
c00126ac:	53                   	push   ebx
c00126ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00126b5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00126bc:	3c 19                	cmp    al,0x19
c00126be:	77 35                	ja     c00126f5 <File::write(unsigned long long, void*, int*)+0x49>
c00126c0:	8b 04 85 e0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2420]
c00126c7:	85 c0                	test   eax,eax
c00126c9:	74 2a                	je     c00126f5 <File::write(unsigned long long, void*, int*)+0x49>
c00126cb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00126d1:	85 c0                	test   eax,eax
c00126d3:	74 20                	je     c00126f5 <File::write(unsigned long long, void*, int*)+0x49>
c00126d5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00126d9:	74 21                	je     c00126fc <File::write(unsigned long long, void*, int*)+0x50>
c00126db:	8b 08                	mov    ecx,DWORD PTR [eax]
c00126dd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00126e1:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00126e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00126eb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126ef:	5b                   	pop    ebx
c00126f0:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00126f3:	ff e0                	jmp    eax
c00126f5:	b8 0b 00 00 00       	mov    eax,0xb
c00126fa:	eb 05                	jmp    c0012701 <File::write(unsigned long long, void*, int*)+0x55>
c00126fc:	b8 05 00 00 00       	mov    eax,0x5
c0012701:	5b                   	pop    ebx
c0012702:	c3                   	ret    
c0012703:	90                   	nop

c0012704 <Directory::read(unsigned long long, void*, int*)>:
c0012704:	53                   	push   ebx
c0012705:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012709:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001270d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012714:	3c 19                	cmp    al,0x19
c0012716:	77 35                	ja     c001274d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012718:	8b 04 85 e0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2420]
c001271f:	85 c0                	test   eax,eax
c0012721:	74 2a                	je     c001274d <Directory::read(unsigned long long, void*, int*)+0x49>
c0012723:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012729:	85 c0                	test   eax,eax
c001272b:	74 20                	je     c001274d <Directory::read(unsigned long long, void*, int*)+0x49>
c001272d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012731:	74 21                	je     c0012754 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012733:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012735:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012739:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001273f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012743:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012747:	5b                   	pop    ebx
c0012748:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001274b:	ff e0                	jmp    eax
c001274d:	b8 0b 00 00 00       	mov    eax,0xb
c0012752:	eb 05                	jmp    c0012759 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012754:	b8 05 00 00 00       	mov    eax,0x5
c0012759:	5b                   	pop    ebx
c001275a:	c3                   	ret    
c001275b:	90                   	nop

c001275c <Directory::write(unsigned long long, void*, int*)>:
c001275c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012760:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012767:	b8 0b 00 00 00       	mov    eax,0xb
c001276c:	80 fa 19             	cmp    dl,0x19
c001276f:	77 18                	ja     c0012789 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012771:	8b 14 95 e0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2420]
c0012778:	85 d2                	test   edx,edx
c001277a:	74 0d                	je     c0012789 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001277c:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012783:	19 c0                	sbb    eax,eax
c0012785:	83 e0 0a             	and    eax,0xa
c0012788:	40                   	inc    eax
c0012789:	c3                   	ret    

c001278a <File::isAtty()>:
c001278a:	31 c0                	xor    eax,eax
c001278c:	c3                   	ret    
c001278d:	90                   	nop

c001278e <Directory::isAtty()>:
c001278e:	31 c0                	xor    eax,eax
c0012790:	c3                   	ret    
c0012791:	90                   	nop

c0012792 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012792:	b8 0a 00 00 00       	mov    eax,0xa
c0012797:	c3                   	ret    

c0012798 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012798:	b8 0a 00 00 00       	mov    eax,0xa
c001279d:	c3                   	ret    

c001279e <Filesystem::getFileFirstSector(char const*)>:
c001279e:	31 c0                	xor    eax,eax
c00127a0:	31 d2                	xor    edx,edx
c00127a2:	c3                   	ret    
c00127a3:	90                   	nop

c00127a4 <File::~File()>:
c00127a4:	83 ec 0c             	sub    esp,0xc
c00127a7:	ba 60 a5 02 c0       	mov    edx,0xc002a560
c00127ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127b0:	89 10                	mov    DWORD PTR [eax],edx
c00127b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127b6:	83 ec 0c             	sub    esp,0xc
c00127b9:	50                   	push   eax
c00127ba:	e8 7d e7 ff ff       	call   c0010f3c <UnixFile::~UnixFile()>
c00127bf:	83 c4 10             	add    esp,0x10
c00127c2:	90                   	nop
c00127c3:	83 c4 0c             	add    esp,0xc
c00127c6:	c3                   	ret    
c00127c7:	90                   	nop

c00127c8 <File::~File()>:
c00127c8:	83 ec 0c             	sub    esp,0xc
c00127cb:	83 ec 0c             	sub    esp,0xc
c00127ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127d2:	e8 cd ff ff ff       	call   c00127a4 <File::~File()>
c00127d7:	83 c4 10             	add    esp,0x10
c00127da:	83 ec 08             	sub    esp,0x8
c00127dd:	68 14 01 00 00       	push   0x114
c00127e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127e6:	e8 72 fc ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c00127eb:	83 c4 10             	add    esp,0x10
c00127ee:	83 c4 0c             	add    esp,0xc
c00127f1:	c3                   	ret    

c00127f2 <Directory::~Directory()>:
c00127f2:	83 ec 0c             	sub    esp,0xc
c00127f5:	ba 7c a5 02 c0       	mov    edx,0xc002a57c
c00127fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127fe:	89 10                	mov    DWORD PTR [eax],edx
c0012800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012804:	83 ec 0c             	sub    esp,0xc
c0012807:	50                   	push   eax
c0012808:	e8 2f e7 ff ff       	call   c0010f3c <UnixFile::~UnixFile()>
c001280d:	83 c4 10             	add    esp,0x10
c0012810:	90                   	nop
c0012811:	83 c4 0c             	add    esp,0xc
c0012814:	c3                   	ret    
c0012815:	90                   	nop

c0012816 <Directory::~Directory()>:
c0012816:	83 ec 0c             	sub    esp,0xc
c0012819:	83 ec 0c             	sub    esp,0xc
c001281c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012820:	e8 cd ff ff ff       	call   c00127f2 <Directory::~Directory()>
c0012825:	83 c4 10             	add    esp,0x10
c0012828:	83 ec 08             	sub    esp,0x8
c001282b:	68 14 01 00 00       	push   0x114
c0012830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012834:	e8 24 fc ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0012839:	83 c4 10             	add    esp,0x10
c001283c:	83 c4 0c             	add    esp,0xc
c001283f:	c3                   	ret    

c0012840 <Filesystem::Filesystem()>:
c0012840:	ba f8 a4 02 c0       	mov    edx,0xc002a4f8
c0012845:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012849:	89 10                	mov    DWORD PTR [eax],edx
c001284b:	8b 15 54 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d754
c0012851:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012855:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001285c:	a3 54 d7 02 c0       	mov    ds:0xc002d754,eax
c0012861:	90                   	nop
c0012862:	c3                   	ret    
c0012863:	90                   	nop

c0012864 <Filesystem::~Filesystem()>:
c0012864:	ba f8 a4 02 c0       	mov    edx,0xc002a4f8
c0012869:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001286d:	89 10                	mov    DWORD PTR [eax],edx
c001286f:	90                   	nop
c0012870:	c3                   	ret    
c0012871:	90                   	nop

c0012872 <Filesystem::~Filesystem()>:
c0012872:	83 ec 0c             	sub    esp,0xc
c0012875:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012879:	e8 e6 ff ff ff       	call   c0012864 <Filesystem::~Filesystem()>
c001287e:	83 c4 04             	add    esp,0x4
c0012881:	83 ec 08             	sub    esp,0x8
c0012884:	6a 08                	push   0x8
c0012886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001288a:	e8 ce fb ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001288f:	83 c4 10             	add    esp,0x10
c0012892:	83 c4 0c             	add    esp,0xc
c0012895:	c3                   	ret    

c0012896 <Fs::getcwd(Process*, char*, int)>:
c0012896:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001289a:	31 c0                	xor    eax,eax
c001289c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001289f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00128a3:	7d 15                	jge    c00128ba <Fs::getcwd(Process*, char*, int)+0x24>
c00128a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128a9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00128b0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00128b3:	84 c9                	test   cl,cl
c00128b5:	74 06                	je     c00128bd <Fs::getcwd(Process*, char*, int)+0x27>
c00128b7:	40                   	inc    eax
c00128b8:	eb e2                	jmp    c001289c <Fs::getcwd(Process*, char*, int)+0x6>
c00128ba:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00128bd:	31 c0                	xor    eax,eax
c00128bf:	c3                   	ret    

c00128c0 <Fs::initVFS()>:
c00128c0:	83 ec 18             	sub    esp,0x18
c00128c3:	6a 08                	push   0x8
c00128c5:	e8 cf cc ff ff       	call   c000f599 <malloc>
c00128ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00128cd:	e8 c0 de 00 00       	call   c0020792 <FAT::FAT()>
c00128d2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00128d9:	e8 bb cc ff ff       	call   c000f599 <malloc>
c00128de:	89 04 24             	mov    DWORD PTR [esp],eax
c00128e1:	e8 b8 f0 00 00       	call   c002199e <ISO9660::ISO9660()>
c00128e6:	83 c4 1c             	add    esp,0x1c
c00128e9:	c3                   	ret    

c00128ea <Fs::standardiseFiles(char*, char const*, char const*)>:
c00128ea:	55                   	push   ebp
c00128eb:	57                   	push   edi
c00128ec:	56                   	push   esi
c00128ed:	53                   	push   ebx
c00128ee:	81 ec 10 04 00 00    	sub    esp,0x410
c00128f4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00128fb:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012902:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012909:	68 00 04 00 00       	push   0x400
c001290e:	6a 00                	push   0x0
c0012910:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012914:	56                   	push   esi
c0012915:	e8 36 de fe ff       	call   c0000750 <memset>
c001291a:	83 c4 10             	add    esp,0x10
c001291d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012921:	75 0b                	jne    c001292e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012923:	50                   	push   eax
c0012924:	50                   	push   eax
c0012925:	57                   	push   edi
c0012926:	56                   	push   esi
c0012927:	e8 e0 de fe ff       	call   c000080c <strcpy>
c001292c:	eb 41                	jmp    c001296f <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c001292e:	8a 07                	mov    al,BYTE PTR [edi]
c0012930:	3c 5c                	cmp    al,0x5c
c0012932:	74 04                	je     c0012938 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012934:	3c 2f                	cmp    al,0x2f
c0012936:	75 18                	jne    c0012950 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012938:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001293b:	3c 60                	cmp    al,0x60
c001293d:	7e 03                	jle    c0012942 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c001293f:	83 e8 20             	sub    eax,0x20
c0012942:	88 04 24             	mov    BYTE PTR [esp],al
c0012945:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001294c:	50                   	push   eax
c001294d:	50                   	push   eax
c001294e:	eb 18                	jmp    c0012968 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012950:	50                   	push   eax
c0012951:	50                   	push   eax
c0012952:	55                   	push   ebp
c0012953:	56                   	push   esi
c0012954:	e8 b3 de fe ff       	call   c000080c <strcpy>
c0012959:	5a                   	pop    edx
c001295a:	59                   	pop    ecx
c001295b:	68 e2 b7 02 c0       	push   0xc002b7e2
c0012960:	56                   	push   esi
c0012961:	e8 e6 df fe ff       	call   c000094c <strcat>
c0012966:	5d                   	pop    ebp
c0012967:	58                   	pop    eax
c0012968:	57                   	push   edi
c0012969:	56                   	push   esi
c001296a:	e8 dd df fe ff       	call   c000094c <strcat>
c001296f:	83 c4 10             	add    esp,0x10
c0012972:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012975:	3c 60                	cmp    al,0x60
c0012977:	7e 03                	jle    c001297c <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012979:	83 e8 20             	sub    eax,0x20
c001297c:	88 04 24             	mov    BYTE PTR [esp],al
c001297f:	88 03                	mov    BYTE PTR [ebx],al
c0012981:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012988:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001298e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012992:	bf 03 00 00 00       	mov    edi,0x3
c0012997:	b8 03 00 00 00       	mov    eax,0x3
c001299c:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001299f:	84 d2                	test   dl,dl
c00129a1:	0f 84 91 00 00 00    	je     c0012a38 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00129a7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00129aa:	80 fa 5c             	cmp    dl,0x5c
c00129ad:	74 05                	je     c00129b4 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00129af:	80 fa 2f             	cmp    dl,0x2f
c00129b2:	75 12                	jne    c00129c6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00129b4:	89 c5                	mov    ebp,eax
c00129b6:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00129bb:	74 09                	je     c00129c6 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00129bd:	40                   	inc    eax
c00129be:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00129c2:	89 cf                	mov    edi,ecx
c00129c4:	eb d6                	jmp    c001299c <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00129c6:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00129cb:	75 5b                	jne    c0012a28 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00129cd:	80 fa 2e             	cmp    dl,0x2e
c00129d0:	75 56                	jne    c0012a28 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00129d2:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00129d6:	74 19                	je     c00129f1 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00129d8:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00129dd:	74 53                	je     c0012a32 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00129df:	89 f9                	mov    ecx,edi
c00129e1:	41                   	inc    ecx
c00129e2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00129e5:	80 fa 2f             	cmp    dl,0x2f
c00129e8:	74 f7                	je     c00129e1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00129ea:	80 fa 5c             	cmp    dl,0x5c
c00129ed:	74 f2                	je     c00129e1 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00129ef:	eb d1                	jmp    c00129c2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00129f1:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00129f6:	74 3a                	je     c0012a32 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00129f8:	83 f8 03             	cmp    eax,0x3
c00129fb:	74 c5                	je     c00129c2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00129fd:	41                   	inc    ecx
c00129fe:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012a01:	80 fa 2f             	cmp    dl,0x2f
c0012a04:	74 f7                	je     c00129fd <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012a06:	80 fa 5c             	cmp    dl,0x5c
c0012a09:	74 f2                	je     c00129fd <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012a0b:	48                   	dec    eax
c0012a0c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012a10:	75 06                	jne    c0012a18 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012a12:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012a16:	eb f3                	jmp    c0012a0b <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012a18:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012a1c:	74 07                	je     c0012a25 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012a1e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012a22:	48                   	dec    eax
c0012a23:	eb f3                	jmp    c0012a18 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012a25:	40                   	inc    eax
c0012a26:	eb 9a                	jmp    c00129c2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a28:	80 fa 2f             	cmp    dl,0x2f
c0012a2b:	74 95                	je     c00129c2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a2d:	80 fa 5c             	cmp    dl,0x5c
c0012a30:	74 90                	je     c00129c2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a32:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012a35:	40                   	inc    eax
c0012a36:	eb 8a                	jmp    c00129c2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012a38:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012a3c:	83 ec 0c             	sub    esp,0xc
c0012a3f:	53                   	push   ebx
c0012a40:	e8 27 dd fe ff       	call   c000076c <strlen>
c0012a45:	83 c4 10             	add    esp,0x10
c0012a48:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012a4d:	75 26                	jne    c0012a75 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012a4f:	83 ec 0c             	sub    esp,0xc
c0012a52:	53                   	push   ebx
c0012a53:	e8 14 dd fe ff       	call   c000076c <strlen>
c0012a58:	83 c4 10             	add    esp,0x10
c0012a5b:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012a60:	74 26                	je     c0012a88 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012a62:	83 ec 0c             	sub    esp,0xc
c0012a65:	53                   	push   ebx
c0012a66:	e8 01 dd fe ff       	call   c000076c <strlen>
c0012a6b:	83 c4 10             	add    esp,0x10
c0012a6e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012a73:	eb c7                	jmp    c0012a3c <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012a75:	83 ec 0c             	sub    esp,0xc
c0012a78:	53                   	push   ebx
c0012a79:	e8 ee dc fe ff       	call   c000076c <strlen>
c0012a7e:	83 c4 10             	add    esp,0x10
c0012a81:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012a86:	74 c7                	je     c0012a4f <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012a88:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012a8e:	5b                   	pop    ebx
c0012a8f:	5e                   	pop    esi
c0012a90:	5f                   	pop    edi
c0012a91:	5d                   	pop    ebp
c0012a92:	c3                   	ret    
c0012a93:	90                   	nop

c0012a94 <File::File(char const*, Process*)>:
c0012a94:	83 ec 0c             	sub    esp,0xc
c0012a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a9b:	83 ec 08             	sub    esp,0x8
c0012a9e:	6a 00                	push   0x0
c0012aa0:	50                   	push   eax
c0012aa1:	e8 b4 e2 ff ff       	call   c0010d5a <UnixFile::UnixFile(int)>
c0012aa6:	83 c4 10             	add    esp,0x10
c0012aa9:	ba 60 a5 02 c0       	mov    edx,0xc002a560
c0012aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ab2:	89 10                	mov    DWORD PTR [eax],edx
c0012ab4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ab8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ac2:	83 c0 0d             	add    eax,0xd
c0012ac5:	83 ec 04             	sub    esp,0x4
c0012ac8:	52                   	push   edx
c0012ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012acd:	50                   	push   eax
c0012ace:	e8 17 fe ff ff       	call   c00128ea <Fs::standardiseFiles(char*, char const*, char const*)>
c0012ad3:	83 c4 10             	add    esp,0x10
c0012ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ada:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012add:	8d 50 bf             	lea    edx,[eax-0x41]
c0012ae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ae4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aee:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012af2:	90                   	nop
c0012af3:	83 c4 0c             	add    esp,0xc
c0012af6:	c3                   	ret    
c0012af7:	90                   	nop

c0012af8 <File::open(FileOpenMode)>:
c0012af8:	53                   	push   ebx
c0012af9:	b8 0b 00 00 00       	mov    eax,0xb
c0012afe:	83 ec 08             	sub    esp,0x8
c0012b01:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012b05:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012b0c:	80 fa 19             	cmp    dl,0x19
c0012b0f:	77 40                	ja     c0012b51 <File::open(FileOpenMode)+0x59>
c0012b11:	8b 14 95 e0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2420]
c0012b18:	85 d2                	test   edx,edx
c0012b1a:	74 35                	je     c0012b51 <File::open(FileOpenMode)+0x59>
c0012b1c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012b22:	85 d2                	test   edx,edx
c0012b24:	74 2b                	je     c0012b51 <File::open(FileOpenMode)+0x59>
c0012b26:	b8 06 00 00 00       	mov    eax,0x6
c0012b2b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012b2f:	75 20                	jne    c0012b51 <File::open(FileOpenMode)+0x59>
c0012b31:	8b 02                	mov    eax,DWORD PTR [edx]
c0012b33:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012b39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b3d:	51                   	push   ecx
c0012b3e:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012b41:	51                   	push   ecx
c0012b42:	52                   	push   edx
c0012b43:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012b46:	83 c4 10             	add    esp,0x10
c0012b49:	85 c0                	test   eax,eax
c0012b4b:	75 04                	jne    c0012b51 <File::open(FileOpenMode)+0x59>
c0012b4d:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012b51:	83 c4 08             	add    esp,0x8
c0012b54:	5b                   	pop    ebx
c0012b55:	c3                   	ret    

c0012b56 <File::close()>:
c0012b56:	53                   	push   ebx
c0012b57:	b8 0b 00 00 00       	mov    eax,0xb
c0012b5c:	83 ec 08             	sub    esp,0x8
c0012b5f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012b63:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012b6a:	80 fa 19             	cmp    dl,0x19
c0012b6d:	77 41                	ja     c0012bb0 <File::close()+0x5a>
c0012b6f:	8b 1c 95 e0 db 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2420]
c0012b76:	85 db                	test   ebx,ebx
c0012b78:	74 36                	je     c0012bb0 <File::close()+0x5a>
c0012b7a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012b81:	74 2d                	je     c0012bb0 <File::close()+0x5a>
c0012b83:	b8 05 00 00 00       	mov    eax,0x5
c0012b88:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012b8c:	74 22                	je     c0012bb0 <File::close()+0x5a>
c0012b8e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012b92:	8b 04 95 e0 db 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2420]
c0012b99:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012b9f:	53                   	push   ebx
c0012ba0:	53                   	push   ebx
c0012ba1:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ba3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012ba9:	50                   	push   eax
c0012baa:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012bad:	83 c4 10             	add    esp,0x10
c0012bb0:	83 c4 08             	add    esp,0x8
c0012bb3:	5b                   	pop    ebx
c0012bb4:	c3                   	ret    
c0012bb5:	90                   	nop

c0012bb6 <File::seek(unsigned long long)>:
c0012bb6:	56                   	push   esi
c0012bb7:	53                   	push   ebx
c0012bb8:	b8 0b 00 00 00       	mov    eax,0xb
c0012bbd:	51                   	push   ecx
c0012bbe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012bc2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012bc6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012bcd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012bd1:	80 fa 19             	cmp    dl,0x19
c0012bd4:	77 31                	ja     c0012c07 <File::seek(unsigned long long)+0x51>
c0012bd6:	8b 14 95 e0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2420]
c0012bdd:	85 d2                	test   edx,edx
c0012bdf:	74 26                	je     c0012c07 <File::seek(unsigned long long)+0x51>
c0012be1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012be7:	85 d2                	test   edx,edx
c0012be9:	74 1c                	je     c0012c07 <File::seek(unsigned long long)+0x51>
c0012beb:	b8 05 00 00 00       	mov    eax,0x5
c0012bf0:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012bf4:	74 11                	je     c0012c07 <File::seek(unsigned long long)+0x51>
c0012bf6:	8b 02                	mov    eax,DWORD PTR [edx]
c0012bf8:	53                   	push   ebx
c0012bf9:	51                   	push   ecx
c0012bfa:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012c00:	52                   	push   edx
c0012c01:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012c04:	83 c4 10             	add    esp,0x10
c0012c07:	5a                   	pop    edx
c0012c08:	5b                   	pop    ebx
c0012c09:	5e                   	pop    esi
c0012c0a:	c3                   	ret    
c0012c0b:	90                   	nop

c0012c0c <File::tell(unsigned long long*)>:
c0012c0c:	83 ec 0c             	sub    esp,0xc
c0012c0f:	b8 0b 00 00 00       	mov    eax,0xb
c0012c14:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012c18:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012c1f:	80 fa 19             	cmp    dl,0x19
c0012c22:	77 34                	ja     c0012c58 <File::tell(unsigned long long*)+0x4c>
c0012c24:	8b 14 95 e0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2420]
c0012c2b:	85 d2                	test   edx,edx
c0012c2d:	74 29                	je     c0012c58 <File::tell(unsigned long long*)+0x4c>
c0012c2f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012c35:	85 d2                	test   edx,edx
c0012c37:	74 1f                	je     c0012c58 <File::tell(unsigned long long*)+0x4c>
c0012c39:	b8 05 00 00 00       	mov    eax,0x5
c0012c3e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012c42:	74 14                	je     c0012c58 <File::tell(unsigned long long*)+0x4c>
c0012c44:	50                   	push   eax
c0012c45:	8b 02                	mov    eax,DWORD PTR [edx]
c0012c47:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c4b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012c51:	52                   	push   edx
c0012c52:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012c55:	83 c4 10             	add    esp,0x10
c0012c58:	83 c4 0c             	add    esp,0xc
c0012c5b:	c3                   	ret    

c0012c5c <File::rewind()>:
c0012c5c:	83 ec 10             	sub    esp,0x10
c0012c5f:	6a 00                	push   0x0
c0012c61:	6a 00                	push   0x0
c0012c63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c67:	e8 4a ff ff ff       	call   c0012bb6 <File::seek(unsigned long long)>
c0012c6c:	83 c4 1c             	add    esp,0x1c
c0012c6f:	c3                   	ret    

c0012c70 <File::unlink()>:
c0012c70:	83 ec 0c             	sub    esp,0xc
c0012c73:	b8 0b 00 00 00       	mov    eax,0xb
c0012c78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012c7c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012c83:	80 f9 19             	cmp    cl,0x19
c0012c86:	77 2f                	ja     c0012cb7 <File::unlink()+0x47>
c0012c88:	8b 0c 8d e0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2420]
c0012c8f:	85 c9                	test   ecx,ecx
c0012c91:	74 24                	je     c0012cb7 <File::unlink()+0x47>
c0012c93:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012c99:	85 c9                	test   ecx,ecx
c0012c9b:	74 1a                	je     c0012cb7 <File::unlink()+0x47>
c0012c9d:	b8 06 00 00 00       	mov    eax,0x6
c0012ca2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ca6:	75 0f                	jne    c0012cb7 <File::unlink()+0x47>
c0012ca8:	83 c2 0d             	add    edx,0xd
c0012cab:	50                   	push   eax
c0012cac:	50                   	push   eax
c0012cad:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012caf:	52                   	push   edx
c0012cb0:	51                   	push   ecx
c0012cb1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012cb4:	83 c4 10             	add    esp,0x10
c0012cb7:	83 c4 0c             	add    esp,0xc
c0012cba:	c3                   	ret    
c0012cbb:	90                   	nop

c0012cbc <File::rename(char const*)>:
c0012cbc:	83 ec 0c             	sub    esp,0xc
c0012cbf:	b8 0b 00 00 00       	mov    eax,0xb
c0012cc4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012cc8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ccf:	80 f9 19             	cmp    cl,0x19
c0012cd2:	77 32                	ja     c0012d06 <File::rename(char const*)+0x4a>
c0012cd4:	8b 0c 8d e0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2420]
c0012cdb:	85 c9                	test   ecx,ecx
c0012cdd:	74 27                	je     c0012d06 <File::rename(char const*)+0x4a>
c0012cdf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ce5:	85 c9                	test   ecx,ecx
c0012ce7:	74 1d                	je     c0012d06 <File::rename(char const*)+0x4a>
c0012ce9:	b8 06 00 00 00       	mov    eax,0x6
c0012cee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012cf2:	75 12                	jne    c0012d06 <File::rename(char const*)+0x4a>
c0012cf4:	83 c2 0d             	add    edx,0xd
c0012cf7:	50                   	push   eax
c0012cf8:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012cfa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cfe:	52                   	push   edx
c0012cff:	51                   	push   ecx
c0012d00:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012d03:	83 c4 10             	add    esp,0x10
c0012d06:	83 c4 0c             	add    esp,0xc
c0012d09:	c3                   	ret    

c0012d0a <File::chfatattr(unsigned char, unsigned char)>:
c0012d0a:	57                   	push   edi
c0012d0b:	b8 0b 00 00 00       	mov    eax,0xb
c0012d10:	56                   	push   esi
c0012d11:	53                   	push   ebx
c0012d12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d16:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012d1a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d21:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012d25:	80 f9 19             	cmp    cl,0x19
c0012d28:	77 37                	ja     c0012d61 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d2a:	8b 0c 8d e0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2420]
c0012d31:	85 c9                	test   ecx,ecx
c0012d33:	74 2c                	je     c0012d61 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d35:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d3b:	85 c9                	test   ecx,ecx
c0012d3d:	74 22                	je     c0012d61 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d3f:	b8 06 00 00 00       	mov    eax,0x6
c0012d44:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d48:	75 17                	jne    c0012d61 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012d4a:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012d4c:	89 f0                	mov    eax,esi
c0012d4e:	83 c2 0d             	add    edx,0xd
c0012d51:	0f b6 f0             	movzx  esi,al
c0012d54:	0f b6 db             	movzx  ebx,bl
c0012d57:	56                   	push   esi
c0012d58:	53                   	push   ebx
c0012d59:	52                   	push   edx
c0012d5a:	51                   	push   ecx
c0012d5b:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012d5e:	83 c4 10             	add    esp,0x10
c0012d61:	5b                   	pop    ebx
c0012d62:	5e                   	pop    esi
c0012d63:	5f                   	pop    edi
c0012d64:	c3                   	ret    
c0012d65:	90                   	nop

c0012d66 <File::exists()>:
c0012d66:	83 ec 0c             	sub    esp,0xc
c0012d69:	31 c0                	xor    eax,eax
c0012d6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d6f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d76:	80 f9 19             	cmp    cl,0x19
c0012d79:	77 24                	ja     c0012d9f <File::exists()+0x39>
c0012d7b:	8b 0c 8d e0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2420]
c0012d82:	85 c9                	test   ecx,ecx
c0012d84:	74 19                	je     c0012d9f <File::exists()+0x39>
c0012d86:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d8c:	85 c9                	test   ecx,ecx
c0012d8e:	74 0f                	je     c0012d9f <File::exists()+0x39>
c0012d90:	83 c2 0d             	add    edx,0xd
c0012d93:	50                   	push   eax
c0012d94:	50                   	push   eax
c0012d95:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d97:	52                   	push   edx
c0012d98:	51                   	push   ecx
c0012d99:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012d9c:	83 c4 10             	add    esp,0x10
c0012d9f:	83 c4 0c             	add    esp,0xc
c0012da2:	c3                   	ret    
c0012da3:	90                   	nop

c0012da4 <File::stat(unsigned long long*, bool*)>:
c0012da4:	56                   	push   esi
c0012da5:	53                   	push   ebx
c0012da6:	50                   	push   eax
c0012da7:	b8 0b 00 00 00       	mov    eax,0xb
c0012dac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012db0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012db4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012dbb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012dbf:	80 f9 19             	cmp    cl,0x19
c0012dc2:	77 3d                	ja     c0012e01 <File::stat(unsigned long long*, bool*)+0x5d>
c0012dc4:	8b 0c 8d e0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2420]
c0012dcb:	85 c9                	test   ecx,ecx
c0012dcd:	74 32                	je     c0012e01 <File::stat(unsigned long long*, bool*)+0x5d>
c0012dcf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dd5:	85 c9                	test   ecx,ecx
c0012dd7:	74 28                	je     c0012e01 <File::stat(unsigned long long*, bool*)+0x5d>
c0012dd9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ddb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ddf:	74 13                	je     c0012df4 <File::stat(unsigned long long*, bool*)+0x50>
c0012de1:	83 ec 04             	sub    esp,0x4
c0012de4:	56                   	push   esi
c0012de5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012deb:	51                   	push   ecx
c0012dec:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012def:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012df2:	eb 0a                	jmp    c0012dfe <File::stat(unsigned long long*, bool*)+0x5a>
c0012df4:	53                   	push   ebx
c0012df5:	83 c2 0d             	add    edx,0xd
c0012df8:	56                   	push   esi
c0012df9:	52                   	push   edx
c0012dfa:	51                   	push   ecx
c0012dfb:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012dfe:	83 c4 10             	add    esp,0x10
c0012e01:	5a                   	pop    edx
c0012e02:	5b                   	pop    ebx
c0012e03:	5e                   	pop    esi
c0012e04:	c3                   	ret    

c0012e05 <Fs::setcwd(Process*, char*)>:
c0012e05:	55                   	push   ebp
c0012e06:	57                   	push   edi
c0012e07:	56                   	push   esi
c0012e08:	53                   	push   ebx
c0012e09:	81 ec 20 02 00 00    	sub    esp,0x220
c0012e0f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012e16:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012e1c:	57                   	push   edi
c0012e1d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012e24:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012e28:	56                   	push   esi
c0012e29:	e8 bc fa ff ff       	call   c00128ea <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e2e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012e31:	e8 36 d9 fe ff       	call   c000076c <strlen>
c0012e36:	83 c4 10             	add    esp,0x10
c0012e39:	83 f8 02             	cmp    eax,0x2
c0012e3c:	77 17                	ja     c0012e55 <Fs::setcwd(Process*, char*)+0x50>
c0012e3e:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012e43:	83 e8 41             	sub    eax,0x41
c0012e46:	83 f8 19             	cmp    eax,0x19
c0012e49:	76 24                	jbe    c0012e6f <Fs::setcwd(Process*, char*)+0x6a>
c0012e4b:	b8 03 00 00 00       	mov    eax,0x3
c0012e50:	e9 e0 00 00 00       	jmp    c0012f35 <Fs::setcwd(Process*, char*)+0x130>
c0012e55:	83 ec 0c             	sub    esp,0xc
c0012e58:	56                   	push   esi
c0012e59:	e8 0e d9 fe ff       	call   c000076c <strlen>
c0012e5e:	83 c4 10             	add    esp,0x10
c0012e61:	83 f8 03             	cmp    eax,0x3
c0012e64:	75 34                	jne    c0012e9a <Fs::setcwd(Process*, char*)+0x95>
c0012e66:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012e6b:	75 2d                	jne    c0012e9a <Fs::setcwd(Process*, char*)+0x95>
c0012e6d:	eb cf                	jmp    c0012e3e <Fs::setcwd(Process*, char*)+0x39>
c0012e6f:	8b 14 85 e0 db 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2420]
c0012e76:	b8 05 00 00 00       	mov    eax,0x5
c0012e7b:	85 d2                	test   edx,edx
c0012e7d:	0f 84 b2 00 00 00    	je     c0012f35 <Fs::setcwd(Process*, char*)+0x130>
c0012e83:	b8 06 00 00 00       	mov    eax,0x6
c0012e88:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012e8f:	0f 85 92 00 00 00    	jne    c0012f27 <Fs::setcwd(Process*, char*)+0x122>
c0012e95:	e9 9b 00 00 00       	jmp    c0012f35 <Fs::setcwd(Process*, char*)+0x130>
c0012e9a:	83 ec 0c             	sub    esp,0xc
c0012e9d:	68 14 01 00 00       	push   0x114
c0012ea2:	e8 f2 c6 ff ff       	call   c000f599 <malloc>
c0012ea7:	83 c4 0c             	add    esp,0xc
c0012eaa:	89 c3                	mov    ebx,eax
c0012eac:	55                   	push   ebp
c0012ead:	56                   	push   esi
c0012eae:	50                   	push   eax
c0012eaf:	e8 e0 fb ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c0012eb4:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012eb9:	83 c4 0c             	add    esp,0xc
c0012ebc:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012ec0:	50                   	push   eax
c0012ec1:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012ec5:	50                   	push   eax
c0012ec6:	53                   	push   ebx
c0012ec7:	e8 d8 fe ff ff       	call   c0012da4 <File::stat(unsigned long long*, bool*)>
c0012ecc:	83 c4 10             	add    esp,0x10
c0012ecf:	83 f8 02             	cmp    eax,0x2
c0012ed2:	74 04                	je     c0012ed8 <Fs::setcwd(Process*, char*)+0xd3>
c0012ed4:	85 c0                	test   eax,eax
c0012ed6:	74 1c                	je     c0012ef4 <Fs::setcwd(Process*, char*)+0xef>
c0012ed8:	b8 01 00 00 00       	mov    eax,0x1
c0012edd:	85 db                	test   ebx,ebx
c0012edf:	74 54                	je     c0012f35 <Fs::setcwd(Process*, char*)+0x130>
c0012ee1:	83 ec 0c             	sub    esp,0xc
c0012ee4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ee6:	53                   	push   ebx
c0012ee7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012eea:	83 c4 10             	add    esp,0x10
c0012eed:	b8 01 00 00 00       	mov    eax,0x1
c0012ef2:	eb 41                	jmp    c0012f35 <Fs::setcwd(Process*, char*)+0x130>
c0012ef4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012ef9:	75 1c                	jne    c0012f17 <Fs::setcwd(Process*, char*)+0x112>
c0012efb:	b8 02 00 00 00       	mov    eax,0x2
c0012f00:	85 db                	test   ebx,ebx
c0012f02:	74 31                	je     c0012f35 <Fs::setcwd(Process*, char*)+0x130>
c0012f04:	83 ec 0c             	sub    esp,0xc
c0012f07:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f09:	53                   	push   ebx
c0012f0a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f0d:	83 c4 10             	add    esp,0x10
c0012f10:	b8 02 00 00 00       	mov    eax,0x2
c0012f15:	eb 1e                	jmp    c0012f35 <Fs::setcwd(Process*, char*)+0x130>
c0012f17:	85 db                	test   ebx,ebx
c0012f19:	74 0c                	je     c0012f27 <Fs::setcwd(Process*, char*)+0x122>
c0012f1b:	83 ec 0c             	sub    esp,0xc
c0012f1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f20:	53                   	push   ebx
c0012f21:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f24:	83 c4 10             	add    esp,0x10
c0012f27:	50                   	push   eax
c0012f28:	50                   	push   eax
c0012f29:	56                   	push   esi
c0012f2a:	57                   	push   edi
c0012f2b:	e8 dc d8 fe ff       	call   c000080c <strcpy>
c0012f30:	83 c4 10             	add    esp,0x10
c0012f33:	31 c0                	xor    eax,eax
c0012f35:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012f3b:	5b                   	pop    ebx
c0012f3c:	5e                   	pop    esi
c0012f3d:	5f                   	pop    edi
c0012f3e:	5d                   	pop    ebp
c0012f3f:	c3                   	ret    

c0012f40 <Directory::Directory(char const*, Process*)>:
c0012f40:	83 ec 0c             	sub    esp,0xc
c0012f43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f47:	83 ec 08             	sub    esp,0x8
c0012f4a:	6a 00                	push   0x0
c0012f4c:	50                   	push   eax
c0012f4d:	e8 08 de ff ff       	call   c0010d5a <UnixFile::UnixFile(int)>
c0012f52:	83 c4 10             	add    esp,0x10
c0012f55:	ba 7c a5 02 c0       	mov    edx,0xc002a57c
c0012f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f5e:	89 10                	mov    DWORD PTR [eax],edx
c0012f60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f64:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f6e:	83 c0 0d             	add    eax,0xd
c0012f71:	83 ec 04             	sub    esp,0x4
c0012f74:	52                   	push   edx
c0012f75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f79:	50                   	push   eax
c0012f7a:	e8 6b f9 ff ff       	call   c00128ea <Fs::standardiseFiles(char*, char const*, char const*)>
c0012f7f:	83 c4 10             	add    esp,0x10
c0012f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f86:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012f89:	8d 50 bf             	lea    edx,[eax-0x41]
c0012f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f90:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f9a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012f9e:	90                   	nop
c0012f9f:	83 c4 0c             	add    esp,0xc
c0012fa2:	c3                   	ret    
c0012fa3:	90                   	nop

c0012fa4 <Directory::open()>:
c0012fa4:	53                   	push   ebx
c0012fa5:	b8 0b 00 00 00       	mov    eax,0xb
c0012faa:	83 ec 08             	sub    esp,0x8
c0012fad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fb1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012fb8:	80 fa 19             	cmp    dl,0x19
c0012fbb:	77 3d                	ja     c0012ffa <Directory::open()+0x56>
c0012fbd:	8b 14 95 e0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2420]
c0012fc4:	85 d2                	test   edx,edx
c0012fc6:	74 32                	je     c0012ffa <Directory::open()+0x56>
c0012fc8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fce:	85 d2                	test   edx,edx
c0012fd0:	74 28                	je     c0012ffa <Directory::open()+0x56>
c0012fd2:	b8 06 00 00 00       	mov    eax,0x6
c0012fd7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012fdb:	75 1d                	jne    c0012ffa <Directory::open()+0x56>
c0012fdd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012fe3:	50                   	push   eax
c0012fe4:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fe6:	51                   	push   ecx
c0012fe7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012fea:	51                   	push   ecx
c0012feb:	52                   	push   edx
c0012fec:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012fef:	83 c4 10             	add    esp,0x10
c0012ff2:	85 c0                	test   eax,eax
c0012ff4:	75 04                	jne    c0012ffa <Directory::open()+0x56>
c0012ff6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012ffa:	83 c4 08             	add    esp,0x8
c0012ffd:	5b                   	pop    ebx
c0012ffe:	c3                   	ret    
c0012fff:	90                   	nop

c0013000 <Directory::close()>:
c0013000:	53                   	push   ebx
c0013001:	b8 0b 00 00 00       	mov    eax,0xb
c0013006:	83 ec 08             	sub    esp,0x8
c0013009:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001300d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013014:	80 fa 19             	cmp    dl,0x19
c0013017:	77 41                	ja     c001305a <Directory::close()+0x5a>
c0013019:	8b 1c 95 e0 db 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd2420]
c0013020:	85 db                	test   ebx,ebx
c0013022:	74 36                	je     c001305a <Directory::close()+0x5a>
c0013024:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001302b:	74 2d                	je     c001305a <Directory::close()+0x5a>
c001302d:	b8 05 00 00 00       	mov    eax,0x5
c0013032:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013036:	74 22                	je     c001305a <Directory::close()+0x5a>
c0013038:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001303c:	8b 04 95 e0 db 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2420]
c0013043:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013049:	53                   	push   ebx
c001304a:	53                   	push   ebx
c001304b:	8b 10                	mov    edx,DWORD PTR [eax]
c001304d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013053:	50                   	push   eax
c0013054:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013057:	83 c4 10             	add    esp,0x10
c001305a:	83 c4 08             	add    esp,0x8
c001305d:	5b                   	pop    ebx
c001305e:	c3                   	ret    
c001305f:	90                   	nop

c0013060 <Directory::unlink()>:
c0013060:	83 ec 0c             	sub    esp,0xc
c0013063:	b8 0b 00 00 00       	mov    eax,0xb
c0013068:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001306c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013073:	80 f9 19             	cmp    cl,0x19
c0013076:	77 2f                	ja     c00130a7 <Directory::unlink()+0x47>
c0013078:	8b 0c 8d e0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2420]
c001307f:	85 c9                	test   ecx,ecx
c0013081:	74 24                	je     c00130a7 <Directory::unlink()+0x47>
c0013083:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013089:	85 c9                	test   ecx,ecx
c001308b:	74 1a                	je     c00130a7 <Directory::unlink()+0x47>
c001308d:	b8 06 00 00 00       	mov    eax,0x6
c0013092:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013096:	75 0f                	jne    c00130a7 <Directory::unlink()+0x47>
c0013098:	83 c2 0d             	add    edx,0xd
c001309b:	50                   	push   eax
c001309c:	50                   	push   eax
c001309d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001309f:	52                   	push   edx
c00130a0:	51                   	push   ecx
c00130a1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00130a4:	83 c4 10             	add    esp,0x10
c00130a7:	83 c4 0c             	add    esp,0xc
c00130aa:	c3                   	ret    
c00130ab:	90                   	nop

c00130ac <Directory::rename(char const*)>:
c00130ac:	83 ec 0c             	sub    esp,0xc
c00130af:	b8 0b 00 00 00       	mov    eax,0xb
c00130b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130b8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130bf:	80 f9 19             	cmp    cl,0x19
c00130c2:	77 32                	ja     c00130f6 <Directory::rename(char const*)+0x4a>
c00130c4:	8b 0c 8d e0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2420]
c00130cb:	85 c9                	test   ecx,ecx
c00130cd:	74 27                	je     c00130f6 <Directory::rename(char const*)+0x4a>
c00130cf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130d5:	85 c9                	test   ecx,ecx
c00130d7:	74 1d                	je     c00130f6 <Directory::rename(char const*)+0x4a>
c00130d9:	b8 06 00 00 00       	mov    eax,0x6
c00130de:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130e2:	75 12                	jne    c00130f6 <Directory::rename(char const*)+0x4a>
c00130e4:	83 c2 0d             	add    edx,0xd
c00130e7:	50                   	push   eax
c00130e8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00130ee:	52                   	push   edx
c00130ef:	51                   	push   ecx
c00130f0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00130f3:	83 c4 10             	add    esp,0x10
c00130f6:	83 c4 0c             	add    esp,0xc
c00130f9:	c3                   	ret    

c00130fa <Directory::exists()>:
c00130fa:	83 ec 0c             	sub    esp,0xc
c00130fd:	31 c0                	xor    eax,eax
c00130ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013103:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001310a:	80 f9 19             	cmp    cl,0x19
c001310d:	77 24                	ja     c0013133 <Directory::exists()+0x39>
c001310f:	8b 0c 8d e0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2420]
c0013116:	85 c9                	test   ecx,ecx
c0013118:	74 19                	je     c0013133 <Directory::exists()+0x39>
c001311a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013120:	85 c9                	test   ecx,ecx
c0013122:	74 0f                	je     c0013133 <Directory::exists()+0x39>
c0013124:	83 c2 0d             	add    edx,0xd
c0013127:	50                   	push   eax
c0013128:	50                   	push   eax
c0013129:	8b 01                	mov    eax,DWORD PTR [ecx]
c001312b:	52                   	push   edx
c001312c:	51                   	push   ecx
c001312d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013130:	83 c4 10             	add    esp,0x10
c0013133:	83 c4 0c             	add    esp,0xc
c0013136:	c3                   	ret    
c0013137:	90                   	nop

c0013138 <Directory::read(dirent*)>:
c0013138:	83 ec 1c             	sub    esp,0x1c
c001313b:	b8 0b 00 00 00       	mov    eax,0xb
c0013140:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013144:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001314b:	80 fa 19             	cmp    dl,0x19
c001314e:	77 30                	ja     c0013180 <Directory::read(dirent*)+0x48>
c0013150:	8b 14 95 e0 db 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2420]
c0013157:	85 d2                	test   edx,edx
c0013159:	74 25                	je     c0013180 <Directory::read(dirent*)+0x48>
c001315b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013162:	74 1c                	je     c0013180 <Directory::read(dirent*)+0x48>
c0013164:	83 ec 0c             	sub    esp,0xc
c0013167:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013169:	8d 54 24 18          	lea    edx,[esp+0x18]
c001316d:	52                   	push   edx
c001316e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013172:	6a 00                	push   0x0
c0013174:	68 10 01 00 00       	push   0x110
c0013179:	51                   	push   ecx
c001317a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001317d:	83 c4 20             	add    esp,0x20
c0013180:	83 c4 1c             	add    esp,0x1c
c0013183:	c3                   	ret    

c0013184 <Directory::create()>:
c0013184:	83 ec 0c             	sub    esp,0xc
c0013187:	b8 0b 00 00 00       	mov    eax,0xb
c001318c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013190:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013197:	80 f9 19             	cmp    cl,0x19
c001319a:	77 2f                	ja     c00131cb <Directory::create()+0x47>
c001319c:	8b 0c 8d e0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2420]
c00131a3:	85 c9                	test   ecx,ecx
c00131a5:	74 24                	je     c00131cb <Directory::create()+0x47>
c00131a7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00131ad:	85 c9                	test   ecx,ecx
c00131af:	74 1a                	je     c00131cb <Directory::create()+0x47>
c00131b1:	b8 06 00 00 00       	mov    eax,0x6
c00131b6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131ba:	75 0f                	jne    c00131cb <Directory::create()+0x47>
c00131bc:	83 c2 0d             	add    edx,0xd
c00131bf:	50                   	push   eax
c00131c0:	50                   	push   eax
c00131c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00131c3:	52                   	push   edx
c00131c4:	51                   	push   ecx
c00131c5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00131c8:	83 c4 10             	add    esp,0x10
c00131cb:	83 c4 0c             	add    esp,0xc
c00131ce:	c3                   	ret    
c00131cf:	90                   	nop

c00131d0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00131d0:	b8 0a 00 00 00       	mov    eax,0xa
c00131d5:	c3                   	ret    

c00131d6 <Bus::Bus(char const*)>:
c00131d6:	83 ec 0c             	sub    esp,0xc
c00131d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131dd:	83 ec 08             	sub    esp,0x8
c00131e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131e4:	50                   	push   eax
c00131e5:	e8 88 09 00 00       	call   c0013b72 <Device::Device(char const*)>
c00131ea:	83 c4 10             	add    esp,0x10
c00131ed:	ba 98 a5 02 c0       	mov    edx,0xc002a598
c00131f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131f6:	89 10                	mov    DWORD PTR [eax],edx
c00131f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131fc:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013206:	90                   	nop
c0013207:	83 c4 0c             	add    esp,0xc
c001320a:	c3                   	ret    
c001320b:	90                   	nop

c001320c <Bus::~Bus()>:
c001320c:	83 ec 0c             	sub    esp,0xc
c001320f:	ba 98 a5 02 c0       	mov    edx,0xc002a598
c0013214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013218:	89 10                	mov    DWORD PTR [eax],edx
c001321a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001321e:	83 ec 0c             	sub    esp,0xc
c0013221:	50                   	push   eax
c0013222:	e8 15 06 00 00       	call   c001383c <Device::~Device()>
c0013227:	83 c4 10             	add    esp,0x10
c001322a:	90                   	nop
c001322b:	83 c4 0c             	add    esp,0xc
c001322e:	c3                   	ret    
c001322f:	90                   	nop

c0013230 <Bus::~Bus()>:
c0013230:	83 ec 0c             	sub    esp,0xc
c0013233:	83 ec 0c             	sub    esp,0xc
c0013236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001323a:	e8 cd ff ff ff       	call   c001320c <Bus::~Bus()>
c001323f:	83 c4 10             	add    esp,0x10
c0013242:	83 ec 08             	sub    esp,0x8
c0013245:	68 58 01 00 00       	push   0x158
c001324a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001324e:	e8 0a f2 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0013253:	83 c4 10             	add    esp,0x10
c0013256:	83 c4 0c             	add    esp,0xc
c0013259:	c3                   	ret    

c001325a <Buzzer::Buzzer(char const*)>:
c001325a:	83 ec 0c             	sub    esp,0xc
c001325d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013261:	83 ec 08             	sub    esp,0x8
c0013264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013268:	50                   	push   eax
c0013269:	e8 04 09 00 00       	call   c0013b72 <Device::Device(char const*)>
c001326e:	83 c4 10             	add    esp,0x10
c0013271:	ba c4 a5 02 c0       	mov    edx,0xc002a5c4
c0013276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001327a:	89 10                	mov    DWORD PTR [eax],edx
c001327c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013280:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001328a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001328e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013298:	90                   	nop
c0013299:	83 c4 0c             	add    esp,0xc
c001329c:	c3                   	ret    
c001329d:	90                   	nop

c001329e <Buzzer::~Buzzer()>:
c001329e:	83 ec 0c             	sub    esp,0xc
c00132a1:	ba c4 a5 02 c0       	mov    edx,0xc002a5c4
c00132a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132aa:	89 10                	mov    DWORD PTR [eax],edx
c00132ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132b0:	83 ec 0c             	sub    esp,0xc
c00132b3:	50                   	push   eax
c00132b4:	e8 83 05 00 00       	call   c001383c <Device::~Device()>
c00132b9:	83 c4 10             	add    esp,0x10
c00132bc:	90                   	nop
c00132bd:	83 c4 0c             	add    esp,0xc
c00132c0:	c3                   	ret    
c00132c1:	90                   	nop

c00132c2 <Buzzer::~Buzzer()>:
c00132c2:	83 ec 0c             	sub    esp,0xc
c00132c5:	83 ec 0c             	sub    esp,0xc
c00132c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132cc:	e8 cd ff ff ff       	call   c001329e <Buzzer::~Buzzer()>
c00132d1:	83 c4 10             	add    esp,0x10
c00132d4:	83 ec 08             	sub    esp,0x8
c00132d7:	68 5c 01 00 00       	push   0x15c
c00132dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132e0:	e8 78 f1 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c00132e5:	83 c4 10             	add    esp,0x10
c00132e8:	83 c4 0c             	add    esp,0xc
c00132eb:	c3                   	ret    

c00132ec <Buzzer::stop()>:
c00132ec:	83 ec 14             	sub    esp,0x14
c00132ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00132f5:	6a 00                	push   0x0
c00132f7:	50                   	push   eax
c00132f8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132fb:	83 c4 1c             	add    esp,0x1c
c00132fe:	c3                   	ret    

c00132ff <beepThread(void*)>:
c00132ff:	53                   	push   ebx
c0013300:	83 ec 08             	sub    esp,0x8
c0013303:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0013308:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001330c:	48                   	dec    eax
c001330d:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c0013312:	75 01                	jne    c0013315 <beepThread(void*)+0x16>
c0013314:	fb                   	sti    
c0013315:	50                   	push   eax
c0013316:	50                   	push   eax
c0013317:	b8 40 42 0f 00       	mov    eax,0xf4240
c001331c:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013322:	52                   	push   edx
c0013323:	50                   	push   eax
c0013324:	e8 d0 a7 00 00       	call   c001daf9 <nanoSleep(unsigned long long)>
c0013329:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001332c:	e8 bb ff ff ff       	call   c00132ec <Buzzer::stop()>
c0013331:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013339:	83 c4 18             	add    esp,0x18
c001333c:	5b                   	pop    ebx
c001333d:	e9 b3 a6 00 00       	jmp    c001d9f5 <blockTask(TaskState)>

c0013342 <Buzzer::beep(int, int, bool)>:
c0013342:	57                   	push   edi
c0013343:	56                   	push   esi
c0013344:	53                   	push   ebx
c0013345:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013349:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001334d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013351:	52                   	push   edx
c0013352:	52                   	push   edx
c0013353:	8b 06                	mov    eax,DWORD PTR [esi]
c0013355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013359:	56                   	push   esi
c001335a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001335d:	83 c4 10             	add    esp,0x10
c0013360:	89 f8                	mov    eax,edi
c0013362:	84 c0                	test   al,al
c0013364:	74 1f                	je     c0013385 <Buzzer::beep(int, int, bool)+0x43>
c0013366:	50                   	push   eax
c0013367:	50                   	push   eax
c0013368:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001336e:	99                   	cdq    
c001336f:	52                   	push   edx
c0013370:	50                   	push   eax
c0013371:	e8 83 a7 00 00       	call   c001daf9 <nanoSleep(unsigned long long)>
c0013376:	83 c4 10             	add    esp,0x10
c0013379:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001337d:	5b                   	pop    ebx
c001337e:	5e                   	pop    esi
c001337f:	5f                   	pop    edi
c0013380:	e9 67 ff ff ff       	jmp    c00132ec <Buzzer::stop()>
c0013385:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001338b:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0013390:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013398:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001339c:	c7 44 24 14 ff 32 01 c0 	mov    DWORD PTR [esp+0x14],0xc00132ff
c00133a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00133a8:	5b                   	pop    ebx
c00133a9:	5e                   	pop    esi
c00133aa:	5f                   	pop    edi
c00133ab:	e9 4a a2 00 00       	jmp    c001d5fa <Process::createThread(void (*)(void*), void*, int)>

c00133b0 <User::loadClockSettings(int)>:
c00133b0:	53                   	push   ebx
c00133b1:	83 ec 14             	sub    esp,0x14
c00133b4:	68 14 01 00 00       	push   0x114
c00133b9:	e8 db c1 ff ff       	call   c000f599 <malloc>
c00133be:	83 c4 0c             	add    esp,0xc
c00133c1:	89 c3                	mov    ebx,eax
c00133c3:	ff 35 30 0b 03 c0    	push   DWORD PTR ds:0xc0030b30
c00133c9:	68 ec a5 02 c0       	push   0xc002a5ec
c00133ce:	50                   	push   eax
c00133cf:	e8 c0 f6 ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c00133d4:	58                   	pop    eax
c00133d5:	5a                   	pop    edx
c00133d6:	6a 01                	push   0x1
c00133d8:	53                   	push   ebx
c00133d9:	e8 1a f7 ff ff       	call   c0012af8 <File::open(FileOpenMode)>
c00133de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00133e1:	e8 70 f7 ff ff       	call   c0012b56 <File::close()>
c00133e6:	83 c4 10             	add    esp,0x10
c00133e9:	85 db                	test   ebx,ebx
c00133eb:	74 0f                	je     c00133fc <User::loadClockSettings(int)+0x4c>
c00133ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133ef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00133f3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00133f6:	83 c4 08             	add    esp,0x8
c00133f9:	5b                   	pop    ebx
c00133fa:	ff e0                	jmp    eax
c00133fc:	83 c4 08             	add    esp,0x8
c00133ff:	5b                   	pop    ebx
c0013400:	c3                   	ret    
c0013401:	90                   	nop

c0013402 <Clock::Clock(char const*)>:
c0013402:	83 ec 0c             	sub    esp,0xc
c0013405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013409:	83 ec 08             	sub    esp,0x8
c001340c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013410:	50                   	push   eax
c0013411:	e8 5c 07 00 00       	call   c0013b72 <Device::Device(char const*)>
c0013416:	83 c4 10             	add    esp,0x10
c0013419:	ba 14 a6 02 c0       	mov    edx,0xc002a614
c001341e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013422:	89 10                	mov    DWORD PTR [eax],edx
c0013424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013428:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013432:	90                   	nop
c0013433:	83 c4 0c             	add    esp,0xc
c0013436:	c3                   	ret    
c0013437:	90                   	nop

c0013438 <Clock::~Clock()>:
c0013438:	83 ec 0c             	sub    esp,0xc
c001343b:	ba 14 a6 02 c0       	mov    edx,0xc002a614
c0013440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013444:	89 10                	mov    DWORD PTR [eax],edx
c0013446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001344a:	83 ec 0c             	sub    esp,0xc
c001344d:	50                   	push   eax
c001344e:	e8 e9 03 00 00       	call   c001383c <Device::~Device()>
c0013453:	83 c4 10             	add    esp,0x10
c0013456:	90                   	nop
c0013457:	83 c4 0c             	add    esp,0xc
c001345a:	c3                   	ret    
c001345b:	90                   	nop

c001345c <Clock::~Clock()>:
c001345c:	83 ec 0c             	sub    esp,0xc
c001345f:	83 ec 0c             	sub    esp,0xc
c0013462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013466:	e8 cd ff ff ff       	call   c0013438 <Clock::~Clock()>
c001346b:	83 c4 10             	add    esp,0x10
c001346e:	83 ec 08             	sub    esp,0x8
c0013471:	68 58 01 00 00       	push   0x158
c0013476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001347a:	e8 de ef ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001347f:	83 c4 10             	add    esp,0x10
c0013482:	83 c4 0c             	add    esp,0xc
c0013485:	c3                   	ret    

c0013486 <Clock::timeInSecondsLocal()>:
c0013486:	53                   	push   ebx
c0013487:	83 ec 14             	sub    esp,0x14
c001348a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001348e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013490:	50                   	push   eax
c0013491:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013494:	0f b6 0d 5c d7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d75c
c001349b:	03 0d 60 d7 02 c0    	add    ecx,DWORD PTR ds:0xc002d760
c00134a1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00134a7:	89 cb                	mov    ebx,ecx
c00134a9:	c1 fb 1f             	sar    ebx,0x1f
c00134ac:	01 c8                	add    eax,ecx
c00134ae:	11 da                	adc    edx,ebx
c00134b0:	83 c4 10             	add    esp,0x10
c00134b3:	31 c9                	xor    ecx,ecx
c00134b5:	80 3d 5d d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d75d,0x0
c00134bc:	74 05                	je     c00134c3 <Clock::timeInSecondsLocal()+0x3d>
c00134be:	b9 08 07 00 00       	mov    ecx,0x708
c00134c3:	31 db                	xor    ebx,ebx
c00134c5:	01 c8                	add    eax,ecx
c00134c7:	11 da                	adc    edx,ebx
c00134c9:	83 c4 08             	add    esp,0x8
c00134cc:	5b                   	pop    ebx
c00134cd:	c3                   	ret    

c00134ce <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00134ce:	57                   	push   edi
c00134cf:	56                   	push   esi
c00134d0:	53                   	push   ebx
c00134d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00134d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00134d9:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00134df:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00134e2:	0f b6 05 5c d7 02 c0 	movzx  eax,BYTE PTR ds:0xc002d75c
c00134e9:	03 05 60 d7 02 c0    	add    eax,DWORD PTR ds:0xc002d760
c00134ef:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00134f5:	99                   	cdq    
c00134f6:	29 c6                	sub    esi,eax
c00134f8:	19 d7                	sbb    edi,edx
c00134fa:	89 f0                	mov    eax,esi
c00134fc:	89 fa                	mov    edx,edi
c00134fe:	31 f6                	xor    esi,esi
c0013500:	80 3d 5d d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d75d,0x0
c0013507:	74 05                	je     c001350e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013509:	be 08 07 00 00       	mov    esi,0x708
c001350e:	31 ff                	xor    edi,edi
c0013510:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013514:	29 f0                	sub    eax,esi
c0013516:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001351a:	19 fa                	sbb    edx,edi
c001351c:	89 d8                	mov    eax,ebx
c001351e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013522:	5b                   	pop    ebx
c0013523:	5e                   	pop    esi
c0013524:	5f                   	pop    edi
c0013525:	ff e0                	jmp    eax

c0013527 <datetimeToSeconds(datetime_t)>:
c0013527:	55                   	push   ebp
c0013528:	57                   	push   edi
c0013529:	56                   	push   esi
c001352a:	53                   	push   ebx
c001352b:	83 ec 14             	sub    esp,0x14
c001352e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013532:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013536:	89 d3                	mov    ebx,edx
c0013538:	0f b6 c6             	movzx  eax,dh
c001353b:	c1 eb 10             	shr    ebx,0x10
c001353e:	48                   	dec    eax
c001353f:	66 81 eb 6c 07       	sub    bx,0x76c
c0013544:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013548:	0f b6 f5             	movzx  esi,ch
c001354b:	89 cf                	mov    edi,ecx
c001354d:	6b f6 3c             	imul   esi,esi,0x3c
c0013550:	c1 ef 10             	shr    edi,0x10
c0013553:	0f b6 c9             	movzx  ecx,cl
c0013556:	89 f8                	mov    eax,edi
c0013558:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001355e:	0f b6 f8             	movzx  edi,al
c0013561:	0f b6 d2             	movzx  edx,dl
c0013564:	01 fe                	add    esi,edi
c0013566:	01 f1                	add    ecx,esi
c0013568:	0f b7 f3             	movzx  esi,bx
c001356b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001356f:	c1 f9 1f             	sar    ecx,0x1f
c0013572:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013577:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001357b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013580:	8b 0c 8d 60 a6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd59a0]
c0013587:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001358b:	76 29                	jbe    c00135b6 <datetimeToSeconds(datetime_t)+0x8f>
c001358d:	f6 c3 03             	test   bl,0x3
c0013590:	75 24                	jne    c00135b6 <datetimeToSeconds(datetime_t)+0x8f>
c0013592:	31 d2                	xor    edx,edx
c0013594:	bf 64 00 00 00       	mov    edi,0x64
c0013599:	89 d8                	mov    eax,ebx
c001359b:	66 f7 f7             	div    di
c001359e:	66 85 d2             	test   dx,dx
c00135a1:	75 12                	jne    c00135b5 <datetimeToSeconds(datetime_t)+0x8e>
c00135a3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00135a9:	bf 90 01 00 00       	mov    edi,0x190
c00135ae:	99                   	cdq    
c00135af:	f7 ff                	idiv   edi
c00135b1:	85 d2                	test   edx,edx
c00135b3:	75 01                	jne    c00135b6 <datetimeToSeconds(datetime_t)+0x8f>
c00135b5:	41                   	inc    ecx
c00135b6:	66 83 fb 46          	cmp    bx,0x46
c00135ba:	76 45                	jbe    c0013601 <datetimeToSeconds(datetime_t)+0xda>
c00135bc:	bb 46 00 00 00       	mov    ebx,0x46
c00135c1:	bf 64 00 00 00       	mov    edi,0x64
c00135c6:	bd 90 01 00 00       	mov    ebp,0x190
c00135cb:	b8 6d 01 00 00       	mov    eax,0x16d
c00135d0:	f6 c3 03             	test   bl,0x3
c00135d3:	75 23                	jne    c00135f8 <datetimeToSeconds(datetime_t)+0xd1>
c00135d5:	89 d8                	mov    eax,ebx
c00135d7:	99                   	cdq    
c00135d8:	f7 ff                	idiv   edi
c00135da:	b8 6e 01 00 00       	mov    eax,0x16e
c00135df:	85 d2                	test   edx,edx
c00135e1:	75 15                	jne    c00135f8 <datetimeToSeconds(datetime_t)+0xd1>
c00135e3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00135e9:	99                   	cdq    
c00135ea:	f7 fd                	idiv   ebp
c00135ec:	83 fa 01             	cmp    edx,0x1
c00135ef:	19 c0                	sbb    eax,eax
c00135f1:	f7 d0                	not    eax
c00135f3:	05 6e 01 00 00       	add    eax,0x16e
c00135f8:	01 c1                	add    ecx,eax
c00135fa:	43                   	inc    ebx
c00135fb:	39 f3                	cmp    ebx,esi
c00135fd:	7c cc                	jl     c00135cb <datetimeToSeconds(datetime_t)+0xa4>
c00135ff:	eb 35                	jmp    c0013636 <datetimeToSeconds(datetime_t)+0x10f>
c0013601:	74 33                	je     c0013636 <datetimeToSeconds(datetime_t)+0x10f>
c0013603:	b8 45 00 00 00       	mov    eax,0x45
c0013608:	89 c2                	mov    edx,eax
c001360a:	83 e2 03             	and    edx,0x3
c001360d:	39 f0                	cmp    eax,esi
c001360f:	7e 0f                	jle    c0013620 <datetimeToSeconds(datetime_t)+0xf9>
c0013611:	83 fa 01             	cmp    edx,0x1
c0013614:	19 d2                	sbb    edx,edx
c0013616:	48                   	dec    eax
c0013617:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001361e:	eb e8                	jmp    c0013608 <datetimeToSeconds(datetime_t)+0xe1>
c0013620:	b8 6d 01 00 00       	mov    eax,0x16d
c0013625:	85 d2                	test   edx,edx
c0013627:	75 0b                	jne    c0013634 <datetimeToSeconds(datetime_t)+0x10d>
c0013629:	66 83 fb 01          	cmp    bx,0x1
c001362d:	19 c0                	sbb    eax,eax
c001362f:	05 6e 01 00 00       	add    eax,0x16e
c0013634:	29 c1                	sub    ecx,eax
c0013636:	b8 80 51 01 00       	mov    eax,0x15180
c001363b:	f7 e9                	imul   ecx
c001363d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013641:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013645:	83 c4 14             	add    esp,0x14
c0013648:	5b                   	pop    ebx
c0013649:	5e                   	pop    esi
c001364a:	5f                   	pop    edi
c001364b:	5d                   	pop    ebp
c001364c:	c3                   	ret    
c001364d:	90                   	nop

c001364e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001364e:	57                   	push   edi
c001364f:	56                   	push   esi
c0013650:	53                   	push   ebx
c0013651:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013655:	8b 06                	mov    eax,DWORD PTR [esi]
c0013657:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001365a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001365e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013662:	e8 c0 fe ff ff       	call   c0013527 <datetimeToSeconds(datetime_t)>
c0013667:	59                   	pop    ecx
c0013668:	0f b6 0d 5c d7 02 c0 	movzx  ecx,BYTE PTR ds:0xc002d75c
c001366f:	5b                   	pop    ebx
c0013670:	03 0d 60 d7 02 c0    	add    ecx,DWORD PTR ds:0xc002d760
c0013676:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001367c:	89 cb                	mov    ebx,ecx
c001367e:	c1 fb 1f             	sar    ebx,0x1f
c0013681:	29 c8                	sub    eax,ecx
c0013683:	19 da                	sbb    edx,ebx
c0013685:	31 c9                	xor    ecx,ecx
c0013687:	80 3d 5d d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d75d,0x0
c001368e:	74 05                	je     c0013695 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013690:	b9 08 07 00 00       	mov    ecx,0x708
c0013695:	31 db                	xor    ebx,ebx
c0013697:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001369b:	29 c8                	sub    eax,ecx
c001369d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00136a1:	19 da                	sbb    edx,ebx
c00136a3:	89 f8                	mov    eax,edi
c00136a5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00136a9:	5b                   	pop    ebx
c00136aa:	5e                   	pop    esi
c00136ab:	5f                   	pop    edi
c00136ac:	ff e0                	jmp    eax

c00136ae <secondsToDatetime(unsigned long long)>:
c00136ae:	55                   	push   ebp
c00136af:	57                   	push   edi
c00136b0:	56                   	push   esi
c00136b1:	53                   	push   ebx
c00136b2:	83 ec 1c             	sub    esp,0x1c
c00136b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00136b9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00136bd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00136c1:	6a 00                	push   0x0
c00136c3:	68 80 51 01 00       	push   0x15180
c00136c8:	55                   	push   ebp
c00136c9:	57                   	push   edi
c00136ca:	e8 95 2e 01 00       	call   c0026564 <__udivdi3>
c00136cf:	83 c4 10             	add    esp,0x10
c00136d2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00136d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00136dc:	6a 00                	push   0x0
c00136de:	68 80 51 01 00       	push   0x15180
c00136e3:	55                   	push   ebp
c00136e4:	57                   	push   edi
c00136e5:	bf 10 0e 00 00       	mov    edi,0xe10
c00136ea:	e8 75 2f 01 00       	call   c0026664 <__umoddi3>
c00136ef:	83 c4 10             	add    esp,0x10
c00136f2:	99                   	cdq    
c00136f3:	f7 ff                	idiv   edi
c00136f5:	bf 3c 00 00 00       	mov    edi,0x3c
c00136fa:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00136fd:	89 d0                	mov    eax,edx
c00136ff:	99                   	cdq    
c0013700:	f7 ff                	idiv   edi
c0013702:	85 db                	test   ebx,ebx
c0013704:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013707:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001370a:	79 11                	jns    c001371d <secondsToDatetime(unsigned long long)+0x6f>
c001370c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013710:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013716:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001371b:	eb 07                	jmp    c0013724 <secondsToDatetime(unsigned long long)+0x76>
c001371d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013722:	89 d8                	mov    eax,ebx
c0013724:	bf b4 05 00 00       	mov    edi,0x5b4
c0013729:	99                   	cdq    
c001372a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001372f:	f7 f9                	idiv   ecx
c0013731:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013736:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001373a:	31 d2                	xor    edx,edx
c001373c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013744:	01 c3                	add    ebx,eax
c0013746:	89 d8                	mov    eax,ebx
c0013748:	f7 f1                	div    ecx
c001374a:	31 d2                	xor    edx,edx
c001374c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001374f:	89 d8                	mov    eax,ebx
c0013751:	f7 f7                	div    edi
c0013753:	31 d2                	xor    edx,edx
c0013755:	29 c1                	sub    ecx,eax
c0013757:	89 d8                	mov    eax,ebx
c0013759:	f7 f5                	div    ebp
c001375b:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013760:	29 c1                	sub    ecx,eax
c0013762:	31 d2                	xor    edx,edx
c0013764:	89 c8                	mov    eax,ecx
c0013766:	f7 f5                	div    ebp
c0013768:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001376d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013771:	31 d2                	xor    edx,edx
c0013773:	89 c8                	mov    eax,ecx
c0013775:	f7 f5                	div    ebp
c0013777:	31 d2                	xor    edx,edx
c0013779:	01 c3                	add    ebx,eax
c001377b:	89 c8                	mov    eax,ecx
c001377d:	f7 f7                	div    edi
c001377f:	bf 99 00 00 00       	mov    edi,0x99
c0013784:	29 c3                	sub    ebx,eax
c0013786:	31 d2                	xor    edx,edx
c0013788:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013790:	29 c3                	sub    ebx,eax
c0013792:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013795:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013798:	bb 05 00 00 00       	mov    ebx,0x5
c001379d:	83 c1 02             	add    ecx,0x2
c00137a0:	89 c8                	mov    eax,ecx
c00137a2:	f7 f7                	div    edi
c00137a4:	31 d2                	xor    edx,edx
c00137a6:	89 c7                	mov    edi,eax
c00137a8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00137ae:	83 c0 02             	add    eax,0x2
c00137b1:	f7 f3                	div    ebx
c00137b3:	89 eb                	mov    ebx,ebp
c00137b5:	29 c3                	sub    ebx,eax
c00137b7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00137bd:	88 1e                	mov    BYTE PTR [esi],bl
c00137bf:	19 c0                	sbb    eax,eax
c00137c1:	31 d2                	xor    edx,edx
c00137c3:	83 e0 0c             	and    eax,0xc
c00137c6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00137ca:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00137d2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00137d6:	83 f9 01             	cmp    ecx,0x1
c00137d9:	0f 96 c2             	setbe  dl
c00137dc:	41                   	inc    ecx
c00137dd:	01 d0                	add    eax,edx
c00137df:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00137e2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00137e6:	83 c4 1c             	add    esp,0x1c
c00137e9:	89 f0                	mov    eax,esi
c00137eb:	5b                   	pop    ebx
c00137ec:	5e                   	pop    esi
c00137ed:	5f                   	pop    edi
c00137ee:	5d                   	pop    ebp
c00137ef:	c2 04 00             	ret    0x4

c00137f2 <Clock::timeInDatetimeLocal()>:
c00137f2:	53                   	push   ebx
c00137f3:	83 ec 14             	sub    esp,0x14
c00137f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00137fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00137fe:	e8 83 fc ff ff       	call   c0013486 <Clock::timeInSecondsLocal()>
c0013803:	83 c4 0c             	add    esp,0xc
c0013806:	52                   	push   edx
c0013807:	50                   	push   eax
c0013808:	53                   	push   ebx
c0013809:	e8 a0 fe ff ff       	call   c00136ae <secondsToDatetime(unsigned long long)>
c001380e:	89 d8                	mov    eax,ebx
c0013810:	83 c4 14             	add    esp,0x14
c0013813:	5b                   	pop    ebx
c0013814:	c2 04 00             	ret    0x4
c0013817:	90                   	nop

c0013818 <Device::hibernate()>:
c0013818:	c3                   	ret    
c0013819:	90                   	nop

c001381a <Device::wake()>:
c001381a:	c3                   	ret    
c001381b:	90                   	nop

c001381c <Device::detect()>:
c001381c:	c3                   	ret    
c001381d:	90                   	nop

c001381e <Device::disableLegacy()>:
c001381e:	c3                   	ret    
c001381f:	90                   	nop

c0013820 <Device::powerSaving(PowerSavingLevel)>:
c0013820:	c3                   	ret    
c0013821:	90                   	nop

c0013822 <DriverlessDevice::close(int, int, void*)>:
c0013822:	31 c0                	xor    eax,eax
c0013824:	c3                   	ret    
c0013825:	90                   	nop

c0013826 <DriverlessDevice::detect()>:
c0013826:	c3                   	ret    
c0013827:	90                   	nop

c0013828 <DriverlessDevice::open(int, int, void*)>:
c0013828:	83 ec 18             	sub    esp,0x18
c001382b:	68 90 a6 02 c0       	push   0xc002a690
c0013830:	e8 60 64 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0013835:	83 c8 ff             	or     eax,0xffffffff
c0013838:	83 c4 1c             	add    esp,0x1c
c001383b:	c3                   	ret    

c001383c <Device::~Device()>:
c001383c:	ba f0 a6 02 c0       	mov    edx,0xc002a6f0
c0013841:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013845:	89 10                	mov    DWORD PTR [eax],edx
c0013847:	90                   	nop
c0013848:	c3                   	ret    
c0013849:	90                   	nop

c001384a <Device::~Device()>:
c001384a:	83 ec 0c             	sub    esp,0xc
c001384d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013851:	e8 e6 ff ff ff       	call   c001383c <Device::~Device()>
c0013856:	83 c4 04             	add    esp,0x4
c0013859:	83 ec 08             	sub    esp,0x8
c001385c:	68 58 01 00 00       	push   0x158
c0013861:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013865:	e8 f3 eb ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001386a:	83 c4 10             	add    esp,0x10
c001386d:	83 c4 0c             	add    esp,0xc
c0013870:	c3                   	ret    
c0013871:	90                   	nop

c0013872 <Device::findAndLoadDriver()>:
c0013872:	c7 44 24 04 ae a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a6ae
c001387a:	e9 b6 ec ff ff       	jmp    c0012535 <Dbg::kprintf(char const*, ...)>
c001387f:	90                   	nop

c0013880 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013880:	57                   	push   edi
c0013881:	b9 09 00 00 00       	mov    ecx,0x9
c0013886:	56                   	push   esi
c0013887:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001388b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001388f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013899:	81 c7 18 01 00 00    	add    edi,0x118
c001389f:	fc                   	cld    
c00138a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00138a2:	5e                   	pop    esi
c00138a3:	5f                   	pop    edi
c00138a4:	c3                   	ret    
c00138a5:	90                   	nop

c00138a6 <Device::preOpenACPI(void*, char*, char*)>:
c00138a6:	57                   	push   edi
c00138a7:	b9 1e 00 00 00       	mov    ecx,0x1e
c00138ac:	56                   	push   esi
c00138ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138b5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00138bf:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00138c5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00138cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00138cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138d1:	b9 0e 00 00 00       	mov    ecx,0xe
c00138d6:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00138dc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00138e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138e2:	5e                   	pop    esi
c00138e3:	5f                   	pop    edi
c00138e4:	c3                   	ret    
c00138e5:	90                   	nop

c00138e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00138e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138ea:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00138ef:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00138f6:	75 0b                	jne    c0013903 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00138f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00138fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00138fe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013901:	eb 1e                	jmp    c0013921 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013903:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0013908:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001390e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013914:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013916:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001391a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001391e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013921:	ff e0                	jmp    eax
c0013923:	90                   	nop

c0013924 <Device::getParent()>:
c0013924:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013928:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001392e:	c3                   	ret    
c001392f:	90                   	nop

c0013930 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013934:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013939:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013940:	75 0b                	jne    c001394d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013942:	8b 00                	mov    eax,DWORD PTR [eax]
c0013944:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013948:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001394b:	eb 1e                	jmp    c001396b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001394d:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0013952:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013958:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001395e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013960:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013964:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013968:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001396b:	ff e0                	jmp    eax
c001396d:	90                   	nop

c001396e <Device::addChild(Device*)>:
c001396e:	53                   	push   ebx
c001396f:	83 ec 08             	sub    esp,0x8
c0013972:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013976:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001397a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013980:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013986:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013988:	85 d2                	test   edx,edx
c001398a:	74 04                	je     c0013990 <Device::addChild(Device*)+0x22>
c001398c:	89 d3                	mov    ebx,edx
c001398e:	eb f6                	jmp    c0013986 <Device::addChild(Device*)+0x18>
c0013990:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013993:	83 ec 0c             	sub    esp,0xc
c0013996:	6a 08                	push   0x8
c0013998:	e8 fc bb ff ff       	call   c000f599 <malloc>
c001399d:	89 03                	mov    DWORD PTR [ebx],eax
c001399f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00139a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00139ac:	83 c4 18             	add    esp,0x18
c00139af:	5b                   	pop    ebx
c00139b0:	c3                   	ret    
c00139b1:	90                   	nop

c00139b2 <Device::removeAllChildren()>:
c00139b2:	56                   	push   esi
c00139b3:	53                   	push   ebx
c00139b4:	52                   	push   edx
c00139b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139b9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00139bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00139c2:	74 17                	je     c00139db <Device::removeAllChildren()+0x29>
c00139c4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00139c7:	85 c0                	test   eax,eax
c00139c9:	74 0c                	je     c00139d7 <Device::removeAllChildren()+0x25>
c00139cb:	83 ec 0c             	sub    esp,0xc
c00139ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00139d0:	50                   	push   eax
c00139d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00139d4:	83 c4 10             	add    esp,0x10
c00139d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00139d9:	eb e4                	jmp    c00139bf <Device::removeAllChildren()+0xd>
c00139db:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00139e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00139e7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00139ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00139f4:	58                   	pop    eax
c00139f5:	5b                   	pop    ebx
c00139f6:	5e                   	pop    esi
c00139f7:	c3                   	ret    

c00139f8 <Device::hibernateAll()>:
c00139f8:	53                   	push   ebx
c00139f9:	83 ec 14             	sub    esp,0x14
c00139fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a02:	53                   	push   ebx
c0013a03:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013a06:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a0c:	83 c4 10             	add    esp,0x10
c0013a0f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a12:	74 0f                	je     c0013a23 <Device::hibernateAll()+0x2b>
c0013a14:	83 ec 0c             	sub    esp,0xc
c0013a17:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a1a:	e8 d9 ff ff ff       	call   c00139f8 <Device::hibernateAll()>
c0013a1f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a21:	eb e9                	jmp    c0013a0c <Device::hibernateAll()+0x14>
c0013a23:	83 c4 08             	add    esp,0x8
c0013a26:	5b                   	pop    ebx
c0013a27:	c3                   	ret    

c0013a28 <Device::wakeAll()>:
c0013a28:	53                   	push   ebx
c0013a29:	83 ec 14             	sub    esp,0x14
c0013a2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a32:	53                   	push   ebx
c0013a33:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013a36:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a3c:	83 c4 10             	add    esp,0x10
c0013a3f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a42:	74 0f                	je     c0013a53 <Device::wakeAll()+0x2b>
c0013a44:	83 ec 0c             	sub    esp,0xc
c0013a47:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a4a:	e8 d9 ff ff ff       	call   c0013a28 <Device::wakeAll()>
c0013a4f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a51:	eb e9                	jmp    c0013a3c <Device::wakeAll()+0x14>
c0013a53:	83 c4 08             	add    esp,0x8
c0013a56:	5b                   	pop    ebx
c0013a57:	c3                   	ret    

c0013a58 <Device::detectAll()>:
c0013a58:	53                   	push   ebx
c0013a59:	83 ec 14             	sub    esp,0x14
c0013a5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a60:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a62:	53                   	push   ebx
c0013a63:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013a66:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a6c:	83 c4 10             	add    esp,0x10
c0013a6f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013a72:	74 0f                	je     c0013a83 <Device::detectAll()+0x2b>
c0013a74:	83 ec 0c             	sub    esp,0xc
c0013a77:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013a7a:	e8 d9 ff ff ff       	call   c0013a58 <Device::detectAll()>
c0013a7f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013a81:	eb e9                	jmp    c0013a6c <Device::detectAll()+0x14>
c0013a83:	83 c4 08             	add    esp,0x8
c0013a86:	5b                   	pop    ebx
c0013a87:	c3                   	ret    

c0013a88 <Device::disableLegacyAll()>:
c0013a88:	53                   	push   ebx
c0013a89:	83 ec 14             	sub    esp,0x14
c0013a8c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a92:	53                   	push   ebx
c0013a93:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013a96:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013a9c:	83 c4 10             	add    esp,0x10
c0013a9f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013aa2:	74 0f                	je     c0013ab3 <Device::disableLegacyAll()+0x2b>
c0013aa4:	83 ec 0c             	sub    esp,0xc
c0013aa7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013aaa:	e8 d9 ff ff ff       	call   c0013a88 <Device::disableLegacyAll()>
c0013aaf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ab1:	eb e9                	jmp    c0013a9c <Device::disableLegacyAll()+0x14>
c0013ab3:	83 c4 08             	add    esp,0x8
c0013ab6:	5b                   	pop    ebx
c0013ab7:	c3                   	ret    

c0013ab8 <Device::loadDriversForAll()>:
c0013ab8:	53                   	push   ebx
c0013ab9:	83 ec 08             	sub    esp,0x8
c0013abc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ac0:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013ac7:	75 0c                	jne    c0013ad5 <Device::loadDriversForAll()+0x1d>
c0013ac9:	83 ec 0c             	sub    esp,0xc
c0013acc:	53                   	push   ebx
c0013acd:	e8 a0 fd ff ff       	call   c0013872 <Device::findAndLoadDriver()>
c0013ad2:	83 c4 10             	add    esp,0x10
c0013ad5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013adb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ade:	74 12                	je     c0013af2 <Device::loadDriversForAll()+0x3a>
c0013ae0:	83 ec 0c             	sub    esp,0xc
c0013ae3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ae6:	e8 cd ff ff ff       	call   c0013ab8 <Device::loadDriversForAll()>
c0013aeb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013aed:	83 c4 10             	add    esp,0x10
c0013af0:	eb e9                	jmp    c0013adb <Device::loadDriversForAll()+0x23>
c0013af2:	83 c4 08             	add    esp,0x8
c0013af5:	5b                   	pop    ebx
c0013af6:	c3                   	ret    
c0013af7:	90                   	nop

c0013af8 <Device::closeAll()>:
c0013af8:	53                   	push   ebx
c0013af9:	83 ec 08             	sub    esp,0x8
c0013afc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b00:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b02:	6a 00                	push   0x0
c0013b04:	6a 00                	push   0x0
c0013b06:	6a 00                	push   0x0
c0013b08:	53                   	push   ebx
c0013b09:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b0c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b12:	83 c4 10             	add    esp,0x10
c0013b15:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b18:	74 0f                	je     c0013b29 <Device::closeAll()+0x31>
c0013b1a:	83 ec 0c             	sub    esp,0xc
c0013b1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b20:	e8 d3 ff ff ff       	call   c0013af8 <Device::closeAll()>
c0013b25:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b27:	eb e9                	jmp    c0013b12 <Device::closeAll()+0x1a>
c0013b29:	83 c4 08             	add    esp,0x8
c0013b2c:	5b                   	pop    ebx
c0013b2d:	c3                   	ret    

c0013b2e <Device::powerSavingAll(PowerSavingLevel)>:
c0013b2e:	56                   	push   esi
c0013b2f:	53                   	push   ebx
c0013b30:	83 ec 0c             	sub    esp,0xc
c0013b33:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013b37:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013b3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b3d:	56                   	push   esi
c0013b3e:	53                   	push   ebx
c0013b3f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013b42:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b48:	83 c4 10             	add    esp,0x10
c0013b4b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b4e:	74 0f                	je     c0013b5f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013b50:	52                   	push   edx
c0013b51:	52                   	push   edx
c0013b52:	56                   	push   esi
c0013b53:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b56:	e8 d3 ff ff ff       	call   c0013b2e <Device::powerSavingAll(PowerSavingLevel)>
c0013b5b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b5d:	eb e9                	jmp    c0013b48 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013b5f:	58                   	pop    eax
c0013b60:	5b                   	pop    ebx
c0013b61:	5e                   	pop    esi
c0013b62:	c3                   	ret    
c0013b63:	90                   	nop

c0013b64 <Device::setName(char const*)>:
c0013b64:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013b6c:	e9 9b cc fe ff       	jmp    c000080c <strcpy>
c0013b71:	90                   	nop

c0013b72 <Device::Device(char const*)>:
c0013b72:	83 ec 1c             	sub    esp,0x1c
c0013b75:	ba f0 a6 02 c0       	mov    edx,0xc002a6f0
c0013b7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b7e:	89 10                	mov    DWORD PTR [eax],edx
c0013b80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b84:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013b8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013b92:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013b9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ba0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013baa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bae:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013bb8:	83 ec 08             	sub    esp,0x8
c0013bbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013bc3:	e8 9c ff ff ff       	call   c0013b64 <Device::setName(char const*)>
c0013bc8:	83 c4 10             	add    esp,0x10
c0013bcb:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013bd3:	83 ec 0c             	sub    esp,0xc
c0013bd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013bda:	e8 ba b9 ff ff       	call   c000f599 <malloc>
c0013bdf:	83 c4 10             	add    esp,0x10
c0013be2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013be8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013bf3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013bf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013bfd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013c03:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c0d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013c13:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c1e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c29:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013c30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c34:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013c3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c42:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013c4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c50:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013c5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013c5e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013c68:	90                   	nop
c0013c69:	83 c4 1c             	add    esp,0x1c
c0013c6c:	c3                   	ret    
c0013c6d:	90                   	nop

c0013c6e <Device::getName()>:
c0013c6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c72:	05 d0 00 00 00       	add    eax,0xd0
c0013c77:	c3                   	ret    

c0013c78 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013c78:	83 ec 0c             	sub    esp,0xc
c0013c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c7f:	83 ec 08             	sub    esp,0x8
c0013c82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c86:	50                   	push   eax
c0013c87:	e8 e6 fe ff ff       	call   c0013b72 <Device::Device(char const*)>
c0013c8c:	83 c4 10             	add    esp,0x10
c0013c8f:	ba 1c a7 02 c0       	mov    edx,0xc002a71c
c0013c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c98:	89 10                	mov    DWORD PTR [eax],edx
c0013c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c9e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013ca8:	90                   	nop
c0013ca9:	83 c4 0c             	add    esp,0xc
c0013cac:	c3                   	ret    
c0013cad:	90                   	nop

c0013cae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013cae:	57                   	push   edi
c0013caf:	56                   	push   esi
c0013cb0:	53                   	push   ebx
c0013cb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cb5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013cb9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013cbd:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013cc3:	75 0c                	jne    c0013cd1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013cc5:	52                   	push   edx
c0013cc6:	52                   	push   edx
c0013cc7:	53                   	push   ebx
c0013cc8:	56                   	push   esi
c0013cc9:	e8 d2 47 01 00       	call   c00284a0 <LinkedList<Device>::addElement(Device*)>
c0013cce:	83 c4 10             	add    esp,0x10
c0013cd1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cd7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cda:	74 12                	je     c0013cee <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013cdc:	50                   	push   eax
c0013cdd:	57                   	push   edi
c0013cde:	56                   	push   esi
c0013cdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ce2:	e8 c7 ff ff ff       	call   c0013cae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013ce7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ce9:	83 c4 10             	add    esp,0x10
c0013cec:	eb e9                	jmp    c0013cd7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013cee:	5b                   	pop    ebx
c0013cef:	5e                   	pop    esi
c0013cf0:	5f                   	pop    edi
c0013cf1:	c3                   	ret    

c0013cf2 <getDevicesOfType(DeviceType)>:
c0013cf2:	53                   	push   ebx
c0013cf3:	83 ec 14             	sub    esp,0x14
c0013cf6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cfa:	53                   	push   ebx
c0013cfb:	e8 7c 48 01 00       	call   c002857c <LinkedList<Device>::LinkedList()>
c0013d00:	83 c4 0c             	add    esp,0xc
c0013d03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d07:	53                   	push   ebx
c0013d08:	ff 35 e8 d5 02 c0    	push   DWORD PTR ds:0xc002d5e8
c0013d0e:	e8 9b ff ff ff       	call   c0013cae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013d13:	89 d8                	mov    eax,ebx
c0013d15:	83 c4 18             	add    esp,0x18
c0013d18:	5b                   	pop    ebx
c0013d19:	c2 04 00             	ret    0x4

c0013d1c <HardDiskController::HardDiskController(char const*)>:
c0013d1c:	83 ec 0c             	sub    esp,0xc
c0013d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d23:	83 ec 08             	sub    esp,0x8
c0013d26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d2a:	50                   	push   eax
c0013d2b:	e8 42 fe ff ff       	call   c0013b72 <Device::Device(char const*)>
c0013d30:	83 c4 10             	add    esp,0x10
c0013d33:	ba 48 a7 02 c0       	mov    edx,0xc002a748
c0013d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d3c:	89 10                	mov    DWORD PTR [eax],edx
c0013d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d42:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013d4c:	90                   	nop
c0013d4d:	83 c4 0c             	add    esp,0xc
c0013d50:	c3                   	ret    
c0013d51:	90                   	nop

c0013d52 <HardDiskController::~HardDiskController()>:
c0013d52:	83 ec 0c             	sub    esp,0xc
c0013d55:	ba 48 a7 02 c0       	mov    edx,0xc002a748
c0013d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d5e:	89 10                	mov    DWORD PTR [eax],edx
c0013d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d64:	83 ec 0c             	sub    esp,0xc
c0013d67:	50                   	push   eax
c0013d68:	e8 cf fa ff ff       	call   c001383c <Device::~Device()>
c0013d6d:	83 c4 10             	add    esp,0x10
c0013d70:	90                   	nop
c0013d71:	83 c4 0c             	add    esp,0xc
c0013d74:	c3                   	ret    
c0013d75:	90                   	nop

c0013d76 <HardDiskController::~HardDiskController()>:
c0013d76:	83 ec 0c             	sub    esp,0xc
c0013d79:	83 ec 0c             	sub    esp,0xc
c0013d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d80:	e8 cd ff ff ff       	call   c0013d52 <HardDiskController::~HardDiskController()>
c0013d85:	83 c4 10             	add    esp,0x10
c0013d88:	83 ec 08             	sub    esp,0x8
c0013d8b:	68 58 01 00 00       	push   0x158
c0013d90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d94:	e8 c4 e6 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0013d99:	83 c4 10             	add    esp,0x10
c0013d9c:	83 c4 0c             	add    esp,0xc
c0013d9f:	c3                   	ret    

c0013da0 <PhysicalDisk::eject()>:
c0013da0:	83 c8 ff             	or     eax,0xffffffff
c0013da3:	c3                   	ret    

c0013da4 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013da4:	83 ec 0c             	sub    esp,0xc
c0013da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dab:	83 ec 08             	sub    esp,0x8
c0013dae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013db2:	50                   	push   eax
c0013db3:	e8 ba fd ff ff       	call   c0013b72 <Device::Device(char const*)>
c0013db8:	83 c4 10             	add    esp,0x10
c0013dbb:	ba 74 a7 02 c0       	mov    edx,0xc002a774
c0013dc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dc4:	89 10                	mov    DWORD PTR [eax],edx
c0013dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dca:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013dd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd5:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013de0:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013df2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dfc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013e06:	90                   	nop
c0013e07:	83 c4 0c             	add    esp,0xc
c0013e0a:	c3                   	ret    
c0013e0b:	90                   	nop

c0013e0c <PhysicalDisk::startCache()>:
c0013e0c:	56                   	push   esi
c0013e0d:	53                   	push   ebx
c0013e0e:	83 ec 10             	sub    esp,0x10
c0013e11:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e15:	6a 44                	push   0x44
c0013e17:	e8 7d b7 ff ff       	call   c000f599 <malloc>
c0013e1c:	89 c6                	mov    esi,eax
c0013e1e:	58                   	pop    eax
c0013e1f:	5a                   	pop    edx
c0013e20:	53                   	push   ebx
c0013e21:	56                   	push   esi
c0013e22:	e8 65 28 00 00       	call   c001668c <VCache::VCache(PhysicalDisk*)>
c0013e27:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013e2d:	83 c4 14             	add    esp,0x14
c0013e30:	5b                   	pop    ebx
c0013e31:	5e                   	pop    esi
c0013e32:	c3                   	ret    
c0013e33:	90                   	nop

c0013e34 <PhysicalDisk::~PhysicalDisk()>:
c0013e34:	83 ec 0c             	sub    esp,0xc
c0013e37:	ba 74 a7 02 c0       	mov    edx,0xc002a774
c0013e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e40:	89 10                	mov    DWORD PTR [eax],edx
c0013e42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e46:	83 ec 0c             	sub    esp,0xc
c0013e49:	50                   	push   eax
c0013e4a:	e8 ed f9 ff ff       	call   c001383c <Device::~Device()>
c0013e4f:	83 c4 10             	add    esp,0x10
c0013e52:	90                   	nop
c0013e53:	83 c4 0c             	add    esp,0xc
c0013e56:	c3                   	ret    
c0013e57:	90                   	nop

c0013e58 <PhysicalDisk::~PhysicalDisk()>:
c0013e58:	83 ec 0c             	sub    esp,0xc
c0013e5b:	83 ec 0c             	sub    esp,0xc
c0013e5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e62:	e8 cd ff ff ff       	call   c0013e34 <PhysicalDisk::~PhysicalDisk()>
c0013e67:	83 c4 10             	add    esp,0x10
c0013e6a:	83 ec 08             	sub    esp,0x8
c0013e6d:	68 6c 01 00 00       	push   0x16c
c0013e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e76:	e8 e2 e5 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0013e7b:	83 c4 10             	add    esp,0x10
c0013e7e:	83 c4 0c             	add    esp,0xc
c0013e81:	c3                   	ret    

c0013e82 <FPU::FPU(char const*)>:
c0013e82:	83 ec 0c             	sub    esp,0xc
c0013e85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e89:	83 ec 08             	sub    esp,0x8
c0013e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e90:	50                   	push   eax
c0013e91:	e8 dc fc ff ff       	call   c0013b72 <Device::Device(char const*)>
c0013e96:	83 c4 10             	add    esp,0x10
c0013e99:	ba b8 a7 02 c0       	mov    edx,0xc002a7b8
c0013e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea2:	89 10                	mov    DWORD PTR [eax],edx
c0013ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea8:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013eb2:	90                   	nop
c0013eb3:	83 c4 0c             	add    esp,0xc
c0013eb6:	c3                   	ret    
c0013eb7:	90                   	nop

c0013eb8 <FPU::~FPU()>:
c0013eb8:	83 ec 0c             	sub    esp,0xc
c0013ebb:	ba b8 a7 02 c0       	mov    edx,0xc002a7b8
c0013ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec4:	89 10                	mov    DWORD PTR [eax],edx
c0013ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eca:	83 ec 0c             	sub    esp,0xc
c0013ecd:	50                   	push   eax
c0013ece:	e8 69 f9 ff ff       	call   c001383c <Device::~Device()>
c0013ed3:	83 c4 10             	add    esp,0x10
c0013ed6:	90                   	nop
c0013ed7:	83 c4 0c             	add    esp,0xc
c0013eda:	c3                   	ret    
c0013edb:	90                   	nop

c0013edc <FPU::~FPU()>:
c0013edc:	83 ec 0c             	sub    esp,0xc
c0013edf:	83 ec 0c             	sub    esp,0xc
c0013ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ee6:	e8 cd ff ff ff       	call   c0013eb8 <FPU::~FPU()>
c0013eeb:	83 c4 10             	add    esp,0x10
c0013eee:	83 ec 08             	sub    esp,0x8
c0013ef1:	68 58 01 00 00       	push   0x158
c0013ef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013efa:	e8 5e e5 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0013eff:	83 c4 10             	add    esp,0x10
c0013f02:	83 c4 0c             	add    esp,0xc
c0013f05:	c3                   	ret    

c0013f06 <setupFPU()>:
c0013f06:	53                   	push   ebx
c0013f07:	83 ec 08             	sub    esp,0x8
c0013f0a:	8b 15 e8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5e8
c0013f10:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013f17:	74 19                	je     c0013f32 <setupFPU()+0x2c>
c0013f19:	83 ec 0c             	sub    esp,0xc
c0013f1c:	68 58 01 00 00       	push   0x158
c0013f21:	e8 73 b6 ff ff       	call   c000f599 <malloc>
c0013f26:	89 c3                	mov    ebx,eax
c0013f28:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f2b:	e8 ba 11 01 00       	call   c00250ea <AVX::AVX()>
c0013f30:	eb 5b                	jmp    c0013f8d <setupFPU()+0x87>
c0013f32:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013f38:	84 c0                	test   al,al
c0013f3a:	79 19                	jns    c0013f55 <setupFPU()+0x4f>
c0013f3c:	83 ec 0c             	sub    esp,0xc
c0013f3f:	68 58 01 00 00       	push   0x158
c0013f44:	e8 50 b6 ff ff       	call   c000f599 <malloc>
c0013f49:	89 c3                	mov    ebx,eax
c0013f4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f4e:	e8 bd 12 01 00       	call   c0025210 <SSE::SSE()>
c0013f53:	eb 38                	jmp    c0013f8d <setupFPU()+0x87>
c0013f55:	a8 20                	test   al,0x20
c0013f57:	74 19                	je     c0013f72 <setupFPU()+0x6c>
c0013f59:	83 ec 0c             	sub    esp,0xc
c0013f5c:	68 58 01 00 00       	push   0x158
c0013f61:	e8 33 b6 ff ff       	call   c000f599 <malloc>
c0013f66:	89 c3                	mov    ebx,eax
c0013f68:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f6b:	e8 0a 12 01 00       	call   c002517a <MMX::MMX()>
c0013f70:	eb 1b                	jmp    c0013f8d <setupFPU()+0x87>
c0013f72:	a8 10                	test   al,0x10
c0013f74:	74 1c                	je     c0013f92 <setupFPU()+0x8c>
c0013f76:	83 ec 0c             	sub    esp,0xc
c0013f79:	68 58 01 00 00       	push   0x158
c0013f7e:	e8 16 b6 ff ff       	call   c000f599 <malloc>
c0013f83:	89 c3                	mov    ebx,eax
c0013f85:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f88:	e8 11 13 01 00       	call   c002529e <x87::x87()>
c0013f8d:	83 c4 10             	add    esp,0x10
c0013f90:	eb 24                	jmp    c0013fb6 <setupFPU()+0xb0>
c0013f92:	83 e0 ef             	and    eax,0xffffffef
c0013f95:	83 ec 0c             	sub    esp,0xc
c0013f98:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013f9e:	68 a4 a7 02 c0       	push   0xc002a7a4
c0013fa3:	e8 8d e5 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0013fa8:	0f 20 c0             	mov    eax,cr0
c0013fab:	83 c8 04             	or     eax,0x4
c0013fae:	0f 22 c0             	mov    cr0,eax
c0013fb1:	31 db                	xor    ebx,ebx
c0013fb3:	83 c4 10             	add    esp,0x10
c0013fb6:	89 d8                	mov    eax,ebx
c0013fb8:	83 c4 08             	add    esp,0x8
c0013fbb:	5b                   	pop    ebx
c0013fbc:	c3                   	ret    
c0013fbd:	90                   	nop

c0013fbe <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013fbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013fc2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013fc6:	c1 e0 04             	shl    eax,0x4
c0013fc9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013fcd:	8d 50 10             	lea    edx,[eax+0x10]
c0013fd0:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013fd6:	74 08                	je     c0013fe0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013fd8:	83 c0 04             	add    eax,0x4
c0013fdb:	39 d0                	cmp    eax,edx
c0013fdd:	75 f1                	jne    c0013fd0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013fdf:	c3                   	ret    
c0013fe0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013fea:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013ff4:	eb e2                	jmp    c0013fd8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013ff6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013ff6:	57                   	push   edi
c0013ff7:	31 c0                	xor    eax,eax
c0013ff9:	56                   	push   esi
c0013ffa:	53                   	push   ebx
c0013ffb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013fff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014003:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014007:	89 da                	mov    edx,ebx
c0014009:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001400d:	c1 e2 04             	shl    edx,0x4
c0014010:	01 ca                	add    edx,ecx
c0014012:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001401a:	74 16                	je     c0014032 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001401c:	40                   	inc    eax
c001401d:	83 f8 04             	cmp    eax,0x4
c0014020:	75 f0                	jne    c0014012 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014022:	c7 44 24 10 e8 a7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a7e8
c001402a:	5b                   	pop    ebx
c001402b:	5e                   	pop    esi
c001402c:	5f                   	pop    edi
c001402d:	e9 63 5c 00 00       	jmp    c0019c95 <Krnl::panic(char const*)>
c0014032:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014035:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014038:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001403e:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014044:	5b                   	pop    ebx
c0014045:	5e                   	pop    esi
c0014046:	5f                   	pop    edi
c0014047:	c3                   	ret    

c0014048 <doubleFault(regs*, void*)>:
c0014048:	55                   	push   ebp
c0014049:	89 e5                	mov    ebp,esp
c001404b:	83 ec 08             	sub    esp,0x8
c001404e:	83 ec 0c             	sub    esp,0xc
c0014051:	68 f5 a7 02 c0       	push   0xc002a7f5
c0014056:	e8 3a 5c 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c001405b:	83 c4 10             	add    esp,0x10
c001405e:	90                   	nop
c001405f:	c9                   	leave  
c0014060:	c3                   	ret    
c0014061:	90                   	nop

c0014062 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014062:	56                   	push   esi
c0014063:	53                   	push   ebx
c0014064:	50                   	push   eax
c0014065:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014069:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001406d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014072:	75 35                	jne    c00140a9 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014074:	8d 43 20             	lea    eax,[ebx+0x20]
c0014077:	31 d2                	xor    edx,edx
c0014079:	89 c1                	mov    ecx,eax
c001407b:	c1 e1 04             	shl    ecx,0x4
c001407e:	01 f1                	add    ecx,esi
c0014080:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014088:	74 3e                	je     c00140c8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c001408a:	42                   	inc    edx
c001408b:	83 fa 04             	cmp    edx,0x4
c001408e:	75 f0                	jne    c0014080 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014090:	83 ec 0c             	sub    esp,0xc
c0014093:	68 0f a8 02 c0       	push   0xc002a80f
c0014098:	e8 f8 5b 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c001409d:	83 c4 10             	add    esp,0x10
c00140a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00140a5:	5a                   	pop    edx
c00140a6:	5b                   	pop    ebx
c00140a7:	5e                   	pop    esi
c00140a8:	c3                   	ret    
c00140a9:	83 ec 0c             	sub    esp,0xc
c00140ac:	56                   	push   esi
c00140ad:	e8 bc fb ff ff       	call   c0013c6e <Device::getName()>
c00140b2:	83 c4 10             	add    esp,0x10
c00140b5:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00140b8:	75 ba                	jne    c0014074 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00140ba:	83 fb 0f             	cmp    ebx,0xf
c00140bd:	7f 29                	jg     c00140e8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00140bf:	0f b6 9b 40 c8 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd37c0]
c00140c6:	eb ac                	jmp    c0014074 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00140c8:	8d 04 82             	lea    eax,[edx+eax*4]
c00140cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00140cf:	8d 04 86             	lea    eax,[esi+eax*4]
c00140d2:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00140d8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00140dc:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00140e2:	89 d8                	mov    eax,ebx
c00140e4:	5a                   	pop    edx
c00140e5:	5b                   	pop    ebx
c00140e6:	5e                   	pop    esi
c00140e7:	c3                   	ret    
c00140e8:	83 ec 0c             	sub    esp,0xc
c00140eb:	68 02 a8 02 c0       	push   0xc002a802
c00140f0:	e8 a0 5b 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c00140f5:	83 c4 10             	add    esp,0x10
c00140f8:	e9 77 ff ff ff       	jmp    c0014074 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00140fd:	90                   	nop

c00140fe <InterruptController::clearAllHandlers(int, bool)>:
c00140fe:	56                   	push   esi
c00140ff:	53                   	push   ebx
c0014100:	52                   	push   edx
c0014101:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014105:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014109:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001410e:	75 61                	jne    c0014171 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014110:	8d 46 20             	lea    eax,[esi+0x20]
c0014113:	c1 e6 04             	shl    esi,0x4
c0014116:	c1 e0 04             	shl    eax,0x4
c0014119:	01 de                	add    esi,ebx
c001411b:	01 d8                	add    eax,ebx
c001411d:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014127:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014131:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001413b:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014145:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001414f:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014159:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014163:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c001416d:	58                   	pop    eax
c001416e:	5b                   	pop    ebx
c001416f:	5e                   	pop    esi
c0014170:	c3                   	ret    
c0014171:	83 ec 0c             	sub    esp,0xc
c0014174:	53                   	push   ebx
c0014175:	e8 f4 fa ff ff       	call   c0013c6e <Device::getName()>
c001417a:	83 c4 10             	add    esp,0x10
c001417d:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014180:	75 8e                	jne    c0014110 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014182:	83 fe 0f             	cmp    esi,0xf
c0014185:	7f 09                	jg     c0014190 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014187:	0f b6 b6 40 c8 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd37c0]
c001418e:	eb 80                	jmp    c0014110 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014190:	83 ec 0c             	sub    esp,0xc
c0014193:	68 1c a8 02 c0       	push   0xc002a81c
c0014198:	e8 f8 5a 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c001419d:	83 c4 10             	add    esp,0x10
c00141a0:	e9 6b ff ff ff       	jmp    c0014110 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00141a5:	90                   	nop

c00141a6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00141a6:	56                   	push   esi
c00141a7:	53                   	push   ebx
c00141a8:	52                   	push   edx
c00141a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00141ad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00141b1:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00141b6:	75 3a                	jne    c00141f2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00141b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00141bc:	8d 50 20             	lea    edx,[eax+0x20]
c00141bf:	c1 e2 04             	shl    edx,0x4
c00141c2:	8d 04 16             	lea    eax,[esi+edx*1]
c00141c5:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00141c9:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00141cf:	74 0b                	je     c00141dc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00141d1:	83 c0 04             	add    eax,0x4
c00141d4:	39 d0                	cmp    eax,edx
c00141d6:	75 f1                	jne    c00141c9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00141d8:	58                   	pop    eax
c00141d9:	5b                   	pop    ebx
c00141da:	5e                   	pop    esi
c00141db:	c3                   	ret    
c00141dc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141e6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00141f0:	eb df                	jmp    c00141d1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c00141f2:	83 ec 0c             	sub    esp,0xc
c00141f5:	56                   	push   esi
c00141f6:	e8 73 fa ff ff       	call   c0013c6e <Device::getName()>
c00141fb:	83 c4 10             	add    esp,0x10
c00141fe:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014201:	75 b5                	jne    c00141b8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014203:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014208:	7f 11                	jg     c001421b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c001420a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001420e:	0f b6 80 40 c8 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd37c0]
c0014215:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014219:	eb 9d                	jmp    c00141b8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001421b:	83 ec 0c             	sub    esp,0xc
c001421e:	68 29 a8 02 c0       	push   0xc002a829
c0014223:	e8 6d 5a 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0014228:	83 c4 10             	add    esp,0x10
c001422b:	eb 8b                	jmp    c00141b8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c001422d <nmiHandler(regs*, void*)>:
c001422d:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0014232:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014236:	e9 c5 aa ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c001423b <int_handler>:
c001423b:	55                   	push   ebp
c001423c:	57                   	push   edi
c001423d:	56                   	push   esi
c001423e:	53                   	push   ebx
c001423f:	83 ec 0c             	sub    esp,0xc
c0014242:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014246:	80 3d 24 01 03 c0 00 	cmp    BYTE PTR ds:0xc0030124,0x0
c001424d:	74 0b                	je     c001425a <int_handler+0x1f>
c001424f:	fa                   	cli    
c0014250:	f4                   	hlt    
c0014251:	80 3d 24 01 03 c0 00 	cmp    BYTE PTR ds:0xc0030124,0x0
c0014258:	75 f5                	jne    c001424f <int_handler+0x14>
c001425a:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c001425f:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014262:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014268:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001426e:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014271:	83 f8 17             	cmp    eax,0x17
c0014274:	77 13                	ja     c0014289 <int_handler+0x4e>
c0014276:	83 ec 08             	sub    esp,0x8
c0014279:	8b 17                	mov    edx,DWORD PTR [edi]
c001427b:	8d 43 e0             	lea    eax,[ebx-0x20]
c001427e:	0f b6 c0             	movzx  eax,al
c0014281:	50                   	push   eax
c0014282:	57                   	push   edi
c0014283:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014286:	83 c4 10             	add    esp,0x10
c0014289:	83 c3 15             	add    ebx,0x15
c001428c:	c1 e3 04             	shl    ebx,0x4
c001428f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014293:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c001429a:	31 db                	xor    ebx,ebx
c001429c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00142a0:	85 c0                	test   eax,eax
c00142a2:	74 13                	je     c00142b7 <int_handler+0x7c>
c00142a4:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00142a7:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00142ab:	74 1c                	je     c00142c9 <int_handler+0x8e>
c00142ad:	83 ec 08             	sub    esp,0x8
c00142b0:	52                   	push   edx
c00142b1:	56                   	push   esi
c00142b2:	ff d0                	call   eax
c00142b4:	83 c4 10             	add    esp,0x10
c00142b7:	43                   	inc    ebx
c00142b8:	83 fb 04             	cmp    ebx,0x4
c00142bb:	75 df                	jne    c001429c <int_handler+0x61>
c00142bd:	83 c4 0c             	add    esp,0xc
c00142c0:	31 c0                	xor    eax,eax
c00142c2:	5b                   	pop    ebx
c00142c3:	31 d2                	xor    edx,edx
c00142c5:	5e                   	pop    esi
c00142c6:	5f                   	pop    edi
c00142c7:	5d                   	pop    ebp
c00142c8:	c3                   	ret    
c00142c9:	83 ec 08             	sub    esp,0x8
c00142cc:	52                   	push   edx
c00142cd:	56                   	push   esi
c00142ce:	ff d0                	call   eax
c00142d0:	83 c4 10             	add    esp,0x10
c00142d3:	83 c4 0c             	add    esp,0xc
c00142d6:	5b                   	pop    ebx
c00142d7:	5e                   	pop    esi
c00142d8:	5f                   	pop    edi
c00142d9:	5d                   	pop    ebp
c00142da:	c3                   	ret    
c00142db:	90                   	nop

c00142dc <InterruptController::InterruptController(char const*)>:
c00142dc:	83 ec 1c             	sub    esp,0x1c
c00142df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142e3:	83 ec 08             	sub    esp,0x8
c00142e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00142ea:	50                   	push   eax
c00142eb:	e8 82 f8 ff ff       	call   c0013b72 <Device::Device(char const*)>
c00142f0:	83 c4 10             	add    esp,0x10
c00142f3:	ba dc aa 02 c0       	mov    edx,0xc002aadc
c00142f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142fc:	89 10                	mov    DWORD PTR [eax],edx
c00142fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014302:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001430c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014314:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001431c:	7f 5e                	jg     c001437c <InterruptController::InterruptController(char const*)+0xa0>
c001431e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014326:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c001432b:	7f 49                	jg     c0014376 <InterruptController::InterruptController(char const*)+0x9a>
c001432d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014331:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014335:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001433c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014340:	01 ca                	add    edx,ecx
c0014342:	83 c2 54             	add    edx,0x54
c0014345:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001434d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014351:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014355:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001435c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014360:	01 ca                	add    edx,ecx
c0014362:	81 c2 54 04 00 00    	add    edx,0x454
c0014368:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014370:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014374:	eb b0                	jmp    c0014326 <InterruptController::InterruptController(char const*)+0x4a>
c0014376:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001437a:	eb 98                	jmp    c0014314 <InterruptController::InterruptController(char const*)+0x38>
c001437c:	90                   	nop
c001437d:	83 c4 1c             	add    esp,0x1c
c0014380:	c3                   	ret    
c0014381:	90                   	nop

c0014382 <InterruptController::~InterruptController()>:
c0014382:	83 ec 0c             	sub    esp,0xc
c0014385:	ba dc aa 02 c0       	mov    edx,0xc002aadc
c001438a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001438e:	89 10                	mov    DWORD PTR [eax],edx
c0014390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014394:	83 ec 0c             	sub    esp,0xc
c0014397:	50                   	push   eax
c0014398:	e8 9f f4 ff ff       	call   c001383c <Device::~Device()>
c001439d:	83 c4 10             	add    esp,0x10
c00143a0:	90                   	nop
c00143a1:	83 c4 0c             	add    esp,0xc
c00143a4:	c3                   	ret    
c00143a5:	90                   	nop

c00143a6 <InterruptController::~InterruptController()>:
c00143a6:	83 ec 0c             	sub    esp,0xc
c00143a9:	83 ec 0c             	sub    esp,0xc
c00143ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143b0:	e8 cd ff ff ff       	call   c0014382 <InterruptController::~InterruptController()>
c00143b5:	83 c4 10             	add    esp,0x10
c00143b8:	83 ec 08             	sub    esp,0x8
c00143bb:	68 58 21 00 00       	push   0x2158
c00143c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143c4:	e8 94 e0 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c00143c9:	83 c4 10             	add    esp,0x10
c00143cc:	83 c4 0c             	add    esp,0xc
c00143cf:	c3                   	ret    

c00143d0 <displayDebugInfo(regs*)>:
c00143d0:	55                   	push   ebp
c00143d1:	57                   	push   edi
c00143d2:	56                   	push   esi
c00143d3:	53                   	push   ebx
c00143d4:	83 ec 24             	sub    esp,0x24
c00143d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00143db:	0f 20 c2             	mov    edx,cr0
c00143de:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00143e2:	0f 20 d7             	mov    edi,cr2
c00143e5:	0f 20 de             	mov    esi,cr3
c00143e8:	0f 20 e5             	mov    ebp,cr4
c00143eb:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00143ee:	68 36 a8 02 c0       	push   0xc002a836
c00143f3:	e8 3d e1 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c00143f8:	59                   	pop    ecx
c00143f9:	58                   	pop    eax
c00143fa:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00143fd:	68 41 a8 02 c0       	push   0xc002a841
c0014402:	e8 2e e1 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0014407:	58                   	pop    eax
c0014408:	5a                   	pop    edx
c0014409:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001440c:	68 4c a8 02 c0       	push   0xc002a84c
c0014411:	e8 1f e1 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0014416:	59                   	pop    ecx
c0014417:	58                   	pop    eax
c0014418:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001441b:	68 57 a8 02 c0       	push   0xc002a857
c0014420:	e8 10 e1 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0014425:	58                   	pop    eax
c0014426:	5a                   	pop    edx
c0014427:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001442a:	68 62 a8 02 c0       	push   0xc002a862
c001442f:	e8 01 e1 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0014434:	59                   	pop    ecx
c0014435:	58                   	pop    eax
c0014436:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014439:	68 6d a8 02 c0       	push   0xc002a86d
c001443e:	e8 f2 e0 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0014443:	58                   	pop    eax
c0014444:	5a                   	pop    edx
c0014445:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014448:	68 78 a8 02 c0       	push   0xc002a878
c001444d:	e8 e3 e0 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0014452:	59                   	pop    ecx
c0014453:	58                   	pop    eax
c0014454:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014457:	68 83 a8 02 c0       	push   0xc002a883
c001445c:	e8 d4 e0 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0014461:	58                   	pop    eax
c0014462:	5a                   	pop    edx
c0014463:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014466:	68 8e a8 02 c0       	push   0xc002a88e
c001446b:	e8 c5 e0 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0014470:	59                   	pop    ecx
c0014471:	58                   	pop    eax
c0014472:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014475:	68 9d a8 02 c0       	push   0xc002a89d
c001447a:	e8 b6 e0 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001447f:	58                   	pop    eax
c0014480:	5a                   	pop    edx
c0014481:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014484:	68 a8 a8 02 c0       	push   0xc002a8a8
c0014489:	e8 a7 e0 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001448e:	59                   	pop    ecx
c001448f:	58                   	pop    eax
c0014490:	57                   	push   edi
c0014491:	68 b3 a8 02 c0       	push   0xc002a8b3
c0014496:	e8 9a e0 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001449b:	58                   	pop    eax
c001449c:	5a                   	pop    edx
c001449d:	56                   	push   esi
c001449e:	68 be a8 02 c0       	push   0xc002a8be
c00144a3:	e8 8d e0 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c00144a8:	59                   	pop    ecx
c00144a9:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c00144ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144b4:	e8 1a be ff ff       	call   c00102d3 <setActiveTerminal(VgaText*)>
c00144b9:	58                   	pop    eax
c00144ba:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00144bd:	5a                   	pop    edx
c00144be:	c1 e0 05             	shl    eax,0x5
c00144c1:	05 a0 c5 02 c0       	add    eax,0xc002c5a0
c00144c6:	50                   	push   eax
c00144c7:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c00144cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144d2:	e8 09 c3 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c00144d7:	59                   	pop    ecx
c00144d8:	58                   	pop    eax
c00144d9:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c00144de:	68 c9 a8 02 c0       	push   0xc002a8c9
c00144e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144e9:	e8 f2 c2 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c00144ee:	58                   	pop    eax
c00144ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144f4:	5a                   	pop    edx
c00144f5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00144f8:	83 c0 0c             	add    eax,0xc
c00144fb:	50                   	push   eax
c00144fc:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0014501:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014507:	e8 d4 c2 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001450c:	59                   	pop    ecx
c001450d:	58                   	pop    eax
c001450e:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0014513:	68 d2 a8 02 c0       	push   0xc002a8d2
c0014518:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001451e:	e8 bd c2 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0014523:	58                   	pop    eax
c0014524:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0014529:	5a                   	pop    edx
c001452a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001452d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014533:	e8 62 c2 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0014538:	59                   	pop    ecx
c0014539:	58                   	pop    eax
c001453a:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c001453f:	68 da a8 02 c0       	push   0xc002a8da
c0014544:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001454a:	e8 91 c2 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001454f:	58                   	pop    eax
c0014550:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0014555:	5a                   	pop    edx
c0014556:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014559:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001455f:	e8 36 c2 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0014564:	59                   	pop    ecx
c0014565:	58                   	pop    eax
c0014566:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c001456b:	68 e2 a8 02 c0       	push   0xc002a8e2
c0014570:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014576:	e8 65 c2 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001457b:	58                   	pop    eax
c001457c:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0014581:	5a                   	pop    edx
c0014582:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014585:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001458b:	e8 0a c2 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0014590:	59                   	pop    ecx
c0014591:	58                   	pop    eax
c0014592:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0014597:	68 ea a8 02 c0       	push   0xc002a8ea
c001459c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145a2:	e8 39 c2 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c00145a7:	58                   	pop    eax
c00145a8:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c00145ad:	5a                   	pop    edx
c00145ae:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00145b1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145b7:	e8 de c1 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c00145bc:	59                   	pop    ecx
c00145bd:	58                   	pop    eax
c00145be:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c00145c3:	68 f2 a8 02 c0       	push   0xc002a8f2
c00145c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145ce:	e8 0d c2 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c00145d3:	58                   	pop    eax
c00145d4:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c00145d9:	5a                   	pop    edx
c00145da:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00145dd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145e3:	e8 b2 c1 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c00145e8:	59                   	pop    ecx
c00145e9:	58                   	pop    eax
c00145ea:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c00145ef:	68 fa a8 02 c0       	push   0xc002a8fa
c00145f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00145fa:	e8 e1 c1 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c00145ff:	58                   	pop    eax
c0014600:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0014605:	5a                   	pop    edx
c0014606:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014609:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001460f:	e8 86 c1 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0014614:	59                   	pop    ecx
c0014615:	58                   	pop    eax
c0014616:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c001461b:	68 02 a9 02 c0       	push   0xc002a902
c0014620:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014626:	e8 b5 c1 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001462b:	58                   	pop    eax
c001462c:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0014631:	5a                   	pop    edx
c0014632:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014636:	52                   	push   edx
c0014637:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001463d:	e8 58 c1 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0014642:	59                   	pop    ecx
c0014643:	58                   	pop    eax
c0014644:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0014649:	68 0b a9 02 c0       	push   0xc002a90b
c001464e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014654:	e8 87 c1 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0014659:	58                   	pop    eax
c001465a:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c001465f:	5a                   	pop    edx
c0014660:	57                   	push   edi
c0014661:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014667:	e8 2e c1 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c001466c:	59                   	pop    ecx
c001466d:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0014672:	5f                   	pop    edi
c0014673:	68 13 a9 02 c0       	push   0xc002a913
c0014678:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001467e:	e8 5d c1 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0014683:	58                   	pop    eax
c0014684:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0014689:	5a                   	pop    edx
c001468a:	56                   	push   esi
c001468b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014691:	e8 04 c1 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0014696:	59                   	pop    ecx
c0014697:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c001469c:	5e                   	pop    esi
c001469d:	68 1b a9 02 c0       	push   0xc002a91b
c00146a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146a8:	e8 33 c1 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c00146ad:	5f                   	pop    edi
c00146ae:	58                   	pop    eax
c00146af:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c00146b4:	55                   	push   ebp
c00146b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146bb:	e8 da c0 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c00146c0:	58                   	pop    eax
c00146c1:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c00146c6:	5a                   	pop    edx
c00146c7:	68 23 a9 02 c0       	push   0xc002a923
c00146cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146d2:	e8 09 c1 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c00146d7:	0f 21 c0             	mov    eax,db0
c00146da:	59                   	pop    ecx
c00146db:	5e                   	pop    esi
c00146dc:	50                   	push   eax
c00146dd:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c00146e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146e8:	e8 ad c0 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c00146ed:	5f                   	pop    edi
c00146ee:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c00146f3:	5d                   	pop    ebp
c00146f4:	68 2c a9 02 c0       	push   0xc002a92c
c00146f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ff:	e8 dc c0 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0014704:	0f 21 c8             	mov    eax,db1
c0014707:	5a                   	pop    edx
c0014708:	59                   	pop    ecx
c0014709:	50                   	push   eax
c001470a:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c001470f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014715:	e8 80 c0 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c001471a:	5e                   	pop    esi
c001471b:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0014720:	5f                   	pop    edi
c0014721:	68 34 a9 02 c0       	push   0xc002a934
c0014726:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001472c:	e8 af c0 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0014731:	0f 21 d0             	mov    eax,db2
c0014734:	5d                   	pop    ebp
c0014735:	5a                   	pop    edx
c0014736:	50                   	push   eax
c0014737:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c001473c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014742:	e8 53 c0 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0014747:	59                   	pop    ecx
c0014748:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c001474d:	5e                   	pop    esi
c001474e:	68 3c a9 02 c0       	push   0xc002a93c
c0014753:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014759:	e8 82 c0 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001475e:	0f 21 d8             	mov    eax,db3
c0014761:	5f                   	pop    edi
c0014762:	5d                   	pop    ebp
c0014763:	50                   	push   eax
c0014764:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0014769:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001476f:	e8 26 c0 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0014774:	58                   	pop    eax
c0014775:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c001477a:	5a                   	pop    edx
c001477b:	68 44 a9 02 c0       	push   0xc002a944
c0014780:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014786:	e8 55 c0 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001478b:	0f 21 f0             	mov    eax,db6
c001478e:	59                   	pop    ecx
c001478f:	5e                   	pop    esi
c0014790:	50                   	push   eax
c0014791:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0014796:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001479c:	e8 f9 bf ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c00147a1:	5f                   	pop    edi
c00147a2:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c00147a7:	5d                   	pop    ebp
c00147a8:	68 4c a9 02 c0       	push   0xc002a94c
c00147ad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147b3:	e8 28 c0 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c00147b8:	0f 21 f8             	mov    eax,db7
c00147bb:	5a                   	pop    edx
c00147bc:	59                   	pop    ecx
c00147bd:	50                   	push   eax
c00147be:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c00147c3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147c9:	e8 cc bf ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c00147ce:	5e                   	pop    esi
c00147cf:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00147d2:	e8 37 86 00 00       	call   c001ce0e <Thr::getDriverNameFromAddress(unsigned long)>
c00147d7:	83 c4 10             	add    esp,0x10
c00147da:	85 c0                	test   eax,eax
c00147dc:	74 7d                	je     c001485b <displayDebugInfo(regs*)+0x48b>
c00147de:	89 c6                	mov    esi,eax
c00147e0:	50                   	push   eax
c00147e1:	50                   	push   eax
c00147e2:	56                   	push   esi
c00147e3:	68 54 a9 02 c0       	push   0xc002a954
c00147e8:	e8 48 dd ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c00147ed:	5a                   	pop    edx
c00147ee:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c00147f3:	59                   	pop    ecx
c00147f4:	68 62 a9 02 c0       	push   0xc002a962
c00147f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ff:	e8 dc bf ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0014804:	5f                   	pop    edi
c0014805:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c001480a:	5d                   	pop    ebp
c001480b:	56                   	push   esi
c001480c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014812:	e8 c9 bf ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0014817:	58                   	pop    eax
c0014818:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c001481d:	5a                   	pop    edx
c001481e:	68 6e a9 02 c0       	push   0xc002a96e
c0014823:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014829:	e8 b2 bf ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001482e:	59                   	pop    ecx
c001482f:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0014834:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c001483a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001483d:	e8 03 86 00 00       	call   c001ce45 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014842:	5b                   	pop    ebx
c0014843:	5d                   	pop    ebp
c0014844:	50                   	push   eax
c0014845:	57                   	push   edi
c0014846:	e8 4f bf ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c001484b:	58                   	pop    eax
c001484c:	5a                   	pop    edx
c001484d:	56                   	push   esi
c001484e:	68 7a a9 02 c0       	push   0xc002a97a
c0014853:	e8 dd dc ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0014858:	83 c4 10             	add    esp,0x10
c001485b:	fa                   	cli    
c001485c:	f4                   	hlt    
c001485d:	eb fe                	jmp    c001485d <displayDebugInfo(regs*)+0x48d>

c001485f <x87EmulHandler(regs*, void*)>:
c001485f:	83 ec 0c             	sub    esp,0xc
c0014862:	0f 20 c2             	mov    edx,cr0
c0014865:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001486a:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001486e:	75 4b                	jne    c00148bb <x87EmulHandler(regs*, void*)+0x5c>
c0014870:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0014875:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c001487b:	85 c0                	test   eax,eax
c001487d:	74 05                	je     c0014884 <x87EmulHandler(regs*, void*)+0x25>
c001487f:	83 e2 08             	and    edx,0x8
c0014882:	75 17                	jne    c001489b <x87EmulHandler(regs*, void*)+0x3c>
c0014884:	83 ec 0c             	sub    esp,0xc
c0014887:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001488b:	e8 4f a9 00 00       	call   c001f1df <Vm::x87Handler(regs*)>
c0014890:	83 c4 10             	add    esp,0x10
c0014893:	84 c0                	test   al,al
c0014895:	74 24                	je     c00148bb <x87EmulHandler(regs*, void*)+0x5c>
c0014897:	83 c4 0c             	add    esp,0xc
c001489a:	c3                   	ret    
c001489b:	83 ec 0c             	sub    esp,0xc
c001489e:	68 a0 a9 02 c0       	push   0xc002a9a0
c00148a3:	e8 8d dc ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c00148a8:	0f 06                	clts   
c00148aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148af:	83 c4 10             	add    esp,0x10
c00148b2:	a3 68 d7 02 c0       	mov    ds:0xc002d768,eax
c00148b7:	83 c4 0c             	add    esp,0xc
c00148ba:	c3                   	ret    
c00148bb:	83 ec 0c             	sub    esp,0xc
c00148be:	68 8a a9 02 c0       	push   0xc002a98a
c00148c3:	e8 6d dc ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c00148c8:	5a                   	pop    edx
c00148c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148cd:	e8 fe fa ff ff       	call   c00143d0 <displayDebugInfo(regs*)>

c00148d2 <gpFault(regs*, void*)>:
c00148d2:	53                   	push   ebx
c00148d3:	83 ec 14             	sub    esp,0x14
c00148d6:	c7 05 64 d7 02 c0 b8 e6 01 c0 	mov    DWORD PTR ds:0xc002d764,0xc001e6b8
c00148e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148e4:	53                   	push   ebx
c00148e5:	e8 ce 9d 00 00       	call   c001e6b8 <Vm::faultHandler(regs*)>
c00148ea:	83 c4 10             	add    esp,0x10
c00148ed:	84 c0                	test   al,al
c00148ef:	74 05                	je     c00148f6 <gpFault(regs*, void*)+0x24>
c00148f1:	83 c4 08             	add    esp,0x8
c00148f4:	5b                   	pop    ebx
c00148f5:	c3                   	ret    
c00148f6:	83 ec 0c             	sub    esp,0xc
c00148f9:	68 ad a9 02 c0       	push   0xc002a9ad
c00148fe:	e8 32 dc ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0014903:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014906:	e8 c5 fa ff ff       	call   c00143d0 <displayDebugInfo(regs*)>

c001490b <pgFault(regs*, void*)>:
c001490b:	83 ec 14             	sub    esp,0x14
c001490e:	0f 20 d0             	mov    eax,cr2
c0014911:	50                   	push   eax
c0014912:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014917:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001491a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014920:	e8 21 d8 ff ff       	call   c0012146 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014925:	83 c4 10             	add    esp,0x10
c0014928:	84 c0                	test   al,al
c001492a:	74 04                	je     c0014930 <pgFault(regs*, void*)+0x25>
c001492c:	83 c4 0c             	add    esp,0xc
c001492f:	c3                   	ret    
c0014930:	83 ec 0c             	sub    esp,0xc
c0014933:	68 c8 a9 02 c0       	push   0xc002a9c8
c0014938:	e8 f8 db ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001493d:	58                   	pop    eax
c001493e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014942:	e8 89 fa ff ff       	call   c00143d0 <displayDebugInfo(regs*)>

c0014947 <otherISRHandler(regs*, void*)>:
c0014947:	53                   	push   ebx
c0014948:	83 ec 0c             	sub    esp,0xc
c001494b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001494f:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014952:	50                   	push   eax
c0014953:	50                   	push   eax
c0014954:	68 d5 a9 02 c0       	push   0xc002a9d5
c0014959:	e8 d7 db ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001495e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014961:	e8 6a fa ff ff       	call   c00143d0 <displayDebugInfo(regs*)>

c0014966 <opcodeFault(regs*, void*)>:
c0014966:	55                   	push   ebp
c0014967:	89 e5                	mov    ebp,esp
c0014969:	56                   	push   esi
c001496a:	53                   	push   ebx
c001496b:	83 ec 40             	sub    esp,0x40
c001496e:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0014973:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014979:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001497f:	84 c0                	test   al,al
c0014981:	74 24                	je     c00149a7 <opcodeFault(regs*, void*)+0x41>
c0014983:	83 ec 0c             	sub    esp,0xc
c0014986:	68 f4 a9 02 c0       	push   0xc002a9f4
c001498b:	e8 a5 db ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0014990:	83 c4 10             	add    esp,0x10
c0014993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014996:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014999:	8d 50 19             	lea    edx,[eax+0x19]
c001499c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001499f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149a2:	e9 d5 05 00 00       	jmp    c0014f7c <opcodeFault(regs*, void*)+0x616>
c00149a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149aa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149ad:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00149b0:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00149b4:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00149b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149be:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00149c1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149c4:	8a 00                	mov    al,BYTE PTR [eax]
c00149c6:	3c f0                	cmp    al,0xf0
c00149c8:	75 17                	jne    c00149e1 <opcodeFault(regs*, void*)+0x7b>
c00149ca:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00149d3:	8d 50 01             	lea    edx,[eax+0x1]
c00149d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149d9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00149dc:	e9 da 00 00 00       	jmp    c0014abb <opcodeFault(regs*, void*)+0x155>
c00149e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149e4:	8a 00                	mov    al,BYTE PTR [eax]
c00149e6:	3c f2                	cmp    al,0xf2
c00149e8:	74 09                	je     c00149f3 <opcodeFault(regs*, void*)+0x8d>
c00149ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00149ed:	8a 00                	mov    al,BYTE PTR [eax]
c00149ef:	3c f3                	cmp    al,0xf3
c00149f1:	75 1b                	jne    c0014a0e <opcodeFault(regs*, void*)+0xa8>
c00149f3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00149f7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00149fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149fd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a00:	8d 50 01             	lea    edx,[eax+0x1]
c0014a03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a06:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a09:	e9 ad 00 00 00       	jmp    c0014abb <opcodeFault(regs*, void*)+0x155>
c0014a0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a11:	8a 00                	mov    al,BYTE PTR [eax]
c0014a13:	3c 66                	cmp    al,0x66
c0014a15:	75 1f                	jne    c0014a36 <opcodeFault(regs*, void*)+0xd0>
c0014a17:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a1b:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014a1f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a25:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a28:	8d 50 01             	lea    edx,[eax+0x1]
c0014a2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a2e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a31:	e9 85 00 00 00       	jmp    c0014abb <opcodeFault(regs*, void*)+0x155>
c0014a36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a39:	8a 00                	mov    al,BYTE PTR [eax]
c0014a3b:	3c 67                	cmp    al,0x67
c0014a3d:	75 18                	jne    c0014a57 <opcodeFault(regs*, void*)+0xf1>
c0014a3f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a43:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a49:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a4c:	8d 50 01             	lea    edx,[eax+0x1]
c0014a4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a52:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a55:	eb 64                	jmp    c0014abb <opcodeFault(regs*, void*)+0x155>
c0014a57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a5a:	8a 00                	mov    al,BYTE PTR [eax]
c0014a5c:	3c 2e                	cmp    al,0x2e
c0014a5e:	74 09                	je     c0014a69 <opcodeFault(regs*, void*)+0x103>
c0014a60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a63:	8a 00                	mov    al,BYTE PTR [eax]
c0014a65:	3c 3e                	cmp    al,0x3e
c0014a67:	75 18                	jne    c0014a81 <opcodeFault(regs*, void*)+0x11b>
c0014a69:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014a6d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a73:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a76:	8d 50 01             	lea    edx,[eax+0x1]
c0014a79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a7c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a7f:	eb 3a                	jmp    c0014abb <opcodeFault(regs*, void*)+0x155>
c0014a81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a84:	8a 00                	mov    al,BYTE PTR [eax]
c0014a86:	3c 36                	cmp    al,0x36
c0014a88:	74 1b                	je     c0014aa5 <opcodeFault(regs*, void*)+0x13f>
c0014a8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a8d:	8a 00                	mov    al,BYTE PTR [eax]
c0014a8f:	3c 26                	cmp    al,0x26
c0014a91:	74 12                	je     c0014aa5 <opcodeFault(regs*, void*)+0x13f>
c0014a93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a96:	8a 00                	mov    al,BYTE PTR [eax]
c0014a98:	3c 64                	cmp    al,0x64
c0014a9a:	74 09                	je     c0014aa5 <opcodeFault(regs*, void*)+0x13f>
c0014a9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a9f:	8a 00                	mov    al,BYTE PTR [eax]
c0014aa1:	3c 65                	cmp    al,0x65
c0014aa3:	75 16                	jne    c0014abb <opcodeFault(regs*, void*)+0x155>
c0014aa5:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014aa9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aaf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ab2:	8d 50 01             	lea    edx,[eax+0x1]
c0014ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014abb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014abe:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac0:	3c 0f                	cmp    al,0xf
c0014ac2:	0f 85 ad 00 00 00    	jne    c0014b75 <opcodeFault(regs*, void*)+0x20f>
c0014ac8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014acb:	40                   	inc    eax
c0014acc:	8a 00                	mov    al,BYTE PTR [eax]
c0014ace:	3c c2                	cmp    al,0xc2
c0014ad0:	74 0e                	je     c0014ae0 <opcodeFault(regs*, void*)+0x17a>
c0014ad2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ad5:	40                   	inc    eax
c0014ad6:	8a 00                	mov    al,BYTE PTR [eax]
c0014ad8:	3c c3                	cmp    al,0xc3
c0014ada:	0f 85 95 00 00 00    	jne    c0014b75 <opcodeFault(regs*, void*)+0x20f>
c0014ae0:	83 ec 0c             	sub    esp,0xc
c0014ae3:	68 17 aa 02 c0       	push   0xc002aa17
c0014ae8:	e8 48 da ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0014aed:	83 c4 10             	add    esp,0x10
c0014af0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014af6:	8d 50 01             	lea    edx,[eax+0x1]
c0014af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014afc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014aff:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b05:	8a 00                	mov    al,BYTE PTR [eax]
c0014b07:	8d 50 fe             	lea    edx,[eax-0x2]
c0014b0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b0d:	88 10                	mov    BYTE PTR [eax],dl
c0014b0f:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014b12:	50                   	push   eax
c0014b13:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014b16:	50                   	push   eax
c0014b17:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014b1a:	50                   	push   eax
c0014b1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014b1e:	e8 8b 48 00 00       	call   c00193ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014b23:	83 c4 10             	add    esp,0x10
c0014b26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b29:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b2c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b2f:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014b32:	01 d0                	add    eax,edx
c0014b34:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b3a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b3d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014b40:	48                   	dec    eax
c0014b41:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014b44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b47:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014b4a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b50:	83 ec 04             	sub    esp,0x4
c0014b53:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014b56:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014b59:	50                   	push   eax
c0014b5a:	e8 55 b6 fe ff       	call   c00001b4 <voodooXADD>
c0014b5f:	83 c4 10             	add    esp,0x10
c0014b62:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014b65:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014b68:	01 c2                	add    edx,eax
c0014b6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b6d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b70:	e9 07 04 00 00       	jmp    c0014f7c <opcodeFault(regs*, void*)+0x616>
c0014b75:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b78:	8a 00                	mov    al,BYTE PTR [eax]
c0014b7a:	3c 0f                	cmp    al,0xf
c0014b7c:	0f 85 8b 01 00 00    	jne    c0014d0d <opcodeFault(regs*, void*)+0x3a7>
c0014b82:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b85:	40                   	inc    eax
c0014b86:	8a 00                	mov    al,BYTE PTR [eax]
c0014b88:	3c c7                	cmp    al,0xc7
c0014b8a:	0f 86 7d 01 00 00    	jbe    c0014d0d <opcodeFault(regs*, void*)+0x3a7>
c0014b90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b93:	40                   	inc    eax
c0014b94:	8a 00                	mov    al,BYTE PTR [eax]
c0014b96:	3c cf                	cmp    al,0xcf
c0014b98:	0f 87 6f 01 00 00    	ja     c0014d0d <opcodeFault(regs*, void*)+0x3a7>
c0014b9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ba1:	40                   	inc    eax
c0014ba2:	8a 00                	mov    al,BYTE PTR [eax]
c0014ba4:	83 c0 38             	add    eax,0x38
c0014ba7:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014baa:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014bae:	75 0b                	jne    c0014bbb <opcodeFault(regs*, void*)+0x255>
c0014bb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014bb6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bb9:	eb 75                	jmp    c0014c30 <opcodeFault(regs*, void*)+0x2ca>
c0014bbb:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014bbf:	75 0b                	jne    c0014bcc <opcodeFault(regs*, void*)+0x266>
c0014bc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014bc7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bca:	eb 64                	jmp    c0014c30 <opcodeFault(regs*, void*)+0x2ca>
c0014bcc:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014bd0:	75 0b                	jne    c0014bdd <opcodeFault(regs*, void*)+0x277>
c0014bd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd5:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014bd8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bdb:	eb 53                	jmp    c0014c30 <opcodeFault(regs*, void*)+0x2ca>
c0014bdd:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014be1:	75 0b                	jne    c0014bee <opcodeFault(regs*, void*)+0x288>
c0014be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014be9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bec:	eb 42                	jmp    c0014c30 <opcodeFault(regs*, void*)+0x2ca>
c0014bee:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014bf2:	75 0b                	jne    c0014bff <opcodeFault(regs*, void*)+0x299>
c0014bf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bf7:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014bfa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014bfd:	eb 31                	jmp    c0014c30 <opcodeFault(regs*, void*)+0x2ca>
c0014bff:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014c03:	75 0b                	jne    c0014c10 <opcodeFault(regs*, void*)+0x2aa>
c0014c05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c08:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014c0b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c0e:	eb 20                	jmp    c0014c30 <opcodeFault(regs*, void*)+0x2ca>
c0014c10:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014c14:	75 0b                	jne    c0014c21 <opcodeFault(regs*, void*)+0x2bb>
c0014c16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c19:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014c1c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c1f:	eb 0f                	jmp    c0014c30 <opcodeFault(regs*, void*)+0x2ca>
c0014c21:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014c25:	75 09                	jne    c0014c30 <opcodeFault(regs*, void*)+0x2ca>
c0014c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c2a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014c2d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c30:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014c34:	74 10                	je     c0014c46 <opcodeFault(regs*, void*)+0x2e0>
c0014c36:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014c3d:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014c44:	eb 2d                	jmp    c0014c73 <opcodeFault(regs*, void*)+0x30d>
c0014c46:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c49:	c1 e0 18             	shl    eax,0x18
c0014c4c:	89 c2                	mov    edx,eax
c0014c4e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c51:	c1 e0 08             	shl    eax,0x8
c0014c54:	25 00 00 ff 00       	and    eax,0xff0000
c0014c59:	09 c2                	or     edx,eax
c0014c5b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c5e:	c1 e8 08             	shr    eax,0x8
c0014c61:	25 00 ff 00 00       	and    eax,0xff00
c0014c66:	09 c2                	or     edx,eax
c0014c68:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014c6b:	c1 e8 18             	shr    eax,0x18
c0014c6e:	09 d0                	or     eax,edx
c0014c70:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014c73:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014c77:	75 0b                	jne    c0014c84 <opcodeFault(regs*, void*)+0x31e>
c0014c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c7f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014c82:	eb 75                	jmp    c0014cf9 <opcodeFault(regs*, void*)+0x393>
c0014c84:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014c88:	75 0b                	jne    c0014c95 <opcodeFault(regs*, void*)+0x32f>
c0014c8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c8d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014c90:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014c93:	eb 64                	jmp    c0014cf9 <opcodeFault(regs*, void*)+0x393>
c0014c95:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014c99:	75 0b                	jne    c0014ca6 <opcodeFault(regs*, void*)+0x340>
c0014c9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c9e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ca1:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014ca4:	eb 53                	jmp    c0014cf9 <opcodeFault(regs*, void*)+0x393>
c0014ca6:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014caa:	75 0b                	jne    c0014cb7 <opcodeFault(regs*, void*)+0x351>
c0014cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014caf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cb2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014cb5:	eb 42                	jmp    c0014cf9 <opcodeFault(regs*, void*)+0x393>
c0014cb7:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014cbb:	75 0b                	jne    c0014cc8 <opcodeFault(regs*, void*)+0x362>
c0014cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cc3:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014cc6:	eb 31                	jmp    c0014cf9 <opcodeFault(regs*, void*)+0x393>
c0014cc8:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014ccc:	75 0b                	jne    c0014cd9 <opcodeFault(regs*, void*)+0x373>
c0014cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cd4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014cd7:	eb 20                	jmp    c0014cf9 <opcodeFault(regs*, void*)+0x393>
c0014cd9:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014cdd:	75 0b                	jne    c0014cea <opcodeFault(regs*, void*)+0x384>
c0014cdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ce2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ce5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014ce8:	eb 0f                	jmp    c0014cf9 <opcodeFault(regs*, void*)+0x393>
c0014cea:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014cee:	75 09                	jne    c0014cf9 <opcodeFault(regs*, void*)+0x393>
c0014cf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014cf6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014cf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cfc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cff:	8d 50 02             	lea    edx,[eax+0x2]
c0014d02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d05:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d08:	e9 6f 02 00 00       	jmp    c0014f7c <opcodeFault(regs*, void*)+0x616>
c0014d0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d10:	8a 00                	mov    al,BYTE PTR [eax]
c0014d12:	3c 0f                	cmp    al,0xf
c0014d14:	0f 85 8d 01 00 00    	jne    c0014ea7 <opcodeFault(regs*, void*)+0x541>
c0014d1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d1d:	40                   	inc    eax
c0014d1e:	8a 00                	mov    al,BYTE PTR [eax]
c0014d20:	3c c7                	cmp    al,0xc7
c0014d22:	0f 85 7f 01 00 00    	jne    c0014ea7 <opcodeFault(regs*, void*)+0x541>
c0014d28:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d31:	8d 50 01             	lea    edx,[eax+0x1]
c0014d34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d37:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d3a:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014d3d:	50                   	push   eax
c0014d3e:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014d41:	50                   	push   eax
c0014d42:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014d45:	50                   	push   eax
c0014d46:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014d49:	e8 60 46 00 00       	call   c00193ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014d4e:	83 c4 10             	add    esp,0x10
c0014d51:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014d54:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014d57:	83 f0 01             	xor    eax,0x1
c0014d5a:	84 c0                	test   al,al
c0014d5c:	0f 84 45 01 00 00    	je     c0014ea7 <opcodeFault(regs*, void*)+0x541>
c0014d62:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014d65:	3c 01                	cmp    al,0x1
c0014d67:	0f 85 3a 01 00 00    	jne    c0014ea7 <opcodeFault(regs*, void*)+0x541>
c0014d6d:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014d70:	83 f0 01             	xor    eax,0x1
c0014d73:	84 c0                	test   al,al
c0014d75:	0f 84 2c 01 00 00    	je     c0014ea7 <opcodeFault(regs*, void*)+0x541>
c0014d7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d81:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d84:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014d8b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014d8e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014d91:	89 c2                	mov    edx,eax
c0014d93:	b8 00 00 00 00       	mov    eax,0x0
c0014d98:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014d9b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014d9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014da4:	ba 00 00 00 00       	mov    edx,0x0
c0014da9:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014dac:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014daf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014db5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014db8:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014dbf:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014dc2:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014dc5:	89 c2                	mov    edx,eax
c0014dc7:	b8 00 00 00 00       	mov    eax,0x0
c0014dcc:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014dcf:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014dd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014dd8:	ba 00 00 00 00       	mov    edx,0x0
c0014ddd:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014de0:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014de3:	fa                   	cli    
c0014de4:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0014de9:	40                   	inc    eax
c0014dea:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c0014def:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014df2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014df5:	8b 00                	mov    eax,DWORD PTR [eax]
c0014df7:	89 c1                	mov    ecx,eax
c0014df9:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014dfc:	89 cb                	mov    ebx,ecx
c0014dfe:	89 d0                	mov    eax,edx
c0014e00:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014e03:	89 c6                	mov    esi,eax
c0014e05:	89 f0                	mov    eax,esi
c0014e07:	09 d8                	or     eax,ebx
c0014e09:	85 c0                	test   eax,eax
c0014e0b:	75 21                	jne    c0014e2e <opcodeFault(regs*, void*)+0x4c8>
c0014e0d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014e10:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014e13:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014e16:	89 01                	mov    DWORD PTR [ecx],eax
c0014e18:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014e1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e21:	83 c8 40             	or     eax,0x40
c0014e24:	89 c2                	mov    edx,eax
c0014e26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e29:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e2c:	eb 3e                	jmp    c0014e6c <opcodeFault(regs*, void*)+0x506>
c0014e2e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014e31:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e36:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014e39:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014e3c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014e3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e42:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e45:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014e48:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014e4b:	89 d0                	mov    eax,edx
c0014e4d:	31 d2                	xor    edx,edx
c0014e4f:	89 c3                	mov    ebx,eax
c0014e51:	89 d6                	mov    esi,edx
c0014e53:	89 da                	mov    edx,ebx
c0014e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e58:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e61:	83 e0 bf             	and    eax,0xffffffbf
c0014e64:	89 c2                	mov    edx,eax
c0014e66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e69:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014e6c:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0014e71:	48                   	dec    eax
c0014e72:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c0014e77:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0014e7c:	85 c0                	test   eax,eax
c0014e7e:	75 01                	jne    c0014e81 <opcodeFault(regs*, void*)+0x51b>
c0014e80:	fb                   	sti    
c0014e81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e84:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e87:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014e8a:	01 c2                	add    edx,eax
c0014e8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e92:	83 ec 0c             	sub    esp,0xc
c0014e95:	68 26 aa 02 c0       	push   0xc002aa26
c0014e9a:	e8 96 d6 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0014e9f:	83 c4 10             	add    esp,0x10
c0014ea2:	e9 d5 00 00 00       	jmp    c0014f7c <opcodeFault(regs*, void*)+0x616>
c0014ea7:	83 ec 0c             	sub    esp,0xc
c0014eaa:	68 39 aa 02 c0       	push   0xc002aa39
c0014eaf:	e8 81 d6 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0014eb4:	83 c4 10             	add    esp,0x10
c0014eb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eba:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ebd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ec3:	c1 e0 04             	shl    eax,0x4
c0014ec6:	01 d0                	add    eax,edx
c0014ec8:	83 c0 03             	add    eax,0x3
c0014ecb:	8a 00                	mov    al,BYTE PTR [eax]
c0014ecd:	0f b6 d8             	movzx  ebx,al
c0014ed0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014edc:	c1 e0 04             	shl    eax,0x4
c0014edf:	01 d0                	add    eax,edx
c0014ee1:	83 c0 02             	add    eax,0x2
c0014ee4:	8a 00                	mov    al,BYTE PTR [eax]
c0014ee6:	0f b6 c8             	movzx  ecx,al
c0014ee9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eec:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ef5:	c1 e0 04             	shl    eax,0x4
c0014ef8:	01 d0                	add    eax,edx
c0014efa:	40                   	inc    eax
c0014efb:	8a 00                	mov    al,BYTE PTR [eax]
c0014efd:	0f b6 d0             	movzx  edx,al
c0014f00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f03:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014f06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f09:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f0c:	c1 e0 04             	shl    eax,0x4
c0014f0f:	01 f0                	add    eax,esi
c0014f11:	8a 00                	mov    al,BYTE PTR [eax]
c0014f13:	0f b6 c0             	movzx  eax,al
c0014f16:	83 ec 0c             	sub    esp,0xc
c0014f19:	53                   	push   ebx
c0014f1a:	51                   	push   ecx
c0014f1b:	52                   	push   edx
c0014f1c:	50                   	push   eax
c0014f1d:	68 4c aa 02 c0       	push   0xc002aa4c
c0014f22:	e8 0e d6 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0014f27:	83 c4 20             	add    esp,0x20
c0014f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f30:	83 c0 03             	add    eax,0x3
c0014f33:	8a 00                	mov    al,BYTE PTR [eax]
c0014f35:	0f b6 d8             	movzx  ebx,al
c0014f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f3e:	83 c0 02             	add    eax,0x2
c0014f41:	8a 00                	mov    al,BYTE PTR [eax]
c0014f43:	0f b6 c8             	movzx  ecx,al
c0014f46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f49:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f4c:	40                   	inc    eax
c0014f4d:	8a 00                	mov    al,BYTE PTR [eax]
c0014f4f:	0f b6 d0             	movzx  edx,al
c0014f52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f55:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f58:	8a 00                	mov    al,BYTE PTR [eax]
c0014f5a:	0f b6 c0             	movzx  eax,al
c0014f5d:	83 ec 0c             	sub    esp,0xc
c0014f60:	53                   	push   ebx
c0014f61:	51                   	push   ecx
c0014f62:	52                   	push   edx
c0014f63:	50                   	push   eax
c0014f64:	68 74 aa 02 c0       	push   0xc002aa74
c0014f69:	e8 c7 d5 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0014f6e:	83 c4 20             	add    esp,0x20
c0014f71:	83 ec 0c             	sub    esp,0xc
c0014f74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014f77:	e8 54 f4 ff ff       	call   c00143d0 <displayDebugInfo(regs*)>
c0014f7c:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014f7f:	5b                   	pop    ebx
c0014f80:	5e                   	pop    esi
c0014f81:	5d                   	pop    ebp
c0014f82:	c3                   	ret    

c0014f83 <displayProgramFault(char const*)>:
c0014f83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f88:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f8b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014f91:	85 c0                	test   eax,eax
c0014f93:	74 15                	je     c0014faa <displayProgramFault(char const*)+0x27>
c0014f95:	83 ec 0c             	sub    esp,0xc
c0014f98:	6a 04                	push   0x4
c0014f9a:	6a 0f                	push   0xf
c0014f9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014fa0:	50                   	push   eax
c0014fa1:	e8 36 b5 ff ff       	call   c00104dc <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014fa6:	83 c4 1c             	add    esp,0x1c
c0014fa9:	c3                   	ret    
c0014faa:	c3                   	ret    

c0014fab <setupInterruptController()>:
c0014fab:	55                   	push   ebp
c0014fac:	89 e5                	mov    ebp,esp
c0014fae:	53                   	push   ebx
c0014faf:	83 ec 24             	sub    esp,0x24
c0014fb2:	b8 00 00 00 00       	mov    eax,0x0
c0014fb7:	85 c0                	test   eax,eax
c0014fb9:	0f 95 c0             	setne  al
c0014fbc:	84 c0                	test   al,al
c0014fbe:	74 5b                	je     c001501b <setupInterruptController()+0x70>
c0014fc0:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0014fc7:	83 ec 0c             	sub    esp,0xc
c0014fca:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0014fcd:	e8 c7 a5 ff ff       	call   c000f599 <malloc>
c0014fd2:	83 c4 10             	add    esp,0x10
c0014fd5:	89 c3                	mov    ebx,eax
c0014fd7:	83 ec 0c             	sub    esp,0xc
c0014fda:	53                   	push   ebx
c0014fdb:	e8 fc 04 01 00       	call   c00254dc <APIC::APIC()>
c0014fe0:	83 c4 10             	add    esp,0x10
c0014fe3:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014fe6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014fe9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014fec:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fee:	83 c0 08             	add    eax,0x8
c0014ff1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ff3:	6a 00                	push   0x0
c0014ff5:	6a 00                	push   0x0
c0014ff7:	6a 00                	push   0x0
c0014ff9:	52                   	push   edx
c0014ffa:	ff d0                	call   eax
c0014ffc:	83 c4 10             	add    esp,0x10
c0014fff:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0015004:	83 ec 08             	sub    esp,0x8
c0015007:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001500a:	50                   	push   eax
c001500b:	e8 5e e9 ff ff       	call   c001396e <Device::addChild(Device*)>
c0015010:	83 c4 10             	add    esp,0x10
c0015013:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015016:	e9 79 03 00 00       	jmp    c0015394 <setupInterruptController()+0x3e9>
c001501b:	a0 60 ff 02 c0       	mov    al,ds:0xc002ff60
c0015020:	84 c0                	test   al,al
c0015022:	75 14                	jne    c0015038 <setupInterruptController()+0x8d>
c0015024:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0015029:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001502f:	83 e2 fe             	and    edx,0xfffffffe
c0015032:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015038:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c001503d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015043:	83 e0 01             	and    eax,0x1
c0015046:	84 c0                	test   al,al
c0015048:	0f 95 c0             	setne  al
c001504b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001504e:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015055:	83 ec 0c             	sub    esp,0xc
c0015058:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001505b:	e8 39 a5 ff ff       	call   c000f599 <malloc>
c0015060:	83 c4 10             	add    esp,0x10
c0015063:	89 c3                	mov    ebx,eax
c0015065:	83 ec 0c             	sub    esp,0xc
c0015068:	53                   	push   ebx
c0015069:	e8 c6 09 01 00       	call   c0025a34 <PIC::PIC()>
c001506e:	83 c4 10             	add    esp,0x10
c0015071:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015074:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015077:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001507a:	8b 00                	mov    eax,DWORD PTR [eax]
c001507c:	83 c0 08             	add    eax,0x8
c001507f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015081:	6a 00                	push   0x0
c0015083:	6a 00                	push   0x0
c0015085:	6a 00                	push   0x0
c0015087:	52                   	push   edx
c0015088:	ff d0                	call   eax
c001508a:	83 c4 10             	add    esp,0x10
c001508d:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015091:	74 73                	je     c0015106 <setupInterruptController()+0x15b>
c0015093:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015096:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015099:	8b 00                	mov    eax,DWORD PTR [eax]
c001509b:	83 c0 0c             	add    eax,0xc
c001509e:	8b 00                	mov    eax,DWORD PTR [eax]
c00150a0:	6a 00                	push   0x0
c00150a2:	6a 00                	push   0x0
c00150a4:	6a 00                	push   0x0
c00150a6:	52                   	push   edx
c00150a7:	ff d0                	call   eax
c00150a9:	83 c4 10             	add    esp,0x10
c00150ac:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00150b0:	74 15                	je     c00150c7 <setupInterruptController()+0x11c>
c00150b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b7:	83 c0 04             	add    eax,0x4
c00150ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00150bc:	83 ec 0c             	sub    esp,0xc
c00150bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00150c2:	ff d0                	call   eax
c00150c4:	83 c4 10             	add    esp,0x10
c00150c7:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00150ce:	83 ec 0c             	sub    esp,0xc
c00150d1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00150d4:	e8 c0 a4 ff ff       	call   c000f599 <malloc>
c00150d9:	83 c4 10             	add    esp,0x10
c00150dc:	89 c3                	mov    ebx,eax
c00150de:	83 ec 0c             	sub    esp,0xc
c00150e1:	53                   	push   ebx
c00150e2:	e8 f5 03 01 00       	call   c00254dc <APIC::APIC()>
c00150e7:	83 c4 10             	add    esp,0x10
c00150ea:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00150ed:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00150f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00150f5:	83 c0 08             	add    eax,0x8
c00150f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00150fa:	6a 00                	push   0x0
c00150fc:	6a 00                	push   0x0
c00150fe:	6a 00                	push   0x0
c0015100:	52                   	push   edx
c0015101:	ff d0                	call   eax
c0015103:	83 c4 10             	add    esp,0x10
c0015106:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c001510b:	83 ec 08             	sub    esp,0x8
c001510e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015111:	50                   	push   eax
c0015112:	e8 57 e8 ff ff       	call   c001396e <Device::addChild(Device*)>
c0015117:	83 c4 10             	add    esp,0x10
c001511a:	c7 05 68 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d768,0x0
c0015124:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015127:	8b 00                	mov    eax,DWORD PTR [eax]
c0015129:	83 c0 24             	add    eax,0x24
c001512c:	8b 00                	mov    eax,DWORD PTR [eax]
c001512e:	6a 00                	push   0x0
c0015130:	68 47 49 01 c0       	push   0xc0014947
c0015135:	6a 00                	push   0x0
c0015137:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001513a:	ff d0                	call   eax
c001513c:	83 c4 10             	add    esp,0x10
c001513f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015142:	8b 00                	mov    eax,DWORD PTR [eax]
c0015144:	83 c0 24             	add    eax,0x24
c0015147:	8b 00                	mov    eax,DWORD PTR [eax]
c0015149:	6a 00                	push   0x0
c001514b:	68 47 49 01 c0       	push   0xc0014947
c0015150:	6a 01                	push   0x1
c0015152:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015155:	ff d0                	call   eax
c0015157:	83 c4 10             	add    esp,0x10
c001515a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001515d:	8b 00                	mov    eax,DWORD PTR [eax]
c001515f:	83 c0 24             	add    eax,0x24
c0015162:	8b 00                	mov    eax,DWORD PTR [eax]
c0015164:	6a 00                	push   0x0
c0015166:	68 2d 42 01 c0       	push   0xc001422d
c001516b:	6a 02                	push   0x2
c001516d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015170:	ff d0                	call   eax
c0015172:	83 c4 10             	add    esp,0x10
c0015175:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015178:	8b 00                	mov    eax,DWORD PTR [eax]
c001517a:	83 c0 24             	add    eax,0x24
c001517d:	8b 00                	mov    eax,DWORD PTR [eax]
c001517f:	6a 00                	push   0x0
c0015181:	68 47 49 01 c0       	push   0xc0014947
c0015186:	6a 03                	push   0x3
c0015188:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001518b:	ff d0                	call   eax
c001518d:	83 c4 10             	add    esp,0x10
c0015190:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015193:	8b 00                	mov    eax,DWORD PTR [eax]
c0015195:	83 c0 24             	add    eax,0x24
c0015198:	8b 00                	mov    eax,DWORD PTR [eax]
c001519a:	6a 00                	push   0x0
c001519c:	68 47 49 01 c0       	push   0xc0014947
c00151a1:	6a 04                	push   0x4
c00151a3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151a6:	ff d0                	call   eax
c00151a8:	83 c4 10             	add    esp,0x10
c00151ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b0:	83 c0 24             	add    eax,0x24
c00151b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00151b5:	6a 00                	push   0x0
c00151b7:	68 47 49 01 c0       	push   0xc0014947
c00151bc:	6a 05                	push   0x5
c00151be:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151c1:	ff d0                	call   eax
c00151c3:	83 c4 10             	add    esp,0x10
c00151c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00151cb:	83 c0 24             	add    eax,0x24
c00151ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d0:	6a 00                	push   0x0
c00151d2:	68 66 49 01 c0       	push   0xc0014966
c00151d7:	6a 06                	push   0x6
c00151d9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151dc:	ff d0                	call   eax
c00151de:	83 c4 10             	add    esp,0x10
c00151e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e6:	83 c0 24             	add    eax,0x24
c00151e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00151eb:	6a 00                	push   0x0
c00151ed:	68 5f 48 01 c0       	push   0xc001485f
c00151f2:	6a 07                	push   0x7
c00151f4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151f7:	ff d0                	call   eax
c00151f9:	83 c4 10             	add    esp,0x10
c00151fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015201:	83 c0 24             	add    eax,0x24
c0015204:	8b 00                	mov    eax,DWORD PTR [eax]
c0015206:	6a 00                	push   0x0
c0015208:	68 48 40 01 c0       	push   0xc0014048
c001520d:	6a 08                	push   0x8
c001520f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015212:	ff d0                	call   eax
c0015214:	83 c4 10             	add    esp,0x10
c0015217:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001521a:	8b 00                	mov    eax,DWORD PTR [eax]
c001521c:	83 c0 24             	add    eax,0x24
c001521f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015221:	6a 00                	push   0x0
c0015223:	68 47 49 01 c0       	push   0xc0014947
c0015228:	6a 09                	push   0x9
c001522a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001522d:	ff d0                	call   eax
c001522f:	83 c4 10             	add    esp,0x10
c0015232:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015235:	8b 00                	mov    eax,DWORD PTR [eax]
c0015237:	83 c0 24             	add    eax,0x24
c001523a:	8b 00                	mov    eax,DWORD PTR [eax]
c001523c:	6a 00                	push   0x0
c001523e:	68 47 49 01 c0       	push   0xc0014947
c0015243:	6a 0a                	push   0xa
c0015245:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015248:	ff d0                	call   eax
c001524a:	83 c4 10             	add    esp,0x10
c001524d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015250:	8b 00                	mov    eax,DWORD PTR [eax]
c0015252:	83 c0 24             	add    eax,0x24
c0015255:	8b 00                	mov    eax,DWORD PTR [eax]
c0015257:	6a 00                	push   0x0
c0015259:	68 47 49 01 c0       	push   0xc0014947
c001525e:	6a 0b                	push   0xb
c0015260:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015263:	ff d0                	call   eax
c0015265:	83 c4 10             	add    esp,0x10
c0015268:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001526b:	8b 00                	mov    eax,DWORD PTR [eax]
c001526d:	83 c0 24             	add    eax,0x24
c0015270:	8b 00                	mov    eax,DWORD PTR [eax]
c0015272:	6a 00                	push   0x0
c0015274:	68 47 49 01 c0       	push   0xc0014947
c0015279:	6a 0c                	push   0xc
c001527b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001527e:	ff d0                	call   eax
c0015280:	83 c4 10             	add    esp,0x10
c0015283:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015286:	8b 00                	mov    eax,DWORD PTR [eax]
c0015288:	83 c0 24             	add    eax,0x24
c001528b:	8b 00                	mov    eax,DWORD PTR [eax]
c001528d:	6a 00                	push   0x0
c001528f:	68 d2 48 01 c0       	push   0xc00148d2
c0015294:	6a 0d                	push   0xd
c0015296:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015299:	ff d0                	call   eax
c001529b:	83 c4 10             	add    esp,0x10
c001529e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a3:	83 c0 24             	add    eax,0x24
c00152a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a8:	6a 00                	push   0x0
c00152aa:	68 0b 49 01 c0       	push   0xc001490b
c00152af:	6a 0e                	push   0xe
c00152b1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152b4:	ff d0                	call   eax
c00152b6:	83 c4 10             	add    esp,0x10
c00152b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00152be:	83 c0 24             	add    eax,0x24
c00152c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c3:	6a 00                	push   0x0
c00152c5:	68 47 49 01 c0       	push   0xc0014947
c00152ca:	6a 0f                	push   0xf
c00152cc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152cf:	ff d0                	call   eax
c00152d1:	83 c4 10             	add    esp,0x10
c00152d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d9:	83 c0 24             	add    eax,0x24
c00152dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00152de:	6a 00                	push   0x0
c00152e0:	68 47 49 01 c0       	push   0xc0014947
c00152e5:	6a 10                	push   0x10
c00152e7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152ea:	ff d0                	call   eax
c00152ec:	83 c4 10             	add    esp,0x10
c00152ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f4:	83 c0 24             	add    eax,0x24
c00152f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f9:	6a 00                	push   0x0
c00152fb:	68 47 49 01 c0       	push   0xc0014947
c0015300:	6a 11                	push   0x11
c0015302:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015305:	ff d0                	call   eax
c0015307:	83 c4 10             	add    esp,0x10
c001530a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530d:	8b 00                	mov    eax,DWORD PTR [eax]
c001530f:	83 c0 24             	add    eax,0x24
c0015312:	8b 00                	mov    eax,DWORD PTR [eax]
c0015314:	6a 00                	push   0x0
c0015316:	68 47 49 01 c0       	push   0xc0014947
c001531b:	6a 12                	push   0x12
c001531d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015320:	ff d0                	call   eax
c0015322:	83 c4 10             	add    esp,0x10
c0015325:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015328:	8b 00                	mov    eax,DWORD PTR [eax]
c001532a:	83 c0 24             	add    eax,0x24
c001532d:	8b 00                	mov    eax,DWORD PTR [eax]
c001532f:	6a 00                	push   0x0
c0015331:	68 47 49 01 c0       	push   0xc0014947
c0015336:	6a 13                	push   0x13
c0015338:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001533b:	ff d0                	call   eax
c001533d:	83 c4 10             	add    esp,0x10
c0015340:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015343:	8b 00                	mov    eax,DWORD PTR [eax]
c0015345:	83 c0 24             	add    eax,0x24
c0015348:	8b 00                	mov    eax,DWORD PTR [eax]
c001534a:	6a 00                	push   0x0
c001534c:	68 47 49 01 c0       	push   0xc0014947
c0015351:	6a 14                	push   0x14
c0015353:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015356:	ff d0                	call   eax
c0015358:	83 c4 10             	add    esp,0x10
c001535b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015360:	83 c0 24             	add    eax,0x24
c0015363:	8b 00                	mov    eax,DWORD PTR [eax]
c0015365:	6a 00                	push   0x0
c0015367:	68 47 49 01 c0       	push   0xc0014947
c001536c:	6a 1e                	push   0x1e
c001536e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015371:	ff d0                	call   eax
c0015373:	83 c4 10             	add    esp,0x10
c0015376:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015379:	8b 00                	mov    eax,DWORD PTR [eax]
c001537b:	83 c0 24             	add    eax,0x24
c001537e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015380:	6a 00                	push   0x0
c0015382:	68 84 be 01 c0       	push   0xc001be84
c0015387:	6a 60                	push   0x60
c0015389:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001538c:	ff d0                	call   eax
c001538e:	83 c4 10             	add    esp,0x10
c0015391:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015394:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015397:	c9                   	leave  
c0015398:	c3                   	ret    
c0015399:	90                   	nop

c001539a <InterruptController::convertLegacyIRQNumber(int)>:
c001539a:	55                   	push   ebp
c001539b:	89 e5                	mov    ebp,esp
c001539d:	83 ec 08             	sub    esp,0x8
c00153a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a3:	83 ec 0c             	sub    esp,0xc
c00153a6:	50                   	push   eax
c00153a7:	e8 c2 e8 ff ff       	call   c0013c6e <Device::getName()>
c00153ac:	83 c4 10             	add    esp,0x10
c00153af:	8a 00                	mov    al,BYTE PTR [eax]
c00153b1:	3c 41                	cmp    al,0x41
c00153b3:	0f 94 c0             	sete   al
c00153b6:	84 c0                	test   al,al
c00153b8:	74 28                	je     c00153e2 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00153ba:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00153be:	7f 12                	jg     c00153d2 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c00153c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00153c3:	05 40 c8 02 c0       	add    eax,0xc002c840
c00153c8:	8a 00                	mov    al,BYTE PTR [eax]
c00153ca:	0f b6 c0             	movzx  eax,al
c00153cd:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00153d0:	eb 10                	jmp    c00153e2 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00153d2:	83 ec 0c             	sub    esp,0xc
c00153d5:	68 9c aa 02 c0       	push   0xc002aa9c
c00153da:	e8 b6 48 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c00153df:	83 c4 10             	add    esp,0x10
c00153e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00153e5:	c9                   	leave  
c00153e6:	c3                   	ret    
c00153e7:	90                   	nop

c00153e8 <startGUI(void*)>:
c00153e8:	55                   	push   ebp
c00153e9:	89 e5                	mov    ebp,esp
c00153eb:	53                   	push   ebx
c00153ec:	83 ec 04             	sub    esp,0x4
c00153ef:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c00153f4:	48                   	dec    eax
c00153f5:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c00153fa:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c00153ff:	85 c0                	test   eax,eax
c0015401:	75 01                	jne    c0015404 <startGUI(void*)+0x1c>
c0015403:	fb                   	sti    
c0015404:	8b 1d e8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5e8
c001540a:	83 ec 08             	sub    esp,0x8
c001540d:	6a 01                	push   0x1
c001540f:	68 1c ab 02 c0       	push   0xc002ab1c
c0015414:	e8 46 7a 00 00       	call   c001ce5f <Thr::loadDLL(char const*, bool)>
c0015419:	83 c4 10             	add    esp,0x10
c001541c:	83 ec 08             	sub    esp,0x8
c001541f:	53                   	push   ebx
c0015420:	50                   	push   eax
c0015421:	e8 64 7c 00 00       	call   c001d08a <Thr::executeDLL(unsigned long, void*)>
c0015426:	83 c4 10             	add    esp,0x10
c0015429:	8b 1d e8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5e8
c001542f:	83 ec 08             	sub    esp,0x8
c0015432:	6a 01                	push   0x1
c0015434:	68 36 ab 02 c0       	push   0xc002ab36
c0015439:	e8 21 7a 00 00       	call   c001ce5f <Thr::loadDLL(char const*, bool)>
c001543e:	83 c4 10             	add    esp,0x10
c0015441:	83 ec 08             	sub    esp,0x8
c0015444:	53                   	push   ebx
c0015445:	50                   	push   eax
c0015446:	e8 3f 7c 00 00       	call   c001d08a <Thr::executeDLL(unsigned long, void*)>
c001544b:	83 c4 10             	add    esp,0x10
c001544e:	90                   	nop
c001544f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015452:	c9                   	leave  
c0015453:	c3                   	ret    

c0015454 <startGUIVESA(void*)>:
c0015454:	55                   	push   ebp
c0015455:	89 e5                	mov    ebp,esp
c0015457:	53                   	push   ebx
c0015458:	83 ec 04             	sub    esp,0x4
c001545b:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0015460:	48                   	dec    eax
c0015461:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c0015466:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001546b:	85 c0                	test   eax,eax
c001546d:	75 01                	jne    c0015470 <startGUIVESA(void*)+0x1c>
c001546f:	fb                   	sti    
c0015470:	8b 1d e8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5e8
c0015476:	83 ec 08             	sub    esp,0x8
c0015479:	6a 01                	push   0x1
c001547b:	68 50 ab 02 c0       	push   0xc002ab50
c0015480:	e8 da 79 00 00       	call   c001ce5f <Thr::loadDLL(char const*, bool)>
c0015485:	83 c4 10             	add    esp,0x10
c0015488:	83 ec 08             	sub    esp,0x8
c001548b:	53                   	push   ebx
c001548c:	50                   	push   eax
c001548d:	e8 f8 7b 00 00       	call   c001d08a <Thr::executeDLL(unsigned long, void*)>
c0015492:	83 c4 10             	add    esp,0x10
c0015495:	8b 1d e8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5e8
c001549b:	83 ec 08             	sub    esp,0x8
c001549e:	6a 01                	push   0x1
c00154a0:	68 36 ab 02 c0       	push   0xc002ab36
c00154a5:	e8 b5 79 00 00       	call   c001ce5f <Thr::loadDLL(char const*, bool)>
c00154aa:	83 c4 10             	add    esp,0x10
c00154ad:	83 ec 08             	sub    esp,0x8
c00154b0:	53                   	push   ebx
c00154b1:	50                   	push   eax
c00154b2:	e8 d3 7b 00 00       	call   c001d08a <Thr::executeDLL(unsigned long, void*)>
c00154b7:	83 c4 10             	add    esp,0x10
c00154ba:	90                   	nop
c00154bb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00154be:	c9                   	leave  
c00154bf:	c3                   	ret    

c00154c0 <sendKeyToTerminal(unsigned char)>:
c00154c0:	55                   	push   ebp
c00154c1:	89 e5                	mov    ebp,esp
c00154c3:	83 ec 28             	sub    esp,0x28
c00154c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00154cc:	a1 a4 d6 02 c0       	mov    eax,ds:0xc002d6a4
c00154d1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00154d5:	83 ec 08             	sub    esp,0x8
c00154d8:	52                   	push   edx
c00154d9:	50                   	push   eax
c00154da:	e8 a3 b4 ff ff       	call   c0010982 <VgaText::receiveKey(unsigned char)>
c00154df:	83 c4 10             	add    esp,0x10
c00154e2:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00154e6:	0f 85 8f 00 00 00    	jne    c001557b <sendKeyToTerminal(unsigned char)+0xbb>
c00154ec:	fa                   	cli    
c00154ed:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c00154f2:	40                   	inc    eax
c00154f3:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c00154f8:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c00154fd:	40                   	inc    eax
c00154fe:	a3 04 0b 03 c0       	mov    ds:0xc0030b04,eax
c0015503:	a1 80 d7 02 c0       	mov    eax,ds:0xc002d780
c0015508:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001550b:	c7 05 80 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d780,0x0
c0015515:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015519:	74 1f                	je     c001553a <sendKeyToTerminal(unsigned char)+0x7a>
c001551b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015521:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015524:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015527:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001552a:	83 ec 0c             	sub    esp,0xc
c001552d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015530:	e8 6d 87 00 00       	call   c001dca2 <unblockTask(ThreadControlBlock*)>
c0015535:	83 c4 10             	add    esp,0x10
c0015538:	eb db                	jmp    c0015515 <sendKeyToTerminal(unsigned char)+0x55>
c001553a:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c001553f:	48                   	dec    eax
c0015540:	a3 04 0b 03 c0       	mov    ds:0xc0030b04,eax
c0015545:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c001554a:	85 c0                	test   eax,eax
c001554c:	75 18                	jne    c0015566 <sendKeyToTerminal(unsigned char)+0xa6>
c001554e:	a1 00 0b 03 c0       	mov    eax,ds:0xc0030b00
c0015553:	85 c0                	test   eax,eax
c0015555:	74 0f                	je     c0015566 <sendKeyToTerminal(unsigned char)+0xa6>
c0015557:	c7 05 00 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b00,0x0
c0015561:	e8 b9 82 00 00       	call   c001d81f <schedule()>
c0015566:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001556b:	48                   	dec    eax
c001556c:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c0015571:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0015576:	85 c0                	test   eax,eax
c0015578:	75 01                	jne    c001557b <sendKeyToTerminal(unsigned char)+0xbb>
c001557a:	fb                   	sti    
c001557b:	90                   	nop
c001557c:	c9                   	leave  
c001557d:	c3                   	ret    

c001557e <sendKeyboardToken(KeyboardToken)>:
c001557e:	55                   	push   ebp
c001557f:	89 e5                	mov    ebp,esp
c0015581:	83 ec 18             	sub    esp,0x18
c0015584:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558a:	0f b7 c0             	movzx  eax,ax
c001558d:	83 f2 01             	xor    edx,0x1
c0015590:	88 90 a0 d7 02 c0    	mov    BYTE PTR [eax-0x3ffd2860],dl
c0015596:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c001559b:	85 c0                	test   eax,eax
c001559d:	74 24                	je     c00155c3 <sendKeyboardToken(KeyboardToken)+0x45>
c001559f:	8b 0d 88 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d788
c00155a5:	83 ec 04             	sub    esp,0x4
c00155a8:	68 a0 d7 02 c0       	push   0xc002d7a0
c00155ad:	83 ec 08             	sub    esp,0x8
c00155b0:	89 e2                	mov    edx,esp
c00155b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b5:	89 02                	mov    DWORD PTR [edx],eax
c00155b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00155ba:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00155be:	ff d1                	call   ecx
c00155c0:	83 c4 10             	add    esp,0x10
c00155c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c6:	66 3d 03 02          	cmp    ax,0x203
c00155ca:	75 07                	jne    c00155d3 <sendKeyboardToken(KeyboardToken)+0x55>
c00155cc:	a0 a0 d8 02 c0       	mov    al,ds:0xc002d8a0
c00155d1:	84 c0                	test   al,al
c00155d3:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00155d7:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00155da:	a0 a8 db 02 c0       	mov    al,ds:0xc002dba8
c00155df:	38 c2                	cmp    dl,al
c00155e1:	74 1c                	je     c00155ff <sendKeyboardToken(KeyboardToken)+0x81>
c00155e3:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00155e6:	a2 a8 db 02 c0       	mov    ds:0xc002dba8,al
c00155eb:	a0 a8 db 02 c0       	mov    al,ds:0xc002dba8
c00155f0:	0f b6 c0             	movzx  eax,al
c00155f3:	83 ec 0c             	sub    esp,0xc
c00155f6:	50                   	push   eax
c00155f7:	e8 c8 a9 ff ff       	call   c000ffc4 <setTerminalScrollLock(bool)>
c00155fc:	83 c4 10             	add    esp,0x10
c00155ff:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015602:	84 c0                	test   al,al
c0015604:	0f 84 ae 00 00 00    	je     c00156b8 <sendKeyboardToken(KeyboardToken)+0x13a>
c001560a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560d:	66 3d 10 03          	cmp    ax,0x310
c0015611:	75 06                	jne    c0015619 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015613:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001561c:	66 3d 11 03          	cmp    ax,0x311
c0015620:	75 06                	jne    c0015628 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015622:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562b:	66 3d 12 03          	cmp    ax,0x312
c001562f:	75 06                	jne    c0015637 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015631:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563a:	66 3d 13 03          	cmp    ax,0x313
c001563e:	75 06                	jne    c0015646 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015640:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015649:	66 3d 14 03          	cmp    ax,0x314
c001564d:	75 06                	jne    c0015655 <sendKeyboardToken(KeyboardToken)+0xd7>
c001564f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015658:	66 3d 15 03          	cmp    ax,0x315
c001565c:	75 06                	jne    c0015664 <sendKeyboardToken(KeyboardToken)+0xe6>
c001565e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015664:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015667:	66 3d 16 03          	cmp    ax,0x316
c001566b:	75 06                	jne    c0015673 <sendKeyboardToken(KeyboardToken)+0xf5>
c001566d:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015676:	66 3d 17 03          	cmp    ax,0x317
c001567a:	75 06                	jne    c0015682 <sendKeyboardToken(KeyboardToken)+0x104>
c001567c:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015685:	66 3d 18 03          	cmp    ax,0x318
c0015689:	75 06                	jne    c0015691 <sendKeyboardToken(KeyboardToken)+0x113>
c001568b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015694:	66 3d 19 03          	cmp    ax,0x319
c0015698:	75 06                	jne    c00156a0 <sendKeyboardToken(KeyboardToken)+0x122>
c001569a:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00156a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a3:	66 3d 1a 03          	cmp    ax,0x31a
c00156a7:	0f 85 c9 00 00 00    	jne    c0015776 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00156ad:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00156b3:	e9 be 00 00 00       	jmp    c0015776 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00156b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156bb:	66 3d 10 03          	cmp    ax,0x310
c00156bf:	75 0a                	jne    c00156cb <sendKeyboardToken(KeyboardToken)+0x14d>
c00156c1:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00156c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156ce:	66 3d 11 03          	cmp    ax,0x311
c00156d2:	75 0a                	jne    c00156de <sendKeyboardToken(KeyboardToken)+0x160>
c00156d4:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00156da:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e1:	66 3d 12 03          	cmp    ax,0x312
c00156e5:	75 0a                	jne    c00156f1 <sendKeyboardToken(KeyboardToken)+0x173>
c00156e7:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00156ed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f4:	66 3d 13 03          	cmp    ax,0x313
c00156f8:	75 0a                	jne    c0015704 <sendKeyboardToken(KeyboardToken)+0x186>
c00156fa:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015700:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015707:	66 3d 14 03          	cmp    ax,0x314
c001570b:	75 0a                	jne    c0015717 <sendKeyboardToken(KeyboardToken)+0x199>
c001570d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015713:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015717:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571a:	66 3d 15 03          	cmp    ax,0x315
c001571e:	75 0a                	jne    c001572a <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015720:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015726:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001572a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572d:	66 3d 16 03          	cmp    ax,0x316
c0015731:	75 0a                	jne    c001573d <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015733:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015739:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001573d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015740:	66 3d 17 03          	cmp    ax,0x317
c0015744:	75 0a                	jne    c0015750 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015746:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001574c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015753:	66 3d 18 03          	cmp    ax,0x318
c0015757:	75 0a                	jne    c0015763 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015759:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001575f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015766:	66 3d 19 03          	cmp    ax,0x319
c001576a:	75 0a                	jne    c0015776 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001576c:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015772:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015779:	66 3d 00 02          	cmp    ax,0x200
c001577d:	75 2c                	jne    c00157ab <sendKeyboardToken(KeyboardToken)+0x22d>
c001577f:	a0 a0 db 02 c0       	mov    al,ds:0xc002dba0
c0015784:	83 f0 01             	xor    eax,0x1
c0015787:	84 c0                	test   al,al
c0015789:	74 20                	je     c00157ab <sendKeyboardToken(KeyboardToken)+0x22d>
c001578b:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0015790:	6a 01                	push   0x1
c0015792:	6a 00                	push   0x0
c0015794:	68 e8 53 01 c0       	push   0xc00153e8
c0015799:	50                   	push   eax
c001579a:	e8 5b 7e 00 00       	call   c001d5fa <Process::createThread(void (*)(void*), void*, int)>
c001579f:	83 c4 10             	add    esp,0x10
c00157a2:	c6 05 a0 db 02 c0 01 	mov    BYTE PTR ds:0xc002dba0,0x1
c00157a9:	eb 33                	jmp    c00157de <sendKeyboardToken(KeyboardToken)+0x260>
c00157ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ae:	66 3d 01 02          	cmp    ax,0x201
c00157b2:	75 2a                	jne    c00157de <sendKeyboardToken(KeyboardToken)+0x260>
c00157b4:	a0 a0 db 02 c0       	mov    al,ds:0xc002dba0
c00157b9:	83 f0 01             	xor    eax,0x1
c00157bc:	84 c0                	test   al,al
c00157be:	74 1e                	je     c00157de <sendKeyboardToken(KeyboardToken)+0x260>
c00157c0:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c00157c5:	6a 01                	push   0x1
c00157c7:	6a 00                	push   0x0
c00157c9:	68 54 54 01 c0       	push   0xc0015454
c00157ce:	50                   	push   eax
c00157cf:	e8 26 7e 00 00       	call   c001d5fa <Process::createThread(void (*)(void*), void*, int)>
c00157d4:	83 c4 10             	add    esp,0x10
c00157d7:	c6 05 a0 db 02 c0 01 	mov    BYTE PTR ds:0xc002dba0,0x1
c00157de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e1:	66 3d 1d 03          	cmp    ax,0x31d
c00157e5:	75 06                	jne    c00157ed <sendKeyboardToken(KeyboardToken)+0x26f>
c00157e7:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00157ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f0:	66 3d 1c 03          	cmp    ax,0x31c
c00157f4:	75 06                	jne    c00157fc <sendKeyboardToken(KeyboardToken)+0x27e>
c00157f6:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00157fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ff:	66 3d 1b 03          	cmp    ax,0x31b
c0015803:	75 06                	jne    c001580b <sendKeyboardToken(KeyboardToken)+0x28d>
c0015805:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001580b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580e:	66 3d 1e 03          	cmp    ax,0x31e
c0015812:	75 06                	jne    c001581a <sendKeyboardToken(KeyboardToken)+0x29c>
c0015814:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001581a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581d:	66 3d 1f 03          	cmp    ax,0x31f
c0015821:	75 06                	jne    c0015829 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015823:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015829:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582c:	66 3d 1a 03          	cmp    ax,0x31a
c0015830:	75 06                	jne    c0015838 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015832:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015838:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001583c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001583f:	83 f0 01             	xor    eax,0x1
c0015842:	84 c0                	test   al,al
c0015844:	74 77                	je     c00158bd <sendKeyboardToken(KeyboardToken)+0x33f>
c0015846:	a0 a1 d8 02 c0       	mov    al,ds:0xc002d8a1
c001584b:	84 c0                	test   al,al
c001584d:	74 41                	je     c0015890 <sendKeyboardToken(KeyboardToken)+0x312>
c001584f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015853:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015857:	74 2b                	je     c0015884 <sendKeyboardToken(KeyboardToken)+0x306>
c0015859:	8b 15 a4 db 02 c0    	mov    edx,DWORD PTR ds:0xc002dba4
c001585f:	89 d0                	mov    eax,edx
c0015861:	c1 e0 02             	shl    eax,0x2
c0015864:	01 d0                	add    eax,edx
c0015866:	01 c0                	add    eax,eax
c0015868:	a3 a4 db 02 c0       	mov    ds:0xc002dba4,eax
c001586d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015870:	0f b7 c0             	movzx  eax,ax
c0015873:	8d 50 d0             	lea    edx,[eax-0x30]
c0015876:	a1 a4 db 02 c0       	mov    eax,ds:0xc002dba4
c001587b:	01 d0                	add    eax,edx
c001587d:	a3 a4 db 02 c0       	mov    ds:0xc002dba4,eax
c0015882:	eb 6d                	jmp    c00158f1 <sendKeyboardToken(KeyboardToken)+0x373>
c0015884:	c7 05 a4 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dba4,0x0
c001588e:	eb 61                	jmp    c00158f1 <sendKeyboardToken(KeyboardToken)+0x373>
c0015890:	a1 a4 db 02 c0       	mov    eax,ds:0xc002dba4
c0015895:	85 c0                	test   eax,eax
c0015897:	74 18                	je     c00158b1 <sendKeyboardToken(KeyboardToken)+0x333>
c0015899:	a1 a4 db 02 c0       	mov    eax,ds:0xc002dba4
c001589e:	0f b6 c0             	movzx  eax,al
c00158a1:	83 ec 0c             	sub    esp,0xc
c00158a4:	50                   	push   eax
c00158a5:	e8 16 fc ff ff       	call   c00154c0 <sendKeyToTerminal(unsigned char)>
c00158aa:	83 c4 10             	add    esp,0x10
c00158ad:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00158b1:	c7 05 a4 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dba4,0x0
c00158bb:	eb 34                	jmp    c00158f1 <sendKeyboardToken(KeyboardToken)+0x373>
c00158bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c0:	66 3d 01 01          	cmp    ax,0x101
c00158c4:	75 2b                	jne    c00158f1 <sendKeyboardToken(KeyboardToken)+0x373>
c00158c6:	a1 a4 db 02 c0       	mov    eax,ds:0xc002dba4
c00158cb:	85 c0                	test   eax,eax
c00158cd:	74 18                	je     c00158e7 <sendKeyboardToken(KeyboardToken)+0x369>
c00158cf:	a1 a4 db 02 c0       	mov    eax,ds:0xc002dba4
c00158d4:	0f b6 c0             	movzx  eax,al
c00158d7:	83 ec 0c             	sub    esp,0xc
c00158da:	50                   	push   eax
c00158db:	e8 e0 fb ff ff       	call   c00154c0 <sendKeyToTerminal(unsigned char)>
c00158e0:	83 c4 10             	add    esp,0x10
c00158e3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00158e7:	c7 05 a4 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dba4,0x0
c00158f1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00158f4:	83 f0 01             	xor    eax,0x1
c00158f7:	84 c0                	test   al,al
c00158f9:	74 4c                	je     c0015947 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00158fb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00158fe:	83 f0 01             	xor    eax,0x1
c0015901:	84 c0                	test   al,al
c0015903:	74 42                	je     c0015947 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015905:	a0 a0 d8 02 c0       	mov    al,ds:0xc002d8a0
c001590a:	83 f0 01             	xor    eax,0x1
c001590d:	84 c0                	test   al,al
c001590f:	74 36                	je     c0015947 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015911:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015914:	66 83 f8 1f          	cmp    ax,0x1f
c0015918:	76 09                	jbe    c0015923 <sendKeyboardToken(KeyboardToken)+0x3a5>
c001591a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591d:	66 83 f8 7e          	cmp    ax,0x7e
c0015921:	76 12                	jbe    c0015935 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015926:	66 83 f8 0a          	cmp    ax,0xa
c001592a:	74 09                	je     c0015935 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001592c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592f:	66 83 f8 08          	cmp    ax,0x8
c0015933:	75 12                	jne    c0015947 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015938:	0f b6 c0             	movzx  eax,al
c001593b:	83 ec 0c             	sub    esp,0xc
c001593e:	50                   	push   eax
c001593f:	e8 7c fb ff ff       	call   c00154c0 <sendKeyToTerminal(unsigned char)>
c0015944:	83 c4 10             	add    esp,0x10
c0015947:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001594a:	83 f0 01             	xor    eax,0x1
c001594d:	84 c0                	test   al,al
c001594f:	74 4f                	je     c00159a0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015951:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015954:	83 f0 01             	xor    eax,0x1
c0015957:	84 c0                	test   al,al
c0015959:	74 45                	je     c00159a0 <sendKeyboardToken(KeyboardToken)+0x422>
c001595b:	a0 a0 d8 02 c0       	mov    al,ds:0xc002d8a0
c0015960:	84 c0                	test   al,al
c0015962:	74 3c                	je     c00159a0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015964:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015967:	66 83 f8 3f          	cmp    ax,0x3f
c001596b:	76 33                	jbe    c00159a0 <sendKeyboardToken(KeyboardToken)+0x422>
c001596d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015970:	66 83 f8 7f          	cmp    ax,0x7f
c0015974:	77 2a                	ja     c00159a0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015979:	88 c2                	mov    dl,al
c001597b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597e:	66 83 f8 5f          	cmp    ax,0x5f
c0015982:	76 04                	jbe    c0015988 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015984:	b0 20                	mov    al,0x20
c0015986:	eb 02                	jmp    c001598a <sendKeyboardToken(KeyboardToken)+0x40c>
c0015988:	b0 00                	mov    al,0x0
c001598a:	29 c2                	sub    edx,eax
c001598c:	88 d0                	mov    al,dl
c001598e:	83 e8 40             	sub    eax,0x40
c0015991:	0f b6 c0             	movzx  eax,al
c0015994:	83 ec 0c             	sub    esp,0xc
c0015997:	50                   	push   eax
c0015998:	e8 23 fb ff ff       	call   c00154c0 <sendKeyToTerminal(unsigned char)>
c001599d:	83 c4 10             	add    esp,0x10
c00159a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a3:	66 3d 00 03          	cmp    ax,0x300
c00159a7:	75 0f                	jne    c00159b8 <sendKeyboardToken(KeyboardToken)+0x43a>
c00159a9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159ac:	83 f0 01             	xor    eax,0x1
c00159af:	84 c0                	test   al,al
c00159b1:	74 05                	je     c00159b8 <sendKeyboardToken(KeyboardToken)+0x43a>
c00159b3:	e8 7d a9 ff ff       	call   c0010335 <doTerminalCycle()>
c00159b8:	90                   	nop
c00159b9:	c9                   	leave  
c00159ba:	c3                   	ret    

c00159bb <clearInternalKeybuffer(VgaText*)>:
c00159bb:	55                   	push   ebp
c00159bc:	89 e5                	mov    ebp,esp
c00159be:	83 ec 08             	sub    esp,0x8
c00159c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c4:	05 98 01 00 00       	add    eax,0x198
c00159c9:	83 ec 0c             	sub    esp,0xc
c00159cc:	50                   	push   eax
c00159cd:	e8 9a ad fe ff       	call   c000076c <strlen>
c00159d2:	83 c4 10             	add    esp,0x10
c00159d5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00159d8:	81 c2 98 01 00 00    	add    edx,0x198
c00159de:	83 ec 04             	sub    esp,0x4
c00159e1:	50                   	push   eax
c00159e2:	6a 00                	push   0x0
c00159e4:	52                   	push   edx
c00159e5:	e8 66 ad fe ff       	call   c0000750 <memset>
c00159ea:	83 c4 10             	add    esp,0x10
c00159ed:	90                   	nop
c00159ee:	c9                   	leave  
c00159ef:	c3                   	ret    

c00159f0 <readKeyboard(VgaText*, char*, unsigned long)>:
c00159f0:	55                   	push   ebp
c00159f1:	89 e5                	mov    ebp,esp
c00159f3:	83 ec 18             	sub    esp,0x18
c00159f6:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00159fb:	85 c0                	test   eax,eax
c00159fd:	74 2a                	je     c0015a29 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00159ff:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015a05:	8b 0d 88 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d788
c0015a0b:	83 ec 04             	sub    esp,0x4
c0015a0e:	68 a0 d7 02 c0       	push   0xc002d7a0
c0015a13:	83 ec 08             	sub    esp,0x8
c0015a16:	89 e2                	mov    edx,esp
c0015a18:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015a1b:	89 02                	mov    DWORD PTR [edx],eax
c0015a1d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a20:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015a24:	ff d1                	call   ecx
c0015a26:	83 c4 10             	add    esp,0x10
c0015a29:	fb                   	sti    
c0015a2a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015a31:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015a35:	0f 84 a1 00 00 00    	je     c0015adc <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015a3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a3e:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015a44:	84 c0                	test   al,al
c0015a46:	75 28                	jne    c0015a70 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015a48:	fa                   	cli    
c0015a49:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0015a4e:	40                   	inc    eax
c0015a4f:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c0015a54:	e8 c6 7d 00 00       	call   c001d81f <schedule()>
c0015a59:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0015a5e:	48                   	dec    eax
c0015a5f:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c0015a64:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0015a69:	85 c0                	test   eax,eax
c0015a6b:	75 ce                	jne    c0015a3b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015a6d:	fb                   	sti    
c0015a6e:	eb cb                	jmp    c0015a3b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015a70:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015a73:	8d 50 01             	lea    edx,[eax+0x1]
c0015a76:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015a79:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a7c:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015a82:	88 10                	mov    BYTE PTR [eax],dl
c0015a84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a87:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015a8d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015a90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a93:	05 98 01 00 00       	add    eax,0x198
c0015a98:	83 ec 0c             	sub    esp,0xc
c0015a9b:	50                   	push   eax
c0015a9c:	e8 cb ac fe ff       	call   c000076c <strlen>
c0015aa1:	83 c4 10             	add    esp,0x10
c0015aa4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015aa7:	81 c2 98 01 00 00    	add    edx,0x198
c0015aad:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015ab0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ab3:	81 c2 98 01 00 00    	add    edx,0x198
c0015ab9:	83 ec 04             	sub    esp,0x4
c0015abc:	50                   	push   eax
c0015abd:	51                   	push   ecx
c0015abe:	52                   	push   edx
c0015abf:	e8 c4 ab fe ff       	call   c0000688 <memmove>
c0015ac4:	83 c4 10             	add    esp,0x10
c0015ac7:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015aca:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015acd:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015ad1:	0f 85 5a ff ff ff    	jne    c0015a31 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015ad7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ada:	eb 03                	jmp    c0015adf <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015adc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015adf:	c9                   	leave  
c0015ae0:	c3                   	ret    
c0015ae1:	90                   	nop

c0015ae2 <Keyboard::Keyboard(char const*)>:
c0015ae2:	83 ec 0c             	sub    esp,0xc
c0015ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ae9:	83 ec 08             	sub    esp,0x8
c0015aec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015af0:	50                   	push   eax
c0015af1:	e8 7c e0 ff ff       	call   c0013b72 <Device::Device(char const*)>
c0015af6:	83 c4 10             	add    esp,0x10
c0015af9:	ba 74 ab 02 c0       	mov    edx,0xc002ab74
c0015afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b02:	89 10                	mov    DWORD PTR [eax],edx
c0015b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b08:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015b12:	c6 05 84 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d784,0x1
c0015b19:	90                   	nop
c0015b1a:	83 c4 0c             	add    esp,0xc
c0015b1d:	c3                   	ret    

c0015b1e <Keyboard::~Keyboard()>:
c0015b1e:	83 ec 0c             	sub    esp,0xc
c0015b21:	ba 74 ab 02 c0       	mov    edx,0xc002ab74
c0015b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b2a:	89 10                	mov    DWORD PTR [eax],edx
c0015b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b30:	83 ec 0c             	sub    esp,0xc
c0015b33:	50                   	push   eax
c0015b34:	e8 03 dd ff ff       	call   c001383c <Device::~Device()>
c0015b39:	83 c4 10             	add    esp,0x10
c0015b3c:	90                   	nop
c0015b3d:	83 c4 0c             	add    esp,0xc
c0015b40:	c3                   	ret    
c0015b41:	90                   	nop

c0015b42 <Keyboard::~Keyboard()>:
c0015b42:	83 ec 0c             	sub    esp,0xc
c0015b45:	83 ec 0c             	sub    esp,0xc
c0015b48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b4c:	e8 cd ff ff ff       	call   c0015b1e <Keyboard::~Keyboard()>
c0015b51:	83 c4 10             	add    esp,0x10
c0015b54:	83 ec 08             	sub    esp,0x8
c0015b57:	68 5c 01 00 00       	push   0x15c
c0015b5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b60:	e8 f8 c8 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0015b65:	83 c4 10             	add    esp,0x10
c0015b68:	83 c4 0c             	add    esp,0xc
c0015b6b:	c3                   	ret    

c0015b6c <LogicalDisk::close(int, int, void*)>:
c0015b6c:	83 c8 ff             	or     eax,0xffffffff
c0015b6f:	c3                   	ret    

c0015b70 <LogicalDisk::~LogicalDisk()>:
c0015b70:	83 ec 0c             	sub    esp,0xc
c0015b73:	ba ec ab 02 c0       	mov    edx,0xc002abec
c0015b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b7c:	89 10                	mov    DWORD PTR [eax],edx
c0015b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b82:	83 ec 0c             	sub    esp,0xc
c0015b85:	50                   	push   eax
c0015b86:	e8 b1 dc ff ff       	call   c001383c <Device::~Device()>
c0015b8b:	83 c4 10             	add    esp,0x10
c0015b8e:	90                   	nop
c0015b8f:	83 c4 0c             	add    esp,0xc
c0015b92:	c3                   	ret    
c0015b93:	90                   	nop

c0015b94 <LogicalDisk::~LogicalDisk()>:
c0015b94:	83 ec 0c             	sub    esp,0xc
c0015b97:	83 ec 0c             	sub    esp,0xc
c0015b9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b9e:	e8 cd ff ff ff       	call   c0015b70 <LogicalDisk::~LogicalDisk()>
c0015ba3:	83 c4 10             	add    esp,0x10
c0015ba6:	83 ec 08             	sub    esp,0x8
c0015ba9:	68 74 01 00 00       	push   0x174
c0015bae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015bb2:	e8 a6 c8 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0015bb7:	83 c4 10             	add    esp,0x10
c0015bba:	83 c4 0c             	add    esp,0xc
c0015bbd:	c3                   	ret    

c0015bbe <LogicalDisk::open(int, int, void*)>:
c0015bbe:	83 ec 18             	sub    esp,0x18
c0015bc1:	68 a0 ab 02 c0       	push   0xc002aba0
c0015bc6:	e8 ca 40 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0015bcb:	83 c8 ff             	or     eax,0xffffffff
c0015bce:	83 c4 1c             	add    esp,0x1c
c0015bd1:	c3                   	ret    

c0015bd2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015bd2:	53                   	push   ebx
c0015bd3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015bd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015bdb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015bdf:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015be5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015beb:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015bf1:	77 10                	ja     c0015c03 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015bf3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015bf9:	89 d3                	mov    ebx,edx
c0015bfb:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015c01:	72 05                	jb     c0015c08 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015c03:	83 c8 ff             	or     eax,0xffffffff
c0015c06:	89 c2                	mov    edx,eax
c0015c08:	5b                   	pop    ebx
c0015c09:	c3                   	ret    

c0015c0a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015c0a:	56                   	push   esi
c0015c0b:	83 c8 ff             	or     eax,0xffffffff
c0015c0e:	53                   	push   ebx
c0015c0f:	89 c2                	mov    edx,eax
c0015c11:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015c15:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015c19:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015c1d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015c23:	77 27                	ja     c0015c4c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015c25:	89 d8                	mov    eax,ebx
c0015c27:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015c2d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015c33:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c38:	89 c2                	mov    edx,eax
c0015c3a:	73 10                	jae    c0015c4c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015c3c:	89 c8                	mov    eax,ecx
c0015c3e:	89 da                	mov    edx,ebx
c0015c40:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015c46:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015c4c:	5b                   	pop    ebx
c0015c4d:	5e                   	pop    esi
c0015c4e:	c3                   	ret    
c0015c4f:	90                   	nop

c0015c50 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015c50:	83 ec 1c             	sub    esp,0x1c
c0015c53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c63:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c67:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015c6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015c72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c76:	83 ec 08             	sub    esp,0x8
c0015c79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c7d:	50                   	push   eax
c0015c7e:	e8 ef de ff ff       	call   c0013b72 <Device::Device(char const*)>
c0015c83:	83 c4 10             	add    esp,0x10
c0015c86:	ba ec ab 02 c0       	mov    edx,0xc002abec
c0015c8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c8f:	89 10                	mov    DWORD PTR [eax],edx
c0015c91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c95:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ca0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015ca7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cab:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015cb5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015cb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015cbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015cc1:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015cc7:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015ccd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015cd1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015cd4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015cd8:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015cde:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ce8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015cec:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015cf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cf6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015d00:	90                   	nop
c0015d01:	83 c4 1c             	add    esp,0x1c
c0015d04:	c3                   	ret    
c0015d05:	90                   	nop

c0015d06 <LogicalDisk::assignDriveLetter()>:
c0015d06:	55                   	push   ebp
c0015d07:	57                   	push   edi
c0015d08:	56                   	push   esi
c0015d09:	53                   	push   ebx
c0015d0a:	83 ec 14             	sub    esp,0x14
c0015d0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015d11:	8b 3d c0 db 02 c0    	mov    edi,DWORD PTR ds:0xc002dbc0
c0015d17:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015d1d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015d21:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015d27:	8b 3d c4 db 02 c0    	mov    edi,DWORD PTR ds:0xc002dbc4
c0015d2d:	3c 01                	cmp    al,0x1
c0015d2f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015d33:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015d37:	19 c0                	sbb    eax,eax
c0015d39:	83 e0 02             	and    eax,0x2
c0015d3c:	83 c0 41             	add    eax,0x41
c0015d3f:	0f be e8             	movsx  ebp,al
c0015d42:	3c 43                	cmp    al,0x43
c0015d44:	75 10                	jne    c0015d56 <LogicalDisk::assignDriveLetter()+0x50>
c0015d46:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015d4d:	75 5d                	jne    c0015dac <LogicalDisk::assignDriveLetter()+0xa6>
c0015d4f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015d54:	75 56                	jne    c0015dac <LogicalDisk::assignDriveLetter()+0xa6>
c0015d56:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015d59:	ba 01 00 00 00       	mov    edx,0x1
c0015d5e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015d62:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015d66:	d3 e2                	shl    edx,cl
c0015d68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015d6c:	89 d7                	mov    edi,edx
c0015d6e:	89 d6                	mov    esi,edx
c0015d70:	c1 ff 1f             	sar    edi,0x1f
c0015d73:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015d77:	21 f9                	and    ecx,edi
c0015d79:	09 d1                	or     ecx,edx
c0015d7b:	75 2f                	jne    c0015dac <LogicalDisk::assignDriveLetter()+0xa6>
c0015d7d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015d81:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d85:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015d8b:	09 f2                	or     edx,esi
c0015d8d:	89 15 c0 db 02 c0    	mov    DWORD PTR ds:0xc002dbc0,edx
c0015d93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d97:	09 fa                	or     edx,edi
c0015d99:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015d9d:	89 15 c4 db 02 c0    	mov    DWORD PTR ds:0xc002dbc4,edx
c0015da3:	89 1c bd e0 db 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2420],ebx
c0015daa:	eb 08                	jmp    c0015db4 <LogicalDisk::assignDriveLetter()+0xae>
c0015dac:	45                   	inc    ebp
c0015dad:	40                   	inc    eax
c0015dae:	3c 5b                	cmp    al,0x5b
c0015db0:	75 90                	jne    c0015d42 <LogicalDisk::assignDriveLetter()+0x3c>
c0015db2:	31 c0                	xor    eax,eax
c0015db4:	83 c4 14             	add    esp,0x14
c0015db7:	5b                   	pop    ebx
c0015db8:	5e                   	pop    esi
c0015db9:	5f                   	pop    edi
c0015dba:	5d                   	pop    ebp
c0015dbb:	c3                   	ret    

c0015dbc <LogicalDisk::mount()>:
c0015dbc:	56                   	push   esi
c0015dbd:	53                   	push   ebx
c0015dbe:	53                   	push   ebx
c0015dbf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015dc3:	8b 1d 54 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d754
c0015dc9:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015dd3:	85 db                	test   ebx,ebx
c0015dd5:	74 27                	je     c0015dfe <LogicalDisk::mount()+0x42>
c0015dd7:	51                   	push   ecx
c0015dd8:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015ddf:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015de1:	83 e8 41             	sub    eax,0x41
c0015de4:	50                   	push   eax
c0015de5:	56                   	push   esi
c0015de6:	53                   	push   ebx
c0015de7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015dea:	83 c4 10             	add    esp,0x10
c0015ded:	84 c0                	test   al,al
c0015def:	74 08                	je     c0015df9 <LogicalDisk::mount()+0x3d>
c0015df1:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015df7:	eb 07                	jmp    c0015e00 <LogicalDisk::mount()+0x44>
c0015df9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015dfc:	eb d5                	jmp    c0015dd3 <LogicalDisk::mount()+0x17>
c0015dfe:	31 c0                	xor    eax,eax
c0015e00:	5a                   	pop    edx
c0015e01:	5b                   	pop    ebx
c0015e02:	5e                   	pop    esi
c0015e03:	c3                   	ret    

c0015e04 <LogicalDisk::unmount()>:
c0015e04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e08:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015e12:	c3                   	ret    
c0015e13:	90                   	nop

c0015e14 <LogicalDisk::eject()>:
c0015e14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e18:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015e1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0015e20:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e24:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015e27:	90                   	nop

c0015e28 <LogicalDisk::unassignDriveLetter()>:
c0015e28:	57                   	push   edi
c0015e29:	56                   	push   esi
c0015e2a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e2e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015e35:	84 c9                	test   cl,cl
c0015e37:	75 0f                	jne    c0015e48 <LogicalDisk::unassignDriveLetter()+0x20>
c0015e39:	c7 44 24 0c c4 ab 02 c0 	mov    DWORD PTR [esp+0xc],0xc002abc4
c0015e41:	5e                   	pop    esi
c0015e42:	5f                   	pop    edi
c0015e43:	e9 4d 3e 00 00       	jmp    c0019c95 <Krnl::panic(char const*)>
c0015e48:	83 e9 41             	sub    ecx,0x41
c0015e4b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015e52:	b8 01 00 00 00       	mov    eax,0x1
c0015e57:	c7 04 8d e0 db 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd2420],0x0
c0015e62:	d3 e0                	shl    eax,cl
c0015e64:	89 c7                	mov    edi,eax
c0015e66:	f7 d0                	not    eax
c0015e68:	c1 ff 1f             	sar    edi,0x1f
c0015e6b:	21 05 c0 db 02 c0    	and    DWORD PTR ds:0xc002dbc0,eax
c0015e71:	89 fe                	mov    esi,edi
c0015e73:	f7 d6                	not    esi
c0015e75:	21 35 c4 db 02 c0    	and    DWORD PTR ds:0xc002dbc4,esi
c0015e7b:	5e                   	pop    esi
c0015e7c:	5f                   	pop    edi
c0015e7d:	c3                   	ret    

c0015e7e <LogicalDisk::read(unsigned long long, int, void*)>:
c0015e7e:	57                   	push   edi
c0015e7f:	56                   	push   esi
c0015e80:	53                   	push   ebx
c0015e81:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015e85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e89:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015e8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e91:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e97:	77 41                	ja     c0015eda <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015e99:	99                   	cdq    
c0015e9a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015ea0:	01 c8                	add    eax,ecx
c0015ea2:	11 da                	adc    edx,ebx
c0015ea4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015eaa:	19 d7                	sbb    edi,edx
c0015eac:	72 33                	jb     c0015ee1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015eae:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015eb4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015eba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015ebe:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015ec2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015ec8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015ece:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ed2:	5b                   	pop    ebx
c0015ed3:	5e                   	pop    esi
c0015ed4:	5f                   	pop    edi
c0015ed5:	e9 cc 0a 00 00       	jmp    c00169a6 <VCache::read(unsigned long long, int, void*)>
c0015eda:	b8 05 00 00 00       	mov    eax,0x5
c0015edf:	eb 05                	jmp    c0015ee6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015ee1:	b8 07 00 00 00       	mov    eax,0x7
c0015ee6:	5b                   	pop    ebx
c0015ee7:	5e                   	pop    esi
c0015ee8:	5f                   	pop    edi
c0015ee9:	c3                   	ret    

c0015eea <LogicalDisk::write(unsigned long long, int, void*)>:
c0015eea:	57                   	push   edi
c0015eeb:	56                   	push   esi
c0015eec:	53                   	push   ebx
c0015eed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015ef1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ef5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015efd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015f03:	77 41                	ja     c0015f46 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015f05:	99                   	cdq    
c0015f06:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015f0c:	01 c8                	add    eax,ecx
c0015f0e:	11 da                	adc    edx,ebx
c0015f10:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015f16:	19 d7                	sbb    edi,edx
c0015f18:	72 33                	jb     c0015f4d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015f1a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015f20:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015f26:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015f2a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015f2e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015f34:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015f3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f3e:	5b                   	pop    ebx
c0015f3f:	5e                   	pop    esi
c0015f40:	5f                   	pop    edi
c0015f41:	e9 76 09 00 00       	jmp    c00168bc <VCache::write(unsigned long long, int, void*)>
c0015f46:	b8 05 00 00 00       	mov    eax,0x5
c0015f4b:	eb 05                	jmp    c0015f52 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015f4d:	b8 07 00 00 00       	mov    eax,0x7
c0015f52:	5b                   	pop    ebx
c0015f53:	5e                   	pop    esi
c0015f54:	5f                   	pop    edi
c0015f55:	c3                   	ret    

c0015f56 <Mouse::Mouse(char const*)>:
c0015f56:	83 ec 0c             	sub    esp,0xc
c0015f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f5d:	83 ec 08             	sub    esp,0x8
c0015f60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f64:	50                   	push   eax
c0015f65:	e8 08 dc ff ff       	call   c0013b72 <Device::Device(char const*)>
c0015f6a:	83 c4 10             	add    esp,0x10
c0015f6d:	ba 18 ac 02 c0       	mov    edx,0xc002ac18
c0015f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f76:	89 10                	mov    DWORD PTR [eax],edx
c0015f78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f7c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015f86:	90                   	nop
c0015f87:	83 c4 0c             	add    esp,0xc
c0015f8a:	c3                   	ret    
c0015f8b:	90                   	nop

c0015f8c <Mouse::~Mouse()>:
c0015f8c:	83 ec 0c             	sub    esp,0xc
c0015f8f:	ba 18 ac 02 c0       	mov    edx,0xc002ac18
c0015f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f98:	89 10                	mov    DWORD PTR [eax],edx
c0015f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f9e:	83 ec 0c             	sub    esp,0xc
c0015fa1:	50                   	push   eax
c0015fa2:	e8 95 d8 ff ff       	call   c001383c <Device::~Device()>
c0015fa7:	83 c4 10             	add    esp,0x10
c0015faa:	90                   	nop
c0015fab:	83 c4 0c             	add    esp,0xc
c0015fae:	c3                   	ret    
c0015faf:	90                   	nop

c0015fb0 <Mouse::~Mouse()>:
c0015fb0:	83 ec 0c             	sub    esp,0xc
c0015fb3:	83 ec 0c             	sub    esp,0xc
c0015fb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fba:	e8 cd ff ff ff       	call   c0015f8c <Mouse::~Mouse()>
c0015fbf:	83 c4 10             	add    esp,0x10
c0015fc2:	83 ec 08             	sub    esp,0x8
c0015fc5:	68 58 01 00 00       	push   0x158
c0015fca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fce:	e8 8a c4 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0015fd3:	83 c4 10             	add    esp,0x10
c0015fd6:	83 c4 0c             	add    esp,0xc
c0015fd9:	c3                   	ret    

c0015fda <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015fda:	55                   	push   ebp
c0015fdb:	57                   	push   edi
c0015fdc:	56                   	push   esi
c0015fdd:	53                   	push   ebx
c0015fde:	81 ec 28 01 00 00    	sub    esp,0x128
c0015fe4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015feb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015ff2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015ff9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016000:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016004:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016008:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001600f:	e8 5a dc ff ff       	call   c0013c6e <Device::getName()>
c0016014:	5a                   	pop    edx
c0016015:	59                   	pop    ecx
c0016016:	50                   	push   eax
c0016017:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001601b:	55                   	push   ebp
c001601c:	e8 eb a7 fe ff       	call   c000080c <strcpy>
c0016021:	5b                   	pop    ebx
c0016022:	58                   	pop    eax
c0016023:	68 3c ac 02 c0       	push   0xc002ac3c
c0016028:	55                   	push   ebp
c0016029:	e8 1e a9 fe ff       	call   c000094c <strcat>
c001602e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016035:	e8 5f 95 ff ff       	call   c000f599 <malloc>
c001603a:	83 c4 0c             	add    esp,0xc
c001603d:	89 c3                	mov    ebx,eax
c001603f:	57                   	push   edi
c0016040:	56                   	push   esi
c0016041:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016045:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016049:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016050:	55                   	push   ebp
c0016051:	50                   	push   eax
c0016052:	e8 f9 fb ff ff       	call   c0015c50 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016057:	83 c4 14             	add    esp,0x14
c001605a:	53                   	push   ebx
c001605b:	e8 a6 fc ff ff       	call   c0015d06 <LogicalDisk::assignDriveLetter()>
c0016060:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016063:	e8 54 fd ff ff       	call   c0015dbc <LogicalDisk::mount()>
c0016068:	58                   	pop    eax
c0016069:	5a                   	pop    edx
c001606a:	53                   	push   ebx
c001606b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016072:	e8 f7 d8 ff ff       	call   c001396e <Device::addChild(Device*)>
c0016077:	81 c4 2c 01 00 00    	add    esp,0x12c
c001607d:	5b                   	pop    ebx
c001607e:	5e                   	pop    esi
c001607f:	5f                   	pop    edi
c0016080:	5d                   	pop    ebp
c0016081:	c3                   	ret    

c0016082 <createPartitionsForDisk(PhysicalDisk*)>:
c0016082:	55                   	push   ebp
c0016083:	57                   	push   edi
c0016084:	56                   	push   esi
c0016085:	53                   	push   ebx
c0016086:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001608c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016093:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016099:	3d 00 02 00 00       	cmp    eax,0x200
c001609e:	74 27                	je     c00160c7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00160a0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00160a6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00160ac:	83 ec 10             	sub    esp,0x10
c00160af:	0f a4 f7 0a          	shld   edi,esi,0xa
c00160b3:	99                   	cdq    
c00160b4:	c1 e6 0a             	shl    esi,0xa
c00160b7:	52                   	push   edx
c00160b8:	89 fd                	mov    ebp,edi
c00160ba:	50                   	push   eax
c00160bb:	55                   	push   ebp
c00160bc:	56                   	push   esi
c00160bd:	e8 a2 04 01 00       	call   c0026564 <__udivdi3>
c00160c2:	e9 b1 00 00 00       	jmp    c0016178 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00160c7:	83 ec 0c             	sub    esp,0xc
c00160ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00160cc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00160d0:	56                   	push   esi
c00160d1:	6a 01                	push   0x1
c00160d3:	6a 00                	push   0x0
c00160d5:	6a 00                	push   0x0
c00160d7:	53                   	push   ebx
c00160d8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00160db:	83 c4 20             	add    esp,0x20
c00160de:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00160e6:	75 0a                	jne    c00160f2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00160e8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00160f0:	74 2c                	je     c001611e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00160f2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00160f8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00160fe:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016104:	83 ec 10             	sub    esp,0x10
c0016107:	0f a4 c2 0a          	shld   edx,eax,0xa
c001610b:	89 f7                	mov    edi,esi
c001610d:	c1 e0 0a             	shl    eax,0xa
c0016110:	c1 ff 1f             	sar    edi,0x1f
c0016113:	57                   	push   edi
c0016114:	56                   	push   esi
c0016115:	52                   	push   edx
c0016116:	50                   	push   eax
c0016117:	e8 48 04 01 00       	call   c0026564 <__udivdi3>
c001611c:	eb 5a                	jmp    c0016178 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001611e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016125:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001612c:	83 e1 7f             	and    ecx,0x7f
c001612f:	83 e0 7f             	and    eax,0x7f
c0016132:	01 c1                	add    ecx,eax
c0016134:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001613b:	83 e0 7f             	and    eax,0x7f
c001613e:	01 c1                	add    ecx,eax
c0016140:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016147:	83 e0 7f             	and    eax,0x7f
c001614a:	00 c1                	add    cl,al
c001614c:	74 41                	je     c001618f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001614e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016154:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001615a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016160:	83 ec 10             	sub    esp,0x10
c0016163:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016167:	89 f7                	mov    edi,esi
c0016169:	c1 e0 0a             	shl    eax,0xa
c001616c:	c1 ff 1f             	sar    edi,0x1f
c001616f:	57                   	push   edi
c0016170:	56                   	push   esi
c0016171:	52                   	push   edx
c0016172:	50                   	push   eax
c0016173:	e8 ec 03 01 00       	call   c0026564 <__udivdi3>
c0016178:	83 c4 14             	add    esp,0x14
c001617b:	52                   	push   edx
c001617c:	50                   	push   eax
c001617d:	6a 00                	push   0x0
c001617f:	6a 00                	push   0x0
c0016181:	53                   	push   ebx
c0016182:	e8 53 fe ff ff       	call   c0015fda <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016187:	83 c4 20             	add    esp,0x20
c001618a:	e9 79 01 00 00       	jmp    c0016308 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001618f:	89 f0                	mov    eax,esi
c0016191:	31 f6                	xor    esi,esi
c0016193:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001619a:	75 02                	jne    c001619e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001619c:	89 f1                	mov    ecx,esi
c001619e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00161a5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00161ac:	c1 e2 08             	shl    edx,0x8
c00161af:	c1 e7 10             	shl    edi,0x10
c00161b2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00161ba:	09 fa                	or     edx,edi
c00161bc:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00161c4:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00161cb:	83 c0 10             	add    eax,0x10
c00161ce:	09 fa                	or     edx,edi
c00161d0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00161d7:	c1 e7 18             	shl    edi,0x18
c00161da:	09 fa                	or     edx,edi
c00161dc:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00161e3:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00161e7:	c1 e7 10             	shl    edi,0x10
c00161ea:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00161f1:	c1 e2 08             	shl    edx,0x8
c00161f4:	09 fa                	or     edx,edi
c00161f6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00161fd:	09 fa                	or     edx,edi
c00161ff:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016206:	c1 e7 18             	shl    edi,0x18
c0016209:	09 fa                	or     edx,edi
c001620b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001620f:	46                   	inc    esi
c0016210:	83 fe 04             	cmp    esi,0x4
c0016213:	0f 85 7a ff ff ff    	jne    c0016193 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001621d:	83 f0 01             	xor    eax,0x1
c0016220:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016224:	75 57                	jne    c001627d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016226:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001622a:	83 f0 01             	xor    eax,0x1
c001622d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016231:	75 4a                	jne    c001627d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016233:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016237:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001623f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016247:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001624d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016253:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016259:	0f a4 c2 0a          	shld   edx,eax,0xa
c001625d:	89 f7                	mov    edi,esi
c001625f:	c1 e0 0a             	shl    eax,0xa
c0016262:	c1 ff 1f             	sar    edi,0x1f
c0016265:	57                   	push   edi
c0016266:	56                   	push   esi
c0016267:	52                   	push   edx
c0016268:	50                   	push   eax
c0016269:	e8 f6 02 01 00       	call   c0026564 <__udivdi3>
c001626e:	83 c4 10             	add    esp,0x10
c0016271:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016275:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016279:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001627d:	84 c9                	test   cl,cl
c001627f:	74 53                	je     c00162d4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016281:	0f b6 c9             	movzx  ecx,cl
c0016284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016288:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001628c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016290:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016294:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016298:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001629c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00162a0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00162a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00162a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00162ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162b4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00162b8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00162bc:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00162c0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00162c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00162c8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00162cc:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00162d0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00162d4:	31 ed                	xor    ebp,ebp
c00162d6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00162da:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00162de:	89 f8                	mov    eax,edi
c00162e0:	09 f0                	or     eax,esi
c00162e2:	74 1e                	je     c0016302 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00162e4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00162e8:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00162ec:	89 d1                	mov    ecx,edx
c00162ee:	09 c1                	or     ecx,eax
c00162f0:	74 10                	je     c0016302 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00162f2:	83 ec 0c             	sub    esp,0xc
c00162f5:	57                   	push   edi
c00162f6:	56                   	push   esi
c00162f7:	52                   	push   edx
c00162f8:	50                   	push   eax
c00162f9:	53                   	push   ebx
c00162fa:	e8 db fc ff ff       	call   c0015fda <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00162ff:	83 c4 20             	add    esp,0x20
c0016302:	45                   	inc    ebp
c0016303:	83 fd 04             	cmp    ebp,0x4
c0016306:	75 ce                	jne    c00162d6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016308:	81 c4 5c 02 00 00    	add    esp,0x25c
c001630e:	5b                   	pop    ebx
c001630f:	5e                   	pop    esi
c0016310:	5f                   	pop    edi
c0016311:	5d                   	pop    ebp
c0016312:	c3                   	ret    
c0016313:	90                   	nop

c0016314 <Serial::Serial(char const*)>:
c0016314:	83 ec 0c             	sub    esp,0xc
c0016317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001631b:	83 ec 08             	sub    esp,0x8
c001631e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016322:	50                   	push   eax
c0016323:	e8 4a d8 ff ff       	call   c0013b72 <Device::Device(char const*)>
c0016328:	83 c4 10             	add    esp,0x10
c001632b:	ba 50 ac 02 c0       	mov    edx,0xc002ac50
c0016330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016334:	89 10                	mov    DWORD PTR [eax],edx
c0016336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001633a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016344:	90                   	nop
c0016345:	83 c4 0c             	add    esp,0xc
c0016348:	c3                   	ret    
c0016349:	90                   	nop

c001634a <Serial::~Serial()>:
c001634a:	83 ec 0c             	sub    esp,0xc
c001634d:	ba 50 ac 02 c0       	mov    edx,0xc002ac50
c0016352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016356:	89 10                	mov    DWORD PTR [eax],edx
c0016358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001635c:	83 ec 0c             	sub    esp,0xc
c001635f:	50                   	push   eax
c0016360:	e8 d7 d4 ff ff       	call   c001383c <Device::~Device()>
c0016365:	83 c4 10             	add    esp,0x10
c0016368:	90                   	nop
c0016369:	83 c4 0c             	add    esp,0xc
c001636c:	c3                   	ret    
c001636d:	90                   	nop

c001636e <Serial::~Serial()>:
c001636e:	83 ec 0c             	sub    esp,0xc
c0016371:	83 ec 0c             	sub    esp,0xc
c0016374:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016378:	e8 cd ff ff ff       	call   c001634a <Serial::~Serial()>
c001637d:	83 c4 10             	add    esp,0x10
c0016380:	83 ec 08             	sub    esp,0x8
c0016383:	68 58 01 00 00       	push   0x158
c0016388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001638c:	e8 cc c0 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0016391:	83 c4 10             	add    esp,0x10
c0016394:	83 c4 0c             	add    esp,0xc
c0016397:	c3                   	ret    

c0016398 <Timer::Timer(char const*)>:
c0016398:	83 ec 0c             	sub    esp,0xc
c001639b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001639f:	83 ec 08             	sub    esp,0x8
c00163a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163a6:	50                   	push   eax
c00163a7:	e8 c6 d7 ff ff       	call   c0013b72 <Device::Device(char const*)>
c00163ac:	83 c4 10             	add    esp,0x10
c00163af:	ba 94 ac 02 c0       	mov    edx,0xc002ac94
c00163b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163b8:	89 10                	mov    DWORD PTR [eax],edx
c00163ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163be:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00163c8:	90                   	nop
c00163c9:	83 c4 0c             	add    esp,0xc
c00163cc:	c3                   	ret    
c00163cd:	90                   	nop

c00163ce <Timer::~Timer()>:
c00163ce:	83 ec 0c             	sub    esp,0xc
c00163d1:	ba 94 ac 02 c0       	mov    edx,0xc002ac94
c00163d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163da:	89 10                	mov    DWORD PTR [eax],edx
c00163dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163e0:	83 ec 0c             	sub    esp,0xc
c00163e3:	50                   	push   eax
c00163e4:	e8 53 d4 ff ff       	call   c001383c <Device::~Device()>
c00163e9:	83 c4 10             	add    esp,0x10
c00163ec:	90                   	nop
c00163ed:	83 c4 0c             	add    esp,0xc
c00163f0:	c3                   	ret    
c00163f1:	90                   	nop

c00163f2 <Timer::~Timer()>:
c00163f2:	83 ec 0c             	sub    esp,0xc
c00163f5:	83 ec 0c             	sub    esp,0xc
c00163f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163fc:	e8 cd ff ff ff       	call   c00163ce <Timer::~Timer()>
c0016401:	83 c4 10             	add    esp,0x10
c0016404:	83 ec 08             	sub    esp,0x8
c0016407:	68 5c 01 00 00       	push   0x15c
c001640c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016410:	e8 48 c0 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0016415:	83 c4 10             	add    esp,0x10
c0016418:	83 c4 0c             	add    esp,0xc
c001641b:	c3                   	ret    

c001641c <Timer::read()>:
c001641c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016420:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016426:	c3                   	ret    

c0016427 <timerHandler(unsigned long long)>:
c0016427:	55                   	push   ebp
c0016428:	57                   	push   edi
c0016429:	56                   	push   esi
c001642a:	53                   	push   ebx
c001642b:	83 ec 0c             	sub    esp,0xc
c001642e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016432:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016436:	01 35 50 dc 02 c0    	add    DWORD PTR ds:0xc002dc50,esi
c001643c:	11 3d 54 dc 02 c0    	adc    DWORD PTR ds:0xc002dc54,edi
c0016442:	80 3d ed d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d5ed,0x0
c0016449:	0f 84 42 01 00 00    	je     c0016591 <timerHandler(unsigned long long)+0x16a>
c001644f:	fa                   	cli    
c0016450:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c0016456:	83 ec 0c             	sub    esp,0xc
c0016459:	ff 05 04 0b 03 c0    	inc    DWORD PTR ds:0xc0030b04
c001645f:	68 18 0b 03 c0       	push   0xc0030b18
c0016464:	e8 55 21 01 00       	call   c00285be <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016469:	83 c4 10             	add    esp,0x10
c001646c:	84 c0                	test   al,al
c001646e:	0f 85 a2 00 00 00    	jne    c0016516 <timerHandler(unsigned long long)+0xef>
c0016474:	83 ec 0c             	sub    esp,0xc
c0016477:	68 18 0b 03 c0       	push   0xc0030b18
c001647c:	e8 59 21 01 00       	call   c00285da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016481:	83 c4 10             	add    esp,0x10
c0016484:	89 c3                	mov    ebx,eax
c0016486:	83 ec 0c             	sub    esp,0xc
c0016489:	68 18 0b 03 c0       	push   0xc0030b18
c001648e:	e8 47 21 01 00       	call   c00285da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016493:	c7 04 24 18 0b 03 c0 	mov    DWORD PTR [esp],0xc0030b18
c001649a:	89 c5                	mov    ebp,eax
c001649c:	e8 41 21 01 00       	call   c00285e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00164a1:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00164a4:	83 c4 10             	add    esp,0x10
c00164a7:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00164aa:	39 15 50 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc50,edx
c00164b0:	a1 54 dc 02 c0       	mov    eax,ds:0xc002dc54
c00164b5:	19 c8                	sbb    eax,ecx
c00164b7:	72 21                	jb     c00164da <timerHandler(unsigned long long)+0xb3>
c00164b9:	83 ec 0c             	sub    esp,0xc
c00164bc:	55                   	push   ebp
c00164bd:	e8 e0 77 00 00       	call   c001dca2 <unblockTask(ThreadControlBlock*)>
c00164c2:	83 c4 10             	add    esp,0x10
c00164c5:	39 eb                	cmp    ebx,ebp
c00164c7:	75 21                	jne    c00164ea <timerHandler(unsigned long long)+0xc3>
c00164c9:	83 ec 0c             	sub    esp,0xc
c00164cc:	68 18 0b 03 c0       	push   0xc0030b18
c00164d1:	e8 04 21 01 00       	call   c00285da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164d6:	89 c3                	mov    ebx,eax
c00164d8:	eb 0d                	jmp    c00164e7 <timerHandler(unsigned long long)+0xc0>
c00164da:	50                   	push   eax
c00164db:	50                   	push   eax
c00164dc:	55                   	push   ebp
c00164dd:	68 18 0b 03 c0       	push   0xc0030b18
c00164e2:	e8 a9 21 01 00       	call   c0028690 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164e7:	83 c4 10             	add    esp,0x10
c00164ea:	83 ec 0c             	sub    esp,0xc
c00164ed:	68 18 0b 03 c0       	push   0xc0030b18
c00164f2:	e8 c7 20 01 00       	call   c00285be <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00164f7:	83 c4 10             	add    esp,0x10
c00164fa:	84 c0                	test   al,al
c00164fc:	75 18                	jne    c0016516 <timerHandler(unsigned long long)+0xef>
c00164fe:	83 ec 0c             	sub    esp,0xc
c0016501:	68 18 0b 03 c0       	push   0xc0030b18
c0016506:	e8 cf 20 01 00       	call   c00285da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001650b:	83 c4 10             	add    esp,0x10
c001650e:	39 d8                	cmp    eax,ebx
c0016510:	0f 85 70 ff ff ff    	jne    c0016486 <timerHandler(unsigned long long)+0x5f>
c0016516:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001651b:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c001651f:	74 3d                	je     c001655e <timerHandler(unsigned long long)+0x137>
c0016521:	80 3d ec d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d5ec,0x0
c0016528:	74 34                	je     c001655e <timerHandler(unsigned long long)+0x137>
c001652a:	fa                   	cli    
c001652b:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c0016531:	31 d2                	xor    edx,edx
c0016533:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016538:	89 f9                	mov    ecx,edi
c001653a:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001653d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016542:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016545:	39 c6                	cmp    esi,eax
c0016547:	19 d1                	sbb    ecx,edx
c0016549:	72 05                	jb     c0016550 <timerHandler(unsigned long long)+0x129>
c001654b:	e8 cf 72 00 00       	call   c001d81f <schedule()>
c0016550:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0016555:	48                   	dec    eax
c0016556:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001655b:	75 01                	jne    c001655e <timerHandler(unsigned long long)+0x137>
c001655d:	fb                   	sti    
c001655e:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c0016563:	48                   	dec    eax
c0016564:	a3 04 0b 03 c0       	mov    ds:0xc0030b04,eax
c0016569:	75 18                	jne    c0016583 <timerHandler(unsigned long long)+0x15c>
c001656b:	83 3d 00 0b 03 c0 00 	cmp    DWORD PTR ds:0xc0030b00,0x0
c0016572:	74 0f                	je     c0016583 <timerHandler(unsigned long long)+0x15c>
c0016574:	c7 05 00 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b00,0x0
c001657e:	e8 9c 72 00 00       	call   c001d81f <schedule()>
c0016583:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0016588:	48                   	dec    eax
c0016589:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001658e:	75 01                	jne    c0016591 <timerHandler(unsigned long long)+0x16a>
c0016590:	fb                   	sti    
c0016591:	83 c4 0c             	add    esp,0xc
c0016594:	5b                   	pop    ebx
c0016595:	5e                   	pop    esi
c0016596:	5f                   	pop    edi
c0016597:	5d                   	pop    ebp
c0016598:	c3                   	ret    

c0016599 <setupTimer(int)>:
c0016599:	57                   	push   edi
c001659a:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c001659f:	56                   	push   esi
c00165a0:	53                   	push   ebx
c00165a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00165a5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00165ab:	83 ec 0c             	sub    esp,0xc
c00165ae:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00165b4:	e8 b5 d6 ff ff       	call   c0013c6e <Device::getName()>
c00165b9:	83 c4 10             	add    esp,0x10
c00165bc:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00165bf:	0f 85 8d 00 00 00    	jne    c0016652 <setupTimer(int)+0xb9>
c00165c5:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c00165ca:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00165d1:	74 7f                	je     c0016652 <setupTimer(int)+0xb9>
c00165d3:	83 ec 0c             	sub    esp,0xc
c00165d6:	68 5c 01 00 00       	push   0x15c
c00165db:	e8 b9 8f ff ff       	call   c000f599 <malloc>
c00165e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00165e3:	89 c3                	mov    ebx,eax
c00165e5:	e8 54 fb 00 00       	call   c002613e <PIT::PIT()>
c00165ea:	59                   	pop    ecx
c00165eb:	5f                   	pop    edi
c00165ec:	53                   	push   ebx
c00165ed:	ff 35 e8 d5 02 c0    	push   DWORD PTR ds:0xc002d5e8
c00165f3:	e8 76 d3 ff ff       	call   c001396e <Device::addChild(Device*)>
c00165f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165fa:	6a 00                	push   0x0
c00165fc:	6a 00                	push   0x0
c00165fe:	56                   	push   esi
c00165ff:	53                   	push   ebx
c0016600:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016603:	83 c4 14             	add    esp,0x14
c0016606:	68 60 01 00 00       	push   0x160
c001660b:	e8 89 8f ff ff       	call   c000f599 <malloc>
c0016610:	89 04 24             	mov    DWORD PTR [esp],eax
c0016613:	89 c7                	mov    edi,eax
c0016615:	e8 d4 f9 00 00       	call   c0025fee <APICTimer::APICTimer()>
c001661a:	6a 00                	push   0x0
c001661c:	6a 00                	push   0x0
c001661e:	56                   	push   esi
c001661f:	57                   	push   edi
c0016620:	e8 cb f8 00 00       	call   c0025ef0 <APICTimer::open(int, int, void*)>
c0016625:	83 c4 20             	add    esp,0x20
c0016628:	8b 03                	mov    eax,DWORD PTR [ebx]
c001662a:	6a 00                	push   0x0
c001662c:	6a 00                	push   0x0
c001662e:	6a 00                	push   0x0
c0016630:	53                   	push   ebx
c0016631:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016634:	58                   	pop    eax
c0016635:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c001663a:	5a                   	pop    edx
c001663b:	57                   	push   edi
c001663c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016642:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016648:	e8 21 d3 ff ff       	call   c001396e <Device::addChild(Device*)>
c001664d:	83 c4 10             	add    esp,0x10
c0016650:	eb 33                	jmp    c0016685 <setupTimer(int)+0xec>
c0016652:	83 ec 0c             	sub    esp,0xc
c0016655:	68 5c 01 00 00       	push   0x15c
c001665a:	e8 3a 8f ff ff       	call   c000f599 <malloc>
c001665f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016662:	89 c3                	mov    ebx,eax
c0016664:	e8 d5 fa 00 00       	call   c002613e <PIT::PIT()>
c0016669:	58                   	pop    eax
c001666a:	5a                   	pop    edx
c001666b:	53                   	push   ebx
c001666c:	ff 35 e8 d5 02 c0    	push   DWORD PTR ds:0xc002d5e8
c0016672:	e8 f7 d2 ff ff       	call   c001396e <Device::addChild(Device*)>
c0016677:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016679:	6a 00                	push   0x0
c001667b:	6a 00                	push   0x0
c001667d:	56                   	push   esi
c001667e:	53                   	push   ebx
c001667f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016682:	83 c4 20             	add    esp,0x20
c0016685:	89 d8                	mov    eax,ebx
c0016687:	5b                   	pop    ebx
c0016688:	5e                   	pop    esi
c0016689:	5f                   	pop    edi
c001668a:	c3                   	ret    
c001668b:	90                   	nop

c001668c <VCache::VCache(PhysicalDisk*)>:
c001668c:	53                   	push   ebx
c001668d:	83 ec 18             	sub    esp,0x18
c0016690:	ba c4 ac 02 c0       	mov    edx,0xc002acc4
c0016695:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016699:	89 10                	mov    DWORD PTR [eax],edx
c001669b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001669f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00166a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166aa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00166b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166b5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00166bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00166c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166c7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00166ce:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00166d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166d9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00166e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166e4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00166e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166ec:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c00166f3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c00166fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166fe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016702:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016706:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001670a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001670e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016712:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016716:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001671d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016725:	83 ec 0c             	sub    esp,0xc
c0016728:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001672c:	e8 68 8e ff ff       	call   c000f599 <malloc>
c0016731:	83 c4 10             	add    esp,0x10
c0016734:	89 c3                	mov    ebx,eax
c0016736:	83 ec 0c             	sub    esp,0xc
c0016739:	53                   	push   ebx
c001673a:	e8 a9 6e 00 00       	call   c001d5e8 <Mutex::Mutex()>
c001673f:	83 c4 10             	add    esp,0x10
c0016742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016746:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016749:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001674d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016751:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016758:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001675f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016763:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001676d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016770:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016774:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001677a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016780:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016784:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016787:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001678a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001678e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016792:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016796:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001679c:	05 00 01 00 00       	add    eax,0x100
c00167a1:	c1 e0 04             	shl    eax,0x4
c00167a4:	83 ec 0c             	sub    esp,0xc
c00167a7:	50                   	push   eax
c00167a8:	e8 ec 8d ff ff       	call   c000f599 <malloc>
c00167ad:	83 c4 10             	add    esp,0x10
c00167b0:	89 c2                	mov    edx,eax
c00167b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00167b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167bd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00167c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167c8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00167cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00167d0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00167d6:	c1 e0 07             	shl    eax,0x7
c00167d9:	83 ec 0c             	sub    esp,0xc
c00167dc:	50                   	push   eax
c00167dd:	e8 b7 8d ff ff       	call   c000f599 <malloc>
c00167e2:	83 c4 10             	add    esp,0x10
c00167e5:	89 c2                	mov    edx,eax
c00167e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167eb:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00167ee:	90                   	nop
c00167ef:	83 c4 18             	add    esp,0x18
c00167f2:	5b                   	pop    ebx
c00167f3:	c3                   	ret    

c00167f4 <VCache::invalidateReadBuffer()>:
c00167f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167f8:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c00167fe:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016802:	c3                   	ret    
c0016803:	90                   	nop

c0016804 <VCache::writeWriteBuffer()>:
c0016804:	53                   	push   ebx
c0016805:	83 ec 14             	sub    esp,0x14
c0016808:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001680c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001680f:	8b 10                	mov    edx,DWORD PTR [eax]
c0016811:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016814:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016817:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001681a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001681d:	50                   	push   eax
c001681e:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016821:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016828:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001682f:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016833:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001683a:	83 c4 28             	add    esp,0x28
c001683d:	5b                   	pop    ebx
c001683e:	c3                   	ret    
c001683f:	90                   	nop

c0016840 <VCache::~VCache()>:
c0016840:	83 ec 0c             	sub    esp,0xc
c0016843:	ba c4 ac 02 c0       	mov    edx,0xc002acc4
c0016848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001684c:	89 10                	mov    DWORD PTR [eax],edx
c001684e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016852:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016855:	84 c0                	test   al,al
c0016857:	74 0f                	je     c0016868 <VCache::~VCache()+0x28>
c0016859:	83 ec 0c             	sub    esp,0xc
c001685c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016860:	e8 9f ff ff ff       	call   c0016804 <VCache::writeWriteBuffer()>
c0016865:	83 c4 10             	add    esp,0x10
c0016868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001686c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001686f:	83 ec 0c             	sub    esp,0xc
c0016872:	50                   	push   eax
c0016873:	e8 31 8d ff ff       	call   c000f5a9 <free>
c0016878:	83 c4 10             	add    esp,0x10
c001687b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001687f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016882:	83 ec 0c             	sub    esp,0xc
c0016885:	50                   	push   eax
c0016886:	e8 1e 8d ff ff       	call   c000f5a9 <free>
c001688b:	83 c4 10             	add    esp,0x10
c001688e:	90                   	nop
c001688f:	83 c4 0c             	add    esp,0xc
c0016892:	c3                   	ret    
c0016893:	90                   	nop

c0016894 <VCache::~VCache()>:
c0016894:	83 ec 0c             	sub    esp,0xc
c0016897:	83 ec 0c             	sub    esp,0xc
c001689a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001689e:	e8 9d ff ff ff       	call   c0016840 <VCache::~VCache()>
c00168a3:	83 c4 10             	add    esp,0x10
c00168a6:	83 ec 08             	sub    esp,0x8
c00168a9:	6a 44                	push   0x44
c00168ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168af:	e8 a9 bb ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c00168b4:	83 c4 10             	add    esp,0x10
c00168b7:	83 c4 0c             	add    esp,0xc
c00168ba:	c3                   	ret    
c00168bb:	90                   	nop

c00168bc <VCache::write(unsigned long long, int, void*)>:
c00168bc:	55                   	push   ebp
c00168bd:	57                   	push   edi
c00168be:	56                   	push   esi
c00168bf:	53                   	push   ebx
c00168c0:	83 ec 18             	sub    esp,0x18
c00168c3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00168c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00168cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00168cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00168d2:	e8 57 72 00 00       	call   c001db2e <Semaphore::acquire()>
c00168d7:	83 c4 10             	add    esp,0x10
c00168da:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00168de:	74 0c                	je     c00168ec <VCache::write(unsigned long long, int, void*)+0x30>
c00168e0:	83 ec 0c             	sub    esp,0xc
c00168e3:	53                   	push   ebx
c00168e4:	e8 0b ff ff ff       	call   c00167f4 <VCache::invalidateReadBuffer()>
c00168e9:	83 c4 10             	add    esp,0x10
c00168ec:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00168f0:	74 5c                	je     c001694e <VCache::write(unsigned long long, int, void*)+0x92>
c00168f2:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c00168f5:	89 e8                	mov    eax,ebp
c00168f7:	99                   	cdq    
c00168f8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00168fb:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00168fe:	89 c1                	mov    ecx,eax
c0016900:	89 d0                	mov    eax,edx
c0016902:	31 f1                	xor    ecx,esi
c0016904:	31 f8                	xor    eax,edi
c0016906:	09 c1                	or     ecx,eax
c0016908:	75 38                	jne    c0016942 <VCache::write(unsigned long long, int, void*)+0x86>
c001690a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001690f:	75 31                	jne    c0016942 <VCache::write(unsigned long long, int, void*)+0x86>
c0016911:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016914:	89 ef                	mov    edi,ebp
c0016916:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001691c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016920:	0f af f9             	imul   edi,ecx
c0016923:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016926:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016928:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001692b:	40                   	inc    eax
c001692c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001692f:	83 c0 80             	add    eax,0xffffff80
c0016932:	75 5c                	jne    c0016990 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016934:	83 ec 0c             	sub    esp,0xc
c0016937:	53                   	push   ebx
c0016938:	e8 c7 fe ff ff       	call   c0016804 <VCache::writeWriteBuffer()>
c001693d:	83 c4 10             	add    esp,0x10
c0016940:	eb 4e                	jmp    c0016990 <VCache::write(unsigned long long, int, void*)+0xd4>
c0016942:	83 ec 0c             	sub    esp,0xc
c0016945:	53                   	push   ebx
c0016946:	e8 b9 fe ff ff       	call   c0016804 <VCache::writeWriteBuffer()>
c001694b:	83 c4 10             	add    esp,0x10
c001694e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016951:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016956:	7f 22                	jg     c001697a <VCache::write(unsigned long long, int, void*)+0xbe>
c0016958:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001695b:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001695e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016962:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016966:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016969:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001696c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016972:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016976:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016978:	eb 16                	jmp    c0016990 <VCache::write(unsigned long long, int, void*)+0xd4>
c001697a:	83 ec 0c             	sub    esp,0xc
c001697d:	8b 10                	mov    edx,DWORD PTR [eax]
c001697f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016987:	57                   	push   edi
c0016988:	56                   	push   esi
c0016989:	50                   	push   eax
c001698a:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001698d:	83 c4 20             	add    esp,0x20
c0016990:	83 ec 0c             	sub    esp,0xc
c0016993:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016996:	e8 ef 77 00 00       	call   c001e18a <Semaphore::release()>
c001699b:	83 c4 1c             	add    esp,0x1c
c001699e:	31 c0                	xor    eax,eax
c00169a0:	5b                   	pop    ebx
c00169a1:	5e                   	pop    esi
c00169a2:	5f                   	pop    edi
c00169a3:	5d                   	pop    ebp
c00169a4:	c3                   	ret    
c00169a5:	90                   	nop

c00169a6 <VCache::read(unsigned long long, int, void*)>:
c00169a6:	55                   	push   ebp
c00169a7:	57                   	push   edi
c00169a8:	56                   	push   esi
c00169a9:	53                   	push   ebx
c00169aa:	83 ec 28             	sub    esp,0x28
c00169ad:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00169b1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00169b5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00169b9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00169bd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00169c0:	e8 69 71 00 00       	call   c001db2e <Semaphore::acquire()>
c00169c5:	83 c4 10             	add    esp,0x10
c00169c8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00169cc:	74 0c                	je     c00169da <VCache::read(unsigned long long, int, void*)+0x34>
c00169ce:	83 ec 0c             	sub    esp,0xc
c00169d1:	53                   	push   ebx
c00169d2:	e8 2d fe ff ff       	call   c0016804 <VCache::writeWriteBuffer()>
c00169d7:	83 c4 10             	add    esp,0x10
c00169da:	83 fd 01             	cmp    ebp,0x1
c00169dd:	0f 85 80 00 00 00    	jne    c0016a63 <VCache::read(unsigned long long, int, void*)+0xbd>
c00169e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00169e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00169ea:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00169f1:	75 70                	jne    c0016a63 <VCache::read(unsigned long long, int, void*)+0xbd>
c00169f3:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c00169f6:	89 e9                	mov    ecx,ebp
c00169f8:	f7 d9                	neg    ecx
c00169fa:	89 c8                	mov    eax,ecx
c00169fc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016a00:	c1 f8 1f             	sar    eax,0x1f
c0016a03:	21 f1                	and    ecx,esi
c0016a05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a09:	89 c8                	mov    eax,ecx
c0016a0b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016a0f:	21 f9                	and    ecx,edi
c0016a11:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016a15:	89 ca                	mov    edx,ecx
c0016a17:	74 0a                	je     c0016a23 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016a19:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016a1c:	75 05                	jne    c0016a23 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016a1e:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016a21:	74 23                	je     c0016a46 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016a23:	83 ec 0c             	sub    esp,0xc
c0016a26:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016a2a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016a2e:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016a31:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016a34:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016a36:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016a39:	55                   	push   ebp
c0016a3a:	52                   	push   edx
c0016a3b:	50                   	push   eax
c0016a3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016a40:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016a43:	83 c4 20             	add    esp,0x20
c0016a46:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a49:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016a4d:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016a53:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016a56:	48                   	dec    eax
c0016a57:	21 c6                	and    esi,eax
c0016a59:	0f af f1             	imul   esi,ecx
c0016a5c:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016a5f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016a61:	eb 1d                	jmp    c0016a80 <VCache::read(unsigned long long, int, void*)+0xda>
c0016a63:	83 ec 0c             	sub    esp,0xc
c0016a66:	53                   	push   ebx
c0016a67:	e8 88 fd ff ff       	call   c00167f4 <VCache::invalidateReadBuffer()>
c0016a6c:	5a                   	pop    edx
c0016a6d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a70:	8b 10                	mov    edx,DWORD PTR [eax]
c0016a72:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016a76:	55                   	push   ebp
c0016a77:	57                   	push   edi
c0016a78:	56                   	push   esi
c0016a79:	50                   	push   eax
c0016a7a:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016a7d:	83 c4 20             	add    esp,0x20
c0016a80:	83 ec 0c             	sub    esp,0xc
c0016a83:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a86:	e8 ff 76 00 00       	call   c001e18a <Semaphore::release()>
c0016a8b:	83 c4 2c             	add    esp,0x2c
c0016a8e:	31 c0                	xor    eax,eax
c0016a90:	5b                   	pop    ebx
c0016a91:	5e                   	pop    esi
c0016a92:	5f                   	pop    edi
c0016a93:	5d                   	pop    ebp
c0016a94:	c3                   	ret    
c0016a95:	90                   	nop

c0016a96 <Video::putrect(int, int, int, int, unsigned int)>:
c0016a96:	55                   	push   ebp
c0016a97:	57                   	push   edi
c0016a98:	56                   	push   esi
c0016a99:	53                   	push   ebx
c0016a9a:	83 ec 1c             	sub    esp,0x1c
c0016a9d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016aa1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016aa5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016aa9:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016aad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ab1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ab5:	01 df                	add    edi,ebx
c0016ab7:	39 fb                	cmp    ebx,edi
c0016ab9:	7d 1f                	jge    c0016ada <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016abb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016abf:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016ac3:	7d 12                	jge    c0016ad7 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016ac5:	8b 16                	mov    edx,DWORD PTR [esi]
c0016ac7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016acb:	53                   	push   ebx
c0016acc:	55                   	push   ebp
c0016acd:	45                   	inc    ebp
c0016ace:	56                   	push   esi
c0016acf:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016ad2:	83 c4 10             	add    esp,0x10
c0016ad5:	eb e8                	jmp    c0016abf <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016ad7:	43                   	inc    ebx
c0016ad8:	eb dd                	jmp    c0016ab7 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016ada:	83 c4 1c             	add    esp,0x1c
c0016add:	5b                   	pop    ebx
c0016ade:	5e                   	pop    esi
c0016adf:	5f                   	pop    edi
c0016ae0:	5d                   	pop    ebp
c0016ae1:	c3                   	ret    

c0016ae2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016ae2:	55                   	push   ebp
c0016ae3:	57                   	push   edi
c0016ae4:	31 ff                	xor    edi,edi
c0016ae6:	56                   	push   esi
c0016ae7:	53                   	push   ebx
c0016ae8:	83 ec 1c             	sub    esp,0x1c
c0016aeb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016aef:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016af3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016afa:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016aff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b03:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016b07:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016b0b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016b0e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016b12:	01 f9                	add    ecx,edi
c0016b14:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016b18:	7d 2f                	jge    c0016b49 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016b1a:	31 f6                	xor    esi,esi
c0016b1c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016b20:	01 f2                	add    edx,esi
c0016b22:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016b26:	7d 1a                	jge    c0016b42 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016b28:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016b2b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016b2e:	46                   	inc    esi
c0016b2f:	51                   	push   ecx
c0016b30:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016b34:	52                   	push   edx
c0016b35:	55                   	push   ebp
c0016b36:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016b39:	83 c4 10             	add    esp,0x10
c0016b3c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b40:	eb da                	jmp    c0016b1c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016b42:	47                   	inc    edi
c0016b43:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016b47:	eb c5                	jmp    c0016b0e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016b49:	83 c4 1c             	add    esp,0x1c
c0016b4c:	5b                   	pop    ebx
c0016b4d:	5e                   	pop    esi
c0016b4e:	5f                   	pop    edi
c0016b4f:	5d                   	pop    ebp
c0016b50:	c3                   	ret    
c0016b51:	90                   	nop

c0016b52 <Video::blit(unsigned int*, int, int, int, int)>:
c0016b52:	55                   	push   ebp
c0016b53:	57                   	push   edi
c0016b54:	56                   	push   esi
c0016b55:	53                   	push   ebx
c0016b56:	83 ec 1c             	sub    esp,0x1c
c0016b59:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016b5d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b61:	85 c0                	test   eax,eax
c0016b63:	79 02                	jns    c0016b67 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016b65:	31 c0                	xor    eax,eax
c0016b67:	c1 e0 02             	shl    eax,0x2
c0016b6a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016b76:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016b7a:	39 d8                	cmp    eax,ebx
c0016b7c:	7e 49                	jle    c0016bc7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016b7e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016b84:	7c 41                	jl     c0016bc7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016b86:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016b8a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016b8e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016b92:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016b96:	39 f9                	cmp    ecx,edi
c0016b98:	7e 22                	jle    c0016bbc <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016b9a:	83 c5 04             	add    ebp,0x4
c0016b9d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016ba3:	7c 14                	jl     c0016bb9 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016ba5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016ba7:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016baa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016bae:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016bb2:	56                   	push   esi
c0016bb3:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016bb6:	83 c4 10             	add    esp,0x10
c0016bb9:	47                   	inc    edi
c0016bba:	eb d2                	jmp    c0016b8e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016bbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016bc0:	43                   	inc    ebx
c0016bc1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016bc5:	eb ab                	jmp    c0016b72 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016bc7:	83 c4 1c             	add    esp,0x1c
c0016bca:	5b                   	pop    ebx
c0016bcb:	5e                   	pop    esi
c0016bcc:	5f                   	pop    edi
c0016bcd:	5d                   	pop    ebp
c0016bce:	c3                   	ret    
c0016bcf:	90                   	nop

c0016bd0 <Video::clearScreen(unsigned int)>:
c0016bd0:	57                   	push   edi
c0016bd1:	56                   	push   esi
c0016bd2:	53                   	push   ebx
c0016bd3:	31 db                	xor    ebx,ebx
c0016bd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016bd9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016bdf:	7e 1f                	jle    c0016c00 <Video::clearScreen(unsigned int)+0x30>
c0016be1:	31 ff                	xor    edi,edi
c0016be3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016be9:	7e 12                	jle    c0016bfd <Video::clearScreen(unsigned int)+0x2d>
c0016beb:	8b 06                	mov    eax,DWORD PTR [esi]
c0016bed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016bf1:	53                   	push   ebx
c0016bf2:	57                   	push   edi
c0016bf3:	47                   	inc    edi
c0016bf4:	56                   	push   esi
c0016bf5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016bf8:	83 c4 10             	add    esp,0x10
c0016bfb:	eb e6                	jmp    c0016be3 <Video::clearScreen(unsigned int)+0x13>
c0016bfd:	43                   	inc    ebx
c0016bfe:	eb d9                	jmp    c0016bd9 <Video::clearScreen(unsigned int)+0x9>
c0016c00:	5b                   	pop    ebx
c0016c01:	5e                   	pop    esi
c0016c02:	5f                   	pop    edi
c0016c03:	c3                   	ret    

c0016c04 <Video::putpixel(int, int, unsigned int)>:
c0016c04:	c7 44 24 04 cc ac 02 c0 	mov    DWORD PTR [esp+0x4],0xc002accc
c0016c0c:	e9 84 30 00 00       	jmp    c0019c95 <Krnl::panic(char const*)>
c0016c11:	90                   	nop

c0016c12 <Video::Video(char const*)>:
c0016c12:	83 ec 0c             	sub    esp,0xc
c0016c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c19:	83 ec 08             	sub    esp,0x8
c0016c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c20:	50                   	push   eax
c0016c21:	e8 4c cf ff ff       	call   c0013b72 <Device::Device(char const*)>
c0016c26:	83 c4 10             	add    esp,0x10
c0016c29:	ba 3c ad 02 c0       	mov    edx,0xc002ad3c
c0016c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c32:	89 10                	mov    DWORD PTR [eax],edx
c0016c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c38:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016c42:	90                   	nop
c0016c43:	83 c4 0c             	add    esp,0xc
c0016c46:	c3                   	ret    
c0016c47:	90                   	nop

c0016c48 <Video::~Video()>:
c0016c48:	83 ec 0c             	sub    esp,0xc
c0016c4b:	ba 3c ad 02 c0       	mov    edx,0xc002ad3c
c0016c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c54:	89 10                	mov    DWORD PTR [eax],edx
c0016c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5a:	83 ec 0c             	sub    esp,0xc
c0016c5d:	50                   	push   eax
c0016c5e:	e8 d9 cb ff ff       	call   c001383c <Device::~Device()>
c0016c63:	83 c4 10             	add    esp,0x10
c0016c66:	90                   	nop
c0016c67:	83 c4 0c             	add    esp,0xc
c0016c6a:	c3                   	ret    
c0016c6b:	90                   	nop

c0016c6c <Video::~Video()>:
c0016c6c:	83 ec 0c             	sub    esp,0xc
c0016c6f:	83 ec 0c             	sub    esp,0xc
c0016c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c76:	e8 cd ff ff ff       	call   c0016c48 <Video::~Video()>
c0016c7b:	83 c4 10             	add    esp,0x10
c0016c7e:	83 ec 08             	sub    esp,0x8
c0016c81:	68 64 01 00 00       	push   0x164
c0016c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c8a:	e8 ce b7 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0016c8f:	83 c4 10             	add    esp,0x10
c0016c92:	83 c4 0c             	add    esp,0xc
c0016c95:	c3                   	ret    

c0016c96 <Video::isMonochrome()>:
c0016c96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c9a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016ca0:	c3                   	ret    
c0016ca1:	90                   	nop

c0016ca2 <Video::getWidth()>:
c0016ca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ca6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016cac:	c3                   	ret    
c0016cad:	90                   	nop

c0016cae <Video::getHeight()>:
c0016cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cb2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016cb8:	c3                   	ret    
c0016cb9:	90                   	nop

c0016cba <Video::drawCursor(int, int, unsigned char*, int)>:
c0016cba:	55                   	push   ebp
c0016cbb:	57                   	push   edi
c0016cbc:	56                   	push   esi
c0016cbd:	53                   	push   ebx
c0016cbe:	83 ec 2c             	sub    esp,0x2c
c0016cc1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016cc5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016cc9:	83 f8 01             	cmp    eax,0x1
c0016ccc:	19 c9                	sbb    ecx,ecx
c0016cce:	31 db                	xor    ebx,ebx
c0016cd0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016cd4:	89 cd                	mov    ebp,ecx
c0016cd6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016cde:	f7 d5                	not    ebp
c0016ce0:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016ce6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016cea:	01 d8                	add    eax,ebx
c0016cec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cf0:	56                   	push   esi
c0016cf1:	e8 b8 ff ff ff       	call   c0016cae <Video::getHeight()>
c0016cf6:	59                   	pop    ecx
c0016cf7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016cfb:	7e 70                	jle    c0016d6d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016cfd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016d01:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016d05:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016d08:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d0c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016d10:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016d17:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016d1b:	89 f8                	mov    eax,edi
c0016d1d:	83 c0 20             	add    eax,0x20
c0016d20:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016d24:	56                   	push   esi
c0016d25:	e8 78 ff ff ff       	call   c0016ca2 <Video::getWidth()>
c0016d2a:	5a                   	pop    edx
c0016d2b:	39 c7                	cmp    edi,eax
c0016d2d:	7d 34                	jge    c0016d63 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016d2f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016d34:	74 05                	je     c0016d3b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016d36:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d38:	55                   	push   ebp
c0016d39:	eb 0d                	jmp    c0016d48 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016d3b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016d40:	74 12                	je     c0016d54 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016d42:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d48:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016d4c:	57                   	push   edi
c0016d4d:	56                   	push   esi
c0016d4e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d51:	83 c4 10             	add    esp,0x10
c0016d54:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016d58:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016d5c:	47                   	inc    edi
c0016d5d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016d61:	75 c1                	jne    c0016d24 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016d63:	43                   	inc    ebx
c0016d64:	83 fb 20             	cmp    ebx,0x20
c0016d67:	0f 85 79 ff ff ff    	jne    c0016ce6 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016d6d:	83 c4 2c             	add    esp,0x2c
c0016d70:	5b                   	pop    ebx
c0016d71:	5e                   	pop    esi
c0016d72:	5f                   	pop    edi
c0016d73:	5d                   	pop    ebp
c0016d74:	c3                   	ret    
c0016d75:	90                   	nop

c0016d76 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016d76:	55                   	push   ebp
c0016d77:	57                   	push   edi
c0016d78:	56                   	push   esi
c0016d79:	53                   	push   ebx
c0016d7a:	83 ec 28             	sub    esp,0x28
c0016d7d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016d81:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016d85:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016d89:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016d8d:	c1 e6 08             	shl    esi,0x8
c0016d90:	01 c6                	add    esi,eax
c0016d92:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016d96:	c1 e0 08             	shl    eax,0x8
c0016d99:	01 d0                	add    eax,edx
c0016d9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d9f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016da3:	0f af c6             	imul   eax,esi
c0016da6:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016dad:	50                   	push   eax
c0016dae:	e8 e6 87 ff ff       	call   c000f599 <malloc>
c0016db3:	83 c4 10             	add    esp,0x10
c0016db6:	89 c7                	mov    edi,eax
c0016db8:	85 c0                	test   eax,eax
c0016dba:	75 10                	jne    c0016dcc <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016dbc:	83 ec 0c             	sub    esp,0xc
c0016dbf:	68 ed ac 02 c0       	push   0xc002aced
c0016dc4:	e8 cc 2e 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0016dc9:	83 c4 10             	add    esp,0x10
c0016dcc:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016dcf:	ba 12 00 00 00       	mov    edx,0x12
c0016dd4:	84 c0                	test   al,al
c0016dd6:	74 11                	je     c0016de9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016dd8:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016ddc:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016de0:	c1 fa 03             	sar    edx,0x3
c0016de3:	0f af d1             	imul   edx,ecx
c0016de6:	83 c2 12             	add    edx,0x12
c0016de9:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016ded:	74 04                	je     c0016df3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016def:	85 f6                	test   esi,esi
c0016df1:	75 12                	jne    c0016e05 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016df3:	83 ec 0c             	sub    esp,0xc
c0016df6:	68 fd ac 02 c0       	push   0xc002acfd
c0016dfb:	e8 35 b7 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0016e00:	e9 b8 00 00 00       	jmp    c0016ebd <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016e05:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016e09:	80 f9 02             	cmp    cl,0x2
c0016e0c:	0f 85 96 00 00 00    	jne    c0016ea8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016e12:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016e17:	75 0e                	jne    c0016e27 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016e19:	84 c0                	test   al,al
c0016e1b:	75 0a                	jne    c0016e27 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016e1d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016e20:	83 e8 18             	sub    eax,0x18
c0016e23:	a8 f7                	test   al,0xf7
c0016e25:	74 0a                	je     c0016e31 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016e27:	83 ec 0c             	sub    esp,0xc
c0016e2a:	68 12 ad 02 c0       	push   0xc002ad12
c0016e2f:	eb 7f                	jmp    c0016eb0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016e31:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016e39:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016e41:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016e45:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016e4d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016e51:	75 0c                	jne    c0016e5f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016e53:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0016e58:	c1 e0 18             	shl    eax,0x18
c0016e5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e5f:	45                   	inc    ebp
c0016e60:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0016e65:	c1 e1 10             	shl    ecx,0x10
c0016e68:	89 c8                	mov    eax,ecx
c0016e6a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0016e6f:	c1 e1 08             	shl    ecx,0x8
c0016e72:	09 c1                	or     ecx,eax
c0016e74:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0016e78:	09 c1                	or     ecx,eax
c0016e7a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0016e7e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0016e82:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016e86:	c1 f8 03             	sar    eax,0x3
c0016e89:	01 c2                	add    edx,eax
c0016e8b:	89 e8                	mov    eax,ebp
c0016e8d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016e91:	39 c6                	cmp    esi,eax
c0016e93:	7f b0                	jg     c0016e45 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0016e95:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016e99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016e9d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0016ea0:	7e 22                	jle    c0016ec4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0016ea2:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0016ea6:	eb 99                	jmp    c0016e41 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016ea8:	50                   	push   eax
c0016ea9:	50                   	push   eax
c0016eaa:	51                   	push   ecx
c0016eab:	68 20 ad 02 c0       	push   0xc002ad20
c0016eb0:	e8 80 b6 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0016eb5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016eb8:	e8 ec 86 ff ff       	call   c000f5a9 <free>
c0016ebd:	83 c4 10             	add    esp,0x10
c0016ec0:	31 ff                	xor    edi,edi
c0016ec2:	eb 0f                	jmp    c0016ed3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0016ec4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ec8:	89 30                	mov    DWORD PTR [eax],esi
c0016eca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ece:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0016ed1:	89 30                	mov    DWORD PTR [eax],esi
c0016ed3:	83 c4 1c             	add    esp,0x1c
c0016ed6:	89 f8                	mov    eax,edi
c0016ed8:	5b                   	pop    ebx
c0016ed9:	5e                   	pop    esi
c0016eda:	5f                   	pop    edi
c0016edb:	5d                   	pop    ebp
c0016edc:	c3                   	ret    
c0016edd:	90                   	nop

c0016ede <Video::putTGA(int, int, unsigned char*, int)>:
c0016ede:	55                   	push   ebp
c0016edf:	57                   	push   edi
c0016ee0:	56                   	push   esi
c0016ee1:	53                   	push   ebx
c0016ee2:	83 ec 28             	sub    esp,0x28
c0016ee5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016ee9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016eed:	50                   	push   eax
c0016eee:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016ef2:	50                   	push   eax
c0016ef3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016ef7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016efb:	56                   	push   esi
c0016efc:	e8 75 fe ff ff       	call   c0016d76 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016f01:	83 c4 20             	add    esp,0x20
c0016f04:	85 c0                	test   eax,eax
c0016f06:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016f0a:	74 35                	je     c0016f41 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016f0c:	89 c7                	mov    edi,eax
c0016f0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f12:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016f16:	39 d8                	cmp    eax,ebx
c0016f18:	7e 27                	jle    c0016f41 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016f1a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f1e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f22:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016f26:	39 e8                	cmp    eax,ebp
c0016f28:	7e 14                	jle    c0016f3e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016f2a:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f2c:	83 c7 04             	add    edi,0x4
c0016f2f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016f32:	53                   	push   ebx
c0016f33:	55                   	push   ebp
c0016f34:	45                   	inc    ebp
c0016f35:	56                   	push   esi
c0016f36:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f39:	83 c4 10             	add    esp,0x10
c0016f3c:	eb e0                	jmp    c0016f1e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016f3e:	43                   	inc    ebx
c0016f3f:	eb cd                	jmp    c0016f0e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016f41:	83 c4 1c             	add    esp,0x1c
c0016f44:	5b                   	pop    ebx
c0016f45:	5e                   	pop    esi
c0016f46:	5f                   	pop    edi
c0016f47:	5d                   	pop    ebp
c0016f48:	c3                   	ret    
c0016f49:	90                   	nop

c0016f4a <ACPI::close(int, int, void*)>:
c0016f4a:	83 ec 1c             	sub    esp,0x1c
c0016f4d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016f55:	74 0a                	je     c0016f61 <ACPI::close(int, int, void*)+0x17>
c0016f57:	b8 00 00 00 00       	mov    eax,0x0
c0016f5c:	e9 8a 00 00 00       	jmp    c0016feb <ACPI::close(int, int, void*)+0xa1>
c0016f61:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f66:	75 27                	jne    c0016f8f <ACPI::close(int, int, void*)+0x45>
c0016f68:	a1 88 fc 02 c0       	mov    eax,ds:0xc002fc88
c0016f6d:	85 c0                	test   eax,eax
c0016f6f:	74 07                	je     c0016f78 <ACPI::close(int, int, void*)+0x2e>
c0016f71:	a1 88 fc 02 c0       	mov    eax,ds:0xc002fc88
c0016f76:	ff d0                	call   eax
c0016f78:	83 ec 0c             	sub    esp,0xc
c0016f7b:	68 7c ad 02 c0       	push   0xc002ad7c
c0016f80:	e8 10 2d 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0016f85:	83 c4 10             	add    esp,0x10
c0016f88:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016f8d:	eb 5c                	jmp    c0016feb <ACPI::close(int, int, void*)+0xa1>
c0016f8f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016f94:	75 50                	jne    c0016fe6 <ACPI::close(int, int, void*)+0x9c>
c0016f96:	a1 84 fc 02 c0       	mov    eax,ds:0xc002fc84
c0016f9b:	85 c0                	test   eax,eax
c0016f9d:	74 07                	je     c0016fa6 <ACPI::close(int, int, void*)+0x5c>
c0016f9f:	a1 84 fc 02 c0       	mov    eax,ds:0xc002fc84
c0016fa4:	ff d0                	call   eax
c0016fa6:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016fab:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016fb0:	83 e0 02             	and    eax,0x2
c0016fb3:	74 1c                	je     c0016fd1 <ACPI::close(int, int, void*)+0x87>
c0016fb5:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016fbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fc0:	89 c2                	mov    edx,eax
c0016fc2:	ec                   	in     al,dx
c0016fc3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016fc7:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016fcb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016fcf:	eb da                	jmp    c0016fab <ACPI::close(int, int, void*)+0x61>
c0016fd1:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016fd8:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016fdd:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016fe1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016fe5:	ee                   	out    dx,al
c0016fe6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016feb:	83 c4 1c             	add    esp,0x1c
c0016fee:	c3                   	ret    

c0016fef <findRSDP()>:
c0016fef:	83 ec 1c             	sub    esp,0x1c
c0016ff2:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0016ff7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016ffd:	83 e0 04             	and    eax,0x4
c0017000:	84 c0                	test   al,al
c0017002:	75 07                	jne    c001700b <findRSDP()+0x1c>
c0017004:	b8 00 00 00 00       	mov    eax,0x0
c0017009:	eb 6a                	jmp    c0017075 <findRSDP()+0x86>
c001700b:	a1 34 d6 02 c0       	mov    eax,ds:0xc002d634
c0017010:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017015:	7f 1b                	jg     c0017032 <findRSDP()+0x43>
c0017017:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c001701c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017022:	83 e2 fb             	and    edx,0xfffffffb
c0017025:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001702b:	b8 00 00 00 00       	mov    eax,0x0
c0017030:	eb 43                	jmp    c0017075 <findRSDP()+0x86>
c0017032:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001703a:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017042:	77 2c                	ja     c0017070 <findRSDP()+0x81>
c0017044:	83 ec 04             	sub    esp,0x4
c0017047:	6a 08                	push   0x8
c0017049:	68 17 ae 02 c0       	push   0xc002ae17
c001704e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017052:	e8 f5 95 fe ff       	call   c000064c <memcmp>
c0017057:	83 c4 10             	add    esp,0x10
c001705a:	85 c0                	test   eax,eax
c001705c:	0f 94 c0             	sete   al
c001705f:	84 c0                	test   al,al
c0017061:	74 06                	je     c0017069 <findRSDP()+0x7a>
c0017063:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017067:	eb 0c                	jmp    c0017075 <findRSDP()+0x86>
c0017069:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001706e:	eb ca                	jmp    c001703a <findRSDP()+0x4b>
c0017070:	b8 00 00 00 00       	mov    eax,0x0
c0017075:	83 c4 1c             	add    esp,0x1c
c0017078:	c3                   	ret    

c0017079 <loadACPITables(unsigned char*)>:
c0017079:	57                   	push   edi
c001707a:	56                   	push   esi
c001707b:	53                   	push   ebx
c001707c:	83 ec 60             	sub    esp,0x60
c001707f:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0017084:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001708a:	83 e0 04             	and    eax,0x4
c001708d:	84 c0                	test   al,al
c001708f:	0f 84 33 02 00 00    	je     c00172c8 <loadACPITables(unsigned char*)+0x24f>
c0017095:	a0 a0 fe 02 c0       	mov    al,ds:0xc002fea0
c001709a:	84 c0                	test   al,al
c001709c:	74 75                	je     c0017113 <loadACPITables(unsigned char*)+0x9a>
c001709e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00170a2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00170a6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00170ad:	83 e8 24             	sub    eax,0x24
c00170b0:	c1 e8 03             	shr    eax,0x3
c00170b3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00170b7:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00170bf:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00170c3:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00170c7:	0f 8d b2 00 00 00    	jge    c001717f <loadACPITables(unsigned char*)+0x106>
c00170cd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00170d1:	83 c0 24             	add    eax,0x24
c00170d4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00170d8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00170dc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00170e0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00170e4:	c1 e0 03             	shl    eax,0x3
c00170e7:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00170eb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00170ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00170f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00170f4:	89 c1                	mov    ecx,eax
c00170f6:	a1 8c fc 02 c0       	mov    eax,ds:0xc002fc8c
c00170fb:	8d 50 01             	lea    edx,[eax+0x1]
c00170fe:	89 15 8c fc 02 c0    	mov    DWORD PTR ds:0xc002fc8c,edx
c0017104:	89 ca                	mov    edx,ecx
c0017106:	89 14 c5 a4 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd035c],edx
c001710d:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017111:	eb ac                	jmp    c00170bf <loadACPITables(unsigned char*)+0x46>
c0017113:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017117:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001711b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001711f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017122:	83 e8 24             	sub    eax,0x24
c0017125:	c1 e8 02             	shr    eax,0x2
c0017128:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001712c:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017134:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017138:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001713c:	7d 41                	jge    c001717f <loadACPITables(unsigned char*)+0x106>
c001713e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017142:	83 c0 24             	add    eax,0x24
c0017145:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017149:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001714d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017151:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017155:	c1 e0 02             	shl    eax,0x2
c0017158:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001715c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017160:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017162:	a1 8c fc 02 c0       	mov    eax,ds:0xc002fc8c
c0017167:	8d 50 01             	lea    edx,[eax+0x1]
c001716a:	89 15 8c fc 02 c0    	mov    DWORD PTR ds:0xc002fc8c,edx
c0017170:	89 ca                	mov    edx,ecx
c0017172:	89 14 c5 a4 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd035c],edx
c0017179:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c001717d:	eb b5                	jmp    c0017134 <loadACPITables(unsigned char*)+0xbb>
c001717f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017187:	a1 8c fc 02 c0       	mov    eax,ds:0xc002fc8c
c001718c:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017190:	0f 8d 33 01 00 00    	jge    c00172c9 <loadACPITables(unsigned char*)+0x250>
c0017196:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001719a:	8b 04 c5 a4 fc 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd035c]
c00171a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171a9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00171ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171b1:	25 ff 0f 00 00       	and    eax,0xfff
c00171b6:	89 c6                	mov    esi,eax
c00171b8:	8b 1d 50 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d750
c00171be:	83 ec 0c             	sub    esp,0xc
c00171c1:	6a 01                	push   0x1
c00171c3:	e8 d5 9f ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c00171c8:	83 c4 10             	add    esp,0x10
c00171cb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00171cf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00171d5:	83 ec 0c             	sub    esp,0xc
c00171d8:	6a 01                	push   0x1
c00171da:	6a 01                	push   0x1
c00171dc:	50                   	push   eax
c00171dd:	52                   	push   edx
c00171de:	53                   	push   ebx
c00171df:	e8 6c aa ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00171e4:	83 c4 20             	add    esp,0x20
c00171e7:	09 f0                	or     eax,esi
c00171e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00171ed:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00171f1:	c1 e0 03             	shl    eax,0x3
c00171f4:	05 a0 fc 02 c0       	add    eax,0xc002fca0
c00171f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017201:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017205:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001720d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017211:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017215:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017219:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001721d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017221:	89 c6                	mov    esi,eax
c0017223:	89 d7                	mov    edi,edx
c0017225:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017227:	89 c8                	mov    eax,ecx
c0017229:	89 fa                	mov    edx,edi
c001722b:	89 f3                	mov    ebx,esi
c001722d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017231:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017235:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017239:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001723d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017240:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017244:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017248:	05 00 10 00 00       	add    eax,0x1000
c001724d:	c1 e8 0c             	shr    eax,0xc
c0017250:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017254:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001725c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017260:	25 ff 0f 00 00       	and    eax,0xfff
c0017265:	89 c6                	mov    esi,eax
c0017267:	8b 1d 50 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d750
c001726d:	83 ec 0c             	sub    esp,0xc
c0017270:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017274:	e8 24 9f ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c0017279:	83 c4 10             	add    esp,0x10
c001727c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017280:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017286:	83 ec 0c             	sub    esp,0xc
c0017289:	6a 01                	push   0x1
c001728b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001728f:	50                   	push   eax
c0017290:	52                   	push   edx
c0017291:	53                   	push   ebx
c0017292:	e8 b9 a9 ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017297:	83 c4 20             	add    esp,0x20
c001729a:	09 f0                	or     eax,esi
c001729c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172a4:	83 ec 0c             	sub    esp,0xc
c00172a7:	50                   	push   eax
c00172a8:	e8 36 a3 ff ff       	call   c00115e3 <Virt::freeKernelVirtualPages(unsigned long)>
c00172ad:	83 c4 10             	add    esp,0x10
c00172b0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00172b4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00172b8:	89 14 c5 a4 fc 02 c0 	mov    DWORD PTR [eax*8-0x3ffd035c],edx
c00172bf:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00172c3:	e9 bf fe ff ff       	jmp    c0017187 <loadACPITables(unsigned char*)+0x10e>
c00172c8:	90                   	nop
c00172c9:	83 c4 60             	add    esp,0x60
c00172cc:	5b                   	pop    ebx
c00172cd:	5e                   	pop    esi
c00172ce:	5f                   	pop    edi
c00172cf:	c3                   	ret    

c00172d0 <findRSDT(unsigned char*)>:
c00172d0:	57                   	push   edi
c00172d1:	56                   	push   esi
c00172d2:	53                   	push   ebx
c00172d3:	83 ec 50             	sub    esp,0x50
c00172d6:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c00172db:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172e1:	83 e0 04             	and    eax,0x4
c00172e4:	84 c0                	test   al,al
c00172e6:	75 0a                	jne    c00172f2 <findRSDT(unsigned char*)+0x22>
c00172e8:	b8 00 00 00 00       	mov    eax,0x0
c00172ed:	e9 21 01 00 00       	jmp    c0017413 <findRSDT(unsigned char*)+0x143>
c00172f2:	89 e0                	mov    eax,esp
c00172f4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172f8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00172fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017300:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017308:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001730c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017310:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017314:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017318:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001731c:	89 c6                	mov    esi,eax
c001731e:	89 d7                	mov    edi,edx
c0017320:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017322:	89 c8                	mov    eax,ecx
c0017324:	89 fa                	mov    edx,edi
c0017326:	89 f3                	mov    ebx,esi
c0017328:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001732c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017330:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017334:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017338:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001733c:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017344:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017348:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001734c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017354:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017358:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001735c:	25 ff 0f 00 00       	and    eax,0xfff
c0017361:	89 c6                	mov    esi,eax
c0017363:	8b 1d 50 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d750
c0017369:	83 ec 0c             	sub    esp,0xc
c001736c:	6a 02                	push   0x2
c001736e:	e8 2a 9e ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c0017373:	83 c4 10             	add    esp,0x10
c0017376:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001737a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017380:	83 ec 0c             	sub    esp,0xc
c0017383:	6a 01                	push   0x1
c0017385:	6a 02                	push   0x2
c0017387:	50                   	push   eax
c0017388:	52                   	push   edx
c0017389:	53                   	push   ebx
c001738a:	e8 c1 a8 ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001738f:	83 c4 20             	add    esp,0x20
c0017392:	09 f0                	or     eax,esi
c0017394:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017398:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001739c:	25 ff 0f 00 00       	and    eax,0xfff
c00173a1:	89 c6                	mov    esi,eax
c00173a3:	8b 1d 50 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d750
c00173a9:	83 ec 0c             	sub    esp,0xc
c00173ac:	6a 02                	push   0x2
c00173ae:	e8 ea 9d ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c00173b3:	83 c4 10             	add    esp,0x10
c00173b6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00173ba:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00173c0:	83 ec 0c             	sub    esp,0xc
c00173c3:	6a 01                	push   0x1
c00173c5:	6a 02                	push   0x2
c00173c7:	50                   	push   eax
c00173c8:	52                   	push   edx
c00173c9:	53                   	push   ebx
c00173ca:	e8 81 a8 ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00173cf:	83 c4 20             	add    esp,0x20
c00173d2:	09 f0                	or     eax,esi
c00173d4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00173d8:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00173dd:	75 11                	jne    c00173f0 <findRSDT(unsigned char*)+0x120>
c00173df:	c6 05 a0 fe 02 c0 00 	mov    BYTE PTR ds:0xc002fea0,0x0
c00173e6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173ea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00173ee:	eb 1f                	jmp    c001740f <findRSDT(unsigned char*)+0x13f>
c00173f0:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00173f5:	75 11                	jne    c0017408 <findRSDT(unsigned char*)+0x138>
c00173f7:	c6 05 a0 fe 02 c0 01 	mov    BYTE PTR ds:0xc002fea0,0x1
c00173fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017402:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017406:	eb 07                	jmp    c001740f <findRSDT(unsigned char*)+0x13f>
c0017408:	b8 00 00 00 00       	mov    eax,0x0
c001740d:	eb 04                	jmp    c0017413 <findRSDT(unsigned char*)+0x143>
c001740f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017413:	83 c4 50             	add    esp,0x50
c0017416:	5b                   	pop    ebx
c0017417:	5e                   	pop    esi
c0017418:	5f                   	pop    edi
c0017419:	c3                   	ret    

c001741a <findDataTable(unsigned char*, char*)>:
c001741a:	83 ec 1c             	sub    esp,0x1c
c001741d:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0017422:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017428:	83 e0 04             	and    eax,0x4
c001742b:	84 c0                	test   al,al
c001742d:	75 07                	jne    c0017436 <findDataTable(unsigned char*, char*)+0x1c>
c001742f:	b8 00 00 00 00       	mov    eax,0x0
c0017434:	eb 52                	jmp    c0017488 <findDataTable(unsigned char*, char*)+0x6e>
c0017436:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001743e:	a1 8c fc 02 c0       	mov    eax,ds:0xc002fc8c
c0017443:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017447:	7d 3a                	jge    c0017483 <findDataTable(unsigned char*, char*)+0x69>
c0017449:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001744d:	c1 e0 03             	shl    eax,0x3
c0017450:	05 a0 fc 02 c0       	add    eax,0xc002fca0
c0017455:	83 ec 04             	sub    esp,0x4
c0017458:	6a 04                	push   0x4
c001745a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001745e:	50                   	push   eax
c001745f:	e8 e8 91 fe ff       	call   c000064c <memcmp>
c0017464:	83 c4 10             	add    esp,0x10
c0017467:	85 c0                	test   eax,eax
c0017469:	0f 94 c0             	sete   al
c001746c:	84 c0                	test   al,al
c001746e:	74 0d                	je     c001747d <findDataTable(unsigned char*, char*)+0x63>
c0017470:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017474:	8b 04 c5 a4 fc 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd035c]
c001747b:	eb 0b                	jmp    c0017488 <findDataTable(unsigned char*, char*)+0x6e>
c001747d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017481:	eb bb                	jmp    c001743e <findDataTable(unsigned char*, char*)+0x24>
c0017483:	b8 00 00 00 00       	mov    eax,0x0
c0017488:	83 c4 1c             	add    esp,0x1c
c001748b:	c3                   	ret    

c001748c <scanMADT()>:
c001748c:	53                   	push   ebx
c001748d:	83 ec 38             	sub    esp,0x38
c0017490:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0017495:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001749b:	83 e0 04             	and    eax,0x4
c001749e:	84 c0                	test   al,al
c00174a0:	0f 84 4a 04 00 00    	je     c00178f0 <scanMADT()+0x464>
c00174a6:	e8 44 fb ff ff       	call   c0016fef <findRSDP()>
c00174ab:	a3 ac fe 02 c0       	mov    ds:0xc002feac,eax
c00174b0:	a1 ac fe 02 c0       	mov    eax,ds:0xc002feac
c00174b5:	85 c0                	test   eax,eax
c00174b7:	75 19                	jne    c00174d2 <scanMADT()+0x46>
c00174b9:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c00174be:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00174c4:	83 e2 fb             	and    edx,0xfffffffb
c00174c7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00174cd:	e9 22 04 00 00       	jmp    c00178f4 <scanMADT()+0x468>
c00174d2:	a1 ac fe 02 c0       	mov    eax,ds:0xc002feac
c00174d7:	83 ec 0c             	sub    esp,0xc
c00174da:	50                   	push   eax
c00174db:	e8 f0 fd ff ff       	call   c00172d0 <findRSDT(unsigned char*)>
c00174e0:	83 c4 10             	add    esp,0x10
c00174e3:	a3 a8 fe 02 c0       	mov    ds:0xc002fea8,eax
c00174e8:	a1 a8 fe 02 c0       	mov    eax,ds:0xc002fea8
c00174ed:	85 c0                	test   eax,eax
c00174ef:	75 19                	jne    c001750a <scanMADT()+0x7e>
c00174f1:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c00174f6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00174fc:	83 e2 fb             	and    edx,0xfffffffb
c00174ff:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017505:	e9 ea 03 00 00       	jmp    c00178f4 <scanMADT()+0x468>
c001750a:	a1 a8 fe 02 c0       	mov    eax,ds:0xc002fea8
c001750f:	83 ec 0c             	sub    esp,0xc
c0017512:	50                   	push   eax
c0017513:	e8 61 fb ff ff       	call   c0017079 <loadACPITables(unsigned char*)>
c0017518:	83 c4 10             	add    esp,0x10
c001751b:	a1 a8 fe 02 c0       	mov    eax,ds:0xc002fea8
c0017520:	83 ec 08             	sub    esp,0x8
c0017523:	68 20 ae 02 c0       	push   0xc002ae20
c0017528:	50                   	push   eax
c0017529:	e8 ec fe ff ff       	call   c001741a <findDataTable(unsigned char*, char*)>
c001752e:	83 c4 10             	add    esp,0x10
c0017531:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017535:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001753a:	75 19                	jne    c0017555 <scanMADT()+0xc9>
c001753c:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0017541:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017547:	83 e2 fe             	and    edx,0xfffffffe
c001754a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017550:	e9 9f 03 00 00       	jmp    c00178f4 <scanMADT()+0x468>
c0017555:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001755d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017561:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017564:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017568:	0f 87 86 03 00 00    	ja     c00178f4 <scanMADT()+0x468>
c001756e:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017576:	0f 87 78 03 00 00    	ja     c00178f4 <scanMADT()+0x468>
c001757c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017580:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017584:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017588:	8d 50 01             	lea    edx,[eax+0x1]
c001758b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001758f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017593:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017597:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001759b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001759f:	8d 50 01             	lea    edx,[eax+0x1]
c00175a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175aa:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00175ae:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00175b2:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00175b7:	0f 86 36 03 00 00    	jbe    c00178f3 <scanMADT()+0x467>
c00175bd:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00175c2:	75 57                	jne    c001761b <scanMADT()+0x18f>
c00175c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175c8:	8d 50 01             	lea    edx,[eax+0x1]
c00175cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175cf:	8a 15 a0 00 03 c0    	mov    dl,BYTE PTR ds:0xc00300a0
c00175d5:	0f b6 d2             	movzx  edx,dl
c00175d8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00175dc:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00175e0:	88 82 e0 00 03 c0    	mov    BYTE PTR [edx-0x3ffcff20],al
c00175e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175ea:	8d 50 01             	lea    edx,[eax+0x1]
c00175ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175f1:	8a 15 a0 00 03 c0    	mov    dl,BYTE PTR ds:0xc00300a0
c00175f7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00175fa:	88 0d a0 00 03 c0    	mov    BYTE PTR ds:0xc00300a0,cl
c0017600:	0f b6 d2             	movzx  edx,dl
c0017603:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017607:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001760b:	88 82 c0 00 03 c0    	mov    BYTE PTR [edx-0x3ffcff40],al
c0017611:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017616:	e9 c1 02 00 00       	jmp    c00178dc <scanMADT()+0x450>
c001761b:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017620:	0f 85 14 01 00 00    	jne    c001773a <scanMADT()+0x2ae>
c0017626:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001762a:	8d 50 01             	lea    edx,[eax+0x1]
c001762d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017631:	8a 15 60 ff 02 c0    	mov    dl,BYTE PTR ds:0xc002ff60
c0017637:	0f b6 d2             	movzx  edx,dl
c001763a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001763e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017642:	88 82 80 ff 02 c0    	mov    BYTE PTR [edx-0x3ffd0080],al
c0017648:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001764c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017650:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017654:	01 d0                	add    eax,edx
c0017656:	83 c0 2c             	add    eax,0x2c
c0017659:	8a 00                	mov    al,BYTE PTR [eax]
c001765b:	0f b6 d0             	movzx  edx,al
c001765e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017662:	8d 48 01             	lea    ecx,[eax+0x1]
c0017665:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017669:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001766d:	0f b6 c0             	movzx  eax,al
c0017670:	c1 e0 08             	shl    eax,0x8
c0017673:	89 d1                	mov    ecx,edx
c0017675:	09 c1                	or     ecx,eax
c0017677:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001767b:	8d 50 02             	lea    edx,[eax+0x2]
c001767e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017682:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017686:	0f b6 c0             	movzx  eax,al
c0017689:	c1 e0 10             	shl    eax,0x10
c001768c:	09 c1                	or     ecx,eax
c001768e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017692:	8d 50 03             	lea    edx,[eax+0x3]
c0017695:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017699:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001769d:	0f b6 c0             	movzx  eax,al
c00176a0:	c1 e0 18             	shl    eax,0x18
c00176a3:	09 c1                	or     ecx,eax
c00176a5:	89 ca                	mov    edx,ecx
c00176a7:	a0 60 ff 02 c0       	mov    al,ds:0xc002ff60
c00176ac:	0f b6 c0             	movzx  eax,al
c00176af:	89 14 85 a0 ff 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0060],edx
c00176b6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00176bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176c3:	01 d0                	add    eax,edx
c00176c5:	83 c0 2c             	add    eax,0x2c
c00176c8:	8a 00                	mov    al,BYTE PTR [eax]
c00176ca:	0f b6 d0             	movzx  edx,al
c00176cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176d1:	8d 48 01             	lea    ecx,[eax+0x1]
c00176d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176d8:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00176dc:	0f b6 c0             	movzx  eax,al
c00176df:	c1 e0 08             	shl    eax,0x8
c00176e2:	89 d1                	mov    ecx,edx
c00176e4:	09 c1                	or     ecx,eax
c00176e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176ea:	8d 50 02             	lea    edx,[eax+0x2]
c00176ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176f1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00176f5:	0f b6 c0             	movzx  eax,al
c00176f8:	c1 e0 10             	shl    eax,0x10
c00176fb:	09 c1                	or     ecx,eax
c00176fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017701:	8d 50 03             	lea    edx,[eax+0x3]
c0017704:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017708:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001770c:	0f b6 c0             	movzx  eax,al
c001770f:	c1 e0 18             	shl    eax,0x18
c0017712:	09 c1                	or     ecx,eax
c0017714:	89 ca                	mov    edx,ecx
c0017716:	a0 60 ff 02 c0       	mov    al,ds:0xc002ff60
c001771b:	0f b6 c0             	movzx  eax,al
c001771e:	89 14 85 20 00 03 c0 	mov    DWORD PTR [eax*4-0x3ffcffe0],edx
c0017725:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001772a:	a0 60 ff 02 c0       	mov    al,ds:0xc002ff60
c001772f:	40                   	inc    eax
c0017730:	a2 60 ff 02 c0       	mov    ds:0xc002ff60,al
c0017735:	e9 a2 01 00 00       	jmp    c00178dc <scanMADT()+0x450>
c001773a:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001773f:	0f 85 e9 00 00 00    	jne    c001782e <scanMADT()+0x3a2>
c0017745:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017749:	8d 50 01             	lea    edx,[eax+0x1]
c001774c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017750:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017754:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017758:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001775c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017760:	8d 50 01             	lea    edx,[eax+0x1]
c0017763:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017767:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001776b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001776f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017773:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017777:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001777b:	01 d0                	add    eax,edx
c001777d:	83 c0 2c             	add    eax,0x2c
c0017780:	8a 00                	mov    al,BYTE PTR [eax]
c0017782:	0f b6 d0             	movzx  edx,al
c0017785:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017789:	8d 48 01             	lea    ecx,[eax+0x1]
c001778c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017790:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017794:	0f b6 c0             	movzx  eax,al
c0017797:	c1 e0 08             	shl    eax,0x8
c001779a:	89 d1                	mov    ecx,edx
c001779c:	09 c1                	or     ecx,eax
c001779e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177a2:	8d 50 02             	lea    edx,[eax+0x2]
c00177a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177a9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00177ad:	0f b6 c0             	movzx  eax,al
c00177b0:	c1 e0 10             	shl    eax,0x10
c00177b3:	09 c1                	or     ecx,eax
c00177b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177b9:	8d 50 03             	lea    edx,[eax+0x3]
c00177bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177c0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00177c4:	0f b6 c0             	movzx  eax,al
c00177c7:	c1 e0 18             	shl    eax,0x18
c00177ca:	09 c8                	or     eax,ecx
c00177cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00177d0:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177dd:	01 d0                	add    eax,edx
c00177df:	83 c0 2c             	add    eax,0x2c
c00177e2:	8a 00                	mov    al,BYTE PTR [eax]
c00177e4:	0f b6 c0             	movzx  eax,al
c00177e7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00177eb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00177ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177f2:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00177f6:	0f b6 d2             	movzx  edx,dl
c00177f9:	c1 e2 08             	shl    edx,0x8
c00177fc:	09 d0                	or     eax,edx
c00177fe:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017803:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017808:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001780d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017811:	88 90 40 c8 02 c0    	mov    BYTE PTR [eax-0x3ffd37c0],dl
c0017817:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001781c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017821:	66 89 84 12 40 ff 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd00c0],ax
c0017829:	e9 ae 00 00 00       	jmp    c00178dc <scanMADT()+0x450>
c001782e:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017833:	0f 85 97 00 00 00    	jne    c00178d0 <scanMADT()+0x444>
c0017839:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001783d:	8d 50 01             	lea    edx,[eax+0x1]
c0017840:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017844:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017848:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001784c:	0f b6 c0             	movzx  eax,al
c001784f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017853:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017857:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001785b:	01 d0                	add    eax,edx
c001785d:	83 c0 2c             	add    eax,0x2c
c0017860:	8a 00                	mov    al,BYTE PTR [eax]
c0017862:	0f b6 d0             	movzx  edx,al
c0017865:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017869:	8d 48 01             	lea    ecx,[eax+0x1]
c001786c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017870:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017874:	0f b6 c0             	movzx  eax,al
c0017877:	c1 e0 08             	shl    eax,0x8
c001787a:	09 d0                	or     eax,edx
c001787c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017880:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017885:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017889:	8d 50 01             	lea    edx,[eax+0x1]
c001788c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017890:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017894:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017898:	0f b6 c0             	movzx  eax,al
c001789b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001789f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178a3:	c1 e0 08             	shl    eax,0x8
c00178a6:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00178aa:	89 c1                	mov    ecx,eax
c00178ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178b0:	c1 e0 18             	shl    eax,0x18
c00178b3:	89 c3                	mov    ebx,eax
c00178b5:	a1 b0 fe 02 c0       	mov    eax,ds:0xc002feb0
c00178ba:	8d 50 01             	lea    edx,[eax+0x1]
c00178bd:	89 15 b0 fe 02 c0    	mov    DWORD PTR ds:0xc002feb0,edx
c00178c3:	09 d9                	or     ecx,ebx
c00178c5:	89 ca                	mov    edx,ecx
c00178c7:	89 14 85 c0 fe 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0140],edx
c00178ce:	eb 0c                	jmp    c00178dc <scanMADT()+0x450>
c00178d0:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00178d5:	75 05                	jne    c00178dc <scanMADT()+0x450>
c00178d7:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00178dc:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00178e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178e5:	01 d0                	add    eax,edx
c00178e7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00178eb:	e9 6d fc ff ff       	jmp    c001755d <scanMADT()+0xd1>
c00178f0:	90                   	nop
c00178f1:	eb 01                	jmp    c00178f4 <scanMADT()+0x468>
c00178f3:	90                   	nop
c00178f4:	83 c4 38             	add    esp,0x38
c00178f7:	5b                   	pop    ebx
c00178f8:	c3                   	ret    
c00178f9:	90                   	nop

c00178fa <ACPI::ACPI()>:
c00178fa:	83 ec 0c             	sub    esp,0xc
c00178fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017901:	83 ec 08             	sub    esp,0x8
c0017904:	68 25 ae 02 c0       	push   0xc002ae25
c0017909:	50                   	push   eax
c001790a:	e8 63 c2 ff ff       	call   c0013b72 <Device::Device(char const*)>
c001790f:	83 c4 10             	add    esp,0x10
c0017912:	ba 80 af 02 c0       	mov    edx,0xc002af80
c0017917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001791b:	89 10                	mov    DWORD PTR [eax],edx
c001791d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017921:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001792c:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001793a:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017944:	e8 43 fb ff ff       	call   c001748c <scanMADT()>
c0017949:	90                   	nop
c001794a:	83 c4 0c             	add    esp,0xc
c001794d:	c3                   	ret    

c001794e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001794e:	83 ec 2c             	sub    esp,0x2c
c0017951:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017955:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017959:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001795d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017961:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017966:	88 d0                	mov    al,dl
c0017968:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001796c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017971:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017979:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001797d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017983:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017987:	0f 8d 97 00 00 00    	jge    c0017a24 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001798d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017991:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017995:	83 c2 2a             	add    edx,0x2a
c0017998:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001799c:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00179a1:	75 78                	jne    c0017a1b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00179a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00179ab:	83 c2 2a             	add    edx,0x2a
c00179ae:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00179b2:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00179b6:	75 63                	jne    c0017a1b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00179b8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00179bd:	74 3a                	je     c00179f9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00179bf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00179c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00179c7:	83 c2 2a             	add    edx,0x2a
c00179ca:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00179ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00179d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179d5:	39 c2                	cmp    edx,eax
c00179d7:	74 10                	je     c00179e9 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00179d9:	83 ec 0c             	sub    esp,0xc
c00179dc:	68 a0 ad 02 c0       	push   0xc002ada0
c00179e1:	e8 af 22 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c00179e6:	83 c4 10             	add    esp,0x10
c00179e9:	83 ec 0c             	sub    esp,0xc
c00179ec:	68 2a ae 02 c0       	push   0xc002ae2a
c00179f1:	e8 9f 22 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c00179f6:	83 c4 10             	add    esp,0x10
c00179f9:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00179fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017a05:	83 c2 2a             	add    edx,0x2a
c0017a08:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017a0c:	8b 02                	mov    eax,DWORD PTR [edx]
c0017a0e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017a11:	89 01                	mov    DWORD PTR [ecx],eax
c0017a13:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017a16:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017a1b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017a1f:	e9 55 ff ff ff       	jmp    c0017979 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017a24:	90                   	nop
c0017a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a29:	83 c4 2c             	add    esp,0x2c
c0017a2c:	c2 04 00             	ret    0x4
c0017a2f:	90                   	nop

c0017a30 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017a30:	83 ec 1c             	sub    esp,0x1c
c0017a33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a37:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017a3b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017a3f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017a44:	88 c8                	mov    al,cl
c0017a46:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017a4a:	88 d0                	mov    al,dl
c0017a4c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017a50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a54:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017a5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a5e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017a61:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017a65:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017a69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a6d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017a73:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a77:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017a7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a7e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017a83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a87:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017a8d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017a91:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a98:	83 c2 2a             	add    edx,0x2a
c0017a9b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017a9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aa3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017aa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aad:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ab0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017ab4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017ab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017abc:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ac2:	8d 50 01             	lea    edx,[eax+0x1]
c0017ac5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac9:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017acf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ad3:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ad9:	3d 00 02 00 00       	cmp    eax,0x200
c0017ade:	75 10                	jne    c0017af0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017ae0:	83 ec 0c             	sub    esp,0xc
c0017ae3:	68 39 ae 02 c0       	push   0xc002ae39
c0017ae8:	e8 a8 21 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0017aed:	83 c4 10             	add    esp,0x10
c0017af0:	90                   	nop
c0017af1:	83 c4 1c             	add    esp,0x1c
c0017af4:	c3                   	ret    
c0017af5:	90                   	nop

c0017af6 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017af6:	b8 00 00 00 00       	mov    eax,0x0
c0017afb:	c3                   	ret    

c0017afc <ACPI::detectPCI()>:
c0017afc:	53                   	push   ebx
c0017afd:	83 ec 28             	sub    esp,0x28
c0017b00:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017b05:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017b0a:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0017b0f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017b15:	83 e0 04             	and    eax,0x4
c0017b18:	84 c0                	test   al,al
c0017b1a:	74 2b                	je     c0017b47 <ACPI::detectPCI()+0x4b>
c0017b1c:	a1 a8 fe 02 c0       	mov    eax,ds:0xc002fea8
c0017b21:	83 ec 08             	sub    esp,0x8
c0017b24:	68 56 ae 02 c0       	push   0xc002ae56
c0017b29:	50                   	push   eax
c0017b2a:	e8 eb f8 ff ff       	call   c001741a <findDataTable(unsigned char*, char*)>
c0017b2f:	83 c4 10             	add    esp,0x10
c0017b32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b36:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b3b:	74 0a                	je     c0017b47 <ACPI::detectPCI()+0x4b>
c0017b3d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b42:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017b47:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017b4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b53:	8a 00                	mov    al,BYTE PTR [eax]
c0017b55:	3c 01                	cmp    al,0x1
c0017b57:	75 0c                	jne    c0017b65 <ACPI::detectPCI()+0x69>
c0017b59:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b5e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017b63:	eb 26                	jmp    c0017b8b <ACPI::detectPCI()+0x8f>
c0017b65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b69:	8a 00                	mov    al,BYTE PTR [eax]
c0017b6b:	3c 02                	cmp    al,0x2
c0017b6d:	75 1c                	jne    c0017b8b <ACPI::detectPCI()+0x8f>
c0017b6f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017b74:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017b79:	74 10                	je     c0017b8b <ACPI::detectPCI()+0x8f>
c0017b7b:	83 ec 0c             	sub    esp,0xc
c0017b7e:	68 d0 ad 02 c0       	push   0xc002add0
c0017b83:	e8 0d 21 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0017b88:	83 c4 10             	add    esp,0x10
c0017b8b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017b8f:	83 f0 01             	xor    eax,0x1
c0017b92:	84 c0                	test   al,al
c0017b94:	74 3f                	je     c0017bd5 <ACPI::detectPCI()+0xd9>
c0017b96:	e8 b5 85 fe ff       	call   c0000150 <manualPCIProbe>
c0017b9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b9f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017ba4:	75 0c                	jne    c0017bb2 <ACPI::detectPCI()+0xb6>
c0017ba6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017bab:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017bb0:	eb 23                	jmp    c0017bd5 <ACPI::detectPCI()+0xd9>
c0017bb2:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017bb7:	75 1c                	jne    c0017bd5 <ACPI::detectPCI()+0xd9>
c0017bb9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017bbe:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017bc3:	74 10                	je     c0017bd5 <ACPI::detectPCI()+0xd9>
c0017bc5:	83 ec 0c             	sub    esp,0xc
c0017bc8:	68 d0 ad 02 c0       	push   0xc002add0
c0017bcd:	e8 c3 20 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0017bd2:	83 c4 10             	add    esp,0x10
c0017bd5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017bda:	74 7e                	je     c0017c5a <ACPI::detectPCI()+0x15e>
c0017bdc:	83 ec 0c             	sub    esp,0xc
c0017bdf:	68 5b ae 02 c0       	push   0xc002ae5b
c0017be4:	e8 0a 7a ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017be9:	83 c4 10             	add    esp,0x10
c0017bec:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017bf4:	83 ec 0c             	sub    esp,0xc
c0017bf7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017bfb:	e8 99 79 ff ff       	call   c000f599 <malloc>
c0017c00:	83 c4 10             	add    esp,0x10
c0017c03:	89 c3                	mov    ebx,eax
c0017c05:	83 ec 0c             	sub    esp,0xc
c0017c08:	53                   	push   ebx
c0017c09:	e8 aa a5 00 00       	call   c00221b8 <PCI::PCI()>
c0017c0e:	83 c4 10             	add    esp,0x10
c0017c11:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017c15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c19:	83 ec 08             	sub    esp,0x8
c0017c1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c20:	50                   	push   eax
c0017c21:	e8 48 bd ff ff       	call   c001396e <Device::addChild(Device*)>
c0017c26:	83 c4 10             	add    esp,0x10
c0017c29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c2f:	83 c0 08             	add    eax,0x8
c0017c32:	8b 00                	mov    eax,DWORD PTR [eax]
c0017c34:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017c39:	74 07                	je     c0017c42 <ACPI::detectPCI()+0x146>
c0017c3b:	ba 01 00 00 00       	mov    edx,0x1
c0017c40:	eb 05                	jmp    c0017c47 <ACPI::detectPCI()+0x14b>
c0017c42:	ba 02 00 00 00       	mov    edx,0x2
c0017c47:	6a 00                	push   0x0
c0017c49:	6a 00                	push   0x0
c0017c4b:	52                   	push   edx
c0017c4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c50:	ff d0                	call   eax
c0017c52:	83 c4 10             	add    esp,0x10
c0017c55:	e9 9e 00 00 00       	jmp    c0017cf8 <ACPI::detectPCI()+0x1fc>
c0017c5a:	83 ec 0c             	sub    esp,0xc
c0017c5d:	68 73 ae 02 c0       	push   0xc002ae73
c0017c62:	e8 ce a8 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0017c67:	83 c4 10             	add    esp,0x10
c0017c6a:	83 ec 0c             	sub    esp,0xc
c0017c6d:	68 7e ae 02 c0       	push   0xc002ae7e
c0017c72:	e8 7c 79 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017c77:	83 c4 10             	add    esp,0x10
c0017c7a:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017c81:	83 ec 0c             	sub    esp,0xc
c0017c84:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017c88:	e8 0c 79 ff ff       	call   c000f599 <malloc>
c0017c8d:	83 c4 10             	add    esp,0x10
c0017c90:	89 c3                	mov    ebx,eax
c0017c92:	83 ec 0c             	sub    esp,0xc
c0017c95:	53                   	push   ebx
c0017c96:	e8 87 b0 00 00       	call   c0022d22 <IDE::IDE()>
c0017c9b:	83 c4 10             	add    esp,0x10
c0017c9e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017ca2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017ca6:	83 ec 08             	sub    esp,0x8
c0017ca9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017cad:	50                   	push   eax
c0017cae:	e8 bb bc ff ff       	call   c001396e <Device::addChild(Device*)>
c0017cb3:	83 c4 10             	add    esp,0x10
c0017cb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cba:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017cc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cc8:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017cd1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cd5:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017cde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ce2:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ce4:	83 c0 08             	add    eax,0x8
c0017ce7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ce9:	6a 00                	push   0x0
c0017ceb:	6a 00                	push   0x0
c0017ced:	6a 00                	push   0x0
c0017cef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cf3:	ff d0                	call   eax
c0017cf5:	83 c4 10             	add    esp,0x10
c0017cf8:	90                   	nop
c0017cf9:	83 c4 28             	add    esp,0x28
c0017cfc:	5b                   	pop    ebx
c0017cfd:	c3                   	ret    

c0017cfe <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017cfe:	83 ec 1c             	sub    esp,0x1c
c0017d01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d05:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017d08:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017d0c:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0017d11:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017d16:	83 ec 08             	sub    esp,0x8
c0017d19:	52                   	push   edx
c0017d1a:	50                   	push   eax
c0017d1b:	e8 90 6e ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017d20:	83 c4 10             	add    esp,0x10
c0017d23:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017d27:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0017d2c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017d31:	83 ec 04             	sub    esp,0x4
c0017d34:	6a 01                	push   0x1
c0017d36:	52                   	push   edx
c0017d37:	50                   	push   eax
c0017d38:	e8 a5 6f ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017d3d:	83 c4 10             	add    esp,0x10
c0017d40:	90                   	nop
c0017d41:	83 c4 1c             	add    esp,0x1c
c0017d44:	c3                   	ret    
c0017d45:	90                   	nop

c0017d46 <ACPI::sleep()>:
c0017d46:	83 ec 0c             	sub    esp,0xc
c0017d49:	a1 80 fc 02 c0       	mov    eax,ds:0xc002fc80
c0017d4e:	85 c0                	test   eax,eax
c0017d50:	74 07                	je     c0017d59 <ACPI::sleep()+0x13>
c0017d52:	a1 80 fc 02 c0       	mov    eax,ds:0xc002fc80
c0017d57:	ff d0                	call   eax
c0017d59:	90                   	nop
c0017d5a:	83 c4 0c             	add    esp,0xc
c0017d5d:	c3                   	ret    

c0017d5e <ACPI::open(int, int, void*)>:
c0017d5e:	57                   	push   edi
c0017d5f:	56                   	push   esi
c0017d60:	53                   	push   ebx
c0017d61:	81 ec 60 01 00 00    	sub    esp,0x160
c0017d67:	83 ec 0c             	sub    esp,0xc
c0017d6a:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017d71:	e8 86 fd ff ff       	call   c0017afc <ACPI::detectPCI()>
c0017d76:	83 c4 10             	add    esp,0x10
c0017d79:	83 ec 0c             	sub    esp,0xc
c0017d7c:	68 f8 ad 02 c0       	push   0xc002adf8
c0017d81:	e8 6d 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017d86:	83 c4 10             	add    esp,0x10
c0017d89:	83 ec 0c             	sub    esp,0xc
c0017d8c:	68 93 ae 02 c0       	push   0xc002ae93
c0017d91:	e8 52 46 00 00       	call   c001c3e8 <Thr::loadKernelSymbolTable(char const*)>
c0017d96:	83 c4 10             	add    esp,0x10
c0017d99:	83 ec 0c             	sub    esp,0xc
c0017d9c:	68 b1 ae 02 c0       	push   0xc002aeb1
c0017da1:	e8 4d 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017da6:	83 c4 10             	add    esp,0x10
c0017da9:	83 ec 04             	sub    esp,0x4
c0017dac:	6a 0c                	push   0xc
c0017dae:	68 cc ae 02 c0       	push   0xc002aecc
c0017db3:	68 dd ae 02 c0       	push   0xc002aedd
c0017db8:	e8 94 2c 00 00       	call   c001aa51 <Reg::readIntWithDefault(char*, char*, int)>
c0017dbd:	83 c4 10             	add    esp,0x10
c0017dc0:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017dc7:	83 ec 0c             	sub    esp,0xc
c0017dca:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017dd1:	e8 d1 95 ff ff       	call   c00113a7 <Virt::setupPageSwapping(int)>
c0017dd6:	83 c4 10             	add    esp,0x10
c0017dd9:	83 ec 0c             	sub    esp,0xc
c0017ddc:	68 55 9c 02 c0       	push   0xc0029c55
c0017de1:	e8 0d 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017de6:	83 c4 10             	add    esp,0x10
c0017de9:	8b 1d e8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5e8
c0017def:	83 ec 08             	sub    esp,0x8
c0017df2:	6a 01                	push   0x1
c0017df4:	68 e4 ae 02 c0       	push   0xc002aee4
c0017df9:	e8 61 50 00 00       	call   c001ce5f <Thr::loadDLL(char const*, bool)>
c0017dfe:	83 c4 10             	add    esp,0x10
c0017e01:	83 ec 08             	sub    esp,0x8
c0017e04:	53                   	push   ebx
c0017e05:	50                   	push   eax
c0017e06:	e8 7f 52 00 00       	call   c001d08a <Thr::executeDLL(unsigned long, void*)>
c0017e0b:	83 c4 10             	add    esp,0x10
c0017e0e:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017e15:	83 ec 08             	sub    esp,0x8
c0017e18:	6a 12                	push   0x12
c0017e1a:	50                   	push   eax
c0017e1b:	e8 d2 be ff ff       	call   c0013cf2 <getDevicesOfType(DeviceType)>
c0017e20:	83 c4 0c             	add    esp,0xc
c0017e23:	83 ec 0c             	sub    esp,0xc
c0017e26:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017e2d:	50                   	push   eax
c0017e2e:	e8 81 09 01 00       	call   c00287b4 <LinkedList<Device>::isEmpty()>
c0017e33:	83 c4 10             	add    esp,0x10
c0017e36:	83 f0 01             	xor    eax,0x1
c0017e39:	84 c0                	test   al,al
c0017e3b:	0f 84 43 01 00 00    	je     c0017f84 <ACPI::open(int, int, void*)+0x226>
c0017e41:	83 ec 0c             	sub    esp,0xc
c0017e44:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017e4b:	50                   	push   eax
c0017e4c:	e8 7f 09 01 00       	call   c00287d0 <LinkedList<Device>::getFirstElement()>
c0017e51:	83 c4 10             	add    esp,0x10
c0017e54:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0017e5b:	83 ec 0c             	sub    esp,0xc
c0017e5e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017e65:	50                   	push   eax
c0017e66:	e8 6d 09 01 00       	call   c00287d8 <LinkedList<Device>::removeFirst()>
c0017e6b:	83 c4 10             	add    esp,0x10
c0017e6e:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0017e75:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0017e7c:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0017e83:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017e87:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0017e8d:	ba 09 00 00 00       	mov    edx,0x9
c0017e92:	fc                   	cld    
c0017e93:	89 c7                	mov    edi,eax
c0017e95:	89 de                	mov    esi,ebx
c0017e97:	89 d1                	mov    ecx,edx
c0017e99:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017e9b:	83 ec 08             	sub    esp,0x8
c0017e9e:	8d 44 24 38          	lea    eax,[esp+0x38]
c0017ea2:	50                   	push   eax
c0017ea3:	83 ec 24             	sub    esp,0x24
c0017ea6:	89 e0                	mov    eax,esp
c0017ea8:	89 c3                	mov    ebx,eax
c0017eaa:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017eae:	ba 09 00 00 00       	mov    edx,0x9
c0017eb3:	89 df                	mov    edi,ebx
c0017eb5:	89 c6                	mov    esi,eax
c0017eb7:	89 d1                	mov    ecx,edx
c0017eb9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0017ebb:	e8 d6 a7 00 00       	call   c0022696 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0017ec0:	83 c4 30             	add    esp,0x30
c0017ec3:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0017eca:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0017ed2:	0f 84 4b ff ff ff    	je     c0017e23 <ACPI::open(int, int, void*)+0xc5>
c0017ed8:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0017ee3:	83 ec 0c             	sub    esp,0xc
c0017ee6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0017eed:	e8 a7 76 ff ff       	call   c000f599 <malloc>
c0017ef2:	83 c4 10             	add    esp,0x10
c0017ef5:	89 c3                	mov    ebx,eax
c0017ef7:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0017efc:	83 ec 04             	sub    esp,0x4
c0017eff:	50                   	push   eax
c0017f00:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017f07:	53                   	push   ebx
c0017f08:	e8 87 ab ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c0017f0d:	83 c4 10             	add    esp,0x10
c0017f10:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0017f17:	83 ec 0c             	sub    esp,0xc
c0017f1a:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017f21:	e8 40 ae ff ff       	call   c0012d66 <File::exists()>
c0017f26:	83 c4 10             	add    esp,0x10
c0017f29:	84 c0                	test   al,al
c0017f2b:	74 27                	je     c0017f54 <ACPI::open(int, int, void*)+0x1f6>
c0017f2d:	83 ec 08             	sub    esp,0x8
c0017f30:	6a 01                	push   0x1
c0017f32:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0017f39:	e8 21 4f 00 00       	call   c001ce5f <Thr::loadDLL(char const*, bool)>
c0017f3e:	83 c4 10             	add    esp,0x10
c0017f41:	83 ec 08             	sub    esp,0x8
c0017f44:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0017f4b:	50                   	push   eax
c0017f4c:	e8 39 51 00 00       	call   c001d08a <Thr::executeDLL(unsigned long, void*)>
c0017f51:	83 c4 10             	add    esp,0x10
c0017f54:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0017f5c:	0f 84 c1 fe ff ff    	je     c0017e23 <ACPI::open(int, int, void*)+0xc5>
c0017f62:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0017f69:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f6b:	83 c0 08             	add    eax,0x8
c0017f6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f70:	83 ec 0c             	sub    esp,0xc
c0017f73:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0017f7a:	ff d0                	call   eax
c0017f7c:	83 c4 10             	add    esp,0x10
c0017f7f:	e9 9f fe ff ff       	jmp    c0017e23 <ACPI::open(int, int, void*)+0xc5>
c0017f84:	83 ec 0c             	sub    esp,0xc
c0017f87:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017f8e:	50                   	push   eax
c0017f8f:	e8 1e 08 01 00       	call   c00287b2 <LinkedList<Device>::~LinkedList()>
c0017f94:	83 c4 10             	add    esp,0x10
c0017f97:	8b 1d e8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5e8
c0017f9d:	83 ec 08             	sub    esp,0x8
c0017fa0:	6a 01                	push   0x1
c0017fa2:	68 ff ae 02 c0       	push   0xc002aeff
c0017fa7:	e8 b3 4e 00 00       	call   c001ce5f <Thr::loadDLL(char const*, bool)>
c0017fac:	83 c4 10             	add    esp,0x10
c0017faf:	83 ec 08             	sub    esp,0x8
c0017fb2:	53                   	push   ebx
c0017fb3:	50                   	push   eax
c0017fb4:	e8 d1 50 00 00       	call   c001d08a <Thr::executeDLL(unsigned long, void*)>
c0017fb9:	83 c4 10             	add    esp,0x10
c0017fbc:	8b 1d e8 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5e8
c0017fc2:	83 ec 08             	sub    esp,0x8
c0017fc5:	6a 01                	push   0x1
c0017fc7:	68 1c af 02 c0       	push   0xc002af1c
c0017fcc:	e8 8e 4e 00 00       	call   c001ce5f <Thr::loadDLL(char const*, bool)>
c0017fd1:	83 c4 10             	add    esp,0x10
c0017fd4:	83 ec 08             	sub    esp,0x8
c0017fd7:	53                   	push   ebx
c0017fd8:	50                   	push   eax
c0017fd9:	e8 ac 50 00 00       	call   c001d08a <Thr::executeDLL(unsigned long, void*)>
c0017fde:	83 c4 10             	add    esp,0x10
c0017fe1:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0017fe6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017fec:	83 e0 04             	and    eax,0x4
c0017fef:	84 c0                	test   al,al
c0017ff1:	0f 84 0d 01 00 00    	je     c0018104 <ACPI::open(int, int, void*)+0x3a6>
c0017ff7:	83 ec 0c             	sub    esp,0xc
c0017ffa:	68 39 af 02 c0       	push   0xc002af39
c0017fff:	e8 ef 75 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0018004:	83 c4 10             	add    esp,0x10
c0018007:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018012:	83 ec 0c             	sub    esp,0xc
c0018015:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001801c:	e8 78 75 ff ff       	call   c000f599 <malloc>
c0018021:	83 c4 10             	add    esp,0x10
c0018024:	89 c3                	mov    ebx,eax
c0018026:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c001802b:	83 ec 04             	sub    esp,0x4
c001802e:	50                   	push   eax
c001802f:	68 56 af 02 c0       	push   0xc002af56
c0018034:	53                   	push   ebx
c0018035:	e8 5a aa ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c001803a:	83 c4 10             	add    esp,0x10
c001803d:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c0018044:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001804c:	74 1a                	je     c0018068 <ACPI::open(int, int, void*)+0x30a>
c001804e:	83 ec 0c             	sub    esp,0xc
c0018051:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018058:	e8 09 ad ff ff       	call   c0012d66 <File::exists()>
c001805d:	83 c4 10             	add    esp,0x10
c0018060:	84 c0                	test   al,al
c0018062:	74 04                	je     c0018068 <ACPI::open(int, int, void*)+0x30a>
c0018064:	b0 01                	mov    al,0x1
c0018066:	eb 02                	jmp    c001806a <ACPI::open(int, int, void*)+0x30c>
c0018068:	b0 00                	mov    al,0x0
c001806a:	84 c0                	test   al,al
c001806c:	74 25                	je     c0018093 <ACPI::open(int, int, void*)+0x335>
c001806e:	83 ec 08             	sub    esp,0x8
c0018071:	6a 01                	push   0x1
c0018073:	68 56 af 02 c0       	push   0xc002af56
c0018078:	e8 e2 4d 00 00       	call   c001ce5f <Thr::loadDLL(char const*, bool)>
c001807d:	83 c4 10             	add    esp,0x10
c0018080:	83 ec 08             	sub    esp,0x8
c0018083:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c001808a:	50                   	push   eax
c001808b:	e8 fa 4f 00 00       	call   c001d08a <Thr::executeDLL(unsigned long, void*)>
c0018090:	83 c4 10             	add    esp,0x10
c0018093:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001809b:	74 27                	je     c00180c4 <ACPI::open(int, int, void*)+0x366>
c001809d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00180a5:	74 1d                	je     c00180c4 <ACPI::open(int, int, void*)+0x366>
c00180a7:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00180ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00180b0:	83 c0 08             	add    eax,0x8
c00180b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00180b5:	83 ec 0c             	sub    esp,0xc
c00180b8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00180bf:	ff d0                	call   eax
c00180c1:	83 c4 10             	add    esp,0x10
c00180c4:	a1 a8 fe 02 c0       	mov    eax,ds:0xc002fea8
c00180c9:	83 ec 08             	sub    esp,0x8
c00180cc:	68 73 af 02 c0       	push   0xc002af73
c00180d1:	50                   	push   eax
c00180d2:	e8 43 f3 ff ff       	call   c001741a <findDataTable(unsigned char*, char*)>
c00180d7:	83 c4 10             	add    esp,0x10
c00180da:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c00180e1:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c00180e9:	74 19                	je     c0018104 <ACPI::open(int, int, void*)+0x3a6>
c00180eb:	83 ec 08             	sub    esp,0x8
c00180ee:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00180f5:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00180fc:	e8 fd fb ff ff       	call   c0017cfe <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018101:	83 c4 10             	add    esp,0x10
c0018104:	b8 00 00 00 00       	mov    eax,0x0
c0018109:	81 c4 60 01 00 00    	add    esp,0x160
c001810f:	5b                   	pop    ebx
c0018110:	5e                   	pop    esi
c0018111:	5f                   	pop    edi
c0018112:	c3                   	ret    
c0018113:	90                   	nop

c0018114 <CPU::close(int, int, void*)>:
c0018114:	31 c0                	xor    eax,eax
c0018116:	c3                   	ret    
c0018117:	90                   	nop

c0018118 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018118:	55                   	push   ebp
c0018119:	57                   	push   edi
c001811a:	56                   	push   esi
c001811b:	53                   	push   ebx
c001811c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018120:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018124:	89 ce                	mov    esi,ecx
c0018126:	89 d5                	mov    ebp,edx
c0018128:	80 f9 04             	cmp    cl,0x4
c001812b:	75 28                	jne    c0018155 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001812d:	8d 42 f9             	lea    eax,[edx-0x7]
c0018130:	3c 03                	cmp    al,0x3
c0018132:	0f 86 63 01 00 00    	jbe    c001829b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018138:	80 fa 03             	cmp    dl,0x3
c001813b:	0f 84 5a 01 00 00    	je     c001829b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018141:	8d 7a f2             	lea    edi,[edx-0xe]
c0018144:	b8 10 ca 02 c0       	mov    eax,0xc002ca10
c0018149:	89 fb                	mov    ebx,edi
c001814b:	80 fb 01             	cmp    bl,0x1
c001814e:	77 4e                	ja     c001819e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018150:	e9 52 01 00 00       	jmp    c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018155:	80 f9 05             	cmp    cl,0x5
c0018158:	75 4d                	jne    c00181a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001815a:	b8 20 ca 02 c0       	mov    eax,0xc002ca20
c001815f:	80 fa 03             	cmp    dl,0x3
c0018162:	0f 86 3f 01 00 00    	jbe    c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018168:	8d 7a fa             	lea    edi,[edx-0x6]
c001816b:	b8 30 ca 02 c0       	mov    eax,0xc002ca30
c0018170:	89 fb                	mov    ebx,edi
c0018172:	80 fb 01             	cmp    bl,0x1
c0018175:	0f 86 2c 01 00 00    	jbe    c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001817b:	b8 40 ca 02 c0       	mov    eax,0xc002ca40
c0018180:	80 fa 08             	cmp    dl,0x8
c0018183:	0f 84 1e 01 00 00    	je     c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018189:	89 d7                	mov    edi,edx
c001818b:	b8 50 ca 02 c0       	mov    eax,0xc002ca50
c0018190:	83 e7 fb             	and    edi,0xfffffffb
c0018193:	89 fb                	mov    ebx,edi
c0018195:	80 fb 09             	cmp    bl,0x9
c0018198:	0f 84 09 01 00 00    	je     c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001819e:	31 c0                	xor    eax,eax
c00181a0:	89 eb                	mov    ebx,ebp
c00181a2:	0f b6 fb             	movzx  edi,bl
c00181a5:	eb 30                	jmp    c00181d7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00181a7:	31 c0                	xor    eax,eax
c00181a9:	80 f9 06             	cmp    cl,0x6
c00181ac:	75 f2                	jne    c00181a0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00181ae:	80 fa 0a             	cmp    dl,0xa
c00181b1:	77 ed                	ja     c00181a0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00181b3:	bf de 05 00 00       	mov    edi,0x5de
c00181b8:	0f a3 d7             	bt     edi,edx
c00181bb:	73 e3                	jae    c00181a0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00181bd:	b8 60 ca 02 c0       	mov    eax,0xc002ca60
c00181c2:	e9 e0 00 00 00       	jmp    c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00181c7:	39 c7                	cmp    edi,eax
c00181c9:	0f 84 d3 00 00 00    	je     c00182a2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00181cf:	40                   	inc    eax
c00181d0:	3d d0 00 00 00       	cmp    eax,0xd0
c00181d5:	74 09                	je     c00181e0 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00181d7:	89 f3                	mov    ebx,esi
c00181d9:	80 fb 0f             	cmp    bl,0xf
c00181dc:	75 f1                	jne    c00181cf <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00181de:	eb e7                	jmp    c00181c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00181e0:	80 f9 10             	cmp    cl,0x10
c00181e3:	75 14                	jne    c00181f9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00181e5:	8d 42 fc             	lea    eax,[edx-0x4]
c00181e8:	83 e0 fb             	and    eax,0xfffffffb
c00181eb:	3c 02                	cmp    al,0x2
c00181ed:	76 34                	jbe    c0018223 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00181ef:	b8 f9 b0 02 c0       	mov    eax,0xc002b0f9
c00181f4:	80 fa 02             	cmp    dl,0x2
c00181f7:	eb 24                	jmp    c001821d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00181f9:	80 f9 11             	cmp    cl,0x11
c00181fc:	75 13                	jne    c0018211 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00181fe:	b8 f9 b0 02 c0       	mov    eax,0xc002b0f9
c0018203:	80 fa 03             	cmp    dl,0x3
c0018206:	0f 85 9b 00 00 00    	jne    c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001820c:	e9 91 00 00 00       	jmp    c00182a2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018211:	80 f9 12             	cmp    cl,0x12
c0018214:	75 14                	jne    c001822a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018216:	b8 f9 b0 02 c0       	mov    eax,0xc002b0f9
c001821b:	fe ca                	dec    dl
c001821d:	0f 85 84 00 00 00    	jne    c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018223:	b8 80 ca 02 c0       	mov    eax,0xc002ca80
c0018228:	eb 7d                	jmp    c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001822a:	80 f9 14             	cmp    cl,0x14
c001822d:	75 12                	jne    c0018241 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001822f:	4a                   	dec    edx
c0018230:	b8 f9 b0 02 c0       	mov    eax,0xc002b0f9
c0018235:	80 fa 01             	cmp    dl,0x1
c0018238:	77 6d                	ja     c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001823a:	b8 90 ca 02 c0       	mov    eax,0xc002ca90
c001823f:	eb 66                	jmp    c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018241:	80 f9 15             	cmp    cl,0x15
c0018244:	75 31                	jne    c0018277 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018246:	b8 a0 ca 02 c0       	mov    eax,0xc002caa0
c001824b:	80 fa 01             	cmp    dl,0x1
c001824e:	74 57                	je     c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018250:	b8 f9 b0 02 c0       	mov    eax,0xc002b0f9
c0018255:	80 fa 13             	cmp    dl,0x13
c0018258:	76 0c                	jbe    c0018266 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001825a:	80 fa 30             	cmp    dl,0x30
c001825d:	75 48                	jne    c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001825f:	b8 c0 ca 02 c0       	mov    eax,0xc002cac0
c0018264:	eb 41                	jmp    c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018266:	b9 04 00 09 00       	mov    ecx,0x90004
c001826b:	0f a3 d1             	bt     ecx,edx
c001826e:	73 37                	jae    c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018270:	b8 b0 ca 02 c0       	mov    eax,0xc002cab0
c0018275:	eb 30                	jmp    c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018277:	b8 f9 b0 02 c0       	mov    eax,0xc002b0f9
c001827c:	80 f9 16             	cmp    cl,0x16
c001827f:	75 26                	jne    c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018281:	b8 d0 ca 02 c0       	mov    eax,0xc002cad0
c0018286:	84 d2                	test   dl,dl
c0018288:	74 1d                	je     c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001828a:	b8 f9 b0 02 c0       	mov    eax,0xc002b0f9
c001828f:	80 fa 30             	cmp    dl,0x30
c0018292:	75 13                	jne    c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018294:	b8 e0 ca 02 c0       	mov    eax,0xc002cae0
c0018299:	eb 0c                	jmp    c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001829b:	b8 00 ca 02 c0       	mov    eax,0xc002ca00
c00182a0:	eb 05                	jmp    c00182a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182a2:	b8 70 ca 02 c0       	mov    eax,0xc002ca70
c00182a7:	5b                   	pop    ebx
c00182a8:	5e                   	pop    esi
c00182a9:	5f                   	pop    edi
c00182aa:	5d                   	pop    ebp
c00182ab:	c3                   	ret    

c00182ac <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00182ac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00182b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00182b4:	80 f9 04             	cmp    cl,0x4
c00182b7:	75 6b                	jne    c0018324 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00182b9:	b8 60 c8 02 c0       	mov    eax,0xc002c860
c00182be:	80 fa 01             	cmp    dl,0x1
c00182c1:	0f 86 92 02 00 00    	jbe    c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182c7:	b8 70 c8 02 c0       	mov    eax,0xc002c870
c00182cc:	80 fa 02             	cmp    dl,0x2
c00182cf:	0f 84 84 02 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182d5:	b8 80 c8 02 c0       	mov    eax,0xc002c880
c00182da:	80 fa 03             	cmp    dl,0x3
c00182dd:	0f 84 76 02 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182e3:	b8 90 c8 02 c0       	mov    eax,0xc002c890
c00182e8:	80 fa 04             	cmp    dl,0x4
c00182eb:	0f 84 68 02 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182f1:	b8 a0 c8 02 c0       	mov    eax,0xc002c8a0
c00182f6:	80 fa 05             	cmp    dl,0x5
c00182f9:	0f 84 5a 02 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00182ff:	b8 80 c8 02 c0       	mov    eax,0xc002c880
c0018304:	80 fa 07             	cmp    dl,0x7
c0018307:	0f 84 4c 02 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001830d:	83 ea 08             	sub    edx,0x8
c0018310:	b8 f9 b0 02 c0       	mov    eax,0xc002b0f9
c0018315:	80 fa 01             	cmp    dl,0x1
c0018318:	0f 87 3b 02 00 00    	ja     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001831e:	b8 b0 c8 02 c0       	mov    eax,0xc002c8b0
c0018323:	c3                   	ret    
c0018324:	80 f9 05             	cmp    cl,0x5
c0018327:	75 45                	jne    c001836e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018329:	8d 4a ff             	lea    ecx,[edx-0x1]
c001832c:	b8 c0 c8 02 c0       	mov    eax,0xc002c8c0
c0018331:	80 f9 02             	cmp    cl,0x2
c0018334:	0f 86 1f 02 00 00    	jbe    c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001833a:	80 fa 04             	cmp    dl,0x4
c001833d:	0f 84 f3 01 00 00    	je     c0018536 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018343:	80 fa 07             	cmp    dl,0x7
c0018346:	0f 84 0d 02 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001834c:	b8 d0 c8 02 c0       	mov    eax,0xc002c8d0
c0018351:	80 fa 08             	cmp    dl,0x8
c0018354:	0f 84 ff 01 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001835a:	b8 f9 b0 02 c0       	mov    eax,0xc002b0f9
c001835f:	80 fa 09             	cmp    dl,0x9
c0018362:	0f 85 f1 01 00 00    	jne    c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018368:	b8 e0 c8 02 c0       	mov    eax,0xc002c8e0
c001836d:	c3                   	ret    
c001836e:	80 f9 06             	cmp    cl,0x6
c0018371:	0f 85 85 01 00 00    	jne    c00184fc <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018377:	b8 f0 c8 02 c0       	mov    eax,0xc002c8f0
c001837c:	80 fa 01             	cmp    dl,0x1
c001837f:	0f 84 d4 01 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018385:	8d 42 fb             	lea    eax,[edx-0x5]
c0018388:	3c 01                	cmp    al,0x1
c001838a:	0f 86 ac 01 00 00    	jbe    c001853c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018390:	80 fa 03             	cmp    dl,0x3
c0018393:	0f 84 a3 01 00 00    	je     c001853c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018399:	8d 4a f9             	lea    ecx,[edx-0x7]
c001839c:	b8 10 c9 02 c0       	mov    eax,0xc002c910
c00183a1:	80 f9 01             	cmp    cl,0x1
c00183a4:	0f 86 af 01 00 00    	jbe    c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183aa:	80 fa 09             	cmp    dl,0x9
c00183ad:	0f 84 8f 01 00 00    	je     c0018542 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00183b3:	8d 4a f6             	lea    ecx,[edx-0xa]
c00183b6:	80 f9 01             	cmp    cl,0x1
c00183b9:	0f 86 9a 01 00 00    	jbe    c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183bf:	b8 20 c9 02 c0       	mov    eax,0xc002c920
c00183c4:	80 fa 0d             	cmp    dl,0xd
c00183c7:	0f 84 8c 01 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183cd:	b8 30 c9 02 c0       	mov    eax,0xc002c930
c00183d2:	80 fa 0e             	cmp    dl,0xe
c00183d5:	0f 84 7e 01 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183db:	b8 40 c9 02 c0       	mov    eax,0xc002c940
c00183e0:	80 fa 0f             	cmp    dl,0xf
c00183e3:	0f 84 70 01 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183e9:	b8 20 c9 02 c0       	mov    eax,0xc002c920
c00183ee:	80 fa 15             	cmp    dl,0x15
c00183f1:	0f 84 62 01 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00183f7:	8d 4a ea             	lea    ecx,[edx-0x16]
c00183fa:	b8 40 c9 02 c0       	mov    eax,0xc002c940
c00183ff:	80 f9 01             	cmp    cl,0x1
c0018402:	0f 86 51 01 00 00    	jbe    c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018408:	80 fa 1a             	cmp    dl,0x1a
c001840b:	0f 84 37 01 00 00    	je     c0018548 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018411:	80 fa 1c             	cmp    dl,0x1c
c0018414:	0f 84 34 01 00 00    	je     c001854e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001841a:	80 fa 1d             	cmp    dl,0x1d
c001841d:	0f 84 36 01 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018423:	b8 70 c9 02 c0       	mov    eax,0xc002c970
c0018428:	80 fa 25             	cmp    dl,0x25
c001842b:	0f 84 28 01 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018431:	8d 4a da             	lea    ecx,[edx-0x26]
c0018434:	b8 60 c9 02 c0       	mov    eax,0xc002c960
c0018439:	80 f9 01             	cmp    cl,0x1
c001843c:	0f 86 17 01 00 00    	jbe    c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018442:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c0018447:	80 fa 2a             	cmp    dl,0x2a
c001844a:	0f 84 09 01 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018450:	b8 70 c9 02 c0       	mov    eax,0xc002c970
c0018455:	80 fa 2c             	cmp    dl,0x2c
c0018458:	0f 84 fb 00 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001845e:	b8 80 c9 02 c0       	mov    eax,0xc002c980
c0018463:	80 fa 2d             	cmp    dl,0x2d
c0018466:	0f 84 ed 00 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001846c:	b8 50 c9 02 c0       	mov    eax,0xc002c950
c0018471:	80 fa 2e             	cmp    dl,0x2e
c0018474:	0f 84 df 00 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001847a:	b8 70 c9 02 c0       	mov    eax,0xc002c970
c001847f:	80 fa 2f             	cmp    dl,0x2f
c0018482:	0f 84 d1 00 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018488:	8d 4a cb             	lea    ecx,[edx-0x35]
c001848b:	b8 60 c9 02 c0       	mov    eax,0xc002c960
c0018490:	80 f9 01             	cmp    cl,0x1
c0018493:	0f 86 c0 00 00 00    	jbe    c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018499:	b8 90 c9 02 c0       	mov    eax,0xc002c990
c001849e:	80 fa 37             	cmp    dl,0x37
c00184a1:	0f 84 b2 00 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a7:	b8 a0 c9 02 c0       	mov    eax,0xc002c9a0
c00184ac:	80 fa 3a             	cmp    dl,0x3a
c00184af:	0f 84 a4 00 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184b5:	b8 b0 c9 02 c0       	mov    eax,0xc002c9b0
c00184ba:	80 fa 3c             	cmp    dl,0x3c
c00184bd:	0f 84 96 00 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c3:	b8 c0 c9 02 c0       	mov    eax,0xc002c9c0
c00184c8:	80 fa 3d             	cmp    dl,0x3d
c00184cb:	0f 84 88 00 00 00    	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d1:	b8 a0 c9 02 c0       	mov    eax,0xc002c9a0
c00184d6:	80 fa 3e             	cmp    dl,0x3e
c00184d9:	74 7e                	je     c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184db:	8d 42 bb             	lea    eax,[edx-0x45]
c00184de:	3c 01                	cmp    al,0x1
c00184e0:	76 72                	jbe    c0018554 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00184e2:	80 fa 3f             	cmp    dl,0x3f
c00184e5:	74 6d                	je     c0018554 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00184e7:	80 fa 4a             	cmp    dl,0x4a
c00184ea:	74 0a                	je     c00184f6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00184ec:	b8 f9 b0 02 c0       	mov    eax,0xc002b0f9
c00184f1:	80 fa 4d             	cmp    dl,0x4d
c00184f4:	75 63                	jne    c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f6:	b8 90 c9 02 c0       	mov    eax,0xc002c990
c00184fb:	c3                   	ret    
c00184fc:	b8 f9 b0 02 c0       	mov    eax,0xc002b0f9
c0018501:	80 f9 0b             	cmp    cl,0xb
c0018504:	75 0a                	jne    c0018510 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018506:	fe ca                	dec    dl
c0018508:	75 4f                	jne    c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001850a:	b8 d0 c9 02 c0       	mov    eax,0xc002c9d0
c001850f:	c3                   	ret    
c0018510:	80 f9 0f             	cmp    cl,0xf
c0018513:	75 44                	jne    c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018515:	b8 e0 c9 02 c0       	mov    eax,0xc002c9e0
c001851a:	80 fa 02             	cmp    dl,0x2
c001851d:	76 3a                	jbe    c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001851f:	8d 42 fd             	lea    eax,[edx-0x3]
c0018522:	3c 01                	cmp    al,0x1
c0018524:	76 0a                	jbe    c0018530 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018526:	b8 f9 b0 02 c0       	mov    eax,0xc002b0f9
c001852b:	80 fa 06             	cmp    dl,0x6
c001852e:	75 29                	jne    c0018559 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018530:	b8 f0 c9 02 c0       	mov    eax,0xc002c9f0
c0018535:	c3                   	ret    
c0018536:	b8 d0 c8 02 c0       	mov    eax,0xc002c8d0
c001853b:	c3                   	ret    
c001853c:	b8 00 c9 02 c0       	mov    eax,0xc002c900
c0018541:	c3                   	ret    
c0018542:	b8 20 c9 02 c0       	mov    eax,0xc002c920
c0018547:	c3                   	ret    
c0018548:	b8 50 c9 02 c0       	mov    eax,0xc002c950
c001854d:	c3                   	ret    
c001854e:	b8 60 c9 02 c0       	mov    eax,0xc002c960
c0018553:	c3                   	ret    
c0018554:	b8 b0 c9 02 c0       	mov    eax,0xc002c9b0
c0018559:	c3                   	ret    

c001855a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001855a:	60                   	pusha  
c001855b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001855f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018563:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018567:	9c                   	pushf  
c0018568:	fa                   	cli    
c0018569:	0f 09                	wbinvd 
c001856b:	0f 30                	wrmsr  
c001856d:	9d                   	popf   
c001856e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018572:	89 02                	mov    DWORD PTR [edx],eax
c0018574:	61                   	popa   
c0018575:	c3                   	ret    

c0018576 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018576:	60                   	pusha  
c0018577:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001857b:	9c                   	pushf  
c001857c:	fa                   	cli    
c001857d:	0f 09                	wbinvd 
c001857f:	31 c0                	xor    eax,eax
c0018581:	31 d2                	xor    edx,edx
c0018583:	0f 32                	rdmsr  
c0018585:	9d                   	popf   
c0018586:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001858a:	89 02                	mov    DWORD PTR [edx],eax
c001858c:	61                   	popa   
c001858d:	c3                   	ret    

c001858e <CPU::AMD_K6_writeback(int, int, int)>:
c001858e:	56                   	push   esi
c001858f:	53                   	push   ebx
c0018590:	83 ec 10             	sub    esp,0x10
c0018593:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018597:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001859c:	75 5d                	jne    c00185fb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001859e:	83 f8 08             	cmp    eax,0x8
c00185a1:	75 09                	jne    c00185ac <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00185a3:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00185a8:	7e 13                	jle    c00185bd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00185aa:	eb 30                	jmp    c00185dc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00185ac:	83 f8 06             	cmp    eax,0x6
c00185af:	7c 4a                	jl     c00185fb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00185b1:	83 f8 07             	cmp    eax,0x7
c00185b4:	7e 07                	jle    c00185bd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00185b6:	83 f8 09             	cmp    eax,0x9
c00185b9:	74 21                	je     c00185dc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00185bb:	eb 3e                	jmp    c00185fb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00185bd:	89 e6                	mov    esi,esp
c00185bf:	8b 1d 28 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d628
c00185c5:	56                   	push   esi
c00185c6:	c1 eb 15             	shr    ebx,0x15
c00185c9:	68 82 00 00 c0       	push   0xc0000082
c00185ce:	83 e3 7e             	and    ebx,0x7e
c00185d1:	e8 a0 ff ff ff       	call   c0018576 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00185d6:	56                   	push   esi
c00185d7:	6a 00                	push   0x0
c00185d9:	53                   	push   ebx
c00185da:	eb 12                	jmp    c00185ee <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00185dc:	89 e3                	mov    ebx,esp
c00185de:	53                   	push   ebx
c00185df:	68 82 00 00 c0       	push   0xc0000082
c00185e4:	e8 8d ff ff ff       	call   c0018576 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00185e9:	53                   	push   ebx
c00185ea:	6a 00                	push   0x0
c00185ec:	6a 00                	push   0x0
c00185ee:	68 82 00 00 c0       	push   0xc0000082
c00185f3:	e8 62 ff ff ff       	call   c001855a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00185f8:	83 c4 18             	add    esp,0x18
c00185fb:	83 c4 10             	add    esp,0x10
c00185fe:	5b                   	pop    ebx
c00185ff:	5e                   	pop    esi
c0018600:	c3                   	ret    
c0018601:	90                   	nop

c0018602 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018602:	55                   	push   ebp
c0018603:	57                   	push   edi
c0018604:	56                   	push   esi
c0018605:	53                   	push   ebx
c0018606:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001860a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001860e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018612:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018616:	39 05 00 cb 02 c0    	cmp    DWORD PTR ds:0xc002cb00,eax
c001861c:	75 23                	jne    c0018641 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001861e:	a1 0c 01 03 c0       	mov    eax,ds:0xc003010c
c0018623:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018627:	89 06                	mov    DWORD PTR [esi],eax
c0018629:	a1 08 01 03 c0       	mov    eax,ds:0xc0030108
c001862e:	89 07                	mov    DWORD PTR [edi],eax
c0018630:	a1 04 01 03 c0       	mov    eax,ds:0xc0030104
c0018635:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018638:	a1 00 01 03 c0       	mov    eax,ds:0xc0030100
c001863d:	89 02                	mov    DWORD PTR [edx],eax
c001863f:	eb 3f                	jmp    c0018680 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018641:	31 c9                	xor    ecx,ecx
c0018643:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018647:	0f a2                	cpuid  
c0018649:	89 06                	mov    DWORD PTR [esi],eax
c001864b:	89 1f                	mov    DWORD PTR [edi],ebx
c001864d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018651:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018654:	89 10                	mov    DWORD PTR [eax],edx
c0018656:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001865a:	a3 00 cb 02 c0       	mov    ds:0xc002cb00,eax
c001865f:	8b 06                	mov    eax,DWORD PTR [esi]
c0018661:	a3 0c 01 03 c0       	mov    ds:0xc003010c,eax
c0018666:	8b 07                	mov    eax,DWORD PTR [edi]
c0018668:	a3 08 01 03 c0       	mov    ds:0xc0030108,eax
c001866d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018670:	a3 04 01 03 c0       	mov    ds:0xc0030104,eax
c0018675:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018679:	8b 00                	mov    eax,DWORD PTR [eax]
c001867b:	a3 00 01 03 c0       	mov    ds:0xc0030100,eax
c0018680:	5b                   	pop    ebx
c0018681:	5e                   	pop    esi
c0018682:	5f                   	pop    edi
c0018683:	5d                   	pop    ebp
c0018684:	c3                   	ret    
c0018685:	90                   	nop

c0018686 <CPU::cpuidCheckEDX(unsigned int)>:
c0018686:	83 ec 10             	sub    esp,0x10
c0018689:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001868d:	50                   	push   eax
c001868e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018692:	50                   	push   eax
c0018693:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018697:	50                   	push   eax
c0018698:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001869c:	50                   	push   eax
c001869d:	6a 01                	push   0x1
c001869f:	e8 5e ff ff ff       	call   c0018602 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00186a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00186a8:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00186ac:	0f 95 c0             	setne  al
c00186af:	83 c4 24             	add    esp,0x24
c00186b2:	c3                   	ret    
c00186b3:	90                   	nop

c00186b4 <CPU::cpuidCheckECX(unsigned int)>:
c00186b4:	83 ec 10             	sub    esp,0x10
c00186b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186bb:	50                   	push   eax
c00186bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186c0:	50                   	push   eax
c00186c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186c5:	50                   	push   eax
c00186c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186ca:	50                   	push   eax
c00186cb:	6a 01                	push   0x1
c00186cd:	e8 30 ff ff ff       	call   c0018602 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00186d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00186d6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00186da:	0f 95 c0             	setne  al
c00186dd:	83 c4 24             	add    esp,0x24
c00186e0:	c3                   	ret    
c00186e1:	90                   	nop

c00186e2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00186e2:	83 ec 10             	sub    esp,0x10
c00186e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186e9:	50                   	push   eax
c00186ea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186ee:	50                   	push   eax
c00186ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186f3:	50                   	push   eax
c00186f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00186f8:	50                   	push   eax
c00186f9:	6a 07                	push   0x7
c00186fb:	e8 02 ff ff ff       	call   c0018602 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018700:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018704:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018708:	0f 95 c0             	setne  al
c001870b:	83 c4 24             	add    esp,0x24
c001870e:	c3                   	ret    
c001870f:	90                   	nop

c0018710 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018710:	83 ec 10             	sub    esp,0x10
c0018713:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018717:	50                   	push   eax
c0018718:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001871c:	50                   	push   eax
c001871d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018721:	50                   	push   eax
c0018722:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018726:	50                   	push   eax
c0018727:	6a 07                	push   0x7
c0018729:	e8 d4 fe ff ff       	call   c0018602 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001872e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018732:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018736:	0f 95 c0             	setne  al
c0018739:	83 c4 24             	add    esp,0x24
c001873c:	c3                   	ret    
c001873d:	90                   	nop

c001873e <CPU::CPU()>:
c001873e:	83 ec 0c             	sub    esp,0xc
c0018741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018745:	83 ec 08             	sub    esp,0x8
c0018748:	68 f9 b0 02 c0       	push   0xc002b0f9
c001874d:	50                   	push   eax
c001874e:	e8 1f b4 ff ff       	call   c0013b72 <Device::Device(char const*)>
c0018753:	83 c4 10             	add    esp,0x10
c0018756:	ba d0 b1 02 c0       	mov    edx,0xc002b1d0
c001875b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001875f:	89 10                	mov    DWORD PTR [eax],edx
c0018761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018765:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001876f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018773:	05 78 01 00 00       	add    eax,0x178
c0018778:	83 ec 0c             	sub    esp,0xc
c001877b:	50                   	push   eax
c001877c:	e8 4b 66 ff ff       	call   c000edcc <GDT::GDT()>
c0018781:	83 c4 10             	add    esp,0x10
c0018784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018788:	05 7c 09 00 00       	add    eax,0x97c
c001878d:	83 ec 0c             	sub    esp,0xc
c0018790:	50                   	push   eax
c0018791:	e8 86 68 ff ff       	call   c000f01c <IDT::IDT()>
c0018796:	83 c4 10             	add    esp,0x10
c0018799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001879d:	05 7c 11 00 00       	add    eax,0x117c
c00187a2:	83 ec 0c             	sub    esp,0xc
c00187a5:	50                   	push   eax
c00187a6:	e8 39 83 ff ff       	call   c0010ae4 <TSS::TSS()>
c00187ab:	83 c4 10             	add    esp,0x10
c00187ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187b2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00187b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00187bd:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00187c7:	90                   	nop
c00187c8:	83 c4 0c             	add    esp,0xc
c00187cb:	c3                   	ret    

c00187cc <CPU::displayFeatures()>:
c00187cc:	c3                   	ret    
c00187cd:	90                   	nop

c00187ce <CPU::detectFeatures()>:
c00187ce:	55                   	push   ebp
c00187cf:	57                   	push   edi
c00187d0:	56                   	push   esi
c00187d1:	53                   	push   ebx
c00187d2:	83 ec 50             	sub    esp,0x50
c00187d5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00187d9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00187e3:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00187ea:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00187f0:	6a 0d                	push   0xd
c00187f2:	6a 00                	push   0x0
c00187f4:	55                   	push   ebp
c00187f5:	e8 56 7f fe ff       	call   c0000750 <memset>
c00187fa:	83 c4 10             	add    esp,0x10
c00187fd:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0018802:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018809:	0f 84 22 09 00 00    	je     c0019131 <CPU::detectFeatures()+0x963>
c001880f:	83 ec 0c             	sub    esp,0xc
c0018812:	89 ef                	mov    edi,ebp
c0018814:	6a 10                	push   0x10
c0018816:	e8 6b fe ff ff       	call   c0018686 <CPU::cpuidCheckEDX(unsigned int)>
c001881b:	83 e0 01             	and    eax,0x1
c001881e:	8d 14 00             	lea    edx,[eax+eax*1]
c0018821:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018827:	83 e0 fd             	and    eax,0xfffffffd
c001882a:	09 d0                	or     eax,edx
c001882c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018832:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018839:	e8 48 fe ff ff       	call   c0018686 <CPU::cpuidCheckEDX(unsigned int)>
c001883e:	83 e0 01             	and    eax,0x1
c0018841:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018848:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001884e:	83 e0 fb             	and    eax,0xfffffffb
c0018851:	09 d0                	or     eax,edx
c0018853:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018859:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018860:	e8 21 fe ff ff       	call   c0018686 <CPU::cpuidCheckEDX(unsigned int)>
c0018865:	83 e0 01             	and    eax,0x1
c0018868:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001886f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018875:	83 e0 f7             	and    eax,0xfffffff7
c0018878:	09 d0                	or     eax,edx
c001887a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018880:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018887:	e8 fa fd ff ff       	call   c0018686 <CPU::cpuidCheckEDX(unsigned int)>
c001888c:	83 e0 01             	and    eax,0x1
c001888f:	c1 e0 04             	shl    eax,0x4
c0018892:	88 c2                	mov    dl,al
c0018894:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001889a:	83 e0 ef             	and    eax,0xffffffef
c001889d:	09 d0                	or     eax,edx
c001889f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188a5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00188ac:	e8 d5 fd ff ff       	call   c0018686 <CPU::cpuidCheckEDX(unsigned int)>
c00188b1:	83 e0 01             	and    eax,0x1
c00188b4:	c1 e0 05             	shl    eax,0x5
c00188b7:	88 c2                	mov    dl,al
c00188b9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00188bf:	83 e0 df             	and    eax,0xffffffdf
c00188c2:	09 d0                	or     eax,edx
c00188c4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00188ca:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00188d1:	e8 b0 fd ff ff       	call   c0018686 <CPU::cpuidCheckEDX(unsigned int)>
c00188d6:	83 e0 01             	and    eax,0x1
c00188d9:	8d 14 00             	lea    edx,[eax+eax*1]
c00188dc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00188e2:	83 e0 fd             	and    eax,0xfffffffd
c00188e5:	09 d0                	or     eax,edx
c00188e7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00188ed:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00188f4:	e8 8d fd ff ff       	call   c0018686 <CPU::cpuidCheckEDX(unsigned int)>
c00188f9:	83 e0 01             	and    eax,0x1
c00188fc:	c1 e0 06             	shl    eax,0x6
c00188ff:	88 c2                	mov    dl,al
c0018901:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018907:	83 e0 bf             	and    eax,0xffffffbf
c001890a:	09 d0                	or     eax,edx
c001890c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018912:	58                   	pop    eax
c0018913:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018917:	50                   	push   eax
c0018918:	8d 44 24 28          	lea    eax,[esp+0x28]
c001891c:	50                   	push   eax
c001891d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018921:	56                   	push   esi
c0018922:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018926:	50                   	push   eax
c0018927:	6a 00                	push   0x0
c0018929:	e8 d4 fc ff ff       	call   c0018602 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001892e:	b8 04 00 00 00       	mov    eax,0x4
c0018933:	89 c1                	mov    ecx,eax
c0018935:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018937:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001893d:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018941:	89 c1                	mov    ecx,eax
c0018943:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018945:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001894b:	8d 74 24 38          	lea    esi,[esp+0x38]
c001894f:	89 c1                	mov    ecx,eax
c0018951:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018953:	83 c4 18             	add    esp,0x18
c0018956:	68 a4 af 02 c0       	push   0xc002afa4
c001895b:	55                   	push   ebp
c001895c:	e8 37 7f fe ff       	call   c0000898 <strcmp>
c0018961:	83 c4 10             	add    esp,0x10
c0018964:	85 c0                	test   eax,eax
c0018966:	75 0f                	jne    c0018977 <CPU::detectFeatures()+0x1a9>
c0018968:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018972:	e9 22 02 00 00       	jmp    c0018b99 <CPU::detectFeatures()+0x3cb>
c0018977:	50                   	push   eax
c0018978:	50                   	push   eax
c0018979:	68 b1 af 02 c0       	push   0xc002afb1
c001897e:	55                   	push   ebp
c001897f:	e8 14 7f fe ff       	call   c0000898 <strcmp>
c0018984:	83 c4 10             	add    esp,0x10
c0018987:	85 c0                	test   eax,eax
c0018989:	74 dd                	je     c0018968 <CPU::detectFeatures()+0x19a>
c001898b:	50                   	push   eax
c001898c:	50                   	push   eax
c001898d:	68 be af 02 c0       	push   0xc002afbe
c0018992:	55                   	push   ebp
c0018993:	e8 00 7f fe ff       	call   c0000898 <strcmp>
c0018998:	83 c4 10             	add    esp,0x10
c001899b:	85 c0                	test   eax,eax
c001899d:	74 2a                	je     c00189c9 <CPU::detectFeatures()+0x1fb>
c001899f:	50                   	push   eax
c00189a0:	50                   	push   eax
c00189a1:	68 cb af 02 c0       	push   0xc002afcb
c00189a6:	55                   	push   ebp
c00189a7:	e8 ec 7e fe ff       	call   c0000898 <strcmp>
c00189ac:	83 c4 10             	add    esp,0x10
c00189af:	85 c0                	test   eax,eax
c00189b1:	74 16                	je     c00189c9 <CPU::detectFeatures()+0x1fb>
c00189b3:	50                   	push   eax
c00189b4:	50                   	push   eax
c00189b5:	68 d8 af 02 c0       	push   0xc002afd8
c00189ba:	55                   	push   ebp
c00189bb:	e8 d8 7e fe ff       	call   c0000898 <strcmp>
c00189c0:	83 c4 10             	add    esp,0x10
c00189c3:	85 c0                	test   eax,eax
c00189c5:	74 48                	je     c0018a0f <CPU::detectFeatures()+0x241>
c00189c7:	eb 0f                	jmp    c00189d8 <CPU::detectFeatures()+0x20a>
c00189c9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00189d3:	e9 c1 01 00 00       	jmp    c0018b99 <CPU::detectFeatures()+0x3cb>
c00189d8:	50                   	push   eax
c00189d9:	50                   	push   eax
c00189da:	68 e5 af 02 c0       	push   0xc002afe5
c00189df:	55                   	push   ebp
c00189e0:	e8 b3 7e fe ff       	call   c0000898 <strcmp>
c00189e5:	83 c4 10             	add    esp,0x10
c00189e8:	85 c0                	test   eax,eax
c00189ea:	74 23                	je     c0018a0f <CPU::detectFeatures()+0x241>
c00189ec:	57                   	push   edi
c00189ed:	57                   	push   edi
c00189ee:	68 f2 af 02 c0       	push   0xc002aff2
c00189f3:	55                   	push   ebp
c00189f4:	e8 9f 7e fe ff       	call   c0000898 <strcmp>
c00189f9:	83 c4 10             	add    esp,0x10
c00189fc:	85 c0                	test   eax,eax
c00189fe:	75 1e                	jne    c0018a1e <CPU::detectFeatures()+0x250>
c0018a00:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018a0a:	e9 8a 01 00 00       	jmp    c0018b99 <CPU::detectFeatures()+0x3cb>
c0018a0f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018a19:	e9 7b 01 00 00       	jmp    c0018b99 <CPU::detectFeatures()+0x3cb>
c0018a1e:	56                   	push   esi
c0018a1f:	56                   	push   esi
c0018a20:	68 ff af 02 c0       	push   0xc002afff
c0018a25:	55                   	push   ebp
c0018a26:	e8 6d 7e fe ff       	call   c0000898 <strcmp>
c0018a2b:	83 c4 10             	add    esp,0x10
c0018a2e:	85 c0                	test   eax,eax
c0018a30:	75 0f                	jne    c0018a41 <CPU::detectFeatures()+0x273>
c0018a32:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018a3c:	e9 58 01 00 00       	jmp    c0018b99 <CPU::detectFeatures()+0x3cb>
c0018a41:	51                   	push   ecx
c0018a42:	51                   	push   ecx
c0018a43:	68 be af 02 c0       	push   0xc002afbe
c0018a48:	55                   	push   ebp
c0018a49:	e8 4a 7e fe ff       	call   c0000898 <strcmp>
c0018a4e:	83 c4 10             	add    esp,0x10
c0018a51:	85 c0                	test   eax,eax
c0018a53:	75 0f                	jne    c0018a64 <CPU::detectFeatures()+0x296>
c0018a55:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018a5f:	e9 35 01 00 00       	jmp    c0018b99 <CPU::detectFeatures()+0x3cb>
c0018a64:	52                   	push   edx
c0018a65:	52                   	push   edx
c0018a66:	68 0c b0 02 c0       	push   0xc002b00c
c0018a6b:	55                   	push   ebp
c0018a6c:	e8 27 7e fe ff       	call   c0000898 <strcmp>
c0018a71:	83 c4 10             	add    esp,0x10
c0018a74:	85 c0                	test   eax,eax
c0018a76:	75 0f                	jne    c0018a87 <CPU::detectFeatures()+0x2b9>
c0018a78:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018a82:	e9 12 01 00 00       	jmp    c0018b99 <CPU::detectFeatures()+0x3cb>
c0018a87:	50                   	push   eax
c0018a88:	50                   	push   eax
c0018a89:	68 19 b0 02 c0       	push   0xc002b019
c0018a8e:	55                   	push   ebp
c0018a8f:	e8 04 7e fe ff       	call   c0000898 <strcmp>
c0018a94:	83 c4 10             	add    esp,0x10
c0018a97:	85 c0                	test   eax,eax
c0018a99:	75 0f                	jne    c0018aaa <CPU::detectFeatures()+0x2dc>
c0018a9b:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018aa5:	e9 ef 00 00 00       	jmp    c0018b99 <CPU::detectFeatures()+0x3cb>
c0018aaa:	50                   	push   eax
c0018aab:	50                   	push   eax
c0018aac:	68 26 b0 02 c0       	push   0xc002b026
c0018ab1:	55                   	push   ebp
c0018ab2:	e8 e1 7d fe ff       	call   c0000898 <strcmp>
c0018ab7:	83 c4 10             	add    esp,0x10
c0018aba:	85 c0                	test   eax,eax
c0018abc:	75 0f                	jne    c0018acd <CPU::detectFeatures()+0x2ff>
c0018abe:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018ac8:	e9 cc 00 00 00       	jmp    c0018b99 <CPU::detectFeatures()+0x3cb>
c0018acd:	50                   	push   eax
c0018ace:	50                   	push   eax
c0018acf:	68 33 b0 02 c0       	push   0xc002b033
c0018ad4:	55                   	push   ebp
c0018ad5:	e8 be 7d fe ff       	call   c0000898 <strcmp>
c0018ada:	83 c4 10             	add    esp,0x10
c0018add:	85 c0                	test   eax,eax
c0018adf:	75 0f                	jne    c0018af0 <CPU::detectFeatures()+0x322>
c0018ae1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018aeb:	e9 a9 00 00 00       	jmp    c0018b99 <CPU::detectFeatures()+0x3cb>
c0018af0:	50                   	push   eax
c0018af1:	50                   	push   eax
c0018af2:	68 40 b0 02 c0       	push   0xc002b040
c0018af7:	55                   	push   ebp
c0018af8:	e8 9b 7d fe ff       	call   c0000898 <strcmp>
c0018afd:	83 c4 10             	add    esp,0x10
c0018b00:	85 c0                	test   eax,eax
c0018b02:	75 0f                	jne    c0018b13 <CPU::detectFeatures()+0x345>
c0018b04:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018b0e:	e9 86 00 00 00       	jmp    c0018b99 <CPU::detectFeatures()+0x3cb>
c0018b13:	50                   	push   eax
c0018b14:	50                   	push   eax
c0018b15:	68 4d b0 02 c0       	push   0xc002b04d
c0018b1a:	55                   	push   ebp
c0018b1b:	e8 78 7d fe ff       	call   c0000898 <strcmp>
c0018b20:	83 c4 10             	add    esp,0x10
c0018b23:	85 c0                	test   eax,eax
c0018b25:	75 0c                	jne    c0018b33 <CPU::detectFeatures()+0x365>
c0018b27:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018b31:	eb 66                	jmp    c0018b99 <CPU::detectFeatures()+0x3cb>
c0018b33:	50                   	push   eax
c0018b34:	50                   	push   eax
c0018b35:	68 5a b0 02 c0       	push   0xc002b05a
c0018b3a:	55                   	push   ebp
c0018b3b:	e8 58 7d fe ff       	call   c0000898 <strcmp>
c0018b40:	83 c4 10             	add    esp,0x10
c0018b43:	85 c0                	test   eax,eax
c0018b45:	75 0c                	jne    c0018b53 <CPU::detectFeatures()+0x385>
c0018b47:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018b51:	eb 46                	jmp    c0018b99 <CPU::detectFeatures()+0x3cb>
c0018b53:	57                   	push   edi
c0018b54:	57                   	push   edi
c0018b55:	68 67 b0 02 c0       	push   0xc002b067
c0018b5a:	55                   	push   ebp
c0018b5b:	e8 38 7d fe ff       	call   c0000898 <strcmp>
c0018b60:	83 c4 10             	add    esp,0x10
c0018b63:	85 c0                	test   eax,eax
c0018b65:	74 e0                	je     c0018b47 <CPU::detectFeatures()+0x379>
c0018b67:	56                   	push   esi
c0018b68:	56                   	push   esi
c0018b69:	68 74 b0 02 c0       	push   0xc002b074
c0018b6e:	55                   	push   ebp
c0018b6f:	e8 24 7d fe ff       	call   c0000898 <strcmp>
c0018b74:	83 c4 10             	add    esp,0x10
c0018b77:	85 c0                	test   eax,eax
c0018b79:	74 cc                	je     c0018b47 <CPU::detectFeatures()+0x379>
c0018b7b:	51                   	push   ecx
c0018b7c:	51                   	push   ecx
c0018b7d:	68 81 b0 02 c0       	push   0xc002b081
c0018b82:	55                   	push   ebp
c0018b83:	e8 10 7d fe ff       	call   c0000898 <strcmp>
c0018b88:	83 c4 10             	add    esp,0x10
c0018b8b:	85 c0                	test   eax,eax
c0018b8d:	74 b8                	je     c0018b47 <CPU::detectFeatures()+0x379>
c0018b8f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018b99:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018b9e:	0f 86 be 00 00 00    	jbe    c0018c62 <CPU::detectFeatures()+0x494>
c0018ba4:	83 ec 0c             	sub    esp,0xc
c0018ba7:	68 80 00 00 00       	push   0x80
c0018bac:	e8 31 fb ff ff       	call   c00186e2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018bb1:	83 e0 01             	and    eax,0x1
c0018bb4:	c1 e0 06             	shl    eax,0x6
c0018bb7:	88 c2                	mov    dl,al
c0018bb9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018bbf:	83 e0 bf             	and    eax,0xffffffbf
c0018bc2:	09 d0                	or     eax,edx
c0018bc4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018bca:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018bd1:	e8 0c fb ff ff       	call   c00186e2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018bd6:	83 e0 01             	and    eax,0x1
c0018bd9:	c1 e0 04             	shl    eax,0x4
c0018bdc:	88 c2                	mov    dl,al
c0018bde:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018be4:	83 e0 ef             	and    eax,0xffffffef
c0018be7:	09 d0                	or     eax,edx
c0018be9:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018bef:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018bf6:	e8 e7 fa ff ff       	call   c00186e2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018bfb:	c1 e0 07             	shl    eax,0x7
c0018bfe:	88 c2                	mov    dl,al
c0018c00:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018c06:	83 e0 7f             	and    eax,0x7f
c0018c09:	09 d0                	or     eax,edx
c0018c0b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018c11:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018c18:	e8 f3 fa ff ff       	call   c0018710 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018c1d:	83 e0 01             	and    eax,0x1
c0018c20:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018c27:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018c2d:	83 e0 f7             	and    eax,0xfffffff7
c0018c30:	09 d0                	or     eax,edx
c0018c32:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018c38:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018c3f:	e8 cc fa ff ff       	call   c0018710 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018c44:	83 c4 10             	add    esp,0x10
c0018c47:	83 e0 01             	and    eax,0x1
c0018c4a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018c51:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018c57:	83 e0 fb             	and    eax,0xfffffffb
c0018c5a:	09 d0                	or     eax,edx
c0018c5c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018c62:	83 ec 0c             	sub    esp,0xc
c0018c65:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c69:	50                   	push   eax
c0018c6a:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c6e:	50                   	push   eax
c0018c6f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018c73:	56                   	push   esi
c0018c74:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c78:	50                   	push   eax
c0018c79:	6a 01                	push   0x1
c0018c7b:	e8 82 f9 ff ff       	call   c0018602 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018c80:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018c84:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018c8a:	88 ca                	mov    dl,cl
c0018c8c:	83 e0 f0             	and    eax,0xfffffff0
c0018c8f:	83 e2 0f             	and    edx,0xf
c0018c92:	09 d0                	or     eax,edx
c0018c94:	88 ca                	mov    dl,cl
c0018c96:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018c9c:	c0 ea 04             	shr    dl,0x4
c0018c9f:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018ca3:	0f b6 c2             	movzx  eax,dl
c0018ca6:	83 c4 20             	add    esp,0x20
c0018ca9:	c1 e0 06             	shl    eax,0x6
c0018cac:	89 c7                	mov    edi,eax
c0018cae:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018cb4:	66 25 3f c0          	and    ax,0xc03f
c0018cb8:	09 f8                	or     eax,edi
c0018cba:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018cc1:	89 c8                	mov    eax,ecx
c0018cc3:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018cca:	c1 e8 08             	shr    eax,0x8
c0018ccd:	83 e5 3f             	and    ebp,0x3f
c0018cd0:	83 e0 0f             	and    eax,0xf
c0018cd3:	89 c7                	mov    edi,eax
c0018cd5:	c1 e7 06             	shl    edi,0x6
c0018cd8:	09 ef                	or     edi,ebp
c0018cda:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018ce1:	89 fa                	mov    edx,edi
c0018ce3:	83 e5 c0             	and    ebp,0xffffffc0
c0018ce6:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018cec:	88 c2                	mov    dl,al
c0018cee:	c0 ea 02             	shr    dl,0x2
c0018cf1:	89 d7                	mov    edi,edx
c0018cf3:	09 ef                	or     edi,ebp
c0018cf5:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018cfb:	89 fa                	mov    edx,edi
c0018cfd:	83 e5 cf             	and    ebp,0xffffffcf
c0018d00:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018d06:	89 cf                	mov    edi,ecx
c0018d08:	c1 ef 0c             	shr    edi,0xc
c0018d0b:	83 e7 03             	and    edi,0x3
c0018d0e:	c1 e7 04             	shl    edi,0x4
c0018d11:	09 ef                	or     edi,ebp
c0018d13:	3c 06                	cmp    al,0x6
c0018d15:	89 fa                	mov    edx,edi
c0018d17:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018d1d:	74 04                	je     c0018d23 <CPU::detectFeatures()+0x555>
c0018d1f:	3c 0f                	cmp    al,0xf
c0018d21:	75 5c                	jne    c0018d7f <CPU::detectFeatures()+0x5b1>
c0018d23:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018d27:	89 cf                	mov    edi,ecx
c0018d29:	c1 ef 10             	shr    edi,0x10
c0018d2c:	c1 e7 04             	shl    edi,0x4
c0018d2f:	09 fa                	or     edx,edi
c0018d31:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018d37:	0f b6 d2             	movzx  edx,dl
c0018d3a:	66 81 e7 3f c0       	and    di,0xc03f
c0018d3f:	c1 e2 06             	shl    edx,0x6
c0018d42:	09 fa                	or     edx,edi
c0018d44:	3c 0f                	cmp    al,0xf
c0018d46:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018d4d:	75 30                	jne    c0018d7f <CPU::detectFeatures()+0x5b1>
c0018d4f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018d55:	c1 e9 14             	shr    ecx,0x14
c0018d58:	83 e0 3f             	and    eax,0x3f
c0018d5b:	83 c1 0f             	add    ecx,0xf
c0018d5e:	88 ca                	mov    dl,cl
c0018d60:	c0 e9 02             	shr    cl,0x2
c0018d63:	c1 e2 06             	shl    edx,0x6
c0018d66:	09 d0                	or     eax,edx
c0018d68:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018d6e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018d74:	83 e0 c0             	and    eax,0xffffffc0
c0018d77:	09 c1                	or     ecx,eax
c0018d79:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018d7f:	83 ec 0c             	sub    esp,0xc
c0018d82:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018d89:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018d8d:	50                   	push   eax
c0018d8e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018d92:	55                   	push   ebp
c0018d93:	56                   	push   esi
c0018d94:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018d98:	57                   	push   edi
c0018d99:	68 00 00 00 80       	push   0x80000000
c0018d9e:	e8 5f f8 ff ff       	call   c0018602 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018da3:	83 c4 20             	add    esp,0x20
c0018da6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018dae:	76 22                	jbe    c0018dd2 <CPU::detectFeatures()+0x604>
c0018db0:	83 ec 0c             	sub    esp,0xc
c0018db3:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018db7:	50                   	push   eax
c0018db8:	55                   	push   ebp
c0018db9:	56                   	push   esi
c0018dba:	57                   	push   edi
c0018dbb:	68 01 00 00 80       	push   0x80000001
c0018dc0:	e8 3d f8 ff ff       	call   c0018602 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dc5:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018dcf:	83 c4 20             	add    esp,0x20
c0018dd2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018dd8:	83 f8 01             	cmp    eax,0x1
c0018ddb:	75 6f                	jne    c0018e4c <CPU::detectFeatures()+0x67e>
c0018ddd:	51                   	push   ecx
c0018dde:	51                   	push   ecx
c0018ddf:	68 8d b0 02 c0       	push   0xc002b08d
c0018de4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018de8:	56                   	push   esi
c0018de9:	e8 1e 7a fe ff       	call   c000080c <strcpy>
c0018dee:	5f                   	pop    edi
c0018def:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018df5:	5d                   	pop    ebp
c0018df6:	66 c1 e8 06          	shr    ax,0x6
c0018dfa:	0f b6 c0             	movzx  eax,al
c0018dfd:	50                   	push   eax
c0018dfe:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e04:	c1 e8 0e             	shr    eax,0xe
c0018e07:	0f b6 c0             	movzx  eax,al
c0018e0a:	50                   	push   eax
c0018e0b:	e8 9c f4 ff ff       	call   c00182ac <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018e10:	5a                   	pop    edx
c0018e11:	59                   	pop    ecx
c0018e12:	50                   	push   eax
c0018e13:	56                   	push   esi
c0018e14:	e8 33 7b fe ff       	call   c000094c <strcat>
c0018e19:	5f                   	pop    edi
c0018e1a:	5d                   	pop    ebp
c0018e1b:	56                   	push   esi
c0018e1c:	53                   	push   ebx
c0018e1d:	e8 42 ad ff ff       	call   c0013b64 <Device::setName(char const*)>
c0018e22:	58                   	pop    eax
c0018e23:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018e29:	5a                   	pop    edx
c0018e2a:	68 94 b0 02 c0       	push   0xc002b094
c0018e2f:	50                   	push   eax
c0018e30:	e8 63 7a fe ff       	call   c0000898 <strcmp>
c0018e35:	83 c4 10             	add    esp,0x10
c0018e38:	85 c0                	test   eax,eax
c0018e3a:	0f 85 71 03 00 00    	jne    c00191b1 <CPU::detectFeatures()+0x9e3>
c0018e40:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018e47:	e9 65 03 00 00       	jmp    c00191b1 <CPU::detectFeatures()+0x9e3>
c0018e4c:	83 f8 02             	cmp    eax,0x2
c0018e4f:	0f 85 b5 00 00 00    	jne    c0018f0a <CPU::detectFeatures()+0x73c>
c0018e55:	57                   	push   edi
c0018e56:	57                   	push   edi
c0018e57:	68 a6 b0 02 c0       	push   0xc002b0a6
c0018e5c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018e60:	56                   	push   esi
c0018e61:	e8 a6 79 fe ff       	call   c000080c <strcpy>
c0018e66:	5d                   	pop    ebp
c0018e67:	58                   	pop    eax
c0018e68:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e6e:	66 c1 e8 06          	shr    ax,0x6
c0018e72:	0f b6 c0             	movzx  eax,al
c0018e75:	50                   	push   eax
c0018e76:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e7c:	c1 e8 0e             	shr    eax,0xe
c0018e7f:	0f b6 c0             	movzx  eax,al
c0018e82:	50                   	push   eax
c0018e83:	e8 90 f2 ff ff       	call   c0018118 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018e88:	5a                   	pop    edx
c0018e89:	59                   	pop    ecx
c0018e8a:	50                   	push   eax
c0018e8b:	56                   	push   esi
c0018e8c:	e8 bb 7a fe ff       	call   c000094c <strcat>
c0018e91:	5f                   	pop    edi
c0018e92:	5d                   	pop    ebp
c0018e93:	56                   	push   esi
c0018e94:	53                   	push   ebx
c0018e95:	e8 ca ac ff ff       	call   c0013b64 <Device::setName(char const*)>
c0018e9a:	58                   	pop    eax
c0018e9b:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018ea1:	5a                   	pop    edx
c0018ea2:	68 ab b0 02 c0       	push   0xc002b0ab
c0018ea7:	50                   	push   eax
c0018ea8:	e8 eb 79 fe ff       	call   c0000898 <strcmp>
c0018ead:	83 c4 10             	add    esp,0x10
c0018eb0:	85 c0                	test   eax,eax
c0018eb2:	75 20                	jne    c0018ed4 <CPU::detectFeatures()+0x706>
c0018eb4:	8b 15 e8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5e8
c0018eba:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018ec0:	a8 01                	test   al,0x1
c0018ec2:	74 10                	je     c0018ed4 <CPU::detectFeatures()+0x706>
c0018ec4:	83 e0 fe             	and    eax,0xfffffffe
c0018ec7:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018ecd:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018ed4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018eda:	c1 e8 0e             	shr    eax,0xe
c0018edd:	3c 05                	cmp    al,0x5
c0018edf:	0f 85 cc 02 00 00    	jne    c00191b1 <CPU::detectFeatures()+0x9e3>
c0018ee5:	56                   	push   esi
c0018ee6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018eec:	83 e0 0f             	and    eax,0xf
c0018eef:	50                   	push   eax
c0018ef0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ef6:	66 c1 e8 06          	shr    ax,0x6
c0018efa:	0f b6 c0             	movzx  eax,al
c0018efd:	50                   	push   eax
c0018efe:	6a 05                	push   0x5
c0018f00:	e8 89 f6 ff ff       	call   c001858e <CPU::AMD_K6_writeback(int, int, int)>
c0018f05:	e9 1f 02 00 00       	jmp    c0019129 <CPU::detectFeatures()+0x95b>
c0018f0a:	8d 50 fd             	lea    edx,[eax-0x3]
c0018f0d:	83 fa 01             	cmp    edx,0x1
c0018f10:	76 09                	jbe    c0018f1b <CPU::detectFeatures()+0x74d>
c0018f12:	83 f8 06             	cmp    eax,0x6
c0018f15:	0f 85 91 01 00 00    	jne    c00190ac <CPU::detectFeatures()+0x8de>
c0018f1b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018f21:	c1 ea 0e             	shr    edx,0xe
c0018f24:	80 fa 05             	cmp    dl,0x5
c0018f27:	75 7b                	jne    c0018fa4 <CPU::detectFeatures()+0x7d6>
c0018f29:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018f2f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018f34:	66 81 fa 00 01       	cmp    dx,0x100
c0018f39:	75 0c                	jne    c0018f47 <CPU::detectFeatures()+0x779>
c0018f3b:	51                   	push   ecx
c0018f3c:	51                   	push   ecx
c0018f3d:	68 b2 b0 02 c0       	push   0xc002b0b2
c0018f42:	e9 dc 01 00 00       	jmp    c0019123 <CPU::detectFeatures()+0x955>
c0018f47:	66 81 fa 00 02       	cmp    dx,0x200
c0018f4c:	75 0c                	jne    c0018f5a <CPU::detectFeatures()+0x78c>
c0018f4e:	52                   	push   edx
c0018f4f:	52                   	push   edx
c0018f50:	68 c5 b0 02 c0       	push   0xc002b0c5
c0018f55:	e9 c9 01 00 00       	jmp    c0019123 <CPU::detectFeatures()+0x955>
c0018f5a:	66 81 fa 40 02       	cmp    dx,0x240
c0018f5f:	75 0c                	jne    c0018f6d <CPU::detectFeatures()+0x79f>
c0018f61:	50                   	push   eax
c0018f62:	50                   	push   eax
c0018f63:	68 d7 b0 02 c0       	push   0xc002b0d7
c0018f68:	e9 b6 01 00 00       	jmp    c0019123 <CPU::detectFeatures()+0x955>
c0018f6d:	83 f8 06             	cmp    eax,0x6
c0018f70:	75 0c                	jne    c0018f7e <CPU::detectFeatures()+0x7b0>
c0018f72:	50                   	push   eax
c0018f73:	50                   	push   eax
c0018f74:	68 e9 b0 02 c0       	push   0xc002b0e9
c0018f79:	e9 a5 01 00 00       	jmp    c0019123 <CPU::detectFeatures()+0x955>
c0018f7e:	83 f8 04             	cmp    eax,0x4
c0018f81:	75 0c                	jne    c0018f8f <CPU::detectFeatures()+0x7c1>
c0018f83:	50                   	push   eax
c0018f84:	50                   	push   eax
c0018f85:	68 f5 b0 02 c0       	push   0xc002b0f5
c0018f8a:	e9 94 01 00 00       	jmp    c0019123 <CPU::detectFeatures()+0x955>
c0018f8f:	83 f8 03             	cmp    eax,0x3
c0018f92:	0f 85 19 02 00 00    	jne    c00191b1 <CPU::detectFeatures()+0x9e3>
c0018f98:	50                   	push   eax
c0018f99:	50                   	push   eax
c0018f9a:	68 fd b0 02 c0       	push   0xc002b0fd
c0018f9f:	e9 7f 01 00 00       	jmp    c0019123 <CPU::detectFeatures()+0x955>
c0018fa4:	80 fa 06             	cmp    dl,0x6
c0018fa7:	0f 85 db 00 00 00    	jne    c0019088 <CPU::detectFeatures()+0x8ba>
c0018fad:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018fb3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018fb8:	66 81 fa 80 01       	cmp    dx,0x180
c0018fbd:	75 0c                	jne    c0018fcb <CPU::detectFeatures()+0x7fd>
c0018fbf:	50                   	push   eax
c0018fc0:	50                   	push   eax
c0018fc1:	68 08 b1 02 c0       	push   0xc002b108
c0018fc6:	e9 58 01 00 00       	jmp    c0019123 <CPU::detectFeatures()+0x955>
c0018fcb:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018fd1:	66 f7 c1 80 ff       	test   cx,0xff80
c0018fd6:	75 0c                	jne    c0018fe4 <CPU::detectFeatures()+0x816>
c0018fd8:	50                   	push   eax
c0018fd9:	50                   	push   eax
c0018fda:	68 18 b1 02 c0       	push   0xc002b118
c0018fdf:	e9 3f 01 00 00       	jmp    c0019123 <CPU::detectFeatures()+0x955>
c0018fe4:	66 81 fa 40 02       	cmp    dx,0x240
c0018fe9:	75 0c                	jne    c0018ff7 <CPU::detectFeatures()+0x829>
c0018feb:	55                   	push   ebp
c0018fec:	55                   	push   ebp
c0018fed:	68 1f b1 02 c0       	push   0xc002b11f
c0018ff2:	e9 2c 01 00 00       	jmp    c0019123 <CPU::detectFeatures()+0x955>
c0018ff7:	66 81 fa 80 02       	cmp    dx,0x280
c0018ffc:	75 0c                	jne    c001900a <CPU::detectFeatures()+0x83c>
c0018ffe:	57                   	push   edi
c0018fff:	57                   	push   edi
c0019000:	68 28 b1 02 c0       	push   0xc002b128
c0019005:	e9 19 01 00 00       	jmp    c0019123 <CPU::detectFeatures()+0x955>
c001900a:	66 81 fa 40 03       	cmp    dx,0x340
c001900f:	74 ed                	je     c0018ffe <CPU::detectFeatures()+0x830>
c0019011:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019016:	75 0c                	jne    c0019024 <CPU::detectFeatures()+0x856>
c0019018:	56                   	push   esi
c0019019:	56                   	push   esi
c001901a:	68 2f b1 02 c0       	push   0xc002b12f
c001901f:	e9 ff 00 00 00       	jmp    c0019123 <CPU::detectFeatures()+0x955>
c0019024:	83 f8 06             	cmp    eax,0x6
c0019027:	0f 84 45 ff ff ff    	je     c0018f72 <CPU::detectFeatures()+0x7a4>
c001902d:	83 f8 04             	cmp    eax,0x4
c0019030:	0f 84 4d ff ff ff    	je     c0018f83 <CPU::detectFeatures()+0x7b5>
c0019036:	83 f8 03             	cmp    eax,0x3
c0019039:	0f 85 72 01 00 00    	jne    c00191b1 <CPU::detectFeatures()+0x9e3>
c001903f:	51                   	push   ecx
c0019040:	51                   	push   ecx
c0019041:	68 38 b1 02 c0       	push   0xc002b138
c0019046:	53                   	push   ebx
c0019047:	e8 18 ab ff ff       	call   c0013b64 <Device::setName(char const*)>
c001904c:	b1 c1                	mov    cl,0xc1
c001904e:	88 c8                	mov    al,cl
c0019050:	e6 22                	out    0x22,al
c0019052:	e4 23                	in     al,0x23
c0019054:	88 c2                	mov    dl,al
c0019056:	88 c8                	mov    al,cl
c0019058:	e6 22                	out    0x22,al
c001905a:	88 d0                	mov    al,dl
c001905c:	83 c8 10             	or     eax,0x10
c001905f:	e6 23                	out    0x23,al
c0019061:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019068:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001906b:	89 d0                	mov    eax,edx
c001906d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019073:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019077:	40                   	inc    eax
c0019078:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001907e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019083:	e9 a1 00 00 00       	jmp    c0019129 <CPU::detectFeatures()+0x95b>
c0019088:	83 f8 06             	cmp    eax,0x6
c001908b:	0f 84 e1 fe ff ff    	je     c0018f72 <CPU::detectFeatures()+0x7a4>
c0019091:	83 f8 04             	cmp    eax,0x4
c0019094:	0f 84 e9 fe ff ff    	je     c0018f83 <CPU::detectFeatures()+0x7b5>
c001909a:	83 f8 03             	cmp    eax,0x3
c001909d:	0f 85 0e 01 00 00    	jne    c00191b1 <CPU::detectFeatures()+0x9e3>
c00190a3:	52                   	push   edx
c00190a4:	52                   	push   edx
c00190a5:	68 43 b1 02 c0       	push   0xc002b143
c00190aa:	eb 77                	jmp    c0019123 <CPU::detectFeatures()+0x955>
c00190ac:	83 f8 07             	cmp    eax,0x7
c00190af:	75 09                	jne    c00190ba <CPU::detectFeatures()+0x8ec>
c00190b1:	50                   	push   eax
c00190b2:	50                   	push   eax
c00190b3:	68 4d b1 02 c0       	push   0xc002b14d
c00190b8:	eb 69                	jmp    c0019123 <CPU::detectFeatures()+0x955>
c00190ba:	83 f8 0a             	cmp    eax,0xa
c00190bd:	75 09                	jne    c00190c8 <CPU::detectFeatures()+0x8fa>
c00190bf:	50                   	push   eax
c00190c0:	50                   	push   eax
c00190c1:	68 58 b1 02 c0       	push   0xc002b158
c00190c6:	eb 5b                	jmp    c0019123 <CPU::detectFeatures()+0x955>
c00190c8:	83 f8 0b             	cmp    eax,0xb
c00190cb:	75 09                	jne    c00190d6 <CPU::detectFeatures()+0x908>
c00190cd:	50                   	push   eax
c00190ce:	50                   	push   eax
c00190cf:	68 60 b1 02 c0       	push   0xc002b160
c00190d4:	eb 4d                	jmp    c0019123 <CPU::detectFeatures()+0x955>
c00190d6:	83 f8 08             	cmp    eax,0x8
c00190d9:	75 09                	jne    c00190e4 <CPU::detectFeatures()+0x916>
c00190db:	50                   	push   eax
c00190dc:	50                   	push   eax
c00190dd:	68 69 b1 02 c0       	push   0xc002b169
c00190e2:	eb 3f                	jmp    c0019123 <CPU::detectFeatures()+0x955>
c00190e4:	83 f8 09             	cmp    eax,0x9
c00190e7:	75 09                	jne    c00190f2 <CPU::detectFeatures()+0x924>
c00190e9:	50                   	push   eax
c00190ea:	50                   	push   eax
c00190eb:	68 71 b1 02 c0       	push   0xc002b171
c00190f0:	eb 31                	jmp    c0019123 <CPU::detectFeatures()+0x955>
c00190f2:	83 f8 05             	cmp    eax,0x5
c00190f5:	75 09                	jne    c0019100 <CPU::detectFeatures()+0x932>
c00190f7:	50                   	push   eax
c00190f8:	50                   	push   eax
c00190f9:	68 79 b1 02 c0       	push   0xc002b179
c00190fe:	eb 23                	jmp    c0019123 <CPU::detectFeatures()+0x955>
c0019100:	83 f8 0c             	cmp    eax,0xc
c0019103:	75 09                	jne    c001910e <CPU::detectFeatures()+0x940>
c0019105:	55                   	push   ebp
c0019106:	55                   	push   ebp
c0019107:	68 87 b1 02 c0       	push   0xc002b187
c001910c:	eb 15                	jmp    c0019123 <CPU::detectFeatures()+0x955>
c001910e:	83 f8 0d             	cmp    eax,0xd
c0019111:	75 09                	jne    c001911c <CPU::detectFeatures()+0x94e>
c0019113:	57                   	push   edi
c0019114:	57                   	push   edi
c0019115:	68 92 b1 02 c0       	push   0xc002b192
c001911a:	eb 07                	jmp    c0019123 <CPU::detectFeatures()+0x955>
c001911c:	56                   	push   esi
c001911d:	56                   	push   esi
c001911e:	68 a6 b1 02 c0       	push   0xc002b1a6
c0019123:	53                   	push   ebx
c0019124:	e8 3b aa ff ff       	call   c0013b64 <Device::setName(char const*)>
c0019129:	83 c4 10             	add    esp,0x10
c001912c:	e9 80 00 00 00       	jmp    c00191b1 <CPU::detectFeatures()+0x9e3>
c0019131:	51                   	push   ecx
c0019132:	51                   	push   ecx
c0019133:	68 f2 af 02 c0       	push   0xc002aff2
c0019138:	55                   	push   ebp
c0019139:	e8 ce 76 fe ff       	call   c000080c <strcpy>
c001913e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019148:	e8 61 71 fe ff       	call   c00002ae <is486>
c001914d:	83 c4 10             	add    esp,0x10
c0019150:	85 c0                	test   eax,eax
c0019152:	74 2b                	je     c001917f <CPU::detectFeatures()+0x9b1>
c0019154:	52                   	push   edx
c0019155:	52                   	push   edx
c0019156:	68 b2 b1 02 c0       	push   0xc002b1b2
c001915b:	53                   	push   ebx
c001915c:	e8 03 aa ff ff       	call   c0013b64 <Device::setName(char const*)>
c0019161:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019168:	0f 20 c0             	mov    eax,cr0
c001916b:	83 e0 14             	and    eax,0x14
c001916e:	83 c4 10             	add    esp,0x10
c0019171:	83 f8 04             	cmp    eax,0x4
c0019174:	75 1f                	jne    c0019195 <CPU::detectFeatures()+0x9c7>
c0019176:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001917d:	eb 32                	jmp    c00191b1 <CPU::detectFeatures()+0x9e3>
c001917f:	50                   	push   eax
c0019180:	50                   	push   eax
c0019181:	68 bd b1 02 c0       	push   0xc002b1bd
c0019186:	53                   	push   ebx
c0019187:	e8 d8 a9 ff ff       	call   c0013b64 <Device::setName(char const*)>
c001918c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019193:	eb d3                	jmp    c0019168 <CPU::detectFeatures()+0x99a>
c0019195:	e8 ef 70 fe ff       	call   c0000289 <hasLegacyFPU>
c001919a:	83 e0 01             	and    eax,0x1
c001919d:	8d 14 00             	lea    edx,[eax+eax*1]
c00191a0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00191a6:	83 e0 fd             	and    eax,0xfffffffd
c00191a9:	09 d0                	or     eax,edx
c00191ab:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00191b1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00191b8:	83 c4 4c             	add    esp,0x4c
c00191bb:	5b                   	pop    ebx
c00191bc:	5e                   	pop    esi
c00191bd:	5f                   	pop    edi
c00191be:	5d                   	pop    ebp
c00191bf:	c3                   	ret    

c00191c0 <CPU::setupSMEP()>:
c00191c0:	0f 20 e0             	mov    eax,cr4
c00191c3:	0d 00 00 10 00       	or     eax,0x100000
c00191c8:	0f 22 e0             	mov    cr4,eax
c00191cb:	c3                   	ret    

c00191cc <CPU::setupUMIP()>:
c00191cc:	0f 20 e0             	mov    eax,cr4
c00191cf:	80 cc 08             	or     ah,0x8
c00191d2:	0f 22 e0             	mov    cr4,eax
c00191d5:	c3                   	ret    

c00191d6 <CPU::setupTSC()>:
c00191d6:	0f 20 e0             	mov    eax,cr4
c00191d9:	83 c8 04             	or     eax,0x4
c00191dc:	0f 22 e0             	mov    cr4,eax
c00191df:	c3                   	ret    

c00191e0 <CPU::setupLargePages()>:
c00191e0:	0f 20 e0             	mov    eax,cr4
c00191e3:	83 c8 10             	or     eax,0x10
c00191e6:	0f 22 e0             	mov    cr4,eax
c00191e9:	c3                   	ret    

c00191ea <CPU::setupPAT()>:
c00191ea:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c00191ef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00191f6:	74 2c                	je     c0019224 <CPU::setupPAT()+0x3a>
c00191f8:	53                   	push   ebx
c00191f9:	83 ec 10             	sub    esp,0x10
c00191fc:	68 77 02 00 00       	push   0x277
c0019201:	50                   	push   eax
c0019202:	e8 39 59 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019207:	83 e2 f8             	and    edx,0xfffffff8
c001920a:	83 ca 01             	or     edx,0x1
c001920d:	52                   	push   edx
c001920e:	50                   	push   eax
c001920f:	68 77 02 00 00       	push   0x277
c0019214:	ff 35 e8 d5 02 c0    	push   DWORD PTR ds:0xc002d5e8
c001921a:	e8 4d 59 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c001921f:	83 c4 28             	add    esp,0x28
c0019222:	5b                   	pop    ebx
c0019223:	c3                   	ret    
c0019224:	c3                   	ret    
c0019225:	90                   	nop

c0019226 <CPU::setupMTRR()>:
c0019226:	c3                   	ret    
c0019227:	90                   	nop

c0019228 <CPU::setupGlobalPages()>:
c0019228:	0f 20 e0             	mov    eax,cr4
c001922b:	0c 80                	or     al,0x80
c001922d:	0f 22 e0             	mov    cr4,eax
c0019230:	c3                   	ret    
c0019231:	90                   	nop

c0019232 <CPU::allowUsermodeDataAccess()>:
c0019232:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019236:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001923d:	74 03                	je     c0019242 <CPU::allowUsermodeDataAccess()+0x10>
c001923f:	0f 01 cb             	stac   
c0019242:	c3                   	ret    
c0019243:	90                   	nop

c0019244 <CPU::prohibitUsermodeDataAccess()>:
c0019244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019248:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001924f:	74 03                	je     c0019254 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019251:	0f 01 ca             	clac   
c0019254:	c3                   	ret    
c0019255:	90                   	nop

c0019256 <CPU::setupSMAP()>:
c0019256:	0f 20 e0             	mov    eax,cr4
c0019259:	0d 00 00 20 00       	or     eax,0x200000
c001925e:	0f 22 e0             	mov    cr4,eax
c0019261:	eb e1                	jmp    c0019244 <CPU::prohibitUsermodeDataAccess()>
c0019263:	90                   	nop

c0019264 <CPU::setupFeatures()>:
c0019264:	83 ec 0c             	sub    esp,0xc
c0019267:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001926b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019272:	74 07                	je     c001927b <CPU::setupFeatures()+0x17>
c0019274:	52                   	push   edx
c0019275:	e8 46 ff ff ff       	call   c00191c0 <CPU::setupSMEP()>
c001927a:	58                   	pop    eax
c001927b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019282:	74 07                	je     c001928b <CPU::setupFeatures()+0x27>
c0019284:	52                   	push   edx
c0019285:	e8 cc ff ff ff       	call   c0019256 <CPU::setupSMAP()>
c001928a:	58                   	pop    eax
c001928b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019292:	74 07                	je     c001929b <CPU::setupFeatures()+0x37>
c0019294:	52                   	push   edx
c0019295:	e8 32 ff ff ff       	call   c00191cc <CPU::setupUMIP()>
c001929a:	58                   	pop    eax
c001929b:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00192a2:	74 07                	je     c00192ab <CPU::setupFeatures()+0x47>
c00192a4:	52                   	push   edx
c00192a5:	e8 2c ff ff ff       	call   c00191d6 <CPU::setupTSC()>
c00192aa:	58                   	pop    eax
c00192ab:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00192b2:	74 07                	je     c00192bb <CPU::setupFeatures()+0x57>
c00192b4:	52                   	push   edx
c00192b5:	e8 26 ff ff ff       	call   c00191e0 <CPU::setupLargePages()>
c00192ba:	59                   	pop    ecx
c00192bb:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00192c2:	74 07                	je     c00192cb <CPU::setupFeatures()+0x67>
c00192c4:	52                   	push   edx
c00192c5:	e8 5e ff ff ff       	call   c0019228 <CPU::setupGlobalPages()>
c00192ca:	58                   	pop    eax
c00192cb:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00192d2:	74 0c                	je     c00192e0 <CPU::setupFeatures()+0x7c>
c00192d4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00192d8:	83 c4 0c             	add    esp,0xc
c00192db:	e9 0a ff ff ff       	jmp    c00191ea <CPU::setupPAT()>
c00192e0:	83 c4 0c             	add    esp,0xc
c00192e3:	c3                   	ret    

c00192e4 <CPU::open(int, int, void*)>:
c00192e4:	57                   	push   edi
c00192e5:	56                   	push   esi
c00192e6:	53                   	push   ebx
c00192e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00192eb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00192ef:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00192f5:	83 ec 0c             	sub    esp,0xc
c00192f8:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00192fe:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019304:	50                   	push   eax
c0019305:	e8 24 5b ff ff       	call   c000ee2e <GDT::setup()>
c001930a:	83 c4 0c             	add    esp,0xc
c001930d:	6a 00                	push   0x0
c001930f:	68 ef be ad de       	push   0xdeadbeef
c0019314:	57                   	push   edi
c0019315:	e8 0a 78 ff ff       	call   c0010b24 <TSS::setup(unsigned long, unsigned long)>
c001931a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001931d:	e8 e2 77 ff ff       	call   c0010b04 <TSS::flush()>
c0019322:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019328:	89 04 24             	mov    DWORD PTR [esp],eax
c001932b:	e8 62 5d ff ff       	call   c000f092 <IDT::setup()>
c0019330:	b8 00 04 00 00       	mov    eax,0x400
c0019335:	0f 23 f8             	mov    db7,eax
c0019338:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019342:	e8 f6 65 ff ff       	call   c000f93d <Phys::allocatePage()>
c0019347:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001934d:	89 30                	mov    DWORD PTR [eax],esi
c001934f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019355:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019358:	58                   	pop    eax
c0019359:	5a                   	pop    edx
c001935a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019360:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019364:	e8 cb 88 ff ff       	call   c0011c34 <VAS::setCPUSpecific(unsigned long)>
c0019369:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001936c:	e8 5d f4 ff ff       	call   c00187ce <CPU::detectFeatures()>
c0019371:	e8 35 bc ff ff       	call   c0014fab <setupInterruptController()>
c0019376:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001937c:	a1 00 d6 02 c0       	mov    eax,ds:0xc002d600
c0019381:	83 e0 10             	and    eax,0x10
c0019384:	83 f8 01             	cmp    eax,0x1
c0019387:	19 c0                	sbb    eax,eax
c0019389:	83 e0 46             	and    eax,0x46
c001938c:	83 c0 1e             	add    eax,0x1e
c001938f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019392:	e8 02 d2 ff ff       	call   c0016599 <setupTimer(int)>
c0019397:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001939d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00193a0:	e8 bf fe ff ff       	call   c0019264 <CPU::setupFeatures()>
c00193a5:	83 c4 10             	add    esp,0x10
c00193a8:	31 c0                	xor    eax,eax
c00193aa:	5b                   	pop    ebx
c00193ab:	5e                   	pop    esi
c00193ac:	5f                   	pop    edi
c00193ad:	c3                   	ret    

c00193ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00193ae:	57                   	push   edi
c00193af:	56                   	push   esi
c00193b0:	53                   	push   ebx
c00193b1:	51                   	push   ecx
c00193b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00193b6:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00193b9:	0f 02 c0             	lar    eax,ax
c00193bc:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00193bf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00193c3:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00193c6:	88 ca                	mov    dl,cl
c00193c8:	c0 ea 06             	shr    dl,0x6
c00193cb:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00193cf:	89 ca                	mov    edx,ecx
c00193d1:	66 c1 ea 03          	shr    dx,0x3
c00193d5:	83 e2 07             	and    edx,0x7
c00193d8:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00193dd:	88 17                	mov    BYTE PTR [edi],dl
c00193df:	0f 84 a6 01 00 00    	je     c001958b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00193e5:	83 e1 07             	and    ecx,0x7
c00193e8:	80 f9 04             	cmp    cl,0x4
c00193eb:	0f 84 98 00 00 00    	je     c0019489 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00193f1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00193f6:	0f 95 c0             	setne  al
c00193f9:	80 f9 05             	cmp    cl,0x5
c00193fc:	0f 95 c2             	setne  dl
c00193ff:	08 c2                	or     dl,al
c0019401:	74 79                	je     c001947c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019403:	84 c9                	test   cl,cl
c0019405:	75 05                	jne    c001940c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019407:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001940a:	eb 3c                	jmp    c0019448 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001940c:	80 f9 01             	cmp    cl,0x1
c001940f:	75 05                	jne    c0019416 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019411:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019414:	eb 32                	jmp    c0019448 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019416:	80 f9 02             	cmp    cl,0x2
c0019419:	75 05                	jne    c0019420 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001941b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001941e:	eb 28                	jmp    c0019448 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019420:	31 c0                	xor    eax,eax
c0019422:	80 f9 03             	cmp    cl,0x3
c0019425:	75 05                	jne    c001942c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019427:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001942a:	eb 1c                	jmp    c0019448 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001942c:	80 f9 05             	cmp    cl,0x5
c001942f:	75 05                	jne    c0019436 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019431:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019434:	eb 12                	jmp    c0019448 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019436:	80 f9 06             	cmp    cl,0x6
c0019439:	75 05                	jne    c0019440 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001943b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001943e:	eb 08                	jmp    c0019448 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019440:	80 f9 07             	cmp    cl,0x7
c0019443:	75 03                	jne    c0019448 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019445:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019448:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001944d:	75 10                	jne    c001945f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001944f:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019453:	b9 03 00 00 00       	mov    ecx,0x3
c0019458:	01 d0                	add    eax,edx
c001945a:	e9 37 01 00 00       	jmp    c0019596 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001945f:	b9 02 00 00 00       	mov    ecx,0x2
c0019464:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019469:	0f 85 27 01 00 00    	jne    c0019596 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001946f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019472:	b9 06 00 00 00       	mov    ecx,0x6
c0019477:	e9 1a 01 00 00       	jmp    c0019596 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001947c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001947f:	b9 06 00 00 00       	mov    ecx,0x6
c0019484:	e9 0f 01 00 00       	jmp    c0019598 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019489:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001948c:	88 ca                	mov    dl,cl
c001948e:	c0 ea 06             	shr    dl,0x6
c0019491:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019495:	89 ca                	mov    edx,ecx
c0019497:	66 c1 ea 03          	shr    dx,0x3
c001949b:	83 e2 07             	and    edx,0x7
c001949e:	80 e1 07             	and    cl,0x7
c00194a1:	75 05                	jne    c00194a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00194a3:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00194a6:	eb 4c                	jmp    c00194f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194a8:	80 f9 01             	cmp    cl,0x1
c00194ab:	75 05                	jne    c00194b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00194ad:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00194b0:	eb 42                	jmp    c00194f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194b2:	80 f9 02             	cmp    cl,0x2
c00194b5:	75 05                	jne    c00194bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00194b7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00194ba:	eb 38                	jmp    c00194f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194bc:	80 f9 03             	cmp    cl,0x3
c00194bf:	75 05                	jne    c00194c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00194c1:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00194c4:	eb 2e                	jmp    c00194f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194c6:	80 f9 04             	cmp    cl,0x4
c00194c9:	75 12                	jne    c00194dd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00194cb:	f6 c4 60             	test   ah,0x60
c00194ce:	75 08                	jne    c00194d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00194d0:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00194d3:	8d 78 14             	lea    edi,[eax+0x14]
c00194d6:	eb 1c                	jmp    c00194f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194d8:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00194db:	eb 17                	jmp    c00194f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194dd:	80 f9 05             	cmp    cl,0x5
c00194e0:	75 05                	jne    c00194e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00194e2:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00194e5:	eb 0d                	jmp    c00194f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194e7:	80 f9 06             	cmp    cl,0x6
c00194ea:	75 05                	jne    c00194f1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00194ec:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00194ef:	eb 03                	jmp    c00194f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00194f1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00194f4:	84 d2                	test   dl,dl
c00194f6:	75 05                	jne    c00194fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00194f8:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00194fb:	eb 3c                	jmp    c0019539 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00194fd:	80 fa 01             	cmp    dl,0x1
c0019500:	75 05                	jne    c0019507 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019502:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019505:	eb 32                	jmp    c0019539 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019507:	80 fa 02             	cmp    dl,0x2
c001950a:	75 05                	jne    c0019511 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001950c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001950f:	eb 28                	jmp    c0019539 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019511:	80 fa 03             	cmp    dl,0x3
c0019514:	75 05                	jne    c001951b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019516:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019519:	eb 1e                	jmp    c0019539 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001951b:	31 c0                	xor    eax,eax
c001951d:	80 fa 04             	cmp    dl,0x4
c0019520:	74 17                	je     c0019539 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019522:	80 fa 05             	cmp    dl,0x5
c0019525:	75 05                	jne    c001952c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019527:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001952a:	eb 0d                	jmp    c0019539 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001952c:	80 fa 06             	cmp    dl,0x6
c001952f:	75 05                	jne    c0019536 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019531:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019534:	eb 03                	jmp    c0019539 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019536:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019539:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001953e:	0f 94 c2             	sete   dl
c0019541:	80 f9 05             	cmp    cl,0x5
c0019544:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019548:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001954d:	d3 e0                	shl    eax,cl
c001954f:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019553:	74 0a                	je     c001955f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019555:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019558:	b9 07 00 00 00       	mov    ecx,0x7
c001955d:	eb 37                	jmp    c0019596 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001955f:	01 f8                	add    eax,edi
c0019561:	b9 03 00 00 00       	mov    ecx,0x3
c0019566:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001956b:	74 2b                	je     c0019598 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001956d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019572:	75 0d                	jne    c0019581 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019574:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019578:	01 c8                	add    eax,ecx
c001957a:	b9 04 00 00 00       	mov    ecx,0x4
c001957f:	eb 17                	jmp    c0019598 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019581:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019584:	b9 07 00 00 00       	mov    ecx,0x7
c0019589:	eb 0d                	jmp    c0019598 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001958b:	b9 02 00 00 00       	mov    ecx,0x2
c0019590:	b2 01                	mov    dl,0x1
c0019592:	31 c0                	xor    eax,eax
c0019594:	eb 02                	jmp    c0019598 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019596:	31 d2                	xor    edx,edx
c0019598:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001959c:	89 0b                	mov    DWORD PTR [ebx],ecx
c001959e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00195a2:	88 11                	mov    BYTE PTR [ecx],dl
c00195a4:	5a                   	pop    edx
c00195a5:	5b                   	pop    ebx
c00195a6:	5e                   	pop    esi
c00195a7:	5f                   	pop    edi
c00195a8:	c3                   	ret    

c00195a9 <Krnl::smpEntry()>:
c00195a9:	eb fe                	jmp    c00195a9 <Krnl::smpEntry()>

c00195ab <Krnl::startCPU(int)>:
c00195ab:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c00195b0:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00195b7:	0f 84 36 01 00 00    	je     c00196f3 <Krnl::startCPU(int)+0x148>
c00195bd:	53                   	push   ebx
c00195be:	83 ec 10             	sub    esp,0x10
c00195c1:	fa                   	cli    
c00195c2:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c00195c8:	6a 1b                	push   0x1b
c00195ca:	ff 35 e8 d5 02 c0    	push   DWORD PTR ds:0xc002d5e8
c00195d0:	e8 6b 55 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00195d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00195da:	89 c3                	mov    ebx,eax
c00195dc:	58                   	pop    eax
c00195dd:	5a                   	pop    edx
c00195de:	53                   	push   ebx
c00195df:	68 f4 b1 02 c0       	push   0xc002b1f4
c00195e4:	e8 4c 8f ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c00195e9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00195f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195f7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019601:	c1 e0 18             	shl    eax,0x18
c0019604:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001960a:	83 c4 10             	add    esp,0x10
c001960d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019613:	09 c2                	or     edx,eax
c0019615:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001961b:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019621:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019627:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001962d:	80 cd c5             	or     ch,0xc5
c0019630:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019636:	f3 90                	pause  
c0019638:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001963a:	0f ba e1 0c          	bt     ecx,0xc
c001963e:	72 f6                	jb     c0019636 <Krnl::startCPU(int)+0x8b>
c0019640:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019646:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001964c:	09 c1                	or     ecx,eax
c001964e:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019654:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001965a:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019660:	80 cd 85             	or     ch,0x85
c0019663:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019669:	f3 90                	pause  
c001966b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001966d:	0f ba e1 0c          	bt     ecx,0xc
c0019671:	72 f6                	jb     c0019669 <Krnl::startCPU(int)+0xbe>
c0019673:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001967d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019683:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019689:	09 c1                	or     ecx,eax
c001968b:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019691:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019697:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001969d:	81 c9 02 06 00 00    	or     ecx,0x602
c00196a3:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00196a9:	f3 90                	pause  
c00196ab:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00196ad:	0f ba e1 0c          	bt     ecx,0xc
c00196b1:	72 f6                	jb     c00196a9 <Krnl::startCPU(int)+0xfe>
c00196b3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00196bd:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00196c3:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00196c9:	09 c8                	or     eax,ecx
c00196cb:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c00196d1:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00196d7:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c00196dc:	0d 02 06 00 00       	or     eax,0x602
c00196e1:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00196e7:	f3 90                	pause  
c00196e9:	8b 02                	mov    eax,DWORD PTR [edx]
c00196eb:	0f ba e0 0c          	bt     eax,0xc
c00196ef:	72 f6                	jb     c00196e7 <Krnl::startCPU(int)+0x13c>
c00196f1:	eb fe                	jmp    c00196f1 <Krnl::startCPU(int)+0x146>
c00196f3:	c3                   	ret    

c00196f4 <Krnl::startCPUs()>:
c00196f4:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c00196f9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00196ff:	88 c2                	mov    dl,al
c0019701:	83 e2 0a             	and    edx,0xa
c0019704:	80 fa 0a             	cmp    dl,0xa
c0019707:	75 09                	jne    c0019712 <Krnl::startCPUs()+0x1e>
c0019709:	a8 01                	test   al,0x1
c001970b:	74 05                	je     c0019712 <Krnl::startCPUs()+0x1e>
c001970d:	e9 89 6a fe ff       	jmp    c000019b <prepareTramp>
c0019712:	c3                   	ret    
c0019713:	90                   	nop

c0019714 <EnvVarContainer::getEnv(char const*)>:
c0019714:	57                   	push   edi
c0019715:	56                   	push   esi
c0019716:	53                   	push   ebx
c0019717:	31 db                	xor    ebx,ebx
c0019719:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001971d:	39 1e                	cmp    DWORD PTR [esi],ebx
c001971f:	7e 2b                	jle    c001974c <EnvVarContainer::getEnv(char const*)+0x38>
c0019721:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019728:	50                   	push   eax
c0019729:	50                   	push   eax
c001972a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001972d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019730:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019734:	e8 5f 71 fe ff       	call   c0000898 <strcmp>
c0019739:	83 c4 10             	add    esp,0x10
c001973c:	85 c0                	test   eax,eax
c001973e:	75 09                	jne    c0019749 <EnvVarContainer::getEnv(char const*)+0x35>
c0019740:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019743:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019747:	eb 05                	jmp    c001974e <EnvVarContainer::getEnv(char const*)+0x3a>
c0019749:	43                   	inc    ebx
c001974a:	eb d1                	jmp    c001971d <EnvVarContainer::getEnv(char const*)+0x9>
c001974c:	31 c0                	xor    eax,eax
c001974e:	5b                   	pop    ebx
c001974f:	5e                   	pop    esi
c0019750:	5f                   	pop    edi
c0019751:	c3                   	ret    

c0019752 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019752:	55                   	push   ebp
c0019753:	57                   	push   edi
c0019754:	56                   	push   esi
c0019755:	53                   	push   ebx
c0019756:	83 ec 28             	sub    esp,0x28
c0019759:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001975d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019761:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019765:	56                   	push   esi
c0019766:	e8 01 70 fe ff       	call   c000076c <strlen>
c001976b:	40                   	inc    eax
c001976c:	89 04 24             	mov    DWORD PTR [esp],eax
c001976f:	e8 25 5e ff ff       	call   c000f599 <malloc>
c0019774:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019777:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001977b:	e8 ec 6f fe ff       	call   c000076c <strlen>
c0019780:	40                   	inc    eax
c0019781:	89 04 24             	mov    DWORD PTR [esp],eax
c0019784:	e8 10 5e ff ff       	call   c000f599 <malloc>
c0019789:	89 34 24             	mov    DWORD PTR [esp],esi
c001978c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019790:	e8 d7 6f fe ff       	call   c000076c <strlen>
c0019795:	83 c4 0c             	add    esp,0xc
c0019798:	40                   	inc    eax
c0019799:	50                   	push   eax
c001979a:	6a 00                	push   0x0
c001979c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00197a0:	e8 ab 6f fe ff       	call   c0000750 <memset>
c00197a5:	89 34 24             	mov    DWORD PTR [esp],esi
c00197a8:	e8 bf 6f fe ff       	call   c000076c <strlen>
c00197ad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00197b1:	8d 48 01             	lea    ecx,[eax+0x1]
c00197b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00197b9:	89 de                	mov    esi,ebx
c00197bb:	e8 ac 6f fe ff       	call   c000076c <strlen>
c00197c0:	83 c4 0c             	add    esp,0xc
c00197c3:	40                   	inc    eax
c00197c4:	50                   	push   eax
c00197c5:	6a 00                	push   0x0
c00197c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00197cb:	e8 80 6f fe ff       	call   c0000750 <memset>
c00197d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00197d3:	e8 94 6f fe ff       	call   c000076c <strlen>
c00197d8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00197dc:	8d 48 01             	lea    ecx,[eax+0x1]
c00197df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197e1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00197e4:	40                   	inc    eax
c00197e5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00197e8:	c1 e0 03             	shl    eax,0x3
c00197eb:	5a                   	pop    edx
c00197ec:	59                   	pop    ecx
c00197ed:	50                   	push   eax
c00197ee:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00197f1:	e8 8f 5d ff ff       	call   c000f585 <realloc>
c00197f6:	8d 74 24 18          	lea    esi,[esp+0x18]
c00197fa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00197fd:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019800:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019804:	b9 08 00 00 00       	mov    ecx,0x8
c0019809:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001980b:	83 c4 2c             	add    esp,0x2c
c001980e:	5b                   	pop    ebx
c001980f:	5e                   	pop    esi
c0019810:	5f                   	pop    edi
c0019811:	5d                   	pop    ebp
c0019812:	c3                   	ret    
c0019813:	90                   	nop

c0019814 <EnvVarContainer::deleteEnv(char const*)>:
c0019814:	c3                   	ret    
c0019815:	90                   	nop

c0019816 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019816:	55                   	push   ebp
c0019817:	57                   	push   edi
c0019818:	56                   	push   esi
c0019819:	53                   	push   ebx
c001981a:	81 ec 38 01 00 00    	sub    esp,0x138
c0019820:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0019827:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001982e:	68 14 01 00 00       	push   0x114
c0019833:	e8 61 5d ff ff       	call   c000f599 <malloc>
c0019838:	83 c4 0c             	add    esp,0xc
c001983b:	89 c3                	mov    ebx,eax
c001983d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0019840:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019847:	50                   	push   eax
c0019848:	e8 47 92 ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c001984d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019850:	e8 11 95 ff ff       	call   c0012d66 <File::exists()>
c0019855:	83 c4 10             	add    esp,0x10
c0019858:	84 c0                	test   al,al
c001985a:	75 31                	jne    c001988d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001985c:	50                   	push   eax
c001985d:	50                   	push   eax
c001985e:	6a 12                	push   0x12
c0019860:	53                   	push   ebx
c0019861:	e8 92 92 ff ff       	call   c0012af8 <File::open(FileOpenMode)>
c0019866:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019868:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001986b:	89 34 24             	mov    DWORD PTR [esp],esi
c001986e:	e8 f9 6e fe ff       	call   c000076c <strlen>
c0019873:	5a                   	pop    edx
c0019874:	31 d2                	xor    edx,edx
c0019876:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001987a:	51                   	push   ecx
c001987b:	56                   	push   esi
c001987c:	52                   	push   edx
c001987d:	50                   	push   eax
c001987e:	53                   	push   ebx
c001987f:	ff d7                	call   edi
c0019881:	83 c4 14             	add    esp,0x14
c0019884:	53                   	push   ebx
c0019885:	e8 cc 92 ff ff       	call   c0012b56 <File::close()>
c001988a:	83 c4 10             	add    esp,0x10
c001988d:	56                   	push   esi
c001988e:	31 f6                	xor    esi,esi
c0019890:	68 00 01 00 00       	push   0x100
c0019895:	6a 00                	push   0x0
c0019897:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001989b:	50                   	push   eax
c001989c:	e8 af 6e fe ff       	call   c0000750 <memset>
c00198a1:	5f                   	pop    edi
c00198a2:	58                   	pop    eax
c00198a3:	6a 01                	push   0x1
c00198a5:	53                   	push   ebx
c00198a6:	e8 4d 92 ff ff       	call   c0012af8 <File::open(FileOpenMode)>
c00198ab:	83 c4 10             	add    esp,0x10
c00198ae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00198b6:	83 ec 0c             	sub    esp,0xc
c00198b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00198bb:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00198bf:	51                   	push   ecx
c00198c0:	8d 54 24 23          	lea    edx,[esp+0x23]
c00198c4:	52                   	push   edx
c00198c5:	6a 00                	push   0x0
c00198c7:	6a 01                	push   0x1
c00198c9:	53                   	push   ebx
c00198ca:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00198cd:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00198d1:	83 c4 20             	add    esp,0x20
c00198d4:	3c 0d                	cmp    al,0xd
c00198d6:	0f 84 09 01 00 00    	je     c00199e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00198dc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00198e1:	0f 84 ef 00 00 00    	je     c00199d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00198e7:	3c 0a                	cmp    al,0xa
c00198e9:	74 13                	je     c00198fe <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00198eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00198f0:	74 0c                	je     c00198fe <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00198f2:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00198f8:	0f 8e d8 00 00 00    	jle    c00199d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00198fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019902:	83 ec 0c             	sub    esp,0xc
c0019905:	8d 78 01             	lea    edi,[eax+0x1]
c0019908:	57                   	push   edi
c0019909:	e8 8b 5c ff ff       	call   c000f599 <malloc>
c001990e:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019912:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019916:	8d 56 04             	lea    edx,[esi+0x4]
c0019919:	89 14 24             	mov    DWORD PTR [esp],edx
c001991c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019920:	e8 74 5c ff ff       	call   c000f599 <malloc>
c0019925:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019929:	83 c4 0c             	add    esp,0xc
c001992c:	57                   	push   edi
c001992d:	6a 00                	push   0x0
c001992f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019933:	e8 18 6e fe ff       	call   c0000750 <memset>
c0019938:	8d 74 24 30          	lea    esi,[esp+0x30]
c001993c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019940:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019944:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019946:	83 c4 0c             	add    esp,0xc
c0019949:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001994d:	52                   	push   edx
c001994e:	6a 00                	push   0x0
c0019950:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019954:	e8 f7 6d fe ff       	call   c0000750 <memset>
c0019959:	8d 74 24 30          	lea    esi,[esp+0x30]
c001995d:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019961:	89 34 24             	mov    DWORD PTR [esp],esi
c0019964:	e8 03 6e fe ff       	call   c000076c <strlen>
c0019969:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001996d:	89 c1                	mov    ecx,eax
c001996f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019971:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019974:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019977:	40                   	inc    eax
c0019978:	83 c4 10             	add    esp,0x10
c001997b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001997e:	85 d2                	test   edx,edx
c0019980:	75 0c                	jne    c001998e <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019982:	83 ec 0c             	sub    esp,0xc
c0019985:	6a 08                	push   0x8
c0019987:	e8 0d 5c ff ff       	call   c000f599 <malloc>
c001998c:	eb 0c                	jmp    c001999a <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001998e:	c1 e0 03             	shl    eax,0x3
c0019991:	51                   	push   ecx
c0019992:	51                   	push   ecx
c0019993:	50                   	push   eax
c0019994:	52                   	push   edx
c0019995:	e8 eb 5b ff ff       	call   c000f585 <realloc>
c001999a:	83 c4 10             	add    esp,0x10
c001999d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00199a0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00199a3:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00199a6:	8d 74 24 18          	lea    esi,[esp+0x18]
c00199aa:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00199ae:	b9 08 00 00 00       	mov    ecx,0x8
c00199b3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00199b5:	31 f6                	xor    esi,esi
c00199b7:	50                   	push   eax
c00199b8:	68 00 01 00 00       	push   0x100
c00199bd:	6a 00                	push   0x0
c00199bf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00199c3:	50                   	push   eax
c00199c4:	e8 87 6d fe ff       	call   c0000750 <memset>
c00199c9:	83 c4 10             	add    esp,0x10
c00199cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00199d4:	eb 0f                	jmp    c00199e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00199d6:	3c 3d                	cmp    al,0x3d
c00199d8:	74 07                	je     c00199e1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00199da:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00199de:	46                   	inc    esi
c00199df:	eb 04                	jmp    c00199e5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00199e1:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00199e5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00199ea:	0f 85 c6 fe ff ff    	jne    c00198b6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00199f0:	81 c4 2c 01 00 00    	add    esp,0x12c
c00199f6:	5b                   	pop    ebx
c00199f7:	5e                   	pop    esi
c00199f8:	5f                   	pop    edi
c00199f9:	5d                   	pop    ebp
c00199fa:	c3                   	ret    
c00199fb:	90                   	nop

c00199fc <EnvVarContainer::__loadSystem()>:
c00199fc:	83 ec 10             	sub    esp,0x10
c00199ff:	68 20 cb 02 c0       	push   0xc002cb20
c0019a04:	68 05 b2 02 c0       	push   0xc002b205
c0019a09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a0d:	e8 04 fe ff ff       	call   c0019816 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019a12:	83 c4 1c             	add    esp,0x1c
c0019a15:	c3                   	ret    

c0019a16 <EnvVarContainer::__loadUser()>:
c0019a16:	c3                   	ret    
c0019a17:	90                   	nop

c0019a18 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019a18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019a22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a26:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a2a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019a2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019a38:	90                   	nop
c0019a39:	c3                   	ret    

c0019a3a <EnvVarContainer::~EnvVarContainer()>:
c0019a3a:	83 ec 0c             	sub    esp,0xc
c0019a3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019a44:	85 c0                	test   eax,eax
c0019a46:	74 1d                	je     c0019a65 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a4e:	85 c0                	test   eax,eax
c0019a50:	74 13                	je     c0019a65 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019a59:	83 ec 0c             	sub    esp,0xc
c0019a5c:	50                   	push   eax
c0019a5d:	e8 47 5b ff ff       	call   c000f5a9 <free>
c0019a62:	83 c4 10             	add    esp,0x10
c0019a65:	90                   	nop
c0019a66:	83 c4 0c             	add    esp,0xc
c0019a69:	c3                   	ret    

c0019a6a <Krnl::getEnv(Process*, char const*)>:
c0019a6a:	53                   	push   ebx
c0019a6b:	83 ec 08             	sub    esp,0x8
c0019a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a72:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019a76:	39 05 30 0b 03 c0    	cmp    DWORD PTR ds:0xc0030b30,eax
c0019a7c:	74 04                	je     c0019a82 <Krnl::getEnv(Process*, char const*)+0x18>
c0019a7e:	85 c0                	test   eax,eax
c0019a80:	75 0b                	jne    c0019a8d <Krnl::getEnv(Process*, char const*)+0x23>
c0019a82:	a1 14 01 03 c0       	mov    eax,ds:0xc0030114
c0019a87:	85 c0                	test   eax,eax
c0019a89:	75 19                	jne    c0019aa4 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019a8b:	eb 27                	jmp    c0019ab4 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019a8d:	52                   	push   edx
c0019a8e:	52                   	push   edx
c0019a8f:	53                   	push   ebx
c0019a90:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019a96:	e8 79 fc ff ff       	call   c0019714 <EnvVarContainer::getEnv(char const*)>
c0019a9b:	83 c4 10             	add    esp,0x10
c0019a9e:	85 c0                	test   eax,eax
c0019aa0:	75 28                	jne    c0019aca <Krnl::getEnv(Process*, char const*)+0x60>
c0019aa2:	eb de                	jmp    c0019a82 <Krnl::getEnv(Process*, char const*)+0x18>
c0019aa4:	52                   	push   edx
c0019aa5:	52                   	push   edx
c0019aa6:	53                   	push   ebx
c0019aa7:	50                   	push   eax
c0019aa8:	e8 67 fc ff ff       	call   c0019714 <EnvVarContainer::getEnv(char const*)>
c0019aad:	83 c4 10             	add    esp,0x10
c0019ab0:	85 c0                	test   eax,eax
c0019ab2:	75 16                	jne    c0019aca <Krnl::getEnv(Process*, char const*)+0x60>
c0019ab4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019ab8:	a1 18 01 03 c0       	mov    eax,ds:0xc0030118
c0019abd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019ac1:	83 c4 08             	add    esp,0x8
c0019ac4:	5b                   	pop    ebx
c0019ac5:	e9 4a fc ff ff       	jmp    c0019714 <EnvVarContainer::getEnv(char const*)>
c0019aca:	83 c4 08             	add    esp,0x8
c0019acd:	5b                   	pop    ebx
c0019ace:	c3                   	ret    

c0019acf <Krnl::setEnvSystem(char const*, char const*)>:
c0019acf:	83 ec 10             	sub    esp,0x10
c0019ad2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ad6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ada:	ff 35 18 01 03 c0    	push   DWORD PTR ds:0xc0030118
c0019ae0:	e8 6d fc ff ff       	call   c0019752 <EnvVarContainer::setEnv(char const*, char const*)>
c0019ae5:	83 c4 1c             	add    esp,0x1c
c0019ae8:	c3                   	ret    

c0019ae9 <Krnl::setEnvUser(char const*, char const*)>:
c0019ae9:	a1 14 01 03 c0       	mov    eax,ds:0xc0030114
c0019aee:	85 c0                	test   eax,eax
c0019af0:	74 15                	je     c0019b07 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019af2:	83 ec 10             	sub    esp,0x10
c0019af5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019af9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019afd:	50                   	push   eax
c0019afe:	e8 4f fc ff ff       	call   c0019752 <EnvVarContainer::setEnv(char const*, char const*)>
c0019b03:	83 c4 1c             	add    esp,0x1c
c0019b06:	c3                   	ret    
c0019b07:	c3                   	ret    

c0019b08 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b0c:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019b12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019b16:	e9 37 fc ff ff       	jmp    c0019752 <EnvVarContainer::setEnv(char const*, char const*)>

c0019b1b <Krnl::deleteEnvSystem(char const*)>:
c0019b1b:	c3                   	ret    

c0019b1c <Krnl::deleteEnvUser(char const*)>:
c0019b1c:	c3                   	ret    

c0019b1d <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019b1d:	c3                   	ret    

c0019b1e <Krnl::newProcessEnv(Process*)>:
c0019b1e:	83 ec 28             	sub    esp,0x28
c0019b21:	6a 0c                	push   0xc
c0019b23:	e8 71 5a ff ff       	call   c000f599 <malloc>
c0019b28:	5a                   	pop    edx
c0019b29:	59                   	pop    ecx
c0019b2a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019b2e:	50                   	push   eax
c0019b2f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b33:	e8 e0 fe ff ff       	call   c0019a18 <EnvVarContainer::EnvVarContainer(Process*)>
c0019b38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b3c:	83 c4 2c             	add    esp,0x2c
c0019b3f:	c3                   	ret    

c0019b40 <Krnl::copyProcessEnv(Process*, Process*)>:
c0019b40:	57                   	push   edi
c0019b41:	56                   	push   esi
c0019b42:	53                   	push   ebx
c0019b43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b47:	83 ec 0c             	sub    esp,0xc
c0019b4a:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019b50:	6a 0c                	push   0xc
c0019b52:	e8 42 5a ff ff       	call   c000f599 <malloc>
c0019b57:	89 c3                	mov    ebx,eax
c0019b59:	58                   	pop    eax
c0019b5a:	5a                   	pop    edx
c0019b5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b5f:	53                   	push   ebx
c0019b60:	e8 b3 fe ff ff       	call   c0019a18 <EnvVarContainer::EnvVarContainer(Process*)>
c0019b65:	8b 07                	mov    eax,DWORD PTR [edi]
c0019b67:	89 03                	mov    DWORD PTR [ebx],eax
c0019b69:	c1 e0 03             	shl    eax,0x3
c0019b6c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b6f:	e8 25 5a ff ff       	call   c000f599 <malloc>
c0019b74:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019b77:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019b79:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019b7c:	c1 e1 03             	shl    ecx,0x3
c0019b7f:	89 c7                	mov    edi,eax
c0019b81:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b83:	83 c4 10             	add    esp,0x10
c0019b86:	89 d8                	mov    eax,ebx
c0019b88:	5b                   	pop    ebx
c0019b89:	5e                   	pop    esi
c0019b8a:	5f                   	pop    edi
c0019b8b:	c3                   	ret    

c0019b8c <Krnl::loadSystemEnv()>:
c0019b8c:	53                   	push   ebx
c0019b8d:	83 ec 14             	sub    esp,0x14
c0019b90:	6a 0c                	push   0xc
c0019b92:	e8 02 5a ff ff       	call   c000f599 <malloc>
c0019b97:	89 c3                	mov    ebx,eax
c0019b99:	58                   	pop    eax
c0019b9a:	5a                   	pop    edx
c0019b9b:	ff 35 30 0b 03 c0    	push   DWORD PTR ds:0xc0030b30
c0019ba1:	53                   	push   ebx
c0019ba2:	e8 71 fe ff ff       	call   c0019a18 <EnvVarContainer::EnvVarContainer(Process*)>
c0019ba7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019baa:	89 1d 18 01 03 c0    	mov    DWORD PTR ds:0xc0030118,ebx
c0019bb0:	e8 47 fe ff ff       	call   c00199fc <EnvVarContainer::__loadSystem()>
c0019bb5:	83 c4 18             	add    esp,0x18
c0019bb8:	5b                   	pop    ebx
c0019bb9:	c3                   	ret    

c0019bba <Krnl::loadUserEnv()>:
c0019bba:	53                   	push   ebx
c0019bbb:	83 ec 14             	sub    esp,0x14
c0019bbe:	6a 0c                	push   0xc
c0019bc0:	e8 d4 59 ff ff       	call   c000f599 <malloc>
c0019bc5:	89 c3                	mov    ebx,eax
c0019bc7:	58                   	pop    eax
c0019bc8:	5a                   	pop    edx
c0019bc9:	ff 35 30 0b 03 c0    	push   DWORD PTR ds:0xc0030b30
c0019bcf:	53                   	push   ebx
c0019bd0:	e8 43 fe ff ff       	call   c0019a18 <EnvVarContainer::EnvVarContainer(Process*)>
c0019bd5:	89 1d 14 01 03 c0    	mov    DWORD PTR ds:0xc0030114,ebx
c0019bdb:	83 c4 18             	add    esp,0x18
c0019bde:	5b                   	pop    ebx
c0019bdf:	c3                   	ret    

c0019be0 <Krnl::flushEnv()>:
c0019be0:	c3                   	ret    

c0019be1 <Krnl::getProcessTotalEnvCount(Process*)>:
c0019be1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019be5:	8b 15 14 01 03 c0    	mov    edx,DWORD PTR ds:0xc0030114
c0019beb:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019bf1:	a1 18 01 03 c0       	mov    eax,ds:0xc0030118
c0019bf6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019bf8:	03 01                	add    eax,DWORD PTR [ecx]
c0019bfa:	85 d2                	test   edx,edx
c0019bfc:	74 02                	je     c0019c00 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019bfe:	03 02                	add    eax,DWORD PTR [edx]
c0019c00:	c3                   	ret    

c0019c01 <Krnl::getProcessEnvPair(Process*, int)>:
c0019c01:	57                   	push   edi
c0019c02:	56                   	push   esi
c0019c03:	8b 35 14 01 03 c0    	mov    esi,DWORD PTR ds:0xc0030114
c0019c09:	53                   	push   ebx
c0019c0a:	85 f6                	test   esi,esi
c0019c0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c14:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019c1a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019c1e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019c20:	75 16                	jne    c0019c38 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019c22:	39 c2                	cmp    edx,eax
c0019c24:	7c 16                	jl     c0019c3c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019c26:	8b 0d 18 01 03 c0    	mov    ecx,DWORD PTR ds:0xc0030118
c0019c2c:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019c2e:	01 c6                	add    esi,eax
c0019c30:	39 d6                	cmp    esi,edx
c0019c32:	7e 3c                	jle    c0019c70 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019c34:	29 c2                	sub    edx,eax
c0019c36:	eb 04                	jmp    c0019c3c <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019c38:	39 c2                	cmp    edx,eax
c0019c3a:	7d 05                	jge    c0019c41 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019c3c:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019c3f:	eb 20                	jmp    c0019c61 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019c41:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019c43:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019c46:	39 d1                	cmp    ecx,edx
c0019c48:	7e 04                	jle    c0019c4e <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019c4a:	29 c2                	sub    edx,eax
c0019c4c:	eb 10                	jmp    c0019c5e <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019c4e:	8b 35 18 01 03 c0    	mov    esi,DWORD PTR ds:0xc0030118
c0019c54:	03 0e                	add    ecx,DWORD PTR [esi]
c0019c56:	39 d1                	cmp    ecx,edx
c0019c58:	7e 16                	jle    c0019c70 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019c5a:	29 c2                	sub    edx,eax
c0019c5c:	29 fa                	sub    edx,edi
c0019c5e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019c61:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019c64:	8b 02                	mov    eax,DWORD PTR [edx]
c0019c66:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019c69:	89 03                	mov    DWORD PTR [ebx],eax
c0019c6b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019c6e:	eb 1d                	jmp    c0019c8d <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019c70:	83 ec 0c             	sub    esp,0xc
c0019c73:	68 27 b2 02 c0       	push   0xc002b227
c0019c78:	e8 18 00 00 00       	call   c0019c95 <Krnl::panic(char const*)>
c0019c7d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019c83:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019c8a:	83 c4 10             	add    esp,0x10
c0019c8d:	89 d8                	mov    eax,ebx
c0019c8f:	5b                   	pop    ebx
c0019c90:	5e                   	pop    esi
c0019c91:	5f                   	pop    edi
c0019c92:	c2 04 00             	ret    0x4

c0019c95 <Krnl::panic(char const*)>:
c0019c95:	55                   	push   ebp
c0019c96:	89 e5                	mov    ebp,esp
c0019c98:	53                   	push   ebx
c0019c99:	83 ec 10             	sub    esp,0x10
c0019c9c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019c9f:	fa                   	cli    
c0019ca0:	c6 05 24 01 03 c0 01 	mov    BYTE PTR ds:0xc0030124,0x1
c0019ca7:	53                   	push   ebx
c0019ca8:	e8 46 59 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019cad:	58                   	pop    eax
c0019cae:	c6 05 20 c5 02 c0 00 	mov    BYTE PTR ds:0xc002c520,0x0
c0019cb5:	5a                   	pop    edx
c0019cb6:	53                   	push   ebx
c0019cb7:	68 41 b2 02 c0       	push   0xc002b241
c0019cbc:	e8 74 88 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0019cc1:	59                   	pop    ecx
c0019cc2:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019cc7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ccd:	e8 01 66 ff ff       	call   c00102d3 <setActiveTerminal(VgaText*)>
c0019cd2:	83 c4 0c             	add    esp,0xc
c0019cd5:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019cda:	6a 01                	push   0x1
c0019cdc:	6a 0f                	push   0xf
c0019cde:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ce4:	e8 49 64 ff ff       	call   c0010132 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019ce9:	58                   	pop    eax
c0019cea:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019cef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019cf5:	e8 5a 69 ff ff       	call   c0010654 <VgaText::clearScreen()>
c0019cfa:	58                   	pop    eax
c0019cfb:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019d00:	5a                   	pop    edx
c0019d01:	68 5a b2 02 c0       	push   0xc002b25a
c0019d06:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d0c:	e8 cf 6a ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019d11:	59                   	pop    ecx
c0019d12:	58                   	pop    eax
c0019d13:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019d18:	68 00 b3 02 c0       	push   0xc002b300
c0019d1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d23:	e8 b8 6a ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019d28:	58                   	pop    eax
c0019d29:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019d2e:	5a                   	pop    edx
c0019d2f:	68 76 b2 02 c0       	push   0xc002b276
c0019d34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d3a:	e8 a1 6a ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019d3f:	59                   	pop    ecx
c0019d40:	58                   	pop    eax
c0019d41:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019d46:	53                   	push   ebx
c0019d47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d4d:	e8 8e 6a ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019d52:	58                   	pop    eax
c0019d53:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019d58:	5a                   	pop    edx
c0019d59:	68 96 b2 02 c0       	push   0xc002b296
c0019d5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019d64:	e8 77 6a ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019d69:	a1 20 01 03 c0       	mov    eax,ds:0xc0030120
c0019d6e:	83 c4 10             	add    esp,0x10
c0019d71:	85 c0                	test   eax,eax
c0019d73:	74 02                	je     c0019d77 <Krnl::panic(char const*)+0xe2>
c0019d75:	ff d0                	call   eax
c0019d77:	83 ec 0c             	sub    esp,0xc
c0019d7a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019d7d:	e8 8c 30 00 00       	call   c001ce0e <Thr::getDriverNameFromAddress(unsigned long)>
c0019d82:	83 c4 10             	add    esp,0x10
c0019d85:	89 c3                	mov    ebx,eax
c0019d87:	85 c0                	test   eax,eax
c0019d89:	0f 84 4e 02 00 00    	je     c0019fdd <Krnl::panic(char const*)+0x348>
c0019d8f:	83 ec 08             	sub    esp,0x8
c0019d92:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019d97:	68 3c b3 02 c0       	push   0xc002b33c
c0019d9c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019da2:	e8 39 6a ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019da7:	58                   	pop    eax
c0019da8:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019dad:	5a                   	pop    edx
c0019dae:	68 76 b2 02 c0       	push   0xc002b276
c0019db3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019db9:	e8 22 6a ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019dbe:	59                   	pop    ecx
c0019dbf:	58                   	pop    eax
c0019dc0:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019dc5:	53                   	push   ebx
c0019dc6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dcc:	e8 0f 6a ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019dd1:	83 c4 10             	add    esp,0x10
c0019dd4:	83 ec 08             	sub    esp,0x8
c0019dd7:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019ddc:	68 95 b2 02 c0       	push   0xc002b295
c0019de1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019de7:	e8 f4 69 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019dec:	58                   	pop    eax
c0019ded:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019df2:	5a                   	pop    edx
c0019df3:	68 94 b3 02 c0       	push   0xc002b394
c0019df8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019dfe:	e8 dd 69 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019e03:	59                   	pop    ecx
c0019e04:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019e09:	5b                   	pop    ebx
c0019e0a:	68 d4 b3 02 c0       	push   0xc002b3d4
c0019e0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e15:	e8 c6 69 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019e1a:	58                   	pop    eax
c0019e1b:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019e20:	5a                   	pop    edx
c0019e21:	68 81 b2 02 c0       	push   0xc002b281
c0019e26:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e2c:	e8 af 69 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019e31:	59                   	pop    ecx
c0019e32:	5b                   	pop    ebx
c0019e33:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019e36:	68 99 b2 02 c0       	push   0xc002b299
c0019e3b:	e8 f5 86 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0019e40:	58                   	pop    eax
c0019e41:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e44:	5a                   	pop    edx
c0019e45:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019e48:	68 a2 b2 02 c0       	push   0xc002b2a2
c0019e4d:	e8 e3 86 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0019e52:	59                   	pop    ecx
c0019e53:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e56:	5b                   	pop    ebx
c0019e57:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e59:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019e5c:	68 ab b2 02 c0       	push   0xc002b2ab
c0019e61:	e8 cf 86 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0019e66:	58                   	pop    eax
c0019e67:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019e6c:	5a                   	pop    edx
c0019e6d:	68 18 b4 02 c0       	push   0xc002b418
c0019e72:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e78:	e8 63 69 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019e7d:	59                   	pop    ecx
c0019e7e:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019e83:	5b                   	pop    ebx
c0019e84:	68 b4 b2 02 c0       	push   0xc002b2b4
c0019e89:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e8f:	e8 4c 69 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019e94:	0f 20 c0             	mov    eax,cr0
c0019e97:	5a                   	pop    edx
c0019e98:	59                   	pop    ecx
c0019e99:	50                   	push   eax
c0019e9a:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019e9f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ea5:	e8 f0 68 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0019eaa:	5b                   	pop    ebx
c0019eab:	58                   	pop    eax
c0019eac:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019eb1:	68 be b2 02 c0       	push   0xc002b2be
c0019eb6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ebc:	e8 1f 69 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019ec1:	0f 20 d0             	mov    eax,cr2
c0019ec4:	5a                   	pop    edx
c0019ec5:	59                   	pop    ecx
c0019ec6:	50                   	push   eax
c0019ec7:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019ecc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ed2:	e8 c3 68 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0019ed7:	5b                   	pop    ebx
c0019ed8:	58                   	pop    eax
c0019ed9:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019ede:	68 c8 b2 02 c0       	push   0xc002b2c8
c0019ee3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ee9:	e8 f2 68 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019eee:	0f 20 d8             	mov    eax,cr3
c0019ef1:	5a                   	pop    edx
c0019ef2:	59                   	pop    ecx
c0019ef3:	50                   	push   eax
c0019ef4:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019ef9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eff:	e8 96 68 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0019f04:	5b                   	pop    ebx
c0019f05:	58                   	pop    eax
c0019f06:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019f0b:	68 db b2 02 c0       	push   0xc002b2db
c0019f10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f16:	e8 c5 68 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019f1b:	0f 20 e0             	mov    eax,cr4
c0019f1e:	5a                   	pop    edx
c0019f1f:	59                   	pop    ecx
c0019f20:	50                   	push   eax
c0019f21:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019f26:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f2c:	e8 69 68 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0019f31:	5b                   	pop    ebx
c0019f32:	58                   	pop    eax
c0019f33:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019f38:	68 e5 b2 02 c0       	push   0xc002b2e5
c0019f3d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f43:	e8 98 68 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019f48:	5a                   	pop    edx
c0019f49:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019f4e:	59                   	pop    ecx
c0019f4f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f55:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f58:	50                   	push   eax
c0019f59:	e8 3c 68 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0019f5e:	5b                   	pop    ebx
c0019f5f:	58                   	pop    eax
c0019f60:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019f65:	68 fc b2 02 c0       	push   0xc002b2fc
c0019f6a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f70:	e8 6b 68 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019f75:	5a                   	pop    edx
c0019f76:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019f7b:	59                   	pop    ecx
c0019f7c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019f82:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019f85:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019f88:	50                   	push   eax
c0019f89:	e8 0c 68 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0019f8e:	5b                   	pop    ebx
c0019f8f:	58                   	pop    eax
c0019f90:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019f95:	68 fc b2 02 c0       	push   0xc002b2fc
c0019f9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fa0:	e8 3b 68 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019fa5:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019faa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019fad:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019fb3:	8b 12                	mov    edx,DWORD PTR [edx]
c0019fb5:	59                   	pop    ecx
c0019fb6:	5b                   	pop    ebx
c0019fb7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019fba:	50                   	push   eax
c0019fbb:	e8 da 67 ff ff       	call   c001079a <VgaText::putx(unsigned int)>
c0019fc0:	83 c4 10             	add    esp,0x10
c0019fc3:	b2 fe                	mov    dl,0xfe
c0019fc5:	e4 60                	in     al,0x60
c0019fc7:	3c 1c                	cmp    al,0x1c
c0019fc9:	74 04                	je     c0019fcf <Krnl::panic(char const*)+0x33a>
c0019fcb:	3c 5a                	cmp    al,0x5a
c0019fcd:	75 f6                	jne    c0019fc5 <Krnl::panic(char const*)+0x330>
c0019fcf:	e4 64                	in     al,0x64
c0019fd1:	a8 02                	test   al,0x2
c0019fd3:	75 fa                	jne    c0019fcf <Krnl::panic(char const*)+0x33a>
c0019fd5:	88 d0                	mov    al,dl
c0019fd7:	e6 64                	out    0x64,al
c0019fd9:	fa                   	cli    
c0019fda:	f4                   	hlt    
c0019fdb:	eb e8                	jmp    c0019fc5 <Krnl::panic(char const*)+0x330>
c0019fdd:	50                   	push   eax
c0019fde:	50                   	push   eax
c0019fdf:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019fe4:	68 68 b3 02 c0       	push   0xc002b368
c0019fe9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fef:	e8 ec 67 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c0019ff4:	58                   	pop    eax
c0019ff5:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0019ffa:	5a                   	pop    edx
c0019ffb:	68 76 b2 02 c0       	push   0xc002b276
c001a000:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a006:	e8 d5 67 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001a00b:	59                   	pop    ecx
c001a00c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a011:	5b                   	pop    ebx
c001a012:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a015:	83 c0 0c             	add    eax,0xc
c001a018:	50                   	push   eax
c001a019:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c001a01e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a024:	e8 b7 67 ff ff       	call   c00107e0 <VgaText::puts(char const*)>
c001a029:	83 c4 10             	add    esp,0x10
c001a02c:	e9 a3 fd ff ff       	jmp    c0019dd4 <Krnl::panic(char const*)+0x13f>

c001a031 <Net::switchEndian16(unsigned short)>:
c001a031:	83 ec 04             	sub    esp,0x4
c001a034:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a038:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a03c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a040:	c1 f8 08             	sar    eax,0x8
c001a043:	89 c2                	mov    edx,eax
c001a045:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a049:	c1 e0 08             	shl    eax,0x8
c001a04c:	09 d0                	or     eax,edx
c001a04e:	83 c4 04             	add    esp,0x4
c001a051:	c3                   	ret    

c001a052 <Net::switchEndian32(unsigned int)>:
c001a052:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a056:	c1 e8 18             	shr    eax,0x18
c001a059:	89 c2                	mov    edx,eax
c001a05b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a05f:	c1 e0 08             	shl    eax,0x8
c001a062:	25 00 00 ff 00       	and    eax,0xff0000
c001a067:	09 c2                	or     edx,eax
c001a069:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a06d:	c1 e8 08             	shr    eax,0x8
c001a070:	25 00 ff 00 00       	and    eax,0xff00
c001a075:	09 c2                	or     edx,eax
c001a077:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a07b:	c1 e0 18             	shl    eax,0x18
c001a07e:	09 d0                	or     eax,edx
c001a080:	c3                   	ret    

c001a081 <Net::crc32Calc(unsigned char*, int)>:
c001a081:	83 ec 10             	sub    esp,0x10
c001a084:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a089:	75 07                	jne    c001a092 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a08b:	b8 00 00 00 00       	mov    eax,0x0
c001a090:	eb 7c                	jmp    c001a10e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a092:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a097:	7f 07                	jg     c001a0a0 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a099:	b8 00 00 00 00       	mov    eax,0x0
c001a09e:	eb 6e                	jmp    c001a10e <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a0a0:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a0a8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a0b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a0b4:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a0b8:	7d 4e                	jge    c001a108 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a0ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0c2:	01 d0                	add    eax,edx
c001a0c4:	8a 00                	mov    al,BYTE PTR [eax]
c001a0c6:	0f b6 c0             	movzx  eax,al
c001a0c9:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a0cd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a0d5:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a0da:	7f 26                	jg     c001a102 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a0dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0e0:	83 e0 01             	and    eax,0x1
c001a0e3:	74 0d                	je     c001a0f2 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a0e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0e9:	d1 e8                	shr    eax,1
c001a0eb:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a0f0:	eb 06                	jmp    c001a0f8 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a0f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0f6:	d1 e8                	shr    eax,1
c001a0f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a0fc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a100:	eb d3                	jmp    c001a0d5 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a102:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a106:	eb a8                	jmp    c001a0b0 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a10c:	f7 d0                	not    eax
c001a10e:	83 c4 10             	add    esp,0x10
c001a111:	c3                   	ret    

c001a112 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a112:	57                   	push   edi
c001a113:	56                   	push   esi
c001a114:	53                   	push   ebx
c001a115:	83 ec 60             	sub    esp,0x60
c001a118:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a11f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a123:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a12b:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a130:	7f 1a                	jg     c001a14c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a132:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a139:	8d 50 01             	lea    edx,[eax+0x1]
c001a13c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a143:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a146:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a14a:	eb df                	jmp    c001a12b <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a14c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a153:	8d 50 01             	lea    edx,[eax+0x1]
c001a156:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a15d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a160:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a16b:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a16f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a173:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a17b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a17f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a183:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a187:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a18b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a18f:	89 c6                	mov    esi,eax
c001a191:	89 d7                	mov    edi,edx
c001a193:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a195:	89 c8                	mov    eax,ecx
c001a197:	89 fa                	mov    edx,edi
c001a199:	89 f3                	mov    ebx,esi
c001a19b:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a19f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a1a3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1a6:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a1ae:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a1b5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a1b9:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a1bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a1c1:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a1cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a1d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a1d5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a1d9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a1dd:	89 c6                	mov    esi,eax
c001a1df:	89 d7                	mov    edi,edx
c001a1e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a1e3:	89 c8                	mov    eax,ecx
c001a1e5:	89 fa                	mov    edx,edi
c001a1e7:	89 f3                	mov    ebx,esi
c001a1e9:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a1ed:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a1f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a1f5:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a1fd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a204:	0f b7 c0             	movzx  eax,ax
c001a207:	c1 f8 08             	sar    eax,0x8
c001a20a:	89 c1                	mov    ecx,eax
c001a20c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a213:	8d 50 01             	lea    edx,[eax+0x1]
c001a216:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a21d:	88 ca                	mov    dl,cl
c001a21f:	88 10                	mov    BYTE PTR [eax],dl
c001a221:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a228:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a22f:	8d 48 01             	lea    ecx,[eax+0x1]
c001a232:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a239:	88 10                	mov    BYTE PTR [eax],dl
c001a23b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a23f:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a243:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a24a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a24e:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a252:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a256:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a25a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a25e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a262:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a266:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a26a:	89 c6                	mov    esi,eax
c001a26c:	89 d7                	mov    edi,edx
c001a26e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a270:	89 c8                	mov    eax,ecx
c001a272:	89 fa                	mov    edx,edi
c001a274:	89 f3                	mov    ebx,esi
c001a276:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a27a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a27e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a282:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a286:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a28d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a294:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a298:	50                   	push   eax
c001a299:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a29d:	e8 df fd ff ff       	call   c001a081 <Net::crc32Calc(unsigned char*, int)>
c001a2a2:	83 c4 08             	add    esp,0x8
c001a2a5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a2a9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a2ad:	c1 e8 18             	shr    eax,0x18
c001a2b0:	89 c1                	mov    ecx,eax
c001a2b2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2b9:	8d 50 01             	lea    edx,[eax+0x1]
c001a2bc:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2c3:	88 ca                	mov    dl,cl
c001a2c5:	88 10                	mov    BYTE PTR [eax],dl
c001a2c7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a2cb:	c1 e8 10             	shr    eax,0x10
c001a2ce:	89 c1                	mov    ecx,eax
c001a2d0:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2d7:	8d 50 01             	lea    edx,[eax+0x1]
c001a2da:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2e1:	88 ca                	mov    dl,cl
c001a2e3:	88 10                	mov    BYTE PTR [eax],dl
c001a2e5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a2e9:	c1 e8 08             	shr    eax,0x8
c001a2ec:	89 c1                	mov    ecx,eax
c001a2ee:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2f5:	8d 50 01             	lea    edx,[eax+0x1]
c001a2f8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2ff:	88 ca                	mov    dl,cl
c001a301:	88 10                	mov    BYTE PTR [eax],dl
c001a303:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a30a:	8d 50 01             	lea    edx,[eax+0x1]
c001a30d:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a314:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a318:	88 10                	mov    BYTE PTR [eax],dl
c001a31a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a31e:	83 c4 60             	add    esp,0x60
c001a321:	5b                   	pop    ebx
c001a322:	5e                   	pop    esi
c001a323:	5f                   	pop    edi
c001a324:	c3                   	ret    

c001a325 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a325:	57                   	push   edi
c001a326:	56                   	push   esi
c001a327:	53                   	push   ebx
c001a328:	83 ec 70             	sub    esp,0x70
c001a32b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a332:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a336:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a33e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a345:	83 c0 0e             	add    eax,0xe
c001a348:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a34c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a353:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a357:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a35f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a363:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a367:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a36b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a36f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a373:	89 c6                	mov    esi,eax
c001a375:	89 d7                	mov    edi,edx
c001a377:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a379:	89 c8                	mov    eax,ecx
c001a37b:	89 fa                	mov    edx,edi
c001a37d:	89 f3                	mov    ebx,esi
c001a37f:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a383:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a387:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a38b:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a393:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a39a:	83 c0 08             	add    eax,0x8
c001a39d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a3a1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3a8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a3ac:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a3b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a3b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a3bc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a3c0:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a3c4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a3c8:	89 c6                	mov    esi,eax
c001a3ca:	89 d7                	mov    edi,edx
c001a3cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3ce:	89 c8                	mov    eax,ecx
c001a3d0:	89 fa                	mov    edx,edi
c001a3d2:	89 f3                	mov    ebx,esi
c001a3d4:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a3d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a3dc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a3e0:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a3e8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a3ef:	8d 50 01             	lea    edx,[eax+0x1]
c001a3f2:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a3f9:	8a 00                	mov    al,BYTE PTR [eax]
c001a3fb:	0f b6 c0             	movzx  eax,al
c001a3fe:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a403:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a40a:	8d 50 01             	lea    edx,[eax+0x1]
c001a40d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a414:	8a 00                	mov    al,BYTE PTR [eax]
c001a416:	0f b6 c0             	movzx  eax,al
c001a419:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a41e:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a423:	c1 e0 08             	shl    eax,0x8
c001a426:	89 c2                	mov    edx,eax
c001a428:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a42c:	09 d0                	or     eax,edx
c001a42e:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a435:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a439:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a441:	75 46                	jne    c001a489 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a443:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a44a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a44d:	66 3d dc 05          	cmp    ax,0x5dc
c001a451:	77 16                	ja     c001a469 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a453:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a45a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a45d:	0f b7 c0             	movzx  eax,ax
c001a460:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a467:	eb 20                	jmp    c001a489 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a469:	83 ec 0c             	sub    esp,0xc
c001a46c:	68 40 b4 02 c0       	push   0xc002b440
c001a471:	e8 bf 80 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001a476:	83 c4 10             	add    esp,0x10
c001a479:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a480:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a484:	e9 17 01 00 00       	jmp    c001a5a0 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a489:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a490:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a497:	8b 12                	mov    edx,DWORD PTR [edx]
c001a499:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a49d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a4a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a4a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a4ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a4b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a4b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a4bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a4c0:	89 c6                	mov    esi,eax
c001a4c2:	89 d7                	mov    edi,edx
c001a4c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4c6:	89 c8                	mov    eax,ecx
c001a4c8:	89 fa                	mov    edx,edi
c001a4ca:	89 f3                	mov    ebx,esi
c001a4cc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a4d0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a4d4:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4d7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a4de:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a4e5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4ec:	8d 50 01             	lea    edx,[eax+0x1]
c001a4ef:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a4f6:	8a 00                	mov    al,BYTE PTR [eax]
c001a4f8:	0f b6 c0             	movzx  eax,al
c001a4fb:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a4ff:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a506:	8d 50 01             	lea    edx,[eax+0x1]
c001a509:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a510:	8a 00                	mov    al,BYTE PTR [eax]
c001a512:	0f b6 c0             	movzx  eax,al
c001a515:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a519:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a520:	8d 50 01             	lea    edx,[eax+0x1]
c001a523:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a52a:	8a 00                	mov    al,BYTE PTR [eax]
c001a52c:	0f b6 c0             	movzx  eax,al
c001a52f:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a533:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a53a:	8d 50 01             	lea    edx,[eax+0x1]
c001a53d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a544:	8a 00                	mov    al,BYTE PTR [eax]
c001a546:	0f b6 c0             	movzx  eax,al
c001a549:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a54d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a551:	c1 e0 18             	shl    eax,0x18
c001a554:	89 c2                	mov    edx,eax
c001a556:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a55a:	c1 e0 10             	shl    eax,0x10
c001a55d:	09 c2                	or     edx,eax
c001a55f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a563:	c1 e0 08             	shl    eax,0x8
c001a566:	09 d0                	or     eax,edx
c001a568:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a56c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a570:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a577:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a57b:	83 e8 04             	sub    eax,0x4
c001a57e:	83 ec 08             	sub    esp,0x8
c001a581:	50                   	push   eax
c001a582:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a586:	e8 f6 fa ff ff       	call   c001a081 <Net::crc32Calc(unsigned char*, int)>
c001a58b:	83 c4 10             	add    esp,0x10
c001a58e:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a592:	0f 94 c2             	sete   dl
c001a595:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a59c:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a59f:	90                   	nop
c001a5a0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5a7:	83 c4 70             	add    esp,0x70
c001a5aa:	5b                   	pop    ebx
c001a5ab:	5e                   	pop    esi
c001a5ac:	5f                   	pop    edi
c001a5ad:	c2 04 00             	ret    0x4

c001a5b0 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a5b0:	55                   	push   ebp
c001a5b1:	57                   	push   edi
c001a5b2:	56                   	push   esi
c001a5b3:	53                   	push   ebx
c001a5b4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a5ba:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a5c1:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a5c3:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a5c6:	80 fb 40             	cmp    bl,0x40
c001a5c9:	75 1b                	jne    c001a5e6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a5cb:	8a 16                	mov    dl,BYTE PTR [esi]
c001a5cd:	84 d2                	test   dl,dl
c001a5cf:	0f 84 f1 00 00 00    	je     c001a6c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a5d5:	8d 46 01             	lea    eax,[esi+0x1]
c001a5d8:	80 fa 3a             	cmp    dl,0x3a
c001a5db:	74 04                	je     c001a5e1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a5dd:	89 c6                	mov    esi,eax
c001a5df:	eb ea                	jmp    c001a5cb <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a5e1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a5e4:	89 c6                	mov    esi,eax
c001a5e6:	50                   	push   eax
c001a5e7:	6a 40                	push   0x40
c001a5e9:	6a 00                	push   0x0
c001a5eb:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a5ef:	50                   	push   eax
c001a5f0:	e8 5b 61 fe ff       	call   c0000750 <memset>
c001a5f5:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a5fc:	31 c0                	xor    eax,eax
c001a5fe:	83 c4 10             	add    esp,0x10
c001a601:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a603:	84 c9                	test   cl,cl
c001a605:	0f 84 bb 00 00 00    	je     c001a6c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a60b:	3d c7 00 00 00       	cmp    eax,0xc7
c001a610:	0f 8f b0 00 00 00    	jg     c001a6c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a616:	80 f9 0a             	cmp    cl,0xa
c001a619:	0f 85 98 00 00 00    	jne    c001a6b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a61f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a624:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a628:	a8 df                	test   al,0xdf
c001a62a:	0f 94 c1             	sete   cl
c001a62d:	3c 23                	cmp    al,0x23
c001a62f:	0f 94 c2             	sete   dl
c001a632:	08 d1                	or     cl,dl
c001a634:	75 4a                	jne    c001a680 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a636:	8d 50 f7             	lea    edx,[eax-0x9]
c001a639:	80 fa 01             	cmp    dl,0x1
c001a63c:	76 42                	jbe    c001a680 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a63e:	3c 5b                	cmp    al,0x5b
c001a640:	75 42                	jne    c001a684 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a642:	80 fb 40             	cmp    bl,0x40
c001a645:	75 39                	jne    c001a680 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a647:	83 ec 0c             	sub    esp,0xc
c001a64a:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a64e:	52                   	push   edx
c001a64f:	e8 18 61 fe ff       	call   c000076c <strlen>
c001a654:	83 c4 10             	add    esp,0x10
c001a657:	83 f8 3f             	cmp    eax,0x3f
c001a65a:	77 6a                	ja     c001a6c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a65c:	50                   	push   eax
c001a65d:	50                   	push   eax
c001a65e:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a662:	52                   	push   edx
c001a663:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a667:	52                   	push   edx
c001a668:	e8 9f 61 fe ff       	call   c000080c <strcpy>
c001a66d:	58                   	pop    eax
c001a66e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a672:	52                   	push   edx
c001a673:	e8 f4 60 fe ff       	call   c000076c <strlen>
c001a678:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a67d:	83 c4 10             	add    esp,0x10
c001a680:	31 d2                	xor    edx,edx
c001a682:	eb 3a                	jmp    c001a6be <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a684:	80 fb 40             	cmp    bl,0x40
c001a687:	74 06                	je     c001a68f <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a689:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a68d:	eb 20                	jmp    c001a6af <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a68f:	50                   	push   eax
c001a690:	50                   	push   eax
c001a691:	55                   	push   ebp
c001a692:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a696:	50                   	push   eax
c001a697:	e8 fc 61 fe ff       	call   c0000898 <strcmp>
c001a69c:	83 c4 10             	add    esp,0x10
c001a69f:	85 c0                	test   eax,eax
c001a6a1:	75 dd                	jne    c001a680 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6a3:	eb e4                	jmp    c001a689 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a6a5:	8d 50 01             	lea    edx,[eax+0x1]
c001a6a8:	80 f9 3d             	cmp    cl,0x3d
c001a6ab:	74 1d                	je     c001a6ca <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a6ad:	89 d0                	mov    eax,edx
c001a6af:	8a 08                	mov    cl,BYTE PTR [eax]
c001a6b1:	84 c9                	test   cl,cl
c001a6b3:	75 f0                	jne    c001a6a5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a6b5:	eb 0f                	jmp    c001a6c6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a6b7:	8d 50 01             	lea    edx,[eax+0x1]
c001a6ba:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a6be:	47                   	inc    edi
c001a6bf:	89 d0                	mov    eax,edx
c001a6c1:	e9 3b ff ff ff       	jmp    c001a601 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a6c6:	31 c0                	xor    eax,eax
c001a6c8:	eb 33                	jmp    c001a6fd <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a6ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a6ce:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a6d1:	50                   	push   eax
c001a6d2:	50                   	push   eax
c001a6d3:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a6d7:	50                   	push   eax
c001a6d8:	56                   	push   esi
c001a6d9:	e8 ba 61 fe ff       	call   c0000898 <strcmp>
c001a6de:	83 c4 10             	add    esp,0x10
c001a6e1:	85 c0                	test   eax,eax
c001a6e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a6e7:	75 97                	jne    c001a680 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a6e9:	51                   	push   ecx
c001a6ea:	51                   	push   ecx
c001a6eb:	52                   	push   edx
c001a6ec:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a6f3:	e8 14 61 fe ff       	call   c000080c <strcpy>
c001a6f8:	83 c4 10             	add    esp,0x10
c001a6fb:	b0 01                	mov    al,0x1
c001a6fd:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a703:	5b                   	pop    ebx
c001a704:	5e                   	pop    esi
c001a705:	5f                   	pop    edi
c001a706:	5d                   	pop    ebp
c001a707:	c3                   	ret    

c001a708 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a708:	57                   	push   edi
c001a709:	56                   	push   esi
c001a70a:	53                   	push   ebx
c001a70b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a711:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a718:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a71f:	53                   	push   ebx
c001a720:	e8 47 60 fe ff       	call   c000076c <strlen>
c001a725:	89 34 24             	mov    DWORD PTR [esp],esi
c001a728:	89 c7                	mov    edi,eax
c001a72a:	e8 3d 60 fe ff       	call   c000076c <strlen>
c001a72f:	83 c4 10             	add    esp,0x10
c001a732:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a736:	3d ff 00 00 00       	cmp    eax,0xff
c001a73b:	0f 87 d3 00 00 00    	ja     c001a814 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a741:	57                   	push   edi
c001a742:	57                   	push   edi
c001a743:	56                   	push   esi
c001a744:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a748:	56                   	push   esi
c001a749:	e8 be 60 fe ff       	call   c000080c <strcpy>
c001a74e:	58                   	pop    eax
c001a74f:	5a                   	pop    edx
c001a750:	68 e2 b7 02 c0       	push   0xc002b7e2
c001a755:	56                   	push   esi
c001a756:	e8 f1 61 fe ff       	call   c000094c <strcat>
c001a75b:	59                   	pop    ecx
c001a75c:	5f                   	pop    edi
c001a75d:	53                   	push   ebx
c001a75e:	56                   	push   esi
c001a75f:	e8 e8 61 fe ff       	call   c000094c <strcat>
c001a764:	58                   	pop    eax
c001a765:	5a                   	pop    edx
c001a766:	68 8c b4 02 c0       	push   0xc002b48c
c001a76b:	56                   	push   esi
c001a76c:	e8 db 61 fe ff       	call   c000094c <strcat>
c001a771:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a778:	e8 1c 4e ff ff       	call   c000f599 <malloc>
c001a77d:	83 c4 0c             	add    esp,0xc
c001a780:	89 c3                	mov    ebx,eax
c001a782:	ff 35 30 0b 03 c0    	push   DWORD PTR ds:0xc0030b30
c001a788:	56                   	push   esi
c001a789:	50                   	push   eax
c001a78a:	e8 05 83 ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c001a78f:	83 c4 10             	add    esp,0x10
c001a792:	85 db                	test   ebx,ebx
c001a794:	74 7e                	je     c001a814 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a796:	51                   	push   ecx
c001a797:	51                   	push   ecx
c001a798:	6a 01                	push   0x1
c001a79a:	53                   	push   ebx
c001a79b:	e8 58 83 ff ff       	call   c0012af8 <File::open(FileOpenMode)>
c001a7a0:	83 c4 10             	add    esp,0x10
c001a7a3:	85 c0                	test   eax,eax
c001a7a5:	74 08                	je     c001a7af <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a7a7:	83 ec 0c             	sub    esp,0xc
c001a7aa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7ac:	53                   	push   ebx
c001a7ad:	eb 5f                	jmp    c001a80e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a7af:	52                   	push   edx
c001a7b0:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a7b4:	50                   	push   eax
c001a7b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a7b9:	50                   	push   eax
c001a7ba:	53                   	push   ebx
c001a7bb:	e8 e4 85 ff ff       	call   c0012da4 <File::stat(unsigned long long*, bool*)>
c001a7c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7c4:	83 c4 10             	add    esp,0x10
c001a7c7:	89 c1                	mov    ecx,eax
c001a7c9:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a7cd:	74 31                	je     c001a800 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a7cf:	83 ec 0c             	sub    esp,0xc
c001a7d2:	50                   	push   eax
c001a7d3:	e8 c1 4d ff ff       	call   c000f599 <malloc>
c001a7d8:	89 c6                	mov    esi,eax
c001a7da:	58                   	pop    eax
c001a7db:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7dd:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a7e1:	52                   	push   edx
c001a7e2:	56                   	push   esi
c001a7e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7eb:	53                   	push   ebx
c001a7ec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a7ef:	83 c4 20             	add    esp,0x20
c001a7f2:	85 c0                	test   eax,eax
c001a7f4:	75 0a                	jne    c001a800 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a7f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7fa:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a7fe:	74 18                	je     c001a818 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a800:	83 ec 0c             	sub    esp,0xc
c001a803:	53                   	push   ebx
c001a804:	e8 4d 83 ff ff       	call   c0012b56 <File::close()>
c001a809:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a80b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a80e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a811:	83 c4 10             	add    esp,0x10
c001a814:	31 c0                	xor    eax,eax
c001a816:	eb 3b                	jmp    c001a853 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a818:	83 ec 0c             	sub    esp,0xc
c001a81b:	53                   	push   ebx
c001a81c:	e8 35 83 ff ff       	call   c0012b56 <File::close()>
c001a821:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a823:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a826:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a829:	83 c4 0c             	add    esp,0xc
c001a82c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a833:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a83a:	56                   	push   esi
c001a83b:	e8 70 fd ff ff       	call   c001a5b0 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a840:	89 34 24             	mov    DWORD PTR [esp],esi
c001a843:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a847:	e8 5d 4d ff ff       	call   c000f5a9 <free>
c001a84c:	83 c4 10             	add    esp,0x10
c001a84f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a853:	81 c4 20 01 00 00    	add    esp,0x120
c001a859:	5b                   	pop    ebx
c001a85a:	5e                   	pop    esi
c001a85b:	5f                   	pop    edi
c001a85c:	c3                   	ret    

c001a85d <Reg::getLine(char*, char*, char*)>:
c001a85d:	57                   	push   edi
c001a85e:	56                   	push   esi
c001a85f:	53                   	push   ebx
c001a860:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a864:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a868:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a86c:	57                   	push   edi
c001a86d:	56                   	push   esi
c001a86e:	53                   	push   ebx
c001a86f:	68 91 b4 02 c0       	push   0xc002b491
c001a874:	e8 8f fe ff ff       	call   c001a708 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a879:	83 c4 10             	add    esp,0x10
c001a87c:	84 c0                	test   al,al
c001a87e:	75 10                	jne    c001a890 <Reg::getLine(char*, char*, char*)+0x33>
c001a880:	57                   	push   edi
c001a881:	56                   	push   esi
c001a882:	53                   	push   ebx
c001a883:	68 b6 b4 02 c0       	push   0xc002b4b6
c001a888:	e8 7b fe ff ff       	call   c001a708 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a88d:	83 c4 10             	add    esp,0x10
c001a890:	5b                   	pop    ebx
c001a891:	5e                   	pop    esi
c001a892:	5f                   	pop    edi
c001a893:	c3                   	ret    

c001a894 <Reg::readInt(char*, char*, int*)>:
c001a894:	55                   	push   ebp
c001a895:	57                   	push   edi
c001a896:	56                   	push   esi
c001a897:	53                   	push   ebx
c001a898:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a89e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a8a2:	57                   	push   edi
c001a8a3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a8aa:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a8b1:	e8 a7 ff ff ff       	call   c001a85d <Reg::getLine(char*, char*, char*)>
c001a8b6:	83 c4 10             	add    esp,0x10
c001a8b9:	84 c0                	test   al,al
c001a8bb:	0f 84 b3 00 00 00    	je     c001a974 <Reg::readInt(char*, char*, int*)+0xe0>
c001a8c1:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a8c5:	80 fa 2b             	cmp    dl,0x2b
c001a8c8:	74 0c                	je     c001a8d6 <Reg::readInt(char*, char*, int*)+0x42>
c001a8ca:	80 fa 2d             	cmp    dl,0x2d
c001a8cd:	75 0e                	jne    c001a8dd <Reg::readInt(char*, char*, int*)+0x49>
c001a8cf:	ba 01 00 00 00       	mov    edx,0x1
c001a8d4:	eb 0b                	jmp    c001a8e1 <Reg::readInt(char*, char*, int*)+0x4d>
c001a8d6:	ba 01 00 00 00       	mov    edx,0x1
c001a8db:	eb 02                	jmp    c001a8df <Reg::readInt(char*, char*, int*)+0x4b>
c001a8dd:	31 d2                	xor    edx,edx
c001a8df:	31 c0                	xor    eax,eax
c001a8e1:	be 0a 00 00 00       	mov    esi,0xa
c001a8e6:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a8eb:	75 20                	jne    c001a90d <Reg::readInt(char*, char*, int*)+0x79>
c001a8ed:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a8f1:	80 f9 78             	cmp    cl,0x78
c001a8f4:	75 0a                	jne    c001a900 <Reg::readInt(char*, char*, int*)+0x6c>
c001a8f6:	83 c2 02             	add    edx,0x2
c001a8f9:	be 10 00 00 00       	mov    esi,0x10
c001a8fe:	eb 0d                	jmp    c001a90d <Reg::readInt(char*, char*, int*)+0x79>
c001a900:	80 f9 62             	cmp    cl,0x62
c001a903:	75 08                	jne    c001a90d <Reg::readInt(char*, char*, int*)+0x79>
c001a905:	83 c2 02             	add    edx,0x2
c001a908:	be 02 00 00 00       	mov    esi,0x2
c001a90d:	01 d7                	add    edi,edx
c001a90f:	31 d2                	xor    edx,edx
c001a911:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a913:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a917:	80 fb 0d             	cmp    bl,0xd
c001a91a:	0f 94 c3             	sete   bl
c001a91d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a922:	0f 94 c1             	sete   cl
c001a925:	08 cb                	or     bl,cl
c001a927:	75 3a                	jne    c001a963 <Reg::readInt(char*, char*, int*)+0xcf>
c001a929:	0f af d6             	imul   edx,esi
c001a92c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a931:	83 fe 10             	cmp    esi,0x10
c001a934:	75 26                	jne    c001a95c <Reg::readInt(char*, char*, int*)+0xc8>
c001a936:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a93a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a93d:	89 e9                	mov    ecx,ebp
c001a93f:	80 f9 05             	cmp    cl,0x5
c001a942:	77 06                	ja     c001a94a <Reg::readInt(char*, char*, int*)+0xb6>
c001a944:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a948:	eb 16                	jmp    c001a960 <Reg::readInt(char*, char*, int*)+0xcc>
c001a94a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a94e:	83 e9 61             	sub    ecx,0x61
c001a951:	80 f9 05             	cmp    cl,0x5
c001a954:	77 06                	ja     c001a95c <Reg::readInt(char*, char*, int*)+0xc8>
c001a956:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a95a:	eb 04                	jmp    c001a960 <Reg::readInt(char*, char*, int*)+0xcc>
c001a95c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a960:	47                   	inc    edi
c001a961:	eb ae                	jmp    c001a911 <Reg::readInt(char*, char*, int*)+0x7d>
c001a963:	84 c0                	test   al,al
c001a965:	74 02                	je     c001a969 <Reg::readInt(char*, char*, int*)+0xd5>
c001a967:	f7 da                	neg    edx
c001a969:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a970:	89 10                	mov    DWORD PTR [eax],edx
c001a972:	88 d8                	mov    al,bl
c001a974:	81 c4 ec 00 00 00    	add    esp,0xec
c001a97a:	5b                   	pop    ebx
c001a97b:	5e                   	pop    esi
c001a97c:	5f                   	pop    edi
c001a97d:	5d                   	pop    ebp
c001a97e:	c3                   	ret    

c001a97f <Reg::readString(char*, char*, char*, int)>:
c001a97f:	57                   	push   edi
c001a980:	56                   	push   esi
c001a981:	53                   	push   ebx
c001a982:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a988:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a98f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a993:	57                   	push   edi
c001a994:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a99b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a9a2:	e8 b6 fe ff ff       	call   c001a85d <Reg::getLine(char*, char*, char*)>
c001a9a7:	83 c4 10             	add    esp,0x10
c001a9aa:	89 c6                	mov    esi,eax
c001a9ac:	84 c0                	test   al,al
c001a9ae:	74 44                	je     c001a9f4 <Reg::readString(char*, char*, char*, int)+0x75>
c001a9b0:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a9b7:	31 c0                	xor    eax,eax
c001a9b9:	4a                   	dec    edx
c001a9ba:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a9bd:	84 c9                	test   cl,cl
c001a9bf:	74 0f                	je     c001a9d0 <Reg::readString(char*, char*, char*, int)+0x51>
c001a9c1:	39 c2                	cmp    edx,eax
c001a9c3:	7e 0b                	jle    c001a9d0 <Reg::readString(char*, char*, char*, int)+0x51>
c001a9c5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a9c8:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a9cd:	40                   	inc    eax
c001a9ce:	eb ea                	jmp    c001a9ba <Reg::readString(char*, char*, char*, int)+0x3b>
c001a9d0:	83 ec 0c             	sub    esp,0xc
c001a9d3:	53                   	push   ebx
c001a9d4:	e8 93 5d fe ff       	call   c000076c <strlen>
c001a9d9:	83 c4 10             	add    esp,0x10
c001a9dc:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a9e1:	75 11                	jne    c001a9f4 <Reg::readString(char*, char*, char*, int)+0x75>
c001a9e3:	83 ec 0c             	sub    esp,0xc
c001a9e6:	53                   	push   ebx
c001a9e7:	e8 80 5d fe ff       	call   c000076c <strlen>
c001a9ec:	83 c4 10             	add    esp,0x10
c001a9ef:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a9f4:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a9fa:	89 f0                	mov    eax,esi
c001a9fc:	5b                   	pop    ebx
c001a9fd:	5e                   	pop    esi
c001a9fe:	5f                   	pop    edi
c001a9ff:	c3                   	ret    

c001aa00 <Reg::readBool(char*, char*, bool*)>:
c001aa00:	83 ec 20             	sub    esp,0x20
c001aa03:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa07:	50                   	push   eax
c001aa08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa10:	e8 7f fe ff ff       	call   c001a894 <Reg::readInt(char*, char*, int*)>
c001aa15:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aa1a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aa1e:	0f 95 02             	setne  BYTE PTR [edx]
c001aa21:	83 c4 2c             	add    esp,0x2c
c001aa24:	c3                   	ret    

c001aa25 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001aa25:	53                   	push   ebx
c001aa26:	83 ec 1c             	sub    esp,0x1c
c001aa29:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001aa2d:	8d 44 24 13          	lea    eax,[esp+0x13]
c001aa31:	50                   	push   eax
c001aa32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa3a:	e8 c1 ff ff ff       	call   c001aa00 <Reg::readBool(char*, char*, bool*)>
c001aa3f:	83 c4 10             	add    esp,0x10
c001aa42:	84 c0                	test   al,al
c001aa44:	74 04                	je     c001aa4a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001aa46:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001aa4a:	88 d8                	mov    al,bl
c001aa4c:	83 c4 18             	add    esp,0x18
c001aa4f:	5b                   	pop    ebx
c001aa50:	c3                   	ret    

c001aa51 <Reg::readIntWithDefault(char*, char*, int)>:
c001aa51:	53                   	push   ebx
c001aa52:	83 ec 1c             	sub    esp,0x1c
c001aa55:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001aa59:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa5d:	50                   	push   eax
c001aa5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aa66:	e8 29 fe ff ff       	call   c001a894 <Reg::readInt(char*, char*, int*)>
c001aa6b:	83 c4 10             	add    esp,0x10
c001aa6e:	84 c0                	test   al,al
c001aa70:	74 04                	je     c001aa76 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001aa72:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001aa76:	89 d8                	mov    eax,ebx
c001aa78:	83 c4 18             	add    esp,0x18
c001aa7b:	5b                   	pop    ebx
c001aa7c:	c3                   	ret    

c001aa7d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001aa7d:	57                   	push   edi
c001aa7e:	56                   	push   esi
c001aa7f:	56                   	push   esi
c001aa80:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aa84:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001aa88:	56                   	push   esi
c001aa89:	57                   	push   edi
c001aa8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aa92:	e8 e8 fe ff ff       	call   c001a97f <Reg::readString(char*, char*, char*, int)>
c001aa97:	83 c4 10             	add    esp,0x10
c001aa9a:	84 c0                	test   al,al
c001aa9c:	75 1a                	jne    c001aab8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001aa9e:	51                   	push   ecx
c001aa9f:	56                   	push   esi
c001aaa0:	6a 00                	push   0x0
c001aaa2:	57                   	push   edi
c001aaa3:	e8 a8 5c fe ff       	call   c0000750 <memset>
c001aaa8:	8d 4e ff             	lea    ecx,[esi-0x1]
c001aaab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001aaaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aab1:	83 c4 10             	add    esp,0x10
c001aab4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001aab8:	89 f8                	mov    eax,edi
c001aaba:	5a                   	pop    edx
c001aabb:	5e                   	pop    esi
c001aabc:	5f                   	pop    edi
c001aabd:	c3                   	ret    

c001aabe <Sys::eject(regs*)>:
c001aabe:	83 ec 0c             	sub    esp,0xc
c001aac1:	83 ca ff             	or     edx,0xffffffff
c001aac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aac8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001aacb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001aad0:	83 e9 41             	sub    ecx,0x41
c001aad3:	83 f9 19             	cmp    ecx,0x19
c001aad6:	77 18                	ja     c001aaf0 <Sys::eject(regs*)+0x32>
c001aad8:	8b 0c 8d e0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2420]
c001aadf:	85 c9                	test   ecx,ecx
c001aae1:	74 0d                	je     c001aaf0 <Sys::eject(regs*)+0x32>
c001aae3:	83 ec 0c             	sub    esp,0xc
c001aae6:	51                   	push   ecx
c001aae7:	e8 28 b3 ff ff       	call   c0015e14 <LogicalDisk::eject()>
c001aaec:	83 c4 10             	add    esp,0x10
c001aaef:	99                   	cdq    
c001aaf0:	83 c4 0c             	add    esp,0xc
c001aaf3:	c3                   	ret    

c001aaf4 <Sys::exit(regs*)>:
c001aaf4:	83 ec 18             	sub    esp,0x18
c001aaf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aafb:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aafe:	e8 bc 35 00 00       	call   c001e0bf <terminateTask(int)>
c001ab03:	83 c8 ff             	or     eax,0xffffffff
c001ab06:	83 c4 1c             	add    esp,0x1c
c001ab09:	89 c2                	mov    edx,eax
c001ab0b:	c3                   	ret    

c001ab0c <Sys::getCwd(regs*)>:
c001ab0c:	83 ec 10             	sub    esp,0x10
c001ab0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab13:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001ab16:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ab19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab1e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab21:	e8 70 7d ff ff       	call   c0012896 <Fs::getcwd(Process*, char*, int)>
c001ab26:	83 c4 1c             	add    esp,0x1c
c001ab29:	99                   	cdq    
c001ab2a:	c3                   	ret    

c001ab2b <Sys::getPID(regs*)>:
c001ab2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab30:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab33:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab35:	99                   	cdq    
c001ab36:	c3                   	ret    

c001ab37 <Sys::getRAMData(regs*)>:
c001ab37:	8b 0d 34 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d634
c001ab3d:	6b 05 30 d6 02 c0 64 	imul   eax,DWORD PTR ds:0xc002d630,0x64
c001ab44:	99                   	cdq    
c001ab45:	f7 f9                	idiv   ecx
c001ab47:	c1 e0 18             	shl    eax,0x18
c001ab4a:	09 c8                	or     eax,ecx
c001ab4c:	99                   	cdq    
c001ab4d:	c3                   	ret    

c001ab4e <Sys::getVGAPtr(regs*)>:
c001ab4e:	55                   	push   ebp
c001ab4f:	57                   	push   edi
c001ab50:	56                   	push   esi
c001ab51:	53                   	push   ebx
c001ab52:	83 ec 18             	sub    esp,0x18
c001ab55:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ab59:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ab5c:	e8 aa 30 00 00       	call   c001dc0b <Thr::processFromPID(int)>
c001ab61:	83 c4 10             	add    esp,0x10
c001ab64:	89 c1                	mov    ecx,eax
c001ab66:	b8 01 00 00 00       	mov    eax,0x1
c001ab6b:	85 c9                	test   ecx,ecx
c001ab6d:	74 59                	je     c001abc8 <Sys::getVGAPtr(regs*)+0x7a>
c001ab6f:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001ab75:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ab79:	74 0c                	je     c001ab87 <Sys::getVGAPtr(regs*)+0x39>
c001ab7b:	83 ec 0c             	sub    esp,0xc
c001ab7e:	53                   	push   ebx
c001ab7f:	e8 4f 57 ff ff       	call   c00102d3 <setActiveTerminal(VgaText*)>
c001ab84:	83 c4 10             	add    esp,0x10
c001ab87:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ab8a:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ab8d:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ab92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab94:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ab97:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ab9a:	81 c3 82 00 00 00    	add    ebx,0x82
c001aba0:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001aba6:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001aba9:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001abac:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001abb2:	50                   	push   eax
c001abb3:	50                   	push   eax
c001abb4:	53                   	push   ebx
c001abb5:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001abb8:	05 a8 0f 00 00       	add    eax,0xfa8
c001abbd:	50                   	push   eax
c001abbe:	e8 49 5c fe ff       	call   c000080c <strcpy>
c001abc3:	83 c4 10             	add    esp,0x10
c001abc6:	31 c0                	xor    eax,eax
c001abc8:	83 c4 0c             	add    esp,0xc
c001abcb:	31 d2                	xor    edx,edx
c001abcd:	5b                   	pop    ebx
c001abce:	5e                   	pop    esi
c001abcf:	5f                   	pop    edi
c001abd0:	5d                   	pop    ebp
c001abd1:	c3                   	ret    

c001abd2 <Sys::loadDLL(regs*)>:
c001abd2:	56                   	push   esi
c001abd3:	53                   	push   ebx
c001abd4:	31 d2                	xor    edx,edx
c001abd6:	51                   	push   ecx
c001abd7:	b8 01 00 00 00       	mov    eax,0x1
c001abdc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001abe0:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001abe4:	0f 84 8c 00 00 00    	je     c001ac76 <Sys::loadDLL(regs*)+0xa4>
c001abea:	83 ec 0c             	sub    esp,0xc
c001abed:	68 14 01 00 00       	push   0x114
c001abf2:	e8 a2 49 ff ff       	call   c000f599 <malloc>
c001abf7:	83 c4 0c             	add    esp,0xc
c001abfa:	89 c3                	mov    ebx,eax
c001abfc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac01:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ac04:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ac07:	53                   	push   ebx
c001ac08:	e8 87 7e ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c001ac0d:	83 c4 10             	add    esp,0x10
c001ac10:	31 d2                	xor    edx,edx
c001ac12:	b8 02 00 00 00       	mov    eax,0x2
c001ac17:	85 db                	test   ebx,ebx
c001ac19:	74 5b                	je     c001ac76 <Sys::loadDLL(regs*)+0xa4>
c001ac1b:	83 ec 0c             	sub    esp,0xc
c001ac1e:	53                   	push   ebx
c001ac1f:	e8 42 81 ff ff       	call   c0012d66 <File::exists()>
c001ac24:	83 c4 10             	add    esp,0x10
c001ac27:	84 c0                	test   al,al
c001ac29:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac2b:	75 11                	jne    c001ac3e <Sys::loadDLL(regs*)+0x6c>
c001ac2d:	83 ec 0c             	sub    esp,0xc
c001ac30:	53                   	push   ebx
c001ac31:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac34:	83 c4 10             	add    esp,0x10
c001ac37:	b8 03 00 00 00       	mov    eax,0x3
c001ac3c:	eb 36                	jmp    c001ac74 <Sys::loadDLL(regs*)+0xa2>
c001ac3e:	83 ec 0c             	sub    esp,0xc
c001ac41:	53                   	push   ebx
c001ac42:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac45:	58                   	pop    eax
c001ac46:	5a                   	pop    edx
c001ac47:	6a 00                	push   0x0
c001ac49:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ac4c:	e8 0e 22 00 00       	call   c001ce5f <Thr::loadDLL(char const*, bool)>
c001ac51:	83 c4 10             	add    esp,0x10
c001ac54:	89 c1                	mov    ecx,eax
c001ac56:	31 d2                	xor    edx,edx
c001ac58:	b8 04 00 00 00       	mov    eax,0x4
c001ac5d:	85 c9                	test   ecx,ecx
c001ac5f:	74 15                	je     c001ac76 <Sys::loadDLL(regs*)+0xa4>
c001ac61:	53                   	push   ebx
c001ac62:	53                   	push   ebx
c001ac63:	ff 35 e8 d5 02 c0    	push   DWORD PTR ds:0xc002d5e8
c001ac69:	51                   	push   ecx
c001ac6a:	e8 1b 24 00 00       	call   c001d08a <Thr::executeDLL(unsigned long, void*)>
c001ac6f:	83 c4 10             	add    esp,0x10
c001ac72:	31 c0                	xor    eax,eax
c001ac74:	31 d2                	xor    edx,edx
c001ac76:	59                   	pop    ecx
c001ac77:	5b                   	pop    ebx
c001ac78:	5e                   	pop    esi
c001ac79:	c3                   	ret    

c001ac7a <Sys::read(regs*)>:
c001ac7a:	57                   	push   edi
c001ac7b:	56                   	push   esi
c001ac7c:	53                   	push   ebx
c001ac7d:	83 ec 10             	sub    esp,0x10
c001ac80:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ac84:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ac87:	83 f8 02             	cmp    eax,0x2
c001ac8a:	77 10                	ja     c001ac9c <Sys::read(regs*)+0x22>
c001ac8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac91:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac94:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ac9a:	eb 0e                	jmp    c001acaa <Sys::read(regs*)+0x30>
c001ac9c:	83 ec 0c             	sub    esp,0xc
c001ac9f:	50                   	push   eax
c001aca0:	e8 a2 63 ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001aca5:	83 c4 10             	add    esp,0x10
c001aca8:	89 c1                	mov    ecx,eax
c001acaa:	83 c8 ff             	or     eax,0xffffffff
c001acad:	85 c9                	test   ecx,ecx
c001acaf:	89 c2                	mov    edx,eax
c001acb1:	74 28                	je     c001acdb <Sys::read(regs*)+0x61>
c001acb3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acbb:	31 ff                	xor    edi,edi
c001acbd:	83 ec 0c             	sub    esp,0xc
c001acc0:	8b 01                	mov    eax,DWORD PTR [ecx]
c001acc2:	8d 54 24 18          	lea    edx,[esp+0x18]
c001acc6:	52                   	push   edx
c001acc7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001acca:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001accd:	57                   	push   edi
c001acce:	56                   	push   esi
c001accf:	51                   	push   ecx
c001acd0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001acd3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001acd7:	83 c4 20             	add    esp,0x20
c001acda:	99                   	cdq    
c001acdb:	83 c4 10             	add    esp,0x10
c001acde:	5b                   	pop    ebx
c001acdf:	5e                   	pop    esi
c001ace0:	5f                   	pop    edi
c001ace1:	c3                   	ret    

c001ace2 <Sys::sbrk(regs*)>:
c001ace2:	56                   	push   esi
c001ace3:	53                   	push   ebx
c001ace4:	50                   	push   eax
c001ace5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001acf1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001acf4:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001acfa:	85 db                	test   ebx,ebx
c001acfc:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001acff:	74 02                	je     c001ad03 <Sys::sbrk(regs*)+0x21>
c001ad01:	79 06                	jns    c001ad09 <Sys::sbrk(regs*)+0x27>
c001ad03:	89 f0                	mov    eax,esi
c001ad05:	31 d2                	xor    edx,edx
c001ad07:	eb 2a                	jmp    c001ad33 <Sys::sbrk(regs*)+0x51>
c001ad09:	83 c8 ff             	or     eax,0xffffffff
c001ad0c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001ad12:	89 c2                	mov    edx,eax
c001ad14:	77 1d                	ja     c001ad33 <Sys::sbrk(regs*)+0x51>
c001ad16:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001ad1c:	50                   	push   eax
c001ad1d:	c1 ea 0c             	shr    edx,0xc
c001ad20:	68 07 0c 00 00       	push   0xc07
c001ad25:	52                   	push   edx
c001ad26:	51                   	push   ecx
c001ad27:	e8 30 6d ff ff       	call   c0011a5c <VAS::allocatePages(int, int)>
c001ad2c:	89 f0                	mov    eax,esi
c001ad2e:	31 d2                	xor    edx,edx
c001ad30:	83 c4 10             	add    esp,0x10
c001ad33:	59                   	pop    ecx
c001ad34:	5b                   	pop    ebx
c001ad35:	5e                   	pop    esi
c001ad36:	c3                   	ret    

c001ad37 <Sys::setCwd(regs*)>:
c001ad37:	83 ec 14             	sub    esp,0x14
c001ad3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad3e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ad41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad46:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad49:	e8 b7 80 ff ff       	call   c0012e05 <Fs::setcwd(Process*, char*)>
c001ad4e:	83 c4 1c             	add    esp,0x1c
c001ad51:	99                   	cdq    
c001ad52:	c3                   	ret    

c001ad53 <Sys::setTime(regs*)>:
c001ad53:	55                   	push   ebp
c001ad54:	31 c9                	xor    ecx,ecx
c001ad56:	57                   	push   edi
c001ad57:	bd 0c 00 00 00       	mov    ebp,0xc
c001ad5c:	56                   	push   esi
c001ad5d:	53                   	push   ebx
c001ad5e:	31 db                	xor    ebx,ebx
c001ad60:	83 ec 10             	sub    esp,0x10
c001ad63:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ad67:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001ad6a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001ad6d:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001ad70:	89 c2                	mov    edx,eax
c001ad72:	66 81 ef 6c 07       	sub    di,0x76c
c001ad77:	83 e2 1f             	and    edx,0x1f
c001ad7a:	c1 e7 10             	shl    edi,0x10
c001ad7d:	42                   	inc    edx
c001ad7e:	c1 e8 05             	shr    eax,0x5
c001ad81:	88 d1                	mov    cl,dl
c001ad83:	31 d2                	xor    edx,edx
c001ad85:	f7 f5                	div    ebp
c001ad87:	89 dd                	mov    ebp,ebx
c001ad89:	88 d5                	mov    ch,dl
c001ad8b:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001ad91:	0f b7 c1             	movzx  eax,cx
c001ad94:	31 d2                	xor    edx,edx
c001ad96:	09 f8                	or     eax,edi
c001ad98:	bf 3c 00 00 00       	mov    edi,0x3c
c001ad9d:	89 c1                	mov    ecx,eax
c001ad9f:	89 f0                	mov    eax,esi
c001ada1:	f7 f7                	div    edi
c001ada3:	c1 e2 10             	shl    edx,0x10
c001ada6:	09 d5                	or     ebp,edx
c001ada8:	31 d2                	xor    edx,edx
c001adaa:	89 eb                	mov    ebx,ebp
c001adac:	f7 f7                	div    edi
c001adae:	bf 10 0e 00 00       	mov    edi,0xe10
c001adb3:	88 d7                	mov    bh,dl
c001adb5:	89 f0                	mov    eax,esi
c001adb7:	31 d2                	xor    edx,edx
c001adb9:	f7 f7                	div    edi
c001adbb:	bf 18 00 00 00       	mov    edi,0x18
c001adc0:	31 d2                	xor    edx,edx
c001adc2:	f7 f7                	div    edi
c001adc4:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c001adc9:	88 d3                	mov    bl,dl
c001adcb:	53                   	push   ebx
c001adcc:	51                   	push   ecx
c001adcd:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001add3:	e8 76 88 ff ff       	call   c001364e <Clock::setTimeInDatetimeLocal(datetime_t)>
c001add8:	83 c4 1c             	add    esp,0x1c
c001addb:	83 f0 01             	xor    eax,0x1
c001adde:	5b                   	pop    ebx
c001addf:	0f b6 c0             	movzx  eax,al
c001ade2:	5e                   	pop    esi
c001ade3:	31 d2                	xor    edx,edx
c001ade5:	5f                   	pop    edi
c001ade6:	5d                   	pop    ebp
c001ade7:	c3                   	ret    

c001ade8 <Sys::timezone(regs*)>:
c001ade8:	53                   	push   ebx
c001ade9:	83 ec 08             	sub    esp,0x8
c001adec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001adf0:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001adf4:	75 17                	jne    c001ae0d <Sys::timezone(regs*)+0x25>
c001adf6:	83 ec 0c             	sub    esp,0xc
c001adf9:	68 d1 b4 02 c0       	push   0xc002b4d1
c001adfe:	e8 32 77 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001ae03:	83 c8 ff             	or     eax,0xffffffff
c001ae06:	83 c4 10             	add    esp,0x10
c001ae09:	89 c2                	mov    edx,eax
c001ae0b:	eb 20                	jmp    c001ae2d <Sys::timezone(regs*)+0x45>
c001ae0d:	83 ec 0c             	sub    esp,0xc
c001ae10:	68 e6 b4 02 c0       	push   0xc002b4e6
c001ae15:	e8 1b 77 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001ae1a:	58                   	pop    eax
c001ae1b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001ae1e:	e8 8d 85 ff ff       	call   c00133b0 <User::loadClockSettings(int)>
c001ae23:	83 c4 10             	add    esp,0x10
c001ae26:	b8 01 00 00 00       	mov    eax,0x1
c001ae2b:	31 d2                	xor    edx,edx
c001ae2d:	83 c4 08             	add    esp,0x8
c001ae30:	5b                   	pop    ebx
c001ae31:	c3                   	ret    

c001ae32 <Sys::write(regs*)>:
c001ae32:	57                   	push   edi
c001ae33:	56                   	push   esi
c001ae34:	53                   	push   ebx
c001ae35:	83 ec 10             	sub    esp,0x10
c001ae38:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae3c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae3f:	83 f8 02             	cmp    eax,0x2
c001ae42:	77 10                	ja     c001ae54 <Sys::write(regs*)+0x22>
c001ae44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae49:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae4c:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae52:	eb 0e                	jmp    c001ae62 <Sys::write(regs*)+0x30>
c001ae54:	83 ec 0c             	sub    esp,0xc
c001ae57:	50                   	push   eax
c001ae58:	e8 ea 61 ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001ae5d:	83 c4 10             	add    esp,0x10
c001ae60:	89 c1                	mov    ecx,eax
c001ae62:	83 c8 ff             	or     eax,0xffffffff
c001ae65:	85 c9                	test   ecx,ecx
c001ae67:	89 c2                	mov    edx,eax
c001ae69:	74 28                	je     c001ae93 <Sys::write(regs*)+0x61>
c001ae6b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae73:	31 ff                	xor    edi,edi
c001ae75:	83 ec 0c             	sub    esp,0xc
c001ae78:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae7a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae7e:	52                   	push   edx
c001ae7f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae82:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae85:	57                   	push   edi
c001ae86:	56                   	push   esi
c001ae87:	51                   	push   ecx
c001ae88:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001ae8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae8f:	83 c4 20             	add    esp,0x20
c001ae92:	99                   	cdq    
c001ae93:	83 c4 10             	add    esp,0x10
c001ae96:	5b                   	pop    ebx
c001ae97:	5e                   	pop    esi
c001ae98:	5f                   	pop    edi
c001ae99:	c3                   	ret    

c001ae9a <Sys::wsbe(regs*)>:
c001ae9a:	57                   	push   edi
c001ae9b:	b9 0b 00 00 00       	mov    ecx,0xb
c001aea0:	56                   	push   esi
c001aea1:	be 25 b5 02 c0       	mov    esi,0xc002b525
c001aea6:	53                   	push   ebx
c001aea7:	83 ec 30             	sub    esp,0x30
c001aeaa:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aeae:	fc                   	cld    
c001aeaf:	83 ec 0c             	sub    esp,0xc
c001aeb2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aeb4:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001aeb8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aebd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aec0:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001aec6:	8b 06                	mov    eax,DWORD PTR [esi]
c001aec8:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001aecb:	57                   	push   edi
c001aecc:	e8 9b 58 fe ff       	call   c000076c <strlen>
c001aed1:	5a                   	pop    edx
c001aed2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001aed6:	52                   	push   edx
c001aed7:	31 d2                	xor    edx,edx
c001aed9:	57                   	push   edi
c001aeda:	52                   	push   edx
c001aedb:	50                   	push   eax
c001aedc:	56                   	push   esi
c001aedd:	ff d3                	call   ebx
c001aedf:	83 c4 14             	add    esp,0x14
c001aee2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aee6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001aee9:	e8 d1 31 00 00       	call   c001e0bf <terminateTask(int)>
c001aeee:	83 c4 40             	add    esp,0x40
c001aef1:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001aef6:	5b                   	pop    ebx
c001aef7:	31 d2                	xor    edx,edx
c001aef9:	5e                   	pop    esi
c001aefa:	5f                   	pop    edi
c001aefb:	c3                   	ret    

c001aefc <Sys::yield(regs*)>:
c001aefc:	57                   	push   edi
c001aefd:	56                   	push   esi
c001aefe:	53                   	push   ebx
c001aeff:	fa                   	cli    
c001af00:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001af06:	e8 14 29 00 00       	call   c001d81f <schedule()>
c001af0b:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001af10:	48                   	dec    eax
c001af11:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001af16:	75 01                	jne    c001af19 <Sys::yield(regs*)+0x1d>
c001af18:	fb                   	sti    
c001af19:	8b 35 50 dc 02 c0    	mov    esi,DWORD PTR ds:0xc002dc50
c001af1f:	8b 3d 54 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dc54
c001af25:	89 f0                	mov    eax,esi
c001af27:	89 fb                	mov    ebx,edi
c001af29:	89 f1                	mov    ecx,esi
c001af2b:	c1 e0 07             	shl    eax,0x7
c001af2e:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001af32:	25 80 30 0f 00       	and    eax,0xf3080
c001af37:	c1 eb 17             	shr    ebx,0x17
c001af3a:	31 c8                	xor    eax,ecx
c001af3c:	89 da                	mov    edx,ebx
c001af3e:	5b                   	pop    ebx
c001af3f:	5e                   	pop    esi
c001af40:	5f                   	pop    edi
c001af41:	c3                   	ret    

c001af42 <sysCallSeekDir(regs*)>:
c001af42:	31 c0                	xor    eax,eax
c001af44:	31 d2                	xor    edx,edx
c001af46:	c3                   	ret    

c001af47 <sysCallTellDir(regs*)>:
c001af47:	31 c0                	xor    eax,eax
c001af49:	31 d2                	xor    edx,edx
c001af4b:	c3                   	ret    

c001af4c <sysCallVerify(regs*)>:
c001af4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af50:	31 d2                	xor    edx,edx
c001af52:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001af55:	c3                   	ret    

c001af56 <sysCallGetArgc(regs*)>:
c001af56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af5b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af5e:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001af64:	99                   	cdq    
c001af65:	c3                   	ret    

c001af66 <sysFormatDisk(regs*)>:
c001af66:	56                   	push   esi
c001af67:	53                   	push   ebx
c001af68:	53                   	push   ebx
c001af69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af6d:	8b 1d 54 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d754
c001af73:	eb 25                	jmp    c001af9a <sysFormatDisk(regs*)+0x34>
c001af75:	83 ec 0c             	sub    esp,0xc
c001af78:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001af7b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001af7d:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001af80:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001af83:	50                   	push   eax
c001af84:	ff 34 85 e0 db 02 c0 	push   DWORD PTR [eax*4-0x3ffd2420]
c001af8b:	53                   	push   ebx
c001af8c:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001af8f:	83 c4 20             	add    esp,0x20
c001af92:	83 f8 08             	cmp    eax,0x8
c001af95:	75 12                	jne    c001afa9 <sysFormatDisk(regs*)+0x43>
c001af97:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001af9a:	85 db                	test   ebx,ebx
c001af9c:	75 d7                	jne    c001af75 <sysFormatDisk(regs*)+0xf>
c001af9e:	59                   	pop    ecx
c001af9f:	b8 03 00 00 00       	mov    eax,0x3
c001afa4:	31 d2                	xor    edx,edx
c001afa6:	5b                   	pop    ebx
c001afa7:	5e                   	pop    esi
c001afa8:	c3                   	ret    
c001afa9:	85 c0                	test   eax,eax
c001afab:	74 1b                	je     c001afc8 <sysFormatDisk(regs*)+0x62>
c001afad:	83 f8 09             	cmp    eax,0x9
c001afb0:	74 0b                	je     c001afbd <sysFormatDisk(regs*)+0x57>
c001afb2:	59                   	pop    ecx
c001afb3:	b8 02 00 00 00       	mov    eax,0x2
c001afb8:	31 d2                	xor    edx,edx
c001afba:	5b                   	pop    ebx
c001afbb:	5e                   	pop    esi
c001afbc:	c3                   	ret    
c001afbd:	59                   	pop    ecx
c001afbe:	b8 01 00 00 00       	mov    eax,0x1
c001afc3:	31 d2                	xor    edx,edx
c001afc5:	5b                   	pop    ebx
c001afc6:	5e                   	pop    esi
c001afc7:	c3                   	ret    
c001afc8:	59                   	pop    ecx
c001afc9:	31 c0                	xor    eax,eax
c001afcb:	31 d2                	xor    edx,edx
c001afcd:	5b                   	pop    ebx
c001afce:	5e                   	pop    esi
c001afcf:	c3                   	ret    

c001afd0 <sysSetDiskVolumeLabel(regs*)>:
c001afd0:	56                   	push   esi
c001afd1:	53                   	push   ebx
c001afd2:	53                   	push   ebx
c001afd3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001afd7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001afda:	83 f8 19             	cmp    eax,0x19
c001afdd:	77 29                	ja     c001b008 <sysSetDiskVolumeLabel(regs*)+0x38>
c001afdf:	8b 0c 85 e0 db 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2420]
c001afe6:	85 c9                	test   ecx,ecx
c001afe8:	74 1e                	je     c001b008 <sysSetDiskVolumeLabel(regs*)+0x38>
c001afea:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001afed:	85 d2                	test   edx,edx
c001afef:	74 17                	je     c001b008 <sysSetDiskVolumeLabel(regs*)+0x38>
c001aff1:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001aff7:	8b 33                	mov    esi,DWORD PTR [ebx]
c001aff9:	52                   	push   edx
c001affa:	50                   	push   eax
c001affb:	51                   	push   ecx
c001affc:	53                   	push   ebx
c001affd:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b000:	83 c4 10             	add    esp,0x10
c001b003:	99                   	cdq    
c001b004:	59                   	pop    ecx
c001b005:	5b                   	pop    ebx
c001b006:	5e                   	pop    esi
c001b007:	c3                   	ret    
c001b008:	59                   	pop    ecx
c001b009:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b00e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b013:	5b                   	pop    ebx
c001b014:	5e                   	pop    esi
c001b015:	c3                   	ret    

c001b016 <sysGetDiskVolumeLabel(regs*)>:
c001b016:	57                   	push   edi
c001b017:	56                   	push   esi
c001b018:	53                   	push   ebx
c001b019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b01d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b020:	83 fa 19             	cmp    edx,0x19
c001b023:	77 34                	ja     c001b059 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b025:	8b 0c 95 e0 db 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd2420]
c001b02c:	85 c9                	test   ecx,ecx
c001b02e:	74 29                	je     c001b059 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b030:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b033:	85 db                	test   ebx,ebx
c001b035:	74 22                	je     c001b059 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b037:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b03a:	85 c0                	test   eax,eax
c001b03c:	74 1b                	je     c001b059 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b03e:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b044:	83 ec 0c             	sub    esp,0xc
c001b047:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b049:	50                   	push   eax
c001b04a:	53                   	push   ebx
c001b04b:	52                   	push   edx
c001b04c:	51                   	push   ecx
c001b04d:	56                   	push   esi
c001b04e:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b051:	83 c4 20             	add    esp,0x20
c001b054:	99                   	cdq    
c001b055:	5b                   	pop    ebx
c001b056:	5e                   	pop    esi
c001b057:	5f                   	pop    edi
c001b058:	c3                   	ret    
c001b059:	5b                   	pop    ebx
c001b05a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b05f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b064:	5e                   	pop    esi
c001b065:	5f                   	pop    edi
c001b066:	c3                   	ret    

c001b067 <sysShutdown(regs*)>:
c001b067:	83 ec 0c             	sub    esp,0xc
c001b06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b06e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b071:	85 c0                	test   eax,eax
c001b073:	74 18                	je     c001b08d <sysShutdown(regs*)+0x26>
c001b075:	83 f8 01             	cmp    eax,0x1
c001b078:	74 38                	je     c001b0b2 <sysShutdown(regs*)+0x4b>
c001b07a:	83 f8 02             	cmp    eax,0x2
c001b07d:	74 24                	je     c001b0a3 <sysShutdown(regs*)+0x3c>
c001b07f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b084:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b089:	83 c4 0c             	add    esp,0xc
c001b08c:	c3                   	ret    
c001b08d:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c001b092:	8b 10                	mov    edx,DWORD PTR [eax]
c001b094:	6a 00                	push   0x0
c001b096:	6a 00                	push   0x0
c001b098:	6a 00                	push   0x0
c001b09a:	50                   	push   eax
c001b09b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b09e:	83 c4 10             	add    esp,0x10
c001b0a1:	eb dc                	jmp    c001b07f <sysShutdown(regs*)+0x18>
c001b0a3:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c001b0a8:	8b 10                	mov    edx,DWORD PTR [eax]
c001b0aa:	6a 00                	push   0x0
c001b0ac:	6a 00                	push   0x0
c001b0ae:	6a 01                	push   0x1
c001b0b0:	eb e8                	jmp    c001b09a <sysShutdown(regs*)+0x33>
c001b0b2:	a1 80 fc 02 c0       	mov    eax,ds:0xc002fc80
c001b0b7:	85 c0                	test   eax,eax
c001b0b9:	74 02                	je     c001b0bd <sysShutdown(regs*)+0x56>
c001b0bb:	ff d0                	call   eax
c001b0bd:	31 c0                	xor    eax,eax
c001b0bf:	31 d2                	xor    edx,edx
c001b0c1:	83 c4 0c             	add    esp,0xc
c001b0c4:	c3                   	ret    

c001b0c5 <sysCallRealpath(regs*)>:
c001b0c5:	83 ec 0c             	sub    esp,0xc
c001b0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0cc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b0cf:	85 d2                	test   edx,edx
c001b0d1:	74 07                	je     c001b0da <sysCallRealpath(regs*)+0x15>
c001b0d3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b0d6:	85 c0                	test   eax,eax
c001b0d8:	75 0b                	jne    c001b0e5 <sysCallRealpath(regs*)+0x20>
c001b0da:	b8 01 00 00 00       	mov    eax,0x1
c001b0df:	31 d2                	xor    edx,edx
c001b0e1:	83 c4 0c             	add    esp,0xc
c001b0e4:	c3                   	ret    
c001b0e5:	51                   	push   ecx
c001b0e6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b0ec:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b0ef:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b0f5:	51                   	push   ecx
c001b0f6:	52                   	push   edx
c001b0f7:	50                   	push   eax
c001b0f8:	e8 ed 77 ff ff       	call   c00128ea <Fs::standardiseFiles(char*, char const*, char const*)>
c001b0fd:	83 c4 10             	add    esp,0x10
c001b100:	31 c0                	xor    eax,eax
c001b102:	31 d2                	xor    edx,edx
c001b104:	83 c4 0c             	add    esp,0xc
c001b107:	c3                   	ret    

c001b108 <sysCallReadDir(regs*)>:
c001b108:	53                   	push   ebx
c001b109:	83 ec 18             	sub    esp,0x18
c001b10c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b110:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b113:	83 f8 02             	cmp    eax,0x2
c001b116:	76 60                	jbe    c001b178 <sysCallReadDir(regs*)+0x70>
c001b118:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b11f:	77 48                	ja     c001b169 <sysCallReadDir(regs*)+0x61>
c001b121:	83 ec 0c             	sub    esp,0xc
c001b124:	50                   	push   eax
c001b125:	e8 1d 5f ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001b12a:	83 c4 10             	add    esp,0x10
c001b12d:	85 c0                	test   eax,eax
c001b12f:	74 38                	je     c001b169 <sysCallReadDir(regs*)+0x61>
c001b131:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b139:	83 ec 0c             	sub    esp,0xc
c001b13c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b13e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b142:	51                   	push   ecx
c001b143:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b146:	6a 00                	push   0x0
c001b148:	68 10 01 00 00       	push   0x110
c001b14d:	50                   	push   eax
c001b14e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b151:	83 c4 20             	add    esp,0x20
c001b154:	85 c0                	test   eax,eax
c001b156:	74 29                	je     c001b181 <sysCallReadDir(regs*)+0x79>
c001b158:	83 f8 07             	cmp    eax,0x7
c001b15b:	74 1b                	je     c001b178 <sysCallReadDir(regs*)+0x70>
c001b15d:	b8 02 00 00 00       	mov    eax,0x2
c001b162:	31 d2                	xor    edx,edx
c001b164:	83 c4 18             	add    esp,0x18
c001b167:	5b                   	pop    ebx
c001b168:	c3                   	ret    
c001b169:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b16e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b173:	83 c4 18             	add    esp,0x18
c001b176:	5b                   	pop    ebx
c001b177:	c3                   	ret    
c001b178:	b8 01 00 00 00       	mov    eax,0x1
c001b17d:	31 d2                	xor    edx,edx
c001b17f:	eb e3                	jmp    c001b164 <sysCallReadDir(regs*)+0x5c>
c001b181:	31 c0                	xor    eax,eax
c001b183:	31 d2                	xor    edx,edx
c001b185:	eb dd                	jmp    c001b164 <sysCallReadDir(regs*)+0x5c>

c001b187 <sysCallIsATTY(regs*)>:
c001b187:	83 ec 0c             	sub    esp,0xc
c001b18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b18e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b191:	83 f8 02             	cmp    eax,0x2
c001b194:	76 07                	jbe    c001b19d <sysCallIsATTY(regs*)+0x16>
c001b196:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b19b:	75 26                	jne    c001b1c3 <sysCallIsATTY(regs*)+0x3c>
c001b19d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1a5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b1ab:	85 c0                	test   eax,eax
c001b1ad:	74 24                	je     c001b1d3 <sysCallIsATTY(regs*)+0x4c>
c001b1af:	83 ec 0c             	sub    esp,0xc
c001b1b2:	8b 10                	mov    edx,DWORD PTR [eax]
c001b1b4:	50                   	push   eax
c001b1b5:	ff 12                	call   DWORD PTR [edx]
c001b1b7:	31 d2                	xor    edx,edx
c001b1b9:	0f b6 c0             	movzx  eax,al
c001b1bc:	83 c4 10             	add    esp,0x10
c001b1bf:	83 c4 0c             	add    esp,0xc
c001b1c2:	c3                   	ret    
c001b1c3:	83 ec 0c             	sub    esp,0xc
c001b1c6:	50                   	push   eax
c001b1c7:	e8 7b 5e ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001b1cc:	83 c4 10             	add    esp,0x10
c001b1cf:	85 c0                	test   eax,eax
c001b1d1:	75 dc                	jne    c001b1af <sysCallIsATTY(regs*)+0x28>
c001b1d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b1d8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1dd:	83 c4 0c             	add    esp,0xc
c001b1e0:	c3                   	ret    

c001b1e1 <sysCallSeek(regs*)>:
c001b1e1:	53                   	push   ebx
c001b1e2:	83 ec 08             	sub    esp,0x8
c001b1e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1e9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b1ec:	8d 50 fd             	lea    edx,[eax-0x3]
c001b1ef:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b1f5:	77 32                	ja     c001b229 <sysCallSeek(regs*)+0x48>
c001b1f7:	83 ec 0c             	sub    esp,0xc
c001b1fa:	50                   	push   eax
c001b1fb:	e8 47 5e ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001b200:	83 c4 0c             	add    esp,0xc
c001b203:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b206:	31 db                	xor    ebx,ebx
c001b208:	53                   	push   ebx
c001b209:	51                   	push   ecx
c001b20a:	50                   	push   eax
c001b20b:	e8 a6 79 ff ff       	call   c0012bb6 <File::seek(unsigned long long)>
c001b210:	83 c4 10             	add    esp,0x10
c001b213:	85 c0                	test   eax,eax
c001b215:	0f 95 c0             	setne  al
c001b218:	31 d2                	xor    edx,edx
c001b21a:	0f b6 c0             	movzx  eax,al
c001b21d:	f7 d8                	neg    eax
c001b21f:	83 d2 00             	adc    edx,0x0
c001b222:	83 c4 08             	add    esp,0x8
c001b225:	f7 da                	neg    edx
c001b227:	5b                   	pop    ebx
c001b228:	c3                   	ret    
c001b229:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b22e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b233:	83 c4 08             	add    esp,0x8
c001b236:	5b                   	pop    ebx
c001b237:	c3                   	ret    

c001b238 <sysCallTell(regs*)>:
c001b238:	53                   	push   ebx
c001b239:	83 ec 08             	sub    esp,0x8
c001b23c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b240:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b243:	83 f8 02             	cmp    eax,0x2
c001b246:	76 4d                	jbe    c001b295 <sysCallTell(regs*)+0x5d>
c001b248:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b24d:	76 19                	jbe    c001b268 <sysCallTell(regs*)+0x30>
c001b24f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b252:	31 d2                	xor    edx,edx
c001b254:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b25a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b261:	31 c0                	xor    eax,eax
c001b263:	83 c4 08             	add    esp,0x8
c001b266:	5b                   	pop    ebx
c001b267:	c3                   	ret    
c001b268:	83 ec 0c             	sub    esp,0xc
c001b26b:	50                   	push   eax
c001b26c:	e8 d6 5d ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001b271:	5a                   	pop    edx
c001b272:	59                   	pop    ecx
c001b273:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b276:	50                   	push   eax
c001b277:	e8 90 79 ff ff       	call   c0012c0c <File::tell(unsigned long long*)>
c001b27c:	83 c4 10             	add    esp,0x10
c001b27f:	85 c0                	test   eax,eax
c001b281:	0f 95 c0             	setne  al
c001b284:	31 d2                	xor    edx,edx
c001b286:	0f b6 c0             	movzx  eax,al
c001b289:	f7 d8                	neg    eax
c001b28b:	83 d2 00             	adc    edx,0x0
c001b28e:	83 c4 08             	add    esp,0x8
c001b291:	f7 da                	neg    edx
c001b293:	5b                   	pop    ebx
c001b294:	c3                   	ret    
c001b295:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b29a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b29f:	83 c4 08             	add    esp,0x8
c001b2a2:	5b                   	pop    ebx
c001b2a3:	c3                   	ret    

c001b2a4 <sysCallSize(regs*)>:
c001b2a4:	53                   	push   ebx
c001b2a5:	83 ec 18             	sub    esp,0x18
c001b2a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2ac:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b2af:	83 f8 02             	cmp    eax,0x2
c001b2b2:	76 53                	jbe    c001b307 <sysCallSize(regs*)+0x63>
c001b2b4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b2b9:	76 19                	jbe    c001b2d4 <sysCallSize(regs*)+0x30>
c001b2bb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b2be:	31 d2                	xor    edx,edx
c001b2c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b2c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b2cd:	31 c0                	xor    eax,eax
c001b2cf:	83 c4 18             	add    esp,0x18
c001b2d2:	5b                   	pop    ebx
c001b2d3:	c3                   	ret    
c001b2d4:	83 ec 0c             	sub    esp,0xc
c001b2d7:	50                   	push   eax
c001b2d8:	e8 6a 5d ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001b2dd:	83 c4 0c             	add    esp,0xc
c001b2e0:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b2e4:	52                   	push   edx
c001b2e5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b2e8:	50                   	push   eax
c001b2e9:	e8 b6 7a ff ff       	call   c0012da4 <File::stat(unsigned long long*, bool*)>
c001b2ee:	83 c4 10             	add    esp,0x10
c001b2f1:	85 c0                	test   eax,eax
c001b2f3:	0f 95 c0             	setne  al
c001b2f6:	31 d2                	xor    edx,edx
c001b2f8:	0f b6 c0             	movzx  eax,al
c001b2fb:	f7 d8                	neg    eax
c001b2fd:	83 d2 00             	adc    edx,0x0
c001b300:	83 c4 18             	add    esp,0x18
c001b303:	f7 da                	neg    edx
c001b305:	5b                   	pop    ebx
c001b306:	c3                   	ret    
c001b307:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b30c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b311:	83 c4 18             	add    esp,0x18
c001b314:	5b                   	pop    ebx
c001b315:	c3                   	ret    

c001b316 <sysCallSizeFromFilename(regs*)>:
c001b316:	57                   	push   edi
c001b317:	56                   	push   esi
c001b318:	53                   	push   ebx
c001b319:	83 ec 20             	sub    esp,0x20
c001b31c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b320:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b323:	83 fb 02             	cmp    ebx,0x2
c001b326:	0f 86 88 00 00 00    	jbe    c001b3b4 <sysCallSizeFromFilename(regs*)+0x9e>
c001b32c:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b332:	76 1b                	jbe    c001b34f <sysCallSizeFromFilename(regs*)+0x39>
c001b334:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b337:	31 d2                	xor    edx,edx
c001b339:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b33f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b346:	83 c4 20             	add    esp,0x20
c001b349:	31 c0                	xor    eax,eax
c001b34b:	5b                   	pop    ebx
c001b34c:	5e                   	pop    esi
c001b34d:	5f                   	pop    edi
c001b34e:	c3                   	ret    
c001b34f:	83 ec 0c             	sub    esp,0xc
c001b352:	68 14 01 00 00       	push   0x114
c001b357:	e8 3d 42 ff ff       	call   c000f599 <malloc>
c001b35c:	83 c4 0c             	add    esp,0xc
c001b35f:	89 c7                	mov    edi,eax
c001b361:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b366:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b369:	53                   	push   ebx
c001b36a:	57                   	push   edi
c001b36b:	e8 24 77 ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c001b370:	83 c4 0c             	add    esp,0xc
c001b373:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b377:	50                   	push   eax
c001b378:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b37b:	57                   	push   edi
c001b37c:	e8 23 7a ff ff       	call   c0012da4 <File::stat(unsigned long long*, bool*)>
c001b381:	83 c4 10             	add    esp,0x10
c001b384:	85 ff                	test   edi,edi
c001b386:	74 14                	je     c001b39c <sysCallSizeFromFilename(regs*)+0x86>
c001b388:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b38c:	8b 17                	mov    edx,DWORD PTR [edi]
c001b38e:	83 ec 0c             	sub    esp,0xc
c001b391:	57                   	push   edi
c001b392:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b395:	83 c4 10             	add    esp,0x10
c001b398:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b39c:	85 c0                	test   eax,eax
c001b39e:	0f 95 c0             	setne  al
c001b3a1:	31 d2                	xor    edx,edx
c001b3a3:	0f b6 c0             	movzx  eax,al
c001b3a6:	f7 d8                	neg    eax
c001b3a8:	83 d2 00             	adc    edx,0x0
c001b3ab:	83 c4 20             	add    esp,0x20
c001b3ae:	f7 da                	neg    edx
c001b3b0:	5b                   	pop    ebx
c001b3b1:	5e                   	pop    esi
c001b3b2:	5f                   	pop    edi
c001b3b3:	c3                   	ret    
c001b3b4:	83 c4 20             	add    esp,0x20
c001b3b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3bc:	5b                   	pop    ebx
c001b3bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3c2:	5e                   	pop    esi
c001b3c3:	5f                   	pop    edi
c001b3c4:	c3                   	ret    

c001b3c5 <sysCallClose(regs*)>:
c001b3c5:	53                   	push   ebx
c001b3c6:	83 ec 08             	sub    esp,0x8
c001b3c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b3d0:	83 f8 02             	cmp    eax,0x2
c001b3d3:	76 41                	jbe    c001b416 <sysCallClose(regs*)+0x51>
c001b3d5:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b3db:	83 fa 01             	cmp    edx,0x1
c001b3de:	76 2d                	jbe    c001b40d <sysCallClose(regs*)+0x48>
c001b3e0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b3e5:	77 2f                	ja     c001b416 <sysCallClose(regs*)+0x51>
c001b3e7:	83 ec 0c             	sub    esp,0xc
c001b3ea:	50                   	push   eax
c001b3eb:	e8 57 5c ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001b3f0:	89 c3                	mov    ebx,eax
c001b3f2:	89 04 24             	mov    DWORD PTR [esp],eax
c001b3f5:	e8 5c 77 ff ff       	call   c0012b56 <File::close()>
c001b3fa:	83 c4 10             	add    esp,0x10
c001b3fd:	85 db                	test   ebx,ebx
c001b3ff:	74 0c                	je     c001b40d <sysCallClose(regs*)+0x48>
c001b401:	83 ec 0c             	sub    esp,0xc
c001b404:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b406:	53                   	push   ebx
c001b407:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b40a:	83 c4 10             	add    esp,0x10
c001b40d:	31 c0                	xor    eax,eax
c001b40f:	31 d2                	xor    edx,edx
c001b411:	83 c4 08             	add    esp,0x8
c001b414:	5b                   	pop    ebx
c001b415:	c3                   	ret    
c001b416:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b41b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b420:	83 c4 08             	add    esp,0x8
c001b423:	5b                   	pop    ebx
c001b424:	c3                   	ret    

c001b425 <sysCallOpenDir(regs*)>:
c001b425:	56                   	push   esi
c001b426:	53                   	push   ebx
c001b427:	53                   	push   ebx
c001b428:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b42c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b42f:	85 f6                	test   esi,esi
c001b431:	74 59                	je     c001b48c <sysCallOpenDir(regs*)+0x67>
c001b433:	83 ec 0c             	sub    esp,0xc
c001b436:	68 14 01 00 00       	push   0x114
c001b43b:	e8 59 41 ff ff       	call   c000f599 <malloc>
c001b440:	83 c4 0c             	add    esp,0xc
c001b443:	89 c6                	mov    esi,eax
c001b445:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b44a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b44d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b450:	56                   	push   esi
c001b451:	e8 ea 7a ff ff       	call   c0012f40 <Directory::Directory(char const*, Process*)>
c001b456:	83 c4 10             	add    esp,0x10
c001b459:	85 f6                	test   esi,esi
c001b45b:	74 2f                	je     c001b48c <sysCallOpenDir(regs*)+0x67>
c001b45d:	83 ec 0c             	sub    esp,0xc
c001b460:	56                   	push   esi
c001b461:	e8 3e 7b ff ff       	call   c0012fa4 <Directory::open()>
c001b466:	83 c4 10             	add    esp,0x10
c001b469:	85 c0                	test   eax,eax
c001b46b:	75 1f                	jne    c001b48c <sysCallOpenDir(regs*)+0x67>
c001b46d:	83 ec 0c             	sub    esp,0xc
c001b470:	56                   	push   esi
c001b471:	e8 dc 58 ff ff       	call   c0010d52 <UnixFile::getFileDescriptor()>
c001b476:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b479:	83 c4 10             	add    esp,0x10
c001b47c:	89 02                	mov    DWORD PTR [edx],eax
c001b47e:	c1 f8 1f             	sar    eax,0x1f
c001b481:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b484:	31 c0                	xor    eax,eax
c001b486:	59                   	pop    ecx
c001b487:	31 d2                	xor    edx,edx
c001b489:	5b                   	pop    ebx
c001b48a:	5e                   	pop    esi
c001b48b:	c3                   	ret    
c001b48c:	59                   	pop    ecx
c001b48d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b492:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b497:	5b                   	pop    ebx
c001b498:	5e                   	pop    esi
c001b499:	c3                   	ret    

c001b49a <sysCallCloseDir(regs*)>:
c001b49a:	53                   	push   ebx
c001b49b:	83 ec 08             	sub    esp,0x8
c001b49e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4a2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b4a5:	8d 50 fd             	lea    edx,[eax-0x3]
c001b4a8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b4ae:	77 2f                	ja     c001b4df <sysCallCloseDir(regs*)+0x45>
c001b4b0:	83 ec 0c             	sub    esp,0xc
c001b4b3:	50                   	push   eax
c001b4b4:	e8 8e 5b ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001b4b9:	89 c3                	mov    ebx,eax
c001b4bb:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4be:	e8 3d 7b ff ff       	call   c0013000 <Directory::close()>
c001b4c3:	83 c4 10             	add    esp,0x10
c001b4c6:	85 db                	test   ebx,ebx
c001b4c8:	74 0c                	je     c001b4d6 <sysCallCloseDir(regs*)+0x3c>
c001b4ca:	83 ec 0c             	sub    esp,0xc
c001b4cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4cf:	53                   	push   ebx
c001b4d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b4d3:	83 c4 10             	add    esp,0x10
c001b4d6:	31 c0                	xor    eax,eax
c001b4d8:	31 d2                	xor    edx,edx
c001b4da:	83 c4 08             	add    esp,0x8
c001b4dd:	5b                   	pop    ebx
c001b4de:	c3                   	ret    
c001b4df:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b4e4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b4e9:	83 c4 08             	add    esp,0x8
c001b4ec:	5b                   	pop    ebx
c001b4ed:	c3                   	ret    

c001b4ee <sysCallMakeDir(regs*)>:
c001b4ee:	56                   	push   esi
c001b4ef:	53                   	push   ebx
c001b4f0:	83 ec 10             	sub    esp,0x10
c001b4f3:	68 14 01 00 00       	push   0x114
c001b4f8:	e8 9c 40 ff ff       	call   c000f599 <malloc>
c001b4fd:	83 c4 0c             	add    esp,0xc
c001b500:	89 c3                	mov    ebx,eax
c001b502:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b507:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b50a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b50e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b511:	53                   	push   ebx
c001b512:	e8 29 7a ff ff       	call   c0012f40 <Directory::Directory(char const*, Process*)>
c001b517:	83 c4 10             	add    esp,0x10
c001b51a:	85 db                	test   ebx,ebx
c001b51c:	74 32                	je     c001b550 <sysCallMakeDir(regs*)+0x62>
c001b51e:	83 ec 0c             	sub    esp,0xc
c001b521:	53                   	push   ebx
c001b522:	e8 5d 7c ff ff       	call   c0013184 <Directory::create()>
c001b527:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b52a:	89 c6                	mov    esi,eax
c001b52c:	e8 cf 7a ff ff       	call   c0013000 <Directory::close()>
c001b531:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b533:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b536:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b539:	83 c4 10             	add    esp,0x10
c001b53c:	31 c0                	xor    eax,eax
c001b53e:	59                   	pop    ecx
c001b53f:	85 f6                	test   esi,esi
c001b541:	5b                   	pop    ebx
c001b542:	0f 95 c0             	setne  al
c001b545:	5e                   	pop    esi
c001b546:	31 d2                	xor    edx,edx
c001b548:	f7 d8                	neg    eax
c001b54a:	83 d2 00             	adc    edx,0x0
c001b54d:	f7 da                	neg    edx
c001b54f:	c3                   	ret    
c001b550:	59                   	pop    ecx
c001b551:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b556:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b55b:	5b                   	pop    ebx
c001b55c:	5e                   	pop    esi
c001b55d:	c3                   	ret    

c001b55e <sysCallWait(regs*)>:
c001b55e:	83 ec 10             	sub    esp,0x10
c001b561:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b565:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b568:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b56b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b56e:	e8 af 24 00 00       	call   c001da22 <waitTask(int, int*, int)>
c001b573:	83 c4 1c             	add    esp,0x1c
c001b576:	99                   	cdq    
c001b577:	c3                   	ret    

c001b578 <sysCallNotImpl(regs*)>:
c001b578:	83 ec 18             	sub    esp,0x18
c001b57b:	68 51 b5 02 c0       	push   0xc002b551
c001b580:	e8 10 e7 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001b585:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b58a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b58f:	83 c4 1c             	add    esp,0x1c
c001b592:	c3                   	ret    

c001b593 <sysPanic(regs*)>:
c001b593:	83 ec 18             	sub    esp,0x18
c001b596:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b59a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b59d:	e8 f3 e6 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001b5a2:	b8 01 00 00 00       	mov    eax,0x1
c001b5a7:	31 d2                	xor    edx,edx
c001b5a9:	83 c4 1c             	add    esp,0x1c
c001b5ac:	c3                   	ret    

c001b5ad <sysCallRmdir(regs*)>:
c001b5ad:	56                   	push   esi
c001b5ae:	53                   	push   ebx
c001b5af:	83 ec 20             	sub    esp,0x20
c001b5b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b5b6:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b5b9:	68 14 01 00 00       	push   0x114
c001b5be:	e8 d6 3f ff ff       	call   c000f599 <malloc>
c001b5c3:	83 c4 0c             	add    esp,0xc
c001b5c6:	89 c3                	mov    ebx,eax
c001b5c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5cd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5d0:	56                   	push   esi
c001b5d1:	53                   	push   ebx
c001b5d2:	e8 bd 74 ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c001b5d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b5da:	e8 91 76 ff ff       	call   c0012c70 <File::unlink()>
c001b5df:	83 c4 10             	add    esp,0x10
c001b5e2:	85 db                	test   ebx,ebx
c001b5e4:	74 14                	je     c001b5fa <sysCallRmdir(regs*)+0x4d>
c001b5e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5ea:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b5ec:	83 ec 0c             	sub    esp,0xc
c001b5ef:	53                   	push   ebx
c001b5f0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b5f3:	83 c4 10             	add    esp,0x10
c001b5f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5fa:	85 c0                	test   eax,eax
c001b5fc:	0f 95 c0             	setne  al
c001b5ff:	31 d2                	xor    edx,edx
c001b601:	0f b6 c0             	movzx  eax,al
c001b604:	f7 d8                	neg    eax
c001b606:	83 d2 00             	adc    edx,0x0
c001b609:	83 c4 14             	add    esp,0x14
c001b60c:	f7 da                	neg    edx
c001b60e:	5b                   	pop    ebx
c001b60f:	5e                   	pop    esi
c001b610:	c3                   	ret    

c001b611 <sysCallUnlink(regs*)>:
c001b611:	56                   	push   esi
c001b612:	53                   	push   ebx
c001b613:	83 ec 20             	sub    esp,0x20
c001b616:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b61a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b61d:	68 14 01 00 00       	push   0x114
c001b622:	e8 72 3f ff ff       	call   c000f599 <malloc>
c001b627:	83 c4 0c             	add    esp,0xc
c001b62a:	89 c3                	mov    ebx,eax
c001b62c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b631:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b634:	56                   	push   esi
c001b635:	53                   	push   ebx
c001b636:	e8 59 74 ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c001b63b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b63e:	e8 2d 76 ff ff       	call   c0012c70 <File::unlink()>
c001b643:	83 c4 10             	add    esp,0x10
c001b646:	85 db                	test   ebx,ebx
c001b648:	74 14                	je     c001b65e <sysCallUnlink(regs*)+0x4d>
c001b64a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b64e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b650:	83 ec 0c             	sub    esp,0xc
c001b653:	53                   	push   ebx
c001b654:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b657:	83 c4 10             	add    esp,0x10
c001b65a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b65e:	85 c0                	test   eax,eax
c001b660:	0f 95 c0             	setne  al
c001b663:	31 d2                	xor    edx,edx
c001b665:	0f b6 c0             	movzx  eax,al
c001b668:	f7 d8                	neg    eax
c001b66a:	83 d2 00             	adc    edx,0x0
c001b66d:	83 c4 14             	add    esp,0x14
c001b670:	f7 da                	neg    edx
c001b672:	5b                   	pop    ebx
c001b673:	5e                   	pop    esi
c001b674:	c3                   	ret    

c001b675 <sysCallGetArgv(regs*)>:
c001b675:	83 ec 0c             	sub    esp,0xc
c001b678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b67c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b67f:	85 c0                	test   eax,eax
c001b681:	78 2b                	js     c001b6ae <sysCallGetArgv(regs*)+0x39>
c001b683:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b689:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b68c:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b692:	7d 1a                	jge    c001b6ae <sysCallGetArgv(regs*)+0x39>
c001b694:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b69b:	85 c0                	test   eax,eax
c001b69d:	74 17                	je     c001b6b6 <sysCallGetArgv(regs*)+0x41>
c001b69f:	83 ec 08             	sub    esp,0x8
c001b6a2:	50                   	push   eax
c001b6a3:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b6a6:	e8 61 51 fe ff       	call   c000080c <strcpy>
c001b6ab:	83 c4 10             	add    esp,0x10
c001b6ae:	31 c0                	xor    eax,eax
c001b6b0:	31 d2                	xor    edx,edx
c001b6b2:	83 c4 0c             	add    esp,0xc
c001b6b5:	c3                   	ret    
c001b6b6:	b8 01 00 00 00       	mov    eax,0x1
c001b6bb:	31 d2                	xor    edx,edx
c001b6bd:	83 c4 0c             	add    esp,0xc
c001b6c0:	c3                   	ret    

c001b6c1 <sysCallTTYName(regs*)>:
c001b6c1:	56                   	push   esi
c001b6c2:	53                   	push   ebx
c001b6c3:	53                   	push   ebx
c001b6c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6c8:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b6cb:	85 c0                	test   eax,eax
c001b6cd:	74 5f                	je     c001b72e <sysCallTTYName(regs*)+0x6d>
c001b6cf:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b6d2:	83 f8 02             	cmp    eax,0x2
c001b6d5:	77 3e                	ja     c001b715 <sysCallTTYName(regs*)+0x54>
c001b6d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6df:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b6e5:	85 db                	test   ebx,ebx
c001b6e7:	74 45                	je     c001b72e <sysCallTTYName(regs*)+0x6d>
c001b6e9:	83 ec 0c             	sub    esp,0xc
c001b6ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6ee:	53                   	push   ebx
c001b6ef:	ff 10                	call   DWORD PTR [eax]
c001b6f1:	83 c4 10             	add    esp,0x10
c001b6f4:	84 c0                	test   al,al
c001b6f6:	74 41                	je     c001b739 <sysCallTTYName(regs*)+0x78>
c001b6f8:	83 ec 08             	sub    esp,0x8
c001b6fb:	81 c3 82 00 00 00    	add    ebx,0x82
c001b701:	53                   	push   ebx
c001b702:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b705:	e8 02 51 fe ff       	call   c000080c <strcpy>
c001b70a:	83 c4 10             	add    esp,0x10
c001b70d:	31 c0                	xor    eax,eax
c001b70f:	59                   	pop    ecx
c001b710:	31 d2                	xor    edx,edx
c001b712:	5b                   	pop    ebx
c001b713:	5e                   	pop    esi
c001b714:	c3                   	ret    
c001b715:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b71a:	74 bb                	je     c001b6d7 <sysCallTTYName(regs*)+0x16>
c001b71c:	83 ec 0c             	sub    esp,0xc
c001b71f:	50                   	push   eax
c001b720:	e8 22 59 ff ff       	call   c0011047 <getFromFileDescriptor(int)>
c001b725:	83 c4 10             	add    esp,0x10
c001b728:	89 c3                	mov    ebx,eax
c001b72a:	85 db                	test   ebx,ebx
c001b72c:	75 bb                	jne    c001b6e9 <sysCallTTYName(regs*)+0x28>
c001b72e:	59                   	pop    ecx
c001b72f:	b8 01 00 00 00       	mov    eax,0x1
c001b734:	31 d2                	xor    edx,edx
c001b736:	5b                   	pop    ebx
c001b737:	5e                   	pop    esi
c001b738:	c3                   	ret    
c001b739:	59                   	pop    ecx
c001b73a:	b8 02 00 00 00       	mov    eax,0x2
c001b73f:	31 d2                	xor    edx,edx
c001b741:	5b                   	pop    ebx
c001b742:	5e                   	pop    esi
c001b743:	c3                   	ret    

c001b744 <sysCallUSleep(regs*)>:
c001b744:	83 ec 14             	sub    esp,0x14
c001b747:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b74c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b750:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b757:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b75a:	01 ca                	add    edx,ecx
c001b75c:	52                   	push   edx
c001b75d:	50                   	push   eax
c001b75e:	e8 96 23 00 00       	call   c001daf9 <nanoSleep(unsigned long long)>
c001b763:	31 c0                	xor    eax,eax
c001b765:	31 d2                	xor    edx,edx
c001b767:	83 c4 1c             	add    esp,0x1c
c001b76a:	c3                   	ret    

c001b76b <sysCallSpawn(regs*)>:
c001b76b:	56                   	push   esi
c001b76c:	53                   	push   ebx
c001b76d:	50                   	push   eax
c001b76e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b772:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b775:	85 c0                	test   eax,eax
c001b777:	75 08                	jne    c001b781 <sysCallSpawn(regs*)+0x16>
c001b779:	59                   	pop    ecx
c001b77a:	31 c0                	xor    eax,eax
c001b77c:	31 d2                	xor    edx,edx
c001b77e:	5b                   	pop    ebx
c001b77f:	5e                   	pop    esi
c001b780:	c3                   	ret    
c001b781:	83 ec 0c             	sub    esp,0xc
c001b784:	68 3f 07 00 00       	push   0x73f
c001b789:	e8 0b 3e ff ff       	call   c000f599 <malloc>
c001b78e:	83 c4 10             	add    esp,0x10
c001b791:	89 c6                	mov    esi,eax
c001b793:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b796:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b799:	85 c0                	test   eax,eax
c001b79b:	75 32                	jne    c001b7cf <sysCallSpawn(regs*)+0x64>
c001b79d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7a2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7a5:	52                   	push   edx
c001b7a6:	50                   	push   eax
c001b7a7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b7aa:	56                   	push   esi
c001b7ab:	e8 6e 1a 00 00       	call   c001d21e <Process::Process(char const*, Process*, char**)>
c001b7b0:	83 c4 10             	add    esp,0x10
c001b7b3:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b7ba:	75 bd                	jne    c001b779 <sysCallSpawn(regs*)+0xe>
c001b7bc:	83 ec 0c             	sub    esp,0xc
c001b7bf:	56                   	push   esi
c001b7c0:	e8 3b 1f 00 00       	call   c001d700 <Process::createUserThread()>
c001b7c5:	8b 06                	mov    eax,DWORD PTR [esi]
c001b7c7:	83 c4 10             	add    esp,0x10
c001b7ca:	99                   	cdq    
c001b7cb:	59                   	pop    ecx
c001b7cc:	5b                   	pop    ebx
c001b7cd:	5e                   	pop    esi
c001b7ce:	c3                   	ret    
c001b7cf:	31 c0                	xor    eax,eax
c001b7d1:	eb d2                	jmp    c001b7a5 <sysCallSpawn(regs*)+0x3a>

c001b7d3 <sysCallGetEnv(regs*)>:
c001b7d3:	57                   	push   edi
c001b7d4:	56                   	push   esi
c001b7d5:	53                   	push   ebx
c001b7d6:	83 ec 1c             	sub    esp,0x1c
c001b7d9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b7dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7e2:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b7e5:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b7e8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7eb:	e8 f1 e3 ff ff       	call   c0019be1 <Krnl::getProcessTotalEnvCount(Process*)>
c001b7f0:	83 c4 10             	add    esp,0x10
c001b7f3:	39 c7                	cmp    edi,eax
c001b7f5:	7c 14                	jl     c001b80b <sysCallGetEnv(regs*)+0x38>
c001b7f7:	85 f6                	test   esi,esi
c001b7f9:	75 0b                	jne    c001b806 <sysCallGetEnv(regs*)+0x33>
c001b7fb:	83 c4 10             	add    esp,0x10
c001b7fe:	31 c0                	xor    eax,eax
c001b800:	5b                   	pop    ebx
c001b801:	31 d2                	xor    edx,edx
c001b803:	5e                   	pop    esi
c001b804:	5f                   	pop    edi
c001b805:	c3                   	ret    
c001b806:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b809:	eb f0                	jmp    c001b7fb <sysCallGetEnv(regs*)+0x28>
c001b80b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b80f:	52                   	push   edx
c001b810:	57                   	push   edi
c001b811:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b817:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b81a:	50                   	push   eax
c001b81b:	e8 e1 e3 ff ff       	call   c0019c01 <Krnl::getProcessEnvPair(Process*, int)>
c001b820:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b827:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b82b:	83 c4 0c             	add    esp,0xc
c001b82e:	85 c9                	test   ecx,ecx
c001b830:	75 23                	jne    c001b855 <sysCallGetEnv(regs*)+0x82>
c001b832:	83 ec 0c             	sub    esp,0xc
c001b835:	50                   	push   eax
c001b836:	e8 31 4f fe ff       	call   c000076c <strlen>
c001b83b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b83e:	89 c3                	mov    ebx,eax
c001b840:	e8 27 4f fe ff       	call   c000076c <strlen>
c001b845:	83 c4 10             	add    esp,0x10
c001b848:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b84c:	83 c4 10             	add    esp,0x10
c001b84f:	31 d2                	xor    edx,edx
c001b851:	5b                   	pop    ebx
c001b852:	5e                   	pop    esi
c001b853:	5f                   	pop    edi
c001b854:	c3                   	ret    
c001b855:	83 ec 08             	sub    esp,0x8
c001b858:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b85b:	50                   	push   eax
c001b85c:	56                   	push   esi
c001b85d:	e8 aa 4f fe ff       	call   c000080c <strcpy>
c001b862:	58                   	pop    eax
c001b863:	5a                   	pop    edx
c001b864:	68 6b b5 02 c0       	push   0xc002b56b
c001b869:	56                   	push   esi
c001b86a:	e8 dd 50 fe ff       	call   c000094c <strcat>
c001b86f:	59                   	pop    ecx
c001b870:	5b                   	pop    ebx
c001b871:	57                   	push   edi
c001b872:	56                   	push   esi
c001b873:	e8 d4 50 fe ff       	call   c000094c <strcat>
c001b878:	83 c4 10             	add    esp,0x10
c001b87b:	e9 7b ff ff ff       	jmp    c001b7fb <sysCallGetEnv(regs*)+0x28>

c001b880 <sysAppSettings(regs*)>:
c001b880:	57                   	push   edi
c001b881:	56                   	push   esi
c001b882:	56                   	push   esi
c001b883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b887:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b88a:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001b890:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b895:	66 3d c0 09          	cmp    ax,0x9c0
c001b899:	75 2e                	jne    c001b8c9 <sysAppSettings(regs*)+0x49>
c001b89b:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001b8a1:	83 e0 1f             	and    eax,0x1f
c001b8a4:	3c 01                	cmp    al,0x1
c001b8a6:	74 2c                	je     c001b8d4 <sysAppSettings(regs*)+0x54>
c001b8a8:	3c 07                	cmp    al,0x7
c001b8aa:	0f 84 b3 00 00 00    	je     c001b963 <sysAppSettings(regs*)+0xe3>
c001b8b0:	84 c0                	test   al,al
c001b8b2:	0f 84 d2 00 00 00    	je     c001b98a <sysAppSettings(regs*)+0x10a>
c001b8b8:	3c 08                	cmp    al,0x8
c001b8ba:	74 63                	je     c001b91f <sysAppSettings(regs*)+0x9f>
c001b8bc:	59                   	pop    ecx
c001b8bd:	0f b6 c0             	movzx  eax,al
c001b8c0:	5e                   	pop    esi
c001b8c1:	05 e8 03 00 00       	add    eax,0x3e8
c001b8c6:	5f                   	pop    edi
c001b8c7:	99                   	cdq    
c001b8c8:	c3                   	ret    
c001b8c9:	b8 01 00 00 00       	mov    eax,0x1
c001b8ce:	59                   	pop    ecx
c001b8cf:	31 d2                	xor    edx,edx
c001b8d1:	5e                   	pop    esi
c001b8d2:	5f                   	pop    edi
c001b8d3:	c3                   	ret    
c001b8d4:	50                   	push   eax
c001b8d5:	68 00 01 00 00       	push   0x100
c001b8da:	6a 00                	push   0x0
c001b8dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8e1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8e4:	83 c0 0c             	add    eax,0xc
c001b8e7:	50                   	push   eax
c001b8e8:	e8 63 4e fe ff       	call   c0000750 <memset>
c001b8ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8f2:	b9 ff 00 00 00       	mov    ecx,0xff
c001b8f7:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001b8fa:	83 c7 0c             	add    edi,0xc
c001b8fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b8ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b904:	5a                   	pop    edx
c001b905:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b908:	59                   	pop    ecx
c001b909:	8d 50 0c             	lea    edx,[eax+0xc]
c001b90c:	52                   	push   edx
c001b90d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b913:	e8 5a 48 ff ff       	call   c0010172 <VgaText::setTitle(char*)>
c001b918:	83 c4 10             	add    esp,0x10
c001b91b:	31 c0                	xor    eax,eax
c001b91d:	eb af                	jmp    c001b8ce <sysAppSettings(regs*)+0x4e>
c001b91f:	83 ec 08             	sub    esp,0x8
c001b922:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001b928:	83 e0 0f             	and    eax,0xf
c001b92b:	50                   	push   eax
c001b92c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b931:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b934:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b93a:	e8 23 48 ff ff       	call   c0010162 <VgaText::setTitleColour(VgaColour)>
c001b93f:	5f                   	pop    edi
c001b940:	58                   	pop    eax
c001b941:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001b947:	c1 e8 04             	shr    eax,0x4
c001b94a:	83 e0 0f             	and    eax,0xf
c001b94d:	50                   	push   eax
c001b94e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b953:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b956:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b95c:	e8 f1 47 ff ff       	call   c0010152 <VgaText::setTitleTextColour(VgaColour)>
c001b961:	eb b5                	jmp    c001b918 <sysAppSettings(regs*)+0x98>
c001b963:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b968:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b96b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b971:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001b977:	c0 e8 06             	shr    al,0x6
c001b97a:	83 e0 01             	and    eax,0x1
c001b97d:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001b983:	31 c0                	xor    eax,eax
c001b985:	e9 44 ff ff ff       	jmp    c001b8ce <sysAppSettings(regs*)+0x4e>
c001b98a:	b8 02 00 00 00       	mov    eax,0x2
c001b98f:	e9 3a ff ff ff       	jmp    c001b8ce <sysAppSettings(regs*)+0x4e>

c001b994 <sysSetFatAttrib(regs*)>:
c001b994:	57                   	push   edi
c001b995:	56                   	push   esi
c001b996:	53                   	push   ebx
c001b997:	83 ec 1c             	sub    esp,0x1c
c001b99a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b99e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b9a1:	68 14 01 00 00       	push   0x114
c001b9a6:	e8 ee 3b ff ff       	call   c000f599 <malloc>
c001b9ab:	83 c4 0c             	add    esp,0xc
c001b9ae:	89 c3                	mov    ebx,eax
c001b9b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9b5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9b8:	57                   	push   edi
c001b9b9:	53                   	push   ebx
c001b9ba:	e8 d5 70 ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c001b9bf:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b9c2:	83 c4 0c             	add    esp,0xc
c001b9c5:	0f b6 d4             	movzx  edx,ah
c001b9c8:	0f b6 c0             	movzx  eax,al
c001b9cb:	52                   	push   edx
c001b9cc:	50                   	push   eax
c001b9cd:	53                   	push   ebx
c001b9ce:	e8 37 73 ff ff       	call   c0012d0a <File::chfatattr(unsigned char, unsigned char)>
c001b9d3:	83 c4 10             	add    esp,0x10
c001b9d6:	85 db                	test   ebx,ebx
c001b9d8:	74 14                	je     c001b9ee <sysSetFatAttrib(regs*)+0x5a>
c001b9da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9de:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b9e0:	83 ec 0c             	sub    esp,0xc
c001b9e3:	53                   	push   ebx
c001b9e4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b9e7:	83 c4 10             	add    esp,0x10
c001b9ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9ee:	85 c0                	test   eax,eax
c001b9f0:	0f 95 c0             	setne  al
c001b9f3:	31 d2                	xor    edx,edx
c001b9f5:	0f b6 c0             	movzx  eax,al
c001b9f8:	f7 d8                	neg    eax
c001b9fa:	83 d2 00             	adc    edx,0x0
c001b9fd:	83 c4 10             	add    esp,0x10
c001ba00:	f7 da                	neg    edx
c001ba02:	5b                   	pop    ebx
c001ba03:	5e                   	pop    esi
c001ba04:	5f                   	pop    edi
c001ba05:	c3                   	ret    

c001ba06 <sysPipe(regs*)>:
c001ba06:	57                   	push   edi
c001ba07:	56                   	push   esi
c001ba08:	53                   	push   ebx
c001ba09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba0d:	83 ec 0c             	sub    esp,0xc
c001ba10:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001ba13:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001ba16:	6a 20                	push   0x20
c001ba18:	e8 7c 3b ff ff       	call   c000f599 <malloc>
c001ba1d:	89 c3                	mov    ebx,eax
c001ba1f:	58                   	pop    eax
c001ba20:	5a                   	pop    edx
c001ba21:	68 00 50 00 00       	push   0x5000
c001ba26:	53                   	push   ebx
c001ba27:	e8 be 44 ff ff       	call   c000feea <Pipe::Pipe(int)>
c001ba2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba2f:	e8 1e 53 ff ff       	call   c0010d52 <UnixFile::getFileDescriptor()>
c001ba34:	89 07                	mov    DWORD PTR [edi],eax
c001ba36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba39:	e8 14 53 ff ff       	call   c0010d52 <UnixFile::getFileDescriptor()>
c001ba3e:	83 c4 10             	add    esp,0x10
c001ba41:	89 06                	mov    DWORD PTR [esi],eax
c001ba43:	31 d2                	xor    edx,edx
c001ba45:	5b                   	pop    ebx
c001ba46:	31 c0                	xor    eax,eax
c001ba48:	5e                   	pop    esi
c001ba49:	5f                   	pop    edi
c001ba4a:	c3                   	ret    

c001ba4b <sysGetUnixTime(regs*)>:
c001ba4b:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c001ba50:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ba56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba5a:	e9 27 7a ff ff       	jmp    c0013486 <Clock::timeInSecondsLocal()>

c001ba5f <string_ends_with(char const*, char const*)>:
c001ba5f:	57                   	push   edi
c001ba60:	56                   	push   esi
c001ba61:	53                   	push   ebx
c001ba62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba66:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ba6a:	83 ec 0c             	sub    esp,0xc
c001ba6d:	53                   	push   ebx
c001ba6e:	e8 f9 4c fe ff       	call   c000076c <strlen>
c001ba73:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba76:	89 c6                	mov    esi,eax
c001ba78:	e8 ef 4c fe ff       	call   c000076c <strlen>
c001ba7d:	83 c4 10             	add    esp,0x10
c001ba80:	39 c6                	cmp    esi,eax
c001ba82:	7d 06                	jge    c001ba8a <string_ends_with(char const*, char const*)+0x2b>
c001ba84:	5b                   	pop    ebx
c001ba85:	31 c0                	xor    eax,eax
c001ba87:	5e                   	pop    esi
c001ba88:	5f                   	pop    edi
c001ba89:	c3                   	ret    
c001ba8a:	83 ec 08             	sub    esp,0x8
c001ba8d:	29 c6                	sub    esi,eax
c001ba8f:	57                   	push   edi
c001ba90:	01 f3                	add    ebx,esi
c001ba92:	53                   	push   ebx
c001ba93:	e8 00 4e fe ff       	call   c0000898 <strcmp>
c001ba98:	83 c4 10             	add    esp,0x10
c001ba9b:	85 c0                	test   eax,eax
c001ba9d:	5b                   	pop    ebx
c001ba9e:	0f 94 c0             	sete   al
c001baa1:	5e                   	pop    esi
c001baa2:	0f b6 c0             	movzx  eax,al
c001baa5:	5f                   	pop    edi
c001baa6:	c3                   	ret    

c001baa7 <sysCallOpen(regs*)>:
c001baa7:	56                   	push   esi
c001baa8:	53                   	push   ebx
c001baa9:	81 ec 04 01 00 00    	sub    esp,0x104
c001baaf:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bab6:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bab9:	85 c9                	test   ecx,ecx
c001babb:	0f 84 ad 01 00 00    	je     c001bc6e <sysCallOpen(regs*)+0x1c7>
c001bac1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bac4:	85 c0                	test   eax,eax
c001bac6:	0f 84 a2 01 00 00    	je     c001bc6e <sysCallOpen(regs*)+0x1c7>
c001bacc:	52                   	push   edx
c001bacd:	68 6d b5 02 c0       	push   0xc002b56d
c001bad2:	50                   	push   eax
c001bad3:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bad7:	56                   	push   esi
c001bad8:	e8 0d 6e ff ff       	call   c00128ea <Fs::standardiseFiles(char*, char const*, char const*)>
c001badd:	89 34 24             	mov    DWORD PTR [esp],esi
c001bae0:	e8 87 4c fe ff       	call   c000076c <strlen>
c001bae5:	83 c4 10             	add    esp,0x10
c001bae8:	48                   	dec    eax
c001bae9:	74 1d                	je     c001bb08 <sysCallOpen(regs*)+0x61>
c001baeb:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001baee:	eb 0f                	jmp    c001baff <sysCallOpen(regs*)+0x58>
c001baf0:	80 fa 3a             	cmp    dl,0x3a
c001baf3:	74 0f                	je     c001bb04 <sysCallOpen(regs*)+0x5d>
c001baf5:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001baf9:	48                   	dec    eax
c001bafa:	74 0c                	je     c001bb08 <sysCallOpen(regs*)+0x61>
c001bafc:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001baff:	80 fa 2e             	cmp    dl,0x2e
c001bb02:	75 ec                	jne    c001baf0 <sysCallOpen(regs*)+0x49>
c001bb04:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bb08:	83 ec 08             	sub    esp,0x8
c001bb0b:	68 71 b5 02 c0       	push   0xc002b571
c001bb10:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb13:	e8 47 ff ff ff       	call   c001ba5f <string_ends_with(char const*, char const*)>
c001bb18:	83 c4 10             	add    esp,0x10
c001bb1b:	85 c0                	test   eax,eax
c001bb1d:	74 1d                	je     c001bb3c <sysCallOpen(regs*)+0x95>
c001bb1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb22:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bb28:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb2f:	81 c4 04 01 00 00    	add    esp,0x104
c001bb35:	31 c0                	xor    eax,eax
c001bb37:	31 d2                	xor    edx,edx
c001bb39:	5b                   	pop    ebx
c001bb3a:	5e                   	pop    esi
c001bb3b:	c3                   	ret    
c001bb3c:	83 ec 08             	sub    esp,0x8
c001bb3f:	68 76 b5 02 c0       	push   0xc002b576
c001bb44:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb47:	e8 13 ff ff ff       	call   c001ba5f <string_ends_with(char const*, char const*)>
c001bb4c:	83 c4 10             	add    esp,0x10
c001bb4f:	85 c0                	test   eax,eax
c001bb51:	75 cc                	jne    c001bb1f <sysCallOpen(regs*)+0x78>
c001bb53:	83 ec 08             	sub    esp,0x8
c001bb56:	68 72 b5 02 c0       	push   0xc002b572
c001bb5b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb5e:	e8 35 4d fe ff       	call   c0000898 <strcmp>
c001bb63:	83 c4 10             	add    esp,0x10
c001bb66:	85 c0                	test   eax,eax
c001bb68:	74 b5                	je     c001bb1f <sysCallOpen(regs*)+0x78>
c001bb6a:	83 ec 08             	sub    esp,0x8
c001bb6d:	68 71 b5 02 c0       	push   0xc002b571
c001bb72:	56                   	push   esi
c001bb73:	e8 e7 fe ff ff       	call   c001ba5f <string_ends_with(char const*, char const*)>
c001bb78:	83 c4 10             	add    esp,0x10
c001bb7b:	85 c0                	test   eax,eax
c001bb7d:	75 a0                	jne    c001bb1f <sysCallOpen(regs*)+0x78>
c001bb7f:	83 ec 08             	sub    esp,0x8
c001bb82:	68 7b b5 02 c0       	push   0xc002b57b
c001bb87:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb8a:	e8 d0 fe ff ff       	call   c001ba5f <string_ends_with(char const*, char const*)>
c001bb8f:	83 c4 10             	add    esp,0x10
c001bb92:	85 c0                	test   eax,eax
c001bb94:	0f 85 e7 00 00 00    	jne    c001bc81 <sysCallOpen(regs*)+0x1da>
c001bb9a:	83 ec 08             	sub    esp,0x8
c001bb9d:	68 80 b5 02 c0       	push   0xc002b580
c001bba2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bba5:	e8 b5 fe ff ff       	call   c001ba5f <string_ends_with(char const*, char const*)>
c001bbaa:	83 c4 10             	add    esp,0x10
c001bbad:	85 c0                	test   eax,eax
c001bbaf:	0f 85 cc 00 00 00    	jne    c001bc81 <sysCallOpen(regs*)+0x1da>
c001bbb5:	83 ec 08             	sub    esp,0x8
c001bbb8:	68 7c b5 02 c0       	push   0xc002b57c
c001bbbd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbc0:	e8 d3 4c fe ff       	call   c0000898 <strcmp>
c001bbc5:	83 c4 10             	add    esp,0x10
c001bbc8:	85 c0                	test   eax,eax
c001bbca:	0f 84 b1 00 00 00    	je     c001bc81 <sysCallOpen(regs*)+0x1da>
c001bbd0:	83 ec 08             	sub    esp,0x8
c001bbd3:	68 7b b5 02 c0       	push   0xc002b57b
c001bbd8:	56                   	push   esi
c001bbd9:	e8 81 fe ff ff       	call   c001ba5f <string_ends_with(char const*, char const*)>
c001bbde:	83 c4 10             	add    esp,0x10
c001bbe1:	85 c0                	test   eax,eax
c001bbe3:	0f 85 98 00 00 00    	jne    c001bc81 <sysCallOpen(regs*)+0x1da>
c001bbe9:	83 ec 0c             	sub    esp,0xc
c001bbec:	68 14 01 00 00       	push   0x114
c001bbf1:	e8 a3 39 ff ff       	call   c000f599 <malloc>
c001bbf6:	83 c4 0c             	add    esp,0xc
c001bbf9:	89 c6                	mov    esi,eax
c001bbfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc00:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc03:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc06:	56                   	push   esi
c001bc07:	e8 88 6e ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c001bc0c:	83 c4 10             	add    esp,0x10
c001bc0f:	85 f6                	test   esi,esi
c001bc11:	74 5b                	je     c001bc6e <sysCallOpen(regs*)+0x1c7>
c001bc13:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bc16:	0f b6 c2             	movzx  eax,dl
c001bc19:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bc1c:	89 d0                	mov    eax,edx
c001bc1e:	83 e0 01             	and    eax,0x1
c001bc21:	f6 c2 02             	test   dl,0x2
c001bc24:	74 03                	je     c001bc29 <sysCallOpen(regs*)+0x182>
c001bc26:	83 c8 02             	or     eax,0x2
c001bc29:	f6 c2 04             	test   dl,0x4
c001bc2c:	74 03                	je     c001bc31 <sysCallOpen(regs*)+0x18a>
c001bc2e:	83 c8 04             	or     eax,0x4
c001bc31:	f6 c2 08             	test   dl,0x8
c001bc34:	74 03                	je     c001bc39 <sysCallOpen(regs*)+0x192>
c001bc36:	83 c8 0a             	or     eax,0xa
c001bc39:	83 e2 10             	and    edx,0x10
c001bc3c:	74 03                	je     c001bc41 <sysCallOpen(regs*)+0x19a>
c001bc3e:	83 c8 12             	or     eax,0x12
c001bc41:	83 ec 08             	sub    esp,0x8
c001bc44:	50                   	push   eax
c001bc45:	56                   	push   esi
c001bc46:	e8 ad 6e ff ff       	call   c0012af8 <File::open(FileOpenMode)>
c001bc4b:	83 c4 10             	add    esp,0x10
c001bc4e:	85 c0                	test   eax,eax
c001bc50:	75 1c                	jne    c001bc6e <sysCallOpen(regs*)+0x1c7>
c001bc52:	83 ec 0c             	sub    esp,0xc
c001bc55:	56                   	push   esi
c001bc56:	e8 f7 50 ff ff       	call   c0010d52 <UnixFile::getFileDescriptor()>
c001bc5b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc5e:	83 c4 10             	add    esp,0x10
c001bc61:	89 02                	mov    DWORD PTR [edx],eax
c001bc63:	c1 f8 1f             	sar    eax,0x1f
c001bc66:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bc69:	e9 c1 fe ff ff       	jmp    c001bb2f <sysCallOpen(regs*)+0x88>
c001bc6e:	81 c4 04 01 00 00    	add    esp,0x104
c001bc74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc79:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc7e:	5b                   	pop    ebx
c001bc7f:	5e                   	pop    esi
c001bc80:	c3                   	ret    
c001bc81:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bc84:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001bc8a:	e9 99 fe ff ff       	jmp    c001bb28 <sysCallOpen(regs*)+0x81>

c001bc8f <Sys::loadSyscalls()>:
c001bc8f:	c7 05 40 01 03 c0 fc ae 01 c0 	mov    DWORD PTR ds:0xc0030140,0xc001aefc
c001bc99:	c7 05 44 01 03 c0 f4 aa 01 c0 	mov    DWORD PTR ds:0xc0030144,0xc001aaf4
c001bca3:	c7 05 48 01 03 c0 e2 ac 01 c0 	mov    DWORD PTR ds:0xc0030148,0xc001ace2
c001bcad:	c7 05 4c 01 03 c0 32 ae 01 c0 	mov    DWORD PTR ds:0xc003014c,0xc001ae32
c001bcb7:	c7 05 50 01 03 c0 7a ac 01 c0 	mov    DWORD PTR ds:0xc0030150,0xc001ac7a
c001bcc1:	c7 05 54 01 03 c0 2b ab 01 c0 	mov    DWORD PTR ds:0xc0030154,0xc001ab2b
c001bccb:	c7 05 58 01 03 c0 0c ab 01 c0 	mov    DWORD PTR ds:0xc0030158,0xc001ab0c
c001bcd5:	c7 05 5c 01 03 c0 37 ad 01 c0 	mov    DWORD PTR ds:0xc003015c,0xc001ad37
c001bcdf:	c7 05 64 01 03 c0 c5 b3 01 c0 	mov    DWORD PTR ds:0xc0030164,0xc001b3c5
c001bce9:	c7 05 60 01 03 c0 a7 ba 01 c0 	mov    DWORD PTR ds:0xc0030160,0xc001baa7
c001bcf3:	c7 05 68 01 03 c0 25 b4 01 c0 	mov    DWORD PTR ds:0xc0030168,0xc001b425
c001bcfd:	c7 05 6c 01 03 c0 08 b1 01 c0 	mov    DWORD PTR ds:0xc003016c,0xc001b108
c001bd07:	c7 05 70 01 03 c0 42 af 01 c0 	mov    DWORD PTR ds:0xc0030170,0xc001af42
c001bd11:	c7 05 74 01 03 c0 47 af 01 c0 	mov    DWORD PTR ds:0xc0030174,0xc001af47
c001bd1b:	c7 05 78 01 03 c0 ee b4 01 c0 	mov    DWORD PTR ds:0xc0030178,0xc001b4ee
c001bd25:	c7 05 7c 01 03 c0 9a b4 01 c0 	mov    DWORD PTR ds:0xc003017c,0xc001b49a
c001bd2f:	c7 05 80 01 03 c0 e1 b1 01 c0 	mov    DWORD PTR ds:0xc0030180,0xc001b1e1
c001bd39:	c7 05 84 01 03 c0 38 b2 01 c0 	mov    DWORD PTR ds:0xc0030184,0xc001b238
c001bd43:	c7 05 88 01 03 c0 a4 b2 01 c0 	mov    DWORD PTR ds:0xc0030188,0xc001b2a4
c001bd4d:	c7 05 8c 01 03 c0 4c af 01 c0 	mov    DWORD PTR ds:0xc003018c,0xc001af4c
c001bd57:	c7 05 90 01 03 c0 5e b5 01 c0 	mov    DWORD PTR ds:0xc0030190,0xc001b55e
c001bd61:	c7 05 94 01 03 c0 78 b5 01 c0 	mov    DWORD PTR ds:0xc0030194,0xc001b578
c001bd6b:	c7 05 98 01 03 c0 78 b5 01 c0 	mov    DWORD PTR ds:0xc0030198,0xc001b578
c001bd75:	c7 05 9c 01 03 c0 ad b5 01 c0 	mov    DWORD PTR ds:0xc003019c,0xc001b5ad
c001bd7f:	c7 05 a0 01 03 c0 11 b6 01 c0 	mov    DWORD PTR ds:0xc00301a0,0xc001b611
c001bd89:	c7 05 a4 01 03 c0 56 af 01 c0 	mov    DWORD PTR ds:0xc00301a4,0xc001af56
c001bd93:	c7 05 a8 01 03 c0 75 b6 01 c0 	mov    DWORD PTR ds:0xc00301a8,0xc001b675
c001bd9d:	c7 05 ac 01 03 c0 c5 b0 01 c0 	mov    DWORD PTR ds:0xc00301ac,0xc001b0c5
c001bda7:	c7 05 b0 01 03 c0 c1 b6 01 c0 	mov    DWORD PTR ds:0xc00301b0,0xc001b6c1
c001bdb1:	c7 05 b4 01 03 c0 87 b1 01 c0 	mov    DWORD PTR ds:0xc00301b4,0xc001b187
c001bdbb:	c7 05 b8 01 03 c0 44 b7 01 c0 	mov    DWORD PTR ds:0xc00301b8,0xc001b744
c001bdc5:	c7 05 bc 01 03 c0 16 b3 01 c0 	mov    DWORD PTR ds:0xc00301bc,0xc001b316
c001bdcf:	c7 05 c0 01 03 c0 6b b7 01 c0 	mov    DWORD PTR ds:0xc00301c0,0xc001b76b
c001bdd9:	c7 05 c4 01 03 c0 d3 b7 01 c0 	mov    DWORD PTR ds:0xc00301c4,0xc001b7d3
c001bde3:	c7 05 c8 01 03 c0 80 b8 01 c0 	mov    DWORD PTR ds:0xc00301c8,0xc001b880
c001bded:	c7 05 cc 01 03 c0 66 af 01 c0 	mov    DWORD PTR ds:0xc00301cc,0xc001af66
c001bdf7:	c7 05 d0 01 03 c0 d0 af 01 c0 	mov    DWORD PTR ds:0xc00301d0,0xc001afd0
c001be01:	c7 05 d4 01 03 c0 16 b0 01 c0 	mov    DWORD PTR ds:0xc00301d4,0xc001b016
c001be0b:	c7 05 d8 01 03 c0 94 b9 01 c0 	mov    DWORD PTR ds:0xc00301d8,0xc001b994
c001be15:	c7 05 dc 01 03 c0 93 b5 01 c0 	mov    DWORD PTR ds:0xc00301dc,0xc001b593
c001be1f:	c7 05 e0 01 03 c0 67 b0 01 c0 	mov    DWORD PTR ds:0xc00301e0,0xc001b067
c001be29:	c7 05 e4 01 03 c0 06 ba 01 c0 	mov    DWORD PTR ds:0xc00301e4,0xc001ba06
c001be33:	c7 05 e8 01 03 c0 4b ba 01 c0 	mov    DWORD PTR ds:0xc00301e8,0xc001ba4b
c001be3d:	c7 05 ec 01 03 c0 d2 ab 01 c0 	mov    DWORD PTR ds:0xc00301ec,0xc001abd2
c001be47:	c7 05 f0 01 03 c0 53 ad 01 c0 	mov    DWORD PTR ds:0xc00301f0,0xc001ad53
c001be51:	c7 05 f4 01 03 c0 e8 ad 01 c0 	mov    DWORD PTR ds:0xc00301f4,0xc001ade8
c001be5b:	c7 05 f8 01 03 c0 be aa 01 c0 	mov    DWORD PTR ds:0xc00301f8,0xc001aabe
c001be65:	c7 05 fc 01 03 c0 9a ae 01 c0 	mov    DWORD PTR ds:0xc00301fc,0xc001ae9a
c001be6f:	c7 05 00 02 03 c0 37 ab 01 c0 	mov    DWORD PTR ds:0xc0030200,0xc001ab37
c001be79:	c7 05 04 02 03 c0 4e ab 01 c0 	mov    DWORD PTR ds:0xc0030204,0xc001ab4e
c001be83:	c3                   	ret    

c001be84 <Sys::systemCall(regs*, void*)>:
c001be84:	53                   	push   ebx
c001be85:	83 ec 08             	sub    esp,0x8
c001be88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001be8c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001be8f:	83 f8 7f             	cmp    eax,0x7f
c001be92:	77 16                	ja     c001beaa <Sys::systemCall(regs*, void*)+0x26>
c001be94:	8b 14 85 40 01 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfec0]
c001be9b:	85 d2                	test   edx,edx
c001be9d:	74 0b                	je     c001beaa <Sys::systemCall(regs*, void*)+0x26>
c001be9f:	83 ec 0c             	sub    esp,0xc
c001bea2:	53                   	push   ebx
c001bea3:	ff d2                	call   edx
c001bea5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001bea8:	eb 0d                	jmp    c001beb7 <Sys::systemCall(regs*, void*)+0x33>
c001beaa:	52                   	push   edx
c001beab:	52                   	push   edx
c001beac:	50                   	push   eax
c001bead:	68 85 b5 02 c0       	push   0xc002b585
c001beb2:	e8 7e 66 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001beb7:	83 c4 10             	add    esp,0x10
c001beba:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bebf:	31 d2                	xor    edx,edx
c001bec1:	83 c4 08             	add    esp,0x8
c001bec4:	5b                   	pop    ebx
c001bec5:	c3                   	ret    

c001bec6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001bec6:	55                   	push   ebp
c001bec7:	57                   	push   edi
c001bec8:	56                   	push   esi
c001bec9:	53                   	push   ebx
c001beca:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001bed0:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001bed7:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001bede:	85 c0                	test   eax,eax
c001bee0:	0f 95 c1             	setne  cl
c001bee3:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001beeb:	0f 94 c2             	sete   dl
c001beee:	84 d1                	test   cl,dl
c001bef0:	74 23                	je     c001bf15 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001bef2:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001bef8:	74 1b                	je     c001bf15 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001befa:	81 c3 00 10 00 00    	add    ebx,0x1000
c001bf00:	89 da                	mov    edx,ebx
c001bf02:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001bf08:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001bf0e:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001bf15:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001bf1c:	05 ff 0f 00 00       	add    eax,0xfff
c001bf21:	83 ec 0c             	sub    esp,0xc
c001bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bf28:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001bf2e:	c1 e8 0c             	shr    eax,0xc
c001bf31:	89 fe                	mov    esi,edi
c001bf33:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bf37:	c1 ee 0c             	shr    esi,0xc
c001bf3a:	6a 01                	push   0x1
c001bf3c:	e8 5c 52 ff ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c001bf41:	89 c5                	mov    ebp,eax
c001bf43:	58                   	pop    eax
c001bf44:	5a                   	pop    edx
c001bf45:	56                   	push   esi
c001bf46:	68 99 b5 02 c0       	push   0xc002b599
c001bf4b:	e8 e5 65 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001bf50:	59                   	pop    ecx
c001bf51:	58                   	pop    eax
c001bf52:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bf56:	68 ab b5 02 c0       	push   0xc002b5ab
c001bf5b:	e8 d5 65 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001bf60:	83 c4 10             	add    esp,0x10
c001bf63:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001bf69:	0f 86 31 01 00 00    	jbe    c001c0a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001bf6f:	c1 e6 0c             	shl    esi,0xc
c001bf72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf75:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001bf78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf7c:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001bf83:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf86:	01 df                	add    edi,ebx
c001bf88:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001bf8b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001bf8f:	0f 84 08 01 00 00    	je     c001c09d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001bf95:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001bf9b:	76 05                	jbe    c001bfa2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001bf9d:	bf 00 10 00 00       	mov    edi,0x1000
c001bfa2:	83 ec 0c             	sub    esp,0xc
c001bfa5:	31 d2                	xor    edx,edx
c001bfa7:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001bfae:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bfb0:	8d 44 24 28          	lea    eax,[esp+0x28]
c001bfb4:	50                   	push   eax
c001bfb5:	8d 74 24 30          	lea    esi,[esp+0x30]
c001bfb9:	56                   	push   esi
c001bfba:	52                   	push   edx
c001bfbb:	57                   	push   edi
c001bfbc:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001bfc3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bfc6:	83 c4 20             	add    esp,0x20
c001bfc9:	85 c0                	test   eax,eax
c001bfcb:	74 0a                	je     c001bfd7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001bfcd:	53                   	push   ebx
c001bfce:	53                   	push   ebx
c001bfcf:	50                   	push   eax
c001bfd0:	68 bd b5 02 c0       	push   0xc002b5bd
c001bfd5:	eb 0f                	jmp    c001bfe6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001bfd7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001bfdb:	74 20                	je     c001bffd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001bfdd:	51                   	push   ecx
c001bfde:	51                   	push   ecx
c001bfdf:	6a 00                	push   0x0
c001bfe1:	68 e8 b5 02 c0       	push   0xc002b5e8
c001bfe6:	e8 4a 65 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001bfeb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bfee:	e8 f0 55 ff ff       	call   c00115e3 <Virt::freeKernelVirtualPages(unsigned long)>
c001bff3:	83 c4 10             	add    esp,0x10
c001bff6:	31 c0                	xor    eax,eax
c001bff8:	e9 68 01 00 00       	jmp    c001c165 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001bffd:	fa                   	cli    
c001bffe:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001c004:	e8 34 39 ff ff       	call   c000f93d <Phys::allocatePage()>
c001c009:	6a 07                	push   0x7
c001c00b:	89 c7                	mov    edi,eax
c001c00d:	55                   	push   ebp
c001c00e:	50                   	push   eax
c001c00f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c014:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c017:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c01d:	e8 38 59 ff ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c001c022:	83 c4 0c             	add    esp,0xc
c001c025:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c02c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c032:	6a 00                	push   0x0
c001c034:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c039:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c03c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c042:	e8 6d 57 ff ff       	call   c00117b4 <VAS::mapOtherVASIn(bool, VAS*)>
c001c047:	58                   	pop    eax
c001c048:	5a                   	pop    edx
c001c049:	68 07 0c 00 00       	push   0xc07
c001c04e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c052:	57                   	push   edi
c001c053:	89 ef                	mov    edi,ebp
c001c055:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c05c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c062:	6a 00                	push   0x0
c001c064:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c069:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c06c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c072:	e8 9f 5c ff ff       	call   c0011d16 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c077:	b9 00 10 00 00       	mov    ecx,0x1000
c001c07c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c07e:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001c083:	83 c4 20             	add    esp,0x20
c001c086:	48                   	dec    eax
c001c087:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001c08c:	85 c0                	test   eax,eax
c001c08e:	75 01                	jne    c001c091 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c090:	fb                   	sti    
c001c091:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c098:	e9 df fe ff ff       	jmp    c001bf7c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c09d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c0a0:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c0a8:	0f 86 a9 00 00 00    	jbe    c001c157 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c0ae:	fa                   	cli    
c001c0af:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001c0b5:	51                   	push   ecx
c001c0b6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c0bd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0c3:	6a 00                	push   0x0
c001c0c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0ca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0cd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c0d3:	e8 dc 56 ff ff       	call   c00117b4 <VAS::mapOtherVASIn(bool, VAS*)>
c001c0d8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c0dc:	c1 e6 0c             	shl    esi,0xc
c001c0df:	01 de                	add    esi,ebx
c001c0e1:	83 c4 10             	add    esp,0x10
c001c0e4:	39 de                	cmp    esi,ebx
c001c0e6:	74 61                	je     c001c149 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c0e8:	e8 50 38 ff ff       	call   c000f93d <Phys::allocatePage()>
c001c0ed:	6a 07                	push   0x7
c001c0ef:	89 c7                	mov    edi,eax
c001c0f1:	55                   	push   ebp
c001c0f2:	50                   	push   eax
c001c0f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0fb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c101:	e8 54 58 ff ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c001c106:	58                   	pop    eax
c001c107:	5a                   	pop    edx
c001c108:	68 07 0c 00 00       	push   0xc07
c001c10d:	53                   	push   ebx
c001c10e:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c114:	57                   	push   edi
c001c115:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c11c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c122:	6a 00                	push   0x0
c001c124:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c129:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c12c:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c132:	e8 df 5b ff ff       	call   c0011d16 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c137:	83 c4 1c             	add    esp,0x1c
c001c13a:	68 00 10 00 00       	push   0x1000
c001c13f:	6a 00                	push   0x0
c001c141:	55                   	push   ebp
c001c142:	e8 09 46 fe ff       	call   c0000750 <memset>
c001c147:	eb 98                	jmp    c001c0e1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c149:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001c14e:	48                   	dec    eax
c001c14f:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001c154:	75 01                	jne    c001c157 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c156:	fb                   	sti    
c001c157:	83 ec 0c             	sub    esp,0xc
c001c15a:	55                   	push   ebp
c001c15b:	e8 83 54 ff ff       	call   c00115e3 <Virt::freeKernelVirtualPages(unsigned long)>
c001c160:	83 c4 10             	add    esp,0x10
c001c163:	b0 01                	mov    al,0x1
c001c165:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c16b:	5b                   	pop    ebx
c001c16c:	5e                   	pop    esi
c001c16d:	5f                   	pop    edi
c001c16e:	5d                   	pop    ebp
c001c16f:	c3                   	ret    

c001c170 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c170:	55                   	push   ebp
c001c171:	57                   	push   edi
c001c172:	56                   	push   esi
c001c173:	53                   	push   ebx
c001c174:	83 ec 48             	sub    esp,0x48
c001c177:	68 14 01 00 00       	push   0x114
c001c17c:	e8 18 34 ff ff       	call   c000f599 <malloc>
c001c181:	83 c4 0c             	add    esp,0xc
c001c184:	89 c6                	mov    esi,eax
c001c186:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c18a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c18e:	50                   	push   eax
c001c18f:	e8 00 69 ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c001c194:	58                   	pop    eax
c001c195:	5a                   	pop    edx
c001c196:	6a 01                	push   0x1
c001c198:	56                   	push   esi
c001c199:	e8 5a 69 ff ff       	call   c0012af8 <File::open(FileOpenMode)>
c001c19e:	83 c4 10             	add    esp,0x10
c001c1a1:	85 c0                	test   eax,eax
c001c1a3:	0f 85 47 01 00 00    	jne    c001c2f0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1a9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c1b1:	83 ec 0c             	sub    esp,0xc
c001c1b4:	6a 34                	push   0x34
c001c1b6:	e8 de 33 ff ff       	call   c000f599 <malloc>
c001c1bb:	89 c3                	mov    ebx,eax
c001c1bd:	58                   	pop    eax
c001c1be:	8b 06                	mov    eax,DWORD PTR [esi]
c001c1c0:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c1c4:	57                   	push   edi
c001c1c5:	53                   	push   ebx
c001c1c6:	6a 00                	push   0x0
c001c1c8:	6a 34                	push   0x34
c001c1ca:	56                   	push   esi
c001c1cb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c1ce:	83 c4 20             	add    esp,0x20
c001c1d1:	85 c0                	test   eax,eax
c001c1d3:	0f 85 17 01 00 00    	jne    c001c2f0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1d9:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c1df:	0f 85 0b 01 00 00    	jne    c001c2f0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1e5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c1e8:	85 c0                	test   eax,eax
c001c1ea:	0f 84 00 01 00 00    	je     c001c2f0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c1f0:	31 d2                	xor    edx,edx
c001c1f2:	55                   	push   ebp
c001c1f3:	52                   	push   edx
c001c1f4:	50                   	push   eax
c001c1f5:	56                   	push   esi
c001c1f6:	e8 bb 69 ff ff       	call   c0012bb6 <File::seek(unsigned long long)>
c001c1fb:	83 c4 10             	add    esp,0x10
c001c1fe:	85 c0                	test   eax,eax
c001c200:	0f 85 ea 00 00 00    	jne    c001c2f0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c206:	83 ec 0c             	sub    esp,0xc
c001c209:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c20c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c210:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c214:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c218:	0f af c2             	imul   eax,edx
c001c21b:	50                   	push   eax
c001c21c:	e8 78 33 ff ff       	call   c000f599 <malloc>
c001c221:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c223:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c227:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c22a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c22e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c232:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c236:	0f af c2             	imul   eax,edx
c001c239:	99                   	cdq    
c001c23a:	52                   	push   edx
c001c23b:	50                   	push   eax
c001c23c:	56                   	push   esi
c001c23d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c240:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c243:	83 c4 20             	add    esp,0x20
c001c246:	85 c0                	test   eax,eax
c001c248:	0f 84 a2 00 00 00    	je     c001c2f0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c24e:	31 d2                	xor    edx,edx
c001c250:	51                   	push   ecx
c001c251:	52                   	push   edx
c001c252:	50                   	push   eax
c001c253:	56                   	push   esi
c001c254:	e8 5d 69 ff ff       	call   c0012bb6 <File::seek(unsigned long long)>
c001c259:	83 c4 10             	add    esp,0x10
c001c25c:	85 c0                	test   eax,eax
c001c25e:	0f 85 8c 00 00 00    	jne    c001c2f0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c264:	83 ec 0c             	sub    esp,0xc
c001c267:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c26b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c26f:	31 ed                	xor    ebp,ebp
c001c271:	0f af c2             	imul   eax,edx
c001c274:	50                   	push   eax
c001c275:	e8 1f 33 ff ff       	call   c000f599 <malloc>
c001c27a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c27c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c280:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c283:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c287:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c28b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c28f:	0f af c2             	imul   eax,edx
c001c292:	99                   	cdq    
c001c293:	52                   	push   edx
c001c294:	50                   	push   eax
c001c295:	56                   	push   esi
c001c296:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c299:	83 c4 20             	add    esp,0x20
c001c29c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c2a4:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c2a8:	0f 86 80 00 00 00    	jbe    c001c32e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c2ae:	0f b7 fd             	movzx  edi,bp
c001c2b1:	c1 e7 05             	shl    edi,0x5
c001c2b4:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c2b8:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c2bb:	75 6b                	jne    c001c328 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c2bd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c2c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c2c4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c2c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c2cb:	52                   	push   edx
c001c2cc:	31 d2                	xor    edx,edx
c001c2ce:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c2d1:	52                   	push   edx
c001c2d2:	50                   	push   eax
c001c2d3:	56                   	push   esi
c001c2d4:	e8 dd 68 ff ff       	call   c0012bb6 <File::seek(unsigned long long)>
c001c2d9:	83 c4 10             	add    esp,0x10
c001c2dc:	85 c0                	test   eax,eax
c001c2de:	74 17                	je     c001c2f7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c2e0:	83 ec 0c             	sub    esp,0xc
c001c2e3:	68 14 b6 02 c0       	push   0xc002b614
c001c2e8:	e8 48 62 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001c2ed:	83 c4 10             	add    esp,0x10
c001c2f0:	31 c0                	xor    eax,eax
c001c2f2:	e9 87 00 00 00       	jmp    c001c37e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c2f7:	83 ec 0c             	sub    esp,0xc
c001c2fa:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c2fd:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c300:	50                   	push   eax
c001c301:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c305:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c309:	56                   	push   esi
c001c30a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c30e:	e8 b3 fb ff ff       	call   c001bec6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c313:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c317:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c31b:	83 c4 20             	add    esp,0x20
c001c31e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c322:	73 04                	jae    c001c328 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c324:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c328:	45                   	inc    ebp
c001c329:	e9 76 ff ff ff       	jmp    c001c2a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c32e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c332:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c336:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c33a:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c340:	83 ec 0c             	sub    esp,0xc
c001c343:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c349:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c34e:	05 00 10 00 00       	add    eax,0x1000
c001c353:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c35a:	e8 4a 32 ff ff       	call   c000f5a9 <free>
c001c35f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c362:	e8 42 32 ff ff       	call   c000f5a9 <free>
c001c367:	58                   	pop    eax
c001c368:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c36c:	e8 38 32 ff ff       	call   c000f5a9 <free>
c001c371:	89 34 24             	mov    DWORD PTR [esp],esi
c001c374:	e8 dd 67 ff ff       	call   c0012b56 <File::close()>
c001c379:	83 c4 10             	add    esp,0x10
c001c37c:	b0 01                	mov    al,0x1
c001c37e:	83 c4 3c             	add    esp,0x3c
c001c381:	5b                   	pop    ebx
c001c382:	5e                   	pop    esi
c001c383:	5f                   	pop    edi
c001c384:	5d                   	pop    ebp
c001c385:	c3                   	ret    

c001c386 <Thr::runtimeReferenceHelper()>:
c001c386:	83 ec 18             	sub    esp,0x18
c001c389:	68 1c b6 02 c0       	push   0xc002b61c
c001c38e:	e8 a2 61 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001c393:	fa                   	cli    
c001c394:	83 c4 10             	add    esp,0x10
c001c397:	eb fe                	jmp    c001c397 <Thr::runtimeReferenceHelper()+0x11>

c001c399 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c399:	57                   	push   edi
c001c39a:	56                   	push   esi
c001c39b:	53                   	push   ebx
c001c39c:	31 db                	xor    ebx,ebx
c001c39e:	39 1d e0 0a 03 c0    	cmp    DWORD PTR ds:0xc0030ae0,ebx
c001c3a4:	7e 3c                	jle    c001c3e2 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c3a6:	8b 34 9d 60 0a 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf5a0]
c001c3ad:	31 ff                	xor    edi,edi
c001c3af:	39 3c 9d 60 09 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf6a0],edi
c001c3b6:	7e 27                	jle    c001c3df <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c3b8:	50                   	push   eax
c001c3b9:	50                   	push   eax
c001c3ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c3be:	8b 06                	mov    eax,DWORD PTR [esi]
c001c3c0:	03 04 9d e0 09 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf620]
c001c3c7:	50                   	push   eax
c001c3c8:	e8 cb 44 fe ff       	call   c0000898 <strcmp>
c001c3cd:	83 c4 10             	add    esp,0x10
c001c3d0:	85 c0                	test   eax,eax
c001c3d2:	75 05                	jne    c001c3d9 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c3d4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c3d7:	eb 0b                	jmp    c001c3e4 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c3d9:	83 c6 10             	add    esi,0x10
c001c3dc:	47                   	inc    edi
c001c3dd:	eb d0                	jmp    c001c3af <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c3df:	43                   	inc    ebx
c001c3e0:	eb bc                	jmp    c001c39e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c3e2:	31 c0                	xor    eax,eax
c001c3e4:	5b                   	pop    ebx
c001c3e5:	5e                   	pop    esi
c001c3e6:	5f                   	pop    edi
c001c3e7:	c3                   	ret    

c001c3e8 <Thr::loadKernelSymbolTable(char const*)>:
c001c3e8:	55                   	push   ebp
c001c3e9:	57                   	push   edi
c001c3ea:	56                   	push   esi
c001c3eb:	53                   	push   ebx
c001c3ec:	83 ec 68             	sub    esp,0x68
c001c3ef:	8b 35 30 0b 03 c0    	mov    esi,DWORD PTR ds:0xc0030b30
c001c3f5:	68 14 01 00 00       	push   0x114
c001c3fa:	e8 9a 31 ff ff       	call   c000f599 <malloc>
c001c3ff:	83 c4 0c             	add    esp,0xc
c001c402:	89 c3                	mov    ebx,eax
c001c404:	56                   	push   esi
c001c405:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c409:	50                   	push   eax
c001c40a:	e8 85 66 ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c001c40f:	5e                   	pop    esi
c001c410:	5f                   	pop    edi
c001c411:	6a 01                	push   0x1
c001c413:	53                   	push   ebx
c001c414:	e8 df 66 ff ff       	call   c0012af8 <File::open(FileOpenMode)>
c001c419:	83 c4 10             	add    esp,0x10
c001c41c:	85 c0                	test   eax,eax
c001c41e:	74 0a                	je     c001c42a <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c420:	83 ec 0c             	sub    esp,0xc
c001c423:	68 3e b6 02 c0       	push   0xc002b63e
c001c428:	eb 34                	jmp    c001c45e <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c42a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c432:	83 ec 0c             	sub    esp,0xc
c001c435:	6a 34                	push   0x34
c001c437:	e8 5d 31 ff ff       	call   c000f599 <malloc>
c001c43c:	59                   	pop    ecx
c001c43d:	89 c7                	mov    edi,eax
c001c43f:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c443:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c445:	56                   	push   esi
c001c446:	57                   	push   edi
c001c447:	6a 00                	push   0x0
c001c449:	6a 34                	push   0x34
c001c44b:	53                   	push   ebx
c001c44c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c44f:	83 c4 20             	add    esp,0x20
c001c452:	85 c0                	test   eax,eax
c001c454:	74 17                	je     c001c46d <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c456:	83 ec 0c             	sub    esp,0xc
c001c459:	68 55 b6 02 c0       	push   0xc002b655
c001c45e:	e8 32 d8 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001c463:	83 c4 10             	add    esp,0x10
c001c466:	31 c0                	xor    eax,eax
c001c468:	e9 31 02 00 00       	jmp    c001c69e <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c46d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c473:	75 e1                	jne    c001c456 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c475:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c478:	85 c0                	test   eax,eax
c001c47a:	74 da                	je     c001c456 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c47c:	52                   	push   edx
c001c47d:	31 d2                	xor    edx,edx
c001c47f:	52                   	push   edx
c001c480:	50                   	push   eax
c001c481:	53                   	push   ebx
c001c482:	e8 2f 67 ff ff       	call   c0012bb6 <File::seek(unsigned long long)>
c001c487:	83 c4 10             	add    esp,0x10
c001c48a:	85 c0                	test   eax,eax
c001c48c:	75 c8                	jne    c001c456 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c48e:	83 ec 0c             	sub    esp,0xc
c001c491:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c495:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c499:	31 ed                	xor    ebp,ebp
c001c49b:	0f af c2             	imul   eax,edx
c001c49e:	50                   	push   eax
c001c49f:	e8 f5 30 ff ff       	call   c000f599 <malloc>
c001c4a4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c4a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c4aa:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4b1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c4b5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4b9:	0f af c2             	imul   eax,edx
c001c4bc:	99                   	cdq    
c001c4bd:	52                   	push   edx
c001c4be:	50                   	push   eax
c001c4bf:	53                   	push   ebx
c001c4c0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c4c3:	83 c4 20             	add    esp,0x20
c001c4c6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c4ce:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c4d6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c4de:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c4e6:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c4ea:	0f 86 aa 00 00 00    	jbe    c001c59a <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c4f0:	0f b7 f5             	movzx  esi,bp
c001c4f3:	6b f6 28             	imul   esi,esi,0x28
c001c4f6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c4fa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c4fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c501:	50                   	push   eax
c001c502:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c506:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c50a:	8b 16                	mov    edx,DWORD PTR [esi]
c001c50c:	6b c0 28             	imul   eax,eax,0x28
c001c50f:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c513:	89 d0                	mov    eax,edx
c001c515:	31 d2                	xor    edx,edx
c001c517:	52                   	push   edx
c001c518:	50                   	push   eax
c001c519:	53                   	push   ebx
c001c51a:	e8 97 66 ff ff       	call   c0012bb6 <File::seek(unsigned long long)>
c001c51f:	83 c4 0c             	add    esp,0xc
c001c522:	6a 20                	push   0x20
c001c524:	6a 00                	push   0x0
c001c526:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c52a:	52                   	push   edx
c001c52b:	e8 20 42 fe ff       	call   c0000750 <memset>
c001c530:	58                   	pop    eax
c001c531:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c533:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c537:	51                   	push   ecx
c001c538:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c53c:	52                   	push   edx
c001c53d:	6a 00                	push   0x0
c001c53f:	6a 1f                	push   0x1f
c001c541:	53                   	push   ebx
c001c542:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c545:	83 c4 18             	add    esp,0x18
c001c548:	68 6c b6 02 c0       	push   0xc002b66c
c001c54d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c551:	52                   	push   edx
c001c552:	e8 41 43 fe ff       	call   c0000898 <strcmp>
c001c557:	83 c4 10             	add    esp,0x10
c001c55a:	85 c0                	test   eax,eax
c001c55c:	75 0f                	jne    c001c56d <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c55e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c561:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c565:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c569:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c56d:	50                   	push   eax
c001c56e:	50                   	push   eax
c001c56f:	68 74 b6 02 c0       	push   0xc002b674
c001c574:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c578:	50                   	push   eax
c001c579:	e8 1a 43 fe ff       	call   c0000898 <strcmp>
c001c57e:	83 c4 10             	add    esp,0x10
c001c581:	85 c0                	test   eax,eax
c001c583:	75 0f                	jne    c001c594 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c585:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c588:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c58c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c590:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c594:	45                   	inc    ebp
c001c595:	e9 4c ff ff ff       	jmp    c001c4e6 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c59a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c59f:	75 10                	jne    c001c5b1 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c5a1:	83 ec 0c             	sub    esp,0xc
c001c5a4:	68 7c b6 02 c0       	push   0xc002b67c
c001c5a9:	e8 e7 d6 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001c5ae:	83 c4 10             	add    esp,0x10
c001c5b1:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c5b6:	75 10                	jne    c001c5c8 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c5b8:	83 ec 0c             	sub    esp,0xc
c001c5bb:	68 7c b6 02 c0       	push   0xc002b67c
c001c5c0:	e8 d0 d6 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001c5c5:	83 c4 10             	add    esp,0x10
c001c5c8:	31 d2                	xor    edx,edx
c001c5ca:	50                   	push   eax
c001c5cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5cf:	52                   	push   edx
c001c5d0:	50                   	push   eax
c001c5d1:	53                   	push   ebx
c001c5d2:	e8 df 65 ff ff       	call   c0012bb6 <File::seek(unsigned long long)>
c001c5d7:	5a                   	pop    edx
c001c5d8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c5dc:	e8 b8 2f ff ff       	call   c000f599 <malloc>
c001c5e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c5e9:	31 c9                	xor    ecx,ecx
c001c5eb:	5e                   	pop    esi
c001c5ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5ee:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c5f2:	55                   	push   ebp
c001c5f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5f7:	51                   	push   ecx
c001c5f8:	52                   	push   edx
c001c5f9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c5fd:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c601:	53                   	push   ebx
c001c602:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c605:	83 c4 14             	add    esp,0x14
c001c608:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c60c:	e8 88 2f ff ff       	call   c000f599 <malloc>
c001c611:	89 c6                	mov    esi,eax
c001c613:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c615:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c618:	56                   	push   esi
c001c619:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c61d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c621:	51                   	push   ecx
c001c622:	52                   	push   edx
c001c623:	53                   	push   ebx
c001c624:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c627:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c62b:	8b 15 e0 0a 03 c0    	mov    edx,DWORD PTR ds:0xc0030ae0
c001c631:	83 c4 1c             	add    esp,0x1c
c001c634:	c1 e8 04             	shr    eax,0x4
c001c637:	89 04 95 60 09 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf6a0],eax
c001c63e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c642:	31 d2                	xor    edx,edx
c001c644:	52                   	push   edx
c001c645:	50                   	push   eax
c001c646:	53                   	push   ebx
c001c647:	e8 6a 65 ff ff       	call   c0012bb6 <File::seek(unsigned long long)>
c001c64c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c64e:	31 d2                	xor    edx,edx
c001c650:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c653:	56                   	push   esi
c001c654:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c658:	52                   	push   edx
c001c659:	50                   	push   eax
c001c65a:	53                   	push   ebx
c001c65b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c65e:	83 c4 14             	add    esp,0x14
c001c661:	53                   	push   ebx
c001c662:	e8 ef 64 ff ff       	call   c0012b56 <File::close()>
c001c667:	5d                   	pop    ebp
c001c668:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c66c:	e8 38 2f ff ff       	call   c000f5a9 <free>
c001c671:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c674:	e8 30 2f ff ff       	call   c000f5a9 <free>
c001c679:	a1 e0 0a 03 c0       	mov    eax,ds:0xc0030ae0
c001c67e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c682:	8d 50 01             	lea    edx,[eax+0x1]
c001c685:	89 0c 85 60 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf5a0],ecx
c001c68c:	89 34 85 e0 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf620],esi
c001c693:	89 15 e0 0a 03 c0    	mov    DWORD PTR ds:0xc0030ae0,edx
c001c699:	83 c4 10             	add    esp,0x10
c001c69c:	b0 01                	mov    al,0x1
c001c69e:	83 c4 5c             	add    esp,0x5c
c001c6a1:	5b                   	pop    ebx
c001c6a2:	5e                   	pop    esi
c001c6a3:	5f                   	pop    edi
c001c6a4:	5d                   	pop    ebp
c001c6a5:	c3                   	ret    

c001c6a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c6a6:	55                   	push   ebp
c001c6a7:	57                   	push   edi
c001c6a8:	56                   	push   esi
c001c6a9:	53                   	push   ebx
c001c6aa:	81 ec 68 03 00 00    	sub    esp,0x368
c001c6b0:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c6b7:	8b 1d 30 0b 03 c0    	mov    ebx,DWORD PTR ds:0xc0030b30
c001c6bd:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c6c1:	68 14 01 00 00       	push   0x114
c001c6c6:	e8 ce 2e ff ff       	call   c000f599 <malloc>
c001c6cb:	83 c4 0c             	add    esp,0xc
c001c6ce:	89 c5                	mov    ebp,eax
c001c6d0:	53                   	push   ebx
c001c6d1:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c6d8:	50                   	push   eax
c001c6d9:	e8 b6 63 ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c001c6de:	5e                   	pop    esi
c001c6df:	5f                   	pop    edi
c001c6e0:	6a 01                	push   0x1
c001c6e2:	55                   	push   ebp
c001c6e3:	e8 10 64 ff ff       	call   c0012af8 <File::open(FileOpenMode)>
c001c6e8:	83 c4 10             	add    esp,0x10
c001c6eb:	85 c0                	test   eax,eax
c001c6ed:	0f 85 a7 06 00 00    	jne    c001cd9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c6f3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c6fb:	83 ec 0c             	sub    esp,0xc
c001c6fe:	6a 34                	push   0x34
c001c700:	e8 94 2e ff ff       	call   c000f599 <malloc>
c001c705:	5b                   	pop    ebx
c001c706:	89 c7                	mov    edi,eax
c001c708:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c70c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c70f:	53                   	push   ebx
c001c710:	57                   	push   edi
c001c711:	6a 00                	push   0x0
c001c713:	6a 34                	push   0x34
c001c715:	55                   	push   ebp
c001c716:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c719:	83 c4 20             	add    esp,0x20
c001c71c:	85 c0                	test   eax,eax
c001c71e:	0f 85 76 06 00 00    	jne    c001cd9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c724:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c72a:	0f 85 6a 06 00 00    	jne    c001cd9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c730:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c733:	85 c0                	test   eax,eax
c001c735:	0f 84 5f 06 00 00    	je     c001cd9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c73b:	31 d2                	xor    edx,edx
c001c73d:	51                   	push   ecx
c001c73e:	52                   	push   edx
c001c73f:	50                   	push   eax
c001c740:	55                   	push   ebp
c001c741:	e8 70 64 ff ff       	call   c0012bb6 <File::seek(unsigned long long)>
c001c746:	83 c4 10             	add    esp,0x10
c001c749:	85 c0                	test   eax,eax
c001c74b:	0f 85 49 06 00 00    	jne    c001cd9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c751:	83 ec 0c             	sub    esp,0xc
c001c754:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c757:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c75b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c75f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c763:	0f af c2             	imul   eax,edx
c001c766:	50                   	push   eax
c001c767:	e8 2d 2e ff ff       	call   c000f599 <malloc>
c001c76c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c76f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c773:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c776:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c77a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c77e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c782:	0f af c2             	imul   eax,edx
c001c785:	99                   	cdq    
c001c786:	52                   	push   edx
c001c787:	50                   	push   eax
c001c788:	55                   	push   ebp
c001c789:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c78c:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c78f:	83 c4 20             	add    esp,0x20
c001c792:	85 c0                	test   eax,eax
c001c794:	0f 84 00 06 00 00    	je     c001cd9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c79a:	52                   	push   edx
c001c79b:	31 d2                	xor    edx,edx
c001c79d:	52                   	push   edx
c001c79e:	50                   	push   eax
c001c79f:	55                   	push   ebp
c001c7a0:	e8 11 64 ff ff       	call   c0012bb6 <File::seek(unsigned long long)>
c001c7a5:	83 c4 10             	add    esp,0x10
c001c7a8:	85 c0                	test   eax,eax
c001c7aa:	0f 85 ea 05 00 00    	jne    c001cd9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c7b0:	83 ec 0c             	sub    esp,0xc
c001c7b3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c7b7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c7bb:	31 f6                	xor    esi,esi
c001c7bd:	0f af c2             	imul   eax,edx
c001c7c0:	50                   	push   eax
c001c7c1:	e8 d3 2d ff ff       	call   c000f599 <malloc>
c001c7c6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c7c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c7d4:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c7d8:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c7dc:	0f af c2             	imul   eax,edx
c001c7df:	99                   	cdq    
c001c7e0:	52                   	push   edx
c001c7e1:	50                   	push   eax
c001c7e2:	55                   	push   ebp
c001c7e3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7e6:	83 c4 20             	add    esp,0x20
c001c7e9:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c7ed:	0f 86 8a 00 00 00    	jbe    c001c87d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c7f3:	0f b7 de             	movzx  ebx,si
c001c7f6:	c1 e3 05             	shl    ebx,0x5
c001c7f9:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c7fd:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c800:	75 75                	jne    c001c877 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c802:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c805:	31 d2                	xor    edx,edx
c001c807:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c80b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c80e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c812:	50                   	push   eax
c001c813:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c816:	52                   	push   edx
c001c817:	50                   	push   eax
c001c818:	55                   	push   ebp
c001c819:	e8 98 63 ff ff       	call   c0012bb6 <File::seek(unsigned long long)>
c001c81e:	83 c4 10             	add    esp,0x10
c001c821:	85 c0                	test   eax,eax
c001c823:	0f 85 71 05 00 00    	jne    c001cd9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c829:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c830:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c833:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c837:	31 d2                	xor    edx,edx
c001c839:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c83d:	83 ec 0c             	sub    esp,0xc
c001c840:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c844:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c84b:	50                   	push   eax
c001c84c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c850:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c854:	52                   	push   edx
c001c855:	50                   	push   eax
c001c856:	55                   	push   ebp
c001c857:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c85a:	83 c4 1c             	add    esp,0x1c
c001c85d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c860:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c863:	50                   	push   eax
c001c864:	6a 00                	push   0x0
c001c866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c86e:	50                   	push   eax
c001c86f:	e8 dc 3e fe ff       	call   c0000750 <memset>
c001c874:	83 c4 10             	add    esp,0x10
c001c877:	46                   	inc    esi
c001c878:	e9 6c ff ff ff       	jmp    c001c7e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c87d:	53                   	push   ebx
c001c87e:	31 db                	xor    ebx,ebx
c001c880:	68 00 01 00 00       	push   0x100
c001c885:	6a 00                	push   0x0
c001c887:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c88b:	50                   	push   eax
c001c88c:	e8 bf 3e fe ff       	call   c0000750 <memset>
c001c891:	83 c4 0c             	add    esp,0xc
c001c894:	68 00 01 00 00       	push   0x100
c001c899:	6a 00                	push   0x0
c001c89b:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c8a2:	50                   	push   eax
c001c8a3:	e8 a8 3e fe ff       	call   c0000750 <memset>
c001c8a8:	83 c4 10             	add    esp,0x10
c001c8ab:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c8b3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c8bb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001c8c3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c8cb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c8d3:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c8d7:	0f 86 30 01 00 00    	jbe    c001ca0d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c8dd:	0f b7 f3             	movzx  esi,bx
c001c8e0:	6b f6 28             	imul   esi,esi,0x28
c001c8e3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c8e7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c8ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8ee:	52                   	push   edx
c001c8ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c8f3:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c8f7:	8b 06                	mov    eax,DWORD PTR [esi]
c001c8f9:	6b d2 28             	imul   edx,edx,0x28
c001c8fc:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c900:	31 d2                	xor    edx,edx
c001c902:	52                   	push   edx
c001c903:	50                   	push   eax
c001c904:	55                   	push   ebp
c001c905:	e8 ac 62 ff ff       	call   c0012bb6 <File::seek(unsigned long long)>
c001c90a:	83 c4 0c             	add    esp,0xc
c001c90d:	6a 20                	push   0x20
c001c90f:	6a 00                	push   0x0
c001c911:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c918:	51                   	push   ecx
c001c919:	e8 32 3e fe ff       	call   c0000750 <memset>
c001c91e:	59                   	pop    ecx
c001c91f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c922:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c926:	52                   	push   edx
c001c927:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c92e:	51                   	push   ecx
c001c92f:	6a 00                	push   0x0
c001c931:	6a 1f                	push   0x1f
c001c933:	55                   	push   ebp
c001c934:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c937:	83 c4 1c             	add    esp,0x1c
c001c93a:	6a 09                	push   0x9
c001c93c:	68 96 b6 02 c0       	push   0xc002b696
c001c941:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c948:	51                   	push   ecx
c001c949:	e8 fe 3c fe ff       	call   c000064c <memcmp>
c001c94e:	83 c4 10             	add    esp,0x10
c001c951:	85 c0                	test   eax,eax
c001c953:	75 21                	jne    c001c976 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c955:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c959:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c95d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c961:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c965:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c968:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c96f:	89 d0                	mov    eax,edx
c001c971:	40                   	inc    eax
c001c972:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c976:	50                   	push   eax
c001c977:	6a 09                	push   0x9
c001c979:	68 a0 b6 02 c0       	push   0xc002b6a0
c001c97e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c985:	50                   	push   eax
c001c986:	e8 c1 3c fe ff       	call   c000064c <memcmp>
c001c98b:	83 c4 10             	add    esp,0x10
c001c98e:	85 c0                	test   eax,eax
c001c990:	75 21                	jne    c001c9b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c996:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c99a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c99e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c9a2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9a5:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001c9ac:	89 d0                	mov    eax,edx
c001c9ae:	40                   	inc    eax
c001c9af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c9b3:	50                   	push   eax
c001c9b4:	50                   	push   eax
c001c9b5:	68 6c b6 02 c0       	push   0xc002b66c
c001c9ba:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9c1:	50                   	push   eax
c001c9c2:	e8 d1 3e fe ff       	call   c0000898 <strcmp>
c001c9c7:	83 c4 10             	add    esp,0x10
c001c9ca:	85 c0                	test   eax,eax
c001c9cc:	75 0f                	jne    c001c9dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c9ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c9d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c9d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c9dd:	50                   	push   eax
c001c9de:	50                   	push   eax
c001c9df:	68 74 b6 02 c0       	push   0xc002b674
c001c9e4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9eb:	50                   	push   eax
c001c9ec:	e8 a7 3e fe ff       	call   c0000898 <strcmp>
c001c9f1:	83 c4 10             	add    esp,0x10
c001c9f4:	85 c0                	test   eax,eax
c001c9f6:	75 0f                	jne    c001ca07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c9f8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c9fb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c9ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca03:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ca07:	43                   	inc    ebx
c001ca08:	e9 c6 fe ff ff       	jmp    c001c8d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001ca0d:	31 d2                	xor    edx,edx
c001ca0f:	50                   	push   eax
c001ca10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ca14:	52                   	push   edx
c001ca15:	50                   	push   eax
c001ca16:	55                   	push   ebp
c001ca17:	e8 9a 61 ff ff       	call   c0012bb6 <File::seek(unsigned long long)>
c001ca1c:	58                   	pop    eax
c001ca1d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca21:	e8 73 2b ff ff       	call   c000f599 <malloc>
c001ca26:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca29:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ca2d:	31 d2                	xor    edx,edx
c001ca2f:	58                   	pop    eax
c001ca30:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001ca34:	53                   	push   ebx
c001ca35:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ca39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca3d:	52                   	push   edx
c001ca3e:	50                   	push   eax
c001ca3f:	55                   	push   ebp
c001ca40:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca43:	83 c4 14             	add    esp,0x14
c001ca46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ca4a:	e8 4a 2b ff ff       	call   c000f599 <malloc>
c001ca4f:	31 d2                	xor    edx,edx
c001ca51:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca55:	83 c4 0c             	add    esp,0xc
c001ca58:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ca5c:	52                   	push   edx
c001ca5d:	50                   	push   eax
c001ca5e:	55                   	push   ebp
c001ca5f:	e8 52 61 ff ff       	call   c0012bb6 <File::seek(unsigned long long)>
c001ca64:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ca67:	31 d2                	xor    edx,edx
c001ca69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ca70:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ca74:	52                   	push   edx
c001ca75:	50                   	push   eax
c001ca76:	55                   	push   ebp
c001ca77:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca7a:	83 c4 20             	add    esp,0x20
c001ca7d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca85:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ca89:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001ca8d:	0f 84 0b 03 00 00    	je     c001cd9e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001ca93:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001ca9a:	31 d2                	xor    edx,edx
c001ca9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001caa0:	c1 e8 03             	shr    eax,0x3
c001caa3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001caa7:	51                   	push   ecx
c001caa8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001caac:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cab0:	52                   	push   edx
c001cab1:	50                   	push   eax
c001cab2:	55                   	push   ebp
c001cab3:	e8 fe 60 ff ff       	call   c0012bb6 <File::seek(unsigned long long)>
c001cab8:	5b                   	pop    ebx
c001cab9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cabd:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cac4:	e8 d0 2a ff ff       	call   c000f599 <malloc>
c001cac9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cacc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cad0:	31 d2                	xor    edx,edx
c001cad2:	5e                   	pop    esi
c001cad3:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cad7:	50                   	push   eax
c001cad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cadc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cae0:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cae7:	52                   	push   edx
c001cae8:	50                   	push   eax
c001cae9:	55                   	push   ebp
c001caea:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001caed:	83 c4 20             	add    esp,0x20
c001caf0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001caf8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cafc:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cb00:	0f 8d 7c 02 00 00    	jge    c001cd82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cb06:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb0e:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cb13:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cb16:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cb1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb1e:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001cb22:	89 d8                	mov    eax,ebx
c001cb24:	c1 e8 08             	shr    eax,0x8
c001cb27:	89 c6                	mov    esi,eax
c001cb29:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001cb2d:	c1 e6 04             	shl    esi,0x4
c001cb30:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001cb34:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001cb37:	85 d2                	test   edx,edx
c001cb39:	0f 85 bf 00 00 00    	jne    c001cbfe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb3f:	83 ec 0c             	sub    esp,0xc
c001cb42:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb46:	03 06                	add    eax,DWORD PTR [esi]
c001cb48:	50                   	push   eax
c001cb49:	e8 4b f8 ff ff       	call   c001c399 <Thr::getAddressOfKernelSymbol(char const*)>
c001cb4e:	83 c4 10             	add    esp,0x10
c001cb51:	89 c2                	mov    edx,eax
c001cb53:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cb58:	85 c0                	test   eax,eax
c001cb5a:	0f 85 9e 00 00 00    	jne    c001cbfe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb60:	83 ec 0c             	sub    esp,0xc
c001cb63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb67:	03 06                	add    eax,DWORD PTR [esi]
c001cb69:	50                   	push   eax
c001cb6a:	e8 d0 19 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001cb6f:	83 c4 10             	add    esp,0x10
c001cb72:	89 c2                	mov    edx,eax
c001cb74:	85 c0                	test   eax,eax
c001cb76:	0f 85 82 00 00 00    	jne    c001cbfe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cb7c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cb80:	50                   	push   eax
c001cb81:	50                   	push   eax
c001cb82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb86:	03 06                	add    eax,DWORD PTR [esi]
c001cb88:	50                   	push   eax
c001cb89:	68 aa b6 02 c0       	push   0xc002b6aa
c001cb8e:	e8 a2 59 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001cb93:	58                   	pop    eax
c001cb94:	5a                   	pop    edx
c001cb95:	68 c4 b6 02 c0       	push   0xc002b6c4
c001cb9a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cba1:	50                   	push   eax
c001cba2:	e8 65 3c fe ff       	call   c000080c <strcpy>
c001cba7:	59                   	pop    ecx
c001cba8:	58                   	pop    eax
c001cba9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbad:	03 06                	add    eax,DWORD PTR [esi]
c001cbaf:	50                   	push   eax
c001cbb0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbb7:	50                   	push   eax
c001cbb8:	e8 8f 3d fe ff       	call   c000094c <strcat>
c001cbbd:	58                   	pop    eax
c001cbbe:	5a                   	pop    edx
c001cbbf:	68 5a b7 02 c0       	push   0xc002b75a
c001cbc4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbcb:	50                   	push   eax
c001cbcc:	e8 7b 3d fe ff       	call   c000094c <strcat>
c001cbd1:	83 c4 10             	add    esp,0x10
c001cbd4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cbd9:	0f 84 5d 01 00 00    	je     c001cd3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cbdf:	83 ec 0c             	sub    esp,0xc
c001cbe2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cbe9:	50                   	push   eax
c001cbea:	e8 a6 d0 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001cbef:	83 c4 10             	add    esp,0x10
c001cbf2:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cbf6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cbfa:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cbfe:	80 fb 01             	cmp    bl,0x1
c001cc01:	0f 85 88 00 00 00    	jne    c001cc8f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cc07:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cc0e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cc12:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cc16:	01 ce                	add    esi,ecx
c001cc18:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cc1e:	0f 94 c0             	sete   al
c001cc21:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cc27:	0f 94 c3             	sete   bl
c001cc2a:	09 c3                	or     ebx,eax
c001cc2c:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc2e:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cc33:	74 41                	je     c001cc76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cc35:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cc38:	84 db                	test   bl,bl
c001cc3a:	75 15                	jne    c001cc51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cc3c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc40:	66 83 f8 0c          	cmp    ax,0xc
c001cc44:	76 05                	jbe    c001cc4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cc46:	b8 0c 00 00 00       	mov    eax,0xc
c001cc4b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cc4f:	76 37                	jbe    c001cc88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cc51:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cc55:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cc5a:	0f 84 dc 00 00 00    	je     c001cd3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cc60:	83 ec 0c             	sub    esp,0xc
c001cc63:	68 db b6 02 c0       	push   0xc002b6db
c001cc68:	e8 28 d0 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001cc6d:	83 c4 10             	add    esp,0x10
c001cc70:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cc74:	eb 12                	jmp    c001cc88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cc76:	01 c1                	add    ecx,eax
c001cc78:	84 db                	test   bl,bl
c001cc7a:	75 0c                	jne    c001cc88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cc7c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc80:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cc84:	77 02                	ja     c001cc88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cc86:	01 d1                	add    ecx,edx
c001cc88:	89 0e                	mov    DWORD PTR [esi],ecx
c001cc8a:	e9 ea 00 00 00       	jmp    c001cd79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cc8f:	80 fb 02             	cmp    bl,0x2
c001cc92:	75 7c                	jne    c001cd10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001cc94:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001cc9b:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001cc9f:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001cca3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cca9:	74 20                	je     c001cccb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ccab:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ccb1:	74 18                	je     c001cccb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ccb3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccb7:	b9 0a 00 00 00       	mov    ecx,0xa
c001ccbc:	66 83 f8 0e          	cmp    ax,0xe
c001ccc0:	77 03                	ja     c001ccc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001ccc2:	8d 48 fc             	lea    ecx,[eax-0x4]
c001ccc5:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001ccc9:	76 1f                	jbe    c001ccea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001cccb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001cccf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ccd4:	74 66                	je     c001cd3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ccd6:	83 ec 0c             	sub    esp,0xc
c001ccd9:	68 f7 b6 02 c0       	push   0xc002b6f7
c001ccde:	e8 b2 cf ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001cce3:	83 c4 10             	add    esp,0x10
c001cce6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ccea:	8b 06                	mov    eax,DWORD PTR [esi]
c001ccec:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ccf1:	74 13                	je     c001cd06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001ccf3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ccf7:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ccfe:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001cd02:	01 c8                	add    eax,ecx
c001cd04:	eb 04                	jmp    c001cd0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001cd06:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001cd0a:	01 c2                	add    edx,eax
c001cd0c:	89 16                	mov    DWORD PTR [esi],edx
c001cd0e:	eb 69                	jmp    c001cd79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cd10:	0f b6 db             	movzx  ebx,bl
c001cd13:	50                   	push   eax
c001cd14:	50                   	push   eax
c001cd15:	53                   	push   ebx
c001cd16:	68 13 b7 02 c0       	push   0xc002b713
c001cd1b:	e8 15 58 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001cd20:	83 c4 10             	add    esp,0x10
c001cd23:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd28:	74 12                	je     c001cd3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd2a:	83 ec 0c             	sub    esp,0xc
c001cd2d:	68 1e b7 02 c0       	push   0xc002b71e
c001cd32:	e8 5e cf ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001cd37:	83 c4 10             	add    esp,0x10
c001cd3a:	eb 3d                	jmp    c001cd79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cd3c:	83 ec 0c             	sub    esp,0xc
c001cd3f:	55                   	push   ebp
c001cd40:	e8 11 5e ff ff       	call   c0012b56 <File::close()>
c001cd45:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cd48:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cd4b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cd4e:	59                   	pop    ecx
c001cd4f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd53:	e8 51 28 ff ff       	call   c000f5a9 <free>
c001cd58:	5b                   	pop    ebx
c001cd59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd5d:	e8 47 28 ff ff       	call   c000f5a9 <free>
c001cd62:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cd65:	e8 3f 28 ff ff       	call   c000f5a9 <free>
c001cd6a:	5e                   	pop    esi
c001cd6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd6f:	e8 35 28 ff ff       	call   c000f5a9 <free>
c001cd74:	83 c4 10             	add    esp,0x10
c001cd77:	eb 21                	jmp    c001cd9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cd79:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cd7d:	e9 76 fd ff ff       	jmp    c001caf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cd82:	83 ec 0c             	sub    esp,0xc
c001cd85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd89:	e8 1b 28 ff ff       	call   c000f5a9 <free>
c001cd8e:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cd92:	83 c4 10             	add    esp,0x10
c001cd95:	e9 eb fc ff ff       	jmp    c001ca85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cd9a:	31 c0                	xor    eax,eax
c001cd9c:	eb 33                	jmp    c001cdd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cd9e:	83 ec 0c             	sub    esp,0xc
c001cda1:	55                   	push   ebp
c001cda2:	e8 af 5d ff ff       	call   c0012b56 <File::close()>
c001cda7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cdaa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cdad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cdb0:	58                   	pop    eax
c001cdb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdb5:	e8 ef 27 ff ff       	call   c000f5a9 <free>
c001cdba:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cdbd:	e8 e7 27 ff ff       	call   c000f5a9 <free>
c001cdc2:	5a                   	pop    edx
c001cdc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdc7:	e8 dd 27 ff ff       	call   c000f5a9 <free>
c001cdcc:	83 c4 10             	add    esp,0x10
c001cdcf:	b0 01                	mov    al,0x1
c001cdd1:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cdd7:	5b                   	pop    ebx
c001cdd8:	5e                   	pop    esi
c001cdd9:	5f                   	pop    edi
c001cdda:	5d                   	pop    ebp
c001cddb:	c3                   	ret    

c001cddc <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cddc:	56                   	push   esi
c001cddd:	31 d2                	xor    edx,edx
c001cddf:	53                   	push   ebx
c001cde0:	8b 1d 40 03 03 c0    	mov    ebx,DWORD PTR ds:0xc0030340
c001cde6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cdea:	39 d3                	cmp    ebx,edx
c001cdec:	7e 1b                	jle    c001ce09 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cdee:	8b 04 95 60 05 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcfaa0]
c001cdf5:	39 c8                	cmp    eax,ecx
c001cdf7:	77 0d                	ja     c001ce06 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cdf9:	8b 34 95 60 03 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcfca0]
c001ce00:	01 c6                	add    esi,eax
c001ce02:	39 ce                	cmp    esi,ecx
c001ce04:	77 05                	ja     c001ce0b <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001ce06:	42                   	inc    edx
c001ce07:	eb e1                	jmp    c001cdea <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001ce09:	31 c0                	xor    eax,eax
c001ce0b:	5b                   	pop    ebx
c001ce0c:	5e                   	pop    esi
c001ce0d:	c3                   	ret    

c001ce0e <Thr::getDriverNameFromAddress(unsigned long)>:
c001ce0e:	53                   	push   ebx
c001ce0f:	31 c0                	xor    eax,eax
c001ce11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ce15:	8b 1d 40 03 03 c0    	mov    ebx,DWORD PTR ds:0xc0030340
c001ce1b:	39 c3                	cmp    ebx,eax
c001ce1d:	7e 22                	jle    c001ce41 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001ce1f:	8b 14 85 60 05 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfaa0]
c001ce26:	39 ca                	cmp    edx,ecx
c001ce28:	77 14                	ja     c001ce3e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ce2a:	03 14 85 60 03 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcfca0]
c001ce31:	39 ca                	cmp    edx,ecx
c001ce33:	76 09                	jbe    c001ce3e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001ce35:	8b 04 85 60 07 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf8a0]
c001ce3c:	eb 05                	jmp    c001ce43 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001ce3e:	40                   	inc    eax
c001ce3f:	eb da                	jmp    c001ce1b <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001ce41:	31 c0                	xor    eax,eax
c001ce43:	5b                   	pop    ebx
c001ce44:	c3                   	ret    

c001ce45 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001ce45:	53                   	push   ebx
c001ce46:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001ce4a:	53                   	push   ebx
c001ce4b:	e8 8c ff ff ff       	call   c001cddc <Thr::getDriverBaseFromAddress(unsigned long)>
c001ce50:	5a                   	pop    edx
c001ce51:	31 d2                	xor    edx,edx
c001ce53:	85 c0                	test   eax,eax
c001ce55:	74 04                	je     c001ce5b <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001ce57:	89 da                	mov    edx,ebx
c001ce59:	29 c2                	sub    edx,eax
c001ce5b:	89 d0                	mov    eax,edx
c001ce5d:	5b                   	pop    ebx
c001ce5e:	c3                   	ret    

c001ce5f <Thr::loadDLL(char const*, bool)>:
c001ce5f:	55                   	push   ebp
c001ce60:	57                   	push   edi
c001ce61:	56                   	push   esi
c001ce62:	53                   	push   ebx
c001ce63:	81 ec 34 01 00 00    	sub    esp,0x134
c001ce69:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001ce70:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001ce77:	56                   	push   esi
c001ce78:	68 36 b7 02 c0       	push   0xc002b736
c001ce7d:	e8 b3 56 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001ce82:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ce89:	e8 0b 27 ff ff       	call   c000f599 <malloc>
c001ce8e:	83 c4 0c             	add    esp,0xc
c001ce91:	89 c3                	mov    ebx,eax
c001ce93:	ff 35 30 0b 03 c0    	push   DWORD PTR ds:0xc0030b30
c001ce99:	56                   	push   esi
c001ce9a:	50                   	push   eax
c001ce9b:	e8 f4 5b ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c001cea0:	83 c4 10             	add    esp,0x10
c001cea3:	85 db                	test   ebx,ebx
c001cea5:	75 3c                	jne    c001cee3 <Thr::loadDLL(char const*, bool)+0x84>
c001cea7:	89 f8                	mov    eax,edi
c001cea9:	84 c0                	test   al,al
c001ceab:	0f 84 cc 01 00 00    	je     c001d07d <Thr::loadDLL(char const*, bool)+0x21e>
c001ceb1:	55                   	push   ebp
c001ceb2:	55                   	push   ebp
c001ceb3:	68 47 b7 02 c0       	push   0xc002b747
c001ceb8:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001cebc:	55                   	push   ebp
c001cebd:	e8 4a 39 fe ff       	call   c000080c <strcpy>
c001cec2:	58                   	pop    eax
c001cec3:	5a                   	pop    edx
c001cec4:	56                   	push   esi
c001cec5:	55                   	push   ebp
c001cec6:	e8 81 3a fe ff       	call   c000094c <strcat>
c001cecb:	59                   	pop    ecx
c001cecc:	58                   	pop    eax
c001cecd:	68 5a b7 02 c0       	push   0xc002b75a
c001ced2:	55                   	push   ebp
c001ced3:	e8 74 3a fe ff       	call   c000094c <strcat>
c001ced8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cedb:	e8 b5 cd ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001cee0:	83 c4 10             	add    esp,0x10
c001cee3:	51                   	push   ecx
c001cee4:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001cee8:	50                   	push   eax
c001cee9:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ceed:	50                   	push   eax
c001ceee:	53                   	push   ebx
c001ceef:	e8 b0 5e ff ff       	call   c0012da4 <File::stat(unsigned long long*, bool*)>
c001cef4:	83 c4 10             	add    esp,0x10
c001cef7:	85 db                	test   ebx,ebx
c001cef9:	74 0c                	je     c001cf07 <Thr::loadDLL(char const*, bool)+0xa8>
c001cefb:	83 ec 0c             	sub    esp,0xc
c001cefe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf00:	53                   	push   ebx
c001cf01:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf04:	83 c4 10             	add    esp,0x10
c001cf07:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001cf0c:	75 0a                	jne    c001cf18 <Thr::loadDLL(char const*, bool)+0xb9>
c001cf0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cf12:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001cf16:	75 3c                	jne    c001cf54 <Thr::loadDLL(char const*, bool)+0xf5>
c001cf18:	89 f8                	mov    eax,edi
c001cf1a:	84 c0                	test   al,al
c001cf1c:	0f 84 43 01 00 00    	je     c001d065 <Thr::loadDLL(char const*, bool)+0x206>
c001cf22:	51                   	push   ecx
c001cf23:	51                   	push   ecx
c001cf24:	68 47 b7 02 c0       	push   0xc002b747
c001cf29:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001cf2d:	53                   	push   ebx
c001cf2e:	e8 d9 38 fe ff       	call   c000080c <strcpy>
c001cf33:	5d                   	pop    ebp
c001cf34:	58                   	pop    eax
c001cf35:	56                   	push   esi
c001cf36:	53                   	push   ebx
c001cf37:	e8 10 3a fe ff       	call   c000094c <strcat>
c001cf3c:	58                   	pop    eax
c001cf3d:	5a                   	pop    edx
c001cf3e:	68 5a b7 02 c0       	push   0xc002b75a
c001cf43:	53                   	push   ebx
c001cf44:	e8 03 3a fe ff       	call   c000094c <strcat>
c001cf49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf4c:	e8 44 cd ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001cf51:	83 c4 10             	add    esp,0x10
c001cf54:	52                   	push   edx
c001cf55:	6a 03                	push   0x3
c001cf57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf5b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cf5f:	05 ff 0f 00 00       	add    eax,0xfff
c001cf64:	83 d2 00             	adc    edx,0x0
c001cf67:	0f ac d0 0c          	shrd   eax,edx,0xc
c001cf6b:	50                   	push   eax
c001cf6c:	ff 35 50 d7 02 c0    	push   DWORD PTR ds:0xc002d750
c001cf72:	e8 e5 4a ff ff       	call   c0011a5c <VAS::allocatePages(int, int)>
c001cf77:	59                   	pop    ecx
c001cf78:	89 c3                	mov    ebx,eax
c001cf7a:	5d                   	pop    ebp
c001cf7b:	50                   	push   eax
c001cf7c:	68 62 9e 02 c0       	push   0xc0029e62
c001cf81:	e8 af 55 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001cf86:	89 34 24             	mov    DWORD PTR [esp],esi
c001cf89:	e8 de 37 fe ff       	call   c000076c <strlen>
c001cf8e:	8b 2d 40 03 03 c0    	mov    ebp,DWORD PTR ds:0xc0030340
c001cf94:	40                   	inc    eax
c001cf95:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf98:	e8 fc 25 ff ff       	call   c000f599 <malloc>
c001cf9d:	89 04 ad 60 07 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf8a0],eax
c001cfa4:	58                   	pop    eax
c001cfa5:	a1 40 03 03 c0       	mov    eax,ds:0xc0030340
c001cfaa:	5a                   	pop    edx
c001cfab:	56                   	push   esi
c001cfac:	ff 34 85 60 07 03 c0 	push   DWORD PTR [eax*4-0x3ffcf8a0]
c001cfb3:	e8 54 38 fe ff       	call   c000080c <strcpy>
c001cfb8:	a1 40 03 03 c0       	mov    eax,ds:0xc0030340
c001cfbd:	8d 50 01             	lea    edx,[eax+0x1]
c001cfc0:	89 1c 85 60 05 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfaa0],ebx
c001cfc7:	89 15 40 03 03 c0    	mov    DWORD PTR ds:0xc0030340,edx
c001cfcd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cfd1:	83 c4 0c             	add    esp,0xc
c001cfd4:	89 14 85 60 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfca0],edx
c001cfdb:	6a 01                	push   0x1
c001cfdd:	53                   	push   ebx
c001cfde:	56                   	push   esi
c001cfdf:	e8 c2 f6 ff ff       	call   c001c6a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001cfe4:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001cfe8:	83 c4 10             	add    esp,0x10
c001cfeb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cff0:	0f 85 83 00 00 00    	jne    c001d079 <Thr::loadDLL(char const*, bool)+0x21a>
c001cff6:	89 f8                	mov    eax,edi
c001cff8:	84 c0                	test   al,al
c001cffa:	74 6d                	je     c001d069 <Thr::loadDLL(char const*, bool)+0x20a>
c001cffc:	83 ec 0c             	sub    esp,0xc
c001cfff:	68 5c b7 02 c0       	push   0xc002b75c
c001d004:	e8 8c cc ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001d009:	83 c4 10             	add    esp,0x10
c001d00c:	eb 5b                	jmp    c001d069 <Thr::loadDLL(char const*, bool)+0x20a>
c001d00e:	89 ee                	mov    esi,ebp
c001d010:	50                   	push   eax
c001d011:	c1 e6 0c             	shl    esi,0xc
c001d014:	50                   	push   eax
c001d015:	01 de                	add    esi,ebx
c001d017:	56                   	push   esi
c001d018:	ff 35 50 d7 02 c0    	push   DWORD PTR ds:0xc002d750
c001d01e:	e8 a1 45 ff ff       	call   c00115c4 <VAS::getPageTableEntry(unsigned long)>
c001d023:	83 c4 10             	add    esp,0x10
c001d026:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d029:	75 0c                	jne    c001d037 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d02b:	83 ec 0c             	sub    esp,0xc
c001d02e:	56                   	push   esi
c001d02f:	e8 ae 28 ff ff       	call   c000f8e2 <Phys::freePage(unsigned long)>
c001d034:	83 c4 10             	add    esp,0x10
c001d037:	45                   	inc    ebp
c001d038:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d03c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d040:	05 ff 0f 00 00       	add    eax,0xfff
c001d045:	bf 00 00 00 00       	mov    edi,0x0
c001d04a:	83 d2 00             	adc    edx,0x0
c001d04d:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d051:	c1 ea 0c             	shr    edx,0xc
c001d054:	39 c5                	cmp    ebp,eax
c001d056:	89 d1                	mov    ecx,edx
c001d058:	89 f8                	mov    eax,edi
c001d05a:	19 c8                	sbb    eax,ecx
c001d05c:	72 b0                	jb     c001d00e <Thr::loadDLL(char const*, bool)+0x1af>
c001d05e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d063:	75 18                	jne    c001d07d <Thr::loadDLL(char const*, bool)+0x21e>
c001d065:	31 db                	xor    ebx,ebx
c001d067:	eb 14                	jmp    c001d07d <Thr::loadDLL(char const*, bool)+0x21e>
c001d069:	83 ec 0c             	sub    esp,0xc
c001d06c:	68 7b b7 02 c0       	push   0xc002b77b
c001d071:	e8 1f cc ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001d076:	83 c4 10             	add    esp,0x10
c001d079:	31 ed                	xor    ebp,ebp
c001d07b:	eb bb                	jmp    c001d038 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d07d:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d083:	89 d8                	mov    eax,ebx
c001d085:	5b                   	pop    ebx
c001d086:	5e                   	pop    esi
c001d087:	5f                   	pop    edi
c001d088:	5d                   	pop    ebp
c001d089:	c3                   	ret    

c001d08a <Thr::executeDLL(unsigned long, void*)>:
c001d08a:	56                   	push   esi
c001d08b:	53                   	push   ebx
c001d08c:	52                   	push   edx
c001d08d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d091:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d095:	85 db                	test   ebx,ebx
c001d097:	75 10                	jne    c001d0a9 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d099:	83 ec 0c             	sub    esp,0xc
c001d09c:	68 97 b7 02 c0       	push   0xc002b797
c001d0a1:	e8 ef cb ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001d0a6:	83 c4 10             	add    esp,0x10
c001d0a9:	50                   	push   eax
c001d0aa:	50                   	push   eax
c001d0ab:	53                   	push   ebx
c001d0ac:	68 c1 b7 02 c0       	push   0xc002b7c1
c001d0b1:	e8 7f 54 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001d0b6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d0ba:	89 d8                	mov    eax,ebx
c001d0bc:	83 c4 14             	add    esp,0x14
c001d0bf:	5b                   	pop    ebx
c001d0c0:	5e                   	pop    esi
c001d0c1:	ff e0                	jmp    eax
c001d0c3:	90                   	nop

c001d0c4 <userModeEntryPoint(void*)>:
c001d0c4:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001d0c9:	48                   	dec    eax
c001d0ca:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001d0cf:	75 01                	jne    c001d0d2 <userModeEntryPoint(void*)+0xe>
c001d0d1:	fb                   	sti    
c001d0d2:	fb                   	sti    
c001d0d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0d8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d0db:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d0e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d0e5:	e9 40 32 fe ff       	jmp    c000032a <goToUsermode>

c001d0ea <changeTSS>:
c001d0ea:	83 ec 14             	sub    esp,0x14
c001d0ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0f2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d0f5:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d0fa:	c1 e2 15             	shl    edx,0x15
c001d0fd:	29 d0                	sub    eax,edx
c001d0ff:	50                   	push   eax
c001d100:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c001d105:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d10b:	05 7c 11 00 00       	add    eax,0x117c
c001d110:	50                   	push   eax
c001d111:	e8 dc 39 ff ff       	call   c0010af2 <TSS::setESP(unsigned long)>
c001d116:	83 c4 1c             	add    esp,0x1c
c001d119:	c3                   	ret    

c001d11a <switchToThread(ThreadControlBlock*)>:
c001d11a:	57                   	push   edi
c001d11b:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c001d120:	56                   	push   esi
c001d121:	85 c0                	test   eax,eax
c001d123:	53                   	push   ebx
c001d124:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d128:	0f 85 88 00 00 00    	jne    c001d1b6 <switchToThread(ThreadControlBlock*)+0x9c>
c001d12e:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d131:	3c ff                	cmp    al,0xff
c001d133:	74 7d                	je     c001d1b2 <switchToThread(ThreadControlBlock*)+0x98>
c001d135:	0f b6 d0             	movzx  edx,al
c001d138:	b8 84 03 00 00       	mov    eax,0x384
c001d13d:	29 d0                	sub    eax,edx
c001d13f:	c1 e0 10             	shl    eax,0x10
c001d142:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d145:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d148:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c001d14d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d153:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d15a:	74 4a                	je     c001d1a6 <switchToThread(ThreadControlBlock*)+0x8c>
c001d15c:	0f 31                	rdtsc  
c001d15e:	a3 48 0b 03 c0       	mov    ds:0xc0030b48,eax
c001d163:	89 c6                	mov    esi,eax
c001d165:	89 d7                	mov    edi,edx
c001d167:	2b 35 38 0b 03 c0    	sub    esi,DWORD PTR ds:0xc0030b38
c001d16d:	89 15 4c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b4c,edx
c001d173:	1b 3d 3c 0b 03 c0    	sbb    edi,DWORD PTR ds:0xc0030b3c
c001d179:	89 35 40 0b 03 c0    	mov    DWORD PTR ds:0xc0030b40,esi
c001d17f:	a3 38 0b 03 c0       	mov    ds:0xc0030b38,eax
c001d184:	89 3d 44 0b 03 c0    	mov    DWORD PTR ds:0xc0030b44,edi
c001d18a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d190:	89 15 3c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b3c,edx
c001d196:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d199:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d19c:	01 c6                	add    esi,eax
c001d19e:	11 d7                	adc    edi,edx
c001d1a0:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d1a3:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d1a6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d1aa:	5b                   	pop    ebx
c001d1ab:	5e                   	pop    esi
c001d1ac:	5f                   	pop    edi
c001d1ad:	e9 b0 31 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d1b2:	31 c0                	xor    eax,eax
c001d1b4:	eb 8f                	jmp    c001d145 <switchToThread(ThreadControlBlock*)+0x2b>
c001d1b6:	5b                   	pop    ebx
c001d1b7:	c7 05 00 0b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030b00,0x1
c001d1c1:	5e                   	pop    esi
c001d1c2:	5f                   	pop    edi
c001d1c3:	c3                   	ret    

c001d1c4 <Process::addArgs(char**)>:
c001d1c4:	57                   	push   edi
c001d1c5:	56                   	push   esi
c001d1c6:	53                   	push   ebx
c001d1c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d1cb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d1cf:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d1d9:	85 ff                	test   edi,edi
c001d1db:	74 3d                	je     c001d21a <Process::addArgs(char**)+0x56>
c001d1dd:	8b 07                	mov    eax,DWORD PTR [edi]
c001d1df:	85 c0                	test   eax,eax
c001d1e1:	74 37                	je     c001d21a <Process::addArgs(char**)+0x56>
c001d1e3:	31 db                	xor    ebx,ebx
c001d1e5:	83 ec 0c             	sub    esp,0xc
c001d1e8:	50                   	push   eax
c001d1e9:	e8 7e 35 fe ff       	call   c000076c <strlen>
c001d1ee:	40                   	inc    eax
c001d1ef:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1f2:	e8 a2 23 ff ff       	call   c000f599 <malloc>
c001d1f7:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d1fe:	5a                   	pop    edx
c001d1ff:	59                   	pop    ecx
c001d200:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d203:	43                   	inc    ebx
c001d204:	50                   	push   eax
c001d205:	e8 02 36 fe ff       	call   c000080c <strcpy>
c001d20a:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d210:	83 c4 10             	add    esp,0x10
c001d213:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d216:	85 c0                	test   eax,eax
c001d218:	75 cb                	jne    c001d1e5 <Process::addArgs(char**)+0x21>
c001d21a:	5b                   	pop    ebx
c001d21b:	5e                   	pop    esi
c001d21c:	5f                   	pop    edi
c001d21d:	c3                   	ret    

c001d21e <Process::Process(char const*, Process*, char**)>:
c001d21e:	56                   	push   esi
c001d21f:	53                   	push   ebx
c001d220:	83 ec 14             	sub    esp,0x14
c001d223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d227:	05 0c 02 00 00       	add    eax,0x20c
c001d22c:	bb 07 00 00 00       	mov    ebx,0x7
c001d231:	89 c6                	mov    esi,eax
c001d233:	85 db                	test   ebx,ebx
c001d235:	78 12                	js     c001d249 <Process::Process(char const*, Process*, char**)+0x2b>
c001d237:	83 ec 0c             	sub    esp,0xc
c001d23a:	56                   	push   esi
c001d23b:	e8 96 b6 00 00       	call   c00288d6 <ThreadControlBlock::ThreadControlBlock()>
c001d240:	83 c4 10             	add    esp,0x10
c001d243:	83 c6 63             	add    esi,0x63
c001d246:	4b                   	dec    ebx
c001d247:	eb ea                	jmp    c001d233 <Process::Process(char const*, Process*, char**)+0x15>
c001d249:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d24d:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d254:	83 ec 0c             	sub    esp,0xc
c001d257:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d25b:	e8 be c8 ff ff       	call   c0019b1e <Krnl::newProcessEnv(Process*)>
c001d260:	83 c4 10             	add    esp,0x10
c001d263:	89 c2                	mov    edx,eax
c001d265:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d269:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d26f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d273:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d27c:	a1 70 cb 02 c0       	mov    eax,ds:0xc002cb70
c001d281:	8d 50 01             	lea    edx,[eax+0x1]
c001d284:	89 15 70 cb 02 c0    	mov    DWORD PTR ds:0xc002cb70,edx
c001d28a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d28e:	89 02                	mov    DWORD PTR [edx],eax
c001d290:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d298:	83 ec 0c             	sub    esp,0xc
c001d29b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d29f:	e8 f5 22 ff ff       	call   c000f599 <malloc>
c001d2a4:	83 c4 10             	add    esp,0x10
c001d2a7:	89 c3                	mov    ebx,eax
c001d2a9:	83 ec 08             	sub    esp,0x8
c001d2ac:	6a 00                	push   0x0
c001d2ae:	53                   	push   ebx
c001d2af:	e8 50 4b ff ff       	call   c0011e04 <VAS::VAS(bool)>
c001d2b4:	83 c4 10             	add    esp,0x10
c001d2b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2bb:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d2c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2c5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d2cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d2d7:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d2dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2e1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d2e7:	85 c0                	test   eax,eax
c001d2e9:	74 42                	je     c001d32d <Process::Process(char const*, Process*, char**)+0x10f>
c001d2eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2ef:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d2f5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d2fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2ff:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d305:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d309:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d30f:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d315:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d319:	05 0c 01 00 00       	add    eax,0x10c
c001d31e:	83 ec 08             	sub    esp,0x8
c001d321:	52                   	push   edx
c001d322:	50                   	push   eax
c001d323:	e8 e4 34 fe ff       	call   c000080c <strcpy>
c001d328:	83 c4 10             	add    esp,0x10
c001d32b:	eb 63                	jmp    c001d390 <Process::Process(char const*, Process*, char**)+0x172>
c001d32d:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d335:	83 ec 0c             	sub    esp,0xc
c001d338:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d33c:	e8 58 22 ff ff       	call   c000f599 <malloc>
c001d341:	83 c4 10             	add    esp,0x10
c001d344:	89 c3                	mov    ebx,eax
c001d346:	83 ec 08             	sub    esp,0x8
c001d349:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d34d:	53                   	push   ebx
c001d34e:	e8 b3 34 ff ff       	call   c0010806 <VgaText::VgaText(char const*)>
c001d353:	83 c4 10             	add    esp,0x10
c001d356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d35a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d360:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d364:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d36a:	83 ec 0c             	sub    esp,0xc
c001d36d:	50                   	push   eax
c001d36e:	e8 52 2c ff ff       	call   c000ffc5 <addToTerminalCycle(VgaText*)>
c001d373:	83 c4 10             	add    esp,0x10
c001d376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d37a:	05 0c 01 00 00       	add    eax,0x10c
c001d37f:	83 ec 08             	sub    esp,0x8
c001d382:	68 e0 b7 02 c0       	push   0xc002b7e0
c001d387:	50                   	push   eax
c001d388:	e8 7f 34 fe ff       	call   c000080c <strcpy>
c001d38d:	83 c4 10             	add    esp,0x10
c001d390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d394:	83 c0 0c             	add    eax,0xc
c001d397:	83 ec 08             	sub    esp,0x8
c001d39a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d39e:	50                   	push   eax
c001d39f:	e8 68 34 fe ff       	call   c000080c <strcpy>
c001d3a4:	83 c4 10             	add    esp,0x10
c001d3a7:	83 ec 08             	sub    esp,0x8
c001d3aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d3ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3b2:	e8 0d fe ff ff       	call   c001d1c4 <Process::addArgs(char**)>
c001d3b7:	83 c4 10             	add    esp,0x10
c001d3ba:	83 ec 08             	sub    esp,0x8
c001d3bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3c5:	e8 a6 ed ff ff       	call   c001c170 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d3ca:	83 c4 10             	add    esp,0x10
c001d3cd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d3d1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d3d5:	83 f0 01             	xor    eax,0x1
c001d3d8:	88 c2                	mov    dl,al
c001d3da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3de:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d3e4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d3e9:	83 ec 08             	sub    esp,0x8
c001d3ec:	50                   	push   eax
c001d3ed:	68 38 b8 02 c0       	push   0xc002b838
c001d3f2:	e8 3e 51 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001d3f7:	83 c4 10             	add    esp,0x10
c001d3fa:	90                   	nop
c001d3fb:	83 c4 14             	add    esp,0x14
c001d3fe:	5b                   	pop    ebx
c001d3ff:	5e                   	pop    esi
c001d400:	c3                   	ret    
c001d401:	90                   	nop

c001d402 <Process::Process(bool, char const*, Process*, char**)>:
c001d402:	56                   	push   esi
c001d403:	53                   	push   ebx
c001d404:	83 ec 24             	sub    esp,0x24
c001d407:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d40b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d40f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d413:	05 0c 02 00 00       	add    eax,0x20c
c001d418:	bb 07 00 00 00       	mov    ebx,0x7
c001d41d:	89 c6                	mov    esi,eax
c001d41f:	85 db                	test   ebx,ebx
c001d421:	78 12                	js     c001d435 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d423:	83 ec 0c             	sub    esp,0xc
c001d426:	56                   	push   esi
c001d427:	e8 aa b4 00 00       	call   c00288d6 <ThreadControlBlock::ThreadControlBlock()>
c001d42c:	83 c4 10             	add    esp,0x10
c001d42f:	83 c6 63             	add    esi,0x63
c001d432:	4b                   	dec    ebx
c001d433:	eb ea                	jmp    c001d41f <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d435:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d439:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d440:	83 ec 0c             	sub    esp,0xc
c001d443:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d447:	e8 d2 c6 ff ff       	call   c0019b1e <Krnl::newProcessEnv(Process*)>
c001d44c:	83 c4 10             	add    esp,0x10
c001d44f:	89 c2                	mov    edx,eax
c001d451:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d455:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d45b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d45f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d468:	a1 70 cb 02 c0       	mov    eax,ds:0xc002cb70
c001d46d:	8d 50 01             	lea    edx,[eax+0x1]
c001d470:	89 15 70 cb 02 c0    	mov    DWORD PTR ds:0xc002cb70,edx
c001d476:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d47a:	89 02                	mov    DWORD PTR [edx],eax
c001d47c:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d484:	83 ec 0c             	sub    esp,0xc
c001d487:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d48b:	e8 09 21 ff ff       	call   c000f599 <malloc>
c001d490:	83 c4 10             	add    esp,0x10
c001d493:	89 c3                	mov    ebx,eax
c001d495:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d49a:	83 ec 08             	sub    esp,0x8
c001d49d:	50                   	push   eax
c001d49e:	53                   	push   ebx
c001d49f:	e8 60 49 ff ff       	call   c0011e04 <VAS::VAS(bool)>
c001d4a4:	83 c4 10             	add    esp,0x10
c001d4a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4ab:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d4b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4b5:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d4bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d4c7:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d4cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4d1:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4d7:	85 c0                	test   eax,eax
c001d4d9:	74 42                	je     c001d51d <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d4db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4df:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4e5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d4eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4ef:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d4f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d4f9:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d4ff:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d505:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d509:	05 0c 01 00 00       	add    eax,0x10c
c001d50e:	83 ec 08             	sub    esp,0x8
c001d511:	52                   	push   edx
c001d512:	50                   	push   eax
c001d513:	e8 f4 32 fe ff       	call   c000080c <strcpy>
c001d518:	83 c4 10             	add    esp,0x10
c001d51b:	eb 63                	jmp    c001d580 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d51d:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d525:	83 ec 0c             	sub    esp,0xc
c001d528:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d52c:	e8 68 20 ff ff       	call   c000f599 <malloc>
c001d531:	83 c4 10             	add    esp,0x10
c001d534:	89 c3                	mov    ebx,eax
c001d536:	83 ec 08             	sub    esp,0x8
c001d539:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d53d:	53                   	push   ebx
c001d53e:	e8 c3 32 ff ff       	call   c0010806 <VgaText::VgaText(char const*)>
c001d543:	83 c4 10             	add    esp,0x10
c001d546:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d54a:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d550:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d554:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d55a:	83 ec 0c             	sub    esp,0xc
c001d55d:	50                   	push   eax
c001d55e:	e8 62 2a ff ff       	call   c000ffc5 <addToTerminalCycle(VgaText*)>
c001d563:	83 c4 10             	add    esp,0x10
c001d566:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d56a:	05 0c 01 00 00       	add    eax,0x10c
c001d56f:	83 ec 08             	sub    esp,0x8
c001d572:	68 e0 b7 02 c0       	push   0xc002b7e0
c001d577:	50                   	push   eax
c001d578:	e8 8f 32 fe ff       	call   c000080c <strcpy>
c001d57d:	83 c4 10             	add    esp,0x10
c001d580:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d584:	83 c0 0c             	add    eax,0xc
c001d587:	83 ec 08             	sub    esp,0x8
c001d58a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d58e:	50                   	push   eax
c001d58f:	e8 78 32 fe ff       	call   c000080c <strcpy>
c001d594:	83 c4 10             	add    esp,0x10
c001d597:	83 ec 08             	sub    esp,0x8
c001d59a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d59e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5a2:	e8 1d fc ff ff       	call   c001d1c4 <Process::addArgs(char**)>
c001d5a7:	83 c4 10             	add    esp,0x10
c001d5aa:	90                   	nop
c001d5ab:	83 c4 24             	add    esp,0x24
c001d5ae:	5b                   	pop    ebx
c001d5af:	5e                   	pop    esi
c001d5b0:	c3                   	ret    

c001d5b1 <taskStartupFunction>:
c001d5b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d5b6:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d5b9:	c3                   	ret    

c001d5ba <Semaphore::Semaphore(int)>:
c001d5ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d5c2:	89 10                	mov    DWORD PTR [eax],edx
c001d5c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5c8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d5cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d5da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d5e5:	90                   	nop
c001d5e6:	c3                   	ret    
c001d5e7:	90                   	nop

c001d5e8 <Mutex::Mutex()>:
c001d5e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5ec:	6a 01                	push   0x1
c001d5ee:	50                   	push   eax
c001d5ef:	e8 c6 ff ff ff       	call   c001d5ba <Semaphore::Semaphore(int)>
c001d5f4:	83 c4 08             	add    esp,0x8
c001d5f7:	90                   	nop
c001d5f8:	c3                   	ret    
c001d5f9:	90                   	nop

c001d5fa <Process::createThread(void (*)(void*), void*, int)>:
c001d5fa:	55                   	push   ebp
c001d5fb:	31 c9                	xor    ecx,ecx
c001d5fd:	57                   	push   edi
c001d5fe:	56                   	push   esi
c001d5ff:	53                   	push   ebx
c001d600:	83 ec 1c             	sub    esp,0x1c
c001d603:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d607:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d60e:	89 f2                	mov    edx,esi
c001d610:	0f b7 c2             	movzx  eax,dx
c001d613:	83 e2 01             	and    edx,0x1
c001d616:	74 16                	je     c001d62e <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d618:	d1 f8                	sar    eax,1
c001d61a:	41                   	inc    ecx
c001d61b:	89 c2                	mov    edx,eax
c001d61d:	83 f9 10             	cmp    ecx,0x10
c001d620:	75 ee                	jne    c001d610 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d622:	83 c4 1c             	add    esp,0x1c
c001d625:	31 db                	xor    ebx,ebx
c001d627:	89 d8                	mov    eax,ebx
c001d629:	5b                   	pop    ebx
c001d62a:	5e                   	pop    esi
c001d62b:	5f                   	pop    edi
c001d62c:	5d                   	pop    ebp
c001d62d:	c3                   	ret    
c001d62e:	b8 01 00 00 00       	mov    eax,0x1
c001d633:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d636:	d3 e0                	shl    eax,cl
c001d638:	09 c6                	or     esi,eax
c001d63a:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d63d:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d644:	89 c6                	mov    esi,eax
c001d646:	c1 e6 05             	shl    esi,0x5
c001d649:	01 f0                	add    eax,esi
c001d64b:	01 d8                	add    eax,ebx
c001d64d:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d654:	75 0a                	jne    c001d660 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d656:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d660:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d666:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d66a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d66d:	01 ca                	add    edx,ecx
c001d66f:	83 ec 08             	sub    esp,0x8
c001d672:	89 d0                	mov    eax,edx
c001d674:	c1 e0 05             	shl    eax,0x5
c001d677:	01 d0                	add    eax,edx
c001d679:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d67d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d681:	01 d8                	add    eax,ebx
c001d683:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d689:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d68f:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d695:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d69b:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d6a1:	89 cd                	mov    ebp,ecx
c001d6a3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d6a7:	f7 dd                	neg    ebp
c001d6a9:	c1 e5 15             	shl    ebp,0x15
c001d6ac:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d6b2:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d6b8:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d6c2:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d6c8:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d6d2:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d6dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d6e0:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d6e7:	53                   	push   ebx
c001d6e8:	68 24 0b 03 c0       	push   0xc0030b24
c001d6ed:	e8 9e af 00 00       	call   c0028690 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d6f2:	89 d8                	mov    eax,ebx
c001d6f4:	83 c4 10             	add    esp,0x10
c001d6f7:	83 c4 1c             	add    esp,0x1c
c001d6fa:	5b                   	pop    ebx
c001d6fb:	5e                   	pop    esi
c001d6fc:	5f                   	pop    edi
c001d6fd:	5d                   	pop    ebp
c001d6fe:	c3                   	ret    
c001d6ff:	90                   	nop

c001d700 <Process::createUserThread()>:
c001d700:	83 ec 0c             	sub    esp,0xc
c001d703:	68 80 00 00 00       	push   0x80
c001d708:	6a 00                	push   0x0
c001d70a:	68 c4 d0 01 c0       	push   0xc001d0c4
c001d70f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d713:	e8 e2 fe ff ff       	call   c001d5fa <Process::createThread(void (*)(void*), void*, int)>
c001d718:	83 c4 1c             	add    esp,0x1c
c001d71b:	c3                   	ret    

c001d71c <setupMultitasking(void (*)())>:
c001d71c:	56                   	push   esi
c001d71d:	53                   	push   ebx
c001d71e:	51                   	push   ecx
c001d71f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d723:	eb 10                	jmp    c001d735 <setupMultitasking(void (*)())+0x19>
c001d725:	83 ec 0c             	sub    esp,0xc
c001d728:	68 24 0b 03 c0       	push   0xc0030b24
c001d72d:	e8 b0 ae 00 00       	call   c00285e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d732:	83 c4 10             	add    esp,0x10
c001d735:	83 ec 0c             	sub    esp,0xc
c001d738:	68 24 0b 03 c0       	push   0xc0030b24
c001d73d:	e8 7c ae 00 00       	call   c00285be <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d742:	83 c4 10             	add    esp,0x10
c001d745:	84 c0                	test   al,al
c001d747:	74 dc                	je     c001d725 <setupMultitasking(void (*)())+0x9>
c001d749:	83 ec 0c             	sub    esp,0xc
c001d74c:	68 3f 07 00 00       	push   0x73f
c001d751:	e8 43 1e ff ff       	call   c000f599 <malloc>
c001d756:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d75d:	89 c3                	mov    ebx,eax
c001d75f:	6a 00                	push   0x0
c001d761:	68 e4 b7 02 c0       	push   0xc002b7e4
c001d766:	6a 01                	push   0x1
c001d768:	50                   	push   eax
c001d769:	e8 94 fc ff ff       	call   c001d402 <Process::Process(bool, char const*, Process*, char**)>
c001d76e:	83 c4 14             	add    esp,0x14
c001d771:	89 1d 30 0b 03 c0    	mov    DWORD PTR ds:0xc0030b30,ebx
c001d777:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d77d:	e8 51 2b ff ff       	call   c00102d3 <setActiveTerminal(VgaText*)>
c001d782:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d78a:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d794:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d79a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d79d:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d7a7:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d7ad:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d7b3:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d7bd:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d7c7:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d7d1:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d7d7:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d7e1:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d7e7:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d7f1:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d7f7:	58                   	pop    eax
c001d7f8:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d7fe:	5a                   	pop    edx
c001d7ff:	68 e0 b7 02 c0       	push   0xc002b7e0
c001d804:	50                   	push   eax
c001d805:	e8 02 30 fe ff       	call   c000080c <strcpy>
c001d80a:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d811:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d815:	83 c4 14             	add    esp,0x14
c001d818:	5b                   	pop    ebx
c001d819:	5e                   	pop    esi
c001d81a:	e9 35 2b fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d81f <schedule()>:
c001d81f:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c001d824:	85 c0                	test   eax,eax
c001d826:	74 0b                	je     c001d833 <schedule()+0x14>
c001d828:	c7 05 00 0b 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030b00,0x1
c001d832:	c3                   	ret    
c001d833:	53                   	push   ebx
c001d834:	83 ec 14             	sub    esp,0x14
c001d837:	68 24 0b 03 c0       	push   0xc0030b24
c001d83c:	e8 7d ad 00 00       	call   c00285be <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d841:	83 c4 10             	add    esp,0x10
c001d844:	84 c0                	test   al,al
c001d846:	75 38                	jne    c001d880 <schedule()+0x61>
c001d848:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d84d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d850:	4a                   	dec    edx
c001d851:	74 32                	je     c001d885 <schedule()+0x66>
c001d853:	83 ec 0c             	sub    esp,0xc
c001d856:	68 24 0b 03 c0       	push   0xc0030b24
c001d85b:	e8 7a ad 00 00       	call   c00285da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d860:	c7 04 24 24 0b 03 c0 	mov    DWORD PTR [esp],0xc0030b24
c001d867:	89 c3                	mov    ebx,eax
c001d869:	e8 74 ad 00 00       	call   c00285e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d86e:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d875:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d878:	e8 9d f8 ff ff       	call   c001d11a <switchToThread(ThreadControlBlock*)>
c001d87d:	83 c4 10             	add    esp,0x10
c001d880:	83 c4 08             	add    esp,0x8
c001d883:	5b                   	pop    ebx
c001d884:	c3                   	ret    
c001d885:	83 ec 08             	sub    esp,0x8
c001d888:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d88f:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d895:	68 24 0b 03 c0       	push   0xc0030b24
c001d89a:	e8 f1 ad 00 00       	call   c0028690 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d89f:	83 c4 10             	add    esp,0x10
c001d8a2:	eb af                	jmp    c001d853 <schedule()+0x34>

c001d8a4 <Semaphore::tryAcquire()>:
c001d8a4:	53                   	push   ebx
c001d8a5:	83 ec 08             	sub    esp,0x8
c001d8a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d8ac:	fa                   	cli    
c001d8ad:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001d8b2:	8d 50 01             	lea    edx,[eax+0x1]
c001d8b5:	89 15 08 0b 03 c0    	mov    DWORD PTR ds:0xc0030b08,edx
c001d8bb:	8b 15 04 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030b04
c001d8c1:	8d 5a 01             	lea    ebx,[edx+0x1]
c001d8c4:	89 1d 04 0b 03 c0    	mov    DWORD PTR ds:0xc0030b04,ebx
c001d8ca:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001d8cd:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001d8cf:	7c 2a                	jl     c001d8fb <Semaphore::tryAcquire()+0x57>
c001d8d1:	89 15 04 0b 03 c0    	mov    DWORD PTR ds:0xc0030b04,edx
c001d8d7:	85 d2                	test   edx,edx
c001d8d9:	75 0a                	jne    c001d8e5 <Semaphore::tryAcquire()+0x41>
c001d8db:	8b 15 00 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030b00
c001d8e1:	85 d2                	test   edx,edx
c001d8e3:	75 5b                	jne    c001d940 <Semaphore::tryAcquire()+0x9c>
c001d8e5:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001d8ea:	85 c0                	test   eax,eax
c001d8ec:	74 07                	je     c001d8f5 <Semaphore::tryAcquire()+0x51>
c001d8ee:	31 c0                	xor    eax,eax
c001d8f0:	83 c4 08             	add    esp,0x8
c001d8f3:	5b                   	pop    ebx
c001d8f4:	c3                   	ret    
c001d8f5:	fb                   	sti    
c001d8f6:	83 c4 08             	add    esp,0x8
c001d8f9:	5b                   	pop    ebx
c001d8fa:	c3                   	ret    
c001d8fb:	43                   	inc    ebx
c001d8fc:	89 15 04 0b 03 c0    	mov    DWORD PTR ds:0xc0030b04,edx
c001d902:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001d905:	85 d2                	test   edx,edx
c001d907:	75 1f                	jne    c001d928 <Semaphore::tryAcquire()+0x84>
c001d909:	8b 0d 00 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030b00
c001d90f:	85 c9                	test   ecx,ecx
c001d911:	74 15                	je     c001d928 <Semaphore::tryAcquire()+0x84>
c001d913:	c7 05 00 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b00,0x0
c001d91d:	e8 fd fe ff ff       	call   c001d81f <schedule()>
c001d922:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001d927:	48                   	dec    eax
c001d928:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001d92d:	85 c0                	test   eax,eax
c001d92f:	75 08                	jne    c001d939 <Semaphore::tryAcquire()+0x95>
c001d931:	fb                   	sti    
c001d932:	b0 01                	mov    al,0x1
c001d934:	83 c4 08             	add    esp,0x8
c001d937:	5b                   	pop    ebx
c001d938:	c3                   	ret    
c001d939:	b0 01                	mov    al,0x1
c001d93b:	83 c4 08             	add    esp,0x8
c001d93e:	5b                   	pop    ebx
c001d93f:	c3                   	ret    
c001d940:	c7 05 00 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b00,0x0
c001d94a:	e8 d0 fe ff ff       	call   c001d81f <schedule()>
c001d94f:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001d954:	48                   	dec    eax
c001d955:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001d95a:	85 c0                	test   eax,eax
c001d95c:	75 90                	jne    c001d8ee <Semaphore::tryAcquire()+0x4a>
c001d95e:	eb 95                	jmp    c001d8f5 <Semaphore::tryAcquire()+0x51>

c001d960 <Semaphore::assertLocked(char const*)>:
c001d960:	83 ec 0c             	sub    esp,0xc
c001d963:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d967:	fa                   	cli    
c001d968:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001d96e:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c001d973:	8d 48 01             	lea    ecx,[eax+0x1]
c001d976:	89 0d 04 0b 03 c0    	mov    DWORD PTR ds:0xc0030b04,ecx
c001d97c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001d97e:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001d981:	7c 24                	jl     c001d9a7 <Semaphore::assertLocked(char const*)+0x47>
c001d983:	a3 04 0b 03 c0       	mov    ds:0xc0030b04,eax
c001d988:	85 c0                	test   eax,eax
c001d98a:	75 09                	jne    c001d995 <Semaphore::assertLocked(char const*)+0x35>
c001d98c:	a1 00 0b 03 c0       	mov    eax,ds:0xc0030b00
c001d991:	85 c0                	test   eax,eax
c001d993:	75 29                	jne    c001d9be <Semaphore::assertLocked(char const*)+0x5e>
c001d995:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001d99a:	48                   	dec    eax
c001d99b:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001d9a0:	75 01                	jne    c001d9a3 <Semaphore::assertLocked(char const*)+0x43>
c001d9a2:	fb                   	sti    
c001d9a3:	83 c4 0c             	add    esp,0xc
c001d9a6:	c3                   	ret    
c001d9a7:	83 ec 0c             	sub    esp,0xc
c001d9aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d9ae:	e8 e2 c2 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001d9b3:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c001d9b8:	83 c4 10             	add    esp,0x10
c001d9bb:	48                   	dec    eax
c001d9bc:	eb c5                	jmp    c001d983 <Semaphore::assertLocked(char const*)+0x23>
c001d9be:	c7 05 00 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b00,0x0
c001d9c8:	e8 52 fe ff ff       	call   c001d81f <schedule()>
c001d9cd:	eb c6                	jmp    c001d995 <Semaphore::assertLocked(char const*)+0x35>

c001d9cf <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d9cf:	83 ec 0c             	sub    esp,0xc
c001d9d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d9db:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d9de:	e8 3c fe ff ff       	call   c001d81f <schedule()>
c001d9e3:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001d9e8:	48                   	dec    eax
c001d9e9:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001d9ee:	75 01                	jne    c001d9f1 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001d9f0:	fb                   	sti    
c001d9f1:	83 c4 0c             	add    esp,0xc
c001d9f4:	c3                   	ret    

c001d9f5 <blockTask(TaskState)>:
c001d9f5:	83 ec 0c             	sub    esp,0xc
c001d9f8:	fa                   	cli    
c001d9f9:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001d9ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001da03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da08:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001da0b:	e8 0f fe ff ff       	call   c001d81f <schedule()>
c001da10:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001da15:	48                   	dec    eax
c001da16:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001da1b:	75 01                	jne    c001da1e <blockTask(TaskState)+0x29>
c001da1d:	fb                   	sti    
c001da1e:	83 c4 0c             	add    esp,0xc
c001da21:	c3                   	ret    

c001da22 <waitTask(int, int*, int)>:
c001da22:	83 ec 18             	sub    esp,0x18
c001da25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da2a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da2e:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001da31:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001da35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da3a:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001da3d:	6a 07                	push   0x7
c001da3f:	e8 b1 ff ff ff       	call   c001d9f5 <blockTask(TaskState)>
c001da44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da49:	83 c4 10             	add    esp,0x10
c001da4c:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001da4f:	85 d2                	test   edx,edx
c001da51:	74 0a                	je     c001da5d <waitTask(int, int*, int)+0x3b>
c001da53:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001da56:	89 02                	mov    DWORD PTR [edx],eax
c001da58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da5d:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001da60:	83 c4 0c             	add    esp,0xc
c001da63:	c3                   	ret    

c001da64 <nanoSleepUntil(unsigned long long)>:
c001da64:	83 ec 0c             	sub    esp,0xc
c001da67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da6b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001da6f:	3b 05 50 dc 02 c0    	cmp    eax,DWORD PTR ds:0xc002dc50
c001da75:	89 d1                	mov    ecx,edx
c001da77:	1b 0d 54 dc 02 c0    	sbb    ecx,DWORD PTR ds:0xc002dc54
c001da7d:	73 04                	jae    c001da83 <nanoSleepUntil(unsigned long long)+0x1f>
c001da7f:	83 c4 0c             	add    esp,0xc
c001da82:	c3                   	ret    
c001da83:	fa                   	cli    
c001da84:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001da8a:	83 ec 08             	sub    esp,0x8
c001da8d:	ff 05 04 0b 03 c0    	inc    DWORD PTR ds:0xc0030b04
c001da93:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001da99:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001da9c:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001da9f:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001daa5:	68 18 0b 03 c0       	push   0xc0030b18
c001daaa:	e8 e1 ab 00 00       	call   c0028690 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001daaf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dab6:	e8 3a ff ff ff       	call   c001d9f5 <blockTask(TaskState)>
c001dabb:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c001dac0:	83 c4 10             	add    esp,0x10
c001dac3:	48                   	dec    eax
c001dac4:	a3 04 0b 03 c0       	mov    ds:0xc0030b04,eax
c001dac9:	85 c0                	test   eax,eax
c001dacb:	75 09                	jne    c001dad6 <nanoSleepUntil(unsigned long long)+0x72>
c001dacd:	a1 00 0b 03 c0       	mov    eax,ds:0xc0030b00
c001dad2:	85 c0                	test   eax,eax
c001dad4:	75 12                	jne    c001dae8 <nanoSleepUntil(unsigned long long)+0x84>
c001dad6:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001dadb:	48                   	dec    eax
c001dadc:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001dae1:	75 9c                	jne    c001da7f <nanoSleepUntil(unsigned long long)+0x1b>
c001dae3:	fb                   	sti    
c001dae4:	83 c4 0c             	add    esp,0xc
c001dae7:	c3                   	ret    
c001dae8:	c7 05 00 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b00,0x0
c001daf2:	e8 28 fd ff ff       	call   c001d81f <schedule()>
c001daf7:	eb dd                	jmp    c001dad6 <nanoSleepUntil(unsigned long long)+0x72>

c001daf9 <nanoSleep(unsigned long long)>:
c001daf9:	a1 50 dc 02 c0       	mov    eax,ds:0xc002dc50
c001dafe:	8b 15 54 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc54
c001db04:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001db08:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001db0c:	e9 53 ff ff ff       	jmp    c001da64 <nanoSleepUntil(unsigned long long)>

c001db11 <sleep(unsigned long long)>:
c001db11:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001db19:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001db1e:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001db22:	01 ca                	add    edx,ecx
c001db24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001db28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001db2c:	eb cb                	jmp    c001daf9 <nanoSleep(unsigned long long)>

c001db2e <Semaphore::acquire()>:
c001db2e:	83 ec 0c             	sub    esp,0xc
c001db31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db35:	fa                   	cli    
c001db36:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c001db3b:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001db41:	8d 48 01             	lea    ecx,[eax+0x1]
c001db44:	89 0d 04 0b 03 c0    	mov    DWORD PTR ds:0xc0030b04,ecx
c001db4a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001db4d:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001db4f:	7d 28                	jge    c001db79 <Semaphore::acquire()+0x4b>
c001db51:	41                   	inc    ecx
c001db52:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001db55:	a3 04 0b 03 c0       	mov    ds:0xc0030b04,eax
c001db5a:	85 c0                	test   eax,eax
c001db5c:	75 09                	jne    c001db67 <Semaphore::acquire()+0x39>
c001db5e:	a1 00 0b 03 c0       	mov    eax,ds:0xc0030b00
c001db63:	85 c0                	test   eax,eax
c001db65:	75 4e                	jne    c001dbb5 <Semaphore::acquire()+0x87>
c001db67:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001db6c:	48                   	dec    eax
c001db6d:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001db72:	75 01                	jne    c001db75 <Semaphore::acquire()+0x47>
c001db74:	fb                   	sti    
c001db75:	83 c4 0c             	add    esp,0xc
c001db78:	c3                   	ret    
c001db79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db7e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001db85:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001db88:	85 c9                	test   ecx,ecx
c001db8a:	74 3a                	je     c001dbc6 <Semaphore::acquire()+0x98>
c001db8c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001db8f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001db95:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001db98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db9d:	83 ec 0c             	sub    esp,0xc
c001dba0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dba3:	6a 05                	push   0x5
c001dba5:	e8 4b fe ff ff       	call   c001d9f5 <blockTask(TaskState)>
c001dbaa:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c001dbaf:	83 c4 10             	add    esp,0x10
c001dbb2:	48                   	dec    eax
c001dbb3:	eb a0                	jmp    c001db55 <Semaphore::acquire()+0x27>
c001dbb5:	c7 05 00 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b00,0x0
c001dbbf:	e8 5b fc ff ff       	call   c001d81f <schedule()>
c001dbc4:	eb a1                	jmp    c001db67 <Semaphore::acquire()+0x39>
c001dbc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbcb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dbce:	eb c8                	jmp    c001db98 <Semaphore::acquire()+0x6a>

c001dbd0 <taskReturned>:
c001dbd0:	83 ec 18             	sub    esp,0x18
c001dbd3:	68 60 b8 02 c0       	push   0xc002b860
c001dbd8:	e8 b8 c0 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001dbdd:	83 c4 10             	add    esp,0x10
c001dbe0:	83 ec 0c             	sub    esp,0xc
c001dbe3:	6a 02                	push   0x2
c001dbe5:	e8 0b fe ff ff       	call   c001d9f5 <blockTask(TaskState)>
c001dbea:	fa                   	cli    
c001dbeb:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001dbf1:	e8 29 fc ff ff       	call   c001d81f <schedule()>
c001dbf6:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001dbfb:	83 c4 10             	add    esp,0x10
c001dbfe:	48                   	dec    eax
c001dbff:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001dc04:	85 c0                	test   eax,eax
c001dc06:	75 d8                	jne    c001dbe0 <taskReturned+0x10>
c001dc08:	fb                   	sti    
c001dc09:	eb d5                	jmp    c001dbe0 <taskReturned+0x10>

c001dc0b <Thr::processFromPID(int)>:
c001dc0b:	57                   	push   edi
c001dc0c:	56                   	push   esi
c001dc0d:	53                   	push   ebx
c001dc0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dc12:	fa                   	cli    
c001dc13:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001dc19:	83 ec 0c             	sub    esp,0xc
c001dc1c:	68 24 0b 03 c0       	push   0xc0030b24
c001dc21:	e8 b4 a9 00 00       	call   c00285da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dc26:	83 c4 10             	add    esp,0x10
c001dc29:	89 c7                	mov    edi,eax
c001dc2b:	eb 14                	jmp    c001dc41 <Thr::processFromPID(int)+0x36>
c001dc2d:	83 ec 0c             	sub    esp,0xc
c001dc30:	68 24 0b 03 c0       	push   0xc0030b24
c001dc35:	e8 a0 a9 00 00       	call   c00285da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dc3a:	83 c4 10             	add    esp,0x10
c001dc3d:	39 f8                	cmp    eax,edi
c001dc3f:	74 49                	je     c001dc8a <Thr::processFromPID(int)+0x7f>
c001dc41:	83 ec 0c             	sub    esp,0xc
c001dc44:	68 24 0b 03 c0       	push   0xc0030b24
c001dc49:	e8 8c a9 00 00       	call   c00285da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dc4e:	c7 04 24 24 0b 03 c0 	mov    DWORD PTR [esp],0xc0030b24
c001dc55:	89 c3                	mov    ebx,eax
c001dc57:	e8 86 a9 00 00       	call   c00285e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dc5c:	58                   	pop    eax
c001dc5d:	5a                   	pop    edx
c001dc5e:	53                   	push   ebx
c001dc5f:	68 24 0b 03 c0       	push   0xc0030b24
c001dc64:	e8 27 aa 00 00       	call   c0028690 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc69:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dc6c:	83 c4 10             	add    esp,0x10
c001dc6f:	39 30                	cmp    DWORD PTR [eax],esi
c001dc71:	75 ba                	jne    c001dc2d <Thr::processFromPID(int)+0x22>
c001dc73:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001dc78:	48                   	dec    eax
c001dc79:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001dc7e:	74 07                	je     c001dc87 <Thr::processFromPID(int)+0x7c>
c001dc80:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dc83:	5b                   	pop    ebx
c001dc84:	5e                   	pop    esi
c001dc85:	5f                   	pop    edi
c001dc86:	c3                   	ret    
c001dc87:	fb                   	sti    
c001dc88:	eb f6                	jmp    c001dc80 <Thr::processFromPID(int)+0x75>
c001dc8a:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001dc8f:	48                   	dec    eax
c001dc90:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001dc95:	75 05                	jne    c001dc9c <Thr::processFromPID(int)+0x91>
c001dc97:	fb                   	sti    
c001dc98:	5b                   	pop    ebx
c001dc99:	5e                   	pop    esi
c001dc9a:	5f                   	pop    edi
c001dc9b:	c3                   	ret    
c001dc9c:	5b                   	pop    ebx
c001dc9d:	31 c0                	xor    eax,eax
c001dc9f:	5e                   	pop    esi
c001dca0:	5f                   	pop    edi
c001dca1:	c3                   	ret    

c001dca2 <unblockTask(ThreadControlBlock*)>:
c001dca2:	53                   	push   ebx
c001dca3:	83 ec 08             	sub    esp,0x8
c001dca6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dcaa:	fa                   	cli    
c001dcab:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001dcb1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dcb4:	85 c0                	test   eax,eax
c001dcb6:	74 5a                	je     c001dd12 <unblockTask(ThreadControlBlock*)+0x70>
c001dcb8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001dcbb:	48                   	dec    eax
c001dcbc:	74 31                	je     c001dcef <unblockTask(ThreadControlBlock*)+0x4d>
c001dcbe:	83 ec 0c             	sub    esp,0xc
c001dcc1:	68 24 0b 03 c0       	push   0xc0030b24
c001dcc6:	e8 0f a9 00 00       	call   c00285da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dccb:	83 c4 10             	add    esp,0x10
c001dcce:	85 c0                	test   eax,eax
c001dcd0:	75 17                	jne    c001dce9 <unblockTask(ThreadControlBlock*)+0x47>
c001dcd2:	eb 50                	jmp    c001dd24 <unblockTask(ThreadControlBlock*)+0x82>
c001dcd4:	83 ec 08             	sub    esp,0x8
c001dcd7:	50                   	push   eax
c001dcd8:	68 24 0b 03 c0       	push   0xc0030b24
c001dcdd:	e8 80 ac 00 00       	call   c0028962 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001dce2:	83 c4 10             	add    esp,0x10
c001dce5:	85 c0                	test   eax,eax
c001dce7:	74 3b                	je     c001dd24 <unblockTask(ThreadControlBlock*)+0x82>
c001dce9:	39 c3                	cmp    ebx,eax
c001dceb:	75 e7                	jne    c001dcd4 <unblockTask(ThreadControlBlock*)+0x32>
c001dced:	eb 10                	jmp    c001dcff <unblockTask(ThreadControlBlock*)+0x5d>
c001dcef:	83 ec 0c             	sub    esp,0xc
c001dcf2:	68 02 b8 02 c0       	push   0xc002b802
c001dcf7:	e8 39 48 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001dcfc:	83 c4 10             	add    esp,0x10
c001dcff:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001dd04:	48                   	dec    eax
c001dd05:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001dd0a:	75 01                	jne    c001dd0d <unblockTask(ThreadControlBlock*)+0x6b>
c001dd0c:	fb                   	sti    
c001dd0d:	83 c4 08             	add    esp,0x8
c001dd10:	5b                   	pop    ebx
c001dd11:	c3                   	ret    
c001dd12:	83 ec 0c             	sub    esp,0xc
c001dd15:	68 eb b7 02 c0       	push   0xc002b7eb
c001dd1a:	e8 16 48 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001dd1f:	83 c4 10             	add    esp,0x10
c001dd22:	eb db                	jmp    c001dcff <unblockTask(ThreadControlBlock*)+0x5d>
c001dd24:	83 ec 08             	sub    esp,0x8
c001dd27:	53                   	push   ebx
c001dd28:	68 24 0b 03 c0       	push   0xc0030b24
c001dd2d:	e8 5e a9 00 00       	call   c0028690 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dd32:	83 c4 10             	add    esp,0x10
c001dd35:	eb c8                	jmp    c001dcff <unblockTask(ThreadControlBlock*)+0x5d>

c001dd37 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001dd37:	55                   	push   ebp
c001dd38:	57                   	push   edi
c001dd39:	56                   	push   esi
c001dd3a:	53                   	push   ebx
c001dd3b:	83 ec 1c             	sub    esp,0x1c
c001dd3e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dd42:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd45:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001dd4b:	85 ff                	test   edi,edi
c001dd4d:	7e 20                	jle    c001dd6f <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001dd4f:	31 f6                	xor    esi,esi
c001dd51:	83 ec 0c             	sub    esp,0xc
c001dd54:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001dd5b:	46                   	inc    esi
c001dd5c:	e8 48 18 ff ff       	call   c000f5a9 <free>
c001dd61:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dd64:	83 c4 10             	add    esp,0x10
c001dd67:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001dd6d:	7f e2                	jg     c001dd51 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001dd6f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd79:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001dd7e:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001dd81:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001dd84:	d3 c0                	rol    eax,cl
c001dd86:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001dd8d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dd90:	89 f7                	mov    edi,esi
c001dd92:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001dd9a:	0f 85 64 01 00 00    	jne    c001df04 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001dda0:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001dda6:	85 ed                	test   ebp,ebp
c001dda8:	74 1b                	je     c001ddc5 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ddaa:	83 ec 0c             	sub    esp,0xc
c001ddad:	55                   	push   ebp
c001ddae:	e8 87 bc ff ff       	call   c0019a3a <EnvVarContainer::~EnvVarContainer()>
c001ddb3:	59                   	pop    ecx
c001ddb4:	5e                   	pop    esi
c001ddb5:	6a 0c                	push   0xc
c001ddb7:	55                   	push   ebp
c001ddb8:	e8 a0 46 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001ddbd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ddc0:	83 c4 10             	add    esp,0x10
c001ddc3:	89 f7                	mov    edi,esi
c001ddc5:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ddcb:	85 c0                	test   eax,eax
c001ddcd:	0f 84 aa 00 00 00    	je     c001de7d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ddd3:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ddd6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ddda:	31 c9                	xor    ecx,ecx
c001dddc:	eb 10                	jmp    c001ddee <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ddde:	41                   	inc    ecx
c001dddf:	83 f9 10             	cmp    ecx,0x10
c001dde2:	0f 84 95 00 00 00    	je     c001de7d <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001dde8:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ddee:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001ddf5:	d3 fa                	sar    edx,cl
c001ddf7:	83 e2 01             	and    edx,0x1
c001ddfa:	74 e2                	je     c001ddde <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ddfc:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ddff:	01 ca                	add    edx,ecx
c001de01:	89 d5                	mov    ebp,edx
c001de03:	c1 e5 05             	shl    ebp,0x5
c001de06:	01 ea                	add    edx,ebp
c001de08:	01 d0                	add    eax,edx
c001de0a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001de10:	83 fd 07             	cmp    ebp,0x7
c001de13:	75 c9                	jne    c001ddde <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001de15:	05 40 02 00 00       	add    eax,0x240
c001de1a:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001de1d:	83 fd ff             	cmp    ebp,0xffffffff
c001de20:	0f 8c e6 00 00 00    	jl     c001df0c <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001de26:	0f 84 97 01 00 00    	je     c001dfc3 <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001de2c:	85 ed                	test   ebp,ebp
c001de2e:	0f 84 7e 01 00 00    	je     c001dfb2 <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001de34:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001de36:	75 a6                	jne    c001ddde <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001de38:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001de3e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001de42:	01 d0                	add    eax,edx
c001de44:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001de48:	83 ec 0c             	sub    esp,0xc
c001de4b:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001de51:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de54:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001de5a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001de61:	50                   	push   eax
c001de62:	e8 3b fe ff ff       	call   c001dca2 <unblockTask(ThreadControlBlock*)>
c001de67:	83 c4 10             	add    esp,0x10
c001de6a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001de6d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001de71:	89 f7                	mov    edi,esi
c001de73:	41                   	inc    ecx
c001de74:	83 f9 10             	cmp    ecx,0x10
c001de77:	0f 85 6b ff ff ff    	jne    c001dde8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001de7d:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001de83:	85 c0                	test   eax,eax
c001de85:	74 5d                	je     c001dee4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001de87:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001de8d:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001de93:	74 4f                	je     c001dee4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001de95:	83 ec 0c             	sub    esp,0xc
c001de98:	68 24 0b 03 c0       	push   0xc0030b24
c001de9d:	e8 38 a7 00 00       	call   c00285da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dea2:	c7 04 24 24 0b 03 c0 	mov    DWORD PTR [esp],0xc0030b24
c001dea9:	89 c7                	mov    edi,eax
c001deab:	e8 0e a7 00 00       	call   c00285be <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001deb0:	83 c4 10             	add    esp,0x10
c001deb3:	84 c0                	test   al,al
c001deb5:	0f 84 c2 00 00 00    	je     c001df7d <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001debb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001debe:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dec4:	85 d2                	test   edx,edx
c001dec6:	74 0f                	je     c001ded7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001dec8:	83 ec 0c             	sub    esp,0xc
c001decb:	8b 02                	mov    eax,DWORD PTR [edx]
c001decd:	52                   	push   edx
c001dece:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ded1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ded4:	83 c4 10             	add    esp,0x10
c001ded7:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001dee1:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001dee4:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001deea:	85 db                	test   ebx,ebx
c001deec:	74 16                	je     c001df04 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001deee:	83 ec 0c             	sub    esp,0xc
c001def1:	53                   	push   ebx
c001def2:	e8 e7 38 ff ff       	call   c00117de <VAS::~VAS()>
c001def7:	58                   	pop    eax
c001def8:	5a                   	pop    edx
c001def9:	6a 14                	push   0x14
c001defb:	53                   	push   ebx
c001defc:	e8 5c 45 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001df01:	83 c4 10             	add    esp,0x10
c001df04:	83 c4 1c             	add    esp,0x1c
c001df07:	5b                   	pop    ebx
c001df08:	5e                   	pop    esi
c001df09:	5f                   	pop    edi
c001df0a:	5d                   	pop    ebp
c001df0b:	c3                   	ret    
c001df0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001df10:	83 ec 0c             	sub    esp,0xc
c001df13:	68 94 b8 02 c0       	push   0xc002b894
c001df18:	e8 78 bd ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001df1d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df20:	83 c4 10             	add    esp,0x10
c001df23:	89 f7                	mov    edi,esi
c001df25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001df29:	e9 b0 fe ff ff       	jmp    c001ddde <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001df2e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001df34:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001df3a:	75 1c                	jne    c001df58 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001df3c:	83 ec 0c             	sub    esp,0xc
c001df3f:	68 fc b8 02 c0       	push   0xc002b8fc
c001df44:	e8 ec 45 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001df49:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001df50:	e8 a0 fa ff ff       	call   c001d9f5 <blockTask(TaskState)>
c001df55:	83 c4 10             	add    esp,0x10
c001df58:	83 ec 08             	sub    esp,0x8
c001df5b:	56                   	push   esi
c001df5c:	68 24 0b 03 c0       	push   0xc0030b24
c001df61:	e8 2a a7 00 00       	call   c0028690 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df66:	c7 04 24 24 0b 03 c0 	mov    DWORD PTR [esp],0xc0030b24
c001df6d:	e8 68 a6 00 00       	call   c00285da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df72:	83 c4 10             	add    esp,0x10
c001df75:	39 f8                	cmp    eax,edi
c001df77:	0f 84 3e ff ff ff    	je     c001debb <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001df7d:	83 ec 0c             	sub    esp,0xc
c001df80:	68 24 0b 03 c0       	push   0xc0030b24
c001df85:	e8 50 a6 00 00       	call   c00285da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001df8a:	c7 04 24 24 0b 03 c0 	mov    DWORD PTR [esp],0xc0030b24
c001df91:	89 c6                	mov    esi,eax
c001df93:	e8 4a a6 00 00       	call   c00285e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001df98:	83 c4 10             	add    esp,0x10
c001df9b:	39 f3                	cmp    ebx,esi
c001df9d:	74 b9                	je     c001df58 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001df9f:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001dfa2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dfa5:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001dfab:	75 ab                	jne    c001df58 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001dfad:	e9 7c ff ff ff       	jmp    c001df2e <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001dfb2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dfb6:	83 ec 0c             	sub    esp,0xc
c001dfb9:	68 c8 b8 02 c0       	push   0xc002b8c8
c001dfbe:	e9 55 ff ff ff       	jmp    c001df18 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001dfc3:	8b 36                	mov    esi,DWORD PTR [esi]
c001dfc5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dfc9:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001dfcc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dfcf:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001dfd5:	01 d7                	add    edi,edx
c001dfd7:	89 f8                	mov    eax,edi
c001dfd9:	e9 66 fe ff ff       	jmp    c001de44 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001dfde <cleanerTaskFunction(void*)>:
c001dfde:	53                   	push   ebx
c001dfdf:	83 ec 08             	sub    esp,0x8
c001dfe2:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001dfe7:	48                   	dec    eax
c001dfe8:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001dfed:	75 01                	jne    c001dff0 <cleanerTaskFunction(void*)+0x12>
c001dfef:	fb                   	sti    
c001dff0:	fa                   	cli    
c001dff1:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001dff6:	80 3d ec 0a 03 c0 00 	cmp    BYTE PTR ds:0xc0030aec,0x0
c001dffd:	8d 50 01             	lea    edx,[eax+0x1]
c001e000:	89 15 08 0b 03 c0    	mov    DWORD PTR ds:0xc0030b08,edx
c001e006:	0f 84 a1 00 00 00    	je     c001e0ad <cleanerTaskFunction(void*)+0xcf>
c001e00c:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001e011:	85 c0                	test   eax,eax
c001e013:	75 01                	jne    c001e016 <cleanerTaskFunction(void*)+0x38>
c001e015:	fb                   	sti    
c001e016:	c6 05 ec 0a 03 c0 00 	mov    BYTE PTR ds:0xc0030aec,0x0
c001e01d:	fa                   	cli    
c001e01e:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001e024:	ff 05 04 0b 03 c0    	inc    DWORD PTR ds:0xc0030b04
c001e02a:	fa                   	cli    
c001e02b:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001e031:	eb 26                	jmp    c001e059 <cleanerTaskFunction(void*)+0x7b>
c001e033:	83 ec 0c             	sub    esp,0xc
c001e036:	68 0c 0b 03 c0       	push   0xc0030b0c
c001e03b:	e8 9a a5 00 00       	call   c00285da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e040:	c7 04 24 0c 0b 03 c0 	mov    DWORD PTR [esp],0xc0030b0c
c001e047:	89 c3                	mov    ebx,eax
c001e049:	e8 94 a5 00 00       	call   c00285e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e04e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e051:	e8 e1 fc ff ff       	call   c001dd37 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e056:	83 c4 10             	add    esp,0x10
c001e059:	83 ec 0c             	sub    esp,0xc
c001e05c:	68 0c 0b 03 c0       	push   0xc0030b0c
c001e061:	e8 58 a5 00 00       	call   c00285be <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e066:	83 c4 10             	add    esp,0x10
c001e069:	84 c0                	test   al,al
c001e06b:	74 c6                	je     c001e033 <cleanerTaskFunction(void*)+0x55>
c001e06d:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001e072:	48                   	dec    eax
c001e073:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001e078:	75 01                	jne    c001e07b <cleanerTaskFunction(void*)+0x9d>
c001e07a:	fb                   	sti    
c001e07b:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c001e080:	48                   	dec    eax
c001e081:	a3 04 0b 03 c0       	mov    ds:0xc0030b04,eax
c001e086:	0f 85 56 ff ff ff    	jne    c001dfe2 <cleanerTaskFunction(void*)+0x4>
c001e08c:	a1 00 0b 03 c0       	mov    eax,ds:0xc0030b00
c001e091:	85 c0                	test   eax,eax
c001e093:	0f 84 49 ff ff ff    	je     c001dfe2 <cleanerTaskFunction(void*)+0x4>
c001e099:	c7 05 00 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b00,0x0
c001e0a3:	e8 77 f7 ff ff       	call   c001d81f <schedule()>
c001e0a8:	e9 35 ff ff ff       	jmp    c001dfe2 <cleanerTaskFunction(void*)+0x4>
c001e0ad:	83 ec 0c             	sub    esp,0xc
c001e0b0:	6a 02                	push   0x2
c001e0b2:	e8 18 f9 ff ff       	call   c001d9cf <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e0b7:	83 c4 10             	add    esp,0x10
c001e0ba:	e9 57 ff ff ff       	jmp    c001e016 <cleanerTaskFunction(void*)+0x38>

c001e0bf <terminateTask(int)>:
c001e0bf:	83 ec 14             	sub    esp,0x14
c001e0c2:	fa                   	cli    
c001e0c3:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001e0c9:	ff 05 04 0b 03 c0    	inc    DWORD PTR ds:0xc0030b04
c001e0cf:	fa                   	cli    
c001e0d0:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001e0d6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e0da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0df:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e0e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0e7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e0ea:	50                   	push   eax
c001e0eb:	68 0c 0b 03 c0       	push   0xc0030b0c
c001e0f0:	e8 9b a5 00 00       	call   c0028690 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0fa:	83 c4 10             	add    esp,0x10
c001e0fd:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e104:	a1 e8 0a 03 c0       	mov    eax,ds:0xc0030ae8
c001e109:	85 c0                	test   eax,eax
c001e10b:	74 53                	je     c001e160 <terminateTask(int)+0xa1>
c001e10d:	83 ec 0c             	sub    esp,0xc
c001e110:	c6 05 ec 0a 03 c0 01 	mov    BYTE PTR ds:0xc0030aec,0x1
c001e117:	50                   	push   eax
c001e118:	e8 85 fb ff ff       	call   c001dca2 <unblockTask(ThreadControlBlock*)>
c001e11d:	83 c4 10             	add    esp,0x10
c001e120:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001e125:	48                   	dec    eax
c001e126:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001e12b:	75 01                	jne    c001e12e <terminateTask(int)+0x6f>
c001e12d:	fb                   	sti    
c001e12e:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c001e133:	48                   	dec    eax
c001e134:	a3 04 0b 03 c0       	mov    ds:0xc0030b04,eax
c001e139:	75 09                	jne    c001e144 <terminateTask(int)+0x85>
c001e13b:	83 3d 00 0b 03 c0 00 	cmp    DWORD PTR ds:0xc0030b00,0x0
c001e142:	75 2e                	jne    c001e172 <terminateTask(int)+0xb3>
c001e144:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001e149:	48                   	dec    eax
c001e14a:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001e14f:	75 01                	jne    c001e152 <terminateTask(int)+0x93>
c001e151:	fb                   	sti    
c001e152:	fa                   	cli    
c001e153:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001e159:	e8 c1 f6 ff ff       	call   c001d81f <schedule()>
c001e15e:	eb e4                	jmp    c001e144 <terminateTask(int)+0x85>
c001e160:	83 ec 0c             	sub    esp,0xc
c001e163:	68 19 b8 02 c0       	push   0xc002b819
c001e168:	e8 c8 43 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001e16d:	83 c4 10             	add    esp,0x10
c001e170:	eb ae                	jmp    c001e120 <terminateTask(int)+0x61>
c001e172:	c7 05 00 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b00,0x0
c001e17c:	eb db                	jmp    c001e159 <terminateTask(int)+0x9a>

c001e17e <Thr::terminateFromIRQ(int)>:
c001e17e:	83 ec 18             	sub    esp,0x18
c001e181:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e185:	e8 35 ff ff ff       	call   c001e0bf <terminateTask(int)>

c001e18a <Semaphore::release()>:
c001e18a:	83 ec 0c             	sub    esp,0xc
c001e18d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e191:	fa                   	cli    
c001e192:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c001e197:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001e19d:	8d 48 01             	lea    ecx,[eax+0x1]
c001e1a0:	89 0d 04 0b 03 c0    	mov    DWORD PTR ds:0xc0030b04,ecx
c001e1a6:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e1a9:	85 c9                	test   ecx,ecx
c001e1ab:	74 3c                	je     c001e1e9 <Semaphore::release()+0x5f>
c001e1ad:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e1b0:	83 ec 0c             	sub    esp,0xc
c001e1b3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e1b6:	51                   	push   ecx
c001e1b7:	e8 e6 fa ff ff       	call   c001dca2 <unblockTask(ThreadControlBlock*)>
c001e1bc:	a1 04 0b 03 c0       	mov    eax,ds:0xc0030b04
c001e1c1:	83 c4 10             	add    esp,0x10
c001e1c4:	48                   	dec    eax
c001e1c5:	a3 04 0b 03 c0       	mov    ds:0xc0030b04,eax
c001e1ca:	85 c0                	test   eax,eax
c001e1cc:	75 09                	jne    c001e1d7 <Semaphore::release()+0x4d>
c001e1ce:	a1 00 0b 03 c0       	mov    eax,ds:0xc0030b00
c001e1d3:	85 c0                	test   eax,eax
c001e1d5:	75 17                	jne    c001e1ee <Semaphore::release()+0x64>
c001e1d7:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001e1dc:	48                   	dec    eax
c001e1dd:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001e1e2:	75 01                	jne    c001e1e5 <Semaphore::release()+0x5b>
c001e1e4:	fb                   	sti    
c001e1e5:	83 c4 0c             	add    esp,0xc
c001e1e8:	c3                   	ret    
c001e1e9:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e1ec:	eb d7                	jmp    c001e1c5 <Semaphore::release()+0x3b>
c001e1ee:	c7 05 00 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b00,0x0
c001e1f8:	e8 22 f6 ff ff       	call   c001d81f <schedule()>
c001e1fd:	eb d8                	jmp    c001e1d7 <Semaphore::release()+0x4d>

c001e1ff <__static_initialization_and_destruction_0(int, int)>:
c001e1ff:	83 ec 0c             	sub    esp,0xc
c001e202:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e207:	0f 85 88 00 00 00    	jne    c001e295 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e20d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e215:	75 7e                	jne    c001e295 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e217:	83 ec 0c             	sub    esp,0xc
c001e21a:	68 24 0b 03 c0       	push   0xc0030b24
c001e21f:	e8 fc a6 00 00       	call   c0028920 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e224:	83 c4 10             	add    esp,0x10
c001e227:	83 ec 04             	sub    esp,0x4
c001e22a:	68 b0 c3 02 c0       	push   0xc002c3b0
c001e22f:	68 24 0b 03 c0       	push   0xc0030b24
c001e234:	68 d4 88 02 c0       	push   0xc00288d4
c001e239:	e8 99 41 ff ff       	call   c00123d7 <__cxa_atexit>
c001e23e:	83 c4 10             	add    esp,0x10
c001e241:	83 ec 0c             	sub    esp,0xc
c001e244:	68 18 0b 03 c0       	push   0xc0030b18
c001e249:	e8 d2 a6 00 00       	call   c0028920 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e24e:	83 c4 10             	add    esp,0x10
c001e251:	83 ec 04             	sub    esp,0x4
c001e254:	68 b0 c3 02 c0       	push   0xc002c3b0
c001e259:	68 18 0b 03 c0       	push   0xc0030b18
c001e25e:	68 d4 88 02 c0       	push   0xc00288d4
c001e263:	e8 6f 41 ff ff       	call   c00123d7 <__cxa_atexit>
c001e268:	83 c4 10             	add    esp,0x10
c001e26b:	83 ec 0c             	sub    esp,0xc
c001e26e:	68 0c 0b 03 c0       	push   0xc0030b0c
c001e273:	e8 a8 a6 00 00       	call   c0028920 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e278:	83 c4 10             	add    esp,0x10
c001e27b:	83 ec 04             	sub    esp,0x4
c001e27e:	68 b0 c3 02 c0       	push   0xc002c3b0
c001e283:	68 0c 0b 03 c0       	push   0xc0030b0c
c001e288:	68 d4 88 02 c0       	push   0xc00288d4
c001e28d:	e8 45 41 ff ff       	call   c00123d7 <__cxa_atexit>
c001e292:	83 c4 10             	add    esp,0x10
c001e295:	90                   	nop
c001e296:	83 c4 0c             	add    esp,0xc
c001e299:	c3                   	ret    

c001e29a <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e29a:	83 ec 0c             	sub    esp,0xc
c001e29d:	83 ec 08             	sub    esp,0x8
c001e2a0:	68 ff ff 00 00       	push   0xffff
c001e2a5:	6a 01                	push   0x1
c001e2a7:	e8 53 ff ff ff       	call   c001e1ff <__static_initialization_and_destruction_0(int, int)>
c001e2ac:	83 c4 10             	add    esp,0x10
c001e2af:	83 c4 0c             	add    esp,0xc
c001e2b2:	c3                   	ret    

c001e2b3 <Vm::inbv(unsigned short)>:
c001e2b3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e2b7:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e2bc:	75 06                	jne    c001e2c4 <Vm::inbv(unsigned short)+0x11>
c001e2be:	a0 6c 0b 03 c0       	mov    al,ds:0xc0030b6c
c001e2c3:	c3                   	ret    
c001e2c4:	ec                   	in     al,dx
c001e2c5:	c3                   	ret    

c001e2c6 <Vm::outbv(unsigned short, unsigned char)>:
c001e2c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e2ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2ce:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e2d3:	75 25                	jne    c001e2fa <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e2d5:	8b 0d 6c 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030b6c
c001e2db:	8d 51 01             	lea    edx,[ecx+0x1]
c001e2de:	88 81 80 0b 03 c0    	mov    BYTE PTR [ecx-0x3ffcf480],al
c001e2e4:	89 15 6c 0b 03 c0    	mov    DWORD PTR ds:0xc0030b6c,edx
c001e2ea:	83 fa 20             	cmp    edx,0x20
c001e2ed:	75 0c                	jne    c001e2fb <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e2ef:	c7 05 6c 0b 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030b6c,0x1f
c001e2f9:	c3                   	ret    
c001e2fa:	ee                   	out    dx,al
c001e2fb:	c3                   	ret    

c001e2fc <Vm::realToLinear(unsigned short, unsigned short)>:
c001e2fc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e301:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e306:	c1 e0 04             	shl    eax,0x4
c001e309:	01 d0                	add    eax,edx
c001e30b:	c3                   	ret    

c001e30c <Vm::getSegment(unsigned int)>:
c001e30c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e310:	c1 e8 10             	shr    eax,0x10
c001e313:	c3                   	ret    

c001e314 <Vm::getOffset(unsigned int)>:
c001e314:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e318:	c3                   	ret    

c001e319 <Vm::mainloop2()>:
c001e319:	83 ec 18             	sub    esp,0x18
c001e31c:	fa                   	cli    
c001e31d:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001e323:	6a 02                	push   0x2
c001e325:	c6 05 65 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030b65,0x1
c001e32c:	e8 9e f6 ff ff       	call   c001d9cf <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e331:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e336:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e33a:	52                   	push   edx
c001e33b:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e33f:	52                   	push   edx
c001e340:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e344:	52                   	push   edx
c001e345:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e349:	50                   	push   eax
c001e34a:	e8 ab 1f fe ff       	call   c00002fa <goToVM86>
c001e34f:	83 c4 2c             	add    esp,0x2c
c001e352:	c3                   	ret    

c001e353 <Vm::mainVm8086Loop(void*)>:
c001e353:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001e358:	48                   	dec    eax
c001e359:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001e35e:	75 01                	jne    c001e361 <Vm::mainVm8086Loop(void*)+0xe>
c001e360:	fb                   	sti    
c001e361:	eb b6                	jmp    c001e319 <Vm::mainloop2()>

c001e363 <Vm::mainloop3(unsigned long)>:
c001e363:	83 ec 18             	sub    esp,0x18
c001e366:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e36a:	fa                   	cli    
c001e36b:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001e371:	6a 02                	push   0x2
c001e373:	c6 05 64 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030b64,0x1
c001e37a:	a3 60 0b 03 c0       	mov    ds:0xc0030b60,eax
c001e37f:	e8 4b f6 ff ff       	call   c001d9cf <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e384:	83 c4 1c             	add    esp,0x1c
c001e387:	eb 90                	jmp    c001e319 <Vm::mainloop2()>

c001e389 <Vm::initialise8086()>:
c001e389:	83 ec 0c             	sub    esp,0xc
c001e38c:	68 80 00 00 00       	push   0x80
c001e391:	6a 00                	push   0x0
c001e393:	68 53 e3 01 c0       	push   0xc001e353
c001e398:	ff 35 30 0b 03 c0    	push   DWORD PTR ds:0xc0030b30
c001e39e:	e8 57 f2 ff ff       	call   c001d5fa <Process::createThread(void (*)(void*), void*, int)>
c001e3a3:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e3aa:	a3 68 0b 03 c0       	mov    ds:0xc0030b68,eax
c001e3af:	68 00 01 00 00       	push   0x100
c001e3b4:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c001e3b9:	6a 00                	push   0x0
c001e3bb:	6a 00                	push   0x0
c001e3bd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e3c3:	e8 88 38 ff ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e3c8:	83 c4 2c             	add    esp,0x2c
c001e3cb:	c3                   	ret    

c001e3cc <Vm::finish8086()>:
c001e3cc:	53                   	push   ebx
c001e3cd:	83 ec 08             	sub    esp,0x8
c001e3d0:	fa                   	cli    
c001e3d1:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001e3d7:	80 3d 64 0b 03 c0 00 	cmp    BYTE PTR ds:0xc0030b64,0x0
c001e3de:	75 15                	jne    c001e3f5 <Vm::finish8086()+0x29>
c001e3e0:	e8 3a f4 ff ff       	call   c001d81f <schedule()>
c001e3e5:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001e3ea:	48                   	dec    eax
c001e3eb:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001e3f0:	75 de                	jne    c001e3d0 <Vm::finish8086()+0x4>
c001e3f2:	fb                   	sti    
c001e3f3:	eb db                	jmp    c001e3d0 <Vm::finish8086()+0x4>
c001e3f5:	83 ec 0c             	sub    esp,0xc
c001e3f8:	8b 1d 60 0b 03 c0    	mov    ebx,DWORD PTR ds:0xc0030b60
c001e3fe:	ff 35 68 0b 03 c0    	push   DWORD PTR ds:0xc0030b68
c001e404:	c6 05 64 0b 03 c0 00 	mov    BYTE PTR ds:0xc0030b64,0x0
c001e40b:	e8 92 f8 ff ff       	call   c001dca2 <unblockTask(ThreadControlBlock*)>
c001e410:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001e415:	83 c4 10             	add    esp,0x10
c001e418:	8d 50 ff             	lea    edx,[eax-0x1]
c001e41b:	89 15 08 0b 03 c0    	mov    DWORD PTR ds:0xc0030b08,edx
c001e421:	85 d2                	test   edx,edx
c001e423:	75 01                	jne    c001e426 <Vm::finish8086()+0x5a>
c001e425:	fb                   	sti    
c001e426:	89 d8                	mov    eax,ebx
c001e428:	83 c4 08             	add    esp,0x8
c001e42b:	5b                   	pop    ebx
c001e42c:	c3                   	ret    

c001e42d <Vm::getOutput8086(unsigned char*)>:
c001e42d:	57                   	push   edi
c001e42e:	8b 0d 6c 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030b6c
c001e434:	56                   	push   esi
c001e435:	be 80 0b 03 c0       	mov    esi,0xc0030b80
c001e43a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e43e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e440:	a1 6c 0b 03 c0       	mov    eax,ds:0xc0030b6c
c001e445:	5e                   	pop    esi
c001e446:	c7 05 6c 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b6c,0x0
c001e450:	5f                   	pop    edi
c001e451:	c3                   	ret    

c001e452 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e452:	55                   	push   ebp
c001e453:	57                   	push   edi
c001e454:	56                   	push   esi
c001e455:	53                   	push   ebx
c001e456:	83 ec 2c             	sub    esp,0x2c
c001e459:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e45d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e461:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e465:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e469:	fa                   	cli    
c001e46a:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c001e470:	0f b6 35 65 0b 03 c0 	movzx  esi,BYTE PTR ds:0xc0030b65
c001e477:	89 f0                	mov    eax,esi
c001e479:	84 c0                	test   al,al
c001e47b:	75 1d                	jne    c001e49a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e47d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e481:	e8 99 f3 ff ff       	call   c001d81f <schedule()>
c001e486:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001e48b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e48f:	48                   	dec    eax
c001e490:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001e495:	75 d2                	jne    c001e469 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e497:	fb                   	sti    
c001e498:	eb cf                	jmp    c001e469 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e49a:	a1 68 0b 03 c0       	mov    eax,ds:0xc0030b68
c001e49f:	c7 05 6c 0b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030b6c,0x0
c001e4a9:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e4ad:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e4b1:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e4b5:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e4b9:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e4bd:	50                   	push   eax
c001e4be:	6a 20                	push   0x20
c001e4c0:	6a 00                	push   0x0
c001e4c2:	68 80 0b 03 c0       	push   0xc0030b80
c001e4c7:	e8 84 22 fe ff       	call   c0000750 <memset>
c001e4cc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e4d3:	e8 c1 10 ff ff       	call   c000f599 <malloc>
c001e4d8:	83 c4 0c             	add    esp,0xc
c001e4db:	89 c3                	mov    ebx,eax
c001e4dd:	ff 35 30 0b 03 c0    	push   DWORD PTR ds:0xc0030b30
c001e4e3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e4e7:	50                   	push   eax
c001e4e8:	e8 a7 45 ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c001e4ed:	83 c4 10             	add    esp,0x10
c001e4f0:	85 db                	test   ebx,ebx
c001e4f2:	75 0a                	jne    c001e4fe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e4f4:	83 ec 0c             	sub    esp,0xc
c001e4f7:	68 24 b9 02 c0       	push   0xc002b924
c001e4fc:	eb 3e                	jmp    c001e53c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e4fe:	50                   	push   eax
c001e4ff:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e503:	50                   	push   eax
c001e504:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e508:	50                   	push   eax
c001e509:	53                   	push   ebx
c001e50a:	e8 95 48 ff ff       	call   c0012da4 <File::stat(unsigned long long*, bool*)>
c001e50f:	83 c4 10             	add    esp,0x10
c001e512:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e517:	74 0a                	je     c001e523 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e519:	83 ec 0c             	sub    esp,0xc
c001e51c:	68 38 b9 02 c0       	push   0xc002b938
c001e521:	eb 19                	jmp    c001e53c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e523:	51                   	push   ecx
c001e524:	51                   	push   ecx
c001e525:	6a 01                	push   0x1
c001e527:	53                   	push   ebx
c001e528:	e8 cb 45 ff ff       	call   c0012af8 <File::open(FileOpenMode)>
c001e52d:	83 c4 10             	add    esp,0x10
c001e530:	85 c0                	test   eax,eax
c001e532:	74 24                	je     c001e558 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e534:	83 ec 0c             	sub    esp,0xc
c001e537:	68 51 b9 02 c0       	push   0xc002b951
c001e53c:	e8 54 b7 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001e541:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001e546:	83 c4 10             	add    esp,0x10
c001e549:	48                   	dec    eax
c001e54a:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001e54f:	85 c0                	test   eax,eax
c001e551:	75 01                	jne    c001e554 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e553:	fb                   	sti    
c001e554:	31 f6                	xor    esi,esi
c001e556:	eb 58                	jmp    c001e5b0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e558:	0f b7 ed             	movzx  ebp,bp
c001e55b:	50                   	push   eax
c001e55c:	0f b7 ff             	movzx  edi,di
c001e55f:	50                   	push   eax
c001e560:	55                   	push   ebp
c001e561:	57                   	push   edi
c001e562:	e8 95 fd ff ff       	call   c001e2fc <Vm::realToLinear(unsigned short, unsigned short)>
c001e567:	5a                   	pop    edx
c001e568:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e56a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e56e:	51                   	push   ecx
c001e56f:	50                   	push   eax
c001e570:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e574:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e578:	53                   	push   ebx
c001e579:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e57c:	83 c4 14             	add    esp,0x14
c001e57f:	53                   	push   ebx
c001e580:	e8 d1 45 ff ff       	call   c0012b56 <File::close()>
c001e585:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c001e58a:	83 c4 10             	add    esp,0x10
c001e58d:	48                   	dec    eax
c001e58e:	c6 05 65 0b 03 c0 00 	mov    BYTE PTR ds:0xc0030b65,0x0
c001e595:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c001e59a:	85 c0                	test   eax,eax
c001e59c:	75 01                	jne    c001e59f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e59e:	fb                   	sti    
c001e59f:	83 ec 0c             	sub    esp,0xc
c001e5a2:	ff 35 68 0b 03 c0    	push   DWORD PTR ds:0xc0030b68
c001e5a8:	e8 f5 f6 ff ff       	call   c001dca2 <unblockTask(ThreadControlBlock*)>
c001e5ad:	83 c4 10             	add    esp,0x10
c001e5b0:	83 c4 2c             	add    esp,0x2c
c001e5b3:	89 f0                	mov    eax,esi
c001e5b5:	5b                   	pop    ebx
c001e5b6:	5e                   	pop    esi
c001e5b7:	5f                   	pop    edi
c001e5b8:	5d                   	pop    ebp
c001e5b9:	c3                   	ret    

c001e5ba <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e5ba:	57                   	push   edi
c001e5bb:	56                   	push   esi
c001e5bc:	53                   	push   ebx
c001e5bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5c5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e5c9:	83 e8 06             	sub    eax,0x6
c001e5cc:	0f b7 c0             	movzx  eax,ax
c001e5cf:	50                   	push   eax
c001e5d0:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e5d5:	50                   	push   eax
c001e5d6:	e8 21 fd ff ff       	call   c001e2fc <Vm::realToLinear(unsigned short, unsigned short)>
c001e5db:	5a                   	pop    edx
c001e5dc:	5e                   	pop    esi
c001e5dd:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e5e0:	8d 56 fa             	lea    edx,[esi-0x6]
c001e5e3:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e5e9:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e5ec:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e5ef:	83 c2 02             	add    edx,0x2
c001e5f2:	66 89 10             	mov    WORD PTR [eax],dx
c001e5f5:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e5f8:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e5fc:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e5ff:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e603:	89 d6                	mov    esi,edx
c001e605:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e60b:	66 81 e6 ff fd       	and    si,0xfdff
c001e610:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e614:	74 07                	je     c001e61d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e616:	89 d6                	mov    esi,edx
c001e618:	66 81 ce 00 02       	or     si,0x200
c001e61d:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e621:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e626:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e62a:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e632:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e635:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e63d:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e640:	5b                   	pop    ebx
c001e641:	5e                   	pop    esi
c001e642:	5f                   	pop    edi
c001e643:	c3                   	ret    

c001e644 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e644:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e649:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e64e:	c1 e0 04             	shl    eax,0x4
c001e651:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e654:	c3                   	ret    

c001e655 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e655:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e65a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e65f:	c1 e0 04             	shl    eax,0x4
c001e662:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e666:	c3                   	ret    

c001e667 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e667:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e66c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e671:	c1 e0 04             	shl    eax,0x4
c001e674:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e677:	c3                   	ret    

c001e678 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e678:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e67d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e682:	c1 e0 04             	shl    eax,0x4
c001e685:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e689:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e68c:	c3                   	ret    

c001e68d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e68d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e692:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e697:	c1 e0 04             	shl    eax,0x4
c001e69a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e69e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e6a2:	c3                   	ret    

c001e6a3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e6a3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6a8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e6ad:	c1 e0 04             	shl    eax,0x4
c001e6b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6b4:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e6b7:	c3                   	ret    

c001e6b8 <Vm::faultHandler(regs*)>:
c001e6b8:	55                   	push   ebp
c001e6b9:	57                   	push   edi
c001e6ba:	56                   	push   esi
c001e6bb:	53                   	push   ebx
c001e6bc:	83 ec 1c             	sub    esp,0x1c
c001e6bf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e6c3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e6c6:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e6ca:	0f b7 f8             	movzx  edi,ax
c001e6cd:	52                   	push   edx
c001e6ce:	0f b7 c0             	movzx  eax,ax
c001e6d1:	50                   	push   eax
c001e6d2:	e8 25 fc ff ff       	call   c001e2fc <Vm::realToLinear(unsigned short, unsigned short)>
c001e6d7:	5a                   	pop    edx
c001e6d8:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e6db:	59                   	pop    ecx
c001e6dc:	89 c1                	mov    ecx,eax
c001e6de:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e6e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e6e5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e6ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e6ee:	0f b7 c5             	movzx  eax,bp
c001e6f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e6f5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e6f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e6fd:	e8 fa fb ff ff       	call   c001e2fc <Vm::realToLinear(unsigned short, unsigned short)>
c001e702:	5e                   	pop    esi
c001e703:	be 06 00 00 00       	mov    esi,0x6
c001e708:	5a                   	pop    edx
c001e709:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e70e:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e713:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e716:	80 fa 9d             	cmp    dl,0x9d
c001e719:	0f 84 2c 02 00 00    	je     c001e94b <Vm::faultHandler(regs*)+0x293>
c001e71f:	0f 87 91 00 00 00    	ja     c001e7b6 <Vm::faultHandler(regs*)+0xfe>
c001e725:	80 fa 66             	cmp    dl,0x66
c001e728:	0f 84 98 01 00 00    	je     c001e8c6 <Vm::faultHandler(regs*)+0x20e>
c001e72e:	77 47                	ja     c001e777 <Vm::faultHandler(regs*)+0xbf>
c001e730:	80 fa 36             	cmp    dl,0x36
c001e733:	0f 84 80 01 00 00    	je     c001e8b9 <Vm::faultHandler(regs*)+0x201>
c001e739:	77 1a                	ja     c001e755 <Vm::faultHandler(regs*)+0x9d>
c001e73b:	80 fa 26             	cmp    dl,0x26
c001e73e:	0f 84 4e 01 00 00    	je     c001e892 <Vm::faultHandler(regs*)+0x1da>
c001e744:	80 fa 2e             	cmp    dl,0x2e
c001e747:	0f 85 e2 05 00 00    	jne    c001ed2f <Vm::faultHandler(regs*)+0x677>
c001e74d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e750:	31 f6                	xor    esi,esi
c001e752:	41                   	inc    ecx
c001e753:	eb be                	jmp    c001e713 <Vm::faultHandler(regs*)+0x5b>
c001e755:	80 fa 64             	cmp    dl,0x64
c001e758:	0f 84 41 01 00 00    	je     c001e89f <Vm::faultHandler(regs*)+0x1e7>
c001e75e:	0f 87 48 01 00 00    	ja     c001e8ac <Vm::faultHandler(regs*)+0x1f4>
c001e764:	80 fa 3e             	cmp    dl,0x3e
c001e767:	0f 85 c2 05 00 00    	jne    c001ed2f <Vm::faultHandler(regs*)+0x677>
c001e76d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e770:	be 01 00 00 00       	mov    esi,0x1
c001e775:	eb db                	jmp    c001e752 <Vm::faultHandler(regs*)+0x9a>
c001e777:	80 fa 6d             	cmp    dl,0x6d
c001e77a:	0f 84 ec 02 00 00    	je     c001ea6c <Vm::faultHandler(regs*)+0x3b4>
c001e780:	77 17                	ja     c001e799 <Vm::faultHandler(regs*)+0xe1>
c001e782:	80 fa 67             	cmp    dl,0x67
c001e785:	0f 84 48 01 00 00    	je     c001e8d3 <Vm::faultHandler(regs*)+0x21b>
c001e78b:	80 fa 6c             	cmp    dl,0x6c
c001e78e:	0f 84 69 02 00 00    	je     c001e9fd <Vm::faultHandler(regs*)+0x345>
c001e794:	e9 96 05 00 00       	jmp    c001ed2f <Vm::faultHandler(regs*)+0x677>
c001e799:	80 fa 6f             	cmp    dl,0x6f
c001e79c:	0f 84 f4 03 00 00    	je     c001eb96 <Vm::faultHandler(regs*)+0x4de>
c001e7a2:	0f 82 59 03 00 00    	jb     c001eb01 <Vm::faultHandler(regs*)+0x449>
c001e7a8:	80 fa 9c             	cmp    dl,0x9c
c001e7ab:	0f 84 2f 01 00 00    	je     c001e8e0 <Vm::faultHandler(regs*)+0x228>
c001e7b1:	e9 79 05 00 00       	jmp    c001ed2f <Vm::faultHandler(regs*)+0x677>
c001e7b6:	80 fa ec             	cmp    dl,0xec
c001e7b9:	0f 84 14 05 00 00    	je     c001ecd3 <Vm::faultHandler(regs*)+0x61b>
c001e7bf:	77 7b                	ja     c001e83c <Vm::faultHandler(regs*)+0x184>
c001e7c1:	80 fa e4             	cmp    dl,0xe4
c001e7c4:	0f 84 93 04 00 00    	je     c001ec5d <Vm::faultHandler(regs*)+0x5a5>
c001e7ca:	77 53                	ja     c001e81f <Vm::faultHandler(regs*)+0x167>
c001e7cc:	80 fa cd             	cmp    dl,0xcd
c001e7cf:	0f 84 d9 01 00 00    	je     c001e9ae <Vm::faultHandler(regs*)+0x2f6>
c001e7d5:	80 fa cf             	cmp    dl,0xcf
c001e7d8:	0f 85 51 05 00 00    	jne    c001ed2f <Vm::faultHandler(regs*)+0x677>
c001e7de:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e7e1:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e7e4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e7e8:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e7eb:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e7ef:	81 ca 00 02 02 00    	or     edx,0x20200
c001e7f5:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e7f8:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e7fc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e802:	66 c1 e8 09          	shr    ax,0x9
c001e806:	83 e0 01             	and    eax,0x1
c001e809:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e80c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e80f:	83 c0 06             	add    eax,0x6
c001e812:	25 ff ff 00 00       	and    eax,0xffff
c001e817:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e81a:	e9 0c 05 00 00       	jmp    c001ed2b <Vm::faultHandler(regs*)+0x673>
c001e81f:	80 fa e6             	cmp    dl,0xe6
c001e822:	0f 84 7f 04 00 00    	je     c001eca7 <Vm::faultHandler(regs*)+0x5ef>
c001e828:	0f 82 4b 04 00 00    	jb     c001ec79 <Vm::faultHandler(regs*)+0x5c1>
c001e82e:	80 fa e7             	cmp    dl,0xe7
c001e831:	0f 84 87 04 00 00    	je     c001ecbe <Vm::faultHandler(regs*)+0x606>
c001e837:	e9 f3 04 00 00       	jmp    c001ed2f <Vm::faultHandler(regs*)+0x677>
c001e83c:	80 fa ef             	cmp    dl,0xef
c001e83f:	0f 84 d1 04 00 00    	je     c001ed16 <Vm::faultHandler(regs*)+0x65e>
c001e845:	77 28                	ja     c001e86f <Vm::faultHandler(regs*)+0x1b7>
c001e847:	80 fa ed             	cmp    dl,0xed
c001e84a:	0f 84 9f 04 00 00    	je     c001ecef <Vm::faultHandler(regs*)+0x637>
c001e850:	80 fa ee             	cmp    dl,0xee
c001e853:	0f 85 d6 04 00 00    	jne    c001ed2f <Vm::faultHandler(regs*)+0x677>
c001e859:	50                   	push   eax
c001e85a:	50                   	push   eax
c001e85b:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001e85f:	50                   	push   eax
c001e860:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001e864:	50                   	push   eax
c001e865:	e8 5c fa ff ff       	call   c001e2c6 <Vm::outbv(unsigned short, unsigned char)>
c001e86a:	e9 9f 04 00 00       	jmp    c001ed0e <Vm::faultHandler(regs*)+0x656>
c001e86f:	80 fa fa             	cmp    dl,0xfa
c001e872:	0f 84 69 01 00 00    	je     c001e9e1 <Vm::faultHandler(regs*)+0x329>
c001e878:	80 fa fb             	cmp    dl,0xfb
c001e87b:	0f 84 6e 01 00 00    	je     c001e9ef <Vm::faultHandler(regs*)+0x337>
c001e881:	80 fa f3             	cmp    dl,0xf3
c001e884:	0f 85 a5 04 00 00    	jne    c001ed2f <Vm::faultHandler(regs*)+0x677>
c001e88a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e88d:	e9 c0 fe ff ff       	jmp    c001e752 <Vm::faultHandler(regs*)+0x9a>
c001e892:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e895:	be 02 00 00 00       	mov    esi,0x2
c001e89a:	e9 b3 fe ff ff       	jmp    c001e752 <Vm::faultHandler(regs*)+0x9a>
c001e89f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8a2:	be 03 00 00 00       	mov    esi,0x3
c001e8a7:	e9 a6 fe ff ff       	jmp    c001e752 <Vm::faultHandler(regs*)+0x9a>
c001e8ac:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8af:	be 04 00 00 00       	mov    esi,0x4
c001e8b4:	e9 99 fe ff ff       	jmp    c001e752 <Vm::faultHandler(regs*)+0x9a>
c001e8b9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8bc:	be 05 00 00 00       	mov    esi,0x5
c001e8c1:	e9 8c fe ff ff       	jmp    c001e752 <Vm::faultHandler(regs*)+0x9a>
c001e8c6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8c9:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001e8ce:	e9 7f fe ff ff       	jmp    c001e752 <Vm::faultHandler(regs*)+0x9a>
c001e8d3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8d6:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001e8db:	e9 72 fe ff ff       	jmp    c001e752 <Vm::faultHandler(regs*)+0x9a>
c001e8e0:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e8e3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001e8e7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001e8ec:	74 30                	je     c001e91e <Vm::faultHandler(regs*)+0x266>
c001e8ee:	83 e9 04             	sub    ecx,0x4
c001e8f1:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001e8f7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e8fd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001e900:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e903:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e909:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001e90d:	0f 84 15 04 00 00    	je     c001ed28 <Vm::faultHandler(regs*)+0x670>
c001e913:	80 ce 02             	or     dh,0x2
c001e916:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001e919:	e9 0a 04 00 00       	jmp    c001ed28 <Vm::faultHandler(regs*)+0x670>
c001e91e:	83 e9 02             	sub    ecx,0x2
c001e921:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001e927:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001e92a:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001e92e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e934:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001e938:	74 05                	je     c001e93f <Vm::faultHandler(regs*)+0x287>
c001e93a:	80 ce 02             	or     dh,0x2
c001e93d:	eb 03                	jmp    c001e942 <Vm::faultHandler(regs*)+0x28a>
c001e93f:	80 e6 fd             	and    dh,0xfd
c001e942:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001e946:	e9 dd 03 00 00       	jmp    c001ed28 <Vm::faultHandler(regs*)+0x670>
c001e94b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001e950:	74 2a                	je     c001e97c <Vm::faultHandler(regs*)+0x2c4>
c001e952:	8b 10                	mov    edx,DWORD PTR [eax]
c001e954:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001e95a:	81 ca 00 02 02 00    	or     edx,0x20200
c001e960:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e963:	8b 00                	mov    eax,DWORD PTR [eax]
c001e965:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e96b:	c1 e8 09             	shr    eax,0x9
c001e96e:	83 e0 01             	and    eax,0x1
c001e971:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e974:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e977:	83 c0 04             	add    eax,0x4
c001e97a:	eb 25                	jmp    c001e9a1 <Vm::faultHandler(regs*)+0x2e9>
c001e97c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e97f:	81 ca 00 02 02 00    	or     edx,0x20200
c001e985:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e988:	66 8b 00             	mov    ax,WORD PTR [eax]
c001e98b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e991:	66 c1 e8 09          	shr    ax,0x9
c001e995:	83 e0 01             	and    eax,0x1
c001e998:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e99b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e99e:	83 c0 02             	add    eax,0x2
c001e9a1:	25 ff ff 00 00       	and    eax,0xffff
c001e9a6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e9a9:	e9 7a 03 00 00       	jmp    c001ed28 <Vm::faultHandler(regs*)+0x670>
c001e9ae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001e9b2:	3c ee                	cmp    al,0xee
c001e9b4:	75 10                	jne    c001e9c6 <Vm::faultHandler(regs*)+0x30e>
c001e9b6:	83 ec 0c             	sub    esp,0xc
c001e9b9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001e9bc:	e8 a2 f9 ff ff       	call   c001e363 <Vm::mainloop3(unsigned long)>
c001e9c1:	e9 4b 03 00 00       	jmp    c001ed11 <Vm::faultHandler(regs*)+0x659>
c001e9c6:	83 ec 0c             	sub    esp,0xc
c001e9c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e9cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9d1:	51                   	push   ecx
c001e9d2:	50                   	push   eax
c001e9d3:	53                   	push   ebx
c001e9d4:	e8 e1 fb ff ff       	call   c001e5ba <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e9d9:	83 c4 20             	add    esp,0x20
c001e9dc:	e9 4a 03 00 00       	jmp    c001ed2b <Vm::faultHandler(regs*)+0x673>
c001e9e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9e6:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e9ea:	e9 39 03 00 00       	jmp    c001ed28 <Vm::faultHandler(regs*)+0x670>
c001e9ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9f4:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e9f8:	e9 2b 03 00 00       	jmp    c001ed28 <Vm::faultHandler(regs*)+0x670>
c001e9fd:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ea00:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ea05:	74 2b                	je     c001ea32 <Vm::faultHandler(regs*)+0x37a>
c001ea07:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001ea0e:	76 22                	jbe    c001ea32 <Vm::faultHandler(regs*)+0x37a>
c001ea10:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ea14:	50                   	push   eax
c001ea15:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ea19:	50                   	push   eax
c001ea1a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ea1e:	50                   	push   eax
c001ea1f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ea23:	50                   	push   eax
c001ea24:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ea28:	50                   	push   eax
c001ea29:	6a 6c                	push   0x6c
c001ea2b:	6a 6c                	push   0x6c
c001ea2d:	e9 b9 01 00 00       	jmp    c001ebeb <Vm::faultHandler(regs*)+0x533>
c001ea32:	83 ec 0c             	sub    esp,0xc
c001ea35:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ea39:	0f b7 f6             	movzx  esi,si
c001ea3c:	50                   	push   eax
c001ea3d:	e8 71 f8 ff ff       	call   c001e2b3 <Vm::inbv(unsigned short)>
c001ea42:	83 c4 0c             	add    esp,0xc
c001ea45:	0f b6 c0             	movzx  eax,al
c001ea48:	50                   	push   eax
c001ea49:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ea4d:	50                   	push   eax
c001ea4e:	56                   	push   esi
c001ea4f:	e8 24 fc ff ff       	call   c001e678 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ea54:	83 c4 10             	add    esp,0x10
c001ea57:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ea5a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ea5e:	74 03                	je     c001ea63 <Vm::faultHandler(regs*)+0x3ab>
c001ea60:	48                   	dec    eax
c001ea61:	eb 01                	jmp    c001ea64 <Vm::faultHandler(regs*)+0x3ac>
c001ea63:	40                   	inc    eax
c001ea64:	0f b7 c0             	movzx  eax,ax
c001ea67:	e9 8d 00 00 00       	jmp    c001eaf9 <Vm::faultHandler(regs*)+0x441>
c001ea6c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ea6f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ea72:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ea77:	74 29                	je     c001eaa2 <Vm::faultHandler(regs*)+0x3ea>
c001ea79:	3d ff ff 00 00       	cmp    eax,0xffff
c001ea7e:	76 22                	jbe    c001eaa2 <Vm::faultHandler(regs*)+0x3ea>
c001ea80:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ea84:	50                   	push   eax
c001ea85:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ea89:	50                   	push   eax
c001ea8a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ea8e:	50                   	push   eax
c001ea8f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ea93:	50                   	push   eax
c001ea94:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ea98:	50                   	push   eax
c001ea99:	6a 6d                	push   0x6d
c001ea9b:	6a 6d                	push   0x6d
c001ea9d:	e9 49 01 00 00       	jmp    c001ebeb <Vm::faultHandler(regs*)+0x533>
c001eaa2:	0f b7 c8             	movzx  ecx,ax
c001eaa5:	0f b7 f6             	movzx  esi,si
c001eaa8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eaab:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eab0:	74 20                	je     c001ead2 <Vm::faultHandler(regs*)+0x41a>
c001eab2:	ed                   	in     eax,dx
c001eab3:	55                   	push   ebp
c001eab4:	50                   	push   eax
c001eab5:	51                   	push   ecx
c001eab6:	56                   	push   esi
c001eab7:	e8 e7 fb ff ff       	call   c001e6a3 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001eabc:	83 c4 10             	add    esp,0x10
c001eabf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eac2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eac6:	74 05                	je     c001eacd <Vm::faultHandler(regs*)+0x415>
c001eac8:	83 e8 04             	sub    eax,0x4
c001eacb:	eb 27                	jmp    c001eaf4 <Vm::faultHandler(regs*)+0x43c>
c001eacd:	83 c0 04             	add    eax,0x4
c001ead0:	eb 22                	jmp    c001eaf4 <Vm::faultHandler(regs*)+0x43c>
c001ead2:	66 ed                	in     ax,dx
c001ead4:	0f b7 c0             	movzx  eax,ax
c001ead7:	57                   	push   edi
c001ead8:	50                   	push   eax
c001ead9:	51                   	push   ecx
c001eada:	56                   	push   esi
c001eadb:	e8 ad fb ff ff       	call   c001e68d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001eae0:	83 c4 10             	add    esp,0x10
c001eae3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001eae6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eaea:	74 05                	je     c001eaf1 <Vm::faultHandler(regs*)+0x439>
c001eaec:	83 e8 02             	sub    eax,0x2
c001eaef:	eb 03                	jmp    c001eaf4 <Vm::faultHandler(regs*)+0x43c>
c001eaf1:	83 c0 02             	add    eax,0x2
c001eaf4:	25 ff ff 00 00       	and    eax,0xffff
c001eaf9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001eafc:	e9 27 02 00 00       	jmp    c001ed28 <Vm::faultHandler(regs*)+0x670>
c001eb01:	8d 46 ff             	lea    eax,[esi-0x1]
c001eb04:	3c 05                	cmp    al,0x5
c001eb06:	77 24                	ja     c001eb2c <Vm::faultHandler(regs*)+0x474>
c001eb08:	0f b6 c0             	movzx  eax,al
c001eb0b:	ff 24 85 c4 b9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd463c]
c001eb12:	0f b7 fd             	movzx  edi,bp
c001eb15:	eb 15                	jmp    c001eb2c <Vm::faultHandler(regs*)+0x474>
c001eb17:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001eb1b:	eb 0f                	jmp    c001eb2c <Vm::faultHandler(regs*)+0x474>
c001eb1d:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001eb21:	eb 09                	jmp    c001eb2c <Vm::faultHandler(regs*)+0x474>
c001eb23:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001eb27:	eb 03                	jmp    c001eb2c <Vm::faultHandler(regs*)+0x474>
c001eb29:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001eb2c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001eb2f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eb34:	74 29                	je     c001eb5f <Vm::faultHandler(regs*)+0x4a7>
c001eb36:	3d ff ff 00 00       	cmp    eax,0xffff
c001eb3b:	76 22                	jbe    c001eb5f <Vm::faultHandler(regs*)+0x4a7>
c001eb3d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eb41:	50                   	push   eax
c001eb42:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eb46:	50                   	push   eax
c001eb47:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eb4b:	50                   	push   eax
c001eb4c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eb50:	50                   	push   eax
c001eb51:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb55:	50                   	push   eax
c001eb56:	6a 6e                	push   0x6e
c001eb58:	6a 6e                	push   0x6e
c001eb5a:	e9 8c 00 00 00       	jmp    c001ebeb <Vm::faultHandler(regs*)+0x533>
c001eb5f:	0f b7 c0             	movzx  eax,ax
c001eb62:	52                   	push   edx
c001eb63:	52                   	push   edx
c001eb64:	50                   	push   eax
c001eb65:	57                   	push   edi
c001eb66:	e8 d9 fa ff ff       	call   c001e644 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001eb6b:	59                   	pop    ecx
c001eb6c:	0f b6 c0             	movzx  eax,al
c001eb6f:	5e                   	pop    esi
c001eb70:	50                   	push   eax
c001eb71:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001eb75:	50                   	push   eax
c001eb76:	e8 4b f7 ff ff       	call   c001e2c6 <Vm::outbv(unsigned short, unsigned char)>
c001eb7b:	83 c4 10             	add    esp,0x10
c001eb7e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001eb81:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001eb85:	74 03                	je     c001eb8a <Vm::faultHandler(regs*)+0x4d2>
c001eb87:	48                   	dec    eax
c001eb88:	eb 01                	jmp    c001eb8b <Vm::faultHandler(regs*)+0x4d3>
c001eb8a:	40                   	inc    eax
c001eb8b:	0f b7 c0             	movzx  eax,ax
c001eb8e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001eb91:	e9 92 01 00 00       	jmp    c001ed28 <Vm::faultHandler(regs*)+0x670>
c001eb96:	8d 46 ff             	lea    eax,[esi-0x1]
c001eb99:	3c 05                	cmp    al,0x5
c001eb9b:	77 1f                	ja     c001ebbc <Vm::faultHandler(regs*)+0x504>
c001eb9d:	0f b6 c0             	movzx  eax,al
c001eba0:	ff 24 85 dc b9 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4624]
c001eba7:	89 ef                	mov    edi,ebp
c001eba9:	eb 11                	jmp    c001ebbc <Vm::faultHandler(regs*)+0x504>
c001ebab:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ebae:	eb 0c                	jmp    c001ebbc <Vm::faultHandler(regs*)+0x504>
c001ebb0:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ebb3:	eb 07                	jmp    c001ebbc <Vm::faultHandler(regs*)+0x504>
c001ebb5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ebb8:	eb 02                	jmp    c001ebbc <Vm::faultHandler(regs*)+0x504>
c001ebba:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ebbc:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ebbf:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ebc4:	74 37                	je     c001ebfd <Vm::faultHandler(regs*)+0x545>
c001ebc6:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ebcc:	76 2f                	jbe    c001ebfd <Vm::faultHandler(regs*)+0x545>
c001ebce:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ebd2:	50                   	push   eax
c001ebd3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ebd7:	50                   	push   eax
c001ebd8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ebdc:	50                   	push   eax
c001ebdd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ebe1:	50                   	push   eax
c001ebe2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ebe6:	50                   	push   eax
c001ebe7:	6a 6f                	push   0x6f
c001ebe9:	6a 6f                	push   0x6f
c001ebeb:	68 6a b9 02 c0       	push   0xc002b96a
c001ebf0:	e8 40 39 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001ebf5:	83 c4 20             	add    esp,0x20
c001ebf8:	e9 86 01 00 00       	jmp    c001ed83 <Vm::faultHandler(regs*)+0x6cb>
c001ebfd:	0f b7 d7             	movzx  edx,di
c001ec00:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ec03:	0f b7 c6             	movzx  eax,si
c001ec06:	81 e1 00 04 00 00    	and    ecx,0x400
c001ec0c:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ec0f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec14:	74 1d                	je     c001ec33 <Vm::faultHandler(regs*)+0x57b>
c001ec16:	55                   	push   ebp
c001ec17:	55                   	push   ebp
c001ec18:	50                   	push   eax
c001ec19:	52                   	push   edx
c001ec1a:	e8 48 fa ff ff       	call   c001e667 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001ec1f:	83 c4 10             	add    esp,0x10
c001ec22:	89 fa                	mov    edx,edi
c001ec24:	ef                   	out    dx,eax
c001ec25:	85 c9                	test   ecx,ecx
c001ec27:	74 05                	je     c001ec2e <Vm::faultHandler(regs*)+0x576>
c001ec29:	83 ee 04             	sub    esi,0x4
c001ec2c:	eb 21                	jmp    c001ec4f <Vm::faultHandler(regs*)+0x597>
c001ec2e:	83 c6 04             	add    esi,0x4
c001ec31:	eb 1c                	jmp    c001ec4f <Vm::faultHandler(regs*)+0x597>
c001ec33:	55                   	push   ebp
c001ec34:	55                   	push   ebp
c001ec35:	50                   	push   eax
c001ec36:	52                   	push   edx
c001ec37:	e8 19 fa ff ff       	call   c001e655 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001ec3c:	83 c4 10             	add    esp,0x10
c001ec3f:	89 fa                	mov    edx,edi
c001ec41:	66 ef                	out    dx,ax
c001ec43:	85 c9                	test   ecx,ecx
c001ec45:	74 05                	je     c001ec4c <Vm::faultHandler(regs*)+0x594>
c001ec47:	83 ee 02             	sub    esi,0x2
c001ec4a:	eb 03                	jmp    c001ec4f <Vm::faultHandler(regs*)+0x597>
c001ec4c:	83 c6 02             	add    esi,0x2
c001ec4f:	81 e6 ff ff 00 00    	and    esi,0xffff
c001ec55:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ec58:	e9 cb 00 00 00       	jmp    c001ed28 <Vm::faultHandler(regs*)+0x670>
c001ec5d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ec64:	83 ec 0c             	sub    esp,0xc
c001ec67:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec6b:	50                   	push   eax
c001ec6c:	e8 42 f6 ff ff       	call   c001e2b3 <Vm::inbv(unsigned short)>
c001ec71:	0f b6 c0             	movzx  eax,al
c001ec74:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ec77:	eb 3f                	jmp    c001ecb8 <Vm::faultHandler(regs*)+0x600>
c001ec79:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec7e:	74 07                	je     c001ec87 <Vm::faultHandler(regs*)+0x5cf>
c001ec80:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ec84:	ed                   	in     eax,dx
c001ec85:	eb 14                	jmp    c001ec9b <Vm::faultHandler(regs*)+0x5e3>
c001ec87:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ec8a:	66 31 f6             	xor    si,si
c001ec8d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ec90:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ec94:	66 ed                	in     ax,dx
c001ec96:	0f b7 c0             	movzx  eax,ax
c001ec99:	09 f0                	or     eax,esi
c001ec9b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ec9e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001eca2:	e9 84 00 00 00       	jmp    c001ed2b <Vm::faultHandler(regs*)+0x673>
c001eca7:	52                   	push   edx
c001eca8:	52                   	push   edx
c001eca9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ecad:	50                   	push   eax
c001ecae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ecb2:	50                   	push   eax
c001ecb3:	e8 0e f6 ff ff       	call   c001e2c6 <Vm::outbv(unsigned short, unsigned char)>
c001ecb8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ecbc:	eb 53                	jmp    c001ed11 <Vm::faultHandler(regs*)+0x659>
c001ecbe:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ecc1:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ecc5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ecca:	74 03                	je     c001eccf <Vm::faultHandler(regs*)+0x617>
c001eccc:	ef                   	out    dx,eax
c001eccd:	eb cf                	jmp    c001ec9e <Vm::faultHandler(regs*)+0x5e6>
c001eccf:	66 ef                	out    dx,ax
c001ecd1:	eb cb                	jmp    c001ec9e <Vm::faultHandler(regs*)+0x5e6>
c001ecd3:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ecda:	83 ec 0c             	sub    esp,0xc
c001ecdd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ece1:	50                   	push   eax
c001ece2:	e8 cc f5 ff ff       	call   c001e2b3 <Vm::inbv(unsigned short)>
c001ece7:	0f b6 c0             	movzx  eax,al
c001ecea:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001eced:	eb 1f                	jmp    c001ed0e <Vm::faultHandler(regs*)+0x656>
c001ecef:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ecf2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ecf7:	74 03                	je     c001ecfc <Vm::faultHandler(regs*)+0x644>
c001ecf9:	ed                   	in     eax,dx
c001ecfa:	eb 0d                	jmp    c001ed09 <Vm::faultHandler(regs*)+0x651>
c001ecfc:	66 ed                	in     ax,dx
c001ecfe:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001ed01:	0f b7 c0             	movzx  eax,ax
c001ed04:	66 31 d2             	xor    dx,dx
c001ed07:	09 d0                	or     eax,edx
c001ed09:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ed0c:	eb 1a                	jmp    c001ed28 <Vm::faultHandler(regs*)+0x670>
c001ed0e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ed11:	83 c4 10             	add    esp,0x10
c001ed14:	eb 15                	jmp    c001ed2b <Vm::faultHandler(regs*)+0x673>
c001ed16:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ed19:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ed1c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed21:	74 03                	je     c001ed26 <Vm::faultHandler(regs*)+0x66e>
c001ed23:	ef                   	out    dx,eax
c001ed24:	eb 02                	jmp    c001ed28 <Vm::faultHandler(regs*)+0x670>
c001ed26:	66 ef                	out    dx,ax
c001ed28:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ed2b:	b0 01                	mov    al,0x1
c001ed2d:	eb 56                	jmp    c001ed85 <Vm::faultHandler(regs*)+0x6cd>
c001ed2f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed33:	50                   	push   eax
c001ed34:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed38:	50                   	push   eax
c001ed39:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed3d:	50                   	push   eax
c001ed3e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed42:	50                   	push   eax
c001ed43:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed47:	50                   	push   eax
c001ed48:	52                   	push   edx
c001ed49:	52                   	push   edx
c001ed4a:	68 97 b9 02 c0       	push   0xc002b997
c001ed4f:	e8 e1 37 ff ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c001ed54:	83 c4 20             	add    esp,0x20
c001ed57:	83 ec 0c             	sub    esp,0xc
c001ed5a:	6a 60                	push   0x60
c001ed5c:	e8 52 f5 ff ff       	call   c001e2b3 <Vm::inbv(unsigned short)>
c001ed61:	83 c4 10             	add    esp,0x10
c001ed64:	3c 1c                	cmp    al,0x1c
c001ed66:	74 04                	je     c001ed6c <Vm::faultHandler(regs*)+0x6b4>
c001ed68:	3c 5a                	cmp    al,0x5a
c001ed6a:	75 eb                	jne    c001ed57 <Vm::faultHandler(regs*)+0x69f>
c001ed6c:	3c 5a                	cmp    al,0x5a
c001ed6e:	74 04                	je     c001ed74 <Vm::faultHandler(regs*)+0x6bc>
c001ed70:	3c 1c                	cmp    al,0x1c
c001ed72:	75 0f                	jne    c001ed83 <Vm::faultHandler(regs*)+0x6cb>
c001ed74:	83 ec 0c             	sub    esp,0xc
c001ed77:	6a 60                	push   0x60
c001ed79:	e8 35 f5 ff ff       	call   c001e2b3 <Vm::inbv(unsigned short)>
c001ed7e:	83 c4 10             	add    esp,0x10
c001ed81:	eb e9                	jmp    c001ed6c <Vm::faultHandler(regs*)+0x6b4>
c001ed83:	31 c0                	xor    eax,eax
c001ed85:	83 c4 1c             	add    esp,0x1c
c001ed88:	5b                   	pop    ebx
c001ed89:	5e                   	pop    esi
c001ed8a:	5f                   	pop    edi
c001ed8b:	5d                   	pop    ebp
c001ed8c:	c3                   	ret    

c001ed8d <Vm::fpuInternalTo32(unsigned long long)>:
c001ed8d:	57                   	push   edi
c001ed8e:	56                   	push   esi
c001ed8f:	53                   	push   ebx
c001ed90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ed94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed98:	89 d6                	mov    esi,edx
c001ed9a:	89 d7                	mov    edi,edx
c001ed9c:	89 c1                	mov    ecx,eax
c001ed9e:	c1 ef 14             	shr    edi,0x14
c001eda1:	89 d3                	mov    ebx,edx
c001eda3:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001eda9:	31 d2                	xor    edx,edx
c001edab:	89 f8                	mov    eax,edi
c001edad:	81 e6 00 00 00 80    	and    esi,0x80000000
c001edb3:	bf ff 00 00 00       	mov    edi,0xff
c001edb8:	05 80 fc ff ff       	add    eax,0xfffffc80
c001edbd:	83 d2 ff             	adc    edx,0xffffffff
c001edc0:	39 c7                	cmp    edi,eax
c001edc2:	bf 00 00 00 00       	mov    edi,0x0
c001edc7:	19 d7                	sbb    edi,edx
c001edc9:	72 15                	jb     c001ede0 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001edcb:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001edcf:	c1 e0 17             	shl    eax,0x17
c001edd2:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001edd8:	09 f1                	or     ecx,esi
c001edda:	09 c1                	or     ecx,eax
c001eddc:	89 cf                	mov    edi,ecx
c001edde:	eb 02                	jmp    c001ede2 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ede0:	31 ff                	xor    edi,edi
c001ede2:	89 f8                	mov    eax,edi
c001ede4:	5b                   	pop    ebx
c001ede5:	5e                   	pop    esi
c001ede6:	5f                   	pop    edi
c001ede7:	c3                   	ret    

c001ede8 <Vm::fpuInternalTo64(unsigned long long)>:
c001ede8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001edf0:	c3                   	ret    

c001edf1 <Vm::fpu32ToInternal(unsigned int)>:
c001edf1:	57                   	push   edi
c001edf2:	31 ff                	xor    edi,edi
c001edf4:	56                   	push   esi
c001edf5:	53                   	push   ebx
c001edf6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edfa:	89 cb                	mov    ebx,ecx
c001edfc:	89 ce                	mov    esi,ecx
c001edfe:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ee04:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ee0a:	c1 e9 17             	shr    ecx,0x17
c001ee0d:	89 f0                	mov    eax,esi
c001ee0f:	0f b6 d1             	movzx  edx,cl
c001ee12:	81 c2 80 03 00 00    	add    edx,0x380
c001ee18:	89 d1                	mov    ecx,edx
c001ee1a:	89 fa                	mov    edx,edi
c001ee1c:	c1 e1 14             	shl    ecx,0x14
c001ee1f:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ee23:	c1 e0 1d             	shl    eax,0x1d
c001ee26:	89 d7                	mov    edi,edx
c001ee28:	89 c6                	mov    esi,eax
c001ee2a:	89 ca                	mov    edx,ecx
c001ee2c:	89 f0                	mov    eax,esi
c001ee2e:	09 fa                	or     edx,edi
c001ee30:	09 da                	or     edx,ebx
c001ee32:	5b                   	pop    ebx
c001ee33:	5e                   	pop    esi
c001ee34:	5f                   	pop    edi
c001ee35:	c3                   	ret    

c001ee36 <Vm::fpu64ToInternal(unsigned long long)>:
c001ee36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee3e:	c3                   	ret    

c001ee3f <Vm::fpuFloatToLong(unsigned long long)>:
c001ee3f:	57                   	push   edi
c001ee40:	31 c0                	xor    eax,eax
c001ee42:	56                   	push   esi
c001ee43:	31 d2                	xor    edx,edx
c001ee45:	53                   	push   ebx
c001ee46:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ee4a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ee4e:	89 d9                	mov    ecx,ebx
c001ee50:	c1 e9 14             	shr    ecx,0x14
c001ee53:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ee59:	89 cf                	mov    edi,ecx
c001ee5b:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ee61:	78 33                	js     c001ee96 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ee63:	89 d9                	mov    ecx,ebx
c001ee65:	89 f0                	mov    eax,esi
c001ee67:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ee6d:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ee73:	89 ca                	mov    edx,ecx
c001ee75:	b9 34 00 00 00       	mov    ecx,0x34
c001ee7a:	29 f9                	sub    ecx,edi
c001ee7c:	0f ad d0             	shrd   eax,edx,cl
c001ee7f:	d3 fa                	sar    edx,cl
c001ee81:	f6 c1 20             	test   cl,0x20
c001ee84:	74 05                	je     c001ee8b <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ee86:	89 d0                	mov    eax,edx
c001ee88:	c1 fa 1f             	sar    edx,0x1f
c001ee8b:	85 db                	test   ebx,ebx
c001ee8d:	79 07                	jns    c001ee96 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ee8f:	f7 d8                	neg    eax
c001ee91:	83 d2 00             	adc    edx,0x0
c001ee94:	f7 da                	neg    edx
c001ee96:	5b                   	pop    ebx
c001ee97:	5e                   	pop    esi
c001ee98:	5f                   	pop    edi
c001ee99:	c3                   	ret    

c001ee9a <Vm::fpuULongToFloat(unsigned long long)>:
c001ee9a:	57                   	push   edi
c001ee9b:	31 c9                	xor    ecx,ecx
c001ee9d:	56                   	push   esi
c001ee9e:	53                   	push   ebx
c001ee9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eea3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001eea7:	0f ba e7 14          	bt     edi,0x14
c001eeab:	72 07                	jb     c001eeb4 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001eead:	01 f6                	add    esi,esi
c001eeaf:	11 ff                	adc    edi,edi
c001eeb1:	41                   	inc    ecx
c001eeb2:	eb f3                	jmp    c001eea7 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001eeb4:	89 fa                	mov    edx,edi
c001eeb6:	89 f0                	mov    eax,esi
c001eeb8:	bb 33 04 00 00       	mov    ebx,0x433
c001eebd:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001eec3:	29 cb                	sub    ebx,ecx
c001eec5:	89 d9                	mov    ecx,ebx
c001eec7:	5b                   	pop    ebx
c001eec8:	c1 e1 14             	shl    ecx,0x14
c001eecb:	5e                   	pop    esi
c001eecc:	09 ca                	or     edx,ecx
c001eece:	5f                   	pop    edi
c001eecf:	c3                   	ret    

c001eed0 <Vm::fpuLongToFloat(long long)>:
c001eed0:	56                   	push   esi
c001eed1:	31 c0                	xor    eax,eax
c001eed3:	53                   	push   ebx
c001eed4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eed8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eedc:	39 c8                	cmp    eax,ecx
c001eede:	19 d8                	sbb    eax,ebx
c001eee0:	7d 04                	jge    c001eee6 <Vm::fpuLongToFloat(long long)+0x16>
c001eee2:	31 f6                	xor    esi,esi
c001eee4:	eb 0c                	jmp    c001eef2 <Vm::fpuLongToFloat(long long)+0x22>
c001eee6:	f7 d9                	neg    ecx
c001eee8:	be 01 00 00 00       	mov    esi,0x1
c001eeed:	83 d3 00             	adc    ebx,0x0
c001eef0:	f7 db                	neg    ebx
c001eef2:	31 c0                	xor    eax,eax
c001eef4:	0f ba e3 14          	bt     ebx,0x14
c001eef8:	72 07                	jb     c001ef01 <Vm::fpuLongToFloat(long long)+0x31>
c001eefa:	01 c9                	add    ecx,ecx
c001eefc:	11 db                	adc    ebx,ebx
c001eefe:	40                   	inc    eax
c001eeff:	eb f3                	jmp    c001eef4 <Vm::fpuLongToFloat(long long)+0x24>
c001ef01:	ba 33 04 00 00       	mov    edx,0x433
c001ef06:	29 c2                	sub    edx,eax
c001ef08:	89 c8                	mov    eax,ecx
c001ef0a:	c1 e2 14             	shl    edx,0x14
c001ef0d:	89 d9                	mov    ecx,ebx
c001ef0f:	89 f3                	mov    ebx,esi
c001ef11:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ef17:	09 ca                	or     edx,ecx
c001ef19:	84 db                	test   bl,bl
c001ef1b:	74 06                	je     c001ef23 <Vm::fpuLongToFloat(long long)+0x53>
c001ef1d:	81 ca 00 00 00 80    	or     edx,0x80000000
c001ef23:	5b                   	pop    ebx
c001ef24:	5e                   	pop    esi
c001ef25:	c3                   	ret    

c001ef26 <Vm::fpuGet0()>:
c001ef26:	31 c0                	xor    eax,eax
c001ef28:	31 d2                	xor    edx,edx
c001ef2a:	c3                   	ret    

c001ef2b <Vm::fpuGet1()>:
c001ef2b:	b8 01 00 00 00       	mov    eax,0x1
c001ef30:	31 d2                	xor    edx,edx
c001ef32:	c3                   	ret    

c001ef33 <Vm::fpuGetPi()>:
c001ef33:	b8 03 00 00 00       	mov    eax,0x3
c001ef38:	31 d2                	xor    edx,edx
c001ef3a:	c3                   	ret    

c001ef3b <Vm::fpuGetLog2E()>:
c001ef3b:	83 ec 18             	sub    esp,0x18
c001ef3e:	68 f4 b9 02 c0       	push   0xc002b9f4
c001ef43:	e8 4d ad ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001ef48:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef4d:	31 d2                	xor    edx,edx
c001ef4f:	83 c4 1c             	add    esp,0x1c
c001ef52:	c3                   	ret    

c001ef53 <Vm::fpuGetLogE2()>:
c001ef53:	83 ec 18             	sub    esp,0x18
c001ef56:	68 00 ba 02 c0       	push   0xc002ba00
c001ef5b:	e8 35 ad ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001ef60:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef65:	31 d2                	xor    edx,edx
c001ef67:	83 c4 1c             	add    esp,0x1c
c001ef6a:	c3                   	ret    

c001ef6b <Vm::fpuGetLog210()>:
c001ef6b:	83 ec 18             	sub    esp,0x18
c001ef6e:	68 0c ba 02 c0       	push   0xc002ba0c
c001ef73:	e8 1d ad ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001ef78:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef7d:	31 d2                	xor    edx,edx
c001ef7f:	83 c4 1c             	add    esp,0x1c
c001ef82:	c3                   	ret    

c001ef83 <Vm::fpuGetLog102()>:
c001ef83:	83 ec 18             	sub    esp,0x18
c001ef86:	68 19 ba 02 c0       	push   0xc002ba19
c001ef8b:	e8 05 ad ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001ef90:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001ef95:	31 d2                	xor    edx,edx
c001ef97:	83 c4 1c             	add    esp,0x1c
c001ef9a:	c3                   	ret    

c001ef9b <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001ef9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ef9f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001efa3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001efa7:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001efab:	0f 92 c0             	setb   al
c001efae:	c3                   	ret    

c001efaf <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001efaf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001efb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb7:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001efbb:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001efbf:	09 c2                	or     edx,eax
c001efc1:	0f 94 c0             	sete   al
c001efc4:	c3                   	ret    

c001efc5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001efc5:	57                   	push   edi
c001efc6:	56                   	push   esi
c001efc7:	53                   	push   ebx
c001efc8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001efcc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001efd0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001efd4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001efd8:	57                   	push   edi
c001efd9:	56                   	push   esi
c001efda:	53                   	push   ebx
c001efdb:	51                   	push   ecx
c001efdc:	e8 ce ff ff ff       	call   c001efaf <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001efe1:	83 c4 10             	add    esp,0x10
c001efe4:	88 c2                	mov    dl,al
c001efe6:	31 c0                	xor    eax,eax
c001efe8:	84 d2                	test   dl,dl
c001efea:	75 0c                	jne    c001eff8 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001efec:	57                   	push   edi
c001efed:	56                   	push   esi
c001efee:	53                   	push   ebx
c001efef:	51                   	push   ecx
c001eff0:	e8 a6 ff ff ff       	call   c001ef9b <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001eff5:	83 c4 10             	add    esp,0x10
c001eff8:	83 e0 01             	and    eax,0x1
c001effb:	5b                   	pop    ebx
c001effc:	88 c1                	mov    cl,al
c001effe:	83 e2 01             	and    edx,0x1
c001f001:	a0 a1 0b 03 c0       	mov    al,ds:0xc0030ba1
c001f006:	c1 e2 06             	shl    edx,0x6
c001f009:	83 e0 ba             	and    eax,0xffffffba
c001f00c:	5e                   	pop    esi
c001f00d:	09 c8                	or     eax,ecx
c001f00f:	5f                   	pop    edi
c001f010:	09 d0                	or     eax,edx
c001f012:	a2 a1 0b 03 c0       	mov    ds:0xc0030ba1,al
c001f017:	c3                   	ret    

c001f018 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f018:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f01c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f020:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f024:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f028:	c3                   	ret    

c001f029 <Vm::fpuAbs(unsigned long long)>:
c001f029:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f02d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f031:	c3                   	ret    

c001f032 <Vm::fpuChs(unsigned long long)>:
c001f032:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f036:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f03a:	f7 d8                	neg    eax
c001f03c:	83 d2 00             	adc    edx,0x0
c001f03f:	f7 da                	neg    edx
c001f041:	c3                   	ret    

c001f042 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f042:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f046:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f04b:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f04f:	eb c7                	jmp    c001f018 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f051 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f051:	53                   	push   ebx
c001f052:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f056:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f05a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f05e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f062:	0f af ca             	imul   ecx,edx
c001f065:	0f af d8             	imul   ebx,eax
c001f068:	f7 e2                	mul    edx
c001f06a:	01 d9                	add    ecx,ebx
c001f06c:	5b                   	pop    ebx
c001f06d:	01 ca                	add    edx,ecx
c001f06f:	c3                   	ret    

c001f070 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f070:	83 ec 0c             	sub    esp,0xc
c001f073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f07b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f07f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f083:	e8 dc 74 00 00       	call   c0026564 <__udivdi3>
c001f088:	83 c4 1c             	add    esp,0x1c
c001f08b:	c3                   	ret    

c001f08c <Vm::fpuSquare(unsigned long long)>:
c001f08c:	50                   	push   eax
c001f08d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f091:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f095:	52                   	push   edx
c001f096:	50                   	push   eax
c001f097:	52                   	push   edx
c001f098:	50                   	push   eax
c001f099:	e8 b3 ff ff ff       	call   c001f051 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f09e:	83 c4 14             	add    esp,0x14
c001f0a1:	c3                   	ret    

c001f0a2 <Vm::fpuGetReg(int)>:
c001f0a2:	83 ec 0c             	sub    esp,0xc
c001f0a5:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f0aa:	76 10                	jbe    c001f0bc <Vm::fpuGetReg(int)+0x1a>
c001f0ac:	83 ec 0c             	sub    esp,0xc
c001f0af:	68 26 ba 02 c0       	push   0xc002ba26
c001f0b4:	e8 dc ab ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001f0b9:	83 c4 10             	add    esp,0x10
c001f0bc:	a0 a1 0b 03 c0       	mov    al,ds:0xc0030ba1
c001f0c1:	b9 08 00 00 00       	mov    ecx,0x8
c001f0c6:	c0 e8 03             	shr    al,0x3
c001f0c9:	83 e0 07             	and    eax,0x7
c001f0cc:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f0d0:	99                   	cdq    
c001f0d1:	f7 f9                	idiv   ecx
c001f0d3:	8b 04 d5 a4 0b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf45c]
c001f0da:	8b 14 d5 a8 0b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf458]
c001f0e1:	83 c4 0c             	add    esp,0xc
c001f0e4:	c3                   	ret    

c001f0e5 <Vm::fpuSetReg(int, unsigned long long)>:
c001f0e5:	57                   	push   edi
c001f0e6:	56                   	push   esi
c001f0e7:	52                   	push   edx
c001f0e8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f0ec:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f0f0:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f0f5:	76 10                	jbe    c001f107 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f0f7:	83 ec 0c             	sub    esp,0xc
c001f0fa:	68 39 ba 02 c0       	push   0xc002ba39
c001f0ff:	e8 91 ab ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c001f104:	83 c4 10             	add    esp,0x10
c001f107:	a0 a1 0b 03 c0       	mov    al,ds:0xc0030ba1
c001f10c:	b9 08 00 00 00       	mov    ecx,0x8
c001f111:	c0 e8 03             	shr    al,0x3
c001f114:	83 e0 07             	and    eax,0x7
c001f117:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f11b:	99                   	cdq    
c001f11c:	f7 f9                	idiv   ecx
c001f11e:	89 34 d5 a4 0b 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf45c],esi
c001f125:	89 3c d5 a8 0b 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf458],edi
c001f12c:	58                   	pop    eax
c001f12d:	5e                   	pop    esi
c001f12e:	5f                   	pop    edi
c001f12f:	c3                   	ret    

c001f130 <Vm::fpuPush(unsigned long long)>:
c001f130:	a0 a1 0b 03 c0       	mov    al,ds:0xc0030ba1
c001f135:	c0 e8 03             	shr    al,0x3
c001f138:	83 e0 07             	and    eax,0x7
c001f13b:	83 c0 07             	add    eax,0x7
c001f13e:	88 c2                	mov    dl,al
c001f140:	83 e0 07             	and    eax,0x7
c001f143:	83 e2 07             	and    edx,0x7
c001f146:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f14d:	8a 15 a1 0b 03 c0    	mov    dl,BYTE PTR ds:0xc0030ba1
c001f153:	83 e2 c7             	and    edx,0xffffffc7
c001f156:	09 ca                	or     edx,ecx
c001f158:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f15c:	88 15 a1 0b 03 c0    	mov    BYTE PTR ds:0xc0030ba1,dl
c001f162:	89 0c c5 a8 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf458],ecx
c001f169:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f16d:	89 14 c5 a4 0b 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf45c],edx
c001f174:	a1 e4 0b 03 c0       	mov    eax,ds:0xc0030be4
c001f179:	83 f8 08             	cmp    eax,0x8
c001f17c:	75 08                	jne    c001f186 <Vm::fpuPush(unsigned long long)+0x56>
c001f17e:	80 0d a0 0b 03 c0 40 	or     BYTE PTR ds:0xc0030ba0,0x40
c001f185:	c3                   	ret    
c001f186:	40                   	inc    eax
c001f187:	a3 e4 0b 03 c0       	mov    ds:0xc0030be4,eax
c001f18c:	c3                   	ret    

c001f18d <Vm::fpuPop()>:
c001f18d:	8a 0d a1 0b 03 c0    	mov    cl,BYTE PTR ds:0xc0030ba1
c001f193:	53                   	push   ebx
c001f194:	c0 e9 03             	shr    cl,0x3
c001f197:	8a 1d a1 0b 03 c0    	mov    bl,BYTE PTR ds:0xc0030ba1
c001f19d:	83 e1 07             	and    ecx,0x7
c001f1a0:	83 e3 c7             	and    ebx,0xffffffc7
c001f1a3:	8b 04 cd a4 0b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf45c]
c001f1aa:	8b 14 cd a8 0b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf458]
c001f1b1:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f1b8:	83 e1 38             	and    ecx,0x38
c001f1bb:	09 d9                	or     ecx,ebx
c001f1bd:	88 0d a1 0b 03 c0    	mov    BYTE PTR ds:0xc0030ba1,cl
c001f1c3:	8b 0d e4 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030be4
c001f1c9:	85 c9                	test   ecx,ecx
c001f1cb:	74 09                	je     c001f1d6 <Vm::fpuPop()+0x49>
c001f1cd:	49                   	dec    ecx
c001f1ce:	89 0d e4 0b 03 c0    	mov    DWORD PTR ds:0xc0030be4,ecx
c001f1d4:	eb 07                	jmp    c001f1dd <Vm::fpuPop()+0x50>
c001f1d6:	80 0d a0 0b 03 c0 40 	or     BYTE PTR ds:0xc0030ba0,0x40
c001f1dd:	5b                   	pop    ebx
c001f1de:	c3                   	ret    

c001f1df <Vm::x87Handler(regs*)>:
c001f1df:	55                   	push   ebp
c001f1e0:	57                   	push   edi
c001f1e1:	56                   	push   esi
c001f1e2:	53                   	push   ebx
c001f1e3:	83 ec 1c             	sub    esp,0x1c
c001f1e6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f1ea:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f1ef:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f1f2:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f1fa:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f1fe:	50                   	push   eax
c001f1ff:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f203:	50                   	push   eax
c001f204:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f208:	50                   	push   eax
c001f209:	53                   	push   ebx
c001f20a:	e8 9f a1 ff ff       	call   c00193ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f20f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f212:	83 c4 10             	add    esp,0x10
c001f215:	89 c6                	mov    esi,eax
c001f217:	80 fa d9             	cmp    dl,0xd9
c001f21a:	0f 85 52 01 00 00    	jne    c001f372 <Vm::x87Handler(regs*)+0x193>
c001f220:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f224:	8d 50 20             	lea    edx,[eax+0x20]
c001f227:	80 fa 0e             	cmp    dl,0xe
c001f22a:	0f 87 86 00 00 00    	ja     c001f2b6 <Vm::x87Handler(regs*)+0xd7>
c001f230:	0f b6 d2             	movzx  edx,dl
c001f233:	ff 24 95 4c ba 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd45b4]
c001f23a:	e8 e7 fc ff ff       	call   c001ef26 <Vm::fpuGet0()>
c001f23f:	eb 05                	jmp    c001f246 <Vm::x87Handler(regs*)+0x67>
c001f241:	e8 e5 fc ff ff       	call   c001ef2b <Vm::fpuGet1()>
c001f246:	57                   	push   edi
c001f247:	57                   	push   edi
c001f248:	52                   	push   edx
c001f249:	50                   	push   eax
c001f24a:	e8 e1 fe ff ff       	call   c001f130 <Vm::fpuPush(unsigned long long)>
c001f24f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f253:	83 c4 10             	add    esp,0x10
c001f256:	b0 01                	mov    al,0x1
c001f258:	e9 e3 09 00 00       	jmp    c001fc40 <Vm::x87Handler(regs*)+0xa61>
c001f25d:	83 ec 0c             	sub    esp,0xc
c001f260:	6a 00                	push   0x0
c001f262:	e8 3b fe ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f267:	59                   	pop    ecx
c001f268:	5e                   	pop    esi
c001f269:	52                   	push   edx
c001f26a:	50                   	push   eax
c001f26b:	e8 c2 fd ff ff       	call   c001f032 <Vm::fpuChs(unsigned long long)>
c001f270:	eb 13                	jmp    c001f285 <Vm::x87Handler(regs*)+0xa6>
c001f272:	83 ec 0c             	sub    esp,0xc
c001f275:	6a 00                	push   0x0
c001f277:	e8 26 fe ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f27c:	5f                   	pop    edi
c001f27d:	5d                   	pop    ebp
c001f27e:	52                   	push   edx
c001f27f:	50                   	push   eax
c001f280:	e8 a4 fd ff ff       	call   c001f029 <Vm::fpuAbs(unsigned long long)>
c001f285:	83 c4 0c             	add    esp,0xc
c001f288:	52                   	push   edx
c001f289:	50                   	push   eax
c001f28a:	6a 00                	push   0x0
c001f28c:	e8 54 fe ff ff       	call   c001f0e5 <Vm::fpuSetReg(int, unsigned long long)>
c001f291:	eb bc                	jmp    c001f24f <Vm::x87Handler(regs*)+0x70>
c001f293:	e8 d3 fc ff ff       	call   c001ef6b <Vm::fpuGetLog210()>
c001f298:	eb ac                	jmp    c001f246 <Vm::x87Handler(regs*)+0x67>
c001f29a:	e8 9c fc ff ff       	call   c001ef3b <Vm::fpuGetLog2E()>
c001f29f:	eb a5                	jmp    c001f246 <Vm::x87Handler(regs*)+0x67>
c001f2a1:	e8 8d fc ff ff       	call   c001ef33 <Vm::fpuGetPi()>
c001f2a6:	eb 9e                	jmp    c001f246 <Vm::x87Handler(regs*)+0x67>
c001f2a8:	e8 d6 fc ff ff       	call   c001ef83 <Vm::fpuGetLog102()>
c001f2ad:	eb 97                	jmp    c001f246 <Vm::x87Handler(regs*)+0x67>
c001f2af:	e8 9f fc ff ff       	call   c001ef53 <Vm::fpuGetLogE2()>
c001f2b4:	eb 90                	jmp    c001f246 <Vm::x87Handler(regs*)+0x67>
c001f2b6:	8d 50 40             	lea    edx,[eax+0x40]
c001f2b9:	80 fa 07             	cmp    dl,0x7
c001f2bc:	77 15                	ja     c001f2d3 <Vm::x87Handler(regs*)+0xf4>
c001f2be:	83 ec 0c             	sub    esp,0xc
c001f2c1:	2d c0 00 00 00       	sub    eax,0xc0
c001f2c6:	50                   	push   eax
c001f2c7:	e8 d6 fd ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f2cc:	59                   	pop    ecx
c001f2cd:	5e                   	pop    esi
c001f2ce:	e9 75 ff ff ff       	jmp    c001f248 <Vm::x87Handler(regs*)+0x69>
c001f2d3:	8d 50 38             	lea    edx,[eax+0x38]
c001f2d6:	80 fa 07             	cmp    dl,0x7
c001f2d9:	77 3c                	ja     c001f317 <Vm::x87Handler(regs*)+0x138>
c001f2db:	83 ec 0c             	sub    esp,0xc
c001f2de:	2d c8 00 00 00       	sub    eax,0xc8
c001f2e3:	50                   	push   eax
c001f2e4:	e8 b9 fd ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f2e9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2f0:	89 c6                	mov    esi,eax
c001f2f2:	89 d7                	mov    edi,edx
c001f2f4:	e8 a9 fd ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f2f9:	83 c4 0c             	add    esp,0xc
c001f2fc:	52                   	push   edx
c001f2fd:	50                   	push   eax
c001f2fe:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f302:	2d c8 00 00 00       	sub    eax,0xc8
c001f307:	50                   	push   eax
c001f308:	e8 d8 fd ff ff       	call   c001f0e5 <Vm::fpuSetReg(int, unsigned long long)>
c001f30d:	83 c4 0c             	add    esp,0xc
c001f310:	57                   	push   edi
c001f311:	56                   	push   esi
c001f312:	e9 73 ff ff ff       	jmp    c001f28a <Vm::x87Handler(regs*)+0xab>
c001f317:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f31b:	84 d2                	test   dl,dl
c001f31d:	75 0f                	jne    c001f32e <Vm::x87Handler(regs*)+0x14f>
c001f31f:	83 ec 0c             	sub    esp,0xc
c001f322:	ff 36                	push   DWORD PTR [esi]
c001f324:	e8 c8 fa ff ff       	call   c001edf1 <Vm::fpu32ToInternal(unsigned int)>
c001f329:	e9 bf 00 00 00       	jmp    c001f3ed <Vm::x87Handler(regs*)+0x20e>
c001f32e:	80 fa 03             	cmp    dl,0x3
c001f331:	75 13                	jne    c001f346 <Vm::x87Handler(regs*)+0x167>
c001f333:	e8 55 fe ff ff       	call   c001f18d <Vm::fpuPop()>
c001f338:	55                   	push   ebp
c001f339:	55                   	push   ebp
c001f33a:	52                   	push   edx
c001f33b:	50                   	push   eax
c001f33c:	e8 4c fa ff ff       	call   c001ed8d <Vm::fpuInternalTo32(unsigned long long)>
c001f341:	e9 88 00 00 00       	jmp    c001f3ce <Vm::x87Handler(regs*)+0x1ef>
c001f346:	80 fa 05             	cmp    dl,0x5
c001f349:	75 0e                	jne    c001f359 <Vm::x87Handler(regs*)+0x17a>
c001f34b:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f34e:	66 a3 a2 0b 03 c0    	mov    ds:0xc0030ba2,ax
c001f354:	e9 df 00 00 00       	jmp    c001f438 <Vm::x87Handler(regs*)+0x259>
c001f359:	31 c0                	xor    eax,eax
c001f35b:	80 fa 07             	cmp    dl,0x7
c001f35e:	0f 85 dc 08 00 00    	jne    c001fc40 <Vm::x87Handler(regs*)+0xa61>
c001f364:	66 a1 a2 0b 03 c0    	mov    ax,ds:0xc0030ba2
c001f36a:	66 89 06             	mov    WORD PTR [esi],ax
c001f36d:	e9 c6 00 00 00       	jmp    c001f438 <Vm::x87Handler(regs*)+0x259>
c001f372:	80 fa d8             	cmp    dl,0xd8
c001f375:	0f 84 c9 00 00 00    	je     c001f444 <Vm::x87Handler(regs*)+0x265>
c001f37b:	80 fa dc             	cmp    dl,0xdc
c001f37e:	0f 84 0d 02 00 00    	je     c001f591 <Vm::x87Handler(regs*)+0x3b2>
c001f384:	80 fa de             	cmp    dl,0xde
c001f387:	0f 84 cd 02 00 00    	je     c001f65a <Vm::x87Handler(regs*)+0x47b>
c001f38d:	80 fa dd             	cmp    dl,0xdd
c001f390:	0f 84 5f 04 00 00    	je     c001f7f5 <Vm::x87Handler(regs*)+0x616>
c001f396:	80 fa da             	cmp    dl,0xda
c001f399:	0f 84 24 05 00 00    	je     c001f8c3 <Vm::x87Handler(regs*)+0x6e4>
c001f39f:	80 fa df             	cmp    dl,0xdf
c001f3a2:	0f 84 68 05 00 00    	je     c001f910 <Vm::x87Handler(regs*)+0x731>
c001f3a8:	31 c0                	xor    eax,eax
c001f3aa:	80 fa db             	cmp    dl,0xdb
c001f3ad:	0f 85 8d 08 00 00    	jne    c001fc40 <Vm::x87Handler(regs*)+0xa61>
c001f3b3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f3b7:	80 fa 03             	cmp    dl,0x3
c001f3ba:	0f 85 70 06 00 00    	jne    c001fa30 <Vm::x87Handler(regs*)+0x851>
c001f3c0:	e8 c8 fd ff ff       	call   c001f18d <Vm::fpuPop()>
c001f3c5:	55                   	push   ebp
c001f3c6:	55                   	push   ebp
c001f3c7:	52                   	push   edx
c001f3c8:	50                   	push   eax
c001f3c9:	e8 71 fa ff ff       	call   c001ee3f <Vm::fpuFloatToLong(unsigned long long)>
c001f3ce:	83 c4 10             	add    esp,0x10
c001f3d1:	89 06                	mov    DWORD PTR [esi],eax
c001f3d3:	eb 63                	jmp    c001f438 <Vm::x87Handler(regs*)+0x259>
c001f3d5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f3d9:	84 d2                	test   dl,dl
c001f3db:	0f 85 e6 05 00 00    	jne    c001f9c7 <Vm::x87Handler(regs*)+0x7e8>
c001f3e1:	57                   	push   edi
c001f3e2:	57                   	push   edi
c001f3e3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f3e6:	ff 36                	push   DWORD PTR [esi]
c001f3e8:	e8 49 fa ff ff       	call   c001ee36 <Vm::fpu64ToInternal(unsigned long long)>
c001f3ed:	5e                   	pop    esi
c001f3ee:	5f                   	pop    edi
c001f3ef:	52                   	push   edx
c001f3f0:	50                   	push   eax
c001f3f1:	e8 3a fd ff ff       	call   c001f130 <Vm::fpuPush(unsigned long long)>
c001f3f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f3fa:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f3fd:	e9 51 fe ff ff       	jmp    c001f253 <Vm::x87Handler(regs*)+0x74>
c001f402:	80 fa 03             	cmp    dl,0x3
c001f405:	0f 85 d7 06 00 00    	jne    c001fae2 <Vm::x87Handler(regs*)+0x903>
c001f40b:	57                   	push   edi
c001f40c:	57                   	push   edi
c001f40d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f410:	ff 36                	push   DWORD PTR [esi]
c001f412:	e8 1f fa ff ff       	call   c001ee36 <Vm::fpu64ToInternal(unsigned long long)>
c001f417:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f41e:	89 c6                	mov    esi,eax
c001f420:	89 d7                	mov    edi,edx
c001f422:	e8 7b fc ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f427:	57                   	push   edi
c001f428:	56                   	push   esi
c001f429:	52                   	push   edx
c001f42a:	50                   	push   eax
c001f42b:	e8 95 fb ff ff       	call   c001efc5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f430:	83 c4 20             	add    esp,0x20
c001f433:	e8 55 fd ff ff       	call   c001f18d <Vm::fpuPop()>
c001f438:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f43c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f43f:	e9 12 fe ff ff       	jmp    c001f256 <Vm::x87Handler(regs*)+0x77>
c001f444:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f448:	8d 50 40             	lea    edx,[eax+0x40]
c001f44b:	80 fa 07             	cmp    dl,0x7
c001f44e:	77 29                	ja     c001f479 <Vm::x87Handler(regs*)+0x29a>
c001f450:	83 ec 0c             	sub    esp,0xc
c001f453:	2d c0 00 00 00       	sub    eax,0xc0
c001f458:	50                   	push   eax
c001f459:	e8 44 fc ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f45e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f465:	89 c6                	mov    esi,eax
c001f467:	89 d7                	mov    edi,edx
c001f469:	e8 34 fc ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f46e:	57                   	push   edi
c001f46f:	56                   	push   esi
c001f470:	52                   	push   edx
c001f471:	50                   	push   eax
c001f472:	e8 a1 fb ff ff       	call   c001f018 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f477:	eb 2f                	jmp    c001f4a8 <Vm::x87Handler(regs*)+0x2c9>
c001f479:	8d 50 38             	lea    edx,[eax+0x38]
c001f47c:	80 fa 07             	cmp    dl,0x7
c001f47f:	77 2f                	ja     c001f4b0 <Vm::x87Handler(regs*)+0x2d1>
c001f481:	83 ec 0c             	sub    esp,0xc
c001f484:	2d c8 00 00 00       	sub    eax,0xc8
c001f489:	50                   	push   eax
c001f48a:	e8 13 fc ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f48f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f496:	89 c6                	mov    esi,eax
c001f498:	89 d7                	mov    edi,edx
c001f49a:	e8 03 fc ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f49f:	57                   	push   edi
c001f4a0:	56                   	push   esi
c001f4a1:	52                   	push   edx
c001f4a2:	50                   	push   eax
c001f4a3:	e8 a9 fb ff ff       	call   c001f051 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f4a8:	83 c4 1c             	add    esp,0x1c
c001f4ab:	e9 d8 fd ff ff       	jmp    c001f288 <Vm::x87Handler(regs*)+0xa9>
c001f4b0:	8d 50 30             	lea    edx,[eax+0x30]
c001f4b3:	80 fa 07             	cmp    dl,0x7
c001f4b6:	77 0d                	ja     c001f4c5 <Vm::x87Handler(regs*)+0x2e6>
c001f4b8:	83 ec 0c             	sub    esp,0xc
c001f4bb:	2d d0 00 00 00       	sub    eax,0xd0
c001f4c0:	e9 99 03 00 00       	jmp    c001f85e <Vm::x87Handler(regs*)+0x67f>
c001f4c5:	8d 50 28             	lea    edx,[eax+0x28]
c001f4c8:	80 fa 07             	cmp    dl,0x7
c001f4cb:	77 0d                	ja     c001f4da <Vm::x87Handler(regs*)+0x2fb>
c001f4cd:	83 ec 0c             	sub    esp,0xc
c001f4d0:	2d d8 00 00 00       	sub    eax,0xd8
c001f4d5:	e9 c0 03 00 00       	jmp    c001f89a <Vm::x87Handler(regs*)+0x6bb>
c001f4da:	8d 50 20             	lea    edx,[eax+0x20]
c001f4dd:	80 fa 07             	cmp    dl,0x7
c001f4e0:	77 1b                	ja     c001f4fd <Vm::x87Handler(regs*)+0x31e>
c001f4e2:	83 ec 0c             	sub    esp,0xc
c001f4e5:	2d e0 00 00 00       	sub    eax,0xe0
c001f4ea:	50                   	push   eax
c001f4eb:	e8 b2 fb ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f4f0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f4f7:	89 c6                	mov    esi,eax
c001f4f9:	89 d7                	mov    edi,edx
c001f4fb:	eb 22                	jmp    c001f51f <Vm::x87Handler(regs*)+0x340>
c001f4fd:	8d 50 18             	lea    edx,[eax+0x18]
c001f500:	80 fa 07             	cmp    dl,0x7
c001f503:	77 2d                	ja     c001f532 <Vm::x87Handler(regs*)+0x353>
c001f505:	83 ec 0c             	sub    esp,0xc
c001f508:	6a 00                	push   0x0
c001f50a:	e8 93 fb ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f50f:	89 c6                	mov    esi,eax
c001f511:	89 d7                	mov    edi,edx
c001f513:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f517:	2d e8 00 00 00       	sub    eax,0xe8
c001f51c:	89 04 24             	mov    DWORD PTR [esp],eax
c001f51f:	e8 7e fb ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f524:	57                   	push   edi
c001f525:	56                   	push   esi
c001f526:	52                   	push   edx
c001f527:	50                   	push   eax
c001f528:	e8 15 fb ff ff       	call   c001f042 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f52d:	e9 76 ff ff ff       	jmp    c001f4a8 <Vm::x87Handler(regs*)+0x2c9>
c001f532:	8d 50 10             	lea    edx,[eax+0x10]
c001f535:	80 fa 07             	cmp    dl,0x7
c001f538:	77 1b                	ja     c001f555 <Vm::x87Handler(regs*)+0x376>
c001f53a:	83 ec 0c             	sub    esp,0xc
c001f53d:	2d f0 00 00 00       	sub    eax,0xf0
c001f542:	50                   	push   eax
c001f543:	e8 5a fb ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f548:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f54f:	89 c6                	mov    esi,eax
c001f551:	89 d7                	mov    edi,edx
c001f553:	eb 22                	jmp    c001f577 <Vm::x87Handler(regs*)+0x398>
c001f555:	3c f7                	cmp    al,0xf7
c001f557:	0f 86 d1 03 00 00    	jbe    c001f92e <Vm::x87Handler(regs*)+0x74f>
c001f55d:	83 ec 0c             	sub    esp,0xc
c001f560:	6a 00                	push   0x0
c001f562:	e8 3b fb ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f567:	89 c6                	mov    esi,eax
c001f569:	89 d7                	mov    edi,edx
c001f56b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f56f:	2d f8 00 00 00       	sub    eax,0xf8
c001f574:	89 04 24             	mov    DWORD PTR [esp],eax
c001f577:	e8 26 fb ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f57c:	57                   	push   edi
c001f57d:	56                   	push   esi
c001f57e:	52                   	push   edx
c001f57f:	50                   	push   eax
c001f580:	e8 eb fa ff ff       	call   c001f070 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f585:	83 c4 1c             	add    esp,0x1c
c001f588:	52                   	push   edx
c001f589:	50                   	push   eax
c001f58a:	6a 00                	push   0x0
c001f58c:	e9 51 02 00 00       	jmp    c001f7e2 <Vm::x87Handler(regs*)+0x603>
c001f591:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f595:	8d 50 40             	lea    edx,[eax+0x40]
c001f598:	80 fa 07             	cmp    dl,0x7
c001f59b:	77 37                	ja     c001f5d4 <Vm::x87Handler(regs*)+0x3f5>
c001f59d:	83 ec 0c             	sub    esp,0xc
c001f5a0:	2d c0 00 00 00       	sub    eax,0xc0
c001f5a5:	50                   	push   eax
c001f5a6:	e8 f7 fa ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f5ab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5b2:	89 c6                	mov    esi,eax
c001f5b4:	89 d7                	mov    edi,edx
c001f5b6:	e8 e7 fa ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f5bb:	57                   	push   edi
c001f5bc:	56                   	push   esi
c001f5bd:	52                   	push   edx
c001f5be:	50                   	push   eax
c001f5bf:	e8 54 fa ff ff       	call   c001f018 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f5c4:	83 c4 1c             	add    esp,0x1c
c001f5c7:	52                   	push   edx
c001f5c8:	50                   	push   eax
c001f5c9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5cd:	2d c0 00 00 00       	sub    eax,0xc0
c001f5d2:	eb 3d                	jmp    c001f611 <Vm::x87Handler(regs*)+0x432>
c001f5d4:	8d 50 38             	lea    edx,[eax+0x38]
c001f5d7:	80 fa 07             	cmp    dl,0x7
c001f5da:	77 3b                	ja     c001f617 <Vm::x87Handler(regs*)+0x438>
c001f5dc:	83 ec 0c             	sub    esp,0xc
c001f5df:	2d c8 00 00 00       	sub    eax,0xc8
c001f5e4:	50                   	push   eax
c001f5e5:	e8 b8 fa ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f5ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5f1:	89 c6                	mov    esi,eax
c001f5f3:	89 d7                	mov    edi,edx
c001f5f5:	e8 a8 fa ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f5fa:	57                   	push   edi
c001f5fb:	56                   	push   esi
c001f5fc:	52                   	push   edx
c001f5fd:	50                   	push   eax
c001f5fe:	e8 4e fa ff ff       	call   c001f051 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f603:	83 c4 1c             	add    esp,0x1c
c001f606:	52                   	push   edx
c001f607:	50                   	push   eax
c001f608:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f60c:	2d c8 00 00 00       	sub    eax,0xc8
c001f611:	50                   	push   eax
c001f612:	e9 75 fc ff ff       	jmp    c001f28c <Vm::x87Handler(regs*)+0xad>
c001f617:	83 c0 18             	add    eax,0x18
c001f61a:	3c 07                	cmp    al,0x7
c001f61c:	0f 87 3b 04 00 00    	ja     c001fa5d <Vm::x87Handler(regs*)+0x87e>
c001f622:	83 ec 0c             	sub    esp,0xc
c001f625:	6a 00                	push   0x0
c001f627:	e8 76 fa ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f62c:	89 c6                	mov    esi,eax
c001f62e:	89 d7                	mov    edi,edx
c001f630:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f634:	2d e8 00 00 00       	sub    eax,0xe8
c001f639:	89 04 24             	mov    DWORD PTR [esp],eax
c001f63c:	e8 61 fa ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f641:	57                   	push   edi
c001f642:	56                   	push   esi
c001f643:	52                   	push   edx
c001f644:	50                   	push   eax
c001f645:	e8 f8 f9 ff ff       	call   c001f042 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f64a:	83 c4 1c             	add    esp,0x1c
c001f64d:	52                   	push   edx
c001f64e:	50                   	push   eax
c001f64f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f653:	2d e8 00 00 00       	sub    eax,0xe8
c001f658:	eb b7                	jmp    c001f611 <Vm::x87Handler(regs*)+0x432>
c001f65a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f65e:	8d 50 40             	lea    edx,[eax+0x40]
c001f661:	80 fa 07             	cmp    dl,0x7
c001f664:	77 3a                	ja     c001f6a0 <Vm::x87Handler(regs*)+0x4c1>
c001f666:	83 ec 0c             	sub    esp,0xc
c001f669:	2d c0 00 00 00       	sub    eax,0xc0
c001f66e:	50                   	push   eax
c001f66f:	e8 2e fa ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f674:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f67b:	89 c6                	mov    esi,eax
c001f67d:	89 d7                	mov    edi,edx
c001f67f:	e8 1e fa ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f684:	57                   	push   edi
c001f685:	56                   	push   esi
c001f686:	52                   	push   edx
c001f687:	50                   	push   eax
c001f688:	e8 8b f9 ff ff       	call   c001f018 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f68d:	83 c4 1c             	add    esp,0x1c
c001f690:	52                   	push   edx
c001f691:	50                   	push   eax
c001f692:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f696:	2d c0 00 00 00       	sub    eax,0xc0
c001f69b:	e9 9e 01 00 00       	jmp    c001f83e <Vm::x87Handler(regs*)+0x65f>
c001f6a0:	8d 50 20             	lea    edx,[eax+0x20]
c001f6a3:	80 fa 07             	cmp    dl,0x7
c001f6a6:	77 3a                	ja     c001f6e2 <Vm::x87Handler(regs*)+0x503>
c001f6a8:	83 ec 0c             	sub    esp,0xc
c001f6ab:	2d e0 00 00 00       	sub    eax,0xe0
c001f6b0:	50                   	push   eax
c001f6b1:	e8 ec f9 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f6b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6bd:	89 c6                	mov    esi,eax
c001f6bf:	89 d7                	mov    edi,edx
c001f6c1:	e8 dc f9 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f6c6:	57                   	push   edi
c001f6c7:	56                   	push   esi
c001f6c8:	52                   	push   edx
c001f6c9:	50                   	push   eax
c001f6ca:	e8 73 f9 ff ff       	call   c001f042 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6cf:	83 c4 1c             	add    esp,0x1c
c001f6d2:	52                   	push   edx
c001f6d3:	50                   	push   eax
c001f6d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6d8:	2d e0 00 00 00       	sub    eax,0xe0
c001f6dd:	e9 5c 01 00 00       	jmp    c001f83e <Vm::x87Handler(regs*)+0x65f>
c001f6e2:	8d 50 18             	lea    edx,[eax+0x18]
c001f6e5:	80 fa 07             	cmp    dl,0x7
c001f6e8:	77 3b                	ja     c001f725 <Vm::x87Handler(regs*)+0x546>
c001f6ea:	83 ec 0c             	sub    esp,0xc
c001f6ed:	6a 00                	push   0x0
c001f6ef:	e8 ae f9 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f6f4:	89 c6                	mov    esi,eax
c001f6f6:	89 d7                	mov    edi,edx
c001f6f8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6fc:	2d e8 00 00 00       	sub    eax,0xe8
c001f701:	89 04 24             	mov    DWORD PTR [esp],eax
c001f704:	e8 99 f9 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f709:	57                   	push   edi
c001f70a:	56                   	push   esi
c001f70b:	52                   	push   edx
c001f70c:	50                   	push   eax
c001f70d:	e8 30 f9 ff ff       	call   c001f042 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f712:	83 c4 1c             	add    esp,0x1c
c001f715:	52                   	push   edx
c001f716:	50                   	push   eax
c001f717:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f71b:	2d e8 00 00 00       	sub    eax,0xe8
c001f720:	e9 19 01 00 00       	jmp    c001f83e <Vm::x87Handler(regs*)+0x65f>
c001f725:	8d 50 38             	lea    edx,[eax+0x38]
c001f728:	80 fa 07             	cmp    dl,0x7
c001f72b:	77 37                	ja     c001f764 <Vm::x87Handler(regs*)+0x585>
c001f72d:	83 ec 0c             	sub    esp,0xc
c001f730:	2d c8 00 00 00       	sub    eax,0xc8
c001f735:	50                   	push   eax
c001f736:	e8 67 f9 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f73b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f742:	89 c6                	mov    esi,eax
c001f744:	89 d7                	mov    edi,edx
c001f746:	e8 57 f9 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f74b:	57                   	push   edi
c001f74c:	56                   	push   esi
c001f74d:	52                   	push   edx
c001f74e:	50                   	push   eax
c001f74f:	e8 fd f8 ff ff       	call   c001f051 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f754:	83 c4 1c             	add    esp,0x1c
c001f757:	52                   	push   edx
c001f758:	50                   	push   eax
c001f759:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f75d:	2d c8 00 00 00       	sub    eax,0xc8
c001f762:	eb 7d                	jmp    c001f7e1 <Vm::x87Handler(regs*)+0x602>
c001f764:	3c f7                	cmp    al,0xf7
c001f766:	76 38                	jbe    c001f7a0 <Vm::x87Handler(regs*)+0x5c1>
c001f768:	83 ec 0c             	sub    esp,0xc
c001f76b:	6a 00                	push   0x0
c001f76d:	e8 30 f9 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f772:	89 c6                	mov    esi,eax
c001f774:	89 d7                	mov    edi,edx
c001f776:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f77a:	2d f8 00 00 00       	sub    eax,0xf8
c001f77f:	89 04 24             	mov    DWORD PTR [esp],eax
c001f782:	e8 1b f9 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f787:	57                   	push   edi
c001f788:	56                   	push   esi
c001f789:	52                   	push   edx
c001f78a:	50                   	push   eax
c001f78b:	e8 e0 f8 ff ff       	call   c001f070 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f790:	83 c4 1c             	add    esp,0x1c
c001f793:	52                   	push   edx
c001f794:	50                   	push   eax
c001f795:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f799:	2d f8 00 00 00       	sub    eax,0xf8
c001f79e:	eb 41                	jmp    c001f7e1 <Vm::x87Handler(regs*)+0x602>
c001f7a0:	8d 50 10             	lea    edx,[eax+0x10]
c001f7a3:	80 fa 07             	cmp    dl,0x7
c001f7a6:	0f 87 5a 01 00 00    	ja     c001f906 <Vm::x87Handler(regs*)+0x727>
c001f7ac:	83 ec 0c             	sub    esp,0xc
c001f7af:	2d f0 00 00 00       	sub    eax,0xf0
c001f7b4:	50                   	push   eax
c001f7b5:	e8 e8 f8 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f7ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7c1:	89 c6                	mov    esi,eax
c001f7c3:	89 d7                	mov    edi,edx
c001f7c5:	e8 d8 f8 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f7ca:	57                   	push   edi
c001f7cb:	56                   	push   esi
c001f7cc:	52                   	push   edx
c001f7cd:	50                   	push   eax
c001f7ce:	e8 9d f8 ff ff       	call   c001f070 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f7d3:	83 c4 1c             	add    esp,0x1c
c001f7d6:	52                   	push   edx
c001f7d7:	50                   	push   eax
c001f7d8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7dc:	2d f0 00 00 00       	sub    eax,0xf0
c001f7e1:	50                   	push   eax
c001f7e2:	e8 fe f8 ff ff       	call   c001f0e5 <Vm::fpuSetReg(int, unsigned long long)>
c001f7e7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f7eb:	e8 9d f9 ff ff       	call   c001f18d <Vm::fpuPop()>
c001f7f0:	e9 5e fa ff ff       	jmp    c001f253 <Vm::x87Handler(regs*)+0x74>
c001f7f5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7f9:	8d 50 30             	lea    edx,[eax+0x30]
c001f7fc:	80 fa 07             	cmp    dl,0x7
c001f7ff:	77 1d                	ja     c001f81e <Vm::x87Handler(regs*)+0x63f>
c001f801:	83 ec 0c             	sub    esp,0xc
c001f804:	6a 00                	push   0x0
c001f806:	e8 97 f8 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f80b:	83 c4 0c             	add    esp,0xc
c001f80e:	52                   	push   edx
c001f80f:	50                   	push   eax
c001f810:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f814:	2d d0 00 00 00       	sub    eax,0xd0
c001f819:	e9 f3 fd ff ff       	jmp    c001f611 <Vm::x87Handler(regs*)+0x432>
c001f81e:	8d 50 28             	lea    edx,[eax+0x28]
c001f821:	80 fa 07             	cmp    dl,0x7
c001f824:	77 28                	ja     c001f84e <Vm::x87Handler(regs*)+0x66f>
c001f826:	83 ec 0c             	sub    esp,0xc
c001f829:	6a 00                	push   0x0
c001f82b:	e8 72 f8 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f830:	83 c4 0c             	add    esp,0xc
c001f833:	52                   	push   edx
c001f834:	50                   	push   eax
c001f835:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f839:	2d d8 00 00 00       	sub    eax,0xd8
c001f83e:	50                   	push   eax
c001f83f:	e8 a1 f8 ff ff       	call   c001f0e5 <Vm::fpuSetReg(int, unsigned long long)>
c001f844:	e8 44 f9 ff ff       	call   c001f18d <Vm::fpuPop()>
c001f849:	e9 01 fa ff ff       	jmp    c001f24f <Vm::x87Handler(regs*)+0x70>
c001f84e:	8d 50 20             	lea    edx,[eax+0x20]
c001f851:	80 fa 07             	cmp    dl,0x7
c001f854:	77 30                	ja     c001f886 <Vm::x87Handler(regs*)+0x6a7>
c001f856:	83 ec 0c             	sub    esp,0xc
c001f859:	2d e0 00 00 00       	sub    eax,0xe0
c001f85e:	50                   	push   eax
c001f85f:	e8 3e f8 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f864:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f86b:	89 c6                	mov    esi,eax
c001f86d:	89 d7                	mov    edi,edx
c001f86f:	e8 2e f8 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f874:	57                   	push   edi
c001f875:	56                   	push   esi
c001f876:	52                   	push   edx
c001f877:	50                   	push   eax
c001f878:	e8 48 f7 ff ff       	call   c001efc5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f87d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f881:	e9 54 02 00 00       	jmp    c001fada <Vm::x87Handler(regs*)+0x8fb>
c001f886:	8d 50 18             	lea    edx,[eax+0x18]
c001f889:	80 fa 07             	cmp    dl,0x7
c001f88c:	0f 87 43 fb ff ff    	ja     c001f3d5 <Vm::x87Handler(regs*)+0x1f6>
c001f892:	83 ec 0c             	sub    esp,0xc
c001f895:	2d e8 00 00 00       	sub    eax,0xe8
c001f89a:	50                   	push   eax
c001f89b:	e8 02 f8 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f8a0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8a7:	89 c6                	mov    esi,eax
c001f8a9:	89 d7                	mov    edi,edx
c001f8ab:	e8 f2 f7 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f8b0:	57                   	push   edi
c001f8b1:	56                   	push   esi
c001f8b2:	52                   	push   edx
c001f8b3:	50                   	push   eax
c001f8b4:	e8 0c f7 ff ff       	call   c001efc5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f8b9:	83 c4 20             	add    esp,0x20
c001f8bc:	e8 cc f8 ff ff       	call   c001f18d <Vm::fpuPop()>
c001f8c1:	eb 62                	jmp    c001f925 <Vm::x87Handler(regs*)+0x746>
c001f8c3:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f8c7:	0f 85 0f 01 00 00    	jne    c001f9dc <Vm::x87Handler(regs*)+0x7fd>
c001f8cd:	83 ec 0c             	sub    esp,0xc
c001f8d0:	6a 01                	push   0x1
c001f8d2:	e8 cb f7 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f8d7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8de:	89 c6                	mov    esi,eax
c001f8e0:	89 d7                	mov    edi,edx
c001f8e2:	e8 bb f7 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f8e7:	57                   	push   edi
c001f8e8:	56                   	push   esi
c001f8e9:	52                   	push   edx
c001f8ea:	50                   	push   eax
c001f8eb:	e8 d5 f6 ff ff       	call   c001efc5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f8f0:	83 c4 20             	add    esp,0x20
c001f8f3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f8f7:	e8 91 f8 ff ff       	call   c001f18d <Vm::fpuPop()>
c001f8fc:	e8 8c f8 ff ff       	call   c001f18d <Vm::fpuPop()>
c001f901:	e9 50 f9 ff ff       	jmp    c001f256 <Vm::x87Handler(regs*)+0x77>
c001f906:	3c d9                	cmp    al,0xd9
c001f908:	0f 85 b5 02 00 00    	jne    c001fbc3 <Vm::x87Handler(regs*)+0x9e4>
c001f90e:	eb bd                	jmp    c001f8cd <Vm::x87Handler(regs*)+0x6ee>
c001f910:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f914:	0f 85 ea 02 00 00    	jne    c001fc04 <Vm::x87Handler(regs*)+0xa25>
c001f91a:	0f b7 05 a0 0b 03 c0 	movzx  eax,WORD PTR ds:0xc0030ba0
c001f921:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f925:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f929:	e9 28 f9 ff ff       	jmp    c001f256 <Vm::x87Handler(regs*)+0x77>
c001f92e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f932:	84 d2                	test   dl,dl
c001f934:	75 0f                	jne    c001f945 <Vm::x87Handler(regs*)+0x766>
c001f936:	83 ec 0c             	sub    esp,0xc
c001f939:	ff 36                	push   DWORD PTR [esi]
c001f93b:	e8 b1 f4 ff ff       	call   c001edf1 <Vm::fpu32ToInternal(unsigned int)>
c001f940:	e9 2c 01 00 00       	jmp    c001fa71 <Vm::x87Handler(regs*)+0x892>
c001f945:	80 fa 01             	cmp    dl,0x1
c001f948:	75 0f                	jne    c001f959 <Vm::x87Handler(regs*)+0x77a>
c001f94a:	83 ec 0c             	sub    esp,0xc
c001f94d:	ff 36                	push   DWORD PTR [esi]
c001f94f:	e8 9d f4 ff ff       	call   c001edf1 <Vm::fpu32ToInternal(unsigned int)>
c001f954:	e9 81 02 00 00       	jmp    c001fbda <Vm::x87Handler(regs*)+0x9fb>
c001f959:	80 fa 04             	cmp    dl,0x4
c001f95c:	75 0f                	jne    c001f96d <Vm::x87Handler(regs*)+0x78e>
c001f95e:	83 ec 0c             	sub    esp,0xc
c001f961:	ff 36                	push   DWORD PTR [esi]
c001f963:	e8 89 f4 ff ff       	call   c001edf1 <Vm::fpu32ToInternal(unsigned int)>
c001f968:	e9 86 01 00 00       	jmp    c001faf3 <Vm::x87Handler(regs*)+0x914>
c001f96d:	80 fa 05             	cmp    dl,0x5
c001f970:	75 1b                	jne    c001f98d <Vm::x87Handler(regs*)+0x7ae>
c001f972:	83 ec 0c             	sub    esp,0xc
c001f975:	6a 00                	push   0x0
c001f977:	e8 26 f7 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f97c:	89 c7                	mov    edi,eax
c001f97e:	89 d5                	mov    ebp,edx
c001f980:	58                   	pop    eax
c001f981:	ff 36                	push   DWORD PTR [esi]
c001f983:	e8 69 f4 ff ff       	call   c001edf1 <Vm::fpu32ToInternal(unsigned int)>
c001f988:	e9 a3 01 00 00       	jmp    c001fb30 <Vm::x87Handler(regs*)+0x951>
c001f98d:	80 fa 06             	cmp    dl,0x6
c001f990:	75 0f                	jne    c001f9a1 <Vm::x87Handler(regs*)+0x7c2>
c001f992:	83 ec 0c             	sub    esp,0xc
c001f995:	ff 36                	push   DWORD PTR [esi]
c001f997:	e8 55 f4 ff ff       	call   c001edf1 <Vm::fpu32ToInternal(unsigned int)>
c001f99c:	e9 ae 01 00 00       	jmp    c001fb4f <Vm::x87Handler(regs*)+0x970>
c001f9a1:	31 c0                	xor    eax,eax
c001f9a3:	80 fa 07             	cmp    dl,0x7
c001f9a6:	0f 85 94 02 00 00    	jne    c001fc40 <Vm::x87Handler(regs*)+0xa61>
c001f9ac:	83 ec 0c             	sub    esp,0xc
c001f9af:	6a 00                	push   0x0
c001f9b1:	e8 ec f6 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001f9b6:	89 c7                	mov    edi,eax
c001f9b8:	89 d5                	mov    ebp,edx
c001f9ba:	58                   	pop    eax
c001f9bb:	ff 36                	push   DWORD PTR [esi]
c001f9bd:	e8 2f f4 ff ff       	call   c001edf1 <Vm::fpu32ToInternal(unsigned int)>
c001f9c2:	e9 cb 01 00 00       	jmp    c001fb92 <Vm::x87Handler(regs*)+0x9b3>
c001f9c7:	80 fa 03             	cmp    dl,0x3
c001f9ca:	0f 85 d3 01 00 00    	jne    c001fba3 <Vm::x87Handler(regs*)+0x9c4>
c001f9d0:	e8 b8 f7 ff ff       	call   c001f18d <Vm::fpuPop()>
c001f9d5:	51                   	push   ecx
c001f9d6:	51                   	push   ecx
c001f9d7:	e9 de 01 00 00       	jmp    c001fbba <Vm::x87Handler(regs*)+0x9db>
c001f9dc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f9e0:	80 fa 01             	cmp    dl,0x1
c001f9e3:	75 09                	jne    c001f9ee <Vm::x87Handler(regs*)+0x80f>
c001f9e5:	57                   	push   edi
c001f9e6:	57                   	push   edi
c001f9e7:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9e9:	e9 e3 01 00 00       	jmp    c001fbd1 <Vm::x87Handler(regs*)+0x9f2>
c001f9ee:	80 fa 04             	cmp    dl,0x4
c001f9f1:	75 12                	jne    c001fa05 <Vm::x87Handler(regs*)+0x826>
c001f9f3:	31 d2                	xor    edx,edx
c001f9f5:	51                   	push   ecx
c001f9f6:	51                   	push   ecx
c001f9f7:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9f9:	52                   	push   edx
c001f9fa:	50                   	push   eax
c001f9fb:	e8 d0 f4 ff ff       	call   c001eed0 <Vm::fpuLongToFloat(long long)>
c001fa00:	e9 ee 00 00 00       	jmp    c001faf3 <Vm::x87Handler(regs*)+0x914>
c001fa05:	31 c0                	xor    eax,eax
c001fa07:	80 fa 07             	cmp    dl,0x7
c001fa0a:	0f 85 30 02 00 00    	jne    c001fc40 <Vm::x87Handler(regs*)+0xa61>
c001fa10:	83 ec 0c             	sub    esp,0xc
c001fa13:	6a 00                	push   0x0
c001fa15:	e8 88 f6 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001fa1a:	89 c7                	mov    edi,eax
c001fa1c:	89 d5                	mov    ebp,edx
c001fa1e:	58                   	pop    eax
c001fa1f:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa21:	5a                   	pop    edx
c001fa22:	31 d2                	xor    edx,edx
c001fa24:	52                   	push   edx
c001fa25:	50                   	push   eax
c001fa26:	e8 a5 f4 ff ff       	call   c001eed0 <Vm::fpuLongToFloat(long long)>
c001fa2b:	e9 62 01 00 00       	jmp    c001fb92 <Vm::x87Handler(regs*)+0x9b3>
c001fa30:	84 d2                	test   dl,dl
c001fa32:	75 0d                	jne    c001fa41 <Vm::x87Handler(regs*)+0x862>
c001fa34:	31 d2                	xor    edx,edx
c001fa36:	55                   	push   ebp
c001fa37:	55                   	push   ebp
c001fa38:	8b 06                	mov    eax,DWORD PTR [esi]
c001fa3a:	52                   	push   edx
c001fa3b:	50                   	push   eax
c001fa3c:	e9 d3 01 00 00       	jmp    c001fc14 <Vm::x87Handler(regs*)+0xa35>
c001fa41:	31 c0                	xor    eax,eax
c001fa43:	80 fa 02             	cmp    dl,0x2
c001fa46:	0f 85 f4 01 00 00    	jne    c001fc40 <Vm::x87Handler(regs*)+0xa61>
c001fa4c:	83 ec 0c             	sub    esp,0xc
c001fa4f:	6a 00                	push   0x0
c001fa51:	e8 4c f6 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001fa56:	59                   	pop    ecx
c001fa57:	5f                   	pop    edi
c001fa58:	e9 6a f9 ff ff       	jmp    c001f3c7 <Vm::x87Handler(regs*)+0x1e8>
c001fa5d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fa61:	84 d2                	test   dl,dl
c001fa63:	75 2a                	jne    c001fa8f <Vm::x87Handler(regs*)+0x8b0>
c001fa65:	50                   	push   eax
c001fa66:	50                   	push   eax
c001fa67:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa6a:	ff 36                	push   DWORD PTR [esi]
c001fa6c:	e8 c5 f3 ff ff       	call   c001ee36 <Vm::fpu64ToInternal(unsigned long long)>
c001fa71:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa78:	89 c6                	mov    esi,eax
c001fa7a:	89 d7                	mov    edi,edx
c001fa7c:	e8 21 f6 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001fa81:	57                   	push   edi
c001fa82:	56                   	push   esi
c001fa83:	52                   	push   edx
c001fa84:	50                   	push   eax
c001fa85:	e8 8e f5 ff ff       	call   c001f018 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fa8a:	e9 64 01 00 00       	jmp    c001fbf3 <Vm::x87Handler(regs*)+0xa14>
c001fa8f:	80 fa 01             	cmp    dl,0x1
c001fa92:	75 11                	jne    c001faa5 <Vm::x87Handler(regs*)+0x8c6>
c001fa94:	50                   	push   eax
c001fa95:	50                   	push   eax
c001fa96:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fa99:	ff 36                	push   DWORD PTR [esi]
c001fa9b:	e8 96 f3 ff ff       	call   c001ee36 <Vm::fpu64ToInternal(unsigned long long)>
c001faa0:	e9 35 01 00 00       	jmp    c001fbda <Vm::x87Handler(regs*)+0x9fb>
c001faa5:	80 fa 02             	cmp    dl,0x2
c001faa8:	0f 85 54 f9 ff ff    	jne    c001f402 <Vm::x87Handler(regs*)+0x223>
c001faae:	55                   	push   ebp
c001faaf:	55                   	push   ebp
c001fab0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fab3:	ff 36                	push   DWORD PTR [esi]
c001fab5:	e8 7c f3 ff ff       	call   c001ee36 <Vm::fpu64ToInternal(unsigned long long)>
c001faba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fac1:	89 c6                	mov    esi,eax
c001fac3:	89 d7                	mov    edi,edx
c001fac5:	e8 d8 f5 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001faca:	57                   	push   edi
c001facb:	56                   	push   esi
c001facc:	52                   	push   edx
c001facd:	50                   	push   eax
c001face:	e8 f2 f4 ff ff       	call   c001efc5 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fad3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fad7:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fada:	83 c4 20             	add    esp,0x20
c001fadd:	e9 74 f7 ff ff       	jmp    c001f256 <Vm::x87Handler(regs*)+0x77>
c001fae2:	80 fa 04             	cmp    dl,0x4
c001fae5:	75 2a                	jne    c001fb11 <Vm::x87Handler(regs*)+0x932>
c001fae7:	51                   	push   ecx
c001fae8:	51                   	push   ecx
c001fae9:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001faec:	ff 36                	push   DWORD PTR [esi]
c001faee:	e8 43 f3 ff ff       	call   c001ee36 <Vm::fpu64ToInternal(unsigned long long)>
c001faf3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fafa:	89 c6                	mov    esi,eax
c001fafc:	89 d7                	mov    edi,edx
c001fafe:	e8 9f f5 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001fb03:	57                   	push   edi
c001fb04:	56                   	push   esi
c001fb05:	52                   	push   edx
c001fb06:	50                   	push   eax
c001fb07:	e8 36 f5 ff ff       	call   c001f042 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fb0c:	e9 e2 00 00 00       	jmp    c001fbf3 <Vm::x87Handler(regs*)+0xa14>
c001fb11:	80 fa 05             	cmp    dl,0x5
c001fb14:	75 28                	jne    c001fb3e <Vm::x87Handler(regs*)+0x95f>
c001fb16:	83 ec 0c             	sub    esp,0xc
c001fb19:	6a 00                	push   0x0
c001fb1b:	e8 82 f5 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001fb20:	89 c7                	mov    edi,eax
c001fb22:	89 d5                	mov    ebp,edx
c001fb24:	58                   	pop    eax
c001fb25:	5a                   	pop    edx
c001fb26:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb29:	ff 36                	push   DWORD PTR [esi]
c001fb2b:	e8 06 f3 ff ff       	call   c001ee36 <Vm::fpu64ToInternal(unsigned long long)>
c001fb30:	83 c4 10             	add    esp,0x10
c001fb33:	55                   	push   ebp
c001fb34:	57                   	push   edi
c001fb35:	52                   	push   edx
c001fb36:	50                   	push   eax
c001fb37:	e8 06 f5 ff ff       	call   c001f042 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fb3c:	eb 60                	jmp    c001fb9e <Vm::x87Handler(regs*)+0x9bf>
c001fb3e:	80 fa 06             	cmp    dl,0x6
c001fb41:	75 2a                	jne    c001fb6d <Vm::x87Handler(regs*)+0x98e>
c001fb43:	51                   	push   ecx
c001fb44:	51                   	push   ecx
c001fb45:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb48:	ff 36                	push   DWORD PTR [esi]
c001fb4a:	e8 e7 f2 ff ff       	call   c001ee36 <Vm::fpu64ToInternal(unsigned long long)>
c001fb4f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb56:	89 c6                	mov    esi,eax
c001fb58:	89 d7                	mov    edi,edx
c001fb5a:	e8 43 f5 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001fb5f:	57                   	push   edi
c001fb60:	56                   	push   esi
c001fb61:	52                   	push   edx
c001fb62:	50                   	push   eax
c001fb63:	e8 08 f5 ff ff       	call   c001f070 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb68:	e9 86 00 00 00       	jmp    c001fbf3 <Vm::x87Handler(regs*)+0xa14>
c001fb6d:	31 c0                	xor    eax,eax
c001fb6f:	80 fa 07             	cmp    dl,0x7
c001fb72:	0f 85 c8 00 00 00    	jne    c001fc40 <Vm::x87Handler(regs*)+0xa61>
c001fb78:	83 ec 0c             	sub    esp,0xc
c001fb7b:	6a 00                	push   0x0
c001fb7d:	e8 20 f5 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001fb82:	89 c7                	mov    edi,eax
c001fb84:	89 d5                	mov    ebp,edx
c001fb86:	58                   	pop    eax
c001fb87:	5a                   	pop    edx
c001fb88:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fb8b:	ff 36                	push   DWORD PTR [esi]
c001fb8d:	e8 a4 f2 ff ff       	call   c001ee36 <Vm::fpu64ToInternal(unsigned long long)>
c001fb92:	83 c4 10             	add    esp,0x10
c001fb95:	55                   	push   ebp
c001fb96:	57                   	push   edi
c001fb97:	52                   	push   edx
c001fb98:	50                   	push   eax
c001fb99:	e8 d2 f4 ff ff       	call   c001f070 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fb9e:	83 c4 0c             	add    esp,0xc
c001fba1:	eb 53                	jmp    c001fbf6 <Vm::x87Handler(regs*)+0xa17>
c001fba3:	31 c0                	xor    eax,eax
c001fba5:	80 fa 02             	cmp    dl,0x2
c001fba8:	0f 85 92 00 00 00    	jne    c001fc40 <Vm::x87Handler(regs*)+0xa61>
c001fbae:	83 ec 0c             	sub    esp,0xc
c001fbb1:	6a 00                	push   0x0
c001fbb3:	e8 ea f4 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001fbb8:	59                   	pop    ecx
c001fbb9:	5f                   	pop    edi
c001fbba:	52                   	push   edx
c001fbbb:	50                   	push   eax
c001fbbc:	e8 27 f2 ff ff       	call   c001ede8 <Vm::fpuInternalTo64(unsigned long long)>
c001fbc1:	eb 70                	jmp    c001fc33 <Vm::x87Handler(regs*)+0xa54>
c001fbc3:	31 c0                	xor    eax,eax
c001fbc5:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fbca:	75 74                	jne    c001fc40 <Vm::x87Handler(regs*)+0xa61>
c001fbcc:	50                   	push   eax
c001fbcd:	50                   	push   eax
c001fbce:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fbd1:	31 d2                	xor    edx,edx
c001fbd3:	52                   	push   edx
c001fbd4:	50                   	push   eax
c001fbd5:	e8 f6 f2 ff ff       	call   c001eed0 <Vm::fpuLongToFloat(long long)>
c001fbda:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fbe1:	89 c6                	mov    esi,eax
c001fbe3:	89 d7                	mov    edi,edx
c001fbe5:	e8 b8 f4 ff ff       	call   c001f0a2 <Vm::fpuGetReg(int)>
c001fbea:	57                   	push   edi
c001fbeb:	56                   	push   esi
c001fbec:	52                   	push   edx
c001fbed:	50                   	push   eax
c001fbee:	e8 5e f4 ff ff       	call   c001f051 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fbf3:	83 c4 1c             	add    esp,0x1c
c001fbf6:	52                   	push   edx
c001fbf7:	50                   	push   eax
c001fbf8:	6a 00                	push   0x0
c001fbfa:	e8 e6 f4 ff ff       	call   c001f0e5 <Vm::fpuSetReg(int, unsigned long long)>
c001fbff:	e9 f2 f7 ff ff       	jmp    c001f3f6 <Vm::x87Handler(regs*)+0x217>
c001fc04:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc08:	80 fa 05             	cmp    dl,0x5
c001fc0b:	75 11                	jne    c001fc1e <Vm::x87Handler(regs*)+0xa3f>
c001fc0d:	55                   	push   ebp
c001fc0e:	55                   	push   ebp
c001fc0f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc12:	ff 36                	push   DWORD PTR [esi]
c001fc14:	e8 81 f2 ff ff       	call   c001ee9a <Vm::fpuULongToFloat(unsigned long long)>
c001fc19:	e9 cf f7 ff ff       	jmp    c001f3ed <Vm::x87Handler(regs*)+0x20e>
c001fc1e:	31 c0                	xor    eax,eax
c001fc20:	80 fa 07             	cmp    dl,0x7
c001fc23:	75 1b                	jne    c001fc40 <Vm::x87Handler(regs*)+0xa61>
c001fc25:	e8 63 f5 ff ff       	call   c001f18d <Vm::fpuPop()>
c001fc2a:	51                   	push   ecx
c001fc2b:	51                   	push   ecx
c001fc2c:	52                   	push   edx
c001fc2d:	50                   	push   eax
c001fc2e:	e8 0c f2 ff ff       	call   c001ee3f <Vm::fpuFloatToLong(unsigned long long)>
c001fc33:	83 c4 10             	add    esp,0x10
c001fc36:	89 06                	mov    DWORD PTR [esi],eax
c001fc38:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fc3b:	e9 f8 f7 ff ff       	jmp    c001f438 <Vm::x87Handler(regs*)+0x259>
c001fc40:	83 c4 1c             	add    esp,0x1c
c001fc43:	5b                   	pop    ebx
c001fc44:	5e                   	pop    esi
c001fc45:	5f                   	pop    edi
c001fc46:	5d                   	pop    ebp
c001fc47:	c3                   	ret    

c001fc48 <__static_initialization_and_destruction_0(int, int)>:
c001fc48:	83 ec 0c             	sub    esp,0xc
c001fc4b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fc50:	75 1a                	jne    c001fc6c <__static_initialization_and_destruction_0(int, int)+0x24>
c001fc52:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fc5a:	75 10                	jne    c001fc6c <__static_initialization_and_destruction_0(int, int)+0x24>
c001fc5c:	83 ec 0c             	sub    esp,0xc
c001fc5f:	68 a0 0b 03 c0       	push   0xc0030ba0
c001fc64:	e8 01 8d 00 00       	call   c002896a <Vm::_FPUState::_FPUState()>
c001fc69:	83 c4 10             	add    esp,0x10
c001fc6c:	90                   	nop
c001fc6d:	83 c4 0c             	add    esp,0xc
c001fc70:	c3                   	ret    

c001fc71 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fc71:	83 ec 0c             	sub    esp,0xc
c001fc74:	83 ec 08             	sub    esp,0x8
c001fc77:	68 ff ff 00 00       	push   0xffff
c001fc7c:	6a 01                	push   0x1
c001fc7e:	e8 c5 ff ff ff       	call   c001fc48 <__static_initialization_and_destruction_0(int, int)>
c001fc83:	83 c4 10             	add    esp,0x10
c001fc86:	83 c4 0c             	add    esp,0xc
c001fc89:	c3                   	ret    

c001fc8a <FAT::getName()>:
c001fc8a:	b8 88 ba 02 c0       	mov    eax,0xc002ba88
c001fc8f:	c3                   	ret    

c001fc90 <FAT::tell(void*, unsigned long long*)>:
c001fc90:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fc95:	75 06                	jne    c001fc9d <FAT::tell(void*, unsigned long long*)+0xd>
c001fc97:	b8 04 00 00 00       	mov    eax,0x4
c001fc9c:	c3                   	ret    
c001fc9d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fca2:	75 06                	jne    c001fcaa <FAT::tell(void*, unsigned long long*)+0x1a>
c001fca4:	b8 04 00 00 00       	mov    eax,0x4
c001fca9:	c3                   	ret    
c001fcaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fcae:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fcb1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fcb4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fcb8:	89 01                	mov    DWORD PTR [ecx],eax
c001fcba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fcbd:	b8 00 00 00 00       	mov    eax,0x0
c001fcc2:	c3                   	ret    
c001fcc3:	90                   	nop

c001fcc4 <FAT::stat(void*, unsigned long long*)>:
c001fcc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fcc9:	75 06                	jne    c001fcd1 <FAT::stat(void*, unsigned long long*)+0xd>
c001fccb:	b8 04 00 00 00       	mov    eax,0x4
c001fcd0:	c3                   	ret    
c001fcd1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fcd6:	75 06                	jne    c001fcde <FAT::stat(void*, unsigned long long*)+0x1a>
c001fcd8:	b8 04 00 00 00       	mov    eax,0x4
c001fcdd:	c3                   	ret    
c001fcde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fce2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fce5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fce8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fcec:	89 01                	mov    DWORD PTR [ecx],eax
c001fcee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fcf1:	b8 00 00 00 00       	mov    eax,0x0
c001fcf6:	c3                   	ret    
c001fcf7:	90                   	nop

c001fcf8 <FAT::~FAT()>:
c001fcf8:	83 ec 0c             	sub    esp,0xc
c001fcfb:	ba d4 ba 02 c0       	mov    edx,0xc002bad4
c001fd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd04:	89 10                	mov    DWORD PTR [eax],edx
c001fd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0a:	83 ec 0c             	sub    esp,0xc
c001fd0d:	50                   	push   eax
c001fd0e:	e8 51 2b ff ff       	call   c0012864 <Filesystem::~Filesystem()>
c001fd13:	83 c4 10             	add    esp,0x10
c001fd16:	90                   	nop
c001fd17:	83 c4 0c             	add    esp,0xc
c001fd1a:	c3                   	ret    
c001fd1b:	90                   	nop

c001fd1c <FAT::~FAT()>:
c001fd1c:	83 ec 0c             	sub    esp,0xc
c001fd1f:	83 ec 0c             	sub    esp,0xc
c001fd22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd26:	e8 cd ff ff ff       	call   c001fcf8 <FAT::~FAT()>
c001fd2b:	83 c4 10             	add    esp,0x10
c001fd2e:	83 ec 08             	sub    esp,0x8
c001fd31:	6a 08                	push   0x8
c001fd33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd37:	e8 21 27 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c001fd3c:	83 c4 10             	add    esp,0x10
c001fd3f:	83 c4 0c             	add    esp,0xc
c001fd42:	c3                   	ret    
c001fd43:	90                   	nop

c001fd44 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fd44:	83 ec 1c             	sub    esp,0x1c
c001fd47:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fd4e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fd53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd57:	8b 04 85 20 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3e0]
c001fd5e:	83 f8 ff             	cmp    eax,0xffffffff
c001fd61:	75 34                	jne    c001fd97 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001fd63:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fd67:	88 c2                	mov    dl,al
c001fd69:	a1 00 0c 03 c0       	mov    eax,ds:0xc0030c00
c001fd6e:	01 d0                	add    eax,edx
c001fd70:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fd74:	8b 15 00 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c00
c001fd7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd7e:	89 14 85 20 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3e0],edx
c001fd85:	a1 00 0c 03 c0       	mov    eax,ds:0xc0030c00
c001fd8a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fd8e:	89 14 85 a0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf360],edx
c001fd95:	eb 17                	jmp    c001fdae <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001fd97:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fd9b:	88 c2                	mov    dl,al
c001fd9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fda1:	8b 04 85 20 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3e0]
c001fda8:	01 d0                	add    eax,edx
c001fdaa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fdae:	83 ec 04             	sub    esp,0x4
c001fdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fdb9:	8d 44 24 15          	lea    eax,[esp+0x15]
c001fdbd:	50                   	push   eax
c001fdbe:	e8 3b 6f fe ff       	call   c0006cfe <f_getlabel>
c001fdc3:	83 c4 10             	add    esp,0x10
c001fdc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fdca:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fdcf:	75 07                	jne    c001fdd8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001fdd1:	b8 00 00 00 00       	mov    eax,0x0
c001fdd6:	eb 05                	jmp    c001fddd <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001fdd8:	b8 01 00 00 00       	mov    eax,0x1
c001fddd:	83 c4 1c             	add    esp,0x1c
c001fde0:	c3                   	ret    
c001fde1:	90                   	nop

c001fde2 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001fde2:	57                   	push   edi
c001fde3:	83 ec 58             	sub    esp,0x58
c001fde6:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001fdee:	8d 54 24 10          	lea    edx,[esp+0x10]
c001fdf2:	b9 0f 00 00 00       	mov    ecx,0xf
c001fdf7:	b8 00 00 00 00       	mov    eax,0x0
c001fdfc:	fc                   	cld    
c001fdfd:	89 d7                	mov    edi,edx
c001fdff:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fe01:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fe05:	8b 04 85 20 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3e0]
c001fe0c:	83 f8 ff             	cmp    eax,0xffffffff
c001fe0f:	75 34                	jne    c001fe45 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001fe11:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fe15:	88 c2                	mov    dl,al
c001fe17:	a1 00 0c 03 c0       	mov    eax,ds:0xc0030c00
c001fe1c:	01 d0                	add    eax,edx
c001fe1e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fe22:	8b 15 00 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c00
c001fe28:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fe2c:	89 14 85 20 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3e0],edx
c001fe33:	a1 00 0c 03 c0       	mov    eax,ds:0xc0030c00
c001fe38:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001fe3c:	89 14 85 a0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf360],edx
c001fe43:	eb 17                	jmp    c001fe5c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001fe45:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001fe49:	88 c2                	mov    dl,al
c001fe4b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001fe4f:	8b 04 85 20 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3e0]
c001fe56:	01 d0                	add    eax,edx
c001fe58:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fe5c:	83 ec 08             	sub    esp,0x8
c001fe5f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001fe63:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fe67:	50                   	push   eax
c001fe68:	e8 df 0a fe ff       	call   c000094c <strcat>
c001fe6d:	83 c4 10             	add    esp,0x10
c001fe70:	83 ec 0c             	sub    esp,0xc
c001fe73:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fe77:	50                   	push   eax
c001fe78:	e8 6f 70 fe ff       	call   c0006eec <f_setlabel>
c001fe7d:	83 c4 10             	add    esp,0x10
c001fe80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001fe84:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001fe89:	75 07                	jne    c001fe92 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001fe8b:	b8 00 00 00 00       	mov    eax,0x0
c001fe90:	eb 05                	jmp    c001fe97 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001fe92:	b8 01 00 00 00       	mov    eax,0x1
c001fe97:	83 c4 58             	add    esp,0x58
c001fe9a:	5f                   	pop    edi
c001fe9b:	c3                   	ret    

c001fe9c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001fe9c:	83 ec 2c             	sub    esp,0x2c
c001fe9f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001fea7:	83 ec 08             	sub    esp,0x8
c001feaa:	68 ac ba 02 c0       	push   0xc002baac
c001feaf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001feb3:	e8 e0 09 fe ff       	call   c0000898 <strcmp>
c001feb8:	83 c4 10             	add    esp,0x10
c001febb:	85 c0                	test   eax,eax
c001febd:	0f 94 c0             	sete   al
c001fec0:	84 c0                	test   al,al
c001fec2:	74 0d                	je     c001fed1 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001fec4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fecc:	e9 a6 00 00 00       	jmp    c001ff77 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fed1:	83 ec 08             	sub    esp,0x8
c001fed4:	68 9e ba 02 c0       	push   0xc002ba9e
c001fed9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fedd:	e8 b6 09 fe ff       	call   c0000898 <strcmp>
c001fee2:	83 c4 10             	add    esp,0x10
c001fee5:	85 c0                	test   eax,eax
c001fee7:	0f 94 c0             	sete   al
c001feea:	84 c0                	test   al,al
c001feec:	74 0a                	je     c001fef8 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001feee:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001fef6:	eb 7f                	jmp    c001ff77 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001fef8:	83 ec 08             	sub    esp,0x8
c001fefb:	68 a4 ba 02 c0       	push   0xc002baa4
c001ff00:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff04:	e8 8f 09 fe ff       	call   c0000898 <strcmp>
c001ff09:	83 c4 10             	add    esp,0x10
c001ff0c:	85 c0                	test   eax,eax
c001ff0e:	0f 94 c0             	sete   al
c001ff11:	84 c0                	test   al,al
c001ff13:	74 0a                	je     c001ff1f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001ff15:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001ff1d:	eb 58                	jmp    c001ff77 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff1f:	83 ec 08             	sub    esp,0x8
c001ff22:	68 cc 90 02 c0       	push   0xc00290cc
c001ff27:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff2b:	e8 68 09 fe ff       	call   c0000898 <strcmp>
c001ff30:	83 c4 10             	add    esp,0x10
c001ff33:	85 c0                	test   eax,eax
c001ff35:	0f 94 c0             	sete   al
c001ff38:	84 c0                	test   al,al
c001ff3a:	74 0a                	je     c001ff46 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001ff3c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001ff44:	eb 31                	jmp    c001ff77 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff46:	83 ec 08             	sub    esp,0x8
c001ff49:	68 aa ba 02 c0       	push   0xc002baaa
c001ff4e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ff52:	e8 41 09 fe ff       	call   c0000898 <strcmp>
c001ff57:	83 c4 10             	add    esp,0x10
c001ff5a:	85 c0                	test   eax,eax
c001ff5c:	0f 94 c0             	sete   al
c001ff5f:	84 c0                	test   al,al
c001ff61:	74 0a                	je     c001ff6d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001ff63:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001ff6b:	eb 0a                	jmp    c001ff77 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001ff6d:	b8 08 00 00 00       	mov    eax,0x8
c001ff72:	e9 df 00 00 00       	jmp    c0020056 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c001ff77:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001ff7e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ff83:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff87:	8b 04 85 20 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3e0]
c001ff8e:	83 f8 ff             	cmp    eax,0xffffffff
c001ff91:	75 34                	jne    c001ffc7 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001ff93:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ff97:	88 c2                	mov    dl,al
c001ff99:	a1 00 0c 03 c0       	mov    eax,ds:0xc0030c00
c001ff9e:	01 d0                	add    eax,edx
c001ffa0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ffa4:	8b 15 00 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c00
c001ffaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ffae:	89 14 85 20 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3e0],edx
c001ffb5:	a1 00 0c 03 c0       	mov    eax,ds:0xc0030c00
c001ffba:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ffbe:	89 14 85 a0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf360],edx
c001ffc5:	eb 17                	jmp    c001ffde <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001ffc7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001ffcb:	88 c2                	mov    dl,al
c001ffcd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ffd1:	8b 04 85 20 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3e0]
c001ffd8:	01 d0                	add    eax,edx
c001ffda:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001ffde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ffe2:	88 04 24             	mov    BYTE PTR [esp],al
c001ffe5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001ffe9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ffed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001fff5:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001fffa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020002:	83 ec 0c             	sub    esp,0xc
c0020005:	68 00 20 00 00       	push   0x2000
c002000a:	e8 8a f5 fe ff       	call   c000f599 <malloc>
c002000f:	83 c4 10             	add    esp,0x10
c0020012:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020016:	68 00 20 00 00       	push   0x2000
c002001b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002001f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020023:	50                   	push   eax
c0020024:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020028:	50                   	push   eax
c0020029:	e8 09 73 fe ff       	call   c0007337 <f_mkfs>
c002002e:	83 c4 10             	add    esp,0x10
c0020031:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020035:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002003a:	75 07                	jne    c0020043 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002003c:	b8 00 00 00 00       	mov    eax,0x0
c0020041:	eb 13                	jmp    c0020056 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020043:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020048:	75 07                	jne    c0020051 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c002004a:	b8 09 00 00 00       	mov    eax,0x9
c002004f:	eb 05                	jmp    c0020056 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020051:	b8 01 00 00 00       	mov    eax,0x1
c0020056:	83 c4 2c             	add    esp,0x2c
c0020059:	c3                   	ret    

c002005a <FAT::tryMount(LogicalDisk*, int)>:
c002005a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020060:	a1 00 0c 03 c0       	mov    eax,ds:0xc0030c00
c0020065:	83 f8 14             	cmp    eax,0x14
c0020068:	75 17                	jne    c0020081 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002006a:	83 ec 0c             	sub    esp,0xc
c002006d:	68 b0 ba 02 c0       	push   0xc002bab0
c0020072:	e8 1e 9c ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0020077:	83 c4 10             	add    esp,0x10
c002007a:	b0 00                	mov    al,0x0
c002007c:	e9 d7 01 00 00       	jmp    c0020258 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020081:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020088:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002008e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020094:	3d 00 02 00 00       	cmp    eax,0x200
c0020099:	74 07                	je     c00200a2 <FAT::tryMount(LogicalDisk*, int)+0x48>
c002009b:	b0 00                	mov    al,0x0
c002009d:	e9 b6 01 00 00       	jmp    c0020258 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00200a2:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00200aa:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00200b1:	8b 04 85 20 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3e0]
c00200b8:	83 f8 ff             	cmp    eax,0xffffffff
c00200bb:	74 07                	je     c00200c4 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00200bd:	b0 01                	mov    al,0x1
c00200bf:	e9 94 01 00 00       	jmp    c0020258 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00200c4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00200ce:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00200d6:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00200dd:	88 c2                	mov    dl,al
c00200df:	a1 00 0c 03 c0       	mov    eax,ds:0xc0030c00
c00200e4:	01 d0                	add    eax,edx
c00200e6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00200ed:	8b 15 00 0c 03 c0    	mov    edx,DWORD PTR ds:0xc0030c00
c00200f3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00200fa:	89 14 85 20 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf3e0],edx
c0020101:	a1 00 0c 03 c0       	mov    eax,ds:0xc0030c00
c0020106:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002010d:	89 14 85 a0 0c 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf360],edx
c0020114:	83 ec 0c             	sub    esp,0xc
c0020117:	68 54 02 00 00       	push   0x254
c002011c:	e8 78 f4 fe ff       	call   c000f599 <malloc>
c0020121:	83 c4 10             	add    esp,0x10
c0020124:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002012b:	83 ec 04             	sub    esp,0x4
c002012e:	6a 00                	push   0x0
c0020130:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020137:	50                   	push   eax
c0020138:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002013f:	e8 b1 4d fe ff       	call   c0004ef5 <f_mount>
c0020144:	83 c4 10             	add    esp,0x10
c0020147:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002014e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020156:	74 19                	je     c0020171 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020158:	83 ec 0c             	sub    esp,0xc
c002015b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020162:	e8 52 f4 fe ff       	call   c000f5b9 <rfree>
c0020167:	83 c4 10             	add    esp,0x10
c002016a:	b0 00                	mov    al,0x0
c002016c:	e9 e7 00 00 00       	jmp    c0020258 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020171:	83 ec 04             	sub    esp,0x4
c0020174:	68 00 01 00 00       	push   0x100
c0020179:	6a 00                	push   0x0
c002017b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020182:	50                   	push   eax
c0020183:	e8 c8 05 fe ff       	call   c0000750 <memset>
c0020188:	83 c4 10             	add    esp,0x10
c002018b:	83 ec 08             	sub    esp,0x8
c002018e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020195:	50                   	push   eax
c0020196:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002019d:	50                   	push   eax
c002019e:	e8 a9 07 fe ff       	call   c000094c <strcat>
c00201a3:	83 c4 10             	add    esp,0x10
c00201a6:	83 ec 08             	sub    esp,0x8
c00201a9:	68 be ba 02 c0       	push   0xc002babe
c00201ae:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00201b5:	50                   	push   eax
c00201b6:	e8 91 07 fe ff       	call   c000094c <strcat>
c00201bb:	83 c4 10             	add    esp,0x10
c00201be:	83 ec 04             	sub    esp,0x4
c00201c1:	6a 01                	push   0x1
c00201c3:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00201ca:	50                   	push   eax
c00201cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00201cf:	50                   	push   eax
c00201d0:	e8 82 4d fe ff       	call   c0004f57 <f_open>
c00201d5:	83 c4 10             	add    esp,0x10
c00201d8:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00201df:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00201e6:	85 c0                	test   eax,eax
c00201e8:	74 0a                	je     c00201f4 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00201ea:	78 2d                	js     c0020219 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00201ec:	83 e8 04             	sub    eax,0x4
c00201ef:	83 f8 01             	cmp    eax,0x1
c00201f2:	77 25                	ja     c0020219 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00201f4:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00201fc:	83 ec 0c             	sub    esp,0xc
c00201ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020203:	50                   	push   eax
c0020204:	e8 a0 58 fe ff       	call   c0005aa9 <f_close>
c0020209:	83 c4 10             	add    esp,0x10
c002020c:	90                   	nop
c002020d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020215:	74 3a                	je     c0020251 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020217:	eb 2d                	jmp    c0020246 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020219:	83 ec 0c             	sub    esp,0xc
c002021c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020223:	e8 91 f3 fe ff       	call   c000f5b9 <rfree>
c0020228:	83 c4 10             	add    esp,0x10
c002022b:	83 ec 04             	sub    esp,0x4
c002022e:	6a 00                	push   0x0
c0020230:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020237:	50                   	push   eax
c0020238:	6a 00                	push   0x0
c002023a:	e8 b6 4c fe ff       	call   c0004ef5 <f_mount>
c002023f:	83 c4 10             	add    esp,0x10
c0020242:	b0 00                	mov    al,0x0
c0020244:	eb 12                	jmp    c0020258 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020246:	a1 00 0c 03 c0       	mov    eax,ds:0xc0030c00
c002024b:	40                   	inc    eax
c002024c:	a3 00 0c 03 c0       	mov    ds:0xc0030c00,eax
c0020251:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020258:	81 c4 6c 03 00 00    	add    esp,0x36c
c002025e:	c3                   	ret    
c002025f:	90                   	nop

c0020260 <FAT::getFileFirstSector(char const*)>:
c0020260:	53                   	push   ebx
c0020261:	83 ec 28             	sub    esp,0x28
c0020264:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c002026c:	83 ec 0c             	sub    esp,0xc
c002026f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020273:	e8 21 f3 fe ff       	call   c000f599 <malloc>
c0020278:	83 c4 10             	add    esp,0x10
c002027b:	89 c3                	mov    ebx,eax
c002027d:	a1 30 0b 03 c0       	mov    eax,ds:0xc0030b30
c0020282:	83 ec 04             	sub    esp,0x4
c0020285:	50                   	push   eax
c0020286:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002028a:	53                   	push   ebx
c002028b:	e8 04 28 ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c0020290:	83 c4 10             	add    esp,0x10
c0020293:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020297:	83 ec 08             	sub    esp,0x8
c002029a:	6a 01                	push   0x1
c002029c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00202a0:	e8 53 28 ff ff       	call   c0012af8 <File::open(FileOpenMode)>
c00202a5:	83 c4 10             	add    esp,0x10
c00202a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00202ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00202ae:	83 c0 0c             	add    eax,0xc
c00202b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00202b3:	83 ec 0c             	sub    esp,0xc
c00202b6:	8d 54 24 14          	lea    edx,[esp+0x14]
c00202ba:	52                   	push   edx
c00202bb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00202bf:	52                   	push   edx
c00202c0:	6a 00                	push   0x0
c00202c2:	6a 04                	push   0x4
c00202c4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00202c8:	ff d0                	call   eax
c00202ca:	83 c4 20             	add    esp,0x20
c00202cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00202d1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00202d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00202db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00202df:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00202e2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00202e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00202e9:	83 ec 0c             	sub    esp,0xc
c00202ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00202f0:	e8 61 28 ff ff       	call   c0012b56 <File::close()>
c00202f5:	83 c4 10             	add    esp,0x10
c00202f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00202fc:	ba 00 00 00 00       	mov    edx,0x0
c0020301:	83 c4 28             	add    esp,0x28
c0020304:	5b                   	pop    ebx
c0020305:	c3                   	ret    

c0020306 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020306:	57                   	push   edi
c0020307:	56                   	push   esi
c0020308:	53                   	push   ebx
c0020309:	81 ec 50 02 00 00    	sub    esp,0x250
c002030f:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020317:	74 0a                	je     c0020323 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020319:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020321:	75 0a                	jne    c002032d <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020323:	b8 04 00 00 00       	mov    eax,0x4
c0020328:	e9 29 01 00 00       	jmp    c0020456 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002032d:	83 ec 08             	sub    esp,0x8
c0020330:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020337:	50                   	push   eax
c0020338:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002033f:	e8 6f 5d fe ff       	call   c00060b3 <f_readdir>
c0020344:	83 c4 10             	add    esp,0x10
c0020347:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c002034e:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020355:	83 ec 0c             	sub    esp,0xc
c0020358:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c002035f:	83 c0 1a             	add    eax,0x1a
c0020362:	50                   	push   eax
c0020363:	e8 04 04 fe ff       	call   c000076c <strlen>
c0020368:	83 c4 10             	add    esp,0x10
c002036b:	ba 00 00 00 00       	mov    edx,0x0
c0020370:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020374:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020378:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c002037f:	0f b6 c0             	movzx  eax,al
c0020382:	83 e0 10             	and    eax,0x10
c0020385:	74 07                	je     c002038e <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020387:	b8 02 00 00 00       	mov    eax,0x2
c002038c:	eb 05                	jmp    c0020393 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c002038e:	b8 01 00 00 00       	mov    eax,0x1
c0020393:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020397:	83 ec 08             	sub    esp,0x8
c002039a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00203a1:	83 c0 1a             	add    eax,0x1a
c00203a4:	50                   	push   eax
c00203a5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00203a9:	83 c0 10             	add    eax,0x10
c00203ac:	50                   	push   eax
c00203ad:	e8 5a 04 fe ff       	call   c000080c <strcpy>
c00203b2:	83 c4 10             	add    esp,0x10
c00203b5:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00203bc:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00203c3:	8d 44 24 04          	lea    eax,[esp+0x4]
c00203c7:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00203ce:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00203d5:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00203dc:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00203e3:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00203ea:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00203f1:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00203f8:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00203ff:	89 c6                	mov    esi,eax
c0020401:	89 d7                	mov    edi,edx
c0020403:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020405:	89 c8                	mov    eax,ecx
c0020407:	89 fa                	mov    edx,edi
c0020409:	89 f3                	mov    ebx,esi
c002040b:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020412:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020419:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020420:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020427:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002042d:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020434:	84 c0                	test   al,al
c0020436:	75 07                	jne    c002043f <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020438:	b8 07 00 00 00       	mov    eax,0x7
c002043d:	eb 17                	jmp    c0020456 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002043f:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020446:	85 c0                	test   eax,eax
c0020448:	75 07                	jne    c0020451 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c002044a:	b8 00 00 00 00       	mov    eax,0x0
c002044f:	eb 05                	jmp    c0020456 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020451:	b8 01 00 00 00       	mov    eax,0x1
c0020456:	81 c4 50 02 00 00    	add    esp,0x250
c002045c:	5b                   	pop    ebx
c002045d:	5e                   	pop    esi
c002045e:	5f                   	pop    edi
c002045f:	c3                   	ret    

c0020460 <FAT::read(void*, unsigned long, void*, int*)>:
c0020460:	83 ec 1c             	sub    esp,0x1c
c0020463:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020468:	74 07                	je     c0020471 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002046a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002046f:	75 07                	jne    c0020478 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020471:	b8 04 00 00 00       	mov    eax,0x4
c0020476:	eb 3d                	jmp    c00204b5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020478:	8d 44 24 08          	lea    eax,[esp+0x8]
c002047c:	50                   	push   eax
c002047d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020481:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020485:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020489:	e8 05 4f fe ff       	call   c0005393 <f_read>
c002048e:	83 c4 10             	add    esp,0x10
c0020491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020495:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020499:	89 c2                	mov    edx,eax
c002049b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002049f:	89 10                	mov    DWORD PTR [eax],edx
c00204a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204a5:	85 c0                	test   eax,eax
c00204a7:	75 07                	jne    c00204b0 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00204a9:	b8 00 00 00 00       	mov    eax,0x0
c00204ae:	eb 05                	jmp    c00204b5 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00204b0:	b8 01 00 00 00       	mov    eax,0x1
c00204b5:	83 c4 1c             	add    esp,0x1c
c00204b8:	c3                   	ret    
c00204b9:	90                   	nop

c00204ba <FAT::write(void*, unsigned long, void*, int*)>:
c00204ba:	83 ec 1c             	sub    esp,0x1c
c00204bd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00204c2:	74 07                	je     c00204cb <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00204c4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00204c9:	75 07                	jne    c00204d2 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00204cb:	b8 04 00 00 00       	mov    eax,0x4
c00204d0:	eb 3d                	jmp    c002050f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00204d2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00204d6:	50                   	push   eax
c00204d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00204db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00204df:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00204e3:	e8 2b 51 fe ff       	call   c0005613 <f_write>
c00204e8:	83 c4 10             	add    esp,0x10
c00204eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00204f3:	89 c2                	mov    edx,eax
c00204f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00204f9:	89 10                	mov    DWORD PTR [eax],edx
c00204fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00204ff:	85 c0                	test   eax,eax
c0020501:	75 07                	jne    c002050a <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020503:	b8 00 00 00 00       	mov    eax,0x0
c0020508:	eb 05                	jmp    c002050f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002050a:	b8 01 00 00 00       	mov    eax,0x1
c002050f:	83 c4 1c             	add    esp,0x1c
c0020512:	c3                   	ret    
c0020513:	90                   	nop

c0020514 <FAT::close(void*)>:
c0020514:	83 ec 1c             	sub    esp,0x1c
c0020517:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002051c:	75 07                	jne    c0020525 <FAT::close(void*)+0x11>
c002051e:	b8 04 00 00 00       	mov    eax,0x4
c0020523:	eb 36                	jmp    c002055b <FAT::close(void*)+0x47>
c0020525:	83 ec 0c             	sub    esp,0xc
c0020528:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002052c:	e8 78 55 fe ff       	call   c0005aa9 <f_close>
c0020531:	83 c4 10             	add    esp,0x10
c0020534:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020538:	83 ec 0c             	sub    esp,0xc
c002053b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002053f:	e8 65 f0 fe ff       	call   c000f5a9 <free>
c0020544:	83 c4 10             	add    esp,0x10
c0020547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002054b:	85 c0                	test   eax,eax
c002054d:	75 07                	jne    c0020556 <FAT::close(void*)+0x42>
c002054f:	b8 00 00 00 00       	mov    eax,0x0
c0020554:	eb 05                	jmp    c002055b <FAT::close(void*)+0x47>
c0020556:	b8 01 00 00 00       	mov    eax,0x1
c002055b:	83 c4 1c             	add    esp,0x1c
c002055e:	c3                   	ret    
c002055f:	90                   	nop

c0020560 <FAT::closeDir(void*)>:
c0020560:	83 ec 1c             	sub    esp,0x1c
c0020563:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020568:	75 07                	jne    c0020571 <FAT::closeDir(void*)+0x11>
c002056a:	b8 04 00 00 00       	mov    eax,0x4
c002056f:	eb 36                	jmp    c00205a7 <FAT::closeDir(void*)+0x47>
c0020571:	83 ec 0c             	sub    esp,0xc
c0020574:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020578:	e8 14 5b fe ff       	call   c0006091 <f_closedir>
c002057d:	83 c4 10             	add    esp,0x10
c0020580:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020584:	83 ec 0c             	sub    esp,0xc
c0020587:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002058b:	e8 19 f0 fe ff       	call   c000f5a9 <free>
c0020590:	83 c4 10             	add    esp,0x10
c0020593:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020597:	85 c0                	test   eax,eax
c0020599:	75 07                	jne    c00205a2 <FAT::closeDir(void*)+0x42>
c002059b:	b8 00 00 00 00       	mov    eax,0x0
c00205a0:	eb 05                	jmp    c00205a7 <FAT::closeDir(void*)+0x47>
c00205a2:	b8 01 00 00 00       	mov    eax,0x1
c00205a7:	83 c4 1c             	add    esp,0x1c
c00205aa:	c3                   	ret    
c00205ab:	90                   	nop

c00205ac <FAT::seek(void*, unsigned long long)>:
c00205ac:	83 ec 2c             	sub    esp,0x2c
c00205af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00205b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00205b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00205bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00205bf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00205c4:	75 07                	jne    c00205cd <FAT::seek(void*, unsigned long long)+0x21>
c00205c6:	b8 04 00 00 00       	mov    eax,0x4
c00205cb:	eb 2f                	jmp    c00205fc <FAT::seek(void*, unsigned long long)+0x50>
c00205cd:	83 ec 04             	sub    esp,0x4
c00205d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00205d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00205d8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00205dc:	e8 f7 54 fe ff       	call   c0005ad8 <f_lseek>
c00205e1:	83 c4 10             	add    esp,0x10
c00205e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00205e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00205ec:	85 c0                	test   eax,eax
c00205ee:	75 07                	jne    c00205f7 <FAT::seek(void*, unsigned long long)+0x4b>
c00205f0:	b8 00 00 00 00       	mov    eax,0x0
c00205f5:	eb 05                	jmp    c00205fc <FAT::seek(void*, unsigned long long)+0x50>
c00205f7:	b8 01 00 00 00       	mov    eax,0x1
c00205fc:	83 c4 2c             	add    esp,0x2c
c00205ff:	c3                   	ret    

c0020600 <fatWrapperReadDisk>:
c0020600:	83 ec 1c             	sub    esp,0x1c
c0020603:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020607:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002060b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002060f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020612:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020616:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002061a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002061f:	8b 04 85 e0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2420]
c0020626:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002062a:	83 ec 0c             	sub    esp,0xc
c002062d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020631:	52                   	push   edx
c0020632:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020636:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002063a:	50                   	push   eax
c002063b:	e8 3e 58 ff ff       	call   c0015e7e <LogicalDisk::read(unsigned long long, int, void*)>
c0020640:	83 c4 20             	add    esp,0x20
c0020643:	83 c4 1c             	add    esp,0x1c
c0020646:	c3                   	ret    

c0020647 <fatWrapperWriteDisk>:
c0020647:	83 ec 1c             	sub    esp,0x1c
c002064a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002064e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020652:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020656:	89 04 24             	mov    DWORD PTR [esp],eax
c0020659:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002065d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020661:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020666:	8b 04 85 e0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2420]
c002066d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020671:	83 ec 0c             	sub    esp,0xc
c0020674:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020678:	52                   	push   edx
c0020679:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002067d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020681:	50                   	push   eax
c0020682:	e8 63 58 ff ff       	call   c0015eea <LogicalDisk::write(unsigned long long, int, void*)>
c0020687:	83 c4 20             	add    esp,0x20
c002068a:	83 c4 1c             	add    esp,0x1c
c002068d:	c3                   	ret    

c002068e <fatWrapperIoctl>:
c002068e:	53                   	push   ebx
c002068f:	83 ec 28             	sub    esp,0x28
c0020692:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020696:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002069a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002069e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00206a2:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00206a7:	75 31                	jne    c00206da <fatWrapperIoctl+0x4c>
c00206a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206ad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00206b1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00206b6:	8b 04 85 e0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2420]
c00206bd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00206c3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00206c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00206cd:	66 89 02             	mov    WORD PTR [edx],ax
c00206d0:	b8 00 00 00 00       	mov    eax,0x0
c00206d5:	e9 b2 00 00 00       	jmp    c002078c <fatWrapperIoctl+0xfe>
c00206da:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00206df:	75 6a                	jne    c002074b <fatWrapperIoctl+0xbd>
c00206e1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00206e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00206e9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00206ee:	8b 04 85 e0 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2420]
c00206f5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00206fb:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020701:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020707:	89 c8                	mov    eax,ecx
c0020709:	89 da                	mov    edx,ebx
c002070b:	0f a4 c2 0a          	shld   edx,eax,0xa
c002070f:	c1 e0 0a             	shl    eax,0xa
c0020712:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020717:	8b 0c 8d e0 db 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd2420]
c002071e:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020724:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c002072a:	89 cb                	mov    ebx,ecx
c002072c:	c1 fb 1f             	sar    ebx,0x1f
c002072f:	53                   	push   ebx
c0020730:	51                   	push   ecx
c0020731:	52                   	push   edx
c0020732:	50                   	push   eax
c0020733:	e8 2c 5e 00 00       	call   c0026564 <__udivdi3>
c0020738:	83 c4 10             	add    esp,0x10
c002073b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002073f:	89 01                	mov    DWORD PTR [ecx],eax
c0020741:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020744:	b8 00 00 00 00       	mov    eax,0x0
c0020749:	eb 41                	jmp    c002078c <fatWrapperIoctl+0xfe>
c002074b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020750:	75 07                	jne    c0020759 <fatWrapperIoctl+0xcb>
c0020752:	b8 00 00 00 00       	mov    eax,0x0
c0020757:	eb 33                	jmp    c002078c <fatWrapperIoctl+0xfe>
c0020759:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c002075e:	75 19                	jne    c0020779 <fatWrapperIoctl+0xeb>
c0020760:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020764:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020768:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002076c:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020772:	b8 00 00 00 00       	mov    eax,0x0
c0020777:	eb 13                	jmp    c002078c <fatWrapperIoctl+0xfe>
c0020779:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002077e:	75 07                	jne    c0020787 <fatWrapperIoctl+0xf9>
c0020780:	b8 00 00 00 00       	mov    eax,0x0
c0020785:	eb 05                	jmp    c002078c <fatWrapperIoctl+0xfe>
c0020787:	b8 04 00 00 00       	mov    eax,0x4
c002078c:	83 c4 28             	add    esp,0x28
c002078f:	5b                   	pop    ebx
c0020790:	c3                   	ret    
c0020791:	90                   	nop

c0020792 <FAT::FAT()>:
c0020792:	83 ec 1c             	sub    esp,0x1c
c0020795:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020799:	83 ec 0c             	sub    esp,0xc
c002079c:	50                   	push   eax
c002079d:	e8 9e 20 ff ff       	call   c0012840 <Filesystem::Filesystem()>
c00207a2:	83 c4 10             	add    esp,0x10
c00207a5:	ba d4 ba 02 c0       	mov    edx,0xc002bad4
c00207aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207ae:	89 10                	mov    DWORD PTR [eax],edx
c00207b0:	c7 05 00 0c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030c00,0x0
c00207ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00207c2:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00207c7:	7f 15                	jg     c00207de <FAT::FAT()+0x4c>
c00207c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00207cd:	c7 04 85 20 0c 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf3e0],0xffffffff
c00207d8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00207dc:	eb e4                	jmp    c00207c2 <FAT::FAT()+0x30>
c00207de:	90                   	nop
c00207df:	83 c4 1c             	add    esp,0x1c
c00207e2:	c3                   	ret    
c00207e3:	90                   	nop

c00207e4 <FAT::fixFilepath(char*)>:
c00207e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207e8:	8a 00                	mov    al,BYTE PTR [eax]
c00207ea:	3c 40                	cmp    al,0x40
c00207ec:	7e 2c                	jle    c002081a <FAT::fixFilepath(char*)+0x36>
c00207ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207f2:	8a 00                	mov    al,BYTE PTR [eax]
c00207f4:	83 e8 41             	sub    eax,0x41
c00207f7:	88 c2                	mov    dl,al
c00207f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00207fd:	88 10                	mov    BYTE PTR [eax],dl
c00207ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020803:	8a 00                	mov    al,BYTE PTR [eax]
c0020805:	0f be c0             	movsx  eax,al
c0020808:	8b 04 85 20 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3e0]
c002080f:	83 c0 30             	add    eax,0x30
c0020812:	88 c2                	mov    dl,al
c0020814:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020818:	88 10                	mov    BYTE PTR [eax],dl
c002081a:	90                   	nop
c002081b:	c3                   	ret    

c002081c <FAT::open(char const*, void**, FileOpenMode)>:
c002081c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020822:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002082a:	74 0a                	je     c0020836 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c002082c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020834:	75 0a                	jne    c0020840 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020836:	b8 04 00 00 00       	mov    eax,0x4
c002083b:	e9 fd 00 00 00       	jmp    c002093d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020840:	83 ec 08             	sub    esp,0x8
c0020843:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002084a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002084e:	50                   	push   eax
c002084f:	e8 b8 ff fd ff       	call   c000080c <strcpy>
c0020854:	83 c4 10             	add    esp,0x10
c0020857:	83 ec 08             	sub    esp,0x8
c002085a:	8d 44 24 10          	lea    eax,[esp+0x10]
c002085e:	50                   	push   eax
c002085f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020866:	e8 79 ff ff ff       	call   c00207e4 <FAT::fixFilepath(char*)>
c002086b:	83 c4 10             	add    esp,0x10
c002086e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020876:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002087d:	83 e0 01             	and    eax,0x1
c0020880:	74 08                	je     c002088a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020882:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002088a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020891:	83 e0 04             	and    eax,0x4
c0020894:	74 10                	je     c00208a6 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020896:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002089e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00208a6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00208ad:	83 e0 02             	and    eax,0x2
c00208b0:	74 08                	je     c00208ba <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00208b2:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00208ba:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00208c1:	83 e0 08             	and    eax,0x8
c00208c4:	74 08                	je     c00208ce <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00208c6:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00208ce:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00208d5:	83 e0 10             	and    eax,0x10
c00208d8:	74 08                	je     c00208e2 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00208da:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00208e2:	83 ec 0c             	sub    esp,0xc
c00208e5:	68 50 02 00 00       	push   0x250
c00208ea:	e8 aa ec fe ff       	call   c000f599 <malloc>
c00208ef:	83 c4 10             	add    esp,0x10
c00208f2:	89 c2                	mov    edx,eax
c00208f4:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00208fb:	89 10                	mov    DWORD PTR [eax],edx
c00208fd:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020905:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002090c:	8b 00                	mov    eax,DWORD PTR [eax]
c002090e:	83 ec 04             	sub    esp,0x4
c0020911:	52                   	push   edx
c0020912:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020916:	52                   	push   edx
c0020917:	50                   	push   eax
c0020918:	e8 3a 46 fe ff       	call   c0004f57 <f_open>
c002091d:	83 c4 10             	add    esp,0x10
c0020920:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020927:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c002092f:	74 07                	je     c0020938 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020931:	b8 01 00 00 00       	mov    eax,0x1
c0020936:	eb 05                	jmp    c002093d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020938:	b8 00 00 00 00       	mov    eax,0x0
c002093d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020943:	c3                   	ret    

c0020944 <FAT::openDir(char const*, void**)>:
c0020944:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002094a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020952:	74 0a                	je     c002095e <FAT::openDir(char const*, void**)+0x1a>
c0020954:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002095c:	75 07                	jne    c0020965 <FAT::openDir(char const*, void**)+0x21>
c002095e:	b8 04 00 00 00       	mov    eax,0x4
c0020963:	eb 7d                	jmp    c00209e2 <FAT::openDir(char const*, void**)+0x9e>
c0020965:	83 ec 08             	sub    esp,0x8
c0020968:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002096f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020973:	50                   	push   eax
c0020974:	e8 93 fe fd ff       	call   c000080c <strcpy>
c0020979:	83 c4 10             	add    esp,0x10
c002097c:	83 ec 08             	sub    esp,0x8
c002097f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020983:	50                   	push   eax
c0020984:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002098b:	e8 54 fe ff ff       	call   c00207e4 <FAT::fixFilepath(char*)>
c0020990:	83 c4 10             	add    esp,0x10
c0020993:	83 ec 0c             	sub    esp,0xc
c0020996:	6a 4c                	push   0x4c
c0020998:	e8 fc eb fe ff       	call   c000f599 <malloc>
c002099d:	83 c4 10             	add    esp,0x10
c00209a0:	89 c2                	mov    edx,eax
c00209a2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00209a9:	89 10                	mov    DWORD PTR [eax],edx
c00209ab:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00209b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00209b4:	83 ec 08             	sub    esp,0x8
c00209b7:	8d 54 24 14          	lea    edx,[esp+0x14]
c00209bb:	52                   	push   edx
c00209bc:	50                   	push   eax
c00209bd:	e8 cd 55 fe ff       	call   c0005f8f <f_opendir>
c00209c2:	83 c4 10             	add    esp,0x10
c00209c5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00209cc:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00209d4:	74 07                	je     c00209dd <FAT::openDir(char const*, void**)+0x99>
c00209d6:	b8 01 00 00 00       	mov    eax,0x1
c00209db:	eb 05                	jmp    c00209e2 <FAT::openDir(char const*, void**)+0x9e>
c00209dd:	b8 00 00 00 00       	mov    eax,0x0
c00209e2:	81 c4 1c 01 00 00    	add    esp,0x11c
c00209e8:	c3                   	ret    
c00209e9:	90                   	nop

c00209ea <FAT::stat(char const*, unsigned long long*, bool*)>:
c00209ea:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00209f0:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00209f8:	75 0a                	jne    c0020a04 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00209fa:	b8 04 00 00 00       	mov    eax,0x4
c00209ff:	e9 c9 00 00 00       	jmp    c0020acd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020a04:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020a0c:	75 0a                	jne    c0020a18 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020a0e:	b8 04 00 00 00       	mov    eax,0x4
c0020a13:	e9 b5 00 00 00       	jmp    c0020acd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020a18:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020a20:	75 0a                	jne    c0020a2c <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020a22:	b8 04 00 00 00       	mov    eax,0x4
c0020a27:	e9 a1 00 00 00       	jmp    c0020acd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020a2c:	83 ec 08             	sub    esp,0x8
c0020a2f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020a36:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020a3d:	50                   	push   eax
c0020a3e:	e8 c9 fd fd ff       	call   c000080c <strcpy>
c0020a43:	83 c4 10             	add    esp,0x10
c0020a46:	83 ec 08             	sub    esp,0x8
c0020a49:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020a50:	50                   	push   eax
c0020a51:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020a58:	e8 87 fd ff ff       	call   c00207e4 <FAT::fixFilepath(char*)>
c0020a5d:	83 c4 10             	add    esp,0x10
c0020a60:	83 ec 08             	sub    esp,0x8
c0020a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020a67:	50                   	push   eax
c0020a68:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020a6f:	50                   	push   eax
c0020a70:	e8 d9 56 fe ff       	call   c000614e <f_stat>
c0020a75:	83 c4 10             	add    esp,0x10
c0020a78:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020a7f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020a86:	85 c0                	test   eax,eax
c0020a88:	74 07                	je     c0020a91 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020a8a:	83 f8 04             	cmp    eax,0x4
c0020a8d:	74 32                	je     c0020ac1 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020a8f:	eb 37                	jmp    c0020ac8 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020a91:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020a95:	0f b6 c0             	movzx  eax,al
c0020a98:	83 e0 10             	and    eax,0x10
c0020a9b:	0f 95 c2             	setne  dl
c0020a9e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020aa5:	88 10                	mov    BYTE PTR [eax],dl
c0020aa7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020aaa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020aae:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020ab5:	89 01                	mov    DWORD PTR [ecx],eax
c0020ab7:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020aba:	b8 00 00 00 00       	mov    eax,0x0
c0020abf:	eb 0c                	jmp    c0020acd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ac1:	b8 02 00 00 00       	mov    eax,0x2
c0020ac6:	eb 05                	jmp    c0020acd <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ac8:	b8 01 00 00 00       	mov    eax,0x1
c0020acd:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020ad3:	c3                   	ret    

c0020ad4 <FAT::unlink(char const*)>:
c0020ad4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ada:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020ae2:	75 07                	jne    c0020aeb <FAT::unlink(char const*)+0x17>
c0020ae4:	b8 04 00 00 00       	mov    eax,0x4
c0020ae9:	eb 5c                	jmp    c0020b47 <FAT::unlink(char const*)+0x73>
c0020aeb:	83 ec 08             	sub    esp,0x8
c0020aee:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020af5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020af9:	50                   	push   eax
c0020afa:	e8 0d fd fd ff       	call   c000080c <strcpy>
c0020aff:	83 c4 10             	add    esp,0x10
c0020b02:	83 ec 08             	sub    esp,0x8
c0020b05:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020b09:	50                   	push   eax
c0020b0a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b11:	e8 ce fc ff ff       	call   c00207e4 <FAT::fixFilepath(char*)>
c0020b16:	83 c4 10             	add    esp,0x10
c0020b19:	83 ec 0c             	sub    esp,0xc
c0020b1c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020b20:	50                   	push   eax
c0020b21:	e8 7a 59 fe ff       	call   c00064a0 <f_unlink>
c0020b26:	83 c4 10             	add    esp,0x10
c0020b29:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020b30:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020b37:	85 c0                	test   eax,eax
c0020b39:	75 07                	jne    c0020b42 <FAT::unlink(char const*)+0x6e>
c0020b3b:	b8 00 00 00 00       	mov    eax,0x0
c0020b40:	eb 05                	jmp    c0020b47 <FAT::unlink(char const*)+0x73>
c0020b42:	b8 01 00 00 00       	mov    eax,0x1
c0020b47:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b4d:	c3                   	ret    

c0020b4e <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020b4e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020b54:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020b5b:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020b62:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020b66:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020b6a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020b72:	75 0a                	jne    c0020b7e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020b74:	b8 04 00 00 00       	mov    eax,0x4
c0020b79:	e9 1c 01 00 00       	jmp    c0020c9a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020b7e:	83 ec 08             	sub    esp,0x8
c0020b81:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020b88:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020b8c:	50                   	push   eax
c0020b8d:	e8 7a fc fd ff       	call   c000080c <strcpy>
c0020b92:	83 c4 10             	add    esp,0x10
c0020b95:	83 ec 08             	sub    esp,0x8
c0020b98:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020b9c:	50                   	push   eax
c0020b9d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020ba4:	e8 3b fc ff ff       	call   c00207e4 <FAT::fixFilepath(char*)>
c0020ba9:	83 c4 10             	add    esp,0x10
c0020bac:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020bb4:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020bbc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020bc1:	83 e0 01             	and    eax,0x1
c0020bc4:	74 08                	je     c0020bce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020bc6:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020bce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020bd3:	83 e0 02             	and    eax,0x2
c0020bd6:	74 08                	je     c0020be0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020bd8:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020be0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020be5:	83 e0 04             	and    eax,0x4
c0020be8:	74 08                	je     c0020bf2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020bea:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020bf2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020bf7:	83 e0 08             	and    eax,0x8
c0020bfa:	74 08                	je     c0020c04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020bfc:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020c04:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c09:	83 e0 01             	and    eax,0x1
c0020c0c:	74 08                	je     c0020c16 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020c0e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020c16:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c1b:	83 e0 02             	and    eax,0x2
c0020c1e:	74 08                	je     c0020c28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020c20:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020c28:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c2d:	83 e0 04             	and    eax,0x4
c0020c30:	74 08                	je     c0020c3a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020c32:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020c3a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020c3f:	83 e0 08             	and    eax,0x8
c0020c42:	74 08                	je     c0020c4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020c44:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020c4c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020c53:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020c5a:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020c62:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020c6a:	83 ec 04             	sub    esp,0x4
c0020c6d:	52                   	push   edx
c0020c6e:	50                   	push   eax
c0020c6f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020c73:	50                   	push   eax
c0020c74:	e8 c9 5e fe ff       	call   c0006b42 <f_chmod>
c0020c79:	83 c4 10             	add    esp,0x10
c0020c7c:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020c83:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020c8a:	85 c0                	test   eax,eax
c0020c8c:	75 07                	jne    c0020c95 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020c8e:	b8 00 00 00 00       	mov    eax,0x0
c0020c93:	eb 05                	jmp    c0020c9a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020c95:	b8 01 00 00 00       	mov    eax,0x1
c0020c9a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020ca0:	c3                   	ret    
c0020ca1:	90                   	nop

c0020ca2 <FAT::rename(char const*, char const*)>:
c0020ca2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020ca8:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020cb0:	74 0a                	je     c0020cbc <FAT::rename(char const*, char const*)+0x1a>
c0020cb2:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020cba:	75 0a                	jne    c0020cc6 <FAT::rename(char const*, char const*)+0x24>
c0020cbc:	b8 04 00 00 00       	mov    eax,0x4
c0020cc1:	e9 98 00 00 00       	jmp    c0020d5e <FAT::rename(char const*, char const*)+0xbc>
c0020cc6:	83 ec 08             	sub    esp,0x8
c0020cc9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020cd0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020cd7:	50                   	push   eax
c0020cd8:	e8 2f fb fd ff       	call   c000080c <strcpy>
c0020cdd:	83 c4 10             	add    esp,0x10
c0020ce0:	83 ec 08             	sub    esp,0x8
c0020ce3:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020cea:	50                   	push   eax
c0020ceb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020cf2:	e8 ed fa ff ff       	call   c00207e4 <FAT::fixFilepath(char*)>
c0020cf7:	83 c4 10             	add    esp,0x10
c0020cfa:	83 ec 08             	sub    esp,0x8
c0020cfd:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020d04:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d08:	50                   	push   eax
c0020d09:	e8 fe fa fd ff       	call   c000080c <strcpy>
c0020d0e:	83 c4 10             	add    esp,0x10
c0020d11:	83 ec 08             	sub    esp,0x8
c0020d14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d18:	50                   	push   eax
c0020d19:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020d20:	e8 bf fa ff ff       	call   c00207e4 <FAT::fixFilepath(char*)>
c0020d25:	83 c4 10             	add    esp,0x10
c0020d28:	83 ec 08             	sub    esp,0x8
c0020d2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d2f:	50                   	push   eax
c0020d30:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020d37:	50                   	push   eax
c0020d38:	e8 12 5b fe ff       	call   c000684f <f_rename>
c0020d3d:	83 c4 10             	add    esp,0x10
c0020d40:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020d47:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020d4e:	85 c0                	test   eax,eax
c0020d50:	75 07                	jne    c0020d59 <FAT::rename(char const*, char const*)+0xb7>
c0020d52:	b8 00 00 00 00       	mov    eax,0x0
c0020d57:	eb 05                	jmp    c0020d5e <FAT::rename(char const*, char const*)+0xbc>
c0020d59:	b8 01 00 00 00       	mov    eax,0x1
c0020d5e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020d64:	c3                   	ret    
c0020d65:	90                   	nop

c0020d66 <FAT::mkdir(char const*)>:
c0020d66:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020d6c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020d74:	75 07                	jne    c0020d7d <FAT::mkdir(char const*)+0x17>
c0020d76:	b8 04 00 00 00       	mov    eax,0x4
c0020d7b:	eb 5c                	jmp    c0020dd9 <FAT::mkdir(char const*)+0x73>
c0020d7d:	83 ec 08             	sub    esp,0x8
c0020d80:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d87:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d8b:	50                   	push   eax
c0020d8c:	e8 7b fa fd ff       	call   c000080c <strcpy>
c0020d91:	83 c4 10             	add    esp,0x10
c0020d94:	83 ec 08             	sub    esp,0x8
c0020d97:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d9b:	50                   	push   eax
c0020d9c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020da3:	e8 3c fa ff ff       	call   c00207e4 <FAT::fixFilepath(char*)>
c0020da8:	83 c4 10             	add    esp,0x10
c0020dab:	83 ec 0c             	sub    esp,0xc
c0020dae:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020db2:	50                   	push   eax
c0020db3:	e8 6b 58 fe ff       	call   c0006623 <f_mkdir>
c0020db8:	83 c4 10             	add    esp,0x10
c0020dbb:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020dc2:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020dc9:	85 c0                	test   eax,eax
c0020dcb:	75 07                	jne    c0020dd4 <FAT::mkdir(char const*)+0x6e>
c0020dcd:	b8 00 00 00 00       	mov    eax,0x0
c0020dd2:	eb 05                	jmp    c0020dd9 <FAT::mkdir(char const*)+0x73>
c0020dd4:	b8 01 00 00 00       	mov    eax,0x1
c0020dd9:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020ddf:	c3                   	ret    

c0020de0 <FAT::exists(char const*)>:
c0020de0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020de6:	83 ec 08             	sub    esp,0x8
c0020de9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020df0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020df4:	50                   	push   eax
c0020df5:	e8 12 fa fd ff       	call   c000080c <strcpy>
c0020dfa:	83 c4 10             	add    esp,0x10
c0020dfd:	83 ec 08             	sub    esp,0x8
c0020e00:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020e04:	50                   	push   eax
c0020e05:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020e0c:	e8 d3 f9 ff ff       	call   c00207e4 <FAT::fixFilepath(char*)>
c0020e11:	83 c4 10             	add    esp,0x10
c0020e14:	83 ec 08             	sub    esp,0x8
c0020e17:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020e1e:	50                   	push   eax
c0020e1f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020e23:	50                   	push   eax
c0020e24:	e8 25 53 fe ff       	call   c000614e <f_stat>
c0020e29:	83 c4 10             	add    esp,0x10
c0020e2c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020e33:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020e3a:	85 c0                	test   eax,eax
c0020e3c:	75 04                	jne    c0020e42 <FAT::exists(char const*)+0x62>
c0020e3e:	b0 01                	mov    al,0x1
c0020e40:	eb 02                	jmp    c0020e44 <FAT::exists(char const*)+0x64>
c0020e42:	b0 00                	mov    al,0x0
c0020e44:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020e4a:	c3                   	ret    
c0020e4b:	90                   	nop

c0020e4c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020e4c:	b8 08 00 00 00       	mov    eax,0x8
c0020e51:	c3                   	ret    

c0020e52 <ISO9660::seek(void*, unsigned long long)>:
c0020e52:	53                   	push   ebx
c0020e53:	b8 04 00 00 00       	mov    eax,0x4
c0020e58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020e5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020e60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020e64:	85 d2                	test   edx,edx
c0020e66:	74 17                	je     c0020e7f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020e68:	89 c8                	mov    eax,ecx
c0020e6a:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020e6d:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020e70:	b8 01 00 00 00       	mov    eax,0x1
c0020e75:	73 08                	jae    c0020e7f <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020e77:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0020e7a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0020e7d:	31 c0                	xor    eax,eax
c0020e7f:	5b                   	pop    ebx
c0020e80:	c3                   	ret    
c0020e81:	90                   	nop

c0020e82 <ISO9660::tell(void*, unsigned long long*)>:
c0020e82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020e86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e8a:	85 d2                	test   edx,edx
c0020e8c:	74 12                	je     c0020ea0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020e8e:	85 c0                	test   eax,eax
c0020e90:	74 0e                	je     c0020ea0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0020e92:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0020e95:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0020e98:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020e9b:	89 10                	mov    DWORD PTR [eax],edx
c0020e9d:	31 c0                	xor    eax,eax
c0020e9f:	c3                   	ret    
c0020ea0:	b8 04 00 00 00       	mov    eax,0x4
c0020ea5:	c3                   	ret    

c0020ea6 <ISO9660::getName()>:
c0020ea6:	b8 34 bb 02 c0       	mov    eax,0xc002bb34
c0020eab:	c3                   	ret    

c0020eac <ISO9660::stat(void*, unsigned long long*)>:
c0020eac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020eb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020eb4:	85 d2                	test   edx,edx
c0020eb6:	74 12                	je     c0020eca <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020eb8:	85 c0                	test   eax,eax
c0020eba:	74 0e                	je     c0020eca <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020ebc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0020ebf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020ec2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020ec5:	89 10                	mov    DWORD PTR [eax],edx
c0020ec7:	31 c0                	xor    eax,eax
c0020ec9:	c3                   	ret    
c0020eca:	b8 04 00 00 00       	mov    eax,0x4
c0020ecf:	c3                   	ret    

c0020ed0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0020ed0:	b8 01 00 00 00       	mov    eax,0x1
c0020ed5:	c3                   	ret    

c0020ed6 <ISO9660::unlink(char const*)>:
c0020ed6:	b8 01 00 00 00       	mov    eax,0x1
c0020edb:	c3                   	ret    

c0020edc <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020edc:	b8 01 00 00 00       	mov    eax,0x1
c0020ee1:	c3                   	ret    

c0020ee2 <ISO9660::rename(char const*, char const*)>:
c0020ee2:	b8 01 00 00 00       	mov    eax,0x1
c0020ee7:	c3                   	ret    

c0020ee8 <ISO9660::mkdir(char const*)>:
c0020ee8:	b8 01 00 00 00       	mov    eax,0x1
c0020eed:	c3                   	ret    

c0020eee <ISO9660::close(void*)>:
c0020eee:	83 ec 0c             	sub    esp,0xc
c0020ef1:	b8 04 00 00 00       	mov    eax,0x4
c0020ef6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020efa:	85 d2                	test   edx,edx
c0020efc:	74 0e                	je     c0020f0c <ISO9660::close(void*)+0x1e>
c0020efe:	83 ec 0c             	sub    esp,0xc
c0020f01:	52                   	push   edx
c0020f02:	e8 a2 e6 fe ff       	call   c000f5a9 <free>
c0020f07:	83 c4 10             	add    esp,0x10
c0020f0a:	31 c0                	xor    eax,eax
c0020f0c:	83 c4 0c             	add    esp,0xc
c0020f0f:	c3                   	ret    

c0020f10 <ISO9660::closeDir(void*)>:
c0020f10:	83 ec 0c             	sub    esp,0xc
c0020f13:	b8 04 00 00 00       	mov    eax,0x4
c0020f18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020f1c:	85 d2                	test   edx,edx
c0020f1e:	74 0e                	je     c0020f2e <ISO9660::closeDir(void*)+0x1e>
c0020f20:	83 ec 0c             	sub    esp,0xc
c0020f23:	52                   	push   edx
c0020f24:	e8 80 e6 fe ff       	call   c000f5a9 <free>
c0020f29:	83 c4 10             	add    esp,0x10
c0020f2c:	31 c0                	xor    eax,eax
c0020f2e:	83 c4 0c             	add    esp,0xc
c0020f31:	c3                   	ret    

c0020f32 <ISO9660::~ISO9660()>:
c0020f32:	83 ec 0c             	sub    esp,0xc
c0020f35:	ba 58 bb 02 c0       	mov    edx,0xc002bb58
c0020f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f3e:	89 10                	mov    DWORD PTR [eax],edx
c0020f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f44:	83 ec 0c             	sub    esp,0xc
c0020f47:	50                   	push   eax
c0020f48:	e8 17 19 ff ff       	call   c0012864 <Filesystem::~Filesystem()>
c0020f4d:	83 c4 10             	add    esp,0x10
c0020f50:	90                   	nop
c0020f51:	83 c4 0c             	add    esp,0xc
c0020f54:	c3                   	ret    
c0020f55:	90                   	nop

c0020f56 <ISO9660::~ISO9660()>:
c0020f56:	83 ec 0c             	sub    esp,0xc
c0020f59:	83 ec 0c             	sub    esp,0xc
c0020f5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f60:	e8 cd ff ff ff       	call   c0020f32 <ISO9660::~ISO9660()>
c0020f65:	83 c4 10             	add    esp,0x10
c0020f68:	83 ec 08             	sub    esp,0x8
c0020f6b:	6a 08                	push   0x8
c0020f6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f71:	e8 e7 14 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0020f76:	83 c4 10             	add    esp,0x10
c0020f79:	83 c4 0c             	add    esp,0xc
c0020f7c:	c3                   	ret    

c0020f7d <__memmem(unsigned char*, int, unsigned char*, int)>:
c0020f7d:	55                   	push   ebp
c0020f7e:	31 c9                	xor    ecx,ecx
c0020f80:	57                   	push   edi
c0020f81:	56                   	push   esi
c0020f82:	53                   	push   ebx
c0020f83:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0020f87:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0020f8b:	89 eb                	mov    ebx,ebp
c0020f8d:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0020f91:	39 ce                	cmp    esi,ecx
c0020f93:	7e 17                	jle    c0020fac <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0020f95:	31 d2                	xor    edx,edx
c0020f97:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0020f9b:	7d 13                	jge    c0020fb0 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0020f9d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0020fa1:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020fa4:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0020fa7:	75 0d                	jne    c0020fb6 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0020fa9:	42                   	inc    edx
c0020faa:	eb eb                	jmp    c0020f97 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0020fac:	31 c0                	xor    eax,eax
c0020fae:	eb 0a                	jmp    c0020fba <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020fb0:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020fb4:	eb 04                	jmp    c0020fba <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020fb6:	41                   	inc    ecx
c0020fb7:	43                   	inc    ebx
c0020fb8:	eb d7                	jmp    c0020f91 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020fba:	5b                   	pop    ebx
c0020fbb:	5e                   	pop    esi
c0020fbc:	5f                   	pop    edi
c0020fbd:	5d                   	pop    ebp
c0020fbe:	c3                   	ret    

c0020fbf <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0020fbf:	57                   	push   edi
c0020fc0:	56                   	push   esi
c0020fc1:	53                   	push   ebx
c0020fc2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020fca:	39 0d 00 0d 03 c0    	cmp    DWORD PTR ds:0xc0030d00,ecx
c0020fd0:	75 08                	jne    c0020fda <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0020fd2:	38 05 74 cb 02 c0    	cmp    BYTE PTR ds:0xc002cb74,al
c0020fd8:	74 2b                	je     c0021005 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0020fda:	83 ec 0c             	sub    esp,0xc
c0020fdd:	a2 74 cb 02 c0       	mov    ds:0xc002cb74,al
c0020fe2:	68 20 0d 03 c0       	push   0xc0030d20
c0020fe7:	0f be c0             	movsx  eax,al
c0020fea:	6a 01                	push   0x1
c0020fec:	89 0d 00 0d 03 c0    	mov    DWORD PTR ds:0xc0030d00,ecx
c0020ff2:	31 db                	xor    ebx,ebx
c0020ff4:	53                   	push   ebx
c0020ff5:	51                   	push   ecx
c0020ff6:	ff 34 85 dc da 02 c0 	push   DWORD PTR [eax*4-0x3ffd2524]
c0020ffd:	e8 7c 4e ff ff       	call   c0015e7e <LogicalDisk::read(unsigned long long, int, void*)>
c0021002:	83 c4 20             	add    esp,0x20
c0021005:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021009:	be 20 0d 03 c0       	mov    esi,0xc0030d20
c002100e:	b9 00 08 00 00       	mov    ecx,0x800
c0021013:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021015:	5b                   	pop    ebx
c0021016:	5e                   	pop    esi
c0021017:	5f                   	pop    edi
c0021018:	c3                   	ret    
c0021019:	90                   	nop

c002101a <ISO9660::tryMount(LogicalDisk*, int)>:
c002101a:	81 ec 10 08 00 00    	sub    esp,0x810
c0021020:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021027:	83 c0 41             	add    eax,0x41
c002102a:	0f be c0             	movsx  eax,al
c002102d:	50                   	push   eax
c002102e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021032:	50                   	push   eax
c0021033:	6a 10                	push   0x10
c0021035:	e8 85 ff ff ff       	call   c0020fbf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002103a:	83 c4 10             	add    esp,0x10
c002103d:	31 c0                	xor    eax,eax
c002103f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021044:	75 1d                	jne    c0021063 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021046:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002104b:	75 16                	jne    c0021063 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002104d:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021052:	75 0f                	jne    c0021063 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021054:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021059:	75 08                	jne    c0021063 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002105b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021060:	0f 94 c0             	sete   al
c0021063:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021069:	c3                   	ret    

c002106a <ISO9660::read(void*, unsigned long, void*, int*)>:
c002106a:	55                   	push   ebp
c002106b:	57                   	push   edi
c002106c:	56                   	push   esi
c002106d:	53                   	push   ebx
c002106e:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021074:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002107b:	85 ed                	test   ebp,ebp
c002107d:	0f 84 da 01 00 00    	je     c002125d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021083:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002108b:	0f 84 cc 01 00 00    	je     c002125d <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021091:	b8 01 00 00 00       	mov    eax,0x1
c0021096:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002109a:	0f 85 c2 01 00 00    	jne    c0021262 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00210a0:	31 d2                	xor    edx,edx
c00210a2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00210a9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00210ac:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00210af:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00210b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00210b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00210b9:	01 c8                	add    eax,ecx
c00210bb:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00210be:	11 da                	adc    edx,ebx
c00210c0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00210c4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00210c8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00210cc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00210d0:	19 d7                	sbb    edi,edx
c00210d2:	72 11                	jb     c00210e5 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c00210d4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00210d7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00210db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00210df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00210e3:	eb 0c                	jmp    c00210f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00210e5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00210e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00210ed:	29 ce                	sub    esi,ecx
c00210ef:	19 df                	sbb    edi,ebx
c00210f1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00210f4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00210f7:	0f a4 c2 0b          	shld   edx,eax,0xb
c00210fb:	c1 e0 0b             	shl    eax,0xb
c00210fe:	01 c8                	add    eax,ecx
c0021100:	11 da                	adc    edx,ebx
c0021102:	89 04 24             	mov    DWORD PTR [esp],eax
c0021105:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021109:	51                   	push   ecx
c002110a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002110e:	50                   	push   eax
c002110f:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021113:	53                   	push   ebx
c0021114:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021118:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002111c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021120:	50                   	push   eax
c0021121:	e8 99 fe ff ff       	call   c0020fbf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021126:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021129:	b8 00 08 00 00       	mov    eax,0x800
c002112e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021134:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021138:	29 d0                	sub    eax,edx
c002113a:	83 c4 10             	add    esp,0x10
c002113d:	89 f9                	mov    ecx,edi
c002113f:	39 c6                	cmp    esi,eax
c0021141:	83 d9 00             	sbb    ecx,0x0
c0021144:	7d 1b                	jge    c0021161 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021146:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002114b:	75 12                	jne    c002115f <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c002114d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021154:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002115a:	e9 fa 00 00 00       	jmp    c0021259 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c002115f:	89 f0                	mov    eax,esi
c0021161:	01 d3                	add    ebx,edx
c0021163:	31 d2                	xor    edx,edx
c0021165:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021169:	39 c2                	cmp    edx,eax
c002116b:	7d 14                	jge    c0021181 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c002116d:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021174:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021178:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002117b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002117e:	42                   	inc    edx
c002117f:	eb e8                	jmp    c0021169 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021181:	89 c2                	mov    edx,eax
c0021183:	85 c0                	test   eax,eax
c0021185:	79 02                	jns    c0021189 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021187:	31 d2                	xor    edx,edx
c0021189:	01 c2                	add    edx,eax
c002118b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c002118e:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021195:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021199:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c002119d:	99                   	cdq    
c002119e:	01 c1                	add    ecx,eax
c00211a0:	11 d3                	adc    ebx,edx
c00211a2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00211a6:	29 c6                	sub    esi,eax
c00211a8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00211ac:	19 d7                	sbb    edi,edx
c00211ae:	89 34 24             	mov    DWORD PTR [esp],esi
c00211b1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00211b5:	b8 ff 07 00 00       	mov    eax,0x7ff
c00211ba:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00211bd:	b8 00 00 00 00       	mov    eax,0x0
c00211c2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00211c6:	7d 43                	jge    c002120b <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c00211c8:	52                   	push   edx
c00211c9:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00211cd:	50                   	push   eax
c00211ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00211d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00211d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00211da:	0f ac d0 0b          	shrd   eax,edx,0xb
c00211de:	50                   	push   eax
c00211df:	e8 db fd ff ff       	call   c0020fbf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211e4:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00211ec:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00211f1:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c00211f9:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021201:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021206:	83 c4 10             	add    esp,0x10
c0021209:	eb aa                	jmp    c00211b5 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c002120b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002120f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021212:	74 2a                	je     c002123e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021214:	50                   	push   eax
c0021215:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021219:	50                   	push   eax
c002121a:	8d 74 24 28          	lea    esi,[esp+0x28]
c002121e:	56                   	push   esi
c002121f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021223:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021227:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c002122b:	51                   	push   ecx
c002122c:	e8 8e fd ff ff       	call   c0020fbf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021231:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021235:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021239:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002123b:	83 c4 10             	add    esp,0x10
c002123e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021245:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021249:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002124d:	89 18                	mov    DWORD PTR [eax],ebx
c002124f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021253:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021256:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021259:	31 c0                	xor    eax,eax
c002125b:	eb 05                	jmp    c0021262 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002125d:	b8 04 00 00 00       	mov    eax,0x4
c0021262:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021268:	5b                   	pop    ebx
c0021269:	5e                   	pop    esi
c002126a:	5f                   	pop    edi
c002126b:	5d                   	pop    ebp
c002126c:	c3                   	ret    
c002126d:	90                   	nop

c002126e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002126e:	55                   	push   ebp
c002126f:	57                   	push   edi
c0021270:	56                   	push   esi
c0021271:	53                   	push   ebx
c0021272:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021278:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c002127f:	85 ed                	test   ebp,ebp
c0021281:	0f 84 51 02 00 00    	je     c00214d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021287:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002128f:	0f 84 43 02 00 00    	je     c00214d8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021295:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021298:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c002129b:	75 0a                	jne    c00212a7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002129d:	b8 07 00 00 00       	mov    eax,0x7
c00212a2:	e9 36 02 00 00       	jmp    c00214dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00212a7:	50                   	push   eax
c00212a8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00212ac:	50                   	push   eax
c00212ad:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00212b4:	53                   	push   ebx
c00212b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00212b8:	c1 e0 0b             	shl    eax,0xb
c00212bb:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c00212be:	c1 e8 0b             	shr    eax,0xb
c00212c1:	50                   	push   eax
c00212c2:	e8 f8 fc ff ff       	call   c0020fbf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00212c7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00212ca:	83 c4 10             	add    esp,0x10
c00212cd:	89 c1                	mov    ecx,eax
c00212cf:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00212d2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00212d8:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00212db:	84 db                	test   bl,bl
c00212dd:	0f 85 8b 00 00 00    	jne    c002136e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00212e3:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00212e9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00212ec:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00212f2:	29 c6                	sub    esi,eax
c00212f4:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00212f8:	89 f3                	mov    ebx,esi
c00212fa:	89 f1                	mov    ecx,esi
c00212fc:	c1 fb 1f             	sar    ebx,0x1f
c00212ff:	01 f0                	add    eax,esi
c0021301:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021304:	11 da                	adc    edx,ebx
c0021306:	89 04 24             	mov    DWORD PTR [esp],eax
c0021309:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002130d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021310:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021313:	89 d8                	mov    eax,ebx
c0021315:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021319:	ba 00 00 00 00       	mov    edx,0x0
c002131e:	19 f8                	sbb    eax,edi
c0021320:	b8 00 00 00 00       	mov    eax,0x0
c0021325:	73 08                	jae    c002132f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021327:	89 f0                	mov    eax,esi
c0021329:	89 fa                	mov    edx,edi
c002132b:	29 c8                	sub    eax,ecx
c002132d:	19 da                	sbb    edx,ebx
c002132f:	89 d7                	mov    edi,edx
c0021331:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021334:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021337:	09 c7                	or     edi,eax
c0021339:	0f 84 5e ff ff ff    	je     c002129d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002133f:	57                   	push   edi
c0021340:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021344:	50                   	push   eax
c0021345:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002134c:	53                   	push   ebx
c002134d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021350:	c1 e0 0b             	shl    eax,0xb
c0021353:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021357:	c1 e8 0b             	shr    eax,0xb
c002135a:	50                   	push   eax
c002135b:	e8 5f fc ff ff       	call   c0020fbf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021360:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021363:	83 c4 10             	add    esp,0x10
c0021366:	25 ff 07 00 00       	and    eax,0x7ff
c002136b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002136e:	31 ff                	xor    edi,edi
c0021370:	56                   	push   esi
c0021371:	6a 28                	push   0x28
c0021373:	6a 00                	push   0x0
c0021375:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021379:	50                   	push   eax
c002137a:	e8 d1 f3 fd ff       	call   c0000750 <memset>
c002137f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021382:	25 ff 07 00 00       	and    eax,0x7ff
c0021387:	89 c6                	mov    esi,eax
c0021389:	83 c6 21             	add    esi,0x21
c002138c:	83 d7 00             	adc    edi,0x0
c002138f:	83 c4 10             	add    esp,0x10
c0021392:	31 c9                	xor    ecx,ecx
c0021394:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c002139b:	83 f9 28             	cmp    ecx,0x28
c002139e:	88 04 24             	mov    BYTE PTR [esp],al
c00213a1:	0f 94 c2             	sete   dl
c00213a4:	88 d0                	mov    al,dl
c00213a6:	ba ff 07 00 00       	mov    edx,0x7ff
c00213ab:	39 f2                	cmp    edx,esi
c00213ad:	ba 00 00 00 00       	mov    edx,0x0
c00213b2:	19 fa                	sbb    edx,edi
c00213b4:	0f 92 c2             	setb   dl
c00213b7:	09 c2                	or     edx,eax
c00213b9:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00213bd:	0f 94 c0             	sete   al
c00213c0:	08 d0                	or     al,dl
c00213c2:	75 16                	jne    c00213da <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00213c4:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00213c8:	74 10                	je     c00213da <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00213ca:	8a 04 24             	mov    al,BYTE PTR [esp]
c00213cd:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00213d1:	41                   	inc    ecx
c00213d2:	83 c6 01             	add    esi,0x1
c00213d5:	83 d7 00             	adc    edi,0x0
c00213d8:	eb ba                	jmp    c0021394 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c00213da:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00213e1:	83 ec 0c             	sub    esp,0xc
c00213e4:	8d 74 24 24          	lea    esi,[esp+0x24]
c00213e8:	56                   	push   esi
c00213e9:	e8 7e f3 fd ff       	call   c000076c <strlen>
c00213ee:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c00213f5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00213f9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021401:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021404:	5a                   	pop    edx
c0021405:	25 ff 07 00 00       	and    eax,0x7ff
c002140a:	59                   	pop    ecx
c002140b:	01 f8                	add    eax,edi
c002140d:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021413:	83 e0 02             	and    eax,0x2
c0021416:	3c 01                	cmp    al,0x1
c0021418:	19 c0                	sbb    eax,eax
c002141a:	83 c0 02             	add    eax,0x2
c002141d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021421:	56                   	push   esi
c0021422:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021426:	50                   	push   eax
c0021427:	e8 e0 f3 fd ff       	call   c000080c <strcpy>
c002142c:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021430:	83 c4 10             	add    esp,0x10
c0021433:	84 c0                	test   al,al
c0021435:	75 21                	jne    c0021458 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021437:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c002143f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021447:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002144f:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021456:	eb 28                	jmp    c0021480 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021458:	fe c8                	dec    al
c002145a:	75 24                	jne    c0021480 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002145c:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021464:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002146c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021474:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002147b:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021480:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021484:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c002148b:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021492:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021494:	0f b6 f3             	movzx  esi,bl
c0021497:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c002149e:	31 db                	xor    ebx,ebx
c00214a0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00214a6:	89 df                	mov    edi,ebx
c00214a8:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c00214ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214ae:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c00214b1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00214b4:	39 c6                	cmp    esi,eax
c00214b6:	19 d7                	sbb    edi,edx
c00214b8:	72 10                	jb     c00214ca <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c00214ba:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00214c1:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c00214c8:	eb 0a                	jmp    c00214d4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c00214ca:	29 f0                	sub    eax,esi
c00214cc:	19 da                	sbb    edx,ebx
c00214ce:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00214d1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00214d4:	31 c0                	xor    eax,eax
c00214d6:	eb 05                	jmp    c00214dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00214d8:	b8 04 00 00 00       	mov    eax,0x4
c00214dd:	81 c4 5c 09 00 00    	add    esp,0x95c
c00214e3:	5b                   	pop    ebx
c00214e4:	5e                   	pop    esi
c00214e5:	5f                   	pop    edi
c00214e6:	5d                   	pop    ebp
c00214e7:	c3                   	ret    

c00214e8 <readRoot(unsigned int*, unsigned int*, char)>:
c00214e8:	57                   	push   edi
c00214e9:	56                   	push   esi
c00214ea:	81 ec 38 08 00 00    	sub    esp,0x838
c00214f0:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00214f8:	50                   	push   eax
c00214f9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00214fd:	50                   	push   eax
c00214fe:	6a 10                	push   0x10
c0021500:	e8 ba fa ff ff       	call   c0020fbf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021505:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c002150c:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021510:	b9 22 00 00 00       	mov    ecx,0x22
c0021515:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021517:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002151e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021522:	89 10                	mov    DWORD PTR [eax],edx
c0021524:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002152b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002152f:	89 10                	mov    DWORD PTR [eax],edx
c0021531:	81 c4 44 08 00 00    	add    esp,0x844
c0021537:	b0 01                	mov    al,0x1
c0021539:	5e                   	pop    esi
c002153a:	5f                   	pop    edi
c002153b:	c3                   	ret    

c002153c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c002153c:	55                   	push   ebp
c002153d:	57                   	push   edi
c002153e:	56                   	push   esi
c002153f:	53                   	push   ebx
c0021540:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021546:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002154d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021554:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021558:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002155c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021560:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021564:	75 03                	jne    c0021569 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021566:	83 c3 02             	add    ebx,0x2
c0021569:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002156c:	75 03                	jne    c0021571 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002156e:	43                   	inc    ebx
c002156f:	eb f8                	jmp    c0021569 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021571:	51                   	push   ecx
c0021572:	68 00 01 00 00       	push   0x100
c0021577:	6a 00                	push   0x0
c0021579:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002157d:	50                   	push   eax
c002157e:	e8 cd f1 fd ff       	call   c0000750 <memset>
c0021583:	83 c4 10             	add    esp,0x10
c0021586:	31 d2                	xor    edx,edx
c0021588:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002158b:	84 c0                	test   al,al
c002158d:	74 21                	je     c00215b0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002158f:	3c 2f                	cmp    al,0x2f
c0021591:	75 0b                	jne    c002159e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021593:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021597:	bd 01 00 00 00       	mov    ebp,0x1
c002159c:	eb 14                	jmp    c00215b2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c002159e:	8d 48 9f             	lea    ecx,[eax-0x61]
c00215a1:	80 f9 19             	cmp    cl,0x19
c00215a4:	77 03                	ja     c00215a9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00215a6:	83 e8 20             	sub    eax,0x20
c00215a9:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00215ad:	42                   	inc    edx
c00215ae:	eb d8                	jmp    c0021588 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00215b0:	31 ed                	xor    ebp,ebp
c00215b2:	83 ec 0c             	sub    esp,0xc
c00215b5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00215bc:	e8 d8 df fe ff       	call   c000f599 <malloc>
c00215c1:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00215c8:	89 c6                	mov    esi,eax
c00215ca:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00215d0:	c1 ef 0b             	shr    edi,0xb
c00215d3:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00215da:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00215de:	83 c4 10             	add    esp,0x10
c00215e1:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00215e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00215ea:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00215f1:	74 28                	je     c002161b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00215f3:	52                   	push   edx
c00215f4:	57                   	push   edi
c00215f5:	50                   	push   eax
c00215f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00215fa:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021601:	e8 b9 f9 ff ff       	call   c0020fbf <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021606:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002160a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021611:	05 00 08 00 00       	add    eax,0x800
c0021616:	83 c4 10             	add    esp,0x10
c0021619:	eb cb                	jmp    c00215e6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002161b:	83 ec 0c             	sub    esp,0xc
c002161e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021622:	57                   	push   edi
c0021623:	e8 44 f1 fd ff       	call   c000076c <strlen>
c0021628:	50                   	push   eax
c0021629:	57                   	push   edi
c002162a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021631:	56                   	push   esi
c0021632:	e8 46 f9 ff ff       	call   c0020f7d <__memmem(unsigned char*, int, unsigned char*, int)>
c0021637:	83 c4 20             	add    esp,0x20
c002163a:	85 c0                	test   eax,eax
c002163c:	75 13                	jne    c0021651 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002163e:	83 ec 0c             	sub    esp,0xc
c0021641:	56                   	push   esi
c0021642:	e8 62 df fe ff       	call   c000f5a9 <free>
c0021647:	83 c4 10             	add    esp,0x10
c002164a:	31 c0                	xor    eax,eax
c002164c:	e9 b3 00 00 00       	jmp    c0021704 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021651:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021655:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021659:	c1 e7 08             	shl    edi,0x8
c002165c:	c1 e2 10             	shl    edx,0x10
c002165f:	09 d7                	or     edi,edx
c0021661:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021665:	09 d7                	or     edi,edx
c0021667:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002166b:	c1 e2 18             	shl    edx,0x18
c002166e:	09 d7                	or     edi,edx
c0021670:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021674:	89 d1                	mov    ecx,edx
c0021676:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002167a:	c1 e1 08             	shl    ecx,0x8
c002167d:	c1 e2 10             	shl    edx,0x10
c0021680:	09 ca                	or     edx,ecx
c0021682:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021686:	09 ca                	or     edx,ecx
c0021688:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002168c:	c1 e1 18             	shl    ecx,0x18
c002168f:	09 ca                	or     edx,ecx
c0021691:	89 e9                	mov    ecx,ebp
c0021693:	84 c9                	test   cl,cl
c0021695:	74 3c                	je     c00216d3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021697:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002169b:	83 ec 0c             	sub    esp,0xc
c002169e:	56                   	push   esi
c002169f:	e8 05 df fe ff       	call   c000f5a9 <free>
c00216a4:	83 c4 0c             	add    esp,0xc
c00216a7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00216ae:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00216b3:	50                   	push   eax
c00216b4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00216bb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00216c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00216c6:	52                   	push   edx
c00216c7:	57                   	push   edi
c00216c8:	53                   	push   ebx
c00216c9:	e8 6e fe ff ff       	call   c002153c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00216ce:	83 c4 20             	add    esp,0x20
c00216d1:	eb 31                	jmp    c0021704 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00216d3:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00216d6:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00216dd:	d0 e8                	shr    al,1
c00216df:	89 3b                	mov    DWORD PTR [ebx],edi
c00216e1:	83 e0 01             	and    eax,0x1
c00216e4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00216eb:	83 ec 0c             	sub    esp,0xc
c00216ee:	89 13                	mov    DWORD PTR [ebx],edx
c00216f0:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00216f7:	89 03                	mov    DWORD PTR [ebx],eax
c00216f9:	56                   	push   esi
c00216fa:	e8 aa de fe ff       	call   c000f5a9 <free>
c00216ff:	83 c4 10             	add    esp,0x10
c0021702:	b0 01                	mov    al,0x1
c0021704:	81 c4 1c 01 00 00    	add    esp,0x11c
c002170a:	5b                   	pop    ebx
c002170b:	5e                   	pop    esi
c002170c:	5f                   	pop    edi
c002170d:	5d                   	pop    ebp
c002170e:	c3                   	ret    

c002170f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002170f:	55                   	push   ebp
c0021710:	57                   	push   edi
c0021711:	56                   	push   esi
c0021712:	53                   	push   ebx
c0021713:	83 ec 20             	sub    esp,0x20
c0021716:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002171a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002171e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021722:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002172a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021732:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021737:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c002173d:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021743:	57                   	push   edi
c0021744:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021748:	50                   	push   eax
c0021749:	8d 44 24 14          	lea    eax,[esp+0x14]
c002174d:	50                   	push   eax
c002174e:	e8 95 fd ff ff       	call   c00214e8 <readRoot(unsigned int*, unsigned int*, char)>
c0021753:	5a                   	pop    edx
c0021754:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021758:	e8 0f f0 fd ff       	call   c000076c <strlen>
c002175d:	83 c4 10             	add    esp,0x10
c0021760:	83 f8 03             	cmp    eax,0x3
c0021763:	77 17                	ja     c002177c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021765:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021769:	89 03                	mov    DWORD PTR [ebx],eax
c002176b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002176f:	89 06                	mov    DWORD PTR [esi],eax
c0021771:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021778:	b0 01                	mov    al,0x1
c002177a:	eb 19                	jmp    c0021795 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002177c:	50                   	push   eax
c002177d:	55                   	push   ebp
c002177e:	57                   	push   edi
c002177f:	56                   	push   esi
c0021780:	53                   	push   ebx
c0021781:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021785:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021789:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002178d:	e8 aa fd ff ff       	call   c002153c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021792:	83 c4 20             	add    esp,0x20
c0021795:	83 c4 1c             	add    esp,0x1c
c0021798:	5b                   	pop    ebx
c0021799:	5e                   	pop    esi
c002179a:	5f                   	pop    edi
c002179b:	5d                   	pop    ebp
c002179c:	c3                   	ret    
c002179d:	90                   	nop

c002179e <ISO9660::open(char const*, void**, FileOpenMode)>:
c002179e:	57                   	push   edi
c002179f:	56                   	push   esi
c00217a0:	53                   	push   ebx
c00217a1:	83 ec 10             	sub    esp,0x10
c00217a4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00217a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00217ac:	85 ff                	test   edi,edi
c00217ae:	0f 84 8b 00 00 00    	je     c002183f <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c00217b4:	85 f6                	test   esi,esi
c00217b6:	0f 84 83 00 00 00    	je     c002183f <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c00217bc:	b8 03 00 00 00       	mov    eax,0x3
c00217c1:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00217c6:	75 7c                	jne    c0021844 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00217c8:	83 ec 0c             	sub    esp,0xc
c00217cb:	6a 1c                	push   0x1c
c00217cd:	e8 c7 dd fe ff       	call   c000f599 <malloc>
c00217d2:	89 07                	mov    DWORD PTR [edi],eax
c00217d4:	89 c3                	mov    ebx,eax
c00217d6:	58                   	pop    eax
c00217d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00217db:	50                   	push   eax
c00217dc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00217df:	50                   	push   eax
c00217e0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00217e4:	50                   	push   eax
c00217e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00217e9:	50                   	push   eax
c00217ea:	56                   	push   esi
c00217eb:	e8 1f ff ff ff       	call   c002170f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00217f0:	83 c4 20             	add    esp,0x20
c00217f3:	84 c0                	test   al,al
c00217f5:	74 07                	je     c00217fe <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c00217f7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00217fc:	74 0b                	je     c0021809 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c00217fe:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021802:	b8 01 00 00 00       	mov    eax,0x1
c0021807:	eb 3b                	jmp    c0021844 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021809:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002180d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021811:	89 03                	mov    DWORD PTR [ebx],eax
c0021813:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002181a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002181e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021825:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002182c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002182f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021836:	8a 06                	mov    al,BYTE PTR [esi]
c0021838:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002183b:	31 c0                	xor    eax,eax
c002183d:	eb 05                	jmp    c0021844 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c002183f:	b8 04 00 00 00       	mov    eax,0x4
c0021844:	83 c4 10             	add    esp,0x10
c0021847:	5b                   	pop    ebx
c0021848:	5e                   	pop    esi
c0021849:	5f                   	pop    edi
c002184a:	c3                   	ret    
c002184b:	90                   	nop

c002184c <ISO9660::exists(char const*)>:
c002184c:	83 ec 28             	sub    esp,0x28
c002184f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021853:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021857:	52                   	push   edx
c0021858:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002185b:	52                   	push   edx
c002185c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021860:	52                   	push   edx
c0021861:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021865:	52                   	push   edx
c0021866:	50                   	push   eax
c0021867:	e8 a3 fe ff ff       	call   c002170f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002186c:	83 c4 3c             	add    esp,0x3c
c002186f:	c3                   	ret    

c0021870 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021870:	56                   	push   esi
c0021871:	53                   	push   ebx
c0021872:	83 ec 14             	sub    esp,0x14
c0021875:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021879:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002187d:	85 db                	test   ebx,ebx
c002187f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021883:	0f 94 c2             	sete   dl
c0021886:	85 f6                	test   esi,esi
c0021888:	0f 94 c0             	sete   al
c002188b:	08 c2                	or     dl,al
c002188d:	75 68                	jne    c00218f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002188f:	85 c9                	test   ecx,ecx
c0021891:	74 64                	je     c00218f7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021893:	83 ec 0c             	sub    esp,0xc
c0021896:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021899:	8d 44 24 18          	lea    eax,[esp+0x18]
c002189d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00218a3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00218aa:	50                   	push   eax
c00218ab:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00218ae:	50                   	push   eax
c00218af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00218b3:	50                   	push   eax
c00218b4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00218b8:	50                   	push   eax
c00218b9:	51                   	push   ecx
c00218ba:	e8 50 fe ff ff       	call   c002170f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00218bf:	83 c4 20             	add    esp,0x20
c00218c2:	ba 01 00 00 00       	mov    edx,0x1
c00218c7:	84 c0                	test   al,al
c00218c9:	74 31                	je     c00218fc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00218cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218cf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00218d6:	89 03                	mov    DWORD PTR [ebx],eax
c00218d8:	ba 00 00 00 00       	mov    edx,0x0
c00218dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218e1:	85 c0                	test   eax,eax
c00218e3:	0f 95 06             	setne  BYTE PTR [esi]
c00218e6:	74 14                	je     c00218fc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00218e8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00218ee:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00218f5:	eb 05                	jmp    c00218fc <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00218f7:	ba 04 00 00 00       	mov    edx,0x4
c00218fc:	83 c4 14             	add    esp,0x14
c00218ff:	89 d0                	mov    eax,edx
c0021901:	5b                   	pop    ebx
c0021902:	5e                   	pop    esi
c0021903:	c3                   	ret    

c0021904 <ISO9660::openDir(char const*, void**)>:
c0021904:	57                   	push   edi
c0021905:	56                   	push   esi
c0021906:	53                   	push   ebx
c0021907:	83 ec 10             	sub    esp,0x10
c002190a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002190e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021912:	85 ff                	test   edi,edi
c0021914:	74 7b                	je     c0021991 <ISO9660::openDir(char const*, void**)+0x8d>
c0021916:	85 f6                	test   esi,esi
c0021918:	74 77                	je     c0021991 <ISO9660::openDir(char const*, void**)+0x8d>
c002191a:	83 ec 0c             	sub    esp,0xc
c002191d:	6a 1c                	push   0x1c
c002191f:	e8 75 dc fe ff       	call   c000f599 <malloc>
c0021924:	89 07                	mov    DWORD PTR [edi],eax
c0021926:	89 c3                	mov    ebx,eax
c0021928:	58                   	pop    eax
c0021929:	8d 44 24 18          	lea    eax,[esp+0x18]
c002192d:	50                   	push   eax
c002192e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021931:	50                   	push   eax
c0021932:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021936:	50                   	push   eax
c0021937:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002193b:	50                   	push   eax
c002193c:	56                   	push   esi
c002193d:	e8 cd fd ff ff       	call   c002170f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021942:	83 c4 20             	add    esp,0x20
c0021945:	84 c0                	test   al,al
c0021947:	74 07                	je     c0021950 <ISO9660::openDir(char const*, void**)+0x4c>
c0021949:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002194e:	75 0b                	jne    c002195b <ISO9660::openDir(char const*, void**)+0x57>
c0021950:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021954:	b8 01 00 00 00       	mov    eax,0x1
c0021959:	eb 3b                	jmp    c0021996 <ISO9660::openDir(char const*, void**)+0x92>
c002195b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002195f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021963:	89 03                	mov    DWORD PTR [ebx],eax
c0021965:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002196c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021970:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021977:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002197e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021981:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021988:	8a 06                	mov    al,BYTE PTR [esi]
c002198a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002198d:	31 c0                	xor    eax,eax
c002198f:	eb 05                	jmp    c0021996 <ISO9660::openDir(char const*, void**)+0x92>
c0021991:	b8 04 00 00 00       	mov    eax,0x4
c0021996:	83 c4 10             	add    esp,0x10
c0021999:	5b                   	pop    ebx
c002199a:	5e                   	pop    esi
c002199b:	5f                   	pop    edi
c002199c:	c3                   	ret    
c002199d:	90                   	nop

c002199e <ISO9660::ISO9660()>:
c002199e:	83 ec 0c             	sub    esp,0xc
c00219a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219a5:	83 ec 0c             	sub    esp,0xc
c00219a8:	50                   	push   eax
c00219a9:	e8 92 0e ff ff       	call   c0012840 <Filesystem::Filesystem()>
c00219ae:	83 c4 10             	add    esp,0x10
c00219b1:	ba 58 bb 02 c0       	mov    edx,0xc002bb58
c00219b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ba:	89 10                	mov    DWORD PTR [eax],edx
c00219bc:	90                   	nop
c00219bd:	83 c4 0c             	add    esp,0xc
c00219c0:	c3                   	ret    
c00219c1:	90                   	nop

c00219c2 <SoundChannel::SoundChannel(int, int, int, int)>:
c00219c2:	83 ec 1c             	sub    esp,0x1c
c00219c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219c9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00219cd:	89 10                	mov    DWORD PTR [eax],edx
c00219cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00219d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00219da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219de:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00219e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00219e5:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00219ea:	75 23                	jne    c0021a0f <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c00219ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219f0:	8b 10                	mov    edx,DWORD PTR [eax]
c00219f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00219f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00219f9:	0f af c2             	imul   eax,edx
c00219fc:	85 c0                	test   eax,eax
c00219fe:	79 03                	jns    c0021a03 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021a00:	83 c0 03             	add    eax,0x3
c0021a03:	c1 f8 02             	sar    eax,0x2
c0021a06:	05 a0 0f 00 00       	add    eax,0xfa0
c0021a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021a0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a13:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021a17:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a1e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021a25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a29:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021a30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a34:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021a37:	c1 e0 02             	shl    eax,0x2
c0021a3a:	83 ec 0c             	sub    esp,0xc
c0021a3d:	50                   	push   eax
c0021a3e:	e8 56 db fe ff       	call   c000f599 <malloc>
c0021a43:	83 c4 10             	add    esp,0x10
c0021a46:	89 c2                	mov    edx,eax
c0021a48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a4c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021a4f:	83 ec 04             	sub    esp,0x4
c0021a52:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021a56:	50                   	push   eax
c0021a57:	6a 01                	push   0x1
c0021a59:	6a 04                	push   0x4
c0021a5b:	e8 05 71 fe ff       	call   c0008b65 <src_new>
c0021a60:	83 c4 10             	add    esp,0x10
c0021a63:	89 c2                	mov    edx,eax
c0021a65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021a69:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021a6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a70:	85 c0                	test   eax,eax
c0021a72:	74 10                	je     c0021a84 <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021a74:	83 ec 0c             	sub    esp,0xc
c0021a77:	68 b8 bb 02 c0       	push   0xc002bbb8
c0021a7c:	e8 14 82 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0021a81:	83 c4 10             	add    esp,0x10
c0021a84:	a0 20 19 03 c0       	mov    al,ds:0xc0031920
c0021a89:	83 f0 01             	xor    eax,0x1
c0021a8c:	84 c0                	test   al,al
c0021a8e:	74 57                	je     c0021ae7 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021a90:	a1 d4 bb 02 c0       	mov    eax,ds:0xc002bbd4
c0021a95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a99:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021aa1:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021aa9:	7f 35                	jg     c0021ae0 <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021aab:	83 ec 0c             	sub    esp,0xc
c0021aae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021ab2:	e8 d8 53 00 00       	call   c0026e8f <__floatsisf>
c0021ab7:	83 c4 10             	add    esp,0x10
c0021aba:	8b 15 d4 bb 02 c0    	mov    edx,DWORD PTR ds:0xc002bbd4
c0021ac0:	83 ec 08             	sub    esp,0x8
c0021ac3:	52                   	push   edx
c0021ac4:	50                   	push   eax
c0021ac5:	e8 d7 4f 00 00       	call   c0026aa1 <__mulsf3>
c0021aca:	83 c4 10             	add    esp,0x10
c0021acd:	89 c2                	mov    edx,eax
c0021acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ad3:	89 14 85 20 15 03 c0 	mov    DWORD PTR [eax*4-0x3ffceae0],edx
c0021ada:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021ade:	eb c1                	jmp    c0021aa1 <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021ae0:	c6 05 20 19 03 c0 01 	mov    BYTE PTR ds:0xc0031920,0x1
c0021ae7:	90                   	nop
c0021ae8:	83 c4 1c             	add    esp,0x1c
c0021aeb:	c3                   	ret    

c0021aec <SoundChannel::~SoundChannel()>:
c0021aec:	83 ec 0c             	sub    esp,0xc
c0021aef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021af3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021af6:	83 ec 0c             	sub    esp,0xc
c0021af9:	50                   	push   eax
c0021afa:	e8 aa da fe ff       	call   c000f5a9 <free>
c0021aff:	83 c4 10             	add    esp,0x10
c0021b02:	90                   	nop
c0021b03:	83 c4 0c             	add    esp,0xc
c0021b06:	c3                   	ret    
c0021b07:	90                   	nop

c0021b08 <SoundChannel::getSampleRate()>:
c0021b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b0e:	c3                   	ret    
c0021b0f:	90                   	nop

c0021b10 <SoundChannel::getBits()>:
c0021b10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b17:	c3                   	ret    

c0021b18 <SoundChannel::getBufferUsed()>:
c0021b18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b1c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021b1f:	c3                   	ret    

c0021b20 <SoundChannel::getBufferSize()>:
c0021b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b24:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021b27:	c3                   	ret    

c0021b28 <SoundChannel::unbuffer(float*, int, int)>:
c0021b28:	56                   	push   esi
c0021b29:	53                   	push   ebx
c0021b2a:	83 ec 40             	sub    esp,0x40
c0021b2d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021b31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021b34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021b38:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021b3b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021b3f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021b43:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021b47:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021b4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021b4f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021b53:	e8 37 53 00 00       	call   c0026e8f <__floatsisf>
c0021b58:	5a                   	pop    edx
c0021b59:	89 c6                	mov    esi,eax
c0021b5b:	ff 33                	push   DWORD PTR [ebx]
c0021b5d:	e8 2d 53 00 00       	call   c0026e8f <__floatsisf>
c0021b62:	59                   	pop    ecx
c0021b63:	5a                   	pop    edx
c0021b64:	50                   	push   eax
c0021b65:	56                   	push   esi
c0021b66:	e8 f9 50 00 00       	call   c0026c64 <__divsf3>
c0021b6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b6e:	e8 ec 65 00 00       	call   c002815f <__extendsfdf2>
c0021b73:	59                   	pop    ecx
c0021b74:	5e                   	pop    esi
c0021b75:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021b79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021b7d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021b85:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b89:	50                   	push   eax
c0021b8a:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021b8d:	e8 c8 6b fe ff       	call   c000875a <src_process>
c0021b92:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b96:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021b99:	83 c4 0c             	add    esp,0xc
c0021b9c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021b9f:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021ba2:	29 d0                	sub    eax,edx
c0021ba4:	c1 e0 02             	shl    eax,0x2
c0021ba7:	50                   	push   eax
c0021ba8:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021bab:	50                   	push   eax
c0021bac:	51                   	push   ecx
c0021bad:	e8 d6 ea fd ff       	call   c0000688 <memmove>
c0021bb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021bb6:	83 c4 44             	add    esp,0x44
c0021bb9:	5b                   	pop    ebx
c0021bba:	5e                   	pop    esi
c0021bbb:	c3                   	ret    

c0021bbc <SoundChannel::buffer16(short*, int)>:
c0021bbc:	55                   	push   ebp
c0021bbd:	57                   	push   edi
c0021bbe:	56                   	push   esi
c0021bbf:	53                   	push   ebx
c0021bc0:	83 ec 1c             	sub    esp,0x1c
c0021bc3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021bc7:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021bca:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021bcd:	0f 84 d2 00 00 00    	je     c0021ca5 <SoundChannel::buffer16(short*, int)+0xe9>
c0021bd3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021bd7:	85 ed                	test   ebp,ebp
c0021bd9:	0f 8e c6 00 00 00    	jle    c0021ca5 <SoundChannel::buffer16(short*, int)+0xe9>
c0021bdf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021be3:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021be8:	83 ec 0c             	sub    esp,0xc
c0021beb:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021bee:	50                   	push   eax
c0021bef:	e8 9b 52 00 00       	call   c0026e8f <__floatsisf>
c0021bf4:	59                   	pop    ecx
c0021bf5:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021bf8:	5f                   	pop    edi
c0021bf9:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021bfc:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021bff:	55                   	push   ebp
c0021c00:	50                   	push   eax
c0021c01:	e8 9b 4e 00 00       	call   c0026aa1 <__mulsf3>
c0021c06:	83 c4 10             	add    esp,0x10
c0021c09:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021c0c:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021c0f:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021c12:	0f 84 99 00 00 00    	je     c0021cb1 <SoundChannel::buffer16(short*, int)+0xf5>
c0021c18:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021c1d:	74 78                	je     c0021c97 <SoundChannel::buffer16(short*, int)+0xdb>
c0021c1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021c23:	83 ec 0c             	sub    esp,0xc
c0021c26:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021c2a:	50                   	push   eax
c0021c2b:	e8 5f 52 00 00       	call   c0026e8f <__floatsisf>
c0021c30:	5f                   	pop    edi
c0021c31:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021c34:	5a                   	pop    edx
c0021c35:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021c38:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021c3b:	55                   	push   ebp
c0021c3c:	50                   	push   eax
c0021c3d:	e8 5f 4e 00 00       	call   c0026aa1 <__mulsf3>
c0021c42:	83 c4 10             	add    esp,0x10
c0021c45:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021c48:	be 02 00 00 00       	mov    esi,0x2
c0021c4d:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021c50:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021c53:	74 46                	je     c0021c9b <SoundChannel::buffer16(short*, int)+0xdf>
c0021c55:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021c59:	eb 36                	jmp    c0021c91 <SoundChannel::buffer16(short*, int)+0xd5>
c0021c5b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021c5f:	83 ec 0c             	sub    esp,0xc
c0021c62:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021c66:	46                   	inc    esi
c0021c67:	50                   	push   eax
c0021c68:	e8 22 52 00 00       	call   c0026e8f <__floatsisf>
c0021c6d:	5a                   	pop    edx
c0021c6e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021c71:	59                   	pop    ecx
c0021c72:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021c75:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021c7c:	50                   	push   eax
c0021c7d:	e8 1f 4e 00 00       	call   c0026aa1 <__mulsf3>
c0021c82:	83 c4 10             	add    esp,0x10
c0021c85:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021c89:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021c8c:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021c8f:	74 0a                	je     c0021c9b <SoundChannel::buffer16(short*, int)+0xdf>
c0021c91:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021c95:	75 c4                	jne    c0021c5b <SoundChannel::buffer16(short*, int)+0x9f>
c0021c97:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021c9b:	83 c4 1c             	add    esp,0x1c
c0021c9e:	89 f0                	mov    eax,esi
c0021ca0:	5b                   	pop    ebx
c0021ca1:	5e                   	pop    esi
c0021ca2:	5f                   	pop    edi
c0021ca3:	5d                   	pop    ebp
c0021ca4:	c3                   	ret    
c0021ca5:	83 c4 1c             	add    esp,0x1c
c0021ca8:	31 f6                	xor    esi,esi
c0021caa:	5b                   	pop    ebx
c0021cab:	89 f0                	mov    eax,esi
c0021cad:	5e                   	pop    esi
c0021cae:	5f                   	pop    edi
c0021caf:	5d                   	pop    ebp
c0021cb0:	c3                   	ret    
c0021cb1:	be 01 00 00 00       	mov    esi,0x1
c0021cb6:	eb e3                	jmp    c0021c9b <SoundChannel::buffer16(short*, int)+0xdf>

c0021cb8 <SoundChannel::buffer8(unsigned char*, int)>:
c0021cb8:	55                   	push   ebp
c0021cb9:	57                   	push   edi
c0021cba:	56                   	push   esi
c0021cbb:	53                   	push   ebx
c0021cbc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021cc0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021cc4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021cc7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021ccb:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021cce:	74 7a                	je     c0021d4a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021cd0:	85 ff                	test   edi,edi
c0021cd2:	7e 76                	jle    c0021d4a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021cd4:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021cd8:	8d 70 01             	lea    esi,[eax+0x1]
c0021cdb:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021cde:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021ce1:	8b 1c 9d 20 15 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffceae0]
c0021ce8:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021ceb:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021cee:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021cf1:	74 5e                	je     c0021d51 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021cf3:	83 ff 01             	cmp    edi,0x1
c0021cf6:	74 4b                	je     c0021d43 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021cf8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021cfc:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021cff:	8d 70 01             	lea    esi,[eax+0x1]
c0021d02:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021d05:	8b 1c 9d 20 15 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffceae0]
c0021d0c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021d0f:	b8 02 00 00 00       	mov    eax,0x2
c0021d14:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021d17:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021d1a:	75 23                	jne    c0021d3f <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021d1c:	eb 27                	jmp    c0021d45 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021d1e:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021d23:	8d 71 01             	lea    esi,[ecx+0x1]
c0021d26:	40                   	inc    eax
c0021d27:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021d2a:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021d2d:	8b 1c 9d 20 15 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffceae0]
c0021d34:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021d37:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021d3a:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021d3d:	74 06                	je     c0021d45 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021d3f:	39 c7                	cmp    edi,eax
c0021d41:	75 db                	jne    c0021d1e <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021d43:	89 f8                	mov    eax,edi
c0021d45:	5b                   	pop    ebx
c0021d46:	5e                   	pop    esi
c0021d47:	5f                   	pop    edi
c0021d48:	5d                   	pop    ebp
c0021d49:	c3                   	ret    
c0021d4a:	5b                   	pop    ebx
c0021d4b:	31 c0                	xor    eax,eax
c0021d4d:	5e                   	pop    esi
c0021d4e:	5f                   	pop    edi
c0021d4f:	5d                   	pop    ebp
c0021d50:	c3                   	ret    
c0021d51:	b8 01 00 00 00       	mov    eax,0x1
c0021d56:	eb ed                	jmp    c0021d45 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021d58 <SoundDevice::SoundDevice(char const*)>:
c0021d58:	83 ec 1c             	sub    esp,0x1c
c0021d5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d5f:	83 ec 08             	sub    esp,0x8
c0021d62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021d66:	50                   	push   eax
c0021d67:	e8 06 1e ff ff       	call   c0013b72 <Device::Device(char const*)>
c0021d6c:	83 c4 10             	add    esp,0x10
c0021d6f:	ba e0 bb 02 c0       	mov    edx,0xc002bbe0
c0021d74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d78:	89 10                	mov    DWORD PTR [eax],edx
c0021d7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d7e:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021d88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d8c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021d96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021d9e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021da3:	7f 19                	jg     c0021dbe <SoundDevice::SoundDevice(char const*)+0x66>
c0021da5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021da9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021dad:	83 c2 54             	add    edx,0x54
c0021db0:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021db8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021dbc:	eb e0                	jmp    c0021d9e <SoundDevice::SoundDevice(char const*)+0x46>
c0021dbe:	90                   	nop
c0021dbf:	83 c4 1c             	add    esp,0x1c
c0021dc2:	c3                   	ret    
c0021dc3:	90                   	nop

c0021dc4 <SoundDevice::~SoundDevice()>:
c0021dc4:	53                   	push   ebx
c0021dc5:	83 ec 18             	sub    esp,0x18
c0021dc8:	ba e0 bb 02 c0       	mov    edx,0xc002bbe0
c0021dcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021dd1:	89 10                	mov    DWORD PTR [eax],edx
c0021dd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021ddb:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021de0:	7f 46                	jg     c0021e28 <SoundDevice::~SoundDevice()+0x64>
c0021de2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021de6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021dea:	83 c2 54             	add    edx,0x54
c0021ded:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021df1:	85 c0                	test   eax,eax
c0021df3:	74 2d                	je     c0021e22 <SoundDevice::~SoundDevice()+0x5e>
c0021df5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021df9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021dfd:	83 c2 54             	add    edx,0x54
c0021e00:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021e04:	85 db                	test   ebx,ebx
c0021e06:	74 1a                	je     c0021e22 <SoundDevice::~SoundDevice()+0x5e>
c0021e08:	83 ec 0c             	sub    esp,0xc
c0021e0b:	53                   	push   ebx
c0021e0c:	e8 db fc ff ff       	call   c0021aec <SoundChannel::~SoundChannel()>
c0021e11:	83 c4 10             	add    esp,0x10
c0021e14:	83 ec 08             	sub    esp,0x8
c0021e17:	6a 2c                	push   0x2c
c0021e19:	53                   	push   ebx
c0021e1a:	e8 3e 06 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0021e1f:	83 c4 10             	add    esp,0x10
c0021e22:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021e26:	eb b3                	jmp    c0021ddb <SoundDevice::~SoundDevice()+0x17>
c0021e28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e2c:	83 ec 0c             	sub    esp,0xc
c0021e2f:	50                   	push   eax
c0021e30:	e8 07 1a ff ff       	call   c001383c <Device::~Device()>
c0021e35:	83 c4 10             	add    esp,0x10
c0021e38:	90                   	nop
c0021e39:	83 c4 18             	add    esp,0x18
c0021e3c:	5b                   	pop    ebx
c0021e3d:	c3                   	ret    

c0021e3e <SoundDevice::~SoundDevice()>:
c0021e3e:	83 ec 0c             	sub    esp,0xc
c0021e41:	83 ec 0c             	sub    esp,0xc
c0021e44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e48:	e8 77 ff ff ff       	call   c0021dc4 <SoundDevice::~SoundDevice()>
c0021e4d:	83 c4 10             	add    esp,0x10
c0021e50:	83 ec 08             	sub    esp,0x8
c0021e53:	68 e4 01 00 00       	push   0x1e4
c0021e58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e5c:	e8 fc 05 ff ff       	call   c001245d <operator delete(void*, unsigned long)>
c0021e61:	83 c4 10             	add    esp,0x10
c0021e64:	83 c4 0c             	add    esp,0xc
c0021e67:	c3                   	ret    

c0021e68 <SoundDevice::getFreeChannelNum()>:
c0021e68:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021e6c:	31 c0                	xor    eax,eax
c0021e6e:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0021e76:	74 09                	je     c0021e81 <SoundDevice::getFreeChannelNum()+0x19>
c0021e78:	40                   	inc    eax
c0021e79:	83 f8 20             	cmp    eax,0x20
c0021e7c:	75 f0                	jne    c0021e6e <SoundDevice::getFreeChannelNum()+0x6>
c0021e7e:	83 c8 ff             	or     eax,0xffffffff
c0021e81:	c3                   	ret    

c0021e82 <SoundDevice::addChannel(SoundChannel*)>:
c0021e82:	56                   	push   esi
c0021e83:	53                   	push   ebx
c0021e84:	51                   	push   ecx
c0021e85:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021e89:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021e8d:	53                   	push   ebx
c0021e8e:	e8 d5 ff ff ff       	call   c0021e68 <SoundDevice::getFreeChannelNum()>
c0021e93:	5a                   	pop    edx
c0021e94:	83 f8 ff             	cmp    eax,0xffffffff
c0021e97:	74 51                	je     c0021eea <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021e99:	85 f6                	test   esi,esi
c0021e9b:	74 4d                	je     c0021eea <SoundDevice::addChannel(SoundChannel*)+0x68>
c0021e9d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0021ea4:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0021eab:	75 30                	jne    c0021edd <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0021ead:	83 ec 0c             	sub    esp,0xc
c0021eb0:	56                   	push   esi
c0021eb1:	e8 52 fc ff ff       	call   c0021b08 <SoundChannel::getSampleRate()>
c0021eb6:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021ebc:	89 34 24             	mov    DWORD PTR [esp],esi
c0021ebf:	e8 4c fc ff ff       	call   c0021b10 <SoundChannel::getBits()>
c0021ec4:	83 c4 0c             	add    esp,0xc
c0021ec7:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021ecd:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021ecf:	50                   	push   eax
c0021ed0:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0021ed6:	53                   	push   ebx
c0021ed7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0021eda:	83 c4 10             	add    esp,0x10
c0021edd:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021ee3:	b8 01 00 00 00       	mov    eax,0x1
c0021ee8:	eb 03                	jmp    c0021eed <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021eea:	83 c8 ff             	or     eax,0xffffffff
c0021eed:	5a                   	pop    edx
c0021eee:	5b                   	pop    ebx
c0021eef:	5e                   	pop    esi
c0021ef0:	c3                   	ret    
c0021ef1:	90                   	nop

c0021ef2 <SoundDevice::removeChannel(int)>:
c0021ef2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021ef6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021efa:	83 fa 1f             	cmp    edx,0x1f
c0021efd:	77 23                	ja     c0021f22 <SoundDevice::removeChannel(int)+0x30>
c0021eff:	8d 14 90             	lea    edx,[eax+edx*4]
c0021f02:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0021f09:	74 17                	je     c0021f22 <SoundDevice::removeChannel(int)+0x30>
c0021f0b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0021f15:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021f1b:	75 05                	jne    c0021f22 <SoundDevice::removeChannel(int)+0x30>
c0021f1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f1f:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0021f22:	c3                   	ret    
c0021f23:	90                   	nop

c0021f24 <SoundDevice::floatTo16(float*, short*, int)>:
c0021f24:	57                   	push   edi
c0021f25:	56                   	push   esi
c0021f26:	53                   	push   ebx
c0021f27:	31 db                	xor    ebx,ebx
c0021f29:	83 ec 10             	sub    esp,0x10
c0021f2c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021f30:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0021f34:	0f 8d d0 00 00 00    	jge    c002200a <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0021f3a:	83 ec 0c             	sub    esp,0xc
c0021f3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021f41:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0021f44:	e8 16 62 00 00       	call   c002815f <__extendsfdf2>
c0021f49:	83 c4 10             	add    esp,0x10
c0021f4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f54:	68 00 00 f0 3f       	push   0x3ff00000
c0021f59:	6a 00                	push   0x0
c0021f5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f63:	e8 83 51 00 00       	call   c00270eb <__adddf3>
c0021f68:	83 c4 10             	add    esp,0x10
c0021f6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f6f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f73:	68 00 00 e0 3f       	push   0x3fe00000
c0021f78:	6a 00                	push   0x0
c0021f7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f82:	e8 e1 57 00 00       	call   c0027768 <__muldf3>
c0021f87:	83 c4 10             	add    esp,0x10
c0021f8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021f92:	68 c0 ff df 40       	push   0x40dfffc0
c0021f97:	6a 00                	push   0x0
c0021f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021f9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fa1:	e8 c2 57 00 00       	call   c0027768 <__muldf3>
c0021fa6:	59                   	pop    ecx
c0021fa7:	5f                   	pop    edi
c0021fa8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021fac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0021fb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021fb8:	e8 7e 60 00 00       	call   c002803b <__truncdfsf2>
c0021fbd:	5a                   	pop    edx
c0021fbe:	89 c7                	mov    edi,eax
c0021fc0:	59                   	pop    ecx
c0021fc1:	68 00 fe ff 46       	push   0x46fffe00
c0021fc6:	50                   	push   eax
c0021fc7:	e8 19 51 00 00       	call   c00270e5 <__gesf2>
c0021fcc:	83 c4 10             	add    esp,0x10
c0021fcf:	85 c0                	test   eax,eax
c0021fd1:	78 08                	js     c0021fdb <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c0021fd3:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0021fd9:	eb 29                	jmp    c0022004 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0021fdb:	50                   	push   eax
c0021fdc:	50                   	push   eax
c0021fdd:	6a 00                	push   0x0
c0021fdf:	57                   	push   edi
c0021fe0:	e8 04 51 00 00       	call   c00270e9 <__lesf2>
c0021fe5:	83 c4 10             	add    esp,0x10
c0021fe8:	85 c0                	test   eax,eax
c0021fea:	7f 08                	jg     c0021ff4 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0021fec:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0021ff2:	eb 10                	jmp    c0022004 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0021ff4:	83 ec 0c             	sub    esp,0xc
c0021ff7:	57                   	push   edi
c0021ff8:	e8 ff 61 00 00       	call   c00281fc <lrintf>
c0021ffd:	83 c4 10             	add    esp,0x10
c0022000:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022004:	43                   	inc    ebx
c0022005:	e9 26 ff ff ff       	jmp    c0021f30 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c002200a:	83 c4 10             	add    esp,0x10
c002200d:	5b                   	pop    ebx
c002200e:	5e                   	pop    esi
c002200f:	5f                   	pop    edi
c0022010:	c3                   	ret    
c0022011:	90                   	nop

c0022012 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022012:	57                   	push   edi
c0022013:	56                   	push   esi
c0022014:	53                   	push   ebx
c0022015:	31 db                	xor    ebx,ebx
c0022017:	83 ec 10             	sub    esp,0x10
c002201a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c002201e:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022022:	0f 8d cb 00 00 00    	jge    c00220f3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022028:	83 ec 0c             	sub    esp,0xc
c002202b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002202f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022032:	e8 28 61 00 00       	call   c002815f <__extendsfdf2>
c0022037:	83 c4 10             	add    esp,0x10
c002203a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002203e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022042:	68 00 00 f0 3f       	push   0x3ff00000
c0022047:	6a 00                	push   0x0
c0022049:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002204d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022051:	e8 95 50 00 00       	call   c00270eb <__adddf3>
c0022056:	83 c4 10             	add    esp,0x10
c0022059:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002205d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022061:	68 00 00 e0 3f       	push   0x3fe00000
c0022066:	6a 00                	push   0x0
c0022068:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002206c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022070:	e8 f3 56 00 00       	call   c0027768 <__muldf3>
c0022075:	83 c4 10             	add    esp,0x10
c0022078:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002207c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022080:	68 00 00 60 40       	push   0x40600000
c0022085:	6a 00                	push   0x0
c0022087:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002208b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002208f:	e8 d4 56 00 00       	call   c0027768 <__muldf3>
c0022094:	59                   	pop    ecx
c0022095:	5f                   	pop    edi
c0022096:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002209a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002209e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220a6:	e8 90 5f 00 00       	call   c002803b <__truncdfsf2>
c00220ab:	5a                   	pop    edx
c00220ac:	89 c7                	mov    edi,eax
c00220ae:	59                   	pop    ecx
c00220af:	68 00 00 fe 42       	push   0x42fe0000
c00220b4:	50                   	push   eax
c00220b5:	e8 2b 50 00 00       	call   c00270e5 <__gesf2>
c00220ba:	83 c4 10             	add    esp,0x10
c00220bd:	85 c0                	test   eax,eax
c00220bf:	78 06                	js     c00220c7 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00220c1:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00220c5:	eb 26                	jmp    c00220ed <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00220c7:	50                   	push   eax
c00220c8:	50                   	push   eax
c00220c9:	6a 00                	push   0x0
c00220cb:	57                   	push   edi
c00220cc:	e8 18 50 00 00       	call   c00270e9 <__lesf2>
c00220d1:	83 c4 10             	add    esp,0x10
c00220d4:	85 c0                	test   eax,eax
c00220d6:	7f 06                	jg     c00220de <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00220d8:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00220dc:	eb 0f                	jmp    c00220ed <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00220de:	83 ec 0c             	sub    esp,0xc
c00220e1:	57                   	push   edi
c00220e2:	e8 15 61 00 00       	call   c00281fc <lrintf>
c00220e7:	83 c4 10             	add    esp,0x10
c00220ea:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00220ed:	43                   	inc    ebx
c00220ee:	e9 2b ff ff ff       	jmp    c002201e <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00220f3:	83 c4 10             	add    esp,0x10
c00220f6:	5b                   	pop    ebx
c00220f7:	5e                   	pop    esi
c00220f8:	5f                   	pop    edi
c00220f9:	c3                   	ret    

c00220fa <SoundDevice::getAudio(int, float*, float*)>:
c00220fa:	55                   	push   ebp
c00220fb:	31 ed                	xor    ebp,ebp
c00220fd:	57                   	push   edi
c00220fe:	56                   	push   esi
c00220ff:	31 f6                	xor    esi,esi
c0022101:	53                   	push   ebx
c0022102:	83 ec 20             	sub    esp,0x20
c0022105:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022109:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002210d:	c1 e0 02             	shl    eax,0x2
c0022110:	50                   	push   eax
c0022111:	6a 00                	push   0x0
c0022113:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022117:	e8 34 e6 fd ff       	call   c0000750 <memset>
c002211c:	83 c4 10             	add    esp,0x10
c002211f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022127:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c002212e:	85 c9                	test   ecx,ecx
c0022130:	74 52                	je     c0022184 <SoundDevice::getAudio(int, float*, float*)+0x8a>
c0022132:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022136:	99                   	cdq    
c0022137:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c002213d:	50                   	push   eax
c002213e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022144:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0022148:	51                   	push   ecx
c0022149:	e8 da f9 ff ff       	call   c0021b28 <SoundChannel::unbuffer(float*, int, int)>
c002214e:	31 d2                	xor    edx,edx
c0022150:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022154:	83 c4 10             	add    esp,0x10
c0022157:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c002215b:	7d 1e                	jge    c002217b <SoundDevice::getAudio(int, float*, float*)+0x81>
c002215d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022161:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022165:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0022168:	89 cf                	mov    edi,ecx
c002216a:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0022170:	0f af ca             	imul   ecx,edx
c0022173:	42                   	inc    edx
c0022174:	01 e9                	add    ecx,ebp
c0022176:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c0022179:	eb dc                	jmp    c0022157 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c002217b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c002217f:	45                   	inc    ebp
c0022180:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c0022184:	46                   	inc    esi
c0022185:	83 fe 20             	cmp    esi,0x20
c0022188:	75 9d                	jne    c0022127 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c002218a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002218e:	83 c4 1c             	add    esp,0x1c
c0022191:	5b                   	pop    ebx
c0022192:	5e                   	pop    esi
c0022193:	5f                   	pop    edi
c0022194:	5d                   	pop    ebp
c0022195:	c3                   	ret    

c0022196 <PCI::open(int, int, void*)>:
c0022196:	83 ec 18             	sub    esp,0x18
c0022199:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002219d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00221a1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00221a7:	8b 10                	mov    edx,DWORD PTR [eax]
c00221a9:	50                   	push   eax
c00221aa:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00221ad:	31 c0                	xor    eax,eax
c00221af:	83 c4 1c             	add    esp,0x1c
c00221b2:	c3                   	ret    
c00221b3:	90                   	nop

c00221b4 <PCI::close(int, int, void*)>:
c00221b4:	31 c0                	xor    eax,eax
c00221b6:	c3                   	ret    
c00221b7:	90                   	nop

c00221b8 <PCI::PCI()>:
c00221b8:	83 ec 0c             	sub    esp,0xc
c00221bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221bf:	83 ec 08             	sub    esp,0x8
c00221c2:	68 10 bc 02 c0       	push   0xc002bc10
c00221c7:	50                   	push   eax
c00221c8:	e8 09 10 ff ff       	call   c00131d6 <Bus::Bus(char const*)>
c00221cd:	83 c4 10             	add    esp,0x10
c00221d0:	ba fc bc 02 c0       	mov    edx,0xc002bcfc
c00221d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221d9:	89 10                	mov    DWORD PTR [eax],edx
c00221db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221df:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00221e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ed:	a3 24 19 03 c0       	mov    ds:0xc0031924,eax
c00221f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00221fc:	0f b6 d0             	movzx  edx,al
c00221ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022203:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002220a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002220e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022214:	0f b6 d0             	movzx  edx,al
c0022217:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002221b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022224:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002222a:	8d 50 01             	lea    edx,[eax+0x1]
c002222d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022231:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022237:	0f b6 d0             	movzx  edx,al
c002223a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002223e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022242:	83 c9 c0             	or     ecx,0xffffffc0
c0022245:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022249:	90                   	nop
c002224a:	83 c4 0c             	add    esp,0xc
c002224d:	c3                   	ret    

c002224e <PCI::readBAR8(unsigned int, int)>:
c002224e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022252:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022256:	f6 c2 01             	test   dl,0x1
c0022259:	74 07                	je     c0022262 <PCI::readBAR8(unsigned int, int)+0x14>
c002225b:	83 e2 fc             	and    edx,0xfffffffc
c002225e:	01 c2                	add    edx,eax
c0022260:	ec                   	in     al,dx
c0022261:	c3                   	ret    
c0022262:	83 e2 f0             	and    edx,0xfffffff0
c0022265:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022268:	c3                   	ret    
c0022269:	90                   	nop

c002226a <PCI::readBAR16(unsigned int, int)>:
c002226a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002226e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022272:	f6 c2 01             	test   dl,0x1
c0022275:	74 08                	je     c002227f <PCI::readBAR16(unsigned int, int)+0x15>
c0022277:	83 e2 fc             	and    edx,0xfffffffc
c002227a:	01 c2                	add    edx,eax
c002227c:	66 ed                	in     ax,dx
c002227e:	c3                   	ret    
c002227f:	83 e2 f0             	and    edx,0xfffffff0
c0022282:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022286:	c3                   	ret    
c0022287:	90                   	nop

c0022288 <PCI::readBAR32(unsigned int, int)>:
c0022288:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002228c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022290:	f6 c2 01             	test   dl,0x1
c0022293:	74 07                	je     c002229c <PCI::readBAR32(unsigned int, int)+0x14>
c0022295:	83 e2 fc             	and    edx,0xfffffffc
c0022298:	01 c2                	add    edx,eax
c002229a:	ed                   	in     eax,dx
c002229b:	c3                   	ret    
c002229c:	83 e2 f0             	and    edx,0xfffffff0
c002229f:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00222a2:	c3                   	ret    
c00222a3:	90                   	nop

c00222a4 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00222a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222b0:	f6 c2 01             	test   dl,0x1
c00222b3:	74 07                	je     c00222bc <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00222b5:	83 e2 fc             	and    edx,0xfffffffc
c00222b8:	01 ca                	add    edx,ecx
c00222ba:	ee                   	out    dx,al
c00222bb:	c3                   	ret    
c00222bc:	83 e2 f0             	and    edx,0xfffffff0
c00222bf:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00222c2:	c3                   	ret    
c00222c3:	90                   	nop

c00222c4 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00222c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222d0:	f6 c2 01             	test   dl,0x1
c00222d3:	74 08                	je     c00222dd <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00222d5:	83 e2 fc             	and    edx,0xfffffffc
c00222d8:	01 ca                	add    edx,ecx
c00222da:	66 ef                	out    dx,ax
c00222dc:	c3                   	ret    
c00222dd:	83 e2 f0             	and    edx,0xfffffff0
c00222e0:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00222e4:	c3                   	ret    
c00222e5:	90                   	nop

c00222e6 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c00222e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222f2:	f6 c2 01             	test   dl,0x1
c00222f5:	74 07                	je     c00222fe <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00222f7:	83 e2 fc             	and    edx,0xfffffffc
c00222fa:	01 ca                	add    edx,ecx
c00222fc:	ef                   	out    dx,eax
c00222fd:	c3                   	ret    
c00222fe:	83 e2 f0             	and    edx,0xfffffff0
c0022301:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022304:	c3                   	ret    
c0022305:	90                   	nop

c0022306 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022306:	55                   	push   ebp
c0022307:	57                   	push   edi
c0022308:	56                   	push   esi
c0022309:	53                   	push   ebx
c002230a:	83 ec 0c             	sub    esp,0xc
c002230d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022311:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022315:	89 f0                	mov    eax,esi
c0022317:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002231b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002231f:	3c 07                	cmp    al,0x7
c0022321:	76 10                	jbe    c0022333 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022323:	83 ec 0c             	sub    esp,0xc
c0022326:	68 18 bc 02 c0       	push   0xc002bc18
c002232b:	e8 65 79 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0022330:	83 c4 10             	add    esp,0x10
c0022333:	80 fb 0f             	cmp    bl,0xf
c0022336:	76 10                	jbe    c0022348 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022338:	83 ec 0c             	sub    esp,0xc
c002233b:	68 48 bc 02 c0       	push   0xc002bc48
c0022340:	e8 50 79 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0022345:	83 c4 10             	add    esp,0x10
c0022348:	8d 04 36             	lea    eax,[esi+esi*1]
c002234b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022350:	83 c8 f0             	or     eax,0xfffffff0
c0022353:	ee                   	out    dx,al
c0022354:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022359:	89 e8                	mov    eax,ebp
c002235b:	ee                   	out    dx,al
c002235c:	83 c4 0c             	add    esp,0xc
c002235f:	89 d8                	mov    eax,ebx
c0022361:	66 81 e7 fc 00       	and    di,0xfc
c0022366:	5b                   	pop    ebx
c0022367:	c1 e0 08             	shl    eax,0x8
c002236a:	5e                   	pop    esi
c002236b:	09 f8                	or     eax,edi
c002236d:	5f                   	pop    edi
c002236e:	66 0d 00 c0          	or     ax,0xc000
c0022372:	5d                   	pop    ebp
c0022373:	c3                   	ret    

c0022374 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022374:	57                   	push   edi
c0022375:	56                   	push   esi
c0022376:	53                   	push   ebx
c0022377:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002237b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002237f:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022385:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022389:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002238d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022391:	83 ff 01             	cmp    edi,0x1
c0022394:	75 3e                	jne    c00223d4 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022396:	89 de                	mov    esi,ebx
c0022398:	0f b6 c0             	movzx  eax,al
c002239b:	81 e6 fc 00 00 00    	and    esi,0xfc
c00223a1:	c1 e0 10             	shl    eax,0x10
c00223a4:	0f b6 c9             	movzx  ecx,cl
c00223a7:	09 f0                	or     eax,esi
c00223a9:	c1 e1 08             	shl    ecx,0x8
c00223ac:	0f b6 d2             	movzx  edx,dl
c00223af:	09 c8                	or     eax,ecx
c00223b1:	c1 e2 0b             	shl    edx,0xb
c00223b4:	09 d0                	or     eax,edx
c00223b6:	ba f8 0c 00 00       	mov    edx,0xcf8
c00223bb:	0d 00 00 00 80       	or     eax,0x80000000
c00223c0:	ef                   	out    dx,eax
c00223c1:	ba fc 0c 00 00       	mov    edx,0xcfc
c00223c6:	ed                   	in     eax,dx
c00223c7:	83 e3 02             	and    ebx,0x2
c00223ca:	0f b6 cb             	movzx  ecx,bl
c00223cd:	c1 e1 03             	shl    ecx,0x3
c00223d0:	d3 e8                	shr    eax,cl
c00223d2:	eb 43                	jmp    c0022417 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00223d4:	83 ff 02             	cmp    edi,0x2
c00223d7:	75 2c                	jne    c0022405 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00223d9:	83 ec 0c             	sub    esp,0xc
c00223dc:	0f b6 c9             	movzx  ecx,cl
c00223df:	0f b6 d2             	movzx  edx,dl
c00223e2:	0f b6 fb             	movzx  edi,bl
c00223e5:	0f b6 c0             	movzx  eax,al
c00223e8:	57                   	push   edi
c00223e9:	51                   	push   ecx
c00223ea:	52                   	push   edx
c00223eb:	50                   	push   eax
c00223ec:	56                   	push   esi
c00223ed:	e8 14 ff ff ff       	call   c0022306 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00223f2:	89 c2                	mov    edx,eax
c00223f4:	ed                   	in     eax,dx
c00223f5:	83 e3 02             	and    ebx,0x2
c00223f8:	83 c4 20             	add    esp,0x20
c00223fb:	0f b6 cb             	movzx  ecx,bl
c00223fe:	c1 e1 03             	shl    ecx,0x3
c0022401:	d3 e8                	shr    eax,cl
c0022403:	eb 12                	jmp    c0022417 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022405:	83 ec 0c             	sub    esp,0xc
c0022408:	68 78 bc 02 c0       	push   0xc002bc78
c002240d:	e8 83 78 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0022412:	83 c4 10             	add    esp,0x10
c0022415:	31 c0                	xor    eax,eax
c0022417:	5b                   	pop    ebx
c0022418:	5e                   	pop    esi
c0022419:	5f                   	pop    edi
c002241a:	c3                   	ret    
c002241b:	90                   	nop

c002241c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002241c:	83 ec 18             	sub    esp,0x18
c002241f:	6a 00                	push   0x0
c0022421:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022426:	50                   	push   eax
c0022427:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002242c:	50                   	push   eax
c002242d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022432:	50                   	push   eax
c0022433:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022437:	e8 38 ff ff ff       	call   c0022374 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002243c:	83 c4 2c             	add    esp,0x2c
c002243f:	c3                   	ret    

c0022440 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022440:	83 ec 18             	sub    esp,0x18
c0022443:	6a 0e                	push   0xe
c0022445:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002244a:	50                   	push   eax
c002244b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022450:	50                   	push   eax
c0022451:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022456:	50                   	push   eax
c0022457:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002245b:	e8 14 ff ff ff       	call   c0022374 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022460:	83 c4 2c             	add    esp,0x2c
c0022463:	0f b6 c0             	movzx  eax,al
c0022466:	c3                   	ret    
c0022467:	90                   	nop

c0022468 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022468:	55                   	push   ebp
c0022469:	57                   	push   edi
c002246a:	56                   	push   esi
c002246b:	53                   	push   ebx
c002246c:	83 ec 18             	sub    esp,0x18
c002246f:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022474:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022479:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002247e:	6a 0a                	push   0xa
c0022480:	56                   	push   esi
c0022481:	55                   	push   ebp
c0022482:	57                   	push   edi
c0022483:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022487:	e8 e8 fe ff ff       	call   c0022374 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002248c:	83 c4 14             	add    esp,0x14
c002248f:	89 c3                	mov    ebx,eax
c0022491:	6a 0a                	push   0xa
c0022493:	0f b6 db             	movzx  ebx,bl
c0022496:	56                   	push   esi
c0022497:	55                   	push   ebp
c0022498:	57                   	push   edi
c0022499:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002249d:	e8 d2 fe ff ff       	call   c0022374 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224a2:	83 c4 2c             	add    esp,0x2c
c00224a5:	25 00 ff 00 00       	and    eax,0xff00
c00224aa:	09 d8                	or     eax,ebx
c00224ac:	5b                   	pop    ebx
c00224ad:	5e                   	pop    esi
c00224ae:	5f                   	pop    edi
c00224af:	5d                   	pop    ebp
c00224b0:	c3                   	ret    
c00224b1:	90                   	nop

c00224b2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00224b2:	83 ec 18             	sub    esp,0x18
c00224b5:	6a 08                	push   0x8
c00224b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224bc:	50                   	push   eax
c00224bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224c2:	50                   	push   eax
c00224c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224c8:	50                   	push   eax
c00224c9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224cd:	e8 a2 fe ff ff       	call   c0022374 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224d2:	83 c4 2c             	add    esp,0x2c
c00224d5:	0f b6 c4             	movzx  eax,ah
c00224d8:	c3                   	ret    
c00224d9:	90                   	nop

c00224da <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00224da:	83 ec 18             	sub    esp,0x18
c00224dd:	6a 08                	push   0x8
c00224df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224e4:	50                   	push   eax
c00224e5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224ea:	50                   	push   eax
c00224eb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00224f0:	50                   	push   eax
c00224f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00224f5:	e8 7a fe ff ff       	call   c0022374 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00224fa:	83 c4 2c             	add    esp,0x2c
c00224fd:	c3                   	ret    

c00224fe <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00224fe:	83 ec 18             	sub    esp,0x18
c0022501:	6a 3c                	push   0x3c
c0022503:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022508:	50                   	push   eax
c0022509:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002250e:	50                   	push   eax
c002250f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022514:	50                   	push   eax
c0022515:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022519:	e8 56 fe ff ff       	call   c0022374 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002251e:	83 c4 2c             	add    esp,0x2c
c0022521:	c3                   	ret    

c0022522 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022522:	83 ec 18             	sub    esp,0x18
c0022525:	6a 18                	push   0x18
c0022527:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002252c:	50                   	push   eax
c002252d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022532:	50                   	push   eax
c0022533:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022538:	50                   	push   eax
c0022539:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002253d:	e8 32 fe ff ff       	call   c0022374 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022542:	83 c4 2c             	add    esp,0x2c
c0022545:	0f b6 c4             	movzx  eax,ah
c0022548:	c3                   	ret    
c0022549:	90                   	nop

c002254a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002254a:	55                   	push   ebp
c002254b:	57                   	push   edi
c002254c:	56                   	push   esi
c002254d:	53                   	push   ebx
c002254e:	83 ec 28             	sub    esp,0x28
c0022551:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0022555:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002255a:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002255f:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0022564:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002256b:	8d 43 12             	lea    eax,[ebx+0x12]
c002256e:	83 c3 10             	add    ebx,0x10
c0022571:	0f b6 c0             	movzx  eax,al
c0022574:	0f b6 db             	movzx  ebx,bl
c0022577:	50                   	push   eax
c0022578:	51                   	push   ecx
c0022579:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002257d:	57                   	push   edi
c002257e:	55                   	push   ebp
c002257f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022583:	e8 ec fd ff ff       	call   c0022374 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022588:	83 c4 14             	add    esp,0x14
c002258b:	89 c6                	mov    esi,eax
c002258d:	53                   	push   ebx
c002258e:	c1 e6 10             	shl    esi,0x10
c0022591:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022595:	51                   	push   ecx
c0022596:	57                   	push   edi
c0022597:	55                   	push   ebp
c0022598:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002259c:	e8 d3 fd ff ff       	call   c0022374 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225a1:	83 c4 3c             	add    esp,0x3c
c00225a4:	0f b7 c0             	movzx  eax,ax
c00225a7:	5b                   	pop    ebx
c00225a8:	09 f0                	or     eax,esi
c00225aa:	5e                   	pop    esi
c00225ab:	5f                   	pop    edi
c00225ac:	5d                   	pop    ebp
c00225ad:	c3                   	ret    

c00225ae <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00225ae:	55                   	push   ebp
c00225af:	57                   	push   edi
c00225b0:	56                   	push   esi
c00225b1:	53                   	push   ebx
c00225b2:	83 ec 0c             	sub    esp,0xc
c00225b5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00225b9:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00225bd:	89 f5                	mov    ebp,esi
c00225bf:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00225c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00225c9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00225cd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00225d1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00225d5:	83 f9 01             	cmp    ecx,0x1
c00225d8:	75 5d                	jne    c0022637 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00225da:	0f b6 c8             	movzx  ecx,al
c00225dd:	0f b6 d2             	movzx  edx,dl
c00225e0:	c1 e1 10             	shl    ecx,0x10
c00225e3:	c1 e2 0b             	shl    edx,0xb
c00225e6:	89 f0                	mov    eax,esi
c00225e8:	25 fc 00 00 00       	and    eax,0xfc
c00225ed:	09 c1                	or     ecx,eax
c00225ef:	89 e8                	mov    eax,ebp
c00225f1:	0f b6 c0             	movzx  eax,al
c00225f4:	c1 e0 08             	shl    eax,0x8
c00225f7:	09 c1                	or     ecx,eax
c00225f9:	09 d1                	or     ecx,edx
c00225fb:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022600:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022606:	89 c8                	mov    eax,ecx
c0022608:	ef                   	out    dx,eax
c0022609:	ba fc 0c 00 00       	mov    edx,0xcfc
c002260e:	ed                   	in     eax,dx
c002260f:	0f b7 db             	movzx  ebx,bx
c0022612:	83 e6 02             	and    esi,0x2
c0022615:	74 0a                	je     c0022621 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0022617:	0f b7 d0             	movzx  edx,ax
c002261a:	c1 e3 10             	shl    ebx,0x10
c002261d:	09 d3                	or     ebx,edx
c002261f:	eb 05                	jmp    c0022626 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0022621:	66 31 c0             	xor    ax,ax
c0022624:	09 c3                	or     ebx,eax
c0022626:	ba f8 0c 00 00       	mov    edx,0xcf8
c002262b:	89 c8                	mov    eax,ecx
c002262d:	ef                   	out    dx,eax
c002262e:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022633:	89 d8                	mov    eax,ebx
c0022635:	eb 41                	jmp    c0022678 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022637:	83 f9 02             	cmp    ecx,0x2
c002263a:	75 45                	jne    c0022681 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c002263c:	83 ec 0c             	sub    esp,0xc
c002263f:	0f b6 d2             	movzx  edx,dl
c0022642:	89 f1                	mov    ecx,esi
c0022644:	0f b6 c0             	movzx  eax,al
c0022647:	0f b6 f1             	movzx  esi,cl
c002264a:	89 e9                	mov    ecx,ebp
c002264c:	56                   	push   esi
c002264d:	0f b6 c9             	movzx  ecx,cl
c0022650:	51                   	push   ecx
c0022651:	52                   	push   edx
c0022652:	50                   	push   eax
c0022653:	57                   	push   edi
c0022654:	e8 ad fc ff ff       	call   c0022306 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022659:	89 c2                	mov    edx,eax
c002265b:	ed                   	in     eax,dx
c002265c:	83 c4 20             	add    esp,0x20
c002265f:	0f b7 db             	movzx  ebx,bx
c0022662:	f6 c2 02             	test   dl,0x2
c0022665:	74 0c                	je     c0022673 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0022667:	0f b7 c8             	movzx  ecx,ax
c002266a:	89 d8                	mov    eax,ebx
c002266c:	c1 e0 10             	shl    eax,0x10
c002266f:	09 c8                	or     eax,ecx
c0022671:	eb 05                	jmp    c0022678 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0022673:	66 31 c0             	xor    ax,ax
c0022676:	09 d8                	or     eax,ebx
c0022678:	ef                   	out    dx,eax
c0022679:	83 c4 0c             	add    esp,0xc
c002267c:	5b                   	pop    ebx
c002267d:	5e                   	pop    esi
c002267e:	5f                   	pop    edi
c002267f:	5d                   	pop    ebp
c0022680:	c3                   	ret    
c0022681:	c7 44 24 20 78 bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bc78
c0022689:	83 c4 0c             	add    esp,0xc
c002268c:	5b                   	pop    ebx
c002268d:	5e                   	pop    esi
c002268e:	5f                   	pop    edi
c002268f:	5d                   	pop    ebp
c0022690:	e9 00 76 ff ff       	jmp    c0019c95 <Krnl::panic(char const*)>
c0022695:	90                   	nop

c0022696 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022696:	55                   	push   ebp
c0022697:	57                   	push   edi
c0022698:	56                   	push   esi
c0022699:	53                   	push   ebx
c002269a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00226a0:	80 3d 30 19 03 c0 00 	cmp    BYTE PTR ds:0xc0031930,0x0
c00226a7:	0f 85 84 00 00 00    	jne    c0022731 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c00226ad:	83 ec 0c             	sub    esp,0xc
c00226b0:	68 14 01 00 00       	push   0x114
c00226b5:	e8 df ce fe ff       	call   c000f599 <malloc>
c00226ba:	83 c4 0c             	add    esp,0xc
c00226bd:	89 c3                	mov    ebx,eax
c00226bf:	ff 35 30 0b 03 c0    	push   DWORD PTR ds:0xc0030b30
c00226c5:	68 7e bc 02 c0       	push   0xc002bc7e
c00226ca:	50                   	push   eax
c00226cb:	e8 c4 03 ff ff       	call   c0012a94 <File::File(char const*, Process*)>
c00226d0:	5a                   	pop    edx
c00226d1:	59                   	pop    ecx
c00226d2:	6a 01                	push   0x1
c00226d4:	53                   	push   ebx
c00226d5:	e8 1e 04 ff ff       	call   c0012af8 <File::open(FileOpenMode)>
c00226da:	83 c4 0c             	add    esp,0xc
c00226dd:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00226e1:	50                   	push   eax
c00226e2:	8d 44 24 28          	lea    eax,[esp+0x28]
c00226e6:	50                   	push   eax
c00226e7:	53                   	push   ebx
c00226e8:	e8 b7 06 ff ff       	call   c0012da4 <File::stat(unsigned long long*, bool*)>
c00226ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00226f1:	40                   	inc    eax
c00226f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00226f5:	e8 9f ce fe ff       	call   c000f599 <malloc>
c00226fa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00226fe:	a3 2c 19 03 c0       	mov    ds:0xc003192c,eax
c0022703:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022707:	5e                   	pop    esi
c0022708:	8b 13                	mov    edx,DWORD PTR [ebx]
c002270a:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c002270e:	51                   	push   ecx
c002270f:	50                   	push   eax
c0022710:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022714:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022718:	53                   	push   ebx
c0022719:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002271c:	83 c4 14             	add    esp,0x14
c002271f:	53                   	push   ebx
c0022720:	e8 31 04 ff ff       	call   c0012b56 <File::close()>
c0022725:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022729:	83 c4 10             	add    esp,0x10
c002272c:	a3 28 19 03 c0       	mov    ds:0xc0031928,eax
c0022731:	a1 28 19 03 c0       	mov    eax,ds:0xc0031928
c0022736:	8b 15 2c 19 03 c0    	mov    edx,DWORD PTR ds:0xc003192c
c002273c:	89 04 24             	mov    DWORD PTR [esp],eax
c002273f:	31 ff                	xor    edi,edi
c0022741:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0022749:	31 f6                	xor    esi,esi
c002274b:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0022750:	31 db                	xor    ebx,ebx
c0022752:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002275a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c002275f:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0022766:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002276a:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0022771:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0022775:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022778:	0f 8e 6b 01 00 00    	jle    c00228e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c002277e:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022781:	d4 40                	aam    0x40
c0022783:	d5 39                	aad    0x39
c0022785:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022789:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c002278d:	d4 40                	aam    0x40
c002278f:	d5 39                	aad    0x39
c0022791:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0022795:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022799:	d4 40                	aam    0x40
c002279b:	d5 39                	aad    0x39
c002279d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00227a1:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00227a5:	d4 40                	aam    0x40
c00227a7:	d5 39                	aad    0x39
c00227a9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00227ad:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00227b1:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00227b5:	3c 56                	cmp    al,0x56
c00227b7:	74 45                	je     c00227fe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c00227b9:	d4 40                	aam    0x40
c00227bb:	d5 39                	aad    0x39
c00227bd:	8d 48 d0             	lea    ecx,[eax-0x30]
c00227c0:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c00227c4:	0f b6 c9             	movzx  ecx,cl
c00227c7:	c1 e1 04             	shl    ecx,0x4
c00227ca:	d4 40                	aam    0x40
c00227cc:	d5 39                	aad    0x39
c00227ce:	8d 58 d0             	lea    ebx,[eax-0x30]
c00227d1:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00227d5:	0f b6 db             	movzx  ebx,bl
c00227d8:	09 cb                	or     ebx,ecx
c00227da:	c1 e3 04             	shl    ebx,0x4
c00227dd:	d4 40                	aam    0x40
c00227df:	d5 39                	aad    0x39
c00227e1:	8d 48 d0             	lea    ecx,[eax-0x30]
c00227e4:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00227e8:	0f b6 c9             	movzx  ecx,cl
c00227eb:	09 cb                	or     ebx,ecx
c00227ed:	c1 e3 04             	shl    ebx,0x4
c00227f0:	89 d9                	mov    ecx,ebx
c00227f2:	d4 40                	aam    0x40
c00227f4:	d5 39                	aad    0x39
c00227f6:	8d 58 d0             	lea    ebx,[eax-0x30]
c00227f9:	0f b6 db             	movzx  ebx,bl
c00227fc:	09 cb                	or     ebx,ecx
c00227fe:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0022802:	80 f9 44             	cmp    cl,0x44
c0022805:	74 47                	je     c002284e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022807:	88 c8                	mov    al,cl
c0022809:	d4 40                	aam    0x40
c002280b:	d5 39                	aad    0x39
c002280d:	83 e8 30             	sub    eax,0x30
c0022810:	0f b6 e8             	movzx  ebp,al
c0022813:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0022817:	c1 e5 04             	shl    ebp,0x4
c002281a:	d4 40                	aam    0x40
c002281c:	d5 39                	aad    0x39
c002281e:	83 e8 30             	sub    eax,0x30
c0022821:	0f b6 f0             	movzx  esi,al
c0022824:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0022828:	09 ee                	or     esi,ebp
c002282a:	c1 e6 04             	shl    esi,0x4
c002282d:	d4 40                	aam    0x40
c002282f:	d5 39                	aad    0x39
c0022831:	83 e8 30             	sub    eax,0x30
c0022834:	0f b6 e8             	movzx  ebp,al
c0022837:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c002283b:	09 ee                	or     esi,ebp
c002283d:	c1 e6 04             	shl    esi,0x4
c0022840:	89 f5                	mov    ebp,esi
c0022842:	d4 40                	aam    0x40
c0022844:	d5 39                	aad    0x39
c0022846:	83 e8 30             	sub    eax,0x30
c0022849:	0f b6 f0             	movzx  esi,al
c002284c:	09 ee                	or     esi,ebp
c002284e:	83 c7 10             	add    edi,0x10
c0022851:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0022855:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0022858:	3c 0a                	cmp    al,0xa
c002285a:	74 09                	je     c0022865 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c002285c:	45                   	inc    ebp
c002285d:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022860:	75 16                	jne    c0022878 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0022862:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022865:	3c 0a                	cmp    al,0xa
c0022867:	0f 94 c0             	sete   al
c002286a:	0f b6 c0             	movzx  eax,al
c002286d:	01 c7                	add    edi,eax
c002286f:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0022874:	75 0c                	jne    c0022882 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022876:	eb 15                	jmp    c002288d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022878:	47                   	inc    edi
c0022879:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c002287c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022880:	eb d3                	jmp    c0022855 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022882:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022887:	0f 85 e8 fe ff ff    	jne    c0022775 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002288d:	80 f9 44             	cmp    cl,0x44
c0022890:	74 0b                	je     c002289d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022892:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022897:	0f 85 d8 fe ff ff    	jne    c0022775 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c002289d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00228a1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00228a5:	c1 e1 04             	shl    ecx,0x4
c00228a8:	83 e8 30             	sub    eax,0x30
c00228ab:	09 c8                	or     eax,ecx
c00228ad:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00228b1:	0f 85 be fe ff ff    	jne    c0022775 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00228b7:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00228bb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00228bf:	c1 e1 04             	shl    ecx,0x4
c00228c2:	83 e8 30             	sub    eax,0x30
c00228c5:	09 c8                	or     eax,ecx
c00228c7:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00228cb:	0f 85 a4 fe ff ff    	jne    c0022775 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c00228d1:	50                   	push   eax
c00228d2:	50                   	push   eax
c00228d3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00228d7:	50                   	push   eax
c00228d8:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00228df:	e8 28 df fd ff       	call   c000080c <strcpy>
c00228e4:	83 c4 10             	add    esp,0x10
c00228e7:	eb 15                	jmp    c00228fe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c00228e9:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00228f0:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00228fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00228fe:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022905:	81 c4 2c 01 00 00    	add    esp,0x12c
c002290b:	5b                   	pop    ebx
c002290c:	5e                   	pop    esi
c002290d:	5f                   	pop    edi
c002290e:	5d                   	pop    ebp
c002290f:	c3                   	ret    

c0022910 <PCI::checkBus(unsigned char)>:
c0022910:	56                   	push   esi
c0022911:	53                   	push   ebx
c0022912:	31 db                	xor    ebx,ebx
c0022914:	51                   	push   ecx
c0022915:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002291a:	52                   	push   edx
c002291b:	53                   	push   ebx
c002291c:	43                   	inc    ebx
c002291d:	56                   	push   esi
c002291e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022922:	e8 37 03 00 00       	call   c0022c5e <PCI::checkDevice(unsigned char, unsigned char)>
c0022927:	83 c4 10             	add    esp,0x10
c002292a:	83 fb 20             	cmp    ebx,0x20
c002292d:	75 eb                	jne    c002291a <PCI::checkBus(unsigned char)+0xa>
c002292f:	58                   	pop    eax
c0022930:	5b                   	pop    ebx
c0022931:	5e                   	pop    esi
c0022932:	c3                   	ret    
c0022933:	90                   	nop

c0022934 <PCI::foundDevice(PCIDeviceInfo)>:
c0022934:	55                   	push   ebp
c0022935:	57                   	push   edi
c0022936:	56                   	push   esi
c0022937:	53                   	push   ebx
c0022938:	83 ec 1c             	sub    esp,0x1c
c002293b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002293f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022945:	0f 84 52 01 00 00    	je     c0022a9d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c002294b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002294f:	66 81 f9 06 04       	cmp    cx,0x406
c0022954:	75 2c                	jne    c0022982 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022956:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002295b:	50                   	push   eax
c002295c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022961:	50                   	push   eax
c0022962:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022967:	50                   	push   eax
c0022968:	56                   	push   esi
c0022969:	e8 b4 fb ff ff       	call   c0022522 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002296e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022972:	0f b6 c0             	movzx  eax,al
c0022975:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022979:	83 c4 2c             	add    esp,0x2c
c002297c:	5b                   	pop    ebx
c002297d:	5e                   	pop    esi
c002297e:	5f                   	pop    edi
c002297f:	5d                   	pop    ebp
c0022980:	eb 8e                	jmp    c0022910 <PCI::checkBus(unsigned char)>
c0022982:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022986:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c002298c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022990:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022994:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022998:	88 d3                	mov    bl,dl
c002299a:	85 c0                	test   eax,eax
c002299c:	74 33                	je     c00229d1 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002299e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00229a1:	85 d2                	test   edx,edx
c00229a3:	74 28                	je     c00229cd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00229a5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00229ab:	31 ef                	xor    edi,ebp
c00229ad:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00229b3:	75 18                	jne    c00229cd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00229b5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00229b9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00229bf:	75 0c                	jne    c00229cd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00229c1:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00229c7:	0f 84 d0 00 00 00    	je     c0022a9d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00229cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00229cf:	eb c9                	jmp    c002299a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00229d1:	66 81 f9 01 06       	cmp    cx,0x601
c00229d6:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00229da:	75 19                	jne    c00229f5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00229dc:	83 ec 0c             	sub    esp,0xc
c00229df:	68 64 01 00 00       	push   0x164
c00229e4:	e8 b0 cb fe ff       	call   c000f599 <malloc>
c00229e9:	89 c5                	mov    ebp,eax
c00229eb:	89 04 24             	mov    DWORD PTR [esp],eax
c00229ee:	e8 85 0e 00 00       	call   c0023878 <SATABus::SATABus()>
c00229f3:	eb 1e                	jmp    c0022a13 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00229f5:	66 81 f9 01 01       	cmp    cx,0x101
c00229fa:	75 60                	jne    c0022a5c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00229fc:	83 ec 0c             	sub    esp,0xc
c00229ff:	68 70 02 00 00       	push   0x270
c0022a04:	e8 90 cb fe ff       	call   c000f599 <malloc>
c0022a09:	89 c5                	mov    ebp,eax
c0022a0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0022a0e:	e8 0f 03 00 00       	call   c0022d22 <IDE::IDE()>
c0022a13:	58                   	pop    eax
c0022a14:	5a                   	pop    edx
c0022a15:	55                   	push   ebp
c0022a16:	56                   	push   esi
c0022a17:	e8 52 0f ff ff       	call   c001396e <Device::addChild(Device*)>
c0022a1c:	83 ec 1c             	sub    esp,0x1c
c0022a1f:	b9 09 00 00 00       	mov    ecx,0x9
c0022a24:	fc                   	cld    
c0022a25:	89 e7                	mov    edi,esp
c0022a27:	89 de                	mov    esi,ebx
c0022a29:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022a2b:	55                   	push   ebp
c0022a2c:	e8 4f 0e ff ff       	call   c0013880 <Device::preOpenPCI(PCIDeviceInfo)>
c0022a31:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022a34:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022a38:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022a40:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022a48:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022a50:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a53:	83 c4 4c             	add    esp,0x4c
c0022a56:	5b                   	pop    ebx
c0022a57:	5e                   	pop    esi
c0022a58:	5f                   	pop    edi
c0022a59:	5d                   	pop    ebp
c0022a5a:	ff e0                	jmp    eax
c0022a5c:	83 ec 0c             	sub    esp,0xc
c0022a5f:	68 58 01 00 00       	push   0x158
c0022a64:	e8 30 cb fe ff       	call   c000f599 <malloc>
c0022a69:	89 c5                	mov    ebp,eax
c0022a6b:	58                   	pop    eax
c0022a6c:	5a                   	pop    edx
c0022a6d:	68 97 bc 02 c0       	push   0xc002bc97
c0022a72:	55                   	push   ebp
c0022a73:	e8 00 12 ff ff       	call   c0013c78 <DriverlessDevice::DriverlessDevice(char const*)>
c0022a78:	59                   	pop    ecx
c0022a79:	5f                   	pop    edi
c0022a7a:	55                   	push   ebp
c0022a7b:	56                   	push   esi
c0022a7c:	e8 ed 0e ff ff       	call   c001396e <Device::addChild(Device*)>
c0022a81:	b9 09 00 00 00       	mov    ecx,0x9
c0022a86:	fc                   	cld    
c0022a87:	89 df                	mov    edi,ebx
c0022a89:	89 de                	mov    esi,ebx
c0022a8b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022a8d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022a91:	83 c4 2c             	add    esp,0x2c
c0022a94:	5b                   	pop    ebx
c0022a95:	5e                   	pop    esi
c0022a96:	5f                   	pop    edi
c0022a97:	5d                   	pop    ebp
c0022a98:	e9 e3 0d ff ff       	jmp    c0013880 <Device::preOpenPCI(PCIDeviceInfo)>
c0022a9d:	83 c4 1c             	add    esp,0x1c
c0022aa0:	5b                   	pop    ebx
c0022aa1:	5e                   	pop    esi
c0022aa2:	5f                   	pop    edi
c0022aa3:	5d                   	pop    ebp
c0022aa4:	c3                   	ret    
c0022aa5:	90                   	nop

c0022aa6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022aa6:	55                   	push   ebp
c0022aa7:	57                   	push   edi
c0022aa8:	56                   	push   esi
c0022aa9:	53                   	push   ebx
c0022aaa:	83 ec 68             	sub    esp,0x68
c0022aad:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022ab1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022ab8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022abc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022ac3:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022ac8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022acc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022ad3:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022ad8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022adc:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022ae1:	6a 0c                	push   0xc
c0022ae3:	57                   	push   edi
c0022ae4:	53                   	push   ebx
c0022ae5:	56                   	push   esi
c0022ae6:	55                   	push   ebp
c0022ae7:	e8 88 f8 ff ff       	call   c0022374 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022aec:	83 c4 20             	add    esp,0x20
c0022aef:	57                   	push   edi
c0022af0:	53                   	push   ebx
c0022af1:	56                   	push   esi
c0022af2:	55                   	push   ebp
c0022af3:	e8 70 f9 ff ff       	call   c0022468 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022af8:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022afd:	57                   	push   edi
c0022afe:	53                   	push   ebx
c0022aff:	56                   	push   esi
c0022b00:	55                   	push   ebp
c0022b01:	e8 f8 f9 ff ff       	call   c00224fe <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022b06:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022b0a:	83 c4 14             	add    esp,0x14
c0022b0d:	6a 3c                	push   0x3c
c0022b0f:	57                   	push   edi
c0022b10:	53                   	push   ebx
c0022b11:	56                   	push   esi
c0022b12:	55                   	push   ebp
c0022b13:	e8 5c f8 ff ff       	call   c0022374 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b18:	0f b6 c4             	movzx  eax,ah
c0022b1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022b1f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022b23:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022b27:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0022b2c:	83 c4 20             	add    esp,0x20
c0022b2f:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022b35:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022b3c:	74 7c                	je     c0022bba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022b3e:	31 c0                	xor    eax,eax
c0022b40:	8b 15 e8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5e8
c0022b46:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022b4c:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022b52:	7e 66                	jle    c0022bba <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022b54:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022b57:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022b5e:	39 cb                	cmp    ebx,ecx
c0022b60:	75 55                	jne    c0022bb7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022b62:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022b69:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022b6d:	75 48                	jne    c0022bb7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022b6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022b73:	83 ec 0c             	sub    esp,0xc
c0022b76:	68 b1 bc 02 c0       	push   0xc002bcb1
c0022b7b:	e8 b5 f9 fe ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0022b80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022b84:	8b 15 e8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5e8
c0022b8a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022b8e:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022b94:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022b9c:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022ba0:	52                   	push   edx
c0022ba1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ba5:	53                   	push   ebx
c0022ba6:	68 d6 bc 02 c0       	push   0xc002bcd6
c0022bab:	e8 85 f9 fe ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0022bb0:	83 c4 20             	add    esp,0x20
c0022bb3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022bb7:	40                   	inc    eax
c0022bb8:	eb 86                	jmp    c0022b40 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022bba:	31 d2                	xor    edx,edx
c0022bbc:	83 ec 0c             	sub    esp,0xc
c0022bbf:	57                   	push   edi
c0022bc0:	53                   	push   ebx
c0022bc1:	56                   	push   esi
c0022bc2:	52                   	push   edx
c0022bc3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022bc7:	55                   	push   ebp
c0022bc8:	e8 7d f9 ff ff       	call   c002254a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bcd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022bd1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022bd5:	42                   	inc    edx
c0022bd6:	83 c4 20             	add    esp,0x20
c0022bd9:	83 fa 06             	cmp    edx,0x6
c0022bdc:	75 de                	jne    c0022bbc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022bde:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022be3:	83 ec 0c             	sub    esp,0xc
c0022be6:	86 e0                	xchg   al,ah
c0022be8:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022bed:	6a 02                	push   0x2
c0022bef:	57                   	push   edi
c0022bf0:	53                   	push   ebx
c0022bf1:	56                   	push   esi
c0022bf2:	55                   	push   ebp
c0022bf3:	e8 7c f7 ff ff       	call   c0022374 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bf8:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022bfd:	83 c4 20             	add    esp,0x20
c0022c00:	57                   	push   edi
c0022c01:	53                   	push   ebx
c0022c02:	56                   	push   esi
c0022c03:	55                   	push   ebp
c0022c04:	e8 a9 f8 ff ff       	call   c00224b2 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022c09:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022c0d:	57                   	push   edi
c0022c0e:	53                   	push   ebx
c0022c0f:	56                   	push   esi
c0022c10:	55                   	push   ebp
c0022c11:	e8 06 f8 ff ff       	call   c002241c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022c16:	b9 09 00 00 00       	mov    ecx,0x9
c0022c1b:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022c20:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022c24:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022c28:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022c2c:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022c30:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022c34:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022c38:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022c3c:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022c40:	83 ec 0c             	sub    esp,0xc
c0022c43:	fc                   	cld    
c0022c44:	89 e7                	mov    edi,esp
c0022c46:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022c4a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c4c:	55                   	push   ebp
c0022c4d:	e8 e2 fc ff ff       	call   c0022934 <PCI::foundDevice(PCIDeviceInfo)>
c0022c52:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022c58:	5b                   	pop    ebx
c0022c59:	5e                   	pop    esi
c0022c5a:	5f                   	pop    edi
c0022c5b:	5d                   	pop    ebp
c0022c5c:	c3                   	ret    
c0022c5d:	90                   	nop

c0022c5e <PCI::checkDevice(unsigned char, unsigned char)>:
c0022c5e:	55                   	push   ebp
c0022c5f:	57                   	push   edi
c0022c60:	56                   	push   esi
c0022c61:	53                   	push   ebx
c0022c62:	83 ec 0c             	sub    esp,0xc
c0022c65:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022c69:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022c6e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022c73:	6a 00                	push   0x0
c0022c75:	56                   	push   esi
c0022c76:	57                   	push   edi
c0022c77:	55                   	push   ebp
c0022c78:	e8 9f f7 ff ff       	call   c002241c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022c7d:	6a 00                	push   0x0
c0022c7f:	56                   	push   esi
c0022c80:	57                   	push   edi
c0022c81:	55                   	push   ebp
c0022c82:	e8 1f fe ff ff       	call   c0022aa6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022c87:	83 c4 20             	add    esp,0x20
c0022c8a:	6a 00                	push   0x0
c0022c8c:	56                   	push   esi
c0022c8d:	57                   	push   edi
c0022c8e:	55                   	push   ebp
c0022c8f:	e8 ac f7 ff ff       	call   c0022440 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022c94:	83 c4 10             	add    esp,0x10
c0022c97:	84 c0                	test   al,al
c0022c99:	79 27                	jns    c0022cc2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022c9b:	bb 01 00 00 00       	mov    ebx,0x1
c0022ca0:	53                   	push   ebx
c0022ca1:	56                   	push   esi
c0022ca2:	57                   	push   edi
c0022ca3:	55                   	push   ebp
c0022ca4:	e8 73 f7 ff ff       	call   c002241c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ca9:	83 c4 10             	add    esp,0x10
c0022cac:	66 40                	inc    ax
c0022cae:	74 0c                	je     c0022cbc <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022cb0:	53                   	push   ebx
c0022cb1:	56                   	push   esi
c0022cb2:	57                   	push   edi
c0022cb3:	55                   	push   ebp
c0022cb4:	e8 ed fd ff ff       	call   c0022aa6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022cb9:	83 c4 10             	add    esp,0x10
c0022cbc:	43                   	inc    ebx
c0022cbd:	83 fb 08             	cmp    ebx,0x8
c0022cc0:	75 de                	jne    c0022ca0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022cc2:	83 c4 0c             	add    esp,0xc
c0022cc5:	5b                   	pop    ebx
c0022cc6:	5e                   	pop    esi
c0022cc7:	5f                   	pop    edi
c0022cc8:	5d                   	pop    ebp
c0022cc9:	c3                   	ret    

c0022cca <PCI::detect()>:
c0022cca:	56                   	push   esi
c0022ccb:	53                   	push   ebx
c0022ccc:	53                   	push   ebx
c0022ccd:	31 db                	xor    ebx,ebx
c0022ccf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022cd3:	6a 00                	push   0x0
c0022cd5:	6a 00                	push   0x0
c0022cd7:	6a 00                	push   0x0
c0022cd9:	56                   	push   esi
c0022cda:	e8 61 f7 ff ff       	call   c0022440 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022cdf:	83 c4 10             	add    esp,0x10
c0022ce2:	a8 80                	test   al,0x80
c0022ce4:	75 21                	jne    c0022d07 <PCI::detect()+0x3d>
c0022ce6:	51                   	push   ecx
c0022ce7:	51                   	push   ecx
c0022ce8:	6a 00                	push   0x0
c0022cea:	56                   	push   esi
c0022ceb:	e8 20 fc ff ff       	call   c0022910 <PCI::checkBus(unsigned char)>
c0022cf0:	83 c4 10             	add    esp,0x10
c0022cf3:	eb 24                	jmp    c0022d19 <PCI::detect()+0x4f>
c0022cf5:	52                   	push   edx
c0022cf6:	52                   	push   edx
c0022cf7:	53                   	push   ebx
c0022cf8:	43                   	inc    ebx
c0022cf9:	56                   	push   esi
c0022cfa:	e8 11 fc ff ff       	call   c0022910 <PCI::checkBus(unsigned char)>
c0022cff:	83 c4 10             	add    esp,0x10
c0022d02:	83 fb 08             	cmp    ebx,0x8
c0022d05:	74 12                	je     c0022d19 <PCI::detect()+0x4f>
c0022d07:	53                   	push   ebx
c0022d08:	6a 00                	push   0x0
c0022d0a:	6a 00                	push   0x0
c0022d0c:	56                   	push   esi
c0022d0d:	e8 0a f7 ff ff       	call   c002241c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022d12:	83 c4 10             	add    esp,0x10
c0022d15:	66 40                	inc    ax
c0022d17:	74 dc                	je     c0022cf5 <PCI::detect()+0x2b>
c0022d19:	58                   	pop    eax
c0022d1a:	5b                   	pop    ebx
c0022d1b:	5e                   	pop    esi
c0022d1c:	c3                   	ret    
c0022d1d:	90                   	nop

c0022d1e <IDE::close(int, int, void*)>:
c0022d1e:	83 c8 ff             	or     eax,0xffffffff
c0022d21:	c3                   	ret    

c0022d22 <IDE::IDE()>:
c0022d22:	83 ec 0c             	sub    esp,0xc
c0022d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d29:	83 ec 08             	sub    esp,0x8
c0022d2c:	68 20 bd 02 c0       	push   0xc002bd20
c0022d31:	50                   	push   eax
c0022d32:	e8 e5 0f ff ff       	call   c0013d1c <HardDiskController::HardDiskController(char const*)>
c0022d37:	83 c4 10             	add    esp,0x10
c0022d3a:	ba b0 bd 02 c0       	mov    edx,0xc002bdb0
c0022d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d43:	89 10                	mov    DWORD PTR [eax],edx
c0022d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d49:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022d50:	90                   	nop
c0022d51:	83 c4 0c             	add    esp,0xc
c0022d54:	c3                   	ret    
c0022d55:	90                   	nop

c0022d56 <IDE::prepareInterrupt(unsigned char)>:
c0022d56:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022d5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022d5f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022d67:	c3                   	ret    

c0022d68 <selectDrive(unsigned char, unsigned char)>:
c0022d68:	c3                   	ret    
c0022d69:	90                   	nop

c0022d6a <IDE::getBase(unsigned char)>:
c0022d6a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022d6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d73:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022d7b:	c3                   	ret    

c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022d7c:	55                   	push   ebp
c0022d7d:	57                   	push   edi
c0022d7e:	56                   	push   esi
c0022d7f:	53                   	push   ebx
c0022d80:	83 ec 1c             	sub    esp,0x1c
c0022d83:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022d87:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022d8b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022d8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022d92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022d96:	80 f9 03             	cmp    cl,0x3
c0022d99:	77 51                	ja     c0022dec <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022d9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022d9f:	0f b6 f2             	movzx  esi,dl
c0022da2:	0f b6 db             	movzx  ebx,bl
c0022da5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022da8:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022dac:	83 ca 80             	or     edx,0xffffff80
c0022daf:	0f b6 d2             	movzx  edx,dl
c0022db2:	52                   	push   edx
c0022db3:	6a 0c                	push   0xc
c0022db5:	56                   	push   esi
c0022db6:	57                   	push   edi
c0022db7:	e8 c0 ff ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022dbc:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022dc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022dc5:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022dc9:	ee                   	out    dx,al
c0022dca:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022dcf:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022dd3:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022dd7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022ddb:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022de3:	83 c4 2c             	add    esp,0x2c
c0022de6:	5b                   	pop    ebx
c0022de7:	5e                   	pop    esi
c0022de8:	5f                   	pop    edi
c0022de9:	5d                   	pop    ebp
c0022dea:	eb 90                	jmp    c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022dec:	80 fb 07             	cmp    bl,0x7
c0022def:	77 12                	ja     c0022e03 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022df1:	0f b6 d2             	movzx  edx,dl
c0022df4:	0f b6 db             	movzx  ebx,bl
c0022df7:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022dff:	89 da                	mov    edx,ebx
c0022e01:	eb 2f                	jmp    c0022e32 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022e03:	80 fb 0d             	cmp    bl,0xd
c0022e06:	77 13                	ja     c0022e1b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022e08:	0f b6 d2             	movzx  edx,dl
c0022e0b:	0f b6 db             	movzx  ebx,bl
c0022e0e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022e15:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022e19:	eb 17                	jmp    c0022e32 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022e1b:	80 fb 15             	cmp    bl,0x15
c0022e1e:	77 13                	ja     c0022e33 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022e20:	0f b6 d2             	movzx  edx,dl
c0022e23:	0f b6 db             	movzx  ebx,bl
c0022e26:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022e2e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022e32:	ee                   	out    dx,al
c0022e33:	83 c4 1c             	add    esp,0x1c
c0022e36:	5b                   	pop    ebx
c0022e37:	5e                   	pop    esi
c0022e38:	5f                   	pop    edi
c0022e39:	5d                   	pop    ebp
c0022e3a:	c3                   	ret    
c0022e3b:	90                   	nop

c0022e3c <IDE::read(unsigned char, unsigned char)>:
c0022e3c:	55                   	push   ebp
c0022e3d:	57                   	push   edi
c0022e3e:	56                   	push   esi
c0022e3f:	53                   	push   ebx
c0022e40:	83 ec 1c             	sub    esp,0x1c
c0022e43:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022e47:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e4b:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022e4e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022e52:	3c 03                	cmp    al,0x3
c0022e54:	77 43                	ja     c0022e99 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022e56:	0f b6 f2             	movzx  esi,dl
c0022e59:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022e5c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022e60:	83 c8 80             	or     eax,0xffffff80
c0022e63:	0f b6 c0             	movzx  eax,al
c0022e66:	50                   	push   eax
c0022e67:	6a 0c                	push   0xc
c0022e69:	56                   	push   esi
c0022e6a:	57                   	push   edi
c0022e6b:	e8 0c ff ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e70:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022e75:	0f b6 c3             	movzx  eax,bl
c0022e78:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022e7c:	ec                   	in     al,dx
c0022e7d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022e81:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022e86:	52                   	push   edx
c0022e87:	6a 0c                	push   0xc
c0022e89:	56                   	push   esi
c0022e8a:	57                   	push   edi
c0022e8b:	e8 ec fe ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e90:	83 c4 20             	add    esp,0x20
c0022e93:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022e97:	eb 49                	jmp    c0022ee2 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022e99:	80 fb 07             	cmp    bl,0x7
c0022e9c:	77 12                	ja     c0022eb0 <IDE::read(unsigned char, unsigned char)+0x74>
c0022e9e:	0f b6 d2             	movzx  edx,dl
c0022ea1:	0f b6 c3             	movzx  eax,bl
c0022ea4:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022eac:	89 c2                	mov    edx,eax
c0022eae:	eb 31                	jmp    c0022ee1 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022eb0:	80 fb 0d             	cmp    bl,0xd
c0022eb3:	77 13                	ja     c0022ec8 <IDE::read(unsigned char, unsigned char)+0x8c>
c0022eb5:	0f b6 d2             	movzx  edx,dl
c0022eb8:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022ebf:	0f b6 d3             	movzx  edx,bl
c0022ec2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022ec6:	eb 19                	jmp    c0022ee1 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022ec8:	31 c0                	xor    eax,eax
c0022eca:	80 fb 15             	cmp    bl,0x15
c0022ecd:	77 13                	ja     c0022ee2 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022ecf:	0f b6 d2             	movzx  edx,dl
c0022ed2:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022eda:	0f b6 d3             	movzx  edx,bl
c0022edd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022ee1:	ec                   	in     al,dx
c0022ee2:	83 c4 1c             	add    esp,0x1c
c0022ee5:	5b                   	pop    ebx
c0022ee6:	5e                   	pop    esi
c0022ee7:	5f                   	pop    edi
c0022ee8:	5d                   	pop    ebp
c0022ee9:	c3                   	ret    

c0022eea <IDE::waitInterrupt(unsigned char)>:
c0022eea:	55                   	push   ebp
c0022eeb:	57                   	push   edi
c0022eec:	56                   	push   esi
c0022eed:	53                   	push   ebx
c0022eee:	31 db                	xor    ebx,ebx
c0022ef0:	83 ec 0c             	sub    esp,0xc
c0022ef3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022ef7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022efc:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022f04:	89 e8                	mov    eax,ebp
c0022f06:	84 c0                	test   al,al
c0022f08:	75 34                	jne    c0022f3e <IDE::waitInterrupt(unsigned char)+0x54>
c0022f0a:	52                   	push   edx
c0022f0b:	6a 0c                	push   0xc
c0022f0d:	56                   	push   esi
c0022f0e:	57                   	push   edi
c0022f0f:	e8 28 ff ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c0022f14:	83 c4 10             	add    esp,0x10
c0022f17:	a8 01                	test   al,0x1
c0022f19:	75 2b                	jne    c0022f46 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022f1b:	f6 c3 04             	test   bl,0x4
c0022f1e:	75 16                	jne    c0022f36 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022f20:	83 fb 32             	cmp    ebx,0x32
c0022f23:	7e 11                	jle    c0022f36 <IDE::waitInterrupt(unsigned char)+0x4c>
c0022f25:	50                   	push   eax
c0022f26:	50                   	push   eax
c0022f27:	6a 00                	push   0x0
c0022f29:	68 80 96 98 00       	push   0x989680
c0022f2e:	e8 c6 ab ff ff       	call   c001daf9 <nanoSleep(unsigned long long)>
c0022f33:	83 c4 10             	add    esp,0x10
c0022f36:	83 fb 3c             	cmp    ebx,0x3c
c0022f39:	74 0b                	je     c0022f46 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022f3b:	43                   	inc    ebx
c0022f3c:	eb be                	jmp    c0022efc <IDE::waitInterrupt(unsigned char)+0x12>
c0022f3e:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022f46:	83 c4 0c             	add    esp,0xc
c0022f49:	89 e8                	mov    eax,ebp
c0022f4b:	5b                   	pop    ebx
c0022f4c:	5e                   	pop    esi
c0022f4d:	5f                   	pop    edi
c0022f4e:	5d                   	pop    ebp
c0022f4f:	c3                   	ret    

c0022f50 <ideChannel0IRQHandler(regs*, void*)>:
c0022f50:	83 ec 10             	sub    esp,0x10
c0022f53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f57:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022f5e:	6a 07                	push   0x7
c0022f60:	6a 00                	push   0x0
c0022f62:	50                   	push   eax
c0022f63:	e8 d4 fe ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c0022f68:	83 c4 1c             	add    esp,0x1c
c0022f6b:	c3                   	ret    

c0022f6c <ideChannel1IRQHandler(regs*, void*)>:
c0022f6c:	83 ec 10             	sub    esp,0x10
c0022f6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f73:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022f7a:	6a 07                	push   0x7
c0022f7c:	6a 01                	push   0x1
c0022f7e:	50                   	push   eax
c0022f7f:	e8 b8 fe ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c0022f84:	83 c4 1c             	add    esp,0x1c
c0022f87:	c3                   	ret    

c0022f88 <IDE::enableIRQs(unsigned char, bool)>:
c0022f88:	57                   	push   edi
c0022f89:	56                   	push   esi
c0022f8a:	be 04 00 00 00       	mov    esi,0x4
c0022f8f:	53                   	push   ebx
c0022f90:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022f95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022f99:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022f9e:	0f 94 c0             	sete   al
c0022fa1:	d1 e0                	shl    eax,1
c0022fa3:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022faa:	0f b6 c0             	movzx  eax,al
c0022fad:	50                   	push   eax
c0022fae:	6a 0c                	push   0xc
c0022fb0:	57                   	push   edi
c0022fb1:	53                   	push   ebx
c0022fb2:	e8 c5 fd ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fb7:	83 c4 10             	add    esp,0x10
c0022fba:	50                   	push   eax
c0022fbb:	6a 0c                	push   0xc
c0022fbd:	57                   	push   edi
c0022fbe:	53                   	push   ebx
c0022fbf:	e8 78 fe ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c0022fc4:	83 c4 10             	add    esp,0x10
c0022fc7:	4e                   	dec    esi
c0022fc8:	75 f0                	jne    c0022fba <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022fca:	5b                   	pop    ebx
c0022fcb:	5e                   	pop    esi
c0022fcc:	5f                   	pop    edi
c0022fcd:	c3                   	ret    

c0022fce <IDE::open(int, int, void*)>:
c0022fce:	55                   	push   ebp
c0022fcf:	57                   	push   edi
c0022fd0:	56                   	push   esi
c0022fd1:	53                   	push   ebx
c0022fd2:	83 ec 1c             	sub    esp,0x1c
c0022fd5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022fd9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0022fe2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022feb:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0022ff2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022ff9:	0f 85 b0 02 00 00    	jne    c00232af <IDE::open(int, int, void*)+0x2e1>
c0022fff:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023005:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023009:	83 e0 7f             	and    eax,0x7f
c002300c:	3c 05                	cmp    al,0x5
c002300e:	74 04                	je     c0023014 <IDE::open(int, int, void*)+0x46>
c0023010:	3c 0f                	cmp    al,0xf
c0023012:	75 32                	jne    c0023046 <IDE::open(int, int, void*)+0x78>
c0023014:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002301a:	83 e0 fc             	and    eax,0xfffffffc
c002301d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023024:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002302a:	83 e0 fc             	and    eax,0xfffffffc
c002302d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023034:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002303a:	83 e0 fc             	and    eax,0xfffffffc
c002303d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023044:	eb 14                	jmp    c002305a <IDE::open(int, int, void*)+0x8c>
c0023046:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023050:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002305a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023061:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023068:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002306c:	89 c6                	mov    esi,eax
c002306e:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023073:	c1 e6 10             	shl    esi,0x10
c0023076:	89 e8                	mov    eax,ebp
c0023078:	89 fa                	mov    edx,edi
c002307a:	c1 e0 0b             	shl    eax,0xb
c002307d:	09 f0                	or     eax,esi
c002307f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023086:	c1 e6 08             	shl    esi,0x8
c0023089:	09 c6                	or     esi,eax
c002308b:	89 f0                	mov    eax,esi
c002308d:	0d 08 00 00 80       	or     eax,0x80000008
c0023092:	ef                   	out    dx,eax
c0023093:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023098:	89 ca                	mov    edx,ecx
c002309a:	ed                   	in     eax,dx
c002309b:	c1 e8 10             	shr    eax,0x10
c002309e:	3d ff ff 00 00       	cmp    eax,0xffff
c00230a3:	0f 84 f5 00 00 00    	je     c002319e <IDE::open(int, int, void*)+0x1d0>
c00230a9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00230af:	89 fa                	mov    edx,edi
c00230b1:	89 f0                	mov    eax,esi
c00230b3:	ef                   	out    dx,eax
c00230b4:	b0 fe                	mov    al,0xfe
c00230b6:	89 ca                	mov    edx,ecx
c00230b8:	ee                   	out    dx,al
c00230b9:	89 f0                	mov    eax,esi
c00230bb:	89 fa                	mov    edx,edi
c00230bd:	ef                   	out    dx,eax
c00230be:	89 ca                	mov    edx,ecx
c00230c0:	ed                   	in     eax,dx
c00230c1:	3c fe                	cmp    al,0xfe
c00230c3:	0f 85 a9 00 00 00    	jne    c0023172 <IDE::open(int, int, void*)+0x1a4>
c00230c9:	8b 15 e8 d5 02 c0    	mov    edx,DWORD PTR ds:0xc002d5e8
c00230cf:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00230d6:	74 33                	je     c002310b <IDE::open(int, int, void*)+0x13d>
c00230d8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00230de:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00230e2:	40                   	inc    eax
c00230e3:	83 ec 0c             	sub    esp,0xc
c00230e6:	0f b6 c0             	movzx  eax,al
c00230e9:	50                   	push   eax
c00230ea:	55                   	push   ebp
c00230eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00230ef:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c00230f5:	51                   	push   ecx
c00230f6:	e8 53 48 ff ff       	call   c001794e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c00230fb:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023100:	83 c4 1c             	add    esp,0x1c
c0023103:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023109:	eb 0a                	jmp    c0023115 <IDE::open(int, int, void*)+0x147>
c002310b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023115:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002311c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023123:	c1 e1 10             	shl    ecx,0x10
c0023126:	c1 e0 08             	shl    eax,0x8
c0023129:	bf f8 0c 00 00       	mov    edi,0xcf8
c002312e:	09 c1                	or     ecx,eax
c0023130:	89 fa                	mov    edx,edi
c0023132:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023139:	c1 e0 0b             	shl    eax,0xb
c002313c:	09 c1                	or     ecx,eax
c002313e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023144:	89 c8                	mov    eax,ecx
c0023146:	ef                   	out    dx,eax
c0023147:	be fc 0c 00 00       	mov    esi,0xcfc
c002314c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023152:	89 f2                	mov    edx,esi
c0023154:	ee                   	out    dx,al
c0023155:	89 c8                	mov    eax,ecx
c0023157:	89 fa                	mov    edx,edi
c0023159:	ef                   	out    dx,eax
c002315a:	89 f2                	mov    edx,esi
c002315c:	ed                   	in     eax,dx
c002315d:	0f b6 c0             	movzx  eax,al
c0023160:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023166:	74 46                	je     c00231ae <IDE::open(int, int, void*)+0x1e0>
c0023168:	83 ec 0c             	sub    esp,0xc
c002316b:	68 38 bd 02 c0       	push   0xc002bd38
c0023170:	eb 34                	jmp    c00231a6 <IDE::open(int, int, void*)+0x1d8>
c0023172:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002317b:	75 17                	jne    c0023194 <IDE::open(int, int, void*)+0x1c6>
c002317d:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023182:	74 07                	je     c002318b <IDE::open(int, int, void*)+0x1bd>
c0023184:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023189:	75 09                	jne    c0023194 <IDE::open(int, int, void*)+0x1c6>
c002318b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023192:	eb 1a                	jmp    c00231ae <IDE::open(int, int, void*)+0x1e0>
c0023194:	83 ec 0c             	sub    esp,0xc
c0023197:	68 40 bd 02 c0       	push   0xc002bd40
c002319c:	eb 08                	jmp    c00231a6 <IDE::open(int, int, void*)+0x1d8>
c002319e:	83 ec 0c             	sub    esp,0xc
c00231a1:	68 71 bd 02 c0       	push   0xc002bd71
c00231a6:	e8 ea 6a ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c00231ab:	83 c4 10             	add    esp,0x10
c00231ae:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00231b5:	79 1a                	jns    c00231d1 <IDE::open(int, int, void*)+0x203>
c00231b7:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00231bd:	83 e0 fc             	and    eax,0xfffffffc
c00231c0:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00231c7:	83 c0 08             	add    eax,0x8
c00231ca:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00231d1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00231d7:	89 c2                	mov    edx,eax
c00231d9:	83 e2 0f             	and    edx,0xf
c00231dc:	66 83 fa 08          	cmp    dx,0x8
c00231e0:	75 0a                	jne    c00231ec <IDE::open(int, int, void*)+0x21e>
c00231e2:	83 e8 02             	sub    eax,0x2
c00231e5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00231ec:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00231f2:	89 c2                	mov    edx,eax
c00231f4:	83 e2 0f             	and    edx,0xf
c00231f7:	66 83 fa 08          	cmp    dx,0x8
c00231fb:	75 0a                	jne    c0023207 <IDE::open(int, int, void*)+0x239>
c00231fd:	83 e8 02             	sub    eax,0x2
c0023200:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023207:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002320e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023215:	89 d0                	mov    eax,edx
c0023217:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002321a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002321e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023222:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023225:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002322a:	0f b6 c9             	movzx  ecx,cl
c002322d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023234:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023237:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002323b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002323f:	8d 50 02             	lea    edx,[eax+0x2]
c0023242:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023247:	0f b6 d2             	movzx  edx,dl
c002324a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023250:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023253:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023257:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002325b:	8d 48 03             	lea    ecx,[eax+0x3]
c002325e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023263:	0f b6 c9             	movzx  ecx,cl
c0023266:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002326c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002326f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023273:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023277:	8d 50 04             	lea    edx,[eax+0x4]
c002327a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023280:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023285:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002328c:	66 85 f6             	test   si,si
c002328f:	74 5b                	je     c00232ec <IDE::open(int, int, void*)+0x31e>
c0023291:	0f b6 d2             	movzx  edx,dl
c0023294:	83 c0 05             	add    eax,0x5
c0023297:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002329a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002329e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00232a2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00232a8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00232ad:	eb 3d                	jmp    c00232ec <IDE::open(int, int, void*)+0x31e>
c00232af:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00232b5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00232bc:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00232c3:	66 05 06 02          	add    ax,0x206
c00232c7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00232ce:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00232d5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00232dc:	66 05 06 02          	add    ax,0x206
c00232e0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00232e7:	e9 e5 fe ff ff       	jmp    c00231d1 <IDE::open(int, int, void*)+0x203>
c00232ec:	50                   	push   eax
c00232ed:	50                   	push   eax
c00232ee:	6a 00                	push   0x0
c00232f0:	53                   	push   ebx
c00232f1:	e8 60 fa ff ff       	call   c0022d56 <IDE::prepareInterrupt(unsigned char)>
c00232f6:	5a                   	pop    edx
c00232f7:	59                   	pop    ecx
c00232f8:	6a 01                	push   0x1
c00232fa:	53                   	push   ebx
c00232fb:	e8 56 fa ff ff       	call   c0022d56 <IDE::prepareInterrupt(unsigned char)>
c0023300:	83 c4 0c             	add    esp,0xc
c0023303:	6a 00                	push   0x0
c0023305:	6a 00                	push   0x0
c0023307:	53                   	push   ebx
c0023308:	e8 7b fc ff ff       	call   c0022f88 <IDE::enableIRQs(unsigned char, bool)>
c002330d:	83 c4 0c             	add    esp,0xc
c0023310:	6a 00                	push   0x0
c0023312:	6a 01                	push   0x1
c0023314:	53                   	push   ebx
c0023315:	e8 6e fc ff ff       	call   c0022f88 <IDE::enableIRQs(unsigned char, bool)>
c002331a:	83 c4 10             	add    esp,0x10
c002331d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023324:	74 34                	je     c002335a <IDE::open(int, int, void*)+0x38c>
c0023326:	83 ec 0c             	sub    esp,0xc
c0023329:	53                   	push   ebx
c002332a:	6a 01                	push   0x1
c002332c:	68 50 2f 02 c0       	push   0xc0022f50
c0023331:	6a 0e                	push   0xe
c0023333:	53                   	push   ebx
c0023334:	e8 ad 05 ff ff       	call   c00138e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023339:	83 c4 14             	add    esp,0x14
c002333c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023342:	53                   	push   ebx
c0023343:	6a 01                	push   0x1
c0023345:	68 6c 2f 02 c0       	push   0xc0022f6c
c002334a:	6a 0f                	push   0xf
c002334c:	53                   	push   ebx
c002334d:	e8 94 05 ff ff       	call   c00138e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023352:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023358:	eb 38                	jmp    c0023392 <IDE::open(int, int, void*)+0x3c4>
c002335a:	83 ec 0c             	sub    esp,0xc
c002335d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023367:	53                   	push   ebx
c0023368:	6a 00                	push   0x0
c002336a:	68 50 2f 02 c0       	push   0xc0022f50
c002336f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023375:	53                   	push   ebx
c0023376:	e8 6b 05 ff ff       	call   c00138e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002337b:	83 c4 14             	add    esp,0x14
c002337e:	53                   	push   ebx
c002337f:	6a 00                	push   0x0
c0023381:	68 6c 2f 02 c0       	push   0xc0022f6c
c0023386:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002338c:	53                   	push   ebx
c002338d:	e8 54 05 ff ff       	call   c00138e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023392:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023394:	83 c4 20             	add    esp,0x20
c0023397:	83 ec 0c             	sub    esp,0xc
c002339a:	53                   	push   ebx
c002339b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002339e:	83 c4 0c             	add    esp,0xc
c00233a1:	6a 07                	push   0x7
c00233a3:	6a 00                	push   0x0
c00233a5:	53                   	push   ebx
c00233a6:	e8 91 fa ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c00233ab:	83 c4 0c             	add    esp,0xc
c00233ae:	6a 07                	push   0x7
c00233b0:	6a 01                	push   0x1
c00233b2:	53                   	push   ebx
c00233b3:	e8 84 fa ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c00233b8:	83 c4 0c             	add    esp,0xc
c00233bb:	6a 01                	push   0x1
c00233bd:	6a 00                	push   0x0
c00233bf:	53                   	push   ebx
c00233c0:	e8 c3 fb ff ff       	call   c0022f88 <IDE::enableIRQs(unsigned char, bool)>
c00233c5:	83 c4 0c             	add    esp,0xc
c00233c8:	6a 01                	push   0x1
c00233ca:	6a 01                	push   0x1
c00233cc:	53                   	push   ebx
c00233cd:	e8 b6 fb ff ff       	call   c0022f88 <IDE::enableIRQs(unsigned char, bool)>
c00233d2:	83 c4 2c             	add    esp,0x2c
c00233d5:	31 c0                	xor    eax,eax
c00233d7:	5b                   	pop    ebx
c00233d8:	5e                   	pop    esi
c00233d9:	5f                   	pop    edi
c00233da:	5d                   	pop    ebp
c00233db:	c3                   	ret    

c00233dc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00233dc:	55                   	push   ebp
c00233dd:	57                   	push   edi
c00233de:	56                   	push   esi
c00233df:	53                   	push   ebx
c00233e0:	83 ec 1c             	sub    esp,0x1c
c00233e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00233e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00233eb:	8d 50 f8             	lea    edx,[eax-0x8]
c00233ee:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00233f2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00233f6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00233fa:	80 fa 03             	cmp    dl,0x3
c00233fd:	77 5d                	ja     c002345c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00233ff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023407:	0f b6 db             	movzx  ebx,bl
c002340a:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002340d:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023411:	83 ca 80             	or     edx,0xffffff80
c0023414:	0f b6 d2             	movzx  edx,dl
c0023417:	52                   	push   edx
c0023418:	6a 0c                	push   0xc
c002341a:	53                   	push   ebx
c002341b:	56                   	push   esi
c002341c:	e8 5b f9 ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023421:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023426:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002342a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002342e:	0f b6 c0             	movzx  eax,al
c0023431:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023435:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023437:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002343c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023440:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023444:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023448:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023450:	83 c4 2c             	add    esp,0x2c
c0023453:	5b                   	pop    ebx
c0023454:	5e                   	pop    esi
c0023455:	5f                   	pop    edi
c0023456:	5d                   	pop    ebp
c0023457:	e9 20 f9 ff ff       	jmp    c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002345c:	3c 07                	cmp    al,0x7
c002345e:	77 10                	ja     c0023470 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023460:	0f b6 db             	movzx  ebx,bl
c0023463:	0f b6 d0             	movzx  edx,al
c0023466:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002346e:	eb 2d                	jmp    c002349d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023470:	3c 0d                	cmp    al,0xd
c0023472:	77 13                	ja     c0023487 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023474:	0f b6 db             	movzx  ebx,bl
c0023477:	0f b6 c0             	movzx  eax,al
c002347a:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023481:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023485:	eb 16                	jmp    c002349d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023487:	3c 15                	cmp    al,0x15
c0023489:	77 14                	ja     c002349f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c002348b:	0f b6 db             	movzx  ebx,bl
c002348e:	0f b6 c0             	movzx  eax,al
c0023491:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023499:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c002349d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002349f:	83 c4 1c             	add    esp,0x1c
c00234a2:	5b                   	pop    ebx
c00234a3:	5e                   	pop    esi
c00234a4:	5f                   	pop    edi
c00234a5:	5d                   	pop    ebp
c00234a6:	c3                   	ret    
c00234a7:	90                   	nop

c00234a8 <IDE::detect()>:
c00234a8:	55                   	push   ebp
c00234a9:	57                   	push   edi
c00234aa:	56                   	push   esi
c00234ab:	53                   	push   ebx
c00234ac:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00234b2:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00234b9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00234c0:	0f 85 9d 02 00 00    	jne    c0023763 <IDE::detect()+0x2bb>
c00234c6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00234cd:	31 f6                	xor    esi,esi
c00234cf:	31 ed                	xor    ebp,ebp
c00234d1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00234d9:	89 e8                	mov    eax,ebp
c00234db:	c1 e0 06             	shl    eax,0x6
c00234de:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00234e6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00234ea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00234ee:	c1 e0 04             	shl    eax,0x4
c00234f1:	83 c8 a0             	or     eax,0xffffffa0
c00234f4:	0f b6 c0             	movzx  eax,al
c00234f7:	50                   	push   eax
c00234f8:	6a 06                	push   0x6
c00234fa:	56                   	push   esi
c00234fb:	53                   	push   ebx
c00234fc:	e8 7b f8 ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023501:	83 c4 0c             	add    esp,0xc
c0023504:	6a 0c                	push   0xc
c0023506:	56                   	push   esi
c0023507:	53                   	push   ebx
c0023508:	e8 2f f9 ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c002350d:	83 c4 0c             	add    esp,0xc
c0023510:	6a 0c                	push   0xc
c0023512:	56                   	push   esi
c0023513:	53                   	push   ebx
c0023514:	e8 23 f9 ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c0023519:	83 c4 0c             	add    esp,0xc
c002351c:	6a 0c                	push   0xc
c002351e:	56                   	push   esi
c002351f:	53                   	push   ebx
c0023520:	e8 17 f9 ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c0023525:	83 c4 0c             	add    esp,0xc
c0023528:	6a 0c                	push   0xc
c002352a:	56                   	push   esi
c002352b:	53                   	push   ebx
c002352c:	e8 0b f9 ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c0023531:	68 ec 00 00 00       	push   0xec
c0023536:	6a 07                	push   0x7
c0023538:	56                   	push   esi
c0023539:	53                   	push   ebx
c002353a:	e8 3d f8 ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002353f:	83 c4 1c             	add    esp,0x1c
c0023542:	6a 0c                	push   0xc
c0023544:	56                   	push   esi
c0023545:	53                   	push   ebx
c0023546:	e8 f1 f8 ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c002354b:	83 c4 0c             	add    esp,0xc
c002354e:	6a 0c                	push   0xc
c0023550:	56                   	push   esi
c0023551:	53                   	push   ebx
c0023552:	e8 e5 f8 ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c0023557:	83 c4 0c             	add    esp,0xc
c002355a:	6a 0c                	push   0xc
c002355c:	56                   	push   esi
c002355d:	53                   	push   ebx
c002355e:	e8 d9 f8 ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c0023563:	83 c4 0c             	add    esp,0xc
c0023566:	6a 0c                	push   0xc
c0023568:	56                   	push   esi
c0023569:	53                   	push   ebx
c002356a:	e8 cd f8 ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c002356f:	83 c4 0c             	add    esp,0xc
c0023572:	6a 0c                	push   0xc
c0023574:	56                   	push   esi
c0023575:	53                   	push   ebx
c0023576:	e8 c1 f8 ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c002357b:	83 c4 10             	add    esp,0x10
c002357e:	84 c0                	test   al,al
c0023580:	0f 84 63 01 00 00    	je     c00236e9 <IDE::detect()+0x241>
c0023586:	31 ff                	xor    edi,edi
c0023588:	50                   	push   eax
c0023589:	6a 0c                	push   0xc
c002358b:	56                   	push   esi
c002358c:	53                   	push   ebx
c002358d:	e8 aa f8 ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c0023592:	83 c4 10             	add    esp,0x10
c0023595:	a8 01                	test   al,0x1
c0023597:	0f 85 6d 01 00 00    	jne    c002370a <IDE::detect()+0x262>
c002359d:	84 c0                	test   al,al
c002359f:	78 04                	js     c00235a5 <IDE::detect()+0xfd>
c00235a1:	a8 08                	test   al,0x8
c00235a3:	75 27                	jne    c00235cc <IDE::detect()+0x124>
c00235a5:	47                   	inc    edi
c00235a6:	81 ff 17 01 00 00    	cmp    edi,0x117
c00235ac:	7e da                	jle    c0023588 <IDE::detect()+0xe0>
c00235ae:	50                   	push   eax
c00235af:	50                   	push   eax
c00235b0:	6a 00                	push   0x0
c00235b2:	68 40 4b 4c 00       	push   0x4c4b40
c00235b7:	e8 3d a5 ff ff       	call   c001daf9 <nanoSleep(unsigned long long)>
c00235bc:	83 c4 10             	add    esp,0x10
c00235bf:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00235c5:	75 c1                	jne    c0023588 <IDE::detect()+0xe0>
c00235c7:	e9 3e 01 00 00       	jmp    c002370a <IDE::detect()+0x262>
c00235cc:	31 c9                	xor    ecx,ecx
c00235ce:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00235d2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00235d6:	83 ec 0c             	sub    esp,0xc
c00235d9:	68 80 00 00 00       	push   0x80
c00235de:	57                   	push   edi
c00235df:	6a 00                	push   0x0
c00235e1:	56                   	push   esi
c00235e2:	53                   	push   ebx
c00235e3:	e8 f4 fd ff ff       	call   c00233dc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00235e8:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00235ed:	89 e8                	mov    eax,ebp
c00235ef:	89 d1                	mov    ecx,edx
c00235f1:	c1 e0 06             	shl    eax,0x6
c00235f4:	01 d8                	add    eax,ebx
c00235f6:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00235fd:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0023604:	89 f2                	mov    edx,esi
c0023606:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002360c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023610:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0023616:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002361a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023621:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023629:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023630:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023638:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002363e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0023645:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002364b:	8d 54 24 58          	lea    edx,[esp+0x58]
c002364f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023653:	83 c4 20             	add    esp,0x20
c0023656:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023659:	83 c0 02             	add    eax,0x2
c002365c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0023662:	83 c7 02             	add    edi,0x2
c0023665:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023668:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002366e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0023672:	75 e2                	jne    c0023656 <IDE::detect()+0x1ae>
c0023674:	89 e8                	mov    eax,ebp
c0023676:	c1 e0 06             	shl    eax,0x6
c0023679:	01 d8                	add    eax,ebx
c002367b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0023681:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023688:	66 c1 ea 09          	shr    dx,0x9
c002368c:	83 e2 01             	and    edx,0x1
c002368f:	84 c9                	test   cl,cl
c0023691:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023697:	75 22                	jne    c00236bb <IDE::detect()+0x213>
c0023699:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00236a0:	74 46                	je     c00236e8 <IDE::detect()+0x240>
c00236a2:	83 ec 0c             	sub    esp,0xc
c00236a5:	68 7c 01 00 00       	push   0x17c
c00236aa:	e8 ea be fe ff       	call   c000f599 <malloc>
c00236af:	89 c7                	mov    edi,eax
c00236b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00236b4:	e8 15 05 00 00       	call   c0023bce <ATA::ATA()>
c00236b9:	eb 17                	jmp    c00236d2 <IDE::detect()+0x22a>
c00236bb:	83 ec 0c             	sub    esp,0xc
c00236be:	68 80 01 00 00       	push   0x180
c00236c3:	e8 d1 be fe ff       	call   c000f599 <malloc>
c00236c8:	89 c7                	mov    edi,eax
c00236ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00236cd:	e8 04 0b 00 00       	call   c00241d6 <ATAPI::ATAPI()>
c00236d2:	5a                   	pop    edx
c00236d3:	59                   	pop    ecx
c00236d4:	57                   	push   edi
c00236d5:	53                   	push   ebx
c00236d6:	e8 93 02 ff ff       	call   c001396e <Device::addChild(Device*)>
c00236db:	8b 07                	mov    eax,DWORD PTR [edi]
c00236dd:	53                   	push   ebx
c00236de:	55                   	push   ebp
c00236df:	6a 00                	push   0x0
c00236e1:	57                   	push   edi
c00236e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00236e5:	83 c4 20             	add    esp,0x20
c00236e8:	45                   	inc    ebp
c00236e9:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00236ee:	74 0d                	je     c00236fd <IDE::detect()+0x255>
c00236f0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00236f8:	e9 dc fd ff ff       	jmp    c00234d9 <IDE::detect()+0x31>
c00236fd:	4e                   	dec    esi
c00236fe:	74 63                	je     c0023763 <IDE::detect()+0x2bb>
c0023700:	be 01 00 00 00       	mov    esi,0x1
c0023705:	e9 c7 fd ff ff       	jmp    c00234d1 <IDE::detect()+0x29>
c002370a:	50                   	push   eax
c002370b:	6a 04                	push   0x4
c002370d:	56                   	push   esi
c002370e:	53                   	push   ebx
c002370f:	e8 28 f7 ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c0023714:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023718:	83 c4 0c             	add    esp,0xc
c002371b:	6a 05                	push   0x5
c002371d:	56                   	push   esi
c002371e:	53                   	push   ebx
c002371f:	e8 18 f7 ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c0023724:	83 c4 10             	add    esp,0x10
c0023727:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002372b:	80 fa 14             	cmp    dl,0x14
c002372e:	75 04                	jne    c0023734 <IDE::detect()+0x28c>
c0023730:	3c eb                	cmp    al,0xeb
c0023732:	eb 07                	jmp    c002373b <IDE::detect()+0x293>
c0023734:	3c 96                	cmp    al,0x96
c0023736:	75 b1                	jne    c00236e9 <IDE::detect()+0x241>
c0023738:	80 fa 69             	cmp    dl,0x69
c002373b:	75 ac                	jne    c00236e9 <IDE::detect()+0x241>
c002373d:	68 a1 00 00 00       	push   0xa1
c0023742:	6a 07                	push   0x7
c0023744:	56                   	push   esi
c0023745:	53                   	push   ebx
c0023746:	e8 31 f6 ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002374b:	5f                   	pop    edi
c002374c:	58                   	pop    eax
c002374d:	6a 00                	push   0x0
c002374f:	68 40 42 0f 00       	push   0xf4240
c0023754:	e8 a0 a3 ff ff       	call   c001daf9 <nanoSleep(unsigned long long)>
c0023759:	83 c4 10             	add    esp,0x10
c002375c:	b1 01                	mov    cl,0x1
c002375e:	e9 6b fe ff ff       	jmp    c00235ce <IDE::detect()+0x126>
c0023763:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023769:	5b                   	pop    ebx
c002376a:	5e                   	pop    esi
c002376b:	5f                   	pop    edi
c002376c:	5d                   	pop    ebp
c002376d:	c3                   	ret    

c002376e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002376e:	55                   	push   ebp
c002376f:	57                   	push   edi
c0023770:	56                   	push   esi
c0023771:	53                   	push   ebx
c0023772:	83 ec 1c             	sub    esp,0x1c
c0023775:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023779:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002377d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023781:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023785:	88 c3                	mov    bl,al
c0023787:	84 c0                	test   al,al
c0023789:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002378d:	0f 84 81 00 00 00    	je     c0023814 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023793:	83 ec 0c             	sub    esp,0xc
c0023796:	68 9b bd 02 c0       	push   0xc002bd9b
c002379b:	e8 95 ed fe ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c00237a0:	83 c4 10             	add    esp,0x10
c00237a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00237a7:	3c 01                	cmp    al,0x1
c00237a9:	74 63                	je     c002380e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c00237ab:	3c 02                	cmp    al,0x2
c00237ad:	75 53                	jne    c0023802 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00237af:	d1 e6                	shl    esi,1
c00237b1:	09 ee                	or     esi,ebp
c00237b3:	50                   	push   eax
c00237b4:	89 f0                	mov    eax,esi
c00237b6:	6a 01                	push   0x1
c00237b8:	0f b6 f0             	movzx  esi,al
c00237bb:	c1 e6 06             	shl    esi,0x6
c00237be:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00237c6:	50                   	push   eax
c00237c7:	57                   	push   edi
c00237c8:	e8 6f f6 ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c00237cd:	83 c4 10             	add    esp,0x10
c00237d0:	a8 01                	test   al,0x1
c00237d2:	74 02                	je     c00237d6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c00237d4:	b3 07                	mov    bl,0x7
c00237d6:	a8 02                	test   al,0x2
c00237d8:	74 02                	je     c00237dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c00237da:	b3 03                	mov    bl,0x3
c00237dc:	a8 04                	test   al,0x4
c00237de:	74 02                	je     c00237e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c00237e0:	b3 14                	mov    bl,0x14
c00237e2:	a8 08                	test   al,0x8
c00237e4:	74 02                	je     c00237e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c00237e6:	b3 03                	mov    bl,0x3
c00237e8:	a8 10                	test   al,0x10
c00237ea:	74 02                	je     c00237ee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c00237ec:	b3 15                	mov    bl,0x15
c00237ee:	a8 20                	test   al,0x20
c00237f0:	74 02                	je     c00237f4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c00237f2:	b3 03                	mov    bl,0x3
c00237f4:	a8 40                	test   al,0x40
c00237f6:	74 02                	je     c00237fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c00237f8:	b3 16                	mov    bl,0x16
c00237fa:	84 c0                	test   al,al
c00237fc:	79 16                	jns    c0023814 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00237fe:	b3 0d                	mov    bl,0xd
c0023800:	eb 12                	jmp    c0023814 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023802:	3c 03                	cmp    al,0x3
c0023804:	74 0c                	je     c0023812 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023806:	3c 04                	cmp    al,0x4
c0023808:	75 0a                	jne    c0023814 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002380a:	b3 08                	mov    bl,0x8
c002380c:	eb 06                	jmp    c0023814 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002380e:	b3 13                	mov    bl,0x13
c0023810:	eb 02                	jmp    c0023814 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023812:	b3 17                	mov    bl,0x17
c0023814:	83 c4 1c             	add    esp,0x1c
c0023817:	88 d8                	mov    al,bl
c0023819:	5b                   	pop    ebx
c002381a:	5e                   	pop    esi
c002381b:	5f                   	pop    edi
c002381c:	5d                   	pop    ebp
c002381d:	c3                   	ret    

c002381e <IDE::polling(unsigned char, unsigned int)>:
c002381e:	57                   	push   edi
c002381f:	56                   	push   esi
c0023820:	53                   	push   ebx
c0023821:	bb 04 00 00 00       	mov    ebx,0x4
c0023826:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002382a:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002382f:	52                   	push   edx
c0023830:	6a 0c                	push   0xc
c0023832:	56                   	push   esi
c0023833:	57                   	push   edi
c0023834:	e8 03 f6 ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c0023839:	83 c4 10             	add    esp,0x10
c002383c:	4b                   	dec    ebx
c002383d:	75 f0                	jne    c002382f <IDE::polling(unsigned char, unsigned int)+0x11>
c002383f:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023844:	50                   	push   eax
c0023845:	6a 0c                	push   0xc
c0023847:	56                   	push   esi
c0023848:	57                   	push   edi
c0023849:	e8 ee f5 ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c002384e:	83 c4 10             	add    esp,0x10
c0023851:	a8 01                	test   al,0x1
c0023853:	75 17                	jne    c002386c <IDE::polling(unsigned char, unsigned int)+0x4e>
c0023855:	a8 20                	test   al,0x20
c0023857:	75 0f                	jne    c0023868 <IDE::polling(unsigned char, unsigned int)+0x4a>
c0023859:	4b                   	dec    ebx
c002385a:	74 10                	je     c002386c <IDE::polling(unsigned char, unsigned int)+0x4e>
c002385c:	84 c0                	test   al,al
c002385e:	78 e4                	js     c0023844 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023860:	a8 08                	test   al,0x8
c0023862:	74 e0                	je     c0023844 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023864:	31 c0                	xor    eax,eax
c0023866:	eb 06                	jmp    c002386e <IDE::polling(unsigned char, unsigned int)+0x50>
c0023868:	b0 01                	mov    al,0x1
c002386a:	eb 02                	jmp    c002386e <IDE::polling(unsigned char, unsigned int)+0x50>
c002386c:	b0 02                	mov    al,0x2
c002386e:	5b                   	pop    ebx
c002386f:	5e                   	pop    esi
c0023870:	5f                   	pop    edi
c0023871:	c3                   	ret    

c0023872 <SATABus::close(int, int, void*)>:
c0023872:	31 c0                	xor    eax,eax
c0023874:	c3                   	ret    
c0023875:	90                   	nop

c0023876 <SATABus::detect()>:
c0023876:	c3                   	ret    
c0023877:	90                   	nop

c0023878 <SATABus::SATABus()>:
c0023878:	83 ec 0c             	sub    esp,0xc
c002387b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002387f:	83 ec 08             	sub    esp,0x8
c0023882:	68 d4 bd 02 c0       	push   0xc002bdd4
c0023887:	50                   	push   eax
c0023888:	e8 8f 04 ff ff       	call   c0013d1c <HardDiskController::HardDiskController(char const*)>
c002388d:	83 c4 10             	add    esp,0x10
c0023890:	ba 28 be 02 c0       	mov    edx,0xc002be28
c0023895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023899:	89 10                	mov    DWORD PTR [eax],edx
c002389b:	83 ec 0c             	sub    esp,0xc
c002389e:	6a 50                	push   0x50
c00238a0:	e8 41 c1 fe ff       	call   c000f9e6 <Phys::allocateContiguousPages(int)>
c00238a5:	83 c4 10             	add    esp,0x10
c00238a8:	89 c2                	mov    edx,eax
c00238aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238ae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00238b4:	83 ec 0c             	sub    esp,0xc
c00238b7:	6a 50                	push   0x50
c00238b9:	e8 df d8 fe ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c00238be:	83 c4 10             	add    esp,0x10
c00238c1:	89 c2                	mov    edx,eax
c00238c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238c7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00238cd:	a1 50 d7 02 c0       	mov    eax,ds:0xc002d750
c00238d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00238d6:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00238dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00238e0:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00238e6:	83 ec 0c             	sub    esp,0xc
c00238e9:	6a 03                	push   0x3
c00238eb:	6a 50                	push   0x50
c00238ed:	51                   	push   ecx
c00238ee:	52                   	push   edx
c00238ef:	50                   	push   eax
c00238f0:	e8 5b e3 fe ff       	call   c0011c50 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00238f5:	83 c4 20             	add    esp,0x20
c00238f8:	90                   	nop
c00238f9:	83 c4 0c             	add    esp,0xc
c00238fc:	c3                   	ret    
c00238fd:	90                   	nop

c00238fe <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00238fe:	83 ec 0c             	sub    esp,0xc
c0023901:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023905:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023908:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002390b:	09 c2                	or     edx,eax
c002390d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023911:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023917:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023919:	31 c0                	xor    eax,eax
c002391b:	c1 e9 08             	shr    ecx,0x8
c002391e:	83 e1 0f             	and    ecx,0xf
c0023921:	39 c8                	cmp    eax,ecx
c0023923:	74 0a                	je     c002392f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023925:	f6 c2 01             	test   dl,0x1
c0023928:	74 18                	je     c0023942 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c002392a:	d1 ea                	shr    edx,1
c002392c:	40                   	inc    eax
c002392d:	eb f2                	jmp    c0023921 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c002392f:	83 ec 0c             	sub    esp,0xc
c0023932:	68 f8 bd 02 c0       	push   0xc002bdf8
c0023937:	e8 59 63 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c002393c:	83 c4 10             	add    esp,0x10
c002393f:	83 c8 ff             	or     eax,0xffffffff
c0023942:	83 c4 0c             	add    esp,0xc
c0023945:	c3                   	ret    

c0023946 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023946:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002394a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002394d:	89 c2                	mov    edx,eax
c002394f:	c1 ea 08             	shr    edx,0x8
c0023952:	83 e2 0f             	and    edx,0xf
c0023955:	fe ca                	dec    dl
c0023957:	75 31                	jne    c002398a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023959:	83 e0 0f             	and    eax,0xf
c002395c:	3c 03                	cmp    al,0x3
c002395e:	75 2a                	jne    c002398a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023960:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023963:	b8 02 00 00 00       	mov    eax,0x2
c0023968:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002396e:	74 1c                	je     c002398c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023970:	b8 04 00 00 00       	mov    eax,0x4
c0023975:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002397b:	74 0f                	je     c002398c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002397d:	31 c0                	xor    eax,eax
c002397f:	83 fa 03             	cmp    edx,0x3
c0023982:	0f 94 c0             	sete   al
c0023985:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023989:	c3                   	ret    
c002398a:	31 c0                	xor    eax,eax
c002398c:	c3                   	ret    
c002398d:	90                   	nop

c002398e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002398e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023992:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023995:	0f ba e2 0f          	bt     edx,0xf
c0023999:	72 f7                	jb     c0023992 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002399b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002399e:	83 ca 10             	or     edx,0x10
c00239a1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00239a4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239a7:	83 ca 01             	or     edx,0x1
c00239aa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00239ad:	c3                   	ret    

c00239ae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00239ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00239b2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239b5:	83 e2 fe             	and    edx,0xfffffffe
c00239b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00239bb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239be:	83 e2 ef             	and    edx,0xffffffef
c00239c1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00239c4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239c7:	0f ba e2 0e          	bt     edx,0xe
c00239cb:	72 f7                	jb     c00239c4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00239cd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239d0:	0f ba e2 0f          	bt     edx,0xf
c00239d4:	72 ee                	jb     c00239c4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00239d6:	c3                   	ret    
c00239d7:	90                   	nop

c00239d8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00239d8:	55                   	push   ebp
c00239d9:	57                   	push   edi
c00239da:	56                   	push   esi
c00239db:	53                   	push   ebx
c00239dc:	83 ec 1c             	sub    esp,0x1c
c00239df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00239e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00239e7:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00239eb:	53                   	push   ebx
c00239ec:	89 fd                	mov    ebp,edi
c00239ee:	56                   	push   esi
c00239ef:	c1 e5 0a             	shl    ebp,0xa
c00239f2:	e8 b7 ff ff ff       	call   c00239ae <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00239f7:	83 ec 0c             	sub    esp,0xc
c00239fa:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023a00:	01 e8                	add    eax,ebp
c0023a02:	89 03                	mov    DWORD PTR [ebx],eax
c0023a04:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023a06:	68 00 04 00 00       	push   0x400
c0023a0b:	6a 00                	push   0x0
c0023a0d:	50                   	push   eax
c0023a0e:	e8 3d cd fd ff       	call   c0000750 <memset>
c0023a13:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023a19:	89 fa                	mov    edx,edi
c0023a1b:	01 e8                	add    eax,ebp
c0023a1d:	c1 e7 0d             	shl    edi,0xd
c0023a20:	89 03                	mov    DWORD PTR [ebx],eax
c0023a22:	c1 e2 08             	shl    edx,0x8
c0023a25:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023a2c:	81 c2 00 80 00 00    	add    edx,0x8000
c0023a32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023a36:	89 d0                	mov    eax,edx
c0023a38:	83 c4 1c             	add    esp,0x1c
c0023a3b:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023a41:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023a44:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023a47:	68 00 01 00 00       	push   0x100
c0023a4c:	6a 00                	push   0x0
c0023a4e:	50                   	push   eax
c0023a4f:	e8 fc cc fd ff       	call   c0000750 <memset>
c0023a54:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023a58:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023a5e:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023a64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023a68:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023a6b:	83 c4 10             	add    esp,0x10
c0023a6e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023a75:	31 ff                	xor    edi,edi
c0023a77:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023a7d:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a87:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023a8d:	83 c5 20             	add    ebp,0x20
c0023a90:	01 f8                	add    eax,edi
c0023a92:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023a95:	52                   	push   edx
c0023a96:	68 00 01 00 00       	push   0x100
c0023a9b:	6a 00                	push   0x0
c0023a9d:	50                   	push   eax
c0023a9e:	e8 ad cc fd ff       	call   c0000750 <memset>
c0023aa3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023aa7:	83 c4 10             	add    esp,0x10
c0023aaa:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023ab0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023ab7:	01 f8                	add    eax,edi
c0023ab9:	81 c7 00 01 00 00    	add    edi,0x100
c0023abf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023ac2:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023ac8:	75 b3                	jne    c0023a7d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023aca:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023ace:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023ad2:	83 c4 1c             	add    esp,0x1c
c0023ad5:	5b                   	pop    ebx
c0023ad6:	5e                   	pop    esi
c0023ad7:	5f                   	pop    edi
c0023ad8:	5d                   	pop    ebp
c0023ad9:	e9 b0 fe ff ff       	jmp    c002398e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023ade <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023ade:	55                   	push   ebp
c0023adf:	57                   	push   edi
c0023ae0:	56                   	push   esi
c0023ae1:	53                   	push   ebx
c0023ae2:	31 db                	xor    ebx,ebx
c0023ae4:	83 ec 0c             	sub    esp,0xc
c0023ae7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023aeb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023aef:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023af2:	f7 c7 01 00 00 00    	test   edi,0x1
c0023af8:	74 7a                	je     c0023b74 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023afa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023afe:	89 d8                	mov    eax,ebx
c0023b00:	c1 e0 07             	shl    eax,0x7
c0023b03:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023b0a:	55                   	push   ebp
c0023b0b:	56                   	push   esi
c0023b0c:	e8 35 fe ff ff       	call   c0023946 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023b11:	5a                   	pop    edx
c0023b12:	83 f8 01             	cmp    eax,0x1
c0023b15:	59                   	pop    ecx
c0023b16:	75 21                	jne    c0023b39 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023b18:	50                   	push   eax
c0023b19:	53                   	push   ebx
c0023b1a:	55                   	push   ebp
c0023b1b:	56                   	push   esi
c0023b1c:	e8 b7 fe ff ff       	call   c00239d8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023b21:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023b28:	e8 6c ba fe ff       	call   c000f599 <malloc>
c0023b2d:	89 c5                	mov    ebp,eax
c0023b2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0023b32:	e8 03 0d 00 00       	call   c002483a <SATA::SATA()>
c0023b37:	eb 24                	jmp    c0023b5d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023b39:	83 f8 04             	cmp    eax,0x4
c0023b3c:	75 36                	jne    c0023b74 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023b3e:	51                   	push   ecx
c0023b3f:	53                   	push   ebx
c0023b40:	55                   	push   ebp
c0023b41:	56                   	push   esi
c0023b42:	e8 91 fe ff ff       	call   c00239d8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023b47:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023b4e:	e8 46 ba fe ff       	call   c000f599 <malloc>
c0023b53:	89 c5                	mov    ebp,eax
c0023b55:	89 04 24             	mov    DWORD PTR [esp],eax
c0023b58:	e8 53 10 00 00       	call   c0024bb0 <SATAPI::SATAPI()>
c0023b5d:	58                   	pop    eax
c0023b5e:	5a                   	pop    edx
c0023b5f:	55                   	push   ebp
c0023b60:	56                   	push   esi
c0023b61:	e8 08 fe fe ff       	call   c001396e <Device::addChild(Device*)>
c0023b66:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023b69:	56                   	push   esi
c0023b6a:	6a 00                	push   0x0
c0023b6c:	53                   	push   ebx
c0023b6d:	55                   	push   ebp
c0023b6e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023b71:	83 c4 20             	add    esp,0x20
c0023b74:	d1 ef                	shr    edi,1
c0023b76:	43                   	inc    ebx
c0023b77:	83 fb 20             	cmp    ebx,0x20
c0023b7a:	0f 85 72 ff ff ff    	jne    c0023af2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023b80:	83 c4 0c             	add    esp,0xc
c0023b83:	5b                   	pop    ebx
c0023b84:	5e                   	pop    esi
c0023b85:	5f                   	pop    edi
c0023b86:	5d                   	pop    ebp
c0023b87:	c3                   	ret    

c0023b88 <SATABus::open(int, int, void*)>:
c0023b88:	83 ec 14             	sub    esp,0x14
c0023b8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023b8f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023b95:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023b9b:	52                   	push   edx
c0023b9c:	50                   	push   eax
c0023b9d:	e8 3c ff ff ff       	call   c0023ade <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023ba2:	31 c0                	xor    eax,eax
c0023ba4:	83 c4 1c             	add    esp,0x1c
c0023ba7:	c3                   	ret    

c0023ba8 <ATA::close(int, int, void*)>:
c0023ba8:	83 ec 0c             	sub    esp,0xc
c0023bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023baf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023bb5:	85 c0                	test   eax,eax
c0023bb7:	74 0c                	je     c0023bc5 <ATA::close(int, int, void*)+0x1d>
c0023bb9:	83 ec 0c             	sub    esp,0xc
c0023bbc:	8b 10                	mov    edx,DWORD PTR [eax]
c0023bbe:	50                   	push   eax
c0023bbf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023bc2:	83 c4 10             	add    esp,0x10
c0023bc5:	31 c0                	xor    eax,eax
c0023bc7:	83 c4 0c             	add    esp,0xc
c0023bca:	c3                   	ret    
c0023bcb:	90                   	nop

c0023bcc <ATA::powerSaving(PowerSavingLevel)>:
c0023bcc:	c3                   	ret    
c0023bcd:	90                   	nop

c0023bce <ATA::ATA()>:
c0023bce:	83 ec 0c             	sub    esp,0xc
c0023bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bd5:	83 ec 04             	sub    esp,0x4
c0023bd8:	68 00 02 00 00       	push   0x200
c0023bdd:	68 f1 be 02 c0       	push   0xc002bef1
c0023be2:	50                   	push   eax
c0023be3:	e8 bc 01 ff ff       	call   c0013da4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023be8:	83 c4 10             	add    esp,0x10
c0023beb:	ba 74 be 02 c0       	mov    edx,0xc002be74
c0023bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bf4:	89 10                	mov    DWORD PTR [eax],edx
c0023bf6:	90                   	nop
c0023bf7:	83 c4 0c             	add    esp,0xc
c0023bfa:	c3                   	ret    
c0023bfb:	90                   	nop

c0023bfc <ATA::flush(bool)>:
c0023bfc:	53                   	push   ebx
c0023bfd:	83 ec 08             	sub    esp,0x8
c0023c00:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023c05:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023c09:	19 c0                	sbb    eax,eax
c0023c0b:	83 e0 fd             	and    eax,0xfffffffd
c0023c0e:	05 ea 00 00 00       	add    eax,0xea
c0023c13:	50                   	push   eax
c0023c14:	6a 07                	push   0x7
c0023c16:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c1d:	50                   	push   eax
c0023c1e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c24:	e8 53 f1 ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c29:	83 c4 0c             	add    esp,0xc
c0023c2c:	6a 00                	push   0x0
c0023c2e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c35:	50                   	push   eax
c0023c36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c3c:	e8 dd fb ff ff       	call   c002381e <IDE::polling(unsigned char, unsigned int)>
c0023c41:	83 c4 18             	add    esp,0x18
c0023c44:	5b                   	pop    ebx
c0023c45:	c3                   	ret    

c0023c46 <ATA::readyForCommand()>:
c0023c46:	56                   	push   esi
c0023c47:	53                   	push   ebx
c0023c48:	31 db                	xor    ebx,ebx
c0023c4a:	50                   	push   eax
c0023c4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023c4f:	50                   	push   eax
c0023c50:	6a 0c                	push   0xc
c0023c52:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023c59:	50                   	push   eax
c0023c5a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023c60:	e8 d7 f1 ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c0023c65:	83 c4 10             	add    esp,0x10
c0023c68:	a8 88                	test   al,0x88
c0023c6a:	74 23                	je     c0023c8f <ATA::readyForCommand()+0x49>
c0023c6c:	43                   	inc    ebx
c0023c6d:	83 fb 63             	cmp    ebx,0x63
c0023c70:	7e dd                	jle    c0023c4f <ATA::readyForCommand()+0x9>
c0023c72:	51                   	push   ecx
c0023c73:	51                   	push   ecx
c0023c74:	6a 00                	push   0x0
c0023c76:	68 40 42 0f 00       	push   0xf4240
c0023c7b:	e8 79 9e ff ff       	call   c001daf9 <nanoSleep(unsigned long long)>
c0023c80:	83 c4 10             	add    esp,0x10
c0023c83:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023c89:	75 c4                	jne    c0023c4f <ATA::readyForCommand()+0x9>
c0023c8b:	31 c0                	xor    eax,eax
c0023c8d:	eb 02                	jmp    c0023c91 <ATA::readyForCommand()+0x4b>
c0023c8f:	b0 01                	mov    al,0x1
c0023c91:	5a                   	pop    edx
c0023c92:	5b                   	pop    ebx
c0023c93:	5e                   	pop    esi
c0023c94:	c3                   	ret    
c0023c95:	90                   	nop

c0023c96 <ATA::access(unsigned long long, int, void*, bool)>:
c0023c96:	55                   	push   ebp
c0023c97:	57                   	push   edi
c0023c98:	56                   	push   esi
c0023c99:	53                   	push   ebx
c0023c9a:	83 ec 2c             	sub    esp,0x2c
c0023c9d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023ca1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023ca5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023ca9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023cad:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023cb1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023cb5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023cb9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023cbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023cc3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023cc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023ccd:	c1 e0 06             	shl    eax,0x6
c0023cd0:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023cd8:	74 5d                	je     c0023d37 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023cda:	89 fa                	mov    edx,edi
c0023cdc:	89 f0                	mov    eax,esi
c0023cde:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023ce2:	c1 ea 1c             	shr    edx,0x1c
c0023ce5:	89 d1                	mov    ecx,edx
c0023ce7:	09 c1                	or     ecx,eax
c0023ce9:	74 25                	je     c0023d10 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023ceb:	31 ed                	xor    ebp,ebp
c0023ced:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023cf4:	89 fa                	mov    edx,edi
c0023cf6:	89 f0                	mov    eax,esi
c0023cf8:	0f ad d0             	shrd   eax,edx,cl
c0023cfb:	d3 ea                	shr    edx,cl
c0023cfd:	f6 c1 20             	test   cl,0x20
c0023d00:	74 02                	je     c0023d04 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023d02:	89 d0                	mov    eax,edx
c0023d04:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023d08:	45                   	inc    ebp
c0023d09:	83 fd 06             	cmp    ebp,0x6
c0023d0c:	75 df                	jne    c0023ced <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023d0e:	eb 76                	jmp    c0023d86 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023d10:	89 f0                	mov    eax,esi
c0023d12:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023d17:	89 fa                	mov    edx,edi
c0023d19:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023d20:	0f ac d0 10          	shrd   eax,edx,0x10
c0023d24:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023d29:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023d2d:	c1 ee 18             	shr    esi,0x18
c0023d30:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023d35:	eb 56                	jmp    c0023d8d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023d37:	6a 00                	push   0x0
c0023d39:	6a 3f                	push   0x3f
c0023d3b:	57                   	push   edi
c0023d3c:	56                   	push   esi
c0023d3d:	e8 22 29 00 00       	call   c0026664 <__umoddi3>
c0023d42:	83 c4 10             	add    esp,0x10
c0023d45:	40                   	inc    eax
c0023d46:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023d4a:	6a 00                	push   0x0
c0023d4c:	68 f0 03 00 00       	push   0x3f0
c0023d51:	57                   	push   edi
c0023d52:	56                   	push   esi
c0023d53:	e8 0c 28 00 00       	call   c0026564 <__udivdi3>
c0023d58:	83 c4 10             	add    esp,0x10
c0023d5b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023d60:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023d67:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023d6c:	6a 00                	push   0x0
c0023d6e:	6a 3f                	push   0x3f
c0023d70:	57                   	push   edi
c0023d71:	56                   	push   esi
c0023d72:	e8 ed 27 00 00       	call   c0026564 <__udivdi3>
c0023d77:	83 c4 10             	add    esp,0x10
c0023d7a:	89 c6                	mov    esi,eax
c0023d7c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023d81:	83 e6 0f             	and    esi,0xf
c0023d84:	eb 07                	jmp    c0023d8d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023d86:	31 f6                	xor    esi,esi
c0023d88:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023d8d:	bf 01 00 00 00       	mov    edi,0x1
c0023d92:	50                   	push   eax
c0023d93:	6a 00                	push   0x0
c0023d95:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023d9c:	50                   	push   eax
c0023d9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023da1:	e8 e2 f1 ff ff       	call   c0022f88 <IDE::enableIRQs(unsigned char, bool)>
c0023da6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023da9:	e8 98 fe ff ff       	call   c0023c46 <ATA::readyForCommand()>
c0023dae:	83 c4 10             	add    esp,0x10
c0023db1:	84 c0                	test   al,al
c0023db3:	0f 84 5a 02 00 00    	je     c0024013 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023db9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023dbf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023dc5:	c1 e0 04             	shl    eax,0x4
c0023dc8:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023dcf:	09 c6                	or     esi,eax
c0023dd1:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023dd6:	75 05                	jne    c0023ddd <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023dd8:	83 ce a0             	or     esi,0xffffffa0
c0023ddb:	eb 03                	jmp    c0023de0 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023ddd:	83 ce e0             	or     esi,0xffffffe0
c0023de0:	89 f0                	mov    eax,esi
c0023de2:	0f b6 f0             	movzx  esi,al
c0023de5:	56                   	push   esi
c0023de6:	6a 06                	push   0x6
c0023de8:	51                   	push   ecx
c0023de9:	52                   	push   edx
c0023dea:	e8 8d ef ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023def:	83 c4 10             	add    esp,0x10
c0023df2:	6a 00                	push   0x0
c0023df4:	6a 01                	push   0x1
c0023df6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023dfd:	50                   	push   eax
c0023dfe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e04:	e8 73 ef ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e09:	83 c4 10             	add    esp,0x10
c0023e0c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023e11:	75 6e                	jne    c0023e81 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023e13:	6a 00                	push   0x0
c0023e15:	6a 08                	push   0x8
c0023e17:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e1e:	50                   	push   eax
c0023e1f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e25:	e8 52 ef ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e2a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023e2f:	50                   	push   eax
c0023e30:	6a 09                	push   0x9
c0023e32:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e39:	50                   	push   eax
c0023e3a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e40:	e8 37 ef ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e45:	83 c4 20             	add    esp,0x20
c0023e48:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023e4d:	50                   	push   eax
c0023e4e:	6a 0a                	push   0xa
c0023e50:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e57:	50                   	push   eax
c0023e58:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e5e:	e8 19 ef ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e63:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023e68:	50                   	push   eax
c0023e69:	6a 0b                	push   0xb
c0023e6b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e72:	50                   	push   eax
c0023e73:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e79:	e8 fe ee ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e7e:	83 c4 20             	add    esp,0x20
c0023e81:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023e86:	50                   	push   eax
c0023e87:	6a 02                	push   0x2
c0023e89:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e90:	50                   	push   eax
c0023e91:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e97:	e8 e0 ee ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e9c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023ea1:	50                   	push   eax
c0023ea2:	6a 03                	push   0x3
c0023ea4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023eab:	50                   	push   eax
c0023eac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023eb2:	e8 c5 ee ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eb7:	83 c4 20             	add    esp,0x20
c0023eba:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023ebf:	50                   	push   eax
c0023ec0:	6a 04                	push   0x4
c0023ec2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ec9:	50                   	push   eax
c0023eca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ed0:	e8 a7 ee ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ed5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023eda:	50                   	push   eax
c0023edb:	6a 05                	push   0x5
c0023edd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ee4:	50                   	push   eax
c0023ee5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023eeb:	e8 8c ee ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ef0:	83 c4 20             	add    esp,0x20
c0023ef3:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023ef8:	0f 94 c0             	sete   al
c0023efb:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023f00:	74 09                	je     c0023f0b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023f02:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023f09:	eb 07                	jmp    c0023f12 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023f0b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023f12:	0f b6 c0             	movzx  eax,al
c0023f15:	50                   	push   eax
c0023f16:	6a 07                	push   0x7
c0023f18:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f1f:	50                   	push   eax
c0023f20:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f26:	e8 51 ee ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f2b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023f2f:	83 c4 10             	add    esp,0x10
c0023f32:	85 f6                	test   esi,esi
c0023f34:	0f 84 ba 00 00 00    	je     c0023ff4 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0023f3a:	50                   	push   eax
c0023f3b:	6a 01                	push   0x1
c0023f3d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f44:	50                   	push   eax
c0023f45:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f4b:	e8 ce f8 ff ff       	call   c002381e <IDE::polling(unsigned char, unsigned int)>
c0023f50:	83 c4 10             	add    esp,0x10
c0023f53:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023f59:	84 c0                	test   al,al
c0023f5b:	74 2c                	je     c0023f89 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0023f5d:	0f b6 f8             	movzx  edi,al
c0023f60:	0f b6 d2             	movzx  edx,dl
c0023f63:	57                   	push   edi
c0023f64:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023f6b:	50                   	push   eax
c0023f6c:	52                   	push   edx
c0023f6d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f73:	e8 f6 f7 ff ff       	call   c002376e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023f78:	c7 04 24 4c be 02 c0 	mov    DWORD PTR [esp],0xc002be4c
c0023f7f:	e8 b1 e5 fe ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0023f84:	e9 87 00 00 00       	jmp    c0024010 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0023f89:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023f8e:	74 33                	je     c0023fc3 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0023f90:	31 ed                	xor    ebp,ebp
c0023f92:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0023f96:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0023f9a:	50                   	push   eax
c0023f9b:	50                   	push   eax
c0023f9c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fa3:	50                   	push   eax
c0023fa4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023faa:	e8 bb ed ff ff       	call   c0022d6a <IDE::getBase(unsigned char)>
c0023faf:	89 c2                	mov    edx,eax
c0023fb1:	89 f8                	mov    eax,edi
c0023fb3:	66 ef                	out    dx,ax
c0023fb5:	45                   	inc    ebp
c0023fb6:	83 c4 10             	add    esp,0x10
c0023fb9:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0023fbf:	75 d1                	jne    c0023f92 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0023fc1:	eb 23                	jmp    c0023fe6 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0023fc3:	0f b6 d2             	movzx  edx,dl
c0023fc6:	51                   	push   ecx
c0023fc7:	51                   	push   ecx
c0023fc8:	52                   	push   edx
c0023fc9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fcf:	e8 96 ed ff ff       	call   c0022d6a <IDE::getBase(unsigned char)>
c0023fd4:	b9 00 01 00 00       	mov    ecx,0x100
c0023fd9:	89 c2                	mov    edx,eax
c0023fdb:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023fdf:	fc                   	cld    
c0023fe0:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023fe3:	83 c4 10             	add    esp,0x10
c0023fe6:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0023fee:	4e                   	dec    esi
c0023fef:	e9 3e ff ff ff       	jmp    c0023f32 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0023ff4:	31 ff                	xor    edi,edi
c0023ff6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023ffb:	74 16                	je     c0024013 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023ffd:	50                   	push   eax
c0023ffe:	50                   	push   eax
c0023fff:	31 c0                	xor    eax,eax
c0024001:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024006:	0f 94 c0             	sete   al
c0024009:	50                   	push   eax
c002400a:	53                   	push   ebx
c002400b:	e8 ec fb ff ff       	call   c0023bfc <ATA::flush(bool)>
c0024010:	83 c4 10             	add    esp,0x10
c0024013:	83 c4 2c             	add    esp,0x2c
c0024016:	89 f8                	mov    eax,edi
c0024018:	5b                   	pop    ebx
c0024019:	5e                   	pop    esi
c002401a:	5f                   	pop    edi
c002401b:	5d                   	pop    ebp
c002401c:	c3                   	ret    
c002401d:	90                   	nop

c002401e <ATA::read(unsigned long long, int, void*)>:
c002401e:	57                   	push   edi
c002401f:	b8 04 00 00 00       	mov    eax,0x4
c0024024:	56                   	push   esi
c0024025:	53                   	push   ebx
c0024026:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002402a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002402e:	8d 7a ff             	lea    edi,[edx-0x1]
c0024031:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024035:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024039:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002403f:	77 25                	ja     c0024066 <ATA::read(unsigned long long, int, void*)+0x48>
c0024041:	b8 06 00 00 00       	mov    eax,0x6
c0024046:	85 f6                	test   esi,esi
c0024048:	74 1c                	je     c0024066 <ATA::read(unsigned long long, int, void*)+0x48>
c002404a:	50                   	push   eax
c002404b:	50                   	push   eax
c002404c:	6a 00                	push   0x0
c002404e:	56                   	push   esi
c002404f:	52                   	push   edx
c0024050:	53                   	push   ebx
c0024051:	51                   	push   ecx
c0024052:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024056:	e8 3b fc ff ff       	call   c0023c96 <ATA::access(unsigned long long, int, void*, bool)>
c002405b:	83 c4 20             	add    esp,0x20
c002405e:	85 c0                	test   eax,eax
c0024060:	0f 95 c0             	setne  al
c0024063:	0f b6 c0             	movzx  eax,al
c0024066:	5b                   	pop    ebx
c0024067:	5e                   	pop    esi
c0024068:	5f                   	pop    edi
c0024069:	c3                   	ret    

c002406a <ATA::write(unsigned long long, int, void*)>:
c002406a:	57                   	push   edi
c002406b:	b8 04 00 00 00       	mov    eax,0x4
c0024070:	56                   	push   esi
c0024071:	53                   	push   ebx
c0024072:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024076:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002407a:	8d 7a ff             	lea    edi,[edx-0x1]
c002407d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024081:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024085:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002408b:	77 25                	ja     c00240b2 <ATA::write(unsigned long long, int, void*)+0x48>
c002408d:	b8 06 00 00 00       	mov    eax,0x6
c0024092:	85 f6                	test   esi,esi
c0024094:	74 1c                	je     c00240b2 <ATA::write(unsigned long long, int, void*)+0x48>
c0024096:	50                   	push   eax
c0024097:	50                   	push   eax
c0024098:	6a 01                	push   0x1
c002409a:	56                   	push   esi
c002409b:	52                   	push   edx
c002409c:	53                   	push   ebx
c002409d:	51                   	push   ecx
c002409e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00240a2:	e8 ef fb ff ff       	call   c0023c96 <ATA::access(unsigned long long, int, void*, bool)>
c00240a7:	83 c4 20             	add    esp,0x20
c00240aa:	85 c0                	test   eax,eax
c00240ac:	0f 95 c0             	setne  al
c00240af:	0f b6 c0             	movzx  eax,al
c00240b2:	5b                   	pop    ebx
c00240b3:	5e                   	pop    esi
c00240b4:	5f                   	pop    edi
c00240b5:	c3                   	ret    

c00240b6 <ATA::detectCHS()>:
c00240b6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00240ba:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00240c0:	c1 e0 06             	shl    eax,0x6
c00240c3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00240c9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00240d3:	c7 44 24 04 57 be 02 c0 	mov    DWORD PTR [esp+0x4],0xc002be57
c00240db:	e9 b5 5b ff ff       	jmp    c0019c95 <Krnl::panic(char const*)>

c00240e0 <ATA::open(int, int, void*)>:
c00240e0:	53                   	push   ebx
c00240e1:	83 ec 08             	sub    esp,0x8
c00240e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00240e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00240ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00240f0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00240f6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00240fc:	c1 e0 06             	shl    eax,0x6
c00240ff:	01 d0                	add    eax,edx
c0024101:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024108:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002410e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024115:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002411f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024125:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002412c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024133:	75 0c                	jne    c0024141 <ATA::open(int, int, void*)+0x61>
c0024135:	83 ec 0c             	sub    esp,0xc
c0024138:	53                   	push   ebx
c0024139:	e8 78 ff ff ff       	call   c00240b6 <ATA::detectCHS()>
c002413e:	83 c4 10             	add    esp,0x10
c0024141:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024147:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002414d:	c1 e0 06             	shl    eax,0x6
c0024150:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024157:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024161:	d1 e8                	shr    eax,1
c0024163:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024169:	6a 04                	push   0x4
c002416b:	6a 0c                	push   0xc
c002416d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024174:	50                   	push   eax
c0024175:	52                   	push   edx
c0024176:	e8 01 ec ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002417b:	90                   	nop
c002417c:	90                   	nop
c002417d:	6a 00                	push   0x0
c002417f:	6a 0c                	push   0xc
c0024181:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024188:	50                   	push   eax
c0024189:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002418f:	e8 e8 eb ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024194:	83 c4 14             	add    esp,0x14
c0024197:	53                   	push   ebx
c0024198:	e8 6f fc fe ff       	call   c0013e0c <PhysicalDisk::startCache()>
c002419d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241a0:	e8 dd 1e ff ff       	call   c0016082 <createPartitionsForDisk(PhysicalDisk*)>
c00241a5:	31 c0                	xor    eax,eax
c00241a7:	83 c4 18             	add    esp,0x18
c00241aa:	5b                   	pop    ebx
c00241ab:	c3                   	ret    

c00241ac <ATAPI::write(unsigned long long, int, void*)>:
c00241ac:	b8 03 00 00 00       	mov    eax,0x3
c00241b1:	c3                   	ret    

c00241b2 <ATAPI::close(int, int, void*)>:
c00241b2:	83 ec 0c             	sub    esp,0xc
c00241b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241b9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00241bf:	85 c0                	test   eax,eax
c00241c1:	74 0c                	je     c00241cf <ATAPI::close(int, int, void*)+0x1d>
c00241c3:	83 ec 0c             	sub    esp,0xc
c00241c6:	8b 10                	mov    edx,DWORD PTR [eax]
c00241c8:	50                   	push   eax
c00241c9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00241cc:	83 c4 10             	add    esp,0x10
c00241cf:	31 c0                	xor    eax,eax
c00241d1:	83 c4 0c             	add    esp,0xc
c00241d4:	c3                   	ret    
c00241d5:	90                   	nop

c00241d6 <ATAPI::ATAPI()>:
c00241d6:	83 ec 0c             	sub    esp,0xc
c00241d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241dd:	83 ec 04             	sub    esp,0x4
c00241e0:	68 00 08 00 00       	push   0x800
c00241e5:	68 91 bf 02 c0       	push   0xc002bf91
c00241ea:	50                   	push   eax
c00241eb:	e8 b4 fb fe ff       	call   c0013da4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00241f0:	83 c4 10             	add    esp,0x10
c00241f3:	ba ac be 02 c0       	mov    edx,0xc002beac
c00241f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00241fc:	89 10                	mov    DWORD PTR [eax],edx
c00241fe:	90                   	nop
c00241ff:	83 c4 0c             	add    esp,0xc
c0024202:	c3                   	ret    
c0024203:	90                   	nop

c0024204 <ATAPI::readyForCommand()>:
c0024204:	56                   	push   esi
c0024205:	53                   	push   ebx
c0024206:	31 db                	xor    ebx,ebx
c0024208:	50                   	push   eax
c0024209:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002420d:	50                   	push   eax
c002420e:	6a 0c                	push   0xc
c0024210:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024217:	50                   	push   eax
c0024218:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002421e:	e8 19 ec ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c0024223:	83 c4 10             	add    esp,0x10
c0024226:	a8 88                	test   al,0x88
c0024228:	74 23                	je     c002424d <ATAPI::readyForCommand()+0x49>
c002422a:	43                   	inc    ebx
c002422b:	83 fb 63             	cmp    ebx,0x63
c002422e:	7e dd                	jle    c002420d <ATAPI::readyForCommand()+0x9>
c0024230:	51                   	push   ecx
c0024231:	51                   	push   ecx
c0024232:	6a 00                	push   0x0
c0024234:	68 40 42 0f 00       	push   0xf4240
c0024239:	e8 bb 98 ff ff       	call   c001daf9 <nanoSleep(unsigned long long)>
c002423e:	83 c4 10             	add    esp,0x10
c0024241:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024247:	75 c4                	jne    c002420d <ATAPI::readyForCommand()+0x9>
c0024249:	31 c0                	xor    eax,eax
c002424b:	eb 02                	jmp    c002424f <ATAPI::readyForCommand()+0x4b>
c002424d:	b0 01                	mov    al,0x1
c002424f:	5a                   	pop    edx
c0024250:	5b                   	pop    ebx
c0024251:	5e                   	pop    esi
c0024252:	c3                   	ret    
c0024253:	90                   	nop

c0024254 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024254:	55                   	push   ebp
c0024255:	57                   	push   edi
c0024256:	56                   	push   esi
c0024257:	53                   	push   ebx
c0024258:	83 ec 20             	sub    esp,0x20
c002425b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002425f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024263:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024267:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002426b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002426f:	6a 01                	push   0x1
c0024271:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024278:	50                   	push   eax
c0024279:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002427f:	e8 04 ed ff ff       	call   c0022f88 <IDE::enableIRQs(unsigned char, bool)>
c0024284:	5e                   	pop    esi
c0024285:	58                   	pop    eax
c0024286:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002428d:	50                   	push   eax
c002428e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024294:	e8 bd ea ff ff       	call   c0022d56 <IDE::prepareInterrupt(unsigned char)>
c0024299:	89 3c 24             	mov    DWORD PTR [esp],edi
c002429c:	e8 63 ff ff ff       	call   c0024204 <ATAPI::readyForCommand()>
c00242a1:	83 c4 10             	add    esp,0x10
c00242a4:	84 c0                	test   al,al
c00242a6:	75 0a                	jne    c00242b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00242a8:	bb 01 00 00 00       	mov    ebx,0x1
c00242ad:	e9 57 02 00 00       	jmp    c0024509 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00242b2:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00242b8:	c1 e0 04             	shl    eax,0x4
c00242bb:	0f b6 c0             	movzx  eax,al
c00242be:	50                   	push   eax
c00242bf:	6a 06                	push   0x6
c00242c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242c8:	50                   	push   eax
c00242c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242cf:	e8 a8 ea ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242d4:	6a 00                	push   0x0
c00242d6:	6a 01                	push   0x1
c00242d8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242df:	50                   	push   eax
c00242e0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242e6:	e8 91 ea ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242eb:	83 c4 20             	add    esp,0x20
c00242ee:	0f b6 c3             	movzx  eax,bl
c00242f1:	0f b6 df             	movzx  ebx,bh
c00242f4:	50                   	push   eax
c00242f5:	6a 04                	push   0x4
c00242f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242fe:	50                   	push   eax
c00242ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024305:	e8 72 ea ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002430a:	53                   	push   ebx
c002430b:	6a 05                	push   0x5
c002430d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024314:	50                   	push   eax
c0024315:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002431b:	e8 5c ea ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024320:	83 c4 20             	add    esp,0x20
c0024323:	68 a0 00 00 00       	push   0xa0
c0024328:	6a 07                	push   0x7
c002432a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024331:	50                   	push   eax
c0024332:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024338:	e8 3f ea ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c002433d:	83 c4 0c             	add    esp,0xc
c0024340:	6a 01                	push   0x1
c0024342:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024349:	50                   	push   eax
c002434a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024350:	e8 c9 f4 ff ff       	call   c002381e <IDE::polling(unsigned char, unsigned int)>
c0024355:	83 c4 10             	add    esp,0x10
c0024358:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c002435e:	84 c0                	test   al,al
c0024360:	74 23                	je     c0024385 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024362:	0f b6 d8             	movzx  ebx,al
c0024365:	0f b6 d2             	movzx  edx,dl
c0024368:	53                   	push   ebx
c0024369:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024370:	50                   	push   eax
c0024371:	52                   	push   edx
c0024372:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024378:	e8 f1 f3 ff ff       	call   c002376e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002437d:	83 c4 10             	add    esp,0x10
c0024380:	e9 84 01 00 00       	jmp    c0024509 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024385:	0f b6 d2             	movzx  edx,dl
c0024388:	53                   	push   ebx
c0024389:	53                   	push   ebx
c002438a:	52                   	push   edx
c002438b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024391:	e8 d4 e9 ff ff       	call   c0022d6a <IDE::getBase(unsigned char)>
c0024396:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002439a:	b9 06 00 00 00       	mov    ecx,0x6
c002439f:	89 c2                	mov    edx,eax
c00243a1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00243a4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00243a8:	83 c4 10             	add    esp,0x10
c00243ab:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00243b1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00243b8:	85 db                	test   ebx,ebx
c00243ba:	0f 84 ec 00 00 00    	je     c00244ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00243c0:	51                   	push   ecx
c00243c1:	51                   	push   ecx
c00243c2:	52                   	push   edx
c00243c3:	50                   	push   eax
c00243c4:	e8 21 eb ff ff       	call   c0022eea <IDE::waitInterrupt(unsigned char)>
c00243c9:	83 c4 10             	add    esp,0x10
c00243cc:	84 c0                	test   al,al
c00243ce:	0f 84 d4 fe ff ff    	je     c00242a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00243d4:	56                   	push   esi
c00243d5:	56                   	push   esi
c00243d6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243dd:	50                   	push   eax
c00243de:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243e4:	e8 6d e9 ff ff       	call   c0022d56 <IDE::prepareInterrupt(unsigned char)>
c00243e9:	83 c4 0c             	add    esp,0xc
c00243ec:	6a 04                	push   0x4
c00243ee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00243f5:	50                   	push   eax
c00243f6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243fc:	e8 3b ea ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c0024401:	83 c4 0c             	add    esp,0xc
c0024404:	89 c6                	mov    esi,eax
c0024406:	6a 05                	push   0x5
c0024408:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002440f:	50                   	push   eax
c0024410:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024416:	e8 21 ea ff ff       	call   c0022e3c <IDE::read(unsigned char, unsigned char)>
c002441b:	89 f1                	mov    ecx,esi
c002441d:	0f b6 c0             	movzx  eax,al
c0024420:	0f b6 f1             	movzx  esi,cl
c0024423:	c1 e0 08             	shl    eax,0x8
c0024426:	09 c6                	or     esi,eax
c0024428:	d1 fe                	sar    esi,1
c002442a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002442e:	83 c4 10             	add    esp,0x10
c0024431:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024436:	74 41                	je     c0024479 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0024438:	31 c9                	xor    ecx,ecx
c002443a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024440:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024447:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002444b:	75 0a                	jne    c0024457 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002444d:	01 c9                	add    ecx,ecx
c002444f:	01 cd                	add    ebp,ecx
c0024451:	4b                   	dec    ebx
c0024452:	e9 54 ff ff ff       	jmp    c00243ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024457:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002445c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024460:	51                   	push   ecx
c0024461:	51                   	push   ecx
c0024462:	52                   	push   edx
c0024463:	50                   	push   eax
c0024464:	e8 01 e9 ff ff       	call   c0022d6a <IDE::getBase(unsigned char)>
c0024469:	89 c2                	mov    edx,eax
c002446b:	89 f0                	mov    eax,esi
c002446d:	66 ef                	out    dx,ax
c002446f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024473:	83 c4 10             	add    esp,0x10
c0024476:	41                   	inc    ecx
c0024477:	eb c1                	jmp    c002443a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024479:	31 f6                	xor    esi,esi
c002447b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024481:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024488:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002448c:	75 06                	jne    c0024494 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c002448e:	01 f6                	add    esi,esi
c0024490:	01 f5                	add    ebp,esi
c0024492:	eb bd                	jmp    c0024451 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024494:	51                   	push   ecx
c0024495:	51                   	push   ecx
c0024496:	52                   	push   edx
c0024497:	50                   	push   eax
c0024498:	e8 cd e8 ff ff       	call   c0022d6a <IDE::getBase(unsigned char)>
c002449d:	89 c2                	mov    edx,eax
c002449f:	66 ed                	in     ax,dx
c00244a1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00244a6:	83 c4 10             	add    esp,0x10
c00244a9:	46                   	inc    esi
c00244aa:	eb cf                	jmp    c002447b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00244ac:	51                   	push   ecx
c00244ad:	51                   	push   ecx
c00244ae:	52                   	push   edx
c00244af:	50                   	push   eax
c00244b0:	e8 35 ea ff ff       	call   c0022eea <IDE::waitInterrupt(unsigned char)>
c00244b5:	83 c4 10             	add    esp,0x10
c00244b8:	84 c0                	test   al,al
c00244ba:	0f 84 e8 fd ff ff    	je     c00242a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00244c0:	bb a0 86 01 00       	mov    ebx,0x186a0
c00244c5:	52                   	push   edx
c00244c6:	52                   	push   edx
c00244c7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244ce:	50                   	push   eax
c00244cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244d5:	e8 7c e8 ff ff       	call   c0022d56 <IDE::prepareInterrupt(unsigned char)>
c00244da:	83 c4 10             	add    esp,0x10
c00244dd:	50                   	push   eax
c00244de:	50                   	push   eax
c00244df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244e6:	50                   	push   eax
c00244e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244ed:	e8 78 e8 ff ff       	call   c0022d6a <IDE::getBase(unsigned char)>
c00244f2:	8d 50 07             	lea    edx,[eax+0x7]
c00244f5:	ec                   	in     al,dx
c00244f6:	83 c4 10             	add    esp,0x10
c00244f9:	a8 88                	test   al,0x88
c00244fb:	74 0a                	je     c0024507 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00244fd:	4b                   	dec    ebx
c00244fe:	75 dd                	jne    c00244dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024500:	bb 02 00 00 00       	mov    ebx,0x2
c0024505:	eb 02                	jmp    c0024509 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024507:	31 db                	xor    ebx,ebx
c0024509:	83 c4 1c             	add    esp,0x1c
c002450c:	89 d8                	mov    eax,ebx
c002450e:	5b                   	pop    ebx
c002450f:	5e                   	pop    esi
c0024510:	5f                   	pop    edi
c0024511:	5d                   	pop    ebp
c0024512:	c3                   	ret    
c0024513:	90                   	nop

c0024514 <ATAPI::diskRemoved()>:
c0024514:	83 ec 18             	sub    esp,0x18
c0024517:	68 9d bf 02 c0       	push   0xc002bf9d
c002451c:	e8 14 e0 fe ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0024521:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024525:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002452c:	83 c4 1c             	add    esp,0x1c
c002452f:	c3                   	ret    

c0024530 <ATAPI::eject()>:
c0024530:	57                   	push   edi
c0024531:	b9 03 00 00 00       	mov    ecx,0x3
c0024536:	53                   	push   ebx
c0024537:	83 ec 14             	sub    esp,0x14
c002453a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002453e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024542:	fc                   	cld    
c0024543:	31 c0                	xor    eax,eax
c0024545:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024547:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002454c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024551:	50                   	push   eax
c0024552:	50                   	push   eax
c0024553:	6a 00                	push   0x0
c0024555:	6a 00                	push   0x0
c0024557:	6a 00                	push   0x0
c0024559:	6a 02                	push   0x2
c002455b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002455f:	50                   	push   eax
c0024560:	53                   	push   ebx
c0024561:	e8 ee fc ff ff       	call   c0024254 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024566:	83 c4 14             	add    esp,0x14
c0024569:	53                   	push   ebx
c002456a:	e8 a5 ff ff ff       	call   c0024514 <ATAPI::diskRemoved()>
c002456f:	83 c4 24             	add    esp,0x24
c0024572:	31 c0                	xor    eax,eax
c0024574:	5b                   	pop    ebx
c0024575:	5f                   	pop    edi
c0024576:	c3                   	ret    
c0024577:	90                   	nop

c0024578 <ATAPI::diskInserted()>:
c0024578:	53                   	push   ebx
c0024579:	83 ec 14             	sub    esp,0x14
c002457c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024580:	68 b4 bf 02 c0       	push   0xc002bfb4
c0024585:	e8 ab df fe ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c002458a:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024591:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024594:	e8 73 f8 fe ff       	call   c0013e0c <PhysicalDisk::startCache()>
c0024599:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002459d:	83 c4 18             	add    esp,0x18
c00245a0:	5b                   	pop    ebx
c00245a1:	e9 dc 1a ff ff       	jmp    c0016082 <createPartitionsForDisk(PhysicalDisk*)>

c00245a6 <ATAPI::detectMedia()>:
c00245a6:	56                   	push   esi
c00245a7:	53                   	push   ebx
c00245a8:	83 ec 28             	sub    esp,0x28
c00245ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00245af:	6a 0c                	push   0xc
c00245b1:	6a 00                	push   0x0
c00245b3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00245b7:	56                   	push   esi
c00245b8:	e8 93 c1 fd ff       	call   c0000750 <memset>
c00245bd:	58                   	pop    eax
c00245be:	5a                   	pop    edx
c00245bf:	6a 00                	push   0x0
c00245c1:	6a 00                	push   0x0
c00245c3:	6a 00                	push   0x0
c00245c5:	6a 00                	push   0x0
c00245c7:	56                   	push   esi
c00245c8:	53                   	push   ebx
c00245c9:	e8 86 fc ff ff       	call   c0024254 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00245ce:	83 c4 1c             	add    esp,0x1c
c00245d1:	6a 0c                	push   0xc
c00245d3:	6a 00                	push   0x0
c00245d5:	56                   	push   esi
c00245d6:	e8 75 c1 fd ff       	call   c0000750 <memset>
c00245db:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00245e0:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00245e5:	59                   	pop    ecx
c00245e6:	58                   	pop    eax
c00245e7:	6a 01                	push   0x1
c00245e9:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c00245ed:	50                   	push   eax
c00245ee:	6a 00                	push   0x0
c00245f0:	6a 12                	push   0x12
c00245f2:	56                   	push   esi
c00245f3:	53                   	push   ebx
c00245f4:	e8 5b fc ff ff       	call   c0024254 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00245f9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00245fd:	83 c4 20             	add    esp,0x20
c0024600:	83 e0 7f             	and    eax,0x7f
c0024603:	3c 70                	cmp    al,0x70
c0024605:	74 15                	je     c002461c <ATAPI::detectMedia()+0x76>
c0024607:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002460e:	75 0c                	jne    c002461c <ATAPI::detectMedia()+0x76>
c0024610:	83 ec 0c             	sub    esp,0xc
c0024613:	53                   	push   ebx
c0024614:	e8 5f ff ff ff       	call   c0024578 <ATAPI::diskInserted()>
c0024619:	83 c4 10             	add    esp,0x10
c002461c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024620:	83 e0 0f             	and    eax,0xf
c0024623:	3c 02                	cmp    al,0x2
c0024625:	75 1b                	jne    c0024642 <ATAPI::detectMedia()+0x9c>
c0024627:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002462c:	75 2d                	jne    c002465b <ATAPI::detectMedia()+0xb5>
c002462e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024635:	74 24                	je     c002465b <ATAPI::detectMedia()+0xb5>
c0024637:	83 ec 0c             	sub    esp,0xc
c002463a:	53                   	push   ebx
c002463b:	e8 d4 fe ff ff       	call   c0024514 <ATAPI::diskRemoved()>
c0024640:	eb 16                	jmp    c0024658 <ATAPI::detectMedia()+0xb2>
c0024642:	84 c0                	test   al,al
c0024644:	75 15                	jne    c002465b <ATAPI::detectMedia()+0xb5>
c0024646:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002464d:	75 0c                	jne    c002465b <ATAPI::detectMedia()+0xb5>
c002464f:	83 ec 0c             	sub    esp,0xc
c0024652:	53                   	push   ebx
c0024653:	e8 20 ff ff ff       	call   c0024578 <ATAPI::diskInserted()>
c0024658:	83 c4 10             	add    esp,0x10
c002465b:	83 c4 24             	add    esp,0x24
c002465e:	5b                   	pop    ebx
c002465f:	5e                   	pop    esi
c0024660:	c3                   	ret    
c0024661:	90                   	nop

c0024662 <ATAPI::open(int, int, void*)>:
c0024662:	53                   	push   ebx
c0024663:	83 ec 08             	sub    esp,0x8
c0024666:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002466a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002466e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024672:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024678:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002467e:	c1 e0 06             	shl    eax,0x6
c0024681:	01 d0                	add    eax,edx
c0024683:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002468a:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024690:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024697:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00246a1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00246a7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00246ae:	6a 04                	push   0x4
c00246b0:	6a 0c                	push   0xc
c00246b2:	51                   	push   ecx
c00246b3:	52                   	push   edx
c00246b4:	e8 c3 e6 ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246b9:	90                   	nop
c00246ba:	90                   	nop
c00246bb:	6a 00                	push   0x0
c00246bd:	6a 0c                	push   0xc
c00246bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00246c6:	50                   	push   eax
c00246c7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00246cd:	e8 aa e6 ff ff       	call   c0022d7c <IDE::write(unsigned char, unsigned char, unsigned char)>
c00246d2:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00246d9:	83 c4 14             	add    esp,0x14
c00246dc:	53                   	push   ebx
c00246dd:	e8 c4 fe ff ff       	call   c00245a6 <ATAPI::detectMedia()>
c00246e2:	31 c0                	xor    eax,eax
c00246e4:	83 c4 18             	add    esp,0x18
c00246e7:	5b                   	pop    ebx
c00246e8:	c3                   	ret    
c00246e9:	90                   	nop

c00246ea <ATAPI::read(unsigned long long, int, void*)>:
c00246ea:	55                   	push   ebp
c00246eb:	57                   	push   edi
c00246ec:	56                   	push   esi
c00246ed:	53                   	push   ebx
c00246ee:	83 ec 1c             	sub    esp,0x1c
c00246f1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00246f5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00246f9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00246fd:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024704:	74 41                	je     c0024747 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024706:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002470a:	b9 03 00 00 00       	mov    ecx,0x3
c002470f:	fc                   	cld    
c0024710:	31 c0                	xor    eax,eax
c0024712:	86 fb                	xchg   bl,bh
c0024714:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024716:	c1 c3 10             	rol    ebx,0x10
c0024719:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002471e:	89 e8                	mov    eax,ebp
c0024720:	86 fb                	xchg   bl,bh
c0024722:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024726:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002472a:	50                   	push   eax
c002472b:	50                   	push   eax
c002472c:	55                   	push   ebp
c002472d:	c1 e5 0b             	shl    ebp,0xb
c0024730:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024734:	6a 00                	push   0x0
c0024736:	55                   	push   ebp
c0024737:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002473b:	50                   	push   eax
c002473c:	56                   	push   esi
c002473d:	e8 12 fb ff ff       	call   c0024254 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024742:	83 c4 20             	add    esp,0x20
c0024745:	eb 1a                	jmp    c0024761 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024747:	83 ec 0c             	sub    esp,0xc
c002474a:	56                   	push   esi
c002474b:	e8 56 fe ff ff       	call   c00245a6 <ATAPI::detectMedia()>
c0024750:	83 c4 10             	add    esp,0x10
c0024753:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002475a:	75 aa                	jne    c0024706 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002475c:	b8 02 00 00 00       	mov    eax,0x2
c0024761:	83 c4 1c             	add    esp,0x1c
c0024764:	5b                   	pop    ebx
c0024765:	5e                   	pop    esi
c0024766:	5f                   	pop    edi
c0024767:	5d                   	pop    ebp
c0024768:	c3                   	ret    
c0024769:	90                   	nop

c002476a <SATA::close(int, int, void*)>:
c002476a:	83 ec 0c             	sub    esp,0xc
c002476d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024771:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024777:	85 c0                	test   eax,eax
c0024779:	74 0c                	je     c0024787 <SATA::close(int, int, void*)+0x1d>
c002477b:	83 ec 0c             	sub    esp,0xc
c002477e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024780:	50                   	push   eax
c0024781:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024784:	83 c4 10             	add    esp,0x10
c0024787:	31 c0                	xor    eax,eax
c0024789:	83 c4 0c             	add    esp,0xc
c002478c:	c3                   	ret    
c002478d:	90                   	nop

c002478e <SATA::powerSaving(PowerSavingLevel)>:
c002478e:	c3                   	ret    
c002478f:	90                   	nop

c0024790 <SATA::open(int, int, void*)>:
c0024790:	56                   	push   esi
c0024791:	53                   	push   ebx
c0024792:	50                   	push   eax
c0024793:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024797:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002479b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00247a5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00247ab:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00247b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00247b9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00247c3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00247c9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00247d0:	e8 68 b1 fe ff       	call   c000f93d <Phys::allocatePage()>
c00247d5:	89 c6                	mov    esi,eax
c00247d7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00247dd:	81 c6 00 10 00 00    	add    esi,0x1000
c00247e3:	e8 55 b1 fe ff       	call   c000f93d <Phys::allocatePage()>
c00247e8:	39 c6                	cmp    esi,eax
c00247ea:	74 10                	je     c00247fc <SATA::open(int, int, void*)+0x6c>
c00247ec:	83 ec 0c             	sub    esp,0xc
c00247ef:	68 dc be 02 c0       	push   0xc002bedc
c00247f4:	e8 9c 54 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c00247f9:	83 c4 10             	add    esp,0x10
c00247fc:	83 ec 0c             	sub    esp,0xc
c00247ff:	6a 02                	push   0x2
c0024801:	e8 97 c9 fe ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c0024806:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002480c:	6a 03                	push   0x3
c002480e:	50                   	push   eax
c002480f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024815:	ff 35 50 d7 02 c0    	push   DWORD PTR ds:0xc002d750
c002481b:	e8 3a d1 fe ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c0024820:	83 c4 14             	add    esp,0x14
c0024823:	53                   	push   ebx
c0024824:	e8 e3 f5 fe ff       	call   c0013e0c <PhysicalDisk::startCache()>
c0024829:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002482c:	e8 51 18 ff ff       	call   c0016082 <createPartitionsForDisk(PhysicalDisk*)>
c0024831:	83 c4 14             	add    esp,0x14
c0024834:	31 c0                	xor    eax,eax
c0024836:	5b                   	pop    ebx
c0024837:	5e                   	pop    esi
c0024838:	c3                   	ret    
c0024839:	90                   	nop

c002483a <SATA::SATA()>:
c002483a:	83 ec 0c             	sub    esp,0xc
c002483d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024841:	83 ec 04             	sub    esp,0x4
c0024844:	68 00 02 00 00       	push   0x200
c0024849:	68 f0 be 02 c0       	push   0xc002bef0
c002484e:	50                   	push   eax
c002484f:	e8 50 f5 fe ff       	call   c0013da4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024854:	83 c4 10             	add    esp,0x10
c0024857:	ba 60 bf 02 c0       	mov    edx,0xc002bf60
c002485c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024860:	89 10                	mov    DWORD PTR [eax],edx
c0024862:	90                   	nop
c0024863:	83 c4 0c             	add    esp,0xc
c0024866:	c3                   	ret    
c0024867:	90                   	nop

c0024868 <SATA::access(unsigned long long, int, void*, bool)>:
c0024868:	55                   	push   ebp
c0024869:	57                   	push   edi
c002486a:	56                   	push   esi
c002486b:	53                   	push   ebx
c002486c:	83 ec 2c             	sub    esp,0x2c
c002486f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024873:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024877:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002487b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002487f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024883:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024888:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002488c:	7e 10                	jle    c002489e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c002488e:	83 ec 0c             	sub    esp,0xc
c0024891:	68 00 bf 02 c0       	push   0xc002bf00
c0024896:	e8 fa 53 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c002489b:	83 c4 10             	add    esp,0x10
c002489e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00248a4:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00248aa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00248b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00248b4:	89 d0                	mov    eax,edx
c00248b6:	c1 e0 07             	shl    eax,0x7
c00248b9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00248bd:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00248c7:	51                   	push   ecx
c00248c8:	8d 42 02             	lea    eax,[edx+0x2]
c00248cb:	51                   	push   ecx
c00248cc:	c1 e0 07             	shl    eax,0x7
c00248cf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00248d3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00248d7:	50                   	push   eax
c00248d8:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c00248de:	e8 1b f0 ff ff       	call   c00238fe <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00248e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00248e7:	83 c4 10             	add    esp,0x10
c00248ea:	b8 01 00 00 00       	mov    eax,0x1
c00248ef:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00248f4:	0f 84 cb 01 00 00    	je     c0024ac5 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00248fa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00248fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024902:	c1 e0 09             	shl    eax,0x9
c0024905:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002490a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002490e:	74 0e                	je     c002491e <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024910:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024916:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002491a:	89 c1                	mov    ecx,eax
c002491c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002491e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024922:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024928:	8d 42 02             	lea    eax,[edx+0x2]
c002492b:	c1 e0 07             	shl    eax,0x7
c002492e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024932:	8b 00                	mov    eax,DWORD PTR [eax]
c0024934:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002493a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024940:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024944:	c1 e1 05             	shl    ecx,0x5
c0024947:	01 c8                	add    eax,ecx
c0024949:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002494d:	83 e1 01             	and    ecx,0x1
c0024950:	89 ce                	mov    esi,ecx
c0024952:	8a 08                	mov    cl,BYTE PTR [eax]
c0024954:	c1 e6 06             	shl    esi,0x6
c0024957:	83 e1 bf             	and    ecx,0xffffffbf
c002495a:	09 f1                	or     ecx,esi
c002495c:	88 08                	mov    BYTE PTR [eax],cl
c002495e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024960:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024966:	81 c9 05 00 01 00    	or     ecx,0x10005
c002496c:	89 08                	mov    DWORD PTR [eax],ecx
c002496e:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024974:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002497a:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024980:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024983:	50                   	push   eax
c0024984:	68 90 00 00 00       	push   0x90
c0024989:	6a 00                	push   0x0
c002498b:	56                   	push   esi
c002498c:	e8 bf bd fd ff       	call   c0000750 <memset>
c0024991:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024997:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002499b:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00249a1:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00249a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00249a9:	83 c4 10             	add    esp,0x10
c00249ac:	48                   	dec    eax
c00249ad:	25 ff ff 3f 00       	and    eax,0x3fffff
c00249b2:	89 c1                	mov    ecx,eax
c00249b4:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00249ba:	25 00 00 c0 ff       	and    eax,0xffc00000
c00249bf:	09 c8                	or     eax,ecx
c00249c1:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00249c7:	66 8b 06             	mov    ax,WORD PTR [esi]
c00249ca:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c00249d1:	66 25 00 7f          	and    ax,0x7f00
c00249d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00249d9:	66 0d 27 80          	or     ax,0x8027
c00249dd:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00249e2:	66 89 06             	mov    WORD PTR [esi],ax
c00249e5:	19 c0                	sbb    eax,eax
c00249e7:	83 e0 f0             	and    eax,0xfffffff0
c00249ea:	83 c0 35             	add    eax,0x35
c00249ed:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00249f0:	89 e8                	mov    eax,ebp
c00249f2:	c1 e8 10             	shr    eax,0x10
c00249f5:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00249f8:	89 e8                	mov    eax,ebp
c00249fa:	c1 e8 18             	shr    eax,0x18
c00249fd:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024a00:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024a04:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024a07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024a0b:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024a0e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024a12:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024a16:	89 d6                	mov    esi,edx
c0024a18:	31 c0                	xor    eax,eax
c0024a1a:	c1 e6 07             	shl    esi,0x7
c0024a1d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024a21:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024a27:	80 e1 88             	and    cl,0x88
c0024a2a:	74 0a                	je     c0024a36 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024a2c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024a31:	74 0a                	je     c0024a3d <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024a33:	40                   	inc    eax
c0024a34:	eb eb                	jmp    c0024a21 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024a36:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024a3b:	75 0a                	jne    c0024a47 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024a3d:	83 ec 0c             	sub    esp,0xc
c0024a40:	68 39 bf 02 c0       	push   0xc002bf39
c0024a45:	eb 56                	jmp    c0024a9d <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024a47:	b8 01 00 00 00       	mov    eax,0x1
c0024a4c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024a50:	c1 e2 07             	shl    edx,0x7
c0024a53:	d3 e0                	shl    eax,cl
c0024a55:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024a59:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024a5f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024a65:	85 c8                	test   eax,ecx
c0024a67:	74 20                	je     c0024a89 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024a69:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024a6f:	0f ba e1 1e          	bt     ecx,0x1e
c0024a73:	73 ea                	jae    c0024a5f <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024a75:	83 ec 0c             	sub    esp,0xc
c0024a78:	68 47 bf 02 c0       	push   0xc002bf47
c0024a7d:	e8 13 52 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0024a82:	83 c4 10             	add    esp,0x10
c0024a85:	31 c0                	xor    eax,eax
c0024a87:	eb 3c                	jmp    c0024ac5 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024a89:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024a8f:	0f ba e0 1e          	bt     eax,0x1e
c0024a93:	73 17                	jae    c0024aac <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024a95:	83 ec 0c             	sub    esp,0xc
c0024a98:	68 47 bf 02 c0       	push   0xc002bf47
c0024a9d:	e8 f3 51 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0024aa2:	83 c4 10             	add    esp,0x10
c0024aa5:	b8 01 00 00 00       	mov    eax,0x1
c0024aaa:	eb 19                	jmp    c0024ac5 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024aac:	31 c0                	xor    eax,eax
c0024aae:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024ab3:	75 10                	jne    c0024ac5 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024ab5:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024abb:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024abf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024ac3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024ac5:	83 c4 2c             	add    esp,0x2c
c0024ac8:	5b                   	pop    ebx
c0024ac9:	5e                   	pop    esi
c0024aca:	5f                   	pop    edi
c0024acb:	5d                   	pop    ebp
c0024acc:	c3                   	ret    
c0024acd:	90                   	nop

c0024ace <SATA::read(unsigned long long, int, void*)>:
c0024ace:	57                   	push   edi
c0024acf:	b8 04 00 00 00       	mov    eax,0x4
c0024ad4:	56                   	push   esi
c0024ad5:	53                   	push   ebx
c0024ad6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024ada:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024ade:	8d 7a ff             	lea    edi,[edx-0x1]
c0024ae1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024ae5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024ae9:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024aef:	77 25                	ja     c0024b16 <SATA::read(unsigned long long, int, void*)+0x48>
c0024af1:	b8 06 00 00 00       	mov    eax,0x6
c0024af6:	85 f6                	test   esi,esi
c0024af8:	74 1c                	je     c0024b16 <SATA::read(unsigned long long, int, void*)+0x48>
c0024afa:	50                   	push   eax
c0024afb:	50                   	push   eax
c0024afc:	6a 00                	push   0x0
c0024afe:	56                   	push   esi
c0024aff:	52                   	push   edx
c0024b00:	53                   	push   ebx
c0024b01:	51                   	push   ecx
c0024b02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024b06:	e8 5d fd ff ff       	call   c0024868 <SATA::access(unsigned long long, int, void*, bool)>
c0024b0b:	83 c4 20             	add    esp,0x20
c0024b0e:	85 c0                	test   eax,eax
c0024b10:	0f 95 c0             	setne  al
c0024b13:	0f b6 c0             	movzx  eax,al
c0024b16:	5b                   	pop    ebx
c0024b17:	5e                   	pop    esi
c0024b18:	5f                   	pop    edi
c0024b19:	c3                   	ret    

c0024b1a <SATA::write(unsigned long long, int, void*)>:
c0024b1a:	55                   	push   ebp
c0024b1b:	b8 04 00 00 00       	mov    eax,0x4
c0024b20:	57                   	push   edi
c0024b21:	56                   	push   esi
c0024b22:	53                   	push   ebx
c0024b23:	83 ec 0c             	sub    esp,0xc
c0024b26:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024b2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024b2e:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024b31:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024b35:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024b39:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024b3f:	77 3d                	ja     c0024b7e <SATA::write(unsigned long long, int, void*)+0x64>
c0024b41:	b8 06 00 00 00       	mov    eax,0x6
c0024b46:	85 ed                	test   ebp,ebp
c0024b48:	74 34                	je     c0024b7e <SATA::write(unsigned long long, int, void*)+0x64>
c0024b4a:	c1 e3 09             	shl    ebx,0x9
c0024b4d:	01 eb                	add    ebx,ebp
c0024b4f:	89 d6                	mov    esi,edx
c0024b51:	89 cf                	mov    edi,ecx
c0024b53:	83 c6 01             	add    esi,0x1
c0024b56:	83 d7 00             	adc    edi,0x0
c0024b59:	50                   	push   eax
c0024b5a:	50                   	push   eax
c0024b5b:	6a 01                	push   0x1
c0024b5d:	55                   	push   ebp
c0024b5e:	81 c5 00 02 00 00    	add    ebp,0x200
c0024b64:	6a 01                	push   0x1
c0024b66:	51                   	push   ecx
c0024b67:	52                   	push   edx
c0024b68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024b6c:	e8 f7 fc ff ff       	call   c0024868 <SATA::access(unsigned long long, int, void*, bool)>
c0024b71:	83 c4 20             	add    esp,0x20
c0024b74:	89 f2                	mov    edx,esi
c0024b76:	89 f9                	mov    ecx,edi
c0024b78:	39 dd                	cmp    ebp,ebx
c0024b7a:	75 d3                	jne    c0024b4f <SATA::write(unsigned long long, int, void*)+0x35>
c0024b7c:	31 c0                	xor    eax,eax
c0024b7e:	83 c4 0c             	add    esp,0xc
c0024b81:	5b                   	pop    ebx
c0024b82:	5e                   	pop    esi
c0024b83:	5f                   	pop    edi
c0024b84:	5d                   	pop    ebp
c0024b85:	c3                   	ret    

c0024b86 <SATAPI::write(unsigned long long, int, void*)>:
c0024b86:	b8 03 00 00 00       	mov    eax,0x3
c0024b8b:	c3                   	ret    

c0024b8c <SATAPI::close(int, int, void*)>:
c0024b8c:	83 ec 0c             	sub    esp,0xc
c0024b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024b93:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024b99:	85 c0                	test   eax,eax
c0024b9b:	74 0c                	je     c0024ba9 <SATAPI::close(int, int, void*)+0x1d>
c0024b9d:	83 ec 0c             	sub    esp,0xc
c0024ba0:	8b 10                	mov    edx,DWORD PTR [eax]
c0024ba2:	50                   	push   eax
c0024ba3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024ba6:	83 c4 10             	add    esp,0x10
c0024ba9:	31 c0                	xor    eax,eax
c0024bab:	83 c4 0c             	add    esp,0xc
c0024bae:	c3                   	ret    
c0024baf:	90                   	nop

c0024bb0 <SATAPI::SATAPI()>:
c0024bb0:	83 ec 0c             	sub    esp,0xc
c0024bb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bb7:	83 ec 04             	sub    esp,0x4
c0024bba:	68 00 08 00 00       	push   0x800
c0024bbf:	68 90 bf 02 c0       	push   0xc002bf90
c0024bc4:	50                   	push   eax
c0024bc5:	e8 da f1 fe ff       	call   c0013da4 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024bca:	83 c4 10             	add    esp,0x10
c0024bcd:	ba 3c c0 02 c0       	mov    edx,0xc002c03c
c0024bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bd6:	89 10                	mov    DWORD PTR [eax],edx
c0024bd8:	90                   	nop
c0024bd9:	83 c4 0c             	add    esp,0xc
c0024bdc:	c3                   	ret    
c0024bdd:	90                   	nop

c0024bde <SATAPI::diskRemoved()>:
c0024bde:	83 ec 18             	sub    esp,0x18
c0024be1:	68 9c bf 02 c0       	push   0xc002bf9c
c0024be6:	e8 4a d9 fe ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0024beb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bef:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024bf6:	83 c4 1c             	add    esp,0x1c
c0024bf9:	c3                   	ret    

c0024bfa <SATAPI::diskInserted()>:
c0024bfa:	53                   	push   ebx
c0024bfb:	83 ec 14             	sub    esp,0x14
c0024bfe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024c02:	68 b3 bf 02 c0       	push   0xc002bfb3
c0024c07:	e8 29 d9 fe ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0024c0c:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024c13:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024c16:	e8 f1 f1 fe ff       	call   c0013e0c <PhysicalDisk::startCache()>
c0024c1b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024c1f:	83 c4 18             	add    esp,0x18
c0024c22:	5b                   	pop    ebx
c0024c23:	e9 5a 14 ff ff       	jmp    c0016082 <createPartitionsForDisk(PhysicalDisk*)>

c0024c28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024c28:	55                   	push   ebp
c0024c29:	57                   	push   edi
c0024c2a:	56                   	push   esi
c0024c2b:	53                   	push   ebx
c0024c2c:	83 ec 34             	sub    esp,0x34
c0024c2f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024c33:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024c37:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024c3b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024c3f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024c43:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024c49:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024c53:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024c59:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024c5d:	c1 e0 07             	shl    eax,0x7
c0024c60:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024c64:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024c68:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024c72:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c76:	8d 58 02             	lea    ebx,[eax+0x2]
c0024c79:	c1 e3 07             	shl    ebx,0x7
c0024c7c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024c80:	53                   	push   ebx
c0024c81:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024c87:	e8 72 ec ff ff       	call   c00238fe <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024c8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024c90:	83 c4 10             	add    esp,0x10
c0024c93:	b8 01 00 00 00       	mov    eax,0x1
c0024c98:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024c9d:	0f 84 85 01 00 00    	je     c0024e28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024ca3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024ca9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024cab:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024cb1:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024cb7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024cbb:	c1 e1 05             	shl    ecx,0x5
c0024cbe:	01 c8                	add    eax,ecx
c0024cc0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024cc2:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024cc8:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024cce:	89 08                	mov    DWORD PTR [eax],ecx
c0024cd0:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024cd6:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024cdc:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024ce2:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024ce5:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024ce8:	50                   	push   eax
c0024ce9:	68 90 00 00 00       	push   0x90
c0024cee:	6a 00                	push   0x0
c0024cf0:	53                   	push   ebx
c0024cf1:	e8 5a ba fd ff       	call   c0000750 <memset>
c0024cf6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024cfa:	b9 0c 00 00 00       	mov    ecx,0xc
c0024cff:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024d01:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024d07:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024d0b:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024d11:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024d15:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024d19:	48                   	dec    eax
c0024d1a:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024d1f:	89 c1                	mov    ecx,eax
c0024d21:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024d27:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024d2c:	09 c8                	or     eax,ecx
c0024d2e:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024d34:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024d37:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024d3e:	66 25 00 7f          	and    ax,0x7f00
c0024d42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024d46:	66 0d 27 80          	or     ax,0x8027
c0024d4a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024d4e:	66 89 03             	mov    WORD PTR [ebx],ax
c0024d51:	89 d0                	mov    eax,edx
c0024d53:	c1 ea 18             	shr    edx,0x18
c0024d56:	c1 e8 10             	shr    eax,0x10
c0024d59:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024d5c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024d5f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024d63:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024d66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024d6a:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024d6d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024d71:	83 c4 10             	add    esp,0x10
c0024d74:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024d78:	31 c0                	xor    eax,eax
c0024d7a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024d7e:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024d84:	80 e2 88             	and    dl,0x88
c0024d87:	74 0a                	je     c0024d93 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024d89:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d8e:	74 0a                	je     c0024d9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024d90:	40                   	inc    eax
c0024d91:	eb eb                	jmp    c0024d7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024d93:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024d98:	75 0f                	jne    c0024da9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024d9a:	83 ec 0c             	sub    esp,0xc
c0024d9d:	68 39 bf 02 c0       	push   0xc002bf39
c0024da2:	e8 ee 4e ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0024da7:	eb 3f                	jmp    c0024de8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024da9:	ba 01 00 00 00       	mov    edx,0x1
c0024dae:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024db2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024db6:	d3 e2                	shl    edx,cl
c0024db8:	c1 e0 07             	shl    eax,0x7
c0024dbb:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024dc1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024dc5:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024dcb:	85 ca                	test   edx,ecx
c0024dcd:	74 23                	je     c0024df2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024dcf:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024dd5:	0f ba e1 1e          	bt     ecx,0x1e
c0024dd9:	73 ea                	jae    c0024dc5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024ddb:	83 ec 0c             	sub    esp,0xc
c0024dde:	68 cb bf 02 c0       	push   0xc002bfcb
c0024de3:	e8 4d d7 fe ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0024de8:	83 c4 10             	add    esp,0x10
c0024deb:	b8 01 00 00 00       	mov    eax,0x1
c0024df0:	eb 36                	jmp    c0024e28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024df2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024df8:	0f ba e0 1e          	bt     eax,0x1e
c0024dfc:	73 0a                	jae    c0024e08 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024dfe:	83 ec 0c             	sub    esp,0xc
c0024e01:	68 de bf 02 c0       	push   0xc002bfde
c0024e06:	eb db                	jmp    c0024de3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024e08:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024e0d:	74 17                	je     c0024e26 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024e0f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024e14:	74 10                	je     c0024e26 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024e16:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024e1c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024e20:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024e24:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024e26:	31 c0                	xor    eax,eax
c0024e28:	83 c4 2c             	add    esp,0x2c
c0024e2b:	5b                   	pop    ebx
c0024e2c:	5e                   	pop    esi
c0024e2d:	5f                   	pop    edi
c0024e2e:	5d                   	pop    ebp
c0024e2f:	c3                   	ret    

c0024e30 <SATAPI::eject()>:
c0024e30:	57                   	push   edi
c0024e31:	b9 03 00 00 00       	mov    ecx,0x3
c0024e36:	53                   	push   ebx
c0024e37:	83 ec 14             	sub    esp,0x14
c0024e3a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024e3e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024e42:	fc                   	cld    
c0024e43:	31 c0                	xor    eax,eax
c0024e45:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024e47:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024e4c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024e51:	50                   	push   eax
c0024e52:	6a 00                	push   0x0
c0024e54:	6a 00                	push   0x0
c0024e56:	6a 00                	push   0x0
c0024e58:	6a 00                	push   0x0
c0024e5a:	6a 02                	push   0x2
c0024e5c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024e60:	50                   	push   eax
c0024e61:	53                   	push   ebx
c0024e62:	e8 c1 fd ff ff       	call   c0024c28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024e67:	83 c4 14             	add    esp,0x14
c0024e6a:	53                   	push   ebx
c0024e6b:	e8 6e fd ff ff       	call   c0024bde <SATAPI::diskRemoved()>
c0024e70:	83 c4 24             	add    esp,0x24
c0024e73:	31 c0                	xor    eax,eax
c0024e75:	5b                   	pop    ebx
c0024e76:	5f                   	pop    edi
c0024e77:	c3                   	ret    

c0024e78 <SATAPI::detectMedia()>:
c0024e78:	56                   	push   esi
c0024e79:	53                   	push   ebx
c0024e7a:	83 ec 28             	sub    esp,0x28
c0024e7d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024e81:	6a 0c                	push   0xc
c0024e83:	6a 00                	push   0x0
c0024e85:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024e89:	56                   	push   esi
c0024e8a:	e8 c1 b8 fd ff       	call   c0000750 <memset>
c0024e8f:	83 c4 0c             	add    esp,0xc
c0024e92:	6a 00                	push   0x0
c0024e94:	6a 00                	push   0x0
c0024e96:	6a 00                	push   0x0
c0024e98:	6a 00                	push   0x0
c0024e9a:	6a 00                	push   0x0
c0024e9c:	56                   	push   esi
c0024e9d:	53                   	push   ebx
c0024e9e:	e8 85 fd ff ff       	call   c0024c28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024ea3:	83 c4 1c             	add    esp,0x1c
c0024ea6:	6a 0c                	push   0xc
c0024ea8:	6a 00                	push   0x0
c0024eaa:	56                   	push   esi
c0024eab:	e8 a0 b8 fd ff       	call   c0000750 <memset>
c0024eb0:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024eb5:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024eba:	83 c4 0c             	add    esp,0xc
c0024ebd:	6a 01                	push   0x1
c0024ebf:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024ec3:	50                   	push   eax
c0024ec4:	6a 00                	push   0x0
c0024ec6:	6a 00                	push   0x0
c0024ec8:	6a 12                	push   0x12
c0024eca:	56                   	push   esi
c0024ecb:	53                   	push   ebx
c0024ecc:	e8 57 fd ff ff       	call   c0024c28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024ed1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024ed5:	83 c4 20             	add    esp,0x20
c0024ed8:	83 e0 7f             	and    eax,0x7f
c0024edb:	3c 70                	cmp    al,0x70
c0024edd:	74 15                	je     c0024ef4 <SATAPI::detectMedia()+0x7c>
c0024edf:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024ee6:	75 0c                	jne    c0024ef4 <SATAPI::detectMedia()+0x7c>
c0024ee8:	83 ec 0c             	sub    esp,0xc
c0024eeb:	53                   	push   ebx
c0024eec:	e8 09 fd ff ff       	call   c0024bfa <SATAPI::diskInserted()>
c0024ef1:	83 c4 10             	add    esp,0x10
c0024ef4:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024ef8:	83 e0 0f             	and    eax,0xf
c0024efb:	3c 02                	cmp    al,0x2
c0024efd:	75 1b                	jne    c0024f1a <SATAPI::detectMedia()+0xa2>
c0024eff:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024f04:	75 2d                	jne    c0024f33 <SATAPI::detectMedia()+0xbb>
c0024f06:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024f0d:	74 24                	je     c0024f33 <SATAPI::detectMedia()+0xbb>
c0024f0f:	83 ec 0c             	sub    esp,0xc
c0024f12:	53                   	push   ebx
c0024f13:	e8 c6 fc ff ff       	call   c0024bde <SATAPI::diskRemoved()>
c0024f18:	eb 16                	jmp    c0024f30 <SATAPI::detectMedia()+0xb8>
c0024f1a:	84 c0                	test   al,al
c0024f1c:	75 15                	jne    c0024f33 <SATAPI::detectMedia()+0xbb>
c0024f1e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024f25:	75 0c                	jne    c0024f33 <SATAPI::detectMedia()+0xbb>
c0024f27:	83 ec 0c             	sub    esp,0xc
c0024f2a:	53                   	push   ebx
c0024f2b:	e8 ca fc ff ff       	call   c0024bfa <SATAPI::diskInserted()>
c0024f30:	83 c4 10             	add    esp,0x10
c0024f33:	83 c4 24             	add    esp,0x24
c0024f36:	5b                   	pop    ebx
c0024f37:	5e                   	pop    esi
c0024f38:	c3                   	ret    
c0024f39:	90                   	nop

c0024f3a <SATAPI::open(int, int, void*)>:
c0024f3a:	56                   	push   esi
c0024f3b:	53                   	push   ebx
c0024f3c:	50                   	push   eax
c0024f3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024f41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024f45:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024f4f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024f55:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024f5f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024f63:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024f6d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024f73:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024f7a:	e8 be a9 fe ff       	call   c000f93d <Phys::allocatePage()>
c0024f7f:	89 c6                	mov    esi,eax
c0024f81:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024f87:	81 c6 00 10 00 00    	add    esi,0x1000
c0024f8d:	e8 ab a9 fe ff       	call   c000f93d <Phys::allocatePage()>
c0024f92:	39 c6                	cmp    esi,eax
c0024f94:	74 10                	je     c0024fa6 <SATAPI::open(int, int, void*)+0x6c>
c0024f96:	83 ec 0c             	sub    esp,0xc
c0024f99:	68 f3 bf 02 c0       	push   0xc002bff3
c0024f9e:	e8 f2 4c ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0024fa3:	83 c4 10             	add    esp,0x10
c0024fa6:	83 ec 0c             	sub    esp,0xc
c0024fa9:	6a 02                	push   0x2
c0024fab:	e8 ed c1 fe ff       	call   c001119d <Virt::allocateKernelVirtualPages(int)>
c0024fb0:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0024fb6:	6a 03                	push   0x3
c0024fb8:	50                   	push   eax
c0024fb9:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024fbf:	ff 35 50 d7 02 c0    	push   DWORD PTR ds:0xc002d750
c0024fc5:	e8 90 c9 fe ff       	call   c001195a <VAS::mapPage(unsigned long, unsigned long, int)>
c0024fca:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0024fd1:	83 c4 14             	add    esp,0x14
c0024fd4:	53                   	push   ebx
c0024fd5:	e8 9e fe ff ff       	call   c0024e78 <SATAPI::detectMedia()>
c0024fda:	83 c4 14             	add    esp,0x14
c0024fdd:	31 c0                	xor    eax,eax
c0024fdf:	5b                   	pop    ebx
c0024fe0:	5e                   	pop    esi
c0024fe1:	c3                   	ret    

c0024fe2 <SATAPI::read(unsigned long long, int, void*)>:
c0024fe2:	55                   	push   ebp
c0024fe3:	57                   	push   edi
c0024fe4:	56                   	push   esi
c0024fe5:	53                   	push   ebx
c0024fe6:	83 ec 1c             	sub    esp,0x1c
c0024fe9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024fed:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024ff1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024ff5:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0024ffc:	74 19                	je     c0025017 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0024ffe:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025003:	7e 2e                	jle    c0025033 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025005:	83 ec 0c             	sub    esp,0xc
c0025008:	68 09 c0 02 c0       	push   0xc002c009
c002500d:	e8 83 4c ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0025012:	83 c4 10             	add    esp,0x10
c0025015:	eb 1c                	jmp    c0025033 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025017:	83 ec 0c             	sub    esp,0xc
c002501a:	55                   	push   ebp
c002501b:	e8 58 fe ff ff       	call   c0024e78 <SATAPI::detectMedia()>
c0025020:	83 c4 10             	add    esp,0x10
c0025023:	b8 02 00 00 00       	mov    eax,0x2
c0025028:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002502f:	75 cd                	jne    c0024ffe <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025031:	eb 49                	jmp    c002507c <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025033:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025037:	b9 03 00 00 00       	mov    ecx,0x3
c002503c:	fc                   	cld    
c002503d:	31 c0                	xor    eax,eax
c002503f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025041:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025046:	89 d8                	mov    eax,ebx
c0025048:	86 e0                	xchg   al,ah
c002504a:	c1 c0 10             	rol    eax,0x10
c002504d:	86 e0                	xchg   al,ah
c002504f:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025053:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025057:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002505b:	50                   	push   eax
c002505c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025060:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025064:	56                   	push   esi
c0025065:	53                   	push   ebx
c0025066:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002506a:	c1 e0 0b             	shl    eax,0xb
c002506d:	50                   	push   eax
c002506e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025072:	50                   	push   eax
c0025073:	55                   	push   ebp
c0025074:	e8 af fb ff ff       	call   c0024c28 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025079:	83 c4 20             	add    esp,0x20
c002507c:	83 c4 1c             	add    esp,0x1c
c002507f:	5b                   	pop    ebx
c0025080:	5e                   	pop    esi
c0025081:	5f                   	pop    edi
c0025082:	5d                   	pop    ebp
c0025083:	c3                   	ret    

c0025084 <AVX::open(int, int, void*)>:
c0025084:	83 ec 0c             	sub    esp,0xc
c0025087:	e8 3c 11 00 00       	call   c00261c8 <avxInit>
c002508c:	b8 00 00 00 00       	mov    eax,0x0
c0025091:	83 c4 0c             	add    esp,0xc
c0025094:	c3                   	ret    
c0025095:	90                   	nop

c0025096 <AVX::close(int, int, void*)>:
c0025096:	83 ec 0c             	sub    esp,0xc
c0025099:	e8 2b 11 00 00       	call   c00261c9 <avxClose>
c002509e:	b8 00 00 00 00       	mov    eax,0x0
c00250a3:	83 c4 0c             	add    esp,0xc
c00250a6:	c3                   	ret    
c00250a7:	90                   	nop

c00250a8 <AVX::available()>:
c00250a8:	83 ec 0c             	sub    esp,0xc
c00250ab:	e8 10 11 00 00       	call   c00261c0 <avxDetect>
c00250b0:	85 c0                	test   eax,eax
c00250b2:	0f 95 c0             	setne  al
c00250b5:	83 c4 0c             	add    esp,0xc
c00250b8:	c3                   	ret    
c00250b9:	90                   	nop

c00250ba <AVX::save(void*)>:
c00250ba:	83 ec 0c             	sub    esp,0xc
c00250bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00250c1:	83 ec 0c             	sub    esp,0xc
c00250c4:	50                   	push   eax
c00250c5:	e8 fc 10 00 00       	call   c00261c6 <avxSave>
c00250ca:	83 c4 10             	add    esp,0x10
c00250cd:	90                   	nop
c00250ce:	83 c4 0c             	add    esp,0xc
c00250d1:	c3                   	ret    

c00250d2 <AVX::load(void*)>:
c00250d2:	83 ec 0c             	sub    esp,0xc
c00250d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00250d9:	83 ec 0c             	sub    esp,0xc
c00250dc:	50                   	push   eax
c00250dd:	e8 e5 10 00 00       	call   c00261c7 <avxLoad>
c00250e2:	83 c4 10             	add    esp,0x10
c00250e5:	90                   	nop
c00250e6:	83 c4 0c             	add    esp,0xc
c00250e9:	c3                   	ret    

c00250ea <AVX::AVX()>:
c00250ea:	83 ec 0c             	sub    esp,0xc
c00250ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250f1:	83 ec 08             	sub    esp,0x8
c00250f4:	68 6c c0 02 c0       	push   0xc002c06c
c00250f9:	50                   	push   eax
c00250fa:	e8 83 ed fe ff       	call   c0013e82 <FPU::FPU(char const*)>
c00250ff:	83 c4 10             	add    esp,0x10
c0025102:	ba 7c c0 02 c0       	mov    edx,0xc002c07c
c0025107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002510b:	89 10                	mov    DWORD PTR [eax],edx
c002510d:	90                   	nop
c002510e:	83 c4 0c             	add    esp,0xc
c0025111:	c3                   	ret    

c0025112 <MMX::available()>:
c0025112:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0025117:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002511d:	83 e0 20             	and    eax,0x20
c0025120:	84 c0                	test   al,al
c0025122:	0f 95 c0             	setne  al
c0025125:	c3                   	ret    

c0025126 <MMX::open(int, int, void*)>:
c0025126:	83 ec 0c             	sub    esp,0xc
c0025129:	e8 24 11 00 00       	call   c0026252 <x87Init>
c002512e:	b8 00 00 00 00       	mov    eax,0x0
c0025133:	83 c4 0c             	add    esp,0xc
c0025136:	c3                   	ret    
c0025137:	90                   	nop

c0025138 <MMX::close(int, int, void*)>:
c0025138:	83 ec 0c             	sub    esp,0xc
c002513b:	e8 2c 11 00 00       	call   c002626c <x87Close>
c0025140:	b8 00 00 00 00       	mov    eax,0x0
c0025145:	83 c4 0c             	add    esp,0xc
c0025148:	c3                   	ret    
c0025149:	90                   	nop

c002514a <MMX::save(void*)>:
c002514a:	83 ec 0c             	sub    esp,0xc
c002514d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025151:	83 ec 0c             	sub    esp,0xc
c0025154:	50                   	push   eax
c0025155:	e8 e7 10 00 00       	call   c0026241 <x87Save>
c002515a:	83 c4 10             	add    esp,0x10
c002515d:	90                   	nop
c002515e:	83 c4 0c             	add    esp,0xc
c0025161:	c3                   	ret    

c0025162 <MMX::load(void*)>:
c0025162:	83 ec 0c             	sub    esp,0xc
c0025165:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025169:	83 ec 0c             	sub    esp,0xc
c002516c:	50                   	push   eax
c002516d:	e8 d8 10 00 00       	call   c002624a <x87Load>
c0025172:	83 c4 10             	add    esp,0x10
c0025175:	90                   	nop
c0025176:	83 c4 0c             	add    esp,0xc
c0025179:	c3                   	ret    

c002517a <MMX::MMX()>:
c002517a:	83 ec 0c             	sub    esp,0xc
c002517d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025181:	83 ec 08             	sub    esp,0x8
c0025184:	68 ac c0 02 c0       	push   0xc002c0ac
c0025189:	50                   	push   eax
c002518a:	e8 f3 ec fe ff       	call   c0013e82 <FPU::FPU(char const*)>
c002518f:	83 c4 10             	add    esp,0x10
c0025192:	ba bc c0 02 c0       	mov    edx,0xc002c0bc
c0025197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002519b:	89 10                	mov    DWORD PTR [eax],edx
c002519d:	90                   	nop
c002519e:	83 c4 0c             	add    esp,0xc
c00251a1:	c3                   	ret    

c00251a2 <SSE::open(int, int, void*)>:
c00251a2:	83 ec 0c             	sub    esp,0xc
c00251a5:	e8 5a 10 00 00       	call   c0026204 <sseInit>
c00251aa:	b8 00 00 00 00       	mov    eax,0x0
c00251af:	83 c4 0c             	add    esp,0xc
c00251b2:	c3                   	ret    
c00251b3:	90                   	nop

c00251b4 <SSE::close(int, int, void*)>:
c00251b4:	83 ec 0c             	sub    esp,0xc
c00251b7:	e8 58 10 00 00       	call   c0026214 <sseClose>
c00251bc:	b8 00 00 00 00       	mov    eax,0x0
c00251c1:	83 c4 0c             	add    esp,0xc
c00251c4:	c3                   	ret    
c00251c5:	90                   	nop

c00251c6 <SSE::available()>:
c00251c6:	83 ec 1c             	sub    esp,0x1c
c00251c9:	e8 12 10 00 00       	call   c00261e0 <absolutelyNoChanceInHell>
c00251ce:	85 c0                	test   eax,eax
c00251d0:	0f 95 c0             	setne  al
c00251d3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00251d7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00251db:	83 c4 1c             	add    esp,0x1c
c00251de:	c3                   	ret    
c00251df:	90                   	nop

c00251e0 <SSE::save(void*)>:
c00251e0:	83 ec 0c             	sub    esp,0xc
c00251e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251e7:	83 ec 0c             	sub    esp,0xc
c00251ea:	50                   	push   eax
c00251eb:	e8 08 10 00 00       	call   c00261f8 <sseSave>
c00251f0:	83 c4 10             	add    esp,0x10
c00251f3:	90                   	nop
c00251f4:	83 c4 0c             	add    esp,0xc
c00251f7:	c3                   	ret    

c00251f8 <SSE::load(void*)>:
c00251f8:	83 ec 0c             	sub    esp,0xc
c00251fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251ff:	83 ec 0c             	sub    esp,0xc
c0025202:	50                   	push   eax
c0025203:	e8 f6 0f 00 00       	call   c00261fe <sseLoad>
c0025208:	83 c4 10             	add    esp,0x10
c002520b:	90                   	nop
c002520c:	83 c4 0c             	add    esp,0xc
c002520f:	c3                   	ret    

c0025210 <SSE::SSE()>:
c0025210:	83 ec 0c             	sub    esp,0xc
c0025213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025217:	83 ec 08             	sub    esp,0x8
c002521a:	68 ec c0 02 c0       	push   0xc002c0ec
c002521f:	50                   	push   eax
c0025220:	e8 5d ec fe ff       	call   c0013e82 <FPU::FPU(char const*)>
c0025225:	83 c4 10             	add    esp,0x10
c0025228:	ba fc c0 02 c0       	mov    edx,0xc002c0fc
c002522d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025231:	89 10                	mov    DWORD PTR [eax],edx
c0025233:	90                   	nop
c0025234:	83 c4 0c             	add    esp,0xc
c0025237:	c3                   	ret    

c0025238 <x87::open(int, int, void*)>:
c0025238:	83 ec 0c             	sub    esp,0xc
c002523b:	e8 12 10 00 00       	call   c0026252 <x87Init>
c0025240:	b8 00 00 00 00       	mov    eax,0x0
c0025245:	83 c4 0c             	add    esp,0xc
c0025248:	c3                   	ret    
c0025249:	90                   	nop

c002524a <x87::close(int, int, void*)>:
c002524a:	83 ec 0c             	sub    esp,0xc
c002524d:	e8 1a 10 00 00       	call   c002626c <x87Close>
c0025252:	b8 00 00 00 00       	mov    eax,0x0
c0025257:	83 c4 0c             	add    esp,0xc
c002525a:	c3                   	ret    
c002525b:	90                   	nop

c002525c <x87::available()>:
c002525c:	83 ec 0c             	sub    esp,0xc
c002525f:	e8 c2 0f 00 00       	call   c0026226 <x87Detect>
c0025264:	85 c0                	test   eax,eax
c0025266:	0f 95 c0             	setne  al
c0025269:	83 c4 0c             	add    esp,0xc
c002526c:	c3                   	ret    
c002526d:	90                   	nop

c002526e <x87::save(void*)>:
c002526e:	83 ec 0c             	sub    esp,0xc
c0025271:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025275:	83 ec 0c             	sub    esp,0xc
c0025278:	50                   	push   eax
c0025279:	e8 c3 0f 00 00       	call   c0026241 <x87Save>
c002527e:	83 c4 10             	add    esp,0x10
c0025281:	90                   	nop
c0025282:	83 c4 0c             	add    esp,0xc
c0025285:	c3                   	ret    

c0025286 <x87::load(void*)>:
c0025286:	83 ec 0c             	sub    esp,0xc
c0025289:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002528d:	83 ec 0c             	sub    esp,0xc
c0025290:	50                   	push   eax
c0025291:	e8 b4 0f 00 00       	call   c002624a <x87Load>
c0025296:	83 c4 10             	add    esp,0x10
c0025299:	90                   	nop
c002529a:	83 c4 0c             	add    esp,0xc
c002529d:	c3                   	ret    

c002529e <x87::x87()>:
c002529e:	83 ec 0c             	sub    esp,0xc
c00252a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252a5:	83 ec 08             	sub    esp,0x8
c00252a8:	68 2c c1 02 c0       	push   0xc002c12c
c00252ad:	50                   	push   eax
c00252ae:	e8 cf eb fe ff       	call   c0013e82 <FPU::FPU(char const*)>
c00252b3:	83 c4 10             	add    esp,0x10
c00252b6:	ba 3c c1 02 c0       	mov    edx,0xc002c13c
c00252bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252bf:	89 10                	mov    DWORD PTR [eax],edx
c00252c1:	90                   	nop
c00252c2:	83 c4 0c             	add    esp,0xc
c00252c5:	c3                   	ret    

c00252c6 <APIC::disable()>:
c00252c6:	90                   	nop
c00252c7:	c3                   	ret    

c00252c8 <APIC::close(int, int, void*)>:
c00252c8:	55                   	push   ebp
c00252c9:	89 e5                	mov    ebp,esp
c00252cb:	83 ec 08             	sub    esp,0x8
c00252ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00252d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00252d3:	83 c0 3c             	add    eax,0x3c
c00252d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00252d8:	83 ec 0c             	sub    esp,0xc
c00252db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00252de:	ff d0                	call   eax
c00252e0:	83 c4 10             	add    esp,0x10
c00252e3:	b8 00 00 00 00       	mov    eax,0x0
c00252e8:	c9                   	leave  
c00252e9:	c3                   	ret    

c00252ea <IOAPIC::close(int, int, void*)>:
c00252ea:	b8 00 00 00 00       	mov    eax,0x0
c00252ef:	c3                   	ret    

c00252f0 <APIC::io_wait()>:
c00252f0:	eb 00                	jmp    c00252f2 <APIC::io_wait()+0x2>
c00252f2:	eb 00                	jmp    c00252f4 <APIC::io_wait()+0x4>
c00252f4:	90                   	nop
c00252f5:	c3                   	ret    

c00252f6 <APIC::getBase()>:
c00252f6:	55                   	push   ebp
c00252f7:	89 e5                	mov    ebp,esp
c00252f9:	83 ec 18             	sub    esp,0x18
c00252fc:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0025301:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025307:	83 e0 08             	and    eax,0x8
c002530a:	84 c0                	test   al,al
c002530c:	75 07                	jne    c0025315 <APIC::getBase()+0x1f>
c002530e:	b8 00 00 00 00       	mov    eax,0x0
c0025313:	eb 21                	jmp    c0025336 <APIC::getBase()+0x40>
c0025315:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c002531a:	83 ec 08             	sub    esp,0x8
c002531d:	6a 1b                	push   0x1b
c002531f:	50                   	push   eax
c0025320:	e8 1b 98 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0025325:	83 c4 10             	add    esp,0x10
c0025328:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002532b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002532e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025331:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025336:	c9                   	leave  
c0025337:	c3                   	ret    

c0025338 <APIC::eoi(unsigned char)>:
c0025338:	55                   	push   ebp
c0025339:	89 e5                	mov    ebp,esp
c002533b:	83 ec 28             	sub    esp,0x28
c002533e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025341:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025344:	83 ec 0c             	sub    esp,0xc
c0025347:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002534a:	e8 a7 ff ff ff       	call   c00252f6 <APIC::getBase()>
c002534f:	83 c4 10             	add    esp,0x10
c0025352:	05 b0 00 00 00       	add    eax,0xb0
c0025357:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002535a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002535d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025363:	90                   	nop
c0025364:	c9                   	leave  
c0025365:	c3                   	ret    

c0025366 <APIC::open(int, int, void*)>:
c0025366:	55                   	push   ebp
c0025367:	89 e5                	mov    ebp,esp
c0025369:	57                   	push   edi
c002536a:	56                   	push   esi
c002536b:	53                   	push   ebx
c002536c:	83 ec 2c             	sub    esp,0x2c
c002536f:	83 ec 0c             	sub    esp,0xc
c0025372:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025375:	e8 7c ff ff ff       	call   c00252f6 <APIC::getBase()>
c002537a:	83 c4 10             	add    esp,0x10
c002537d:	89 c2                	mov    edx,eax
c002537f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025382:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025388:	0f b6 f8             	movzx  edi,al
c002538b:	89 d0                	mov    eax,edx
c002538d:	ba 00 00 00 00       	mov    edx,0x0
c0025392:	89 c1                	mov    ecx,eax
c0025394:	80 e5 ff             	and    ch,0xff
c0025397:	89 cb                	mov    ebx,ecx
c0025399:	0f b6 f2             	movzx  esi,dl
c002539c:	89 d8                	mov    eax,ebx
c002539e:	89 f2                	mov    edx,esi
c00253a0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00253a3:	8d 5f 08             	lea    ebx,[edi+0x8]
c00253a6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00253aa:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00253ae:	83 e0 00             	and    eax,0x0
c00253b1:	09 d0                	or     eax,edx
c00253b3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00253b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253ba:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00253c0:	8d 50 01             	lea    edx,[eax+0x1]
c00253c3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00253c6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00253cc:	0f b6 d0             	movzx  edx,al
c00253cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00253d2:	83 c2 08             	add    edx,0x8
c00253d5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00253d9:	0f b6 c9             	movzx  ecx,cl
c00253dc:	81 c9 00 00 01 00    	or     ecx,0x10000
c00253e2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00253e6:	83 ec 0c             	sub    esp,0xc
c00253e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253ec:	e8 05 ff ff ff       	call   c00252f6 <APIC::getBase()>
c00253f1:	83 c4 10             	add    esp,0x10
c00253f4:	05 f0 00 00 00       	add    eax,0xf0
c00253f9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00253fc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00253ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0025401:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025404:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002540b:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025412:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025415:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025418:	89 10                	mov    DWORD PTR [eax],edx
c002541a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0025421:	a1 b0 fe 02 c0       	mov    eax,ds:0xc002feb0
c0025426:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025429:	7d 7c                	jge    c00254a7 <APIC::open(int, int, void*)+0x141>
c002542b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002542e:	8b 04 85 c0 fe 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0140]
c0025435:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025438:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002543b:	8b 04 85 c0 fe 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0140]
c0025442:	c1 e8 08             	shr    eax,0x8
c0025445:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025449:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002544c:	8b 04 85 c0 fe 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0140]
c0025453:	c1 e8 18             	shr    eax,0x18
c0025456:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025459:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002545d:	75 40                	jne    c002549f <APIC::open(int, int, void*)+0x139>
c002545f:	83 ec 0c             	sub    esp,0xc
c0025462:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025465:	e8 8c fe ff ff       	call   c00252f6 <APIC::getBase()>
c002546a:	83 c4 10             	add    esp,0x10
c002546d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0025471:	75 07                	jne    c002547a <APIC::open(int, int, void*)+0x114>
c0025473:	ba 60 03 00 00       	mov    edx,0x360
c0025478:	eb 05                	jmp    c002547f <APIC::open(int, int, void*)+0x119>
c002547a:	ba 50 03 00 00       	mov    edx,0x350
c002547f:	01 d0                	add    eax,edx
c0025481:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025484:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025487:	8b 00                	mov    eax,DWORD PTR [eax]
c0025489:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002548c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025493:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025497:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002549a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002549d:	89 10                	mov    DWORD PTR [eax],edx
c002549f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00254a2:	e9 7a ff ff ff       	jmp    c0025421 <APIC::open(int, int, void*)+0xbb>
c00254a7:	b8 00 00 00 00       	mov    eax,0x0
c00254ac:	8d 65 f4             	lea    esp,[ebp-0xc]
c00254af:	5b                   	pop    ebx
c00254b0:	5e                   	pop    esi
c00254b1:	5f                   	pop    edi
c00254b2:	5d                   	pop    ebp
c00254b3:	c3                   	ret    

c00254b4 <IOAPIC::IOAPIC()>:
c00254b4:	83 ec 0c             	sub    esp,0xc
c00254b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254bb:	83 ec 08             	sub    esp,0x8
c00254be:	68 6c c1 02 c0       	push   0xc002c16c
c00254c3:	50                   	push   eax
c00254c4:	e8 a9 e6 fe ff       	call   c0013b72 <Device::Device(char const*)>
c00254c9:	83 c4 10             	add    esp,0x10
c00254cc:	ba 94 c2 02 c0       	mov    edx,0xc002c294
c00254d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254d5:	89 10                	mov    DWORD PTR [eax],edx
c00254d7:	90                   	nop
c00254d8:	83 c4 0c             	add    esp,0xc
c00254db:	c3                   	ret    

c00254dc <APIC::APIC()>:
c00254dc:	53                   	push   ebx
c00254dd:	83 ec 18             	sub    esp,0x18
c00254e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00254e4:	83 ec 08             	sub    esp,0x8
c00254e7:	68 74 c1 02 c0       	push   0xc002c174
c00254ec:	50                   	push   eax
c00254ed:	e8 ea ed fe ff       	call   c00142dc <InterruptController::InterruptController(char const*)>
c00254f2:	83 c4 10             	add    esp,0x10
c00254f5:	ba 4c c2 02 c0       	mov    edx,0xc002c24c
c00254fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00254fe:	89 10                	mov    DWORD PTR [eax],edx
c0025500:	a0 80 19 03 c0       	mov    al,ds:0xc0031980
c0025505:	83 f0 01             	xor    eax,0x1
c0025508:	84 c0                	test   al,al
c002550a:	0f 84 a1 00 00 00    	je     c00255b1 <APIC::APIC()+0xd5>
c0025510:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025515:	a0 60 ff 02 c0       	mov    al,ds:0xc002ff60
c002551a:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002551e:	0f 83 86 00 00 00    	jae    c00255aa <APIC::APIC()+0xce>
c0025524:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002552c:	83 ec 0c             	sub    esp,0xc
c002552f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025533:	e8 61 a0 fe ff       	call   c000f599 <malloc>
c0025538:	83 c4 10             	add    esp,0x10
c002553b:	89 c3                	mov    ebx,eax
c002553d:	83 ec 0c             	sub    esp,0xc
c0025540:	53                   	push   ebx
c0025541:	e8 6e ff ff ff       	call   c00254b4 <IOAPIC::IOAPIC()>
c0025546:	83 c4 10             	add    esp,0x10
c0025549:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002554d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025552:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025556:	89 14 85 60 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6a0],edx
c002555d:	a1 40 19 03 c0       	mov    eax,ds:0xc0031940
c0025562:	40                   	inc    eax
c0025563:	a3 40 19 03 c0       	mov    ds:0xc0031940,eax
c0025568:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c002556d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025573:	83 ec 08             	sub    esp,0x8
c0025576:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002557a:	50                   	push   eax
c002557b:	e8 ee e3 fe ff       	call   c001396e <Device::addChild(Device*)>
c0025580:	83 c4 10             	add    esp,0x10
c0025583:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025587:	8b 00                	mov    eax,DWORD PTR [eax]
c0025589:	83 c0 08             	add    eax,0x8
c002558c:	8b 00                	mov    eax,DWORD PTR [eax]
c002558e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025593:	6a 00                	push   0x0
c0025595:	6a 00                	push   0x0
c0025597:	52                   	push   edx
c0025598:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002559c:	ff d0                	call   eax
c002559e:	83 c4 10             	add    esp,0x10
c00255a1:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00255a5:	e9 6b ff ff ff       	jmp    c0025515 <APIC::APIC()+0x39>
c00255aa:	c6 05 80 19 03 c0 01 	mov    BYTE PTR ds:0xc0031980,0x1
c00255b1:	90                   	nop
c00255b2:	83 c4 18             	add    esp,0x18
c00255b5:	5b                   	pop    ebx
c00255b6:	c3                   	ret    
c00255b7:	90                   	nop

c00255b8 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00255b8:	55                   	push   ebp
c00255b9:	89 e5                	mov    ebp,esp
c00255bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00255c4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00255c7:	72 1d                	jb     c00255e6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00255c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255cc:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00255d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255d5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00255db:	01 d0                	add    eax,edx
c00255dd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00255e0:	73 04                	jae    c00255e6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00255e2:	b0 01                	mov    al,0x1
c00255e4:	eb 02                	jmp    c00255e8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00255e6:	b0 00                	mov    al,0x0
c00255e8:	5d                   	pop    ebp
c00255e9:	c3                   	ret    

c00255ea <IOAPIC::read(int)>:
c00255ea:	55                   	push   ebp
c00255eb:	89 e5                	mov    ebp,esp
c00255ed:	83 ec 10             	sub    esp,0x10
c00255f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00255f3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00255f9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00255fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00255ff:	0f b6 d0             	movzx  edx,al
c0025602:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025605:	89 10                	mov    DWORD PTR [eax],edx
c0025607:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002560a:	83 c0 10             	add    eax,0x10
c002560d:	8b 00                	mov    eax,DWORD PTR [eax]
c002560f:	c9                   	leave  
c0025610:	c3                   	ret    
c0025611:	90                   	nop

c0025612 <IOAPIC::open(int, int, void*)>:
c0025612:	55                   	push   ebp
c0025613:	89 e5                	mov    ebp,esp
c0025615:	57                   	push   edi
c0025616:	56                   	push   esi
c0025617:	53                   	push   ebx
c0025618:	83 ec 0c             	sub    esp,0xc
c002561b:	83 ec 0c             	sub    esp,0xc
c002561e:	68 9f c1 02 c0       	push   0xc002c19f
c0025623:	e8 0d cf fe ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c0025628:	83 c4 10             	add    esp,0x10
c002562b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002562e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025631:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002563a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025640:	8b 14 85 a0 ff 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0060]
c0025647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002564a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025653:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025659:	8b 14 85 20 00 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcffe0]
c0025660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025663:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002566c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025675:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002567b:	0f b6 f8             	movzx  edi,al
c002567e:	89 d0                	mov    eax,edx
c0025680:	ba 00 00 00 00       	mov    edx,0x0
c0025685:	89 c1                	mov    ecx,eax
c0025687:	80 e5 ff             	and    ch,0xff
c002568a:	89 cb                	mov    ebx,ecx
c002568c:	0f b6 f2             	movzx  esi,dl
c002568f:	89 d8                	mov    eax,ebx
c0025691:	89 f2                	mov    edx,esi
c0025693:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025696:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025699:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002569d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00256a1:	83 e0 00             	and    eax,0x0
c00256a4:	09 d0                	or     eax,edx
c00256a6:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00256aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256ad:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00256b3:	8d 50 01             	lea    edx,[eax+0x1]
c00256b6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00256b9:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00256bf:	0f b6 d0             	movzx  edx,al
c00256c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256c5:	83 c2 08             	add    edx,0x8
c00256c8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00256cc:	0f b6 c9             	movzx  ecx,cl
c00256cf:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00256d5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00256d9:	83 ec 08             	sub    esp,0x8
c00256dc:	6a 01                	push   0x1
c00256de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00256e1:	e8 04 ff ff ff       	call   c00255ea <IOAPIC::read(int)>
c00256e6:	83 c4 10             	add    esp,0x10
c00256e9:	c1 f8 10             	sar    eax,0x10
c00256ec:	0f b6 c0             	movzx  eax,al
c00256ef:	8d 50 01             	lea    edx,[eax+0x1]
c00256f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256f5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00256fb:	b8 00 00 00 00       	mov    eax,0x0
c0025700:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025703:	5b                   	pop    ebx
c0025704:	5e                   	pop    esi
c0025705:	5f                   	pop    edi
c0025706:	5d                   	pop    ebp
c0025707:	c3                   	ret    

c0025708 <IOAPIC::write(int, int)>:
c0025708:	55                   	push   ebp
c0025709:	89 e5                	mov    ebp,esp
c002570b:	83 ec 10             	sub    esp,0x10
c002570e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025711:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025717:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002571a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002571d:	0f b6 d0             	movzx  edx,al
c0025720:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025723:	89 10                	mov    DWORD PTR [eax],edx
c0025725:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025728:	8d 50 10             	lea    edx,[eax+0x10]
c002572b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002572e:	89 02                	mov    DWORD PTR [edx],eax
c0025730:	90                   	nop
c0025731:	c9                   	leave  
c0025732:	c3                   	ret    
c0025733:	90                   	nop

c0025734 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025734:	55                   	push   ebp
c0025735:	89 e5                	mov    ebp,esp
c0025737:	53                   	push   ebx
c0025738:	83 ec 2c             	sub    esp,0x2c
c002573b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002573e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025741:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025744:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025747:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002574a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002574d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025750:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025753:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025756:	88 d8                	mov    al,bl
c0025758:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002575b:	88 c8                	mov    al,cl
c002575d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025760:	88 d0                	mov    al,dl
c0025762:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025765:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025769:	83 c0 08             	add    eax,0x8
c002576c:	01 c0                	add    eax,eax
c002576e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025771:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025775:	83 c0 08             	add    eax,0x8
c0025778:	01 c0                	add    eax,eax
c002577a:	40                   	inc    eax
c002577b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002577e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025781:	50                   	push   eax
c0025782:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025785:	e8 60 fe ff ff       	call   c00255ea <IOAPIC::read(int)>
c002578a:	83 c4 08             	add    esp,0x8
c002578d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025790:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025797:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002579a:	c1 e0 18             	shl    eax,0x18
c002579d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00257a0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00257a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00257a6:	52                   	push   edx
c00257a7:	50                   	push   eax
c00257a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257ab:	e8 58 ff ff ff       	call   c0025708 <IOAPIC::write(int, int)>
c00257b0:	83 c4 0c             	add    esp,0xc
c00257b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257b6:	50                   	push   eax
c00257b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257ba:	e8 2b fe ff ff       	call   c00255ea <IOAPIC::read(int)>
c00257bf:	83 c4 08             	add    esp,0x8
c00257c2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00257c5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00257cc:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00257d3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00257da:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00257de:	74 09                	je     c00257e9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00257e0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00257e7:	eb 07                	jmp    c00257f0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00257e9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00257f0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00257f4:	74 09                	je     c00257ff <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00257f6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00257fd:	eb 07                	jmp    c0025806 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00257ff:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025806:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002580d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025811:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025814:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025817:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002581a:	52                   	push   edx
c002581b:	50                   	push   eax
c002581c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002581f:	e8 e4 fe ff ff       	call   c0025708 <IOAPIC::write(int, int)>
c0025824:	83 c4 0c             	add    esp,0xc
c0025827:	90                   	nop
c0025828:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002582b:	c9                   	leave  
c002582c:	c3                   	ret    
c002582d:	90                   	nop

c002582e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002582e:	55                   	push   ebp
c002582f:	89 e5                	mov    ebp,esp
c0025831:	57                   	push   edi
c0025832:	56                   	push   esi
c0025833:	53                   	push   ebx
c0025834:	83 ec 2c             	sub    esp,0x2c
c0025837:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002583a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002583d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025841:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025845:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025849:	74 5a                	je     c00258a5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002584b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002584f:	7f 44                	jg     c0025895 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025851:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025854:	05 40 c8 02 c0       	add    eax,0xc002c840
c0025859:	8a 00                	mov    al,BYTE PTR [eax]
c002585b:	0f b6 c0             	movzx  eax,al
c002585e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025861:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025864:	66 8b 84 00 40 ff 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd00c0]
c002586c:	0f b7 c0             	movzx  eax,ax
c002586f:	83 e0 02             	and    eax,0x2
c0025872:	85 c0                	test   eax,eax
c0025874:	74 04                	je     c002587a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025876:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002587a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002587d:	66 8b 84 00 40 ff 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd00c0]
c0025885:	0f b7 c0             	movzx  eax,ax
c0025888:	83 e0 08             	and    eax,0x8
c002588b:	85 c0                	test   eax,eax
c002588d:	74 16                	je     c00258a5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002588f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025893:	eb 10                	jmp    c00258a5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025895:	83 ec 0c             	sub    esp,0xc
c0025898:	68 b0 c1 02 c0       	push   0xc002c1b0
c002589d:	e8 f3 43 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c00258a2:	83 c4 10             	add    esp,0x10
c00258a5:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00258a9:	a1 40 19 03 c0       	mov    eax,ds:0xc0031940
c00258ae:	83 ec 08             	sub    esp,0x8
c00258b1:	50                   	push   eax
c00258b2:	68 e8 c1 02 c0       	push   0xc002c1e8
c00258b7:	e8 79 cc fe ff       	call   c0012535 <Dbg::kprintf(char const*, ...)>
c00258bc:	83 c4 10             	add    esp,0x10
c00258bf:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00258c6:	a1 40 19 03 c0       	mov    eax,ds:0xc0031940
c00258cb:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00258ce:	7d 67                	jge    c0025937 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00258d0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258d3:	8b 04 85 60 19 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce6a0]
c00258da:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00258dd:	83 ec 08             	sub    esp,0x8
c00258e0:	52                   	push   edx
c00258e1:	50                   	push   eax
c00258e2:	e8 d1 fc ff ff       	call   c00255b8 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00258e7:	83 c4 10             	add    esp,0x10
c00258ea:	84 c0                	test   al,al
c00258ec:	74 44                	je     c0025932 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00258ee:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00258f1:	8b 1c 85 60 19 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce6a0]
c00258f8:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00258fc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00258ff:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025903:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025906:	83 c0 20             	add    eax,0x20
c0025909:	0f b6 f0             	movzx  esi,al
c002590c:	b8 00 00 00 00       	mov    eax,0x0
c0025911:	99                   	cdq    
c0025912:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025915:	0f b6 c9             	movzx  ecx,cl
c0025918:	83 ec 04             	sub    esp,0x4
c002591b:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002591e:	57                   	push   edi
c002591f:	56                   	push   esi
c0025920:	52                   	push   edx
c0025921:	50                   	push   eax
c0025922:	51                   	push   ecx
c0025923:	53                   	push   ebx
c0025924:	e8 0b fe ff ff       	call   c0025734 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025929:	83 c4 20             	add    esp,0x20
c002592c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025930:	eb 05                	jmp    c0025937 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025932:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025935:	eb 8f                	jmp    c00258c6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025937:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002593a:	83 f0 01             	xor    eax,0x1
c002593d:	84 c0                	test   al,al
c002593f:	74 10                	je     c0025951 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025941:	83 ec 0c             	sub    esp,0xc
c0025944:	68 ff c1 02 c0       	push   0xc002c1ff
c0025949:	e8 47 43 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c002594e:	83 c4 10             	add    esp,0x10
c0025951:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025955:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002595c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025960:	7f 65                	jg     c00259c7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025962:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025965:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025968:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002596f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025972:	01 ca                	add    edx,ecx
c0025974:	83 c2 54             	add    edx,0x54
c0025977:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002597b:	85 c0                	test   eax,eax
c002597d:	75 43                	jne    c00259c2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002597f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025982:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025985:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002598c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002598f:	01 ca                	add    edx,ecx
c0025991:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025994:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025997:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002599b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002599e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00259a1:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00259a8:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00259ab:	01 ca                	add    edx,ecx
c00259ad:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00259b3:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00259b6:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00259ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259bd:	83 e8 20             	sub    eax,0x20
c00259c0:	eb 1a                	jmp    c00259dc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00259c2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00259c5:	eb 95                	jmp    c002595c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00259c7:	83 ec 0c             	sub    esp,0xc
c00259ca:	68 0c c2 02 c0       	push   0xc002c20c
c00259cf:	e8 c1 42 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c00259d4:	83 c4 10             	add    esp,0x10
c00259d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00259dc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00259df:	5b                   	pop    ebx
c00259e0:	5e                   	pop    esi
c00259e1:	5f                   	pop    edi
c00259e2:	5d                   	pop    ebp
c00259e3:	c3                   	ret    

c00259e4 <PIC::disable()>:
c00259e4:	55                   	push   ebp
c00259e5:	89 e5                	mov    ebp,esp
c00259e7:	83 ec 10             	sub    esp,0x10
c00259ea:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00259f0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00259f4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00259f7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00259fb:	ee                   	out    dx,al
c00259fc:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025a02:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025a06:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025a09:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025a0d:	ee                   	out    dx,al
c0025a0e:	90                   	nop
c0025a0f:	c9                   	leave  
c0025a10:	c3                   	ret    
c0025a11:	90                   	nop

c0025a12 <PIC::close(int, int, void*)>:
c0025a12:	55                   	push   ebp
c0025a13:	89 e5                	mov    ebp,esp
c0025a15:	83 ec 08             	sub    esp,0x8
c0025a18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a1d:	83 c0 3c             	add    eax,0x3c
c0025a20:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a22:	83 ec 0c             	sub    esp,0xc
c0025a25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025a28:	ff d0                	call   eax
c0025a2a:	83 c4 10             	add    esp,0x10
c0025a2d:	b8 00 00 00 00       	mov    eax,0x0
c0025a32:	c9                   	leave  
c0025a33:	c3                   	ret    

c0025a34 <PIC::PIC()>:
c0025a34:	83 ec 0c             	sub    esp,0xc
c0025a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a3b:	83 ec 08             	sub    esp,0x8
c0025a3e:	68 b8 c2 02 c0       	push   0xc002c2b8
c0025a43:	50                   	push   eax
c0025a44:	e8 93 e8 fe ff       	call   c00142dc <InterruptController::InterruptController(char const*)>
c0025a49:	83 c4 10             	add    esp,0x10
c0025a4c:	ba e4 c2 02 c0       	mov    edx,0xc002c2e4
c0025a51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a55:	89 10                	mov    DWORD PTR [eax],edx
c0025a57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a5b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a61:	0f b6 d0             	movzx  edx,al
c0025a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a68:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025a6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a73:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a79:	0f b6 d0             	movzx  edx,al
c0025a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a80:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a89:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025a8f:	8d 50 01             	lea    edx,[eax+0x1]
c0025a92:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025a96:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025a9c:	0f b6 d0             	movzx  edx,al
c0025a9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aa3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025aa7:	83 e1 3f             	and    ecx,0x3f
c0025aaa:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ab2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ab8:	0f b6 d0             	movzx  edx,al
c0025abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025abf:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ad0:	0f b6 d0             	movzx  edx,al
c0025ad3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ad7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ae0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ae6:	8d 50 01             	lea    edx,[eax+0x1]
c0025ae9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025aed:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025af3:	0f b6 d0             	movzx  edx,al
c0025af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025afa:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025afe:	83 e1 3f             	and    ecx,0x3f
c0025b01:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025b05:	90                   	nop
c0025b06:	83 c4 0c             	add    esp,0xc
c0025b09:	c3                   	ret    

c0025b0a <PIC::ioWait()>:
c0025b0a:	eb 00                	jmp    c0025b0c <PIC::ioWait()+0x2>
c0025b0c:	eb 00                	jmp    c0025b0e <PIC::ioWait()+0x4>
c0025b0e:	90                   	nop
c0025b0f:	c3                   	ret    

c0025b10 <PIC::getIRQReg(int)>:
c0025b10:	55                   	push   ebp
c0025b11:	89 e5                	mov    ebp,esp
c0025b13:	83 ec 10             	sub    esp,0x10
c0025b16:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b19:	0f b6 c0             	movzx  eax,al
c0025b1c:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025b22:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025b25:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025b28:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025b2c:	ee                   	out    dx,al
c0025b2d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b30:	0f b6 c0             	movzx  eax,al
c0025b33:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025b39:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025b3c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025b3f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025b43:	ee                   	out    dx,al
c0025b44:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025b4a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025b4e:	89 c2                	mov    edx,eax
c0025b50:	ec                   	in     al,dx
c0025b51:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025b54:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025b57:	0f b6 c0             	movzx  eax,al
c0025b5a:	c1 e0 08             	shl    eax,0x8
c0025b5d:	89 c1                	mov    ecx,eax
c0025b5f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025b65:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025b69:	89 c2                	mov    edx,eax
c0025b6b:	ec                   	in     al,dx
c0025b6c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025b6f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025b72:	0f b6 c0             	movzx  eax,al
c0025b75:	09 c8                	or     eax,ecx
c0025b77:	c9                   	leave  
c0025b78:	c3                   	ret    
c0025b79:	90                   	nop

c0025b7a <PIC::eoi(unsigned char)>:
c0025b7a:	55                   	push   ebp
c0025b7b:	89 e5                	mov    ebp,esp
c0025b7d:	83 ec 14             	sub    esp,0x14
c0025b80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b83:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025b86:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025b8a:	75 1e                	jne    c0025baa <PIC::eoi(unsigned char)+0x30>
c0025b8c:	6a 0b                	push   0xb
c0025b8e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025b91:	e8 7a ff ff ff       	call   c0025b10 <PIC::getIRQReg(int)>
c0025b96:	83 c4 08             	add    esp,0x8
c0025b99:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025b9d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025ba1:	25 80 00 00 00       	and    eax,0x80
c0025ba6:	85 c0                	test   eax,eax
c0025ba8:	74 5f                	je     c0025c09 <PIC::eoi(unsigned char)+0x8f>
c0025baa:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025bae:	75 2d                	jne    c0025bdd <PIC::eoi(unsigned char)+0x63>
c0025bb0:	6a 0b                	push   0xb
c0025bb2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bb5:	e8 56 ff ff ff       	call   c0025b10 <PIC::getIRQReg(int)>
c0025bba:	83 c4 08             	add    esp,0x8
c0025bbd:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025bc1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025bc4:	66 85 c0             	test   ax,ax
c0025bc7:	78 14                	js     c0025bdd <PIC::eoi(unsigned char)+0x63>
c0025bc9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025bcf:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025bd3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025bd6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025bda:	ee                   	out    dx,al
c0025bdb:	eb 2d                	jmp    c0025c0a <PIC::eoi(unsigned char)+0x90>
c0025bdd:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025be1:	76 12                	jbe    c0025bf5 <PIC::eoi(unsigned char)+0x7b>
c0025be3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025be9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025bed:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025bf0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025bf4:	ee                   	out    dx,al
c0025bf5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025bfb:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025bff:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025c02:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025c06:	ee                   	out    dx,al
c0025c07:	eb 01                	jmp    c0025c0a <PIC::eoi(unsigned char)+0x90>
c0025c09:	90                   	nop
c0025c0a:	c9                   	leave  
c0025c0b:	c3                   	ret    

c0025c0c <PIC::remap()>:
c0025c0c:	55                   	push   ebp
c0025c0d:	89 e5                	mov    ebp,esp
c0025c0f:	83 ec 48             	sub    esp,0x48
c0025c12:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025c19:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025c20:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025c26:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025c29:	89 c2                	mov    edx,eax
c0025c2b:	ec                   	in     al,dx
c0025c2c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025c2f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025c32:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025c35:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025c3b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025c3e:	89 c2                	mov    edx,eax
c0025c40:	ec                   	in     al,dx
c0025c41:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025c44:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025c47:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025c4a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025c50:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025c54:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025c57:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025c5a:	ee                   	out    dx,al
c0025c5b:	83 ec 0c             	sub    esp,0xc
c0025c5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c61:	e8 a4 fe ff ff       	call   c0025b0a <PIC::ioWait()>
c0025c66:	83 c4 10             	add    esp,0x10
c0025c69:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025c6f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025c73:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025c76:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025c79:	ee                   	out    dx,al
c0025c7a:	83 ec 0c             	sub    esp,0xc
c0025c7d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c80:	e8 85 fe ff ff       	call   c0025b0a <PIC::ioWait()>
c0025c85:	83 c4 10             	add    esp,0x10
c0025c88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025c8b:	0f b6 c0             	movzx  eax,al
c0025c8e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025c94:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025c97:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025c9a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025c9d:	ee                   	out    dx,al
c0025c9e:	83 ec 0c             	sub    esp,0xc
c0025ca1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ca4:	e8 61 fe ff ff       	call   c0025b0a <PIC::ioWait()>
c0025ca9:	83 c4 10             	add    esp,0x10
c0025cac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025caf:	0f b6 c0             	movzx  eax,al
c0025cb2:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025cb8:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025cbb:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025cbe:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025cc1:	ee                   	out    dx,al
c0025cc2:	83 ec 0c             	sub    esp,0xc
c0025cc5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cc8:	e8 3d fe ff ff       	call   c0025b0a <PIC::ioWait()>
c0025ccd:	83 c4 10             	add    esp,0x10
c0025cd0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025cd6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025cda:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025cdd:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025ce0:	ee                   	out    dx,al
c0025ce1:	83 ec 0c             	sub    esp,0xc
c0025ce4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ce7:	e8 1e fe ff ff       	call   c0025b0a <PIC::ioWait()>
c0025cec:	83 c4 10             	add    esp,0x10
c0025cef:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025cf5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025cf9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025cfc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025cff:	ee                   	out    dx,al
c0025d00:	83 ec 0c             	sub    esp,0xc
c0025d03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d06:	e8 ff fd ff ff       	call   c0025b0a <PIC::ioWait()>
c0025d0b:	83 c4 10             	add    esp,0x10
c0025d0e:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025d14:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025d18:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025d1b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025d1e:	ee                   	out    dx,al
c0025d1f:	83 ec 0c             	sub    esp,0xc
c0025d22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d25:	e8 e0 fd ff ff       	call   c0025b0a <PIC::ioWait()>
c0025d2a:	83 c4 10             	add    esp,0x10
c0025d2d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025d33:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025d37:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025d3a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025d3d:	ee                   	out    dx,al
c0025d3e:	83 ec 0c             	sub    esp,0xc
c0025d41:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d44:	e8 c1 fd ff ff       	call   c0025b0a <PIC::ioWait()>
c0025d49:	83 c4 10             	add    esp,0x10
c0025d4c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025d50:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025d56:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025d59:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025d5c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025d5f:	ee                   	out    dx,al
c0025d60:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025d64:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025d6a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025d6d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025d70:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025d73:	ee                   	out    dx,al
c0025d74:	90                   	nop
c0025d75:	c9                   	leave  
c0025d76:	c3                   	ret    
c0025d77:	90                   	nop

c0025d78 <PIC::open(int, int, void*)>:
c0025d78:	55                   	push   ebp
c0025d79:	89 e5                	mov    ebp,esp
c0025d7b:	83 ec 18             	sub    esp,0x18
c0025d7e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025d84:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025d88:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025d8b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025d8f:	ee                   	out    dx,al
c0025d90:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025d96:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025d9a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d9d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025da1:	ee                   	out    dx,al
c0025da2:	83 ec 0c             	sub    esp,0xc
c0025da5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025da8:	e8 5f fe ff ff       	call   c0025c0c <PIC::remap()>
c0025dad:	83 c4 10             	add    esp,0x10
c0025db0:	b8 00 00 00 00       	mov    eax,0x0
c0025db5:	c9                   	leave  
c0025db6:	c3                   	ret    
c0025db7:	90                   	nop

c0025db8 <APICTimer::close(int, int, void*)>:
c0025db8:	b8 00 00 00 00       	mov    eax,0x0
c0025dbd:	c3                   	ret    

c0025dbe <apicTimerHandler(regs*, void*)>:
c0025dbe:	83 ec 0c             	sub    esp,0xc
c0025dc1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025dc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0025dc7:	99                   	cdq    
c0025dc8:	52                   	push   edx
c0025dc9:	50                   	push   eax
c0025dca:	6a 00                	push   0x0
c0025dcc:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025dd1:	e8 8e 07 00 00       	call   c0026564 <__udivdi3>
c0025dd6:	83 c4 10             	add    esp,0x10
c0025dd9:	83 ec 08             	sub    esp,0x8
c0025ddc:	52                   	push   edx
c0025ddd:	50                   	push   eax
c0025dde:	e8 44 06 ff ff       	call   c0016427 <timerHandler(unsigned long long)>
c0025de3:	83 c4 10             	add    esp,0x10
c0025de6:	90                   	nop
c0025de7:	83 c4 0c             	add    esp,0xc
c0025dea:	c3                   	ret    
c0025deb:	90                   	nop

c0025dec <APICTimer::write(int)>:
c0025dec:	53                   	push   ebx
c0025ded:	83 ec 28             	sub    esp,0x28
c0025df0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025df4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025df8:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025dfe:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0025e03:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025e09:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025e0f:	83 ec 0c             	sub    esp,0xc
c0025e12:	50                   	push   eax
c0025e13:	e8 de f4 ff ff       	call   c00252f6 <APIC::getBase()>
c0025e18:	83 c4 10             	add    esp,0x10
c0025e1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025e1f:	a1 50 dc 02 c0       	mov    eax,ds:0xc002dc50
c0025e24:	8b 15 54 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc54
c0025e2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025e32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e36:	05 e0 03 00 00       	add    eax,0x3e0
c0025e3b:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e45:	05 80 03 00 00       	add    eax,0x380
c0025e4a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025e50:	fb                   	sti    
c0025e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e55:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025e59:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025e5e:	83 d2 00             	adc    edx,0x0
c0025e61:	89 c1                	mov    ecx,eax
c0025e63:	89 d3                	mov    ebx,edx
c0025e65:	a1 50 dc 02 c0       	mov    eax,ds:0xc002dc50
c0025e6a:	8b 15 54 dc 02 c0    	mov    edx,DWORD PTR ds:0xc002dc54
c0025e70:	39 c8                	cmp    eax,ecx
c0025e72:	89 d0                	mov    eax,edx
c0025e74:	19 d8                	sbb    eax,ebx
c0025e76:	73 02                	jae    c0025e7a <APICTimer::write(int)+0x8e>
c0025e78:	eb d7                	jmp    c0025e51 <APICTimer::write(int)+0x65>
c0025e7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e7e:	05 20 03 00 00       	add    eax,0x320
c0025e83:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025e89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025e8d:	05 90 03 00 00       	add    eax,0x390
c0025e92:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e94:	f7 d0                	not    eax
c0025e96:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025e9a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025e9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025ea2:	ba 00 00 00 00       	mov    edx,0x0
c0025ea7:	f7 f3                	div    ebx
c0025ea9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025ead:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025eb1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025eb7:	0d 00 00 02 00       	or     eax,0x20000
c0025ebc:	89 c2                	mov    edx,eax
c0025ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ec2:	05 20 03 00 00       	add    eax,0x320
c0025ec7:	89 10                	mov    DWORD PTR [eax],edx
c0025ec9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ecd:	05 e0 03 00 00       	add    eax,0x3e0
c0025ed2:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025ed8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025edc:	05 80 03 00 00       	add    eax,0x380
c0025ee1:	89 c2                	mov    edx,eax
c0025ee3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025ee7:	89 02                	mov    DWORD PTR [edx],eax
c0025ee9:	90                   	nop
c0025eea:	83 c4 28             	add    esp,0x28
c0025eed:	5b                   	pop    ebx
c0025eee:	c3                   	ret    
c0025eef:	90                   	nop

c0025ef0 <APICTimer::open(int, int, void*)>:
c0025ef0:	57                   	push   edi
c0025ef1:	56                   	push   esi
c0025ef2:	53                   	push   ebx
c0025ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ef7:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ef9:	83 c0 24             	add    eax,0x24
c0025efc:	8b 00                	mov    eax,DWORD PTR [eax]
c0025efe:	83 ec 08             	sub    esp,0x8
c0025f01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f09:	ff d0                	call   eax
c0025f0b:	83 c4 10             	add    esp,0x10
c0025f0e:	a1 e8 d5 02 c0       	mov    eax,ds:0xc002d5e8
c0025f13:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025f19:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025f1f:	83 ec 0c             	sub    esp,0xc
c0025f22:	50                   	push   eax
c0025f23:	e8 ce f3 ff ff       	call   c00252f6 <APIC::getBase()>
c0025f28:	83 c4 10             	add    esp,0x10
c0025f2b:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025f31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f35:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025f3b:	0f b6 f8             	movzx  edi,al
c0025f3e:	89 d0                	mov    eax,edx
c0025f40:	ba 00 00 00 00       	mov    edx,0x0
c0025f45:	89 c1                	mov    ecx,eax
c0025f47:	80 e5 ff             	and    ch,0xff
c0025f4a:	89 cb                	mov    ebx,ecx
c0025f4c:	0f b6 f2             	movzx  esi,dl
c0025f4f:	89 d8                	mov    eax,ebx
c0025f51:	89 f2                	mov    edx,esi
c0025f53:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f57:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025f5a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025f5e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025f62:	83 e0 00             	and    eax,0x0
c0025f65:	09 d0                	or     eax,edx
c0025f67:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f6f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025f75:	8d 50 01             	lea    edx,[eax+0x1]
c0025f78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025f7c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025f82:	0f b6 d0             	movzx  edx,al
c0025f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f89:	83 c2 08             	add    edx,0x8
c0025f8c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025f90:	0f b6 c9             	movzx  ecx,cl
c0025f93:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025f99:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025f9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fa1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025fa5:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025faf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025fb3:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0025fb9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025fbd:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0025fc3:	83 ec 0c             	sub    esp,0xc
c0025fc6:	51                   	push   ecx
c0025fc7:	6a 01                	push   0x1
c0025fc9:	68 be 5d 02 c0       	push   0xc0025dbe
c0025fce:	52                   	push   edx
c0025fcf:	50                   	push   eax
c0025fd0:	e8 11 d9 fe ff       	call   c00138e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0025fd5:	83 c4 20             	add    esp,0x20
c0025fd8:	89 c2                	mov    edx,eax
c0025fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fde:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0025fe4:	b8 00 00 00 00       	mov    eax,0x0
c0025fe9:	5b                   	pop    ebx
c0025fea:	5e                   	pop    esi
c0025feb:	5f                   	pop    edi
c0025fec:	c3                   	ret    
c0025fed:	90                   	nop

c0025fee <APICTimer::APICTimer()>:
c0025fee:	83 ec 0c             	sub    esp,0xc
c0025ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ff5:	83 ec 08             	sub    esp,0x8
c0025ff8:	68 24 c3 02 c0       	push   0xc002c324
c0025ffd:	50                   	push   eax
c0025ffe:	e8 95 03 ff ff       	call   c0016398 <Timer::Timer(char const*)>
c0026003:	83 c4 10             	add    esp,0x10
c0026006:	ba 38 c3 02 c0       	mov    edx,0xc002c338
c002600b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002600f:	89 10                	mov    DWORD PTR [eax],edx
c0026011:	90                   	nop
c0026012:	83 c4 0c             	add    esp,0xc
c0026015:	c3                   	ret    

c0026016 <PIT::write(int)>:
c0026016:	83 ec 10             	sub    esp,0x10
c0026019:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002601d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026021:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026027:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002602b:	a3 84 19 03 c0       	mov    ds:0xc0031984,eax
c0026030:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026035:	99                   	cdq    
c0026036:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002603a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002603e:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026045:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002604a:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002604e:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026053:	ee                   	out    dx,al
c0026054:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026058:	0f b6 c0             	movzx  eax,al
c002605b:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026062:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026066:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002606a:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002606f:	ee                   	out    dx,al
c0026070:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026074:	c1 f8 08             	sar    eax,0x8
c0026077:	0f b6 c0             	movzx  eax,al
c002607a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026081:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026085:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026089:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002608e:	ee                   	out    dx,al
c002608f:	90                   	nop
c0026090:	83 c4 10             	add    esp,0x10
c0026093:	c3                   	ret    

c0026094 <pitHandler(regs*, void*)>:
c0026094:	83 ec 0c             	sub    esp,0xc
c0026097:	a1 84 19 03 c0       	mov    eax,ds:0xc0031984
c002609c:	99                   	cdq    
c002609d:	52                   	push   edx
c002609e:	50                   	push   eax
c002609f:	6a 00                	push   0x0
c00260a1:	68 00 ca 9a 3b       	push   0x3b9aca00
c00260a6:	e8 b9 04 00 00       	call   c0026564 <__udivdi3>
c00260ab:	83 c4 10             	add    esp,0x10
c00260ae:	83 ec 08             	sub    esp,0x8
c00260b1:	52                   	push   edx
c00260b2:	50                   	push   eax
c00260b3:	e8 6f 03 ff ff       	call   c0016427 <timerHandler(unsigned long long)>
c00260b8:	83 c4 10             	add    esp,0x10
c00260bb:	90                   	nop
c00260bc:	83 c4 0c             	add    esp,0xc
c00260bf:	c3                   	ret    

c00260c0 <PIT::open(int, int, void*)>:
c00260c0:	83 ec 0c             	sub    esp,0xc
c00260c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00260c9:	83 c0 24             	add    eax,0x24
c00260cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00260ce:	83 ec 08             	sub    esp,0x8
c00260d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00260d9:	ff d0                	call   eax
c00260db:	83 c4 10             	add    esp,0x10
c00260de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260e2:	83 ec 0c             	sub    esp,0xc
c00260e5:	6a 00                	push   0x0
c00260e7:	6a 01                	push   0x1
c00260e9:	68 94 60 02 c0       	push   0xc0026094
c00260ee:	6a 00                	push   0x0
c00260f0:	50                   	push   eax
c00260f1:	e8 f0 d7 fe ff       	call   c00138e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00260f6:	83 c4 20             	add    esp,0x20
c00260f9:	89 c2                	mov    edx,eax
c00260fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260ff:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026105:	b8 00 00 00 00       	mov    eax,0x0
c002610a:	83 c4 0c             	add    esp,0xc
c002610d:	c3                   	ret    

c002610e <PIT::close(int, int, void*)>:
c002610e:	83 ec 0c             	sub    esp,0xc
c0026111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026115:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002611f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026123:	6a 01                	push   0x1
c0026125:	68 94 60 02 c0       	push   0xc0026094
c002612a:	6a 00                	push   0x0
c002612c:	50                   	push   eax
c002612d:	e8 fe d7 fe ff       	call   c0013930 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026132:	83 c4 10             	add    esp,0x10
c0026135:	b8 00 00 00 00       	mov    eax,0x0
c002613a:	83 c4 0c             	add    esp,0xc
c002613d:	c3                   	ret    

c002613e <PIT::PIT()>:
c002613e:	83 ec 0c             	sub    esp,0xc
c0026141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026145:	83 ec 08             	sub    esp,0x8
c0026148:	68 60 c3 02 c0       	push   0xc002c360
c002614d:	50                   	push   eax
c002614e:	e8 45 02 ff ff       	call   c0016398 <Timer::Timer(char const*)>
c0026153:	83 c4 10             	add    esp,0x10
c0026156:	ba 88 c3 02 c0       	mov    edx,0xc002c388
c002615b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002615f:	89 10                	mov    DWORD PTR [eax],edx
c0026161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026165:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002616b:	0f b6 d0             	movzx  edx,al
c002616e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026172:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002617d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026183:	0f b6 d0             	movzx  edx,al
c0026186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002618a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002618f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026193:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026199:	8d 50 01             	lea    edx,[eax+0x1]
c002619c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00261a0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00261a6:	0f b6 d0             	movzx  edx,al
c00261a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261ad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00261b1:	83 e1 3f             	and    ecx,0x3f
c00261b4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00261b8:	90                   	nop
c00261b9:	83 c4 0c             	add    esp,0xc
c00261bc:	c3                   	ret    
c00261bd:	66 90                	xchg   ax,ax
c00261bf:	90                   	nop

c00261c0 <avxDetect>:
c00261c0:	b8 00 00 00 00       	mov    eax,0x0
c00261c5:	c3                   	ret    

c00261c6 <avxSave>:
c00261c6:	c3                   	ret    

c00261c7 <avxLoad>:
c00261c7:	c3                   	ret    

c00261c8 <avxInit>:
c00261c8:	c3                   	ret    

c00261c9 <avxClose>:
c00261c9:	c3                   	ret    

c00261ca <wouldSheSayYes>:
c00261ca:	c3                   	ret    
c00261cb:	49                   	dec    ecx
c00261cc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00261d0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00261d4:	75 20                	jne    c00261f6 <sseDetect.noSSE+0x1>
c00261d6:	4e                   	dec    esi
c00261d7:	79 61                	jns    c002623a <x87Detect+0x14>
c00261d9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00261de:	66 90                	xchg   ax,ax

c00261e0 <absolutelyNoChanceInHell>:
c00261e0:	b8 01 00 00 00       	mov    eax,0x1
c00261e5:	0f a2                	cpuid  
c00261e7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00261ed:	74 06                	je     c00261f5 <sseDetect.noSSE>
c00261ef:	b8 01 00 00 00       	mov    eax,0x1
c00261f4:	c3                   	ret    

c00261f5 <sseDetect.noSSE>:
c00261f5:	31 c0                	xor    eax,eax
c00261f7:	c3                   	ret    

c00261f8 <sseSave>:
c00261f8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00261fd:	c3                   	ret    

c00261fe <sseLoad>:
c00261fe:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026203:	c3                   	ret    

c0026204 <sseInit>:
c0026204:	e8 49 00 00 00       	call   c0026252 <x87Init>
c0026209:	0f 20 e0             	mov    eax,cr4
c002620c:	66 0d 00 06          	or     ax,0x600
c0026210:	0f 22 e0             	mov    cr4,eax
c0026213:	c3                   	ret    

c0026214 <sseClose>:
c0026214:	c3                   	ret    
c0026215:	66 90                	xchg   ax,ax
c0026217:	66 90                	xchg   ax,ax
c0026219:	66 90                	xchg   ax,ax
c002621b:	66 90                	xchg   ax,ax
c002621d:	66 90                	xchg   ax,ax
c002621f:	90                   	nop

c0026220 <value_37F>:
c0026220:	7f 03                	jg     c0026225 <value_37A+0x1>

c0026222 <value_37E>:
c0026222:	7e 03                	jle    c0026227 <x87Detect+0x1>

c0026224 <value_37A>:
c0026224:	7a 03                	jp     c0026229 <x87Detect+0x3>

c0026226 <x87Detect>:
c0026226:	b8 01 00 00 00       	mov    eax,0x1
c002622b:	0f a2                	cpuid  
c002622d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026233:	74 06                	je     c002623b <x87Detect.nox87>
c0026235:	b8 01 00 00 00       	mov    eax,0x1
c002623a:	c3                   	ret    

c002623b <x87Detect.nox87>:
c002623b:	b8 00 00 00 00       	mov    eax,0x0
c0026240:	c3                   	ret    

c0026241 <x87Save>:
c0026241:	55                   	push   ebp
c0026242:	89 e5                	mov    ebp,esp
c0026244:	9b dd 75 08          	fsave  [ebp+0x8]
c0026248:	c9                   	leave  
c0026249:	c3                   	ret    

c002624a <x87Load>:
c002624a:	55                   	push   ebp
c002624b:	89 e5                	mov    ebp,esp
c002624d:	dd 65 08             	frstor [ebp+0x8]
c0026250:	c9                   	leave  
c0026251:	c3                   	ret    

c0026252 <x87Init>:
c0026252:	9b db e3             	finit  
c0026255:	0f 20 c0             	mov    eax,cr0
c0026258:	66 25 fb ff          	and    ax,0xfffb
c002625c:	66 0d 22 00          	or     ax,0x22
c0026260:	0f 22 c0             	mov    cr0,eax
c0026263:	0f 06                	clts   
c0026265:	d9 2d 24 62 02 c0    	fldcw  WORD PTR ds:0xc0026224
c002626b:	c3                   	ret    

c002626c <x87Close>:
c002626c:	c3                   	ret    
c002626d:	66 90                	xchg   ax,ax
c002626f:	90                   	nop

c0026270 <__do_global_ctors_aux>:
c0026270:	a1 64 8e 02 c0       	mov    eax,ds:0xc0028e64
c0026275:	83 f8 ff             	cmp    eax,0xffffffff
c0026278:	74 1a                	je     c0026294 <__do_global_ctors_aux+0x24>
c002627a:	55                   	push   ebp
c002627b:	89 e5                	mov    ebp,esp
c002627d:	53                   	push   ebx
c002627e:	52                   	push   edx
c002627f:	bb 64 8e 02 c0       	mov    ebx,0xc0028e64
c0026284:	ff d0                	call   eax
c0026286:	83 eb 04             	sub    ebx,0x4
c0026289:	8b 03                	mov    eax,DWORD PTR [ebx]
c002628b:	83 f8 ff             	cmp    eax,0xffffffff
c002628e:	75 f4                	jne    c0026284 <__do_global_ctors_aux+0x14>
c0026290:	58                   	pop    eax
c0026291:	5b                   	pop    ebx
c0026292:	5d                   	pop    ebp
c0026293:	c3                   	ret    
c0026294:	c3                   	ret    
c0026295:	66 90                	xchg   ax,ax
c0026297:	90                   	nop

c0026298 <__divdi3>:
c0026298:	55                   	push   ebp
c0026299:	57                   	push   edi
c002629a:	56                   	push   esi
c002629b:	53                   	push   ebx
c002629c:	83 ec 1c             	sub    esp,0x1c
c002629f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00262a3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00262a7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00262aa:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00262ae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00262b2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00262b6:	85 db                	test   ebx,ebx
c00262b8:	0f 88 8e 00 00 00    	js     c002634c <__divdi3+0xb4>
c00262be:	89 dd                	mov    ebp,ebx
c00262c0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00262c8:	89 d3                	mov    ebx,edx
c00262ca:	85 d2                	test   edx,edx
c00262cc:	79 0d                	jns    c00262db <__divdi3+0x43>
c00262ce:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00262d2:	f7 d8                	neg    eax
c00262d4:	83 d2 00             	adc    edx,0x0
c00262d7:	f7 da                	neg    edx
c00262d9:	89 d3                	mov    ebx,edx
c00262db:	89 c7                	mov    edi,eax
c00262dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00262e0:	85 db                	test   ebx,ebx
c00262e2:	75 48                	jne    c002632c <__divdi3+0x94>
c00262e4:	39 ef                	cmp    edi,ebp
c00262e6:	76 24                	jbe    c002630c <__divdi3+0x74>
c00262e8:	89 ea                	mov    edx,ebp
c00262ea:	f7 f7                	div    edi
c00262ec:	89 c1                	mov    ecx,eax
c00262ee:	31 f6                	xor    esi,esi
c00262f0:	89 c8                	mov    eax,ecx
c00262f2:	89 f2                	mov    edx,esi
c00262f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00262f8:	85 c9                	test   ecx,ecx
c00262fa:	74 07                	je     c0026303 <__divdi3+0x6b>
c00262fc:	f7 d8                	neg    eax
c00262fe:	83 d2 00             	adc    edx,0x0
c0026301:	f7 da                	neg    edx
c0026303:	83 c4 1c             	add    esp,0x1c
c0026306:	5b                   	pop    ebx
c0026307:	5e                   	pop    esi
c0026308:	5f                   	pop    edi
c0026309:	5d                   	pop    ebp
c002630a:	c3                   	ret    
c002630b:	90                   	nop
c002630c:	85 ff                	test   edi,edi
c002630e:	75 0b                	jne    c002631b <__divdi3+0x83>
c0026310:	b8 01 00 00 00       	mov    eax,0x1
c0026315:	31 d2                	xor    edx,edx
c0026317:	f7 f3                	div    ebx
c0026319:	89 c7                	mov    edi,eax
c002631b:	31 d2                	xor    edx,edx
c002631d:	89 e8                	mov    eax,ebp
c002631f:	f7 f7                	div    edi
c0026321:	89 c6                	mov    esi,eax
c0026323:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026326:	f7 f7                	div    edi
c0026328:	89 c1                	mov    ecx,eax
c002632a:	eb c4                	jmp    c00262f0 <__divdi3+0x58>
c002632c:	39 eb                	cmp    ebx,ebp
c002632e:	77 3c                	ja     c002636c <__divdi3+0xd4>
c0026330:	0f bd f3             	bsr    esi,ebx
c0026333:	83 f6 1f             	xor    esi,0x1f
c0026336:	75 40                	jne    c0026378 <__divdi3+0xe0>
c0026338:	39 eb                	cmp    ebx,ebp
c002633a:	72 09                	jb     c0026345 <__divdi3+0xad>
c002633c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002633f:	0f 87 97 00 00 00    	ja     c00263dc <__divdi3+0x144>
c0026345:	b9 01 00 00 00       	mov    ecx,0x1
c002634a:	eb a4                	jmp    c00262f0 <__divdi3+0x58>
c002634c:	f7 d9                	neg    ecx
c002634e:	83 d3 00             	adc    ebx,0x0
c0026351:	f7 db                	neg    ebx
c0026353:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026356:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002635a:	89 dd                	mov    ebp,ebx
c002635c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026364:	e9 5f ff ff ff       	jmp    c00262c8 <__divdi3+0x30>
c0026369:	8d 76 00             	lea    esi,[esi+0x0]
c002636c:	31 f6                	xor    esi,esi
c002636e:	31 c9                	xor    ecx,ecx
c0026370:	e9 7b ff ff ff       	jmp    c00262f0 <__divdi3+0x58>
c0026375:	8d 76 00             	lea    esi,[esi+0x0]
c0026378:	b8 20 00 00 00       	mov    eax,0x20
c002637d:	29 f0                	sub    eax,esi
c002637f:	89 f1                	mov    ecx,esi
c0026381:	d3 e3                	shl    ebx,cl
c0026383:	89 fa                	mov    edx,edi
c0026385:	88 c1                	mov    cl,al
c0026387:	d3 ea                	shr    edx,cl
c0026389:	09 da                	or     edx,ebx
c002638b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002638f:	89 f1                	mov    ecx,esi
c0026391:	d3 e7                	shl    edi,cl
c0026393:	89 eb                	mov    ebx,ebp
c0026395:	88 c1                	mov    cl,al
c0026397:	d3 eb                	shr    ebx,cl
c0026399:	89 f1                	mov    ecx,esi
c002639b:	d3 e5                	shl    ebp,cl
c002639d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00263a0:	88 c1                	mov    cl,al
c00263a2:	d3 ea                	shr    edx,cl
c00263a4:	09 d5                	or     ebp,edx
c00263a6:	89 e8                	mov    eax,ebp
c00263a8:	89 da                	mov    edx,ebx
c00263aa:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00263ae:	89 d3                	mov    ebx,edx
c00263b0:	89 c5                	mov    ebp,eax
c00263b2:	f7 e7                	mul    edi
c00263b4:	39 d3                	cmp    ebx,edx
c00263b6:	72 18                	jb     c00263d0 <__divdi3+0x138>
c00263b8:	74 0a                	je     c00263c4 <__divdi3+0x12c>
c00263ba:	89 e9                	mov    ecx,ebp
c00263bc:	31 f6                	xor    esi,esi
c00263be:	e9 2d ff ff ff       	jmp    c00262f0 <__divdi3+0x58>
c00263c3:	90                   	nop
c00263c4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00263c7:	89 f1                	mov    ecx,esi
c00263c9:	d3 e7                	shl    edi,cl
c00263cb:	39 c7                	cmp    edi,eax
c00263cd:	73 eb                	jae    c00263ba <__divdi3+0x122>
c00263cf:	90                   	nop
c00263d0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00263d3:	31 f6                	xor    esi,esi
c00263d5:	e9 16 ff ff ff       	jmp    c00262f0 <__divdi3+0x58>
c00263da:	66 90                	xchg   ax,ax
c00263dc:	31 c9                	xor    ecx,ecx
c00263de:	e9 0d ff ff ff       	jmp    c00262f0 <__divdi3+0x58>
c00263e3:	90                   	nop

c00263e4 <__moddi3>:
c00263e4:	55                   	push   ebp
c00263e5:	57                   	push   edi
c00263e6:	56                   	push   esi
c00263e7:	53                   	push   ebx
c00263e8:	83 ec 2c             	sub    esp,0x2c
c00263eb:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00263ef:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00263f3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00263f7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00263fb:	85 db                	test   ebx,ebx
c00263fd:	0f 88 85 00 00 00    	js     c0026488 <__moddi3+0xa4>
c0026403:	89 de                	mov    esi,ebx
c0026405:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002640d:	89 d7                	mov    edi,edx
c002640f:	85 d2                	test   edx,edx
c0026411:	79 09                	jns    c002641c <__moddi3+0x38>
c0026413:	f7 d8                	neg    eax
c0026415:	83 d2 00             	adc    edx,0x0
c0026418:	f7 da                	neg    edx
c002641a:	89 d7                	mov    edi,edx
c002641c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026420:	89 cd                	mov    ebp,ecx
c0026422:	85 ff                	test   edi,edi
c0026424:	75 52                	jne    c0026478 <__moddi3+0x94>
c0026426:	89 c3                	mov    ebx,eax
c0026428:	39 f0                	cmp    eax,esi
c002642a:	76 24                	jbe    c0026450 <__moddi3+0x6c>
c002642c:	89 c8                	mov    eax,ecx
c002642e:	89 f2                	mov    edx,esi
c0026430:	f7 f3                	div    ebx
c0026432:	89 d6                	mov    esi,edx
c0026434:	89 f0                	mov    eax,esi
c0026436:	31 d2                	xor    edx,edx
c0026438:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002643c:	85 c9                	test   ecx,ecx
c002643e:	74 07                	je     c0026447 <__moddi3+0x63>
c0026440:	f7 d8                	neg    eax
c0026442:	83 d2 00             	adc    edx,0x0
c0026445:	f7 da                	neg    edx
c0026447:	83 c4 2c             	add    esp,0x2c
c002644a:	5b                   	pop    ebx
c002644b:	5e                   	pop    esi
c002644c:	5f                   	pop    edi
c002644d:	5d                   	pop    ebp
c002644e:	c3                   	ret    
c002644f:	90                   	nop
c0026450:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0026454:	85 db                	test   ebx,ebx
c0026456:	75 0d                	jne    c0026465 <__moddi3+0x81>
c0026458:	b8 01 00 00 00       	mov    eax,0x1
c002645d:	31 d2                	xor    edx,edx
c002645f:	f7 f7                	div    edi
c0026461:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026465:	89 f0                	mov    eax,esi
c0026467:	31 d2                	xor    edx,edx
c0026469:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002646d:	f7 f7                	div    edi
c002646f:	89 e8                	mov    eax,ebp
c0026471:	f7 f7                	div    edi
c0026473:	89 d6                	mov    esi,edx
c0026475:	eb bd                	jmp    c0026434 <__moddi3+0x50>
c0026477:	90                   	nop
c0026478:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002647c:	39 f7                	cmp    edi,esi
c002647e:	76 20                	jbe    c00264a0 <__moddi3+0xbc>
c0026480:	89 c8                	mov    eax,ecx
c0026482:	89 f2                	mov    edx,esi
c0026484:	eb b2                	jmp    c0026438 <__moddi3+0x54>
c0026486:	66 90                	xchg   ax,ax
c0026488:	f7 d9                	neg    ecx
c002648a:	83 d3 00             	adc    ebx,0x0
c002648d:	f7 db                	neg    ebx
c002648f:	89 de                	mov    esi,ebx
c0026491:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026499:	e9 6f ff ff ff       	jmp    c002640d <__moddi3+0x29>
c002649e:	66 90                	xchg   ax,ax
c00264a0:	0f bd c7             	bsr    eax,edi
c00264a3:	83 f0 1f             	xor    eax,0x1f
c00264a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00264aa:	75 24                	jne    c00264d0 <__moddi3+0xec>
c00264ac:	39 f7                	cmp    edi,esi
c00264ae:	72 06                	jb     c00264b6 <__moddi3+0xd2>
c00264b0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00264b4:	77 0c                	ja     c00264c2 <__moddi3+0xde>
c00264b6:	89 e9                	mov    ecx,ebp
c00264b8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00264bc:	19 fe                	sbb    esi,edi
c00264be:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00264c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00264c6:	89 f2                	mov    edx,esi
c00264c8:	e9 6b ff ff ff       	jmp    c0026438 <__moddi3+0x54>
c00264cd:	8d 76 00             	lea    esi,[esi+0x0]
c00264d0:	b8 20 00 00 00       	mov    eax,0x20
c00264d5:	89 c2                	mov    edx,eax
c00264d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00264db:	29 da                	sub    edx,ebx
c00264dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00264e1:	88 d9                	mov    cl,bl
c00264e3:	d3 e7                	shl    edi,cl
c00264e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00264e9:	88 d1                	mov    cl,dl
c00264eb:	d3 e8                	shr    eax,cl
c00264ed:	09 c7                	or     edi,eax
c00264ef:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00264f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00264f7:	89 d8                	mov    eax,ebx
c00264f9:	88 d9                	mov    cl,bl
c00264fb:	d3 e7                	shl    edi,cl
c00264fd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026501:	89 f3                	mov    ebx,esi
c0026503:	88 d1                	mov    cl,dl
c0026505:	d3 eb                	shr    ebx,cl
c0026507:	89 c7                	mov    edi,eax
c0026509:	88 c1                	mov    cl,al
c002650b:	d3 e6                	shl    esi,cl
c002650d:	89 e8                	mov    eax,ebp
c002650f:	88 d1                	mov    cl,dl
c0026511:	d3 e8                	shr    eax,cl
c0026513:	09 f0                	or     eax,esi
c0026515:	89 f9                	mov    ecx,edi
c0026517:	d3 e5                	shl    ebp,cl
c0026519:	89 da                	mov    edx,ebx
c002651b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002651f:	89 d3                	mov    ebx,edx
c0026521:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026525:	89 c6                	mov    esi,eax
c0026527:	89 d1                	mov    ecx,edx
c0026529:	39 d3                	cmp    ebx,edx
c002652b:	72 27                	jb     c0026554 <__moddi3+0x170>
c002652d:	74 21                	je     c0026550 <__moddi3+0x16c>
c002652f:	29 f5                	sub    ebp,esi
c0026531:	19 cb                	sbb    ebx,ecx
c0026533:	89 de                	mov    esi,ebx
c0026535:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026539:	d3 e6                	shl    esi,cl
c002653b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002653f:	89 f9                	mov    ecx,edi
c0026541:	d3 ed                	shr    ebp,cl
c0026543:	09 ee                	or     esi,ebp
c0026545:	89 f0                	mov    eax,esi
c0026547:	d3 eb                	shr    ebx,cl
c0026549:	89 da                	mov    edx,ebx
c002654b:	e9 e8 fe ff ff       	jmp    c0026438 <__moddi3+0x54>
c0026550:	39 c5                	cmp    ebp,eax
c0026552:	73 db                	jae    c002652f <__moddi3+0x14b>
c0026554:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026558:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002655c:	89 d1                	mov    ecx,edx
c002655e:	89 c6                	mov    esi,eax
c0026560:	eb cd                	jmp    c002652f <__moddi3+0x14b>
c0026562:	66 90                	xchg   ax,ax

c0026564 <__udivdi3>:
c0026564:	55                   	push   ebp
c0026565:	57                   	push   edi
c0026566:	56                   	push   esi
c0026567:	53                   	push   ebx
c0026568:	83 ec 1c             	sub    esp,0x1c
c002656b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002656f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026573:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026577:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002657b:	85 d2                	test   edx,edx
c002657d:	75 41                	jne    c00265c0 <__udivdi3+0x5c>
c002657f:	39 f7                	cmp    edi,esi
c0026581:	76 15                	jbe    c0026598 <__udivdi3+0x34>
c0026583:	89 e8                	mov    eax,ebp
c0026585:	89 f2                	mov    edx,esi
c0026587:	f7 f7                	div    edi
c0026589:	31 db                	xor    ebx,ebx
c002658b:	89 da                	mov    edx,ebx
c002658d:	83 c4 1c             	add    esp,0x1c
c0026590:	5b                   	pop    ebx
c0026591:	5e                   	pop    esi
c0026592:	5f                   	pop    edi
c0026593:	5d                   	pop    ebp
c0026594:	c3                   	ret    
c0026595:	8d 76 00             	lea    esi,[esi+0x0]
c0026598:	89 f9                	mov    ecx,edi
c002659a:	85 ff                	test   edi,edi
c002659c:	75 0b                	jne    c00265a9 <__udivdi3+0x45>
c002659e:	b8 01 00 00 00       	mov    eax,0x1
c00265a3:	31 d2                	xor    edx,edx
c00265a5:	f7 f7                	div    edi
c00265a7:	89 c1                	mov    ecx,eax
c00265a9:	31 d2                	xor    edx,edx
c00265ab:	89 f0                	mov    eax,esi
c00265ad:	f7 f1                	div    ecx
c00265af:	89 c3                	mov    ebx,eax
c00265b1:	89 e8                	mov    eax,ebp
c00265b3:	f7 f1                	div    ecx
c00265b5:	89 da                	mov    edx,ebx
c00265b7:	83 c4 1c             	add    esp,0x1c
c00265ba:	5b                   	pop    ebx
c00265bb:	5e                   	pop    esi
c00265bc:	5f                   	pop    edi
c00265bd:	5d                   	pop    ebp
c00265be:	c3                   	ret    
c00265bf:	90                   	nop
c00265c0:	39 f2                	cmp    edx,esi
c00265c2:	77 1c                	ja     c00265e0 <__udivdi3+0x7c>
c00265c4:	0f bd da             	bsr    ebx,edx
c00265c7:	83 f3 1f             	xor    ebx,0x1f
c00265ca:	75 24                	jne    c00265f0 <__udivdi3+0x8c>
c00265cc:	39 f2                	cmp    edx,esi
c00265ce:	72 08                	jb     c00265d8 <__udivdi3+0x74>
c00265d0:	39 ef                	cmp    edi,ebp
c00265d2:	0f 87 84 00 00 00    	ja     c002665c <__udivdi3+0xf8>
c00265d8:	b8 01 00 00 00       	mov    eax,0x1
c00265dd:	eb ac                	jmp    c002658b <__udivdi3+0x27>
c00265df:	90                   	nop
c00265e0:	31 db                	xor    ebx,ebx
c00265e2:	31 c0                	xor    eax,eax
c00265e4:	89 da                	mov    edx,ebx
c00265e6:	83 c4 1c             	add    esp,0x1c
c00265e9:	5b                   	pop    ebx
c00265ea:	5e                   	pop    esi
c00265eb:	5f                   	pop    edi
c00265ec:	5d                   	pop    ebp
c00265ed:	c3                   	ret    
c00265ee:	66 90                	xchg   ax,ax
c00265f0:	b8 20 00 00 00       	mov    eax,0x20
c00265f5:	29 d8                	sub    eax,ebx
c00265f7:	88 d9                	mov    cl,bl
c00265f9:	d3 e2                	shl    edx,cl
c00265fb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00265ff:	89 fa                	mov    edx,edi
c0026601:	88 c1                	mov    cl,al
c0026603:	d3 ea                	shr    edx,cl
c0026605:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026609:	09 d1                	or     ecx,edx
c002660b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002660f:	88 d9                	mov    cl,bl
c0026611:	d3 e7                	shl    edi,cl
c0026613:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026617:	89 f7                	mov    edi,esi
c0026619:	88 c1                	mov    cl,al
c002661b:	d3 ef                	shr    edi,cl
c002661d:	88 d9                	mov    cl,bl
c002661f:	d3 e6                	shl    esi,cl
c0026621:	89 ea                	mov    edx,ebp
c0026623:	88 c1                	mov    cl,al
c0026625:	d3 ea                	shr    edx,cl
c0026627:	09 d6                	or     esi,edx
c0026629:	89 f0                	mov    eax,esi
c002662b:	89 fa                	mov    edx,edi
c002662d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026631:	89 d7                	mov    edi,edx
c0026633:	89 c6                	mov    esi,eax
c0026635:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026639:	39 d7                	cmp    edi,edx
c002663b:	72 13                	jb     c0026650 <__udivdi3+0xec>
c002663d:	74 09                	je     c0026648 <__udivdi3+0xe4>
c002663f:	89 f0                	mov    eax,esi
c0026641:	31 db                	xor    ebx,ebx
c0026643:	e9 43 ff ff ff       	jmp    c002658b <__udivdi3+0x27>
c0026648:	88 d9                	mov    cl,bl
c002664a:	d3 e5                	shl    ebp,cl
c002664c:	39 c5                	cmp    ebp,eax
c002664e:	73 ef                	jae    c002663f <__udivdi3+0xdb>
c0026650:	8d 46 ff             	lea    eax,[esi-0x1]
c0026653:	31 db                	xor    ebx,ebx
c0026655:	e9 31 ff ff ff       	jmp    c002658b <__udivdi3+0x27>
c002665a:	66 90                	xchg   ax,ax
c002665c:	31 c0                	xor    eax,eax
c002665e:	e9 28 ff ff ff       	jmp    c002658b <__udivdi3+0x27>
c0026663:	90                   	nop

c0026664 <__umoddi3>:
c0026664:	55                   	push   ebp
c0026665:	57                   	push   edi
c0026666:	56                   	push   esi
c0026667:	53                   	push   ebx
c0026668:	83 ec 1c             	sub    esp,0x1c
c002666b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002666f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026673:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026677:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002667b:	89 da                	mov    edx,ebx
c002667d:	85 c0                	test   eax,eax
c002667f:	75 37                	jne    c00266b8 <__umoddi3+0x54>
c0026681:	39 df                	cmp    edi,ebx
c0026683:	76 13                	jbe    c0026698 <__umoddi3+0x34>
c0026685:	89 f0                	mov    eax,esi
c0026687:	f7 f7                	div    edi
c0026689:	89 d0                	mov    eax,edx
c002668b:	31 d2                	xor    edx,edx
c002668d:	83 c4 1c             	add    esp,0x1c
c0026690:	5b                   	pop    ebx
c0026691:	5e                   	pop    esi
c0026692:	5f                   	pop    edi
c0026693:	5d                   	pop    ebp
c0026694:	c3                   	ret    
c0026695:	8d 76 00             	lea    esi,[esi+0x0]
c0026698:	89 fd                	mov    ebp,edi
c002669a:	85 ff                	test   edi,edi
c002669c:	75 0b                	jne    c00266a9 <__umoddi3+0x45>
c002669e:	b8 01 00 00 00       	mov    eax,0x1
c00266a3:	31 d2                	xor    edx,edx
c00266a5:	f7 f7                	div    edi
c00266a7:	89 c5                	mov    ebp,eax
c00266a9:	89 d8                	mov    eax,ebx
c00266ab:	31 d2                	xor    edx,edx
c00266ad:	f7 f5                	div    ebp
c00266af:	89 f0                	mov    eax,esi
c00266b1:	f7 f5                	div    ebp
c00266b3:	89 d0                	mov    eax,edx
c00266b5:	eb d4                	jmp    c002668b <__umoddi3+0x27>
c00266b7:	90                   	nop
c00266b8:	89 f1                	mov    ecx,esi
c00266ba:	39 d8                	cmp    eax,ebx
c00266bc:	76 0a                	jbe    c00266c8 <__umoddi3+0x64>
c00266be:	89 f0                	mov    eax,esi
c00266c0:	83 c4 1c             	add    esp,0x1c
c00266c3:	5b                   	pop    ebx
c00266c4:	5e                   	pop    esi
c00266c5:	5f                   	pop    edi
c00266c6:	5d                   	pop    ebp
c00266c7:	c3                   	ret    
c00266c8:	0f bd e8             	bsr    ebp,eax
c00266cb:	83 f5 1f             	xor    ebp,0x1f
c00266ce:	75 1c                	jne    c00266ec <__umoddi3+0x88>
c00266d0:	39 d8                	cmp    eax,ebx
c00266d2:	72 04                	jb     c00266d8 <__umoddi3+0x74>
c00266d4:	39 f7                	cmp    edi,esi
c00266d6:	77 08                	ja     c00266e0 <__umoddi3+0x7c>
c00266d8:	89 da                	mov    edx,ebx
c00266da:	29 fe                	sub    esi,edi
c00266dc:	19 c2                	sbb    edx,eax
c00266de:	89 f1                	mov    ecx,esi
c00266e0:	89 c8                	mov    eax,ecx
c00266e2:	83 c4 1c             	add    esp,0x1c
c00266e5:	5b                   	pop    ebx
c00266e6:	5e                   	pop    esi
c00266e7:	5f                   	pop    edi
c00266e8:	5d                   	pop    ebp
c00266e9:	c3                   	ret    
c00266ea:	66 90                	xchg   ax,ax
c00266ec:	ba 20 00 00 00       	mov    edx,0x20
c00266f1:	29 ea                	sub    edx,ebp
c00266f3:	89 e9                	mov    ecx,ebp
c00266f5:	d3 e0                	shl    eax,cl
c00266f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00266fb:	89 f8                	mov    eax,edi
c00266fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026701:	88 d1                	mov    cl,dl
c0026703:	d3 e8                	shr    eax,cl
c0026705:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026709:	09 c1                	or     ecx,eax
c002670b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002670f:	89 e9                	mov    ecx,ebp
c0026711:	d3 e7                	shl    edi,cl
c0026713:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026717:	89 d8                	mov    eax,ebx
c0026719:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002671d:	88 d1                	mov    cl,dl
c002671f:	d3 e8                	shr    eax,cl
c0026721:	89 c7                	mov    edi,eax
c0026723:	89 e9                	mov    ecx,ebp
c0026725:	d3 e3                	shl    ebx,cl
c0026727:	89 f0                	mov    eax,esi
c0026729:	88 d1                	mov    cl,dl
c002672b:	d3 e8                	shr    eax,cl
c002672d:	09 d8                	or     eax,ebx
c002672f:	89 e9                	mov    ecx,ebp
c0026731:	d3 e6                	shl    esi,cl
c0026733:	89 f3                	mov    ebx,esi
c0026735:	89 fa                	mov    edx,edi
c0026737:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002673b:	89 d1                	mov    ecx,edx
c002673d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026741:	89 c6                	mov    esi,eax
c0026743:	89 d7                	mov    edi,edx
c0026745:	39 d1                	cmp    ecx,edx
c0026747:	72 27                	jb     c0026770 <__umoddi3+0x10c>
c0026749:	74 21                	je     c002676c <__umoddi3+0x108>
c002674b:	89 ca                	mov    edx,ecx
c002674d:	29 f3                	sub    ebx,esi
c002674f:	19 fa                	sbb    edx,edi
c0026751:	89 d0                	mov    eax,edx
c0026753:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026757:	d3 e0                	shl    eax,cl
c0026759:	89 e9                	mov    ecx,ebp
c002675b:	d3 eb                	shr    ebx,cl
c002675d:	09 d8                	or     eax,ebx
c002675f:	d3 ea                	shr    edx,cl
c0026761:	83 c4 1c             	add    esp,0x1c
c0026764:	5b                   	pop    ebx
c0026765:	5e                   	pop    esi
c0026766:	5f                   	pop    edi
c0026767:	5d                   	pop    ebp
c0026768:	c3                   	ret    
c0026769:	8d 76 00             	lea    esi,[esi+0x0]
c002676c:	39 c3                	cmp    ebx,eax
c002676e:	73 db                	jae    c002674b <__umoddi3+0xe7>
c0026770:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026774:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026778:	89 d7                	mov    edi,edx
c002677a:	89 c6                	mov    esi,eax
c002677c:	eb cd                	jmp    c002674b <__umoddi3+0xe7>

c002677e <__addsf3>:
c002677e:	55                   	push   ebp
c002677f:	89 e5                	mov    ebp,esp
c0026781:	57                   	push   edi
c0026782:	56                   	push   esi
c0026783:	53                   	push   ebx
c0026784:	83 ec 08             	sub    esp,0x8
c0026787:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002678a:	89 fa                	mov    edx,edi
c002678c:	89 f8                	mov    eax,edi
c002678e:	c1 f8 17             	sar    eax,0x17
c0026791:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026794:	c1 e2 08             	shl    edx,0x8
c0026797:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002679d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00267a0:	89 de                	mov    esi,ebx
c00267a2:	c1 fe 17             	sar    esi,0x17
c00267a5:	c1 e3 08             	shl    ebx,0x8
c00267a8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00267ae:	31 f0                	xor    eax,esi
c00267b0:	0f 88 3b 01 00 00    	js     c00268f1 <__addsf3+0x173>
c00267b6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00267b9:	29 f1                	sub    ecx,esi
c00267bb:	85 c9                	test   ecx,ecx
c00267bd:	7e 54                	jle    c0026813 <__addsf3+0x95>
c00267bf:	89 f0                	mov    eax,esi
c00267c1:	84 c0                	test   al,al
c00267c3:	75 10                	jne    c00267d5 <__addsf3+0x57>
c00267c5:	85 db                	test   ebx,ebx
c00267c7:	0f 84 aa 02 00 00    	je     c0026a77 <__addsf3+0x2f9>
c00267cd:	49                   	dec    ecx
c00267ce:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00267d1:	74 38                	je     c002680b <__addsf3+0x8d>
c00267d3:	eb 13                	jmp    c00267e8 <__addsf3+0x6a>
c00267d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00267d8:	f7 d0                	not    eax
c00267da:	84 c0                	test   al,al
c00267dc:	0f 84 95 02 00 00    	je     c0026a77 <__addsf3+0x2f9>
c00267e2:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00267e8:	83 f9 1f             	cmp    ecx,0x1f
c00267eb:	0f 8f 86 02 00 00    	jg     c0026a77 <__addsf3+0x2f9>
c00267f1:	89 de                	mov    esi,ebx
c00267f3:	d3 ee                	shr    esi,cl
c00267f5:	b8 20 00 00 00       	mov    eax,0x20
c00267fa:	29 c8                	sub    eax,ecx
c00267fc:	89 c1                	mov    ecx,eax
c00267fe:	d3 e3                	shl    ebx,cl
c0026800:	31 c0                	xor    eax,eax
c0026802:	85 db                	test   ebx,ebx
c0026804:	0f 95 c0             	setne  al
c0026807:	09 f0                	or     eax,esi
c0026809:	01 d0                	add    eax,edx
c002680b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002680e:	e9 b6 00 00 00       	jmp    c00268c9 <__addsf3+0x14b>
c0026813:	74 5c                	je     c0026871 <__addsf3+0xf3>
c0026815:	89 f1                	mov    ecx,esi
c0026817:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002681a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002681d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026821:	75 14                	jne    c0026837 <__addsf3+0xb9>
c0026823:	85 d2                	test   edx,edx
c0026825:	0f 84 4c 02 00 00    	je     c0026a77 <__addsf3+0x2f9>
c002682b:	49                   	dec    ecx
c002682c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002682f:	0f 84 94 00 00 00    	je     c00268c9 <__addsf3+0x14b>
c0026835:	eb 12                	jmp    c0026849 <__addsf3+0xcb>
c0026837:	89 f0                	mov    eax,esi
c0026839:	f7 d0                	not    eax
c002683b:	84 c0                	test   al,al
c002683d:	0f 84 34 02 00 00    	je     c0026a77 <__addsf3+0x2f9>
c0026843:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026849:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002684c:	83 f9 1f             	cmp    ecx,0x1f
c002684f:	0f 8f 22 02 00 00    	jg     c0026a77 <__addsf3+0x2f9>
c0026855:	89 d7                	mov    edi,edx
c0026857:	d3 ef                	shr    edi,cl
c0026859:	b8 20 00 00 00       	mov    eax,0x20
c002685e:	29 c8                	sub    eax,ecx
c0026860:	89 c1                	mov    ecx,eax
c0026862:	d3 e2                	shl    edx,cl
c0026864:	31 c0                	xor    eax,eax
c0026866:	85 d2                	test   edx,edx
c0026868:	0f 95 c0             	setne  al
c002686b:	09 f8                	or     eax,edi
c002686d:	01 d8                	add    eax,ebx
c002686f:	eb 58                	jmp    c00268c9 <__addsf3+0x14b>
c0026871:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026874:	8d 70 01             	lea    esi,[eax+0x1]
c0026877:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002687d:	75 32                	jne    c00268b1 <__addsf3+0x133>
c002687f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026883:	75 1f                	jne    c00268a4 <__addsf3+0x126>
c0026885:	85 d2                	test   edx,edx
c0026887:	0f 84 e0 01 00 00    	je     c0026a6d <__addsf3+0x2ef>
c002688d:	85 db                	test   ebx,ebx
c002688f:	0f 84 e2 01 00 00    	je     c0026a77 <__addsf3+0x2f9>
c0026895:	89 d0                	mov    eax,edx
c0026897:	01 d8                	add    eax,ebx
c0026899:	0f 89 a9 01 00 00    	jns    c0026a48 <__addsf3+0x2ca>
c002689f:	e9 9d 01 00 00       	jmp    c0026a41 <__addsf3+0x2c3>
c00268a4:	85 d2                	test   edx,edx
c00268a6:	0f 85 cb 01 00 00    	jne    c0026a77 <__addsf3+0x2f9>
c00268ac:	e9 bc 01 00 00       	jmp    c0026a6d <__addsf3+0x2ef>
c00268b1:	31 c0                	xor    eax,eax
c00268b3:	89 f1                	mov    ecx,esi
c00268b5:	f7 d1                	not    ecx
c00268b7:	84 c9                	test   cl,cl
c00268b9:	0f 84 90 01 00 00    	je     c0026a4f <__addsf3+0x2d1>
c00268bf:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00268c2:	d1 e8                	shr    eax,1
c00268c4:	e9 86 01 00 00       	jmp    c0026a4f <__addsf3+0x2d1>
c00268c9:	85 c0                	test   eax,eax
c00268cb:	0f 89 7e 01 00 00    	jns    c0026a4f <__addsf3+0x2d1>
c00268d1:	46                   	inc    esi
c00268d2:	89 f2                	mov    edx,esi
c00268d4:	f7 d2                	not    edx
c00268d6:	84 d2                	test   dl,dl
c00268d8:	0f 84 6f 01 00 00    	je     c0026a4d <__addsf3+0x2cf>
c00268de:	89 c2                	mov    edx,eax
c00268e0:	83 e2 01             	and    edx,0x1
c00268e3:	d1 e8                	shr    eax,1
c00268e5:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00268ea:	09 d0                	or     eax,edx
c00268ec:	e9 5e 01 00 00       	jmp    c0026a4f <__addsf3+0x2d1>
c00268f1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00268f5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00268f8:	89 f0                	mov    eax,esi
c00268fa:	0f b6 c0             	movzx  eax,al
c00268fd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026900:	29 c1                	sub    ecx,eax
c0026902:	85 c9                	test   ecx,ecx
c0026904:	7e 55                	jle    c002695b <__addsf3+0x1dd>
c0026906:	85 c0                	test   eax,eax
c0026908:	75 11                	jne    c002691b <__addsf3+0x19d>
c002690a:	85 db                	test   ebx,ebx
c002690c:	0f 84 65 01 00 00    	je     c0026a77 <__addsf3+0x2f9>
c0026912:	49                   	dec    ecx
c0026913:	75 19                	jne    c002692e <__addsf3+0x1b0>
c0026915:	89 d0                	mov    eax,edx
c0026917:	29 d8                	sub    eax,ebx
c0026919:	eb 38                	jmp    c0026953 <__addsf3+0x1d5>
c002691b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002691e:	f7 d0                	not    eax
c0026920:	84 c0                	test   al,al
c0026922:	0f 84 4f 01 00 00    	je     c0026a77 <__addsf3+0x2f9>
c0026928:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002692e:	83 f9 1f             	cmp    ecx,0x1f
c0026931:	0f 8f 40 01 00 00    	jg     c0026a77 <__addsf3+0x2f9>
c0026937:	89 de                	mov    esi,ebx
c0026939:	d3 ee                	shr    esi,cl
c002693b:	b8 20 00 00 00       	mov    eax,0x20
c0026940:	29 c8                	sub    eax,ecx
c0026942:	89 c1                	mov    ecx,eax
c0026944:	d3 e3                	shl    ebx,cl
c0026946:	31 c0                	xor    eax,eax
c0026948:	85 db                	test   ebx,ebx
c002694a:	0f 95 c0             	setne  al
c002694d:	09 f0                	or     eax,esi
c002694f:	29 c2                	sub    edx,eax
c0026951:	89 d0                	mov    eax,edx
c0026953:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026956:	e9 af 00 00 00       	jmp    c0026a0a <__addsf3+0x28c>
c002695b:	74 5c                	je     c00269b9 <__addsf3+0x23b>
c002695d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026960:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026963:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026967:	75 14                	jne    c002697d <__addsf3+0x1ff>
c0026969:	85 d2                	test   edx,edx
c002696b:	0f 84 06 01 00 00    	je     c0026a77 <__addsf3+0x2f9>
c0026971:	48                   	dec    eax
c0026972:	75 1b                	jne    c002698f <__addsf3+0x211>
c0026974:	89 d8                	mov    eax,ebx
c0026976:	29 d0                	sub    eax,edx
c0026978:	e9 8d 00 00 00       	jmp    c0026a0a <__addsf3+0x28c>
c002697d:	89 f1                	mov    ecx,esi
c002697f:	f7 d1                	not    ecx
c0026981:	84 c9                	test   cl,cl
c0026983:	0f 84 ee 00 00 00    	je     c0026a77 <__addsf3+0x2f9>
c0026989:	81 ca 00 00 00 80    	or     edx,0x80000000
c002698f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026992:	83 f8 1f             	cmp    eax,0x1f
c0026995:	0f 8f dc 00 00 00    	jg     c0026a77 <__addsf3+0x2f9>
c002699b:	89 d7                	mov    edi,edx
c002699d:	88 c1                	mov    cl,al
c002699f:	d3 ef                	shr    edi,cl
c00269a1:	b9 20 00 00 00       	mov    ecx,0x20
c00269a6:	29 c1                	sub    ecx,eax
c00269a8:	d3 e2                	shl    edx,cl
c00269aa:	31 c0                	xor    eax,eax
c00269ac:	85 d2                	test   edx,edx
c00269ae:	0f 95 c0             	setne  al
c00269b1:	09 f8                	or     eax,edi
c00269b3:	29 c3                	sub    ebx,eax
c00269b5:	89 d8                	mov    eax,ebx
c00269b7:	eb 51                	jmp    c0026a0a <__addsf3+0x28c>
c00269b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269bc:	40                   	inc    eax
c00269bd:	a8 fe                	test   al,0xfe
c00269bf:	75 3d                	jne    c00269fe <__addsf3+0x280>
c00269c1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00269c5:	0f 85 a7 00 00 00    	jne    c0026a72 <__addsf3+0x2f4>
c00269cb:	85 d2                	test   edx,edx
c00269cd:	75 12                	jne    c00269e1 <__addsf3+0x263>
c00269cf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269d2:	85 db                	test   ebx,ebx
c00269d4:	0f 85 9d 00 00 00    	jne    c0026a77 <__addsf3+0x2f9>
c00269da:	31 ff                	xor    edi,edi
c00269dc:	e9 96 00 00 00       	jmp    c0026a77 <__addsf3+0x2f9>
c00269e1:	85 db                	test   ebx,ebx
c00269e3:	0f 84 8e 00 00 00    	je     c0026a77 <__addsf3+0x2f9>
c00269e9:	89 d0                	mov    eax,edx
c00269eb:	29 d8                	sub    eax,ebx
c00269ed:	79 06                	jns    c00269f5 <__addsf3+0x277>
c00269ef:	89 d8                	mov    eax,ebx
c00269f1:	29 d0                	sub    eax,edx
c00269f3:	eb 5a                	jmp    c0026a4f <__addsf3+0x2d1>
c00269f5:	bf 00 00 00 00       	mov    edi,0x0
c00269fa:	74 7b                	je     c0026a77 <__addsf3+0x2f9>
c00269fc:	eb 4a                	jmp    c0026a48 <__addsf3+0x2ca>
c00269fe:	89 d0                	mov    eax,edx
c0026a00:	29 d8                	sub    eax,ebx
c0026a02:	79 12                	jns    c0026a16 <__addsf3+0x298>
c0026a04:	89 d8                	mov    eax,ebx
c0026a06:	29 d0                	sub    eax,edx
c0026a08:	eb 09                	jmp    c0026a13 <__addsf3+0x295>
c0026a0a:	85 c0                	test   eax,eax
c0026a0c:	79 41                	jns    c0026a4f <__addsf3+0x2d1>
c0026a0e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026a13:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026a16:	31 f6                	xor    esi,esi
c0026a18:	85 c0                	test   eax,eax
c0026a1a:	74 33                	je     c0026a4f <__addsf3+0x2d1>
c0026a1c:	0f bd c8             	bsr    ecx,eax
c0026a1f:	83 f1 1f             	xor    ecx,0x1f
c0026a22:	d3 e0                	shl    eax,cl
c0026a24:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026a28:	39 ca                	cmp    edx,ecx
c0026a2a:	7f 10                	jg     c0026a3c <__addsf3+0x2be>
c0026a2c:	29 d1                	sub    ecx,edx
c0026a2e:	41                   	inc    ecx
c0026a2f:	d3 e8                	shr    eax,cl
c0026a31:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a34:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026a3a:	eb 13                	jmp    c0026a4f <__addsf3+0x2d1>
c0026a3c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a3f:	29 ce                	sub    esi,ecx
c0026a41:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026a46:	eb 07                	jmp    c0026a4f <__addsf3+0x2d1>
c0026a48:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026a4b:	eb 02                	jmp    c0026a4f <__addsf3+0x2d1>
c0026a4d:	31 c0                	xor    eax,eax
c0026a4f:	89 c2                	mov    edx,eax
c0026a51:	c1 ea 08             	shr    edx,0x8
c0026a54:	a8 7f                	test   al,0x7f
c0026a56:	0f 95 c1             	setne  cl
c0026a59:	09 d1                	or     ecx,edx
c0026a5b:	83 e1 01             	and    ecx,0x1
c0026a5e:	c1 e8 07             	shr    eax,0x7
c0026a61:	21 c8                	and    eax,ecx
c0026a63:	c1 e6 17             	shl    esi,0x17
c0026a66:	09 d6                	or     esi,edx
c0026a68:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026a6b:	eb 0a                	jmp    c0026a77 <__addsf3+0x2f9>
c0026a6d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a70:	eb 05                	jmp    c0026a77 <__addsf3+0x2f9>
c0026a72:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026a77:	89 f8                	mov    eax,edi
c0026a79:	5a                   	pop    edx
c0026a7a:	59                   	pop    ecx
c0026a7b:	5b                   	pop    ebx
c0026a7c:	5e                   	pop    esi
c0026a7d:	5f                   	pop    edi
c0026a7e:	5d                   	pop    ebp
c0026a7f:	c3                   	ret    

c0026a80 <__subsf3>:
c0026a80:	55                   	push   ebp
c0026a81:	89 e5                	mov    ebp,esp
c0026a83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a86:	05 00 00 00 80       	add    eax,0x80000000
c0026a8b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026a8e:	5d                   	pop    ebp
c0026a8f:	e9 ea fc ff ff       	jmp    c002677e <__addsf3>

c0026a94 <__negsf2>:
c0026a94:	55                   	push   ebp
c0026a95:	89 e5                	mov    ebp,esp
c0026a97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026a9a:	05 00 00 00 80       	add    eax,0x80000000
c0026a9f:	5d                   	pop    ebp
c0026aa0:	c3                   	ret    

c0026aa1 <__mulsf3>:
c0026aa1:	55                   	push   ebp
c0026aa2:	89 e5                	mov    ebp,esp
c0026aa4:	57                   	push   edi
c0026aa5:	56                   	push   esi
c0026aa6:	53                   	push   ebx
c0026aa7:	83 ec 1c             	sub    esp,0x1c
c0026aaa:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026aad:	89 f0                	mov    eax,esi
c0026aaf:	89 f1                	mov    ecx,esi
c0026ab1:	c1 f9 17             	sar    ecx,0x17
c0026ab4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026ab7:	c1 e0 08             	shl    eax,0x8
c0026aba:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026abf:	89 c1                	mov    ecx,eax
c0026ac1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026ac4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026ac7:	89 c7                	mov    edi,eax
c0026ac9:	c1 ff 17             	sar    edi,0x17
c0026acc:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026ad0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026ad3:	89 f8                	mov    eax,edi
c0026ad5:	0f b6 c0             	movzx  eax,al
c0026ad8:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026adb:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026adf:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026ae2:	42                   	inc    edx
c0026ae3:	80 e2 fe             	and    dl,0xfe
c0026ae6:	75 7b                	jne    c0026b63 <__mulsf3+0xc2>
c0026ae8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026aec:	74 54                	je     c0026b42 <__mulsf3+0xa1>
c0026aee:	85 c9                	test   ecx,ecx
c0026af0:	0f 85 64 01 00 00    	jne    c0026c5a <__mulsf3+0x1b9>
c0026af6:	8d 57 01             	lea    edx,[edi+0x1]
c0026af9:	80 e2 fe             	and    dl,0xfe
c0026afc:	75 1f                	jne    c0026b1d <__mulsf3+0x7c>
c0026afe:	85 c0                	test   eax,eax
c0026b00:	b8 00 00 00 00       	mov    eax,0x0
c0026b05:	74 29                	je     c0026b30 <__mulsf3+0x8f>
c0026b07:	53                   	push   ebx
c0026b08:	53                   	push   ebx
c0026b09:	50                   	push   eax
c0026b0a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b0d:	e8 96 05 00 00       	call   c00270a8 <__nesf2>
c0026b12:	83 c4 10             	add    esp,0x10
c0026b15:	85 c0                	test   eax,eax
c0026b17:	0f 85 3a 01 00 00    	jne    c0026c57 <__mulsf3+0x1b6>
c0026b1d:	85 ff                	test   edi,edi
c0026b1f:	0f 89 35 01 00 00    	jns    c0026c5a <__mulsf3+0x1b9>
c0026b25:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026b2b:	e9 2a 01 00 00       	jmp    c0026c5a <__mulsf3+0x1b9>
c0026b30:	51                   	push   ecx
c0026b31:	51                   	push   ecx
c0026b32:	50                   	push   eax
c0026b33:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b36:	e8 6d 05 00 00       	call   c00270a8 <__nesf2>
c0026b3b:	83 c4 10             	add    esp,0x10
c0026b3e:	85 c0                	test   eax,eax
c0026b40:	eb 15                	jmp    c0026b57 <__mulsf3+0xb6>
c0026b42:	85 c9                	test   ecx,ecx
c0026b44:	74 0b                	je     c0026b51 <__mulsf3+0xb0>
c0026b46:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026b49:	01 c9                	add    ecx,ecx
c0026b4b:	78 16                	js     c0026b63 <__mulsf3+0xc2>
c0026b4d:	89 d3                	mov    ebx,edx
c0026b4f:	eb f5                	jmp    c0026b46 <__mulsf3+0xa5>
c0026b51:	89 f8                	mov    eax,edi
c0026b53:	f7 d0                	not    eax
c0026b55:	84 c0                	test   al,al
c0026b57:	75 c4                	jne    c0026b1d <__mulsf3+0x7c>
c0026b59:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026b5e:	e9 f7 00 00 00       	jmp    c0026c5a <__mulsf3+0x1b9>
c0026b63:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026b66:	c1 e6 08             	shl    esi,0x8
c0026b69:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026b6f:	8d 57 01             	lea    edx,[edi+0x1]
c0026b72:	80 e2 fe             	and    dl,0xfe
c0026b75:	75 63                	jne    c0026bda <__mulsf3+0x139>
c0026b77:	85 c0                	test   eax,eax
c0026b79:	74 2f                	je     c0026baa <__mulsf3+0x109>
c0026b7b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026b7f:	0f 89 d2 00 00 00    	jns    c0026c57 <__mulsf3+0x1b6>
c0026b85:	52                   	push   edx
c0026b86:	52                   	push   edx
c0026b87:	6a 00                	push   0x0
c0026b89:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b8c:	e8 dc 04 00 00       	call   c002706d <__eqsf2>
c0026b91:	83 c4 10             	add    esp,0x10
c0026b94:	85 c0                	test   eax,eax
c0026b96:	0f 85 bb 00 00 00    	jne    c0026c57 <__mulsf3+0x1b6>
c0026b9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b9f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026ba5:	e9 b0 00 00 00       	jmp    c0026c5a <__mulsf3+0x1b9>
c0026baa:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026bad:	50                   	push   eax
c0026bae:	50                   	push   eax
c0026baf:	6a 00                	push   0x0
c0026bb1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026bb4:	e8 b4 04 00 00       	call   c002706d <__eqsf2>
c0026bb9:	83 c4 10             	add    esp,0x10
c0026bbc:	85 c0                	test   eax,eax
c0026bbe:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026bc1:	75 0c                	jne    c0026bcf <__mulsf3+0x12e>
c0026bc3:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026bc7:	0f 89 8a 00 00 00    	jns    c0026c57 <__mulsf3+0x1b6>
c0026bcd:	eb cd                	jmp    c0026b9c <__mulsf3+0xfb>
c0026bcf:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026bd2:	01 f6                	add    esi,esi
c0026bd4:	78 04                	js     c0026bda <__mulsf3+0x139>
c0026bd6:	89 c3                	mov    ebx,eax
c0026bd8:	eb f5                	jmp    c0026bcf <__mulsf3+0x12e>
c0026bda:	89 c8                	mov    eax,ecx
c0026bdc:	0d 00 00 00 80       	or     eax,0x80000000
c0026be1:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026be7:	f7 e6                	mul    esi
c0026be9:	85 c0                	test   eax,eax
c0026beb:	0f 95 c0             	setne  al
c0026bee:	0f b6 c0             	movzx  eax,al
c0026bf1:	09 c2                	or     edx,eax
c0026bf3:	78 03                	js     c0026bf8 <__mulsf3+0x157>
c0026bf5:	01 d2                	add    edx,edx
c0026bf7:	4b                   	dec    ebx
c0026bf8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026bfe:	7f 22                	jg     c0026c22 <__mulsf3+0x181>
c0026c00:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026c06:	85 db                	test   ebx,ebx
c0026c08:	7f 23                	jg     c0026c2d <__mulsf3+0x18c>
c0026c0a:	83 fb e9             	cmp    ebx,0xffffffe9
c0026c0d:	7c 1a                	jl     c0026c29 <__mulsf3+0x188>
c0026c0f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026c15:	b9 01 00 00 00       	mov    ecx,0x1
c0026c1a:	29 d9                	sub    ecx,ebx
c0026c1c:	d3 ea                	shr    edx,cl
c0026c1e:	31 db                	xor    ebx,ebx
c0026c20:	eb 0b                	jmp    c0026c2d <__mulsf3+0x18c>
c0026c22:	bb ff 00 00 00       	mov    ebx,0xff
c0026c27:	eb 02                	jmp    c0026c2b <__mulsf3+0x18a>
c0026c29:	31 db                	xor    ebx,ebx
c0026c2b:	31 d2                	xor    edx,edx
c0026c2d:	89 d0                	mov    eax,edx
c0026c2f:	c1 e8 08             	shr    eax,0x8
c0026c32:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026c35:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026c3b:	09 fb                	or     ebx,edi
c0026c3d:	c1 e3 17             	shl    ebx,0x17
c0026c40:	09 c3                	or     ebx,eax
c0026c42:	f6 c2 7f             	test   dl,0x7f
c0026c45:	0f 95 c1             	setne  cl
c0026c48:	09 c8                	or     eax,ecx
c0026c4a:	83 e0 01             	and    eax,0x1
c0026c4d:	c1 ea 07             	shr    edx,0x7
c0026c50:	21 c2                	and    edx,eax
c0026c52:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026c55:	eb 03                	jmp    c0026c5a <__mulsf3+0x1b9>
c0026c57:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026c5a:	89 f0                	mov    eax,esi
c0026c5c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026c5f:	5b                   	pop    ebx
c0026c60:	5e                   	pop    esi
c0026c61:	5f                   	pop    edi
c0026c62:	5d                   	pop    ebp
c0026c63:	c3                   	ret    

c0026c64 <__divsf3>:
c0026c64:	55                   	push   ebp
c0026c65:	89 e5                	mov    ebp,esp
c0026c67:	57                   	push   edi
c0026c68:	56                   	push   esi
c0026c69:	53                   	push   ebx
c0026c6a:	83 ec 1c             	sub    esp,0x1c
c0026c6d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026c70:	89 d8                	mov    eax,ebx
c0026c72:	89 d9                	mov    ecx,ebx
c0026c74:	c1 f9 17             	sar    ecx,0x17
c0026c77:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026c7a:	c1 e0 08             	shl    eax,0x8
c0026c7d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c82:	89 c1                	mov    ecx,eax
c0026c84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c87:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026c8a:	89 c7                	mov    edi,eax
c0026c8c:	c1 ff 17             	sar    edi,0x17
c0026c8f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026c93:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026c96:	89 f8                	mov    eax,edi
c0026c98:	0f b6 c0             	movzx  eax,al
c0026c9b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026c9e:	29 c6                	sub    esi,eax
c0026ca0:	83 c6 7f             	add    esi,0x7f
c0026ca3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026ca6:	42                   	inc    edx
c0026ca7:	80 e2 fe             	and    dl,0xfe
c0026caa:	0f 85 9c 00 00 00    	jne    c0026d4c <__divsf3+0xe8>
c0026cb0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026cb4:	74 33                	je     c0026ce9 <__divsf3+0x85>
c0026cb6:	85 c9                	test   ecx,ecx
c0026cb8:	0f 85 c7 01 00 00    	jne    c0026e85 <__divsf3+0x221>
c0026cbe:	8d 57 01             	lea    edx,[edi+0x1]
c0026cc1:	80 e2 fe             	and    dl,0xfe
c0026cc4:	75 2f                	jne    c0026cf5 <__divsf3+0x91>
c0026cc6:	85 c0                	test   eax,eax
c0026cc8:	74 2b                	je     c0026cf5 <__divsf3+0x91>
c0026cca:	51                   	push   ecx
c0026ccb:	51                   	push   ecx
c0026ccc:	6a 00                	push   0x0
c0026cce:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cd1:	e8 d2 03 00 00       	call   c00270a8 <__nesf2>
c0026cd6:	83 c4 10             	add    esp,0x10
c0026cd9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026cdc:	85 c0                	test   eax,eax
c0026cde:	0f 85 a1 01 00 00    	jne    c0026e85 <__divsf3+0x221>
c0026ce4:	e9 92 01 00 00       	jmp    c0026e7b <__divsf3+0x217>
c0026ce9:	85 c9                	test   ecx,ecx
c0026ceb:	75 1b                	jne    c0026d08 <__divsf3+0xa4>
c0026ced:	8d 57 01             	lea    edx,[edi+0x1]
c0026cf0:	80 e2 fe             	and    dl,0xfe
c0026cf3:	74 1e                	je     c0026d13 <__divsf3+0xaf>
c0026cf5:	85 ff                	test   edi,edi
c0026cf7:	0f 89 88 01 00 00    	jns    c0026e85 <__divsf3+0x221>
c0026cfd:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026d03:	e9 7d 01 00 00       	jmp    c0026e85 <__divsf3+0x221>
c0026d08:	8d 56 ff             	lea    edx,[esi-0x1]
c0026d0b:	01 c9                	add    ecx,ecx
c0026d0d:	78 3d                	js     c0026d4c <__divsf3+0xe8>
c0026d0f:	89 d6                	mov    esi,edx
c0026d11:	eb f5                	jmp    c0026d08 <__divsf3+0xa4>
c0026d13:	85 c0                	test   eax,eax
c0026d15:	b8 00 00 00 00       	mov    eax,0x0
c0026d1a:	74 18                	je     c0026d34 <__divsf3+0xd0>
c0026d1c:	52                   	push   edx
c0026d1d:	52                   	push   edx
c0026d1e:	50                   	push   eax
c0026d1f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d22:	e8 81 03 00 00       	call   c00270a8 <__nesf2>
c0026d27:	83 c4 10             	add    esp,0x10
c0026d2a:	85 c0                	test   eax,eax
c0026d2c:	0f 85 50 01 00 00    	jne    c0026e82 <__divsf3+0x21e>
c0026d32:	eb c1                	jmp    c0026cf5 <__divsf3+0x91>
c0026d34:	56                   	push   esi
c0026d35:	56                   	push   esi
c0026d36:	50                   	push   eax
c0026d37:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d3a:	e8 69 03 00 00       	call   c00270a8 <__nesf2>
c0026d3f:	83 c4 10             	add    esp,0x10
c0026d42:	85 c0                	test   eax,eax
c0026d44:	0f 84 31 01 00 00    	je     c0026e7b <__divsf3+0x217>
c0026d4a:	eb a9                	jmp    c0026cf5 <__divsf3+0x91>
c0026d4c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026d4f:	c1 e3 08             	shl    ebx,0x8
c0026d52:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026d58:	8d 57 01             	lea    edx,[edi+0x1]
c0026d5b:	80 e2 fe             	and    dl,0xfe
c0026d5e:	75 71                	jne    c0026dd1 <__divsf3+0x16d>
c0026d60:	85 c0                	test   eax,eax
c0026d62:	ba 00 00 00 00       	mov    edx,0x0
c0026d67:	74 2f                	je     c0026d98 <__divsf3+0x134>
c0026d69:	51                   	push   ecx
c0026d6a:	51                   	push   ecx
c0026d6b:	52                   	push   edx
c0026d6c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d6f:	e8 f9 02 00 00       	call   c002706d <__eqsf2>
c0026d74:	83 c4 10             	add    esp,0x10
c0026d77:	85 c0                	test   eax,eax
c0026d79:	0f 85 03 01 00 00    	jne    c0026e82 <__divsf3+0x21e>
c0026d7f:	31 d2                	xor    edx,edx
c0026d81:	89 d3                	mov    ebx,edx
c0026d83:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026d86:	31 f8                	xor    eax,edi
c0026d88:	0f 89 f7 00 00 00    	jns    c0026e85 <__divsf3+0x221>
c0026d8e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026d93:	e9 ed 00 00 00       	jmp    c0026e85 <__divsf3+0x221>
c0026d98:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026d9b:	50                   	push   eax
c0026d9c:	50                   	push   eax
c0026d9d:	52                   	push   edx
c0026d9e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026da1:	e8 c7 02 00 00       	call   c002706d <__eqsf2>
c0026da6:	83 c4 10             	add    esp,0x10
c0026da9:	85 c0                	test   eax,eax
c0026dab:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026dae:	75 16                	jne    c0026dc6 <__divsf3+0x162>
c0026db0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026db3:	31 fb                	xor    ebx,edi
c0026db5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026dbb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026dc1:	e9 bf 00 00 00       	jmp    c0026e85 <__divsf3+0x221>
c0026dc6:	8d 46 01             	lea    eax,[esi+0x1]
c0026dc9:	01 db                	add    ebx,ebx
c0026dcb:	78 04                	js     c0026dd1 <__divsf3+0x16d>
c0026dcd:	89 c6                	mov    esi,eax
c0026dcf:	eb f5                	jmp    c0026dc6 <__divsf3+0x162>
c0026dd1:	89 c8                	mov    eax,ecx
c0026dd3:	0d 00 00 00 80       	or     eax,0x80000000
c0026dd8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026dde:	31 d2                	xor    edx,edx
c0026de0:	39 d8                	cmp    eax,ebx
c0026de2:	72 07                	jb     c0026deb <__divsf3+0x187>
c0026de4:	29 d8                	sub    eax,ebx
c0026de6:	ba 01 00 00 00       	mov    edx,0x1
c0026deb:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026df2:	01 d2                	add    edx,edx
c0026df4:	89 c1                	mov    ecx,eax
c0026df6:	01 c0                	add    eax,eax
c0026df8:	85 c9                	test   ecx,ecx
c0026dfa:	78 04                	js     c0026e00 <__divsf3+0x19c>
c0026dfc:	39 c3                	cmp    ebx,eax
c0026dfe:	77 05                	ja     c0026e05 <__divsf3+0x1a1>
c0026e00:	29 d8                	sub    eax,ebx
c0026e02:	83 ca 01             	or     edx,0x1
c0026e05:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026e08:	75 e8                	jne    c0026df2 <__divsf3+0x18e>
c0026e0a:	85 c0                	test   eax,eax
c0026e0c:	0f 95 c0             	setne  al
c0026e0f:	0f b6 c0             	movzx  eax,al
c0026e12:	c1 e2 06             	shl    edx,0x6
c0026e15:	09 c2                	or     edx,eax
c0026e17:	78 03                	js     c0026e1c <__divsf3+0x1b8>
c0026e19:	01 d2                	add    edx,edx
c0026e1b:	4e                   	dec    esi
c0026e1c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026e22:	7f 22                	jg     c0026e46 <__divsf3+0x1e2>
c0026e24:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026e2a:	85 f6                	test   esi,esi
c0026e2c:	7f 23                	jg     c0026e51 <__divsf3+0x1ed>
c0026e2e:	83 fe e9             	cmp    esi,0xffffffe9
c0026e31:	7c 1a                	jl     c0026e4d <__divsf3+0x1e9>
c0026e33:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e39:	b9 01 00 00 00       	mov    ecx,0x1
c0026e3e:	29 f1                	sub    ecx,esi
c0026e40:	d3 ea                	shr    edx,cl
c0026e42:	31 f6                	xor    esi,esi
c0026e44:	eb 0b                	jmp    c0026e51 <__divsf3+0x1ed>
c0026e46:	be ff 00 00 00       	mov    esi,0xff
c0026e4b:	eb 02                	jmp    c0026e4f <__divsf3+0x1eb>
c0026e4d:	31 f6                	xor    esi,esi
c0026e4f:	31 d2                	xor    edx,edx
c0026e51:	89 d0                	mov    eax,edx
c0026e53:	c1 e8 08             	shr    eax,0x8
c0026e56:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026e59:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026e5f:	09 fe                	or     esi,edi
c0026e61:	c1 e6 17             	shl    esi,0x17
c0026e64:	09 c6                	or     esi,eax
c0026e66:	f6 c2 7f             	test   dl,0x7f
c0026e69:	0f 95 c1             	setne  cl
c0026e6c:	09 c8                	or     eax,ecx
c0026e6e:	83 e0 01             	and    eax,0x1
c0026e71:	c1 ea 07             	shr    edx,0x7
c0026e74:	21 c2                	and    edx,eax
c0026e76:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026e79:	eb 0a                	jmp    c0026e85 <__divsf3+0x221>
c0026e7b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026e80:	eb 03                	jmp    c0026e85 <__divsf3+0x221>
c0026e82:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026e85:	89 d8                	mov    eax,ebx
c0026e87:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026e8a:	5b                   	pop    ebx
c0026e8b:	5e                   	pop    esi
c0026e8c:	5f                   	pop    edi
c0026e8d:	5d                   	pop    ebp
c0026e8e:	c3                   	ret    

c0026e8f <__floatsisf>:
c0026e8f:	55                   	push   ebp
c0026e90:	89 e5                	mov    ebp,esp
c0026e92:	53                   	push   ebx
c0026e93:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026e96:	85 d2                	test   edx,edx
c0026e98:	7e 2b                	jle    c0026ec5 <__floatsisf+0x36>
c0026e9a:	0f bd ca             	bsr    ecx,edx
c0026e9d:	83 f1 1f             	xor    ecx,0x1f
c0026ea0:	d3 e2                	shl    edx,cl
c0026ea2:	89 d0                	mov    eax,edx
c0026ea4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ea9:	89 c3                	mov    ebx,eax
c0026eab:	c1 eb 08             	shr    ebx,0x8
c0026eae:	80 e2 7f             	and    dl,0x7f
c0026eb1:	0f 95 c2             	setne  dl
c0026eb4:	09 da                	or     edx,ebx
c0026eb6:	83 e2 01             	and    edx,0x1
c0026eb9:	c1 e8 07             	shr    eax,0x7
c0026ebc:	21 c2                	and    edx,eax
c0026ebe:	b8 9e 00 00 00       	mov    eax,0x9e
c0026ec3:	eb 32                	jmp    c0026ef7 <__floatsisf+0x68>
c0026ec5:	b8 00 00 00 00       	mov    eax,0x0
c0026eca:	74 34                	je     c0026f00 <__floatsisf+0x71>
c0026ecc:	f7 da                	neg    edx
c0026ece:	0f bd ca             	bsr    ecx,edx
c0026ed1:	83 f1 1f             	xor    ecx,0x1f
c0026ed4:	d3 e2                	shl    edx,cl
c0026ed6:	89 d0                	mov    eax,edx
c0026ed8:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026edd:	89 c3                	mov    ebx,eax
c0026edf:	c1 eb 08             	shr    ebx,0x8
c0026ee2:	80 e2 7f             	and    dl,0x7f
c0026ee5:	0f 95 c2             	setne  dl
c0026ee8:	09 da                	or     edx,ebx
c0026eea:	83 e2 01             	and    edx,0x1
c0026eed:	c1 e8 07             	shr    eax,0x7
c0026ef0:	21 c2                	and    edx,eax
c0026ef2:	b8 9e 01 00 00       	mov    eax,0x19e
c0026ef7:	29 c8                	sub    eax,ecx
c0026ef9:	c1 e0 17             	shl    eax,0x17
c0026efc:	09 d8                	or     eax,ebx
c0026efe:	01 d0                	add    eax,edx
c0026f00:	5b                   	pop    ebx
c0026f01:	5d                   	pop    ebp
c0026f02:	c3                   	ret    

c0026f03 <__floatunsisf>:
c0026f03:	55                   	push   ebp
c0026f04:	89 e5                	mov    ebp,esp
c0026f06:	53                   	push   ebx
c0026f07:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f0a:	31 c0                	xor    eax,eax
c0026f0c:	85 d2                	test   edx,edx
c0026f0e:	74 32                	je     c0026f42 <__floatunsisf+0x3f>
c0026f10:	0f bd ca             	bsr    ecx,edx
c0026f13:	83 f1 1f             	xor    ecx,0x1f
c0026f16:	d3 e2                	shl    edx,cl
c0026f18:	89 d0                	mov    eax,edx
c0026f1a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f1f:	89 c3                	mov    ebx,eax
c0026f21:	c1 eb 08             	shr    ebx,0x8
c0026f24:	80 e2 7f             	and    dl,0x7f
c0026f27:	0f 95 c2             	setne  dl
c0026f2a:	09 da                	or     edx,ebx
c0026f2c:	83 e2 01             	and    edx,0x1
c0026f2f:	c1 e8 07             	shr    eax,0x7
c0026f32:	21 c2                	and    edx,eax
c0026f34:	b8 9e 00 00 00       	mov    eax,0x9e
c0026f39:	29 c8                	sub    eax,ecx
c0026f3b:	c1 e0 17             	shl    eax,0x17
c0026f3e:	09 d8                	or     eax,ebx
c0026f40:	01 d0                	add    eax,edx
c0026f42:	5b                   	pop    ebx
c0026f43:	5d                   	pop    ebp
c0026f44:	c3                   	ret    

c0026f45 <__fixsfsi>:
c0026f45:	55                   	push   ebp
c0026f46:	89 e5                	mov    ebp,esp
c0026f48:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f4b:	89 d1                	mov    ecx,edx
c0026f4d:	c1 e1 08             	shl    ecx,0x8
c0026f50:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0026f56:	c1 fa 17             	sar    edx,0x17
c0026f59:	78 1c                	js     c0026f77 <__fixsfsi+0x32>
c0026f5b:	83 ea 7f             	sub    edx,0x7f
c0026f5e:	31 c0                	xor    eax,eax
c0026f60:	83 fa 1e             	cmp    edx,0x1e
c0026f63:	77 40                	ja     c0026fa5 <__fixsfsi+0x60>
c0026f65:	89 c8                	mov    eax,ecx
c0026f67:	0d 00 00 00 80       	or     eax,0x80000000
c0026f6c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026f71:	29 d1                	sub    ecx,edx
c0026f73:	d3 e8                	shr    eax,cl
c0026f75:	eb 2e                	jmp    c0026fa5 <__fixsfsi+0x60>
c0026f77:	31 c0                	xor    eax,eax
c0026f79:	81 c2 81 00 00 00    	add    edx,0x81
c0026f7f:	78 24                	js     c0026fa5 <__fixsfsi+0x60>
c0026f81:	83 fa 1e             	cmp    edx,0x1e
c0026f84:	7e 09                	jle    c0026f8f <__fixsfsi+0x4a>
c0026f86:	83 fa 1f             	cmp    edx,0x1f
c0026f89:	75 18                	jne    c0026fa3 <__fixsfsi+0x5e>
c0026f8b:	85 c9                	test   ecx,ecx
c0026f8d:	75 14                	jne    c0026fa3 <__fixsfsi+0x5e>
c0026f8f:	89 c8                	mov    eax,ecx
c0026f91:	0d 00 00 00 80       	or     eax,0x80000000
c0026f96:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026f9b:	29 d1                	sub    ecx,edx
c0026f9d:	d3 e8                	shr    eax,cl
c0026f9f:	f7 d8                	neg    eax
c0026fa1:	eb 02                	jmp    c0026fa5 <__fixsfsi+0x60>
c0026fa3:	31 c0                	xor    eax,eax
c0026fa5:	5d                   	pop    ebp
c0026fa6:	c3                   	ret    

c0026fa7 <__fixunssfsi>:
c0026fa7:	55                   	push   ebp
c0026fa8:	89 e5                	mov    ebp,esp
c0026faa:	53                   	push   ebx
c0026fab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026fae:	89 d3                	mov    ebx,edx
c0026fb0:	c1 fb 17             	sar    ebx,0x17
c0026fb3:	83 eb 7f             	sub    ebx,0x7f
c0026fb6:	31 c0                	xor    eax,eax
c0026fb8:	83 fb 1f             	cmp    ebx,0x1f
c0026fbb:	77 18                	ja     c0026fd5 <__fixunssfsi+0x2e>
c0026fbd:	89 d0                	mov    eax,edx
c0026fbf:	c1 e0 08             	shl    eax,0x8
c0026fc2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026fc7:	0d 00 00 00 80       	or     eax,0x80000000
c0026fcc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026fd1:	29 d9                	sub    ecx,ebx
c0026fd3:	d3 e8                	shr    eax,cl
c0026fd5:	5b                   	pop    ebx
c0026fd6:	5d                   	pop    ebp
c0026fd7:	c3                   	ret    

c0026fd8 <__cmpsf2>:
c0026fd8:	55                   	push   ebp
c0026fd9:	89 e5                	mov    ebp,esp
c0026fdb:	57                   	push   edi
c0026fdc:	56                   	push   esi
c0026fdd:	53                   	push   ebx
c0026fde:	83 ec 24             	sub    esp,0x24
c0026fe1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026fe4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026fe7:	e8 4f 10 00 00       	call   c002803b <__truncdfsf2>
c0026fec:	5a                   	pop    edx
c0026fed:	59                   	pop    ecx
c0026fee:	89 c3                	mov    ebx,eax
c0026ff0:	c1 e8 17             	shr    eax,0x17
c0026ff3:	0f b6 f0             	movzx  esi,al
c0026ff6:	89 d8                	mov    eax,ebx
c0026ff8:	c1 e8 1f             	shr    eax,0x1f
c0026ffb:	31 c6                	xor    esi,eax
c0026ffd:	c1 e3 08             	shl    ebx,0x8
c0027000:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027003:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027006:	e8 30 10 00 00       	call   c002803b <__truncdfsf2>
c002700b:	83 c4 10             	add    esp,0x10
c002700e:	89 c1                	mov    ecx,eax
c0027010:	c1 e9 17             	shr    ecx,0x17
c0027013:	0f b6 c9             	movzx  ecx,cl
c0027016:	89 c7                	mov    edi,eax
c0027018:	c1 ef 1f             	shr    edi,0x1f
c002701b:	89 ca                	mov    edx,ecx
c002701d:	31 fa                	xor    edx,edi
c002701f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027022:	c1 e0 08             	shl    eax,0x8
c0027025:	89 c2                	mov    edx,eax
c0027027:	89 d8                	mov    eax,ebx
c0027029:	09 d0                	or     eax,edx
c002702b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027030:	09 f0                	or     eax,esi
c0027032:	75 08                	jne    c002703c <__cmpsf2+0x64>
c0027034:	31 c0                	xor    eax,eax
c0027036:	39 f9                	cmp    ecx,edi
c0027038:	75 0c                	jne    c0027046 <__cmpsf2+0x6e>
c002703a:	eb 29                	jmp    c0027065 <__cmpsf2+0x8d>
c002703c:	b8 01 00 00 00       	mov    eax,0x1
c0027041:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027044:	7f 1f                	jg     c0027065 <__cmpsf2+0x8d>
c0027046:	83 c8 ff             	or     eax,0xffffffff
c0027049:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002704c:	7c 17                	jl     c0027065 <__cmpsf2+0x8d>
c002704e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027054:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002705a:	b8 01 00 00 00       	mov    eax,0x1
c002705f:	39 d3                	cmp    ebx,edx
c0027061:	77 02                	ja     c0027065 <__cmpsf2+0x8d>
c0027063:	19 c0                	sbb    eax,eax
c0027065:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027068:	5b                   	pop    ebx
c0027069:	5e                   	pop    esi
c002706a:	5f                   	pop    edi
c002706b:	5d                   	pop    ebp
c002706c:	c3                   	ret    

c002706d <__eqsf2>:
c002706d:	55                   	push   ebp
c002706e:	89 e5                	mov    ebp,esp
c0027070:	83 ec 24             	sub    esp,0x24
c0027073:	6a 01                	push   0x1
c0027075:	83 ec 0c             	sub    esp,0xc
c0027078:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002707b:	e8 df 10 00 00       	call   c002815f <__extendsfdf2>
c0027080:	83 c4 10             	add    esp,0x10
c0027083:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027086:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027089:	52                   	push   edx
c002708a:	50                   	push   eax
c002708b:	50                   	push   eax
c002708c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002708f:	e8 cb 10 00 00       	call   c002815f <__extendsfdf2>
c0027094:	59                   	pop    ecx
c0027095:	59                   	pop    ecx
c0027096:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027099:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002709c:	52                   	push   edx
c002709d:	50                   	push   eax
c002709e:	e8 35 ff ff ff       	call   c0026fd8 <__cmpsf2>
c00270a3:	83 c4 20             	add    esp,0x20
c00270a6:	c9                   	leave  
c00270a7:	c3                   	ret    

c00270a8 <__nesf2>:
c00270a8:	eb c3                	jmp    c002706d <__eqsf2>

c00270aa <__gtsf2>:
c00270aa:	55                   	push   ebp
c00270ab:	89 e5                	mov    ebp,esp
c00270ad:	83 ec 24             	sub    esp,0x24
c00270b0:	6a ff                	push   0xffffffff
c00270b2:	83 ec 0c             	sub    esp,0xc
c00270b5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270b8:	e8 a2 10 00 00       	call   c002815f <__extendsfdf2>
c00270bd:	83 c4 10             	add    esp,0x10
c00270c0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00270c3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00270c6:	52                   	push   edx
c00270c7:	50                   	push   eax
c00270c8:	50                   	push   eax
c00270c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00270cc:	e8 8e 10 00 00       	call   c002815f <__extendsfdf2>
c00270d1:	59                   	pop    ecx
c00270d2:	59                   	pop    ecx
c00270d3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00270d6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00270d9:	52                   	push   edx
c00270da:	50                   	push   eax
c00270db:	e8 f8 fe ff ff       	call   c0026fd8 <__cmpsf2>
c00270e0:	83 c4 20             	add    esp,0x20
c00270e3:	c9                   	leave  
c00270e4:	c3                   	ret    

c00270e5 <__gesf2>:
c00270e5:	eb c3                	jmp    c00270aa <__gtsf2>

c00270e7 <__ltsf2>:
c00270e7:	eb 84                	jmp    c002706d <__eqsf2>

c00270e9 <__lesf2>:
c00270e9:	eb 82                	jmp    c002706d <__eqsf2>

c00270eb <__adddf3>:
c00270eb:	55                   	push   ebp
c00270ec:	89 e5                	mov    ebp,esp
c00270ee:	57                   	push   edi
c00270ef:	56                   	push   esi
c00270f0:	53                   	push   ebx
c00270f1:	83 ec 24             	sub    esp,0x24
c00270f4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00270f7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00270fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00270fd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027100:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027103:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027106:	89 c8                	mov    eax,ecx
c0027108:	89 ce                	mov    esi,ecx
c002710a:	c1 fe 14             	sar    esi,0x14
c002710d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027110:	89 fb                	mov    ebx,edi
c0027112:	89 fa                	mov    edx,edi
c0027114:	c1 e2 0b             	shl    edx,0xb
c0027117:	c1 e0 0b             	shl    eax,0xb
c002711a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002711f:	c1 eb 15             	shr    ebx,0x15
c0027122:	09 d8                	or     eax,ebx
c0027124:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027127:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002712a:	c1 fe 14             	sar    esi,0x14
c002712d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027130:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027133:	89 f3                	mov    ebx,esi
c0027135:	c1 e3 0b             	shl    ebx,0xb
c0027138:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002713b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002713e:	c1 e3 0b             	shl    ebx,0xb
c0027141:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027147:	c1 ee 15             	shr    esi,0x15
c002714a:	09 f3                	or     ebx,esi
c002714c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c002714f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027152:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027155:	0f 88 5f 02 00 00    	js     c00273ba <__adddf3+0x2cf>
c002715b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002715e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027161:	85 db                	test   ebx,ebx
c0027163:	0f 8e c7 00 00 00    	jle    c0027230 <__adddf3+0x145>
c0027169:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027170:	75 1a                	jne    c002718c <__adddf3+0xa1>
c0027172:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027175:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027178:	0f 84 b2 05 00 00    	je     c0027730 <__adddf3+0x645>
c002717e:	4b                   	dec    ebx
c002717f:	75 23                	jne    c00271a4 <__adddf3+0xb9>
c0027181:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027184:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027187:	e9 99 00 00 00       	jmp    c0027225 <__adddf3+0x13a>
c002718c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002718f:	f7 d6                	not    esi
c0027191:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027197:	0f 84 93 05 00 00    	je     c0027730 <__adddf3+0x645>
c002719d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00271a4:	83 fb 1f             	cmp    ebx,0x1f
c00271a7:	7e 42                	jle    c00271eb <__adddf3+0x100>
c00271a9:	83 fb 3f             	cmp    ebx,0x3f
c00271ac:	0f 8f 7e 05 00 00    	jg     c0027730 <__adddf3+0x645>
c00271b2:	83 e3 1f             	and    ebx,0x1f
c00271b5:	89 d9                	mov    ecx,ebx
c00271b7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00271ba:	d3 ef                	shr    edi,cl
c00271bc:	31 db                	xor    ebx,ebx
c00271be:	85 c9                	test   ecx,ecx
c00271c0:	74 15                	je     c00271d7 <__adddf3+0xec>
c00271c2:	be 20 00 00 00       	mov    esi,0x20
c00271c7:	29 ce                	sub    esi,ecx
c00271c9:	89 f1                	mov    ecx,esi
c00271cb:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00271ce:	d3 e6                	shl    esi,cl
c00271d0:	31 db                	xor    ebx,ebx
c00271d2:	85 f6                	test   esi,esi
c00271d4:	0f 95 c3             	setne  bl
c00271d7:	31 c9                	xor    ecx,ecx
c00271d9:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00271dd:	0f 95 c1             	setne  cl
c00271e0:	09 cf                	or     edi,ecx
c00271e2:	09 fb                	or     ebx,edi
c00271e4:	01 da                	add    edx,ebx
c00271e6:	83 d0 00             	adc    eax,0x0
c00271e9:	eb 3a                	jmp    c0027225 <__adddf3+0x13a>
c00271eb:	bf 20 00 00 00       	mov    edi,0x20
c00271f0:	29 df                	sub    edi,ebx
c00271f2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00271f5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00271f8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00271fb:	d3 e6                	shl    esi,cl
c00271fd:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027200:	88 d9                	mov    cl,bl
c0027202:	d3 ef                	shr    edi,cl
c0027204:	09 fe                	or     esi,edi
c0027206:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027209:	88 d9                	mov    cl,bl
c002720b:	d3 ef                	shr    edi,cl
c002720d:	89 fb                	mov    ebx,edi
c002720f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027212:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027215:	d3 e7                	shl    edi,cl
c0027217:	85 ff                	test   edi,edi
c0027219:	0f 95 c1             	setne  cl
c002721c:	0f b6 c9             	movzx  ecx,cl
c002721f:	09 ce                	or     esi,ecx
c0027221:	01 f2                	add    edx,esi
c0027223:	11 d8                	adc    eax,ebx
c0027225:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027228:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002722b:	e9 52 01 00 00       	jmp    c0027382 <__adddf3+0x297>
c0027230:	0f 84 d5 00 00 00    	je     c002730b <__adddf3+0x220>
c0027236:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027239:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c002723c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002723f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027242:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027249:	75 20                	jne    c002726b <__adddf3+0x180>
c002724b:	89 d6                	mov    esi,edx
c002724d:	09 c6                	or     esi,eax
c002724f:	0f 84 db 04 00 00    	je     c0027730 <__adddf3+0x645>
c0027255:	4b                   	dec    ebx
c0027256:	75 29                	jne    c0027281 <__adddf3+0x196>
c0027258:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002725b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002725e:	01 d1                	add    ecx,edx
c0027260:	11 c6                	adc    esi,eax
c0027262:	89 f0                	mov    eax,esi
c0027264:	89 ca                	mov    edx,ecx
c0027266:	e9 17 01 00 00       	jmp    c0027382 <__adddf3+0x297>
c002726b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002726e:	f7 d6                	not    esi
c0027270:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027276:	0f 84 b4 04 00 00    	je     c0027730 <__adddf3+0x645>
c002727c:	0d 00 00 00 80       	or     eax,0x80000000
c0027281:	83 fb 1f             	cmp    ebx,0x1f
c0027284:	7e 48                	jle    c00272ce <__adddf3+0x1e3>
c0027286:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027289:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002728c:	83 fb 3f             	cmp    ebx,0x3f
c002728f:	0f 8f 9b 04 00 00    	jg     c0027730 <__adddf3+0x645>
c0027295:	83 e3 1f             	and    ebx,0x1f
c0027298:	89 d9                	mov    ecx,ebx
c002729a:	89 c7                	mov    edi,eax
c002729c:	d3 ef                	shr    edi,cl
c002729e:	31 db                	xor    ebx,ebx
c00272a0:	85 c9                	test   ecx,ecx
c00272a2:	74 12                	je     c00272b6 <__adddf3+0x1cb>
c00272a4:	be 20 00 00 00       	mov    esi,0x20
c00272a9:	29 ce                	sub    esi,ecx
c00272ab:	89 f1                	mov    ecx,esi
c00272ad:	d3 e0                	shl    eax,cl
c00272af:	31 db                	xor    ebx,ebx
c00272b1:	85 c0                	test   eax,eax
c00272b3:	0f 95 c3             	setne  bl
c00272b6:	31 c0                	xor    eax,eax
c00272b8:	85 d2                	test   edx,edx
c00272ba:	0f 95 c0             	setne  al
c00272bd:	09 c7                	or     edi,eax
c00272bf:	09 fb                	or     ebx,edi
c00272c1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00272c4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00272c7:	01 da                	add    edx,ebx
c00272c9:	83 d6 00             	adc    esi,0x0
c00272cc:	eb 39                	jmp    c0027307 <__adddf3+0x21c>
c00272ce:	be 20 00 00 00       	mov    esi,0x20
c00272d3:	29 de                	sub    esi,ebx
c00272d5:	89 c7                	mov    edi,eax
c00272d7:	89 f1                	mov    ecx,esi
c00272d9:	d3 e7                	shl    edi,cl
c00272db:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00272de:	89 d7                	mov    edi,edx
c00272e0:	88 d9                	mov    cl,bl
c00272e2:	d3 ef                	shr    edi,cl
c00272e4:	89 f9                	mov    ecx,edi
c00272e6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00272e9:	09 cf                	or     edi,ecx
c00272eb:	88 d9                	mov    cl,bl
c00272ed:	d3 e8                	shr    eax,cl
c00272ef:	89 f1                	mov    ecx,esi
c00272f1:	d3 e2                	shl    edx,cl
c00272f3:	85 d2                	test   edx,edx
c00272f5:	0f 95 c2             	setne  dl
c00272f8:	0f b6 d2             	movzx  edx,dl
c00272fb:	09 d7                	or     edi,edx
c00272fd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027300:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027303:	01 fa                	add    edx,edi
c0027305:	11 c6                	adc    esi,eax
c0027307:	89 f0                	mov    eax,esi
c0027309:	eb 77                	jmp    c0027382 <__adddf3+0x297>
c002730b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002730e:	46                   	inc    esi
c002730f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027312:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027318:	75 41                	jne    c002735b <__adddf3+0x270>
c002731a:	89 d3                	mov    ebx,edx
c002731c:	09 c3                	or     ebx,eax
c002731e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027325:	75 27                	jne    c002734e <__adddf3+0x263>
c0027327:	85 db                	test   ebx,ebx
c0027329:	0f 84 fb 03 00 00    	je     c002772a <__adddf3+0x63f>
c002732f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027332:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027335:	0f 84 f5 03 00 00    	je     c0027730 <__adddf3+0x645>
c002733b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002733e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027341:	85 c0                	test   eax,eax
c0027343:	0f 89 91 03 00 00    	jns    c00276da <__adddf3+0x5ef>
c0027349:	e9 85 03 00 00       	jmp    c00276d3 <__adddf3+0x5e8>
c002734e:	85 db                	test   ebx,ebx
c0027350:	0f 85 da 03 00 00    	jne    c0027730 <__adddf3+0x645>
c0027356:	e9 cf 03 00 00       	jmp    c002772a <__adddf3+0x63f>
c002735b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002735e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027361:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027364:	f7 d1                	not    ecx
c0027366:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002736c:	0f 84 70 03 00 00    	je     c00276e2 <__adddf3+0x5f7>
c0027372:	d1 ea                	shr    edx,1
c0027374:	89 c1                	mov    ecx,eax
c0027376:	c1 e1 1f             	shl    ecx,0x1f
c0027379:	09 ca                	or     edx,ecx
c002737b:	d1 e8                	shr    eax,1
c002737d:	e9 6f 03 00 00       	jmp    c00276f1 <__adddf3+0x606>
c0027382:	85 c0                	test   eax,eax
c0027384:	0f 89 67 03 00 00    	jns    c00276f1 <__adddf3+0x606>
c002738a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002738d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027390:	f7 d1                	not    ecx
c0027392:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027398:	0f 84 44 03 00 00    	je     c00276e2 <__adddf3+0x5f7>
c002739e:	89 d1                	mov    ecx,edx
c00273a0:	d1 e9                	shr    ecx,1
c00273a2:	83 e2 01             	and    edx,0x1
c00273a5:	09 ca                	or     edx,ecx
c00273a7:	89 c1                	mov    ecx,eax
c00273a9:	c1 e1 1f             	shl    ecx,0x1f
c00273ac:	09 ca                	or     edx,ecx
c00273ae:	d1 e8                	shr    eax,1
c00273b0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00273b5:	e9 37 03 00 00       	jmp    c00276f1 <__adddf3+0x606>
c00273ba:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00273bd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00273c3:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00273c6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00273c9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00273cf:	29 de                	sub    esi,ebx
c00273d1:	85 f6                	test   esi,esi
c00273d3:	0f 8e bd 00 00 00    	jle    c0027496 <__adddf3+0x3ab>
c00273d9:	85 db                	test   ebx,ebx
c00273db:	75 17                	jne    c00273f4 <__adddf3+0x309>
c00273dd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00273e0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00273e3:	0f 84 47 03 00 00    	je     c0027730 <__adddf3+0x645>
c00273e9:	4e                   	dec    esi
c00273ea:	75 20                	jne    c002740c <__adddf3+0x321>
c00273ec:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00273ef:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00273f2:	eb 5b                	jmp    c002744f <__adddf3+0x364>
c00273f4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00273f7:	f7 d3                	not    ebx
c00273f9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00273ff:	0f 84 2b 03 00 00    	je     c0027730 <__adddf3+0x645>
c0027405:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002740c:	83 fe 1f             	cmp    esi,0x1f
c002740f:	7e 49                	jle    c002745a <__adddf3+0x36f>
c0027411:	83 fe 3f             	cmp    esi,0x3f
c0027414:	0f 8f 16 03 00 00    	jg     c0027730 <__adddf3+0x645>
c002741a:	83 e6 1f             	and    esi,0x1f
c002741d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027420:	89 f1                	mov    ecx,esi
c0027422:	d3 ef                	shr    edi,cl
c0027424:	31 db                	xor    ebx,ebx
c0027426:	85 f6                	test   esi,esi
c0027428:	74 13                	je     c002743d <__adddf3+0x352>
c002742a:	b9 20 00 00 00       	mov    ecx,0x20
c002742f:	29 f1                	sub    ecx,esi
c0027431:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027434:	d3 e6                	shl    esi,cl
c0027436:	31 db                	xor    ebx,ebx
c0027438:	85 f6                	test   esi,esi
c002743a:	0f 95 c3             	setne  bl
c002743d:	31 c9                	xor    ecx,ecx
c002743f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027443:	0f 95 c1             	setne  cl
c0027446:	09 cf                	or     edi,ecx
c0027448:	09 fb                	or     ebx,edi
c002744a:	29 da                	sub    edx,ebx
c002744c:	83 d8 00             	sbb    eax,0x0
c002744f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027452:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027455:	e9 aa 01 00 00       	jmp    c0027604 <__adddf3+0x519>
c002745a:	bf 20 00 00 00       	mov    edi,0x20
c002745f:	29 f7                	sub    edi,esi
c0027461:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027464:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027467:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002746a:	d3 e3                	shl    ebx,cl
c002746c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002746f:	89 f1                	mov    ecx,esi
c0027471:	d3 ef                	shr    edi,cl
c0027473:	09 fb                	or     ebx,edi
c0027475:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027478:	89 f1                	mov    ecx,esi
c002747a:	d3 ef                	shr    edi,cl
c002747c:	89 fe                	mov    esi,edi
c002747e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027481:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027484:	d3 e7                	shl    edi,cl
c0027486:	85 ff                	test   edi,edi
c0027488:	0f 95 c1             	setne  cl
c002748b:	0f b6 c9             	movzx  ecx,cl
c002748e:	09 cb                	or     ebx,ecx
c0027490:	29 da                	sub    edx,ebx
c0027492:	19 f0                	sbb    eax,esi
c0027494:	eb b9                	jmp    c002744f <__adddf3+0x364>
c0027496:	0f 84 cd 00 00 00    	je     c0027569 <__adddf3+0x47e>
c002749c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002749f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00274a2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00274a5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00274a9:	75 1b                	jne    c00274c6 <__adddf3+0x3db>
c00274ab:	89 d6                	mov    esi,edx
c00274ad:	09 c6                	or     esi,eax
c00274af:	0f 84 7b 02 00 00    	je     c0027730 <__adddf3+0x645>
c00274b5:	4b                   	dec    ebx
c00274b6:	75 24                	jne    c00274dc <__adddf3+0x3f1>
c00274b8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274bb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00274be:	29 d1                	sub    ecx,edx
c00274c0:	19 c6                	sbb    esi,eax
c00274c2:	89 ca                	mov    edx,ecx
c00274c4:	eb 61                	jmp    c0027527 <__adddf3+0x43c>
c00274c6:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00274c9:	f7 d6                	not    esi
c00274cb:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00274d1:	0f 84 59 02 00 00    	je     c0027730 <__adddf3+0x645>
c00274d7:	0d 00 00 00 80       	or     eax,0x80000000
c00274dc:	83 fb 1f             	cmp    ebx,0x1f
c00274df:	7e 4d                	jle    c002752e <__adddf3+0x443>
c00274e1:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00274e4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00274e7:	83 fb 3f             	cmp    ebx,0x3f
c00274ea:	0f 8f 40 02 00 00    	jg     c0027730 <__adddf3+0x645>
c00274f0:	83 e3 1f             	and    ebx,0x1f
c00274f3:	89 d9                	mov    ecx,ebx
c00274f5:	89 c7                	mov    edi,eax
c00274f7:	d3 ef                	shr    edi,cl
c00274f9:	31 db                	xor    ebx,ebx
c00274fb:	85 c9                	test   ecx,ecx
c00274fd:	74 12                	je     c0027511 <__adddf3+0x426>
c00274ff:	be 20 00 00 00       	mov    esi,0x20
c0027504:	29 ce                	sub    esi,ecx
c0027506:	89 f1                	mov    ecx,esi
c0027508:	d3 e0                	shl    eax,cl
c002750a:	31 db                	xor    ebx,ebx
c002750c:	85 c0                	test   eax,eax
c002750e:	0f 95 c3             	setne  bl
c0027511:	31 c0                	xor    eax,eax
c0027513:	85 d2                	test   edx,edx
c0027515:	0f 95 c0             	setne  al
c0027518:	09 c7                	or     edi,eax
c002751a:	09 fb                	or     ebx,edi
c002751c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002751f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027522:	29 da                	sub    edx,ebx
c0027524:	83 de 00             	sbb    esi,0x0
c0027527:	89 f0                	mov    eax,esi
c0027529:	e9 d6 00 00 00       	jmp    c0027604 <__adddf3+0x519>
c002752e:	be 20 00 00 00       	mov    esi,0x20
c0027533:	29 de                	sub    esi,ebx
c0027535:	89 c7                	mov    edi,eax
c0027537:	89 f1                	mov    ecx,esi
c0027539:	d3 e7                	shl    edi,cl
c002753b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002753e:	89 d7                	mov    edi,edx
c0027540:	88 d9                	mov    cl,bl
c0027542:	d3 ef                	shr    edi,cl
c0027544:	89 f9                	mov    ecx,edi
c0027546:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027549:	09 cf                	or     edi,ecx
c002754b:	88 d9                	mov    cl,bl
c002754d:	d3 e8                	shr    eax,cl
c002754f:	89 f1                	mov    ecx,esi
c0027551:	d3 e2                	shl    edx,cl
c0027553:	85 d2                	test   edx,edx
c0027555:	0f 95 c2             	setne  dl
c0027558:	0f b6 d2             	movzx  edx,dl
c002755b:	09 d7                	or     edi,edx
c002755d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027560:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027563:	29 fa                	sub    edx,edi
c0027565:	19 c6                	sbb    esi,eax
c0027567:	eb be                	jmp    c0027527 <__adddf3+0x43c>
c0027569:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002756c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002756f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027575:	75 6a                	jne    c00275e1 <__adddf3+0x4f6>
c0027577:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002757b:	75 58                	jne    c00275d5 <__adddf3+0x4ea>
c002757d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027580:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027583:	89 d6                	mov    esi,edx
c0027585:	09 c6                	or     esi,eax
c0027587:	75 17                	jne    c00275a0 <__adddf3+0x4b5>
c0027589:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002758c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002758f:	85 db                	test   ebx,ebx
c0027591:	0f 85 99 01 00 00    	jne    c0027730 <__adddf3+0x645>
c0027597:	31 ff                	xor    edi,edi
c0027599:	31 c9                	xor    ecx,ecx
c002759b:	e9 90 01 00 00       	jmp    c0027730 <__adddf3+0x645>
c00275a0:	85 db                	test   ebx,ebx
c00275a2:	0f 84 88 01 00 00    	je     c0027730 <__adddf3+0x645>
c00275a8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00275ab:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00275ae:	85 c0                	test   eax,eax
c00275b0:	79 10                	jns    c00275c2 <__adddf3+0x4d7>
c00275b2:	31 c9                	xor    ecx,ecx
c00275b4:	f7 da                	neg    edx
c00275b6:	0f 95 c1             	setne  cl
c00275b9:	01 c8                	add    eax,ecx
c00275bb:	f7 d8                	neg    eax
c00275bd:	e9 2f 01 00 00       	jmp    c00276f1 <__adddf3+0x606>
c00275c2:	31 ff                	xor    edi,edi
c00275c4:	31 c9                	xor    ecx,ecx
c00275c6:	89 c3                	mov    ebx,eax
c00275c8:	09 d3                	or     ebx,edx
c00275ca:	0f 84 60 01 00 00    	je     c0027730 <__adddf3+0x645>
c00275d0:	e9 05 01 00 00       	jmp    c00276da <__adddf3+0x5ef>
c00275d5:	31 ff                	xor    edi,edi
c00275d7:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00275dc:	e9 4f 01 00 00       	jmp    c0027730 <__adddf3+0x645>
c00275e1:	89 c1                	mov    ecx,eax
c00275e3:	89 d0                	mov    eax,edx
c00275e5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00275e8:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00275eb:	89 ca                	mov    edx,ecx
c00275ed:	85 c9                	test   ecx,ecx
c00275ef:	79 2c                	jns    c002761d <__adddf3+0x532>
c00275f1:	31 c9                	xor    ecx,ecx
c00275f3:	f7 d8                	neg    eax
c00275f5:	0f 95 c1             	setne  cl
c00275f8:	01 ca                	add    edx,ecx
c00275fa:	f7 da                	neg    edx
c00275fc:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00275ff:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027602:	eb 19                	jmp    c002761d <__adddf3+0x532>
c0027604:	85 c0                	test   eax,eax
c0027606:	0f 89 e5 00 00 00    	jns    c00276f1 <__adddf3+0x606>
c002760c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027611:	89 c1                	mov    ecx,eax
c0027613:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027616:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027619:	89 d0                	mov    eax,edx
c002761b:	89 ca                	mov    edx,ecx
c002761d:	85 d2                	test   edx,edx
c002761f:	74 59                	je     c002767a <__adddf3+0x58f>
c0027621:	0f bd da             	bsr    ebx,edx
c0027624:	83 f3 1f             	xor    ebx,0x1f
c0027627:	88 d9                	mov    cl,bl
c0027629:	d3 e2                	shl    edx,cl
c002762b:	bf 20 00 00 00       	mov    edi,0x20
c0027630:	89 f9                	mov    ecx,edi
c0027632:	29 d9                	sub    ecx,ebx
c0027634:	89 c6                	mov    esi,eax
c0027636:	d3 ee                	shr    esi,cl
c0027638:	09 d6                	or     esi,edx
c002763a:	88 d9                	mov    cl,bl
c002763c:	d3 e0                	shl    eax,cl
c002763e:	89 c2                	mov    edx,eax
c0027640:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027643:	25 ff 07 00 00       	and    eax,0x7ff
c0027648:	39 d8                	cmp    eax,ebx
c002764a:	7f 22                	jg     c002766e <__adddf3+0x583>
c002764c:	29 c3                	sub    ebx,eax
c002764e:	43                   	inc    ebx
c002764f:	88 d9                	mov    cl,bl
c0027651:	d3 ea                	shr    edx,cl
c0027653:	29 df                	sub    edi,ebx
c0027655:	89 f9                	mov    ecx,edi
c0027657:	89 f0                	mov    eax,esi
c0027659:	d3 e0                	shl    eax,cl
c002765b:	09 c2                	or     edx,eax
c002765d:	89 f0                	mov    eax,esi
c002765f:	88 d9                	mov    cl,bl
c0027661:	d3 e8                	shr    eax,cl
c0027663:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027666:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002766c:	eb 6f                	jmp    c00276dd <__adddf3+0x5f2>
c002766e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027671:	29 d8                	sub    eax,ebx
c0027673:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027676:	89 f0                	mov    eax,esi
c0027678:	eb 59                	jmp    c00276d3 <__adddf3+0x5e8>
c002767a:	85 c0                	test   eax,eax
c002767c:	74 6a                	je     c00276e8 <__adddf3+0x5fd>
c002767e:	0f bd c8             	bsr    ecx,eax
c0027681:	83 f1 1f             	xor    ecx,0x1f
c0027684:	d3 e0                	shl    eax,cl
c0027686:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027689:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002768f:	83 c1 20             	add    ecx,0x20
c0027692:	39 cb                	cmp    ebx,ecx
c0027694:	7f 35                	jg     c00276cb <__adddf3+0x5e0>
c0027696:	29 d9                	sub    ecx,ebx
c0027698:	8d 71 01             	lea    esi,[ecx+0x1]
c002769b:	83 fe 1f             	cmp    esi,0x1f
c002769e:	7e 09                	jle    c00276a9 <__adddf3+0x5be>
c00276a0:	83 e9 1f             	sub    ecx,0x1f
c00276a3:	d3 e8                	shr    eax,cl
c00276a5:	89 c3                	mov    ebx,eax
c00276a7:	eb 11                	jmp    c00276ba <__adddf3+0x5cf>
c00276a9:	b9 20 00 00 00       	mov    ecx,0x20
c00276ae:	29 f1                	sub    ecx,esi
c00276b0:	89 c3                	mov    ebx,eax
c00276b2:	d3 e3                	shl    ebx,cl
c00276b4:	89 f1                	mov    ecx,esi
c00276b6:	d3 e8                	shr    eax,cl
c00276b8:	89 c2                	mov    edx,eax
c00276ba:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00276bd:	25 00 f8 ff ff       	and    eax,0xfffff800
c00276c2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00276c5:	89 d0                	mov    eax,edx
c00276c7:	89 da                	mov    edx,ebx
c00276c9:	eb 26                	jmp    c00276f1 <__adddf3+0x606>
c00276cb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276ce:	29 cf                	sub    edi,ecx
c00276d0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276d3:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276d8:	eb 17                	jmp    c00276f1 <__adddf3+0x606>
c00276da:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276dd:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276e0:	eb 0f                	jmp    c00276f1 <__adddf3+0x606>
c00276e2:	31 d2                	xor    edx,edx
c00276e4:	31 c0                	xor    eax,eax
c00276e6:	eb 09                	jmp    c00276f1 <__adddf3+0x606>
c00276e8:	89 c2                	mov    edx,eax
c00276ea:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00276f1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00276f4:	c1 e1 14             	shl    ecx,0x14
c00276f7:	89 c3                	mov    ebx,eax
c00276f9:	c1 eb 0b             	shr    ebx,0xb
c00276fc:	09 d9                	or     ecx,ebx
c00276fe:	89 d3                	mov    ebx,edx
c0027700:	c1 eb 0b             	shr    ebx,0xb
c0027703:	c1 e0 15             	shl    eax,0x15
c0027706:	09 d8                	or     eax,ebx
c0027708:	89 c7                	mov    edi,eax
c002770a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027710:	0f 95 c0             	setne  al
c0027713:	89 c6                	mov    esi,eax
c0027715:	09 f3                	or     ebx,esi
c0027717:	83 e3 01             	and    ebx,0x1
c002771a:	c1 ea 0a             	shr    edx,0xa
c002771d:	21 da                	and    edx,ebx
c002771f:	89 f8                	mov    eax,edi
c0027721:	01 d0                	add    eax,edx
c0027723:	83 d1 00             	adc    ecx,0x0
c0027726:	89 c7                	mov    edi,eax
c0027728:	eb 06                	jmp    c0027730 <__adddf3+0x645>
c002772a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002772d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027730:	89 f8                	mov    eax,edi
c0027732:	89 ca                	mov    edx,ecx
c0027734:	83 c4 24             	add    esp,0x24
c0027737:	5b                   	pop    ebx
c0027738:	5e                   	pop    esi
c0027739:	5f                   	pop    edi
c002773a:	5d                   	pop    ebp
c002773b:	c3                   	ret    

c002773c <__subdf3>:
c002773c:	55                   	push   ebp
c002773d:	89 e5                	mov    ebp,esp
c002773f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027742:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027745:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002774b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002774e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027751:	5d                   	pop    ebp
c0027752:	e9 94 f9 ff ff       	jmp    c00270eb <__adddf3>

c0027757 <__negdf2>:
c0027757:	55                   	push   ebp
c0027758:	89 e5                	mov    ebp,esp
c002775a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002775d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027760:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027766:	5d                   	pop    ebp
c0027767:	c3                   	ret    

c0027768 <__muldf3>:
c0027768:	55                   	push   ebp
c0027769:	89 e5                	mov    ebp,esp
c002776b:	57                   	push   edi
c002776c:	56                   	push   esi
c002776d:	53                   	push   ebx
c002776e:	83 ec 24             	sub    esp,0x24
c0027771:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027774:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027777:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002777a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002777d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027780:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027783:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027786:	89 c8                	mov    eax,ecx
c0027788:	c1 f8 14             	sar    eax,0x14
c002778b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002778e:	89 f8                	mov    eax,edi
c0027790:	89 fb                	mov    ebx,edi
c0027792:	c1 e3 0b             	shl    ebx,0xb
c0027795:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027798:	c1 e1 0b             	shl    ecx,0xb
c002779b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00277a1:	c1 e8 15             	shr    eax,0x15
c00277a4:	09 c1                	or     ecx,eax
c00277a6:	89 d6                	mov    esi,edx
c00277a8:	89 d0                	mov    eax,edx
c00277aa:	c1 f8 14             	sar    eax,0x14
c00277ad:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00277b0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00277b3:	89 c3                	mov    ebx,eax
c00277b5:	c1 e3 0b             	shl    ebx,0xb
c00277b8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00277bb:	c1 e6 0b             	shl    esi,0xb
c00277be:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00277c4:	c1 e8 15             	shr    eax,0x15
c00277c7:	09 c6                	or     esi,eax
c00277c9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00277cc:	25 ff 07 00 00       	and    eax,0x7ff
c00277d1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00277d4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00277d7:	25 ff 07 00 00       	and    eax,0x7ff
c00277dc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00277df:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00277e2:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00277e5:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00277ec:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00277ef:	40                   	inc    eax
c00277f0:	a9 fe 07 00 00       	test   eax,0x7fe
c00277f5:	0f 85 8d 00 00 00    	jne    c0027888 <__muldf3+0x120>
c00277fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277fe:	09 c8                	or     eax,ecx
c0027800:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027804:	74 44                	je     c002784a <__muldf3+0xe2>
c0027806:	85 c0                	test   eax,eax
c0027808:	0f 85 31 02 00 00    	jne    c0027a3f <__muldf3+0x2d7>
c002780e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027811:	40                   	inc    eax
c0027812:	a9 fe 07 00 00       	test   eax,0x7fe
c0027817:	75 13                	jne    c002782c <__muldf3+0xc4>
c0027819:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002781c:	09 f1                	or     ecx,esi
c002781e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027822:	74 22                	je     c0027846 <__muldf3+0xde>
c0027824:	85 c9                	test   ecx,ecx
c0027826:	0f 85 0d 02 00 00    	jne    c0027a39 <__muldf3+0x2d1>
c002782c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027830:	0f 89 09 02 00 00    	jns    c0027a3f <__muldf3+0x2d7>
c0027836:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027839:	05 00 00 00 80       	add    eax,0x80000000
c002783e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027841:	e9 f9 01 00 00       	jmp    c0027a3f <__muldf3+0x2d7>
c0027846:	85 c9                	test   ecx,ecx
c0027848:	eb 2e                	jmp    c0027878 <__muldf3+0x110>
c002784a:	85 c0                	test   eax,eax
c002784c:	74 20                	je     c002786e <__muldf3+0x106>
c002784e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027851:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027854:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027857:	c1 ef 1f             	shr    edi,0x1f
c002785a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002785d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027860:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027863:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027866:	09 f9                	or     ecx,edi
c0027868:	78 1e                	js     c0027888 <__muldf3+0x120>
c002786a:	89 c3                	mov    ebx,eax
c002786c:	eb e0                	jmp    c002784e <__muldf3+0xe6>
c002786e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027871:	f7 d0                	not    eax
c0027873:	a9 ff 07 00 00       	test   eax,0x7ff
c0027878:	75 b2                	jne    c002782c <__muldf3+0xc4>
c002787a:	31 ff                	xor    edi,edi
c002787c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027883:	e9 b7 01 00 00       	jmp    c0027a3f <__muldf3+0x2d7>
c0027888:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002788b:	40                   	inc    eax
c002788c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027891:	75 57                	jne    c00278ea <__muldf3+0x182>
c0027893:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027896:	09 f0                	or     eax,esi
c0027898:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002789c:	74 23                	je     c00278c1 <__muldf3+0x159>
c002789e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00278a2:	0f 89 91 01 00 00    	jns    c0027a39 <__muldf3+0x2d1>
c00278a8:	85 c0                	test   eax,eax
c00278aa:	0f 85 89 01 00 00    	jne    c0027a39 <__muldf3+0x2d1>
c00278b0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00278b3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00278b9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00278bc:	e9 7e 01 00 00       	jmp    c0027a3f <__muldf3+0x2d7>
c00278c1:	85 c0                	test   eax,eax
c00278c3:	75 0c                	jne    c00278d1 <__muldf3+0x169>
c00278c5:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00278c9:	0f 89 6a 01 00 00    	jns    c0027a39 <__muldf3+0x2d1>
c00278cf:	eb df                	jmp    c00278b0 <__muldf3+0x148>
c00278d1:	01 f6                	add    esi,esi
c00278d3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00278d6:	c1 ea 1f             	shr    edx,0x1f
c00278d9:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00278dc:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00278df:	8d 43 ff             	lea    eax,[ebx-0x1]
c00278e2:	09 d6                	or     esi,edx
c00278e4:	78 04                	js     c00278ea <__muldf3+0x182>
c00278e6:	89 c3                	mov    ebx,eax
c00278e8:	eb e7                	jmp    c00278d1 <__muldf3+0x169>
c00278ea:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00278f0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00278f6:	89 c8                	mov    eax,ecx
c00278f8:	f7 e6                	mul    esi
c00278fa:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00278fd:	89 c7                	mov    edi,eax
c00278ff:	89 c8                	mov    eax,ecx
c0027901:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027904:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027907:	89 c1                	mov    ecx,eax
c0027909:	89 f0                	mov    eax,esi
c002790b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002790e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027911:	89 c6                	mov    esi,eax
c0027913:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027916:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027919:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002791c:	31 c0                	xor    eax,eax
c002791e:	01 f1                	add    ecx,esi
c0027920:	0f 92 c0             	setb   al
c0027923:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027926:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027929:	83 d6 00             	adc    esi,0x0
c002792c:	01 c7                	add    edi,eax
c002792e:	83 d6 00             	adc    esi,0x0
c0027931:	01 ca                	add    edx,ecx
c0027933:	0f 92 c1             	setb   cl
c0027936:	0f b6 c9             	movzx  ecx,cl
c0027939:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002793c:	83 d6 00             	adc    esi,0x0
c002793f:	01 cf                	add    edi,ecx
c0027941:	83 d6 00             	adc    esi,0x0
c0027944:	31 c9                	xor    ecx,ecx
c0027946:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027949:	0f 95 c1             	setne  cl
c002794c:	09 cf                	or     edi,ecx
c002794e:	85 f6                	test   esi,esi
c0027950:	78 0c                	js     c002795e <__muldf3+0x1f6>
c0027952:	01 f6                	add    esi,esi
c0027954:	89 f8                	mov    eax,edi
c0027956:	c1 e8 1f             	shr    eax,0x1f
c0027959:	09 c6                	or     esi,eax
c002795b:	01 ff                	add    edi,edi
c002795d:	4b                   	dec    ebx
c002795e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027964:	0f 8f 85 00 00 00    	jg     c00279ef <__muldf3+0x287>
c002796a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027970:	85 db                	test   ebx,ebx
c0027972:	0f 8f 84 00 00 00    	jg     c00279fc <__muldf3+0x294>
c0027978:	83 fb cc             	cmp    ebx,0xffffffcc
c002797b:	7c 79                	jl     c00279f6 <__muldf3+0x28e>
c002797d:	ba 01 00 00 00       	mov    edx,0x1
c0027982:	29 da                	sub    edx,ebx
c0027984:	81 ce 00 00 00 80    	or     esi,0x80000000
c002798a:	83 fa 1f             	cmp    edx,0x1f
c002798d:	7e 30                	jle    c00279bf <__muldf3+0x257>
c002798f:	83 fa 20             	cmp    edx,0x20
c0027992:	75 0b                	jne    c002799f <__muldf3+0x237>
c0027994:	31 c0                	xor    eax,eax
c0027996:	85 ff                	test   edi,edi
c0027998:	0f 95 c0             	setne  al
c002799b:	89 c7                	mov    edi,eax
c002799d:	eb 1a                	jmp    c00279b9 <__muldf3+0x251>
c002799f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00279a2:	89 f0                	mov    eax,esi
c00279a4:	d3 e0                	shl    eax,cl
c00279a6:	09 f8                	or     eax,edi
c00279a8:	0f 95 c0             	setne  al
c00279ab:	0f b6 c0             	movzx  eax,al
c00279ae:	89 c7                	mov    edi,eax
c00279b0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00279b5:	29 d9                	sub    ecx,ebx
c00279b7:	d3 ee                	shr    esi,cl
c00279b9:	09 f7                	or     edi,esi
c00279bb:	31 db                	xor    ebx,ebx
c00279bd:	eb 3b                	jmp    c00279fa <__muldf3+0x292>
c00279bf:	83 c3 1f             	add    ebx,0x1f
c00279c2:	89 f0                	mov    eax,esi
c00279c4:	88 d9                	mov    cl,bl
c00279c6:	d3 e0                	shl    eax,cl
c00279c8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279cb:	89 f8                	mov    eax,edi
c00279cd:	88 d1                	mov    cl,dl
c00279cf:	d3 e8                	shr    eax,cl
c00279d1:	89 c1                	mov    ecx,eax
c00279d3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00279d6:	09 c8                	or     eax,ecx
c00279d8:	88 d9                	mov    cl,bl
c00279da:	d3 e7                	shl    edi,cl
c00279dc:	31 db                	xor    ebx,ebx
c00279de:	85 ff                	test   edi,edi
c00279e0:	0f 95 c3             	setne  bl
c00279e3:	89 df                	mov    edi,ebx
c00279e5:	09 c7                	or     edi,eax
c00279e7:	88 d1                	mov    cl,dl
c00279e9:	d3 ee                	shr    esi,cl
c00279eb:	31 db                	xor    ebx,ebx
c00279ed:	eb 0d                	jmp    c00279fc <__muldf3+0x294>
c00279ef:	bb ff 07 00 00       	mov    ebx,0x7ff
c00279f4:	eb 02                	jmp    c00279f8 <__muldf3+0x290>
c00279f6:	31 db                	xor    ebx,ebx
c00279f8:	31 ff                	xor    edi,edi
c00279fa:	31 f6                	xor    esi,esi
c00279fc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00279ff:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027a02:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027a07:	09 c3                	or     ebx,eax
c0027a09:	c1 e3 14             	shl    ebx,0x14
c0027a0c:	89 f0                	mov    eax,esi
c0027a0e:	c1 e8 0b             	shr    eax,0xb
c0027a11:	09 c3                	or     ebx,eax
c0027a13:	89 f8                	mov    eax,edi
c0027a15:	c1 e8 0b             	shr    eax,0xb
c0027a18:	c1 e6 15             	shl    esi,0x15
c0027a1b:	09 c6                	or     esi,eax
c0027a1d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027a23:	0f 95 c1             	setne  cl
c0027a26:	09 c8                	or     eax,ecx
c0027a28:	83 e0 01             	and    eax,0x1
c0027a2b:	c1 ef 0a             	shr    edi,0xa
c0027a2e:	21 c7                	and    edi,eax
c0027a30:	01 f7                	add    edi,esi
c0027a32:	83 d3 00             	adc    ebx,0x0
c0027a35:	89 da                	mov    edx,ebx
c0027a37:	eb 03                	jmp    c0027a3c <__muldf3+0x2d4>
c0027a39:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027a3c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027a3f:	89 f8                	mov    eax,edi
c0027a41:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027a44:	83 c4 24             	add    esp,0x24
c0027a47:	5b                   	pop    ebx
c0027a48:	5e                   	pop    esi
c0027a49:	5f                   	pop    edi
c0027a4a:	5d                   	pop    ebp
c0027a4b:	c3                   	ret    

c0027a4c <__divdf3>:
c0027a4c:	55                   	push   ebp
c0027a4d:	89 e5                	mov    ebp,esp
c0027a4f:	57                   	push   edi
c0027a50:	56                   	push   esi
c0027a51:	53                   	push   ebx
c0027a52:	83 ec 2c             	sub    esp,0x2c
c0027a55:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027a58:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027a5b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027a5e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027a61:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027a64:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027a67:	89 ce                	mov    esi,ecx
c0027a69:	89 c8                	mov    eax,ecx
c0027a6b:	c1 f8 14             	sar    eax,0x14
c0027a6e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027a71:	89 f8                	mov    eax,edi
c0027a73:	89 fb                	mov    ebx,edi
c0027a75:	c1 e3 0b             	shl    ebx,0xb
c0027a78:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027a7b:	c1 e6 0b             	shl    esi,0xb
c0027a7e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027a84:	c1 e8 15             	shr    eax,0x15
c0027a87:	09 c6                	or     esi,eax
c0027a89:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027a8c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027a8f:	89 c2                	mov    edx,eax
c0027a91:	c1 fa 14             	sar    edx,0x14
c0027a94:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027a97:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027a9a:	89 de                	mov    esi,ebx
c0027a9c:	c1 e6 0b             	shl    esi,0xb
c0027a9f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027aa2:	c1 e0 0b             	shl    eax,0xb
c0027aa5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027aaa:	c1 eb 15             	shr    ebx,0x15
c0027aad:	09 d8                	or     eax,ebx
c0027aaf:	89 c2                	mov    edx,eax
c0027ab1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027ab4:	25 ff 07 00 00       	and    eax,0x7ff
c0027ab9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027abc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027abf:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027ac5:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027ac8:	29 d8                	sub    eax,ebx
c0027aca:	05 ff 03 00 00       	add    eax,0x3ff
c0027acf:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027ad2:	46                   	inc    esi
c0027ad3:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027ad9:	0f 85 a5 00 00 00    	jne    c0027b84 <__divdf3+0x138>
c0027adf:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027ae2:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027ae5:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027ae9:	74 2a                	je     c0027b15 <__divdf3+0xc9>
c0027aeb:	85 f6                	test   esi,esi
c0027aed:	0f 85 cc 02 00 00    	jne    c0027dbf <__divdf3+0x373>
c0027af3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027af6:	40                   	inc    eax
c0027af7:	a9 fe 07 00 00       	test   eax,0x7fe
c0027afc:	75 26                	jne    c0027b24 <__divdf3+0xd8>
c0027afe:	85 db                	test   ebx,ebx
c0027b00:	74 22                	je     c0027b24 <__divdf3+0xd8>
c0027b02:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027b05:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027b08:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b0b:	09 d0                	or     eax,edx
c0027b0d:	0f 85 ac 02 00 00    	jne    c0027dbf <__divdf3+0x373>
c0027b13:	eb 63                	jmp    c0027b78 <__divdf3+0x12c>
c0027b15:	85 f6                	test   esi,esi
c0027b17:	75 22                	jne    c0027b3b <__divdf3+0xef>
c0027b19:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b1c:	40                   	inc    eax
c0027b1d:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b22:	74 36                	je     c0027b5a <__divdf3+0x10e>
c0027b24:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027b28:	0f 89 91 02 00 00    	jns    c0027dbf <__divdf3+0x373>
c0027b2e:	89 f8                	mov    eax,edi
c0027b30:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027b36:	e9 80 02 00 00       	jmp    c0027dbb <__divdf3+0x36f>
c0027b3b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027b3e:	01 f6                	add    esi,esi
c0027b40:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027b43:	c1 ef 1f             	shr    edi,0x1f
c0027b46:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027b49:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027b4c:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027b4f:	09 f7                	or     edi,esi
c0027b51:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027b54:	78 2e                	js     c0027b84 <__divdf3+0x138>
c0027b56:	89 c8                	mov    eax,ecx
c0027b58:	eb e1                	jmp    c0027b3b <__divdf3+0xef>
c0027b5a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b5d:	09 d0                	or     eax,edx
c0027b5f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027b63:	74 0f                	je     c0027b74 <__divdf3+0x128>
c0027b65:	85 c0                	test   eax,eax
c0027b67:	74 bb                	je     c0027b24 <__divdf3+0xd8>
c0027b69:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027b6c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027b6f:	e9 4b 02 00 00       	jmp    c0027dbf <__divdf3+0x373>
c0027b74:	85 c0                	test   eax,eax
c0027b76:	75 ac                	jne    c0027b24 <__divdf3+0xd8>
c0027b78:	31 ff                	xor    edi,edi
c0027b7a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027b7f:	e9 3b 02 00 00       	jmp    c0027dbf <__divdf3+0x373>
c0027b84:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b87:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027b8a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027b90:	75 6b                	jne    c0027bfd <__divdf3+0x1b1>
c0027b92:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027b95:	09 d6                	or     esi,edx
c0027b97:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027b9b:	74 28                	je     c0027bc5 <__divdf3+0x179>
c0027b9d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027ba0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027ba3:	85 f6                	test   esi,esi
c0027ba5:	0f 85 14 02 00 00    	jne    c0027dbf <__divdf3+0x373>
c0027bab:	31 ff                	xor    edi,edi
c0027bad:	31 c9                	xor    ecx,ecx
c0027baf:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027bb2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027bb5:	0f 89 04 02 00 00    	jns    c0027dbf <__divdf3+0x373>
c0027bbb:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027bc0:	e9 fa 01 00 00       	jmp    c0027dbf <__divdf3+0x373>
c0027bc5:	85 f6                	test   esi,esi
c0027bc7:	75 1b                	jne    c0027be4 <__divdf3+0x198>
c0027bc9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027bcc:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027bcf:	25 00 00 00 80       	and    eax,0x80000000
c0027bd4:	31 c9                	xor    ecx,ecx
c0027bd6:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027bdb:	89 cf                	mov    edi,ecx
c0027bdd:	89 c1                	mov    ecx,eax
c0027bdf:	e9 db 01 00 00       	jmp    c0027dbf <__divdf3+0x373>
c0027be4:	01 d2                	add    edx,edx
c0027be6:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027be9:	c1 eb 1f             	shr    ebx,0x1f
c0027bec:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027bef:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027bf2:	8d 48 01             	lea    ecx,[eax+0x1]
c0027bf5:	09 da                	or     edx,ebx
c0027bf7:	78 04                	js     c0027bfd <__divdf3+0x1b1>
c0027bf9:	89 c8                	mov    eax,ecx
c0027bfb:	eb e7                	jmp    c0027be4 <__divdf3+0x198>
c0027bfd:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027c00:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027c06:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027c0c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027c0f:	39 d6                	cmp    esi,edx
c0027c11:	77 0d                	ja     c0027c20 <__divdf3+0x1d4>
c0027c13:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027c16:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027c19:	72 1b                	jb     c0027c36 <__divdf3+0x1ea>
c0027c1b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027c1e:	75 16                	jne    c0027c36 <__divdf3+0x1ea>
c0027c20:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027c23:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027c26:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027c29:	83 de 00             	sbb    esi,0x0
c0027c2c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027c2f:	ba 01 00 00 00       	mov    edx,0x1
c0027c34:	eb 02                	jmp    c0027c38 <__divdf3+0x1ec>
c0027c36:	31 d2                	xor    edx,edx
c0027c38:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027c3f:	31 ff                	xor    edi,edi
c0027c41:	01 ff                	add    edi,edi
c0027c43:	89 d1                	mov    ecx,edx
c0027c45:	c1 e9 1f             	shr    ecx,0x1f
c0027c48:	09 cf                	or     edi,ecx
c0027c4a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027c4d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027c50:	89 da                	mov    edx,ebx
c0027c52:	89 f3                	mov    ebx,esi
c0027c54:	8d 34 36             	lea    esi,[esi+esi*1]
c0027c57:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c5a:	c1 e9 1f             	shr    ecx,0x1f
c0027c5d:	09 ce                	or     esi,ecx
c0027c5f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c62:	01 c9                	add    ecx,ecx
c0027c64:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027c67:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027c6a:	85 db                	test   ebx,ebx
c0027c6c:	78 29                	js     c0027c97 <__divdf3+0x24b>
c0027c6e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027c71:	72 07                	jb     c0027c7a <__divdf3+0x22e>
c0027c73:	75 3c                	jne    c0027cb1 <__divdf3+0x265>
c0027c75:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027c78:	77 37                	ja     c0027cb1 <__divdf3+0x265>
c0027c7a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027c7d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027c80:	31 d2                	xor    edx,edx
c0027c82:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027c85:	0f 97 c2             	seta   dl
c0027c88:	29 d6                	sub    esi,edx
c0027c8a:	89 d9                	mov    ecx,ebx
c0027c8c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027c8f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027c92:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027c95:	eb 17                	jmp    c0027cae <__divdf3+0x262>
c0027c97:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027c9a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c9d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027ca0:	0f 97 c1             	seta   cl
c0027ca3:	0f b6 c9             	movzx  ecx,cl
c0027ca6:	29 ce                	sub    esi,ecx
c0027ca8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027cab:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027cae:	83 ca 01             	or     edx,0x1
c0027cb1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027cb4:	75 8b                	jne    c0027c41 <__divdf3+0x1f5>
c0027cb6:	c1 e7 09             	shl    edi,0x9
c0027cb9:	89 d1                	mov    ecx,edx
c0027cbb:	c1 e9 17             	shr    ecx,0x17
c0027cbe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027cc1:	09 f3                	or     ebx,esi
c0027cc3:	0f 95 c3             	setne  bl
c0027cc6:	0f b6 db             	movzx  ebx,bl
c0027cc9:	c1 e2 09             	shl    edx,0x9
c0027ccc:	09 d3                	or     ebx,edx
c0027cce:	89 ca                	mov    edx,ecx
c0027cd0:	09 fa                	or     edx,edi
c0027cd2:	78 0c                	js     c0027ce0 <__divdf3+0x294>
c0027cd4:	01 d2                	add    edx,edx
c0027cd6:	89 d9                	mov    ecx,ebx
c0027cd8:	c1 e9 1f             	shr    ecx,0x1f
c0027cdb:	09 ca                	or     edx,ecx
c0027cdd:	01 db                	add    ebx,ebx
c0027cdf:	48                   	dec    eax
c0027ce0:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027ce5:	0f 8f 83 00 00 00    	jg     c0027d6e <__divdf3+0x322>
c0027ceb:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027cf1:	85 c0                	test   eax,eax
c0027cf3:	0f 8f 82 00 00 00    	jg     c0027d7b <__divdf3+0x32f>
c0027cf9:	83 f8 cc             	cmp    eax,0xffffffcc
c0027cfc:	7c 77                	jl     c0027d75 <__divdf3+0x329>
c0027cfe:	be 01 00 00 00       	mov    esi,0x1
c0027d03:	29 c6                	sub    esi,eax
c0027d05:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027d0b:	83 fe 1f             	cmp    esi,0x1f
c0027d0e:	7e 2f                	jle    c0027d3f <__divdf3+0x2f3>
c0027d10:	83 fe 20             	cmp    esi,0x20
c0027d13:	75 0a                	jne    c0027d1f <__divdf3+0x2d3>
c0027d15:	85 db                	test   ebx,ebx
c0027d17:	0f 95 c3             	setne  bl
c0027d1a:	0f b6 db             	movzx  ebx,bl
c0027d1d:	eb 1a                	jmp    c0027d39 <__divdf3+0x2ed>
c0027d1f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027d22:	89 d7                	mov    edi,edx
c0027d24:	d3 e7                	shl    edi,cl
c0027d26:	89 f9                	mov    ecx,edi
c0027d28:	09 d9                	or     ecx,ebx
c0027d2a:	0f 95 c3             	setne  bl
c0027d2d:	0f b6 db             	movzx  ebx,bl
c0027d30:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027d35:	29 c1                	sub    ecx,eax
c0027d37:	d3 ea                	shr    edx,cl
c0027d39:	09 d3                	or     ebx,edx
c0027d3b:	31 c0                	xor    eax,eax
c0027d3d:	eb 3a                	jmp    c0027d79 <__divdf3+0x32d>
c0027d3f:	83 c0 1f             	add    eax,0x1f
c0027d42:	89 d7                	mov    edi,edx
c0027d44:	88 c1                	mov    cl,al
c0027d46:	d3 e7                	shl    edi,cl
c0027d48:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027d4b:	89 df                	mov    edi,ebx
c0027d4d:	89 f1                	mov    ecx,esi
c0027d4f:	d3 ef                	shr    edi,cl
c0027d51:	89 f9                	mov    ecx,edi
c0027d53:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027d56:	09 cf                	or     edi,ecx
c0027d58:	88 c1                	mov    cl,al
c0027d5a:	d3 e3                	shl    ebx,cl
c0027d5c:	85 db                	test   ebx,ebx
c0027d5e:	0f 95 c3             	setne  bl
c0027d61:	0f b6 db             	movzx  ebx,bl
c0027d64:	09 fb                	or     ebx,edi
c0027d66:	89 f1                	mov    ecx,esi
c0027d68:	d3 ea                	shr    edx,cl
c0027d6a:	31 c0                	xor    eax,eax
c0027d6c:	eb 0d                	jmp    c0027d7b <__divdf3+0x32f>
c0027d6e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027d73:	eb 02                	jmp    c0027d77 <__divdf3+0x32b>
c0027d75:	31 c0                	xor    eax,eax
c0027d77:	31 db                	xor    ebx,ebx
c0027d79:	31 d2                	xor    edx,edx
c0027d7b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027d7e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027d81:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027d87:	09 c8                	or     eax,ecx
c0027d89:	c1 e0 14             	shl    eax,0x14
c0027d8c:	89 d1                	mov    ecx,edx
c0027d8e:	c1 e9 0b             	shr    ecx,0xb
c0027d91:	09 c8                	or     eax,ecx
c0027d93:	89 c6                	mov    esi,eax
c0027d95:	89 d9                	mov    ecx,ebx
c0027d97:	c1 e9 0b             	shr    ecx,0xb
c0027d9a:	c1 e2 15             	shl    edx,0x15
c0027d9d:	09 ca                	or     edx,ecx
c0027d9f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027da5:	0f 95 c0             	setne  al
c0027da8:	09 c1                	or     ecx,eax
c0027daa:	83 e1 01             	and    ecx,0x1
c0027dad:	c1 eb 0a             	shr    ebx,0xa
c0027db0:	21 cb                	and    ebx,ecx
c0027db2:	01 d3                	add    ebx,edx
c0027db4:	89 d8                	mov    eax,ebx
c0027db6:	83 d6 00             	adc    esi,0x0
c0027db9:	89 f2                	mov    edx,esi
c0027dbb:	89 c7                	mov    edi,eax
c0027dbd:	89 d1                	mov    ecx,edx
c0027dbf:	89 f8                	mov    eax,edi
c0027dc1:	89 ca                	mov    edx,ecx
c0027dc3:	83 c4 2c             	add    esp,0x2c
c0027dc6:	5b                   	pop    ebx
c0027dc7:	5e                   	pop    esi
c0027dc8:	5f                   	pop    edi
c0027dc9:	5d                   	pop    ebp
c0027dca:	c3                   	ret    

c0027dcb <__floatsidf>:
c0027dcb:	55                   	push   ebp
c0027dcc:	89 e5                	mov    ebp,esp
c0027dce:	56                   	push   esi
c0027dcf:	53                   	push   ebx
c0027dd0:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027dd3:	85 db                	test   ebx,ebx
c0027dd5:	7e 15                	jle    c0027dec <__floatsidf+0x21>
c0027dd7:	0f bd cb             	bsr    ecx,ebx
c0027dda:	83 f1 1f             	xor    ecx,0x1f
c0027ddd:	d3 e3                	shl    ebx,cl
c0027ddf:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027de5:	b8 1e 04 00 00       	mov    eax,0x41e
c0027dea:	eb 21                	jmp    c0027e0d <__floatsidf+0x42>
c0027dec:	b8 00 00 00 00       	mov    eax,0x0
c0027df1:	ba 00 00 00 00       	mov    edx,0x0
c0027df6:	74 2a                	je     c0027e22 <__floatsidf+0x57>
c0027df8:	f7 db                	neg    ebx
c0027dfa:	0f bd cb             	bsr    ecx,ebx
c0027dfd:	83 f1 1f             	xor    ecx,0x1f
c0027e00:	d3 e3                	shl    ebx,cl
c0027e02:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027e08:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027e0d:	29 c8                	sub    eax,ecx
c0027e0f:	c1 e0 14             	shl    eax,0x14
c0027e12:	89 c1                	mov    ecx,eax
c0027e14:	89 de                	mov    esi,ebx
c0027e16:	c1 ee 0b             	shr    esi,0xb
c0027e19:	09 f1                	or     ecx,esi
c0027e1b:	89 ca                	mov    edx,ecx
c0027e1d:	c1 e3 15             	shl    ebx,0x15
c0027e20:	89 d8                	mov    eax,ebx
c0027e22:	5b                   	pop    ebx
c0027e23:	5e                   	pop    esi
c0027e24:	5d                   	pop    ebp
c0027e25:	c3                   	ret    

c0027e26 <__floatunsidf>:
c0027e26:	55                   	push   ebp
c0027e27:	89 e5                	mov    ebp,esp
c0027e29:	56                   	push   esi
c0027e2a:	53                   	push   ebx
c0027e2b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027e2e:	85 db                	test   ebx,ebx
c0027e30:	74 2a                	je     c0027e5c <__floatunsidf+0x36>
c0027e32:	0f bd cb             	bsr    ecx,ebx
c0027e35:	83 f1 1f             	xor    ecx,0x1f
c0027e38:	d3 e3                	shl    ebx,cl
c0027e3a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027e40:	b8 1e 04 00 00       	mov    eax,0x41e
c0027e45:	29 c8                	sub    eax,ecx
c0027e47:	c1 e0 14             	shl    eax,0x14
c0027e4a:	89 c1                	mov    ecx,eax
c0027e4c:	89 de                	mov    esi,ebx
c0027e4e:	c1 ee 0b             	shr    esi,0xb
c0027e51:	09 f1                	or     ecx,esi
c0027e53:	89 ca                	mov    edx,ecx
c0027e55:	c1 e3 15             	shl    ebx,0x15
c0027e58:	89 d8                	mov    eax,ebx
c0027e5a:	eb 04                	jmp    c0027e60 <__floatunsidf+0x3a>
c0027e5c:	31 c0                	xor    eax,eax
c0027e5e:	31 d2                	xor    edx,edx
c0027e60:	5b                   	pop    ebx
c0027e61:	5e                   	pop    esi
c0027e62:	5d                   	pop    ebp
c0027e63:	c3                   	ret    

c0027e64 <__fixdfsi>:
c0027e64:	55                   	push   ebp
c0027e65:	89 e5                	mov    ebp,esp
c0027e67:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027e6a:	89 d1                	mov    ecx,edx
c0027e6c:	c1 e1 0b             	shl    ecx,0xb
c0027e6f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027e75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027e78:	c1 e8 15             	shr    eax,0x15
c0027e7b:	09 c1                	or     ecx,eax
c0027e7d:	c1 fa 14             	sar    edx,0x14
c0027e80:	78 1f                	js     c0027ea1 <__fixdfsi+0x3d>
c0027e82:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027e88:	31 c0                	xor    eax,eax
c0027e8a:	83 fa 1e             	cmp    edx,0x1e
c0027e8d:	77 40                	ja     c0027ecf <__fixdfsi+0x6b>
c0027e8f:	89 c8                	mov    eax,ecx
c0027e91:	0d 00 00 00 80       	or     eax,0x80000000
c0027e96:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027e9b:	29 d1                	sub    ecx,edx
c0027e9d:	d3 e8                	shr    eax,cl
c0027e9f:	eb 2e                	jmp    c0027ecf <__fixdfsi+0x6b>
c0027ea1:	31 c0                	xor    eax,eax
c0027ea3:	81 c2 01 04 00 00    	add    edx,0x401
c0027ea9:	78 24                	js     c0027ecf <__fixdfsi+0x6b>
c0027eab:	83 fa 1e             	cmp    edx,0x1e
c0027eae:	7e 09                	jle    c0027eb9 <__fixdfsi+0x55>
c0027eb0:	83 fa 1f             	cmp    edx,0x1f
c0027eb3:	75 18                	jne    c0027ecd <__fixdfsi+0x69>
c0027eb5:	85 c9                	test   ecx,ecx
c0027eb7:	75 14                	jne    c0027ecd <__fixdfsi+0x69>
c0027eb9:	89 c8                	mov    eax,ecx
c0027ebb:	0d 00 00 00 80       	or     eax,0x80000000
c0027ec0:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027ec5:	29 d1                	sub    ecx,edx
c0027ec7:	d3 e8                	shr    eax,cl
c0027ec9:	f7 d8                	neg    eax
c0027ecb:	eb 02                	jmp    c0027ecf <__fixdfsi+0x6b>
c0027ecd:	31 c0                	xor    eax,eax
c0027ecf:	5d                   	pop    ebp
c0027ed0:	c3                   	ret    

c0027ed1 <__fixunsdfsi>:
c0027ed1:	55                   	push   ebp
c0027ed2:	89 e5                	mov    ebp,esp
c0027ed4:	53                   	push   ebx
c0027ed5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027ed8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027edb:	89 d3                	mov    ebx,edx
c0027edd:	c1 fb 14             	sar    ebx,0x14
c0027ee0:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027ee6:	31 c0                	xor    eax,eax
c0027ee8:	83 fb 1f             	cmp    ebx,0x1f
c0027eeb:	77 1d                	ja     c0027f0a <__fixunsdfsi+0x39>
c0027eed:	89 d0                	mov    eax,edx
c0027eef:	c1 e0 0b             	shl    eax,0xb
c0027ef2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027ef7:	c1 e9 15             	shr    ecx,0x15
c0027efa:	09 c8                	or     eax,ecx
c0027efc:	0d 00 00 00 80       	or     eax,0x80000000
c0027f01:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027f06:	29 d9                	sub    ecx,ebx
c0027f08:	d3 e8                	shr    eax,cl
c0027f0a:	5b                   	pop    ebx
c0027f0b:	5d                   	pop    ebp
c0027f0c:	c3                   	ret    

c0027f0d <__cmpdf2>:
c0027f0d:	55                   	push   ebp
c0027f0e:	89 e5                	mov    ebp,esp
c0027f10:	57                   	push   edi
c0027f11:	56                   	push   esi
c0027f12:	53                   	push   ebx
c0027f13:	83 ec 0c             	sub    esp,0xc
c0027f16:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027f19:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f1c:	89 ca                	mov    edx,ecx
c0027f1e:	c1 ea 14             	shr    edx,0x14
c0027f21:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027f27:	89 cb                	mov    ebx,ecx
c0027f29:	c1 fb 1f             	sar    ebx,0x1f
c0027f2c:	31 da                	xor    edx,ebx
c0027f2e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027f31:	89 df                	mov    edi,ebx
c0027f33:	c1 e7 0b             	shl    edi,0xb
c0027f36:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027f39:	c1 e1 0b             	shl    ecx,0xb
c0027f3c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027f42:	c1 eb 15             	shr    ebx,0x15
c0027f45:	09 d9                	or     ecx,ebx
c0027f47:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027f4a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027f4d:	89 ce                	mov    esi,ecx
c0027f4f:	c1 ee 14             	shr    esi,0x14
c0027f52:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027f58:	89 cb                	mov    ebx,ecx
c0027f5a:	c1 fb 1f             	sar    ebx,0x1f
c0027f5d:	31 de                	xor    esi,ebx
c0027f5f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0027f62:	89 df                	mov    edi,ebx
c0027f64:	c1 e7 0b             	shl    edi,0xb
c0027f67:	c1 e1 0b             	shl    ecx,0xb
c0027f6a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027f70:	c1 eb 15             	shr    ebx,0x15
c0027f73:	09 d9                	or     ecx,ebx
c0027f75:	89 d3                	mov    ebx,edx
c0027f77:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027f7d:	43                   	inc    ebx
c0027f7e:	83 fb 01             	cmp    ebx,0x1
c0027f81:	77 08                	ja     c0027f8b <__cmpdf2+0x7e>
c0027f83:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027f86:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027f89:	75 68                	jne    c0027ff3 <__cmpdf2+0xe6>
c0027f8b:	89 f3                	mov    ebx,esi
c0027f8d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0027f93:	43                   	inc    ebx
c0027f94:	83 fb 01             	cmp    ebx,0x1
c0027f97:	77 06                	ja     c0027f9f <__cmpdf2+0x92>
c0027f99:	89 fb                	mov    ebx,edi
c0027f9b:	09 cb                	or     ebx,ecx
c0027f9d:	75 54                	jne    c0027ff3 <__cmpdf2+0xe6>
c0027f9f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027fa2:	09 f8                	or     eax,edi
c0027fa4:	09 c8                	or     eax,ecx
c0027fa6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0027fa9:	75 12                	jne    c0027fbd <__cmpdf2+0xb0>
c0027fab:	8d 42 01             	lea    eax,[edx+0x1]
c0027fae:	83 f8 01             	cmp    eax,0x1
c0027fb1:	77 0a                	ja     c0027fbd <__cmpdf2+0xb0>
c0027fb3:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027fb6:	31 c0                	xor    eax,eax
c0027fb8:	83 fb 01             	cmp    ebx,0x1
c0027fbb:	76 36                	jbe    c0027ff3 <__cmpdf2+0xe6>
c0027fbd:	b8 01 00 00 00       	mov    eax,0x1
c0027fc2:	39 f2                	cmp    edx,esi
c0027fc4:	7f 2d                	jg     c0027ff3 <__cmpdf2+0xe6>
c0027fc6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0027fcb:	7c 26                	jl     c0027ff3 <__cmpdf2+0xe6>
c0027fcd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027fd0:	77 07                	ja     c0027fd9 <__cmpdf2+0xcc>
c0027fd2:	72 16                	jb     c0027fea <__cmpdf2+0xdd>
c0027fd4:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0027fd7:	76 0a                	jbe    c0027fe3 <__cmpdf2+0xd6>
c0027fd9:	89 d0                	mov    eax,edx
c0027fdb:	c1 f8 1f             	sar    eax,0x1f
c0027fde:	83 c8 01             	or     eax,0x1
c0027fe1:	eb 10                	jmp    c0027ff3 <__cmpdf2+0xe6>
c0027fe3:	b8 00 00 00 00       	mov    eax,0x0
c0027fe8:	73 09                	jae    c0027ff3 <__cmpdf2+0xe6>
c0027fea:	89 d0                	mov    eax,edx
c0027fec:	c1 f8 1f             	sar    eax,0x1f
c0027fef:	83 e0 02             	and    eax,0x2
c0027ff2:	48                   	dec    eax
c0027ff3:	83 c4 0c             	add    esp,0xc
c0027ff6:	5b                   	pop    ebx
c0027ff7:	5e                   	pop    esi
c0027ff8:	5f                   	pop    edi
c0027ff9:	5d                   	pop    ebp
c0027ffa:	c3                   	ret    

c0027ffb <__eqdf2>:
c0027ffb:	55                   	push   ebp
c0027ffc:	89 e5                	mov    ebp,esp
c0027ffe:	50                   	push   eax
c0027fff:	6a 01                	push   0x1
c0028001:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028004:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028007:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002800a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002800d:	e8 fb fe ff ff       	call   c0027f0d <__cmpdf2>
c0028012:	83 c4 18             	add    esp,0x18
c0028015:	c9                   	leave  
c0028016:	c3                   	ret    

c0028017 <__nedf2>:
c0028017:	eb e2                	jmp    c0027ffb <__eqdf2>

c0028019 <__gtdf2>:
c0028019:	55                   	push   ebp
c002801a:	89 e5                	mov    ebp,esp
c002801c:	50                   	push   eax
c002801d:	6a ff                	push   0xffffffff
c002801f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028022:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028025:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028028:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002802b:	e8 dd fe ff ff       	call   c0027f0d <__cmpdf2>
c0028030:	83 c4 18             	add    esp,0x18
c0028033:	c9                   	leave  
c0028034:	c3                   	ret    

c0028035 <__gedf2>:
c0028035:	eb e2                	jmp    c0028019 <__gtdf2>

c0028037 <__ltdf2>:
c0028037:	eb c2                	jmp    c0027ffb <__eqdf2>

c0028039 <__ledf2>:
c0028039:	eb c0                	jmp    c0027ffb <__eqdf2>

c002803b <__truncdfsf2>:
c002803b:	55                   	push   ebp
c002803c:	89 e5                	mov    ebp,esp
c002803e:	57                   	push   edi
c002803f:	56                   	push   esi
c0028040:	53                   	push   ebx
c0028041:	83 ec 0c             	sub    esp,0xc
c0028044:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028047:	89 d1                	mov    ecx,edx
c0028049:	c1 f9 14             	sar    ecx,0x14
c002804c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c002804f:	89 df                	mov    edi,ebx
c0028051:	c1 e7 0b             	shl    edi,0xb
c0028054:	89 d0                	mov    eax,edx
c0028056:	c1 e0 0b             	shl    eax,0xb
c0028059:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002805e:	c1 eb 15             	shr    ebx,0x15
c0028061:	09 d8                	or     eax,ebx
c0028063:	89 cb                	mov    ebx,ecx
c0028065:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002806b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028071:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028077:	0f 86 9e 00 00 00    	jbe    c002811b <__truncdfsf2+0xe0>
c002807d:	85 db                	test   ebx,ebx
c002807f:	75 0a                	jne    c002808b <__truncdfsf2+0x50>
c0028081:	c1 fa 17             	sar    edx,0x17
c0028084:	30 d2                	xor    dl,dl
c0028086:	e9 84 00 00 00       	jmp    c002810f <__truncdfsf2+0xd4>
c002808b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028091:	83 fe 83             	cmp    esi,0xffffff83
c0028094:	7d 4b                	jge    c00280e1 <__truncdfsf2+0xa6>
c0028096:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002809b:	29 f1                	sub    ecx,esi
c002809d:	83 f9 1f             	cmp    ecx,0x1f
c00280a0:	7f 6b                	jg     c002810d <__truncdfsf2+0xd2>
c00280a2:	0d 00 00 00 80       	or     eax,0x80000000
c00280a7:	89 c3                	mov    ebx,eax
c00280a9:	d3 eb                	shr    ebx,cl
c00280ab:	be 01 00 00 00       	mov    esi,0x1
c00280b0:	d3 e6                	shl    esi,cl
c00280b2:	4e                   	dec    esi
c00280b3:	21 f0                	and    eax,esi
c00280b5:	09 f8                	or     eax,edi
c00280b7:	0f 95 c0             	setne  al
c00280ba:	0f b6 c0             	movzx  eax,al
c00280bd:	09 c3                	or     ebx,eax
c00280bf:	89 d9                	mov    ecx,ebx
c00280c1:	c1 e9 08             	shr    ecx,0x8
c00280c4:	f6 c3 7f             	test   bl,0x7f
c00280c7:	0f 95 c0             	setne  al
c00280ca:	09 c8                	or     eax,ecx
c00280cc:	83 e0 01             	and    eax,0x1
c00280cf:	c1 eb 07             	shr    ebx,0x7
c00280d2:	21 c3                	and    ebx,eax
c00280d4:	81 e2 00 00 00 80    	and    edx,0x80000000
c00280da:	09 d1                	or     ecx,edx
c00280dc:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00280df:	eb 76                	jmp    c0028157 <__truncdfsf2+0x11c>
c00280e1:	83 c6 80             	add    esi,0xffffff80
c00280e4:	7e 1d                	jle    c0028103 <__truncdfsf2+0xc8>
c00280e6:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00280ec:	75 0b                	jne    c00280f9 <__truncdfsf2+0xbe>
c00280ee:	09 f8                	or     eax,edi
c00280f0:	74 09                	je     c00280fb <__truncdfsf2+0xc0>
c00280f2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00280f7:	eb 02                	jmp    c00280fb <__truncdfsf2+0xc0>
c00280f9:	31 c0                	xor    eax,eax
c00280fb:	c1 fa 17             	sar    edx,0x17
c00280fe:	80 ca ff             	or     dl,0xff
c0028101:	eb 0e                	jmp    c0028111 <__truncdfsf2+0xd6>
c0028103:	c1 fa 1f             	sar    edx,0x1f
c0028106:	c1 e2 08             	shl    edx,0x8
c0028109:	09 ca                	or     edx,ecx
c002810b:	eb 04                	jmp    c0028111 <__truncdfsf2+0xd6>
c002810d:	31 d2                	xor    edx,edx
c002810f:	31 c0                	xor    eax,eax
c0028111:	c1 e2 17             	shl    edx,0x17
c0028114:	c1 e8 08             	shr    eax,0x8
c0028117:	09 d0                	or     eax,edx
c0028119:	eb 3c                	jmp    c0028157 <__truncdfsf2+0x11c>
c002811b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028121:	89 ca                	mov    edx,ecx
c0028123:	c1 fa 0b             	sar    edx,0xb
c0028126:	c1 e2 08             	shl    edx,0x8
c0028129:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002812c:	31 db                	xor    ebx,ebx
c002812e:	85 ff                	test   edi,edi
c0028130:	0f 95 c3             	setne  bl
c0028133:	09 d8                	or     eax,ebx
c0028135:	89 c3                	mov    ebx,eax
c0028137:	c1 eb 08             	shr    ebx,0x8
c002813a:	a8 7f                	test   al,0x7f
c002813c:	0f 95 c2             	setne  dl
c002813f:	89 d6                	mov    esi,edx
c0028141:	09 de                	or     esi,ebx
c0028143:	83 e6 01             	and    esi,0x1
c0028146:	c1 e8 07             	shr    eax,0x7
c0028149:	21 f0                	and    eax,esi
c002814b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002814e:	09 ca                	or     edx,ecx
c0028150:	c1 e2 17             	shl    edx,0x17
c0028153:	09 da                	or     edx,ebx
c0028155:	01 d0                	add    eax,edx
c0028157:	83 c4 0c             	add    esp,0xc
c002815a:	5b                   	pop    ebx
c002815b:	5e                   	pop    esi
c002815c:	5f                   	pop    edi
c002815d:	5d                   	pop    ebp
c002815e:	c3                   	ret    

c002815f <__extendsfdf2>:
c002815f:	55                   	push   ebp
c0028160:	89 e5                	mov    ebp,esp
c0028162:	57                   	push   edi
c0028163:	56                   	push   esi
c0028164:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028167:	89 d1                	mov    ecx,edx
c0028169:	c1 f9 17             	sar    ecx,0x17
c002816c:	c1 e2 08             	shl    edx,0x8
c002816f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028175:	89 c8                	mov    eax,ecx
c0028177:	80 e4 f8             	and    ah,0xf8
c002817a:	8d 71 01             	lea    esi,[ecx+0x1]
c002817d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028183:	75 27                	jne    c00281ac <__extendsfdf2+0x4d>
c0028185:	81 e1 ff 00 00 00    	and    ecx,0xff
c002818b:	75 18                	jne    c00281a5 <__extendsfdf2+0x46>
c002818d:	85 d2                	test   edx,edx
c002818f:	74 20                	je     c00281b1 <__extendsfdf2+0x52>
c0028191:	41                   	inc    ecx
c0028192:	01 d2                	add    edx,edx
c0028194:	79 fb                	jns    c0028191 <__extendsfdf2+0x32>
c0028196:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002819c:	29 c8                	sub    eax,ecx
c002819e:	05 81 03 00 00       	add    eax,0x381
c00281a3:	eb 0c                	jmp    c00281b1 <__extendsfdf2+0x52>
c00281a5:	05 00 07 00 00       	add    eax,0x700
c00281aa:	eb 05                	jmp    c00281b1 <__extendsfdf2+0x52>
c00281ac:	05 80 03 00 00       	add    eax,0x380
c00281b1:	c1 e0 14             	shl    eax,0x14
c00281b4:	89 c1                	mov    ecx,eax
c00281b6:	89 d0                	mov    eax,edx
c00281b8:	c1 e8 0b             	shr    eax,0xb
c00281bb:	09 c1                	or     ecx,eax
c00281bd:	c1 e2 15             	shl    edx,0x15
c00281c0:	89 d0                	mov    eax,edx
c00281c2:	89 ca                	mov    edx,ecx
c00281c4:	5e                   	pop    esi
c00281c5:	5f                   	pop    edi
c00281c6:	5d                   	pop    ebp
c00281c7:	c3                   	ret    
c00281c8:	66 90                	xchg   ax,ax
c00281ca:	66 90                	xchg   ax,ax
c00281cc:	66 90                	xchg   ax,ax
c00281ce:	66 90                	xchg   ax,ax

c00281d0 <fabs>:
c00281d0:	83 ec 0c             	sub    esp,0xc
c00281d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00281d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00281da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00281de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00281e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00281e7:	dd 04 24             	fld    QWORD PTR [esp]
c00281ea:	83 c4 0c             	add    esp,0xc
c00281ed:	c3                   	ret    
c00281ee:	66 90                	xchg   ax,ax

c00281f0 <lrint>:
c00281f0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00281f4:	83 ec 04             	sub    esp,0x4
c00281f7:	db 1c 24             	fistp  DWORD PTR [esp]
c00281fa:	58                   	pop    eax
c00281fb:	c3                   	ret    

c00281fc <lrintf>:
c00281fc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028200:	83 ec 04             	sub    esp,0x4
c0028203:	db 1c 24             	fistp  DWORD PTR [esp]
c0028206:	58                   	pop    eax
c0028207:	c3                   	ret    

Disassembly of section .init:

c0028208 <_init>:
c0028208:	55                   	push   ebp
c0028209:	89 e5                	mov    ebp,esp
c002820b:	e8 08 7f fd ff       	call   c0000118 <frame_dummy>
c0028210:	e8 5b e0 ff ff       	call   c0026270 <__do_global_ctors_aux>
c0028215:	5d                   	pop    ebp
c0028216:	c3                   	ret    

Disassembly of section .fini:

c0028217 <_fini>:
c0028217:	55                   	push   ebp
c0028218:	89 e5                	mov    ebp,esp
c002821a:	e8 89 7e fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002821f:	5d                   	pop    ebp
c0028220:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028222 <Computer::~Computer()>:
c0028222:	83 ec 0c             	sub    esp,0xc
c0028225:	ba 9c 9d 02 c0       	mov    edx,0xc0029d9c
c002822a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002822e:	89 10                	mov    DWORD PTR [eax],edx
c0028230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028234:	83 ec 0c             	sub    esp,0xc
c0028237:	50                   	push   eax
c0028238:	e8 ff b5 fe ff       	call   c001383c <Device::~Device()>
c002823d:	83 c4 10             	add    esp,0x10
c0028240:	90                   	nop
c0028241:	83 c4 0c             	add    esp,0xc
c0028244:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028246 <Computer::~Computer()>:
c0028246:	83 ec 0c             	sub    esp,0xc
c0028249:	83 ec 0c             	sub    esp,0xc
c002824c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028250:	e8 cd ff ff ff       	call   c0028222 <Computer::~Computer()>
c0028255:	83 c4 10             	add    esp,0x10
c0028258:	83 ec 08             	sub    esp,0x8
c002825b:	68 ec 01 00 00       	push   0x1ec
c0028260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028264:	e8 f4 a1 fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c0028269:	83 c4 10             	add    esp,0x10
c002826c:	83 c4 0c             	add    esp,0xc
c002826f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028270 <idleCommon()>:
c0028270:	83 ec 0c             	sub    esp,0xc
c0028273:	fa                   	cli    
c0028274:	ff 05 08 0b 03 c0    	inc    DWORD PTR ds:0xc0030b08
c002827a:	e8 a0 55 ff ff       	call   c001d81f <schedule()>
c002827f:	a1 08 0b 03 c0       	mov    eax,ds:0xc0030b08
c0028284:	48                   	dec    eax
c0028285:	a3 08 0b 03 c0       	mov    ds:0xc0030b08,eax
c002828a:	75 01                	jne    c002828d <idleCommon()+0x1d>
c002828c:	fb                   	sti    
c002828d:	83 c4 0c             	add    esp,0xc
c0028290:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028292 <LinkedList<UnixFile>::~LinkedList()>:
c0028292:	90                   	nop
c0028293:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028294 <LinkedList<UnixFile>::LinkedList()>:
c0028294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028298:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002829e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00282a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282ad:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00282b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00282be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00282c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00282cd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00282d4:	90                   	nop
c00282d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00282d6 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00282d6:	83 ec 0c             	sub    esp,0xc
c00282d9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00282de:	75 10                	jne    c00282f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00282e0:	83 ec 0c             	sub    esp,0xc
c00282e3:	68 78 9f 02 c0       	push   0xc0029f78
c00282e8:	e8 a8 19 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c00282ed:	83 c4 10             	add    esp,0x10
c00282f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00282f6:	85 c0                	test   eax,eax
c00282f8:	74 34                	je     c002832e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00282fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028301:	85 c0                	test   eax,eax
c0028303:	74 29                	je     c002832e <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028309:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002830c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028310:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028317:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002831b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002831e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028322:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028325:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002832c:	eb 65                	jmp    c0028393 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002832e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028332:	8b 00                	mov    eax,DWORD PTR [eax]
c0028334:	85 c0                	test   eax,eax
c0028336:	75 4b                	jne    c0028383 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002833c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002833f:	85 c0                	test   eax,eax
c0028341:	75 40                	jne    c0028383 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028347:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002834b:	89 10                	mov    DWORD PTR [eax],edx
c002834d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028351:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028355:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002835c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002835f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002836a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002836d:	85 c0                	test   eax,eax
c002836f:	74 22                	je     c0028393 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028371:	83 ec 0c             	sub    esp,0xc
c0028374:	68 9a 9f 02 c0       	push   0xc0029f9a
c0028379:	e8 17 19 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c002837e:	83 c4 10             	add    esp,0x10
c0028381:	eb 10                	jmp    c0028393 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028383:	83 ec 0c             	sub    esp,0xc
c0028386:	68 a4 9f 02 c0       	push   0xc0029fa4
c002838b:	e8 05 19 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0028390:	83 c4 10             	add    esp,0x10
c0028393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028397:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002839a:	8d 50 01             	lea    edx,[eax+0x1]
c002839d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283a1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00283a4:	90                   	nop
c00283a5:	83 c4 0c             	add    esp,0xc
c00283a8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00283aa <LinkedList<UnixFile>::getFirstElement()>:
c00283aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00283ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00283b0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00283b2 <LinkedList<UnixFile>::removeFirst()>:
c00283b2:	83 ec 0c             	sub    esp,0xc
c00283b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00283bb:	85 c0                	test   eax,eax
c00283bd:	75 12                	jne    c00283d1 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00283bf:	83 ec 0c             	sub    esp,0xc
c00283c2:	68 b0 9f 02 c0       	push   0xc0029fb0
c00283c7:	e8 c9 18 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c00283cc:	83 c4 10             	add    esp,0x10
c00283cf:	eb 7e                	jmp    c002844f <LinkedList<UnixFile>::removeFirst()+0x9d>
c00283d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283db:	85 c0                	test   eax,eax
c00283dd:	74 10                	je     c00283ef <LinkedList<UnixFile>::removeFirst()+0x3d>
c00283df:	83 ec 0c             	sub    esp,0xc
c00283e2:	68 fb 9f 02 c0       	push   0xc0029ffb
c00283e7:	e8 a9 18 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c00283ec:	83 c4 10             	add    esp,0x10
c00283ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00283f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283f8:	85 c0                	test   eax,eax
c00283fa:	75 33                	jne    c002842f <LinkedList<UnixFile>::removeFirst()+0x7d>
c00283fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028400:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002840a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028415:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028418:	83 f8 01             	cmp    eax,0x1
c002841b:	74 21                	je     c002843e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002841d:	83 ec 0c             	sub    esp,0xc
c0028420:	68 d4 9f 02 c0       	push   0xc0029fd4
c0028425:	e8 6b 18 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c002842a:	83 c4 10             	add    esp,0x10
c002842d:	eb 0f                	jmp    c002843e <LinkedList<UnixFile>::removeFirst()+0x8c>
c002842f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028433:	8b 00                	mov    eax,DWORD PTR [eax]
c0028435:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002843c:	89 10                	mov    DWORD PTR [eax],edx
c002843e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028442:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028445:	8d 50 ff             	lea    edx,[eax-0x1]
c0028448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002844c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002844f:	83 c4 0c             	add    esp,0xc
c0028452:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0028454 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0028454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028458:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002845b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002845c <DriverlessDevice::~DriverlessDevice()>:
c002845c:	ba 1c a7 02 c0       	mov    edx,0xc002a71c
c0028461:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028465:	89 10                	mov    DWORD PTR [eax],edx
c0028467:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002846b:	50                   	push   eax
c002846c:	e8 cb b3 fe ff       	call   c001383c <Device::~Device()>
c0028471:	83 c4 04             	add    esp,0x4
c0028474:	90                   	nop
c0028475:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028476 <DriverlessDevice::~DriverlessDevice()>:
c0028476:	83 ec 0c             	sub    esp,0xc
c0028479:	83 ec 0c             	sub    esp,0xc
c002847c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028480:	e8 d7 ff ff ff       	call   c002845c <DriverlessDevice::~DriverlessDevice()>
c0028485:	83 c4 10             	add    esp,0x10
c0028488:	83 ec 08             	sub    esp,0x8
c002848b:	68 58 01 00 00       	push   0x158
c0028490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028494:	e8 c4 9f fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c0028499:	83 c4 10             	add    esp,0x10
c002849c:	83 c4 0c             	add    esp,0xc
c002849f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00284a0 <LinkedList<Device>::addElement(Device*)>:
c00284a0:	83 ec 0c             	sub    esp,0xc
c00284a3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00284a8:	75 10                	jne    c00284ba <LinkedList<Device>::addElement(Device*)+0x1a>
c00284aa:	83 ec 0c             	sub    esp,0xc
c00284ad:	68 78 9f 02 c0       	push   0xc0029f78
c00284b2:	e8 de 17 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c00284b7:	83 c4 10             	add    esp,0x10
c00284ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284be:	8b 00                	mov    eax,DWORD PTR [eax]
c00284c0:	85 c0                	test   eax,eax
c00284c2:	74 3a                	je     c00284fe <LinkedList<Device>::addElement(Device*)+0x5e>
c00284c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284cb:	85 c0                	test   eax,eax
c00284cd:	74 2f                	je     c00284fe <LinkedList<Device>::addElement(Device*)+0x5e>
c00284cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284da:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00284e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284f2:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00284fc:	eb 68                	jmp    c0028566 <LinkedList<Device>::addElement(Device*)+0xc6>
c00284fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028502:	8b 00                	mov    eax,DWORD PTR [eax]
c0028504:	85 c0                	test   eax,eax
c0028506:	75 4e                	jne    c0028556 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002850c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002850f:	85 c0                	test   eax,eax
c0028511:	75 43                	jne    c0028556 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028517:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002851b:	89 10                	mov    DWORD PTR [eax],edx
c002851d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028521:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028525:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002852c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002852f:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002853d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028540:	85 c0                	test   eax,eax
c0028542:	74 22                	je     c0028566 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028544:	83 ec 0c             	sub    esp,0xc
c0028547:	68 9a 9f 02 c0       	push   0xc0029f9a
c002854c:	e8 44 17 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0028551:	83 c4 10             	add    esp,0x10
c0028554:	eb 10                	jmp    c0028566 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028556:	83 ec 0c             	sub    esp,0xc
c0028559:	68 a4 9f 02 c0       	push   0xc0029fa4
c002855e:	e8 32 17 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0028563:	83 c4 10             	add    esp,0x10
c0028566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002856a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002856d:	8d 50 01             	lea    edx,[eax+0x1]
c0028570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028574:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028577:	90                   	nop
c0028578:	83 c4 0c             	add    esp,0xc
c002857b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002857c <LinkedList<Device>::LinkedList()>:
c002857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028580:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002858a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028591:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028595:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002859c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00285a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285b5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00285bc:	90                   	nop
c00285bd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00285be <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00285be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00285c4:	85 c0                	test   eax,eax
c00285c6:	75 0e                	jne    c00285d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00285c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285cf:	85 c0                	test   eax,eax
c00285d1:	75 03                	jne    c00285d6 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00285d3:	b0 01                	mov    al,0x1
c00285d5:	c3                   	ret    
c00285d6:	b0 00                	mov    al,0x0
c00285d8:	90                   	nop
c00285d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00285da <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00285da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285de:	8b 00                	mov    eax,DWORD PTR [eax]
c00285e0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00285e2 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00285e2:	83 ec 0c             	sub    esp,0xc
c00285e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00285eb:	85 c0                	test   eax,eax
c00285ed:	75 15                	jne    c0028604 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00285ef:	83 ec 0c             	sub    esp,0xc
c00285f2:	68 b0 9f 02 c0       	push   0xc0029fb0
c00285f7:	e8 99 16 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c00285fc:	83 c4 10             	add    esp,0x10
c00285ff:	e9 88 00 00 00       	jmp    c002868c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028608:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002860b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002860e:	85 c0                	test   eax,eax
c0028610:	0f 95 c0             	setne  al
c0028613:	84 c0                	test   al,al
c0028615:	74 10                	je     c0028627 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028617:	83 ec 0c             	sub    esp,0xc
c002861a:	68 fb 9f 02 c0       	push   0xc0029ffb
c002861f:	e8 71 16 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0028624:	83 c4 10             	add    esp,0x10
c0028627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002862b:	8b 00                	mov    eax,DWORD PTR [eax]
c002862d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028630:	85 c0                	test   eax,eax
c0028632:	0f 94 c0             	sete   al
c0028635:	84 c0                	test   al,al
c0028637:	74 33                	je     c002866c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002863d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028647:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002864e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028652:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028655:	83 f8 01             	cmp    eax,0x1
c0028658:	74 21                	je     c002867b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002865a:	83 ec 0c             	sub    esp,0xc
c002865d:	68 d4 9f 02 c0       	push   0xc0029fd4
c0028662:	e8 2e 16 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0028667:	83 c4 10             	add    esp,0x10
c002866a:	eb 0f                	jmp    c002867b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002866c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028670:	8b 00                	mov    eax,DWORD PTR [eax]
c0028672:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028679:	89 10                	mov    DWORD PTR [eax],edx
c002867b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028682:	8d 50 ff             	lea    edx,[eax-0x1]
c0028685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028689:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002868c:	83 c4 0c             	add    esp,0xc
c002868f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028690 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028690:	83 ec 0c             	sub    esp,0xc
c0028693:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028698:	75 10                	jne    c00286aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002869a:	83 ec 0c             	sub    esp,0xc
c002869d:	68 78 9f 02 c0       	push   0xc0029f78
c00286a2:	e8 ee 15 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c00286a7:	83 c4 10             	add    esp,0x10
c00286aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00286b0:	85 c0                	test   eax,eax
c00286b2:	74 34                	je     c00286e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00286b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286bb:	85 c0                	test   eax,eax
c00286bd:	74 29                	je     c00286e8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c00286bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286ca:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00286cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286df:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00286e6:	eb 65                	jmp    c002874d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00286e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00286ee:	85 c0                	test   eax,eax
c00286f0:	75 4b                	jne    c002873d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00286f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286f9:	85 c0                	test   eax,eax
c00286fb:	75 40                	jne    c002873d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00286fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028701:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028705:	89 10                	mov    DWORD PTR [eax],edx
c0028707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002870b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002870f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028716:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028719:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028724:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028727:	85 c0                	test   eax,eax
c0028729:	74 22                	je     c002874d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002872b:	83 ec 0c             	sub    esp,0xc
c002872e:	68 9a 9f 02 c0       	push   0xc0029f9a
c0028733:	e8 5d 15 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0028738:	83 c4 10             	add    esp,0x10
c002873b:	eb 10                	jmp    c002874d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002873d:	83 ec 0c             	sub    esp,0xc
c0028740:	68 a4 9f 02 c0       	push   0xc0029fa4
c0028745:	e8 4b 15 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c002874a:	83 c4 10             	add    esp,0x10
c002874d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028751:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028754:	8d 50 01             	lea    edx,[eax+0x1]
c0028757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002875b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002875e:	90                   	nop
c002875f:	83 c4 0c             	add    esp,0xc
c0028762:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028764 <ACPI::~ACPI()>:
c0028764:	83 ec 0c             	sub    esp,0xc
c0028767:	ba 80 af 02 c0       	mov    edx,0xc002af80
c002876c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028770:	89 10                	mov    DWORD PTR [eax],edx
c0028772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028776:	83 ec 0c             	sub    esp,0xc
c0028779:	50                   	push   eax
c002877a:	e8 bd b0 fe ff       	call   c001383c <Device::~Device()>
c002877f:	83 c4 10             	add    esp,0x10
c0028782:	90                   	nop
c0028783:	83 c4 0c             	add    esp,0xc
c0028786:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028788 <ACPI::~ACPI()>:
c0028788:	83 ec 0c             	sub    esp,0xc
c002878b:	83 ec 0c             	sub    esp,0xc
c002878e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028792:	e8 cd ff ff ff       	call   c0028764 <ACPI::~ACPI()>
c0028797:	83 c4 10             	add    esp,0x10
c002879a:	83 ec 08             	sub    esp,0x8
c002879d:	68 64 12 00 00       	push   0x1264
c00287a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00287a6:	e8 b2 9c fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c00287ab:	83 c4 10             	add    esp,0x10
c00287ae:	83 c4 0c             	add    esp,0xc
c00287b1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00287b2 <LinkedList<Device>::~LinkedList()>:
c00287b2:	90                   	nop
c00287b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00287b4 <LinkedList<Device>::isEmpty()>:
c00287b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00287ba:	85 c0                	test   eax,eax
c00287bc:	75 0e                	jne    c00287cc <LinkedList<Device>::isEmpty()+0x18>
c00287be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287c5:	85 c0                	test   eax,eax
c00287c7:	75 03                	jne    c00287cc <LinkedList<Device>::isEmpty()+0x18>
c00287c9:	b0 01                	mov    al,0x1
c00287cb:	c3                   	ret    
c00287cc:	b0 00                	mov    al,0x0
c00287ce:	90                   	nop
c00287cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00287d0 <LinkedList<Device>::getFirstElement()>:
c00287d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00287d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00287d6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00287d8 <LinkedList<Device>::removeFirst()>:
c00287d8:	83 ec 0c             	sub    esp,0xc
c00287db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287df:	8b 00                	mov    eax,DWORD PTR [eax]
c00287e1:	85 c0                	test   eax,eax
c00287e3:	75 15                	jne    c00287fa <LinkedList<Device>::removeFirst()+0x22>
c00287e5:	83 ec 0c             	sub    esp,0xc
c00287e8:	68 b0 9f 02 c0       	push   0xc0029fb0
c00287ed:	e8 a3 14 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c00287f2:	83 c4 10             	add    esp,0x10
c00287f5:	e9 87 00 00 00       	jmp    c0028881 <LinkedList<Device>::removeFirst()+0xa9>
c00287fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028801:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028807:	85 c0                	test   eax,eax
c0028809:	74 10                	je     c002881b <LinkedList<Device>::removeFirst()+0x43>
c002880b:	83 ec 0c             	sub    esp,0xc
c002880e:	68 fb 9f 02 c0       	push   0xc0029ffb
c0028813:	e8 7d 14 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0028818:	83 c4 10             	add    esp,0x10
c002881b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002881f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028821:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028827:	85 c0                	test   eax,eax
c0028829:	75 33                	jne    c002885e <LinkedList<Device>::removeFirst()+0x86>
c002882b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028839:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028844:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028847:	83 f8 01             	cmp    eax,0x1
c002884a:	74 24                	je     c0028870 <LinkedList<Device>::removeFirst()+0x98>
c002884c:	83 ec 0c             	sub    esp,0xc
c002884f:	68 d4 9f 02 c0       	push   0xc0029fd4
c0028854:	e8 3c 14 ff ff       	call   c0019c95 <Krnl::panic(char const*)>
c0028859:	83 c4 10             	add    esp,0x10
c002885c:	eb 12                	jmp    c0028870 <LinkedList<Device>::removeFirst()+0x98>
c002885e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028862:	8b 00                	mov    eax,DWORD PTR [eax]
c0028864:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002886a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886e:	89 10                	mov    DWORD PTR [eax],edx
c0028870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028874:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028877:	8d 50 ff             	lea    edx,[eax-0x1]
c002887a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028881:	83 c4 0c             	add    esp,0xc
c0028884:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028886 <CPU::~CPU()>:
c0028886:	83 ec 0c             	sub    esp,0xc
c0028889:	ba d0 b1 02 c0       	mov    edx,0xc002b1d0
c002888e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028892:	89 10                	mov    DWORD PTR [eax],edx
c0028894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028898:	83 ec 0c             	sub    esp,0xc
c002889b:	50                   	push   eax
c002889c:	e8 9b af fe ff       	call   c001383c <Device::~Device()>
c00288a1:	83 c4 10             	add    esp,0x10
c00288a4:	90                   	nop
c00288a5:	83 c4 0c             	add    esp,0xc
c00288a8:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00288aa <CPU::~CPU()>:
c00288aa:	83 ec 0c             	sub    esp,0xc
c00288ad:	83 ec 0c             	sub    esp,0xc
c00288b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288b4:	e8 cd ff ff ff       	call   c0028886 <CPU::~CPU()>
c00288b9:	83 c4 10             	add    esp,0x10
c00288bc:	83 ec 08             	sub    esp,0x8
c00288bf:	68 98 11 00 00       	push   0x1198
c00288c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00288c8:	e8 90 9b fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c00288cd:	83 c4 10             	add    esp,0x10
c00288d0:	83 c4 0c             	add    esp,0xc
c00288d3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00288d4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00288d4:	90                   	nop
c00288d5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00288d6 <ThreadControlBlock::ThreadControlBlock()>:
c00288d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288da:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288e5:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00288ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288f0:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00288f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288fb:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028906:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c002890d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028911:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028915:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028919:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c002891d:	90                   	nop
c002891e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028920 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028924:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002892a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002892e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028935:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028939:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028944:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002894a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002894e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028955:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028959:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028960:	90                   	nop
c0028961:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028962 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028966:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028969:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002896a <Vm::_FPUState::_FPUState()>:
c002896a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002896e:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028975:	90                   	nop
c0028976:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028978 <PCI::~PCI()>:
c0028978:	83 ec 0c             	sub    esp,0xc
c002897b:	ba fc bc 02 c0       	mov    edx,0xc002bcfc
c0028980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028984:	89 10                	mov    DWORD PTR [eax],edx
c0028986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898a:	83 ec 0c             	sub    esp,0xc
c002898d:	50                   	push   eax
c002898e:	e8 79 a8 fe ff       	call   c001320c <Bus::~Bus()>
c0028993:	83 c4 10             	add    esp,0x10
c0028996:	90                   	nop
c0028997:	83 c4 0c             	add    esp,0xc
c002899a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002899c <PCI::~PCI()>:
c002899c:	83 ec 0c             	sub    esp,0xc
c002899f:	83 ec 0c             	sub    esp,0xc
c00289a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289a6:	e8 cd ff ff ff       	call   c0028978 <PCI::~PCI()>
c00289ab:	83 c4 10             	add    esp,0x10
c00289ae:	83 ec 08             	sub    esp,0x8
c00289b1:	68 5c 01 00 00       	push   0x15c
c00289b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289ba:	e8 9e 9a fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c00289bf:	83 c4 10             	add    esp,0x10
c00289c2:	83 c4 0c             	add    esp,0xc
c00289c5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00289c6 <IDE::~IDE()>:
c00289c6:	83 ec 0c             	sub    esp,0xc
c00289c9:	ba b0 bd 02 c0       	mov    edx,0xc002bdb0
c00289ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d2:	89 10                	mov    DWORD PTR [eax],edx
c00289d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d8:	83 ec 0c             	sub    esp,0xc
c00289db:	50                   	push   eax
c00289dc:	e8 71 b3 fe ff       	call   c0013d52 <HardDiskController::~HardDiskController()>
c00289e1:	83 c4 10             	add    esp,0x10
c00289e4:	90                   	nop
c00289e5:	83 c4 0c             	add    esp,0xc
c00289e8:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00289ea <IDE::~IDE()>:
c00289ea:	83 ec 0c             	sub    esp,0xc
c00289ed:	83 ec 0c             	sub    esp,0xc
c00289f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289f4:	e8 cd ff ff ff       	call   c00289c6 <IDE::~IDE()>
c00289f9:	83 c4 10             	add    esp,0x10
c00289fc:	83 ec 08             	sub    esp,0x8
c00289ff:	68 70 02 00 00       	push   0x270
c0028a04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a08:	e8 50 9a fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c0028a0d:	83 c4 10             	add    esp,0x10
c0028a10:	83 c4 0c             	add    esp,0xc
c0028a13:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028a14 <SATABus::~SATABus()>:
c0028a14:	83 ec 0c             	sub    esp,0xc
c0028a17:	ba 28 be 02 c0       	mov    edx,0xc002be28
c0028a1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a20:	89 10                	mov    DWORD PTR [eax],edx
c0028a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a26:	83 ec 0c             	sub    esp,0xc
c0028a29:	50                   	push   eax
c0028a2a:	e8 23 b3 fe ff       	call   c0013d52 <HardDiskController::~HardDiskController()>
c0028a2f:	83 c4 10             	add    esp,0x10
c0028a32:	90                   	nop
c0028a33:	83 c4 0c             	add    esp,0xc
c0028a36:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028a38 <SATABus::~SATABus()>:
c0028a38:	83 ec 0c             	sub    esp,0xc
c0028a3b:	83 ec 0c             	sub    esp,0xc
c0028a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a42:	e8 cd ff ff ff       	call   c0028a14 <SATABus::~SATABus()>
c0028a47:	83 c4 10             	add    esp,0x10
c0028a4a:	83 ec 08             	sub    esp,0x8
c0028a4d:	68 64 01 00 00       	push   0x164
c0028a52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a56:	e8 02 9a fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c0028a5b:	83 c4 10             	add    esp,0x10
c0028a5e:	83 c4 0c             	add    esp,0xc
c0028a61:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028a62 <ATA::~ATA()>:
c0028a62:	83 ec 0c             	sub    esp,0xc
c0028a65:	ba 74 be 02 c0       	mov    edx,0xc002be74
c0028a6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a6e:	89 10                	mov    DWORD PTR [eax],edx
c0028a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a74:	83 ec 0c             	sub    esp,0xc
c0028a77:	50                   	push   eax
c0028a78:	e8 b7 b3 fe ff       	call   c0013e34 <PhysicalDisk::~PhysicalDisk()>
c0028a7d:	83 c4 10             	add    esp,0x10
c0028a80:	90                   	nop
c0028a81:	83 c4 0c             	add    esp,0xc
c0028a84:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028a86 <ATA::~ATA()>:
c0028a86:	83 ec 0c             	sub    esp,0xc
c0028a89:	83 ec 0c             	sub    esp,0xc
c0028a8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a90:	e8 cd ff ff ff       	call   c0028a62 <ATA::~ATA()>
c0028a95:	83 c4 10             	add    esp,0x10
c0028a98:	83 ec 08             	sub    esp,0x8
c0028a9b:	68 7c 01 00 00       	push   0x17c
c0028aa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028aa4:	e8 b4 99 fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c0028aa9:	83 c4 10             	add    esp,0x10
c0028aac:	83 c4 0c             	add    esp,0xc
c0028aaf:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028ab0 <ATAPI::~ATAPI()>:
c0028ab0:	83 ec 0c             	sub    esp,0xc
c0028ab3:	ba ac be 02 c0       	mov    edx,0xc002beac
c0028ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028abc:	89 10                	mov    DWORD PTR [eax],edx
c0028abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac2:	83 ec 0c             	sub    esp,0xc
c0028ac5:	50                   	push   eax
c0028ac6:	e8 69 b3 fe ff       	call   c0013e34 <PhysicalDisk::~PhysicalDisk()>
c0028acb:	83 c4 10             	add    esp,0x10
c0028ace:	90                   	nop
c0028acf:	83 c4 0c             	add    esp,0xc
c0028ad2:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028ad4 <ATAPI::~ATAPI()>:
c0028ad4:	83 ec 0c             	sub    esp,0xc
c0028ad7:	83 ec 0c             	sub    esp,0xc
c0028ada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ade:	e8 cd ff ff ff       	call   c0028ab0 <ATAPI::~ATAPI()>
c0028ae3:	83 c4 10             	add    esp,0x10
c0028ae6:	83 ec 08             	sub    esp,0x8
c0028ae9:	68 80 01 00 00       	push   0x180
c0028aee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028af2:	e8 66 99 fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c0028af7:	83 c4 10             	add    esp,0x10
c0028afa:	83 c4 0c             	add    esp,0xc
c0028afd:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028afe <SATA::~SATA()>:
c0028afe:	83 ec 0c             	sub    esp,0xc
c0028b01:	ba 60 bf 02 c0       	mov    edx,0xc002bf60
c0028b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b0a:	89 10                	mov    DWORD PTR [eax],edx
c0028b0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b10:	83 ec 0c             	sub    esp,0xc
c0028b13:	50                   	push   eax
c0028b14:	e8 1b b3 fe ff       	call   c0013e34 <PhysicalDisk::~PhysicalDisk()>
c0028b19:	83 c4 10             	add    esp,0x10
c0028b1c:	90                   	nop
c0028b1d:	83 c4 0c             	add    esp,0xc
c0028b20:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028b22 <SATA::~SATA()>:
c0028b22:	83 ec 0c             	sub    esp,0xc
c0028b25:	83 ec 0c             	sub    esp,0xc
c0028b28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b2c:	e8 cd ff ff ff       	call   c0028afe <SATA::~SATA()>
c0028b31:	83 c4 10             	add    esp,0x10
c0028b34:	83 ec 08             	sub    esp,0x8
c0028b37:	68 7c 01 00 00       	push   0x17c
c0028b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b40:	e8 18 99 fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c0028b45:	83 c4 10             	add    esp,0x10
c0028b48:	83 c4 0c             	add    esp,0xc
c0028b4b:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028b4c <SATAPI::~SATAPI()>:
c0028b4c:	83 ec 0c             	sub    esp,0xc
c0028b4f:	ba 3c c0 02 c0       	mov    edx,0xc002c03c
c0028b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b58:	89 10                	mov    DWORD PTR [eax],edx
c0028b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5e:	83 ec 0c             	sub    esp,0xc
c0028b61:	50                   	push   eax
c0028b62:	e8 cd b2 fe ff       	call   c0013e34 <PhysicalDisk::~PhysicalDisk()>
c0028b67:	83 c4 10             	add    esp,0x10
c0028b6a:	90                   	nop
c0028b6b:	83 c4 0c             	add    esp,0xc
c0028b6e:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028b70 <SATAPI::~SATAPI()>:
c0028b70:	83 ec 0c             	sub    esp,0xc
c0028b73:	83 ec 0c             	sub    esp,0xc
c0028b76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b7a:	e8 cd ff ff ff       	call   c0028b4c <SATAPI::~SATAPI()>
c0028b7f:	83 c4 10             	add    esp,0x10
c0028b82:	83 ec 08             	sub    esp,0x8
c0028b85:	68 80 01 00 00       	push   0x180
c0028b8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b8e:	e8 ca 98 fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c0028b93:	83 c4 10             	add    esp,0x10
c0028b96:	83 c4 0c             	add    esp,0xc
c0028b99:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028b9a <AVX::~AVX()>:
c0028b9a:	83 ec 0c             	sub    esp,0xc
c0028b9d:	ba 7c c0 02 c0       	mov    edx,0xc002c07c
c0028ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba6:	89 10                	mov    DWORD PTR [eax],edx
c0028ba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bac:	83 ec 0c             	sub    esp,0xc
c0028baf:	50                   	push   eax
c0028bb0:	e8 03 b3 fe ff       	call   c0013eb8 <FPU::~FPU()>
c0028bb5:	83 c4 10             	add    esp,0x10
c0028bb8:	90                   	nop
c0028bb9:	83 c4 0c             	add    esp,0xc
c0028bbc:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028bbe <AVX::~AVX()>:
c0028bbe:	83 ec 0c             	sub    esp,0xc
c0028bc1:	83 ec 0c             	sub    esp,0xc
c0028bc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bc8:	e8 cd ff ff ff       	call   c0028b9a <AVX::~AVX()>
c0028bcd:	83 c4 10             	add    esp,0x10
c0028bd0:	83 ec 08             	sub    esp,0x8
c0028bd3:	68 58 01 00 00       	push   0x158
c0028bd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bdc:	e8 7c 98 fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c0028be1:	83 c4 10             	add    esp,0x10
c0028be4:	83 c4 0c             	add    esp,0xc
c0028be7:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028be8 <MMX::~MMX()>:
c0028be8:	83 ec 0c             	sub    esp,0xc
c0028beb:	ba bc c0 02 c0       	mov    edx,0xc002c0bc
c0028bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf4:	89 10                	mov    DWORD PTR [eax],edx
c0028bf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfa:	83 ec 0c             	sub    esp,0xc
c0028bfd:	50                   	push   eax
c0028bfe:	e8 b5 b2 fe ff       	call   c0013eb8 <FPU::~FPU()>
c0028c03:	83 c4 10             	add    esp,0x10
c0028c06:	90                   	nop
c0028c07:	83 c4 0c             	add    esp,0xc
c0028c0a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028c0c <MMX::~MMX()>:
c0028c0c:	83 ec 0c             	sub    esp,0xc
c0028c0f:	83 ec 0c             	sub    esp,0xc
c0028c12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c16:	e8 cd ff ff ff       	call   c0028be8 <MMX::~MMX()>
c0028c1b:	83 c4 10             	add    esp,0x10
c0028c1e:	83 ec 08             	sub    esp,0x8
c0028c21:	68 58 01 00 00       	push   0x158
c0028c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c2a:	e8 2e 98 fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c0028c2f:	83 c4 10             	add    esp,0x10
c0028c32:	83 c4 0c             	add    esp,0xc
c0028c35:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028c36 <SSE::~SSE()>:
c0028c36:	83 ec 0c             	sub    esp,0xc
c0028c39:	ba fc c0 02 c0       	mov    edx,0xc002c0fc
c0028c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c42:	89 10                	mov    DWORD PTR [eax],edx
c0028c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c48:	83 ec 0c             	sub    esp,0xc
c0028c4b:	50                   	push   eax
c0028c4c:	e8 67 b2 fe ff       	call   c0013eb8 <FPU::~FPU()>
c0028c51:	83 c4 10             	add    esp,0x10
c0028c54:	90                   	nop
c0028c55:	83 c4 0c             	add    esp,0xc
c0028c58:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028c5a <SSE::~SSE()>:
c0028c5a:	83 ec 0c             	sub    esp,0xc
c0028c5d:	83 ec 0c             	sub    esp,0xc
c0028c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c64:	e8 cd ff ff ff       	call   c0028c36 <SSE::~SSE()>
c0028c69:	83 c4 10             	add    esp,0x10
c0028c6c:	83 ec 08             	sub    esp,0x8
c0028c6f:	68 58 01 00 00       	push   0x158
c0028c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c78:	e8 e0 97 fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c0028c7d:	83 c4 10             	add    esp,0x10
c0028c80:	83 c4 0c             	add    esp,0xc
c0028c83:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028c84 <x87::~x87()>:
c0028c84:	83 ec 0c             	sub    esp,0xc
c0028c87:	ba 3c c1 02 c0       	mov    edx,0xc002c13c
c0028c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c90:	89 10                	mov    DWORD PTR [eax],edx
c0028c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c96:	83 ec 0c             	sub    esp,0xc
c0028c99:	50                   	push   eax
c0028c9a:	e8 19 b2 fe ff       	call   c0013eb8 <FPU::~FPU()>
c0028c9f:	83 c4 10             	add    esp,0x10
c0028ca2:	90                   	nop
c0028ca3:	83 c4 0c             	add    esp,0xc
c0028ca6:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028ca8 <x87::~x87()>:
c0028ca8:	83 ec 0c             	sub    esp,0xc
c0028cab:	83 ec 0c             	sub    esp,0xc
c0028cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cb2:	e8 cd ff ff ff       	call   c0028c84 <x87::~x87()>
c0028cb7:	83 c4 10             	add    esp,0x10
c0028cba:	83 ec 08             	sub    esp,0x8
c0028cbd:	68 58 01 00 00       	push   0x158
c0028cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc6:	e8 92 97 fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c0028ccb:	83 c4 10             	add    esp,0x10
c0028cce:	83 c4 0c             	add    esp,0xc
c0028cd1:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028cd2 <IOAPIC::~IOAPIC()>:
c0028cd2:	83 ec 0c             	sub    esp,0xc
c0028cd5:	ba 94 c2 02 c0       	mov    edx,0xc002c294
c0028cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cde:	89 10                	mov    DWORD PTR [eax],edx
c0028ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce4:	83 ec 0c             	sub    esp,0xc
c0028ce7:	50                   	push   eax
c0028ce8:	e8 4f ab fe ff       	call   c001383c <Device::~Device()>
c0028ced:	83 c4 10             	add    esp,0x10
c0028cf0:	90                   	nop
c0028cf1:	83 c4 0c             	add    esp,0xc
c0028cf4:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028cf6 <IOAPIC::~IOAPIC()>:
c0028cf6:	83 ec 0c             	sub    esp,0xc
c0028cf9:	83 ec 0c             	sub    esp,0xc
c0028cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d00:	e8 cd ff ff ff       	call   c0028cd2 <IOAPIC::~IOAPIC()>
c0028d05:	83 c4 10             	add    esp,0x10
c0028d08:	83 ec 08             	sub    esp,0x8
c0028d0b:	68 68 01 00 00       	push   0x168
c0028d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d14:	e8 44 97 fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c0028d19:	83 c4 10             	add    esp,0x10
c0028d1c:	83 c4 0c             	add    esp,0xc
c0028d1f:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028d20 <APIC::~APIC()>:
c0028d20:	83 ec 0c             	sub    esp,0xc
c0028d23:	ba 4c c2 02 c0       	mov    edx,0xc002c24c
c0028d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d2c:	89 10                	mov    DWORD PTR [eax],edx
c0028d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d32:	83 ec 0c             	sub    esp,0xc
c0028d35:	50                   	push   eax
c0028d36:	e8 47 b6 fe ff       	call   c0014382 <InterruptController::~InterruptController()>
c0028d3b:	83 c4 10             	add    esp,0x10
c0028d3e:	90                   	nop
c0028d3f:	83 c4 0c             	add    esp,0xc
c0028d42:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028d44 <APIC::~APIC()>:
c0028d44:	83 ec 0c             	sub    esp,0xc
c0028d47:	83 ec 0c             	sub    esp,0xc
c0028d4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d4e:	e8 cd ff ff ff       	call   c0028d20 <APIC::~APIC()>
c0028d53:	83 c4 10             	add    esp,0x10
c0028d56:	83 ec 08             	sub    esp,0x8
c0028d59:	68 58 21 00 00       	push   0x2158
c0028d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d62:	e8 f6 96 fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c0028d67:	83 c4 10             	add    esp,0x10
c0028d6a:	83 c4 0c             	add    esp,0xc
c0028d6d:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028d6e <PIC::~PIC()>:
c0028d6e:	83 ec 0c             	sub    esp,0xc
c0028d71:	ba e4 c2 02 c0       	mov    edx,0xc002c2e4
c0028d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7a:	89 10                	mov    DWORD PTR [eax],edx
c0028d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d80:	83 ec 0c             	sub    esp,0xc
c0028d83:	50                   	push   eax
c0028d84:	e8 f9 b5 fe ff       	call   c0014382 <InterruptController::~InterruptController()>
c0028d89:	83 c4 10             	add    esp,0x10
c0028d8c:	90                   	nop
c0028d8d:	83 c4 0c             	add    esp,0xc
c0028d90:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028d92 <PIC::~PIC()>:
c0028d92:	83 ec 0c             	sub    esp,0xc
c0028d95:	83 ec 0c             	sub    esp,0xc
c0028d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d9c:	e8 cd ff ff ff       	call   c0028d6e <PIC::~PIC()>
c0028da1:	83 c4 10             	add    esp,0x10
c0028da4:	83 ec 08             	sub    esp,0x8
c0028da7:	68 58 21 00 00       	push   0x2158
c0028dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028db0:	e8 a8 96 fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c0028db5:	83 c4 10             	add    esp,0x10
c0028db8:	83 c4 0c             	add    esp,0xc
c0028dbb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028dbc <APICTimer::~APICTimer()>:
c0028dbc:	83 ec 0c             	sub    esp,0xc
c0028dbf:	ba 38 c3 02 c0       	mov    edx,0xc002c338
c0028dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dc8:	89 10                	mov    DWORD PTR [eax],edx
c0028dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dce:	83 ec 0c             	sub    esp,0xc
c0028dd1:	50                   	push   eax
c0028dd2:	e8 f7 d5 fe ff       	call   c00163ce <Timer::~Timer()>
c0028dd7:	83 c4 10             	add    esp,0x10
c0028dda:	90                   	nop
c0028ddb:	83 c4 0c             	add    esp,0xc
c0028dde:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028de0 <APICTimer::~APICTimer()>:
c0028de0:	83 ec 0c             	sub    esp,0xc
c0028de3:	83 ec 0c             	sub    esp,0xc
c0028de6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dea:	e8 cd ff ff ff       	call   c0028dbc <APICTimer::~APICTimer()>
c0028def:	83 c4 10             	add    esp,0x10
c0028df2:	83 ec 08             	sub    esp,0x8
c0028df5:	68 60 01 00 00       	push   0x160
c0028dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dfe:	e8 5a 96 fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c0028e03:	83 c4 10             	add    esp,0x10
c0028e06:	83 c4 0c             	add    esp,0xc
c0028e09:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028e0a <PIT::~PIT()>:
c0028e0a:	83 ec 0c             	sub    esp,0xc
c0028e0d:	ba 88 c3 02 c0       	mov    edx,0xc002c388
c0028e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e16:	89 10                	mov    DWORD PTR [eax],edx
c0028e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e1c:	83 ec 0c             	sub    esp,0xc
c0028e1f:	50                   	push   eax
c0028e20:	e8 a9 d5 fe ff       	call   c00163ce <Timer::~Timer()>
c0028e25:	83 c4 10             	add    esp,0x10
c0028e28:	90                   	nop
c0028e29:	83 c4 0c             	add    esp,0xc
c0028e2c:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028e2e <PIT::~PIT()>:
c0028e2e:	83 ec 0c             	sub    esp,0xc
c0028e31:	83 ec 0c             	sub    esp,0xc
c0028e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e38:	e8 cd ff ff ff       	call   c0028e0a <PIT::~PIT()>
c0028e3d:	83 c4 10             	add    esp,0x10
c0028e40:	83 ec 08             	sub    esp,0x8
c0028e43:	68 5c 01 00 00       	push   0x15c
c0028e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e4c:	e8 0c 96 fe ff       	call   c001245d <operator delete(void*, unsigned long)>
c0028e51:	83 c4 10             	add    esp,0x10
c0028e54:	83 c4 0c             	add    esp,0xc
c0028e57:	c3                   	ret    
