
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 9d 78 00 00       	call   c00078bd <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e8 1b 02 c0       	mov    eax,0xc0021be8
c0000025:	3d e8 1b 02 c0       	cmp    eax,0xc0021be8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e8 1b 02 c0       	push   0xc0021be8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e8 1b 02 c0       	mov    eax,0xc0021be8
c0000051:	2d e8 1b 02 c0       	sub    eax,0xc0021be8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e8 1b 02 c0       	push   0xc0021be8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 30 02 c0 00 	cmp    BYTE PTR ds:0xc00230c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 98 eb 01 c0       	mov    ebx,0xc001eb98
c0000097:	81 eb 94 eb 01 c0    	sub    ebx,0xc001eb94
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 94 eb 01 c0       	mov    esi,0xc001eb94
c00000a6:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 30 02 c0       	mov    ds:0xc00230c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e8 1b 02 c0       	push   0xc0021be8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 30 02 c0 01 	mov    BYTE PTR ds:0xc00230c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 30 02 c0       	push   0xc00230c8
c0000108:	68 e8 1b 02 c0       	push   0xc0021be8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 d3 40 01 00       	call   c0014380 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 52 a1 00 00       	call   c000a417 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 b1 40 01 00       	call   c0014380 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 c6 45 01 00       	call   c00148b4 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 51 4c 01 00       	call   c0014f48 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 3e 02 c0 	lgdtd  ds:0xc0023ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 73 00 01 00       	jmp    c00103f2 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 1c                	je     c00003ae <memcmp+0x2e>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000396:	38 cb                	cmp    bl,cl
c0000398:	75 26                	jne    c00003c0 <memcmp+0x40>
c000039a:	01 c6                	add    esi,eax
c000039c:	eb 0a                	jmp    c00003a8 <memcmp+0x28>
c000039e:	66 90                	xchg   ax,ax
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a4:	38 d9                	cmp    cl,bl
c00003a6:	75 18                	jne    c00003c0 <memcmp+0x40>
c00003a8:	40                   	inc    eax
c00003a9:	42                   	inc    edx
c00003aa:	39 f0                	cmp    eax,esi
c00003ac:	75 f2                	jne    c00003a0 <memcmp+0x20>
c00003ae:	5b                   	pop    ebx
c00003af:	31 c0                	xor    eax,eax
c00003b1:	5e                   	pop    esi
c00003b2:	c3                   	ret    
c00003b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003c0:	31 c0                	xor    eax,eax
c00003c2:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003c8:	88 c8                	mov    al,cl
c00003ca:	29 d8                	sub    eax,ebx
c00003cc:	5b                   	pop    ebx
c00003cd:	5e                   	pop    esi
c00003ce:	c3                   	ret    
c00003cf:	90                   	nop

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 98 00 00 00    	jae    c0000480 <memmove+0xb0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	74 7f                	je     c000046b <memmove+0x9b>
c00003ec:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003ef:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f2:	39 cd                	cmp    ebp,ecx
c00003f4:	0f 93 c1             	setae  cl
c00003f7:	39 f3                	cmp    ebx,esi
c00003f9:	0f 93 c0             	setae  al
c00003fc:	89 c6                	mov    esi,eax
c00003fe:	09 ce                	or     esi,ecx
c0000400:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000403:	83 f9 0c             	cmp    ecx,0xc
c0000406:	89 f0                	mov    eax,esi
c0000408:	0f 97 c1             	seta   cl
c000040b:	84 c8                	test   al,cl
c000040d:	0f 84 8d 00 00 00    	je     c00004a0 <memmove+0xd0>
c0000413:	89 e9                	mov    ecx,ebp
c0000415:	09 d9                	or     ecx,ebx
c0000417:	83 e1 03             	and    ecx,0x3
c000041a:	0f 85 80 00 00 00    	jne    c00004a0 <memmove+0xd0>
c0000420:	89 d7                	mov    edi,edx
c0000422:	89 d9                	mov    ecx,ebx
c0000424:	83 e7 fc             	and    edi,0xfffffffc
c0000427:	89 ee                	mov    esi,ebp
c0000429:	01 df                	add    edi,ebx
c000042b:	90                   	nop
c000042c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000430:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000432:	83 c1 04             	add    ecx,0x4
c0000435:	89 06                	mov    DWORD PTR [esi],eax
c0000437:	83 c6 04             	add    esi,0x4
c000043a:	39 f9                	cmp    ecx,edi
c000043c:	75 f2                	jne    c0000430 <memmove+0x60>
c000043e:	89 d1                	mov    ecx,edx
c0000440:	89 d7                	mov    edi,edx
c0000442:	83 e1 fc             	and    ecx,0xfffffffc
c0000445:	29 cf                	sub    edi,ecx
c0000447:	01 cb                	add    ebx,ecx
c0000449:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000044d:	39 ca                	cmp    edx,ecx
c000044f:	74 1a                	je     c000046b <memmove+0x9b>
c0000451:	8a 03                	mov    al,BYTE PTR [ebx]
c0000453:	83 ff 01             	cmp    edi,0x1
c0000456:	88 06                	mov    BYTE PTR [esi],al
c0000458:	74 11                	je     c000046b <memmove+0x9b>
c000045a:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000045d:	83 ff 02             	cmp    edi,0x2
c0000460:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000463:	74 06                	je     c000046b <memmove+0x9b>
c0000465:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000468:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000046b:	5b                   	pop    ebx
c000046c:	89 e8                	mov    eax,ebp
c000046e:	5e                   	pop    esi
c000046f:	5f                   	pop    edi
c0000470:	5d                   	pop    ebp
c0000471:	c3                   	ret    
c0000472:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000479:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000480:	76 e9                	jbe    c000046b <memmove+0x9b>
c0000482:	85 d2                	test   edx,edx
c0000484:	74 e5                	je     c000046b <memmove+0x9b>
c0000486:	4b                   	dec    ebx
c0000487:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000048a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000490:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000493:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000496:	4a                   	dec    edx
c0000497:	75 f7                	jne    c0000490 <memmove+0xc0>
c0000499:	5b                   	pop    ebx
c000049a:	89 e8                	mov    eax,ebp
c000049c:	5e                   	pop    esi
c000049d:	5f                   	pop    edi
c000049e:	5d                   	pop    ebp
c000049f:	c3                   	ret    
c00004a0:	01 ea                	add    edx,ebp
c00004a2:	89 e9                	mov    ecx,ebp
c00004a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004b0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004b2:	41                   	inc    ecx
c00004b3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004b6:	43                   	inc    ebx
c00004b7:	39 d1                	cmp    ecx,edx
c00004b9:	75 f5                	jne    c00004b0 <memmove+0xe0>
c00004bb:	eb ae                	jmp    c000046b <memmove+0x9b>
c00004bd:	8d 76 00             	lea    esi,[esi+0x0]

c00004c0 <memset>:
c00004c0:	57                   	push   edi
c00004c1:	56                   	push   esi
c00004c2:	53                   	push   ebx
c00004c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004cb:	85 d2                	test   edx,edx
c00004cd:	74 1b                	je     c00004ea <memset+0x2a>
c00004cf:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00004d4:	89 f7                	mov    edi,esi
c00004d6:	83 fa 04             	cmp    edx,0x4
c00004d9:	73 15                	jae    c00004f0 <memset+0x30>
c00004db:	83 e2 03             	and    edx,0x3
c00004de:	74 0a                	je     c00004ea <memset+0x2a>
c00004e0:	31 c0                	xor    eax,eax
c00004e2:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c00004e5:	40                   	inc    eax
c00004e6:	39 d0                	cmp    eax,edx
c00004e8:	72 f8                	jb     c00004e2 <memset+0x22>
c00004ea:	5b                   	pop    ebx
c00004eb:	89 f0                	mov    eax,esi
c00004ed:	5e                   	pop    esi
c00004ee:	5f                   	pop    edi
c00004ef:	c3                   	ret    
c00004f0:	31 c0                	xor    eax,eax
c00004f2:	88 d8                	mov    al,bl
c00004f4:	88 c4                	mov    ah,al
c00004f6:	89 c1                	mov    ecx,eax
c00004f8:	c1 e1 10             	shl    ecx,0x10
c00004fb:	09 c8                	or     eax,ecx
c00004fd:	f7 c6 01 00 00 00    	test   esi,0x1
c0000503:	75 12                	jne    c0000517 <memset+0x57>
c0000505:	f7 c7 02 00 00 00    	test   edi,0x2
c000050b:	75 12                	jne    c000051f <memset+0x5f>
c000050d:	89 d1                	mov    ecx,edx
c000050f:	c1 e9 02             	shr    ecx,0x2
c0000512:	fc                   	cld    
c0000513:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000515:	eb c4                	jmp    c00004db <memset+0x1b>
c0000517:	88 06                	mov    BYTE PTR [esi],al
c0000519:	8d 7e 01             	lea    edi,[esi+0x1]
c000051c:	4a                   	dec    edx
c000051d:	eb e6                	jmp    c0000505 <memset+0x45>
c000051f:	66 89 07             	mov    WORD PTR [edi],ax
c0000522:	83 ea 02             	sub    edx,0x2
c0000525:	83 c7 02             	add    edi,0x2
c0000528:	eb e3                	jmp    c000050d <memset+0x4d>
c000052a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c0000530 <strlen>:
c0000530:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000534:	31 c0                	xor    eax,eax
c0000536:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000539:	74 15                	je     c0000550 <strlen+0x20>
c000053b:	90                   	nop
c000053c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000540:	40                   	inc    eax
c0000541:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000545:	75 f9                	jne    c0000540 <strlen+0x10>
c0000547:	c3                   	ret    
c0000548:	90                   	nop
c0000549:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000550:	c3                   	ret    
c0000551:	eb 0d                	jmp    c0000560 <strpbrk>
c0000553:	90                   	nop
c0000554:	90                   	nop
c0000555:	90                   	nop
c0000556:	90                   	nop
c0000557:	90                   	nop
c0000558:	90                   	nop
c0000559:	90                   	nop
c000055a:	90                   	nop
c000055b:	90                   	nop
c000055c:	90                   	nop
c000055d:	90                   	nop
c000055e:	90                   	nop
c000055f:	90                   	nop

c0000560 <strpbrk>:
c0000560:	57                   	push   edi
c0000561:	56                   	push   esi
c0000562:	53                   	push   ebx
c0000563:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000567:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000056b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000056d:	84 db                	test   bl,bl
c000056f:	74 21                	je     c0000592 <strpbrk+0x32>
c0000571:	8a 07                	mov    al,BYTE PTR [edi]
c0000573:	84 c0                	test   al,al
c0000575:	74 14                	je     c000058b <strpbrk+0x2b>
c0000577:	38 d8                	cmp    al,bl
c0000579:	74 19                	je     c0000594 <strpbrk+0x34>
c000057b:	89 fa                	mov    edx,edi
c000057d:	eb 05                	jmp    c0000584 <strpbrk+0x24>
c000057f:	90                   	nop
c0000580:	38 d9                	cmp    cl,bl
c0000582:	74 10                	je     c0000594 <strpbrk+0x34>
c0000584:	42                   	inc    edx
c0000585:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000587:	84 c9                	test   cl,cl
c0000589:	75 f5                	jne    c0000580 <strpbrk+0x20>
c000058b:	46                   	inc    esi
c000058c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000058e:	84 db                	test   bl,bl
c0000590:	75 e1                	jne    c0000573 <strpbrk+0x13>
c0000592:	31 f6                	xor    esi,esi
c0000594:	5b                   	pop    ebx
c0000595:	89 f0                	mov    eax,esi
c0000597:	5e                   	pop    esi
c0000598:	5f                   	pop    edi
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005a0 <strtok>:
c00005a0:	56                   	push   esi
c00005a1:	53                   	push   ebx
c00005a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005aa:	85 db                	test   ebx,ebx
c00005ac:	75 07                	jne    c00005b5 <strtok+0x15>
c00005ae:	eb 30                	jmp    c00005e0 <strtok+0x40>
c00005b0:	43                   	inc    ebx
c00005b1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005b5:	56                   	push   esi
c00005b6:	53                   	push   ebx
c00005b7:	e8 a4 ff ff ff       	call   c0000560 <strpbrk>
c00005bc:	5a                   	pop    edx
c00005bd:	a3 e0 30 02 c0       	mov    ds:0xc00230e0,eax
c00005c2:	59                   	pop    ecx
c00005c3:	39 d8                	cmp    eax,ebx
c00005c5:	74 e9                	je     c00005b0 <strtok+0x10>
c00005c7:	85 c0                	test   eax,eax
c00005c9:	74 1f                	je     c00005ea <strtok+0x4a>
c00005cb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005ce:	8d 50 01             	lea    edx,[eax+0x1]
c00005d1:	89 d8                	mov    eax,ebx
c00005d3:	5b                   	pop    ebx
c00005d4:	89 15 e0 30 02 c0    	mov    DWORD PTR ds:0xc00230e0,edx
c00005da:	5e                   	pop    esi
c00005db:	c3                   	ret    
c00005dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005e0:	8b 1d e0 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230e0
c00005e6:	85 db                	test   ebx,ebx
c00005e8:	75 cb                	jne    c00005b5 <strtok+0x15>
c00005ea:	5b                   	pop    ebx
c00005eb:	31 c0                	xor    eax,eax
c00005ed:	5e                   	pop    esi
c00005ee:	c3                   	ret    
c00005ef:	90                   	nop

c00005f0 <strcpy>:
c00005f0:	53                   	push   ebx
c00005f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00005f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00005f9:	89 c3                	mov    ebx,eax
c00005fb:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005fd:	84 d2                	test   dl,dl
c00005ff:	74 19                	je     c000061a <strcpy+0x2a>
c0000601:	eb 0d                	jmp    c0000610 <strcpy+0x20>
c0000603:	90                   	nop
c0000604:	90                   	nop
c0000605:	90                   	nop
c0000606:	90                   	nop
c0000607:	90                   	nop
c0000608:	90                   	nop
c0000609:	90                   	nop
c000060a:	90                   	nop
c000060b:	90                   	nop
c000060c:	90                   	nop
c000060d:	90                   	nop
c000060e:	90                   	nop
c000060f:	90                   	nop
c0000610:	41                   	inc    ecx
c0000611:	88 13                	mov    BYTE PTR [ebx],dl
c0000613:	43                   	inc    ebx
c0000614:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000616:	84 d2                	test   dl,dl
c0000618:	75 f6                	jne    c0000610 <strcpy+0x20>
c000061a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000061d:	5b                   	pop    ebx
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strncpy>:
c0000620:	57                   	push   edi
c0000621:	56                   	push   esi
c0000622:	53                   	push   ebx
c0000623:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000627:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000062b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000062f:	85 f6                	test   esi,esi
c0000631:	74 3e                	je     c0000671 <strncpy+0x51>
c0000633:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000635:	8d 46 ff             	lea    eax,[esi-0x1]
c0000638:	8d 7a 01             	lea    edi,[edx+0x1]
c000063b:	88 0a                	mov    BYTE PTR [edx],cl
c000063d:	84 c9                	test   cl,cl
c000063f:	74 3f                	je     c0000680 <strncpy+0x60>
c0000641:	85 c0                	test   eax,eax
c0000643:	74 2c                	je     c0000671 <strncpy+0x51>
c0000645:	8d 4b 02             	lea    ecx,[ebx+0x2]
c0000648:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c000064b:	8d 46 fe             	lea    eax,[esi-0x2]
c000064e:	8d 7a 02             	lea    edi,[edx+0x2]
c0000651:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000654:	84 db                	test   bl,bl
c0000656:	75 15                	jne    c000066d <strncpy+0x4d>
c0000658:	eb 26                	jmp    c0000680 <strncpy+0x60>
c000065a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000660:	41                   	inc    ecx
c0000661:	47                   	inc    edi
c0000662:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000665:	48                   	dec    eax
c0000666:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c0000669:	84 db                	test   bl,bl
c000066b:	74 13                	je     c0000680 <strncpy+0x60>
c000066d:	85 c0                	test   eax,eax
c000066f:	75 ef                	jne    c0000660 <strncpy+0x40>
c0000671:	5b                   	pop    ebx
c0000672:	89 d0                	mov    eax,edx
c0000674:	5e                   	pop    esi
c0000675:	5f                   	pop    edi
c0000676:	c3                   	ret    
c0000677:	89 f6                	mov    esi,esi
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000680:	85 c0                	test   eax,eax
c0000682:	74 ed                	je     c0000671 <strncpy+0x51>
c0000684:	89 c3                	mov    ebx,eax
c0000686:	83 f8 04             	cmp    eax,0x4
c0000689:	73 25                	jae    c00006b0 <strncpy+0x90>
c000068b:	f6 c3 02             	test   bl,0x2
c000068e:	74 08                	je     c0000698 <strncpy+0x78>
c0000690:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c0000695:	83 c7 02             	add    edi,0x2
c0000698:	83 e3 01             	and    ebx,0x1
c000069b:	74 d4                	je     c0000671 <strncpy+0x51>
c000069d:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00006a0:	89 d0                	mov    eax,edx
c00006a2:	5b                   	pop    ebx
c00006a3:	5e                   	pop    esi
c00006a4:	5f                   	pop    edi
c00006a5:	c3                   	ret    
c00006a6:	8d 76 00             	lea    esi,[esi+0x0]
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	f7 c7 01 00 00 00    	test   edi,0x1
c00006b6:	75 14                	jne    c00006cc <strncpy+0xac>
c00006b8:	f7 c7 02 00 00 00    	test   edi,0x2
c00006be:	75 13                	jne    c00006d3 <strncpy+0xb3>
c00006c0:	89 d9                	mov    ecx,ebx
c00006c2:	c1 e9 02             	shr    ecx,0x2
c00006c5:	fc                   	cld    
c00006c6:	31 c0                	xor    eax,eax
c00006c8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006ca:	eb bf                	jmp    c000068b <strncpy+0x6b>
c00006cc:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00006cf:	4b                   	dec    ebx
c00006d0:	47                   	inc    edi
c00006d1:	eb e5                	jmp    c00006b8 <strncpy+0x98>
c00006d3:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006d8:	83 eb 02             	sub    ebx,0x2
c00006db:	83 c7 02             	add    edi,0x2
c00006de:	eb e0                	jmp    c00006c0 <strncpy+0xa0>

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	5b                   	pop    ebx
c0000721:	31 c0                	xor    eax,eax
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	88 d0                	mov    al,dl
c00007b5:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000857:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000085b:	57                   	push   edi
c000085c:	e8 cf fc ff ff       	call   c0000530 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	89 c6                	mov    esi,eax
c0000864:	85 c0                	test   eax,eax
c0000866:	75 18                	jne    c0000880 <strstr+0x30>
c0000868:	eb 36                	jmp    c00008a0 <strstr+0x50>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 08 fb ff ff       	call   c0000380 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 aa fc ff ff       	call   c0000530 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 a0 eb 01 c0 02 	test   BYTE PTR [edx-0x3ffe1460],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 a0 eb 01 c0 01 	test   BYTE PTR [edx-0x3ffe1460],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	31 d2                	xor    edx,edx
c00008f3:	57                   	push   edi
c00008f4:	56                   	push   esi
c00008f5:	53                   	push   ebx
c00008f6:	83 ec 08             	sub    esp,0x8
c00008f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00008fd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000901:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000905:	8a 00                	mov    al,BYTE PTR [eax]
c0000907:	88 c2                	mov    dl,al
c0000909:	f6 82 a0 eb 01 c0 08 	test   BYTE PTR [edx-0x3ffe1460],0x8
c0000910:	74 1e                	je     c0000930 <simple_strtoul+0x40>
c0000912:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	41                   	inc    ecx
c0000921:	31 d2                	xor    edx,edx
c0000923:	8a 01                	mov    al,BYTE PTR [ecx]
c0000925:	88 c2                	mov    dl,al
c0000927:	f6 82 a0 eb 01 c0 08 	test   BYTE PTR [edx-0x3ffe1460],0x8
c000092e:	75 f0                	jne    c0000920 <simple_strtoul+0x30>
c0000930:	3c 09                	cmp    al,0x9
c0000932:	74 ec                	je     c0000920 <simple_strtoul+0x30>
c0000934:	3c 2d                	cmp    al,0x2d
c0000936:	0f 84 44 01 00 00    	je     c0000a80 <simple_strtoul+0x190>
c000093c:	3c 2b                	cmp    al,0x2b
c000093e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000946:	0f 94 c0             	sete   al
c0000949:	25 ff 00 00 00       	and    eax,0xff
c000094e:	01 c1                	add    ecx,eax
c0000950:	85 f6                	test   esi,esi
c0000952:	0f 85 c8 00 00 00    	jne    c0000a20 <simple_strtoul+0x130>
c0000958:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c000095b:	be 0a 00 00 00       	mov    esi,0xa
c0000960:	80 fa 30             	cmp    dl,0x30
c0000963:	0f 84 72 01 00 00    	je     c0000adb <simple_strtoul+0x1eb>
c0000969:	84 d2                	test   dl,dl
c000096b:	0f 84 3f 01 00 00    	je     c0000ab0 <simple_strtoul+0x1c0>
c0000971:	31 ed                	xor    ebp,ebp
c0000973:	31 ff                	xor    edi,edi
c0000975:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000097c:	eb 2e                	jmp    c00009ac <simple_strtoul+0xbc>
c000097e:	66 90                	xchg   ax,ax
c0000980:	83 eb 30             	sub    ebx,0x30
c0000983:	39 f3                	cmp    ebx,esi
c0000985:	73 59                	jae    c00009e0 <simple_strtoul+0xf0>
c0000987:	89 d8                	mov    eax,ebx
c0000989:	31 d2                	xor    edx,edx
c000098b:	83 f0 ff             	xor    eax,0xffffffff
c000098e:	f7 f6                	div    esi
c0000990:	39 f8                	cmp    eax,edi
c0000992:	0f 82 d8 00 00 00    	jb     c0000a70 <simple_strtoul+0x180>
c0000998:	0f af fe             	imul   edi,esi
c000099b:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009a2:	01 df                	add    edi,ebx
c00009a4:	41                   	inc    ecx
c00009a5:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009a8:	84 d2                	test   dl,dl
c00009aa:	74 34                	je     c00009e0 <simple_strtoul+0xf0>
c00009ac:	31 db                	xor    ebx,ebx
c00009ae:	88 d3                	mov    bl,dl
c00009b0:	f6 83 a0 eb 01 c0 04 	test   BYTE PTR [ebx-0x3ffe1460],0x4
c00009b7:	75 c7                	jne    c0000980 <simple_strtoul+0x90>
c00009b9:	52                   	push   edx
c00009ba:	e8 f1 fe ff ff       	call   c00008b0 <toupper>
c00009bf:	5a                   	pop    edx
c00009c0:	31 d2                	xor    edx,edx
c00009c2:	88 c2                	mov    dl,al
c00009c4:	f6 82 a0 eb 01 c0 01 	test   BYTE PTR [edx-0x3ffe1460],0x1
c00009cb:	74 13                	je     c00009e0 <simple_strtoul+0xf0>
c00009cd:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009d0:	39 f3                	cmp    ebx,esi
c00009d2:	72 b3                	jb     c0000987 <simple_strtoul+0x97>
c00009d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00009e0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00009e4:	85 f6                	test   esi,esi
c00009e6:	74 11                	je     c00009f9 <simple_strtoul+0x109>
c00009e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009eb:	09 f8                	or     eax,edi
c00009ed:	0f 84 9d 00 00 00    	je     c0000a90 <simple_strtoul+0x1a0>
c00009f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f7:	89 08                	mov    DWORD PTR [eax],ecx
c00009f9:	4d                   	dec    ebp
c00009fa:	75 03                	jne    c00009ff <simple_strtoul+0x10f>
c00009fc:	83 cf ff             	or     edi,0xffffffff
c00009ff:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a04:	75 02                	jne    c0000a08 <simple_strtoul+0x118>
c0000a06:	f7 df                	neg    edi
c0000a08:	83 c4 08             	add    esp,0x8
c0000a0b:	89 f8                	mov    eax,edi
c0000a0d:	5b                   	pop    ebx
c0000a0e:	5e                   	pop    esi
c0000a0f:	5f                   	pop    edi
c0000a10:	5d                   	pop    ebp
c0000a11:	c3                   	ret    
c0000a12:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a19:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a20:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a23:	83 f8 22             	cmp    eax,0x22
c0000a26:	0f 87 84 00 00 00    	ja     c0000ab0 <simple_strtoul+0x1c0>
c0000a2c:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2f:	83 fe 08             	cmp    esi,0x8
c0000a32:	0f 84 ca 00 00 00    	je     c0000b02 <simple_strtoul+0x212>
c0000a38:	83 fe 10             	cmp    esi,0x10
c0000a3b:	0f 85 28 ff ff ff    	jne    c0000969 <simple_strtoul+0x79>
c0000a41:	be 10 00 00 00       	mov    esi,0x10
c0000a46:	80 fa 30             	cmp    dl,0x30
c0000a49:	0f 85 1a ff ff ff    	jne    c0000969 <simple_strtoul+0x79>
c0000a4f:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a53:	88 04 24             	mov    BYTE PTR [esp],al
c0000a56:	50                   	push   eax
c0000a57:	e8 74 fe ff ff       	call   c00008d0 <tolower>
c0000a5c:	5b                   	pop    ebx
c0000a5d:	83 f8 78             	cmp    eax,0x78
c0000a60:	0f 84 c5 00 00 00    	je     c0000b2b <simple_strtoul+0x23b>
c0000a66:	41                   	inc    ecx
c0000a67:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a6b:	e9 f9 fe ff ff       	jmp    c0000969 <simple_strtoul+0x79>
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 28 ff ff ff       	jmp    c00009a4 <simple_strtoul+0xb4>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	41                   	inc    ecx
c0000a81:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a89:	e9 c2 fe ff ff       	jmp    c0000950 <simple_strtoul+0x60>
c0000a8e:	66 90                	xchg   ax,ax
c0000a90:	85 c9                	test   ecx,ecx
c0000a92:	74 39                	je     c0000acd <simple_strtoul+0x1dd>
c0000a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a98:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a9c:	31 ff                	xor    edi,edi
c0000a9e:	89 30                	mov    DWORD PTR [eax],esi
c0000aa0:	e9 54 ff ff ff       	jmp    c00009f9 <simple_strtoul+0x109>
c0000aa5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000aa9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000ab0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0000ab4:	85 db                	test   ebx,ebx
c0000ab6:	74 1c                	je     c0000ad4 <simple_strtoul+0x1e4>
c0000ab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000abc:	85 c9                	test   ecx,ecx
c0000abe:	74 5e                	je     c0000b1e <simple_strtoul+0x22e>
c0000ac0:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000ac4:	31 ff                	xor    edi,edi
c0000ac6:	89 30                	mov    DWORD PTR [eax],esi
c0000ac8:	e9 32 ff ff ff       	jmp    c00009ff <simple_strtoul+0x10f>
c0000acd:	31 ff                	xor    edi,edi
c0000acf:	e9 1f ff ff ff       	jmp    c00009f3 <simple_strtoul+0x103>
c0000ad4:	31 ff                	xor    edi,edi
c0000ad6:	e9 24 ff ff ff       	jmp    c00009ff <simple_strtoul+0x10f>
c0000adb:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000adf:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae2:	50                   	push   eax
c0000ae3:	e8 e8 fd ff ff       	call   c00008d0 <tolower>
c0000ae8:	5e                   	pop    esi
c0000ae9:	83 f8 78             	cmp    eax,0x78
c0000aec:	74 24                	je     c0000b12 <simple_strtoul+0x222>
c0000aee:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af2:	41                   	inc    ecx
c0000af3:	80 fa 30             	cmp    dl,0x30
c0000af6:	74 13                	je     c0000b0b <simple_strtoul+0x21b>
c0000af8:	be 08 00 00 00       	mov    esi,0x8
c0000afd:	e9 67 fe ff ff       	jmp    c0000969 <simple_strtoul+0x79>
c0000b02:	80 fa 30             	cmp    dl,0x30
c0000b05:	0f 85 5e fe ff ff    	jne    c0000969 <simple_strtoul+0x79>
c0000b0b:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b0f:	41                   	inc    ecx
c0000b10:	eb e6                	jmp    c0000af8 <simple_strtoul+0x208>
c0000b12:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b16:	83 c1 02             	add    ecx,0x2
c0000b19:	e9 23 ff ff ff       	jmp    c0000a41 <simple_strtoul+0x151>
c0000b1e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b24:	31 ff                	xor    edi,edi
c0000b26:	e9 d4 fe ff ff       	jmp    c00009ff <simple_strtoul+0x10f>
c0000b2b:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b2f:	83 c1 02             	add    ecx,0x2
c0000b32:	e9 32 fe ff ff       	jmp    c0000969 <simple_strtoul+0x79>

c0000b37 <largebin_index>:
c0000b37:	89 c2                	mov    edx,eax
c0000b39:	c1 ea 08             	shr    edx,0x8
c0000b3c:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b42:	77 10                	ja     c0000b54 <largebin_index+0x1d>
c0000b44:	0f bd d2             	bsr    edx,edx
c0000b47:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b4a:	d3 e8                	shr    eax,cl
c0000b4c:	83 e0 03             	and    eax,0x3
c0000b4f:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b53:	c3                   	ret    
c0000b54:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b59:	c3                   	ret    

c0000b5a <malloc_init_state>:
c0000b5a:	8d 50 34             	lea    edx,[eax+0x34]
c0000b5d:	53                   	push   ebx
c0000b5e:	89 d1                	mov    ecx,edx
c0000b60:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b66:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b69:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b6c:	83 c2 08             	add    edx,0x8
c0000b6f:	39 da                	cmp    edx,ebx
c0000b71:	75 f3                	jne    c0000b66 <malloc_init_state+0xc>
c0000b73:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b75:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b7f:	83 e2 03             	and    edx,0x3
c0000b82:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b8c:	83 ca 48             	or     edx,0x48
c0000b8f:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b99:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000ba3:	89 10                	mov    DWORD PTR [eax],edx
c0000ba5:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bac:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000baf:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb9:	5b                   	pop    ebx
c0000bba:	c3                   	ret    

c0000bbb <malloc_consolidate>:
c0000bbb:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bbd:	85 d2                	test   edx,edx
c0000bbf:	0f 84 d8 00 00 00    	je     c0000c9d <malloc_consolidate+0xe2>
c0000bc5:	55                   	push   ebp
c0000bc6:	83 e2 fd             	and    edx,0xfffffffd
c0000bc9:	57                   	push   edi
c0000bca:	8d 78 34             	lea    edi,[eax+0x34]
c0000bcd:	56                   	push   esi
c0000bce:	89 c5                	mov    ebp,eax
c0000bd0:	53                   	push   ebx
c0000bd1:	83 ec 10             	sub    esp,0x10
c0000bd4:	89 10                	mov    DWORD PTR [eax],edx
c0000bd6:	c1 ea 03             	shr    edx,0x3
c0000bd9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bdd:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000be1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000be5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000be8:	85 d2                	test   edx,edx
c0000bea:	0f 84 98 00 00 00    	je     c0000c88 <malloc_consolidate+0xcd>
c0000bf0:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bf7:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bfa:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bfd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c01:	89 f9                	mov    ecx,edi
c0000c03:	83 e1 fe             	and    ecx,0xfffffffe
c0000c06:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c09:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c0c:	83 e3 fc             	and    ebx,0xfffffffc
c0000c0f:	83 e7 01             	and    edi,0x1
c0000c12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c15:	75 14                	jne    c0000c2b <malloc_consolidate+0x70>
c0000c17:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c19:	29 fa                	sub    edx,edi
c0000c1b:	01 f9                	add    ecx,edi
c0000c1d:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c20:	89 fb                	mov    ebx,edi
c0000c22:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c25:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c28:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c2b:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c2e:	74 40                	je     c0000c70 <malloc_consolidate+0xb5>
c0000c30:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c33:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c36:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c3a:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c3d:	83 e7 01             	and    edi,0x1
c0000c40:	75 0e                	jne    c0000c50 <malloc_consolidate+0x95>
c0000c42:	01 d9                	add    ecx,ebx
c0000c44:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c47:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c4d:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c50:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c53:	89 ce                	mov    esi,ecx
c0000c55:	83 ce 01             	or     esi,0x1
c0000c58:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c5b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c5e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c61:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c65:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c68:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c6b:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c6e:	eb 0c                	jmp    c0000c7c <malloc_consolidate+0xc1>
c0000c70:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c73:	83 c9 01             	or     ecx,0x1
c0000c76:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c79:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c80:	85 d2                	test   edx,edx
c0000c82:	0f 85 6f ff ff ff    	jne    c0000bf7 <malloc_consolidate+0x3c>
c0000c88:	83 c5 04             	add    ebp,0x4
c0000c8b:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c8f:	0f 85 50 ff ff ff    	jne    c0000be5 <malloc_consolidate+0x2a>
c0000c95:	83 c4 10             	add    esp,0x10
c0000c98:	5b                   	pop    ebx
c0000c99:	5e                   	pop    esi
c0000c9a:	5f                   	pop    edi
c0000c9b:	5d                   	pop    ebp
c0000c9c:	c3                   	ret    
c0000c9d:	e9 b8 fe ff ff       	jmp    c0000b5a <malloc_init_state>

c0000ca2 <dlfree>:
c0000ca2:	57                   	push   edi
c0000ca3:	56                   	push   esi
c0000ca4:	53                   	push   ebx
c0000ca5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca9:	85 db                	test   ebx,ebx
c0000cab:	0f 84 e2 00 00 00    	je     c0000d93 <dlfree+0xf1>
c0000cb1:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cb4:	8b 0d 00 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023100
c0000cba:	89 f0                	mov    eax,esi
c0000cbc:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cbf:	83 e0 fc             	and    eax,0xfffffffc
c0000cc2:	39 c1                	cmp    ecx,eax
c0000cc4:	72 24                	jb     c0000cea <dlfree+0x48>
c0000cc6:	c1 e8 03             	shr    eax,0x3
c0000cc9:	83 c9 03             	or     ecx,0x3
c0000ccc:	83 e8 02             	sub    eax,0x2
c0000ccf:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000cd5:	8b 0c 85 04 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcefc]
c0000cdc:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cde:	89 14 85 04 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcefc],edx
c0000ce5:	e9 a9 00 00 00       	jmp    c0000d93 <dlfree+0xf1>
c0000cea:	83 e6 02             	and    esi,0x2
c0000ced:	0f 85 a0 00 00 00    	jne    c0000d93 <dlfree+0xf1>
c0000cf3:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf6:	83 c9 01             	or     ecx,0x1
c0000cf9:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000cff:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d02:	83 e1 fc             	and    ecx,0xfffffffc
c0000d05:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d09:	75 13                	jne    c0000d1e <dlfree+0x7c>
c0000d0b:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d0e:	29 da                	sub    edx,ebx
c0000d10:	01 d8                	add    eax,ebx
c0000d12:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d15:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d18:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d1b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d1e:	39 35 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,esi
c0000d24:	74 40                	je     c0000d66 <dlfree+0xc4>
c0000d26:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d2a:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d2d:	80 e3 01             	and    bl,0x1
c0000d30:	75 0e                	jne    c0000d40 <dlfree+0x9e>
c0000d32:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d35:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d38:	01 c8                	add    eax,ecx
c0000d3a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d3d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d40:	8b 0d 3c 31 02 c0    	mov    ecx,DWORD PTR ds:0xc002313c
c0000d46:	c7 42 0c 34 31 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023134
c0000d4d:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d50:	89 15 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edx
c0000d56:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d59:	89 c1                	mov    ecx,eax
c0000d5b:	83 c9 01             	or     ecx,0x1
c0000d5e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d61:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d64:	eb 10                	jmp    c0000d76 <dlfree+0xd4>
c0000d66:	01 c8                	add    eax,ecx
c0000d68:	89 c1                	mov    ecx,eax
c0000d6a:	83 c9 01             	or     ecx,0x1
c0000d6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d70:	89 15 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edx
c0000d76:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d7b:	76 16                	jbe    c0000d93 <dlfree+0xf1>
c0000d7d:	f6 05 00 31 02 c0 02 	test   BYTE PTR ds:0xc0023100,0x2
c0000d84:	74 0d                	je     c0000d93 <dlfree+0xf1>
c0000d86:	5b                   	pop    ebx
c0000d87:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0000d8c:	5e                   	pop    esi
c0000d8d:	5f                   	pop    edi
c0000d8e:	e9 28 fe ff ff       	jmp    c0000bbb <malloc_consolidate>
c0000d93:	5b                   	pop    ebx
c0000d94:	5e                   	pop    esi
c0000d95:	5f                   	pop    edi
c0000d96:	c3                   	ret    

c0000d97 <sYSMALLOc>:
c0000d97:	55                   	push   ebp
c0000d98:	57                   	push   edi
c0000d99:	56                   	push   esi
c0000d9a:	53                   	push   ebx
c0000d9b:	89 d3                	mov    ebx,edx
c0000d9d:	83 ec 2c             	sub    esp,0x2c
c0000da0:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000da6:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000da9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dad:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000db0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000db4:	74 1f                	je     c0000dd5 <sYSMALLOc+0x3e>
c0000db6:	89 d0                	mov    eax,edx
c0000db8:	e8 fe fd ff ff       	call   c0000bbb <malloc_consolidate>
c0000dbd:	83 ec 0c             	sub    esp,0xc
c0000dc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000dc4:	83 e8 07             	sub    eax,0x7
c0000dc7:	50                   	push   eax
c0000dc8:	e8 33 02 00 00       	call   c0001000 <dlmalloc>
c0000dcd:	83 c4 10             	add    esp,0x10
c0000dd0:	e9 23 02 00 00       	jmp    c0000ff8 <sYSMALLOc+0x261>
c0000dd5:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000ddc:	83 c0 10             	add    eax,0x10
c0000ddf:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000de5:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000de8:	01 c2                	add    edx,eax
c0000dea:	83 e5 fc             	and    ebp,0xfffffffc
c0000ded:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000df1:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df8:	74 02                	je     c0000dfc <sYSMALLOc+0x65>
c0000dfa:	29 ea                	sub    edx,ebp
c0000dfc:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000e00:	f7 d9                	neg    ecx
c0000e02:	21 ca                	and    edx,ecx
c0000e04:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000e08:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000e0c:	7f 07                	jg     c0000e15 <sYSMALLOc+0x7e>
c0000e0e:	31 c0                	xor    eax,eax
c0000e10:	e9 e3 01 00 00       	jmp    c0000ff8 <sYSMALLOc+0x261>
c0000e15:	83 ec 0c             	sub    esp,0xc
c0000e18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e1c:	e8 1b 69 00 00       	call   c000773c <sbrk>
c0000e21:	83 c4 10             	add    esp,0x10
c0000e24:	89 c6                	mov    esi,eax
c0000e26:	83 f8 ff             	cmp    eax,0xffffffff
c0000e29:	74 e3                	je     c0000e0e <sYSMALLOc+0x77>
c0000e2b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000e2f:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000e32:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000e38:	39 c2                	cmp    edx,eax
c0000e3a:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000e40:	75 11                	jne    c0000e53 <sYSMALLOc+0xbc>
c0000e42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e46:	01 e8                	add    eax,ebp
c0000e48:	83 c8 01             	or     eax,0x1
c0000e4b:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e4e:	e9 93 00 00 00       	jmp    c0000ee6 <sYSMALLOc+0x14f>
c0000e53:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000e59:	a8 01                	test   al,0x1
c0000e5b:	0f 84 73 01 00 00    	je     c0000fd4 <sYSMALLOc+0x23d>
c0000e61:	85 ed                	test   ebp,ebp
c0000e63:	74 12                	je     c0000e77 <sYSMALLOc+0xe0>
c0000e65:	39 f2                	cmp    edx,esi
c0000e67:	76 0e                	jbe    c0000e77 <sYSMALLOc+0xe0>
c0000e69:	83 e0 fe             	and    eax,0xfffffffe
c0000e6c:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000e72:	e9 5d 01 00 00       	jmp    c0000fd4 <sYSMALLOc+0x23d>
c0000e77:	85 ed                	test   ebp,ebp
c0000e79:	74 0c                	je     c0000e87 <sYSMALLOc+0xf0>
c0000e7b:	89 f0                	mov    eax,esi
c0000e7d:	29 d0                	sub    eax,edx
c0000e7f:	01 c1                	add    ecx,eax
c0000e81:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000e87:	89 f2                	mov    edx,esi
c0000e89:	83 e2 07             	and    edx,0x7
c0000e8c:	0f 84 b1 00 00 00    	je     c0000f43 <sYSMALLOc+0x1ac>
c0000e92:	b8 08 00 00 00       	mov    eax,0x8
c0000e97:	29 d0                	sub    eax,edx
c0000e99:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000e9c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ea0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ea4:	01 e8                	add    eax,ebp
c0000ea6:	83 ec 0c             	sub    esp,0xc
c0000ea9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000eac:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000eb0:	01 f2                	add    edx,esi
c0000eb2:	01 d1                	add    ecx,edx
c0000eb4:	29 d0                	sub    eax,edx
c0000eb6:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000eba:	01 c1                	add    ecx,eax
c0000ebc:	51                   	push   ecx
c0000ebd:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000ec1:	e8 76 68 00 00       	call   c000773c <sbrk>
c0000ec6:	83 c4 10             	add    esp,0x10
c0000ec9:	83 f8 ff             	cmp    eax,0xffffffff
c0000ecc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000ed0:	75 7c                	jne    c0000f4e <sYSMALLOc+0x1b7>
c0000ed2:	83 ec 0c             	sub    esp,0xc
c0000ed5:	6a 00                	push   0x0
c0000ed7:	e8 60 68 00 00       	call   c000773c <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	31 c9                	xor    ecx,ecx
c0000ee1:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee4:	75 7e                	jne    c0000f64 <sYSMALLOc+0x1cd>
c0000ee6:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000eec:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000ef2:	73 06                	jae    c0000efa <sYSMALLOc+0x163>
c0000ef4:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000efa:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000f00:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000f06:	73 06                	jae    c0000f0e <sYSMALLOc+0x177>
c0000f08:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000f0e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f11:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000f14:	83 e2 fc             	and    edx,0xfffffffc
c0000f17:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000f1b:	0f 87 ed fe ff ff    	ja     c0000e0e <sYSMALLOc+0x77>
c0000f21:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000f25:	29 fa                	sub    edx,edi
c0000f27:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000f2a:	83 ca 01             	or     edx,0x1
c0000f2d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000f30:	89 fb                	mov    ebx,edi
c0000f32:	83 cb 01             	or     ebx,0x1
c0000f35:	83 c0 08             	add    eax,0x8
c0000f38:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000f3b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000f3e:	e9 b5 00 00 00       	jmp    c0000ff8 <sYSMALLOc+0x261>
c0000f43:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000f47:	31 c0                	xor    eax,eax
c0000f49:	e9 52 ff ff ff       	jmp    c0000ea0 <sYSMALLOc+0x109>
c0000f4e:	39 c6                	cmp    esi,eax
c0000f50:	76 12                	jbe    c0000f64 <sYSMALLOc+0x1cd>
c0000f52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f56:	01 f0                	add    eax,esi
c0000f58:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f5f:	e9 7b ff ff ff       	jmp    c0000edf <sYSMALLOc+0x148>
c0000f64:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000f68:	29 f0                	sub    eax,esi
c0000f6a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000f6d:	01 c8                	add    eax,ecx
c0000f6f:	83 c8 01             	or     eax,0x1
c0000f72:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000f75:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000f7b:	85 ed                	test   ebp,ebp
c0000f7d:	0f 84 63 ff ff ff    	je     c0000ee6 <sYSMALLOc+0x14f>
c0000f83:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000f86:	83 e0 f8             	and    eax,0xfffffff8
c0000f89:	89 c2                	mov    edx,eax
c0000f8b:	83 ca 01             	or     edx,0x1
c0000f8e:	83 f8 0f             	cmp    eax,0xf
c0000f91:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f94:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f9c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000fa4:	0f 86 3c ff ff ff    	jbe    c0000ee6 <sYSMALLOc+0x14f>
c0000faa:	83 ec 0c             	sub    esp,0xc
c0000fad:	83 c7 08             	add    edi,0x8
c0000fb0:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fb6:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fc0:	57                   	push   edi
c0000fc1:	e8 dc fc ff ff       	call   c0000ca2 <dlfree>
c0000fc6:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fcc:	83 c4 10             	add    esp,0x10
c0000fcf:	e9 12 ff ff ff       	jmp    c0000ee6 <sYSMALLOc+0x14f>
c0000fd4:	83 ec 0c             	sub    esp,0xc
c0000fd7:	6a 00                	push   0x0
c0000fd9:	e8 5e 67 00 00       	call   c000773c <sbrk>
c0000fde:	89 c2                	mov    edx,eax
c0000fe0:	29 f2                	sub    edx,esi
c0000fe2:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fe6:	83 c4 10             	add    esp,0x10
c0000fe9:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fef:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000ff3:	e9 e7 fe ff ff       	jmp    c0000edf <sYSMALLOc+0x148>
c0000ff8:	83 c4 2c             	add    esp,0x2c
c0000ffb:	5b                   	pop    ebx
c0000ffc:	5e                   	pop    esi
c0000ffd:	5f                   	pop    edi
c0000ffe:	5d                   	pop    ebp
c0000fff:	c3                   	ret    

c0001000 <dlmalloc>:
c0001000:	55                   	push   ebp
c0001001:	57                   	push   edi
c0001002:	56                   	push   esi
c0001003:	53                   	push   ebx
c0001004:	83 ec 1c             	sub    esp,0x1c
c0001007:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000100b:	83 f8 df             	cmp    eax,0xffffffdf
c000100e:	0f 87 70 03 00 00    	ja     c0001384 <dlmalloc+0x384>
c0001014:	83 c0 0b             	add    eax,0xb
c0001017:	be 10 00 00 00       	mov    esi,0x10
c000101c:	83 f8 0f             	cmp    eax,0xf
c000101f:	76 05                	jbe    c0001026 <dlmalloc+0x26>
c0001021:	83 e0 f8             	and    eax,0xfffffff8
c0001024:	89 c6                	mov    esi,eax
c0001026:	8b 3d 00 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023100
c000102c:	f7 c7 01 00 00 00    	test   edi,0x1
c0001032:	75 17                	jne    c000104b <dlmalloc+0x4b>
c0001034:	85 ff                	test   edi,edi
c0001036:	0f 85 05 03 00 00    	jne    c0001341 <dlmalloc+0x341>
c000103c:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001041:	e8 75 fb ff ff       	call   c0000bbb <malloc_consolidate>
c0001046:	e9 f6 02 00 00       	jmp    c0001341 <dlmalloc+0x341>
c000104b:	39 f7                	cmp    edi,esi
c000104d:	72 1f                	jb     c000106e <dlmalloc+0x6e>
c000104f:	89 f2                	mov    edx,esi
c0001051:	c1 ea 03             	shr    edx,0x3
c0001054:	83 ea 02             	sub    edx,0x2
c0001057:	8b 04 95 04 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcefc]
c000105e:	85 c0                	test   eax,eax
c0001060:	74 0c                	je     c000106e <dlmalloc+0x6e>
c0001062:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001065:	89 0c 95 04 31 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcefc],ecx
c000106c:	eb 30                	jmp    c000109e <dlmalloc+0x9e>
c000106e:	89 f0                	mov    eax,esi
c0001070:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001076:	77 2e                	ja     c00010a6 <dlmalloc+0xa6>
c0001078:	c1 e8 03             	shr    eax,0x3
c000107b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107f:	8d 14 c5 34 31 02 c0 	lea    edx,[eax*8-0x3ffdcecc]
c0001086:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001089:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000108c:	39 c3                	cmp    ebx,eax
c000108e:	74 2e                	je     c00010be <dlmalloc+0xbe>
c0001090:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001093:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001098:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000109b:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000109e:	83 c0 08             	add    eax,0x8
c00010a1:	e9 e0 02 00 00       	jmp    c0001386 <dlmalloc+0x386>
c00010a6:	e8 8c fa ff ff       	call   c0000b37 <largebin_index>
c00010ab:	83 e7 02             	and    edi,0x2
c00010ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010b2:	74 0a                	je     c00010be <dlmalloc+0xbe>
c00010b4:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00010b9:	e8 fd fa ff ff       	call   c0000bbb <malloc_consolidate>
c00010be:	8d 46 10             	lea    eax,[esi+0x10]
c00010c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010c5:	8b 1d 40 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023140
c00010cb:	81 fb 34 31 02 c0    	cmp    ebx,0xc0023134
c00010d1:	0f 84 13 01 00 00    	je     c00011ea <dlmalloc+0x1ea>
c00010d7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010da:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010dd:	83 e7 fc             	and    edi,0xfffffffc
c00010e0:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010e6:	77 4c                	ja     c0001134 <dlmalloc+0x134>
c00010e8:	3d 34 31 02 c0       	cmp    eax,0xc0023134
c00010ed:	75 45                	jne    c0001134 <dlmalloc+0x134>
c00010ef:	39 1d 30 31 02 c0    	cmp    DWORD PTR ds:0xc0023130,ebx
c00010f5:	75 3d                	jne    c0001134 <dlmalloc+0x134>
c00010f7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010fb:	73 37                	jae    c0001134 <dlmalloc+0x134>
c00010fd:	89 fa                	mov    edx,edi
c00010ff:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001102:	29 f2                	sub    edx,esi
c0001104:	83 ce 01             	or     esi,0x1
c0001107:	89 d1                	mov    ecx,edx
c0001109:	a3 3c 31 02 c0       	mov    ds:0xc002313c,eax
c000110e:	83 c9 01             	or     ecx,0x1
c0001111:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c0001116:	a3 30 31 02 c0       	mov    ds:0xc0023130,eax
c000111b:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c0001122:	c7 40 0c 34 31 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023134
c0001129:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000112c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000112f:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001132:	eb 15                	jmp    c0001149 <dlmalloc+0x149>
c0001134:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c0001139:	39 fe                	cmp    esi,edi
c000113b:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c0001142:	75 0d                	jne    c0001151 <dlmalloc+0x151>
c0001144:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001149:	8d 43 08             	lea    eax,[ebx+0x8]
c000114c:	e9 35 02 00 00       	jmp    c0001386 <dlmalloc+0x386>
c0001151:	89 f8                	mov    eax,edi
c0001153:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001159:	77 19                	ja     c0001174 <dlmalloc+0x174>
c000115b:	c1 e8 03             	shr    eax,0x3
c000115e:	8d 14 00             	lea    edx,[eax+eax*1]
c0001161:	83 c2 0d             	add    edx,0xd
c0001164:	8d 2c 95 f8 30 02 c0 	lea    ebp,[edx*4-0x3ffdcf08]
c000116b:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0001172:	eb 46                	jmp    c00011ba <dlmalloc+0x1ba>
c0001174:	e8 be f9 ff ff       	call   c0000b37 <largebin_index>
c0001179:	8d 14 00             	lea    edx,[eax+eax*1]
c000117c:	83 c2 0d             	add    edx,0xd
c000117f:	8d 0c 95 00 31 02 c0 	lea    ecx,[edx*4-0x3ffdcf00]
c0001186:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c000118d:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001190:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001194:	89 d5                	mov    ebp,edx
c0001196:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000119a:	74 1e                	je     c00011ba <dlmalloc+0x1ba>
c000119c:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000119f:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011a2:	77 12                	ja     c00011b6 <dlmalloc+0x1b6>
c00011a4:	83 cf 01             	or     edi,0x1
c00011a7:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011aa:	76 05                	jbe    c00011b1 <dlmalloc+0x1b1>
c00011ac:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011af:	eb f6                	jmp    c00011a7 <dlmalloc+0x1a7>
c00011b1:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011b4:	eb 04                	jmp    c00011ba <dlmalloc+0x1ba>
c00011b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ba:	89 c7                	mov    edi,eax
c00011bc:	88 c1                	mov    cl,al
c00011be:	c1 ff 05             	sar    edi,0x5
c00011c1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011c5:	bf 01 00 00 00       	mov    edi,0x1
c00011ca:	d3 e7                	shl    edi,cl
c00011cc:	89 f8                	mov    eax,edi
c00011ce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011d2:	09 04 bd 34 34 02 c0 	or     DWORD PTR [edi*4-0x3ffdcbcc],eax
c00011d9:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011dc:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011df:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011e2:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011e5:	e9 db fe ff ff       	jmp    c00010c5 <dlmalloc+0xc5>
c00011ea:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011f0:	76 78                	jbe    c000126a <dlmalloc+0x26a>
c00011f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011f6:	8d 04 c5 34 31 02 c0 	lea    eax,[eax*8-0x3ffdcecc]
c00011fd:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001200:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001203:	39 ca                	cmp    edx,ecx
c0001205:	74 63                	je     c000126a <dlmalloc+0x26a>
c0001207:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000120a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000120d:	83 e3 fc             	and    ebx,0xfffffffc
c0001210:	39 de                	cmp    esi,ebx
c0001212:	77 52                	ja     c0001266 <dlmalloc+0x266>
c0001214:	89 df                	mov    edi,ebx
c0001216:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001219:	29 f7                	sub    edi,esi
c000121b:	01 d3                	add    ebx,edx
c000121d:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001220:	83 ff 0f             	cmp    edi,0xf
c0001223:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001226:	8d 42 08             	lea    eax,[edx+0x8]
c0001229:	77 09                	ja     c0001234 <dlmalloc+0x234>
c000122b:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000122f:	e9 52 01 00 00       	jmp    c0001386 <dlmalloc+0x386>
c0001234:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001237:	83 ce 01             	or     esi,0x1
c000123a:	89 0d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,ecx
c0001240:	89 0d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,ecx
c0001246:	c7 41 08 34 31 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023134
c000124d:	c7 41 0c 34 31 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023134
c0001254:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001257:	89 fa                	mov    edx,edi
c0001259:	83 ca 01             	or     edx,0x1
c000125c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000125f:	89 3b                	mov    DWORD PTR [ebx],edi
c0001261:	e9 20 01 00 00       	jmp    c0001386 <dlmalloc+0x386>
c0001266:	89 c2                	mov    edx,eax
c0001268:	eb 99                	jmp    c0001203 <dlmalloc+0x203>
c000126a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000126e:	b8 01 00 00 00       	mov    eax,0x1
c0001273:	41                   	inc    ecx
c0001274:	89 cb                	mov    ebx,ecx
c0001276:	c1 eb 05             	shr    ebx,0x5
c0001279:	8d 14 cd 2c 31 02 c0 	lea    edx,[ecx*8-0x3ffdced4]
c0001280:	d3 e0                	shl    eax,cl
c0001282:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c0001289:	39 f8                	cmp    eax,edi
c000128b:	77 04                	ja     c0001291 <dlmalloc+0x291>
c000128d:	85 c0                	test   eax,eax
c000128f:	75 26                	jne    c00012b7 <dlmalloc+0x2b7>
c0001291:	43                   	inc    ebx
c0001292:	83 fb 02             	cmp    ebx,0x2
c0001295:	0f 87 a6 00 00 00    	ja     c0001341 <dlmalloc+0x341>
c000129b:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c00012a2:	85 ff                	test   edi,edi
c00012a4:	74 eb                	je     c0001291 <dlmalloc+0x291>
c00012a6:	89 d8                	mov    eax,ebx
c00012a8:	c1 e0 06             	shl    eax,0x6
c00012ab:	8d 14 85 2c 31 02 c0 	lea    edx,[eax*4-0x3ffdced4]
c00012b2:	b8 01 00 00 00       	mov    eax,0x1
c00012b7:	85 f8                	test   eax,edi
c00012b9:	75 07                	jne    c00012c2 <dlmalloc+0x2c2>
c00012bb:	83 c2 08             	add    edx,0x8
c00012be:	01 c0                	add    eax,eax
c00012c0:	eb f5                	jmp    c00012b7 <dlmalloc+0x2b7>
c00012c2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012c5:	39 ca                	cmp    edx,ecx
c00012c7:	75 14                	jne    c00012dd <dlmalloc+0x2dd>
c00012c9:	89 c1                	mov    ecx,eax
c00012cb:	83 c2 08             	add    edx,0x8
c00012ce:	f7 d1                	not    ecx
c00012d0:	21 cf                	and    edi,ecx
c00012d2:	01 c0                	add    eax,eax
c00012d4:	89 3c 9d 34 34 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcbcc],edi
c00012db:	eb ac                	jmp    c0001289 <dlmalloc+0x289>
c00012dd:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012e0:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012e3:	83 e0 fc             	and    eax,0xfffffffc
c00012e6:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012e9:	89 c3                	mov    ebx,eax
c00012eb:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012ee:	29 f3                	sub    ebx,esi
c00012f0:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012f3:	83 fb 0f             	cmp    ebx,0xf
c00012f6:	8d 41 08             	lea    eax,[ecx+0x8]
c00012f9:	77 09                	ja     c0001304 <dlmalloc+0x304>
c00012fb:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012ff:	e9 82 00 00 00       	jmp    c0001386 <dlmalloc+0x386>
c0001304:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001307:	81 fe ff 00 00 00    	cmp    esi,0xff
c000130d:	89 3d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edi
c0001313:	89 3d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,edi
c0001319:	c7 47 08 34 31 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023134
c0001320:	c7 47 0c 34 31 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023134
c0001327:	77 06                	ja     c000132f <dlmalloc+0x32f>
c0001329:	89 3d 30 31 02 c0    	mov    DWORD PTR ds:0xc0023130,edi
c000132f:	83 ce 01             	or     esi,0x1
c0001332:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001335:	89 d9                	mov    ecx,ebx
c0001337:	83 c9 01             	or     ecx,0x1
c000133a:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000133d:	89 1a                	mov    DWORD PTR [edx],ebx
c000133f:	eb 45                	jmp    c0001386 <dlmalloc+0x386>
c0001341:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c0001346:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001349:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000134c:	83 e2 fc             	and    edx,0xfffffffc
c000134f:	39 d1                	cmp    ecx,edx
c0001351:	77 1e                	ja     c0001371 <dlmalloc+0x371>
c0001353:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001356:	89 f3                	mov    ebx,esi
c0001358:	29 f2                	sub    edx,esi
c000135a:	83 cb 01             	or     ebx,0x1
c000135d:	83 ca 01             	or     edx,0x1
c0001360:	89 0d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,ecx
c0001366:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001369:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000136c:	e9 2d fd ff ff       	jmp    c000109e <dlmalloc+0x9e>
c0001371:	83 c4 1c             	add    esp,0x1c
c0001374:	89 f0                	mov    eax,esi
c0001376:	ba 00 31 02 c0       	mov    edx,0xc0023100
c000137b:	5b                   	pop    ebx
c000137c:	5e                   	pop    esi
c000137d:	5f                   	pop    edi
c000137e:	5d                   	pop    ebp
c000137f:	e9 13 fa ff ff       	jmp    c0000d97 <sYSMALLOc>
c0001384:	31 c0                	xor    eax,eax
c0001386:	83 c4 1c             	add    esp,0x1c
c0001389:	5b                   	pop    ebx
c000138a:	5e                   	pop    esi
c000138b:	5f                   	pop    edi
c000138c:	5d                   	pop    ebp
c000138d:	c3                   	ret    

c000138e <iALLOc>:
c000138e:	55                   	push   ebp
c000138f:	89 c5                	mov    ebp,eax
c0001391:	57                   	push   edi
c0001392:	56                   	push   esi
c0001393:	53                   	push   ebx
c0001394:	83 ec 2c             	sub    esp,0x2c
c0001397:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c000139e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013a2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013aa:	75 12                	jne    c00013be <iALLOc+0x30>
c00013ac:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00013b1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013b5:	e8 01 f8 ff ff       	call   c0000bbb <malloc_consolidate>
c00013ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013be:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013c3:	74 12                	je     c00013d7 <iALLOc+0x49>
c00013c5:	85 ed                	test   ebp,ebp
c00013c7:	0f 84 64 01 00 00    	je     c0001531 <iALLOc+0x1a3>
c00013cd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013d5:	eb 33                	jmp    c000140a <iALLOc+0x7c>
c00013d7:	85 ed                	test   ebp,ebp
c00013d9:	75 14                	jne    c00013ef <iALLOc+0x61>
c00013db:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013e3:	83 c4 2c             	add    esp,0x2c
c00013e6:	5b                   	pop    ebx
c00013e7:	5e                   	pop    esi
c00013e8:	5f                   	pop    edi
c00013e9:	5d                   	pop    ebp
c00013ea:	e9 11 fc ff ff       	jmp    c0001000 <dlmalloc>
c00013ef:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013f6:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013fe:	83 f8 0f             	cmp    eax,0xf
c0001401:	76 07                	jbe    c000140a <iALLOc+0x7c>
c0001403:	83 e0 f8             	and    eax,0xfffffff8
c0001406:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000140a:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000140f:	75 09                	jne    c000141a <iALLOc+0x8c>
c0001411:	89 d0                	mov    eax,edx
c0001413:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001416:	31 f6                	xor    esi,esi
c0001418:	eb 3b                	jmp    c0001455 <iALLOc+0xc7>
c000141a:	8b 02                	mov    eax,DWORD PTR [edx]
c000141c:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001424:	83 c0 0b             	add    eax,0xb
c0001427:	83 f8 0f             	cmp    eax,0xf
c000142a:	76 07                	jbe    c0001433 <iALLOc+0xa5>
c000142c:	83 e0 f8             	and    eax,0xfffffff8
c000142f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001433:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001437:	0f af f5             	imul   esi,ebp
c000143a:	eb 25                	jmp    c0001461 <iALLOc+0xd3>
c000143c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000143e:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001441:	bb 10 00 00 00       	mov    ebx,0x10
c0001446:	83 f9 0f             	cmp    ecx,0xf
c0001449:	76 05                	jbe    c0001450 <iALLOc+0xc2>
c000144b:	83 e1 f8             	and    ecx,0xfffffff8
c000144e:	89 cb                	mov    ebx,ecx
c0001450:	01 de                	add    esi,ebx
c0001452:	83 c0 04             	add    eax,0x4
c0001455:	39 c7                	cmp    edi,eax
c0001457:	75 e3                	jne    c000143c <iALLOc+0xae>
c0001459:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001461:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001465:	83 ec 0c             	sub    esp,0xc
c0001468:	8b 1d 54 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023454
c000146e:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c0001478:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000147c:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001480:	50                   	push   eax
c0001481:	e8 7a fb ff ff       	call   c0001000 <dlmalloc>
c0001486:	83 c4 10             	add    esp,0x10
c0001489:	89 1d 54 34 02 c0    	mov    DWORD PTR ds:0xc0023454,ebx
c000148f:	85 c0                	test   eax,eax
c0001491:	0f 84 92 00 00 00    	je     c0001529 <iALLOc+0x19b>
c0001497:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000149a:	8d 78 f8             	lea    edi,[eax-0x8]
c000149d:	83 e3 fc             	and    ebx,0xfffffffc
c00014a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014a4:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014a9:	74 1e                	je     c00014c9 <iALLOc+0x13b>
c00014ab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014af:	89 d9                	mov    ecx,ebx
c00014b1:	52                   	push   edx
c00014b2:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014b6:	83 e9 04             	sub    ecx,0x4
c00014b9:	51                   	push   ecx
c00014ba:	6a 00                	push   0x0
c00014bc:	50                   	push   eax
c00014bd:	e8 fe ef ff ff       	call   c00004c0 <memset>
c00014c2:	83 c4 10             	add    esp,0x10
c00014c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014ce:	75 14                	jne    c00014e4 <iALLOc+0x156>
c00014d0:	8d 04 37             	lea    eax,[edi+esi*1]
c00014d3:	29 f3                	sub    ebx,esi
c00014d5:	83 cb 01             	or     ebx,0x1
c00014d8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014db:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014de:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014e2:	89 f3                	mov    ebx,esi
c00014e4:	31 c0                	xor    eax,eax
c00014e6:	4d                   	dec    ebp
c00014e7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014eb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014ee:	39 c5                	cmp    ebp,eax
c00014f0:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014f3:	74 2c                	je     c0001521 <iALLOc+0x193>
c00014f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014f9:	85 c9                	test   ecx,ecx
c00014fb:	75 15                	jne    c0001512 <iALLOc+0x184>
c00014fd:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001500:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001503:	b9 10 00 00 00       	mov    ecx,0x10
c0001508:	83 fe 0f             	cmp    esi,0xf
c000150b:	76 05                	jbe    c0001512 <iALLOc+0x184>
c000150d:	83 e6 f8             	and    esi,0xfffffff8
c0001510:	89 f1                	mov    ecx,esi
c0001512:	89 ce                	mov    esi,ecx
c0001514:	29 cb                	sub    ebx,ecx
c0001516:	83 ce 01             	or     esi,0x1
c0001519:	40                   	inc    eax
c000151a:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000151d:	01 cf                	add    edi,ecx
c000151f:	eb c6                	jmp    c00014e7 <iALLOc+0x159>
c0001521:	83 cb 01             	or     ebx,0x1
c0001524:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001527:	eb 08                	jmp    c0001531 <iALLOc+0x1a3>
c0001529:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001535:	83 c4 2c             	add    esp,0x2c
c0001538:	5b                   	pop    ebx
c0001539:	5e                   	pop    esi
c000153a:	5f                   	pop    edi
c000153b:	5d                   	pop    ebp
c000153c:	c3                   	ret    

c000153d <dlrealloc>:
c000153d:	55                   	push   ebp
c000153e:	57                   	push   edi
c000153f:	56                   	push   esi
c0001540:	53                   	push   ebx
c0001541:	83 ec 1c             	sub    esp,0x1c
c0001544:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001548:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000154c:	85 db                	test   ebx,ebx
c000154e:	75 10                	jne    c0001560 <dlrealloc+0x23>
c0001550:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001554:	83 c4 1c             	add    esp,0x1c
c0001557:	5b                   	pop    ebx
c0001558:	5e                   	pop    esi
c0001559:	5f                   	pop    edi
c000155a:	5d                   	pop    ebp
c000155b:	e9 a0 fa ff ff       	jmp    c0001000 <dlmalloc>
c0001560:	83 f8 df             	cmp    eax,0xffffffdf
c0001563:	76 07                	jbe    c000156c <dlrealloc+0x2f>
c0001565:	31 db                	xor    ebx,ebx
c0001567:	e9 6a 01 00 00       	jmp    c00016d6 <dlrealloc+0x199>
c000156c:	83 c0 0b             	add    eax,0xb
c000156f:	bd 10 00 00 00       	mov    ebp,0x10
c0001574:	83 f8 0f             	cmp    eax,0xf
c0001577:	76 05                	jbe    c000157e <dlrealloc+0x41>
c0001579:	83 e0 f8             	and    eax,0xfffffff8
c000157c:	89 c5                	mov    ebp,eax
c000157e:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001581:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001584:	89 c6                	mov    esi,eax
c0001586:	83 e6 fc             	and    esi,0xfffffffc
c0001589:	a8 02                	test   al,0x2
c000158b:	75 d8                	jne    c0001565 <dlrealloc+0x28>
c000158d:	39 f5                	cmp    ebp,esi
c000158f:	0f 86 04 01 00 00    	jbe    c0001699 <dlrealloc+0x15c>
c0001595:	8d 14 37             	lea    edx,[edi+esi*1]
c0001598:	39 15 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,edx
c000159e:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015a1:	75 33                	jne    c00015d6 <dlrealloc+0x99>
c00015a3:	83 e1 fc             	and    ecx,0xfffffffc
c00015a6:	01 f1                	add    ecx,esi
c00015a8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ac:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015af:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015b3:	77 49                	ja     c00015fe <dlrealloc+0xc1>
c00015b5:	83 e0 01             	and    eax,0x1
c00015b8:	01 ef                	add    edi,ebp
c00015ba:	09 e8                	or     eax,ebp
c00015bc:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015c3:	29 e8                	sub    eax,ebp
c00015c5:	89 3d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edi
c00015cb:	83 c8 01             	or     eax,0x1
c00015ce:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015d1:	e9 00 01 00 00       	jmp    c00016d6 <dlrealloc+0x199>
c00015d6:	89 c8                	mov    eax,ecx
c00015d8:	83 e0 fe             	and    eax,0xfffffffe
c00015db:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015e0:	75 1c                	jne    c00015fe <dlrealloc+0xc1>
c00015e2:	83 e1 fc             	and    ecx,0xfffffffc
c00015e5:	01 f1                	add    ecx,esi
c00015e7:	39 cd                	cmp    ebp,ecx
c00015e9:	77 13                	ja     c00015fe <dlrealloc+0xc1>
c00015eb:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015f1:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015f4:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015f7:	89 ce                	mov    esi,ecx
c00015f9:	e9 9b 00 00 00       	jmp    c0001699 <dlrealloc+0x15c>
c00015fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001602:	83 ec 0c             	sub    esp,0xc
c0001605:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001608:	50                   	push   eax
c0001609:	e8 f2 f9 ff ff       	call   c0001000 <dlmalloc>
c000160e:	83 c4 10             	add    esp,0x10
c0001611:	85 c0                	test   eax,eax
c0001613:	0f 84 4c ff ff ff    	je     c0001565 <dlrealloc+0x28>
c0001619:	8d 48 f8             	lea    ecx,[eax-0x8]
c000161c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001620:	39 ca                	cmp    edx,ecx
c0001622:	75 0a                	jne    c000162e <dlrealloc+0xf1>
c0001624:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001627:	83 e0 fc             	and    eax,0xfffffffc
c000162a:	01 c6                	add    esi,eax
c000162c:	eb 6b                	jmp    c0001699 <dlrealloc+0x15c>
c000162e:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001631:	83 f9 27             	cmp    ecx,0x27
c0001634:	76 08                	jbe    c000163e <dlrealloc+0x101>
c0001636:	89 de                	mov    esi,ebx
c0001638:	89 c7                	mov    edi,eax
c000163a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000163c:	eb 43                	jmp    c0001681 <dlrealloc+0x144>
c000163e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001640:	83 f9 13             	cmp    ecx,0x13
c0001643:	89 10                	mov    DWORD PTR [eax],edx
c0001645:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001648:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000164b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000164e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001651:	76 2e                	jbe    c0001681 <dlrealloc+0x144>
c0001653:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001656:	83 f9 1b             	cmp    ecx,0x1b
c0001659:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000165c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000165f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001662:	76 1d                	jbe    c0001681 <dlrealloc+0x144>
c0001664:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001667:	83 f9 23             	cmp    ecx,0x23
c000166a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000166d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001670:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001673:	76 0c                	jbe    c0001681 <dlrealloc+0x144>
c0001675:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001678:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000167b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000167e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001681:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	53                   	push   ebx
c0001689:	e8 14 f6 ff ff       	call   c0000ca2 <dlfree>
c000168e:	83 c4 10             	add    esp,0x10
c0001691:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001695:	89 c3                	mov    ebx,eax
c0001697:	eb 3d                	jmp    c00016d6 <dlrealloc+0x199>
c0001699:	89 f2                	mov    edx,esi
c000169b:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000169e:	29 ea                	sub    edx,ebp
c00016a0:	83 e1 01             	and    ecx,0x1
c00016a3:	8d 04 37             	lea    eax,[edi+esi*1]
c00016a6:	83 fa 0f             	cmp    edx,0xf
c00016a9:	77 0b                	ja     c00016b6 <dlrealloc+0x179>
c00016ab:	09 ce                	or     esi,ecx
c00016ad:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016b0:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016b4:	eb 20                	jmp    c00016d6 <dlrealloc+0x199>
c00016b6:	01 ef                	add    edi,ebp
c00016b8:	83 ca 01             	or     edx,0x1
c00016bb:	09 cd                	or     ebp,ecx
c00016bd:	83 ec 0c             	sub    esp,0xc
c00016c0:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016c3:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c00016c6:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016ca:	83 c7 08             	add    edi,0x8
c00016cd:	57                   	push   edi
c00016ce:	e8 cf f5 ff ff       	call   c0000ca2 <dlfree>
c00016d3:	83 c4 10             	add    esp,0x10
c00016d6:	83 c4 1c             	add    esp,0x1c
c00016d9:	89 d8                	mov    eax,ebx
c00016db:	5b                   	pop    ebx
c00016dc:	5e                   	pop    esi
c00016dd:	5f                   	pop    edi
c00016de:	5d                   	pop    ebp
c00016df:	c3                   	ret    

c00016e0 <dlmemalign>:
c00016e0:	55                   	push   ebp
c00016e1:	57                   	push   edi
c00016e2:	56                   	push   esi
c00016e3:	53                   	push   ebx
c00016e4:	83 ec 0c             	sub    esp,0xc
c00016e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016ef:	83 fa 08             	cmp    edx,0x8
c00016f2:	77 10                	ja     c0001704 <dlmemalign+0x24>
c00016f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016f8:	83 c4 0c             	add    esp,0xc
c00016fb:	5b                   	pop    ebx
c00016fc:	5e                   	pop    esi
c00016fd:	5f                   	pop    edi
c00016fe:	5d                   	pop    ebp
c00016ff:	e9 fc f8 ff ff       	jmp    c0001000 <dlmalloc>
c0001704:	bf 10 00 00 00       	mov    edi,0x10
c0001709:	83 fa 0f             	cmp    edx,0xf
c000170c:	76 13                	jbe    c0001721 <dlmemalign+0x41>
c000170e:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001711:	85 d1                	test   ecx,edx
c0001713:	75 04                	jne    c0001719 <dlmemalign+0x39>
c0001715:	89 d7                	mov    edi,edx
c0001717:	eb 08                	jmp    c0001721 <dlmemalign+0x41>
c0001719:	39 d7                	cmp    edi,edx
c000171b:	73 04                	jae    c0001721 <dlmemalign+0x41>
c000171d:	01 ff                	add    edi,edi
c000171f:	eb f8                	jmp    c0001719 <dlmemalign+0x39>
c0001721:	83 f8 df             	cmp    eax,0xffffffdf
c0001724:	76 07                	jbe    c000172d <dlmemalign+0x4d>
c0001726:	31 c0                	xor    eax,eax
c0001728:	e9 ce 00 00 00       	jmp    c00017fb <dlmemalign+0x11b>
c000172d:	83 c0 0b             	add    eax,0xb
c0001730:	bd 10 00 00 00       	mov    ebp,0x10
c0001735:	83 f8 0f             	cmp    eax,0xf
c0001738:	76 05                	jbe    c000173f <dlmemalign+0x5f>
c000173a:	83 e0 f8             	and    eax,0xfffffff8
c000173d:	89 c5                	mov    ebp,eax
c000173f:	83 ec 0c             	sub    esp,0xc
c0001742:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001746:	50                   	push   eax
c0001747:	e8 b4 f8 ff ff       	call   c0001000 <dlmalloc>
c000174c:	83 c4 10             	add    esp,0x10
c000174f:	89 c1                	mov    ecx,eax
c0001751:	85 c0                	test   eax,eax
c0001753:	74 d1                	je     c0001726 <dlmemalign+0x46>
c0001755:	31 d2                	xor    edx,edx
c0001757:	8d 70 f8             	lea    esi,[eax-0x8]
c000175a:	f7 f7                	div    edi
c000175c:	85 d2                	test   edx,edx
c000175e:	74 62                	je     c00017c2 <dlmemalign+0xe2>
c0001760:	89 f8                	mov    eax,edi
c0001762:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001766:	f7 d8                	neg    eax
c0001768:	21 c3                	and    ebx,eax
c000176a:	83 eb 08             	sub    ebx,0x8
c000176d:	89 d8                	mov    eax,ebx
c000176f:	29 f0                	sub    eax,esi
c0001771:	83 f8 0f             	cmp    eax,0xf
c0001774:	77 02                	ja     c0001778 <dlmemalign+0x98>
c0001776:	01 fb                	add    ebx,edi
c0001778:	89 d8                	mov    eax,ebx
c000177a:	29 f0                	sub    eax,esi
c000177c:	89 c6                	mov    esi,eax
c000177e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001781:	89 c2                	mov    edx,eax
c0001783:	83 e2 fc             	and    edx,0xfffffffc
c0001786:	29 f2                	sub    edx,esi
c0001788:	a8 02                	test   al,0x2
c000178a:	74 10                	je     c000179c <dlmemalign+0xbc>
c000178c:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000178f:	83 ca 02             	or     edx,0x2
c0001792:	8d 43 08             	lea    eax,[ebx+0x8]
c0001795:	89 33                	mov    DWORD PTR [ebx],esi
c0001797:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000179a:	eb 5f                	jmp    c00017fb <dlmemalign+0x11b>
c000179c:	89 d0                	mov    eax,edx
c000179e:	83 ec 0c             	sub    esp,0xc
c00017a1:	83 c8 01             	or     eax,0x1
c00017a4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017a7:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017ac:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017af:	83 e0 01             	and    eax,0x1
c00017b2:	09 f0                	or     eax,esi
c00017b4:	89 de                	mov    esi,ebx
c00017b6:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017b9:	51                   	push   ecx
c00017ba:	e8 e3 f4 ff ff       	call   c0000ca2 <dlfree>
c00017bf:	83 c4 10             	add    esp,0x10
c00017c2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017c5:	a8 02                	test   al,0x2
c00017c7:	75 2f                	jne    c00017f8 <dlmemalign+0x118>
c00017c9:	83 e0 fc             	and    eax,0xfffffffc
c00017cc:	8d 55 10             	lea    edx,[ebp+0x10]
c00017cf:	39 c2                	cmp    edx,eax
c00017d1:	73 25                	jae    c00017f8 <dlmemalign+0x118>
c00017d3:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017d6:	29 e8                	sub    eax,ebp
c00017d8:	83 c8 01             	or     eax,0x1
c00017db:	83 ec 0c             	sub    esp,0xc
c00017de:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00017e1:	83 c2 08             	add    edx,0x8
c00017e4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e7:	83 e0 01             	and    eax,0x1
c00017ea:	09 c5                	or     ebp,eax
c00017ec:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017ef:	52                   	push   edx
c00017f0:	e8 ad f4 ff ff       	call   c0000ca2 <dlfree>
c00017f5:	83 c4 10             	add    esp,0x10
c00017f8:	8d 46 08             	lea    eax,[esi+0x8]
c00017fb:	83 c4 0c             	add    esp,0xc
c00017fe:	5b                   	pop    ebx
c00017ff:	5e                   	pop    esi
c0001800:	5f                   	pop    edi
c0001801:	5d                   	pop    ebp
c0001802:	c3                   	ret    

c0001803 <dlcalloc>:
c0001803:	53                   	push   ebx
c0001804:	83 ec 14             	sub    esp,0x14
c0001807:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000180b:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001810:	50                   	push   eax
c0001811:	e8 ea f7 ff ff       	call   c0001000 <dlmalloc>
c0001816:	83 c4 10             	add    esp,0x10
c0001819:	89 c3                	mov    ebx,eax
c000181b:	85 c0                	test   eax,eax
c000181d:	74 77                	je     c0001896 <dlcalloc+0x93>
c000181f:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001822:	89 d0                	mov    eax,edx
c0001824:	83 e0 fc             	and    eax,0xfffffffc
c0001827:	80 e2 02             	and    dl,0x2
c000182a:	75 5a                	jne    c0001886 <dlcalloc+0x83>
c000182c:	83 e8 04             	sub    eax,0x4
c000182f:	83 f8 27             	cmp    eax,0x27
c0001832:	76 03                	jbe    c0001837 <dlcalloc+0x34>
c0001834:	51                   	push   ecx
c0001835:	eb 53                	jmp    c000188a <dlcalloc+0x87>
c0001837:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000183d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001844:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000184b:	83 f8 13             	cmp    eax,0x13
c000184e:	76 46                	jbe    c0001896 <dlcalloc+0x93>
c0001850:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001857:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000185e:	83 f8 1b             	cmp    eax,0x1b
c0001861:	76 33                	jbe    c0001896 <dlcalloc+0x93>
c0001863:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000186a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001871:	83 f8 23             	cmp    eax,0x23
c0001874:	76 20                	jbe    c0001896 <dlcalloc+0x93>
c0001876:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000187d:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001884:	eb 10                	jmp    c0001896 <dlcalloc+0x93>
c0001886:	83 e8 08             	sub    eax,0x8
c0001889:	52                   	push   edx
c000188a:	50                   	push   eax
c000188b:	6a 00                	push   0x0
c000188d:	53                   	push   ebx
c000188e:	e8 2d ec ff ff       	call   c00004c0 <memset>
c0001893:	83 c4 10             	add    esp,0x10
c0001896:	83 c4 08             	add    esp,0x8
c0001899:	89 d8                	mov    eax,ebx
c000189b:	5b                   	pop    ebx
c000189c:	c3                   	ret    

c000189d <dlcfree>:
c000189d:	e9 00 f4 ff ff       	jmp    c0000ca2 <dlfree>

c00018a2 <dlindependent_calloc>:
c00018a2:	83 ec 28             	sub    esp,0x28
c00018a5:	b9 03 00 00 00       	mov    ecx,0x3
c00018aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018ba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018be:	e8 cb fa ff ff       	call   c000138e <iALLOc>
c00018c3:	83 c4 2c             	add    esp,0x2c
c00018c6:	c3                   	ret    

c00018c7 <dlindependent_comalloc>:
c00018c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018cf:	31 c9                	xor    ecx,ecx
c00018d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018d9:	e9 b0 fa ff ff       	jmp    c000138e <iALLOc>

c00018de <dlvalloc>:
c00018de:	83 ec 0c             	sub    esp,0xc
c00018e1:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c00018e8:	75 0a                	jne    c00018f4 <dlvalloc+0x16>
c00018ea:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00018ef:	e8 c7 f2 ff ff       	call   c0000bbb <malloc_consolidate>
c00018f4:	50                   	push   eax
c00018f5:	50                   	push   eax
c00018f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018fa:	ff 35 5c 34 02 c0    	push   DWORD PTR ds:0xc002345c
c0001900:	e8 db fd ff ff       	call   c00016e0 <dlmemalign>
c0001905:	83 c4 1c             	add    esp,0x1c
c0001908:	c3                   	ret    

c0001909 <dlpvalloc>:
c0001909:	83 ec 0c             	sub    esp,0xc
c000190c:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c0001913:	75 0a                	jne    c000191f <dlpvalloc+0x16>
c0001915:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000191a:	e8 9c f2 ff ff       	call   c0000bbb <malloc_consolidate>
c000191f:	52                   	push   edx
c0001920:	a1 5c 34 02 c0       	mov    eax,ds:0xc002345c
c0001925:	52                   	push   edx
c0001926:	89 c1                	mov    ecx,eax
c0001928:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000192c:	f7 d9                	neg    ecx
c000192e:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001932:	21 ca                	and    edx,ecx
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	e8 a5 fd ff ff       	call   c00016e0 <dlmemalign>
c000193b:	83 c4 1c             	add    esp,0x1c
c000193e:	c3                   	ret    

c000193f <dlmalloc_trim>:
c000193f:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001944:	e8 72 f2 ff ff       	call   c0000bbb <malloc_consolidate>
c0001949:	31 c0                	xor    eax,eax
c000194b:	c3                   	ret    

c000194c <dlmalloc_usable_size>:
c000194c:	53                   	push   ebx
c000194d:	31 c0                	xor    eax,eax
c000194f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001953:	85 c9                	test   ecx,ecx
c0001955:	74 24                	je     c000197b <dlmalloc_usable_size+0x2f>
c0001957:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000195a:	f6 c2 02             	test   dl,0x2
c000195d:	74 08                	je     c0001967 <dlmalloc_usable_size+0x1b>
c000195f:	83 e2 fc             	and    edx,0xfffffffc
c0001962:	8d 42 f8             	lea    eax,[edx-0x8]
c0001965:	eb 14                	jmp    c000197b <dlmalloc_usable_size+0x2f>
c0001967:	89 d3                	mov    ebx,edx
c0001969:	31 c0                	xor    eax,eax
c000196b:	83 e3 fe             	and    ebx,0xfffffffe
c000196e:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001973:	74 06                	je     c000197b <dlmalloc_usable_size+0x2f>
c0001975:	83 e2 fc             	and    edx,0xfffffffc
c0001978:	8d 42 fc             	lea    eax,[edx-0x4]
c000197b:	5b                   	pop    ebx
c000197c:	c3                   	ret    

c000197d <dlmallinfo>:
c000197d:	55                   	push   ebp
c000197e:	57                   	push   edi
c000197f:	56                   	push   esi
c0001980:	53                   	push   ebx
c0001981:	83 ec 08             	sub    esp,0x8
c0001984:	83 3d 2c 31 02 c0 00 	cmp    DWORD PTR ds:0xc002312c,0x0
c000198b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000198f:	75 0a                	jne    c000199b <dlmallinfo+0x1e>
c0001991:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001996:	e8 20 f2 ff ff       	call   c0000bbb <malloc_consolidate>
c000199b:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c00019a0:	31 ed                	xor    ebp,ebp
c00019a2:	31 c9                	xor    ecx,ecx
c00019a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019a7:	83 e0 fc             	and    eax,0xfffffffc
c00019aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019ae:	31 c0                	xor    eax,eax
c00019b0:	8b 14 85 04 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcefc]
c00019b7:	85 d2                	test   edx,edx
c00019b9:	74 0e                	je     c00019c9 <dlmallinfo+0x4c>
c00019bb:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019be:	45                   	inc    ebp
c00019bf:	83 e6 fc             	and    esi,0xfffffffc
c00019c2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019c5:	01 f1                	add    ecx,esi
c00019c7:	eb ee                	jmp    c00019b7 <dlmallinfo+0x3a>
c00019c9:	40                   	inc    eax
c00019ca:	83 f8 0a             	cmp    eax,0xa
c00019cd:	75 e1                	jne    c00019b0 <dlmallinfo+0x33>
c00019cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019d3:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019da:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019dd:	b8 34 31 02 c0       	mov    eax,0xc0023134
c00019e2:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019e5:	39 f0                	cmp    eax,esi
c00019e7:	74 10                	je     c00019f9 <dlmallinfo+0x7c>
c00019e9:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019ec:	ff 04 24             	inc    DWORD PTR [esp]
c00019ef:	83 e7 fc             	and    edi,0xfffffffc
c00019f2:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019f5:	01 fa                	add    edx,edi
c00019f7:	eb ec                	jmp    c00019e5 <dlmallinfo+0x68>
c00019f9:	83 c0 08             	add    eax,0x8
c00019fc:	3d 2c 34 02 c0       	cmp    eax,0xc002342c
c0001a01:	75 df                	jne    c00019e2 <dlmallinfo+0x65>
c0001a03:	a1 68 34 02 c0       	mov    eax,ds:0xc0023468
c0001a08:	8b 35 50 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023450
c0001a0e:	89 03                	mov    DWORD PTR [ebx],eax
c0001a10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	8b 35 64 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023464
c0001a1b:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a21:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a24:	8b 35 74 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023474
c0001a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a2e:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a31:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a34:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a37:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a3a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a3d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a40:	83 c4 08             	add    esp,0x8
c0001a43:	89 d8                	mov    eax,ebx
c0001a45:	5b                   	pop    ebx
c0001a46:	5e                   	pop    esi
c0001a47:	5f                   	pop    edi
c0001a48:	5d                   	pop    ebp
c0001a49:	c2 04 00             	ret    0x4

c0001a4c <dlmalloc_stats>:
c0001a4c:	83 ec 30             	sub    esp,0x30
c0001a4f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a53:	50                   	push   eax
c0001a54:	e8 24 ff ff ff       	call   c000197d <dlmallinfo>
c0001a59:	83 c4 30             	add    esp,0x30
c0001a5c:	c3                   	ret    

c0001a5d <dlmallopt>:
c0001a5d:	56                   	push   esi
c0001a5e:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001a63:	53                   	push   ebx
c0001a64:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a6c:	e8 4a f1 ff ff       	call   c0000bbb <malloc_consolidate>
c0001a71:	8d 46 04             	lea    eax,[esi+0x4]
c0001a74:	83 f8 05             	cmp    eax,0x5
c0001a77:	77 67                	ja     c0001ae0 <dlmallopt+0x83>
c0001a79:	ff 24 85 a4 ec 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe135c]
c0001a80:	83 fb 50             	cmp    ebx,0x50
c0001a83:	77 5b                	ja     c0001ae0 <dlmallopt+0x83>
c0001a85:	ba 08 00 00 00       	mov    edx,0x8
c0001a8a:	85 db                	test   ebx,ebx
c0001a8c:	74 12                	je     c0001aa0 <dlmallopt+0x43>
c0001a8e:	83 c3 0b             	add    ebx,0xb
c0001a91:	ba 10 00 00 00       	mov    edx,0x10
c0001a96:	83 fb 0f             	cmp    ebx,0xf
c0001a99:	76 05                	jbe    c0001aa0 <dlmallopt+0x43>
c0001a9b:	89 da                	mov    edx,ebx
c0001a9d:	83 e2 f8             	and    edx,0xfffffff8
c0001aa0:	a1 00 31 02 c0       	mov    eax,ds:0xc0023100
c0001aa5:	83 e0 03             	and    eax,0x3
c0001aa8:	09 d0                	or     eax,edx
c0001aaa:	a3 00 31 02 c0       	mov    ds:0xc0023100,eax
c0001aaf:	eb 31                	jmp    c0001ae2 <dlmallopt+0x85>
c0001ab1:	89 1d 44 34 02 c0    	mov    DWORD PTR ds:0xc0023444,ebx
c0001ab7:	eb 06                	jmp    c0001abf <dlmallopt+0x62>
c0001ab9:	89 1d 48 34 02 c0    	mov    DWORD PTR ds:0xc0023448,ebx
c0001abf:	be 01 00 00 00       	mov    esi,0x1
c0001ac4:	eb 1c                	jmp    c0001ae2 <dlmallopt+0x85>
c0001ac6:	89 1d 4c 34 02 c0    	mov    DWORD PTR ds:0xc002344c,ebx
c0001acc:	eb f1                	jmp    c0001abf <dlmallopt+0x62>
c0001ace:	31 f6                	xor    esi,esi
c0001ad0:	85 db                	test   ebx,ebx
c0001ad2:	75 0e                	jne    c0001ae2 <dlmallopt+0x85>
c0001ad4:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c0001ade:	eb df                	jmp    c0001abf <dlmallopt+0x62>
c0001ae0:	31 f6                	xor    esi,esi
c0001ae2:	5b                   	pop    ebx
c0001ae3:	89 f0                	mov    eax,esi
c0001ae5:	5e                   	pop    esi
c0001ae6:	c3                   	ret    
c0001ae7:	90                   	nop

c0001ae8 <isblank>:
c0001ae8:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001aed:	74 09                	je     c0001af8 <isblank+0x10>
c0001aef:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001af4:	75 0a                	jne    c0001b00 <isblank+0x18>
c0001af6:	66 90                	xchg   ax,ax
c0001af8:	b8 01 00 00 00       	mov    eax,0x1
c0001afd:	c3                   	ret    
c0001afe:	66 90                	xchg   ax,ax
c0001b00:	b8 00 00 00 00       	mov    eax,0x0
c0001b05:	c3                   	ret    
c0001b06:	66 90                	xchg   ax,ax

c0001b08 <iscntrl>:
c0001b08:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b0d:	7e 09                	jle    c0001b18 <iscntrl+0x10>
c0001b0f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b14:	75 0a                	jne    c0001b20 <iscntrl+0x18>
c0001b16:	66 90                	xchg   ax,ax
c0001b18:	b8 01 00 00 00       	mov    eax,0x1
c0001b1d:	c3                   	ret    
c0001b1e:	66 90                	xchg   ax,ax
c0001b20:	b8 00 00 00 00       	mov    eax,0x0
c0001b25:	c3                   	ret    
c0001b26:	66 90                	xchg   ax,ax

c0001b28 <isdigit>:
c0001b28:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b2d:	7e 0d                	jle    c0001b3c <isdigit+0x14>
c0001b2f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b34:	7f 06                	jg     c0001b3c <isdigit+0x14>
c0001b36:	b8 01 00 00 00       	mov    eax,0x1
c0001b3b:	c3                   	ret    
c0001b3c:	b8 00 00 00 00       	mov    eax,0x0
c0001b41:	c3                   	ret    
c0001b42:	66 90                	xchg   ax,ax

c0001b44 <islower>:
c0001b44:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b49:	7e 0d                	jle    c0001b58 <islower+0x14>
c0001b4b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b50:	7f 06                	jg     c0001b58 <islower+0x14>
c0001b52:	b8 01 00 00 00       	mov    eax,0x1
c0001b57:	c3                   	ret    
c0001b58:	b8 00 00 00 00       	mov    eax,0x0
c0001b5d:	c3                   	ret    
c0001b5e:	66 90                	xchg   ax,ax

c0001b60 <isspace>:
c0001b60:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b65:	7c 19                	jl     c0001b80 <isspace+0x20>
c0001b67:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b6c:	7e 0a                	jle    c0001b78 <isspace+0x18>
c0001b6e:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b73:	75 0b                	jne    c0001b80 <isspace+0x20>
c0001b75:	8d 76 00             	lea    esi,[esi+0x0]
c0001b78:	b8 01 00 00 00       	mov    eax,0x1
c0001b7d:	c3                   	ret    
c0001b7e:	66 90                	xchg   ax,ax
c0001b80:	b8 00 00 00 00       	mov    eax,0x0
c0001b85:	c3                   	ret    
c0001b86:	66 90                	xchg   ax,ax

c0001b88 <isupper>:
c0001b88:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b8d:	7e 0d                	jle    c0001b9c <isupper+0x14>
c0001b8f:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b94:	7f 06                	jg     c0001b9c <isupper+0x14>
c0001b96:	b8 01 00 00 00       	mov    eax,0x1
c0001b9b:	c3                   	ret    
c0001b9c:	b8 00 00 00 00       	mov    eax,0x0
c0001ba1:	c3                   	ret    
c0001ba2:	66 90                	xchg   ax,ax

c0001ba4 <isalpha>:
c0001ba4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ba8:	e8 db ff ff ff       	call   c0001b88 <isupper>
c0001bad:	83 c4 04             	add    esp,0x4
c0001bb0:	85 c0                	test   eax,eax
c0001bb2:	75 10                	jne    c0001bc4 <isalpha+0x20>
c0001bb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bb8:	e8 87 ff ff ff       	call   c0001b44 <islower>
c0001bbd:	83 c4 04             	add    esp,0x4
c0001bc0:	85 c0                	test   eax,eax
c0001bc2:	74 08                	je     c0001bcc <isalpha+0x28>
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isalnum>:
c0001bd4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bd8:	e8 c7 ff ff ff       	call   c0001ba4 <isalpha>
c0001bdd:	83 c4 04             	add    esp,0x4
c0001be0:	85 c0                	test   eax,eax
c0001be2:	75 10                	jne    c0001bf4 <isalnum+0x20>
c0001be4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001be8:	e8 3b ff ff ff       	call   c0001b28 <isdigit>
c0001bed:	83 c4 04             	add    esp,0x4
c0001bf0:	85 c0                	test   eax,eax
c0001bf2:	74 08                	je     c0001bfc <isalnum+0x28>
c0001bf4:	b8 01 00 00 00       	mov    eax,0x1
c0001bf9:	c3                   	ret    
c0001bfa:	66 90                	xchg   ax,ax
c0001bfc:	b8 00 00 00 00       	mov    eax,0x0
c0001c01:	c3                   	ret    
c0001c02:	66 90                	xchg   ax,ax

c0001c04 <ispunct>:
c0001c04:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c08:	e8 c7 ff ff ff       	call   c0001bd4 <isalnum>
c0001c0d:	83 c4 04             	add    esp,0x4
c0001c10:	85 c0                	test   eax,eax
c0001c12:	75 28                	jne    c0001c3c <ispunct+0x38>
c0001c14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c18:	e8 43 ff ff ff       	call   c0001b60 <isspace>
c0001c1d:	83 c4 04             	add    esp,0x4
c0001c20:	85 c0                	test   eax,eax
c0001c22:	75 18                	jne    c0001c3c <ispunct+0x38>
c0001c24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c28:	e8 db fe ff ff       	call   c0001b08 <iscntrl>
c0001c2d:	83 c4 04             	add    esp,0x4
c0001c30:	85 c0                	test   eax,eax
c0001c32:	75 08                	jne    c0001c3c <ispunct+0x38>
c0001c34:	b8 01 00 00 00       	mov    eax,0x1
c0001c39:	c3                   	ret    
c0001c3a:	66 90                	xchg   ax,ax
c0001c3c:	b8 00 00 00 00       	mov    eax,0x0
c0001c41:	c3                   	ret    
c0001c42:	66 90                	xchg   ax,ax

c0001c44 <isgraph>:
c0001c44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c48:	e8 87 ff ff ff       	call   c0001bd4 <isalnum>
c0001c4d:	83 c4 04             	add    esp,0x4
c0001c50:	85 c0                	test   eax,eax
c0001c52:	75 10                	jne    c0001c64 <isgraph+0x20>
c0001c54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c58:	e8 a7 ff ff ff       	call   c0001c04 <ispunct>
c0001c5d:	83 c4 04             	add    esp,0x4
c0001c60:	85 c0                	test   eax,eax
c0001c62:	74 08                	je     c0001c6c <isgraph+0x28>
c0001c64:	b8 01 00 00 00       	mov    eax,0x1
c0001c69:	c3                   	ret    
c0001c6a:	66 90                	xchg   ax,ax
c0001c6c:	b8 00 00 00 00       	mov    eax,0x0
c0001c71:	c3                   	ret    
c0001c72:	66 90                	xchg   ax,ax

c0001c74 <isprint>:
c0001c74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c78:	e8 c7 ff ff ff       	call   c0001c44 <isgraph>
c0001c7d:	83 c4 04             	add    esp,0x4
c0001c80:	85 c0                	test   eax,eax
c0001c82:	75 08                	jne    c0001c8c <isprint+0x18>
c0001c84:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c89:	75 09                	jne    c0001c94 <isprint+0x20>
c0001c8b:	90                   	nop
c0001c8c:	b8 01 00 00 00       	mov    eax,0x1
c0001c91:	c3                   	ret    
c0001c92:	66 90                	xchg   ax,ax
c0001c94:	b8 00 00 00 00       	mov    eax,0x0
c0001c99:	c3                   	ret    
c0001c9a:	66 90                	xchg   ax,ax

c0001c9c <isxdigit>:
c0001c9c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ca0:	e8 83 fe ff ff       	call   c0001b28 <isdigit>
c0001ca5:	83 c4 04             	add    esp,0x4
c0001ca8:	85 c0                	test   eax,eax
c0001caa:	75 20                	jne    c0001ccc <isxdigit+0x30>
c0001cac:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cb1:	7e 09                	jle    c0001cbc <isxdigit+0x20>
c0001cb3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cb8:	7e 12                	jle    c0001ccc <isxdigit+0x30>
c0001cba:	66 90                	xchg   ax,ax
c0001cbc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cc1:	7e 11                	jle    c0001cd4 <isxdigit+0x38>
c0001cc3:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cc8:	7f 0a                	jg     c0001cd4 <isxdigit+0x38>
c0001cca:	66 90                	xchg   ax,ax
c0001ccc:	b8 01 00 00 00       	mov    eax,0x1
c0001cd1:	c3                   	ret    
c0001cd2:	66 90                	xchg   ax,ax
c0001cd4:	b8 00 00 00 00       	mov    eax,0x0
c0001cd9:	c3                   	ret    

c0001cda <disk_status>:
c0001cda:	31 c0                	xor    eax,eax
c0001cdc:	c3                   	ret    

c0001cdd <disk_initialize>:
c0001cdd:	31 c0                	xor    eax,eax
c0001cdf:	c3                   	ret    

c0001ce0 <disk_read>:
c0001ce0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ce5:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001ced:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cf1:	e9 56 66 01 00       	jmp    c001834c <fatWrapperReadDisk>

c0001cf6 <disk_write>:
c0001cf6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cfb:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001d03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d07:	e9 84 66 01 00       	jmp    c0018390 <fatWrapperWriteDisk>

c0001d0c <disk_ioctl>:
c0001d0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d15:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d1a:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001d22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d26:	e9 a9 66 01 00       	jmp    c00183d4 <fatWrapperIoctl>

c0001d2b <ld_word>:
c0001d2b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d2f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d32:	c1 e2 08             	shl    edx,0x8
c0001d35:	09 d0                	or     eax,edx
c0001d37:	c3                   	ret    

c0001d38 <ld_dword>:
c0001d38:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d3c:	89 d1                	mov    ecx,edx
c0001d3e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d42:	c1 e1 08             	shl    ecx,0x8
c0001d45:	09 ca                	or     edx,ecx
c0001d47:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d4a:	c1 e2 08             	shl    edx,0x8
c0001d4d:	09 d0                	or     eax,edx
c0001d4f:	c3                   	ret    

c0001d50 <st_word>:
c0001d50:	66 89 10             	mov    WORD PTR [eax],dx
c0001d53:	c3                   	ret    

c0001d54 <st_dword>:
c0001d54:	89 10                	mov    DWORD PTR [eax],edx
c0001d56:	c3                   	ret    

c0001d57 <mem_cpy>:
c0001d57:	85 c9                	test   ecx,ecx
c0001d59:	74 10                	je     c0001d6b <mem_cpy+0x14>
c0001d5b:	57                   	push   edi
c0001d5c:	01 c1                	add    ecx,eax
c0001d5e:	56                   	push   esi
c0001d5f:	89 c7                	mov    edi,eax
c0001d61:	89 d6                	mov    esi,edx
c0001d63:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d64:	39 f9                	cmp    ecx,edi
c0001d66:	75 fb                	jne    c0001d63 <mem_cpy+0xc>
c0001d68:	5e                   	pop    esi
c0001d69:	5f                   	pop    edi
c0001d6a:	c3                   	ret    
c0001d6b:	c3                   	ret    

c0001d6c <mem_set>:
c0001d6c:	01 c1                	add    ecx,eax
c0001d6e:	40                   	inc    eax
c0001d6f:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d72:	39 c8                	cmp    eax,ecx
c0001d74:	75 f8                	jne    c0001d6e <mem_set+0x2>
c0001d76:	c3                   	ret    

c0001d77 <mem_cmp>:
c0001d77:	57                   	push   edi
c0001d78:	56                   	push   esi
c0001d79:	89 c6                	mov    esi,eax
c0001d7b:	53                   	push   ebx
c0001d7c:	46                   	inc    esi
c0001d7d:	42                   	inc    edx
c0001d7e:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d82:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d86:	29 fb                	sub    ebx,edi
c0001d88:	89 cf                	mov    edi,ecx
c0001d8a:	29 f7                	sub    edi,esi
c0001d8c:	01 c7                	add    edi,eax
c0001d8e:	74 04                	je     c0001d94 <mem_cmp+0x1d>
c0001d90:	85 db                	test   ebx,ebx
c0001d92:	74 e8                	je     c0001d7c <mem_cmp+0x5>
c0001d94:	89 d8                	mov    eax,ebx
c0001d96:	5b                   	pop    ebx
c0001d97:	5e                   	pop    esi
c0001d98:	5f                   	pop    edi
c0001d99:	c3                   	ret    

c0001d9a <chk_chr>:
c0001d9a:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d9d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001da0:	74 07                	je     c0001da9 <chk_chr+0xf>
c0001da2:	39 d1                	cmp    ecx,edx
c0001da4:	74 03                	je     c0001da9 <chk_chr+0xf>
c0001da6:	40                   	inc    eax
c0001da7:	eb f1                	jmp    c0001d9a <chk_chr>
c0001da9:	89 c8                	mov    eax,ecx
c0001dab:	c3                   	ret    

c0001dac <dbc_1st>:
c0001dac:	31 c0                	xor    eax,eax
c0001dae:	c3                   	ret    

c0001daf <dbc_2nd>:
c0001daf:	31 c0                	xor    eax,eax
c0001db1:	c3                   	ret    

c0001db2 <tchar2uni>:
c0001db2:	57                   	push   edi
c0001db3:	89 c7                	mov    edi,eax
c0001db5:	56                   	push   esi
c0001db6:	53                   	push   ebx
c0001db7:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001db9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001dbb:	8d 73 01             	lea    esi,[ebx+0x1]
c0001dbe:	84 c9                	test   cl,cl
c0001dc0:	78 0a                	js     c0001dcc <tchar2uni+0x1a>
c0001dc2:	0f b6 d1             	movzx  edx,cl
c0001dc5:	89 f3                	mov    ebx,esi
c0001dc7:	e9 9f 00 00 00       	jmp    c0001e6b <tchar2uni+0xb9>
c0001dcc:	88 ca                	mov    dl,cl
c0001dce:	83 e2 e0             	and    edx,0xffffffe0
c0001dd1:	80 fa c0             	cmp    dl,0xc0
c0001dd4:	75 0c                	jne    c0001de2 <tchar2uni+0x30>
c0001dd6:	89 ca                	mov    edx,ecx
c0001dd8:	b9 01 00 00 00       	mov    ecx,0x1
c0001ddd:	83 e2 1f             	and    edx,0x1f
c0001de0:	eb 2e                	jmp    c0001e10 <tchar2uni+0x5e>
c0001de2:	88 ca                	mov    dl,cl
c0001de4:	83 e2 f0             	and    edx,0xfffffff0
c0001de7:	80 fa e0             	cmp    dl,0xe0
c0001dea:	75 0c                	jne    c0001df8 <tchar2uni+0x46>
c0001dec:	89 ca                	mov    edx,ecx
c0001dee:	b9 02 00 00 00       	mov    ecx,0x2
c0001df3:	83 e2 0f             	and    edx,0xf
c0001df6:	eb 18                	jmp    c0001e10 <tchar2uni+0x5e>
c0001df8:	88 ca                	mov    dl,cl
c0001dfa:	83 e2 f8             	and    edx,0xfffffff8
c0001dfd:	88 d0                	mov    al,dl
c0001dff:	83 ca ff             	or     edx,0xffffffff
c0001e02:	3c f0                	cmp    al,0xf0
c0001e04:	75 6c                	jne    c0001e72 <tchar2uni+0xc0>
c0001e06:	89 ca                	mov    edx,ecx
c0001e08:	b9 03 00 00 00       	mov    ecx,0x3
c0001e0d:	83 e2 07             	and    edx,0x7
c0001e10:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e14:	46                   	inc    esi
c0001e15:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e18:	88 c8                	mov    al,cl
c0001e1a:	83 e0 c0             	and    eax,0xffffffc0
c0001e1d:	3c 80                	cmp    al,0x80
c0001e1f:	75 4e                	jne    c0001e6f <tchar2uni+0xbd>
c0001e21:	c1 e2 06             	shl    edx,0x6
c0001e24:	83 e1 3f             	and    ecx,0x3f
c0001e27:	09 ca                	or     edx,ecx
c0001e29:	39 de                	cmp    esi,ebx
c0001e2b:	75 e7                	jne    c0001e14 <tchar2uni+0x62>
c0001e2d:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e33:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e39:	76 34                	jbe    c0001e6f <tchar2uni+0xbd>
c0001e3b:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e3e:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e44:	77 29                	ja     c0001e6f <tchar2uni+0xbd>
c0001e46:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e4c:	76 1d                	jbe    c0001e6b <tchar2uni+0xb9>
c0001e4e:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e54:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e5a:	c1 e1 06             	shl    ecx,0x6
c0001e5d:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e63:	09 ca                	or     edx,ecx
c0001e65:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e6b:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e6d:	eb 03                	jmp    c0001e72 <tchar2uni+0xc0>
c0001e6f:	83 ca ff             	or     edx,0xffffffff
c0001e72:	5b                   	pop    ebx
c0001e73:	89 d0                	mov    eax,edx
c0001e75:	5e                   	pop    esi
c0001e76:	5f                   	pop    edi
c0001e77:	c3                   	ret    

c0001e78 <put_utf>:
c0001e78:	53                   	push   ebx
c0001e79:	83 f8 7f             	cmp    eax,0x7f
c0001e7c:	89 c3                	mov    ebx,eax
c0001e7e:	b0 00                	mov    al,0x0
c0001e80:	77 11                	ja     c0001e93 <put_utf+0x1b>
c0001e82:	85 c9                	test   ecx,ecx
c0001e84:	0f 84 e5 00 00 00    	je     c0001f6f <put_utf+0xf7>
c0001e8a:	88 1a                	mov    BYTE PTR [edx],bl
c0001e8c:	b0 01                	mov    al,0x1
c0001e8e:	e9 dc 00 00 00       	jmp    c0001f6f <put_utf+0xf7>
c0001e93:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e99:	77 23                	ja     c0001ebe <put_utf+0x46>
c0001e9b:	83 f9 01             	cmp    ecx,0x1
c0001e9e:	0f 86 cb 00 00 00    	jbe    c0001f6f <put_utf+0xf7>
c0001ea4:	89 d8                	mov    eax,ebx
c0001ea6:	83 e3 3f             	and    ebx,0x3f
c0001ea9:	c1 e8 06             	shr    eax,0x6
c0001eac:	83 cb 80             	or     ebx,0xffffff80
c0001eaf:	83 c8 c0             	or     eax,0xffffffc0
c0001eb2:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001eb5:	88 02                	mov    BYTE PTR [edx],al
c0001eb7:	b0 02                	mov    al,0x2
c0001eb9:	e9 b1 00 00 00       	jmp    c0001f6f <put_utf+0xf7>
c0001ebe:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ec4:	77 40                	ja     c0001f06 <put_utf+0x8e>
c0001ec6:	83 f9 02             	cmp    ecx,0x2
c0001ec9:	0f 86 a0 00 00 00    	jbe    c0001f6f <put_utf+0xf7>
c0001ecf:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ed5:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001edb:	0f 86 8e 00 00 00    	jbe    c0001f6f <put_utf+0xf7>
c0001ee1:	89 d8                	mov    eax,ebx
c0001ee3:	c1 e8 0c             	shr    eax,0xc
c0001ee6:	83 c8 e0             	or     eax,0xffffffe0
c0001ee9:	88 02                	mov    BYTE PTR [edx],al
c0001eeb:	89 d8                	mov    eax,ebx
c0001eed:	c1 e8 06             	shr    eax,0x6
c0001ef0:	83 e3 3f             	and    ebx,0x3f
c0001ef3:	83 e0 3f             	and    eax,0x3f
c0001ef6:	83 cb 80             	or     ebx,0xffffff80
c0001ef9:	83 c8 80             	or     eax,0xffffff80
c0001efc:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001eff:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f02:	b0 03                	mov    al,0x3
c0001f04:	eb 69                	jmp    c0001f6f <put_utf+0xf7>
c0001f06:	83 f9 03             	cmp    ecx,0x3
c0001f09:	76 64                	jbe    c0001f6f <put_utf+0xf7>
c0001f0b:	89 d9                	mov    ecx,ebx
c0001f0d:	66 31 c9             	xor    cx,cx
c0001f10:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f16:	0f b7 c3             	movzx  eax,bx
c0001f19:	c1 e9 06             	shr    ecx,0x6
c0001f1c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f22:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f28:	77 43                	ja     c0001f6d <put_utf+0xf5>
c0001f2a:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f30:	77 3b                	ja     c0001f6d <put_utf+0xf5>
c0001f32:	09 cb                	or     ebx,ecx
c0001f34:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f3a:	89 d8                	mov    eax,ebx
c0001f3c:	c1 e8 12             	shr    eax,0x12
c0001f3f:	83 c8 f0             	or     eax,0xfffffff0
c0001f42:	88 02                	mov    BYTE PTR [edx],al
c0001f44:	89 d8                	mov    eax,ebx
c0001f46:	c1 e8 0c             	shr    eax,0xc
c0001f49:	83 e0 3f             	and    eax,0x3f
c0001f4c:	83 c8 80             	or     eax,0xffffff80
c0001f4f:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f52:	89 d8                	mov    eax,ebx
c0001f54:	c1 e8 06             	shr    eax,0x6
c0001f57:	83 e3 3f             	and    ebx,0x3f
c0001f5a:	83 e0 3f             	and    eax,0x3f
c0001f5d:	83 cb 80             	or     ebx,0xffffff80
c0001f60:	83 c8 80             	or     eax,0xffffff80
c0001f63:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f66:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f69:	b0 04                	mov    al,0x4
c0001f6b:	eb 02                	jmp    c0001f6f <put_utf+0xf7>
c0001f6d:	31 c0                	xor    eax,eax
c0001f6f:	5b                   	pop    ebx
c0001f70:	c3                   	ret    

c0001f71 <clst2sect>:
c0001f71:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f74:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f77:	83 ea 02             	sub    edx,0x2
c0001f7a:	39 ca                	cmp    edx,ecx
c0001f7c:	76 0d                	jbe    c0001f8b <clst2sect+0x1a>
c0001f7e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f82:	0f af d1             	imul   edx,ecx
c0001f85:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f88:	89 d0                	mov    eax,edx
c0001f8a:	c3                   	ret    
c0001f8b:	31 c0                	xor    eax,eax
c0001f8d:	c3                   	ret    

c0001f8e <pick_lfn>:
c0001f8e:	55                   	push   ebp
c0001f8f:	57                   	push   edi
c0001f90:	56                   	push   esi
c0001f91:	89 d6                	mov    esi,edx
c0001f93:	53                   	push   ebx
c0001f94:	89 c3                	mov    ebx,eax
c0001f96:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f99:	e8 8d fd ff ff       	call   c0001d2b <ld_word>
c0001f9e:	66 85 c0             	test   ax,ax
c0001fa1:	74 04                	je     c0001fa7 <pick_lfn+0x19>
c0001fa3:	31 c0                	xor    eax,eax
c0001fa5:	eb 5c                	jmp    c0002003 <pick_lfn+0x75>
c0001fa7:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001faa:	83 e1 bf             	and    ecx,0xffffffbf
c0001fad:	bd 01 00 00 00       	mov    ebp,0x1
c0001fb2:	49                   	dec    ecx
c0001fb3:	31 ff                	xor    edi,edi
c0001fb5:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fb8:	0f b6 87 00 ee 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe1200]
c0001fbf:	01 f0                	add    eax,esi
c0001fc1:	e8 65 fd ff ff       	call   c0001d2b <ld_word>
c0001fc6:	66 85 ed             	test   bp,bp
c0001fc9:	74 11                	je     c0001fdc <pick_lfn+0x4e>
c0001fcb:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fd1:	77 d0                	ja     c0001fa3 <pick_lfn+0x15>
c0001fd3:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fd7:	89 c5                	mov    ebp,eax
c0001fd9:	41                   	inc    ecx
c0001fda:	eb 04                	jmp    c0001fe0 <pick_lfn+0x52>
c0001fdc:	66 40                	inc    ax
c0001fde:	75 c3                	jne    c0001fa3 <pick_lfn+0x15>
c0001fe0:	47                   	inc    edi
c0001fe1:	83 ff 0d             	cmp    edi,0xd
c0001fe4:	75 d2                	jne    c0001fb8 <pick_lfn+0x2a>
c0001fe6:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fe9:	74 13                	je     c0001ffe <pick_lfn+0x70>
c0001feb:	66 85 ed             	test   bp,bp
c0001fee:	74 0e                	je     c0001ffe <pick_lfn+0x70>
c0001ff0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ff6:	77 ab                	ja     c0001fa3 <pick_lfn+0x15>
c0001ff8:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ffe:	b8 01 00 00 00       	mov    eax,0x1
c0002003:	5b                   	pop    ebx
c0002004:	5e                   	pop    esi
c0002005:	5f                   	pop    edi
c0002006:	5d                   	pop    ebp
c0002007:	c3                   	ret    

c0002008 <put_lfn>:
c0002008:	55                   	push   ebp
c0002009:	31 ed                	xor    ebp,ebp
c000200b:	57                   	push   edi
c000200c:	89 d7                	mov    edi,edx
c000200e:	56                   	push   esi
c000200f:	31 f6                	xor    esi,esi
c0002011:	53                   	push   ebx
c0002012:	83 ec 08             	sub    esp,0x8
c0002015:	89 04 24             	mov    DWORD PTR [esp],eax
c0002018:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000201c:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201f:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002025:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002028:	31 d2                	xor    edx,edx
c000202a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c000202e:	e8 1d fd ff ff       	call   c0001d50 <st_word>
c0002033:	0f b6 d9             	movzx  ebx,cl
c0002036:	4b                   	dec    ebx
c0002037:	6b db 0d             	imul   ebx,ebx,0xd
c000203a:	66 83 fe ff          	cmp    si,0xffff
c000203e:	74 08                	je     c0002048 <put_lfn+0x40>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002047:	43                   	inc    ebx
c0002048:	0f b6 85 00 ee 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe1200]
c000204f:	0f b7 d6             	movzx  edx,si
c0002052:	01 f8                	add    eax,edi
c0002054:	e8 f7 fc ff ff       	call   c0001d50 <st_word>
c0002059:	66 85 f6             	test   si,si
c000205c:	75 03                	jne    c0002061 <put_lfn+0x59>
c000205e:	83 ce ff             	or     esi,0xffffffff
c0002061:	45                   	inc    ebp
c0002062:	83 fd 0d             	cmp    ebp,0xd
c0002065:	75 d3                	jne    c000203a <put_lfn+0x32>
c0002067:	66 46                	inc    si
c0002069:	74 0a                	je     c0002075 <put_lfn+0x6d>
c000206b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000206e:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002073:	75 09                	jne    c000207e <put_lfn+0x76>
c0002075:	88 c8                	mov    al,cl
c0002077:	83 c8 40             	or     eax,0x40
c000207a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000207e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002082:	88 07                	mov    BYTE PTR [edi],al
c0002084:	83 c4 08             	add    esp,0x8
c0002087:	5b                   	pop    ebx
c0002088:	5e                   	pop    esi
c0002089:	5f                   	pop    edi
c000208a:	5d                   	pop    ebp
c000208b:	c3                   	ret    

c000208c <gen_numname>:
c000208c:	57                   	push   edi
c000208d:	89 cf                	mov    edi,ecx
c000208f:	56                   	push   esi
c0002090:	b9 0b 00 00 00       	mov    ecx,0xb
c0002095:	53                   	push   ebx
c0002096:	89 c6                	mov    esi,eax
c0002098:	83 ec 10             	sub    esp,0x10
c000209b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000209f:	e8 b3 fc ff ff       	call   c0001d57 <mem_cpy>
c00020a4:	83 fb 05             	cmp    ebx,0x5
c00020a7:	76 2d                	jbe    c00020d6 <gen_numname+0x4a>
c00020a9:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020ac:	66 85 c0             	test   ax,ax
c00020af:	74 25                	je     c00020d6 <gen_numname+0x4a>
c00020b1:	83 c7 02             	add    edi,0x2
c00020b4:	ba 10 00 00 00       	mov    edx,0x10
c00020b9:	89 c1                	mov    ecx,eax
c00020bb:	01 db                	add    ebx,ebx
c00020bd:	66 d1 e8             	shr    ax,1
c00020c0:	83 e1 01             	and    ecx,0x1
c00020c3:	01 cb                	add    ebx,ecx
c00020c5:	0f ba e3 10          	bt     ebx,0x10
c00020c9:	73 06                	jae    c00020d1 <gen_numname+0x45>
c00020cb:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020d1:	4a                   	dec    edx
c00020d2:	75 e5                	jne    c00020b9 <gen_numname+0x2d>
c00020d4:	eb d3                	jmp    c00020a9 <gen_numname+0x1d>
c00020d6:	b8 07 00 00 00       	mov    eax,0x7
c00020db:	88 d9                	mov    cl,bl
c00020dd:	83 e1 0f             	and    ecx,0xf
c00020e0:	8d 51 30             	lea    edx,[ecx+0x30]
c00020e3:	80 fa 39             	cmp    dl,0x39
c00020e6:	76 03                	jbe    c00020eb <gen_numname+0x5f>
c00020e8:	8d 51 37             	lea    edx,[ecx+0x37]
c00020eb:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020ee:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020f2:	89 da                	mov    edx,ebx
c00020f4:	c1 ea 04             	shr    edx,0x4
c00020f7:	83 fb 0f             	cmp    ebx,0xf
c00020fa:	76 06                	jbe    c0002102 <gen_numname+0x76>
c00020fc:	89 c8                	mov    eax,ecx
c00020fe:	89 d3                	mov    ebx,edx
c0002100:	eb d9                	jmp    c00020db <gen_numname+0x4f>
c0002102:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002107:	31 d2                	xor    edx,edx
c0002109:	8d 58 fe             	lea    ebx,[eax-0x2]
c000210c:	8d 04 16             	lea    eax,[esi+edx*1]
c000210f:	39 ca                	cmp    edx,ecx
c0002111:	73 18                	jae    c000212b <gen_numname+0x9f>
c0002113:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002116:	3c 20                	cmp    al,0x20
c0002118:	74 11                	je     c000212b <gen_numname+0x9f>
c000211a:	e8 8d fc ff ff       	call   c0001dac <dbc_1st>
c000211f:	85 c0                	test   eax,eax
c0002121:	74 05                	je     c0002128 <gen_numname+0x9c>
c0002123:	39 d3                	cmp    ebx,edx
c0002125:	74 04                	je     c000212b <gen_numname+0x9f>
c0002127:	42                   	inc    edx
c0002128:	42                   	inc    edx
c0002129:	eb e1                	jmp    c000210c <gen_numname+0x80>
c000212b:	b0 20                	mov    al,0x20
c000212d:	83 f9 07             	cmp    ecx,0x7
c0002130:	77 05                	ja     c0002137 <gen_numname+0xab>
c0002132:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002136:	41                   	inc    ecx
c0002137:	42                   	inc    edx
c0002138:	83 fa 07             	cmp    edx,0x7
c000213b:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000213f:	76 ea                	jbe    c000212b <gen_numname+0x9f>
c0002141:	83 c4 10             	add    esp,0x10
c0002144:	5b                   	pop    ebx
c0002145:	5e                   	pop    esi
c0002146:	5f                   	pop    edi
c0002147:	c3                   	ret    

c0002148 <sum_sfn>:
c0002148:	31 c9                	xor    ecx,ecx
c000214a:	31 d2                	xor    edx,edx
c000214c:	d0 ca                	ror    dl,1
c000214e:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002151:	41                   	inc    ecx
c0002152:	83 f9 0b             	cmp    ecx,0xb
c0002155:	75 f5                	jne    c000214c <sum_sfn+0x4>
c0002157:	88 d0                	mov    al,dl
c0002159:	c3                   	ret    

c000215a <get_ldnumber>:
c000215a:	57                   	push   edi
c000215b:	56                   	push   esi
c000215c:	53                   	push   ebx
c000215d:	83 cb ff             	or     ebx,0xffffffff
c0002160:	8b 10                	mov    edx,DWORD PTR [eax]
c0002162:	85 d2                	test   edx,edx
c0002164:	74 34                	je     c000219a <get_ldnumber+0x40>
c0002166:	89 c7                	mov    edi,eax
c0002168:	89 d1                	mov    ecx,edx
c000216a:	41                   	inc    ecx
c000216b:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c000216e:	3c 1f                	cmp    al,0x1f
c0002170:	76 04                	jbe    c0002176 <get_ldnumber+0x1c>
c0002172:	3c 3a                	cmp    al,0x3a
c0002174:	75 f4                	jne    c000216a <get_ldnumber+0x10>
c0002176:	31 db                	xor    ebx,ebx
c0002178:	3c 3a                	cmp    al,0x3a
c000217a:	75 1e                	jne    c000219a <get_ldnumber+0x40>
c000217c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000217f:	83 cb ff             	or     ebx,0xffffffff
c0002182:	8d 46 d0             	lea    eax,[esi-0x30]
c0002185:	3c 09                	cmp    al,0x9
c0002187:	77 11                	ja     c000219a <get_ldnumber+0x40>
c0002189:	83 c2 02             	add    edx,0x2
c000218c:	39 d1                	cmp    ecx,edx
c000218e:	75 0a                	jne    c000219a <get_ldnumber+0x40>
c0002190:	89 f0                	mov    eax,esi
c0002192:	89 0f                	mov    DWORD PTR [edi],ecx
c0002194:	0f be d8             	movsx  ebx,al
c0002197:	83 eb 30             	sub    ebx,0x30
c000219a:	89 d8                	mov    eax,ebx
c000219c:	5b                   	pop    ebx
c000219d:	5e                   	pop    esi
c000219e:	5f                   	pop    edi
c000219f:	c3                   	ret    

c00021a0 <validate>:
c00021a0:	56                   	push   esi
c00021a1:	89 d6                	mov    esi,edx
c00021a3:	53                   	push   ebx
c00021a4:	85 c0                	test   eax,eax
c00021a6:	51                   	push   ecx
c00021a7:	75 09                	jne    c00021b2 <validate+0x12>
c00021a9:	b8 09 00 00 00       	mov    eax,0x9
c00021ae:	31 c9                	xor    ecx,ecx
c00021b0:	eb 2f                	jmp    c00021e1 <validate+0x41>
c00021b2:	89 c3                	mov    ebx,eax
c00021b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b6:	85 c0                	test   eax,eax
c00021b8:	74 ef                	je     c00021a9 <validate+0x9>
c00021ba:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021bd:	74 ea                	je     c00021a9 <validate+0x9>
c00021bf:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021c3:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c7:	75 e0                	jne    c00021a9 <validate+0x9>
c00021c9:	83 ec 0c             	sub    esp,0xc
c00021cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021d0:	50                   	push   eax
c00021d1:	e8 04 fb ff ff       	call   c0001cda <disk_status>
c00021d6:	83 c4 10             	add    esp,0x10
c00021d9:	a8 01                	test   al,0x1
c00021db:	75 cc                	jne    c00021a9 <validate+0x9>
c00021dd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021df:	31 c0                	xor    eax,eax
c00021e1:	89 0e                	mov    DWORD PTR [esi],ecx
c00021e3:	5a                   	pop    edx
c00021e4:	5b                   	pop    ebx
c00021e5:	5e                   	pop    esi
c00021e6:	c3                   	ret    

c00021e7 <sync_window>:
c00021e7:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021eb:	74 58                	je     c0002245 <sync_window+0x5e>
c00021ed:	56                   	push   esi
c00021ee:	8d 70 34             	lea    esi,[eax+0x34]
c00021f1:	53                   	push   ebx
c00021f2:	89 c3                	mov    ebx,eax
c00021f4:	51                   	push   ecx
c00021f5:	6a 01                	push   0x1
c00021f7:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021fa:	56                   	push   esi
c00021fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021ff:	50                   	push   eax
c0002200:	e8 f1 fa ff ff       	call   c0001cf6 <disk_write>
c0002205:	83 c4 10             	add    esp,0x10
c0002208:	ba 01 00 00 00       	mov    edx,0x1
c000220d:	85 c0                	test   eax,eax
c000220f:	75 2e                	jne    c000223f <sync_window+0x58>
c0002211:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002214:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002217:	89 c1                	mov    ecx,eax
c0002219:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000221d:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002220:	39 d1                	cmp    ecx,edx
c0002222:	73 19                	jae    c000223d <sync_window+0x56>
c0002224:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002228:	75 13                	jne    c000223d <sync_window+0x56>
c000222a:	6a 01                	push   0x1
c000222c:	01 d0                	add    eax,edx
c000222e:	50                   	push   eax
c000222f:	56                   	push   esi
c0002230:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002234:	50                   	push   eax
c0002235:	e8 bc fa ff ff       	call   c0001cf6 <disk_write>
c000223a:	83 c4 10             	add    esp,0x10
c000223d:	31 d2                	xor    edx,edx
c000223f:	89 d0                	mov    eax,edx
c0002241:	5a                   	pop    edx
c0002242:	5b                   	pop    ebx
c0002243:	5e                   	pop    esi
c0002244:	c3                   	ret    
c0002245:	31 d2                	xor    edx,edx
c0002247:	89 d0                	mov    eax,edx
c0002249:	c3                   	ret    

c000224a <move_window>:
c000224a:	57                   	push   edi
c000224b:	56                   	push   esi
c000224c:	31 f6                	xor    esi,esi
c000224e:	53                   	push   ebx
c000224f:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002252:	74 32                	je     c0002286 <move_window+0x3c>
c0002254:	89 c3                	mov    ebx,eax
c0002256:	89 d7                	mov    edi,edx
c0002258:	e8 8a ff ff ff       	call   c00021e7 <sync_window>
c000225d:	89 c6                	mov    esi,eax
c000225f:	85 c0                	test   eax,eax
c0002261:	75 23                	jne    c0002286 <move_window+0x3c>
c0002263:	6a 01                	push   0x1
c0002265:	8d 43 34             	lea    eax,[ebx+0x34]
c0002268:	57                   	push   edi
c0002269:	50                   	push   eax
c000226a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000226e:	50                   	push   eax
c000226f:	e8 6c fa ff ff       	call   c0001ce0 <disk_read>
c0002274:	83 c4 10             	add    esp,0x10
c0002277:	85 c0                	test   eax,eax
c0002279:	74 08                	je     c0002283 <move_window+0x39>
c000227b:	be 01 00 00 00       	mov    esi,0x1
c0002280:	83 cf ff             	or     edi,0xffffffff
c0002283:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002286:	5b                   	pop    ebx
c0002287:	89 f0                	mov    eax,esi
c0002289:	5e                   	pop    esi
c000228a:	5f                   	pop    edi
c000228b:	c3                   	ret    

c000228c <check_fs>:
c000228c:	53                   	push   ebx
c000228d:	89 c3                	mov    ebx,eax
c000228f:	83 ec 08             	sub    esp,0x8
c0002292:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002296:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000229d:	e8 a8 ff ff ff       	call   c000224a <move_window>
c00022a2:	ba 04 00 00 00       	mov    edx,0x4
c00022a7:	85 c0                	test   eax,eax
c00022a9:	75 68                	jne    c0002313 <check_fs+0x87>
c00022ab:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022b1:	e8 75 fa ff ff       	call   c0001d2b <ld_word>
c00022b6:	ba 03 00 00 00       	mov    edx,0x3
c00022bb:	66 3d 55 aa          	cmp    ax,0xaa55
c00022bf:	75 52                	jne    c0002313 <check_fs+0x87>
c00022c1:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022c4:	8d 50 18             	lea    edx,[eax+0x18]
c00022c7:	80 fa 01             	cmp    dl,0x1
c00022ca:	76 09                	jbe    c00022d5 <check_fs+0x49>
c00022cc:	ba 02 00 00 00       	mov    edx,0x2
c00022d1:	3c eb                	cmp    al,0xeb
c00022d3:	75 3e                	jne    c0002313 <check_fs+0x87>
c00022d5:	ba e4 0e 02 c0       	mov    edx,0xc0020ee4
c00022da:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022dd:	b9 03 00 00 00       	mov    ecx,0x3
c00022e2:	e8 90 fa ff ff       	call   c0001d77 <mem_cmp>
c00022e7:	31 d2                	xor    edx,edx
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 26                	je     c0002313 <check_fs+0x87>
c00022ed:	ba bc ec 01 c0       	mov    edx,0xc001ecbc
c00022f2:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f8:	b9 05 00 00 00       	mov    ecx,0x5
c00022fd:	e8 75 fa ff ff       	call   c0001d77 <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 0b                	je     c0002313 <check_fs+0x87>
c0002308:	31 d2                	xor    edx,edx
c000230a:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c000230e:	0f 95 c2             	setne  dl
c0002311:	01 d2                	add    edx,edx
c0002313:	83 c4 08             	add    esp,0x8
c0002316:	89 d0                	mov    eax,edx
c0002318:	5b                   	pop    ebx
c0002319:	c3                   	ret    

c000231a <find_volume>:
c000231a:	55                   	push   ebp
c000231b:	57                   	push   edi
c000231c:	89 c7                	mov    edi,eax
c000231e:	56                   	push   esi
c000231f:	89 d6                	mov    esi,edx
c0002321:	53                   	push   ebx
c0002322:	31 d2                	xor    edx,edx
c0002324:	83 ec 2c             	sub    esp,0x2c
c0002327:	e8 60 ff ff ff       	call   c000228c <check_fs>
c000232c:	85 f6                	test   esi,esi
c000232e:	0f 94 c3             	sete   bl
c0002331:	83 f8 02             	cmp    eax,0x2
c0002334:	74 06                	je     c000233c <find_volume+0x22>
c0002336:	77 5f                	ja     c0002397 <find_volume+0x7d>
c0002338:	84 db                	test   bl,bl
c000233a:	75 5b                	jne    c0002397 <find_volume+0x7d>
c000233c:	8d 87 3a 02 00 00    	lea    eax,[edi+0x23a]
c0002342:	8d af fa 01 00 00    	lea    ebp,[edi+0x1fa]
c0002348:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000234c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002350:	89 e8                	mov    eax,ebp
c0002352:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002356:	e8 dd f9 ff ff       	call   c0001d38 <ld_dword>
c000235b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235f:	83 c5 10             	add    ebp,0x10
c0002362:	83 c1 04             	add    ecx,0x4
c0002365:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0002368:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000236c:	75 e2                	jne    c0002350 <find_volume+0x36>
c000236e:	83 fe 01             	cmp    esi,0x1
c0002371:	83 d6 ff             	adc    esi,0xffffffff
c0002374:	8b 54 b4 10          	mov    edx,DWORD PTR [esp+esi*4+0x10]
c0002378:	b8 03 00 00 00       	mov    eax,0x3
c000237d:	85 d2                	test   edx,edx
c000237f:	74 07                	je     c0002388 <find_volume+0x6e>
c0002381:	89 f8                	mov    eax,edi
c0002383:	e8 04 ff ff ff       	call   c000228c <check_fs>
c0002388:	83 f8 01             	cmp    eax,0x1
c000238b:	76 0a                	jbe    c0002397 <find_volume+0x7d>
c000238d:	84 db                	test   bl,bl
c000238f:	74 06                	je     c0002397 <find_volume+0x7d>
c0002391:	46                   	inc    esi
c0002392:	83 fe 03             	cmp    esi,0x3
c0002395:	76 dd                	jbe    c0002374 <find_volume+0x5a>
c0002397:	83 c4 2c             	add    esp,0x2c
c000239a:	5b                   	pop    ebx
c000239b:	5e                   	pop    esi
c000239c:	5f                   	pop    edi
c000239d:	5d                   	pop    ebp
c000239e:	c3                   	ret    

c000239f <mount_volume>:
c000239f:	55                   	push   ebp
c00023a0:	89 d5                	mov    ebp,edx
c00023a2:	57                   	push   edi
c00023a3:	89 cf                	mov    edi,ecx
c00023a5:	56                   	push   esi
c00023a6:	53                   	push   ebx
c00023a7:	bb 0b 00 00 00       	mov    ebx,0xb
c00023ac:	83 ec 2c             	sub    esp,0x2c
c00023af:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023b5:	e8 a0 fd ff ff       	call   c000215a <get_ldnumber>
c00023ba:	85 c0                	test   eax,eax
c00023bc:	0f 88 d6 02 00 00    	js     c0002698 <mount_volume+0x2f9>
c00023c2:	8b 34 85 a0 34 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcb60]
c00023c9:	89 c2                	mov    edx,eax
c00023cb:	bb 0c 00 00 00       	mov    ebx,0xc
c00023d0:	85 f6                	test   esi,esi
c00023d2:	0f 84 c0 02 00 00    	je     c0002698 <mount_volume+0x2f9>
c00023d8:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023db:	83 e7 fe             	and    edi,0xfffffffe
c00023de:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023e1:	74 3a                	je     c000241d <mount_volume+0x7e>
c00023e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e7:	83 ec 0c             	sub    esp,0xc
c00023ea:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023ee:	50                   	push   eax
c00023ef:	e8 e6 f8 ff ff       	call   c0001cda <disk_status>
c00023f4:	83 c4 10             	add    esp,0x10
c00023f7:	a8 01                	test   al,0x1
c00023f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023fd:	75 1e                	jne    c000241d <mount_volume+0x7e>
c00023ff:	89 f9                	mov    ecx,edi
c0002401:	31 db                	xor    ebx,ebx
c0002403:	84 c9                	test   cl,cl
c0002405:	0f 84 8d 02 00 00    	je     c0002698 <mount_volume+0x2f9>
c000240b:	a8 04                	test   al,0x4
c000240d:	0f 84 85 02 00 00    	je     c0002698 <mount_volume+0x2f9>
c0002413:	bb 0a 00 00 00       	mov    ebx,0xa
c0002418:	e9 7b 02 00 00       	jmp    c0002698 <mount_volume+0x2f9>
c000241d:	83 ec 0c             	sub    esp,0xc
c0002420:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002423:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002426:	bb 03 00 00 00       	mov    ebx,0x3
c000242b:	0f b6 c2             	movzx  eax,dl
c000242e:	50                   	push   eax
c000242f:	e8 a9 f8 ff ff       	call   c0001cdd <disk_initialize>
c0002434:	83 c4 10             	add    esp,0x10
c0002437:	a8 01                	test   al,0x1
c0002439:	0f 85 59 02 00 00    	jne    c0002698 <mount_volume+0x2f9>
c000243f:	89 f9                	mov    ecx,edi
c0002441:	84 c9                	test   cl,cl
c0002443:	74 04                	je     c0002449 <mount_volume+0xaa>
c0002445:	a8 04                	test   al,0x4
c0002447:	75 ca                	jne    c0002413 <mount_volume+0x74>
c0002449:	31 d2                	xor    edx,edx
c000244b:	89 f0                	mov    eax,esi
c000244d:	e8 c8 fe ff ff       	call   c000231a <find_volume>
c0002452:	bb 01 00 00 00       	mov    ebx,0x1
c0002457:	83 f8 04             	cmp    eax,0x4
c000245a:	0f 84 38 02 00 00    	je     c0002698 <mount_volume+0x2f9>
c0002460:	83 f8 01             	cmp    eax,0x1
c0002463:	76 0a                	jbe    c000246f <mount_volume+0xd0>
c0002465:	bb 0d 00 00 00       	mov    ebx,0xd
c000246a:	e9 29 02 00 00       	jmp    c0002698 <mount_volume+0x2f9>
c000246f:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002472:	e8 b4 f8 ff ff       	call   c0001d2b <ld_word>
c0002477:	66 3d 00 02          	cmp    ax,0x200
c000247b:	75 e8                	jne    c0002465 <mount_volume+0xc6>
c000247d:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002480:	e8 a6 f8 ff ff       	call   c0001d2b <ld_word>
c0002485:	0f b7 c0             	movzx  eax,ax
c0002488:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000248c:	85 c0                	test   eax,eax
c000248e:	75 0c                	jne    c000249c <mount_volume+0xfd>
c0002490:	8d 46 58             	lea    eax,[esi+0x58]
c0002493:	e8 a0 f8 ff ff       	call   c0001d38 <ld_dword>
c0002498:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000249c:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000249f:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00024a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00024a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024aa:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024ad:	89 e8                	mov    eax,ebp
c00024af:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024b2:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024b5:	3c 01                	cmp    al,0x1
c00024b7:	77 ac                	ja     c0002465 <mount_volume+0xc6>
c00024b9:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024bd:	89 c3                	mov    ebx,eax
c00024bf:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024c3:	66 85 c0             	test   ax,ax
c00024c6:	74 9d                	je     c0002465 <mount_volume+0xc6>
c00024c8:	8d 40 ff             	lea    eax,[eax-0x1]
c00024cb:	85 d8                	test   eax,ebx
c00024cd:	75 96                	jne    c0002465 <mount_volume+0xc6>
c00024cf:	8d 46 45             	lea    eax,[esi+0x45]
c00024d2:	e8 54 f8 ff ff       	call   c0001d2b <ld_word>
c00024d7:	89 c7                	mov    edi,eax
c00024d9:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024dd:	a8 0f                	test   al,0xf
c00024df:	75 84                	jne    c0002465 <mount_volume+0xc6>
c00024e1:	8d 46 47             	lea    eax,[esi+0x47]
c00024e4:	e8 42 f8 ff ff       	call   c0001d2b <ld_word>
c00024e9:	0f b7 d0             	movzx  edx,ax
c00024ec:	85 d2                	test   edx,edx
c00024ee:	75 0a                	jne    c00024fa <mount_volume+0x15b>
c00024f0:	8d 46 54             	lea    eax,[esi+0x54]
c00024f3:	e8 40 f8 ff ff       	call   c0001d38 <ld_dword>
c00024f8:	89 c2                	mov    edx,eax
c00024fa:	8d 46 42             	lea    eax,[esi+0x42]
c00024fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002501:	e8 25 f8 ff ff       	call   c0001d2b <ld_word>
c0002506:	66 85 c0             	test   ax,ax
c0002509:	0f 84 56 ff ff ff    	je     c0002465 <mount_volume+0xc6>
c000250f:	89 e9                	mov    ecx,ebp
c0002511:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002515:	0f b6 e9             	movzx  ebp,cl
c0002518:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000251c:	0f af cd             	imul   ecx,ebp
c000251f:	0f b7 c0             	movzx  eax,ax
c0002522:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002526:	89 f8                	mov    eax,edi
c0002528:	66 c1 e8 04          	shr    ax,0x4
c000252c:	0f b7 c0             	movzx  eax,ax
c000252f:	01 c8                	add    eax,ecx
c0002531:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002535:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002539:	39 c2                	cmp    edx,eax
c000253b:	0f 82 24 ff ff ff    	jb     c0002465 <mount_volume+0xc6>
c0002541:	29 c2                	sub    edx,eax
c0002543:	89 d5                	mov    ebp,edx
c0002545:	89 d0                	mov    eax,edx
c0002547:	31 d2                	xor    edx,edx
c0002549:	f7 f3                	div    ebx
c000254b:	39 dd                	cmp    ebp,ebx
c000254d:	0f 82 12 ff ff ff    	jb     c0002465 <mount_volume+0xc6>
c0002553:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002558:	0f 87 07 ff ff ff    	ja     c0002465 <mount_volume+0xc6>
c000255e:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002563:	0f 86 1f 01 00 00    	jbe    c0002688 <mount_volume+0x2e9>
c0002569:	bb 03 00 00 00       	mov    ebx,0x3
c000256e:	8d 68 02             	lea    ebp,[eax+0x2]
c0002571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002575:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002578:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002584:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002588:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000258b:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258e:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002591:	83 fb 03             	cmp    ebx,0x3
c0002594:	75 21                	jne    c00025b7 <mount_volume+0x218>
c0002596:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002599:	e8 8d f7 ff ff       	call   c0001d2b <ld_word>
c000259e:	66 09 c7             	or     di,ax
c00025a1:	0f 85 be fe ff ff    	jne    c0002465 <mount_volume+0xc6>
c00025a7:	c1 e5 02             	shl    ebp,0x2
c00025aa:	8d 46 60             	lea    eax,[esi+0x60]
c00025ad:	e8 86 f7 ff ff       	call   c0001d38 <ld_dword>
c00025b2:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025b5:	eb 22                	jmp    c00025d9 <mount_volume+0x23a>
c00025b7:	66 85 ff             	test   di,di
c00025ba:	0f 84 a5 fe ff ff    	je     c0002465 <mount_volume+0xc6>
c00025c0:	01 c8                	add    eax,ecx
c00025c2:	83 fb 02             	cmp    ebx,0x2
c00025c5:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c8:	75 04                	jne    c00025ce <mount_volume+0x22f>
c00025ca:	01 ed                	add    ebp,ebp
c00025cc:	eb 0b                	jmp    c00025d9 <mount_volume+0x23a>
c00025ce:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025d2:	83 e5 01             	and    ebp,0x1
c00025d5:	d1 e8                	shr    eax,1
c00025d7:	01 c5                	add    ebp,eax
c00025d9:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025df:	c1 ed 09             	shr    ebp,0x9
c00025e2:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025e6:	0f 87 79 fe ff ff    	ja     c0002465 <mount_volume+0xc6>
c00025ec:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025f3:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025fa:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025fe:	83 fb 03             	cmp    ebx,0x3
c0002601:	75 6e                	jne    c0002671 <mount_volume+0x2d2>
c0002603:	8d 46 64             	lea    eax,[esi+0x64]
c0002606:	e8 20 f7 ff ff       	call   c0001d2b <ld_word>
c000260b:	66 48                	dec    ax
c000260d:	75 62                	jne    c0002671 <mount_volume+0x2d2>
c000260f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002613:	89 f0                	mov    eax,esi
c0002615:	42                   	inc    edx
c0002616:	e8 2f fc ff ff       	call   c000224a <move_window>
c000261b:	85 c0                	test   eax,eax
c000261d:	75 52                	jne    c0002671 <mount_volume+0x2d2>
c000261f:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002623:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002629:	e8 fd f6 ff ff       	call   c0001d2b <ld_word>
c000262e:	66 3d 55 aa          	cmp    ax,0xaa55
c0002632:	75 3d                	jne    c0002671 <mount_volume+0x2d2>
c0002634:	8d 46 34             	lea    eax,[esi+0x34]
c0002637:	e8 fc f6 ff ff       	call   c0001d38 <ld_dword>
c000263c:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002641:	75 2e                	jne    c0002671 <mount_volume+0x2d2>
c0002643:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002649:	e8 ea f6 ff ff       	call   c0001d38 <ld_dword>
c000264e:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002653:	75 1c                	jne    c0002671 <mount_volume+0x2d2>
c0002655:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000265b:	e8 d8 f6 ff ff       	call   c0001d38 <ld_dword>
c0002660:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002663:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002669:	e8 ca f6 ff ff       	call   c0001d38 <ld_dword>
c000266e:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002671:	66 a1 80 34 02 c0    	mov    ax,ds:0xc0023480
c0002677:	88 1e                	mov    BYTE PTR [esi],bl
c0002679:	40                   	inc    eax
c000267a:	31 db                	xor    ebx,ebx
c000267c:	66 a3 80 34 02 c0    	mov    ds:0xc0023480,ax
c0002682:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002686:	eb 10                	jmp    c0002698 <mount_volume+0x2f9>
c0002688:	31 db                	xor    ebx,ebx
c000268a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000268f:	0f 97 c3             	seta   bl
c0002692:	43                   	inc    ebx
c0002693:	e9 d6 fe ff ff       	jmp    c000256e <mount_volume+0x1cf>
c0002698:	83 c4 2c             	add    esp,0x2c
c000269b:	89 d8                	mov    eax,ebx
c000269d:	5b                   	pop    ebx
c000269e:	5e                   	pop    esi
c000269f:	5f                   	pop    edi
c00026a0:	5d                   	pop    ebp
c00026a1:	c3                   	ret    

c00026a2 <put_fat>:
c00026a2:	55                   	push   ebp
c00026a3:	bd 02 00 00 00       	mov    ebp,0x2
c00026a8:	57                   	push   edi
c00026a9:	56                   	push   esi
c00026aa:	53                   	push   ebx
c00026ab:	83 ec 1c             	sub    esp,0x1c
c00026ae:	83 fa 01             	cmp    edx,0x1
c00026b1:	0f 86 31 01 00 00    	jbe    c00027e8 <put_fat+0x146>
c00026b7:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026ba:	0f 86 28 01 00 00    	jbe    c00027e8 <put_fat+0x146>
c00026c0:	89 c6                	mov    esi,eax
c00026c2:	8a 00                	mov    al,BYTE PTR [eax]
c00026c4:	89 cf                	mov    edi,ecx
c00026c6:	89 d3                	mov    ebx,edx
c00026c8:	3c 02                	cmp    al,0x2
c00026ca:	0f 84 ac 00 00 00    	je     c000277c <put_fat+0xda>
c00026d0:	3c 03                	cmp    al,0x3
c00026d2:	0f 84 d1 00 00 00    	je     c00027a9 <put_fat+0x107>
c00026d8:	fe c8                	dec    al
c00026da:	0f 85 08 01 00 00    	jne    c00027e8 <put_fat+0x146>
c00026e0:	89 d1                	mov    ecx,edx
c00026e2:	89 f0                	mov    eax,esi
c00026e4:	d1 e9                	shr    ecx,1
c00026e6:	01 d1                	add    ecx,edx
c00026e8:	89 ca                	mov    edx,ecx
c00026ea:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026ee:	c1 ea 09             	shr    edx,0x9
c00026f1:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026f4:	e8 51 fb ff ff       	call   c000224a <move_window>
c00026f9:	89 c5                	mov    ebp,eax
c00026fb:	85 c0                	test   eax,eax
c00026fd:	0f 85 e5 00 00 00    	jne    c00027e8 <put_fat+0x146>
c0002703:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002707:	8d 46 34             	lea    eax,[esi+0x34]
c000270a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000270e:	8d 41 01             	lea    eax,[ecx+0x1]
c0002711:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002717:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000271b:	83 e3 01             	and    ebx,0x1
c000271e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002722:	89 f8                	mov    eax,edi
c0002724:	74 0c                	je     c0002732 <put_fat+0x90>
c0002726:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002728:	89 f8                	mov    eax,edi
c000272a:	c1 e0 04             	shl    eax,0x4
c000272d:	83 e2 0f             	and    edx,0xf
c0002730:	09 d0                	or     eax,edx
c0002732:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002736:	88 01                	mov    BYTE PTR [ecx],al
c0002738:	c1 ea 09             	shr    edx,0x9
c000273b:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000273f:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002742:	89 f0                	mov    eax,esi
c0002744:	e8 01 fb ff ff       	call   c000224a <move_window>
c0002749:	89 c5                	mov    ebp,eax
c000274b:	85 c0                	test   eax,eax
c000274d:	0f 85 95 00 00 00    	jne    c00027e8 <put_fat+0x146>
c0002753:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002757:	25 ff 01 00 00       	and    eax,0x1ff
c000275c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002760:	85 db                	test   ebx,ebx
c0002762:	74 07                	je     c000276b <put_fat+0xc9>
c0002764:	c1 ef 04             	shr    edi,0x4
c0002767:	89 f9                	mov    ecx,edi
c0002769:	eb 0d                	jmp    c0002778 <put_fat+0xd6>
c000276b:	c1 ef 08             	shr    edi,0x8
c000276e:	8a 08                	mov    cl,BYTE PTR [eax]
c0002770:	83 e1 f0             	and    ecx,0xfffffff0
c0002773:	83 e7 0f             	and    edi,0xf
c0002776:	09 f9                	or     ecx,edi
c0002778:	88 08                	mov    BYTE PTR [eax],cl
c000277a:	eb 27                	jmp    c00027a3 <put_fat+0x101>
c000277c:	c1 ea 08             	shr    edx,0x8
c000277f:	89 f0                	mov    eax,esi
c0002781:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002784:	e8 c1 fa ff ff       	call   c000224a <move_window>
c0002789:	89 c5                	mov    ebp,eax
c000278b:	85 c0                	test   eax,eax
c000278d:	75 59                	jne    c00027e8 <put_fat+0x146>
c000278f:	01 db                	add    ebx,ebx
c0002791:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002797:	0f b7 d7             	movzx  edx,di
c000279a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000279e:	e8 ad f5 ff ff       	call   c0001d50 <st_word>
c00027a3:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a7:	eb 3f                	jmp    c00027e8 <put_fat+0x146>
c00027a9:	c1 ea 07             	shr    edx,0x7
c00027ac:	89 f0                	mov    eax,esi
c00027ae:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027b1:	e8 94 fa ff ff       	call   c000224a <move_window>
c00027b6:	89 c5                	mov    ebp,eax
c00027b8:	85 c0                	test   eax,eax
c00027ba:	75 2c                	jne    c00027e8 <put_fat+0x146>
c00027bc:	c1 e3 02             	shl    ebx,0x2
c00027bf:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027c5:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027cb:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027cf:	89 d8                	mov    eax,ebx
c00027d1:	e8 62 f5 ff ff       	call   c0001d38 <ld_dword>
c00027d6:	25 00 00 00 f0       	and    eax,0xf0000000
c00027db:	09 f8                	or     eax,edi
c00027dd:	89 c2                	mov    edx,eax
c00027df:	89 d8                	mov    eax,ebx
c00027e1:	e8 6e f5 ff ff       	call   c0001d54 <st_dword>
c00027e6:	eb bb                	jmp    c00027a3 <put_fat+0x101>
c00027e8:	83 c4 1c             	add    esp,0x1c
c00027eb:	89 e8                	mov    eax,ebp
c00027ed:	5b                   	pop    ebx
c00027ee:	5e                   	pop    esi
c00027ef:	5f                   	pop    edi
c00027f0:	5d                   	pop    ebp
c00027f1:	c3                   	ret    

c00027f2 <dir_clear>:
c00027f2:	55                   	push   ebp
c00027f3:	57                   	push   edi
c00027f4:	56                   	push   esi
c00027f5:	89 c6                	mov    esi,eax
c00027f7:	53                   	push   ebx
c00027f8:	83 ec 1c             	sub    esp,0x1c
c00027fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027ff:	e8 e3 f9 ff ff       	call   c00021e7 <sync_window>
c0002804:	85 c0                	test   eax,eax
c0002806:	0f 85 c0 00 00 00    	jne    c00028cc <dir_clear+0xda>
c000280c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002810:	89 f0                	mov    eax,esi
c0002812:	e8 5a f7 ff ff       	call   c0001f71 <clst2sect>
c0002817:	31 d2                	xor    edx,edx
c0002819:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c000281c:	89 c5                	mov    ebp,eax
c000281e:	b9 00 02 00 00       	mov    ecx,0x200
c0002823:	8d 46 34             	lea    eax,[esi+0x34]
c0002826:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000282a:	e8 3d f5 ff ff       	call   c0001d6c <mem_set>
c000282f:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002833:	c1 e3 09             	shl    ebx,0x9
c0002836:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000283c:	76 1b                	jbe    c0002859 <dir_clear+0x67>
c000283e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002843:	eb 14                	jmp    c0002859 <dir_clear+0x67>
c0002845:	83 ec 0c             	sub    esp,0xc
c0002848:	53                   	push   ebx
c0002849:	e8 12 32 00 00       	call   c0005a60 <ff_memalloc>
c000284e:	83 c4 10             	add    esp,0x10
c0002851:	89 c7                	mov    edi,eax
c0002853:	85 c0                	test   eax,eax
c0002855:	75 7c                	jne    c00028d3 <dir_clear+0xe1>
c0002857:	d1 eb                	shr    ebx,1
c0002859:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000285f:	77 e4                	ja     c0002845 <dir_clear+0x53>
c0002861:	31 db                	xor    ebx,ebx
c0002863:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002867:	39 d8                	cmp    eax,ebx
c0002869:	76 53                	jbe    c00028be <dir_clear+0xcc>
c000286b:	6a 01                	push   0x1
c000286d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002870:	50                   	push   eax
c0002871:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002875:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002879:	50                   	push   eax
c000287a:	e8 77 f4 ff ff       	call   c0001cf6 <disk_write>
c000287f:	83 c4 10             	add    esp,0x10
c0002882:	85 c0                	test   eax,eax
c0002884:	75 38                	jne    c00028be <dir_clear+0xcc>
c0002886:	43                   	inc    ebx
c0002887:	eb da                	jmp    c0002863 <dir_clear+0x71>
c0002889:	52                   	push   edx
c000288a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c000288d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002891:	50                   	push   eax
c0002892:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002896:	57                   	push   edi
c0002897:	50                   	push   eax
c0002898:	e8 59 f4 ff ff       	call   c0001cf6 <disk_write>
c000289d:	83 c4 10             	add    esp,0x10
c00028a0:	85 c0                	test   eax,eax
c00028a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028a6:	75 0a                	jne    c00028b2 <dir_clear+0xc0>
c00028a8:	01 d3                	add    ebx,edx
c00028aa:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028ae:	39 d8                	cmp    eax,ebx
c00028b0:	77 d7                	ja     c0002889 <dir_clear+0x97>
c00028b2:	83 ec 0c             	sub    esp,0xc
c00028b5:	57                   	push   edi
c00028b6:	e8 bd 31 00 00       	call   c0005a78 <ff_memfree>
c00028bb:	83 c4 10             	add    esp,0x10
c00028be:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028c2:	39 d8                	cmp    eax,ebx
c00028c4:	0f 95 c0             	setne  al
c00028c7:	0f b6 c0             	movzx  eax,al
c00028ca:	eb 19                	jmp    c00028e5 <dir_clear+0xf3>
c00028cc:	b8 01 00 00 00       	mov    eax,0x1
c00028d1:	eb 12                	jmp    c00028e5 <dir_clear+0xf3>
c00028d3:	89 d9                	mov    ecx,ebx
c00028d5:	31 d2                	xor    edx,edx
c00028d7:	e8 90 f4 ff ff       	call   c0001d6c <mem_set>
c00028dc:	89 da                	mov    edx,ebx
c00028de:	c1 ea 09             	shr    edx,0x9
c00028e1:	31 db                	xor    ebx,ebx
c00028e3:	eb c5                	jmp    c00028aa <dir_clear+0xb8>
c00028e5:	83 c4 1c             	add    esp,0x1c
c00028e8:	5b                   	pop    ebx
c00028e9:	5e                   	pop    esi
c00028ea:	5f                   	pop    edi
c00028eb:	5d                   	pop    ebp
c00028ec:	c3                   	ret    

c00028ed <create_name>:
c00028ed:	55                   	push   ebp
c00028ee:	89 d5                	mov    ebp,edx
c00028f0:	57                   	push   edi
c00028f1:	89 c7                	mov    edi,eax
c00028f3:	56                   	push   esi
c00028f4:	31 f6                	xor    esi,esi
c00028f6:	53                   	push   ebx
c00028f7:	83 ec 3c             	sub    esp,0x3c
c00028fa:	8b 02                	mov    eax,DWORD PTR [edx]
c00028fc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002900:	8b 07                	mov    eax,DWORD PTR [edi]
c0002902:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002905:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002909:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000290d:	e8 a0 f4 ff ff       	call   c0001db2 <tchar2uni>
c0002912:	89 c3                	mov    ebx,eax
c0002914:	83 f8 ff             	cmp    eax,0xffffffff
c0002917:	75 0a                	jne    c0002923 <create_name+0x36>
c0002919:	b8 06 00 00 00       	mov    eax,0x6
c000291e:	e9 83 02 00 00       	jmp    c0002ba6 <create_name+0x2b9>
c0002923:	3d ff ff 00 00       	cmp    eax,0xffff
c0002928:	76 0c                	jbe    c0002936 <create_name+0x49>
c000292a:	c1 e8 10             	shr    eax,0x10
c000292d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002931:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0002935:	46                   	inc    esi
c0002936:	66 83 fb 1f          	cmp    bx,0x1f
c000293a:	89 d8                	mov    eax,ebx
c000293c:	76 36                	jbe    c0002974 <create_name+0x87>
c000293e:	66 83 fb 2f          	cmp    bx,0x2f
c0002942:	74 30                	je     c0002974 <create_name+0x87>
c0002944:	66 83 fb 5c          	cmp    bx,0x5c
c0002948:	74 39                	je     c0002983 <create_name+0x96>
c000294a:	66 83 fb 7f          	cmp    bx,0x7f
c000294e:	77 11                	ja     c0002961 <create_name+0x74>
c0002950:	0f b7 d3             	movzx  edx,bx
c0002953:	b8 c2 ec 01 c0       	mov    eax,0xc001ecc2
c0002958:	e8 3d f4 ff ff       	call   c0001d9a <chk_chr>
c000295d:	85 c0                	test   eax,eax
c000295f:	75 b8                	jne    c0002919 <create_name+0x2c>
c0002961:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002967:	77 b0                	ja     c0002919 <create_name+0x2c>
c0002969:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000296d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002971:	46                   	inc    esi
c0002972:	eb 95                	jmp    c0002909 <create_name+0x1c>
c0002974:	66 83 f8 1f          	cmp    ax,0x1f
c0002978:	b3 04                	mov    bl,0x4
c000297a:	76 19                	jbe    c0002995 <create_name+0xa8>
c000297c:	eb 05                	jmp    c0002983 <create_name+0x96>
c000297e:	40                   	inc    eax
c000297f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002983:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002987:	8a 10                	mov    dl,BYTE PTR [eax]
c0002989:	80 fa 2f             	cmp    dl,0x2f
c000298c:	74 f0                	je     c000297e <create_name+0x91>
c000298e:	80 fa 5c             	cmp    dl,0x5c
c0002991:	74 eb                	je     c000297e <create_name+0x91>
c0002993:	31 db                	xor    ebx,ebx
c0002995:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002999:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000299c:	85 f6                	test   esi,esi
c000299e:	74 18                	je     c00029b8 <create_name+0xcb>
c00029a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00029a4:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00029a9:	66 83 f8 20          	cmp    ax,0x20
c00029ad:	74 06                	je     c00029b5 <create_name+0xc8>
c00029af:	66 83 f8 2e          	cmp    ax,0x2e
c00029b3:	75 03                	jne    c00029b8 <create_name+0xcb>
c00029b5:	4e                   	dec    esi
c00029b6:	eb e4                	jmp    c000299c <create_name+0xaf>
c00029b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00029bc:	31 ed                	xor    ebp,ebp
c00029be:	85 f6                	test   esi,esi
c00029c0:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029c6:	0f 84 4d ff ff ff    	je     c0002919 <create_name+0x2c>
c00029cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00029d0:	8d 55 01             	lea    edx,[ebp+0x1]
c00029d3:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029d7:	66 83 f8 20          	cmp    ax,0x20
c00029db:	75 04                	jne    c00029e1 <create_name+0xf4>
c00029dd:	89 d5                	mov    ebp,edx
c00029df:	eb eb                	jmp    c00029cc <create_name+0xdf>
c00029e1:	85 ed                	test   ebp,ebp
c00029e3:	75 06                	jne    c00029eb <create_name+0xfe>
c00029e5:	66 83 f8 2e          	cmp    ax,0x2e
c00029e9:	75 08                	jne    c00029f3 <create_name+0x106>
c00029eb:	83 cb 03             	or     ebx,0x3
c00029ee:	eb 03                	jmp    c00029f3 <create_name+0x106>
c00029f0:	4e                   	dec    esi
c00029f1:	74 0c                	je     c00029ff <create_name+0x112>
c00029f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00029f7:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029fd:	75 f1                	jne    c00029f0 <create_name+0x103>
c00029ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a04:	8d 47 20             	lea    eax,[edi+0x20]
c0002a07:	ba 20 00 00 00       	mov    edx,0x20
c0002a0c:	e8 5b f3 ff ff       	call   c0001d6c <mem_set>
c0002a11:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0002a19:	31 c9                	xor    ecx,ecx
c0002a1b:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0002a20:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002a27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a2b:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a2f:	66 85 ed             	test   bp,bp
c0002a32:	0f 84 1f 01 00 00    	je     c0002b57 <create_name+0x26a>
c0002a38:	66 83 fd 20          	cmp    bp,0x20
c0002a3c:	74 0c                	je     c0002a4a <create_name+0x15d>
c0002a3e:	66 83 fd 2e          	cmp    bp,0x2e
c0002a42:	75 0f                	jne    c0002a53 <create_name+0x166>
c0002a44:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002a48:	74 09                	je     c0002a53 <create_name+0x166>
c0002a4a:	83 cb 03             	or     ebx,0x3
c0002a4d:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0002a51:	eb cd                	jmp    c0002a20 <create_name+0x133>
c0002a53:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0002a57:	73 06                	jae    c0002a5f <create_name+0x172>
c0002a59:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002a5d:	75 3a                	jne    c0002a99 <create_name+0x1ac>
c0002a5f:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0002a64:	75 08                	jne    c0002a6e <create_name+0x181>
c0002a66:	83 cb 03             	or     ebx,0x3
c0002a69:	e9 e9 00 00 00       	jmp    c0002b57 <create_name+0x26a>
c0002a6e:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002a72:	74 0d                	je     c0002a81 <create_name+0x194>
c0002a74:	83 cb 03             	or     ebx,0x3
c0002a77:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0002a7b:	0f 87 d6 00 00 00    	ja     c0002b57 <create_name+0x26a>
c0002a81:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0002a86:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0002a8a:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0002a92:	b9 08 00 00 00       	mov    ecx,0x8
c0002a97:	eb b4                	jmp    c0002a4d <create_name+0x160>
c0002a99:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9d:	76 68                	jbe    c0002b07 <create_name+0x21a>
c0002a9f:	88 da                	mov    dl,bl
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	83 ca 02             	or     edx,0x2
c0002aa8:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aac:	50                   	push   eax
c0002aad:	50                   	push   eax
c0002aae:	68 b5 01 00 00       	push   0x1b5
c0002ab3:	55                   	push   ebp
c0002ab4:	e8 d7 2f 00 00       	call   c0005a90 <ff_uni2oem>
c0002ab9:	83 c4 10             	add    esp,0x10
c0002abc:	89 c5                	mov    ebp,eax
c0002abe:	a8 80                	test   al,0x80
c0002ac0:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ac8:	74 0c                	je     c0002ad6 <create_name+0x1e9>
c0002aca:	83 e5 7f             	and    ebp,0x7f
c0002acd:	0f b6 ad 80 ed 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe1280]
c0002ad4:	eb 2a                	jmp    c0002b00 <create_name+0x213>
c0002ad6:	66 3d ff 00          	cmp    ax,0xff
c0002ada:	76 24                	jbe    c0002b00 <create_name+0x213>
c0002adc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002ae0:	48                   	dec    eax
c0002ae1:	39 c8                	cmp    eax,ecx
c0002ae3:	77 0c                	ja     c0002af1 <create_name+0x204>
c0002ae5:	83 cb 03             	or     ebx,0x3
c0002ae8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002aec:	e9 5c ff ff ff       	jmp    c0002a4d <create_name+0x160>
c0002af1:	89 e8                	mov    eax,ebp
c0002af3:	88 d3                	mov    bl,dl
c0002af5:	66 c1 e8 08          	shr    ax,0x8
c0002af9:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002afd:	41                   	inc    ecx
c0002afe:	eb 4b                	jmp    c0002b4b <create_name+0x25e>
c0002b00:	66 85 ed             	test   bp,bp
c0002b03:	88 d3                	mov    bl,dl
c0002b05:	74 19                	je     c0002b20 <create_name+0x233>
c0002b07:	0f b7 d5             	movzx  edx,bp
c0002b0a:	b8 cb ec 01 c0       	mov    eax,0xc001eccb
c0002b0f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b13:	e8 82 f2 ff ff       	call   c0001d9a <chk_chr>
c0002b18:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1c:	85 c0                	test   eax,eax
c0002b1e:	74 0a                	je     c0002b2a <create_name+0x23d>
c0002b20:	83 cb 03             	or     ebx,0x3
c0002b23:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b28:	eb 21                	jmp    c0002b4b <create_name+0x25e>
c0002b2a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2d:	66 83 f8 19          	cmp    ax,0x19
c0002b31:	77 07                	ja     c0002b3a <create_name+0x24d>
c0002b33:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0002b38:	eb 11                	jmp    c0002b4b <create_name+0x25e>
c0002b3a:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3d:	66 83 f8 19          	cmp    ax,0x19
c0002b41:	77 08                	ja     c0002b4b <create_name+0x25e>
c0002b43:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0002b48:	83 ed 20             	sub    ebp,0x20
c0002b4b:	89 e8                	mov    eax,ebp
c0002b4d:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b51:	41                   	inc    ecx
c0002b52:	e9 f6 fe ff ff       	jmp    c0002a4d <create_name+0x160>
c0002b57:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5b:	75 04                	jne    c0002b61 <create_name+0x274>
c0002b5d:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b61:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0002b66:	75 05                	jne    c0002b6d <create_name+0x280>
c0002b68:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0002b6d:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0002b71:	83 e0 0c             	and    eax,0xc
c0002b74:	3c 0c                	cmp    al,0xc
c0002b76:	74 0b                	je     c0002b83 <create_name+0x296>
c0002b78:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0002b7c:	83 e0 03             	and    eax,0x3
c0002b7f:	3c 03                	cmp    al,0x3
c0002b81:	75 05                	jne    c0002b88 <create_name+0x29b>
c0002b83:	83 cb 02             	or     ebx,0x2
c0002b86:	eb 19                	jmp    c0002ba1 <create_name+0x2b4>
c0002b88:	f6 c3 02             	test   bl,0x2
c0002b8b:	75 14                	jne    c0002ba1 <create_name+0x2b4>
c0002b8d:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0002b92:	74 03                	je     c0002b97 <create_name+0x2aa>
c0002b94:	83 cb 10             	or     ebx,0x10
c0002b97:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0002b9c:	74 03                	je     c0002ba1 <create_name+0x2b4>
c0002b9e:	83 cb 08             	or     ebx,0x8
c0002ba1:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba4:	31 c0                	xor    eax,eax
c0002ba6:	83 c4 3c             	add    esp,0x3c
c0002ba9:	5b                   	pop    ebx
c0002baa:	5e                   	pop    esi
c0002bab:	5f                   	pop    edi
c0002bac:	5d                   	pop    ebp
c0002bad:	c3                   	ret    

c0002bae <cmp_lfn>:
c0002bae:	55                   	push   ebp
c0002baf:	57                   	push   edi
c0002bb0:	89 d7                	mov    edi,edx
c0002bb2:	56                   	push   esi
c0002bb3:	53                   	push   ebx
c0002bb4:	83 ec 1c             	sub    esp,0x1c
c0002bb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bbb:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bbe:	e8 68 f1 ff ff       	call   c0001d2b <ld_word>
c0002bc3:	66 85 c0             	test   ax,ax
c0002bc6:	74 07                	je     c0002bcf <cmp_lfn+0x21>
c0002bc8:	31 c0                	xor    eax,eax
c0002bca:	e9 9a 00 00 00       	jmp    c0002c69 <cmp_lfn+0xbb>
c0002bcf:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002bd1:	bd 01 00 00 00       	mov    ebp,0x1
c0002bd6:	83 e3 3f             	and    ebx,0x3f
c0002bd9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002be1:	4b                   	dec    ebx
c0002be2:	6b db 0d             	imul   ebx,ebx,0xd
c0002be5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002be9:	0f b6 80 00 ee 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe1200]
c0002bf0:	01 f8                	add    eax,edi
c0002bf2:	e8 34 f1 ff ff       	call   c0001d2b <ld_word>
c0002bf7:	66 85 ed             	test   bp,bp
c0002bfa:	89 c6                	mov    esi,eax
c0002bfc:	74 3c                	je     c0002c3a <cmp_lfn+0x8c>
c0002bfe:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c04:	77 c2                	ja     c0002bc8 <cmp_lfn+0x1a>
c0002c06:	83 ec 0c             	sub    esp,0xc
c0002c09:	0f b7 c0             	movzx  eax,ax
c0002c0c:	50                   	push   eax
c0002c0d:	e8 92 2f 00 00       	call   c0005ba4 <ff_wtoupper>
c0002c12:	89 c5                	mov    ebp,eax
c0002c14:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c17:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c1f:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c23:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c26:	e8 79 2f 00 00       	call   c0005ba4 <ff_wtoupper>
c0002c2b:	83 c4 10             	add    esp,0x10
c0002c2e:	39 c5                	cmp    ebp,eax
c0002c30:	75 96                	jne    c0002bc8 <cmp_lfn+0x1a>
c0002c32:	89 f5                	mov    ebp,esi
c0002c34:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c38:	eb 04                	jmp    c0002c3e <cmp_lfn+0x90>
c0002c3a:	66 46                	inc    si
c0002c3c:	75 8a                	jne    c0002bc8 <cmp_lfn+0x1a>
c0002c3e:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c42:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c47:	75 9c                	jne    c0002be5 <cmp_lfn+0x37>
c0002c49:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c4c:	74 16                	je     c0002c64 <cmp_lfn+0xb6>
c0002c4e:	66 85 ed             	test   bp,bp
c0002c51:	74 11                	je     c0002c64 <cmp_lfn+0xb6>
c0002c53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c57:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c5c:	0f 94 c0             	sete   al
c0002c5f:	0f b6 c0             	movzx  eax,al
c0002c62:	eb 05                	jmp    c0002c69 <cmp_lfn+0xbb>
c0002c64:	b8 01 00 00 00       	mov    eax,0x1
c0002c69:	83 c4 1c             	add    esp,0x1c
c0002c6c:	5b                   	pop    ebx
c0002c6d:	5e                   	pop    esi
c0002c6e:	5f                   	pop    edi
c0002c6f:	5d                   	pop    ebp
c0002c70:	c3                   	ret    

c0002c71 <sync_fs>:
c0002c71:	56                   	push   esi
c0002c72:	53                   	push   ebx
c0002c73:	53                   	push   ebx
c0002c74:	89 c3                	mov    ebx,eax
c0002c76:	e8 6c f5 ff ff       	call   c00021e7 <sync_window>
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	0f 85 9a 00 00 00    	jne    c0002d1d <sync_fs+0xac>
c0002c83:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c86:	75 7b                	jne    c0002d03 <sync_fs+0x92>
c0002c88:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002c8c:	75 75                	jne    c0002d03 <sync_fs+0x92>
c0002c8e:	8d 73 34             	lea    esi,[ebx+0x34]
c0002c91:	b9 00 02 00 00       	mov    ecx,0x200
c0002c96:	31 d2                	xor    edx,edx
c0002c98:	89 f0                	mov    eax,esi
c0002c9a:	e8 cd f0 ff ff       	call   c0001d6c <mem_set>
c0002c9f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ca5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002caa:	e8 a1 f0 ff ff       	call   c0001d50 <st_word>
c0002caf:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cb4:	89 f0                	mov    eax,esi
c0002cb6:	e8 99 f0 ff ff       	call   c0001d54 <st_dword>
c0002cbb:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cc1:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cc6:	e8 89 f0 ff ff       	call   c0001d54 <st_dword>
c0002ccb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002cce:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002cd4:	e8 7b f0 ff ff       	call   c0001d54 <st_dword>
c0002cd9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cdc:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ce2:	e8 6d f0 ff ff       	call   c0001d54 <st_dword>
c0002ce7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002cea:	6a 01                	push   0x1
c0002cec:	40                   	inc    eax
c0002ced:	50                   	push   eax
c0002cee:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002cf1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002cf5:	56                   	push   esi
c0002cf6:	50                   	push   eax
c0002cf7:	e8 fa ef ff ff       	call   c0001cf6 <disk_write>
c0002cfc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d00:	83 c4 10             	add    esp,0x10
c0002d03:	51                   	push   ecx
c0002d04:	6a 00                	push   0x0
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	6a 00                	push   0x0
c0002d0c:	50                   	push   eax
c0002d0d:	e8 fa ef ff ff       	call   c0001d0c <disk_ioctl>
c0002d12:	83 c4 10             	add    esp,0x10
c0002d15:	85 c0                	test   eax,eax
c0002d17:	0f 95 c0             	setne  al
c0002d1a:	0f b6 c0             	movzx  eax,al
c0002d1d:	5a                   	pop    edx
c0002d1e:	5b                   	pop    ebx
c0002d1f:	5e                   	pop    esi
c0002d20:	c3                   	ret    

c0002d21 <create_partition>:
c0002d21:	55                   	push   ebp
c0002d22:	57                   	push   edi
c0002d23:	56                   	push   esi
c0002d24:	53                   	push   ebx
c0002d25:	83 ec 40             	sub    esp,0x40
c0002d28:	0f b6 c0             	movzx  eax,al
c0002d2b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d2f:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d3b:	50                   	push   eax
c0002d3c:	6a 01                	push   0x1
c0002d3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d42:	e8 c5 ef ff ff       	call   c0001d0c <disk_ioctl>
c0002d47:	83 c4 10             	add    esp,0x10
c0002d4a:	85 c0                	test   eax,eax
c0002d4c:	0f 85 70 01 00 00    	jne    c0002ec2 <create_partition+0x1a1>
c0002d52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d56:	b9 05 00 00 00       	mov    ecx,0x5
c0002d5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d5f:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d64:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d69:	31 d2                	xor    edx,edx
c0002d6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d6f:	f7 f3                	div    ebx
c0002d71:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d76:	76 0c                	jbe    c0002d84 <create_partition+0x63>
c0002d78:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d7c:	49                   	dec    ecx
c0002d7d:	75 e5                	jne    c0002d64 <create_partition+0x43>
c0002d7f:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d84:	b9 00 02 00 00       	mov    ecx,0x200
c0002d89:	31 d2                	xor    edx,edx
c0002d8b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002d8f:	e8 d8 ef ff ff       	call   c0001d6c <mem_set>
c0002d94:	b9 64 00 00 00       	mov    ecx,0x64
c0002d99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	f7 f1                	div    ecx
c0002da1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002da5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da9:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002db6:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dbc:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c0002dc1:	0f 96 c2             	setbe  dl
c0002dc4:	85 c9                	test   ecx,ecx
c0002dc6:	0f 95 c0             	setne  al
c0002dc9:	84 c2                	test   dl,al
c0002dcb:	0f 84 c0 00 00 00    	je     c0002e91 <create_partition+0x170>
c0002dd1:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0002dd5:	0f 83 b6 00 00 00    	jae    c0002e91 <create_partition+0x170>
c0002ddb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002ddf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002de3:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002de6:	83 fe 64             	cmp    esi,0x64
c0002de9:	77 0d                	ja     c0002df8 <create_partition+0xd7>
c0002deb:	74 07                	je     c0002df4 <create_partition+0xd3>
c0002ded:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002df2:	eb 04                	jmp    c0002df8 <create_partition+0xd7>
c0002df4:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002df8:	89 ca                	mov    edx,ecx
c0002dfa:	31 c0                	xor    eax,eax
c0002dfc:	01 f2                	add    edx,esi
c0002dfe:	0f 92 c0             	setb   al
c0002e01:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e05:	77 04                	ja     c0002e0b <create_partition+0xea>
c0002e07:	85 c0                	test   eax,eax
c0002e09:	74 08                	je     c0002e13 <create_partition+0xf2>
c0002e0b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e0f:	29 ce                	sub    esi,ecx
c0002e11:	eb 04                	jmp    c0002e17 <create_partition+0xf6>
c0002e13:	85 f6                	test   esi,esi
c0002e15:	74 7a                	je     c0002e91 <create_partition+0x170>
c0002e17:	89 ca                	mov    edx,ecx
c0002e19:	89 d8                	mov    eax,ebx
c0002e1b:	e8 34 ef ff ff       	call   c0001d54 <st_dword>
c0002e20:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e23:	89 f2                	mov    edx,esi
c0002e25:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e2a:	e8 25 ef ff ff       	call   c0001d54 <st_dword>
c0002e2f:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e33:	88 43 fc             	mov    BYTE PTR [ebx-0x4],al
c0002e36:	31 d2                	xor    edx,edx
c0002e38:	89 c8                	mov    eax,ecx
c0002e3a:	01 f1                	add    ecx,esi
c0002e3c:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e41:	f7 f5                	div    ebp
c0002e43:	89 d5                	mov    ebp,edx
c0002e45:	31 d2                	xor    edx,edx
c0002e47:	f7 f7                	div    edi
c0002e49:	88 53 f9             	mov    BYTE PTR [ebx-0x7],dl
c0002e4c:	89 c2                	mov    edx,eax
c0002e4e:	c1 ea 02             	shr    edx,0x2
c0002e51:	45                   	inc    ebp
c0002e52:	83 e2 c0             	and    edx,0xffffffc0
c0002e55:	88 43 fb             	mov    BYTE PTR [ebx-0x5],al
c0002e58:	09 ea                	or     edx,ebp
c0002e5a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e5d:	88 53 fa             	mov    BYTE PTR [ebx-0x6],dl
c0002e60:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e65:	31 d2                	xor    edx,edx
c0002e67:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e6b:	f7 f5                	div    ebp
c0002e6d:	89 d6                	mov    esi,edx
c0002e6f:	31 d2                	xor    edx,edx
c0002e71:	f7 f7                	div    edi
c0002e73:	89 c7                	mov    edi,eax
c0002e75:	46                   	inc    esi
c0002e76:	c1 ef 02             	shr    edi,0x2
c0002e79:	88 53 fd             	mov    BYTE PTR [ebx-0x3],dl
c0002e7c:	83 e7 c0             	and    edi,0xffffffc0
c0002e7f:	88 43 ff             	mov    BYTE PTR [ebx-0x1],al
c0002e82:	09 fe                	or     esi,edi
c0002e84:	83 c3 10             	add    ebx,0x10
c0002e87:	89 f2                	mov    edx,esi
c0002e89:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002e8c:	e9 2b ff ff ff       	jmp    c0002dbc <create_partition+0x9b>
c0002e91:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002e9a:	05 fe 01 00 00       	add    eax,0x1fe
c0002e9f:	e8 ac ee ff ff       	call   c0001d50 <st_word>
c0002ea4:	6a 01                	push   0x1
c0002ea6:	6a 00                	push   0x0
c0002ea8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002eb0:	e8 41 ee ff ff       	call   c0001cf6 <disk_write>
c0002eb5:	83 c4 10             	add    esp,0x10
c0002eb8:	85 c0                	test   eax,eax
c0002eba:	0f 95 c0             	setne  al
c0002ebd:	0f b6 c0             	movzx  eax,al
c0002ec0:	eb 05                	jmp    c0002ec7 <create_partition+0x1a6>
c0002ec2:	b8 01 00 00 00       	mov    eax,0x1
c0002ec7:	83 c4 3c             	add    esp,0x3c
c0002eca:	5b                   	pop    ebx
c0002ecb:	5e                   	pop    esi
c0002ecc:	5f                   	pop    edi
c0002ecd:	5d                   	pop    ebp
c0002ece:	c3                   	ret    

c0002ecf <get_fileinfo>:
c0002ecf:	55                   	push   ebp
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ed8:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002edc:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002ee0:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ee4:	0f 84 c1 01 00 00    	je     c00030ab <get_fileinfo+0x1dc>
c0002eea:	89 d3                	mov    ebx,edx
c0002eec:	89 c6                	mov    esi,eax
c0002eee:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ef2:	74 6a                	je     c0002f5e <get_fileinfo+0x8f>
c0002ef4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002efc:	31 ed                	xor    ebp,ebp
c0002efe:	31 ff                	xor    edi,edi
c0002f00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f04:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f0b:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f0f:	66 85 d2             	test   dx,dx
c0002f12:	74 3e                	je     c0002f52 <get_fileinfo+0x83>
c0002f14:	66 85 ed             	test   bp,bp
c0002f17:	75 0c                	jne    c0002f25 <get_fileinfo+0x56>
c0002f19:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f1f:	66 3d ff 07          	cmp    ax,0x7ff
c0002f23:	76 22                	jbe    c0002f47 <get_fileinfo+0x78>
c0002f25:	89 e8                	mov    eax,ebp
c0002f27:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f2c:	c1 e0 10             	shl    eax,0x10
c0002f2f:	29 f9                	sub    ecx,edi
c0002f31:	09 d0                	or     eax,edx
c0002f33:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f37:	e8 3c ef ff ff       	call   c0001e78 <put_utf>
c0002f3c:	84 c0                	test   al,al
c0002f3e:	74 10                	je     c0002f50 <get_fileinfo+0x81>
c0002f40:	0f b6 c0             	movzx  eax,al
c0002f43:	01 c7                	add    edi,eax
c0002f45:	31 d2                	xor    edx,edx
c0002f47:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f4c:	89 d5                	mov    ebp,edx
c0002f4e:	eb b0                	jmp    c0002f00 <get_fileinfo+0x31>
c0002f50:	31 ff                	xor    edi,edi
c0002f52:	66 85 ed             	test   bp,bp
c0002f55:	74 02                	je     c0002f59 <get_fileinfo+0x8a>
c0002f57:	31 ff                	xor    edi,edi
c0002f59:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f5e:	31 ff                	xor    edi,edi
c0002f60:	31 c9                	xor    ecx,ecx
c0002f62:	83 f9 0a             	cmp    ecx,0xa
c0002f65:	0f 87 ad 00 00 00    	ja     c0003018 <get_fileinfo+0x149>
c0002f6b:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f6e:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f71:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f75:	66 83 fa 20          	cmp    dx,0x20
c0002f79:	0f 84 92 00 00 00    	je     c0003011 <get_fileinfo+0x142>
c0002f7f:	66 83 fa 05          	cmp    dx,0x5
c0002f83:	75 05                	jne    c0002f8a <get_fileinfo+0xbb>
c0002f85:	ba e5 00 00 00       	mov    edx,0xe5
c0002f8a:	83 fd 09             	cmp    ebp,0x9
c0002f8d:	75 0b                	jne    c0002f9a <get_fileinfo+0xcb>
c0002f8f:	83 ff 0b             	cmp    edi,0xb
c0002f92:	77 06                	ja     c0002f9a <get_fileinfo+0xcb>
c0002f94:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002f99:	47                   	inc    edi
c0002f9a:	0f b7 c2             	movzx  eax,dx
c0002f9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fa1:	e8 06 ee ff ff       	call   c0001dac <dbc_1st>
c0002fa6:	85 c0                	test   eax,eax
c0002fa8:	74 2f                	je     c0002fd9 <get_fileinfo+0x10a>
c0002faa:	83 fd 08             	cmp    ebp,0x8
c0002fad:	74 2a                	je     c0002fd9 <get_fileinfo+0x10a>
c0002faf:	83 fd 0b             	cmp    ebp,0xb
c0002fb2:	74 25                	je     c0002fd9 <get_fileinfo+0x10a>
c0002fb4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fb7:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fbb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fbf:	e8 eb ed ff ff       	call   c0001daf <dbc_2nd>
c0002fc4:	85 c0                	test   eax,eax
c0002fc6:	74 11                	je     c0002fd9 <get_fileinfo+0x10a>
c0002fc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fcc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fcf:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fd4:	c1 e2 08             	shl    edx,0x8
c0002fd7:	09 c2                	or     edx,eax
c0002fd9:	50                   	push   eax
c0002fda:	50                   	push   eax
c0002fdb:	68 b5 01 00 00       	push   0x1b5
c0002fe0:	0f b7 d2             	movzx  edx,dx
c0002fe3:	52                   	push   edx
c0002fe4:	e8 47 2b 00 00       	call   c0005b30 <ff_oem2uni>
c0002fe9:	83 c4 10             	add    esp,0x10
c0002fec:	66 85 c0             	test   ax,ax
c0002fef:	75 04                	jne    c0002ff5 <get_fileinfo+0x126>
c0002ff1:	31 ff                	xor    edi,edi
c0002ff3:	eb 23                	jmp    c0003018 <get_fileinfo+0x149>
c0002ff5:	b9 0c 00 00 00       	mov    ecx,0xc
c0002ffa:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0002ffe:	29 f9                	sub    ecx,edi
c0003000:	0f b7 c0             	movzx  eax,ax
c0003003:	e8 70 ee ff ff       	call   c0001e78 <put_utf>
c0003008:	84 c0                	test   al,al
c000300a:	74 e5                	je     c0002ff1 <get_fileinfo+0x122>
c000300c:	0f b6 c0             	movzx  eax,al
c000300f:	01 c7                	add    edi,eax
c0003011:	89 e9                	mov    ecx,ebp
c0003013:	e9 4a ff ff ff       	jmp    c0002f62 <get_fileinfo+0x93>
c0003018:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000301d:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003021:	75 54                	jne    c0003077 <get_fileinfo+0x1a8>
c0003023:	85 ff                	test   edi,edi
c0003025:	75 0b                	jne    c0003032 <get_fileinfo+0x163>
c0003027:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c000302b:	ba 01 00 00 00       	mov    edx,0x1
c0003030:	eb 33                	jmp    c0003065 <get_fileinfo+0x196>
c0003032:	b1 08                	mov    cl,0x8
c0003034:	31 d2                	xor    edx,edx
c0003036:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000303c:	84 c0                	test   al,al
c000303e:	74 25                	je     c0003065 <get_fileinfo+0x196>
c0003040:	66 83 f8 2e          	cmp    ax,0x2e
c0003044:	74 16                	je     c000305c <get_fileinfo+0x18d>
c0003046:	8d 78 bf             	lea    edi,[eax-0x41]
c0003049:	66 83 ff 19          	cmp    di,0x19
c000304d:	77 0f                	ja     c000305e <get_fileinfo+0x18f>
c000304f:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c0003052:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003055:	74 07                	je     c000305e <get_fileinfo+0x18f>
c0003057:	83 c0 20             	add    eax,0x20
c000305a:	eb 02                	jmp    c000305e <get_fileinfo+0x18f>
c000305c:	b1 10                	mov    cl,0x10
c000305e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003062:	42                   	inc    edx
c0003063:	eb d1                	jmp    c0003036 <get_fileinfo+0x167>
c0003065:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000306a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000306d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003071:	75 04                	jne    c0003077 <get_fileinfo+0x1a8>
c0003073:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000307d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003080:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003083:	83 c0 1c             	add    eax,0x1c
c0003086:	e8 ad ec ff ff       	call   c0001d38 <ld_dword>
c000308b:	89 03                	mov    DWORD PTR [ebx],eax
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 16             	add    eax,0x16
c0003093:	e8 93 ec ff ff       	call   c0001d2b <ld_word>
c0003098:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c000309c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309f:	83 c0 18             	add    eax,0x18
c00030a2:	e8 84 ec ff ff       	call   c0001d2b <ld_word>
c00030a7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030ab:	83 c4 1c             	add    esp,0x1c
c00030ae:	5b                   	pop    ebx
c00030af:	5e                   	pop    esi
c00030b0:	5f                   	pop    edi
c00030b1:	5d                   	pop    ebp
c00030b2:	c3                   	ret    

c00030b3 <ld_clust.isra.0>:
c00030b3:	56                   	push   esi
c00030b4:	89 c6                	mov    esi,eax
c00030b6:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030b9:	53                   	push   ebx
c00030ba:	89 d3                	mov    ebx,edx
c00030bc:	e8 6a ec ff ff       	call   c0001d2b <ld_word>
c00030c1:	0f b7 c8             	movzx  ecx,ax
c00030c4:	89 f0                	mov    eax,esi
c00030c6:	3c 03                	cmp    al,0x3
c00030c8:	75 0d                	jne    c00030d7 <ld_clust.isra.0+0x24>
c00030ca:	8d 43 14             	lea    eax,[ebx+0x14]
c00030cd:	e8 59 ec ff ff       	call   c0001d2b <ld_word>
c00030d2:	c1 e0 10             	shl    eax,0x10
c00030d5:	09 c1                	or     ecx,eax
c00030d7:	5b                   	pop    ebx
c00030d8:	89 c8                	mov    eax,ecx
c00030da:	5e                   	pop    esi
c00030db:	c3                   	ret    

c00030dc <st_clust.isra.1>:
c00030dc:	56                   	push   esi
c00030dd:	89 c6                	mov    esi,eax
c00030df:	53                   	push   ebx
c00030e0:	89 d3                	mov    ebx,edx
c00030e2:	0f b7 d1             	movzx  edx,cx
c00030e5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030e8:	e8 63 ec ff ff       	call   c0001d50 <st_word>
c00030ed:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030f0:	75 0f                	jne    c0003101 <st_clust.isra.1+0x25>
c00030f2:	c1 e9 10             	shr    ecx,0x10
c00030f5:	8d 43 14             	lea    eax,[ebx+0x14]
c00030f8:	89 ca                	mov    edx,ecx
c00030fa:	5b                   	pop    ebx
c00030fb:	5e                   	pop    esi
c00030fc:	e9 4f ec ff ff       	jmp    c0001d50 <st_word>
c0003101:	5b                   	pop    ebx
c0003102:	5e                   	pop    esi
c0003103:	c3                   	ret    

c0003104 <get_fat.isra.2>:
c0003104:	b9 01 00 00 00       	mov    ecx,0x1
c0003109:	83 fa 01             	cmp    edx,0x1
c000310c:	0f 86 f1 00 00 00    	jbe    c0003203 <get_fat.isra.2+0xff>
c0003112:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003115:	0f 83 e8 00 00 00    	jae    c0003203 <get_fat.isra.2+0xff>
c000311b:	55                   	push   ebp
c000311c:	57                   	push   edi
c000311d:	89 c7                	mov    edi,eax
c000311f:	56                   	push   esi
c0003120:	89 d6                	mov    esi,edx
c0003122:	53                   	push   ebx
c0003123:	83 ec 0c             	sub    esp,0xc
c0003126:	8a 00                	mov    al,BYTE PTR [eax]
c0003128:	3c 02                	cmp    al,0x2
c000312a:	74 78                	je     c00031a4 <get_fat.isra.2+0xa0>
c000312c:	3c 03                	cmp    al,0x3
c000312e:	0f 84 97 00 00 00    	je     c00031cb <get_fat.isra.2+0xc7>
c0003134:	fe c8                	dec    al
c0003136:	0f 85 bd 00 00 00    	jne    c00031f9 <get_fat.isra.2+0xf5>
c000313c:	89 d3                	mov    ebx,edx
c000313e:	89 f8                	mov    eax,edi
c0003140:	d1 eb                	shr    ebx,1
c0003142:	01 d3                	add    ebx,edx
c0003144:	89 da                	mov    edx,ebx
c0003146:	c1 ea 09             	shr    edx,0x9
c0003149:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000314c:	e8 f9 f0 ff ff       	call   c000224a <move_window>
c0003151:	85 c0                	test   eax,eax
c0003153:	74 08                	je     c000315d <get_fat.isra.2+0x59>
c0003155:	83 c9 ff             	or     ecx,0xffffffff
c0003158:	e9 9c 00 00 00       	jmp    c00031f9 <get_fat.isra.2+0xf5>
c000315d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003160:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003166:	89 ea                	mov    edx,ebp
c0003168:	89 f8                	mov    eax,edi
c000316a:	c1 ea 09             	shr    edx,0x9
c000316d:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003171:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003174:	e8 d1 f0 ff ff       	call   c000224a <move_window>
c0003179:	85 c0                	test   eax,eax
c000317b:	75 d8                	jne    c0003155 <get_fat.isra.2+0x51>
c000317d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003183:	0f b6 c3             	movzx  eax,bl
c0003186:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000318b:	c1 e3 08             	shl    ebx,0x8
c000318e:	09 c3                	or     ebx,eax
c0003190:	89 d9                	mov    ecx,ebx
c0003192:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003198:	83 e6 01             	and    esi,0x1
c000319b:	74 5c                	je     c00031f9 <get_fat.isra.2+0xf5>
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	c1 e9 04             	shr    ecx,0x4
c00031a2:	eb 55                	jmp    c00031f9 <get_fat.isra.2+0xf5>
c00031a4:	c1 ea 08             	shr    edx,0x8
c00031a7:	89 f8                	mov    eax,edi
c00031a9:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031ac:	e8 99 f0 ff ff       	call   c000224a <move_window>
c00031b1:	85 c0                	test   eax,eax
c00031b3:	75 a0                	jne    c0003155 <get_fat.isra.2+0x51>
c00031b5:	01 f6                	add    esi,esi
c00031b7:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031bd:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031c1:	e8 65 eb ff ff       	call   c0001d2b <ld_word>
c00031c6:	0f b7 c8             	movzx  ecx,ax
c00031c9:	eb 2e                	jmp    c00031f9 <get_fat.isra.2+0xf5>
c00031cb:	c1 ea 07             	shr    edx,0x7
c00031ce:	89 f8                	mov    eax,edi
c00031d0:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d3:	e8 72 f0 ff ff       	call   c000224a <move_window>
c00031d8:	85 c0                	test   eax,eax
c00031da:	0f 85 75 ff ff ff    	jne    c0003155 <get_fat.isra.2+0x51>
c00031e0:	c1 e6 02             	shl    esi,0x2
c00031e3:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031e9:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ed:	e8 46 eb ff ff       	call   c0001d38 <ld_dword>
c00031f2:	25 ff ff ff 0f       	and    eax,0xfffffff
c00031f7:	89 c1                	mov    ecx,eax
c00031f9:	83 c4 0c             	add    esp,0xc
c00031fc:	89 c8                	mov    eax,ecx
c00031fe:	5b                   	pop    ebx
c00031ff:	5e                   	pop    esi
c0003200:	5f                   	pop    edi
c0003201:	5d                   	pop    ebp
c0003202:	c3                   	ret    
c0003203:	89 c8                	mov    eax,ecx
c0003205:	c3                   	ret    

c0003206 <dir_sdi>:
c0003206:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000320c:	0f 87 b6 00 00 00    	ja     c00032c8 <dir_sdi+0xc2>
c0003212:	55                   	push   ebp
c0003213:	57                   	push   edi
c0003214:	56                   	push   esi
c0003215:	53                   	push   ebx
c0003216:	89 d3                	mov    ebx,edx
c0003218:	83 ec 1c             	sub    esp,0x1c
c000321b:	f6 c2 1f             	test   dl,0x1f
c000321e:	74 0a                	je     c000322a <dir_sdi+0x24>
c0003220:	b8 02 00 00 00       	mov    eax,0x2
c0003225:	e9 96 00 00 00       	jmp    c00032c0 <dir_sdi+0xba>
c000322a:	89 c6                	mov    esi,eax
c000322c:	8b 38                	mov    edi,DWORD PTR [eax]
c000322e:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003231:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003234:	85 c9                	test   ecx,ecx
c0003236:	75 23                	jne    c000325b <dir_sdi+0x55>
c0003238:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000323b:	76 07                	jbe    c0003244 <dir_sdi+0x3e>
c000323d:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003240:	85 c0                	test   eax,eax
c0003242:	75 15                	jne    c0003259 <dir_sdi+0x53>
c0003244:	89 da                	mov    edx,ebx
c0003246:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000324a:	c1 ea 05             	shr    edx,0x5
c000324d:	39 c2                	cmp    edx,eax
c000324f:	73 cf                	jae    c0003220 <dir_sdi+0x1a>
c0003251:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003254:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003257:	eb 3d                	jmp    c0003296 <dir_sdi+0x90>
c0003259:	89 c1                	mov    ecx,eax
c000325b:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000325f:	c1 e5 09             	shl    ebp,0x9
c0003262:	89 ca                	mov    edx,ecx
c0003264:	39 eb                	cmp    ebx,ebp
c0003266:	72 1c                	jb     c0003284 <dir_sdi+0x7e>
c0003268:	8b 06                	mov    eax,DWORD PTR [esi]
c000326a:	e8 95 fe ff ff       	call   c0003104 <get_fat.isra.2>
c000326f:	89 c1                	mov    ecx,eax
c0003271:	83 f8 ff             	cmp    eax,0xffffffff
c0003274:	74 45                	je     c00032bb <dir_sdi+0xb5>
c0003276:	83 f8 01             	cmp    eax,0x1
c0003279:	76 a5                	jbe    c0003220 <dir_sdi+0x1a>
c000327b:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000327e:	76 a0                	jbe    c0003220 <dir_sdi+0x1a>
c0003280:	29 eb                	sub    ebx,ebp
c0003282:	eb de                	jmp    c0003262 <dir_sdi+0x5c>
c0003284:	89 f8                	mov    eax,edi
c0003286:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000328a:	e8 e2 ec ff ff       	call   c0001f71 <clst2sect>
c000328f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003293:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003296:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003299:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c000329c:	85 d2                	test   edx,edx
c000329e:	74 80                	je     c0003220 <dir_sdi+0x1a>
c00032a0:	89 d8                	mov    eax,ebx
c00032a2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032a8:	c1 e8 09             	shr    eax,0x9
c00032ab:	01 d0                	add    eax,edx
c00032ad:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032b0:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032b4:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032b7:	31 c0                	xor    eax,eax
c00032b9:	eb 05                	jmp    c00032c0 <dir_sdi+0xba>
c00032bb:	b8 01 00 00 00       	mov    eax,0x1
c00032c0:	83 c4 1c             	add    esp,0x1c
c00032c3:	5b                   	pop    ebx
c00032c4:	5e                   	pop    esi
c00032c5:	5f                   	pop    edi
c00032c6:	5d                   	pop    ebp
c00032c7:	c3                   	ret    
c00032c8:	b8 02 00 00 00       	mov    eax,0x2
c00032cd:	c3                   	ret    

c00032ce <create_chain>:
c00032ce:	55                   	push   ebp
c00032cf:	89 c5                	mov    ebp,eax
c00032d1:	57                   	push   edi
c00032d2:	89 d7                	mov    edi,edx
c00032d4:	56                   	push   esi
c00032d5:	53                   	push   ebx
c00032d6:	83 ec 1c             	sub    esp,0x1c
c00032d9:	85 d2                	test   edx,edx
c00032db:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032dd:	75 0e                	jne    c00032ed <create_chain+0x1f>
c00032df:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00032e2:	85 c9                	test   ecx,ecx
c00032e4:	74 32                	je     c0003318 <create_chain+0x4a>
c00032e6:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00032e9:	77 32                	ja     c000331d <create_chain+0x4f>
c00032eb:	eb 2b                	jmp    c0003318 <create_chain+0x4a>
c00032ed:	89 d8                	mov    eax,ebx
c00032ef:	e8 10 fe ff ff       	call   c0003104 <get_fat.isra.2>
c00032f4:	83 f8 01             	cmp    eax,0x1
c00032f7:	77 0a                	ja     c0003303 <create_chain+0x35>
c00032f9:	b8 01 00 00 00       	mov    eax,0x1
c00032fe:	e9 f9 00 00 00       	jmp    c00033fc <create_chain+0x12e>
c0003303:	83 f8 ff             	cmp    eax,0xffffffff
c0003306:	0f 84 ed 00 00 00    	je     c00033f9 <create_chain+0x12b>
c000330c:	89 f9                	mov    ecx,edi
c000330e:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c0003311:	76 0a                	jbe    c000331d <create_chain+0x4f>
c0003313:	e9 e4 00 00 00       	jmp    c00033fc <create_chain+0x12e>
c0003318:	b9 01 00 00 00       	mov    ecx,0x1
c000331d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0003321:	75 07                	jne    c000332a <create_chain+0x5c>
c0003323:	31 c0                	xor    eax,eax
c0003325:	e9 d2 00 00 00       	jmp    c00033fc <create_chain+0x12e>
c000332a:	39 f9                	cmp    ecx,edi
c000332c:	75 4a                	jne    c0003378 <create_chain+0xaa>
c000332e:	8d 71 01             	lea    esi,[ecx+0x1]
c0003331:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c0003334:	77 05                	ja     c000333b <create_chain+0x6d>
c0003336:	be 02 00 00 00       	mov    esi,0x2
c000333b:	89 f2                	mov    edx,esi
c000333d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003340:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003344:	e8 bb fd ff ff       	call   c0003104 <get_fat.isra.2>
c0003349:	83 f8 01             	cmp    eax,0x1
c000334c:	0f 84 aa 00 00 00    	je     c00033fc <create_chain+0x12e>
c0003352:	83 f8 ff             	cmp    eax,0xffffffff
c0003355:	0f 84 a1 00 00 00    	je     c00033fc <create_chain+0x12e>
c000335b:	85 c0                	test   eax,eax
c000335d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003361:	74 11                	je     c0003374 <create_chain+0xa6>
c0003363:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003366:	83 f8 01             	cmp    eax,0x1
c0003369:	76 0d                	jbe    c0003378 <create_chain+0xaa>
c000336b:	39 43 18             	cmp    DWORD PTR [ebx+0x18],eax
c000336e:	76 08                	jbe    c0003378 <create_chain+0xaa>
c0003370:	89 c1                	mov    ecx,eax
c0003372:	eb 04                	jmp    c0003378 <create_chain+0xaa>
c0003374:	85 f6                	test   esi,esi
c0003376:	75 3b                	jne    c00033b3 <create_chain+0xe5>
c0003378:	89 ce                	mov    esi,ecx
c000337a:	46                   	inc    esi
c000337b:	39 73 18             	cmp    DWORD PTR [ebx+0x18],esi
c000337e:	77 0a                	ja     c000338a <create_chain+0xbc>
c0003380:	83 f9 01             	cmp    ecx,0x1
c0003383:	76 9e                	jbe    c0003323 <create_chain+0x55>
c0003385:	be 02 00 00 00       	mov    esi,0x2
c000338a:	89 f2                	mov    edx,esi
c000338c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000338f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003393:	e8 6c fd ff ff       	call   c0003104 <get_fat.isra.2>
c0003398:	85 c0                	test   eax,eax
c000339a:	74 17                	je     c00033b3 <create_chain+0xe5>
c000339c:	83 f8 01             	cmp    eax,0x1
c000339f:	74 5b                	je     c00033fc <create_chain+0x12e>
c00033a1:	83 f8 ff             	cmp    eax,0xffffffff
c00033a4:	74 56                	je     c00033fc <create_chain+0x12e>
c00033a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033aa:	39 ce                	cmp    esi,ecx
c00033ac:	75 cc                	jne    c000337a <create_chain+0xac>
c00033ae:	e9 70 ff ff ff       	jmp    c0003323 <create_chain+0x55>
c00033b3:	83 c9 ff             	or     ecx,0xffffffff
c00033b6:	89 f2                	mov    edx,esi
c00033b8:	89 d8                	mov    eax,ebx
c00033ba:	e8 e3 f2 ff ff       	call   c00026a2 <put_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	75 0f                	jne    c00033d2 <create_chain+0x104>
c00033c3:	85 ff                	test   edi,edi
c00033c5:	74 0b                	je     c00033d2 <create_chain+0x104>
c00033c7:	89 f1                	mov    ecx,esi
c00033c9:	89 fa                	mov    edx,edi
c00033cb:	89 d8                	mov    eax,ebx
c00033cd:	e8 d0 f2 ff ff       	call   c00026a2 <put_fat>
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 1c                	jne    c00033f2 <create_chain+0x124>
c00033d6:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00033d9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00033dc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00033df:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e2:	39 d0                	cmp    eax,edx
c00033e4:	77 04                	ja     c00033ea <create_chain+0x11c>
c00033e6:	48                   	dec    eax
c00033e7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00033ea:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	eb 0a                	jmp    c00033fc <create_chain+0x12e>
c00033f2:	48                   	dec    eax
c00033f3:	0f 85 00 ff ff ff    	jne    c00032f9 <create_chain+0x2b>
c00033f9:	83 c8 ff             	or     eax,0xffffffff
c00033fc:	83 c4 1c             	add    esp,0x1c
c00033ff:	5b                   	pop    ebx
c0003400:	5e                   	pop    esi
c0003401:	5f                   	pop    edi
c0003402:	5d                   	pop    ebp
c0003403:	c3                   	ret    

c0003404 <remove_chain>:
c0003404:	55                   	push   ebp
c0003405:	57                   	push   edi
c0003406:	56                   	push   esi
c0003407:	89 d6                	mov    esi,edx
c0003409:	53                   	push   ebx
c000340a:	83 ec 0c             	sub    esp,0xc
c000340d:	83 fa 01             	cmp    edx,0x1
c0003410:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003412:	76 65                	jbe    c0003479 <remove_chain+0x75>
c0003414:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003417:	76 60                	jbe    c0003479 <remove_chain+0x75>
c0003419:	89 c5                	mov    ebp,eax
c000341b:	89 ca                	mov    edx,ecx
c000341d:	85 c9                	test   ecx,ecx
c000341f:	74 0e                	je     c000342f <remove_chain+0x2b>
c0003421:	83 c9 ff             	or     ecx,0xffffffff
c0003424:	89 d8                	mov    eax,ebx
c0003426:	e8 77 f2 ff ff       	call   c00026a2 <put_fat>
c000342b:	85 c0                	test   eax,eax
c000342d:	75 56                	jne    c0003485 <remove_chain+0x81>
c000342f:	89 f2                	mov    edx,esi
c0003431:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003434:	e8 cb fc ff ff       	call   c0003104 <get_fat.isra.2>
c0003439:	89 c7                	mov    edi,eax
c000343b:	85 c0                	test   eax,eax
c000343d:	75 04                	jne    c0003443 <remove_chain+0x3f>
c000343f:	31 c0                	xor    eax,eax
c0003441:	eb 42                	jmp    c0003485 <remove_chain+0x81>
c0003443:	83 f8 01             	cmp    eax,0x1
c0003446:	74 31                	je     c0003479 <remove_chain+0x75>
c0003448:	83 f8 ff             	cmp    eax,0xffffffff
c000344b:	74 33                	je     c0003480 <remove_chain+0x7c>
c000344d:	31 c9                	xor    ecx,ecx
c000344f:	89 f2                	mov    edx,esi
c0003451:	89 d8                	mov    eax,ebx
c0003453:	e8 4a f2 ff ff       	call   c00026a2 <put_fat>
c0003458:	85 c0                	test   eax,eax
c000345a:	75 29                	jne    c0003485 <remove_chain+0x81>
c000345c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000345f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003462:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003465:	39 c8                	cmp    eax,ecx
c0003467:	73 08                	jae    c0003471 <remove_chain+0x6d>
c0003469:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000346d:	40                   	inc    eax
c000346e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003471:	89 fe                	mov    esi,edi
c0003473:	39 fa                	cmp    edx,edi
c0003475:	77 b8                	ja     c000342f <remove_chain+0x2b>
c0003477:	eb c6                	jmp    c000343f <remove_chain+0x3b>
c0003479:	b8 02 00 00 00       	mov    eax,0x2
c000347e:	eb 05                	jmp    c0003485 <remove_chain+0x81>
c0003480:	b8 01 00 00 00       	mov    eax,0x1
c0003485:	83 c4 0c             	add    esp,0xc
c0003488:	5b                   	pop    ebx
c0003489:	5e                   	pop    esi
c000348a:	5f                   	pop    edi
c000348b:	5d                   	pop    ebp
c000348c:	c3                   	ret    

c000348d <dir_next>:
c000348d:	55                   	push   ebp
c000348e:	57                   	push   edi
c000348f:	56                   	push   esi
c0003490:	53                   	push   ebx
c0003491:	83 ec 1c             	sub    esp,0x1c
c0003494:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003497:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003499:	83 c7 20             	add    edi,0x20
c000349c:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034a2:	76 07                	jbe    c00034ab <dir_next+0x1e>
c00034a4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034ab:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034ae:	b9 04 00 00 00       	mov    ecx,0x4
c00034b3:	85 f6                	test   esi,esi
c00034b5:	0f 84 cd 00 00 00    	je     c0003588 <dir_next+0xfb>
c00034bb:	89 c3                	mov    ebx,eax
c00034bd:	89 f8                	mov    eax,edi
c00034bf:	25 ff 01 00 00       	and    eax,0x1ff
c00034c4:	89 d1                	mov    ecx,edx
c00034c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034ca:	0f 85 a8 00 00 00    	jne    c0003578 <dir_next+0xeb>
c00034d0:	46                   	inc    esi
c00034d1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034d4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034d7:	85 d2                	test   edx,edx
c00034d9:	75 22                	jne    c00034fd <dir_next+0x70>
c00034db:	89 fa                	mov    edx,edi
c00034dd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034e1:	c1 ea 05             	shr    edx,0x5
c00034e4:	39 c2                	cmp    edx,eax
c00034e6:	0f 82 8c 00 00 00    	jb     c0003578 <dir_next+0xeb>
c00034ec:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00034f3:	b9 04 00 00 00       	mov    ecx,0x4
c00034f8:	e9 8b 00 00 00       	jmp    c0003588 <dir_next+0xfb>
c00034fd:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003501:	89 fe                	mov    esi,edi
c0003503:	48                   	dec    eax
c0003504:	c1 ee 09             	shr    esi,0x9
c0003507:	85 f0                	test   eax,esi
c0003509:	75 6d                	jne    c0003578 <dir_next+0xeb>
c000350b:	89 e8                	mov    eax,ebp
c000350d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003511:	e8 ee fb ff ff       	call   c0003104 <get_fat.isra.2>
c0003516:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000351a:	89 c6                	mov    esi,eax
c000351c:	83 f8 01             	cmp    eax,0x1
c000351f:	77 07                	ja     c0003528 <dir_next+0x9b>
c0003521:	b9 02 00 00 00       	mov    ecx,0x2
c0003526:	eb 60                	jmp    c0003588 <dir_next+0xfb>
c0003528:	83 f8 ff             	cmp    eax,0xffffffff
c000352b:	75 07                	jne    c0003534 <dir_next+0xa7>
c000352d:	b9 01 00 00 00       	mov    ecx,0x1
c0003532:	eb 54                	jmp    c0003588 <dir_next+0xfb>
c0003534:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003537:	77 30                	ja     c0003569 <dir_next+0xdc>
c0003539:	85 c9                	test   ecx,ecx
c000353b:	74 af                	je     c00034ec <dir_next+0x5f>
c000353d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003540:	89 d8                	mov    eax,ebx
c0003542:	e8 87 fd ff ff       	call   c00032ce <create_chain>
c0003547:	b9 07 00 00 00       	mov    ecx,0x7
c000354c:	89 c6                	mov    esi,eax
c000354e:	85 c0                	test   eax,eax
c0003550:	74 36                	je     c0003588 <dir_next+0xfb>
c0003552:	83 f8 01             	cmp    eax,0x1
c0003555:	74 ca                	je     c0003521 <dir_next+0x94>
c0003557:	83 f8 ff             	cmp    eax,0xffffffff
c000355a:	74 d1                	je     c000352d <dir_next+0xa0>
c000355c:	89 c2                	mov    edx,eax
c000355e:	89 e8                	mov    eax,ebp
c0003560:	e8 8d f2 ff ff       	call   c00027f2 <dir_clear>
c0003565:	85 c0                	test   eax,eax
c0003567:	75 c4                	jne    c000352d <dir_next+0xa0>
c0003569:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000356c:	89 f2                	mov    edx,esi
c000356e:	89 e8                	mov    eax,ebp
c0003570:	e8 fc e9 ff ff       	call   c0001f71 <clst2sect>
c0003575:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003578:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000357c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000357f:	31 c9                	xor    ecx,ecx
c0003581:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003585:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003588:	83 c4 1c             	add    esp,0x1c
c000358b:	89 c8                	mov    eax,ecx
c000358d:	5b                   	pop    ebx
c000358e:	5e                   	pop    esi
c000358f:	5f                   	pop    edi
c0003590:	5d                   	pop    ebp
c0003591:	c3                   	ret    

c0003592 <dir_alloc>:
c0003592:	55                   	push   ebp
c0003593:	89 c5                	mov    ebp,eax
c0003595:	57                   	push   edi
c0003596:	89 d7                	mov    edi,edx
c0003598:	56                   	push   esi
c0003599:	31 d2                	xor    edx,edx
c000359b:	53                   	push   ebx
c000359c:	83 ec 0c             	sub    esp,0xc
c000359f:	8b 30                	mov    esi,DWORD PTR [eax]
c00035a1:	e8 60 fc ff ff       	call   c0003206 <dir_sdi>
c00035a6:	85 c0                	test   eax,eax
c00035a8:	75 37                	jne    c00035e1 <dir_alloc+0x4f>
c00035aa:	31 db                	xor    ebx,ebx
c00035ac:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035af:	89 f0                	mov    eax,esi
c00035b1:	e8 94 ec ff ff       	call   c000224a <move_window>
c00035b6:	85 c0                	test   eax,eax
c00035b8:	75 27                	jne    c00035e1 <dir_alloc+0x4f>
c00035ba:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035bd:	8a 12                	mov    dl,BYTE PTR [edx]
c00035bf:	80 fa e5             	cmp    dl,0xe5
c00035c2:	74 04                	je     c00035c8 <dir_alloc+0x36>
c00035c4:	84 d2                	test   dl,dl
c00035c6:	75 07                	jne    c00035cf <dir_alloc+0x3d>
c00035c8:	43                   	inc    ebx
c00035c9:	39 fb                	cmp    ebx,edi
c00035cb:	75 04                	jne    c00035d1 <dir_alloc+0x3f>
c00035cd:	eb 1c                	jmp    c00035eb <dir_alloc+0x59>
c00035cf:	31 db                	xor    ebx,ebx
c00035d1:	ba 01 00 00 00       	mov    edx,0x1
c00035d6:	89 e8                	mov    eax,ebp
c00035d8:	e8 b0 fe ff ff       	call   c000348d <dir_next>
c00035dd:	85 c0                	test   eax,eax
c00035df:	74 cb                	je     c00035ac <dir_alloc+0x1a>
c00035e1:	83 f8 04             	cmp    eax,0x4
c00035e4:	75 05                	jne    c00035eb <dir_alloc+0x59>
c00035e6:	b8 07 00 00 00       	mov    eax,0x7
c00035eb:	83 c4 0c             	add    esp,0xc
c00035ee:	5b                   	pop    ebx
c00035ef:	5e                   	pop    esi
c00035f0:	5f                   	pop    edi
c00035f1:	5d                   	pop    ebp
c00035f2:	c3                   	ret    

c00035f3 <dir_read>:
c00035f3:	55                   	push   ebp
c00035f4:	57                   	push   edi
c00035f5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00035fa:	56                   	push   esi
c00035fb:	be 04 00 00 00       	mov    esi,0x4
c0003600:	53                   	push   ebx
c0003601:	89 c3                	mov    ebx,eax
c0003603:	83 ec 1c             	sub    esp,0x1c
c0003606:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003608:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000360c:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003611:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003614:	85 d2                	test   edx,edx
c0003616:	0f 84 d8 00 00 00    	je     c00036f4 <dir_read+0x101>
c000361c:	89 e8                	mov    eax,ebp
c000361e:	e8 27 ec ff ff       	call   c000224a <move_window>
c0003623:	89 c6                	mov    esi,eax
c0003625:	85 c0                	test   eax,eax
c0003627:	0f 85 d2 00 00 00    	jne    c00036ff <dir_read+0x10c>
c000362d:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003630:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003632:	84 c9                	test   cl,cl
c0003634:	0f 84 c0 00 00 00    	je     c00036fa <dir_read+0x107>
c000363a:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000363d:	83 e0 3f             	and    eax,0x3f
c0003640:	80 f9 e5             	cmp    cl,0xe5
c0003643:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003647:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000364a:	0f 84 8a 00 00 00    	je     c00036da <dir_read+0xe7>
c0003650:	80 f9 2e             	cmp    cl,0x2e
c0003653:	0f 84 81 00 00 00    	je     c00036da <dir_read+0xe7>
c0003659:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000365d:	83 e0 1f             	and    eax,0x1f
c0003660:	83 f8 08             	cmp    eax,0x8
c0003663:	0f 94 c0             	sete   al
c0003666:	0f b6 c0             	movzx  eax,al
c0003669:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000366d:	75 6b                	jne    c00036da <dir_read+0xe7>
c000366f:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003674:	75 44                	jne    c00036ba <dir_read+0xc7>
c0003676:	f6 c1 40             	test   cl,0x40
c0003679:	74 12                	je     c000368d <dir_read+0x9a>
c000367b:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000367e:	83 e1 bf             	and    ecx,0xffffffbf
c0003681:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003685:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003688:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000368b:	eb 06                	jmp    c0003693 <dir_read+0xa0>
c000368d:	89 f8                	mov    eax,edi
c000368f:	38 c8                	cmp    al,cl
c0003691:	75 47                	jne    c00036da <dir_read+0xe7>
c0003693:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003697:	bf ff ff ff ff       	mov    edi,0xffffffff
c000369c:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000369f:	75 3e                	jne    c00036df <dir_read+0xec>
c00036a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036a4:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036a8:	e8 e1 e8 ff ff       	call   c0001f8e <pick_lfn>
c00036ad:	85 c0                	test   eax,eax
c00036af:	74 2e                	je     c00036df <dir_read+0xec>
c00036b1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036b5:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036b8:	eb 25                	jmp    c00036df <dir_read+0xec>
c00036ba:	89 f8                	mov    eax,edi
c00036bc:	84 c0                	test   al,al
c00036be:	75 11                	jne    c00036d1 <dir_read+0xde>
c00036c0:	89 d0                	mov    eax,edx
c00036c2:	e8 81 ea ff ff       	call   c0002148 <sum_sfn>
c00036c7:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036cb:	75 04                	jne    c00036d1 <dir_read+0xde>
c00036cd:	31 f6                	xor    esi,esi
c00036cf:	eb 35                	jmp    c0003706 <dir_read+0x113>
c00036d1:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036d8:	eb 2c                	jmp    c0003706 <dir_read+0x113>
c00036da:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036df:	31 d2                	xor    edx,edx
c00036e1:	89 d8                	mov    eax,ebx
c00036e3:	e8 a5 fd ff ff       	call   c000348d <dir_next>
c00036e8:	89 c6                	mov    esi,eax
c00036ea:	85 c0                	test   eax,eax
c00036ec:	0f 84 1f ff ff ff    	je     c0003611 <dir_read+0x1e>
c00036f2:	eb 0b                	jmp    c00036ff <dir_read+0x10c>
c00036f4:	85 f6                	test   esi,esi
c00036f6:	74 d5                	je     c00036cd <dir_read+0xda>
c00036f8:	eb 05                	jmp    c00036ff <dir_read+0x10c>
c00036fa:	be 04 00 00 00       	mov    esi,0x4
c00036ff:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003706:	83 c4 1c             	add    esp,0x1c
c0003709:	89 f0                	mov    eax,esi
c000370b:	5b                   	pop    ebx
c000370c:	5e                   	pop    esi
c000370d:	5f                   	pop    edi
c000370e:	5d                   	pop    ebp
c000370f:	c3                   	ret    

c0003710 <dir_remove>:
c0003710:	57                   	push   edi
c0003711:	56                   	push   esi
c0003712:	53                   	push   ebx
c0003713:	89 c3                	mov    ebx,eax
c0003715:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003718:	8b 30                	mov    esi,DWORD PTR [eax]
c000371a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000371d:	83 fa ff             	cmp    edx,0xffffffff
c0003720:	74 09                	je     c000372b <dir_remove+0x1b>
c0003722:	e8 df fa ff ff       	call   c0003206 <dir_sdi>
c0003727:	85 c0                	test   eax,eax
c0003729:	75 34                	jne    c000375f <dir_remove+0x4f>
c000372b:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000372e:	89 f0                	mov    eax,esi
c0003730:	e8 15 eb ff ff       	call   c000224a <move_window>
c0003735:	85 c0                	test   eax,eax
c0003737:	75 1c                	jne    c0003755 <dir_remove+0x45>
c0003739:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000373c:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000373f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003743:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003746:	73 17                	jae    c000375f <dir_remove+0x4f>
c0003748:	31 d2                	xor    edx,edx
c000374a:	89 d8                	mov    eax,ebx
c000374c:	e8 3c fd ff ff       	call   c000348d <dir_next>
c0003751:	85 c0                	test   eax,eax
c0003753:	74 d6                	je     c000372b <dir_remove+0x1b>
c0003755:	83 f8 04             	cmp    eax,0x4
c0003758:	75 05                	jne    c000375f <dir_remove+0x4f>
c000375a:	b8 02 00 00 00       	mov    eax,0x2
c000375f:	5b                   	pop    ebx
c0003760:	5e                   	pop    esi
c0003761:	5f                   	pop    edi
c0003762:	c3                   	ret    

c0003763 <dir_find>:
c0003763:	55                   	push   ebp
c0003764:	31 d2                	xor    edx,edx
c0003766:	57                   	push   edi
c0003767:	56                   	push   esi
c0003768:	53                   	push   ebx
c0003769:	89 c3                	mov    ebx,eax
c000376b:	83 ec 1c             	sub    esp,0x1c
c000376e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003770:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003774:	89 d8                	mov    eax,ebx
c0003776:	e8 8b fa ff ff       	call   c0003206 <dir_sdi>
c000377b:	89 c6                	mov    esi,eax
c000377d:	85 c0                	test   eax,eax
c000377f:	0f 85 02 01 00 00    	jne    c0003887 <dir_find+0x124>
c0003785:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000378c:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c0003791:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003796:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003799:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000379d:	e8 a8 ea ff ff       	call   c000224a <move_window>
c00037a2:	89 c6                	mov    esi,eax
c00037a4:	85 c0                	test   eax,eax
c00037a6:	0f 85 db 00 00 00    	jne    c0003887 <dir_find+0x124>
c00037ac:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037af:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037b2:	84 c9                	test   cl,cl
c00037b4:	0f 84 c8 00 00 00    	je     c0003882 <dir_find+0x11f>
c00037ba:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037bd:	88 d0                	mov    al,dl
c00037bf:	83 e0 3f             	and    eax,0x3f
c00037c2:	80 f9 e5             	cmp    cl,0xe5
c00037c5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037c8:	0f 84 93 00 00 00    	je     c0003861 <dir_find+0xfe>
c00037ce:	80 e2 08             	and    dl,0x8
c00037d1:	74 0a                	je     c00037dd <dir_find+0x7a>
c00037d3:	3c 0f                	cmp    al,0xf
c00037d5:	0f 85 86 00 00 00    	jne    c0003861 <dir_find+0xfe>
c00037db:	eb 04                	jmp    c00037e1 <dir_find+0x7e>
c00037dd:	3c 0f                	cmp    al,0xf
c00037df:	75 54                	jne    c0003835 <dir_find+0xd2>
c00037e1:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037e5:	0f 85 82 00 00 00    	jne    c000386d <dir_find+0x10a>
c00037eb:	f6 c1 40             	test   cl,0x40
c00037ee:	74 12                	je     c0003802 <dir_find+0x9f>
c00037f0:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c00037f3:	83 e1 bf             	and    ecx,0xffffffbf
c00037f6:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00037fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037fd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003800:	eb 06                	jmp    c0003808 <dir_find+0xa5>
c0003802:	89 f8                	mov    eax,edi
c0003804:	38 c8                	cmp    al,cl
c0003806:	75 60                	jne    c0003868 <dir_find+0x105>
c0003808:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000380c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003811:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003814:	75 57                	jne    c000386d <dir_find+0x10a>
c0003816:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000381a:	89 ea                	mov    edx,ebp
c000381c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0003820:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003823:	e8 86 f3 ff ff       	call   c0002bae <cmp_lfn>
c0003828:	85 c0                	test   eax,eax
c000382a:	74 41                	je     c000386d <dir_find+0x10a>
c000382c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003830:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003833:	eb 38                	jmp    c000386d <dir_find+0x10a>
c0003835:	89 f8                	mov    eax,edi
c0003837:	84 c0                	test   al,al
c0003839:	75 0d                	jne    c0003848 <dir_find+0xe5>
c000383b:	89 e8                	mov    eax,ebp
c000383d:	e8 06 e9 ff ff       	call   c0002148 <sum_sfn>
c0003842:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003846:	74 3f                	je     c0003887 <dir_find+0x124>
c0003848:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000384c:	75 13                	jne    c0003861 <dir_find+0xfe>
c000384e:	8d 53 20             	lea    edx,[ebx+0x20]
c0003851:	b9 0b 00 00 00       	mov    ecx,0xb
c0003856:	89 e8                	mov    eax,ebp
c0003858:	e8 1a e5 ff ff       	call   c0001d77 <mem_cmp>
c000385d:	85 c0                	test   eax,eax
c000385f:	74 26                	je     c0003887 <dir_find+0x124>
c0003861:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003868:	bf ff ff ff ff       	mov    edi,0xffffffff
c000386d:	31 d2                	xor    edx,edx
c000386f:	89 d8                	mov    eax,ebx
c0003871:	e8 17 fc ff ff       	call   c000348d <dir_next>
c0003876:	89 c6                	mov    esi,eax
c0003878:	85 c0                	test   eax,eax
c000387a:	0f 84 16 ff ff ff    	je     c0003796 <dir_find+0x33>
c0003880:	eb 05                	jmp    c0003887 <dir_find+0x124>
c0003882:	be 04 00 00 00       	mov    esi,0x4
c0003887:	83 c4 1c             	add    esp,0x1c
c000388a:	89 f0                	mov    eax,esi
c000388c:	5b                   	pop    ebx
c000388d:	5e                   	pop    esi
c000388e:	5f                   	pop    edi
c000388f:	5d                   	pop    ebp
c0003890:	c3                   	ret    

c0003891 <follow_path>:
c0003891:	56                   	push   esi
c0003892:	53                   	push   ebx
c0003893:	89 c3                	mov    ebx,eax
c0003895:	83 ec 14             	sub    esp,0x14
c0003898:	8b 30                	mov    esi,DWORD PTR [eax]
c000389a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000389e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038a2:	8a 10                	mov    dl,BYTE PTR [eax]
c00038a4:	80 fa 2f             	cmp    dl,0x2f
c00038a7:	75 07                	jne    c00038b0 <follow_path+0x1f>
c00038a9:	40                   	inc    eax
c00038aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038ae:	eb ee                	jmp    c000389e <follow_path+0xd>
c00038b0:	80 fa 5c             	cmp    dl,0x5c
c00038b3:	74 f4                	je     c00038a9 <follow_path+0x18>
c00038b5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038bc:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038bf:	77 3e                	ja     c00038ff <follow_path+0x6e>
c00038c1:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038c5:	31 d2                	xor    edx,edx
c00038c7:	89 d8                	mov    eax,ebx
c00038c9:	e8 38 f9 ff ff       	call   c0003206 <dir_sdi>
c00038ce:	eb 4f                	jmp    c000391f <follow_path+0x8e>
c00038d0:	89 d8                	mov    eax,ebx
c00038d2:	e8 8c fe ff ff       	call   c0003763 <dir_find>
c00038d7:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038da:	85 c0                	test   eax,eax
c00038dc:	75 32                	jne    c0003910 <follow_path+0x7f>
c00038de:	80 e2 04             	and    dl,0x4
c00038e1:	75 3c                	jne    c000391f <follow_path+0x8e>
c00038e3:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038e7:	74 31                	je     c000391a <follow_path+0x89>
c00038e9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038ec:	25 ff 01 00 00       	and    eax,0x1ff
c00038f1:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c00038f5:	8a 06                	mov    al,BYTE PTR [esi]
c00038f7:	e8 b7 f7 ff ff       	call   c00030b3 <ld_clust.isra.0>
c00038fc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00038ff:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003903:	89 d8                	mov    eax,ebx
c0003905:	e8 e3 ef ff ff       	call   c00028ed <create_name>
c000390a:	85 c0                	test   eax,eax
c000390c:	74 c2                	je     c00038d0 <follow_path+0x3f>
c000390e:	eb 0f                	jmp    c000391f <follow_path+0x8e>
c0003910:	83 f8 04             	cmp    eax,0x4
c0003913:	75 0a                	jne    c000391f <follow_path+0x8e>
c0003915:	80 e2 04             	and    dl,0x4
c0003918:	75 05                	jne    c000391f <follow_path+0x8e>
c000391a:	b8 05 00 00 00       	mov    eax,0x5
c000391f:	83 c4 14             	add    esp,0x14
c0003922:	5b                   	pop    ebx
c0003923:	5e                   	pop    esi
c0003924:	c3                   	ret    

c0003925 <dir_register>:
c0003925:	55                   	push   ebp
c0003926:	57                   	push   edi
c0003927:	56                   	push   esi
c0003928:	be 06 00 00 00       	mov    esi,0x6
c000392d:	53                   	push   ebx
c000392e:	83 ec 2c             	sub    esp,0x2c
c0003931:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003935:	0f 85 65 01 00 00    	jne    c0003aa0 <dir_register+0x17b>
c000393b:	8b 38                	mov    edi,DWORD PTR [eax]
c000393d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003945:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003948:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000394c:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003951:	74 06                	je     c0003959 <dir_register+0x34>
c0003953:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003957:	eb ef                	jmp    c0003948 <dir_register+0x23>
c0003959:	89 c3                	mov    ebx,eax
c000395b:	8d 40 20             	lea    eax,[eax+0x20]
c000395e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003962:	89 c2                	mov    edx,eax
c0003964:	b9 0c 00 00 00       	mov    ecx,0xc
c0003969:	8d 44 24 14          	lea    eax,[esp+0x14]
c000396d:	e8 e5 e3 ff ff       	call   c0001d57 <mem_cpy>
c0003972:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003977:	74 48                	je     c00039c1 <dir_register+0x9c>
c0003979:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000397d:	bd 01 00 00 00       	mov    ebp,0x1
c0003982:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003985:	55                   	push   ebp
c0003986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000398a:	8d 54 24 18          	lea    edx,[esp+0x18]
c000398e:	e8 f9 e6 ff ff       	call   c000208c <gen_numname>
c0003993:	58                   	pop    eax
c0003994:	89 d8                	mov    eax,ebx
c0003996:	e8 c8 fd ff ff       	call   c0003763 <dir_find>
c000399b:	89 c6                	mov    esi,eax
c000399d:	85 c0                	test   eax,eax
c000399f:	75 10                	jne    c00039b1 <dir_register+0x8c>
c00039a1:	45                   	inc    ebp
c00039a2:	83 fd 64             	cmp    ebp,0x64
c00039a5:	75 db                	jne    c0003982 <dir_register+0x5d>
c00039a7:	be 07 00 00 00       	mov    esi,0x7
c00039ac:	e9 ef 00 00 00       	jmp    c0003aa0 <dir_register+0x17b>
c00039b1:	83 f8 04             	cmp    eax,0x4
c00039b4:	0f 85 e6 00 00 00    	jne    c0003aa0 <dir_register+0x17b>
c00039ba:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039be:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039c1:	bd 01 00 00 00       	mov    ebp,0x1
c00039c6:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039cb:	74 13                	je     c00039e0 <dir_register+0xbb>
c00039cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039d1:	b9 0d 00 00 00       	mov    ecx,0xd
c00039d6:	83 c0 0c             	add    eax,0xc
c00039d9:	31 d2                	xor    edx,edx
c00039db:	f7 f1                	div    ecx
c00039dd:	8d 68 01             	lea    ebp,[eax+0x1]
c00039e0:	89 ea                	mov    edx,ebp
c00039e2:	89 d8                	mov    eax,ebx
c00039e4:	e8 a9 fb ff ff       	call   c0003592 <dir_alloc>
c00039e9:	89 c6                	mov    esi,eax
c00039eb:	85 c0                	test   eax,eax
c00039ed:	0f 85 ad 00 00 00    	jne    c0003aa0 <dir_register+0x17b>
c00039f3:	4d                   	dec    ebp
c00039f4:	74 6a                	je     c0003a60 <dir_register+0x13b>
c00039f6:	89 e8                	mov    eax,ebp
c00039f8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00039fb:	c1 e0 05             	shl    eax,0x5
c00039fe:	29 c2                	sub    edx,eax
c0003a00:	89 d8                	mov    eax,ebx
c0003a02:	e8 ff f7 ff ff       	call   c0003206 <dir_sdi>
c0003a07:	89 c6                	mov    esi,eax
c0003a09:	85 c0                	test   eax,eax
c0003a0b:	0f 85 8f 00 00 00    	jne    c0003aa0 <dir_register+0x17b>
c0003a11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a15:	e8 2e e7 ff ff       	call   c0002148 <sum_sfn>
c0003a1a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a1e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a21:	89 f8                	mov    eax,edi
c0003a23:	e8 22 e8 ff ff       	call   c000224a <move_window>
c0003a28:	89 c6                	mov    esi,eax
c0003a2a:	85 c0                	test   eax,eax
c0003a2c:	75 72                	jne    c0003aa0 <dir_register+0x17b>
c0003a2e:	83 ec 0c             	sub    esp,0xc
c0003a31:	89 e8                	mov    eax,ebp
c0003a33:	0f b6 c8             	movzx  ecx,al
c0003a36:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a3b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a3e:	52                   	push   edx
c0003a3f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a42:	e8 c1 e5 ff ff       	call   c0002008 <put_lfn>
c0003a47:	31 d2                	xor    edx,edx
c0003a49:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a4d:	89 d8                	mov    eax,ebx
c0003a4f:	e8 39 fa ff ff       	call   c000348d <dir_next>
c0003a54:	83 c4 10             	add    esp,0x10
c0003a57:	89 c6                	mov    esi,eax
c0003a59:	85 c0                	test   eax,eax
c0003a5b:	75 43                	jne    c0003aa0 <dir_register+0x17b>
c0003a5d:	4d                   	dec    ebp
c0003a5e:	75 be                	jne    c0003a1e <dir_register+0xf9>
c0003a60:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a63:	89 f8                	mov    eax,edi
c0003a65:	e8 e0 e7 ff ff       	call   c000224a <move_window>
c0003a6a:	89 c6                	mov    esi,eax
c0003a6c:	85 c0                	test   eax,eax
c0003a6e:	75 30                	jne    c0003aa0 <dir_register+0x17b>
c0003a70:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a73:	b9 20 00 00 00       	mov    ecx,0x20
c0003a78:	31 d2                	xor    edx,edx
c0003a7a:	e8 ed e2 ff ff       	call   c0001d6c <mem_set>
c0003a7f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a86:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a8b:	e8 c7 e2 ff ff       	call   c0001d57 <mem_cpy>
c0003a90:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003a93:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a96:	83 e0 18             	and    eax,0x18
c0003a99:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003a9c:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003aa0:	83 c4 2c             	add    esp,0x2c
c0003aa3:	89 f0                	mov    eax,esi
c0003aa5:	5b                   	pop    ebx
c0003aa6:	5e                   	pop    esi
c0003aa7:	5f                   	pop    edi
c0003aa8:	5d                   	pop    ebp
c0003aa9:	c3                   	ret    

c0003aaa <f_mount>:
c0003aaa:	53                   	push   ebx
c0003aab:	83 ec 18             	sub    esp,0x18
c0003aae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ab2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ab6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003abe:	e8 97 e6 ff ff       	call   c000215a <get_ldnumber>
c0003ac3:	89 c2                	mov    edx,eax
c0003ac5:	b8 0b 00 00 00       	mov    eax,0xb
c0003aca:	85 d2                	test   edx,edx
c0003acc:	78 39                	js     c0003b07 <f_mount+0x5d>
c0003ace:	8b 04 95 a0 34 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcb60]
c0003ad5:	85 c0                	test   eax,eax
c0003ad7:	74 03                	je     c0003adc <f_mount+0x32>
c0003ad9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003adc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003ae0:	85 c0                	test   eax,eax
c0003ae2:	74 03                	je     c0003ae7 <f_mount+0x3d>
c0003ae4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003ae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003aeb:	89 04 95 a0 34 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcb60],eax
c0003af2:	31 c0                	xor    eax,eax
c0003af4:	84 db                	test   bl,bl
c0003af6:	74 0f                	je     c0003b07 <f_mount+0x5d>
c0003af8:	31 c9                	xor    ecx,ecx
c0003afa:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003afe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b02:	e8 98 e8 ff ff       	call   c000239f <mount_volume>
c0003b07:	83 c4 18             	add    esp,0x18
c0003b0a:	5b                   	pop    ebx
c0003b0b:	c3                   	ret    

c0003b0c <f_open>:
c0003b0c:	55                   	push   ebp
c0003b0d:	b8 09 00 00 00       	mov    eax,0x9
c0003b12:	57                   	push   edi
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	83 ec 5c             	sub    esp,0x5c
c0003b18:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b1c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b20:	85 db                	test   ebx,ebx
c0003b22:	0f 84 a7 02 00 00    	je     c0003dcf <f_open+0x2c3>
c0003b28:	89 fe                	mov    esi,edi
c0003b2a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b2e:	83 e6 3f             	and    esi,0x3f
c0003b31:	89 f0                	mov    eax,esi
c0003b33:	0f b6 c8             	movzx  ecx,al
c0003b36:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b3a:	e8 60 e8 ff ff       	call   c000239f <mount_volume>
c0003b3f:	85 c0                	test   eax,eax
c0003b41:	0f 85 82 02 00 00    	jne    c0003dc9 <f_open+0x2bd>
c0003b47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b4b:	83 ec 0c             	sub    esp,0xc
c0003b4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b52:	68 00 02 00 00       	push   0x200
c0003b57:	e8 04 1f 00 00       	call   c0005a60 <ff_memalloc>
c0003b5c:	89 c5                	mov    ebp,eax
c0003b5e:	83 c4 10             	add    esp,0x10
c0003b61:	b8 11 00 00 00       	mov    eax,0x11
c0003b66:	85 ed                	test   ebp,ebp
c0003b68:	0f 84 61 02 00 00    	je     c0003dcf <f_open+0x2c3>
c0003b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b72:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b76:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b79:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b7d:	e8 0f fd ff ff       	call   c0003891 <follow_path>
c0003b82:	85 c0                	test   eax,eax
c0003b84:	75 0c                	jne    c0003b92 <f_open+0x86>
c0003b86:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b8b:	79 05                	jns    c0003b92 <f_open+0x86>
c0003b8d:	b8 06 00 00 00       	mov    eax,0x6
c0003b92:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003b98:	0f 84 de 00 00 00    	je     c0003c7c <f_open+0x170>
c0003b9e:	85 c0                	test   eax,eax
c0003ba0:	74 1e                	je     c0003bc0 <f_open+0xb4>
c0003ba2:	83 f8 04             	cmp    eax,0x4
c0003ba5:	0f 85 06 02 00 00    	jne    c0003db1 <f_open+0x2a5>
c0003bab:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003baf:	83 ce 08             	or     esi,0x8
c0003bb2:	e8 6e fd ff ff       	call   c0003925 <dir_register>
c0003bb7:	85 c0                	test   eax,eax
c0003bb9:	74 2f                	je     c0003bea <f_open+0xde>
c0003bbb:	e9 f1 01 00 00       	jmp    c0003db1 <f_open+0x2a5>
c0003bc0:	b8 07 00 00 00       	mov    eax,0x7
c0003bc5:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bca:	0f 85 e1 01 00 00    	jne    c0003db1 <f_open+0x2a5>
c0003bd0:	b8 08 00 00 00       	mov    eax,0x8
c0003bd5:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bdb:	0f 85 d0 01 00 00    	jne    c0003db1 <f_open+0x2a5>
c0003be1:	83 e7 08             	and    edi,0x8
c0003be4:	0f 84 bf 00 00 00    	je     c0003ca9 <f_open+0x19d>
c0003bea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003bee:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bf2:	89 ca                	mov    edx,ecx
c0003bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003bf8:	8a 00                	mov    al,BYTE PTR [eax]
c0003bfa:	e8 b4 f4 ff ff       	call   c00030b3 <ld_clust.isra.0>
c0003bff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c03:	89 c7                	mov    edi,eax
c0003c05:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c0a:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c0d:	e8 42 e1 ff ff       	call   c0001d54 <st_dword>
c0003c12:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c16:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c1a:	31 c9                	xor    ecx,ecx
c0003c1c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c24:	e8 b3 f4 ff ff       	call   c00030dc <st_clust.isra.1>
c0003c29:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c2d:	83 c0 1c             	add    eax,0x1c
c0003c30:	31 d2                	xor    edx,edx
c0003c32:	e8 1d e1 ff ff       	call   c0001d54 <st_dword>
c0003c37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c3b:	85 ff                	test   edi,edi
c0003c3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c41:	74 66                	je     c0003ca9 <f_open+0x19d>
c0003c43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c47:	31 c9                	xor    ecx,ecx
c0003c49:	89 fa                	mov    edx,edi
c0003c4b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c52:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c56:	e8 a9 f7 ff ff       	call   c0003404 <remove_chain>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	0f 85 4e 01 00 00    	jne    c0003db1 <f_open+0x2a5>
c0003c63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6b:	e8 da e5 ff ff       	call   c000224a <move_window>
c0003c70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c74:	4f                   	dec    edi
c0003c75:	85 c0                	test   eax,eax
c0003c77:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c7a:	eb 27                	jmp    c0003ca3 <f_open+0x197>
c0003c7c:	85 c0                	test   eax,eax
c0003c7e:	0f 85 2d 01 00 00    	jne    c0003db1 <f_open+0x2a5>
c0003c84:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c88:	b8 04 00 00 00       	mov    eax,0x4
c0003c8d:	f6 c2 10             	test   dl,0x10
c0003c90:	0f 85 1b 01 00 00    	jne    c0003db1 <f_open+0x2a5>
c0003c96:	83 e7 02             	and    edi,0x2
c0003c99:	74 0e                	je     c0003ca9 <f_open+0x19d>
c0003c9b:	b8 07 00 00 00       	mov    eax,0x7
c0003ca0:	80 e2 01             	and    dl,0x1
c0003ca3:	0f 85 08 01 00 00    	jne    c0003db1 <f_open+0x2a5>
c0003ca9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003caf:	74 03                	je     c0003cb4 <f_open+0x1a8>
c0003cb1:	83 ce 40             	or     esi,0x40
c0003cb4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cb8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003cbc:	89 fa                	mov    edx,edi
c0003cbe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cc2:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cc5:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cc8:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003ccb:	8a 01                	mov    al,BYTE PTR [ecx]
c0003ccd:	e8 e1 f3 ff ff       	call   c00030b3 <ld_clust.isra.0>
c0003cd2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003cd5:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003cd8:	e8 5b e0 ff ff       	call   c0001d38 <ld_dword>
c0003cdd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ce1:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003ce3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003ce6:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cea:	31 d2                	xor    edx,edx
c0003cec:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003cf0:	89 f0                	mov    eax,esi
c0003cf2:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003cf5:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003cf9:	8d 43 28             	lea    eax,[ebx+0x28]
c0003cfc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d03:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d0a:	b9 00 02 00 00       	mov    ecx,0x200
c0003d0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d13:	e8 54 e0 ff ff       	call   c0001d6c <mem_set>
c0003d18:	83 e6 20             	and    esi,0x20
c0003d1b:	75 07                	jne    c0003d24 <f_open+0x218>
c0003d1d:	31 c0                	xor    eax,eax
c0003d1f:	e9 8d 00 00 00       	jmp    c0003db1 <f_open+0x2a5>
c0003d24:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d27:	85 ff                	test   edi,edi
c0003d29:	74 f2                	je     c0003d1d <f_open+0x211>
c0003d2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d2f:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d32:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d35:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d39:	c1 e6 09             	shl    esi,0x9
c0003d3c:	31 c0                	xor    eax,eax
c0003d3e:	85 c0                	test   eax,eax
c0003d40:	75 23                	jne    c0003d65 <f_open+0x259>
c0003d42:	39 f7                	cmp    edi,esi
c0003d44:	76 1f                	jbe    c0003d65 <f_open+0x259>
c0003d46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d48:	e8 b7 f3 ff ff       	call   c0003104 <get_fat.isra.2>
c0003d4d:	89 c2                	mov    edx,eax
c0003d4f:	b8 02 00 00 00       	mov    eax,0x2
c0003d54:	83 fa 01             	cmp    edx,0x1
c0003d57:	76 08                	jbe    c0003d61 <f_open+0x255>
c0003d59:	31 c0                	xor    eax,eax
c0003d5b:	83 fa ff             	cmp    edx,0xffffffff
c0003d5e:	0f 94 c0             	sete   al
c0003d61:	29 f7                	sub    edi,esi
c0003d63:	eb d9                	jmp    c0003d3e <f_open+0x232>
c0003d65:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d68:	85 c0                	test   eax,eax
c0003d6a:	75 45                	jne    c0003db1 <f_open+0x2a5>
c0003d6c:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d72:	74 a9                	je     c0003d1d <f_open+0x211>
c0003d74:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d78:	89 f0                	mov    eax,esi
c0003d7a:	e8 f2 e1 ff ff       	call   c0001f71 <clst2sect>
c0003d7f:	89 c2                	mov    edx,eax
c0003d81:	b8 02 00 00 00       	mov    eax,0x2
c0003d86:	85 d2                	test   edx,edx
c0003d88:	74 27                	je     c0003db1 <f_open+0x2a5>
c0003d8a:	89 f9                	mov    ecx,edi
c0003d8c:	c1 e9 09             	shr    ecx,0x9
c0003d8f:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003d92:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003d95:	6a 01                	push   0x1
c0003d97:	50                   	push   eax
c0003d98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003d9c:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003da0:	50                   	push   eax
c0003da1:	e8 3a df ff ff       	call   c0001ce0 <disk_read>
c0003da6:	83 c4 10             	add    esp,0x10
c0003da9:	85 c0                	test   eax,eax
c0003dab:	0f 95 c0             	setne  al
c0003dae:	0f b6 c0             	movzx  eax,al
c0003db1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003db5:	83 ec 0c             	sub    esp,0xc
c0003db8:	55                   	push   ebp
c0003db9:	e8 ba 1c 00 00       	call   c0005a78 <ff_memfree>
c0003dbe:	83 c4 10             	add    esp,0x10
c0003dc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	74 06                	je     c0003dcf <f_open+0x2c3>
c0003dc9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003dcf:	83 c4 5c             	add    esp,0x5c
c0003dd2:	5b                   	pop    ebx
c0003dd3:	5e                   	pop    esi
c0003dd4:	5f                   	pop    edi
c0003dd5:	5d                   	pop    ebp
c0003dd6:	c3                   	ret    

c0003dd7 <f_read>:
c0003dd7:	55                   	push   ebp
c0003dd8:	57                   	push   edi
c0003dd9:	56                   	push   esi
c0003dda:	53                   	push   ebx
c0003ddb:	83 ec 2c             	sub    esp,0x2c
c0003dde:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003de2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003de6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003dea:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003dee:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003df4:	89 d8                	mov    eax,ebx
c0003df6:	e8 a5 e3 ff ff       	call   c00021a0 <validate>
c0003dfb:	89 c5                	mov    ebp,eax
c0003dfd:	85 c0                	test   eax,eax
c0003dff:	0f 85 c7 01 00 00    	jne    c0003fcc <f_read+0x1f5>
c0003e05:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e09:	85 ed                	test   ebp,ebp
c0003e0b:	0f 85 bb 01 00 00    	jne    c0003fcc <f_read+0x1f5>
c0003e11:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e15:	0f 84 ac 01 00 00    	je     c0003fc7 <f_read+0x1f0>
c0003e1b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e1e:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e21:	89 c7                	mov    edi,eax
c0003e23:	39 f0                	cmp    eax,esi
c0003e25:	0f 86 ad 00 00 00    	jbe    c0003ed8 <f_read+0x101>
c0003e2b:	89 f7                	mov    edi,esi
c0003e2d:	e9 a6 00 00 00       	jmp    c0003ed8 <f_read+0x101>
c0003e32:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e35:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e3b:	0f 85 5b 01 00 00    	jne    c0003f9c <f_read+0x1c5>
c0003e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e45:	89 d1                	mov    ecx,edx
c0003e47:	c1 e9 09             	shr    ecx,0x9
c0003e4a:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e4e:	48                   	dec    eax
c0003e4f:	21 c8                	and    eax,ecx
c0003e51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e55:	0f 84 8a 00 00 00    	je     c0003ee5 <f_read+0x10e>
c0003e5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e5f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e62:	89 c8                	mov    eax,ecx
c0003e64:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e68:	e8 04 e1 ff ff       	call   c0001f71 <clst2sect>
c0003e6d:	85 c0                	test   eax,eax
c0003e6f:	0f 84 88 00 00 00    	je     c0003efd <f_read+0x126>
c0003e75:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e7d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e81:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e87:	0f 86 bd 00 00 00    	jbe    c0003f4a <f_read+0x173>
c0003e8d:	89 fe                	mov    esi,edi
c0003e8f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e93:	c1 ee 09             	shr    esi,0x9
c0003e96:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003e9a:	01 f2                	add    edx,esi
c0003e9c:	39 c2                	cmp    edx,eax
c0003e9e:	76 06                	jbe    c0003ea6 <f_read+0xcf>
c0003ea0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ea4:	89 c6                	mov    esi,eax
c0003ea6:	56                   	push   esi
c0003ea7:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003eab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003eaf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003eb3:	50                   	push   eax
c0003eb4:	e8 27 de ff ff       	call   c0001ce0 <disk_read>
c0003eb9:	83 c4 10             	add    esp,0x10
c0003ebc:	85 c0                	test   eax,eax
c0003ebe:	75 50                	jne    c0003f10 <f_read+0x139>
c0003ec0:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ec4:	78 60                	js     c0003f26 <f_read+0x14f>
c0003ec6:	c1 e6 09             	shl    esi,0x9
c0003ec9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ecd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ed1:	01 30                	add    DWORD PTR [eax],esi
c0003ed3:	29 f7                	sub    edi,esi
c0003ed5:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ed8:	85 ff                	test   edi,edi
c0003eda:	0f 85 52 ff ff ff    	jne    c0003e32 <f_read+0x5b>
c0003ee0:	e9 e7 00 00 00       	jmp    c0003fcc <f_read+0x1f5>
c0003ee5:	85 d2                	test   edx,edx
c0003ee7:	75 05                	jne    c0003eee <f_read+0x117>
c0003ee9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003eec:	eb 0a                	jmp    c0003ef8 <f_read+0x121>
c0003eee:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ef1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ef3:	e8 0c f2 ff ff       	call   c0003104 <get_fat.isra.2>
c0003ef8:	83 f8 01             	cmp    eax,0x1
c0003efb:	77 0e                	ja     c0003f0b <f_read+0x134>
c0003efd:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f01:	bd 02 00 00 00       	mov    ebp,0x2
c0003f06:	e9 c1 00 00 00       	jmp    c0003fcc <f_read+0x1f5>
c0003f0b:	83 f8 ff             	cmp    eax,0xffffffff
c0003f0e:	75 0e                	jne    c0003f1e <f_read+0x147>
c0003f10:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f14:	bd 01 00 00 00       	mov    ebp,0x1
c0003f19:	e9 ae 00 00 00       	jmp    c0003fcc <f_read+0x1f5>
c0003f1e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f21:	e9 35 ff ff ff       	jmp    c0003e5b <f_read+0x84>
c0003f26:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f29:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f2d:	39 f0                	cmp    eax,esi
c0003f2f:	73 95                	jae    c0003ec6 <f_read+0xef>
c0003f31:	c1 e0 09             	shl    eax,0x9
c0003f34:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f37:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f3b:	b9 00 02 00 00       	mov    ecx,0x200
c0003f40:	e8 12 de ff ff       	call   c0001d57 <mem_cpy>
c0003f45:	e9 7c ff ff ff       	jmp    c0003ec6 <f_read+0xef>
c0003f4a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f4d:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f51:	74 42                	je     c0003f95 <f_read+0x1be>
c0003f53:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f56:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f5a:	79 19                	jns    c0003f75 <f_read+0x19e>
c0003f5c:	6a 01                	push   0x1
c0003f5e:	50                   	push   eax
c0003f5f:	56                   	push   esi
c0003f60:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f64:	50                   	push   eax
c0003f65:	e8 8c dd ff ff       	call   c0001cf6 <disk_write>
c0003f6a:	83 c4 10             	add    esp,0x10
c0003f6d:	85 c0                	test   eax,eax
c0003f6f:	75 9f                	jne    c0003f10 <f_read+0x139>
c0003f71:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f75:	6a 01                	push   0x1
c0003f77:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f7b:	56                   	push   esi
c0003f7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f80:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f84:	50                   	push   eax
c0003f85:	e8 56 dd ff ff       	call   c0001ce0 <disk_read>
c0003f8a:	83 c4 10             	add    esp,0x10
c0003f8d:	85 c0                	test   eax,eax
c0003f8f:	0f 85 7b ff ff ff    	jne    c0003f10 <f_read+0x139>
c0003f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f9c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f9f:	ba 00 02 00 00       	mov    edx,0x200
c0003fa4:	25 ff 01 00 00       	and    eax,0x1ff
c0003fa9:	89 fe                	mov    esi,edi
c0003fab:	29 c2                	sub    edx,eax
c0003fad:	39 d7                	cmp    edi,edx
c0003faf:	76 02                	jbe    c0003fb3 <f_read+0x1dc>
c0003fb1:	89 d6                	mov    esi,edx
c0003fb3:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fb7:	89 f1                	mov    ecx,esi
c0003fb9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fbd:	e8 95 dd ff ff       	call   c0001d57 <mem_cpy>
c0003fc2:	e9 02 ff ff ff       	jmp    c0003ec9 <f_read+0xf2>
c0003fc7:	bd 07 00 00 00       	mov    ebp,0x7
c0003fcc:	83 c4 2c             	add    esp,0x2c
c0003fcf:	89 e8                	mov    eax,ebp
c0003fd1:	5b                   	pop    ebx
c0003fd2:	5e                   	pop    esi
c0003fd3:	5f                   	pop    edi
c0003fd4:	5d                   	pop    ebp
c0003fd5:	c3                   	ret    

c0003fd6 <f_write>:
c0003fd6:	55                   	push   ebp
c0003fd7:	57                   	push   edi
c0003fd8:	56                   	push   esi
c0003fd9:	53                   	push   ebx
c0003fda:	83 ec 2c             	sub    esp,0x2c
c0003fdd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003fe1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003fe5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003fe9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003fef:	89 d8                	mov    eax,ebx
c0003ff1:	e8 aa e1 ff ff       	call   c00021a0 <validate>
c0003ff6:	89 c5                	mov    ebp,eax
c0003ff8:	85 c0                	test   eax,eax
c0003ffa:	0f 85 00 02 00 00    	jne    c0004200 <f_write+0x22a>
c0004000:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004004:	85 ed                	test   ebp,ebp
c0004006:	0f 85 f4 01 00 00    	jne    c0004200 <f_write+0x22a>
c000400c:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004010:	0f 84 e5 01 00 00    	je     c00041fb <f_write+0x225>
c0004016:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004019:	89 c7                	mov    edi,eax
c000401b:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000401f:	0f 83 ea 00 00 00    	jae    c000410f <f_write+0x139>
c0004025:	f7 d0                	not    eax
c0004027:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000402b:	e9 df 00 00 00       	jmp    c000410f <f_write+0x139>
c0004030:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004033:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004039:	0f 85 8b 01 00 00    	jne    c00041ca <f_write+0x1f4>
c000403f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004043:	89 d1                	mov    ecx,edx
c0004045:	c1 e9 09             	shr    ecx,0x9
c0004048:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000404c:	48                   	dec    eax
c000404d:	21 c8                	and    eax,ecx
c000404f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004053:	0f 84 c3 00 00 00    	je     c000411c <f_write+0x146>
c0004059:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000405d:	0f 88 18 01 00 00    	js     c000417b <f_write+0x1a5>
c0004063:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004067:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000406a:	89 c8                	mov    eax,ecx
c000406c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004070:	e8 fc de ff ff       	call   c0001f71 <clst2sect>
c0004075:	85 c0                	test   eax,eax
c0004077:	0f 84 c8 00 00 00    	je     c0004145 <f_write+0x16f>
c000407d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004081:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004085:	01 c7                	add    edi,eax
c0004087:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000408f:	0f 86 0d 01 00 00    	jbe    c00041a2 <f_write+0x1cc>
c0004095:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004099:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000409d:	c1 ee 09             	shr    esi,0x9
c00040a0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040a4:	01 f2                	add    edx,esi
c00040a6:	39 c2                	cmp    edx,eax
c00040a8:	76 06                	jbe    c00040b0 <f_write+0xda>
c00040aa:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040ae:	89 c6                	mov    esi,eax
c00040b0:	56                   	push   esi
c00040b1:	57                   	push   edi
c00040b2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ba:	50                   	push   eax
c00040bb:	e8 36 dc ff ff       	call   c0001cf6 <disk_write>
c00040c0:	83 c4 10             	add    esp,0x10
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 8d 00 00 00    	jne    c0004158 <f_write+0x182>
c00040cb:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040ce:	29 fa                	sub    edx,edi
c00040d0:	39 f2                	cmp    edx,esi
c00040d2:	73 18                	jae    c00040ec <f_write+0x116>
c00040d4:	c1 e2 09             	shl    edx,0x9
c00040d7:	8d 43 28             	lea    eax,[ebx+0x28]
c00040da:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040de:	b9 00 02 00 00       	mov    ecx,0x200
c00040e3:	e8 6f dc ff ff       	call   c0001d57 <mem_cpy>
c00040e8:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040ec:	c1 e6 09             	shl    esi,0x9
c00040ef:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00040f3:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00040f7:	01 30                	add    DWORD PTR [eax],esi
c00040f9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00040fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004100:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004103:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004106:	39 f0                	cmp    eax,esi
c0004108:	73 02                	jae    c000410c <f_write+0x136>
c000410a:	89 f0                	mov    eax,esi
c000410c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000410f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004114:	0f 85 16 ff ff ff    	jne    c0004030 <f_write+0x5a>
c000411a:	eb 1b                	jmp    c0004137 <f_write+0x161>
c000411c:	85 d2                	test   edx,edx
c000411e:	75 09                	jne    c0004129 <f_write+0x153>
c0004120:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004123:	85 c0                	test   eax,eax
c0004125:	75 19                	jne    c0004140 <f_write+0x16a>
c0004127:	eb 03                	jmp    c000412c <f_write+0x156>
c0004129:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000412c:	89 d8                	mov    eax,ebx
c000412e:	e8 9b f1 ff ff       	call   c00032ce <create_chain>
c0004133:	85 c0                	test   eax,eax
c0004135:	75 09                	jne    c0004140 <f_write+0x16a>
c0004137:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000413b:	e9 c0 00 00 00       	jmp    c0004200 <f_write+0x22a>
c0004140:	83 f8 01             	cmp    eax,0x1
c0004143:	75 0e                	jne    c0004153 <f_write+0x17d>
c0004145:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004149:	bd 02 00 00 00       	mov    ebp,0x2
c000414e:	e9 ad 00 00 00       	jmp    c0004200 <f_write+0x22a>
c0004153:	83 f8 ff             	cmp    eax,0xffffffff
c0004156:	75 0e                	jne    c0004166 <f_write+0x190>
c0004158:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000415c:	bd 01 00 00 00       	mov    ebp,0x1
c0004161:	e9 9a 00 00 00       	jmp    c0004200 <f_write+0x22a>
c0004166:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004169:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000416d:	0f 85 e6 fe ff ff    	jne    c0004059 <f_write+0x83>
c0004173:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004176:	e9 de fe ff ff       	jmp    c0004059 <f_write+0x83>
c000417b:	6a 01                	push   0x1
c000417d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004180:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004183:	50                   	push   eax
c0004184:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004188:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000418c:	50                   	push   eax
c000418d:	e8 64 db ff ff       	call   c0001cf6 <disk_write>
c0004192:	83 c4 10             	add    esp,0x10
c0004195:	85 c0                	test   eax,eax
c0004197:	75 bf                	jne    c0004158 <f_write+0x182>
c0004199:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000419d:	e9 c1 fe ff ff       	jmp    c0004063 <f_write+0x8d>
c00041a2:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041a5:	74 20                	je     c00041c7 <f_write+0x1f1>
c00041a7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041aa:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041ad:	76 18                	jbe    c00041c7 <f_write+0x1f1>
c00041af:	6a 01                	push   0x1
c00041b1:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b4:	57                   	push   edi
c00041b5:	50                   	push   eax
c00041b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041ba:	50                   	push   eax
c00041bb:	e8 20 db ff ff       	call   c0001ce0 <disk_read>
c00041c0:	83 c4 10             	add    esp,0x10
c00041c3:	85 c0                	test   eax,eax
c00041c5:	75 91                	jne    c0004158 <f_write+0x182>
c00041c7:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041ca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041cd:	ba 00 02 00 00       	mov    edx,0x200
c00041d2:	25 ff 01 00 00       	and    eax,0x1ff
c00041d7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041db:	29 c2                	sub    edx,eax
c00041dd:	39 d6                	cmp    esi,edx
c00041df:	76 02                	jbe    c00041e3 <f_write+0x20d>
c00041e1:	89 d6                	mov    esi,edx
c00041e3:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041e7:	89 f1                	mov    ecx,esi
c00041e9:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041ed:	e8 65 db ff ff       	call   c0001d57 <mem_cpy>
c00041f2:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c00041f6:	e9 f4 fe ff ff       	jmp    c00040ef <f_write+0x119>
c00041fb:	bd 07 00 00 00       	mov    ebp,0x7
c0004200:	83 c4 2c             	add    esp,0x2c
c0004203:	89 e8                	mov    eax,ebp
c0004205:	5b                   	pop    ebx
c0004206:	5e                   	pop    esi
c0004207:	5f                   	pop    edi
c0004208:	5d                   	pop    ebp
c0004209:	c3                   	ret    

c000420a <f_sync>:
c000420a:	56                   	push   esi
c000420b:	53                   	push   ebx
c000420c:	83 ec 14             	sub    esp,0x14
c000420f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004213:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004217:	89 d8                	mov    eax,ebx
c0004219:	e8 82 df ff ff       	call   c00021a0 <validate>
c000421e:	85 c0                	test   eax,eax
c0004220:	0f 85 93 00 00 00    	jne    c00042b9 <f_sync+0xaf>
c0004226:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004229:	f6 c2 40             	test   dl,0x40
c000422c:	0f 84 87 00 00 00    	je     c00042b9 <f_sync+0xaf>
c0004232:	84 d2                	test   dl,dl
c0004234:	79 29                	jns    c000425f <f_sync+0x55>
c0004236:	6a 01                	push   0x1
c0004238:	8d 43 28             	lea    eax,[ebx+0x28]
c000423b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000423e:	50                   	push   eax
c000423f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004243:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004247:	50                   	push   eax
c0004248:	e8 a9 da ff ff       	call   c0001cf6 <disk_write>
c000424d:	89 c2                	mov    edx,eax
c000424f:	83 c4 10             	add    esp,0x10
c0004252:	b8 01 00 00 00       	mov    eax,0x1
c0004257:	85 d2                	test   edx,edx
c0004259:	75 5e                	jne    c00042b9 <f_sync+0xaf>
c000425b:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000425f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004262:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004266:	e8 df df ff ff       	call   c000224a <move_window>
c000426b:	85 c0                	test   eax,eax
c000426d:	75 4a                	jne    c00042b9 <f_sync+0xaf>
c000426f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004272:	89 f2                	mov    edx,esi
c0004274:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004278:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000427b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000427d:	e8 5a ee ff ff       	call   c00030dc <st_clust.isra.1>
c0004282:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004285:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004288:	e8 c7 da ff ff       	call   c0001d54 <st_dword>
c000428d:	8d 46 16             	lea    eax,[esi+0x16]
c0004290:	ba 00 00 21 50       	mov    edx,0x50210000
c0004295:	e8 ba da ff ff       	call   c0001d54 <st_dword>
c000429a:	8d 46 12             	lea    eax,[esi+0x12]
c000429d:	31 d2                	xor    edx,edx
c000429f:	e8 ac da ff ff       	call   c0001d50 <st_word>
c00042a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042a8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b0:	e8 bc e9 ff ff       	call   c0002c71 <sync_fs>
c00042b5:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042b9:	83 c4 14             	add    esp,0x14
c00042bc:	5b                   	pop    ebx
c00042bd:	5e                   	pop    esi
c00042be:	c3                   	ret    

c00042bf <f_close>:
c00042bf:	53                   	push   ebx
c00042c0:	83 ec 24             	sub    esp,0x24
c00042c3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042c7:	53                   	push   ebx
c00042c8:	e8 3d ff ff ff       	call   c000420a <f_sync>
c00042cd:	83 c4 10             	add    esp,0x10
c00042d0:	85 c0                	test   eax,eax
c00042d2:	75 15                	jne    c00042e9 <f_close+0x2a>
c00042d4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042d8:	89 d8                	mov    eax,ebx
c00042da:	e8 c1 de ff ff       	call   c00021a0 <validate>
c00042df:	85 c0                	test   eax,eax
c00042e1:	75 06                	jne    c00042e9 <f_close+0x2a>
c00042e3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042e9:	83 c4 18             	add    esp,0x18
c00042ec:	5b                   	pop    ebx
c00042ed:	c3                   	ret    

c00042ee <f_lseek>:
c00042ee:	55                   	push   ebp
c00042ef:	57                   	push   edi
c00042f0:	56                   	push   esi
c00042f1:	53                   	push   ebx
c00042f2:	83 ec 2c             	sub    esp,0x2c
c00042f5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00042f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00042fd:	89 d8                	mov    eax,ebx
c00042ff:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004303:	e8 98 de ff ff       	call   c00021a0 <validate>
c0004308:	89 c5                	mov    ebp,eax
c000430a:	85 c0                	test   eax,eax
c000430c:	0f 85 79 01 00 00    	jne    c000448b <f_lseek+0x19d>
c0004312:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004316:	85 ed                	test   ebp,ebp
c0004318:	0f 85 6d 01 00 00    	jne    c000448b <f_lseek+0x19d>
c000431e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004321:	39 f0                	cmp    eax,esi
c0004323:	73 08                	jae    c000432d <f_lseek+0x3f>
c0004325:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004329:	75 02                	jne    c000432d <f_lseek+0x3f>
c000432b:	89 c6                	mov    esi,eax
c000432d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004330:	85 f6                	test   esi,esi
c0004332:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004339:	75 07                	jne    c0004342 <f_lseek+0x54>
c000433b:	31 f6                	xor    esi,esi
c000433d:	e9 e2 00 00 00       	jmp    c0004424 <f_lseek+0x136>
c0004342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004346:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000434a:	c1 e7 09             	shl    edi,0x9
c000434d:	85 c9                	test   ecx,ecx
c000434f:	74 28                	je     c0004379 <f_lseek+0x8b>
c0004351:	31 d2                	xor    edx,edx
c0004353:	8d 46 ff             	lea    eax,[esi-0x1]
c0004356:	f7 f7                	div    edi
c0004358:	49                   	dec    ecx
c0004359:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000435d:	31 d2                	xor    edx,edx
c000435f:	89 c8                	mov    eax,ecx
c0004361:	f7 f7                	div    edi
c0004363:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004367:	72 10                	jb     c0004379 <f_lseek+0x8b>
c0004369:	89 f8                	mov    eax,edi
c000436b:	f7 d8                	neg    eax
c000436d:	21 c1                	and    ecx,eax
c000436f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004372:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004375:	29 ce                	sub    esi,ecx
c0004377:	eb 3c                	jmp    c00043b5 <f_lseek+0xc7>
c0004379:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000437c:	85 c0                	test   eax,eax
c000437e:	75 32                	jne    c00043b2 <f_lseek+0xc4>
c0004380:	31 d2                	xor    edx,edx
c0004382:	89 d8                	mov    eax,ebx
c0004384:	e8 45 ef ff ff       	call   c00032ce <create_chain>
c0004389:	83 f8 01             	cmp    eax,0x1
c000438c:	75 0e                	jne    c000439c <f_lseek+0xae>
c000438e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004392:	bd 02 00 00 00       	mov    ebp,0x2
c0004397:	e9 ef 00 00 00       	jmp    c000448b <f_lseek+0x19d>
c000439c:	83 f8 ff             	cmp    eax,0xffffffff
c000439f:	75 0e                	jne    c00043af <f_lseek+0xc1>
c00043a1:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043a5:	bd 01 00 00 00       	mov    ebp,0x1
c00043aa:	e9 dc 00 00 00       	jmp    c000448b <f_lseek+0x19d>
c00043af:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043b2:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043b5:	85 c0                	test   eax,eax
c00043b7:	74 82                	je     c000433b <f_lseek+0x4d>
c00043b9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043bc:	39 fe                	cmp    esi,edi
c00043be:	76 3d                	jbe    c00043fd <f_lseek+0x10f>
c00043c0:	01 fa                	add    edx,edi
c00043c2:	29 fe                	sub    esi,edi
c00043c4:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043c7:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043cb:	89 c2                	mov    edx,eax
c00043cd:	74 0d                	je     c00043dc <f_lseek+0xee>
c00043cf:	89 d8                	mov    eax,ebx
c00043d1:	e8 f8 ee ff ff       	call   c00032ce <create_chain>
c00043d6:	85 c0                	test   eax,eax
c00043d8:	75 09                	jne    c00043e3 <f_lseek+0xf5>
c00043da:	eb 1f                	jmp    c00043fb <f_lseek+0x10d>
c00043dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043de:	e8 21 ed ff ff       	call   c0003104 <get_fat.isra.2>
c00043e3:	83 f8 ff             	cmp    eax,0xffffffff
c00043e6:	74 b9                	je     c00043a1 <f_lseek+0xb3>
c00043e8:	83 f8 01             	cmp    eax,0x1
c00043eb:	76 a1                	jbe    c000438e <f_lseek+0xa0>
c00043ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043f1:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00043f4:	76 98                	jbe    c000438e <f_lseek+0xa0>
c00043f6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043f9:	eb be                	jmp    c00043b9 <f_lseek+0xcb>
c00043fb:	31 f6                	xor    esi,esi
c00043fd:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004400:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004406:	0f 84 2f ff ff ff    	je     c000433b <f_lseek+0x4d>
c000440c:	89 c2                	mov    edx,eax
c000440e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004412:	e8 5a db ff ff       	call   c0001f71 <clst2sect>
c0004417:	85 c0                	test   eax,eax
c0004419:	0f 84 6f ff ff ff    	je     c000438e <f_lseek+0xa0>
c000441f:	c1 ee 09             	shr    esi,0x9
c0004422:	01 c6                	add    esi,eax
c0004424:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004427:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000442a:	76 07                	jbe    c0004433 <f_lseek+0x145>
c000442c:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004430:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004433:	a9 ff 01 00 00       	test   eax,0x1ff
c0004438:	74 51                	je     c000448b <f_lseek+0x19d>
c000443a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000443d:	39 f0                	cmp    eax,esi
c000443f:	74 4a                	je     c000448b <f_lseek+0x19d>
c0004441:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004444:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004448:	79 21                	jns    c000446b <f_lseek+0x17d>
c000444a:	6a 01                	push   0x1
c000444c:	50                   	push   eax
c000444d:	57                   	push   edi
c000444e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004452:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004456:	50                   	push   eax
c0004457:	e8 9a d8 ff ff       	call   c0001cf6 <disk_write>
c000445c:	83 c4 10             	add    esp,0x10
c000445f:	85 c0                	test   eax,eax
c0004461:	0f 85 3a ff ff ff    	jne    c00043a1 <f_lseek+0xb3>
c0004467:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000446b:	6a 01                	push   0x1
c000446d:	56                   	push   esi
c000446e:	57                   	push   edi
c000446f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004473:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004477:	50                   	push   eax
c0004478:	e8 63 d8 ff ff       	call   c0001ce0 <disk_read>
c000447d:	83 c4 10             	add    esp,0x10
c0004480:	85 c0                	test   eax,eax
c0004482:	0f 85 19 ff ff ff    	jne    c00043a1 <f_lseek+0xb3>
c0004488:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000448b:	83 c4 2c             	add    esp,0x2c
c000448e:	89 e8                	mov    eax,ebp
c0004490:	5b                   	pop    ebx
c0004491:	5e                   	pop    esi
c0004492:	5f                   	pop    edi
c0004493:	5d                   	pop    ebp
c0004494:	c3                   	ret    

c0004495 <f_opendir>:
c0004495:	56                   	push   esi
c0004496:	b8 09 00 00 00       	mov    eax,0x9
c000449b:	53                   	push   ebx
c000449c:	83 ec 24             	sub    esp,0x24
c000449f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044a3:	85 db                	test   ebx,ebx
c00044a5:	0f 84 af 00 00 00    	je     c000455a <f_opendir+0xc5>
c00044ab:	31 c9                	xor    ecx,ecx
c00044ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044b1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044b5:	e8 e5 de ff ff       	call   c000239f <mount_volume>
c00044ba:	85 c0                	test   eax,eax
c00044bc:	0f 85 92 00 00 00    	jne    c0004554 <f_opendir+0xbf>
c00044c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044c6:	83 ec 0c             	sub    esp,0xc
c00044c9:	89 03                	mov    DWORD PTR [ebx],eax
c00044cb:	68 00 02 00 00       	push   0x200
c00044d0:	e8 8b 15 00 00       	call   c0005a60 <ff_memalloc>
c00044d5:	89 c6                	mov    esi,eax
c00044d7:	83 c4 10             	add    esp,0x10
c00044da:	b8 11 00 00 00       	mov    eax,0x11
c00044df:	85 f6                	test   esi,esi
c00044e1:	74 77                	je     c000455a <f_opendir+0xc5>
c00044e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044e7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044eb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ee:	89 d8                	mov    eax,ebx
c00044f0:	e8 9c f3 ff ff       	call   c0003891 <follow_path>
c00044f5:	85 c0                	test   eax,eax
c00044f7:	75 37                	jne    c0004530 <f_opendir+0x9b>
c00044f9:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c00044fd:	78 1c                	js     c000451b <f_opendir+0x86>
c00044ff:	b8 05 00 00 00       	mov    eax,0x5
c0004504:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004508:	74 26                	je     c0004530 <f_opendir+0x9b>
c000450a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000450e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004511:	8a 00                	mov    al,BYTE PTR [eax]
c0004513:	e8 9b eb ff ff       	call   c00030b3 <ld_clust.isra.0>
c0004518:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000451f:	31 d2                	xor    edx,edx
c0004521:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004525:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004529:	89 d8                	mov    eax,ebx
c000452b:	e8 d6 ec ff ff       	call   c0003206 <dir_sdi>
c0004530:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004534:	83 ec 0c             	sub    esp,0xc
c0004537:	56                   	push   esi
c0004538:	e8 3b 15 00 00       	call   c0005a78 <ff_memfree>
c000453d:	83 c4 10             	add    esp,0x10
c0004540:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004544:	83 f8 04             	cmp    eax,0x4
c0004547:	74 06                	je     c000454f <f_opendir+0xba>
c0004549:	85 c0                	test   eax,eax
c000454b:	74 0d                	je     c000455a <f_opendir+0xc5>
c000454d:	eb 05                	jmp    c0004554 <f_opendir+0xbf>
c000454f:	b8 05 00 00 00       	mov    eax,0x5
c0004554:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000455a:	83 c4 24             	add    esp,0x24
c000455d:	5b                   	pop    ebx
c000455e:	5e                   	pop    esi
c000455f:	c3                   	ret    

c0004560 <f_closedir>:
c0004560:	53                   	push   ebx
c0004561:	83 ec 18             	sub    esp,0x18
c0004564:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004568:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000456c:	89 d8                	mov    eax,ebx
c000456e:	e8 2d dc ff ff       	call   c00021a0 <validate>
c0004573:	85 c0                	test   eax,eax
c0004575:	75 06                	jne    c000457d <f_closedir+0x1d>
c0004577:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000457d:	83 c4 18             	add    esp,0x18
c0004580:	5b                   	pop    ebx
c0004581:	c3                   	ret    

c0004582 <f_readdir>:
c0004582:	57                   	push   edi
c0004583:	56                   	push   esi
c0004584:	53                   	push   ebx
c0004585:	83 ec 20             	sub    esp,0x20
c0004588:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000458c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004590:	89 d8                	mov    eax,ebx
c0004592:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004596:	e8 05 dc ff ff       	call   c00021a0 <validate>
c000459b:	85 c0                	test   eax,eax
c000459d:	75 6e                	jne    c000460d <f_readdir+0x8b>
c000459f:	85 ff                	test   edi,edi
c00045a1:	75 0b                	jne    c00045ae <f_readdir+0x2c>
c00045a3:	31 d2                	xor    edx,edx
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 5a ec ff ff       	call   c0003206 <dir_sdi>
c00045ac:	eb 5f                	jmp    c000460d <f_readdir+0x8b>
c00045ae:	83 ec 0c             	sub    esp,0xc
c00045b1:	68 00 02 00 00       	push   0x200
c00045b6:	e8 a5 14 00 00       	call   c0005a60 <ff_memalloc>
c00045bb:	89 c6                	mov    esi,eax
c00045bd:	83 c4 10             	add    esp,0x10
c00045c0:	b8 11 00 00 00       	mov    eax,0x11
c00045c5:	85 f6                	test   esi,esi
c00045c7:	74 44                	je     c000460d <f_readdir+0x8b>
c00045c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045cd:	31 d2                	xor    edx,edx
c00045cf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045d2:	89 d8                	mov    eax,ebx
c00045d4:	e8 1a f0 ff ff       	call   c00035f3 <dir_read>
c00045d9:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045de:	75 19                	jne    c00045f9 <f_readdir+0x77>
c00045e0:	89 fa                	mov    edx,edi
c00045e2:	89 d8                	mov    eax,ebx
c00045e4:	e8 e6 e8 ff ff       	call   c0002ecf <get_fileinfo>
c00045e9:	31 d2                	xor    edx,edx
c00045eb:	89 d8                	mov    eax,ebx
c00045ed:	e8 9b ee ff ff       	call   c000348d <dir_next>
c00045f2:	83 f8 04             	cmp    eax,0x4
c00045f5:	75 02                	jne    c00045f9 <f_readdir+0x77>
c00045f7:	31 c0                	xor    eax,eax
c00045f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00045fd:	83 ec 0c             	sub    esp,0xc
c0004600:	56                   	push   esi
c0004601:	e8 72 14 00 00       	call   c0005a78 <ff_memfree>
c0004606:	83 c4 10             	add    esp,0x10
c0004609:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000460d:	83 c4 20             	add    esp,0x20
c0004610:	5b                   	pop    ebx
c0004611:	5e                   	pop    esi
c0004612:	5f                   	pop    edi
c0004613:	c3                   	ret    

c0004614 <f_stat>:
c0004614:	57                   	push   edi
c0004615:	31 c9                	xor    ecx,ecx
c0004617:	56                   	push   esi
c0004618:	53                   	push   ebx
c0004619:	83 ec 30             	sub    esp,0x30
c000461c:	89 e2                	mov    edx,esp
c000461e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004622:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004626:	e8 74 dd ff ff       	call   c000239f <mount_volume>
c000462b:	89 c3                	mov    ebx,eax
c000462d:	85 c0                	test   eax,eax
c000462f:	75 59                	jne    c000468a <f_stat+0x76>
c0004631:	83 ec 0c             	sub    esp,0xc
c0004634:	bb 11 00 00 00       	mov    ebx,0x11
c0004639:	68 00 02 00 00       	push   0x200
c000463e:	e8 1d 14 00 00       	call   c0005a60 <ff_memalloc>
c0004643:	83 c4 10             	add    esp,0x10
c0004646:	89 c6                	mov    esi,eax
c0004648:	85 c0                	test   eax,eax
c000464a:	74 3e                	je     c000468a <f_stat+0x76>
c000464c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000464f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004653:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004656:	89 e0                	mov    eax,esp
c0004658:	e8 34 f2 ff ff       	call   c0003891 <follow_path>
c000465d:	89 c3                	mov    ebx,eax
c000465f:	85 c0                	test   eax,eax
c0004661:	75 1b                	jne    c000467e <f_stat+0x6a>
c0004663:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004668:	78 0f                	js     c0004679 <f_stat+0x65>
c000466a:	85 ff                	test   edi,edi
c000466c:	74 10                	je     c000467e <f_stat+0x6a>
c000466e:	89 fa                	mov    edx,edi
c0004670:	89 e0                	mov    eax,esp
c0004672:	e8 58 e8 ff ff       	call   c0002ecf <get_fileinfo>
c0004677:	eb 05                	jmp    c000467e <f_stat+0x6a>
c0004679:	bb 06 00 00 00       	mov    ebx,0x6
c000467e:	83 ec 0c             	sub    esp,0xc
c0004681:	56                   	push   esi
c0004682:	e8 f1 13 00 00       	call   c0005a78 <ff_memfree>
c0004687:	83 c4 10             	add    esp,0x10
c000468a:	83 c4 30             	add    esp,0x30
c000468d:	89 d8                	mov    eax,ebx
c000468f:	5b                   	pop    ebx
c0004690:	5e                   	pop    esi
c0004691:	5f                   	pop    edi
c0004692:	c3                   	ret    

c0004693 <f_getfree>:
c0004693:	55                   	push   ebp
c0004694:	31 c9                	xor    ecx,ecx
c0004696:	57                   	push   edi
c0004697:	56                   	push   esi
c0004698:	53                   	push   ebx
c0004699:	83 ec 2c             	sub    esp,0x2c
c000469c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046a0:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046a4:	e8 f6 dc ff ff       	call   c000239f <mount_volume>
c00046a9:	89 c7                	mov    edi,eax
c00046ab:	85 c0                	test   eax,eax
c00046ad:	0f 85 d8 00 00 00    	jne    c000478b <f_getfree+0xf8>
c00046b3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046b7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046bb:	89 30                	mov    DWORD PTR [eax],esi
c00046bd:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046c0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046c3:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046c6:	39 d0                	cmp    eax,edx
c00046c8:	77 0b                	ja     c00046d5 <f_getfree+0x42>
c00046ca:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046ce:	89 01                	mov    DWORD PTR [ecx],eax
c00046d0:	e9 b6 00 00 00       	jmp    c000478b <f_getfree+0xf8>
c00046d5:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046d8:	75 29                	jne    c0004703 <f_getfree+0x70>
c00046da:	bd 02 00 00 00       	mov    ebp,0x2
c00046df:	31 db                	xor    ebx,ebx
c00046e1:	89 ea                	mov    edx,ebp
c00046e3:	89 f0                	mov    eax,esi
c00046e5:	e8 1a ea ff ff       	call   c0003104 <get_fat.isra.2>
c00046ea:	83 f8 ff             	cmp    eax,0xffffffff
c00046ed:	74 7b                	je     c000476a <f_getfree+0xd7>
c00046ef:	83 f8 01             	cmp    eax,0x1
c00046f2:	74 7d                	je     c0004771 <f_getfree+0xde>
c00046f4:	83 d3 00             	adc    ebx,0x0
c00046f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046fb:	45                   	inc    ebp
c00046fc:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c00046ff:	77 e0                	ja     c00046e1 <f_getfree+0x4e>
c0004701:	eb 77                	jmp    c000477a <f_getfree+0xe7>
c0004703:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004706:	31 db                	xor    ebx,ebx
c0004708:	31 f6                	xor    esi,esi
c000470a:	85 f6                	test   esi,esi
c000470c:	75 18                	jne    c0004726 <f_getfree+0x93>
c000470e:	8d 42 01             	lea    eax,[edx+0x1]
c0004711:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004715:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004719:	e8 2c db ff ff       	call   c000224a <move_window>
c000471e:	85 c0                	test   eax,eax
c0004720:	75 56                	jne    c0004778 <f_getfree+0xe5>
c0004722:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004726:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000472a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000472e:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004732:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004735:	75 11                	jne    c0004748 <f_getfree+0xb5>
c0004737:	e8 ef d5 ff ff       	call   c0001d2b <ld_word>
c000473c:	66 83 f8 01          	cmp    ax,0x1
c0004740:	83 d3 00             	adc    ebx,0x0
c0004743:	83 c6 02             	add    esi,0x2
c0004746:	eb 13                	jmp    c000475b <f_getfree+0xc8>
c0004748:	e8 eb d5 ff ff       	call   c0001d38 <ld_dword>
c000474d:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004752:	83 f8 01             	cmp    eax,0x1
c0004755:	83 d3 00             	adc    ebx,0x0
c0004758:	83 c6 04             	add    esi,0x4
c000475b:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004761:	4d                   	dec    ebp
c0004762:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004766:	75 a2                	jne    c000470a <f_getfree+0x77>
c0004768:	eb 10                	jmp    c000477a <f_getfree+0xe7>
c000476a:	bf 01 00 00 00       	mov    edi,0x1
c000476f:	eb 09                	jmp    c000477a <f_getfree+0xe7>
c0004771:	bf 02 00 00 00       	mov    edi,0x2
c0004776:	eb 02                	jmp    c000477a <f_getfree+0xe7>
c0004778:	89 c7                	mov    edi,eax
c000477a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000477e:	89 18                	mov    DWORD PTR [eax],ebx
c0004780:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004784:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0004788:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c000478b:	83 c4 2c             	add    esp,0x2c
c000478e:	89 f8                	mov    eax,edi
c0004790:	5b                   	pop    ebx
c0004791:	5e                   	pop    esi
c0004792:	5f                   	pop    edi
c0004793:	5d                   	pop    ebp
c0004794:	c3                   	ret    

c0004795 <f_truncate>:
c0004795:	56                   	push   esi
c0004796:	53                   	push   ebx
c0004797:	83 ec 14             	sub    esp,0x14
c000479a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000479e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047a2:	89 d8                	mov    eax,ebx
c00047a4:	e8 f7 d9 ff ff       	call   c00021a0 <validate>
c00047a9:	89 c6                	mov    esi,eax
c00047ab:	85 c0                	test   eax,eax
c00047ad:	0f 85 be 00 00 00    	jne    c0004871 <f_truncate+0xdc>
c00047b3:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047b7:	85 f6                	test   esi,esi
c00047b9:	0f 85 b2 00 00 00    	jne    c0004871 <f_truncate+0xdc>
c00047bf:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047c3:	0f 84 a3 00 00 00    	je     c000486c <f_truncate+0xd7>
c00047c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047cc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047cf:	0f 83 9c 00 00 00    	jae    c0004871 <f_truncate+0xdc>
c00047d5:	85 c0                	test   eax,eax
c00047d7:	75 15                	jne    c00047ee <f_truncate+0x59>
c00047d9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047dc:	31 c9                	xor    ecx,ecx
c00047de:	89 d8                	mov    eax,ebx
c00047e0:	e8 1f ec ff ff       	call   c0003404 <remove_chain>
c00047e5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047ec:	eb 35                	jmp    c0004823 <f_truncate+0x8e>
c00047ee:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00047f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00047f3:	e8 0c e9 ff ff       	call   c0003104 <get_fat.isra.2>
c00047f8:	89 c2                	mov    edx,eax
c00047fa:	b8 01 00 00 00       	mov    eax,0x1
c00047ff:	83 fa ff             	cmp    edx,0xffffffff
c0004802:	74 1f                	je     c0004823 <f_truncate+0x8e>
c0004804:	b8 02 00 00 00       	mov    eax,0x2
c0004809:	83 fa 01             	cmp    edx,0x1
c000480c:	74 15                	je     c0004823 <f_truncate+0x8e>
c000480e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004812:	31 c0                	xor    eax,eax
c0004814:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004817:	76 0a                	jbe    c0004823 <f_truncate+0x8e>
c0004819:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000481c:	89 d8                	mov    eax,ebx
c000481e:	e8 e1 eb ff ff       	call   c0003404 <remove_chain>
c0004823:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004826:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004829:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000482c:	83 ca 40             	or     edx,0x40
c000482f:	85 c0                	test   eax,eax
c0004831:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004834:	75 2f                	jne    c0004865 <f_truncate+0xd0>
c0004836:	84 d2                	test   dl,dl
c0004838:	79 37                	jns    c0004871 <f_truncate+0xdc>
c000483a:	6a 01                	push   0x1
c000483c:	8d 43 28             	lea    eax,[ebx+0x28]
c000483f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004842:	50                   	push   eax
c0004843:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004847:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000484b:	50                   	push   eax
c000484c:	e8 a5 d4 ff ff       	call   c0001cf6 <disk_write>
c0004851:	83 c4 10             	add    esp,0x10
c0004854:	85 c0                	test   eax,eax
c0004856:	75 08                	jne    c0004860 <f_truncate+0xcb>
c0004858:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000485c:	31 f6                	xor    esi,esi
c000485e:	eb 11                	jmp    c0004871 <f_truncate+0xdc>
c0004860:	b8 01 00 00 00       	mov    eax,0x1
c0004865:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004868:	89 c6                	mov    esi,eax
c000486a:	eb 05                	jmp    c0004871 <f_truncate+0xdc>
c000486c:	be 07 00 00 00       	mov    esi,0x7
c0004871:	83 c4 14             	add    esp,0x14
c0004874:	89 f0                	mov    eax,esi
c0004876:	5b                   	pop    ebx
c0004877:	5e                   	pop    esi
c0004878:	c3                   	ret    

c0004879 <f_unlink>:
c0004879:	55                   	push   ebp
c000487a:	b9 02 00 00 00       	mov    ecx,0x2
c000487f:	57                   	push   edi
c0004880:	56                   	push   esi
c0004881:	53                   	push   ebx
c0004882:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004888:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000488c:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004893:	e8 07 db ff ff       	call   c000239f <mount_volume>
c0004898:	85 c0                	test   eax,eax
c000489a:	0f 85 ee 00 00 00    	jne    c000498e <f_unlink+0x115>
c00048a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048a4:	83 ec 0c             	sub    esp,0xc
c00048a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048ab:	68 00 02 00 00       	push   0x200
c00048b0:	e8 ab 11 00 00       	call   c0005a60 <ff_memalloc>
c00048b5:	89 c3                	mov    ebx,eax
c00048b7:	83 c4 10             	add    esp,0x10
c00048ba:	b8 11 00 00 00       	mov    eax,0x11
c00048bf:	85 db                	test   ebx,ebx
c00048c1:	0f 84 c7 00 00 00    	je     c000498e <f_unlink+0x115>
c00048c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048cb:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048d2:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048d9:	e8 b3 ef ff ff       	call   c0003891 <follow_path>
c00048de:	85 c0                	test   eax,eax
c00048e0:	0f 85 94 00 00 00    	jne    c000497a <f_unlink+0x101>
c00048e6:	b8 06 00 00 00       	mov    eax,0x6
c00048eb:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00048f0:	0f 88 84 00 00 00    	js     c000497a <f_unlink+0x101>
c00048f6:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c00048fb:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004901:	74 07                	je     c000490a <f_unlink+0x91>
c0004903:	b8 07 00 00 00       	mov    eax,0x7
c0004908:	eb 70                	jmp    c000497a <f_unlink+0x101>
c000490a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000490e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004912:	8a 07                	mov    al,BYTE PTR [edi]
c0004914:	e8 9a e7 ff ff       	call   c00030b3 <ld_clust.isra.0>
c0004919:	83 e5 10             	and    ebp,0x10
c000491c:	89 c6                	mov    esi,eax
c000491e:	75 20                	jne    c0004940 <f_unlink+0xc7>
c0004920:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004924:	e8 e7 ed ff ff       	call   c0003710 <dir_remove>
c0004929:	85 c0                	test   eax,eax
c000492b:	75 40                	jne    c000496d <f_unlink+0xf4>
c000492d:	85 f6                	test   esi,esi
c000492f:	74 3c                	je     c000496d <f_unlink+0xf4>
c0004931:	31 c9                	xor    ecx,ecx
c0004933:	89 f2                	mov    edx,esi
c0004935:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004939:	e8 c6 ea ff ff       	call   c0003404 <remove_chain>
c000493e:	eb 2d                	jmp    c000496d <f_unlink+0xf4>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494a:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494e:	e8 b3 e8 ff ff       	call   c0003206 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 23                	jne    c000497a <f_unlink+0x101>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 91 ec ff ff       	call   c00035f3 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 9d                	je     c0004903 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 0f                	jne    c000497a <f_unlink+0x101>
c000496b:	eb b3                	jmp    c0004920 <f_unlink+0xa7>
c000496d:	85 c0                	test   eax,eax
c000496f:	75 09                	jne    c000497a <f_unlink+0x101>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 f7 e2 ff ff       	call   c0002c71 <sync_fs>
c000497a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000497e:	83 ec 0c             	sub    esp,0xc
c0004981:	53                   	push   ebx
c0004982:	e8 f1 10 00 00       	call   c0005a78 <ff_memfree>
c0004987:	83 c4 10             	add    esp,0x10
c000498a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000498e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004994:	5b                   	pop    ebx
c0004995:	5e                   	pop    esi
c0004996:	5f                   	pop    edi
c0004997:	5d                   	pop    ebp
c0004998:	c3                   	ret    

c0004999 <f_mkdir>:
c0004999:	57                   	push   edi
c000499a:	b9 02 00 00 00       	mov    ecx,0x2
c000499f:	56                   	push   esi
c00049a0:	53                   	push   ebx
c00049a1:	83 ec 50             	sub    esp,0x50
c00049a4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049a8:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049ac:	e8 ee d9 ff ff       	call   c000239f <mount_volume>
c00049b1:	89 c3                	mov    ebx,eax
c00049b3:	85 c0                	test   eax,eax
c00049b5:	0f 85 70 01 00 00    	jne    c0004b2b <f_mkdir+0x192>
c00049bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049bf:	83 ec 0c             	sub    esp,0xc
c00049c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00049c6:	bb 11 00 00 00       	mov    ebx,0x11
c00049cb:	68 00 02 00 00       	push   0x200
c00049d0:	e8 8b 10 00 00       	call   c0005a60 <ff_memalloc>
c00049d5:	83 c4 10             	add    esp,0x10
c00049d8:	89 c7                	mov    edi,eax
c00049da:	85 c0                	test   eax,eax
c00049dc:	0f 84 49 01 00 00    	je     c0004b2b <f_mkdir+0x192>
c00049e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049e6:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049ea:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00049ed:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049f1:	e8 9b ee ff ff       	call   c0003891 <follow_path>
c00049f6:	89 c3                	mov    ebx,eax
c00049f8:	85 c0                	test   eax,eax
c00049fa:	74 3e                	je     c0004a3a <f_mkdir+0xa1>
c00049fc:	83 f8 04             	cmp    eax,0x4
c00049ff:	75 3e                	jne    c0004a3f <f_mkdir+0xa6>
c0004a01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a05:	31 d2                	xor    edx,edx
c0004a07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a0b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a0f:	e8 ba e8 ff ff       	call   c00032ce <create_chain>
c0004a14:	89 c6                	mov    esi,eax
c0004a16:	85 c0                	test   eax,eax
c0004a18:	74 0c                	je     c0004a26 <f_mkdir+0x8d>
c0004a1a:	bb 02 00 00 00       	mov    ebx,0x2
c0004a1f:	83 f8 01             	cmp    eax,0x1
c0004a22:	74 07                	je     c0004a2b <f_mkdir+0x92>
c0004a24:	eb 2a                	jmp    c0004a50 <f_mkdir+0xb7>
c0004a26:	bb 07 00 00 00       	mov    ebx,0x7
c0004a2b:	31 c9                	xor    ecx,ecx
c0004a2d:	89 f2                	mov    edx,esi
c0004a2f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a33:	e8 cc e9 ff ff       	call   c0003404 <remove_chain>
c0004a38:	eb 05                	jmp    c0004a3f <f_mkdir+0xa6>
c0004a3a:	bb 08 00 00 00       	mov    ebx,0x8
c0004a3f:	83 ec 0c             	sub    esp,0xc
c0004a42:	57                   	push   edi
c0004a43:	e8 30 10 00 00       	call   c0005a78 <ff_memfree>
c0004a48:	83 c4 10             	add    esp,0x10
c0004a4b:	e9 db 00 00 00       	jmp    c0004b2b <f_mkdir+0x192>
c0004a50:	bb 01 00 00 00       	mov    ebx,0x1
c0004a55:	83 f8 ff             	cmp    eax,0xffffffff
c0004a58:	74 d1                	je     c0004a2b <f_mkdir+0x92>
c0004a5a:	89 f2                	mov    edx,esi
c0004a5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a60:	e8 8d dd ff ff       	call   c00027f2 <dir_clear>
c0004a65:	89 c3                	mov    ebx,eax
c0004a67:	85 c0                	test   eax,eax
c0004a69:	75 c0                	jne    c0004a2b <f_mkdir+0x92>
c0004a6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a6f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a74:	83 c0 34             	add    eax,0x34
c0004a77:	ba 20 00 00 00       	mov    edx,0x20
c0004a7c:	e8 eb d2 ff ff       	call   c0001d6c <mem_set>
c0004a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a85:	83 c0 4a             	add    eax,0x4a
c0004a88:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c0004a8c:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0004a90:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a95:	e8 ba d2 ff ff       	call   c0001d54 <st_dword>
c0004a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a9e:	89 f1                	mov    ecx,esi
c0004aa0:	8d 50 34             	lea    edx,[eax+0x34]
c0004aa3:	e8 34 e6 ff ff       	call   c00030dc <st_clust.isra.1>
c0004aa8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aac:	b9 20 00 00 00       	mov    ecx,0x20
c0004ab1:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab4:	83 c0 54             	add    eax,0x54
c0004ab7:	e8 9b d2 ff ff       	call   c0001d57 <mem_cpy>
c0004abc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ac0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ac4:	8d 50 54             	lea    edx,[eax+0x54]
c0004ac7:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004acb:	e8 0c e6 ff ff       	call   c00030dc <st_clust.isra.1>
c0004ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ad8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004adc:	e8 44 ee ff ff       	call   c0003925 <dir_register>
c0004ae1:	89 c3                	mov    ebx,eax
c0004ae3:	85 c0                	test   eax,eax
c0004ae5:	0f 85 40 ff ff ff    	jne    c0004a2b <f_mkdir+0x92>
c0004aeb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004aef:	ba 00 00 21 50       	mov    edx,0x50210000
c0004af4:	83 c0 16             	add    eax,0x16
c0004af7:	e8 58 d2 ff ff       	call   c0001d54 <st_dword>
c0004afc:	89 f1                	mov    ecx,esi
c0004afe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b06:	e8 d1 e5 ff ff       	call   c00030dc <st_clust.isra.1>
c0004b0b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b0f:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b17:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b1f:	e8 4d e1 ff ff       	call   c0002c71 <sync_fs>
c0004b24:	89 c3                	mov    ebx,eax
c0004b26:	e9 14 ff ff ff       	jmp    c0004a3f <f_mkdir+0xa6>
c0004b2b:	83 c4 50             	add    esp,0x50
c0004b2e:	89 d8                	mov    eax,ebx
c0004b30:	5b                   	pop    ebx
c0004b31:	5e                   	pop    esi
c0004b32:	5f                   	pop    edi
c0004b33:	c3                   	ret    

c0004b34 <f_rename>:
c0004b34:	57                   	push   edi
c0004b35:	56                   	push   esi
c0004b36:	53                   	push   ebx
c0004b37:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b3d:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b44:	e8 11 d6 ff ff       	call   c000215a <get_ldnumber>
c0004b49:	b9 02 00 00 00       	mov    ecx,0x2
c0004b4e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b52:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b59:	e8 41 d8 ff ff       	call   c000239f <mount_volume>
c0004b5e:	85 c0                	test   eax,eax
c0004b60:	0f 85 7a 01 00 00    	jne    c0004ce0 <f_rename+0x1ac>
c0004b66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b6a:	83 ec 0c             	sub    esp,0xc
c0004b6d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b71:	68 00 02 00 00       	push   0x200
c0004b76:	e8 e5 0e 00 00       	call   c0005a60 <ff_memalloc>
c0004b7b:	89 c6                	mov    esi,eax
c0004b7d:	83 c4 10             	add    esp,0x10
c0004b80:	b8 11 00 00 00       	mov    eax,0x11
c0004b85:	85 f6                	test   esi,esi
c0004b87:	0f 84 53 01 00 00    	je     c0004ce0 <f_rename+0x1ac>
c0004b8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b91:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004b98:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b9b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004b9f:	e8 ed ec ff ff       	call   c0003891 <follow_path>
c0004ba4:	85 c0                	test   eax,eax
c0004ba6:	0f 85 20 01 00 00    	jne    c0004ccc <f_rename+0x198>
c0004bac:	b8 06 00 00 00       	mov    eax,0x6
c0004bb1:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bb6:	0f 85 10 01 00 00    	jne    c0004ccc <f_rename+0x198>
c0004bbc:	b9 20 00 00 00       	mov    ecx,0x20
c0004bc1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bc5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bc9:	e8 89 d1 ff ff       	call   c0001d57 <mem_cpy>
c0004bce:	b9 30 00 00 00       	mov    ecx,0x30
c0004bd3:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bd7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bdb:	e8 77 d1 ff ff       	call   c0001d57 <mem_cpy>
c0004be0:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004be7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004beb:	e8 a1 ec ff ff       	call   c0003891 <follow_path>
c0004bf0:	85 c0                	test   eax,eax
c0004bf2:	75 20                	jne    c0004c14 <f_rename+0xe0>
c0004bf4:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004bf8:	b8 08 00 00 00       	mov    eax,0x8
c0004bfd:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c01:	0f 85 c5 00 00 00    	jne    c0004ccc <f_rename+0x198>
c0004c07:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c0b:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c12:	eb 03                	jmp    c0004c17 <f_rename+0xe3>
c0004c14:	83 f8 04             	cmp    eax,0x4
c0004c17:	0f 85 af 00 00 00    	jne    c0004ccc <f_rename+0x198>
c0004c1d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c21:	e8 ff ec ff ff       	call   c0003925 <dir_register>
c0004c26:	85 c0                	test   eax,eax
c0004c28:	0f 85 9e 00 00 00    	jne    c0004ccc <f_rename+0x198>
c0004c2e:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c35:	b9 13 00 00 00       	mov    ecx,0x13
c0004c3a:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c3e:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c41:	e8 11 d1 ff ff       	call   c0001d57 <mem_cpy>
c0004c46:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c4a:	a8 10                	test   al,0x10
c0004c4c:	75 03                	jne    c0004c51 <f_rename+0x11d>
c0004c4e:	83 c8 20             	or     eax,0x20
c0004c51:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c58:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5c:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c60:	74 54                	je     c0004cb6 <f_rename+0x182>
c0004c62:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c66:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c6a:	74 4a                	je     c0004cb6 <f_rename+0x182>
c0004c6c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c70:	89 da                	mov    edx,ebx
c0004c72:	8a 07                	mov    al,BYTE PTR [edi]
c0004c74:	e8 3a e4 ff ff       	call   c00030b3 <ld_clust.isra.0>
c0004c79:	89 c2                	mov    edx,eax
c0004c7b:	89 f8                	mov    eax,edi
c0004c7d:	e8 ef d2 ff ff       	call   c0001f71 <clst2sect>
c0004c82:	89 c2                	mov    edx,eax
c0004c84:	b8 02 00 00 00       	mov    eax,0x2
c0004c89:	85 d2                	test   edx,edx
c0004c8b:	74 3f                	je     c0004ccc <f_rename+0x198>
c0004c8d:	89 f8                	mov    eax,edi
c0004c8f:	e8 b6 d5 ff ff       	call   c000224a <move_window>
c0004c94:	85 c0                	test   eax,eax
c0004c96:	75 34                	jne    c0004ccc <f_rename+0x198>
c0004c98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c9c:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004ca0:	75 14                	jne    c0004cb6 <f_rename+0x182>
c0004ca2:	8d 50 54             	lea    edx,[eax+0x54]
c0004ca5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004ca9:	e8 2e e4 ff ff       	call   c00030dc <st_clust.isra.1>
c0004cae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cb2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cb6:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004cba:	e8 51 ea ff ff       	call   c0003710 <dir_remove>
c0004cbf:	85 c0                	test   eax,eax
c0004cc1:	75 09                	jne    c0004ccc <f_rename+0x198>
c0004cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc7:	e8 a5 df ff ff       	call   c0002c71 <sync_fs>
c0004ccc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cd0:	83 ec 0c             	sub    esp,0xc
c0004cd3:	56                   	push   esi
c0004cd4:	e8 9f 0d 00 00       	call   c0005a78 <ff_memfree>
c0004cd9:	83 c4 10             	add    esp,0x10
c0004cdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ce0:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004ce6:	5b                   	pop    ebx
c0004ce7:	5e                   	pop    esi
c0004ce8:	5f                   	pop    edi
c0004ce9:	c3                   	ret    

c0004cea <f_chmod>:
c0004cea:	57                   	push   edi
c0004ceb:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf0:	56                   	push   esi
c0004cf1:	53                   	push   ebx
c0004cf2:	83 ec 50             	sub    esp,0x50
c0004cf5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cf9:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004cfd:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d01:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d05:	e8 95 d6 ff ff       	call   c000239f <mount_volume>
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	75 7e                	jne    c0004d8c <f_chmod+0xa2>
c0004d0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d12:	83 ec 0c             	sub    esp,0xc
c0004d15:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d19:	68 00 02 00 00       	push   0x200
c0004d1e:	e8 3d 0d 00 00       	call   c0005a60 <ff_memalloc>
c0004d23:	89 c6                	mov    esi,eax
c0004d25:	83 c4 10             	add    esp,0x10
c0004d28:	b8 11 00 00 00       	mov    eax,0x11
c0004d2d:	85 f6                	test   esi,esi
c0004d2f:	74 5b                	je     c0004d8c <f_chmod+0xa2>
c0004d31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d35:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d39:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d3c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d40:	e8 4c eb ff ff       	call   c0003891 <follow_path>
c0004d45:	85 c0                	test   eax,eax
c0004d47:	75 2f                	jne    c0004d78 <f_chmod+0x8e>
c0004d49:	b8 06 00 00 00       	mov    eax,0x6
c0004d4e:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d53:	75 23                	jne    c0004d78 <f_chmod+0x8e>
c0004d55:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d59:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d5c:	21 fb                	and    ebx,edi
c0004d5e:	83 e3 27             	and    ebx,0x27
c0004d61:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d64:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d73:	e8 f9 de ff ff       	call   c0002c71 <sync_fs>
c0004d78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7c:	83 ec 0c             	sub    esp,0xc
c0004d7f:	56                   	push   esi
c0004d80:	e8 f3 0c 00 00       	call   c0005a78 <ff_memfree>
c0004d85:	83 c4 10             	add    esp,0x10
c0004d88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8c:	83 c4 50             	add    esp,0x50
c0004d8f:	5b                   	pop    ebx
c0004d90:	5e                   	pop    esi
c0004d91:	5f                   	pop    edi
c0004d92:	c3                   	ret    

c0004d93 <f_utime>:
c0004d93:	56                   	push   esi
c0004d94:	b9 02 00 00 00       	mov    ecx,0x2
c0004d99:	53                   	push   ebx
c0004d9a:	83 ec 54             	sub    esp,0x54
c0004d9d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004da1:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004da5:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004da9:	e8 f1 d5 ff ff       	call   c000239f <mount_volume>
c0004dae:	85 c0                	test   eax,eax
c0004db0:	0f 85 85 00 00 00    	jne    c0004e3b <f_utime+0xa8>
c0004db6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dba:	83 ec 0c             	sub    esp,0xc
c0004dbd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dc1:	68 00 02 00 00       	push   0x200
c0004dc6:	e8 95 0c 00 00       	call   c0005a60 <ff_memalloc>
c0004dcb:	89 c3                	mov    ebx,eax
c0004dcd:	83 c4 10             	add    esp,0x10
c0004dd0:	b8 11 00 00 00       	mov    eax,0x11
c0004dd5:	85 db                	test   ebx,ebx
c0004dd7:	74 62                	je     c0004e3b <f_utime+0xa8>
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004de1:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004de4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004de8:	e8 a4 ea ff ff       	call   c0003891 <follow_path>
c0004ded:	85 c0                	test   eax,eax
c0004def:	75 36                	jne    c0004e27 <f_utime+0x94>
c0004df1:	b8 06 00 00 00       	mov    eax,0x6
c0004df6:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004dfb:	75 2a                	jne    c0004e27 <f_utime+0x94>
c0004dfd:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e01:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e05:	c1 e2 10             	shl    edx,0x10
c0004e08:	09 c2                	or     edx,eax
c0004e0a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e0e:	83 c0 16             	add    eax,0x16
c0004e11:	e8 3e cf ff ff       	call   c0001d54 <st_dword>
c0004e16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e1a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e22:	e8 4a de ff ff       	call   c0002c71 <sync_fs>
c0004e27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e2b:	83 ec 0c             	sub    esp,0xc
c0004e2e:	53                   	push   ebx
c0004e2f:	e8 44 0c 00 00       	call   c0005a78 <ff_memfree>
c0004e34:	83 c4 10             	add    esp,0x10
c0004e37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3b:	83 c4 54             	add    esp,0x54
c0004e3e:	5b                   	pop    ebx
c0004e3f:	5e                   	pop    esi
c0004e40:	c3                   	ret    

c0004e41 <f_getlabel>:
c0004e41:	55                   	push   ebp
c0004e42:	31 c9                	xor    ecx,ecx
c0004e44:	57                   	push   edi
c0004e45:	56                   	push   esi
c0004e46:	53                   	push   ebx
c0004e47:	83 ec 5c             	sub    esp,0x5c
c0004e4a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e4e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e52:	e8 48 d5 ff ff       	call   c000239f <mount_volume>
c0004e57:	89 c3                	mov    ebx,eax
c0004e59:	85 c0                	test   eax,eax
c0004e5b:	0f 85 e2 00 00 00    	jne    c0004f43 <f_getlabel+0x102>
c0004e61:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e66:	0f 84 d7 00 00 00    	je     c0004f43 <f_getlabel+0x102>
c0004e6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e70:	31 d2                	xor    edx,edx
c0004e72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e76:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e7a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e82:	e8 7f e3 ff ff       	call   c0003206 <dir_sdi>
c0004e87:	89 c3                	mov    ebx,eax
c0004e89:	85 c0                	test   eax,eax
c0004e8b:	0f 85 a4 00 00 00    	jne    c0004f35 <f_getlabel+0xf4>
c0004e91:	ba 01 00 00 00       	mov    edx,0x1
c0004e96:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e9a:	e8 54 e7 ff ff       	call   c00035f3 <dir_read>
c0004e9f:	89 c3                	mov    ebx,eax
c0004ea1:	85 c0                	test   eax,eax
c0004ea3:	0f 85 8c 00 00 00    	jne    c0004f35 <f_getlabel+0xf4>
c0004ea9:	31 f6                	xor    esi,esi
c0004eab:	31 c9                	xor    ecx,ecx
c0004ead:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004eb1:	8d 79 01             	lea    edi,[ecx+0x1]
c0004eb4:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004eb9:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ebe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ec2:	e8 e5 ce ff ff       	call   c0001dac <dbc_1st>
c0004ec7:	85 c0                	test   eax,eax
c0004ec9:	74 16                	je     c0004ee1 <f_getlabel+0xa0>
c0004ecb:	83 ff 0b             	cmp    edi,0xb
c0004ece:	74 11                	je     c0004ee1 <f_getlabel+0xa0>
c0004ed0:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ed5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ed9:	8d 79 02             	lea    edi,[ecx+0x2]
c0004edc:	c1 e0 08             	shl    eax,0x8
c0004edf:	09 c2                	or     edx,eax
c0004ee1:	50                   	push   eax
c0004ee2:	50                   	push   eax
c0004ee3:	68 b5 01 00 00       	push   0x1b5
c0004ee8:	0f b7 d2             	movzx  edx,dx
c0004eeb:	52                   	push   edx
c0004eec:	e8 3f 0c 00 00       	call   c0005b30 <ff_oem2uni>
c0004ef1:	83 c4 10             	add    esp,0x10
c0004ef4:	66 85 c0             	test   ax,ax
c0004ef7:	74 25                	je     c0004f1e <f_getlabel+0xdd>
c0004ef9:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004efd:	b9 04 00 00 00       	mov    ecx,0x4
c0004f02:	01 f2                	add    edx,esi
c0004f04:	0f b7 c0             	movzx  eax,ax
c0004f07:	e8 6c cf ff ff       	call   c0001e78 <put_utf>
c0004f0c:	84 c0                	test   al,al
c0004f0e:	74 0e                	je     c0004f1e <f_getlabel+0xdd>
c0004f10:	0f b6 c0             	movzx  eax,al
c0004f13:	01 c6                	add    esi,eax
c0004f15:	83 ff 0b             	cmp    edi,0xb
c0004f18:	74 06                	je     c0004f20 <f_getlabel+0xdf>
c0004f1a:	89 f9                	mov    ecx,edi
c0004f1c:	eb 8f                	jmp    c0004ead <f_getlabel+0x6c>
c0004f1e:	31 f6                	xor    esi,esi
c0004f20:	03 74 24 74          	add    esi,DWORD PTR [esp+0x74]
c0004f24:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0004f27:	39 74 24 74          	cmp    DWORD PTR [esp+0x74],esi
c0004f2b:	74 16                	je     c0004f43 <f_getlabel+0x102>
c0004f2d:	4e                   	dec    esi
c0004f2e:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0004f31:	74 f1                	je     c0004f24 <f_getlabel+0xe3>
c0004f33:	eb 0e                	jmp    c0004f43 <f_getlabel+0x102>
c0004f35:	83 fb 04             	cmp    ebx,0x4
c0004f38:	75 09                	jne    c0004f43 <f_getlabel+0x102>
c0004f3a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f3e:	31 db                	xor    ebx,ebx
c0004f40:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f43:	85 db                	test   ebx,ebx
c0004f45:	75 47                	jne    c0004f8e <f_getlabel+0x14d>
c0004f47:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f4c:	74 40                	je     c0004f8e <f_getlabel+0x14d>
c0004f4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f52:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f55:	e8 f0 d2 ff ff       	call   c000224a <move_window>
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	85 c0                	test   eax,eax
c0004f5e:	75 2e                	jne    c0004f8e <f_getlabel+0x14d>
c0004f60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f64:	b8 43 00 00 00       	mov    eax,0x43
c0004f69:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f6b:	80 f9 03             	cmp    cl,0x3
c0004f6e:	74 0f                	je     c0004f7f <f_getlabel+0x13e>
c0004f70:	31 c0                	xor    eax,eax
c0004f72:	80 f9 04             	cmp    cl,0x4
c0004f75:	0f 94 c0             	sete   al
c0004f78:	48                   	dec    eax
c0004f79:	83 e0 c3             	and    eax,0xffffffc3
c0004f7c:	83 c0 64             	add    eax,0x64
c0004f7f:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f83:	e8 b0 cd ff ff       	call   c0001d38 <ld_dword>
c0004f88:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f8c:	89 07                	mov    DWORD PTR [edi],eax
c0004f8e:	83 c4 5c             	add    esp,0x5c
c0004f91:	89 d8                	mov    eax,ebx
c0004f93:	5b                   	pop    ebx
c0004f94:	5e                   	pop    esi
c0004f95:	5f                   	pop    edi
c0004f96:	5d                   	pop    ebp
c0004f97:	c3                   	ret    

c0004f98 <f_setlabel>:
c0004f98:	56                   	push   esi
c0004f99:	b9 02 00 00 00       	mov    ecx,0x2
c0004f9e:	53                   	push   ebx
c0004f9f:	83 ec 54             	sub    esp,0x54
c0004fa2:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fa6:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004faa:	e8 f0 d3 ff ff       	call   c000239f <mount_volume>
c0004faf:	89 c6                	mov    esi,eax
c0004fb1:	85 c0                	test   eax,eax
c0004fb3:	0f 85 67 01 00 00    	jne    c0005120 <f_setlabel+0x188>
c0004fb9:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fbe:	ba 20 00 00 00       	mov    edx,0x20
c0004fc3:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fc7:	31 db                	xor    ebx,ebx
c0004fc9:	e8 9e cd ff ff       	call   c0001d6c <mem_set>
c0004fce:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fd2:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fd5:	76 5b                	jbe    c0005032 <f_setlabel+0x9a>
c0004fd7:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fdb:	e8 d2 cd ff ff       	call   c0001db2 <tchar2uni>
c0004fe0:	3d ff ff 00 00       	cmp    eax,0xffff
c0004fe5:	76 0a                	jbe    c0004ff1 <f_setlabel+0x59>
c0004fe7:	be 06 00 00 00       	mov    esi,0x6
c0004fec:	e9 2f 01 00 00       	jmp    c0005120 <f_setlabel+0x188>
c0004ff1:	83 ec 0c             	sub    esp,0xc
c0004ff4:	50                   	push   eax
c0004ff5:	e8 aa 0b 00 00       	call   c0005ba4 <ff_wtoupper>
c0004ffa:	5a                   	pop    edx
c0004ffb:	59                   	pop    ecx
c0004ffc:	68 b5 01 00 00       	push   0x1b5
c0005001:	50                   	push   eax
c0005002:	e8 89 0a 00 00       	call   c0005a90 <ff_uni2oem>
c0005007:	83 c4 10             	add    esp,0x10
c000500a:	89 c6                	mov    esi,eax
c000500c:	66 85 c0             	test   ax,ax
c000500f:	74 d6                	je     c0004fe7 <f_setlabel+0x4f>
c0005011:	0f b7 d0             	movzx  edx,ax
c0005014:	b8 50 ed 01 c0       	mov    eax,0xc001ed50
c0005019:	e8 7c cd ff ff       	call   c0001d9a <chk_chr>
c000501e:	85 c0                	test   eax,eax
c0005020:	75 c5                	jne    c0004fe7 <f_setlabel+0x4f>
c0005022:	66 81 fe ff 00       	cmp    si,0xff
c0005027:	0f 87 c9 00 00 00    	ja     c00050f6 <f_setlabel+0x15e>
c000502d:	e9 e4 00 00 00       	jmp    c0005116 <f_setlabel+0x17e>
c0005032:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005037:	74 ae                	je     c0004fe7 <f_setlabel+0x4f>
c0005039:	85 db                	test   ebx,ebx
c000503b:	74 0e                	je     c000504b <f_setlabel+0xb3>
c000503d:	8d 43 ff             	lea    eax,[ebx-0x1]
c0005040:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005045:	75 04                	jne    c000504b <f_setlabel+0xb3>
c0005047:	89 c3                	mov    ebx,eax
c0005049:	eb ee                	jmp    c0005039 <f_setlabel+0xa1>
c000504b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000504f:	31 d2                	xor    edx,edx
c0005051:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005055:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005059:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005061:	e8 a0 e1 ff ff       	call   c0003206 <dir_sdi>
c0005066:	89 c6                	mov    esi,eax
c0005068:	85 c0                	test   eax,eax
c000506a:	0f 85 b0 00 00 00    	jne    c0005120 <f_setlabel+0x188>
c0005070:	ba 01 00 00 00       	mov    edx,0x1
c0005075:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005079:	e8 75 e5 ff ff       	call   c00035f3 <dir_read>
c000507e:	85 c0                	test   eax,eax
c0005080:	75 18                	jne    c000509a <f_setlabel+0x102>
c0005082:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005086:	85 db                	test   ebx,ebx
c0005088:	74 0b                	je     c0005095 <f_setlabel+0xfd>
c000508a:	b9 0b 00 00 00       	mov    ecx,0xb
c000508f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005093:	eb 47                	jmp    c00050dc <f_setlabel+0x144>
c0005095:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005098:	eb 47                	jmp    c00050e1 <f_setlabel+0x149>
c000509a:	83 f8 04             	cmp    eax,0x4
c000509d:	75 53                	jne    c00050f2 <f_setlabel+0x15a>
c000509f:	85 db                	test   ebx,ebx
c00050a1:	74 7d                	je     c0005120 <f_setlabel+0x188>
c00050a3:	ba 01 00 00 00       	mov    edx,0x1
c00050a8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050ac:	e8 e1 e4 ff ff       	call   c0003592 <dir_alloc>
c00050b1:	89 c6                	mov    esi,eax
c00050b3:	85 c0                	test   eax,eax
c00050b5:	75 69                	jne    c0005120 <f_setlabel+0x188>
c00050b7:	b9 20 00 00 00       	mov    ecx,0x20
c00050bc:	31 d2                	xor    edx,edx
c00050be:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050c2:	e8 a5 cc ff ff       	call   c0001d6c <mem_set>
c00050c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00050d4:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050d8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050dc:	e8 76 cc ff ff       	call   c0001d57 <mem_cpy>
c00050e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050e5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050ed:	e8 7f db ff ff       	call   c0002c71 <sync_fs>
c00050f2:	89 c6                	mov    esi,eax
c00050f4:	eb 2a                	jmp    c0005120 <f_setlabel+0x188>
c00050f6:	83 fb 09             	cmp    ebx,0x9
c00050f9:	0f 87 e8 fe ff ff    	ja     c0004fe7 <f_setlabel+0x4f>
c00050ff:	89 f0                	mov    eax,esi
c0005101:	66 c1 e8 08          	shr    ax,0x8
c0005105:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005109:	43                   	inc    ebx
c000510a:	89 f0                	mov    eax,esi
c000510c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005110:	43                   	inc    ebx
c0005111:	e9 b8 fe ff ff       	jmp    c0004fce <f_setlabel+0x36>
c0005116:	83 fb 0a             	cmp    ebx,0xa
c0005119:	76 ef                	jbe    c000510a <f_setlabel+0x172>
c000511b:	e9 c7 fe ff ff       	jmp    c0004fe7 <f_setlabel+0x4f>
c0005120:	83 c4 54             	add    esp,0x54
c0005123:	89 f0                	mov    eax,esi
c0005125:	5b                   	pop    ebx
c0005126:	5e                   	pop    esi
c0005127:	c3                   	ret    

c0005128 <f_expand>:
c0005128:	55                   	push   ebp
c0005129:	57                   	push   edi
c000512a:	56                   	push   esi
c000512b:	53                   	push   ebx
c000512c:	83 ec 2c             	sub    esp,0x2c
c000512f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005133:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005137:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000513b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000513f:	89 d8                	mov    eax,ebx
c0005141:	e8 5a d0 ff ff       	call   c00021a0 <validate>
c0005146:	89 c6                	mov    esi,eax
c0005148:	85 c0                	test   eax,eax
c000514a:	0f 85 2e 01 00 00    	jne    c000527e <f_expand+0x156>
c0005150:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005154:	85 f6                	test   esi,esi
c0005156:	0f 85 22 01 00 00    	jne    c000527e <f_expand+0x156>
c000515c:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0005161:	75 0a                	jne    c000516d <f_expand+0x45>
c0005163:	be 07 00 00 00       	mov    esi,0x7
c0005168:	e9 11 01 00 00       	jmp    c000527e <f_expand+0x156>
c000516d:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0005171:	75 f0                	jne    c0005163 <f_expand+0x3b>
c0005173:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005177:	74 ea                	je     c0005163 <f_expand+0x3b>
c0005179:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000517d:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005181:	c1 e1 09             	shl    ecx,0x9
c0005184:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005187:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000518b:	0f 95 c0             	setne  al
c000518e:	0f b6 c0             	movzx  eax,al
c0005191:	89 c7                	mov    edi,eax
c0005193:	31 d2                	xor    edx,edx
c0005195:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005199:	f7 f1                	div    ecx
c000519b:	01 f8                	add    eax,edi
c000519d:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051a4:	83 ff 01             	cmp    edi,0x1
c00051a7:	76 05                	jbe    c00051ae <f_expand+0x86>
c00051a9:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051ac:	77 05                	ja     c00051b3 <f_expand+0x8b>
c00051ae:	bf 02 00 00 00       	mov    edi,0x2
c00051b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051b6:	89 fd                	mov    ebp,edi
c00051b8:	31 c9                	xor    ecx,ecx
c00051ba:	89 ea                	mov    edx,ebp
c00051bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051be:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051c2:	e8 3d df ff ff       	call   c0003104 <get_fat.isra.2>
c00051c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051cb:	45                   	inc    ebp
c00051cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051d0:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051d3:	77 05                	ja     c00051da <f_expand+0xb2>
c00051d5:	bd 02 00 00 00       	mov    ebp,0x2
c00051da:	83 f8 01             	cmp    eax,0x1
c00051dd:	74 20                	je     c00051ff <f_expand+0xd7>
c00051df:	83 f8 ff             	cmp    eax,0xffffffff
c00051e2:	74 22                	je     c0005206 <f_expand+0xde>
c00051e4:	85 c0                	test   eax,eax
c00051e6:	75 09                	jne    c00051f1 <f_expand+0xc9>
c00051e8:	41                   	inc    ecx
c00051e9:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051ed:	75 07                	jne    c00051f6 <f_expand+0xce>
c00051ef:	eb 1c                	jmp    c000520d <f_expand+0xe5>
c00051f1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00051f4:	31 c9                	xor    ecx,ecx
c00051f6:	39 fd                	cmp    ebp,edi
c00051f8:	75 c0                	jne    c00051ba <f_expand+0x92>
c00051fa:	e9 64 ff ff ff       	jmp    c0005163 <f_expand+0x3b>
c00051ff:	be 02 00 00 00       	mov    esi,0x2
c0005204:	eb 78                	jmp    c000527e <f_expand+0x156>
c0005206:	be 01 00 00 00       	mov    esi,0x1
c000520b:	eb 71                	jmp    c000527e <f_expand+0x156>
c000520d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005212:	74 2b                	je     c000523f <f_expand+0x117>
c0005214:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005217:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000521b:	85 ed                	test   ebp,ebp
c000521d:	74 24                	je     c0005243 <f_expand+0x11b>
c000521f:	83 c9 ff             	or     ecx,0xffffffff
c0005222:	83 fd 01             	cmp    ebp,0x1
c0005225:	74 03                	je     c000522a <f_expand+0x102>
c0005227:	8d 4f 01             	lea    ecx,[edi+0x1]
c000522a:	89 fa                	mov    edx,edi
c000522c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005230:	e8 6d d4 ff ff       	call   c00026a2 <put_fat>
c0005235:	85 c0                	test   eax,eax
c0005237:	75 43                	jne    c000527c <f_expand+0x154>
c0005239:	89 f8                	mov    eax,edi
c000523b:	4d                   	dec    ebp
c000523c:	47                   	inc    edi
c000523d:	eb dc                	jmp    c000521b <f_expand+0xf3>
c000523f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005242:	48                   	dec    eax
c0005243:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005247:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000524c:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000524f:	74 2d                	je     c000527e <f_expand+0x156>
c0005251:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005255:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005258:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000525b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000525f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005262:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005265:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005268:	8d 4b fe             	lea    ecx,[ebx-0x2]
c000526b:	39 c8                	cmp    eax,ecx
c000526d:	77 0f                	ja     c000527e <f_expand+0x156>
c000526f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005273:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005277:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000527a:	eb 02                	jmp    c000527e <f_expand+0x156>
c000527c:	89 c6                	mov    esi,eax
c000527e:	83 c4 2c             	add    esp,0x2c
c0005281:	89 f0                	mov    eax,esi
c0005283:	5b                   	pop    ebx
c0005284:	5e                   	pop    esi
c0005285:	5f                   	pop    edi
c0005286:	5d                   	pop    ebp
c0005287:	c3                   	ret    

c0005288 <f_mkfs>:
c0005288:	55                   	push   ebp
c0005289:	57                   	push   edi
c000528a:	bf 0b 00 00 00       	mov    edi,0xb
c000528f:	56                   	push   esi
c0005290:	53                   	push   ebx
c0005291:	83 ec 4c             	sub    esp,0x4c
c0005294:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005298:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c000529c:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a0:	e8 b5 ce ff ff       	call   c000215a <get_ldnumber>
c00052a5:	85 c0                	test   eax,eax
c00052a7:	0f 88 a6 07 00 00    	js     c0005a53 <f_mkfs+0x7cb>
c00052ad:	8b 14 85 a0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb60]
c00052b4:	85 d2                	test   edx,edx
c00052b6:	74 03                	je     c00052bb <f_mkfs+0x33>
c00052b8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052bb:	85 db                	test   ebx,ebx
c00052bd:	75 05                	jne    c00052c4 <f_mkfs+0x3c>
c00052bf:	bb 40 ed 01 c0       	mov    ebx,0xc001ed40
c00052c4:	0f b6 c0             	movzx  eax,al
c00052c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00052cb:	83 ec 0c             	sub    esp,0xc
c00052ce:	bf 03 00 00 00       	mov    edi,0x3
c00052d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052d7:	e8 01 ca ff ff       	call   c0001cdd <disk_initialize>
c00052dc:	83 c4 10             	add    esp,0x10
c00052df:	a8 01                	test   al,0x1
c00052e1:	0f 85 6c 07 00 00    	jne    c0005a53 <f_mkfs+0x7cb>
c00052e7:	bf 0a 00 00 00       	mov    edi,0xa
c00052ec:	a8 04                	test   al,0x4
c00052ee:	0f 85 5f 07 00 00    	jne    c0005a53 <f_mkfs+0x7cb>
c00052f4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00052f7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00052fb:	85 c0                	test   eax,eax
c00052fd:	75 20                	jne    c000531f <f_mkfs+0x97>
c00052ff:	51                   	push   ecx
c0005300:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005304:	50                   	push   eax
c0005305:	6a 03                	push   0x3
c0005307:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000530b:	e8 fc c9 ff ff       	call   c0001d0c <disk_ioctl>
c0005310:	83 c4 10             	add    esp,0x10
c0005313:	85 c0                	test   eax,eax
c0005315:	74 08                	je     c000531f <f_mkfs+0x97>
c0005317:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000531f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005323:	8d 42 ff             	lea    eax,[edx-0x1]
c0005326:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000532b:	77 04                	ja     c0005331 <f_mkfs+0xa9>
c000532d:	85 c2                	test   edx,eax
c000532f:	74 08                	je     c0005339 <f_mkfs+0xb1>
c0005331:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005339:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000533c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0005340:	48                   	dec    eax
c0005341:	3c 01                	cmp    al,0x1
c0005343:	76 05                	jbe    c000534a <f_mkfs+0xc2>
c0005345:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c000534a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000534d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005351:	48                   	dec    eax
c0005352:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005357:	77 07                	ja     c0005360 <f_mkfs+0xd8>
c0005359:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000535e:	74 08                	je     c0005368 <f_mkfs+0xe0>
c0005360:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005368:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000536b:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005371:	77 07                	ja     c000537a <f_mkfs+0xf2>
c0005373:	8d 47 ff             	lea    eax,[edi-0x1]
c0005376:	85 f8                	test   eax,edi
c0005378:	74 02                	je     c000537c <f_mkfs+0xf4>
c000537a:	31 ff                	xor    edi,edi
c000537c:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005384:	77 0a                	ja     c0005390 <f_mkfs+0x108>
c0005386:	bf 11 00 00 00       	mov    edi,0x11
c000538b:	e9 c3 06 00 00       	jmp    c0005a53 <f_mkfs+0x7cb>
c0005390:	8a 1b                	mov    bl,BYTE PTR [ebx]
c0005392:	89 ee                	mov    esi,ebp
c0005394:	85 ed                	test   ebp,ebp
c0005396:	75 1b                	jne    c00053b3 <f_mkfs+0x12b>
c0005398:	83 ec 0c             	sub    esp,0xc
c000539b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000539f:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053a4:	50                   	push   eax
c00053a5:	e8 b6 06 00 00       	call   c0005a60 <ff_memalloc>
c00053aa:	83 c4 10             	add    esp,0x10
c00053ad:	89 c6                	mov    esi,eax
c00053af:	85 c0                	test   eax,eax
c00053b1:	74 d3                	je     c0005386 <f_mkfs+0xfe>
c00053b3:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053bb:	52                   	push   edx
c00053bc:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053c0:	50                   	push   eax
c00053c1:	6a 01                	push   0x1
c00053c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053c7:	e8 40 c9 ff ff       	call   c0001d0c <disk_ioctl>
c00053cc:	83 c4 10             	add    esp,0x10
c00053cf:	85 c0                	test   eax,eax
c00053d1:	0f 85 25 06 00 00    	jne    c00059fc <f_mkfs+0x774>
c00053d7:	88 d8                	mov    al,bl
c00053d9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053e1:	24 08                	and    al,0x8
c00053e3:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053e7:	75 18                	jne    c0005401 <f_mkfs+0x179>
c00053e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053ed:	83 f8 3f             	cmp    eax,0x3f
c00053f0:	76 0f                	jbe    c0005401 <f_mkfs+0x179>
c00053f2:	83 e8 3f             	sub    eax,0x3f
c00053f5:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c00053fd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005401:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005405:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005409:	83 f8 7f             	cmp    eax,0x7f
c000540c:	0f 86 52 02 00 00    	jbe    c0005664 <f_mkfs+0x3dc>
c0005412:	b9 80 00 00 00       	mov    ecx,0x80
c0005417:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000541d:	77 05                	ja     c0005424 <f_mkfs+0x19c>
c000541f:	89 f9                	mov    ecx,edi
c0005421:	c1 e9 09             	shr    ecx,0x9
c0005424:	88 d8                	mov    al,bl
c0005426:	83 e0 01             	and    eax,0x1
c0005429:	80 e3 02             	and    bl,0x2
c000542c:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c0005430:	74 0a                	je     c000543c <f_mkfs+0x1b4>
c0005432:	84 c0                	test   al,al
c0005434:	0f 84 4c 01 00 00    	je     c0005586 <f_mkfs+0x2fe>
c000543a:	eb 38                	jmp    c0005474 <f_mkfs+0x1ec>
c000543c:	bf 13 00 00 00       	mov    edi,0x13
c0005441:	84 c0                	test   al,al
c0005443:	75 2f                	jne    c0005474 <f_mkfs+0x1ec>
c0005445:	e9 c9 05 00 00       	jmp    c0005a13 <f_mkfs+0x78b>
c000544a:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000544f:	0f 85 08 02 00 00    	jne    c000565d <f_mkfs+0x3d5>
c0005455:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000545a:	0f 86 e1 01 00 00    	jbe    c0005641 <f_mkfs+0x3b9>
c0005460:	85 c9                	test   ecx,ecx
c0005462:	0f 85 bd 05 00 00    	jne    c0005a25 <f_mkfs+0x79d>
c0005468:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000546b:	83 f9 40             	cmp    ecx,0x40
c000546e:	0f 87 c1 05 00 00    	ja     c0005a35 <f_mkfs+0x7ad>
c0005474:	89 cf                	mov    edi,ecx
c0005476:	85 c9                	test   ecx,ecx
c0005478:	75 1d                	jne    c0005497 <f_mkfs+0x20f>
c000547a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000547e:	ba 20 ed 01 c0       	mov    edx,0xc001ed20
c0005483:	c1 eb 0c             	shr    ebx,0xc
c0005486:	bf 01 00 00 00       	mov    edi,0x1
c000548b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000548e:	66 85 c0             	test   ax,ax
c0005491:	0f 85 5f 01 00 00    	jne    c00055f6 <f_mkfs+0x36e>
c0005497:	31 d2                	xor    edx,edx
c0005499:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000549d:	f7 f7                	div    edi
c000549f:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054a4:	0f 86 5e 01 00 00    	jbe    c0005608 <f_mkfs+0x380>
c00054aa:	83 c0 02             	add    eax,0x2
c00054ad:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054b2:	01 c0                	add    eax,eax
c00054b4:	05 ff 01 00 00       	add    eax,0x1ff
c00054b9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054c1:	c1 e8 09             	shr    eax,0x9
c00054c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054cc:	c1 e0 05             	shl    eax,0x5
c00054cf:	c1 e8 09             	shr    eax,0x9
c00054d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054d6:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054e3:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054ef:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c00054f4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00054f8:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00054fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005500:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005504:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005508:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c000550c:	f7 d8                	neg    eax
c000550e:	21 c3                	and    ebx,eax
c0005510:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005514:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005519:	0f 85 fc 00 00 00    	jne    c000561b <f_mkfs+0x393>
c000551f:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005523:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005527:	89 f8                	mov    eax,edi
c0005529:	c1 e0 04             	shl    eax,0x4
c000552c:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005530:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005534:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005538:	0f 82 26 01 00 00    	jb     c0005664 <f_mkfs+0x3dc>
c000553e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005542:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005546:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000554b:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c000554f:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005553:	29 d0                	sub    eax,edx
c0005555:	31 d2                	xor    edx,edx
c0005557:	f7 f7                	div    edi
c0005559:	89 c3                	mov    ebx,eax
c000555b:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005560:	0f 85 e4 fe ff ff    	jne    c000544a <f_mkfs+0x1c2>
c0005566:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000556b:	0f 87 02 01 00 00    	ja     c0005673 <f_mkfs+0x3eb>
c0005571:	85 c9                	test   ecx,ecx
c0005573:	0f 85 eb 00 00 00    	jne    c0005664 <f_mkfs+0x3dc>
c0005579:	83 ff 01             	cmp    edi,0x1
c000557c:	0f 86 e2 00 00 00    	jbe    c0005664 <f_mkfs+0x3dc>
c0005582:	89 f9                	mov    ecx,edi
c0005584:	d1 e9                	shr    ecx,1
c0005586:	89 cb                	mov    ebx,ecx
c0005588:	85 c9                	test   ecx,ecx
c000558a:	75 26                	jne    c00055b2 <f_mkfs+0x32a>
c000558c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0005590:	ba 30 ed 01 c0       	mov    edx,0xc001ed30
c0005595:	c1 eb 11             	shr    ebx,0x11
c0005598:	b9 01 00 00 00       	mov    ecx,0x1
c000559d:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055a0:	66 85 c0             	test   ax,ax
c00055a3:	74 0b                	je     c00055b0 <f_mkfs+0x328>
c00055a5:	83 c2 02             	add    edx,0x2
c00055a8:	39 d8                	cmp    eax,ebx
c00055aa:	77 04                	ja     c00055b0 <f_mkfs+0x328>
c00055ac:	01 c9                	add    ecx,ecx
c00055ae:	eb ed                	jmp    c000559d <f_mkfs+0x315>
c00055b0:	31 db                	xor    ebx,ebx
c00055b2:	31 d2                	xor    edx,edx
c00055b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055b8:	f7 f1                	div    ecx
c00055ba:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055c1:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055c6:	c1 ea 09             	shr    edx,0x9
c00055c9:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055ce:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055d2:	0f 87 8c 00 00 00    	ja     c0005664 <f_mkfs+0x3dc>
c00055d8:	89 cf                	mov    edi,ecx
c00055da:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055e2:	89 d9                	mov    ecx,ebx
c00055e4:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055ec:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055f1:	e9 e0 fe ff ff       	jmp    c00054d6 <f_mkfs+0x24e>
c00055f6:	83 c2 02             	add    edx,0x2
c00055f9:	39 d8                	cmp    eax,ebx
c00055fb:	0f 87 96 fe ff ff    	ja     c0005497 <f_mkfs+0x20f>
c0005601:	01 ff                	add    edi,edi
c0005603:	e9 83 fe ff ff       	jmp    c000548b <f_mkfs+0x203>
c0005608:	8d 04 40             	lea    eax,[eax+eax*2]
c000560b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005610:	40                   	inc    eax
c0005611:	d1 e8                	shr    eax,1
c0005613:	83 c0 03             	add    eax,0x3
c0005616:	e9 99 fe ff ff       	jmp    c00054b4 <f_mkfs+0x22c>
c000561b:	31 d2                	xor    edx,edx
c000561d:	89 d8                	mov    eax,ebx
c000561f:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005623:	85 d2                	test   edx,edx
c0005625:	74 09                	je     c0005630 <f_mkfs+0x3a8>
c0005627:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000562b:	4b                   	dec    ebx
c000562c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0005630:	89 d8                	mov    eax,ebx
c0005632:	31 d2                	xor    edx,edx
c0005634:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005638:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c000563c:	e9 e6 fe ff ff       	jmp    c0005527 <f_mkfs+0x29f>
c0005641:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005646:	77 2b                	ja     c0005673 <f_mkfs+0x3eb>
c0005648:	85 c9                	test   ecx,ecx
c000564a:	75 18                	jne    c0005664 <f_mkfs+0x3dc>
c000564c:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000564f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005655:	0f 86 19 fe ff ff    	jbe    c0005474 <f_mkfs+0x1ec>
c000565b:	eb 07                	jmp    c0005664 <f_mkfs+0x3dc>
c000565d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005662:	76 0a                	jbe    c000566e <f_mkfs+0x3e6>
c0005664:	bf 0e 00 00 00       	mov    edi,0xe
c0005669:	e9 a5 03 00 00       	jmp    c0005a13 <f_mkfs+0x78b>
c000566e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005673:	31 d2                	xor    edx,edx
c0005675:	b9 00 02 00 00       	mov    ecx,0x200
c000567a:	89 f0                	mov    eax,esi
c000567c:	e8 eb c6 ff ff       	call   c0001d6c <mem_set>
c0005681:	b9 0b 00 00 00       	mov    ecx,0xb
c0005686:	ba d2 ec 01 c0       	mov    edx,0xc001ecd2
c000568b:	89 f0                	mov    eax,esi
c000568d:	e8 c5 c6 ff ff       	call   c0001d57 <mem_cpy>
c0005692:	8d 46 0b             	lea    eax,[esi+0xb]
c0005695:	ba 00 02 00 00       	mov    edx,0x200
c000569a:	e8 b1 c6 ff ff       	call   c0001d50 <st_word>
c000569f:	89 f8                	mov    eax,edi
c00056a1:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056a6:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056a9:	8d 46 0e             	lea    eax,[esi+0xe]
c00056ac:	e8 9f c6 ff ff       	call   c0001d50 <st_word>
c00056b1:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056b5:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056b8:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056bd:	75 08                	jne    c00056c7 <f_mkfs+0x43f>
c00056bf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056cb:	8d 46 11             	lea    eax,[esi+0x11]
c00056ce:	e8 7d c6 ff ff       	call   c0001d50 <st_word>
c00056d3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056d7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056dd:	77 0a                	ja     c00056e9 <f_mkfs+0x461>
c00056df:	8d 46 13             	lea    eax,[esi+0x13]
c00056e2:	e8 69 c6 ff ff       	call   c0001d50 <st_word>
c00056e7:	eb 08                	jmp    c00056f1 <f_mkfs+0x469>
c00056e9:	8d 46 20             	lea    eax,[esi+0x20]
c00056ec:	e8 63 c6 ff ff       	call   c0001d54 <st_dword>
c00056f1:	8d 46 18             	lea    eax,[esi+0x18]
c00056f4:	ba 3f 00 00 00       	mov    edx,0x3f
c00056f9:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c00056fd:	e8 4e c6 ff ff       	call   c0001d50 <st_word>
c0005702:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005705:	ba ff 00 00 00       	mov    edx,0xff
c000570a:	e8 41 c6 ff ff       	call   c0001d50 <st_word>
c000570f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005712:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005716:	e8 39 c6 ff ff       	call   c0001d54 <st_dword>
c000571b:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005720:	75 57                	jne    c0005779 <f_mkfs+0x4f1>
c0005722:	8d 46 43             	lea    eax,[esi+0x43]
c0005725:	ba 00 00 21 50       	mov    edx,0x50210000
c000572a:	e8 25 c6 ff ff       	call   c0001d54 <st_dword>
c000572f:	8d 46 24             	lea    eax,[esi+0x24]
c0005732:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005736:	e8 19 c6 ff ff       	call   c0001d54 <st_dword>
c000573b:	8d 46 2c             	lea    eax,[esi+0x2c]
c000573e:	ba 02 00 00 00       	mov    edx,0x2
c0005743:	e8 0c c6 ff ff       	call   c0001d54 <st_dword>
c0005748:	8d 46 30             	lea    eax,[esi+0x30]
c000574b:	ba 01 00 00 00       	mov    edx,0x1
c0005750:	e8 fb c5 ff ff       	call   c0001d50 <st_word>
c0005755:	8d 46 32             	lea    eax,[esi+0x32]
c0005758:	ba 06 00 00 00       	mov    edx,0x6
c000575d:	e8 ee c5 ff ff       	call   c0001d50 <st_word>
c0005762:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005766:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c000576a:	8d 46 47             	lea    eax,[esi+0x47]
c000576d:	b9 13 00 00 00       	mov    ecx,0x13
c0005772:	ba de ec 01 c0       	mov    edx,0xc001ecde
c0005777:	eb 2f                	jmp    c00057a8 <f_mkfs+0x520>
c0005779:	8d 46 27             	lea    eax,[esi+0x27]
c000577c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005781:	e8 ce c5 ff ff       	call   c0001d54 <st_dword>
c0005786:	8d 46 16             	lea    eax,[esi+0x16]
c0005789:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c000578e:	e8 bd c5 ff ff       	call   c0001d50 <st_word>
c0005793:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c0005797:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c000579b:	8d 46 2b             	lea    eax,[esi+0x2b]
c000579e:	b9 13 00 00 00       	mov    ecx,0x13
c00057a3:	ba f2 ec 01 c0       	mov    edx,0xc001ecf2
c00057a8:	e8 aa c5 ff ff       	call   c0001d57 <mem_cpy>
c00057ad:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057b3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057bc:	e8 8f c5 ff ff       	call   c0001d50 <st_word>
c00057c1:	6a 01                	push   0x1
c00057c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057c7:	56                   	push   esi
c00057c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057cc:	e8 25 c5 ff ff       	call   c0001cf6 <disk_write>
c00057d1:	83 c4 10             	add    esp,0x10
c00057d4:	85 c0                	test   eax,eax
c00057d6:	0f 85 20 02 00 00    	jne    c00059fc <f_mkfs+0x774>
c00057dc:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057e1:	0f 85 98 00 00 00    	jne    c000587f <f_mkfs+0x5f7>
c00057e7:	6a 01                	push   0x1
c00057e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057ed:	83 c0 06             	add    eax,0x6
c00057f0:	50                   	push   eax
c00057f1:	56                   	push   esi
c00057f2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f6:	e8 fb c4 ff ff       	call   c0001cf6 <disk_write>
c00057fb:	b9 00 02 00 00       	mov    ecx,0x200
c0005800:	31 d2                	xor    edx,edx
c0005802:	89 f0                	mov    eax,esi
c0005804:	e8 63 c5 ff ff       	call   c0001d6c <mem_set>
c0005809:	ba 52 52 61 41       	mov    edx,0x41615252
c000580e:	89 f0                	mov    eax,esi
c0005810:	e8 3f c5 ff ff       	call   c0001d54 <st_dword>
c0005815:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c000581b:	ba 72 72 41 61       	mov    edx,0x61417272
c0005820:	e8 2f c5 ff ff       	call   c0001d54 <st_dword>
c0005825:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005828:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000582e:	e8 21 c5 ff ff       	call   c0001d54 <st_dword>
c0005833:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005839:	ba 02 00 00 00       	mov    edx,0x2
c000583e:	e8 11 c5 ff ff       	call   c0001d54 <st_dword>
c0005843:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005848:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000584e:	e8 fd c4 ff ff       	call   c0001d50 <st_word>
c0005853:	6a 01                	push   0x1
c0005855:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005859:	83 c0 07             	add    eax,0x7
c000585c:	50                   	push   eax
c000585d:	56                   	push   esi
c000585e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005862:	e8 8f c4 ff ff       	call   c0001cf6 <disk_write>
c0005867:	83 c4 20             	add    esp,0x20
c000586a:	6a 01                	push   0x1
c000586c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005870:	40                   	inc    eax
c0005871:	50                   	push   eax
c0005872:	56                   	push   esi
c0005873:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005877:	e8 7a c4 ff ff       	call   c0001cf6 <disk_write>
c000587c:	83 c4 10             	add    esp,0x10
c000587f:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005883:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005887:	c1 e8 09             	shr    eax,0x9
c000588a:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005890:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005894:	31 d2                	xor    edx,edx
c0005896:	31 db                	xor    ebx,ebx
c0005898:	89 f0                	mov    eax,esi
c000589a:	e8 cd c4 ff ff       	call   c0001d6c <mem_set>
c000589f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058a7:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058ac:	0f 94 c3             	sete   bl
c00058af:	4b                   	dec    ebx
c00058b0:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058b6:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058bc:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058c1:	75 21                	jne    c00058e4 <f_mkfs+0x65c>
c00058c3:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058c8:	89 f0                	mov    eax,esi
c00058ca:	e8 85 c4 ff ff       	call   c0001d54 <st_dword>
c00058cf:	8d 46 04             	lea    eax,[esi+0x4]
c00058d2:	83 ca ff             	or     edx,0xffffffff
c00058d5:	e8 7a c4 ff ff       	call   c0001d54 <st_dword>
c00058da:	8d 46 08             	lea    eax,[esi+0x8]
c00058dd:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058e2:	eb 04                	jmp    c00058e8 <f_mkfs+0x660>
c00058e4:	89 da                	mov    edx,ebx
c00058e6:	89 f0                	mov    eax,esi
c00058e8:	e8 67 c4 ff ff       	call   c0001d54 <st_dword>
c00058ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00058f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00058fd:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005901:	76 08                	jbe    c000590b <f_mkfs+0x683>
c0005903:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005907:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000590f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005913:	56                   	push   esi
c0005914:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005918:	e8 d9 c3 ff ff       	call   c0001cf6 <disk_write>
c000591d:	83 c4 10             	add    esp,0x10
c0005920:	85 c0                	test   eax,eax
c0005922:	0f 85 d4 00 00 00    	jne    c00059fc <f_mkfs+0x774>
c0005928:	b9 00 02 00 00       	mov    ecx,0x200
c000592d:	31 d2                	xor    edx,edx
c000592f:	89 f0                	mov    eax,esi
c0005931:	e8 36 c4 ff ff       	call   c0001d6c <mem_set>
c0005936:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000593a:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000593e:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c0005942:	75 b1                	jne    c00058f5 <f_mkfs+0x66d>
c0005944:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005948:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0005950:	40                   	inc    eax
c0005951:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005955:	0f 87 61 ff ff ff    	ja     c00058bc <f_mkfs+0x634>
c000595b:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005960:	74 04                	je     c0005966 <f_mkfs+0x6de>
c0005962:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005966:	89 fb                	mov    ebx,edi
c0005968:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c000596c:	76 04                	jbe    c0005972 <f_mkfs+0x6ea>
c000596e:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0005972:	53                   	push   ebx
c0005973:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005977:	56                   	push   esi
c0005978:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000597c:	e8 75 c3 ff ff       	call   c0001cf6 <disk_write>
c0005981:	83 c4 10             	add    esp,0x10
c0005984:	85 c0                	test   eax,eax
c0005986:	75 74                	jne    c00059fc <f_mkfs+0x774>
c0005988:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c000598c:	29 df                	sub    edi,ebx
c000598e:	75 d6                	jne    c0005966 <f_mkfs+0x6de>
c0005990:	b1 0c                	mov    cl,0xc
c0005992:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005997:	74 18                	je     c00059b1 <f_mkfs+0x729>
c0005999:	b1 06                	mov    cl,0x6
c000599b:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059a3:	77 0c                	ja     c00059b1 <f_mkfs+0x729>
c00059a5:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059aa:	0f 94 c1             	sete   cl
c00059ad:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059b1:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059b6:	75 2d                	jne    c00059e5 <f_mkfs+0x75d>
c00059b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059bc:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059c4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059c8:	83 ec 0c             	sub    esp,0xc
c00059cb:	0f b6 c9             	movzx  ecx,cl
c00059ce:	56                   	push   esi
c00059cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059d3:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059d7:	e8 45 d3 ff ff       	call   c0002d21 <create_partition>
c00059dc:	83 c4 10             	add    esp,0x10
c00059df:	89 c7                	mov    edi,eax
c00059e1:	85 c0                	test   eax,eax
c00059e3:	75 2e                	jne    c0005a13 <f_mkfs+0x78b>
c00059e5:	50                   	push   eax
c00059e6:	31 ff                	xor    edi,edi
c00059e8:	6a 00                	push   0x0
c00059ea:	6a 00                	push   0x0
c00059ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059f0:	e8 17 c3 ff ff       	call   c0001d0c <disk_ioctl>
c00059f5:	83 c4 10             	add    esp,0x10
c00059f8:	85 c0                	test   eax,eax
c00059fa:	74 17                	je     c0005a13 <f_mkfs+0x78b>
c00059fc:	85 ed                	test   ebp,ebp
c00059fe:	75 0c                	jne    c0005a0c <f_mkfs+0x784>
c0005a00:	83 ec 0c             	sub    esp,0xc
c0005a03:	56                   	push   esi
c0005a04:	e8 6f 00 00 00       	call   c0005a78 <ff_memfree>
c0005a09:	83 c4 10             	add    esp,0x10
c0005a0c:	bf 01 00 00 00       	mov    edi,0x1
c0005a11:	eb 40                	jmp    c0005a53 <f_mkfs+0x7cb>
c0005a13:	85 ed                	test   ebp,ebp
c0005a15:	75 3c                	jne    c0005a53 <f_mkfs+0x7cb>
c0005a17:	83 ec 0c             	sub    esp,0xc
c0005a1a:	56                   	push   esi
c0005a1b:	e8 58 00 00 00       	call   c0005a78 <ff_memfree>
c0005a20:	83 c4 10             	add    esp,0x10
c0005a23:	eb 2e                	jmp    c0005a53 <f_mkfs+0x7cb>
c0005a25:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a2a:	0f 85 56 fb ff ff    	jne    c0005586 <f_mkfs+0x2fe>
c0005a30:	e9 2f fc ff ff       	jmp    c0005664 <f_mkfs+0x3dc>
c0005a35:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a3a:	0f 85 4c fb ff ff    	jne    c000558c <f_mkfs+0x304>
c0005a40:	89 cf                	mov    edi,ecx
c0005a42:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a48:	0f 86 49 fa ff ff    	jbe    c0005497 <f_mkfs+0x20f>
c0005a4e:	e9 11 fc ff ff       	jmp    c0005664 <f_mkfs+0x3dc>
c0005a53:	83 c4 4c             	add    esp,0x4c
c0005a56:	89 f8                	mov    eax,edi
c0005a58:	5b                   	pop    ebx
c0005a59:	5e                   	pop    esi
c0005a5a:	5f                   	pop    edi
c0005a5b:	5d                   	pop    ebp
c0005a5c:	c3                   	ret    
c0005a5d:	66 90                	xchg   ax,ax
c0005a5f:	90                   	nop

c0005a60 <ff_memalloc>:
c0005a60:	83 ec 0c             	sub    esp,0xc
c0005a63:	83 ec 0c             	sub    esp,0xc
c0005a66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a6a:	e8 f4 1d 00 00       	call   c0007863 <malloc>
c0005a6f:	83 c4 10             	add    esp,0x10
c0005a72:	83 c4 0c             	add    esp,0xc
c0005a75:	c3                   	ret    
c0005a76:	66 90                	xchg   ax,ax

c0005a78 <ff_memfree>:
c0005a78:	83 ec 0c             	sub    esp,0xc
c0005a7b:	83 ec 0c             	sub    esp,0xc
c0005a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a82:	e8 ec 1d 00 00       	call   c0007873 <free>
c0005a87:	83 c4 10             	add    esp,0x10
c0005a8a:	90                   	nop
c0005a8b:	83 c4 0c             	add    esp,0xc
c0005a8e:	c3                   	ret    
c0005a8f:	90                   	nop

c0005a90 <ff_uni2oem>:
c0005a90:	83 ec 14             	sub    esp,0x14
c0005a93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005a97:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005a9b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aa2:	c7 44 24 0c 20 f1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f120
c0005aaa:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005aaf:	77 0b                	ja     c0005abc <ff_uni2oem+0x2c>
c0005ab1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab5:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aba:	eb 68                	jmp    c0005b24 <ff_uni2oem+0x94>
c0005abc:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ac4:	77 5e                	ja     c0005b24 <ff_uni2oem+0x94>
c0005ac6:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005acc:	75 56                	jne    c0005b24 <ff_uni2oem+0x94>
c0005ace:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ad5:	eb 0d                	jmp    c0005ae4 <ff_uni2oem+0x54>
c0005ad7:	90                   	nop
c0005ad8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005add:	40                   	inc    eax
c0005ade:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ae3:	90                   	nop
c0005ae4:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005aea:	77 24                	ja     c0005b10 <ff_uni2oem+0x80>
c0005aec:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005af1:	25 ff ff 00 00       	and    eax,0xffff
c0005af6:	8d 14 00             	lea    edx,[eax+eax*1]
c0005af9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005afd:	01 d0                	add    eax,edx
c0005aff:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b02:	25 ff ff 00 00       	and    eax,0xffff
c0005b07:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b0b:	75 cb                	jne    c0005ad8 <ff_uni2oem+0x48>
c0005b0d:	8d 76 00             	lea    esi,[esi+0x0]
c0005b10:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b15:	83 e8 80             	sub    eax,0xffffff80
c0005b18:	25 ff 00 00 00       	and    eax,0xff
c0005b1d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b22:	66 90                	xchg   ax,ax
c0005b24:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b29:	83 c4 14             	add    esp,0x14
c0005b2c:	c3                   	ret    
c0005b2d:	8d 76 00             	lea    esi,[esi+0x0]

c0005b30 <ff_oem2uni>:
c0005b30:	83 ec 18             	sub    esp,0x18
c0005b33:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b3b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b40:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b44:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b4b:	c7 44 24 10 20 f1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f120
c0005b53:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b59:	77 0d                	ja     c0005b68 <ff_oem2uni+0x38>
c0005b5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b5f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b64:	eb 32                	jmp    c0005b98 <ff_oem2uni+0x68>
c0005b66:	66 90                	xchg   ax,ax
c0005b68:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b6e:	75 28                	jne    c0005b98 <ff_oem2uni+0x68>
c0005b70:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b77:	77 1f                	ja     c0005b98 <ff_oem2uni+0x68>
c0005b79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b7d:	25 ff ff 00 00       	and    eax,0xffff
c0005b82:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b87:	8d 14 00             	lea    edx,[eax+eax*1]
c0005b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b8e:	01 d0                	add    eax,edx
c0005b90:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b93:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b98:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005b9d:	83 c4 18             	add    esp,0x18
c0005ba0:	c3                   	ret    
c0005ba1:	8d 76 00             	lea    esi,[esi+0x0]

c0005ba4 <ff_wtoupper>:
c0005ba4:	83 ec 10             	sub    esp,0x10
c0005ba7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005baf:	0f 87 77 01 00 00    	ja     c0005d2c <ff_wtoupper+0x188>
c0005bb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bb9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bbe:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bc5:	77 09                	ja     c0005bd0 <ff_wtoupper+0x2c>
c0005bc7:	b8 20 ef 01 c0       	mov    eax,0xc001ef20
c0005bcc:	eb 0a                	jmp    c0005bd8 <ff_wtoupper+0x34>
c0005bce:	66 90                	xchg   ax,ax
c0005bd0:	b8 60 ee 01 c0       	mov    eax,0xc001ee60
c0005bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005be0:	8d 50 02             	lea    edx,[eax+0x2]
c0005be3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005be7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bea:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bef:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005bf5:	0f 84 21 01 00 00    	je     c0005d1c <ff_wtoupper+0x178>
c0005bfb:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c00:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c05:	0f 82 11 01 00 00    	jb     c0005d1c <ff_wtoupper+0x178>
c0005c0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c0f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c16:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c19:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c1e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c23:	66 c1 e8 08          	shr    ax,0x8
c0005c27:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c2c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c33:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c38:	31 d2                	xor    edx,edx
c0005c3a:	66 89 c2             	mov    dx,ax
c0005c3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c41:	31 c9                	xor    ecx,ecx
c0005c43:	66 89 c1             	mov    cx,ax
c0005c46:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c4b:	25 ff ff 00 00       	and    eax,0xffff
c0005c50:	01 c8                	add    eax,ecx
c0005c52:	39 c2                	cmp    edx,eax
c0005c54:	0f 8d 9a 00 00 00    	jge    c0005cf4 <ff_wtoupper+0x150>
c0005c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c5e:	25 ff ff 00 00       	and    eax,0xffff
c0005c63:	83 f8 08             	cmp    eax,0x8
c0005c66:	0f 87 ac 00 00 00    	ja     c0005d18 <ff_wtoupper+0x174>
c0005c6c:	8b 04 85 20 ee 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe11e0]
c0005c73:	ff e0                	jmp    eax
c0005c75:	8d 76 00             	lea    esi,[esi+0x0]
c0005c78:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c7d:	31 d2                	xor    edx,edx
c0005c7f:	66 89 c2             	mov    dx,ax
c0005c82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c86:	25 ff ff 00 00       	and    eax,0xffff
c0005c8b:	29 c2                	sub    edx,eax
c0005c8d:	89 d0                	mov    eax,edx
c0005c8f:	8d 14 00             	lea    edx,[eax+eax*1]
c0005c92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c96:	01 d0                	add    eax,edx
c0005c98:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c9b:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ca0:	eb 4e                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ca2:	66 90                	xchg   ax,ax
c0005ca4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ca9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cad:	83 e0 01             	and    eax,0x1
c0005cb0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cb5:	eb 39                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cb7:	90                   	nop
c0005cb8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cbe:	eb 30                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cc0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cc6:	eb 28                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cc8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cce:	eb 20                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005cd6:	eb 18                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cd8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cde:	eb 10                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005ce6:	eb 08                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ce8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cef:	90                   	nop
c0005cf0:	eb 26                	jmp    c0005d18 <ff_wtoupper+0x174>
c0005cf2:	66 90                	xchg   ax,ax
c0005cf4:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005cfa:	0f 85 dc fe ff ff    	jne    c0005bdc <ff_wtoupper+0x38>
c0005d00:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d05:	25 ff ff 00 00       	and    eax,0xffff
c0005d0a:	01 c0                	add    eax,eax
c0005d0c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d10:	e9 c7 fe ff ff       	jmp    c0005bdc <ff_wtoupper+0x38>
c0005d15:	8d 76 00             	lea    esi,[esi+0x0]
c0005d18:	90                   	nop
c0005d19:	8d 76 00             	lea    esi,[esi+0x0]
c0005d1c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d21:	25 ff ff 00 00       	and    eax,0xffff
c0005d26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d2a:	66 90                	xchg   ax,ax
c0005d2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d30:	83 c4 10             	add    esp,0x10
c0005d33:	c3                   	ret    

c0005d34 <utf2ucs>:
c0005d34:	57                   	push   edi
c0005d35:	31 c9                	xor    ecx,ecx
c0005d37:	56                   	push   esi
c0005d38:	89 d7                	mov    edi,edx
c0005d3a:	53                   	push   ebx
c0005d3b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d3f:	89 de                	mov    esi,ebx
c0005d41:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d45:	c1 fe 08             	sar    esi,0x8
c0005d48:	89 f2                	mov    edx,esi
c0005d4a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d4d:	41                   	inc    ecx
c0005d4e:	85 db                	test   ebx,ebx
c0005d50:	75 e9                	jne    c0005d3b <utf2ucs+0x7>
c0005d52:	5b                   	pop    ebx
c0005d53:	5e                   	pop    esi
c0005d54:	5f                   	pop    edi
c0005d55:	c3                   	ret    

c0005d56 <ucs2utfn>:
c0005d56:	83 e1 fe             	and    ecx,0xfffffffe
c0005d59:	01 d1                	add    ecx,edx
c0005d5b:	39 d1                	cmp    ecx,edx
c0005d5d:	75 04                	jne    c0005d63 <ucs2utfn+0xd>
c0005d5f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d62:	c3                   	ret    
c0005d63:	57                   	push   edi
c0005d64:	56                   	push   esi
c0005d65:	53                   	push   ebx
c0005d66:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d69:	83 c2 02             	add    edx,0x2
c0005d6c:	89 de                	mov    esi,ebx
c0005d6e:	c1 e6 08             	shl    esi,0x8
c0005d71:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d75:	09 f3                	or     ebx,esi
c0005d77:	83 fb 3b             	cmp    ebx,0x3b
c0005d7a:	74 51                	je     c0005dcd <ucs2utfn+0x77>
c0005d7c:	83 fb 7f             	cmp    ebx,0x7f
c0005d7f:	7f 05                	jg     c0005d86 <ucs2utfn+0x30>
c0005d81:	88 18                	mov    BYTE PTR [eax],bl
c0005d83:	40                   	inc    eax
c0005d84:	eb 43                	jmp    c0005dc9 <ucs2utfn+0x73>
c0005d86:	89 df                	mov    edi,ebx
c0005d88:	89 de                	mov    esi,ebx
c0005d8a:	c1 fe 06             	sar    esi,0x6
c0005d8d:	83 e7 3f             	and    edi,0x3f
c0005d90:	83 cf 80             	or     edi,0xffffff80
c0005d93:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005d99:	7f 12                	jg     c0005dad <ucs2utfn+0x57>
c0005d9b:	89 f3                	mov    ebx,esi
c0005d9d:	83 c0 02             	add    eax,0x2
c0005da0:	83 cb c0             	or     ebx,0xffffffc0
c0005da3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005da6:	89 fb                	mov    ebx,edi
c0005da8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dab:	eb 1c                	jmp    c0005dc9 <ucs2utfn+0x73>
c0005dad:	c1 fb 0c             	sar    ebx,0xc
c0005db0:	83 e6 3f             	and    esi,0x3f
c0005db3:	83 cb e0             	or     ebx,0xffffffe0
c0005db6:	83 c0 03             	add    eax,0x3
c0005db9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dbc:	89 f3                	mov    ebx,esi
c0005dbe:	83 cb 80             	or     ebx,0xffffff80
c0005dc1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dc4:	89 fb                	mov    ebx,edi
c0005dc6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dc9:	39 d1                	cmp    ecx,edx
c0005dcb:	75 99                	jne    c0005d66 <ucs2utfn+0x10>
c0005dcd:	5b                   	pop    ebx
c0005dce:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dd1:	5e                   	pop    esi
c0005dd2:	5f                   	pop    edi
c0005dd3:	c3                   	ret    

c0005dd4 <isjoliet>:
c0005dd4:	31 d2                	xor    edx,edx
c0005dd6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005dd9:	75 22                	jne    c0005dfd <isjoliet+0x29>
c0005ddb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005ddf:	75 1c                	jne    c0005dfd <isjoliet+0x29>
c0005de1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005de4:	ba 02 00 00 00       	mov    edx,0x2
c0005de9:	3c 43                	cmp    al,0x43
c0005deb:	74 10                	je     c0005dfd <isjoliet+0x29>
c0005ded:	ba 03 00 00 00       	mov    edx,0x3
c0005df2:	3c 45                	cmp    al,0x45
c0005df4:	74 07                	je     c0005dfd <isjoliet+0x29>
c0005df6:	31 d2                	xor    edx,edx
c0005df8:	3c 40                	cmp    al,0x40
c0005dfa:	0f 94 c2             	sete   dl
c0005dfd:	89 d0                	mov    eax,edx
c0005dff:	c3                   	ret    

c0005e00 <htohl_32>:
c0005e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e02:	c3                   	ret    

c0005e03 <iso_733>:
c0005e03:	eb fb                	jmp    c0005e00 <htohl_32>

c0005e05 <bgrad_cache>:
c0005e05:	83 fa 0e             	cmp    edx,0xe
c0005e08:	77 16                	ja     c0005e20 <bgrad_cache+0x1b>
c0005e0a:	53                   	push   ebx
c0005e0b:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e0e:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e12:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e15:	42                   	inc    edx
c0005e16:	83 fa 0f             	cmp    edx,0xf
c0005e19:	75 f3                	jne    c0005e0e <bgrad_cache+0x9>
c0005e1b:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e1e:	5b                   	pop    ebx
c0005e1f:	c3                   	ret    
c0005e20:	c3                   	ret    

c0005e21 <ucscompare>:
c0005e21:	55                   	push   ebp
c0005e22:	57                   	push   edi
c0005e23:	89 c7                	mov    edi,eax
c0005e25:	56                   	push   esi
c0005e26:	89 d6                	mov    esi,edx
c0005e28:	53                   	push   ebx
c0005e29:	31 d2                	xor    edx,edx
c0005e2b:	83 ec 1c             	sub    esp,0x1c
c0005e2e:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e32:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e37:	c1 e3 08             	shl    ebx,0x8
c0005e3a:	09 c3                	or     ebx,eax
c0005e3c:	39 ca                	cmp    edx,ecx
c0005e3e:	7d 42                	jge    c0005e82 <ucscompare+0x61>
c0005e40:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e44:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e49:	c1 e0 08             	shl    eax,0x8
c0005e4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e50:	09 e8                	or     eax,ebp
c0005e52:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e56:	83 f8 3b             	cmp    eax,0x3b
c0005e59:	74 27                	je     c0005e82 <ucscompare+0x61>
c0005e5b:	83 ec 0c             	sub    esp,0xc
c0005e5e:	50                   	push   eax
c0005e5f:	e8 6c aa ff ff       	call   c00008d0 <tolower>
c0005e64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005e67:	89 c5                	mov    ebp,eax
c0005e69:	e8 62 aa ff ff       	call   c00008d0 <tolower>
c0005e6e:	83 c4 10             	add    esp,0x10
c0005e71:	39 c5                	cmp    ebp,eax
c0005e73:	75 20                	jne    c0005e95 <ucscompare+0x74>
c0005e75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005e79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005e7d:	83 c2 02             	add    edx,0x2
c0005e80:	eb ac                	jmp    c0005e2e <ucscompare+0xd>
c0005e82:	83 fb 2f             	cmp    ebx,0x2f
c0005e85:	0f 95 c2             	setne  dl
c0005e88:	31 c0                	xor    eax,eax
c0005e8a:	85 db                	test   ebx,ebx
c0005e8c:	0f 95 c0             	setne  al
c0005e8f:	21 d0                	and    eax,edx
c0005e91:	f7 d8                	neg    eax
c0005e93:	eb 03                	jmp    c0005e98 <ucscompare+0x77>
c0005e95:	83 c8 ff             	or     eax,0xffffffff
c0005e98:	83 c4 1c             	add    esp,0x1c
c0005e9b:	5b                   	pop    ebx
c0005e9c:	5e                   	pop    esi
c0005e9d:	5f                   	pop    edi
c0005e9e:	5d                   	pop    ebp
c0005e9f:	c3                   	ret    

c0005ea0 <fncompare>:
c0005ea0:	55                   	push   ebp
c0005ea1:	57                   	push   edi
c0005ea2:	89 c7                	mov    edi,eax
c0005ea4:	56                   	push   esi
c0005ea5:	89 ce                	mov    esi,ecx
c0005ea7:	53                   	push   ebx
c0005ea8:	31 db                	xor    ebx,ebx
c0005eaa:	83 ec 1c             	sub    esp,0x1c
c0005ead:	39 d3                	cmp    ebx,edx
c0005eaf:	7d 43                	jge    c0005ef4 <fncompare+0x54>
c0005eb1:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005eb5:	3c 3b                	cmp    al,0x3b
c0005eb7:	74 3b                	je     c0005ef4 <fncompare+0x54>
c0005eb9:	3c 2e                	cmp    al,0x2e
c0005ebb:	75 0e                	jne    c0005ecb <fncompare+0x2b>
c0005ebd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005ec0:	39 d9                	cmp    ecx,ebx
c0005ec2:	74 30                	je     c0005ef4 <fncompare+0x54>
c0005ec4:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005ec9:	74 29                	je     c0005ef4 <fncompare+0x54>
c0005ecb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ecf:	83 ec 0c             	sub    esp,0xc
c0005ed2:	50                   	push   eax
c0005ed3:	e8 f8 a9 ff ff       	call   c00008d0 <tolower>
c0005ed8:	89 c5                	mov    ebp,eax
c0005eda:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005ede:	89 04 24             	mov    DWORD PTR [esp],eax
c0005ee1:	e8 ea a9 ff ff       	call   c00008d0 <tolower>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	39 c5                	cmp    ebp,eax
c0005eeb:	75 1d                	jne    c0005f0a <fncompare+0x6a>
c0005eed:	43                   	inc    ebx
c0005eee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005ef2:	eb b9                	jmp    c0005ead <fncompare+0xd>
c0005ef4:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005ef7:	80 fa 2f             	cmp    dl,0x2f
c0005efa:	0f 95 c1             	setne  cl
c0005efd:	31 c0                	xor    eax,eax
c0005eff:	84 d2                	test   dl,dl
c0005f01:	0f 95 c0             	setne  al
c0005f04:	21 c8                	and    eax,ecx
c0005f06:	f7 d8                	neg    eax
c0005f08:	eb 03                	jmp    c0005f0d <fncompare+0x6d>
c0005f0a:	83 c8 ff             	or     eax,0xffffffff
c0005f0d:	83 c4 1c             	add    esp,0x1c
c0005f10:	5b                   	pop    ebx
c0005f11:	5e                   	pop    esi
c0005f12:	5f                   	pop    edi
c0005f13:	5d                   	pop    ebp
c0005f14:	c3                   	ret    

c0005f15 <bclear_cache>:
c0005f15:	83 ec 18             	sub    esp,0x18
c0005f18:	68 20 f2 01 c0       	push   0xc001f220
c0005f1d:	e8 62 2d 01 00       	call   c0018c84 <iso_kprintf>
c0005f22:	83 c4 10             	add    esp,0x10
c0005f25:	31 c0                	xor    eax,eax
c0005f27:	8b 14 85 20 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcfe0]
c0005f2e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f34:	8b 14 85 80 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcf80]
c0005f3b:	40                   	inc    eax
c0005f3c:	83 f8 10             	cmp    eax,0x10
c0005f3f:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f45:	75 e0                	jne    c0005f27 <bclear_cache+0x12>
c0005f47:	83 c4 0c             	add    esp,0xc
c0005f4a:	c3                   	ret    

c0005f4b <bclear>:
c0005f4b:	eb c8                	jmp    c0005f15 <bclear_cache>

c0005f4d <iso_break_all>:
c0005f4d:	83 ec 18             	sub    esp,0x18
c0005f50:	68 2e f2 01 c0       	push   0xc001f22e
c0005f55:	e8 2a 2d 01 00       	call   c0018c84 <iso_kprintf>
c0005f5a:	83 c4 10             	add    esp,0x10
c0005f5d:	31 c0                	xor    eax,eax
c0005f5f:	c7 80 d0 35 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdca30],0x1
c0005f69:	05 94 00 00 00       	add    eax,0x94
c0005f6e:	3d 40 09 00 00       	cmp    eax,0x940
c0005f73:	75 ea                	jne    c0005f5f <iso_break_all+0x12>
c0005f75:	83 c4 0c             	add    esp,0xc
c0005f78:	c3                   	ret    

c0005f79 <isoReadDiscSector>:
c0005f79:	83 ec 0c             	sub    esp,0xc
c0005f7c:	0f be 05 60 30 02 c0 	movsx  eax,BYTE PTR ds:0xc0023060
c0005f83:	50                   	push   eax
c0005f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f90:	e8 93 2c 01 00       	call   c0018c28 <isoReadDiscSectorHelper>
c0005f95:	83 c4 1c             	add    esp,0x1c
c0005f98:	c3                   	ret    

c0005f99 <bread_cache>:
c0005f99:	55                   	push   ebp
c0005f9a:	57                   	push   edi
c0005f9b:	89 d7                	mov    edi,edx
c0005f9d:	56                   	push   esi
c0005f9e:	ba 0f 00 00 00       	mov    edx,0xf
c0005fa3:	53                   	push   ebx
c0005fa4:	89 c6                	mov    esi,eax
c0005fa6:	83 ec 0c             	sub    esp,0xc
c0005fa9:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005fac:	39 38                	cmp    DWORD PTR [eax],edi
c0005fae:	74 3c                	je     c0005fec <bread_cache+0x53>
c0005fb0:	4a                   	dec    edx
c0005fb1:	83 fa ff             	cmp    edx,0xffffffff
c0005fb4:	75 f3                	jne    c0005fa9 <bread_cache+0x10>
c0005fb6:	31 db                	xor    ebx,ebx
c0005fb8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fbb:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fbe:	74 08                	je     c0005fc8 <bread_cache+0x2f>
c0005fc0:	43                   	inc    ebx
c0005fc1:	83 fb 10             	cmp    ebx,0x10
c0005fc4:	75 f2                	jne    c0005fb8 <bread_cache+0x1f>
c0005fc6:	31 db                	xor    ebx,ebx
c0005fc8:	50                   	push   eax
c0005fc9:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fcc:	6a 01                	push   0x1
c0005fce:	57                   	push   edi
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	83 c0 04             	add    eax,0x4
c0005fd5:	50                   	push   eax
c0005fd6:	e8 9e ff ff ff       	call   c0005f79 <isoReadDiscSector>
c0005fdb:	83 c4 10             	add    esp,0x10
c0005fde:	83 c9 ff             	or     ecx,0xffffffff
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	78 13                	js     c0005ff8 <bread_cache+0x5f>
c0005fe5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fe8:	89 da                	mov    edx,ebx
c0005fea:	89 38                	mov    DWORD PTR [eax],edi
c0005fec:	89 f0                	mov    eax,esi
c0005fee:	e8 12 fe ff ff       	call   c0005e05 <bgrad_cache>
c0005ff3:	b9 0f 00 00 00       	mov    ecx,0xf
c0005ff8:	83 c4 0c             	add    esp,0xc
c0005ffb:	89 c8                	mov    eax,ecx
c0005ffd:	5b                   	pop    ebx
c0005ffe:	5e                   	pop    esi
c0005fff:	5f                   	pop    edi
c0006000:	5d                   	pop    ebp
c0006001:	c3                   	ret    

c0006002 <biread>:
c0006002:	89 c2                	mov    edx,eax
c0006004:	b8 80 30 02 c0       	mov    eax,0xc0023080
c0006009:	eb 8e                	jmp    c0005f99 <bread_cache>

c000600b <bdread>:
c000600b:	89 c2                	mov    edx,eax
c000600d:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0006012:	eb 85                	jmp    c0005f99 <bread_cache>

c0006014 <strnicmp>:
c0006014:	55                   	push   ebp
c0006015:	57                   	push   edi
c0006016:	56                   	push   esi
c0006017:	31 f6                	xor    esi,esi
c0006019:	53                   	push   ebx
c000601a:	83 ec 0c             	sub    esp,0xc
c000601d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0006021:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c0006025:	74 42                	je     c0006069 <strnicmp+0x55>
c0006027:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000602b:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c000602f:	84 c0                	test   al,al
c0006031:	74 36                	je     c0006069 <strnicmp+0x55>
c0006033:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006036:	84 d2                	test   dl,dl
c0006038:	74 2f                	je     c0006069 <strnicmp+0x55>
c000603a:	38 d0                	cmp    al,dl
c000603c:	8d 6e 01             	lea    ebp,[esi+0x1]
c000603f:	75 04                	jne    c0006045 <strnicmp+0x31>
c0006041:	89 ee                	mov    esi,ebp
c0006043:	eb dc                	jmp    c0006021 <strnicmp+0xd>
c0006045:	83 ec 0c             	sub    esp,0xc
c0006048:	50                   	push   eax
c0006049:	e8 82 a8 ff ff       	call   c00008d0 <tolower>
c000604e:	89 c7                	mov    edi,eax
c0006050:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0006054:	89 04 24             	mov    DWORD PTR [esp],eax
c0006057:	e8 74 a8 ff ff       	call   c00008d0 <tolower>
c000605c:	83 c4 10             	add    esp,0x10
c000605f:	29 c7                	sub    edi,eax
c0006061:	89 ee                	mov    esi,ebp
c0006063:	89 f8                	mov    eax,edi
c0006065:	74 ba                	je     c0006021 <strnicmp+0xd>
c0006067:	eb 02                	jmp    c000606b <strnicmp+0x57>
c0006069:	31 c0                	xor    eax,eax
c000606b:	83 c4 0c             	add    esp,0xc
c000606e:	5b                   	pop    ebx
c000606f:	5e                   	pop    esi
c0006070:	5f                   	pop    edi
c0006071:	5d                   	pop    ebp
c0006072:	c3                   	ret    

c0006073 <find_object>:
c0006073:	55                   	push   ebp
c0006074:	89 c5                	mov    ebp,eax
c0006076:	57                   	push   edi
c0006077:	56                   	push   esi
c0006078:	53                   	push   ebx
c0006079:	89 d3                	mov    ebx,edx
c000607b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006081:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006088:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000608f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006093:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006097:	74 0b                	je     c00060a4 <find_object+0x31>
c0006099:	89 ea                	mov    edx,ebp
c000609b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000609f:	e8 90 fc ff ff       	call   c0005d34 <utf2ucs>
c00060a4:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00060a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00060ab:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00060b0:	7e 11                	jle    c00060c3 <find_object+0x50>
c00060b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060b6:	e8 47 ff ff ff       	call   c0006002 <biread>
c00060bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060bf:	85 c0                	test   eax,eax
c00060c1:	79 07                	jns    c00060ca <find_object+0x57>
c00060c3:	31 db                	xor    ebx,ebx
c00060c5:	e9 4c 01 00 00       	jmp    c0006216 <find_object+0x1a3>
c00060ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060d6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060da:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c00060e1:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060e5:	8a 03                	mov    al,BYTE PTR [ebx]
c00060e7:	84 c0                	test   al,al
c00060e9:	75 0e                	jne    c00060f9 <find_object+0x86>
c00060eb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060ef:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060f7:	eb b2                	jmp    c00060ab <find_object+0x38>
c00060f9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060fd:	8b 35 b4 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023eb4
c0006103:	89 ca                	mov    edx,ecx
c0006105:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006109:	85 f6                	test   esi,esi
c000610b:	74 31                	je     c000613e <find_object+0xcb>
c000610d:	8d 43 21             	lea    eax,[ebx+0x21]
c0006110:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006114:	e8 08 fd ff ff       	call   c0005e21 <ucscompare>
c0006119:	85 c0                	test   eax,eax
c000611b:	0f 84 c7 00 00 00    	je     c00061e8 <find_object+0x175>
c0006121:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006124:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006128:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c0006130:	7f b9                	jg     c00060eb <find_object+0x78>
c0006132:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0006136:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000613a:	7f 96                	jg     c00060d2 <find_object+0x5f>
c000613c:	eb ad                	jmp    c00060eb <find_object+0x78>
c000613e:	0f b6 f0             	movzx  esi,al
c0006141:	29 ce                	sub    esi,ecx
c0006143:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006147:	80 e2 01             	and    dl,0x1
c000614a:	74 05                	je     c0006151 <find_object+0xde>
c000614c:	83 ee 21             	sub    esi,0x21
c000614f:	eb 55                	jmp    c00061a6 <find_object+0x133>
c0006151:	47                   	inc    edi
c0006152:	83 ee 22             	sub    esi,0x22
c0006155:	eb 4f                	jmp    c00061a6 <find_object+0x133>
c0006157:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000615a:	48                   	dec    eax
c000615b:	3c 01                	cmp    al,0x1
c000615d:	77 4c                	ja     c00061ab <find_object+0x138>
c000615f:	50                   	push   eax
c0006160:	6a 02                	push   0x2
c0006162:	68 3d f2 01 c0       	push   0xc001f23d
c0006167:	57                   	push   edi
c0006168:	e8 f3 a5 ff ff       	call   c0000760 <strncmp>
c000616d:	83 c4 10             	add    esp,0x10
c0006170:	85 c0                	test   eax,eax
c0006172:	75 2a                	jne    c000619e <find_object+0x12b>
c0006174:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c0006178:	8d 42 fb             	lea    eax,[edx-0x5]
c000617b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000617f:	50                   	push   eax
c0006180:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0006184:	8d 47 05             	lea    eax,[edi+0x5]
c0006187:	50                   	push   eax
c0006188:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000618c:	50                   	push   eax
c000618d:	e8 8e a4 ff ff       	call   c0000620 <strncpy>
c0006192:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006196:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000619b:	83 c4 10             	add    esp,0x10
c000619e:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00061a2:	29 c6                	sub    esi,eax
c00061a4:	01 c7                	add    edi,eax
c00061a6:	83 fe 03             	cmp    esi,0x3
c00061a9:	7f ac                	jg     c0006157 <find_object+0xe4>
c00061ab:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00061b0:	7e 40                	jle    c00061f2 <find_object+0x17f>
c00061b2:	51                   	push   ecx
c00061b3:	51                   	push   ecx
c00061b4:	6a 2f                	push   0x2f
c00061b6:	55                   	push   ebp
c00061b7:	e8 74 a5 ff ff       	call   c0000730 <strchr>
c00061bc:	83 c4 10             	add    esp,0x10
c00061bf:	85 c0                	test   eax,eax
c00061c1:	74 04                	je     c00061c7 <find_object+0x154>
c00061c3:	29 e8                	sub    eax,ebp
c00061c5:	eb 0c                	jmp    c00061d3 <find_object+0x160>
c00061c7:	83 ec 0c             	sub    esp,0xc
c00061ca:	55                   	push   ebp
c00061cb:	e8 60 a3 ff ff       	call   c0000530 <strlen>
c00061d0:	83 c4 10             	add    esp,0x10
c00061d3:	52                   	push   edx
c00061d4:	50                   	push   eax
c00061d5:	55                   	push   ebp
c00061d6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061da:	50                   	push   eax
c00061db:	e8 34 fe ff ff       	call   c0006014 <strnicmp>
c00061e0:	83 c4 10             	add    esp,0x10
c00061e3:	e9 31 ff ff ff       	jmp    c0006119 <find_object+0xa6>
c00061e8:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061ec:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061f0:	eb 1e                	jmp    c0006210 <find_object+0x19d>
c00061f2:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061f6:	8d 43 21             	lea    eax,[ebx+0x21]
c00061f9:	89 e9                	mov    ecx,ebp
c00061fb:	e8 a0 fc ff ff       	call   c0005ea0 <fncompare>
c0006200:	85 c0                	test   eax,eax
c0006202:	0f 85 19 ff ff ff    	jne    c0006121 <find_object+0xae>
c0006208:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000620c:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0006210:	0f 85 0b ff ff ff    	jne    c0006121 <find_object+0xae>
c0006216:	81 c4 2c 01 00 00    	add    esp,0x12c
c000621c:	89 d8                	mov    eax,ebx
c000621e:	5b                   	pop    ebx
c000621f:	5e                   	pop    esi
c0006220:	5f                   	pop    edi
c0006221:	5d                   	pop    ebp
c0006222:	c3                   	ret    

c0006223 <find_object_path>:
c0006223:	55                   	push   ebp
c0006224:	57                   	push   edi
c0006225:	89 d7                	mov    edi,edx
c0006227:	56                   	push   esi
c0006228:	89 c6                	mov    esi,eax
c000622a:	53                   	push   ebx
c000622b:	89 cb                	mov    ebx,ecx
c000622d:	83 ec 0c             	sub    esp,0xc
c0006230:	50                   	push   eax
c0006231:	50                   	push   eax
c0006232:	6a 2f                	push   0x2f
c0006234:	56                   	push   esi
c0006235:	e8 f6 a4 ff ff       	call   c0000730 <strchr>
c000623a:	83 c4 10             	add    esp,0x10
c000623d:	89 c5                	mov    ebp,eax
c000623f:	85 c0                	test   eax,eax
c0006241:	74 3a                	je     c000627d <find_object_path+0x5a>
c0006243:	39 ee                	cmp    esi,ebp
c0006245:	74 31                	je     c0006278 <find_object_path+0x55>
c0006247:	8d 43 0a             	lea    eax,[ebx+0xa]
c000624a:	e8 b4 fb ff ff       	call   c0005e03 <iso_733>
c000624f:	89 c2                	mov    edx,eax
c0006251:	8d 43 02             	lea    eax,[ebx+0x2]
c0006254:	e8 aa fb ff ff       	call   c0005e03 <iso_733>
c0006259:	83 ec 0c             	sub    esp,0xc
c000625c:	89 c1                	mov    ecx,eax
c000625e:	52                   	push   edx
c000625f:	89 f0                	mov    eax,esi
c0006261:	ba 01 00 00 00       	mov    edx,0x1
c0006266:	e8 08 fe ff ff       	call   c0006073 <find_object>
c000626b:	83 c4 10             	add    esp,0x10
c000626e:	89 c3                	mov    ebx,eax
c0006270:	85 c0                	test   eax,eax
c0006272:	75 04                	jne    c0006278 <find_object_path+0x55>
c0006274:	31 db                	xor    ebx,ebx
c0006276:	eb 36                	jmp    c00062ae <find_object_path+0x8b>
c0006278:	8d 75 01             	lea    esi,[ebp+0x1]
c000627b:	eb b3                	jmp    c0006230 <find_object_path+0xd>
c000627d:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006280:	74 28                	je     c00062aa <find_object_path+0x87>
c0006282:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006285:	e8 79 fb ff ff       	call   c0005e03 <iso_733>
c000628a:	89 c2                	mov    edx,eax
c000628c:	8d 43 02             	lea    eax,[ebx+0x2]
c000628f:	e8 6f fb ff ff       	call   c0005e03 <iso_733>
c0006294:	83 ec 0c             	sub    esp,0xc
c0006297:	89 c1                	mov    ecx,eax
c0006299:	52                   	push   edx
c000629a:	89 f0                	mov    eax,esi
c000629c:	89 fa                	mov    edx,edi
c000629e:	e8 d0 fd ff ff       	call   c0006073 <find_object>
c00062a3:	83 c4 10             	add    esp,0x10
c00062a6:	89 c3                	mov    ebx,eax
c00062a8:	eb 04                	jmp    c00062ae <find_object_path+0x8b>
c00062aa:	85 ff                	test   edi,edi
c00062ac:	74 c6                	je     c0006274 <find_object_path+0x51>
c00062ae:	83 c4 0c             	add    esp,0xc
c00062b1:	89 d8                	mov    eax,ebx
c00062b3:	5b                   	pop    ebx
c00062b4:	5e                   	pop    esi
c00062b5:	5f                   	pop    edi
c00062b6:	5d                   	pop    ebp
c00062b7:	c3                   	ret    

c00062b8 <stricmp>:
c00062b8:	57                   	push   edi
c00062b9:	56                   	push   esi
c00062ba:	31 f6                	xor    esi,esi
c00062bc:	53                   	push   ebx
c00062bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062c1:	83 ec 0c             	sub    esp,0xc
c00062c4:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062cc:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062d0:	50                   	push   eax
c00062d1:	e8 da a5 ff ff       	call   c00008b0 <toupper>
c00062d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d9:	e8 f2 a5 ff ff       	call   c00008d0 <tolower>
c00062de:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062e1:	89 c3                	mov    ebx,eax
c00062e3:	e8 c8 a5 ff ff       	call   c00008b0 <toupper>
c00062e8:	46                   	inc    esi
c00062e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00062ec:	e8 df a5 ff ff       	call   c00008d0 <tolower>
c00062f1:	83 c4 10             	add    esp,0x10
c00062f4:	39 c3                	cmp    ebx,eax
c00062f6:	75 04                	jne    c00062fc <stricmp+0x44>
c00062f8:	85 db                	test   ebx,ebx
c00062fa:	75 c1                	jne    c00062bd <stricmp+0x5>
c00062fc:	29 c3                	sub    ebx,eax
c00062fe:	89 d8                	mov    eax,ebx
c0006300:	5b                   	pop    ebx
c0006301:	5e                   	pop    esi
c0006302:	5f                   	pop    edi
c0006303:	c3                   	ret    

c0006304 <iso_open>:
c0006304:	57                   	push   edi
c0006305:	31 c0                	xor    eax,eax
c0006307:	56                   	push   esi
c0006308:	b9 80 3e 02 c0       	mov    ecx,0xc0023e80
c000630d:	53                   	push   ebx
c000630e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006313:	0f 95 c0             	setne  al
c0006316:	89 c2                	mov    edx,eax
c0006318:	89 c6                	mov    esi,eax
c000631a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000631e:	e8 00 ff ff ff       	call   c0006223 <find_object_path>
c0006323:	83 ca ff             	or     edx,0xffffffff
c0006326:	85 c0                	test   eax,eax
c0006328:	74 5e                	je     c0006388 <iso_open+0x84>
c000632a:	89 c1                	mov    ecx,eax
c000632c:	31 d2                	xor    edx,edx
c000632e:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006334:	83 bf 40 35 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdcac0],0x0
c000633b:	75 42                	jne    c000637f <iso_open+0x7b>
c000633d:	8d 41 02             	lea    eax,[ecx+0x2]
c0006340:	c7 87 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdcac0],0xffffffff
c000634a:	e8 b4 fa ff ff       	call   c0005e03 <iso_733>
c000634f:	89 b7 44 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcabc],esi
c0006355:	89 87 40 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcac0],eax
c000635b:	c7 87 48 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdcab8],0x0
c0006365:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006368:	e8 96 fa ff ff       	call   c0005e03 <iso_733>
c000636d:	c7 87 d0 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdca30],0x0
c0006377:	89 87 4c 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcab4],eax
c000637d:	eb 09                	jmp    c0006388 <iso_open+0x84>
c000637f:	42                   	inc    edx
c0006380:	83 fa 10             	cmp    edx,0x10
c0006383:	75 a9                	jne    c000632e <iso_open+0x2a>
c0006385:	83 ca ff             	or     edx,0xffffffff
c0006388:	5b                   	pop    ebx
c0006389:	89 d0                	mov    eax,edx
c000638b:	5e                   	pop    esi
c000638c:	5f                   	pop    edi
c000638d:	c3                   	ret    

c000638e <iso_close>:
c000638e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006392:	83 f8 0f             	cmp    eax,0xf
c0006395:	7f 10                	jg     c00063a7 <iso_close+0x19>
c0006397:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000639d:	c7 80 40 35 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdcac0],0x0
c00063a7:	e9 69 fb ff ff       	jmp    c0005f15 <bclear_cache>

c00063ac <iso_read>:
c00063ac:	55                   	push   ebp
c00063ad:	57                   	push   edi
c00063ae:	56                   	push   esi
c00063af:	53                   	push   ebx
c00063b0:	83 ec 1c             	sub    esp,0x1c
c00063b3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b7:	83 fd 0f             	cmp    ebp,0xf
c00063ba:	7e 0a                	jle    c00063c6 <iso_read+0x1a>
c00063bc:	83 c8 ff             	or     eax,0xffffffff
c00063bf:	89 c2                	mov    edx,eax
c00063c1:	e9 f4 00 00 00       	jmp    c00064ba <iso_read+0x10e>
c00063c6:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063cc:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c00063d3:	74 e7                	je     c00063bc <iso_read+0x10>
c00063d5:	8b 95 d0 35 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdca30]
c00063db:	85 d2                	test   edx,edx
c00063dd:	75 dd                	jne    c00063bc <iso_read+0x10>
c00063df:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063e4:	0f 84 cd 00 00 00    	je     c00064b7 <iso_read+0x10b>
c00063ea:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c00063f0:	8b 9d 4c 35 02 c0    	mov    ebx,DWORD PTR [ebp-0x3ffdcab4]
c00063f6:	29 c3                	sub    ebx,eax
c00063f8:	3b 5c 24 38          	cmp    ebx,DWORD PTR [esp+0x38]
c00063fc:	76 04                	jbe    c0006402 <iso_read+0x56>
c00063fe:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0006402:	85 db                	test   ebx,ebx
c0006404:	0f 84 ad 00 00 00    	je     c00064b7 <iso_read+0x10b>
c000640a:	89 c6                	mov    esi,eax
c000640c:	b9 00 08 00 00       	mov    ecx,0x800
c0006411:	c1 e8 0b             	shr    eax,0xb
c0006414:	81 e6 ff 07 00 00    	and    esi,0x7ff
c000641a:	29 f1                	sub    ecx,esi
c000641c:	03 85 40 35 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdcac0]
c0006422:	81 f9 00 08 00 00    	cmp    ecx,0x800
c0006428:	75 3f                	jne    c0006469 <iso_read+0xbd>
c000642a:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006430:	7e 37                	jle    c0006469 <iso_read+0xbd>
c0006432:	b9 20 00 00 00       	mov    ecx,0x20
c0006437:	81 fb ff 07 01 00    	cmp    ebx,0x107ff
c000643d:	7f 05                	jg     c0006444 <iso_read+0x98>
c000643f:	89 d9                	mov    ecx,ebx
c0006441:	c1 f9 0b             	sar    ecx,0xb
c0006444:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006448:	52                   	push   edx
c0006449:	51                   	push   ecx
c000644a:	89 cb                	mov    ebx,ecx
c000644c:	c1 e3 0b             	shl    ebx,0xb
c000644f:	50                   	push   eax
c0006450:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006454:	e8 20 fb ff ff       	call   c0005f79 <isoReadDiscSector>
c0006459:	83 c4 10             	add    esp,0x10
c000645c:	85 c0                	test   eax,eax
c000645e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006462:	7f 3e                	jg     c00064a2 <iso_read+0xf6>
c0006464:	e9 53 ff ff ff       	jmp    c00063bc <iso_read+0x10>
c0006469:	39 cb                	cmp    ebx,ecx
c000646b:	7e 02                	jle    c000646f <iso_read+0xc3>
c000646d:	89 cb                	mov    ebx,ecx
c000646f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006473:	e8 93 fb ff ff       	call   c000600b <bdread>
c0006478:	85 c0                	test   eax,eax
c000647a:	0f 88 3c ff ff ff    	js     c00063bc <iso_read+0x10>
c0006480:	8b 0c 85 20 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcfe0]
c0006487:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c000648d:	25 ff 07 00 00       	and    eax,0x7ff
c0006492:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006496:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000649a:	89 d9                	mov    ecx,ebx
c000649c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000649e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00064a2:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00064a6:	01 da                	add    edx,ebx
c00064a8:	01 9d 48 35 02 c0    	add    DWORD PTR [ebp-0x3ffdcab8],ebx
c00064ae:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064b2:	e9 28 ff ff ff       	jmp    c00063df <iso_read+0x33>
c00064b7:	89 d0                	mov    eax,edx
c00064b9:	99                   	cdq    
c00064ba:	83 c4 1c             	add    esp,0x1c
c00064bd:	5b                   	pop    ebx
c00064be:	5e                   	pop    esi
c00064bf:	5f                   	pop    edi
c00064c0:	5d                   	pop    ebp
c00064c1:	c3                   	ret    

c00064c2 <iso_seek>:
c00064c2:	55                   	push   ebp
c00064c3:	83 c8 ff             	or     eax,0xffffffff
c00064c6:	57                   	push   edi
c00064c7:	89 c2                	mov    edx,eax
c00064c9:	56                   	push   esi
c00064ca:	53                   	push   ebx
c00064cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064cf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064d3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d7:	83 fe 0f             	cmp    esi,0xf
c00064da:	7f 65                	jg     c0006541 <iso_seek+0x7f>
c00064dc:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064e2:	8d 8d 40 35 02 c0    	lea    ecx,[ebp-0x3ffdcac0]
c00064e8:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c00064ef:	74 50                	je     c0006541 <iso_seek+0x7f>
c00064f1:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f8:	75 47                	jne    c0006541 <iso_seek+0x7f>
c00064fa:	83 fb 01             	cmp    ebx,0x1
c00064fd:	74 0e                	je     c000650d <iso_seek+0x4b>
c00064ff:	83 fb 02             	cmp    ebx,0x2
c0006502:	74 0e                	je     c0006512 <iso_seek+0x50>
c0006504:	85 db                	test   ebx,ebx
c0006506:	75 39                	jne    c0006541 <iso_seek+0x7f>
c0006508:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c000650b:	eb 0d                	jmp    c000651a <iso_seek+0x58>
c000650d:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006510:	eb 08                	jmp    c000651a <iso_seek+0x58>
c0006512:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006515:	01 f8                	add    eax,edi
c0006517:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000651a:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006520:	8b 88 4c 35 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdcab4]
c0006526:	05 40 35 02 c0       	add    eax,0xc0023540
c000652b:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000652e:	76 03                	jbe    c0006533 <iso_seek+0x71>
c0006530:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006533:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006539:	8b 82 48 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab8]
c000653f:	31 d2                	xor    edx,edx
c0006541:	5b                   	pop    ebx
c0006542:	5e                   	pop    esi
c0006543:	5f                   	pop    edi
c0006544:	5d                   	pop    ebp
c0006545:	c3                   	ret    

c0006546 <iso_tell>:
c0006546:	53                   	push   ebx
c0006547:	83 c8 ff             	or     eax,0xffffffff
c000654a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000654e:	89 c2                	mov    edx,eax
c0006550:	83 f9 0f             	cmp    ecx,0xf
c0006553:	7f 20                	jg     c0006575 <iso_tell+0x2f>
c0006555:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000655b:	83 bb 40 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdcac0],0x0
c0006562:	74 11                	je     c0006575 <iso_tell+0x2f>
c0006564:	83 bb d0 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdca30],0x0
c000656b:	75 08                	jne    c0006575 <iso_tell+0x2f>
c000656d:	8b 83 48 35 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdcab8]
c0006573:	31 d2                	xor    edx,edx
c0006575:	5b                   	pop    ebx
c0006576:	c3                   	ret    

c0006577 <iso_total>:
c0006577:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000657b:	83 c8 ff             	or     eax,0xffffffff
c000657e:	83 fa 0f             	cmp    edx,0xf
c0006581:	7f 1e                	jg     c00065a1 <iso_total+0x2a>
c0006583:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006589:	83 ba 40 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdcac0],0x0
c0006590:	74 0f                	je     c00065a1 <iso_total+0x2a>
c0006592:	83 ba d0 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdca30],0x0
c0006599:	75 06                	jne    c00065a1 <iso_total+0x2a>
c000659b:	8b 82 4c 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab4]
c00065a1:	c3                   	ret    

c00065a2 <fn_postprocess>:
c00065a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00065a6:	89 d0                	mov    eax,edx
c00065a8:	8a 08                	mov    cl,BYTE PTR [eax]
c00065aa:	84 c9                	test   cl,cl
c00065ac:	74 08                	je     c00065b6 <fn_postprocess+0x14>
c00065ae:	80 f9 3b             	cmp    cl,0x3b
c00065b1:	74 03                	je     c00065b6 <fn_postprocess+0x14>
c00065b3:	40                   	inc    eax
c00065b4:	eb f2                	jmp    c00065a8 <fn_postprocess+0x6>
c00065b6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b9:	39 d0                	cmp    eax,edx
c00065bb:	76 0a                	jbe    c00065c7 <fn_postprocess+0x25>
c00065bd:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065c1:	75 04                	jne    c00065c7 <fn_postprocess+0x25>
c00065c3:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c7:	c3                   	ret    

c00065c8 <iso_readdir>:
c00065c8:	55                   	push   ebp
c00065c9:	57                   	push   edi
c00065ca:	56                   	push   esi
c00065cb:	53                   	push   ebx
c00065cc:	83 ec 1c             	sub    esp,0x1c
c00065cf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00065d3:	83 fb 0f             	cmp    ebx,0xf
c00065d6:	7f 28                	jg     c0006600 <iso_readdir+0x38>
c00065d8:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00065de:	8d b8 40 35 02 c0    	lea    edi,[eax-0x3ffdcac0]
c00065e4:	83 b8 40 35 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdcac0],0x0
c00065eb:	74 13                	je     c0006600 <iso_readdir+0x38>
c00065ed:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00065f1:	74 0d                	je     c0006600 <iso_readdir+0x38>
c00065f3:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00065fa:	0f 84 b1 00 00 00    	je     c00066b1 <iso_readdir+0xe9>
c0006600:	83 ec 0c             	sub    esp,0xc
c0006603:	68 40 f2 01 c0       	push   0xc001f240
c0006608:	e8 77 26 01 00       	call   c0018c84 <iso_kprintf>
c000660d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006610:	e8 8b 26 01 00       	call   c0018ca0 <iso_kprintfd>
c0006615:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000661b:	c7 04 24 45 f2 01 c0 	mov    DWORD PTR [esp],0xc001f245
c0006622:	e8 5d 26 01 00       	call   c0018c84 <iso_kprintf>
c0006627:	5d                   	pop    ebp
c0006628:	ff b3 40 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcac0]
c000662e:	e8 6d 26 01 00       	call   c0018ca0 <iso_kprintfd>
c0006633:	c7 04 24 4b f2 01 c0 	mov    DWORD PTR [esp],0xc001f24b
c000663a:	e8 45 26 01 00       	call   c0018c84 <iso_kprintf>
c000663f:	58                   	pop    eax
c0006640:	ff b3 44 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcabc]
c0006646:	e8 55 26 01 00       	call   c0018ca0 <iso_kprintfd>
c000664b:	c7 04 24 51 f2 01 c0 	mov    DWORD PTR [esp],0xc001f251
c0006652:	e8 2d 26 01 00       	call   c0018c84 <iso_kprintf>
c0006657:	58                   	pop    eax
c0006658:	ff b3 d0 35 02 c0    	push   DWORD PTR [ebx-0x3ffdca30]
c000665e:	e8 3d 26 01 00       	call   c0018ca0 <iso_kprintfd>
c0006663:	83 c4 10             	add    esp,0x10
c0006666:	eb 42                	jmp    c00066aa <iso_readdir+0xe2>
c0006668:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000666b:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c0006672:	89 d1                	mov    ecx,edx
c0006674:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000667a:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000667e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006681:	75 35                	jne    c00066b8 <iso_readdir+0xf0>
c0006683:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006689:	81 c2 00 08 00 00    	add    edx,0x800
c000668f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006692:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006695:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006698:	73 1e                	jae    c00066b8 <iso_readdir+0xf0>
c000669a:	c1 ea 0b             	shr    edx,0xb
c000669d:	8b 07                	mov    eax,DWORD PTR [edi]
c000669f:	01 d0                	add    eax,edx
c00066a1:	e8 5c f9 ff ff       	call   c0006002 <biread>
c00066a6:	85 c0                	test   eax,eax
c00066a8:	79 be                	jns    c0006668 <iso_readdir+0xa0>
c00066aa:	31 c0                	xor    eax,eax
c00066ac:	e9 66 01 00 00       	jmp    c0006817 <iso_readdir+0x24f>
c00066b1:	31 f6                	xor    esi,esi
c00066b3:	83 c8 ff             	or     eax,0xffffffff
c00066b6:	eb da                	jmp    c0006692 <iso_readdir+0xca>
c00066b8:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00066be:	8b ba 48 35 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdcab8]
c00066c4:	81 c2 40 35 02 c0    	add    edx,0xc0023540
c00066ca:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00066cd:	73 db                	jae    c00066aa <iso_readdir+0xe2>
c00066cf:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00066d3:	75 34                	jne    c0006709 <iso_readdir+0x141>
c00066d5:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00066d9:	75 2e                	jne    c0006709 <iso_readdir+0x141>
c00066db:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00066de:	01 f9                	add    ecx,edi
c00066e0:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c00066e7:	89 c8                	mov    eax,ecx
c00066e9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00066ec:	25 ff 07 00 00       	and    eax,0x7ff
c00066f1:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c00066f6:	01 c8                	add    eax,ecx
c00066f8:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00066fb:	25 ff 07 00 00       	and    eax,0x7ff
c0006700:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006704:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006707:	74 a1                	je     c00066aa <iso_readdir+0xe2>
c0006709:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000670f:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006713:	8d 56 21             	lea    edx,[esi+0x21]
c0006716:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000671a:	8d a8 58 35 02 c0    	lea    ebp,[eax-0x3ffdcaa8]
c0006720:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006727:	74 0c                	je     c0006735 <iso_readdir+0x16d>
c0006729:	89 e8                	mov    eax,ebp
c000672b:	e8 26 f6 ff ff       	call   c0005d56 <ucs2utfn>
c0006730:	e9 a6 00 00 00       	jmp    c00067db <iso_readdir+0x213>
c0006735:	57                   	push   edi
c0006736:	51                   	push   ecx
c0006737:	52                   	push   edx
c0006738:	55                   	push   ebp
c0006739:	e8 e2 9e ff ff       	call   c0000620 <strncpy>
c000673e:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006744:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006748:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000674b:	c6 84 01 58 35 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdcaa8],0x0
c0006753:	e8 4a fe ff ff       	call   c00065a2 <fn_postprocess>
c0006758:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000675c:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000675f:	83 c4 10             	add    esp,0x10
c0006762:	29 d0                	sub    eax,edx
c0006764:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006768:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c000676c:	74 05                	je     c0006773 <iso_readdir+0x1ab>
c000676e:	83 e8 21             	sub    eax,0x21
c0006771:	eb 04                	jmp    c0006777 <iso_readdir+0x1af>
c0006773:	47                   	inc    edi
c0006774:	83 e8 22             	sub    eax,0x22
c0006777:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000677b:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006781:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006785:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000678a:	7e 4f                	jle    c00067db <iso_readdir+0x213>
c000678c:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000678f:	48                   	dec    eax
c0006790:	3c 01                	cmp    al,0x1
c0006792:	77 47                	ja     c00067db <iso_readdir+0x213>
c0006794:	52                   	push   edx
c0006795:	6a 02                	push   0x2
c0006797:	68 3d f2 01 c0       	push   0xc001f23d
c000679c:	57                   	push   edi
c000679d:	e8 be 9f ff ff       	call   c0000760 <strncmp>
c00067a2:	83 c4 10             	add    esp,0x10
c00067a5:	85 c0                	test   eax,eax
c00067a7:	75 26                	jne    c00067cf <iso_readdir+0x207>
c00067a9:	50                   	push   eax
c00067aa:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067ae:	83 e8 05             	sub    eax,0x5
c00067b1:	50                   	push   eax
c00067b2:	8d 47 05             	lea    eax,[edi+0x5]
c00067b5:	50                   	push   eax
c00067b6:	55                   	push   ebp
c00067b7:	e8 64 9e ff ff       	call   c0000620 <strncpy>
c00067bc:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067c0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00067c4:	83 c4 10             	add    esp,0x10
c00067c7:	c6 84 08 53 35 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdcaad],0x0
c00067cf:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067d3:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00067d7:	01 c7                	add    edi,eax
c00067d9:	eb aa                	jmp    c0006785 <iso_readdir+0x1bd>
c00067db:	83 c8 ff             	or     eax,0xffffffff
c00067de:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00067e2:	89 c2                	mov    edx,eax
c00067e4:	75 0a                	jne    c00067f0 <iso_readdir+0x228>
c00067e6:	8d 46 0a             	lea    eax,[esi+0xa]
c00067e9:	e8 15 f6 ff ff       	call   c0005e03 <iso_733>
c00067ee:	31 d2                	xor    edx,edx
c00067f0:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c00067f6:	89 83 50 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcab0],eax
c00067fc:	89 93 54 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcaac],edx
c0006802:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006805:	81 c3 40 35 02 c0    	add    ebx,0xc0023540
c000680b:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c000680e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006812:	05 50 35 02 c0       	add    eax,0xc0023550
c0006817:	83 c4 1c             	add    esp,0x1c
c000681a:	5b                   	pop    ebx
c000681b:	5e                   	pop    esi
c000681c:	5f                   	pop    edi
c000681d:	5d                   	pop    ebp
c000681e:	c3                   	ret    

c000681f <iso_reset>:
c000681f:	83 ec 18             	sub    esp,0x18
c0006822:	68 5a f2 01 c0       	push   0xc001f25a
c0006827:	e8 58 24 01 00       	call   c0018c84 <iso_kprintf>
c000682c:	e8 1c f7 ff ff       	call   c0005f4d <iso_break_all>
c0006831:	e8 15 f7 ff ff       	call   c0005f4b <bclear>
c0006836:	31 c0                	xor    eax,eax
c0006838:	83 c4 1c             	add    esp,0x1c
c000683b:	c3                   	ret    

c000683c <init_percd>:
c000683c:	57                   	push   edi
c000683d:	56                   	push   esi
c000683e:	53                   	push   ebx
c000683f:	bb 01 00 00 00       	mov    ebx,0x1
c0006844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006848:	a2 60 30 02 c0       	mov    ds:0xc0023060,al
c000684d:	e8 cd ff ff ff       	call   c000681f <iso_reset>
c0006852:	c7 05 b4 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb4,0x0
c000685c:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c0006861:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006865:	e8 98 f7 ff ff       	call   c0006002 <biread>
c000686a:	89 c6                	mov    esi,eax
c000686c:	85 c0                	test   eax,eax
c000686e:	0f 88 ba 00 00 00    	js     c000692e <init_percd+0xf2>
c0006874:	52                   	push   edx
c0006875:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c000687c:	6a 06                	push   0x6
c000687e:	83 c0 04             	add    eax,0x4
c0006881:	68 65 f2 01 c0       	push   0xc001f265
c0006886:	50                   	push   eax
c0006887:	e8 f4 9a ff ff       	call   c0000380 <memcmp>
c000688c:	83 c4 10             	add    esp,0x10
c000688f:	85 c0                	test   eax,eax
c0006891:	74 08                	je     c000689b <init_percd+0x5f>
c0006893:	43                   	inc    ebx
c0006894:	83 fb 04             	cmp    ebx,0x4
c0006897:	75 c3                	jne    c000685c <init_percd+0x20>
c0006899:	eb 1a                	jmp    c00068b5 <init_percd+0x79>
c000689b:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068a2:	83 c0 5c             	add    eax,0x5c
c00068a5:	e8 2a f5 ff ff       	call   c0005dd4 <isjoliet>
c00068aa:	a3 b4 3e 02 c0       	mov    ds:0xc0023eb4,eax
c00068af:	85 c0                	test   eax,eax
c00068b1:	74 e0                	je     c0006893 <init_percd+0x57>
c00068b3:	eb 3e                	jmp    c00068f3 <init_percd+0xb7>
c00068b5:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c00068bc:	75 35                	jne    c00068f3 <init_percd+0xb7>
c00068be:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c00068c3:	83 c0 10             	add    eax,0x10
c00068c6:	e8 37 f7 ff ff       	call   c0006002 <biread>
c00068cb:	89 c6                	mov    esi,eax
c00068cd:	85 c0                	test   eax,eax
c00068cf:	78 5f                	js     c0006930 <init_percd+0xf4>
c00068d1:	50                   	push   eax
c00068d2:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068d9:	6a 06                	push   0x6
c00068db:	83 c0 04             	add    eax,0x4
c00068de:	68 6c f2 01 c0       	push   0xc001f26c
c00068e3:	83 cb ff             	or     ebx,0xffffffff
c00068e6:	50                   	push   eax
c00068e7:	e8 94 9a ff ff       	call   c0000380 <memcmp>
c00068ec:	83 c4 10             	add    esp,0x10
c00068ef:	85 c0                	test   eax,eax
c00068f1:	75 3d                	jne    c0006930 <init_percd+0xf4>
c00068f3:	8b 34 b5 80 30 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdcf80]
c00068fa:	bf 80 3e 02 c0       	mov    edi,0xc0023e80
c00068ff:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006905:	b9 22 00 00 00       	mov    ecx,0x22
c000690a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000690c:	b8 82 3e 02 c0       	mov    eax,0xc0023e82
c0006911:	31 db                	xor    ebx,ebx
c0006913:	e8 eb f4 ff ff       	call   c0005e03 <iso_733>
c0006918:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000691d:	b8 8a 3e 02 c0       	mov    eax,0xc0023e8a
c0006922:	e8 dc f4 ff ff       	call   c0005e03 <iso_733>
c0006927:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c000692c:	eb 02                	jmp    c0006930 <init_percd+0xf4>
c000692e:	89 c3                	mov    ebx,eax
c0006930:	89 d8                	mov    eax,ebx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	c3                   	ret    

c0006936 <iso_ioctl>:
c0006936:	83 ec 18             	sub    esp,0x18
c0006939:	68 73 f2 01 c0       	push   0xc001f273
c000693e:	e8 41 23 01 00       	call   c0018c84 <iso_kprintf>
c0006943:	e8 d7 fe ff ff       	call   c000681f <iso_reset>
c0006948:	31 c0                	xor    eax,eax
c000694a:	83 c4 1c             	add    esp,0x1c
c000694d:	c3                   	ret    

c000694e <fs_iso9660_init>:
c000694e:	53                   	push   ebx
c000694f:	31 db                	xor    ebx,ebx
c0006951:	83 ec 14             	sub    esp,0x14
c0006954:	68 7e f2 01 c0       	push   0xc001f27e
c0006959:	e8 26 23 01 00       	call   c0018c84 <iso_kprintf>
c000695e:	83 c4 0c             	add    esp,0xc
c0006961:	68 40 09 00 00       	push   0x940
c0006966:	6a 00                	push   0x0
c0006968:	68 40 35 02 c0       	push   0xc0023540
c000696d:	e8 4e 9b ff ff       	call   c00004c0 <memset>
c0006972:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006979:	c7 05 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0023540,0xffffffff
c0006983:	e8 db 0e 00 00       	call   c0007863 <malloc>
c0006988:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000698f:	a3 b0 3e 02 c0       	mov    ds:0xc0023eb0,eax
c0006994:	e8 ca 0e 00 00       	call   c0007863 <malloc>
c0006999:	83 c4 10             	add    esp,0x10
c000699c:	a3 20 35 02 c0       	mov    ds:0xc0023520,eax
c00069a1:	83 ec 0c             	sub    esp,0xc
c00069a4:	68 04 08 00 00       	push   0x804
c00069a9:	e8 b5 0e 00 00       	call   c0007863 <malloc>
c00069ae:	89 04 9d 80 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcf80],eax
c00069b5:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069bb:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c00069c2:	e8 9c 0e 00 00       	call   c0007863 <malloc>
c00069c7:	83 c4 10             	add    esp,0x10
c00069ca:	89 04 9d 20 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcfe0],eax
c00069d1:	43                   	inc    ebx
c00069d2:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069d8:	83 fb 10             	cmp    ebx,0x10
c00069db:	75 c4                	jne    c00069a1 <fs_iso9660_init+0x53>
c00069dd:	83 c4 08             	add    esp,0x8
c00069e0:	31 c0                	xor    eax,eax
c00069e2:	5b                   	pop    ebx
c00069e3:	c3                   	ret    

c00069e4 <fs_iso9660_shutdown>:
c00069e4:	53                   	push   ebx
c00069e5:	31 db                	xor    ebx,ebx
c00069e7:	83 ec 08             	sub    esp,0x8
c00069ea:	83 ec 0c             	sub    esp,0xc
c00069ed:	ff 34 9d 80 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcf80]
c00069f4:	e8 7a 0e 00 00       	call   c0007873 <free>
c00069f9:	58                   	pop    eax
c00069fa:	ff 34 9d 20 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcfe0]
c0006a01:	43                   	inc    ebx
c0006a02:	e8 6c 0e 00 00       	call   c0007873 <free>
c0006a07:	83 c4 10             	add    esp,0x10
c0006a0a:	83 fb 10             	cmp    ebx,0x10
c0006a0d:	75 db                	jne    c00069ea <fs_iso9660_shutdown+0x6>
c0006a0f:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0006a14:	85 c0                	test   eax,eax
c0006a16:	74 0c                	je     c0006a24 <fs_iso9660_shutdown+0x40>
c0006a18:	83 ec 0c             	sub    esp,0xc
c0006a1b:	50                   	push   eax
c0006a1c:	e8 52 0e 00 00       	call   c0007873 <free>
c0006a21:	83 c4 10             	add    esp,0x10
c0006a24:	a1 20 35 02 c0       	mov    eax,ds:0xc0023520
c0006a29:	85 c0                	test   eax,eax
c0006a2b:	74 0c                	je     c0006a39 <fs_iso9660_shutdown+0x55>
c0006a2d:	83 ec 0c             	sub    esp,0xc
c0006a30:	50                   	push   eax
c0006a31:	e8 3d 0e 00 00       	call   c0007873 <free>
c0006a36:	83 c4 10             	add    esp,0x10
c0006a39:	c7 05 20 35 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023520,0x0
c0006a43:	c7 05 b0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb0,0x0
c0006a4d:	83 c4 08             	add    esp,0x8
c0006a50:	31 c0                	xor    eax,eax
c0006a52:	5b                   	pop    ebx
c0006a53:	c3                   	ret    

c0006a54 <Computer::close(int, int, void*)>:
c0006a54:	57                   	push   edi
c0006a55:	56                   	push   esi
c0006a56:	53                   	push   ebx
c0006a57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006a5b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a5f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006a63:	83 ec 0c             	sub    esp,0xc
c0006a66:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a6c:	50                   	push   eax
c0006a6d:	e8 38 51 00 00       	call   c000bbaa <Device::closeAll()>
c0006a72:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a78:	83 c4 10             	add    esp,0x10
c0006a7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a7d:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006a81:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006a89:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006a8d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006a91:	5b                   	pop    ebx
c0006a92:	5e                   	pop    esi
c0006a93:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006a96:	5f                   	pop    edi
c0006a97:	ff e0                	jmp    eax

c0006a99 <Krnl::firstTask()>:
c0006a99:	53                   	push   ebx
c0006a9a:	83 ec 14             	sub    esp,0x14
c0006a9d:	fb                   	sti    
c0006a9e:	68 8f f2 01 c0       	push   0xc001f28f
c0006aa3:	e8 e7 92 00 00       	call   c000fd8f <KeSetBootMessage(char const*)>
c0006aa8:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006aaf:	e8 af 0d 00 00       	call   c0007863 <malloc>
c0006ab4:	89 c3                	mov    ebx,eax
c0006ab6:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0006abb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006ac2:	50                   	push   eax
c0006ac3:	68 a8 f2 01 c0       	push   0xc001f2a8
c0006ac8:	6a 01                	push   0x1
c0006aca:	53                   	push   ebx
c0006acb:	e8 0c dc 00 00       	call   c00146dc <Process::Process(bool, char const*, Process*, char**)>
c0006ad0:	83 c4 20             	add    esp,0x20
c0006ad3:	68 ff 00 00 00       	push   0xff
c0006ad8:	6a 00                	push   0x0
c0006ada:	68 b9 72 00 c0       	push   0xc00072b9
c0006adf:	53                   	push   ebx
c0006ae0:	e8 1f de 00 00       	call   c0014904 <Process::createThread(void (*)(void*), void*, int)>
c0006ae5:	6a 7a                	push   0x7a
c0006ae7:	8b 15 90 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027190
c0006aed:	6a 00                	push   0x0
c0006aef:	68 a0 53 01 c0       	push   0xc00153a0
c0006af4:	52                   	push   edx
c0006af5:	e8 0a de 00 00       	call   c0014904 <Process::createThread(void (*)(void*), void*, int)>
c0006afa:	83 c4 20             	add    esp,0x20
c0006afd:	a3 48 71 02 c0       	mov    ds:0xc0027148,eax
c0006b02:	c6 05 bd 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ebd,0x1
c0006b09:	e8 b2 9a 00 00       	call   c00105c0 <KeInitRand()>
c0006b0e:	83 ec 0c             	sub    esp,0xc
c0006b11:	68 a4 f3 01 c0       	push   0xc001f3a4
c0006b16:	e8 74 92 00 00       	call   c000fd8f <KeSetBootMessage(char const*)>
c0006b1b:	e8 8f ec 00 00       	call   c00157af <Vm::initialise8086()>
c0006b20:	e8 cf 3e 00 00       	call   c000a9f4 <Fs::initVFS()>
c0006b25:	c7 04 24 b5 f2 01 c0 	mov    DWORD PTR [esp],0xc001f2b5
c0006b2c:	e8 5e 92 00 00       	call   c000fd8f <KeSetBootMessage(char const*)>
c0006b31:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006b36:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006b3c:	8b 10                	mov    edx,DWORD PTR [eax]
c0006b3e:	6a 00                	push   0x0
c0006b40:	6a 00                	push   0x0
c0006b42:	6a 00                	push   0x0
c0006b44:	50                   	push   eax
c0006b45:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006b48:	83 c4 14             	add    esp,0x14
c0006b4b:	68 a4 f3 01 c0       	push   0xc001f3a4
c0006b50:	e8 3a 92 00 00       	call   c000fd8f <KeSetBootMessage(char const*)>
c0006b55:	e8 10 97 00 00       	call   c001026a <Krnl::loadSystemEnv()>
c0006b5a:	e8 6d 99 00 00       	call   c00104cc <Krnl::setupPowerManager()>
c0006b5f:	83 c4 0c             	add    esp,0xc
c0006b62:	6a 3a                	push   0x3a
c0006b64:	68 cf f2 01 c0       	push   0xc001f2cf
c0006b69:	68 d8 f2 01 c0       	push   0xc001f2d8
c0006b6e:	e8 a6 be 00 00       	call   c0012a19 <Reg::readIntWithDefault(char*, char*, int)>
c0006b73:	89 04 24             	mov    DWORD PTR [esp],eax
c0006b76:	e8 85 49 00 00       	call   c000b500 <User::loadClockSettings(int)>
c0006b7b:	c7 04 24 c8 f3 01 c0 	mov    DWORD PTR [esp],0xc001f3c8
c0006b82:	e8 08 92 00 00       	call   c000fd8f <KeSetBootMessage(char const*)>
c0006b87:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006b8c:	59                   	pop    ecx
c0006b8d:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006b93:	53                   	push   ebx
c0006b94:	e8 0f 50 00 00       	call   c000bba8 <Device::loadDriversForAll()>
c0006b99:	c7 04 24 e0 f2 01 c0 	mov    DWORD PTR [esp],0xc001f2e0
c0006ba0:	e8 ea 91 00 00       	call   c000fd8f <KeSetBootMessage(char const*)>
c0006ba5:	58                   	pop    eax
c0006ba6:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c0006bac:	5a                   	pop    edx
c0006bad:	6a 01                	push   0x1
c0006baf:	68 f1 f2 01 c0       	push   0xc001f2f1
c0006bb4:	e8 2f d5 00 00       	call   c00140e8 <Thr::loadDLL(char const*, bool)>
c0006bb9:	59                   	pop    ecx
c0006bba:	5a                   	pop    edx
c0006bbb:	53                   	push   ebx
c0006bbc:	50                   	push   eax
c0006bbd:	e8 5b d7 00 00       	call   c001431d <Thr::executeDLL(unsigned long, void*)>
c0006bc2:	83 c4 10             	add    esp,0x10
c0006bc5:	83 ec 0c             	sub    esp,0xc
c0006bc8:	6a 02                	push   0x2
c0006bca:	e8 75 e1 00 00       	call   c0014d44 <blockTask(TaskState)>
c0006bcf:	83 c4 10             	add    esp,0x10
c0006bd2:	eb f1                	jmp    c0006bc5 <Krnl::firstTask()+0x12c>

c0006bd4 <Computer::Computer()>:
c0006bd4:	83 ec 0c             	sub    esp,0xc
c0006bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bdb:	83 ec 08             	sub    esp,0x8
c0006bde:	68 0d f3 01 c0       	push   0xc001f30d
c0006be3:	50                   	push   eax
c0006be4:	e8 3b 50 00 00       	call   c000bc24 <Device::Device(char const*)>
c0006be9:	83 c4 10             	add    esp,0x10
c0006bec:	ba f0 f3 01 c0       	mov    edx,0xc001f3f0
c0006bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf5:	89 10                	mov    DWORD PTR [eax],edx
c0006bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfb:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006c05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c09:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006c13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c17:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006c1d:	83 ca 04             	or     edx,0x4
c0006c20:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c2a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c30:	31 d2                	xor    edx,edx
c0006c32:	88 c2                	mov    dl,al
c0006c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c38:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c43:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c49:	31 d2                	xor    edx,edx
c0006c4b:	88 c2                	mov    dl,al
c0006c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c51:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c60:	8d 50 01             	lea    edx,[eax+0x1]
c0006c63:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006c67:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006c6d:	31 d2                	xor    edx,edx
c0006c6f:	88 c2                	mov    dl,al
c0006c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c75:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006c79:	83 e1 3f             	and    ecx,0x3f
c0006c7c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006c80:	90                   	nop
c0006c81:	83 c4 0c             	add    esp,0xc
c0006c84:	c3                   	ret    
c0006c85:	90                   	nop

c0006c86 <Computer::setBootMessage(char const*)>:
c0006c86:	c3                   	ret    
c0006c87:	90                   	nop

c0006c88 <Computer::detectFeatures()>:
c0006c88:	55                   	push   ebp
c0006c89:	57                   	push   edi
c0006c8a:	56                   	push   esi
c0006c8b:	53                   	push   ebx
c0006c8c:	83 ec 1c             	sub    esp,0x1c
c0006c8f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006c93:	8b 8b 6c 01 00 00    	mov    ecx,DWORD PTR [ebx+0x16c]
c0006c99:	81 e1 04 00 fc ff    	and    ecx,0xfffc0004
c0006c9f:	89 8b 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],ecx
c0006ca5:	e8 4f 95 ff ff       	call   c00001f9 <detectCPUID>
c0006caa:	85 c0                	test   eax,eax
c0006cac:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cb2:	0f 95 c2             	setne  dl
c0006cb5:	01 d2                	add    edx,edx
c0006cb7:	83 e0 fd             	and    eax,0xfffffffd
c0006cba:	09 d0                	or     eax,edx
c0006cbc:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cc2:	a8 02                	test   al,0x2
c0006cc4:	75 4e                	jne    c0006d14 <Computer::detectFeatures()+0x8c>
c0006cc6:	f6 05 d1 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed1,0x4
c0006ccd:	74 0f                	je     c0006cde <Computer::detectFeatures()+0x56>
c0006ccf:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cd5:	83 e0 fb             	and    eax,0xfffffffb
c0006cd8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cde:	e8 b3 6e 01 00       	call   c001db96 <x87Detect>
c0006ce3:	83 e0 01             	and    eax,0x1
c0006ce6:	c1 e0 04             	shl    eax,0x4
c0006ce9:	88 c2                	mov    dl,al
c0006ceb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cf1:	83 e0 ef             	and    eax,0xffffffef
c0006cf4:	09 d0                	or     eax,edx
c0006cf6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfc:	a8 10                	test   al,0x10
c0006cfe:	0f 85 32 01 00 00    	jne    c0006e36 <Computer::detectFeatures()+0x1ae>
c0006d04:	84 c0                	test   al,al
c0006d06:	0f 88 4d 01 00 00    	js     c0006e59 <Computer::detectFeatures()+0x1d1>
c0006d0c:	83 c4 1c             	add    esp,0x1c
c0006d0f:	5b                   	pop    ebx
c0006d10:	5e                   	pop    esi
c0006d11:	5f                   	pop    edi
c0006d12:	5d                   	pop    ebp
c0006d13:	c3                   	ret    
c0006d14:	83 ec 0c             	sub    esp,0xc
c0006d17:	6a 20                	push   0x20
c0006d19:	e8 9e 85 00 00       	call   c000f2bc <CPU::cpuidCheckEDX(unsigned int)>
c0006d1e:	83 e0 01             	and    eax,0x1
c0006d21:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006d28:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d2e:	83 e0 f7             	and    eax,0xfffffff7
c0006d31:	09 d0                	or     eax,edx
c0006d33:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d39:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006d40:	e8 77 85 00 00       	call   c000f2bc <CPU::cpuidCheckEDX(unsigned int)>
c0006d45:	83 e0 01             	and    eax,0x1
c0006d48:	88 c2                	mov    dl,al
c0006d4a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d50:	83 e0 fe             	and    eax,0xfffffffe
c0006d53:	09 d0                	or     eax,edx
c0006d55:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d5b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006d62:	e8 55 85 00 00       	call   c000f2bc <CPU::cpuidCheckEDX(unsigned int)>
c0006d67:	c1 e0 07             	shl    eax,0x7
c0006d6a:	88 c2                	mov    dl,al
c0006d6c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d72:	83 e0 7f             	and    eax,0x7f
c0006d75:	09 d0                	or     eax,edx
c0006d77:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d7d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006d84:	e8 33 85 00 00       	call   c000f2bc <CPU::cpuidCheckEDX(unsigned int)>
c0006d89:	83 c4 10             	add    esp,0x10
c0006d8c:	83 e0 01             	and    eax,0x1
c0006d8f:	c1 e0 05             	shl    eax,0x5
c0006d92:	88 c2                	mov    dl,al
c0006d94:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d9a:	83 e0 df             	and    eax,0xffffffdf
c0006d9d:	09 d0                	or     eax,edx
c0006d9f:	f7 05 d0 3e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023ed0,0x401
c0006da9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006daf:	0f 84 ca 00 00 00    	je     c0006e7f <Computer::detectFeatures()+0x1f7>
c0006db5:	83 e0 fe             	and    eax,0xfffffffe
c0006db8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dbe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006dc4:	88 c2                	mov    dl,al
c0006dc6:	83 e2 09             	and    edx,0x9
c0006dc9:	fe ca                	dec    dl
c0006dcb:	75 09                	jne    c0006dd6 <Computer::detectFeatures()+0x14e>
c0006dcd:	83 e0 fe             	and    eax,0xfffffffe
c0006dd0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ddd:	50                   	push   eax
c0006dde:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006de2:	55                   	push   ebp
c0006de3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006de7:	57                   	push   edi
c0006de8:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006dec:	56                   	push   esi
c0006ded:	68 00 00 00 80       	push   0x80000000
c0006df2:	e8 41 84 00 00       	call   c000f238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006df7:	83 c4 20             	add    esp,0x20
c0006dfa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006e01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006e05:	0f 86 bb fe ff ff    	jbe    c0006cc6 <Computer::detectFeatures()+0x3e>
c0006e0b:	83 ec 0c             	sub    esp,0xc
c0006e0e:	50                   	push   eax
c0006e0f:	55                   	push   ebp
c0006e10:	57                   	push   edi
c0006e11:	56                   	push   esi
c0006e12:	68 01 00 00 80       	push   0x80000001
c0006e17:	e8 1c 84 00 00       	call   c000f238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006e1c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006e22:	83 c4 20             	add    esp,0x20
c0006e25:	81 e2 bf ff fc ff    	and    edx,0xfffcffbf
c0006e2b:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006e31:	e9 90 fe ff ff       	jmp    c0006cc6 <Computer::detectFeatures()+0x3e>
c0006e36:	e8 15 6d 01 00       	call   c001db50 <absolutelyNoChanceInHell>
c0006e3b:	88 c2                	mov    dl,al
c0006e3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e43:	c1 e2 07             	shl    edx,0x7
c0006e46:	83 e0 7f             	and    eax,0x7f
c0006e49:	09 d0                	or     eax,edx
c0006e4b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e51:	84 c0                	test   al,al
c0006e53:	0f 89 b3 fe ff ff    	jns    c0006d0c <Computer::detectFeatures()+0x84>
c0006e59:	e8 62 69 01 00       	call   c001d7c0 <avxDetect>
c0006e5e:	83 e0 01             	and    eax,0x1
c0006e61:	c1 e0 05             	shl    eax,0x5
c0006e64:	88 c2                	mov    dl,al
c0006e66:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006e6c:	83 e0 df             	and    eax,0xffffffdf
c0006e6f:	09 d0                	or     eax,edx
c0006e71:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006e77:	83 c4 1c             	add    esp,0x1c
c0006e7a:	5b                   	pop    ebx
c0006e7b:	5e                   	pop    esi
c0006e7c:	5f                   	pop    edi
c0006e7d:	5d                   	pop    ebp
c0006e7e:	c3                   	ret    
c0006e7f:	83 ec 0c             	sub    esp,0xc
c0006e82:	68 00 02 00 00       	push   0x200
c0006e87:	e8 30 84 00 00       	call   c000f2bc <CPU::cpuidCheckEDX(unsigned int)>
c0006e8c:	83 e0 01             	and    eax,0x1
c0006e8f:	83 c4 10             	add    esp,0x10
c0006e92:	88 c2                	mov    dl,al
c0006e94:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e9a:	83 e0 fe             	and    eax,0xfffffffe
c0006e9d:	09 d0                	or     eax,edx
c0006e9f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ea5:	e9 14 ff ff ff       	jmp    c0006dbe <Computer::detectFeatures()+0x136>

c0006eaa <Computer::displayFeatures()>:
c0006eaa:	c3                   	ret    
c0006eab:	90                   	nop

c0006eac <Computer::rdmsr(unsigned int)>:
c0006eac:	83 ec 0c             	sub    esp,0xc
c0006eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006eba:	74 0a                	je     c0006ec6 <Computer::rdmsr(unsigned int)+0x1a>
c0006ebc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ec0:	0f 32                	rdmsr  
c0006ec2:	83 c4 0c             	add    esp,0xc
c0006ec5:	c3                   	ret    
c0006ec6:	83 ec 0c             	sub    esp,0xc
c0006ec9:	68 16 f3 01 c0       	push   0xc001f316
c0006ece:	e8 34 95 00 00       	call   c0010407 <KePanic(char const*)>
c0006ed3:	83 c4 10             	add    esp,0x10
c0006ed6:	eb e4                	jmp    c0006ebc <Computer::rdmsr(unsigned int)+0x10>

c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006ed8:	57                   	push   edi
c0006ed9:	56                   	push   esi
c0006eda:	52                   	push   edx
c0006edb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006edf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006ee3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006ee7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006eee:	74 0e                	je     c0006efe <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006ef0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ef4:	89 f0                	mov    eax,esi
c0006ef6:	89 fa                	mov    edx,edi
c0006ef8:	0f 30                	wrmsr  
c0006efa:	58                   	pop    eax
c0006efb:	5e                   	pop    esi
c0006efc:	5f                   	pop    edi
c0006efd:	c3                   	ret    
c0006efe:	83 ec 0c             	sub    esp,0xc
c0006f01:	68 1c f3 01 c0       	push   0xc001f31c
c0006f06:	e8 fc 94 00 00       	call   c0010407 <KePanic(char const*)>
c0006f0b:	83 c4 10             	add    esp,0x10
c0006f0e:	eb e0                	jmp    c0006ef0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006f10 <Computer::shutdown()>:
c0006f10:	83 ec 0c             	sub    esp,0xc
c0006f13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f17:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f19:	6a 00                	push   0x0
c0006f1b:	6a 00                	push   0x0
c0006f1d:	6a 00                	push   0x0
c0006f1f:	50                   	push   eax
c0006f20:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f23:	83 c4 1c             	add    esp,0x1c
c0006f26:	c3                   	ret    
c0006f27:	90                   	nop

c0006f28 <Computer::restart()>:
c0006f28:	83 ec 0c             	sub    esp,0xc
c0006f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f2f:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f31:	6a 00                	push   0x0
c0006f33:	6a 00                	push   0x0
c0006f35:	6a 01                	push   0x1
c0006f37:	50                   	push   eax
c0006f38:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f3b:	83 c4 1c             	add    esp,0x1c
c0006f3e:	c3                   	ret    
c0006f3f:	90                   	nop

c0006f40 <Computer::sleep()>:
c0006f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f44:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006f4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f4e:	e9 e1 7d 00 00       	jmp    c000ed34 <ACPI::sleep()>
c0006f53:	90                   	nop

c0006f54 <Computer::nmiEnabled()>:
c0006f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f58:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006f5e:	c3                   	ret    
c0006f5f:	90                   	nop

c0006f60 <Computer::readCMOS(unsigned char)>:
c0006f60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f68:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006f6f:	19 c0                	sbb    eax,eax
c0006f71:	83 e0 80             	and    eax,0xffffff80
c0006f74:	09 d0                	or     eax,edx
c0006f76:	e6 70                	out    0x70,al
c0006f78:	e4 71                	in     al,0x71
c0006f7a:	c3                   	ret    
c0006f7b:	90                   	nop

c0006f7c <Computer::enableNMI(bool)>:
c0006f7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f84:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006f8a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006f92:	eb cc                	jmp    c0006f60 <Computer::readCMOS(unsigned char)>

c0006f94 <Computer::open(int, int, void*)>:
c0006f94:	56                   	push   esi
c0006f95:	53                   	push   ebx
c0006f96:	83 ec 10             	sub    esp,0x10
c0006f99:	f6 05 d0 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed0,0x4
c0006fa0:	0f 94 05 20 17 02 c0 	sete   BYTE PTR ds:0xc0021720
c0006fa7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006fab:	68 22 f3 01 c0       	push   0xc001f322
c0006fb0:	e8 da 8d 00 00       	call   c000fd8f <KeSetBootMessage(char const*)>
c0006fb5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006fbc:	e8 a2 08 00 00       	call   c0007863 <malloc>
c0006fc1:	89 c6                	mov    esi,eax
c0006fc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0006fc6:	e8 01 79 00 00       	call   c000e8cc <ACPI::ACPI()>
c0006fcb:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006fd1:	58                   	pop    eax
c0006fd2:	5a                   	pop    edx
c0006fd3:	56                   	push   esi
c0006fd4:	53                   	push   ebx
c0006fd5:	e8 b2 4a 00 00       	call   c000ba8c <Device::addChild(Device*)>
c0006fda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006fdd:	e8 a6 fc ff ff       	call   c0006c88 <Computer::detectFeatures()>
c0006fe2:	59                   	pop    ecx
c0006fe3:	5e                   	pop    esi
c0006fe4:	6a 01                	push   0x1
c0006fe6:	53                   	push   ebx
c0006fe7:	e8 90 ff ff ff       	call   c0006f7c <Computer::enableNMI(bool)>
c0006fec:	c7 04 24 3a f3 01 c0 	mov    DWORD PTR [esp],0xc001f33a
c0006ff3:	e8 97 8d 00 00       	call   c000fd8f <KeSetBootMessage(char const*)>
c0006ff8:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006fff:	e8 5f 08 00 00       	call   c0007863 <malloc>
c0007004:	89 c6                	mov    esi,eax
c0007006:	89 04 24             	mov    DWORD PTR [esp],eax
c0007009:	e8 66 83 00 00       	call   c000f374 <CPU::CPU()>
c000700e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007014:	58                   	pop    eax
c0007015:	5a                   	pop    edx
c0007016:	56                   	push   esi
c0007017:	53                   	push   ebx
c0007018:	e8 6f 4a 00 00       	call   c000ba8c <Device::addChild(Device*)>
c000701d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007023:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007027:	8b 10                	mov    edx,DWORD PTR [eax]
c0007029:	51                   	push   ecx
c000702a:	6a 00                	push   0x0
c000702c:	6a 00                	push   0x0
c000702e:	50                   	push   eax
c000702f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007032:	83 c4 14             	add    esp,0x14
c0007035:	68 54 f3 01 c0       	push   0xc001f354
c000703a:	e8 50 8d 00 00       	call   c000fd8f <KeSetBootMessage(char const*)>
c000703f:	c7 04 24 99 6a 00 c0 	mov    DWORD PTR [esp],0xc0006a99
c0007046:	e8 e1 d9 00 00       	call   c0014a2c <setupMultitasking(void (*)())>
c000704b:	83 c4 14             	add    esp,0x14
c000704e:	83 c8 ff             	or     eax,0xffffffff
c0007051:	5b                   	pop    ebx
c0007052:	5e                   	pop    esi
c0007053:	c3                   	ret    

c0007054 <Computer::disableNMI()>:
c0007054:	6a 00                	push   0x0
c0007056:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000705a:	50                   	push   eax
c000705b:	e8 1c ff ff ff       	call   c0006f7c <Computer::enableNMI(bool)>
c0007060:	5a                   	pop    edx
c0007061:	59                   	pop    ecx
c0007062:	c3                   	ret    
c0007063:	90                   	nop

c0007064 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007068:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000706c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007073:	19 c0                	sbb    eax,eax
c0007075:	83 e0 80             	and    eax,0xffffff80
c0007078:	09 d0                	or     eax,edx
c000707a:	e6 70                	out    0x70,al
c000707c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007080:	e6 71                	out    0x71,al
c0007082:	c3                   	ret    
c0007083:	90                   	nop

c0007084 <Computer::handleNMI()>:
c0007084:	56                   	push   esi
c0007085:	53                   	push   ebx
c0007086:	83 ec 10             	sub    esp,0x10
c0007089:	e4 92                	in     al,0x92
c000708b:	89 c6                	mov    esi,eax
c000708d:	e4 61                	in     al,0x61
c000708f:	68 6f f3 01 c0       	push   0xc001f36f
c0007094:	88 c3                	mov    bl,al
c0007096:	e8 b8 35 00 00       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c000709b:	83 c4 10             	add    esp,0x10
c000709e:	83 e6 10             	and    esi,0x10
c00070a1:	75 0d                	jne    c00070b0 <Computer::handleNMI()+0x2c>
c00070a3:	f6 c3 40             	test   bl,0x40
c00070a6:	75 1d                	jne    c00070c5 <Computer::handleNMI()+0x41>
c00070a8:	84 db                	test   bl,bl
c00070aa:	78 2d                	js     c00070d9 <Computer::handleNMI()+0x55>
c00070ac:	58                   	pop    eax
c00070ad:	5b                   	pop    ebx
c00070ae:	5e                   	pop    esi
c00070af:	c3                   	ret    
c00070b0:	83 ec 0c             	sub    esp,0xc
c00070b3:	68 80 f3 01 c0       	push   0xc001f380
c00070b8:	e8 4a 93 00 00       	call   c0010407 <KePanic(char const*)>
c00070bd:	83 c4 10             	add    esp,0x10
c00070c0:	f6 c3 40             	test   bl,0x40
c00070c3:	74 e3                	je     c00070a8 <Computer::handleNMI()+0x24>
c00070c5:	83 ec 0c             	sub    esp,0xc
c00070c8:	68 8d f3 01 c0       	push   0xc001f38d
c00070cd:	e8 35 93 00 00       	call   c0010407 <KePanic(char const*)>
c00070d2:	83 c4 10             	add    esp,0x10
c00070d5:	84 db                	test   bl,bl
c00070d7:	79 d3                	jns    c00070ac <Computer::handleNMI()+0x28>
c00070d9:	c7 44 24 10 97 f3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f397
c00070e1:	5a                   	pop    edx
c00070e2:	5b                   	pop    ebx
c00070e3:	5e                   	pop    esi
c00070e4:	e9 1e 93 00 00       	jmp    c0010407 <KePanic(char const*)>
c00070e9:	90                   	nop

c00070ea <GDTEntry::setBase(unsigned int)>:
c00070ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00070f2:	89 c1                	mov    ecx,eax
c00070f4:	c1 e9 10             	shr    ecx,0x10
c00070f7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00070fb:	c1 e8 18             	shr    eax,0x18
c00070fe:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007101:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007104:	c3                   	ret    
c0007105:	90                   	nop

c0007106 <GDTEntry::setLimit(unsigned int)>:
c0007106:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000710a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000710e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007111:	66 89 01             	mov    WORD PTR [ecx],ax
c0007114:	c1 e8 10             	shr    eax,0x10
c0007117:	83 e2 f0             	and    edx,0xfffffff0
c000711a:	83 e0 0f             	and    eax,0xf
c000711d:	09 d0                	or     eax,edx
c000711f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007122:	c3                   	ret    
c0007123:	90                   	nop

c0007124 <GDT::GDT()>:
c0007124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007128:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000712e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007132:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007138:	90                   	nop
c0007139:	c3                   	ret    

c000713a <GDT::addEntry(GDTEntry)>:
c000713a:	53                   	push   ebx
c000713b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000713f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007143:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007147:	8b 02                	mov    eax,DWORD PTR [edx]
c0007149:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000714d:	8d 48 01             	lea    ecx,[eax+0x1]
c0007150:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007154:	89 0a                	mov    DWORD PTR [edx],ecx
c0007156:	c1 e0 03             	shl    eax,0x3
c0007159:	5b                   	pop    ebx
c000715a:	c3                   	ret    
c000715b:	90                   	nop

c000715c <GDT::getNumberOfEntries()>:
c000715c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007160:	8b 00                	mov    eax,DWORD PTR [eax]
c0007162:	c3                   	ret    
c0007163:	90                   	nop

c0007164 <GDT::flush()>:
c0007164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007168:	83 c0 04             	add    eax,0x4
c000716b:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000716e:	a3 c2 3e 02 c0       	mov    ds:0xc0023ec2,eax
c0007173:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000717a:	66 89 15 c0 3e 02 c0 	mov    WORD PTR ds:0xc0023ec0,dx
c0007181:	e9 d4 91 ff ff       	jmp    c000035a <loadGDT>

c0007186 <GDT::setup()>:
c0007186:	57                   	push   edi
c0007187:	56                   	push   esi
c0007188:	53                   	push   ebx
c0007189:	83 ec 30             	sub    esp,0x30
c000718c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007190:	6a 00                	push   0x0
c0007192:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007196:	56                   	push   esi
c0007197:	e8 4e ff ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c000719c:	6a 00                	push   0x0
c000719e:	56                   	push   esi
c000719f:	e8 62 ff ff ff       	call   c0007106 <GDTEntry::setLimit(unsigned int)>
c00071a4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00071ac:	6a 00                	push   0x0
c00071ae:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00071b2:	56                   	push   esi
c00071b3:	e8 32 ff ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c00071b8:	68 ff ff ff 00       	push   0xffffff
c00071bd:	56                   	push   esi
c00071be:	e8 43 ff ff ff       	call   c0007106 <GDTEntry::setLimit(unsigned int)>
c00071c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00071c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00071cb:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00071d0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00071d4:	0d 00 9a c0 00       	or     eax,0xc09a00
c00071d9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00071dd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00071e1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00071e5:	89 f8                	mov    eax,edi
c00071e7:	89 fa                	mov    edx,edi
c00071e9:	80 e4 f7             	and    ah,0xf7
c00071ec:	80 ce 60             	or     dh,0x60
c00071ef:	89 c7                	mov    edi,eax
c00071f1:	80 cc 60             	or     ah,0x60
c00071f4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00071f8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00071fc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007200:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007204:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007208:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000720c:	83 c4 20             	add    esp,0x20
c000720f:	6a 00                	push   0x0
c0007211:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007215:	50                   	push   eax
c0007216:	e8 cf fe ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c000721b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000721f:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007223:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007228:	6a 00                	push   0x0
c000722a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000722e:	50                   	push   eax
c000722f:	e8 b6 fe ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c0007234:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007239:	83 c4 0c             	add    esp,0xc
c000723c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007240:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007244:	53                   	push   ebx
c0007245:	e8 f0 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c000724a:	83 c4 0c             	add    esp,0xc
c000724d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007251:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007255:	53                   	push   ebx
c0007256:	e8 df fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c000725b:	83 c4 0c             	add    esp,0xc
c000725e:	57                   	push   edi
c000725f:	56                   	push   esi
c0007260:	53                   	push   ebx
c0007261:	e8 d4 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007266:	83 c4 0c             	add    esp,0xc
c0007269:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000726d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007271:	53                   	push   ebx
c0007272:	e8 c3 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007277:	83 c4 0c             	add    esp,0xc
c000727a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000727e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007282:	53                   	push   ebx
c0007283:	e8 b2 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007288:	83 c4 0c             	add    esp,0xc
c000728b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000728f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007293:	53                   	push   ebx
c0007294:	e8 a1 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007299:	83 c4 0c             	add    esp,0xc
c000729c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072a4:	53                   	push   ebx
c00072a5:	e8 90 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c00072aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00072ad:	e8 b2 fe ff ff       	call   c0007164 <GDT::flush()>
c00072b2:	83 c4 40             	add    esp,0x40
c00072b5:	5b                   	pop    ebx
c00072b6:	5e                   	pop    esi
c00072b7:	5f                   	pop    edi
c00072b8:	c3                   	ret    

c00072b9 <idleFunction(void*)>:
c00072b9:	83 ec 0c             	sub    esp,0xc
c00072bc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00072c1:	48                   	dec    eax
c00072c2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00072c7:	75 01                	jne    c00072ca <idleFunction(void*)+0x11>
c00072c9:	fb                   	sti    
c00072ca:	e8 2c f3 00 00       	call   c00165fb <HalSystemIdle()>
c00072cf:	e8 7e 6e 01 00       	call   c001e152 <idleCommon()>
c00072d4:	eb f4                	jmp    c00072ca <idleFunction(void*)+0x11>
c00072d6:	66 90                	xchg   ax,ax

c00072d8 <IDTEntry::IDTEntry(bool)>:
c00072d8:	83 ec 04             	sub    esp,0x4
c00072db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072df:	88 04 24             	mov    BYTE PTR [esp],al
c00072e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072e6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00072ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00072fb:	83 e2 f0             	and    edx,0xfffffff0
c00072fe:	83 ca 0e             	or     edx,0xe
c0007301:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007308:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000730b:	83 e2 ef             	and    edx,0xffffffef
c000730e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007311:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007315:	74 05                	je     c000731c <IDTEntry::IDTEntry(bool)+0x44>
c0007317:	b2 03                	mov    dl,0x3
c0007319:	eb 05                	jmp    c0007320 <IDTEntry::IDTEntry(bool)+0x48>
c000731b:	90                   	nop
c000731c:	b2 00                	mov    dl,0x0
c000731e:	66 90                	xchg   ax,ax
c0007320:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007324:	83 e2 03             	and    edx,0x3
c0007327:	88 d1                	mov    cl,dl
c0007329:	c1 e1 05             	shl    ecx,0x5
c000732c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000732f:	83 e2 9f             	and    edx,0xffffff9f
c0007332:	09 ca                	or     edx,ecx
c0007334:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007337:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000733e:	83 ca 80             	or     edx,0xffffff80
c0007341:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007344:	90                   	nop
c0007345:	83 c4 04             	add    esp,0x4
c0007348:	c3                   	ret    
c0007349:	90                   	nop

c000734a <IDTEntry::setOffset(unsigned int)>:
c000734a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007352:	66 89 02             	mov    WORD PTR [edx],ax
c0007355:	c1 e8 10             	shr    eax,0x10
c0007358:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000735c:	c3                   	ret    
c000735d:	90                   	nop
c000735e:	66 90                	xchg   ax,ax

c0007360 <IDT::IDT()>:
c0007360:	90                   	nop
c0007361:	c3                   	ret    

c0007362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007366:	83 c0 30             	add    eax,0x30
c0007369:	c3                   	ret    

c000736a <IDT::addEntry(IDTEntry, int)>:
c000736a:	53                   	push   ebx
c000736b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000736f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007377:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000737b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000737e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007382:	5b                   	pop    ebx
c0007383:	c3                   	ret    

c0007384 <IDT::addEntry(int, void (*)(), bool)>:
c0007384:	53                   	push   ebx
c0007385:	83 ec 10             	sub    esp,0x10
c0007388:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000738d:	50                   	push   eax
c000738e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0007392:	53                   	push   ebx
c0007393:	e8 40 ff ff ff       	call   c00072d8 <IDTEntry::IDTEntry(bool)>
c0007398:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000739c:	53                   	push   ebx
c000739d:	e8 a8 ff ff ff       	call   c000734a <IDTEntry::setOffset(unsigned int)>
c00073a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00073a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00073b2:	e8 b3 ff ff ff       	call   c000736a <IDT::addEntry(IDTEntry, int)>
c00073b7:	83 c4 30             	add    esp,0x30
c00073ba:	5b                   	pop    ebx
c00073bb:	c3                   	ret    

c00073bc <IDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	66 c7 05 c8 3e 02 c0 ff 07 	mov    WORD PTR ds:0xc0023ec8,0x7ff
c00073c9:	a3 ca 3e 02 c0       	mov    ds:0xc0023eca,eax
c00073ce:	0f 01 1d c8 3e 02 c0 	lidtd  ds:0xc0023ec8
c00073d5:	c3                   	ret    

c00073d6 <IDT::setup()>:
c00073d6:	57                   	push   edi
c00073d7:	56                   	push   esi
c00073d8:	53                   	push   ebx
c00073d9:	83 ec 10             	sub    esp,0x10
c00073dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00073e0:	6a 00                	push   0x0
c00073e2:	68 50 d8 01 c0       	push   0xc001d850
c00073e7:	6a 00                	push   0x0
c00073e9:	53                   	push   ebx
c00073ea:	e8 95 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00073ef:	6a 00                	push   0x0
c00073f1:	68 60 d8 01 c0       	push   0xc001d860
c00073f6:	6a 01                	push   0x1
c00073f8:	53                   	push   ebx
c00073f9:	e8 86 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00073fe:	83 c4 20             	add    esp,0x20
c0007401:	6a 00                	push   0x0
c0007403:	68 6a d8 01 c0       	push   0xc001d86a
c0007408:	6a 02                	push   0x2
c000740a:	53                   	push   ebx
c000740b:	e8 74 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007410:	6a 00                	push   0x0
c0007412:	68 74 d8 01 c0       	push   0xc001d874
c0007417:	6a 03                	push   0x3
c0007419:	53                   	push   ebx
c000741a:	e8 65 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000741f:	83 c4 20             	add    esp,0x20
c0007422:	6a 00                	push   0x0
c0007424:	68 7e d8 01 c0       	push   0xc001d87e
c0007429:	6a 04                	push   0x4
c000742b:	53                   	push   ebx
c000742c:	e8 53 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007431:	6a 00                	push   0x0
c0007433:	68 88 d8 01 c0       	push   0xc001d888
c0007438:	6a 05                	push   0x5
c000743a:	53                   	push   ebx
c000743b:	e8 44 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007440:	83 c4 20             	add    esp,0x20
c0007443:	6a 00                	push   0x0
c0007445:	68 92 d8 01 c0       	push   0xc001d892
c000744a:	6a 06                	push   0x6
c000744c:	53                   	push   ebx
c000744d:	e8 32 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007452:	6a 00                	push   0x0
c0007454:	68 9c d8 01 c0       	push   0xc001d89c
c0007459:	6a 07                	push   0x7
c000745b:	53                   	push   ebx
c000745c:	e8 23 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	6a 00                	push   0x0
c0007466:	68 a6 d8 01 c0       	push   0xc001d8a6
c000746b:	6a 08                	push   0x8
c000746d:	53                   	push   ebx
c000746e:	e8 11 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007473:	6a 00                	push   0x0
c0007475:	68 ae d8 01 c0       	push   0xc001d8ae
c000747a:	6a 09                	push   0x9
c000747c:	53                   	push   ebx
c000747d:	e8 02 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007482:	83 c4 20             	add    esp,0x20
c0007485:	6a 00                	push   0x0
c0007487:	68 b8 d8 01 c0       	push   0xc001d8b8
c000748c:	6a 0a                	push   0xa
c000748e:	53                   	push   ebx
c000748f:	e8 f0 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007494:	6a 00                	push   0x0
c0007496:	68 c0 d8 01 c0       	push   0xc001d8c0
c000749b:	6a 0b                	push   0xb
c000749d:	53                   	push   ebx
c000749e:	e8 e1 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074a3:	83 c4 20             	add    esp,0x20
c00074a6:	6a 00                	push   0x0
c00074a8:	68 c8 d8 01 c0       	push   0xc001d8c8
c00074ad:	6a 0c                	push   0xc
c00074af:	53                   	push   ebx
c00074b0:	e8 cf fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074b5:	6a 00                	push   0x0
c00074b7:	68 d0 d8 01 c0       	push   0xc001d8d0
c00074bc:	6a 0d                	push   0xd
c00074be:	53                   	push   ebx
c00074bf:	e8 c0 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074c4:	83 c4 20             	add    esp,0x20
c00074c7:	6a 00                	push   0x0
c00074c9:	68 ea d8 01 c0       	push   0xc001d8ea
c00074ce:	6a 0e                	push   0xe
c00074d0:	53                   	push   ebx
c00074d1:	e8 ae fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074d6:	6a 00                	push   0x0
c00074d8:	68 f2 d8 01 c0       	push   0xc001d8f2
c00074dd:	6a 0f                	push   0xf
c00074df:	53                   	push   ebx
c00074e0:	e8 9f fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074e5:	83 c4 20             	add    esp,0x20
c00074e8:	6a 00                	push   0x0
c00074ea:	68 fc d8 01 c0       	push   0xc001d8fc
c00074ef:	6a 10                	push   0x10
c00074f1:	53                   	push   ebx
c00074f2:	e8 8d fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074f7:	6a 00                	push   0x0
c00074f9:	68 06 d9 01 c0       	push   0xc001d906
c00074fe:	6a 11                	push   0x11
c0007500:	53                   	push   ebx
c0007501:	e8 7e fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007506:	83 c4 20             	add    esp,0x20
c0007509:	6a 00                	push   0x0
c000750b:	68 10 d9 01 c0       	push   0xc001d910
c0007510:	6a 12                	push   0x12
c0007512:	53                   	push   ebx
c0007513:	e8 6c fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007518:	6a 01                	push   0x1
c000751a:	68 aa d9 01 c0       	push   0xc001d9aa
c000751f:	6a 60                	push   0x60
c0007521:	53                   	push   ebx
c0007522:	e8 5d fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007527:	83 c4 20             	add    esp,0x20
c000752a:	6a 00                	push   0x0
c000752c:	68 b1 d9 01 c0       	push   0xc001d9b1
c0007531:	6a 20                	push   0x20
c0007533:	53                   	push   ebx
c0007534:	e8 4b fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007539:	6a 00                	push   0x0
c000753b:	68 9c d9 01 c0       	push   0xc001d99c
c0007540:	6a 21                	push   0x21
c0007542:	53                   	push   ebx
c0007543:	e8 3c fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007548:	83 c4 20             	add    esp,0x20
c000754b:	6a 00                	push   0x0
c000754d:	68 a3 d9 01 c0       	push   0xc001d9a3
c0007552:	6a 22                	push   0x22
c0007554:	53                   	push   ebx
c0007555:	e8 2a fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000755a:	6a 00                	push   0x0
c000755c:	68 1a d9 01 c0       	push   0xc001d91a
c0007561:	6a 23                	push   0x23
c0007563:	53                   	push   ebx
c0007564:	e8 1b fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007569:	83 c4 20             	add    esp,0x20
c000756c:	6a 00                	push   0x0
c000756e:	68 24 d9 01 c0       	push   0xc001d924
c0007573:	6a 24                	push   0x24
c0007575:	53                   	push   ebx
c0007576:	e8 09 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000757b:	6a 00                	push   0x0
c000757d:	68 2e d9 01 c0       	push   0xc001d92e
c0007582:	6a 25                	push   0x25
c0007584:	53                   	push   ebx
c0007585:	e8 fa fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000758a:	83 c4 20             	add    esp,0x20
c000758d:	6a 00                	push   0x0
c000758f:	68 38 d9 01 c0       	push   0xc001d938
c0007594:	6a 26                	push   0x26
c0007596:	53                   	push   ebx
c0007597:	e8 e8 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000759c:	6a 00                	push   0x0
c000759e:	68 42 d9 01 c0       	push   0xc001d942
c00075a3:	6a 27                	push   0x27
c00075a5:	53                   	push   ebx
c00075a6:	e8 d9 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075ab:	83 c4 20             	add    esp,0x20
c00075ae:	6a 00                	push   0x0
c00075b0:	68 4c d9 01 c0       	push   0xc001d94c
c00075b5:	6a 28                	push   0x28
c00075b7:	53                   	push   ebx
c00075b8:	e8 c7 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075bd:	6a 00                	push   0x0
c00075bf:	68 56 d9 01 c0       	push   0xc001d956
c00075c4:	6a 29                	push   0x29
c00075c6:	53                   	push   ebx
c00075c7:	e8 b8 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075cc:	83 c4 20             	add    esp,0x20
c00075cf:	6a 00                	push   0x0
c00075d1:	68 60 d9 01 c0       	push   0xc001d960
c00075d6:	6a 2a                	push   0x2a
c00075d8:	53                   	push   ebx
c00075d9:	e8 a6 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075de:	6a 00                	push   0x0
c00075e0:	68 6a d9 01 c0       	push   0xc001d96a
c00075e5:	6a 2b                	push   0x2b
c00075e7:	53                   	push   ebx
c00075e8:	e8 97 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075ed:	83 c4 20             	add    esp,0x20
c00075f0:	6a 00                	push   0x0
c00075f2:	68 74 d9 01 c0       	push   0xc001d974
c00075f7:	6a 2c                	push   0x2c
c00075f9:	53                   	push   ebx
c00075fa:	e8 85 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075ff:	6a 00                	push   0x0
c0007601:	68 7e d9 01 c0       	push   0xc001d97e
c0007606:	6a 2d                	push   0x2d
c0007608:	53                   	push   ebx
c0007609:	e8 76 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000760e:	83 c4 20             	add    esp,0x20
c0007611:	6a 00                	push   0x0
c0007613:	68 88 d9 01 c0       	push   0xc001d988
c0007618:	6a 2e                	push   0x2e
c000761a:	53                   	push   ebx
c000761b:	e8 64 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007620:	6a 00                	push   0x0
c0007622:	68 92 d9 01 c0       	push   0xc001d992
c0007627:	6a 2f                	push   0x2f
c0007629:	53                   	push   ebx
c000762a:	e8 55 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000762f:	83 c4 20             	add    esp,0x20
c0007632:	6a 00                	push   0x0
c0007634:	68 ec da 01 c0       	push   0xc001daec
c0007639:	6a 30                	push   0x30
c000763b:	53                   	push   ebx
c000763c:	e8 43 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007641:	6a 00                	push   0x0
c0007643:	68 f6 da 01 c0       	push   0xc001daf6
c0007648:	6a 31                	push   0x31
c000764a:	53                   	push   ebx
c000764b:	e8 34 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007650:	83 c4 20             	add    esp,0x20
c0007653:	6a 00                	push   0x0
c0007655:	68 00 db 01 c0       	push   0xc001db00
c000765a:	6a 32                	push   0x32
c000765c:	53                   	push   ebx
c000765d:	e8 22 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007662:	6a 00                	push   0x0
c0007664:	68 0a db 01 c0       	push   0xc001db0a
c0007669:	6a 33                	push   0x33
c000766b:	53                   	push   ebx
c000766c:	e8 13 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007671:	83 c4 20             	add    esp,0x20
c0007674:	6a 00                	push   0x0
c0007676:	68 14 db 01 c0       	push   0xc001db14
c000767b:	6a 34                	push   0x34
c000767d:	53                   	push   ebx
c000767e:	e8 01 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007683:	6a 00                	push   0x0
c0007685:	68 1e db 01 c0       	push   0xc001db1e
c000768a:	6a 35                	push   0x35
c000768c:	53                   	push   ebx
c000768d:	e8 f2 fc ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007692:	83 c4 20             	add    esp,0x20
c0007695:	6a 00                	push   0x0
c0007697:	68 28 db 01 c0       	push   0xc001db28
c000769c:	6a 36                	push   0x36
c000769e:	53                   	push   ebx
c000769f:	e8 e0 fc ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00076a4:	6a 00                	push   0x0
c00076a6:	68 32 db 01 c0       	push   0xc001db32
c00076ab:	6a 37                	push   0x37
c00076ad:	53                   	push   ebx
c00076ae:	e8 d1 fc ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00076b3:	83 c4 1c             	add    esp,0x1c
c00076b6:	6a 03                	push   0x3
c00076b8:	6a 02                	push   0x2
c00076ba:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00076c0:	e8 73 24 00 00       	call   c0009b38 <VAS::allocatePages(int, int)>
c00076c5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00076cc:	89 c6                	mov    esi,eax
c00076ce:	e8 90 01 00 00       	call   c0007863 <malloc>
c00076d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00076d6:	89 c7                	mov    edi,eax
c00076d8:	e8 c3 15 00 00       	call   c0008ca0 <TSS::TSS()>
c00076dd:	83 c4 0c             	add    esp,0xc
c00076e0:	81 c6 00 20 00 00    	add    esi,0x2000
c00076e6:	68 a6 d8 01 c0       	push   0xc001d8a6
c00076eb:	56                   	push   esi
c00076ec:	57                   	push   edi
c00076ed:	e8 f2 15 00 00       	call   c0008ce4 <TSS::setup(unsigned long, unsigned long)>
c00076f2:	89 c6                	mov    esi,eax
c00076f4:	58                   	pop    eax
c00076f5:	5a                   	pop    edx
c00076f6:	6a 00                	push   0x0
c00076f8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00076fc:	50                   	push   eax
c00076fd:	e8 d6 fb ff ff       	call   c00072d8 <IDTEntry::IDTEntry(bool)>
c0007702:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007706:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000770b:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007711:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007718:	80 ce 05             	or     dh,0x5
c000771b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000771f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007723:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007726:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000772a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000772d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007730:	e8 87 fc ff ff       	call   c00073bc <IDT::flush()>
c0007735:	83 c4 20             	add    esp,0x20
c0007738:	5b                   	pop    ebx
c0007739:	5e                   	pop    esi
c000773a:	5f                   	pop    edi
c000773b:	c3                   	ret    

c000773c <sbrk>:
c000773c:	55                   	push   ebp
c000773d:	57                   	push   edi
c000773e:	56                   	push   esi
c000773f:	53                   	push   ebx
c0007740:	83 ec 1c             	sub    esp,0x1c
c0007743:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007747:	85 ed                	test   ebp,ebp
c0007749:	a1 0c 17 02 c0       	mov    eax,ds:0xc002170c
c000774e:	74 5f                	je     c00077af <sbrk+0x73>
c0007750:	78 65                	js     c00077b7 <sbrk+0x7b>
c0007752:	a1 0c 17 02 c0       	mov    eax,ds:0xc002170c
c0007757:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000775b:	81 c5 ff 0f 00 00    	add    ebp,0xfff
c0007761:	89 e8                	mov    eax,ebp
c0007763:	c1 f8 1f             	sar    eax,0x1f
c0007766:	25 ff 0f 00 00       	and    eax,0xfff
c000776b:	01 c5                	add    ebp,eax
c000776d:	c1 fd 0c             	sar    ebp,0xc
c0007770:	bb 00 00 00 00       	mov    ebx,0x0
c0007775:	8b 35 b0 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fb0
c000777b:	8b 3d 0c 17 02 c0    	mov    edi,DWORD PTR ds:0xc002170c
c0007781:	e8 d4 03 00 00       	call   c0007b5a <Phys::allocatePage()>
c0007786:	68 01 04 00 00       	push   0x401
c000778b:	57                   	push   edi
c000778c:	50                   	push   eax
c000778d:	56                   	push   esi
c000778e:	e8 9f 22 00 00       	call   c0009a32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007793:	81 05 0c 17 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002170c,0x1000
c000779d:	43                   	inc    ebx
c000779e:	83 c4 10             	add    esp,0x10
c00077a1:	39 dd                	cmp    ebp,ebx
c00077a3:	75 d0                	jne    c0007775 <sbrk+0x39>
c00077a5:	0f 20 d8             	mov    eax,cr3
c00077a8:	0f 22 d8             	mov    cr3,eax
c00077ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00077af:	83 c4 1c             	add    esp,0x1c
c00077b2:	5b                   	pop    ebx
c00077b3:	5e                   	pop    esi
c00077b4:	5f                   	pop    edi
c00077b5:	5d                   	pop    ebp
c00077b6:	c3                   	ret    
c00077b7:	83 ec 08             	sub    esp,0x8
c00077ba:	55                   	push   ebp
c00077bb:	68 14 f4 01 c0       	push   0xc001f414
c00077c0:	e8 8e 2e 00 00       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c00077c5:	83 c4 10             	add    esp,0x10
c00077c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00077cd:	eb e0                	jmp    c00077af <sbrk+0x73>

c00077cf <mmap>:
c00077cf:	83 ec 18             	sub    esp,0x18
c00077d2:	68 44 f4 01 c0       	push   0xc001f444
c00077d7:	e8 2b 8c 00 00       	call   c0010407 <KePanic(char const*)>
c00077dc:	b8 00 00 00 00       	mov    eax,0x0
c00077e1:	83 c4 1c             	add    esp,0x1c
c00077e4:	c3                   	ret    

c00077e5 <munmap>:
c00077e5:	83 ec 18             	sub    esp,0x18
c00077e8:	68 49 f4 01 c0       	push   0xc001f449
c00077ed:	e8 15 8c 00 00       	call   c0010407 <KePanic(char const*)>
c00077f2:	b8 00 00 00 00       	mov    eax,0x0
c00077f7:	83 c4 1c             	add    esp,0x1c
c00077fa:	c3                   	ret    

c00077fb <liballoc_lock()>:
c00077fb:	fa                   	cli    
c00077fc:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0007802:	b8 00 00 00 00       	mov    eax,0x0
c0007807:	c3                   	ret    

c0007808 <liballoc_unlock()>:
c0007808:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000780d:	48                   	dec    eax
c000780e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007813:	75 01                	jne    c0007816 <liballoc_unlock()+0xe>
c0007815:	fb                   	sti    
c0007816:	b8 00 00 00 00       	mov    eax,0x0
c000781b:	c3                   	ret    

c000781c <liballoc_alloc(int)>:
c000781c:	83 ec 10             	sub    esp,0x10
c000781f:	6a 01                	push   0x1
c0007821:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007825:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c000782b:	e8 08 23 00 00       	call   c0009b38 <VAS::allocatePages(int, int)>
c0007830:	83 c4 1c             	add    esp,0x1c
c0007833:	c3                   	ret    

c0007834 <liballoc_free(void*, int)>:
c0007834:	83 ec 14             	sub    esp,0x14
c0007837:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000783b:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0007841:	e8 3e 1f 00 00       	call   c0009784 <VAS::freeAllocatedPages(unsigned long)>
c0007846:	b8 00 00 00 00       	mov    eax,0x0
c000784b:	83 c4 1c             	add    esp,0x1c
c000784e:	c3                   	ret    

c000784f <realloc>:
c000784f:	83 ec 14             	sub    esp,0x14
c0007852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000785a:	e8 de 9c ff ff       	call   c000153d <dlrealloc>
c000785f:	83 c4 1c             	add    esp,0x1c
c0007862:	c3                   	ret    

c0007863 <malloc>:
c0007863:	83 ec 18             	sub    esp,0x18
c0007866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000786a:	e8 91 97 ff ff       	call   c0001000 <dlmalloc>
c000786f:	83 c4 1c             	add    esp,0x1c
c0007872:	c3                   	ret    

c0007873 <free>:
c0007873:	83 ec 18             	sub    esp,0x18
c0007876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000787a:	e8 23 94 ff ff       	call   c0000ca2 <dlfree>
c000787f:	83 c4 1c             	add    esp,0x1c
c0007882:	c3                   	ret    

c0007883 <rfree>:
c0007883:	83 ec 18             	sub    esp,0x18
c0007886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000788a:	e8 13 94 ff ff       	call   c0000ca2 <dlfree>
c000788f:	83 c4 1c             	add    esp,0x1c
c0007892:	c3                   	ret    

c0007893 <calloc>:
c0007893:	56                   	push   esi
c0007894:	53                   	push   ebx
c0007895:	83 ec 10             	sub    esp,0x10
c0007898:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000789c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00078a1:	53                   	push   ebx
c00078a2:	e8 bc ff ff ff       	call   c0007863 <malloc>
c00078a7:	89 c6                	mov    esi,eax
c00078a9:	83 c4 0c             	add    esp,0xc
c00078ac:	53                   	push   ebx
c00078ad:	6a 00                	push   0x0
c00078af:	50                   	push   eax
c00078b0:	e8 0b 8c ff ff       	call   c00004c0 <memset>
c00078b5:	89 f0                	mov    eax,esi
c00078b7:	83 c4 14             	add    esp,0x14
c00078ba:	5b                   	pop    ebx
c00078bb:	5e                   	pop    esi
c00078bc:	c3                   	ret    

c00078bd <KeEntryPoint>:
c00078bd:	57                   	push   edi
c00078be:	bf f9 03 00 00       	mov    edi,0x3f9
c00078c3:	56                   	push   esi
c00078c4:	31 f6                	xor    esi,esi
c00078c6:	53                   	push   ebx
c00078c7:	89 fa                	mov    edx,edi
c00078c9:	83 ec 2c             	sub    esp,0x2c
c00078cc:	a1 00 05 00 00       	mov    eax,ds:0x500
c00078d1:	a3 d0 3e 02 c0       	mov    ds:0xc0023ed0,eax
c00078d6:	89 f0                	mov    eax,esi
c00078d8:	ee                   	out    dx,al
c00078d9:	bb fb 03 00 00       	mov    ebx,0x3fb
c00078de:	b0 80                	mov    al,0x80
c00078e0:	89 da                	mov    edx,ebx
c00078e2:	ee                   	out    dx,al
c00078e3:	b1 03                	mov    cl,0x3
c00078e5:	ba f8 03 00 00       	mov    edx,0x3f8
c00078ea:	88 c8                	mov    al,cl
c00078ec:	ee                   	out    dx,al
c00078ed:	89 f0                	mov    eax,esi
c00078ef:	89 fa                	mov    edx,edi
c00078f1:	ee                   	out    dx,al
c00078f2:	88 c8                	mov    al,cl
c00078f4:	89 da                	mov    edx,ebx
c00078f6:	ee                   	out    dx,al
c00078f7:	b0 c7                	mov    al,0xc7
c00078f9:	ba fa 03 00 00       	mov    edx,0x3fa
c00078fe:	ee                   	out    dx,al
c00078ff:	b0 0b                	mov    al,0xb
c0007901:	ba fc 03 00 00       	mov    edx,0x3fc
c0007906:	ee                   	out    dx,al
c0007907:	68 50 f4 01 c0       	push   0xc001f450
c000790c:	e8 42 2d 00 00       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0007911:	e8 0b 84 00 00       	call   c000fd21 <KeDisplaySplashScreen()>
c0007916:	a1 24 05 00 00       	mov    eax,ds:0x524
c000791b:	05 ff 0f 00 00       	add    eax,0xfff
c0007920:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	e8 92 03 00 00       	call   c0007cbf <Phys::physicalMemorySetup(unsigned int)>
c000792d:	e8 f9 1b 00 00       	call   c000952b <Virt::virtualMemorySetup()>
c0007932:	58                   	pop    eax
c0007933:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007937:	53                   	push   ebx
c0007938:	e8 c9 1e 00 00       	call   c0009806 <VAS::VAS()>
c000793d:	89 1d b0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fb0,ebx
c0007943:	e8 a2 67 01 00       	call   c001e0ea <_init>
c0007948:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c000794f:	e8 0f ff ff ff       	call   c0007863 <malloc>
c0007954:	89 04 24             	mov    DWORD PTR [esp],eax
c0007957:	89 c6                	mov    esi,eax
c0007959:	e8 76 f2 ff ff       	call   c0006bd4 <Computer::Computer()>
c000795e:	6a 00                	push   0x0
c0007960:	6a 00                	push   0x0
c0007962:	89 35 b8 3e 02 c0    	mov    DWORD PTR ds:0xc0023eb8,esi
c0007968:	6a 00                	push   0x0
c000796a:	56                   	push   esi
c000796b:	e8 24 f6 ff ff       	call   c0006f94 <Computer::open(int, int, void*)>
c0007970:	83 c4 14             	add    esp,0x14
c0007973:	53                   	push   ebx
c0007974:	e8 55 1f 00 00       	call   c00098ce <VAS::~VAS()>
c0007979:	83 c4 30             	add    esp,0x30
c000797c:	5b                   	pop    ebx
c000797d:	5e                   	pop    esi
c000797e:	5f                   	pop    edi
c000797f:	c3                   	ret    

c0007980 <Phys::allocateDMA(unsigned long)>:
c0007980:	55                   	push   ebp
c0007981:	31 ed                	xor    ebp,ebp
c0007983:	57                   	push   edi
c0007984:	56                   	push   esi
c0007985:	53                   	push   ebx
c0007986:	31 db                	xor    ebx,ebx
c0007988:	83 ec 1c             	sub    esp,0x1c
c000798b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000798f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007997:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000799d:	31 c0                	xor    eax,eax
c000799f:	c1 ef 0c             	shr    edi,0xc
c00079a2:	eb 19                	jmp    c00079bd <Phys::allocateDMA(unsigned long)+0x3d>
c00079a4:	85 c0                	test   eax,eax
c00079a6:	75 06                	jne    c00079ae <Phys::allocateDMA(unsigned long)+0x2e>
c00079a8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00079ac:	89 dd                	mov    ebp,ebx
c00079ae:	8d 70 01             	lea    esi,[eax+0x1]
c00079b1:	39 f7                	cmp    edi,esi
c00079b3:	74 33                	je     c00079e8 <Phys::allocateDMA(unsigned long)+0x68>
c00079b5:	89 f0                	mov    eax,esi
c00079b7:	43                   	inc    ebx
c00079b8:	83 fb 0f             	cmp    ebx,0xf
c00079bb:	7f 11                	jg     c00079ce <Phys::allocateDMA(unsigned long)+0x4e>
c00079bd:	80 bb ec 3e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdc114],0x0
c00079c4:	74 de                	je     c00079a4 <Phys::allocateDMA(unsigned long)+0x24>
c00079c6:	31 c0                	xor    eax,eax
c00079c8:	43                   	inc    ebx
c00079c9:	83 fb 0f             	cmp    ebx,0xf
c00079cc:	7e ef                	jle    c00079bd <Phys::allocateDMA(unsigned long)+0x3d>
c00079ce:	83 ec 0c             	sub    esp,0xc
c00079d1:	68 68 f4 01 c0       	push   0xc001f468
c00079d6:	e8 2c 8a 00 00       	call   c0010407 <KePanic(char const*)>
c00079db:	83 c4 10             	add    esp,0x10
c00079de:	31 c0                	xor    eax,eax
c00079e0:	83 c4 1c             	add    esp,0x1c
c00079e3:	5b                   	pop    ebx
c00079e4:	5e                   	pop    esi
c00079e5:	5f                   	pop    edi
c00079e6:	5d                   	pop    ebp
c00079e7:	c3                   	ret    
c00079e8:	89 e9                	mov    ecx,ebp
c00079ea:	c1 f9 04             	sar    ecx,0x4
c00079ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00079f1:	8d 4c 2f ff          	lea    ecx,[edi+ebp*1-0x1]
c00079f5:	89 ca                	mov    edx,ecx
c00079f7:	c1 fa 1f             	sar    edx,0x1f
c00079fa:	83 e2 0f             	and    edx,0xf
c00079fd:	01 ca                	add    edx,ecx
c00079ff:	c1 fa 04             	sar    edx,0x4
c0007a02:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007a06:	74 08                	je     c0007a10 <Phys::allocateDMA(unsigned long)+0x90>
c0007a08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007a0c:	31 c0                	xor    eax,eax
c0007a0e:	eb b8                	jmp    c00079c8 <Phys::allocateDMA(unsigned long)+0x48>
c0007a10:	85 ff                	test   edi,edi
c0007a12:	74 15                	je     c0007a29 <Phys::allocateDMA(unsigned long)+0xa9>
c0007a14:	8d 95 ec 3e 02 c0    	lea    edx,[ebp-0x3ffdc114]
c0007a1a:	8d 84 05 ed 3e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdc113]
c0007a21:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007a24:	42                   	inc    edx
c0007a25:	39 d0                	cmp    eax,edx
c0007a27:	75 f8                	jne    c0007a21 <Phys::allocateDMA(unsigned long)+0xa1>
c0007a29:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c0007a2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007a32:	01 f8                	add    eax,edi
c0007a34:	85 d2                	test   edx,edx
c0007a36:	a3 e4 3e 02 c0       	mov    ds:0xc0023ee4,eax
c0007a3b:	74 17                	je     c0007a54 <Phys::allocateDMA(unsigned long)+0xd4>
c0007a3d:	83 ec 0c             	sub    esp,0xc
c0007a40:	68 68 f4 01 c0       	push   0xc001f468
c0007a45:	e8 bd 89 00 00       	call   c0010407 <KePanic(char const*)>
c0007a4a:	83 c4 10             	add    esp,0x10
c0007a4d:	89 f0                	mov    eax,esi
c0007a4f:	e9 63 ff ff ff       	jmp    c00079b7 <Phys::allocateDMA(unsigned long)+0x37>
c0007a54:	c1 e5 0c             	shl    ebp,0xc
c0007a57:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007a5d:	eb 81                	jmp    c00079e0 <Phys::allocateDMA(unsigned long)+0x60>

c0007a5f <Phys::freeDMA(unsigned long, unsigned long)>:
c0007a5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a63:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007a69:	a1 e4 3e 02 c0       	mov    eax,ds:0xc0023ee4
c0007a6e:	c1 ea 0c             	shr    edx,0xc
c0007a71:	29 d0                	sub    eax,edx
c0007a73:	a3 e4 3e 02 c0       	mov    ds:0xc0023ee4,eax
c0007a78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a7c:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007a81:	c1 e8 0c             	shr    eax,0xc
c0007a84:	85 d2                	test   edx,edx
c0007a86:	74 0f                	je     c0007a97 <Phys::freeDMA(unsigned long, unsigned long)+0x38>
c0007a88:	05 ec 3e 02 c0       	add    eax,0xc0023eec
c0007a8d:	01 c2                	add    edx,eax
c0007a8f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007a92:	40                   	inc    eax
c0007a93:	39 d0                	cmp    eax,edx
c0007a95:	75 f8                	jne    c0007a8f <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007a97:	c3                   	ret    

c0007a98 <Phys::setPageState(unsigned long, bool)>:
c0007a98:	56                   	push   esi
c0007a99:	ba 01 00 00 00       	mov    edx,0x1
c0007a9e:	53                   	push   ebx
c0007a9f:	8b 35 10 17 02 c0    	mov    esi,DWORD PTR ds:0xc0021710
c0007aa5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007aa9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007aad:	89 c8                	mov    eax,ecx
c0007aaf:	83 e1 07             	and    ecx,0x7
c0007ab2:	c1 e8 03             	shr    eax,0x3
c0007ab5:	01 c6                	add    esi,eax
c0007ab7:	d3 e2                	shl    edx,cl
c0007ab9:	83 f2 ff             	xor    edx,0xffffffff
c0007abc:	20 16                	and    BYTE PTR [esi],dl
c0007abe:	8b 15 10 17 02 c0    	mov    edx,DWORD PTR ds:0xc0021710
c0007ac4:	01 d0                	add    eax,edx
c0007ac6:	d3 e3                	shl    ebx,cl
c0007ac8:	8a 08                	mov    cl,BYTE PTR [eax]
c0007aca:	09 d9                	or     ecx,ebx
c0007acc:	88 08                	mov    BYTE PTR [eax],cl
c0007ace:	5b                   	pop    ebx
c0007acf:	5e                   	pop    esi
c0007ad0:	c3                   	ret    

c0007ad1 <Phys::getPageState(unsigned long)>:
c0007ad1:	53                   	push   ebx
c0007ad2:	8b 15 10 17 02 c0    	mov    edx,DWORD PTR ds:0xc0021710
c0007ad8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007adc:	31 db                	xor    ebx,ebx
c0007ade:	89 c8                	mov    eax,ecx
c0007ae0:	83 e1 07             	and    ecx,0x7
c0007ae3:	c1 e8 03             	shr    eax,0x3
c0007ae6:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007ae9:	89 d8                	mov    eax,ebx
c0007aeb:	5b                   	pop    ebx
c0007aec:	d3 f8                	sar    eax,cl
c0007aee:	83 e0 01             	and    eax,0x1
c0007af1:	c3                   	ret    

c0007af2 <Phys::freePage(unsigned long)>:
c0007af2:	53                   	push   ebx
c0007af3:	83 ec 08             	sub    esp,0x8
c0007af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007afa:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007b00:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007b06:	76 40                	jbe    c0007b48 <Phys::freePage(unsigned long)+0x56>
c0007b08:	c1 e8 0c             	shr    eax,0xc
c0007b0b:	50                   	push   eax
c0007b0c:	89 c3                	mov    ebx,eax
c0007b0e:	e8 be ff ff ff       	call   c0007ad1 <Phys::getPageState(unsigned long)>
c0007b13:	59                   	pop    ecx
c0007b14:	84 c0                	test   al,al
c0007b16:	74 1f                	je     c0007b37 <Phys::freePage(unsigned long)+0x45>
c0007b18:	50                   	push   eax
c0007b19:	8b 0d e4 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ee4
c0007b1f:	50                   	push   eax
c0007b20:	49                   	dec    ecx
c0007b21:	6a 00                	push   0x0
c0007b23:	89 0d e4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee4,ecx
c0007b29:	53                   	push   ebx
c0007b2a:	e8 69 ff ff ff       	call   c0007a98 <Phys::setPageState(unsigned long, bool)>
c0007b2f:	83 c4 10             	add    esp,0x10
c0007b32:	83 c4 08             	add    esp,0x8
c0007b35:	5b                   	pop    ebx
c0007b36:	c3                   	ret    
c0007b37:	c7 44 24 10 0d f5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f50d
c0007b3f:	83 c4 08             	add    esp,0x8
c0007b42:	5b                   	pop    ebx
c0007b43:	e9 bf 88 00 00       	jmp    c0010407 <KePanic(char const*)>
c0007b48:	68 00 10 00 00       	push   0x1000
c0007b4d:	50                   	push   eax
c0007b4e:	e8 0c ff ff ff       	call   c0007a5f <Phys::freeDMA(unsigned long, unsigned long)>
c0007b53:	5b                   	pop    ebx
c0007b54:	58                   	pop    eax
c0007b55:	83 c4 08             	add    esp,0x8
c0007b58:	5b                   	pop    ebx
c0007b59:	c3                   	ret    

c0007b5a <Phys::allocatePage()>:
c0007b5a:	56                   	push   esi
c0007b5b:	53                   	push   ebx
c0007b5c:	83 ec 14             	sub    esp,0x14
c0007b5f:	8b 35 d8 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023ed8
c0007b65:	89 f3                	mov    ebx,esi
c0007b67:	eb 0a                	jmp    c0007b73 <Phys::allocatePage()+0x19>
c0007b69:	89 1d d8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ed8,ebx
c0007b6f:	39 de                	cmp    esi,ebx
c0007b71:	74 24                	je     c0007b97 <Phys::allocatePage()+0x3d>
c0007b73:	53                   	push   ebx
c0007b74:	e8 58 ff ff ff       	call   c0007ad1 <Phys::getPageState(unsigned long)>
c0007b79:	5a                   	pop    edx
c0007b7a:	84 c0                	test   al,al
c0007b7c:	74 67                	je     c0007be5 <Phys::allocatePage()+0x8b>
c0007b7e:	43                   	inc    ebx
c0007b7f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007b85:	75 e2                	jne    c0007b69 <Phys::allocatePage()+0xf>
c0007b87:	31 db                	xor    ebx,ebx
c0007b89:	c7 05 d8 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ed8,0x0
c0007b93:	39 de                	cmp    esi,ebx
c0007b95:	75 dc                	jne    c0007b73 <Phys::allocatePage()+0x19>
c0007b97:	8a 0d fc 3e 02 c0    	mov    cl,BYTE PTR ds:0xc0023efc
c0007b9d:	83 ec 0c             	sub    esp,0xc
c0007ba0:	83 f1 01             	xor    ecx,0x1
c0007ba3:	88 0d fc 3e 02 c0    	mov    BYTE PTR ds:0xc0023efc,cl
c0007ba9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007bae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007bb1:	8b 98 12 05 00 00    	mov    ebx,DWORD PTR [eax+0x512]
c0007bb7:	53                   	push   ebx
c0007bb8:	e8 77 27 00 00       	call   c000a334 <VAS::scanForEviction()>
c0007bbd:	83 c4 10             	add    esp,0x10
c0007bc0:	85 c0                	test   eax,eax
c0007bc2:	75 46                	jne    c0007c0a <Phys::allocatePage()+0xb0>
c0007bc4:	83 ec 0c             	sub    esp,0xc
c0007bc7:	68 90 f4 01 c0       	push   0xc001f490
c0007bcc:	e8 36 88 00 00       	call   c0010407 <KePanic(char const*)>
c0007bd1:	83 c4 10             	add    esp,0x10
c0007bd4:	8b 1d d8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ed8
c0007bda:	53                   	push   ebx
c0007bdb:	e8 f1 fe ff ff       	call   c0007ad1 <Phys::getPageState(unsigned long)>
c0007be0:	5a                   	pop    edx
c0007be1:	84 c0                	test   al,al
c0007be3:	75 99                	jne    c0007b7e <Phys::allocatePage()+0x24>
c0007be5:	6a 01                	push   0x1
c0007be7:	53                   	push   ebx
c0007be8:	e8 ab fe ff ff       	call   c0007a98 <Phys::setPageState(unsigned long, bool)>
c0007bed:	8b 35 e4 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023ee4
c0007bf3:	a1 d8 3e 02 c0       	mov    eax,ds:0xc0023ed8
c0007bf8:	46                   	inc    esi
c0007bf9:	5a                   	pop    edx
c0007bfa:	89 35 e4 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee4,esi
c0007c00:	59                   	pop    ecx
c0007c01:	c1 e0 0c             	shl    eax,0xc
c0007c04:	83 c4 14             	add    esp,0x14
c0007c07:	5b                   	pop    ebx
c0007c08:	5e                   	pop    esi
c0007c09:	c3                   	ret    
c0007c0a:	52                   	push   edx
c0007c0b:	52                   	push   edx
c0007c0c:	89 c2                	mov    edx,eax
c0007c0e:	c1 ea 0c             	shr    edx,0xc
c0007c11:	6a 01                	push   0x1
c0007c13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c17:	52                   	push   edx
c0007c18:	e8 7b fe ff ff       	call   c0007a98 <Phys::setPageState(unsigned long, bool)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c24:	eb de                	jmp    c0007c04 <Phys::allocatePage()+0xaa>

c0007c26 <Phys::allocateContiguousPages(int)>:
c0007c26:	57                   	push   edi
c0007c27:	56                   	push   esi
c0007c28:	53                   	push   ebx
c0007c29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c2d:	fa                   	cli    
c0007c2e:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0007c33:	31 db                	xor    ebx,ebx
c0007c35:	40                   	inc    eax
c0007c36:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007c3b:	85 db                	test   ebx,ebx
c0007c3d:	75 11                	jne    c0007c50 <Phys::allocateContiguousPages(int)+0x2a>
c0007c3f:	e8 16 ff ff ff       	call   c0007b5a <Phys::allocatePage()>
c0007c44:	83 fe 01             	cmp    esi,0x1
c0007c47:	89 c7                	mov    edi,eax
c0007c49:	74 21                	je     c0007c6c <Phys::allocateContiguousPages(int)+0x46>
c0007c4b:	bb 01 00 00 00       	mov    ebx,0x1
c0007c50:	e8 05 ff ff ff       	call   c0007b5a <Phys::allocatePage()>
c0007c55:	89 da                	mov    edx,ebx
c0007c57:	c1 e2 0c             	shl    edx,0xc
c0007c5a:	01 fa                	add    edx,edi
c0007c5c:	39 c2                	cmp    edx,eax
c0007c5e:	74 20                	je     c0007c80 <Phys::allocateContiguousPages(int)+0x5a>
c0007c60:	bb 01 00 00 00       	mov    ebx,0x1
c0007c65:	89 c7                	mov    edi,eax
c0007c67:	83 fe 01             	cmp    esi,0x1
c0007c6a:	75 e4                	jne    c0007c50 <Phys::allocateContiguousPages(int)+0x2a>
c0007c6c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0007c71:	48                   	dec    eax
c0007c72:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007c77:	75 01                	jne    c0007c7a <Phys::allocateContiguousPages(int)+0x54>
c0007c79:	fb                   	sti    
c0007c7a:	5b                   	pop    ebx
c0007c7b:	89 f8                	mov    eax,edi
c0007c7d:	5e                   	pop    esi
c0007c7e:	5f                   	pop    edi
c0007c7f:	c3                   	ret    
c0007c80:	43                   	inc    ebx
c0007c81:	39 f3                	cmp    ebx,esi
c0007c83:	75 b6                	jne    c0007c3b <Phys::allocateContiguousPages(int)+0x15>
c0007c85:	eb e5                	jmp    c0007c6c <Phys::allocateContiguousPages(int)+0x46>

c0007c87 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007c87:	56                   	push   esi
c0007c88:	53                   	push   ebx
c0007c89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007c8d:	39 1d dc 3e 02 c0    	cmp    DWORD PTR ds:0xc0023edc,ebx
c0007c93:	73 06                	jae    c0007c9b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007c95:	89 1d dc 3e 02 c0    	mov    DWORD PTR ds:0xc0023edc,ebx
c0007c9b:	c1 eb 0c             	shr    ebx,0xc
c0007c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ca2:	c1 e8 0c             	shr    eax,0xc
c0007ca5:	39 d8                	cmp    eax,ebx
c0007ca7:	73 13                	jae    c0007cbc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007ca9:	6a 00                	push   0x0
c0007cab:	8d 70 01             	lea    esi,[eax+0x1]
c0007cae:	50                   	push   eax
c0007caf:	e8 e4 fd ff ff       	call   c0007a98 <Phys::setPageState(unsigned long, bool)>
c0007cb4:	5a                   	pop    edx
c0007cb5:	89 f0                	mov    eax,esi
c0007cb7:	59                   	pop    ecx
c0007cb8:	39 f3                	cmp    ebx,esi
c0007cba:	75 ed                	jne    c0007ca9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007cbc:	5b                   	pop    ebx
c0007cbd:	5e                   	pop    esi
c0007cbe:	c3                   	ret    

c0007cbf <Phys::physicalMemorySetup(unsigned int)>:
c0007cbf:	55                   	push   ebp
c0007cc0:	57                   	push   edi
c0007cc1:	56                   	push   esi
c0007cc2:	53                   	push   ebx
c0007cc3:	31 db                	xor    ebx,ebx
c0007cc5:	83 ec 40             	sub    esp,0x40
c0007cc8:	6a 10                	push   0x10
c0007cca:	6a 00                	push   0x0
c0007ccc:	68 ec 3e 02 c0       	push   0xc0023eec
c0007cd1:	e8 ea 87 ff ff       	call   c00004c0 <memset>
c0007cd6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007cda:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007cdf:	05 00 10 00 00       	add    eax,0x1000
c0007ce4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007ce8:	5a                   	pop    edx
c0007ce9:	59                   	pop    ecx
c0007cea:	50                   	push   eax
c0007ceb:	68 23 f5 01 c0       	push   0xc001f523
c0007cf0:	e8 5e 29 00 00       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0007cf5:	83 c4 10             	add    esp,0x10
c0007cf8:	50                   	push   eax
c0007cf9:	50                   	push   eax
c0007cfa:	6a 01                	push   0x1
c0007cfc:	53                   	push   ebx
c0007cfd:	43                   	inc    ebx
c0007cfe:	e8 95 fd ff ff       	call   c0007a98 <Phys::setPageState(unsigned long, bool)>
c0007d03:	83 c4 10             	add    esp,0x10
c0007d06:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007d0c:	75 ea                	jne    c0007cf8 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007d0e:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007d14:	66 85 c0             	test   ax,ax
c0007d17:	0f 84 46 01 00 00    	je     c0007e63 <Phys::physicalMemorySetup(unsigned int)+0x1a4>
c0007d1d:	89 c7                	mov    edi,eax
c0007d1f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007d27:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007d2d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007d32:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0007d36:	eb 6d                	jmp    c0007da5 <Phys::physicalMemorySetup(unsigned int)+0xe6>
c0007d38:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007d3c:	89 c1                	mov    ecx,eax
c0007d3e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007d42:	0f 83 c0 00 00 00    	jae    c0007e08 <Phys::physicalMemorySetup(unsigned int)+0x149>
c0007d48:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d4c:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007d51:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d55:	39 f2                	cmp    edx,esi
c0007d57:	19 f8                	sbb    eax,edi
c0007d59:	73 07                	jae    c0007d62 <Phys::physicalMemorySetup(unsigned int)+0xa3>
c0007d5b:	be 00 00 0a 00       	mov    esi,0xa0000
c0007d60:	31 ff                	xor    edi,edi
c0007d62:	89 f2                	mov    edx,esi
c0007d64:	b8 ff 1f 00 00       	mov    eax,0x1fff
c0007d69:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c0007d6f:	89 f9                	mov    ecx,edi
c0007d71:	83 d1 ff             	adc    ecx,0xffffffff
c0007d74:	39 d0                	cmp    eax,edx
c0007d76:	b8 00 00 00 00       	mov    eax,0x0
c0007d7b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007d7f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0007d83:	19 c8                	sbb    eax,ecx
c0007d85:	0f 82 9c 01 00 00    	jb     c0007f27 <Phys::physicalMemorySetup(unsigned int)+0x268>
c0007d8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d8f:	83 c3 18             	add    ebx,0x18
c0007d92:	40                   	inc    eax
c0007d93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007d97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d9b:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c0007d9f:	0f 84 ce 00 00 00    	je     c0007e73 <Phys::physicalMemorySetup(unsigned int)+0x1b4>
c0007da5:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007da7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007daa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007dad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007db1:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007db4:	01 f0                	add    eax,esi
c0007db6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007db9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dbd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007dc1:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007dc5:	11 fa                	adc    edx,edi
c0007dc7:	55                   	push   ebp
c0007dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007dcc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007dd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007dd4:	50                   	push   eax
c0007dd5:	56                   	push   esi
c0007dd6:	68 c0 f4 01 c0       	push   0xc001f4c0
c0007ddb:	e8 73 28 00 00       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0007de0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007de4:	83 c4 10             	add    esp,0x10
c0007de7:	09 f8                	or     eax,edi
c0007de9:	0f 85 84 00 00 00    	jne    c0007e73 <Phys::physicalMemorySetup(unsigned int)+0x1b4>
c0007def:	83 fd 01             	cmp    ebp,0x1
c0007df2:	75 11                	jne    c0007e05 <Phys::physicalMemorySetup(unsigned int)+0x146>
c0007df4:	ba 00 00 08 00       	mov    edx,0x80000
c0007df9:	89 c1                	mov    ecx,eax
c0007dfb:	39 f2                	cmp    edx,esi
c0007dfd:	19 f9                	sbb    ecx,edi
c0007dff:	0f 83 33 ff ff ff    	jae    c0007d38 <Phys::physicalMemorySetup(unsigned int)+0x79>
c0007e05:	4d                   	dec    ebp
c0007e06:	75 83                	jne    c0007d8b <Phys::physicalMemorySetup(unsigned int)+0xcc>
c0007e08:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007e0c:	31 d2                	xor    edx,edx
c0007e0e:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0007e12:	89 c8                	mov    eax,ecx
c0007e14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007e18:	19 d1                	sbb    ecx,edx
c0007e1a:	0f 82 6b ff ff ff    	jb     c0007d8b <Phys::physicalMemorySetup(unsigned int)+0xcc>
c0007e20:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c0007e25:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c0007e29:	b9 00 00 00 00       	mov    ecx,0x0
c0007e2e:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c0007e32:	0f 83 53 ff ff ff    	jae    c0007d8b <Phys::physicalMemorySetup(unsigned int)+0xcc>
c0007e38:	39 c6                	cmp    esi,eax
c0007e3a:	19 d7                	sbb    edi,edx
c0007e3c:	0f 83 f1 00 00 00    	jae    c0007f33 <Phys::physicalMemorySetup(unsigned int)+0x274>
c0007e42:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e46:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007e4a:	29 c7                	sub    edi,eax
c0007e4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007e50:	19 d5                	sbb    ebp,edx
c0007e52:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007e56:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007e5a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007e5e:	e9 d0 00 00 00       	jmp    c0007f33 <Phys::physicalMemorySetup(unsigned int)+0x274>
c0007e63:	83 ec 0c             	sub    esp,0xc
c0007e66:	68 3b f5 01 c0       	push   0xc001f53b
c0007e6b:	e8 97 85 00 00       	call   c0010407 <KePanic(char const*)>
c0007e70:	83 c4 10             	add    esp,0x10
c0007e73:	53                   	push   ebx
c0007e74:	53                   	push   ebx
c0007e75:	bb 60 00 00 00       	mov    ebx,0x60
c0007e7a:	6a 00                	push   0x0
c0007e7c:	6a 06                	push   0x6
c0007e7e:	e8 15 fc ff ff       	call   c0007a98 <Phys::setPageState(unsigned long, bool)>
c0007e83:	5e                   	pop    esi
c0007e84:	5f                   	pop    edi
c0007e85:	6a 00                	push   0x0
c0007e87:	6a 07                	push   0x7
c0007e89:	e8 0a fc ff ff       	call   c0007a98 <Phys::setPageState(unsigned long, bool)>
c0007e8e:	8b 2d e8 3e 02 c0    	mov    ebp,DWORD PTR ds:0xc0023ee8
c0007e94:	83 c4 10             	add    esp,0x10
c0007e97:	83 c5 02             	add    ebp,0x2
c0007e9a:	89 2d e8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ee8,ebp
c0007ea0:	51                   	push   ecx
c0007ea1:	51                   	push   ecx
c0007ea2:	6a 00                	push   0x0
c0007ea4:	53                   	push   ebx
c0007ea5:	43                   	inc    ebx
c0007ea6:	e8 ed fb ff ff       	call   c0007a98 <Phys::setPageState(unsigned long, bool)>
c0007eab:	83 c4 10             	add    esp,0x10
c0007eae:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007eb4:	75 ea                	jne    c0007ea0 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0007eb6:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007ebb:	bb 40 01 00 00       	mov    ebx,0x140
c0007ec0:	83 c0 20             	add    eax,0x20
c0007ec3:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007ec8:	eb 21                	jmp    c0007eeb <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007eca:	52                   	push   edx
c0007ecb:	52                   	push   edx
c0007ecc:	6a 00                	push   0x0
c0007ece:	53                   	push   ebx
c0007ecf:	e8 c4 fb ff ff       	call   c0007a98 <Phys::setPageState(unsigned long, bool)>
c0007ed4:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007ed9:	43                   	inc    ebx
c0007eda:	40                   	inc    eax
c0007edb:	83 c4 10             	add    esp,0x10
c0007ede:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007ee3:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007ee9:	74 07                	je     c0007ef2 <Phys::physicalMemorySetup(unsigned int)+0x233>
c0007eeb:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007ef0:	7e d8                	jle    c0007eca <Phys::physicalMemorySetup(unsigned int)+0x20b>
c0007ef2:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007ef7:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007efc:	7f 21                	jg     c0007f1f <Phys::physicalMemorySetup(unsigned int)+0x260>
c0007efe:	50                   	push   eax
c0007eff:	50                   	push   eax
c0007f00:	6a 00                	push   0x0
c0007f02:	53                   	push   ebx
c0007f03:	e8 90 fb ff ff       	call   c0007a98 <Phys::setPageState(unsigned long, bool)>
c0007f08:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007f0d:	43                   	inc    ebx
c0007f0e:	40                   	inc    eax
c0007f0f:	83 c4 10             	add    esp,0x10
c0007f12:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f17:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007f1d:	75 d8                	jne    c0007ef7 <Phys::physicalMemorySetup(unsigned int)+0x238>
c0007f1f:	83 c4 3c             	add    esp,0x3c
c0007f22:	5b                   	pop    ebx
c0007f23:	5e                   	pop    esi
c0007f24:	5f                   	pop    edi
c0007f25:	5d                   	pop    ebp
c0007f26:	c3                   	ret    
c0007f27:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0007f2b:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c0007f33:	50                   	push   eax
c0007f34:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0007f38:	56                   	push   esi
c0007f39:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0007f3d:	57                   	push   edi
c0007f3e:	68 e4 f4 01 c0       	push   0xc001f4e4
c0007f43:	e8 0b 27 00 00       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0007f48:	58                   	pop    eax
c0007f49:	5a                   	pop    edx
c0007f4a:	56                   	push   esi
c0007f4b:	57                   	push   edi
c0007f4c:	e8 36 fd ff ff       	call   c0007c87 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007f51:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007f55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f59:	8b 0d e8 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ee8
c0007f5f:	83 c4 0c             	add    esp,0xc
c0007f62:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007f66:	01 c8                	add    eax,ecx
c0007f68:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f6d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007f74:	52                   	push   edx
c0007f75:	50                   	push   eax
c0007f76:	68 49 f5 01 c0       	push   0xc001f549
c0007f7b:	e8 d3 26 00 00       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0007f80:	83 c4 10             	add    esp,0x10
c0007f83:	e9 03 fe ff ff       	jmp    c0007d8b <Phys::physicalMemorySetup(unsigned int)+0xcc>

c0007f88 <Pipe::isAtty()>:
c0007f88:	31 c0                	xor    eax,eax
c0007f8a:	c3                   	ret    
c0007f8b:	90                   	nop

c0007f8c <Pipe::~Pipe()>:
c0007f8c:	83 ec 0c             	sub    esp,0xc
c0007f8f:	ba a8 f5 01 c0       	mov    edx,0xc001f5a8
c0007f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f98:	89 10                	mov    DWORD PTR [eax],edx
c0007f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f9e:	83 ec 0c             	sub    esp,0xc
c0007fa1:	50                   	push   eax
c0007fa2:	e8 55 11 00 00       	call   c00090fc <UnixFile::~UnixFile()>
c0007fa7:	83 c4 10             	add    esp,0x10
c0007faa:	90                   	nop
c0007fab:	83 c4 0c             	add    esp,0xc
c0007fae:	c3                   	ret    
c0007faf:	90                   	nop

c0007fb0 <Pipe::~Pipe()>:
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	83 ec 0c             	sub    esp,0xc
c0007fb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fba:	e8 cd ff ff ff       	call   c0007f8c <Pipe::~Pipe()>
c0007fbf:	83 c4 10             	add    esp,0x10
c0007fc2:	83 ec 08             	sub    esp,0x8
c0007fc5:	6a 20                	push   0x20
c0007fc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fcb:	e8 8d 25 00 00       	call   c000a55d <operator delete(void*, unsigned long)>
c0007fd0:	83 c4 10             	add    esp,0x10
c0007fd3:	83 c4 0c             	add    esp,0xc
c0007fd6:	c3                   	ret    
c0007fd7:	90                   	nop

c0007fd8 <Pipe::write(unsigned long long, void*, int*)>:
c0007fd8:	55                   	push   ebp
c0007fd9:	57                   	push   edi
c0007fda:	56                   	push   esi
c0007fdb:	53                   	push   ebx
c0007fdc:	83 ec 1c             	sub    esp,0x1c
c0007fdf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007fe3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007fe7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007feb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007fef:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007ff2:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ff5:	89 d6                	mov    esi,edx
c0007ff7:	89 d7                	mov    edi,edx
c0007ff9:	c1 ff 1f             	sar    edi,0x1f
c0007ffc:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007fff:	03 34 24             	add    esi,DWORD PTR [esp]
c0008002:	89 d8                	mov    eax,ebx
c0008004:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0008008:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000800c:	c1 f8 1f             	sar    eax,0x1f
c000800f:	39 f3                	cmp    ebx,esi
c0008011:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008015:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008019:	19 f8                	sbb    eax,edi
c000801b:	b8 01 00 00 00       	mov    eax,0x1
c0008020:	72 6e                	jb     c0008090 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0008022:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0008025:	01 d0                	add    eax,edx
c0008027:	99                   	cdq    
c0008028:	f7 fb                	idiv   ebx
c000802a:	29 d3                	sub    ebx,edx
c000802c:	89 d7                	mov    edi,edx
c000802e:	89 de                	mov    esi,ebx
c0008030:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008033:	c1 fb 1f             	sar    ebx,0x1f
c0008036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000803a:	39 f2                	cmp    edx,esi
c000803c:	19 d8                	sbb    eax,ebx
c000803e:	b8 00 00 00 00       	mov    eax,0x0
c0008043:	72 04                	jb     c0008049 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0008045:	89 d0                	mov    eax,edx
c0008047:	29 f0                	sub    eax,esi
c0008049:	89 d3                	mov    ebx,edx
c000804b:	29 c3                	sub    ebx,eax
c000804d:	74 0b                	je     c000805a <Pipe::write(unsigned long long, void*, int*)+0x82>
c000804f:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008052:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008056:	89 d9                	mov    ecx,ebx
c0008058:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000805a:	85 c0                	test   eax,eax
c000805c:	74 0d                	je     c000806b <Pipe::write(unsigned long long, void*, int*)+0x93>
c000805e:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008062:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008065:	89 de                	mov    esi,ebx
c0008067:	89 c1                	mov    ecx,eax
c0008069:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806b:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000806e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008073:	75 10                	jne    c0008085 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008075:	83 ec 0c             	sub    esp,0xc
c0008078:	68 65 f5 01 c0       	push   0xc001f565
c000807d:	e8 85 83 00 00       	call   c0010407 <KePanic(char const*)>
c0008082:	83 c4 10             	add    esp,0x10
c0008085:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008089:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000808c:	89 08                	mov    DWORD PTR [eax],ecx
c000808e:	31 c0                	xor    eax,eax
c0008090:	83 c4 1c             	add    esp,0x1c
c0008093:	5b                   	pop    ebx
c0008094:	5e                   	pop    esi
c0008095:	5f                   	pop    edi
c0008096:	5d                   	pop    ebp
c0008097:	c3                   	ret    

c0008098 <Pipe::read(unsigned long long, void*, int*)>:
c0008098:	55                   	push   ebp
c0008099:	57                   	push   edi
c000809a:	56                   	push   esi
c000809b:	53                   	push   ebx
c000809c:	83 ec 1c             	sub    esp,0x1c
c000809f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00080a3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00080a7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00080ab:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00080ae:	89 c8                	mov    eax,ecx
c00080b0:	99                   	cdq    
c00080b1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00080b5:	74 24                	je     c00080db <Pipe::read(unsigned long long, void*, int*)+0x43>
c00080b7:	39 f9                	cmp    ecx,edi
c00080b9:	89 d1                	mov    ecx,edx
c00080bb:	19 f1                	sbb    ecx,esi
c00080bd:	73 1c                	jae    c00080db <Pipe::read(unsigned long long, void*, int*)+0x43>
c00080bf:	fa                   	cli    
c00080c0:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00080c6:	e8 85 ca 00 00       	call   c0014b50 <schedule()>
c00080cb:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00080d0:	48                   	dec    eax
c00080d1:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00080d6:	75 d3                	jne    c00080ab <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080d8:	fb                   	sti    
c00080d9:	eb d0                	jmp    c00080ab <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080db:	39 f8                	cmp    eax,edi
c00080dd:	89 d1                	mov    ecx,edx
c00080df:	89 3c 24             	mov    DWORD PTR [esp],edi
c00080e2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00080e6:	19 f1                	sbb    ecx,esi
c00080e8:	73 07                	jae    c00080f1 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00080ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00080ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00080f1:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00080f4:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00080f7:	29 f7                	sub    edi,esi
c00080f9:	89 f8                	mov    eax,edi
c00080fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00080ff:	99                   	cdq    
c0008100:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008103:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008107:	19 d0                	sbb    eax,edx
c0008109:	73 07                	jae    c0008112 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000810b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000810e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008112:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0008115:	89 ea                	mov    edx,ebp
c0008117:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000811b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0008120:	74 0d                	je     c000812f <Pipe::read(unsigned long long, void*, int*)+0x97>
c0008122:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008125:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008129:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000812d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000812f:	85 d2                	test   edx,edx
c0008131:	74 11                	je     c0008144 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0008133:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008137:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000813a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000813e:	89 d1                	mov    ecx,edx
c0008140:	89 c7                	mov    edi,eax
c0008142:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008144:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008147:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000814a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000814d:	99                   	cdq    
c000814e:	03 04 24             	add    eax,DWORD PTR [esp]
c0008151:	89 f7                	mov    edi,esi
c0008153:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008157:	c1 ff 1f             	sar    edi,0x1f
c000815a:	57                   	push   edi
c000815b:	56                   	push   esi
c000815c:	52                   	push   edx
c000815d:	50                   	push   eax
c000815e:	e8 6d 5e 01 00       	call   c001dfd0 <__umoddi3>
c0008163:	83 c4 10             	add    esp,0x10
c0008166:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008169:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000816e:	75 10                	jne    c0008180 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008170:	83 ec 0c             	sub    esp,0xc
c0008173:	68 82 f5 01 c0       	push   0xc001f582
c0008178:	e8 8a 82 00 00       	call   c0010407 <KePanic(char const*)>
c000817d:	83 c4 10             	add    esp,0x10
c0008180:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008184:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008187:	89 10                	mov    DWORD PTR [eax],edx
c0008189:	83 c4 1c             	add    esp,0x1c
c000818c:	31 c0                	xor    eax,eax
c000818e:	5b                   	pop    ebx
c000818f:	5e                   	pop    esi
c0008190:	5f                   	pop    edi
c0008191:	5d                   	pop    ebp
c0008192:	c3                   	ret    
c0008193:	90                   	nop

c0008194 <Pipe::Pipe(int)>:
c0008194:	83 ec 0c             	sub    esp,0xc
c0008197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000819b:	83 ec 08             	sub    esp,0x8
c000819e:	6a 00                	push   0x0
c00081a0:	50                   	push   eax
c00081a1:	e8 74 0d 00 00       	call   c0008f1a <UnixFile::UnixFile(int)>
c00081a6:	83 c4 10             	add    esp,0x10
c00081a9:	ba a8 f5 01 c0       	mov    edx,0xc001f5a8
c00081ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081b2:	89 10                	mov    DWORD PTR [eax],edx
c00081b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00081bc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00081bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081c3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00081ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081ce:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00081d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00081d9:	83 ec 0c             	sub    esp,0xc
c00081dc:	50                   	push   eax
c00081dd:	e8 81 f6 ff ff       	call   c0007863 <malloc>
c00081e2:	83 c4 10             	add    esp,0x10
c00081e5:	89 c2                	mov    edx,eax
c00081e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081eb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00081ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081f2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00081f6:	90                   	nop
c00081f7:	83 c4 0c             	add    esp,0xc
c00081fa:	c3                   	ret    
c00081fb:	90                   	nop

c00081fc <VgaText::isAtty()>:
c00081fc:	b0 01                	mov    al,0x1
c00081fe:	c3                   	ret    
c00081ff:	90                   	nop

c0008200 <VgaText::~VgaText()>:
c0008200:	83 ec 0c             	sub    esp,0xc
c0008203:	ba f0 f5 01 c0       	mov    edx,0xc001f5f0
c0008208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000820c:	89 10                	mov    DWORD PTR [eax],edx
c000820e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008212:	83 ec 0c             	sub    esp,0xc
c0008215:	50                   	push   eax
c0008216:	e8 e1 0e 00 00       	call   c00090fc <UnixFile::~UnixFile()>
c000821b:	83 c4 10             	add    esp,0x10
c000821e:	90                   	nop
c000821f:	83 c4 0c             	add    esp,0xc
c0008222:	c3                   	ret    
c0008223:	90                   	nop

c0008224 <VgaText::~VgaText()>:
c0008224:	83 ec 0c             	sub    esp,0xc
c0008227:	83 ec 0c             	sub    esp,0xc
c000822a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000822e:	e8 cd ff ff ff       	call   c0008200 <VgaText::~VgaText()>
c0008233:	83 c4 10             	add    esp,0x10
c0008236:	83 ec 08             	sub    esp,0x8
c0008239:	68 84 01 00 00       	push   0x184
c000823e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008242:	e8 16 23 00 00       	call   c000a55d <operator delete(void*, unsigned long)>
c0008247:	83 c4 10             	add    esp,0x10
c000824a:	83 c4 0c             	add    esp,0xc
c000824d:	c3                   	ret    

c000824e <VgaText::read(unsigned long long, void*, int*)>:
c000824e:	83 ec 10             	sub    esp,0x10
c0008251:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008255:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825d:	e8 4a 46 00 00       	call   c000c8ac <readKeyboard(VgaText*, char*, unsigned long)>
c0008262:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008266:	89 02                	mov    DWORD PTR [edx],eax
c0008268:	31 c0                	xor    eax,eax
c000826a:	83 c4 1c             	add    esp,0x1c
c000826d:	c3                   	ret    

c000826e <setTerminalScrollLock(bool)>:
c000826e:	c3                   	ret    

c000826f <doTerminalCycle()>:
c000826f:	c3                   	ret    

c0008270 <addToTerminalCycle(VgaText*)>:
c0008270:	c3                   	ret    

c0008271 <scrollTerminalScrollLock(int)>:
c0008271:	c3                   	ret    

c0008272 <VgaText::updateTitle()>:
c0008272:	c3                   	ret    
c0008273:	90                   	nop

c0008274 <VgaText::load()>:
c0008274:	c3                   	ret    
c0008275:	90                   	nop

c0008276 <VgaText::updateCursor()>:
c0008276:	83 ec 14             	sub    esp,0x14
c0008279:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000827d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008280:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008283:	e8 28 f5 00 00       	call   c00177b0 <HalConsoleCursorUpdate(int, int)>
c0008288:	83 c4 1c             	add    esp,0x1c
c000828b:	c3                   	ret    

c000828c <VgaText::doANSI_SGR(int)>:
c000828c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008290:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008294:	85 d2                	test   edx,edx
c0008296:	75 0b                	jne    c00082a3 <VgaText::doANSI_SGR(int)+0x17>
c0008298:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000829b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000829e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00082a1:	eb 59                	jmp    c00082fc <VgaText::doANSI_SGR(int)+0x70>
c00082a3:	83 fa 07             	cmp    edx,0x7
c00082a6:	75 0b                	jne    c00082b3 <VgaText::doANSI_SGR(int)+0x27>
c00082a8:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00082ab:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00082ae:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00082b1:	eb 49                	jmp    c00082fc <VgaText::doANSI_SGR(int)+0x70>
c00082b3:	83 fa 1b             	cmp    edx,0x1b
c00082b6:	74 e0                	je     c0008298 <VgaText::doANSI_SGR(int)+0xc>
c00082b8:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00082bb:	83 f9 07             	cmp    ecx,0x7
c00082be:	77 09                	ja     c00082c9 <VgaText::doANSI_SGR(int)+0x3d>
c00082c0:	8b 14 8d 40 17 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde8c0]
c00082c7:	eb 20                	jmp    c00082e9 <VgaText::doANSI_SGR(int)+0x5d>
c00082c9:	8d 4a d8             	lea    ecx,[edx-0x28]
c00082cc:	83 f9 07             	cmp    ecx,0x7
c00082cf:	77 09                	ja     c00082da <VgaText::doANSI_SGR(int)+0x4e>
c00082d1:	8b 14 8d 40 17 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde8c0]
c00082d8:	eb 22                	jmp    c00082fc <VgaText::doANSI_SGR(int)+0x70>
c00082da:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00082dd:	83 f9 07             	cmp    ecx,0x7
c00082e0:	77 0b                	ja     c00082ed <VgaText::doANSI_SGR(int)+0x61>
c00082e2:	8b 14 95 f8 15 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdea08]
c00082e9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082ec:	c3                   	ret    
c00082ed:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00082f0:	83 f9 07             	cmp    ecx,0x7
c00082f3:	77 0a                	ja     c00082ff <VgaText::doANSI_SGR(int)+0x73>
c00082f5:	8b 14 95 d0 15 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdea30]
c00082fc:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082ff:	c3                   	ret    

c0008300 <VgaText::setDefaultBgColour(VgaColour)>:
c0008300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008304:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008308:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000830b:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000830e:	c3                   	ret    
c000830f:	90                   	nop

c0008310 <VgaText::setDefaultFgColour(VgaColour)>:
c0008310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008314:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008318:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000831b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000831e:	c3                   	ret    
c000831f:	90                   	nop

c0008320 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0008320:	53                   	push   ebx
c0008321:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008325:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008329:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000832d:	51                   	push   ecx
c000832e:	e8 cd ff ff ff       	call   c0008300 <VgaText::setDefaultBgColour(VgaColour)>
c0008333:	58                   	pop    eax
c0008334:	5a                   	pop    edx
c0008335:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008339:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000833d:	5b                   	pop    ebx
c000833e:	eb d0                	jmp    c0008310 <VgaText::setDefaultFgColour(VgaColour)>

c0008340 <VgaText::setTitleTextColour(VgaColour)>:
c0008340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008344:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008348:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000834b:	c3                   	ret    

c000834c <VgaText::setTitleColour(VgaColour)>:
c000834c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008350:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008354:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008357:	c3                   	ret    

c0008358 <VgaText::setTitle(char*)>:
c0008358:	c3                   	ret    
c0008359:	90                   	nop

c000835a <VgaText::combineColours(unsigned char, unsigned char)>:
c000835a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000835f:	c1 e2 04             	shl    edx,0x4
c0008362:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008366:	83 e0 0f             	and    eax,0xf
c0008369:	09 d0                	or     eax,edx
c000836b:	c3                   	ret    

c000836c <VgaText::scrollScreen()>:
c000836c:	55                   	push   ebp
c000836d:	57                   	push   edi
c000836e:	56                   	push   esi
c000836f:	be 01 00 00 00       	mov    esi,0x1
c0008374:	53                   	push   ebx
c0008375:	83 ec 0c             	sub    esp,0xc
c0008378:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000837c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000837f:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008385:	31 ff                	xor    edi,edi
c0008387:	01 e9                	add    ecx,ebp
c0008389:	8a 01                	mov    al,BYTE PTR [ecx]
c000838b:	83 fe 18             	cmp    esi,0x18
c000838e:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008394:	75 20                	jne    c00083b6 <VgaText::scrollScreen()+0x4a>
c0008396:	f7 c7 01 00 00 00    	test   edi,0x1
c000839c:	74 15                	je     c00083b3 <VgaText::scrollScreen()+0x47>
c000839e:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00083a2:	50                   	push   eax
c00083a3:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00083a7:	50                   	push   eax
c00083a8:	e8 ad ff ff ff       	call   c000835a <VgaText::combineColours(unsigned char, unsigned char)>
c00083ad:	5a                   	pop    edx
c00083ae:	5a                   	pop    edx
c00083af:	88 01                	mov    BYTE PTR [ecx],al
c00083b1:	eb 03                	jmp    c00083b6 <VgaText::scrollScreen()+0x4a>
c00083b3:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00083b6:	47                   	inc    edi
c00083b7:	41                   	inc    ecx
c00083b8:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00083be:	75 c9                	jne    c0008389 <VgaText::scrollScreen()+0x1d>
c00083c0:	46                   	inc    esi
c00083c1:	83 fe 19             	cmp    esi,0x19
c00083c4:	75 b9                	jne    c000837f <VgaText::scrollScreen()+0x13>
c00083c6:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c00083cc:	75 1f                	jne    c00083ed <VgaText::scrollScreen()+0x81>
c00083ce:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00083d2:	74 05                	je     c00083d9 <VgaText::scrollScreen()+0x6d>
c00083d4:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00083d7:	eb 14                	jmp    c00083ed <VgaText::scrollScreen()+0x81>
c00083d9:	50                   	push   eax
c00083da:	50                   	push   eax
c00083db:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00083df:	50                   	push   eax
c00083e0:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00083e4:	50                   	push   eax
c00083e5:	e8 52 f2 00 00       	call   c001763c <HalConsoleScroll(int, int)>
c00083ea:	83 c4 10             	add    esp,0x10
c00083ed:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00083f1:	83 c4 0c             	add    esp,0xc
c00083f4:	5b                   	pop    ebx
c00083f5:	5e                   	pop    esi
c00083f6:	5f                   	pop    edi
c00083f7:	5d                   	pop    ebp
c00083f8:	e9 79 fe ff ff       	jmp    c0008276 <VgaText::updateCursor()>
c00083fd:	90                   	nop

c00083fe <VgaText::combineCharAndColour(char, unsigned char)>:
c00083fe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008403:	c1 e0 08             	shl    eax,0x8
c0008406:	89 c2                	mov    edx,eax
c0008408:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000840d:	09 d0                	or     eax,edx
c000840f:	c3                   	ret    

c0008410 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008410:	55                   	push   ebp
c0008411:	57                   	push   edi
c0008412:	56                   	push   esi
c0008413:	53                   	push   ebx
c0008414:	83 ec 1c             	sub    esp,0x1c
c0008417:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000841b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000841f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008423:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008427:	0f b6 c3             	movzx  eax,bl
c000842a:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000842e:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008432:	50                   	push   eax
c0008433:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008438:	50                   	push   eax
c0008439:	e8 1c ff ff ff       	call   c000835a <VgaText::combineColours(unsigned char, unsigned char)>
c000843e:	5a                   	pop    edx
c000843f:	59                   	pop    ecx
c0008440:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008445:	0f b6 c0             	movzx  eax,al
c0008448:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000844c:	50                   	push   eax
c000844d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008451:	e8 a8 ff ff ff       	call   c00083fe <VgaText::combineCharAndColour(char, unsigned char)>
c0008456:	5a                   	pop    edx
c0008457:	6b d7 50             	imul   edx,edi,0x50
c000845a:	01 f2                	add    edx,esi
c000845c:	59                   	pop    ecx
c000845d:	0f b7 d2             	movzx  edx,dx
c0008460:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008463:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008467:	39 2d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebp
c000846d:	75 28                	jne    c0008497 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c000846f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008473:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008477:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000847b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000847f:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008483:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008487:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000848b:	83 c4 1c             	add    esp,0x1c
c000848e:	5b                   	pop    ebx
c000848f:	5e                   	pop    esi
c0008490:	5f                   	pop    edi
c0008491:	5d                   	pop    ebp
c0008492:	e9 ad f2 00 00       	jmp    c0017744 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008497:	83 c4 1c             	add    esp,0x1c
c000849a:	5b                   	pop    ebx
c000849b:	5e                   	pop    esi
c000849c:	5f                   	pop    edi
c000849d:	5d                   	pop    ebp
c000849e:	c3                   	ret    
c000849f:	90                   	nop

c00084a0 <VgaText::getCursorX()>:
c00084a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00084a7:	c3                   	ret    

c00084a8 <VgaText::getCursorY()>:
c00084a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084ac:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00084af:	c3                   	ret    

c00084b0 <VgaText::setCursor(int, int)>:
c00084b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00084b8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00084bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00084bf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00084c2:	e9 af fd ff ff       	jmp    c0008276 <VgaText::updateCursor()>

c00084c7 <setActiveTerminal(VgaText*)>:
c00084c7:	53                   	push   ebx
c00084c8:	83 ec 08             	sub    esp,0x8
c00084cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084cf:	85 db                	test   ebx,ebx
c00084d1:	75 11                	jne    c00084e4 <setActiveTerminal(VgaText*)+0x1d>
c00084d3:	c7 44 24 10 bc f5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f5bc
c00084db:	83 c4 08             	add    esp,0x8
c00084de:	5b                   	pop    ebx
c00084df:	e9 23 7f 00 00       	jmp    c0010407 <KePanic(char const*)>
c00084e4:	a1 04 3f 02 c0       	mov    eax,ds:0xc0023f04
c00084e9:	85 c0                	test   eax,eax
c00084eb:	74 0c                	je     c00084f9 <setActiveTerminal(VgaText*)+0x32>
c00084ed:	83 ec 0c             	sub    esp,0xc
c00084f0:	50                   	push   eax
c00084f1:	e8 80 fd ff ff       	call   c0008276 <VgaText::updateCursor()>
c00084f6:	83 c4 10             	add    esp,0x10
c00084f9:	50                   	push   eax
c00084fa:	89 1d 04 3f 02 c0    	mov    DWORD PTR ds:0xc0023f04,ebx
c0008500:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008503:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008506:	53                   	push   ebx
c0008507:	e8 a4 ff ff ff       	call   c00084b0 <VgaText::setCursor(int, int)>
c000850c:	83 c4 18             	add    esp,0x18
c000850f:	5b                   	pop    ebx
c0008510:	c3                   	ret    
c0008511:	90                   	nop

c0008512 <VgaText::clearScreen()>:
c0008512:	57                   	push   edi
c0008513:	56                   	push   esi
c0008514:	31 f6                	xor    esi,esi
c0008516:	53                   	push   ebx
c0008517:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000851b:	52                   	push   edx
c000851c:	6a 00                	push   0x0
c000851e:	6a 00                	push   0x0
c0008520:	53                   	push   ebx
c0008521:	e8 8a ff ff ff       	call   c00084b0 <VgaText::setCursor(int, int)>
c0008526:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000852d:	83 c4 10             	add    esp,0x10
c0008530:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008533:	7e 20                	jle    c0008555 <VgaText::clearScreen()+0x43>
c0008535:	31 ff                	xor    edi,edi
c0008537:	50                   	push   eax
c0008538:	50                   	push   eax
c0008539:	56                   	push   esi
c000853a:	57                   	push   edi
c000853b:	47                   	inc    edi
c000853c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000853f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008542:	6a 20                	push   0x20
c0008544:	53                   	push   ebx
c0008545:	e8 c6 fe ff ff       	call   c0008410 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000854a:	83 c4 20             	add    esp,0x20
c000854d:	83 ff 50             	cmp    edi,0x50
c0008550:	75 e5                	jne    c0008537 <VgaText::clearScreen()+0x25>
c0008552:	46                   	inc    esi
c0008553:	eb db                	jmp    c0008530 <VgaText::clearScreen()+0x1e>
c0008555:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000855c:	5b                   	pop    ebx
c000855d:	5e                   	pop    esi
c000855e:	5f                   	pop    edi
c000855f:	c3                   	ret    

c0008560 <VgaText::setCursorX(int)>:
c0008560:	83 ec 10             	sub    esp,0x10
c0008563:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008567:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000856a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000856e:	50                   	push   eax
c000856f:	e8 3c ff ff ff       	call   c00084b0 <VgaText::setCursor(int, int)>
c0008574:	83 c4 1c             	add    esp,0x1c
c0008577:	c3                   	ret    

c0008578 <VgaText::setCursorY(int)>:
c0008578:	83 ec 10             	sub    esp,0x10
c000857b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000857f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008583:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008586:	50                   	push   eax
c0008587:	e8 24 ff ff ff       	call   c00084b0 <VgaText::setCursor(int, int)>
c000858c:	83 c4 1c             	add    esp,0x1c
c000858f:	c3                   	ret    

c0008590 <VgaText::incrementCursor(bool)>:
c0008590:	56                   	push   esi
c0008591:	53                   	push   ebx
c0008592:	51                   	push   ecx
c0008593:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008597:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000859b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000859e:	40                   	inc    eax
c000859f:	83 f8 50             	cmp    eax,0x50
c00085a2:	74 05                	je     c00085a9 <VgaText::incrementCursor(bool)+0x19>
c00085a4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00085a7:	eb 24                	jmp    c00085cd <VgaText::incrementCursor(bool)+0x3d>
c00085a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00085ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085b3:	8d 50 01             	lea    edx,[eax+0x1]
c00085b6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00085b9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00085bc:	75 0f                	jne    c00085cd <VgaText::incrementCursor(bool)+0x3d>
c00085be:	83 ec 0c             	sub    esp,0xc
c00085c1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00085c4:	53                   	push   ebx
c00085c5:	e8 a2 fd ff ff       	call   c000836c <VgaText::scrollScreen()>
c00085ca:	83 c4 10             	add    esp,0x10
c00085cd:	89 f0                	mov    eax,esi
c00085cf:	84 c0                	test   al,al
c00085d1:	74 0c                	je     c00085df <VgaText::incrementCursor(bool)+0x4f>
c00085d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085d7:	5a                   	pop    edx
c00085d8:	5b                   	pop    ebx
c00085d9:	5e                   	pop    esi
c00085da:	e9 97 fc ff ff       	jmp    c0008276 <VgaText::updateCursor()>
c00085df:	58                   	pop    eax
c00085e0:	5b                   	pop    ebx
c00085e1:	5e                   	pop    esi
c00085e2:	c3                   	ret    
c00085e3:	90                   	nop

c00085e4 <VgaText::decrementCursor(bool)>:
c00085e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00085e8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085ec:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00085ef:	85 c0                	test   eax,eax
c00085f1:	74 04                	je     c00085f7 <VgaText::decrementCursor(bool)+0x13>
c00085f3:	48                   	dec    eax
c00085f4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00085f7:	84 c9                	test   cl,cl
c00085f9:	74 09                	je     c0008604 <VgaText::decrementCursor(bool)+0x20>
c00085fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00085ff:	e9 72 fc ff ff       	jmp    c0008276 <VgaText::updateCursor()>
c0008604:	c3                   	ret    
c0008605:	90                   	nop

c0008606 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008606:	53                   	push   ebx
c0008607:	83 ec 08             	sub    esp,0x8
c000860a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000860e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008612:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008616:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000861a:	3c 07                	cmp    al,0x7
c000861c:	75 21                	jne    c000863f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000861e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008626:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000862e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008636:	83 c4 08             	add    esp,0x8
c0008639:	5b                   	pop    ebx
c000863a:	e9 68 2e 00 00       	jmp    c000b4a7 <Krnl::beep(int, int, bool)>
c000863f:	3c 0d                	cmp    al,0xd
c0008641:	75 09                	jne    c000864c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008643:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000864a:	eb 2c                	jmp    c0008678 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000864c:	3c 0a                	cmp    al,0xa
c000864e:	75 31                	jne    c0008681 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008650:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000865a:	8d 50 01             	lea    edx,[eax+0x1]
c000865d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008660:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008663:	75 0f                	jne    c0008674 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008665:	83 ec 0c             	sub    esp,0xc
c0008668:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000866b:	53                   	push   ebx
c000866c:	e8 fb fc ff ff       	call   c000836c <VgaText::scrollScreen()>
c0008671:	83 c4 10             	add    esp,0x10
c0008674:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008678:	83 c4 08             	add    esp,0x8
c000867b:	5b                   	pop    ebx
c000867c:	e9 f5 fb ff ff       	jmp    c0008276 <VgaText::updateCursor()>
c0008681:	3c 08                	cmp    al,0x8
c0008683:	75 25                	jne    c00086aa <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008685:	50                   	push   eax
c0008686:	50                   	push   eax
c0008687:	6a 01                	push   0x1
c0008689:	53                   	push   ebx
c000868a:	e8 55 ff ff ff       	call   c00085e4 <VgaText::decrementCursor(bool)>
c000868f:	5a                   	pop    edx
c0008690:	59                   	pop    ecx
c0008691:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008694:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008697:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000869a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000869d:	6a 20                	push   0x20
c000869f:	53                   	push   ebx
c00086a0:	e8 6b fd ff ff       	call   c0008410 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00086a5:	83 c4 28             	add    esp,0x28
c00086a8:	5b                   	pop    ebx
c00086a9:	c3                   	ret    
c00086aa:	83 ec 08             	sub    esp,0x8
c00086ad:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00086b0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00086b3:	0f be c0             	movsx  eax,al
c00086b6:	51                   	push   ecx
c00086b7:	52                   	push   edx
c00086b8:	50                   	push   eax
c00086b9:	53                   	push   ebx
c00086ba:	e8 51 fd ff ff       	call   c0008410 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00086bf:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00086c3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00086cb:	83 c4 28             	add    esp,0x28
c00086ce:	5b                   	pop    ebx
c00086cf:	e9 bc fe ff ff       	jmp    c0008590 <VgaText::incrementCursor(bool)>

c00086d4 <VgaText::putchar(char)>:
c00086d4:	56                   	push   esi
c00086d5:	53                   	push   ebx
c00086d6:	83 ec 14             	sub    esp,0x14
c00086d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00086dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00086e1:	3c 5b                	cmp    al,0x5b
c00086e3:	75 18                	jne    c00086fd <VgaText::putchar(char)+0x29>
c00086e5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00086e9:	74 1f                	je     c000870a <VgaText::putchar(char)+0x36>
c00086eb:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00086f1:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00086f8:	e9 bd 00 00 00       	jmp    c00087ba <VgaText::putchar(char)+0xe6>
c00086fd:	3c 1b                	cmp    al,0x1b
c00086ff:	75 09                	jne    c000870a <VgaText::putchar(char)+0x36>
c0008701:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008705:	e9 b0 00 00 00       	jmp    c00087ba <VgaText::putchar(char)+0xe6>
c000870a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000870d:	84 c9                	test   cl,cl
c000870f:	0f 84 92 00 00 00    	je     c00087a7 <VgaText::putchar(char)+0xd3>
c0008715:	8d 50 c0             	lea    edx,[eax-0x40]
c0008718:	80 fa 3e             	cmp    dl,0x3e
c000871b:	77 76                	ja     c0008793 <VgaText::putchar(char)+0xbf>
c000871d:	3c 6d                	cmp    al,0x6d
c000871f:	75 47                	jne    c0008768 <VgaText::putchar(char)+0x94>
c0008721:	31 f6                	xor    esi,esi
c0008723:	31 d2                	xor    edx,edx
c0008725:	31 c0                	xor    eax,eax
c0008727:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000872a:	7e 2d                	jle    c0008759 <VgaText::putchar(char)+0x85>
c000872c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008731:	80 fa 3b             	cmp    dl,0x3b
c0008734:	75 17                	jne    c000874d <VgaText::putchar(char)+0x79>
c0008736:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000873a:	50                   	push   eax
c000873b:	53                   	push   ebx
c000873c:	e8 4b fb ff ff       	call   c000828c <VgaText::doANSI_SGR(int)>
c0008741:	59                   	pop    ecx
c0008742:	31 d2                	xor    edx,edx
c0008744:	58                   	pop    eax
c0008745:	31 c0                	xor    eax,eax
c0008747:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000874b:	eb 09                	jmp    c0008756 <VgaText::putchar(char)+0x82>
c000874d:	6b c0 0a             	imul   eax,eax,0xa
c0008750:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008754:	88 ca                	mov    dl,cl
c0008756:	46                   	inc    esi
c0008757:	eb ce                	jmp    c0008727 <VgaText::putchar(char)+0x53>
c0008759:	84 d2                	test   dl,dl
c000875b:	74 2e                	je     c000878b <VgaText::putchar(char)+0xb7>
c000875d:	50                   	push   eax
c000875e:	53                   	push   ebx
c000875f:	e8 28 fb ff ff       	call   c000828c <VgaText::doANSI_SGR(int)>
c0008764:	58                   	pop    eax
c0008765:	5a                   	pop    edx
c0008766:	eb 23                	jmp    c000878b <VgaText::putchar(char)+0xb7>
c0008768:	3c 4a                	cmp    al,0x4a
c000876a:	75 1f                	jne    c000878b <VgaText::putchar(char)+0xb7>
c000876c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008770:	75 19                	jne    c000878b <VgaText::putchar(char)+0xb7>
c0008772:	83 ec 0c             	sub    esp,0xc
c0008775:	53                   	push   ebx
c0008776:	e8 97 fd ff ff       	call   c0008512 <VgaText::clearScreen()>
c000877b:	83 c4 0c             	add    esp,0xc
c000877e:	6a 00                	push   0x0
c0008780:	6a 00                	push   0x0
c0008782:	53                   	push   ebx
c0008783:	e8 28 fd ff ff       	call   c00084b0 <VgaText::setCursor(int, int)>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008791:	eb 27                	jmp    c00087ba <VgaText::putchar(char)+0xe6>
c0008793:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008796:	83 fa 0e             	cmp    edx,0xe
c0008799:	7f 1f                	jg     c00087ba <VgaText::putchar(char)+0xe6>
c000879b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000879e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00087a1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00087a5:	eb 13                	jmp    c00087ba <VgaText::putchar(char)+0xe6>
c00087a7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087aa:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087ad:	0f be c0             	movsx  eax,al
c00087b0:	50                   	push   eax
c00087b1:	53                   	push   ebx
c00087b2:	e8 4f fe ff ff       	call   c0008606 <VgaText::putchar(char, VgaColour, VgaColour)>
c00087b7:	83 c4 10             	add    esp,0x10
c00087ba:	83 c4 14             	add    esp,0x14
c00087bd:	5b                   	pop    ebx
c00087be:	5e                   	pop    esi
c00087bf:	c3                   	ret    

c00087c0 <VgaText::putx(unsigned int)>:
c00087c0:	57                   	push   edi
c00087c1:	b9 11 00 00 00       	mov    ecx,0x11
c00087c6:	56                   	push   esi
c00087c7:	be ca f5 01 c0       	mov    esi,0xc001f5ca
c00087cc:	53                   	push   ebx
c00087cd:	83 ec 20             	sub    esp,0x20
c00087d0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087d4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00087d8:	fc                   	cld    
c00087d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087db:	be 08 00 00 00       	mov    esi,0x8
c00087e0:	50                   	push   eax
c00087e1:	50                   	push   eax
c00087e2:	89 d8                	mov    eax,ebx
c00087e4:	c1 e8 1c             	shr    eax,0x1c
c00087e7:	c1 e3 04             	shl    ebx,0x4
c00087ea:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00087ef:	50                   	push   eax
c00087f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00087f4:	e8 db fe ff ff       	call   c00086d4 <VgaText::putchar(char)>
c00087f9:	83 c4 10             	add    esp,0x10
c00087fc:	4e                   	dec    esi
c00087fd:	75 e1                	jne    c00087e0 <VgaText::putx(unsigned int)+0x20>
c00087ff:	83 c4 20             	add    esp,0x20
c0008802:	5b                   	pop    ebx
c0008803:	5e                   	pop    esi
c0008804:	5f                   	pop    edi
c0008805:	c3                   	ret    

c0008806 <VgaText::puts(char const*)>:
c0008806:	53                   	push   ebx
c0008807:	83 ec 08             	sub    esp,0x8
c000880a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000880e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008811:	84 c0                	test   al,al
c0008813:	74 12                	je     c0008827 <VgaText::puts(char const*)+0x21>
c0008815:	51                   	push   ecx
c0008816:	43                   	inc    ebx
c0008817:	51                   	push   ecx
c0008818:	50                   	push   eax
c0008819:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000881d:	e8 b2 fe ff ff       	call   c00086d4 <VgaText::putchar(char)>
c0008822:	83 c4 10             	add    esp,0x10
c0008825:	eb e7                	jmp    c000880e <VgaText::puts(char const*)+0x8>
c0008827:	83 c4 08             	add    esp,0x8
c000882a:	5b                   	pop    ebx
c000882b:	c3                   	ret    

c000882c <VgaText::write(unsigned long long, void*, int*)>:
c000882c:	55                   	push   ebp
c000882d:	57                   	push   edi
c000882e:	56                   	push   esi
c000882f:	53                   	push   ebx
c0008830:	83 ec 0c             	sub    esp,0xc
c0008833:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008837:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000883b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000883f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008846:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008849:	39 eb                	cmp    ebx,ebp
c000884b:	74 13                	je     c0008860 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000884d:	50                   	push   eax
c000884e:	43                   	inc    ebx
c000884f:	50                   	push   eax
c0008850:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008854:	50                   	push   eax
c0008855:	56                   	push   esi
c0008856:	e8 79 fe ff ff       	call   c00086d4 <VgaText::putchar(char)>
c000885b:	83 c4 10             	add    esp,0x10
c000885e:	eb e9                	jmp    c0008849 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008860:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008864:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000886b:	89 38                	mov    DWORD PTR [eax],edi
c000886d:	83 c4 0c             	add    esp,0xc
c0008870:	31 c0                	xor    eax,eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	5f                   	pop    edi
c0008875:	5d                   	pop    ebp
c0008876:	c3                   	ret    
c0008877:	90                   	nop

c0008878 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008878:	55                   	push   ebp
c0008879:	57                   	push   edi
c000887a:	56                   	push   esi
c000887b:	53                   	push   ebx
c000887c:	83 ec 0c             	sub    esp,0xc
c000887f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008883:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008888:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000888f:	50                   	push   eax
c0008890:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008895:	50                   	push   eax
c0008896:	e8 bf fa ff ff       	call   c000835a <VgaText::combineColours(unsigned char, unsigned char)>
c000889b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088a0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00088a3:	5a                   	pop    edx
c00088a4:	0f b7 f6             	movzx  esi,si
c00088a7:	01 f6                	add    esi,esi
c00088a9:	59                   	pop    ecx
c00088aa:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088ad:	89 c5                	mov    ebp,eax
c00088af:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00088b3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b6:	84 c0                	test   al,al
c00088b8:	0f 84 f4 00 00 00    	je     c00089b2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00088be:	3c 0d                	cmp    al,0xd
c00088c0:	75 0c                	jne    c00088ce <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00088c2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088c9:	e9 de 00 00 00       	jmp    c00089ac <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088ce:	3c 0a                	cmp    al,0xa
c00088d0:	75 45                	jne    c0008917 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00088d2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088d5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088dc:	8d 48 01             	lea    ecx,[eax+0x1]
c00088df:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00088e2:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00088e5:	75 0f                	jne    c00088f6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c00088e7:	83 ec 0c             	sub    esp,0xc
c00088ea:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088ed:	53                   	push   ebx
c00088ee:	e8 79 fa ff ff       	call   c000836c <VgaText::scrollScreen()>
c00088f3:	83 c4 10             	add    esp,0x10
c00088f6:	83 ec 0c             	sub    esp,0xc
c00088f9:	53                   	push   ebx
c00088fa:	e8 77 f9 ff ff       	call   c0008276 <VgaText::updateCursor()>
c00088ff:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008904:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	0f b7 f6             	movzx  esi,si
c000890d:	01 f6                	add    esi,esi
c000890f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008912:	e9 95 00 00 00       	jmp    c00089ac <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008917:	3c 08                	cmp    al,0x8
c0008919:	75 35                	jne    c0008950 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000891b:	51                   	push   ecx
c000891c:	51                   	push   ecx
c000891d:	6a 01                	push   0x1
c000891f:	53                   	push   ebx
c0008920:	e8 bf fc ff ff       	call   c00085e4 <VgaText::decrementCursor(bool)>
c0008925:	5e                   	pop    esi
c0008926:	58                   	pop    eax
c0008927:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008930:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008933:	6a 20                	push   0x20
c0008935:	53                   	push   ebx
c0008936:	e8 d5 fa ff ff       	call   c0008410 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008940:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008943:	83 c4 20             	add    esp,0x20
c0008946:	0f b7 f6             	movzx  esi,si
c0008949:	01 f6                	add    esi,esi
c000894b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000894e:	eb 5c                	jmp    c00089ac <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008950:	52                   	push   edx
c0008951:	52                   	push   edx
c0008952:	89 ea                	mov    edx,ebp
c0008954:	0f b6 ca             	movzx  ecx,dl
c0008957:	51                   	push   ecx
c0008958:	50                   	push   eax
c0008959:	e8 a0 fa ff ff       	call   c00083fe <VgaText::combineCharAndColour(char, unsigned char)>
c000895e:	66 89 06             	mov    WORD PTR [esi],ax
c0008961:	83 c4 10             	add    esp,0x10
c0008964:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c000896a:	75 1d                	jne    c0008989 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000896c:	83 ec 0c             	sub    esp,0xc
c000896f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008972:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008975:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008979:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000897d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008980:	50                   	push   eax
c0008981:	e8 be ed 00 00       	call   c0017744 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008986:	83 c4 20             	add    esp,0x20
c0008989:	50                   	push   eax
c000898a:	83 c6 02             	add    esi,0x2
c000898d:	50                   	push   eax
c000898e:	6a 00                	push   0x0
c0008990:	53                   	push   ebx
c0008991:	e8 fa fb ff ff       	call   c0008590 <VgaText::incrementCursor(bool)>
c0008996:	83 c4 10             	add    esp,0x10
c0008999:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000899d:	75 0d                	jne    c00089ac <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c000899f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00089a4:	0f b7 f6             	movzx  esi,si
c00089a7:	01 f6                	add    esi,esi
c00089a9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00089ac:	47                   	inc    edi
c00089ad:	e9 01 ff ff ff       	jmp    c00088b3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00089b2:	83 ec 0c             	sub    esp,0xc
c00089b5:	53                   	push   ebx
c00089b6:	e8 bb f8 ff ff       	call   c0008276 <VgaText::updateCursor()>
c00089bb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00089c2:	83 c4 1c             	add    esp,0x1c
c00089c5:	5b                   	pop    ebx
c00089c6:	5e                   	pop    esi
c00089c7:	5f                   	pop    edi
c00089c8:	5d                   	pop    ebp
c00089c9:	c3                   	ret    

c00089ca <VgaText::VgaText(char const*)>:
c00089ca:	56                   	push   esi
c00089cb:	53                   	push   ebx
c00089cc:	83 ec 04             	sub    esp,0x4
c00089cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089d3:	83 ec 08             	sub    esp,0x8
c00089d6:	6a 00                	push   0x0
c00089d8:	50                   	push   eax
c00089d9:	e8 3c 05 00 00       	call   c0008f1a <UnixFile::UnixFile(int)>
c00089de:	83 c4 10             	add    esp,0x10
c00089e1:	ba f0 f5 01 c0       	mov    edx,0xc001f5f0
c00089e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ea:	89 10                	mov    DWORD PTR [eax],edx
c00089ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f0:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00089f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089fb:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a16:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008a1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a21:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a2c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a37:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008a3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a42:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008a49:	83 ec 0c             	sub    esp,0xc
c0008a4c:	6a 01                	push   0x1
c0008a4e:	e8 0f 09 00 00       	call   c0009362 <Virt::allocateKernelVirtualPages(int)>
c0008a53:	83 c4 10             	add    esp,0x10
c0008a56:	89 c2                	mov    edx,eax
c0008a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a5c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008a5f:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0008a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a6c:	89 c6                	mov    esi,eax
c0008a6e:	e8 e7 f0 ff ff       	call   c0007b5a <Phys::allocatePage()>
c0008a73:	68 05 0c 00 00       	push   0xc05
c0008a78:	56                   	push   esi
c0008a79:	50                   	push   eax
c0008a7a:	53                   	push   ebx
c0008a7b:	e8 b2 0f 00 00       	call   c0009a32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008a80:	83 c4 10             	add    esp,0x10
c0008a83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a87:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a8a:	83 ec 04             	sub    esp,0x4
c0008a8d:	68 a0 0f 00 00       	push   0xfa0
c0008a92:	6a 00                	push   0x0
c0008a94:	50                   	push   eax
c0008a95:	e8 26 7a ff ff       	call   c00004c0 <memset>
c0008a9a:	83 c4 10             	add    esp,0x10
c0008a9d:	83 ec 04             	sub    esp,0x4
c0008aa0:	6a 00                	push   0x0
c0008aa2:	6a 07                	push   0x7
c0008aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aa8:	e8 73 f8 ff ff       	call   c0008320 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008aad:	83 c4 10             	add    esp,0x10
c0008ab0:	83 ec 04             	sub    esp,0x4
c0008ab3:	6a 00                	push   0x0
c0008ab5:	6a 00                	push   0x0
c0008ab7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abb:	e8 f0 f9 ff ff       	call   c00084b0 <VgaText::setCursor(int, int)>
c0008ac0:	83 c4 10             	add    esp,0x10
c0008ac3:	83 ec 0c             	sub    esp,0xc
c0008ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aca:	e8 43 fa ff ff       	call   c0008512 <VgaText::clearScreen()>
c0008acf:	83 c4 10             	add    esp,0x10
c0008ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ad6:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ade:	05 82 00 00 00       	add    eax,0x82
c0008ae3:	83 ec 04             	sub    esp,0x4
c0008ae6:	68 80 00 00 00       	push   0x80
c0008aeb:	6a 00                	push   0x0
c0008aed:	50                   	push   eax
c0008aee:	e8 cd 79 ff ff       	call   c00004c0 <memset>
c0008af3:	83 c4 10             	add    esp,0x10
c0008af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008afa:	05 02 01 00 00       	add    eax,0x102
c0008aff:	83 ec 04             	sub    esp,0x4
c0008b02:	68 80 00 00 00       	push   0x80
c0008b07:	6a 00                	push   0x0
c0008b09:	50                   	push   eax
c0008b0a:	e8 b1 79 ff ff       	call   c00004c0 <memset>
c0008b0f:	83 c4 10             	add    esp,0x10
c0008b12:	90                   	nop
c0008b13:	83 c4 04             	add    esp,0x4
c0008b16:	5b                   	pop    ebx
c0008b17:	5e                   	pop    esi
c0008b18:	c3                   	ret    
c0008b19:	90                   	nop

c0008b1a <VgaText::receiveKey(unsigned char)>:
c0008b1a:	55                   	push   ebp
c0008b1b:	57                   	push   edi
c0008b1c:	56                   	push   esi
c0008b1d:	53                   	push   ebx
c0008b1e:	83 ec 1c             	sub    esp,0x1c
c0008b21:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008b25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008b29:	89 f0                	mov    eax,esi
c0008b2b:	84 c0                	test   al,al
c0008b2d:	0f 84 3f 01 00 00    	je     c0008c72 <VgaText::receiveKey(unsigned char)+0x158>
c0008b33:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008b39:	3c 08                	cmp    al,0x8
c0008b3b:	75 66                	jne    c0008ba3 <VgaText::receiveKey(unsigned char)+0x89>
c0008b3d:	83 ec 0c             	sub    esp,0xc
c0008b40:	57                   	push   edi
c0008b41:	e8 ea 79 ff ff       	call   c0000530 <strlen>
c0008b46:	83 c4 10             	add    esp,0x10
c0008b49:	85 c0                	test   eax,eax
c0008b4b:	0f 84 e6 00 00 00    	je     c0008c37 <VgaText::receiveKey(unsigned char)+0x11d>
c0008b51:	50                   	push   eax
c0008b52:	50                   	push   eax
c0008b53:	6a 08                	push   0x8
c0008b55:	53                   	push   ebx
c0008b56:	e8 79 fb ff ff       	call   c00086d4 <VgaText::putchar(char)>
c0008b5b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b5e:	e8 cd 79 ff ff       	call   c0000530 <strlen>
c0008b63:	83 c4 10             	add    esp,0x10
c0008b66:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008b6d:	3c 1f                	cmp    al,0x1f
c0008b6f:	7f 1c                	jg     c0008b8d <VgaText::receiveKey(unsigned char)+0x73>
c0008b71:	8d 50 f8             	lea    edx,[eax-0x8]
c0008b74:	80 fa 02             	cmp    dl,0x2
c0008b77:	76 14                	jbe    c0008b8d <VgaText::receiveKey(unsigned char)+0x73>
c0008b79:	3c 0d                	cmp    al,0xd
c0008b7b:	74 10                	je     c0008b8d <VgaText::receiveKey(unsigned char)+0x73>
c0008b7d:	55                   	push   ebp
c0008b7e:	55                   	push   ebp
c0008b7f:	68 db f5 01 c0       	push   0xc001f5db
c0008b84:	53                   	push   ebx
c0008b85:	e8 7c fc ff ff       	call   c0008806 <VgaText::puts(char const*)>
c0008b8a:	83 c4 10             	add    esp,0x10
c0008b8d:	83 ec 0c             	sub    esp,0xc
c0008b90:	57                   	push   edi
c0008b91:	e8 9a 79 ff ff       	call   c0000530 <strlen>
c0008b96:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008b9e:	e9 91 00 00 00       	jmp    c0008c34 <VgaText::receiveKey(unsigned char)+0x11a>
c0008ba3:	83 ec 0c             	sub    esp,0xc
c0008ba6:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008bac:	50                   	push   eax
c0008bad:	e8 7e 79 ff ff       	call   c0000530 <strlen>
c0008bb2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008bb5:	89 c5                	mov    ebp,eax
c0008bb7:	e8 74 79 ff ff       	call   c0000530 <strlen>
c0008bbc:	83 c4 10             	add    esp,0x10
c0008bbf:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008bc3:	3d 80 00 00 00       	cmp    eax,0x80
c0008bc8:	0f 87 a4 00 00 00    	ja     c0008c72 <VgaText::receiveKey(unsigned char)+0x158>
c0008bce:	8d 46 ff             	lea    eax,[esi-0x1]
c0008bd1:	3c 1e                	cmp    al,0x1e
c0008bd3:	77 36                	ja     c0008c0b <VgaText::receiveKey(unsigned char)+0xf1>
c0008bd5:	8d 46 f7             	lea    eax,[esi-0x9]
c0008bd8:	3c 01                	cmp    al,0x1
c0008bda:	76 2f                	jbe    c0008c0b <VgaText::receiveKey(unsigned char)+0xf1>
c0008bdc:	89 f0                	mov    eax,esi
c0008bde:	3c 0d                	cmp    al,0xd
c0008be0:	74 29                	je     c0008c0b <VgaText::receiveKey(unsigned char)+0xf1>
c0008be2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008be5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008be8:	68 e1 f5 01 c0       	push   0xc001f5e1
c0008bed:	53                   	push   ebx
c0008bee:	e8 85 fc ff ff       	call   c0008878 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008bf3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bf6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bf9:	8d 46 40             	lea    eax,[esi+0x40]
c0008bfc:	0f b6 c0             	movzx  eax,al
c0008bff:	50                   	push   eax
c0008c00:	53                   	push   ebx
c0008c01:	e8 00 fa ff ff       	call   c0008606 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008c06:	83 c4 20             	add    esp,0x20
c0008c09:	eb 11                	jmp    c0008c1c <VgaText::receiveKey(unsigned char)+0x102>
c0008c0b:	89 f0                	mov    eax,esi
c0008c0d:	51                   	push   ecx
c0008c0e:	51                   	push   ecx
c0008c0f:	0f be c0             	movsx  eax,al
c0008c12:	50                   	push   eax
c0008c13:	53                   	push   ebx
c0008c14:	e8 bb fa ff ff       	call   c00086d4 <VgaText::putchar(char)>
c0008c19:	83 c4 10             	add    esp,0x10
c0008c1c:	89 f0                	mov    eax,esi
c0008c1e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008c23:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008c27:	52                   	push   edx
c0008c28:	52                   	push   edx
c0008c29:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008c2d:	50                   	push   eax
c0008c2e:	57                   	push   edi
c0008c2f:	e8 8c 7b ff ff       	call   c00007c0 <strcat>
c0008c34:	83 c4 10             	add    esp,0x10
c0008c37:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008c3e:	75 10                	jne    c0008c50 <VgaText::receiveKey(unsigned char)+0x136>
c0008c40:	89 f0                	mov    eax,esi
c0008c42:	3c 1c                	cmp    al,0x1c
c0008c44:	77 2c                	ja     c0008c72 <VgaText::receiveKey(unsigned char)+0x158>
c0008c46:	b8 08 04 00 10       	mov    eax,0x10000408
c0008c4b:	0f a3 f0             	bt     eax,esi
c0008c4e:	73 22                	jae    c0008c72 <VgaText::receiveKey(unsigned char)+0x158>
c0008c50:	50                   	push   eax
c0008c51:	81 c3 02 01 00 00    	add    ebx,0x102
c0008c57:	50                   	push   eax
c0008c58:	57                   	push   edi
c0008c59:	53                   	push   ebx
c0008c5a:	e8 61 7b ff ff       	call   c00007c0 <strcat>
c0008c5f:	83 c4 0c             	add    esp,0xc
c0008c62:	68 80 00 00 00       	push   0x80
c0008c67:	6a 00                	push   0x0
c0008c69:	57                   	push   edi
c0008c6a:	e8 51 78 ff ff       	call   c00004c0 <memset>
c0008c6f:	83 c4 10             	add    esp,0x10
c0008c72:	83 c4 1c             	add    esp,0x1c
c0008c75:	5b                   	pop    ebx
c0008c76:	5e                   	pop    esi
c0008c77:	5f                   	pop    edi
c0008c78:	5d                   	pop    ebp
c0008c79:	c3                   	ret    

c0008c7a <VgaText::doUpdate()>:
c0008c7a:	c3                   	ret    

c0008c7b <newTerminal(char*)>:
c0008c7b:	83 ec 28             	sub    esp,0x28
c0008c7e:	68 84 01 00 00       	push   0x184
c0008c83:	e8 db eb ff ff       	call   c0007863 <malloc>
c0008c88:	5a                   	pop    edx
c0008c89:	59                   	pop    ecx
c0008c8a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c8e:	50                   	push   eax
c0008c8f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c93:	e8 32 fd ff ff       	call   c00089ca <VgaText::VgaText(char const*)>
c0008c98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c9c:	83 c4 2c             	add    esp,0x2c
c0008c9f:	c3                   	ret    

c0008ca0 <TSS::TSS()>:
c0008ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ca4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008cab:	90                   	nop
c0008cac:	c3                   	ret    
c0008cad:	90                   	nop
c0008cae:	66 90                	xchg   ax,ax

c0008cb0 <TSS::setESP(unsigned long)>:
c0008cb0:	55                   	push   ebp
c0008cb1:	89 e5                	mov    ebp,esp
c0008cb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cb9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cbc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008cbf:	90                   	nop
c0008cc0:	5d                   	pop    ebp
c0008cc1:	c3                   	ret    
c0008cc2:	66 90                	xchg   ax,ax

c0008cc4 <TSS::flush()>:
c0008cc4:	55                   	push   ebp
c0008cc5:	89 e5                	mov    ebp,esp
c0008cc7:	83 ec 10             	sub    esp,0x10
c0008cca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ccd:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ccf:	83 c8 03             	or     eax,0x3
c0008cd2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008cd6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008cda:	66 89 d0             	mov    ax,dx
c0008cdd:	0f 00 d8             	ltr    ax
c0008ce0:	90                   	nop
c0008ce1:	c9                   	leave  
c0008ce2:	c3                   	ret    
c0008ce3:	90                   	nop

c0008ce4 <TSS::setup(unsigned long, unsigned long)>:
c0008ce4:	55                   	push   ebp
c0008ce5:	89 e5                	mov    ebp,esp
c0008ce7:	83 ec 18             	sub    esp,0x18
c0008cea:	83 ec 0c             	sub    esp,0xc
c0008ced:	6a 68                	push   0x68
c0008cef:	e8 6f eb ff ff       	call   c0007863 <malloc>
c0008cf4:	83 c4 10             	add    esp,0x10
c0008cf7:	89 c2                	mov    edx,eax
c0008cf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cfc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008cff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d05:	83 ec 04             	sub    esp,0x4
c0008d08:	6a 68                	push   0x68
c0008d0a:	6a 00                	push   0x0
c0008d0c:	50                   	push   eax
c0008d0d:	e8 ae 77 ff ff       	call   c00004c0 <memset>
c0008d12:	83 c4 10             	add    esp,0x10
c0008d15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d1b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008d21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d24:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d27:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008d2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d33:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d36:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d3f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008d45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d4b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008d51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d57:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008d5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d63:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d6f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008d75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d7b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d87:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008d8a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008d8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d93:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d96:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008d99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d9f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008da6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008da9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008dac:	0f 20 da             	mov    edx,cr3
c0008daf:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008db2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008db5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008db8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008dbb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008dbe:	83 ec 08             	sub    esp,0x8
c0008dc1:	50                   	push   eax
c0008dc2:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008dc5:	50                   	push   eax
c0008dc6:	e8 1f e3 ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c0008dcb:	83 c4 10             	add    esp,0x10
c0008dce:	83 ec 08             	sub    esp,0x8
c0008dd1:	6a 68                	push   0x68
c0008dd3:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008dd6:	50                   	push   eax
c0008dd7:	e8 2a e3 ff ff       	call   c0007106 <GDTEntry::setLimit(unsigned int)>
c0008ddc:	83 c4 10             	add    esp,0x10
c0008ddf:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008de3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008de6:	83 e0 0f             	and    eax,0xf
c0008de9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008dec:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008def:	83 c8 40             	or     eax,0x40
c0008df2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008df5:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008dfa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e00:	05 78 01 00 00       	add    eax,0x178
c0008e05:	83 ec 04             	sub    esp,0x4
c0008e08:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008e0b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008e0e:	50                   	push   eax
c0008e0f:	e8 26 e3 ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0008e14:	83 c4 10             	add    esp,0x10
c0008e17:	89 c2                	mov    edx,eax
c0008e19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e1c:	89 10                	mov    DWORD PTR [eax],edx
c0008e1e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008e23:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e29:	05 78 01 00 00       	add    eax,0x178
c0008e2e:	83 ec 0c             	sub    esp,0xc
c0008e31:	50                   	push   eax
c0008e32:	e8 2d e3 ff ff       	call   c0007164 <GDT::flush()>
c0008e37:	83 c4 10             	add    esp,0x10
c0008e3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e3f:	c9                   	leave  
c0008e40:	c3                   	ret    
c0008e41:	90                   	nop

c0008e42 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008e42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008e4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e4d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e52:	75 08                	jne    c0008e5c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008e54:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e5a:	eb 38                	jmp    c0008e94 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008e5c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e61:	75 17                	jne    c0008e7a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008e63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e68:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e6b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e71:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e77:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008e7a:	89 c1                	mov    ecx,eax
c0008e7c:	83 e1 fd             	and    ecx,0xfffffffd
c0008e7f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008e85:	74 cd                	je     c0008e54 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e87:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e8c:	83 e0 ef             	and    eax,0xffffffef
c0008e8f:	83 f8 08             	cmp    eax,0x8
c0008e92:	76 c0                	jbe    c0008e54 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e94:	31 c0                	xor    eax,eax
c0008e96:	c3                   	ret    
c0008e97:	90                   	nop

c0008e98 <ReservedFilename::isAtty()>:
c0008e98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e9c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e9f:	31 c0                	xor    eax,eax
c0008ea1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008ea7:	74 09                	je     c0008eb2 <ReservedFilename::isAtty()+0x1a>
c0008ea9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008eaf:	0f 94 c0             	sete   al
c0008eb2:	c3                   	ret    
c0008eb3:	90                   	nop

c0008eb4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008eb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008eb8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008ebc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008ec0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ec3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008ec8:	75 08                	jne    c0008ed2 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008eca:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008ed0:	eb 3d                	jmp    c0008f0f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008ed2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008ed7:	75 17                	jne    c0008ef0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008ed9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008ede:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008ee1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008ee7:	8b 10                	mov    edx,DWORD PTR [eax]
c0008ee9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008eed:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008ef0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008ef5:	75 04                	jne    c0008efb <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008ef7:	89 0a                	mov    DWORD PTR [edx],ecx
c0008ef9:	eb 14                	jmp    c0008f0f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008efb:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008f00:	74 c8                	je     c0008eca <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008f02:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008f07:	83 e0 ef             	and    eax,0xffffffef
c0008f0a:	83 f8 08             	cmp    eax,0x8
c0008f0d:	76 bb                	jbe    c0008eca <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008f0f:	31 c0                	xor    eax,eax
c0008f11:	c3                   	ret    

c0008f12 <UnixFile::getFileDescriptor()>:
c0008f12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f19:	c3                   	ret    

c0008f1a <UnixFile::UnixFile(int)>:
c0008f1a:	53                   	push   ebx
c0008f1b:	83 ec 28             	sub    esp,0x28
c0008f1e:	ba b8 f6 01 c0       	mov    edx,0xc001f6b8
c0008f23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f27:	89 10                	mov    DWORD PTR [eax],edx
c0008f29:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008f31:	0f 8f 8c 01 00 00    	jg     c00090c3 <UnixFile::UnixFile(int)+0x1a9>
c0008f37:	a1 80 17 02 c0       	mov    eax,ds:0xc0021780
c0008f3c:	8d 50 01             	lea    edx,[eax+0x1]
c0008f3f:	89 15 80 17 02 c0    	mov    DWORD PTR ds:0xc0021780,edx
c0008f45:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008f49:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f4c:	83 ec 08             	sub    esp,0x8
c0008f4f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008f53:	68 98 3f 02 c0       	push   0xc0023f98
c0008f58:	e8 5b 52 01 00       	call   c001e1b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008f5d:	83 c4 10             	add    esp,0x10
c0008f60:	a0 94 3f 02 c0       	mov    al,ds:0xc0023f94
c0008f65:	83 f0 01             	xor    eax,0x1
c0008f68:	84 c0                	test   al,al
c0008f6a:	0f 84 54 01 00 00    	je     c00090c4 <UnixFile::UnixFile(int)+0x1aa>
c0008f70:	c6 05 94 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f94,0x1
c0008f77:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008f7f:	83 ec 0c             	sub    esp,0xc
c0008f82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008f86:	e8 d8 e8 ff ff       	call   c0007863 <malloc>
c0008f8b:	83 c4 10             	add    esp,0x10
c0008f8e:	89 c3                	mov    ebx,eax
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	68 03 ff ff 0f       	push   0xfffff03
c0008f98:	53                   	push   ebx
c0008f99:	e8 2c 01 00 00       	call   c00090ca <ReservedFilename::ReservedFilename(int)>
c0008f9e:	83 c4 10             	add    esp,0x10
c0008fa1:	89 1d 8c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f8c,ebx
c0008fa7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008faf:	83 ec 0c             	sub    esp,0xc
c0008fb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008fb6:	e8 a8 e8 ff ff       	call   c0007863 <malloc>
c0008fbb:	83 c4 10             	add    esp,0x10
c0008fbe:	89 c3                	mov    ebx,eax
c0008fc0:	83 ec 08             	sub    esp,0x8
c0008fc3:	68 01 ff ff 0f       	push   0xfffff01
c0008fc8:	53                   	push   ebx
c0008fc9:	e8 fc 00 00 00       	call   c00090ca <ReservedFilename::ReservedFilename(int)>
c0008fce:	83 c4 10             	add    esp,0x10
c0008fd1:	89 1d 90 3f 02 c0    	mov    DWORD PTR ds:0xc0023f90,ebx
c0008fd7:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008fdf:	83 ec 0c             	sub    esp,0xc
c0008fe2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008fe6:	e8 78 e8 ff ff       	call   c0007863 <malloc>
c0008feb:	83 c4 10             	add    esp,0x10
c0008fee:	89 c3                	mov    ebx,eax
c0008ff0:	83 ec 08             	sub    esp,0x8
c0008ff3:	68 00 ff ff 0f       	push   0xfffff00
c0008ff8:	53                   	push   ebx
c0008ff9:	e8 cc 00 00 00       	call   c00090ca <ReservedFilename::ReservedFilename(int)>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 1d 84 3f 02 c0    	mov    DWORD PTR ds:0xc0023f84,ebx
c0009007:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000900f:	83 ec 0c             	sub    esp,0xc
c0009012:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009016:	e8 48 e8 ff ff       	call   c0007863 <malloc>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 c3                	mov    ebx,eax
c0009020:	83 ec 08             	sub    esp,0x8
c0009023:	68 02 ff ff 0f       	push   0xfffff02
c0009028:	53                   	push   ebx
c0009029:	e8 9c 00 00 00       	call   c00090ca <ReservedFilename::ReservedFilename(int)>
c000902e:	83 c4 10             	add    esp,0x10
c0009031:	89 1d 88 3f 02 c0    	mov    DWORD PTR ds:0xc0023f88,ebx
c0009037:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000903f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009044:	7f 7e                	jg     c00090c4 <UnixFile::UnixFile(int)+0x1aa>
c0009046:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000904e:	83 ec 0c             	sub    esp,0xc
c0009051:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009055:	e8 09 e8 ff ff       	call   c0007863 <malloc>
c000905a:	83 c4 10             	add    esp,0x10
c000905d:	89 c3                	mov    ebx,eax
c000905f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009063:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009068:	83 ec 08             	sub    esp,0x8
c000906b:	50                   	push   eax
c000906c:	53                   	push   ebx
c000906d:	e8 58 00 00 00       	call   c00090ca <ReservedFilename::ReservedFilename(int)>
c0009072:	83 c4 10             	add    esp,0x10
c0009075:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009079:	89 1c 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],ebx
c0009080:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009088:	83 ec 0c             	sub    esp,0xc
c000908b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000908f:	e8 cf e7 ff ff       	call   c0007863 <malloc>
c0009094:	83 c4 10             	add    esp,0x10
c0009097:	89 c3                	mov    ebx,eax
c0009099:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000909d:	05 20 ff ff 0f       	add    eax,0xfffff20
c00090a2:	83 ec 08             	sub    esp,0x8
c00090a5:	50                   	push   eax
c00090a6:	53                   	push   ebx
c00090a7:	e8 1e 00 00 00       	call   c00090ca <ReservedFilename::ReservedFilename(int)>
c00090ac:	83 c4 10             	add    esp,0x10
c00090af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090b3:	89 1c 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],ebx
c00090ba:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00090be:	e9 7c ff ff ff       	jmp    c000903f <UnixFile::UnixFile(int)+0x125>
c00090c3:	90                   	nop
c00090c4:	83 c4 28             	add    esp,0x28
c00090c7:	5b                   	pop    ebx
c00090c8:	c3                   	ret    
c00090c9:	90                   	nop

c00090ca <ReservedFilename::ReservedFilename(int)>:
c00090ca:	83 ec 0c             	sub    esp,0xc
c00090cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d1:	83 ec 08             	sub    esp,0x8
c00090d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d8:	50                   	push   eax
c00090d9:	e8 3c fe ff ff       	call   c0008f1a <UnixFile::UnixFile(int)>
c00090de:	83 c4 10             	add    esp,0x10
c00090e1:	ba d4 f6 01 c0       	mov    edx,0xc001f6d4
c00090e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090ea:	89 10                	mov    DWORD PTR [eax],edx
c00090ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090f4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00090f7:	90                   	nop
c00090f8:	83 c4 0c             	add    esp,0xc
c00090fb:	c3                   	ret    

c00090fc <UnixFile::~UnixFile()>:
c00090fc:	83 ec 1c             	sub    esp,0x1c
c00090ff:	ba b8 f6 01 c0       	mov    edx,0xc001f6b8
c0009104:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009108:	89 10                	mov    DWORD PTR [eax],edx
c000910a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000910e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009111:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009116:	7f 73                	jg     c000918b <UnixFile::~UnixFile()+0x8f>
c0009118:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009120:	83 ec 0c             	sub    esp,0xc
c0009123:	68 98 3f 02 c0       	push   0xc0023f98
c0009128:	e8 5f 51 01 00       	call   c001e28c <LinkedList<UnixFile>::getFirstElement()>
c000912d:	83 c4 10             	add    esp,0x10
c0009130:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009134:	83 ec 0c             	sub    esp,0xc
c0009137:	68 98 3f 02 c0       	push   0xc0023f98
c000913c:	e8 53 51 01 00       	call   c001e294 <LinkedList<UnixFile>::removeFirst()>
c0009141:	83 c4 10             	add    esp,0x10
c0009144:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009148:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000914c:	74 40                	je     c000918e <UnixFile::~UnixFile()+0x92>
c000914e:	83 ec 08             	sub    esp,0x8
c0009151:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009155:	68 98 3f 02 c0       	push   0xc0023f98
c000915a:	e8 59 50 01 00       	call   c001e1b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000915f:	83 c4 10             	add    esp,0x10
c0009162:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009166:	8d 50 01             	lea    edx,[eax+0x1]
c0009169:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000916d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009172:	0f 94 c0             	sete   al
c0009175:	84 c0                	test   al,al
c0009177:	74 a7                	je     c0009120 <UnixFile::~UnixFile()+0x24>
c0009179:	83 ec 0c             	sub    esp,0xc
c000917c:	68 90 f6 01 c0       	push   0xc001f690
c0009181:	e8 81 72 00 00       	call   c0010407 <KePanic(char const*)>
c0009186:	83 c4 10             	add    esp,0x10
c0009189:	eb 95                	jmp    c0009120 <UnixFile::~UnixFile()+0x24>
c000918b:	90                   	nop
c000918c:	eb 01                	jmp    c000918f <UnixFile::~UnixFile()+0x93>
c000918e:	90                   	nop
c000918f:	90                   	nop
c0009190:	83 c4 1c             	add    esp,0x1c
c0009193:	c3                   	ret    

c0009194 <UnixFile::~UnixFile()>:
c0009194:	83 ec 0c             	sub    esp,0xc
c0009197:	83 ec 0c             	sub    esp,0xc
c000919a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000919e:	e8 59 ff ff ff       	call   c00090fc <UnixFile::~UnixFile()>
c00091a3:	83 c4 10             	add    esp,0x10
c00091a6:	83 ec 08             	sub    esp,0x8
c00091a9:	6a 0c                	push   0xc
c00091ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091af:	e8 a9 13 00 00       	call   c000a55d <operator delete(void*, unsigned long)>
c00091b4:	83 c4 10             	add    esp,0x10
c00091b7:	83 c4 0c             	add    esp,0xc
c00091ba:	c3                   	ret    
c00091bb:	90                   	nop

c00091bc <ReservedFilename::~ReservedFilename()>:
c00091bc:	83 ec 0c             	sub    esp,0xc
c00091bf:	ba d4 f6 01 c0       	mov    edx,0xc001f6d4
c00091c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091c8:	89 10                	mov    DWORD PTR [eax],edx
c00091ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091ce:	83 ec 0c             	sub    esp,0xc
c00091d1:	50                   	push   eax
c00091d2:	e8 25 ff ff ff       	call   c00090fc <UnixFile::~UnixFile()>
c00091d7:	83 c4 10             	add    esp,0x10
c00091da:	90                   	nop
c00091db:	83 c4 0c             	add    esp,0xc
c00091de:	c3                   	ret    
c00091df:	90                   	nop

c00091e0 <ReservedFilename::~ReservedFilename()>:
c00091e0:	83 ec 0c             	sub    esp,0xc
c00091e3:	83 ec 0c             	sub    esp,0xc
c00091e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091ea:	e8 cd ff ff ff       	call   c00091bc <ReservedFilename::~ReservedFilename()>
c00091ef:	83 c4 10             	add    esp,0x10
c00091f2:	83 ec 08             	sub    esp,0x8
c00091f5:	6a 0c                	push   0xc
c00091f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091fb:	e8 5d 13 00 00       	call   c000a55d <operator delete(void*, unsigned long)>
c0009200:	83 c4 10             	add    esp,0x10
c0009203:	83 c4 0c             	add    esp,0xc
c0009206:	c3                   	ret    

c0009207 <getFromFileDescriptor(int)>:
c0009207:	53                   	push   ebx
c0009208:	83 ec 08             	sub    esp,0x8
c000920b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000920f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009215:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000921b:	7f 2c                	jg     c0009249 <getFromFileDescriptor(int)+0x42>
c000921d:	83 ec 0c             	sub    esp,0xc
c0009220:	68 98 3f 02 c0       	push   0xc0023f98
c0009225:	e8 62 50 01 00       	call   c001e28c <LinkedList<UnixFile>::getFirstElement()>
c000922a:	83 c4 10             	add    esp,0x10
c000922d:	85 c0                	test   eax,eax
c000922f:	75 04                	jne    c0009235 <getFromFileDescriptor(int)+0x2e>
c0009231:	31 c0                	xor    eax,eax
c0009233:	eb 6e                	jmp    c00092a3 <getFromFileDescriptor(int)+0x9c>
c0009235:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009238:	74 69                	je     c00092a3 <getFromFileDescriptor(int)+0x9c>
c000923a:	52                   	push   edx
c000923b:	52                   	push   edx
c000923c:	50                   	push   eax
c000923d:	68 98 3f 02 c0       	push   0xc0023f98
c0009242:	e8 ef 50 01 00       	call   c001e336 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009247:	eb e1                	jmp    c000922a <getFromFileDescriptor(int)+0x23>
c0009249:	a1 8c 3f 02 c0       	mov    eax,ds:0xc0023f8c
c000924e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009254:	74 4d                	je     c00092a3 <getFromFileDescriptor(int)+0x9c>
c0009256:	a1 90 3f 02 c0       	mov    eax,ds:0xc0023f90
c000925b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009261:	74 40                	je     c00092a3 <getFromFileDescriptor(int)+0x9c>
c0009263:	a1 88 3f 02 c0       	mov    eax,ds:0xc0023f88
c0009268:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000926e:	74 33                	je     c00092a3 <getFromFileDescriptor(int)+0x9c>
c0009270:	a1 84 3f 02 c0       	mov    eax,ds:0xc0023f84
c0009275:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000927b:	74 26                	je     c00092a3 <getFromFileDescriptor(int)+0x9c>
c000927d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009283:	83 f8 08             	cmp    eax,0x8
c0009286:	77 09                	ja     c0009291 <getFromFileDescriptor(int)+0x8a>
c0009288:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c000928f:	eb 12                	jmp    c00092a3 <getFromFileDescriptor(int)+0x9c>
c0009291:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009297:	83 fb 08             	cmp    ebx,0x8
c000929a:	77 95                	ja     c0009231 <getFromFileDescriptor(int)+0x2a>
c000929c:	8b 04 9d 20 3f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc0e0]
c00092a3:	83 c4 08             	add    esp,0x8
c00092a6:	5b                   	pop    ebx
c00092a7:	c3                   	ret    

c00092a8 <__static_initialization_and_destruction_0(int, int)>:
c00092a8:	83 ec 0c             	sub    esp,0xc
c00092ab:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00092b0:	75 34                	jne    c00092e6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00092b2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00092ba:	75 2a                	jne    c00092e6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00092bc:	83 ec 0c             	sub    esp,0xc
c00092bf:	68 98 3f 02 c0       	push   0xc0023f98
c00092c4:	e8 ad 4e 01 00       	call   c001e176 <LinkedList<UnixFile>::LinkedList()>
c00092c9:	83 c4 10             	add    esp,0x10
c00092cc:	83 ec 04             	sub    esp,0x4
c00092cf:	68 08 17 02 c0       	push   0xc0021708
c00092d4:	68 98 3f 02 c0       	push   0xc0023f98
c00092d9:	68 74 e1 01 c0       	push   0xc001e174
c00092de:	e8 2a 12 00 00       	call   c000a50d <__cxa_atexit>
c00092e3:	83 c4 10             	add    esp,0x10
c00092e6:	90                   	nop
c00092e7:	83 c4 0c             	add    esp,0xc
c00092ea:	c3                   	ret    

c00092eb <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00092eb:	83 ec 0c             	sub    esp,0xc
c00092ee:	83 ec 08             	sub    esp,0x8
c00092f1:	68 ff ff 00 00       	push   0xffff
c00092f6:	6a 01                	push   0x1
c00092f8:	e8 ab ff ff ff       	call   c00092a8 <__static_initialization_and_destruction_0(int, int)>
c00092fd:	83 c4 10             	add    esp,0x10
c0009300:	83 c4 0c             	add    esp,0xc
c0009303:	c3                   	ret    

c0009304 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009304:	53                   	push   ebx
c0009305:	8b 15 88 17 02 c0    	mov    edx,DWORD PTR ds:0xc0021788
c000930b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000930f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009313:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0009319:	89 c8                	mov    eax,ecx
c000931b:	d1 e8                	shr    eax,1
c000931d:	01 d0                	add    eax,edx
c000931f:	83 e1 01             	and    ecx,0x1
c0009322:	8a 10                	mov    dl,BYTE PTR [eax]
c0009324:	75 09                	jne    c000932f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0009326:	83 e2 f0             	and    edx,0xfffffff0
c0009329:	09 da                	or     edx,ebx
c000932b:	88 10                	mov    BYTE PTR [eax],dl
c000932d:	5b                   	pop    ebx
c000932e:	c3                   	ret    
c000932f:	c1 e3 04             	shl    ebx,0x4
c0009332:	83 e2 0f             	and    edx,0xf
c0009335:	09 da                	or     edx,ebx
c0009337:	88 10                	mov    BYTE PTR [eax],dl
c0009339:	5b                   	pop    ebx
c000933a:	c3                   	ret    

c000933b <Virt::getPageState(unsigned long)>:
c000933b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000933f:	8b 0d 88 17 02 c0    	mov    ecx,DWORD PTR ds:0xc0021788
c0009345:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000934b:	89 d0                	mov    eax,edx
c000934d:	d1 e8                	shr    eax,1
c000934f:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c0009352:	88 c8                	mov    al,cl
c0009354:	c0 e8 04             	shr    al,0x4
c0009357:	83 e2 01             	and    edx,0x1
c000935a:	75 05                	jne    c0009361 <Virt::getPageState(unsigned long)+0x26>
c000935c:	88 c8                	mov    al,cl
c000935e:	83 e0 0f             	and    eax,0xf
c0009361:	c3                   	ret    

c0009362 <Virt::allocateKernelVirtualPages(int)>:
c0009362:	55                   	push   ebp
c0009363:	31 ed                	xor    ebp,ebp
c0009365:	57                   	push   edi
c0009366:	56                   	push   esi
c0009367:	53                   	push   ebx
c0009368:	31 db                	xor    ebx,ebx
c000936a:	83 ec 1c             	sub    esp,0x1c
c000936d:	8b 3d 84 17 02 c0    	mov    edi,DWORD PTR ds:0xc0021784
c0009373:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009377:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000937c:	57                   	push   edi
c000937d:	e8 b9 ff ff ff       	call   c000933b <Virt::getPageState(unsigned long)>
c0009382:	5a                   	pop    edx
c0009383:	84 c0                	test   al,al
c0009385:	75 3a                	jne    c00093c1 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0009387:	85 db                	test   ebx,ebx
c0009389:	75 02                	jne    c000938d <Virt::allocateKernelVirtualPages(int)+0x2b>
c000938b:	89 fd                	mov    ebp,edi
c000938d:	43                   	inc    ebx
c000938e:	39 f3                	cmp    ebx,esi
c0009390:	74 5a                	je     c00093ec <Virt::allocateKernelVirtualPages(int)+0x8a>
c0009392:	47                   	inc    edi
c0009393:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009399:	76 31                	jbe    c00093cc <Virt::allocateKernelVirtualPages(int)+0x6a>
c000939b:	c7 05 84 17 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021784,0xc8000
c00093a5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00093aa:	75 28                	jne    c00093d4 <Virt::allocateKernelVirtualPages(int)+0x72>
c00093ac:	bf 00 80 0c 00       	mov    edi,0xc8000
c00093b1:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00093b6:	57                   	push   edi
c00093b7:	e8 7f ff ff ff       	call   c000933b <Virt::getPageState(unsigned long)>
c00093bc:	5a                   	pop    edx
c00093bd:	84 c0                	test   al,al
c00093bf:	74 c6                	je     c0009387 <Virt::allocateKernelVirtualPages(int)+0x25>
c00093c1:	47                   	inc    edi
c00093c2:	31 db                	xor    ebx,ebx
c00093c4:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00093ca:	77 cf                	ja     c000939b <Virt::allocateKernelVirtualPages(int)+0x39>
c00093cc:	89 3d 84 17 02 c0    	mov    DWORD PTR ds:0xc0021784,edi
c00093d2:	eb a8                	jmp    c000937c <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093d4:	83 ec 0c             	sub    esp,0xc
c00093d7:	68 e8 f6 01 c0       	push   0xc001f6e8
c00093dc:	e8 26 70 00 00       	call   c0010407 <KePanic(char const*)>
c00093e1:	8b 3d 84 17 02 c0    	mov    edi,DWORD PTR ds:0xc0021784
c00093e7:	83 c4 10             	add    esp,0x10
c00093ea:	eb 90                	jmp    c000937c <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093ec:	89 2d 84 17 02 c0    	mov    DWORD PTR ds:0xc0021784,ebp
c00093f2:	4b                   	dec    ebx
c00093f3:	74 5f                	je     c0009454 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00093f5:	85 f6                	test   esi,esi
c00093f7:	74 3d                	je     c0009436 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00093f9:	89 e8                	mov    eax,ebp
c00093fb:	31 db                	xor    ebx,ebx
c00093fd:	8d 7e ff             	lea    edi,[esi-0x1]
c0009400:	eb 14                	jmp    c0009416 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009402:	6a 01                	push   0x1
c0009404:	43                   	inc    ebx
c0009405:	50                   	push   eax
c0009406:	e8 f9 fe ff ff       	call   c0009304 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000940b:	58                   	pop    eax
c000940c:	39 f3                	cmp    ebx,esi
c000940e:	5a                   	pop    edx
c000940f:	74 25                	je     c0009436 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009411:	a1 84 17 02 c0       	mov    eax,ds:0xc0021784
c0009416:	8d 50 01             	lea    edx,[eax+0x1]
c0009419:	85 db                	test   ebx,ebx
c000941b:	89 15 84 17 02 c0    	mov    DWORD PTR ds:0xc0021784,edx
c0009421:	74 20                	je     c0009443 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009423:	39 df                	cmp    edi,ebx
c0009425:	75 db                	jne    c0009402 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009427:	6a 03                	push   0x3
c0009429:	43                   	inc    ebx
c000942a:	50                   	push   eax
c000942b:	e8 d4 fe ff ff       	call   c0009304 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009430:	59                   	pop    ecx
c0009431:	39 f3                	cmp    ebx,esi
c0009433:	58                   	pop    eax
c0009434:	75 db                	jne    c0009411 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009436:	83 c4 1c             	add    esp,0x1c
c0009439:	89 e8                	mov    eax,ebp
c000943b:	c1 e0 0c             	shl    eax,0xc
c000943e:	5b                   	pop    ebx
c000943f:	5e                   	pop    esi
c0009440:	5f                   	pop    edi
c0009441:	5d                   	pop    ebp
c0009442:	c3                   	ret    
c0009443:	6a 02                	push   0x2
c0009445:	bb 01 00 00 00       	mov    ebx,0x1
c000944a:	50                   	push   eax
c000944b:	e8 b4 fe ff ff       	call   c0009304 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009450:	58                   	pop    eax
c0009451:	5a                   	pop    edx
c0009452:	eb bd                	jmp    c0009411 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009454:	6a 04                	push   0x4
c0009456:	8d 45 01             	lea    eax,[ebp+0x1]
c0009459:	55                   	push   ebp
c000945a:	a3 84 17 02 c0       	mov    ds:0xc0021784,eax
c000945f:	e8 a0 fe ff ff       	call   c0009304 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009464:	59                   	pop    ecx
c0009465:	5b                   	pop    ebx
c0009466:	89 e8                	mov    eax,ebp
c0009468:	c1 e0 0c             	shl    eax,0xc
c000946b:	83 c4 1c             	add    esp,0x1c
c000946e:	5b                   	pop    ebx
c000946f:	5e                   	pop    esi
c0009470:	5f                   	pop    edi
c0009471:	5d                   	pop    ebp
c0009472:	c3                   	ret    

c0009473 <Virt::freeSwapfilePage(unsigned long)>:
c0009473:	53                   	push   ebx
c0009474:	8b 15 ac 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fac
c000947a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000947e:	b8 01 00 00 00       	mov    eax,0x1
c0009483:	89 cb                	mov    ebx,ecx
c0009485:	c1 eb 05             	shr    ebx,0x5
c0009488:	d3 e0                	shl    eax,cl
c000948a:	83 f0 ff             	xor    eax,0xffffffff
c000948d:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0009490:	21 c1                	and    ecx,eax
c0009492:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009495:	5b                   	pop    ebx
c0009496:	c3                   	ret    

c0009497 <Virt::swapIDToSector(unsigned long)>:
c0009497:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000949b:	8b 15 8c 17 02 c0    	mov    edx,DWORD PTR ds:0xc002178c
c00094a1:	0f af c2             	imul   eax,edx
c00094a4:	8b 0d 94 17 02 c0    	mov    ecx,DWORD PTR ds:0xc0021794
c00094aa:	01 c8                	add    eax,ecx
c00094ac:	c3                   	ret    

c00094ad <Virt::allocateSwapfilePage()>:
c00094ad:	55                   	push   ebp
c00094ae:	31 d2                	xor    edx,edx
c00094b0:	57                   	push   edi
c00094b1:	56                   	push   esi
c00094b2:	53                   	push   ebx
c00094b3:	83 ec 0c             	sub    esp,0xc
c00094b6:	8b 0d 8c 17 02 c0    	mov    ecx,DWORD PTR ds:0xc002178c
c00094bc:	a1 90 17 02 c0       	mov    eax,ds:0xc0021790
c00094c1:	f7 f1                	div    ecx
c00094c3:	39 0d 90 17 02 c0    	cmp    DWORD PTR ds:0xc0021790,ecx
c00094c9:	72 2d                	jb     c00094f8 <Virt::allocateSwapfilePage()+0x4b>
c00094cb:	8b 35 ac 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fac
c00094d1:	8b 16                	mov    edx,DWORD PTR [esi]
c00094d3:	f6 c2 01             	test   dl,0x1
c00094d6:	74 3c                	je     c0009514 <Virt::allocateSwapfilePage()+0x67>
c00094d8:	31 c9                	xor    ecx,ecx
c00094da:	bf 01 00 00 00       	mov    edi,0x1
c00094df:	eb 12                	jmp    c00094f3 <Virt::allocateSwapfilePage()+0x46>
c00094e1:	89 ca                	mov    edx,ecx
c00094e3:	89 fd                	mov    ebp,edi
c00094e5:	c1 ea 05             	shr    edx,0x5
c00094e8:	d3 e5                	shl    ebp,cl
c00094ea:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00094ed:	8b 13                	mov    edx,DWORD PTR [ebx]
c00094ef:	85 ea                	test   edx,ebp
c00094f1:	74 2a                	je     c000951d <Virt::allocateSwapfilePage()+0x70>
c00094f3:	41                   	inc    ecx
c00094f4:	39 c8                	cmp    eax,ecx
c00094f6:	77 e9                	ja     c00094e1 <Virt::allocateSwapfilePage()+0x34>
c00094f8:	83 ec 0c             	sub    esp,0xc
c00094fb:	68 4f f8 01 c0       	push   0xc001f84f
c0009500:	e8 02 6f 00 00       	call   c0010407 <KePanic(char const*)>
c0009505:	83 c4 10             	add    esp,0x10
c0009508:	31 c9                	xor    ecx,ecx
c000950a:	83 c4 0c             	add    esp,0xc
c000950d:	89 c8                	mov    eax,ecx
c000950f:	5b                   	pop    ebx
c0009510:	5e                   	pop    esi
c0009511:	5f                   	pop    edi
c0009512:	5d                   	pop    ebp
c0009513:	c3                   	ret    
c0009514:	89 f3                	mov    ebx,esi
c0009516:	bd 01 00 00 00       	mov    ebp,0x1
c000951b:	31 c9                	xor    ecx,ecx
c000951d:	09 ea                	or     edx,ebp
c000951f:	89 c8                	mov    eax,ecx
c0009521:	89 13                	mov    DWORD PTR [ebx],edx
c0009523:	83 c4 0c             	add    esp,0xc
c0009526:	5b                   	pop    ebx
c0009527:	5e                   	pop    esi
c0009528:	5f                   	pop    edi
c0009529:	5d                   	pop    ebp
c000952a:	c3                   	ret    

c000952b <Virt::virtualMemorySetup()>:
c000952b:	53                   	push   ebx
c000952c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009531:	6a 0f                	push   0xf
c0009533:	53                   	push   ebx
c0009534:	43                   	inc    ebx
c0009535:	e8 ca fd ff ff       	call   c0009304 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000953a:	58                   	pop    eax
c000953b:	5a                   	pop    edx
c000953c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009542:	75 ed                	jne    c0009531 <Virt::virtualMemorySetup()+0x6>
c0009544:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009549:	6a 00                	push   0x0
c000954b:	53                   	push   ebx
c000954c:	43                   	inc    ebx
c000954d:	e8 b2 fd ff ff       	call   c0009304 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009552:	59                   	pop    ecx
c0009553:	58                   	pop    eax
c0009554:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000955a:	75 ed                	jne    c0009549 <Virt::virtualMemorySetup()+0x1e>
c000955c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009561:	6a 0f                	push   0xf
c0009563:	53                   	push   ebx
c0009564:	43                   	inc    ebx
c0009565:	e8 9a fd ff ff       	call   c0009304 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000956a:	58                   	pop    eax
c000956b:	5a                   	pop    edx
c000956c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009572:	75 ed                	jne    c0009561 <Virt::virtualMemorySetup()+0x36>
c0009574:	5b                   	pop    ebx
c0009575:	c3                   	ret    

c0009576 <Virt::setupPageSwapping(int)>:
c0009576:	53                   	push   ebx
c0009577:	83 ec 0c             	sub    esp,0xc
c000957a:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c000957f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009583:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0009589:	8b 10                	mov    edx,DWORD PTR [eax]
c000958b:	53                   	push   ebx
c000958c:	c1 e3 0b             	shl    ebx,0xb
c000958f:	68 66 f8 01 c0       	push   0xc001f866
c0009594:	50                   	push   eax
c0009595:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009598:	89 1d 90 17 02 c0    	mov    DWORD PTR ds:0xc0021790,ebx
c000959e:	c6 05 98 17 02 c0 43 	mov    BYTE PTR ds:0xc0021798,0x43
c00095a5:	c1 eb 08             	shr    ebx,0x8
c00095a8:	a3 94 17 02 c0       	mov    ds:0xc0021794,eax
c00095ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00095b0:	c7 05 8c 17 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002178c,0x8
c00095ba:	e8 a4 e2 ff ff       	call   c0007863 <malloc>
c00095bf:	31 d2                	xor    edx,edx
c00095c1:	89 c1                	mov    ecx,eax
c00095c3:	a3 ac 3f 02 c0       	mov    ds:0xc0023fac,eax
c00095c8:	a1 90 17 02 c0       	mov    eax,ds:0xc0021790
c00095cd:	83 c4 0c             	add    esp,0xc
c00095d0:	f7 35 8c 17 02 c0    	div    DWORD PTR ds:0xc002178c
c00095d6:	c1 e8 05             	shr    eax,0x5
c00095d9:	50                   	push   eax
c00095da:	6a 00                	push   0x0
c00095dc:	51                   	push   ecx
c00095dd:	e8 de 6e ff ff       	call   c00004c0 <memset>
c00095e2:	83 c4 18             	add    esp,0x18
c00095e5:	5b                   	pop    ebx
c00095e6:	c3                   	ret    
c00095e7:	90                   	nop

c00095e8 <VAS::VAS(VAS*)>:
c00095e8:	83 ec 0c             	sub    esp,0xc
c00095eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095ef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00095f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095fa:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009601:	83 ec 0c             	sub    esp,0xc
c0009604:	68 08 f7 01 c0       	push   0xc001f708
c0009609:	e8 f9 6d 00 00       	call   c0010407 <KePanic(char const*)>
c000960e:	83 c4 10             	add    esp,0x10
c0009611:	90                   	nop
c0009612:	83 c4 0c             	add    esp,0xc
c0009615:	c3                   	ret    

c0009616 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000961a:	89 c2                	mov    edx,eax
c000961c:	c1 ea 16             	shr    edx,0x16
c000961f:	c1 e8 0a             	shr    eax,0xa
c0009622:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009627:	19 c9                	sbb    ecx,ecx
c0009629:	25 fc 0f 00 00       	and    eax,0xffc
c000962e:	c1 e2 0c             	shl    edx,0xc
c0009631:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009637:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000963e:	01 d0                	add    eax,edx
c0009640:	c3                   	ret    
c0009641:	90                   	nop

c0009642 <VAS::getPageTableEntry(unsigned long)>:
c0009642:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009646:	89 ca                	mov    edx,ecx
c0009648:	c1 ea 16             	shr    edx,0x16
c000964b:	c1 e9 0a             	shr    ecx,0xa
c000964e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009654:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000965a:	c1 e0 0c             	shl    eax,0xc
c000965d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009660:	c3                   	ret    

c0009661 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009661:	57                   	push   edi
c0009662:	56                   	push   esi
c0009663:	be 01 00 00 00       	mov    esi,0x1
c0009668:	53                   	push   ebx
c0009669:	83 ec 10             	sub    esp,0x10
c000966c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009670:	c1 eb 0c             	shr    ebx,0xc
c0009673:	eb 3f                	jmp    c00096b4 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009675:	51                   	push   ecx
c0009676:	51                   	push   ecx
c0009677:	57                   	push   edi
c0009678:	8b 3d b0 3f 02 c0    	mov    edi,DWORD PTR ds:0xc0023fb0
c000967e:	57                   	push   edi
c000967f:	e8 be ff ff ff       	call   c0009642 <VAS::getPageTableEntry(unsigned long)>
c0009684:	83 c4 10             	add    esp,0x10
c0009687:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000968b:	8b 00                	mov    eax,DWORD PTR [eax]
c000968d:	f6 c4 04             	test   ah,0x4
c0009690:	75 60                	jne    c00096f2 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009692:	80 fa 04             	cmp    dl,0x4
c0009695:	74 79                	je     c0009710 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009697:	80 fa 02             	cmp    dl,0x2
c000969a:	0f 84 89 00 00 00    	je     c0009729 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00096a0:	80 fa 03             	cmp    dl,0x3
c00096a3:	0f 84 ad 00 00 00    	je     c0009756 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00096a9:	fe ca                	dec    dl
c00096ab:	0f 84 93 00 00 00    	je     c0009744 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00096b1:	43                   	inc    ebx
c00096b2:	31 f6                	xor    esi,esi
c00096b4:	53                   	push   ebx
c00096b5:	e8 81 fc ff ff       	call   c000933b <Virt::getPageState(unsigned long)>
c00096ba:	5f                   	pop    edi
c00096bb:	89 df                	mov    edi,ebx
c00096bd:	c1 e7 0c             	shl    edi,0xc
c00096c0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00096c4:	84 c0                	test   al,al
c00096c6:	75 ad                	jne    c0009675 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00096c8:	83 ec 0c             	sub    esp,0xc
c00096cb:	68 7d f8 01 c0       	push   0xc001f87d
c00096d0:	e8 32 6d 00 00       	call   c0010407 <KePanic(char const*)>
c00096d5:	58                   	pop    eax
c00096d6:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c00096dc:	5a                   	pop    edx
c00096dd:	57                   	push   edi
c00096de:	51                   	push   ecx
c00096df:	e8 5e ff ff ff       	call   c0009642 <VAS::getPageTableEntry(unsigned long)>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00096ed:	f6 c4 04             	test   ah,0x4
c00096f0:	74 bf                	je     c00096b1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096f2:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00096f6:	83 ec 0c             	sub    esp,0xc
c00096f9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096fe:	50                   	push   eax
c00096ff:	e8 ee e3 ff ff       	call   c0007af2 <Phys::freePage(unsigned long)>
c0009704:	83 c4 10             	add    esp,0x10
c0009707:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000970b:	80 fa 04             	cmp    dl,0x4
c000970e:	75 87                	jne    c0009697 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009710:	89 f0                	mov    eax,esi
c0009712:	84 c0                	test   al,al
c0009714:	75 46                	jne    c000975c <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0009716:	c7 44 24 20 2c f7 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f72c
c000971e:	83 c4 10             	add    esp,0x10
c0009721:	5b                   	pop    ebx
c0009722:	5e                   	pop    esi
c0009723:	5f                   	pop    edi
c0009724:	e9 de 6c 00 00       	jmp    c0010407 <KePanic(char const*)>
c0009729:	89 f0                	mov    eax,esi
c000972b:	84 c0                	test   al,al
c000972d:	75 15                	jne    c0009744 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c000972f:	83 ec 0c             	sub    esp,0xc
c0009732:	68 99 f8 01 c0       	push   0xc001f899
c0009737:	e8 cb 6c 00 00       	call   c0010407 <KePanic(char const*)>
c000973c:	83 c4 10             	add    esp,0x10
c000973f:	e9 6d ff ff ff       	jmp    c00096b1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009744:	50                   	push   eax
c0009745:	50                   	push   eax
c0009746:	6a 00                	push   0x0
c0009748:	53                   	push   ebx
c0009749:	e8 b6 fb ff ff       	call   c0009304 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000974e:	83 c4 10             	add    esp,0x10
c0009751:	e9 5b ff ff ff       	jmp    c00096b1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009756:	89 f0                	mov    eax,esi
c0009758:	84 c0                	test   al,al
c000975a:	75 14                	jne    c0009770 <Virt::freeKernelVirtualPages(unsigned long)+0x10f>
c000975c:	52                   	push   edx
c000975d:	52                   	push   edx
c000975e:	6a 00                	push   0x0
c0009760:	53                   	push   ebx
c0009761:	e8 9e fb ff ff       	call   c0009304 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009766:	83 c4 10             	add    esp,0x10
c0009769:	83 c4 10             	add    esp,0x10
c000976c:	5b                   	pop    ebx
c000976d:	5e                   	pop    esi
c000976e:	5f                   	pop    edi
c000976f:	c3                   	ret    
c0009770:	c7 44 24 20 b5 f8 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f8b5
c0009778:	83 c4 10             	add    esp,0x10
c000977b:	5b                   	pop    ebx
c000977c:	5e                   	pop    esi
c000977d:	5f                   	pop    edi
c000977e:	e9 84 6c 00 00       	jmp    c0010407 <KePanic(char const*)>
c0009783:	90                   	nop

c0009784 <VAS::freeAllocatedPages(unsigned long)>:
c0009784:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009788:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000978c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009790:	74 09                	je     c000979b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009792:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009796:	e9 c6 fe ff ff       	jmp    c0009661 <Virt::freeKernelVirtualPages(unsigned long)>
c000979b:	c7 44 24 04 50 f7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f750
c00097a3:	e9 ab 0e 00 00       	jmp    c000a653 <Dbg::kprintf(char const*, ...)>

c00097a8 <VAS::virtualToPhysical(unsigned long)>:
c00097a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097ac:	50                   	push   eax
c00097ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00097b1:	52                   	push   edx
c00097b2:	e8 8b fe ff ff       	call   c0009642 <VAS::getPageTableEntry(unsigned long)>
c00097b7:	59                   	pop    ecx
c00097b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00097ba:	5a                   	pop    edx
c00097bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00097c0:	c3                   	ret    
c00097c1:	90                   	nop

c00097c2 <VAS::reflagRange(unsigned long, int, int, int)>:
c00097c2:	55                   	push   ebp
c00097c3:	57                   	push   edi
c00097c4:	56                   	push   esi
c00097c5:	53                   	push   ebx
c00097c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00097ca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00097ce:	89 c3                	mov    ebx,eax
c00097d0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00097d4:	c1 e3 0c             	shl    ebx,0xc
c00097d7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00097db:	01 f3                	add    ebx,esi
c00097dd:	85 c0                	test   eax,eax
c00097df:	7e 1f                	jle    c0009800 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c00097e1:	56                   	push   esi
c00097e2:	81 c6 00 10 00 00    	add    esi,0x1000
c00097e8:	55                   	push   ebp
c00097e9:	e8 54 fe ff ff       	call   c0009642 <VAS::getPageTableEntry(unsigned long)>
c00097ee:	5a                   	pop    edx
c00097ef:	59                   	pop    ecx
c00097f0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00097f2:	21 f9                	and    ecx,edi
c00097f4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00097f8:	09 d1                	or     ecx,edx
c00097fa:	39 f3                	cmp    ebx,esi
c00097fc:	89 08                	mov    DWORD PTR [eax],ecx
c00097fe:	75 e1                	jne    c00097e1 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c0009800:	5b                   	pop    ebx
c0009801:	5e                   	pop    esi
c0009802:	5f                   	pop    edi
c0009803:	5d                   	pop    ebp
c0009804:	c3                   	ret    
c0009805:	90                   	nop

c0009806 <VAS::VAS()>:
c0009806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000980a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009811:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009815:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000981c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009820:	a3 b0 3f 02 c0       	mov    ds:0xc0023fb0,eax
c0009825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009829:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000982d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009831:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009834:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009838:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000983f:	ba 7d 20 02 c0       	mov    edx,0xc002207d
c0009844:	b8 00 20 02 c0       	mov    eax,0xc0022000
c0009849:	29 c2                	sub    edx,eax
c000984b:	89 d0                	mov    eax,edx
c000984d:	05 ff 0f 00 00       	add    eax,0xfff
c0009852:	c1 e8 0c             	shr    eax,0xc
c0009855:	89 c2                	mov    edx,eax
c0009857:	b8 00 20 02 c0       	mov    eax,0xc0022000
c000985c:	6a 04                	push   0x4
c000985e:	6a ff                	push   0xffffffff
c0009860:	52                   	push   edx
c0009861:	50                   	push   eax
c0009862:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009866:	e8 57 ff ff ff       	call   c00097c2 <VAS::reflagRange(unsigned long, int, int, int)>
c000986b:	83 c4 14             	add    esp,0x14
c000986e:	90                   	nop
c000986f:	c3                   	ret    

c0009870 <VAS::setToWriteCombining(unsigned long, int)>:
c0009870:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009875:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000987b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009882:	75 01                	jne    c0009885 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009884:	c3                   	ret    
c0009885:	68 80 00 00 00       	push   0x80
c000988a:	6a ff                	push   0xffffffff
c000988c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009890:	50                   	push   eax
c0009891:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009895:	52                   	push   edx
c0009896:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000989a:	51                   	push   ecx
c000989b:	e8 22 ff ff ff       	call   c00097c2 <VAS::reflagRange(unsigned long, int, int, int)>
c00098a0:	83 c4 14             	add    esp,0x14
c00098a3:	c3                   	ret    

c00098a4 <VAS::mapOtherVASIn(bool, VAS*)>:
c00098a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098a8:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00098ad:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00098b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098b4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00098b7:	19 c0                	sbb    eax,eax
c00098b9:	83 ca 03             	or     edx,0x3
c00098bc:	83 e0 fc             	and    eax,0xfffffffc
c00098bf:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00098c6:	0f 20 d8             	mov    eax,cr3
c00098c9:	0f 22 d8             	mov    cr3,eax
c00098cc:	c3                   	ret    
c00098cd:	90                   	nop

c00098ce <VAS::~VAS()>:
c00098ce:	83 ec 2c             	sub    esp,0x2c
c00098d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00098d9:	fa                   	cli    
c00098da:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00098df:	40                   	inc    eax
c00098e0:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00098e5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00098ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00098ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00098ef:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00098f5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00098f9:	6a 01                	push   0x1
c00098fb:	50                   	push   eax
c00098fc:	e8 a3 ff ff ff       	call   c00098a4 <VAS::mapOtherVASIn(bool, VAS*)>
c0009901:	83 c4 0c             	add    esp,0xc
c0009904:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000990c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009914:	0f 8f d4 00 00 00    	jg     c00099ee <VAS::~VAS()+0x120>
c000991a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000991e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009921:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009925:	c1 e2 02             	shl    edx,0x2
c0009928:	01 d0                	add    eax,edx
c000992a:	8b 00                	mov    eax,DWORD PTR [eax]
c000992c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009934:	83 e0 01             	and    eax,0x1
c0009937:	0f 84 a8 00 00 00    	je     c00099e5 <VAS::~VAS()+0x117>
c000993d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009945:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000994d:	7f 72                	jg     c00099c1 <VAS::~VAS()+0xf3>
c000994f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009953:	c1 e0 0a             	shl    eax,0xa
c0009956:	89 c2                	mov    edx,eax
c0009958:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000995c:	01 d0                	add    eax,edx
c000995e:	c1 e0 0c             	shl    eax,0xc
c0009961:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009965:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000996a:	8b 00                	mov    eax,DWORD PTR [eax]
c000996c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000996f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009975:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009979:	6a 01                	push   0x1
c000997b:	50                   	push   eax
c000997c:	e8 95 fc ff ff       	call   c0009616 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009981:	83 c4 0c             	add    esp,0xc
c0009984:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009988:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000998c:	8b 00                	mov    eax,DWORD PTR [eax]
c000998e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009996:	25 01 04 00 00       	and    eax,0x401
c000999b:	3d 01 04 00 00       	cmp    eax,0x401
c00099a0:	75 19                	jne    c00099bb <VAS::~VAS()+0xed>
c00099a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099a6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099ab:	83 ec 0c             	sub    esp,0xc
c00099ae:	50                   	push   eax
c00099af:	e8 3e e1 ff ff       	call   c0007af2 <Phys::freePage(unsigned long)>
c00099b4:	83 c4 10             	add    esp,0x10
c00099b7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099bb:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00099bf:	eb 84                	jmp    c0009945 <VAS::~VAS()+0x77>
c00099c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099c5:	25 00 04 00 00       	and    eax,0x400
c00099ca:	74 19                	je     c00099e5 <VAS::~VAS()+0x117>
c00099cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099d0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099d5:	83 ec 0c             	sub    esp,0xc
c00099d8:	50                   	push   eax
c00099d9:	e8 14 e1 ff ff       	call   c0007af2 <Phys::freePage(unsigned long)>
c00099de:	83 c4 10             	add    esp,0x10
c00099e1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099e5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00099e9:	e9 1e ff ff ff       	jmp    c000990c <VAS::~VAS()+0x3e>
c00099ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099f2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099f5:	83 ec 0c             	sub    esp,0xc
c00099f8:	50                   	push   eax
c00099f9:	e8 63 fc ff ff       	call   c0009661 <Virt::freeKernelVirtualPages(unsigned long)>
c00099fe:	83 c4 10             	add    esp,0x10
c0009a01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009a08:	83 ec 0c             	sub    esp,0xc
c0009a0b:	50                   	push   eax
c0009a0c:	e8 e1 e0 ff ff       	call   c0007af2 <Phys::freePage(unsigned long)>
c0009a11:	83 c4 10             	add    esp,0x10
c0009a14:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009a18:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0009a1d:	48                   	dec    eax
c0009a1e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0009a23:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0009a28:	85 c0                	test   eax,eax
c0009a2a:	75 01                	jne    c0009a2d <VAS::~VAS()+0x15f>
c0009a2c:	fb                   	sti    
c0009a2d:	90                   	nop
c0009a2e:	83 c4 2c             	add    esp,0x2c
c0009a31:	c3                   	ret    

c0009a32 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009a32:	55                   	push   ebp
c0009a33:	57                   	push   edi
c0009a34:	56                   	push   esi
c0009a35:	53                   	push   ebx
c0009a36:	83 ec 1c             	sub    esp,0x1c
c0009a39:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009a3d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a41:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009a47:	77 0b                	ja     c0009a54 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009a49:	0f 20 d8             	mov    eax,cr3
c0009a4c:	0f 20 d8             	mov    eax,cr3
c0009a4f:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009a52:	75 49                	jne    c0009a9d <VAS::mapPage(unsigned long, unsigned long, int)+0x6b>
c0009a54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a58:	09 d8                	or     eax,ebx
c0009a5a:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a5f:	75 59                	jne    c0009aba <VAS::mapPage(unsigned long, unsigned long, int)+0x88>
c0009a61:	89 de                	mov    esi,ebx
c0009a63:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a66:	c1 ee 16             	shr    esi,0x16
c0009a69:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009a70:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009a74:	74 56                	je     c0009acc <VAS::mapPage(unsigned long, unsigned long, int)+0x9a>
c0009a76:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009a7c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009a80:	c1 eb 0a             	shr    ebx,0xa
c0009a83:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009a87:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009a8d:	09 d0                	or     eax,edx
c0009a8f:	c1 e6 0c             	shl    esi,0xc
c0009a92:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009a95:	83 c4 1c             	add    esp,0x1c
c0009a98:	5b                   	pop    ebx
c0009a99:	5e                   	pop    esi
c0009a9a:	5f                   	pop    edi
c0009a9b:	5d                   	pop    ebp
c0009a9c:	c3                   	ret    
c0009a9d:	83 ec 0c             	sub    esp,0xc
c0009aa0:	68 74 f7 01 c0       	push   0xc001f774
c0009aa5:	e8 a9 0b 00 00       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0009aaa:	83 c4 10             	add    esp,0x10
c0009aad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ab1:	09 d8                	or     eax,ebx
c0009ab3:	a9 ff 0f 00 00       	test   eax,0xfff
c0009ab8:	74 a7                	je     c0009a61 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009aba:	83 ec 0c             	sub    esp,0xc
c0009abd:	68 dc f7 01 c0       	push   0xc001f7dc
c0009ac2:	e8 40 69 00 00       	call   c0010407 <KePanic(char const*)>
c0009ac7:	83 c4 10             	add    esp,0x10
c0009aca:	eb 95                	jmp    c0009a61 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009acc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ad0:	e8 85 e0 ff ff       	call   c0007b5a <Phys::allocatePage()>
c0009ad5:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009adb:	83 ec 0c             	sub    esp,0xc
c0009ade:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009ae2:	89 c5                	mov    ebp,eax
c0009ae4:	6a 01                	push   0x1
c0009ae6:	e8 77 f8 ff ff       	call   c0009362 <Virt::allocateKernelVirtualPages(int)>
c0009aeb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009af2:	6a 01                	push   0x1
c0009af4:	50                   	push   eax
c0009af5:	55                   	push   ebp
c0009af6:	81 cd 07 04 00 00    	or     ebp,0x407
c0009afc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009b00:	51                   	push   ecx
c0009b01:	e8 2a 02 00 00       	call   c0009d30 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009b06:	83 c4 1c             	add    esp,0x1c
c0009b09:	68 00 10 00 00       	push   0x1000
c0009b0e:	6a 00                	push   0x0
c0009b10:	50                   	push   eax
c0009b11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b15:	e8 a6 69 ff ff       	call   c00004c0 <memset>
c0009b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009b1e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009b21:	e8 3b fb ff ff       	call   c0009661 <Virt::freeKernelVirtualPages(unsigned long)>
c0009b26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b2a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009b2d:	83 c4 10             	add    esp,0x10
c0009b30:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009b33:	e9 3e ff ff ff       	jmp    c0009a76 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009b38 <VAS::allocatePages(int, int)>:
c0009b38:	55                   	push   ebp
c0009b39:	57                   	push   edi
c0009b3a:	56                   	push   esi
c0009b3b:	53                   	push   ebx
c0009b3c:	83 ec 1c             	sub    esp,0x1c
c0009b3f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009b44:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009b48:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b4e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009b54:	83 e0 01             	and    eax,0x1
c0009b57:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009b5b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009b5f:	0f 85 ca 00 00 00    	jne    c0009c2f <VAS::allocatePages(int, int)+0xf7>
c0009b65:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b6c:	85 c0                	test   eax,eax
c0009b6e:	0f 84 9f 00 00 00    	je     c0009c13 <VAS::allocatePages(int, int)+0xdb>
c0009b74:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009b78:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b7c:	c1 e6 0c             	shl    esi,0xc
c0009b7f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009b83:	01 de                	add    esi,ebx
c0009b85:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b89:	81 cd 00 04 00 00    	or     ebp,0x400
c0009b8f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009b92:	85 c0                	test   eax,eax
c0009b94:	7e 25                	jle    c0009bbb <VAS::allocatePages(int, int)+0x83>
c0009b96:	e8 bf df ff ff       	call   c0007b5a <Phys::allocatePage()>
c0009b9b:	55                   	push   ebp
c0009b9c:	53                   	push   ebx
c0009b9d:	50                   	push   eax
c0009b9e:	57                   	push   edi
c0009b9f:	e8 8e fe ff ff       	call   c0009a32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ba4:	83 c4 10             	add    esp,0x10
c0009ba7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009bac:	74 03                	je     c0009bb1 <VAS::allocatePages(int, int)+0x79>
c0009bae:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bb1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bb7:	39 de                	cmp    esi,ebx
c0009bb9:	75 db                	jne    c0009b96 <VAS::allocatePages(int, int)+0x5e>
c0009bbb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009bc0:	75 12                	jne    c0009bd4 <VAS::allocatePages(int, int)+0x9c>
c0009bc2:	0f 20 d8             	mov    eax,cr3
c0009bc5:	0f 22 d8             	mov    cr3,eax
c0009bc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bcc:	83 c4 1c             	add    esp,0x1c
c0009bcf:	5b                   	pop    ebx
c0009bd0:	5e                   	pop    esi
c0009bd1:	5f                   	pop    edi
c0009bd2:	5d                   	pop    ebp
c0009bd3:	c3                   	ret    
c0009bd4:	c1 ee 0a             	shr    esi,0xa
c0009bd7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009bdb:	c1 eb 0a             	shr    ebx,0xa
c0009bde:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009be4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bea:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bf0:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009bf6:	39 c3                	cmp    ebx,eax
c0009bf8:	77 ce                	ja     c0009bc8 <VAS::allocatePages(int, int)+0x90>
c0009bfa:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bfd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c03:	39 d8                	cmp    eax,ebx
c0009c05:	73 f3                	jae    c0009bfa <VAS::allocatePages(int, int)+0xc2>
c0009c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c0b:	83 c4 1c             	add    esp,0x1c
c0009c0e:	5b                   	pop    ebx
c0009c0f:	5e                   	pop    esi
c0009c10:	5f                   	pop    edi
c0009c11:	5d                   	pop    ebp
c0009c12:	c3                   	ret    
c0009c13:	83 ec 0c             	sub    esp,0xc
c0009c16:	68 00 f8 01 c0       	push   0xc001f800
c0009c1b:	e8 e7 67 00 00       	call   c0010407 <KePanic(char const*)>
c0009c20:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009c23:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c27:	83 c4 10             	add    esp,0x10
c0009c2a:	e9 45 ff ff ff       	jmp    c0009b74 <VAS::allocatePages(int, int)+0x3c>
c0009c2f:	83 ec 0c             	sub    esp,0xc
c0009c32:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009c36:	53                   	push   ebx
c0009c37:	e8 26 f7 ff ff       	call   c0009362 <Virt::allocateKernelVirtualPages(int)>
c0009c3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c40:	83 c4 10             	add    esp,0x10
c0009c43:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009c48:	0f 87 9b 00 00 00    	ja     c0009ce9 <VAS::allocatePages(int, int)+0x1b1>
c0009c4e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009c52:	85 d2                	test   edx,edx
c0009c54:	7e 3c                	jle    c0009c92 <VAS::allocatePages(int, int)+0x15a>
c0009c56:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009c5a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c5e:	c1 e5 0c             	shl    ebp,0xc
c0009c61:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009c65:	81 ce 00 04 00 00    	or     esi,0x400
c0009c6b:	01 dd                	add    ebp,ebx
c0009c6d:	e8 e8 de ff ff       	call   c0007b5a <Phys::allocatePage()>
c0009c72:	56                   	push   esi
c0009c73:	53                   	push   ebx
c0009c74:	50                   	push   eax
c0009c75:	57                   	push   edi
c0009c76:	e8 b7 fd ff ff       	call   c0009a32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c7b:	83 c4 10             	add    esp,0x10
c0009c7e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c83:	74 03                	je     c0009c88 <VAS::allocatePages(int, int)+0x150>
c0009c85:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c88:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c8e:	39 dd                	cmp    ebp,ebx
c0009c90:	75 db                	jne    c0009c6d <VAS::allocatePages(int, int)+0x135>
c0009c92:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c97:	0f 84 25 ff ff ff    	je     c0009bc2 <VAS::allocatePages(int, int)+0x8a>
c0009c9d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ca1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ca5:	c1 e0 0c             	shl    eax,0xc
c0009ca8:	89 d3                	mov    ebx,edx
c0009caa:	c1 eb 0a             	shr    ebx,0xa
c0009cad:	01 d0                	add    eax,edx
c0009caf:	c1 e8 0a             	shr    eax,0xa
c0009cb2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009cc3:	2d 00 00 40 00       	sub    eax,0x400000
c0009cc8:	39 c3                	cmp    ebx,eax
c0009cca:	0f 87 f8 fe ff ff    	ja     c0009bc8 <VAS::allocatePages(int, int)+0x90>
c0009cd0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cd3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cd9:	39 d8                	cmp    eax,ebx
c0009cdb:	73 f3                	jae    c0009cd0 <VAS::allocatePages(int, int)+0x198>
c0009cdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ce1:	83 c4 1c             	add    esp,0x1c
c0009ce4:	5b                   	pop    ebx
c0009ce5:	5e                   	pop    esi
c0009ce6:	5f                   	pop    edi
c0009ce7:	5d                   	pop    ebp
c0009ce8:	c3                   	ret    
c0009ce9:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009cee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009cf4:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009cfb:	0f 84 4d ff ff ff    	je     c0009c4e <VAS::allocatePages(int, int)+0x116>
c0009d01:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0009d05:	80 cd 01             	or     ch,0x1
c0009d08:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0009d0c:	e9 3d ff ff ff       	jmp    c0009c4e <VAS::allocatePages(int, int)+0x116>
c0009d11:	90                   	nop

c0009d12 <VAS::setCPUSpecific(unsigned long)>:
c0009d12:	83 ec 0c             	sub    esp,0xc
c0009d15:	6a 05                	push   0x5
c0009d17:	68 00 00 40 c2       	push   0xc2400000
c0009d1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009d20:	50                   	push   eax
c0009d21:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009d25:	52                   	push   edx
c0009d26:	e8 07 fd ff ff       	call   c0009a32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d2b:	83 c4 1c             	add    esp,0x1c
c0009d2e:	c3                   	ret    
c0009d2f:	90                   	nop

c0009d30 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009d30:	55                   	push   ebp
c0009d31:	57                   	push   edi
c0009d32:	56                   	push   esi
c0009d33:	53                   	push   ebx
c0009d34:	83 ec 1c             	sub    esp,0x1c
c0009d37:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009d3c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d40:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009d44:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009d4a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009d4e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009d54:	83 e0 01             	and    eax,0x1
c0009d57:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009d5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d5f:	85 c0                	test   eax,eax
c0009d61:	7e 39                	jle    c0009d9c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009d63:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d67:	89 f3                	mov    ebx,esi
c0009d69:	c1 e0 0c             	shl    eax,0xc
c0009d6c:	01 f0                	add    eax,esi
c0009d6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d72:	55                   	push   ebp
c0009d73:	53                   	push   ebx
c0009d74:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d78:	29 f0                	sub    eax,esi
c0009d7a:	01 d8                	add    eax,ebx
c0009d7c:	50                   	push   eax
c0009d7d:	57                   	push   edi
c0009d7e:	e8 af fc ff ff       	call   c0009a32 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d83:	83 c4 10             	add    esp,0x10
c0009d86:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d8b:	74 03                	je     c0009d90 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009d8d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d90:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d96:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009d9a:	75 d6                	jne    c0009d72 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009d9c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009da1:	75 10                	jne    c0009db3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009da3:	0f 20 d8             	mov    eax,cr3
c0009da6:	0f 22 d8             	mov    cr3,eax
c0009da9:	83 c4 1c             	add    esp,0x1c
c0009dac:	89 f0                	mov    eax,esi
c0009dae:	5b                   	pop    ebx
c0009daf:	5e                   	pop    esi
c0009db0:	5f                   	pop    edi
c0009db1:	5d                   	pop    ebp
c0009db2:	c3                   	ret    
c0009db3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009db7:	89 f3                	mov    ebx,esi
c0009db9:	c1 e0 0c             	shl    eax,0xc
c0009dbc:	c1 eb 0a             	shr    ebx,0xa
c0009dbf:	01 f0                	add    eax,esi
c0009dc1:	c1 e8 0a             	shr    eax,0xa
c0009dc4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009dca:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009dcf:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009dd5:	2d 00 00 40 00       	sub    eax,0x400000
c0009dda:	39 c3                	cmp    ebx,eax
c0009ddc:	77 cb                	ja     c0009da9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009dde:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009de1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009de7:	39 d8                	cmp    eax,ebx
c0009de9:	73 f3                	jae    c0009dde <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009deb:	83 c4 1c             	add    esp,0x1c
c0009dee:	89 f0                	mov    eax,esi
c0009df0:	5b                   	pop    ebx
c0009df1:	5e                   	pop    esi
c0009df2:	5f                   	pop    edi
c0009df3:	5d                   	pop    ebp
c0009df4:	c3                   	ret    
c0009df5:	90                   	nop

c0009df6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009df6:	55                   	push   ebp
c0009df7:	57                   	push   edi
c0009df8:	56                   	push   esi
c0009df9:	53                   	push   ebx
c0009dfa:	83 ec 1c             	sub    esp,0x1c
c0009dfd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e01:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0009e05:	09 f0                	or     eax,esi
c0009e07:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009e0b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e0f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009e14:	75 4c                	jne    c0009e62 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c0009e16:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009e1a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e1d:	c1 eb 16             	shr    ebx,0x16
c0009e20:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009e27:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009e2b:	74 4f                	je     c0009e7c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c0009e2d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e31:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009e35:	c1 e8 0a             	shr    eax,0xa
c0009e38:	80 fa 01             	cmp    dl,0x1
c0009e3b:	19 d2                	sbb    edx,edx
c0009e3d:	25 fc 0f 00 00       	and    eax,0xffc
c0009e42:	c1 e3 0c             	shl    ebx,0xc
c0009e45:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009e4b:	01 d8                	add    eax,ebx
c0009e4d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009e51:	09 d9                	or     ecx,ebx
c0009e53:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009e5a:	83 c4 1c             	add    esp,0x1c
c0009e5d:	5b                   	pop    ebx
c0009e5e:	5e                   	pop    esi
c0009e5f:	5f                   	pop    edi
c0009e60:	5d                   	pop    ebp
c0009e61:	c3                   	ret    
c0009e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009e66:	83 ec 0c             	sub    esp,0xc
c0009e69:	68 2c f8 01 c0       	push   0xc001f82c
c0009e6e:	e8 94 65 00 00       	call   c0010407 <KePanic(char const*)>
c0009e73:	83 c4 10             	add    esp,0x10
c0009e76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e7a:	eb 9a                	jmp    c0009e16 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009e7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e80:	e8 d5 dc ff ff       	call   c0007b5a <Phys::allocatePage()>
c0009e85:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009e8b:	83 ec 0c             	sub    esp,0xc
c0009e8e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009e92:	89 c5                	mov    ebp,eax
c0009e94:	6a 01                	push   0x1
c0009e96:	e8 c7 f4 ff ff       	call   c0009362 <Virt::allocateKernelVirtualPages(int)>
c0009e9b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ea2:	6a 01                	push   0x1
c0009ea4:	50                   	push   eax
c0009ea5:	55                   	push   ebp
c0009ea6:	81 cd 07 04 00 00    	or     ebp,0x407
c0009eac:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009eb0:	51                   	push   ecx
c0009eb1:	e8 7a fe ff ff       	call   c0009d30 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009eb6:	83 c4 1c             	add    esp,0x1c
c0009eb9:	68 00 10 00 00       	push   0x1000
c0009ebe:	6a 00                	push   0x0
c0009ec0:	50                   	push   eax
c0009ec1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ec5:	e8 f6 65 ff ff       	call   c00004c0 <memset>
c0009eca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009ece:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ed1:	e8 8b f7 ff ff       	call   c0009661 <Virt::freeKernelVirtualPages(unsigned long)>
c0009ed6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009ed9:	83 c4 10             	add    esp,0x10
c0009edc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ee0:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009ee3:	e9 45 ff ff ff       	jmp    c0009e2d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>

c0009ee8 <VAS::VAS(bool)>:
c0009ee8:	53                   	push   ebx
c0009ee9:	83 ec 28             	sub    esp,0x28
c0009eec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ef0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009ef4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ef8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009eff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f03:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009f0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f0e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009f12:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009f15:	e8 40 dc ff ff       	call   c0007b5a <Phys::allocatePage()>
c0009f1a:	89 c2                	mov    edx,eax
c0009f1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f20:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009f23:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0009f29:	83 ec 0c             	sub    esp,0xc
c0009f2c:	6a 01                	push   0x1
c0009f2e:	e8 2f f4 ff ff       	call   c0009362 <Virt::allocateKernelVirtualPages(int)>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 c2                	mov    edx,eax
c0009f38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f3c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009f3f:	83 ec 0c             	sub    esp,0xc
c0009f42:	6a 03                	push   0x3
c0009f44:	6a 01                	push   0x1
c0009f46:	52                   	push   edx
c0009f47:	50                   	push   eax
c0009f48:	53                   	push   ebx
c0009f49:	e8 e2 fd ff ff       	call   c0009d30 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009f4e:	83 c4 20             	add    esp,0x20
c0009f51:	89 c2                	mov    edx,eax
c0009f53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f57:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009f5a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009f62:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009f6a:	7f 1c                	jg     c0009f88 <VAS::VAS(bool)+0xa0>
c0009f6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f73:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009f77:	c1 e2 02             	shl    edx,0x2
c0009f7a:	01 d0                	add    eax,edx
c0009f7c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f82:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009f86:	eb da                	jmp    c0009f62 <VAS::VAS(bool)+0x7a>
c0009f88:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009f90:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009f98:	7f 7a                	jg     c000a014 <VAS::VAS(bool)+0x12c>
c0009f9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f9e:	2d 00 02 00 00       	sub    eax,0x200
c0009fa3:	c1 e0 0c             	shl    eax,0xc
c0009fa6:	83 c8 05             	or     eax,0x5
c0009fa9:	89 c2                	mov    edx,eax
c0009fab:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009fb0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fb6:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009fbc:	83 e0 10             	and    eax,0x10
c0009fbf:	84 c0                	test   al,al
c0009fc1:	74 07                	je     c0009fca <VAS::VAS(bool)+0xe2>
c0009fc3:	b8 00 01 00 00       	mov    eax,0x100
c0009fc8:	eb 05                	jmp    c0009fcf <VAS::VAS(bool)+0xe7>
c0009fca:	b8 00 00 00 00       	mov    eax,0x0
c0009fcf:	09 d0                	or     eax,edx
c0009fd1:	89 c1                	mov    ecx,eax
c0009fd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fd7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fda:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fde:	c1 e2 02             	shl    edx,0x2
c0009fe1:	01 d0                	add    eax,edx
c0009fe3:	89 ca                	mov    edx,ecx
c0009fe5:	89 10                	mov    DWORD PTR [eax],edx
c0009fe7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009feb:	2d 40 03 00 00       	sub    eax,0x340
c0009ff0:	83 f8 7f             	cmp    eax,0x7f
c0009ff3:	77 16                	ja     c000a00b <VAS::VAS(bool)+0x123>
c0009ff5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ff9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ffc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a000:	c1 e2 02             	shl    edx,0x2
c000a003:	01 d0                	add    eax,edx
c000a005:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a00b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000a00f:	e9 7c ff ff ff       	jmp    c0009f90 <VAS::VAS(bool)+0xa8>
c000a014:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a019:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a01f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a025:	83 e0 10             	and    eax,0x10
c000a028:	84 c0                	test   al,al
c000a02a:	74 07                	je     c000a033 <VAS::VAS(bool)+0x14b>
c000a02c:	b8 03 41 00 00       	mov    eax,0x4103
c000a031:	eb 05                	jmp    c000a038 <VAS::VAS(bool)+0x150>
c000a033:	b8 03 40 00 00       	mov    eax,0x4003
c000a038:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a03c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a03f:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a045:	89 02                	mov    DWORD PTR [edx],eax
c000a047:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a04c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a052:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a058:	83 ec 08             	sub    esp,0x8
c000a05b:	50                   	push   eax
c000a05c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a060:	e8 ad fc ff ff       	call   c0009d12 <VAS::setCPUSpecific(unsigned long)>
c000a065:	83 c4 10             	add    esp,0x10
c000a068:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a06f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a074:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a07a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a080:	83 e0 10             	and    eax,0x10
c000a083:	84 c0                	test   al,al
c000a085:	74 07                	je     c000a08e <VAS::VAS(bool)+0x1a6>
c000a087:	b8 00 01 00 00       	mov    eax,0x100
c000a08c:	eb 05                	jmp    c000a093 <VAS::VAS(bool)+0x1ab>
c000a08e:	b8 00 00 00 00       	mov    eax,0x0
c000a093:	09 c2                	or     edx,eax
c000a095:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a099:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a09c:	05 fc 0f 00 00       	add    eax,0xffc
c000a0a1:	83 ca 03             	or     edx,0x3
c000a0a4:	89 10                	mov    DWORD PTR [eax],edx
c000a0a6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0ab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0b1:	83 ec 0c             	sub    esp,0xc
c000a0b4:	50                   	push   eax
c000a0b5:	e8 66 1c 00 00       	call   c000bd20 <Device::getName()>
c000a0ba:	83 c4 10             	add    esp,0x10
c000a0bd:	83 ec 08             	sub    esp,0x8
c000a0c0:	68 cf f8 01 c0       	push   0xc001f8cf
c000a0c5:	50                   	push   eax
c000a0c6:	e8 15 66 ff ff       	call   c00006e0 <strcmp>
c000a0cb:	83 c4 10             	add    esp,0x10
c000a0ce:	85 c0                	test   eax,eax
c000a0d0:	0f 94 c0             	sete   al
c000a0d3:	84 c0                	test   al,al
c000a0d5:	0f 84 87 00 00 00    	je     c000a162 <VAS::VAS(bool)+0x27a>
c000a0db:	fa                   	cli    
c000a0dc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a0e1:	40                   	inc    eax
c000a0e2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a0e7:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0ec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0f2:	05 7c 09 00 00       	add    eax,0x97c
c000a0f7:	83 ec 0c             	sub    esp,0xc
c000a0fa:	50                   	push   eax
c000a0fb:	e8 62 d2 ff ff       	call   c0007362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a100:	83 c4 10             	add    esp,0x10
c000a103:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a108:	89 c3                	mov    ebx,eax
c000a10a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a10f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a115:	05 7c 09 00 00       	add    eax,0x97c
c000a11a:	83 ec 0c             	sub    esp,0xc
c000a11d:	50                   	push   eax
c000a11e:	e8 3f d2 ff ff       	call   c0007362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a123:	83 c4 10             	add    esp,0x10
c000a126:	83 ec 08             	sub    esp,0x8
c000a129:	50                   	push   eax
c000a12a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a12e:	e8 0f f5 ff ff       	call   c0009642 <VAS::getPageTableEntry(unsigned long)>
c000a133:	83 c4 10             	add    esp,0x10
c000a136:	8b 00                	mov    eax,DWORD PTR [eax]
c000a138:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a13d:	6a 11                	push   0x11
c000a13f:	53                   	push   ebx
c000a140:	50                   	push   eax
c000a141:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a145:	e8 e8 f8 ff ff       	call   c0009a32 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a14a:	83 c4 10             	add    esp,0x10
c000a14d:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a152:	48                   	dec    eax
c000a153:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a158:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a15d:	85 c0                	test   eax,eax
c000a15f:	75 01                	jne    c000a162 <VAS::VAS(bool)+0x27a>
c000a161:	fb                   	sti    
c000a162:	90                   	nop
c000a163:	83 c4 28             	add    esp,0x28
c000a166:	5b                   	pop    ebx
c000a167:	c3                   	ret    

c000a168 <VAS::evict(unsigned long)>:
c000a168:	55                   	push   ebp
c000a169:	57                   	push   edi
c000a16a:	56                   	push   esi
c000a16b:	53                   	push   ebx
c000a16c:	83 ec 1c             	sub    esp,0x1c
c000a16f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a173:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a177:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a17b:	e8 2d f3 ff ff       	call   c00094ad <Virt::allocateSwapfilePage()>
c000a180:	89 c7                	mov    edi,eax
c000a182:	a1 8c 17 02 c0       	mov    eax,ds:0xc002178c
c000a187:	85 c0                	test   eax,eax
c000a189:	7e 3e                	jle    c000a1c9 <VAS::evict(unsigned long)+0x61>
c000a18b:	89 ee                	mov    esi,ebp
c000a18d:	31 db                	xor    ebx,ebx
c000a18f:	83 ec 0c             	sub    esp,0xc
c000a192:	57                   	push   edi
c000a193:	e8 ff f2 ff ff       	call   c0009497 <Virt::swapIDToSector(unsigned long)>
c000a198:	89 34 24             	mov    DWORD PTR [esp],esi
c000a19b:	31 d2                	xor    edx,edx
c000a19d:	6a 01                	push   0x1
c000a19f:	01 d8                	add    eax,ebx
c000a1a1:	52                   	push   edx
c000a1a2:	43                   	inc    ebx
c000a1a3:	50                   	push   eax
c000a1a4:	81 c6 00 02 00 00    	add    esi,0x200
c000a1aa:	0f be 05 98 17 02 c0 	movsx  eax,BYTE PTR ds:0xc0021798
c000a1b1:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c000a1b8:	50                   	push   eax
c000a1b9:	e8 46 2c 00 00       	call   c000ce04 <LogicalDisk::write(unsigned long long, int, void*)>
c000a1be:	83 c4 20             	add    esp,0x20
c000a1c1:	39 1d 8c 17 02 c0    	cmp    DWORD PTR ds:0xc002178c,ebx
c000a1c7:	7f c6                	jg     c000a18f <VAS::evict(unsigned long)+0x27>
c000a1c9:	c1 e7 0b             	shl    edi,0xb
c000a1cc:	50                   	push   eax
c000a1cd:	50                   	push   eax
c000a1ce:	55                   	push   ebp
c000a1cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a1d3:	52                   	push   edx
c000a1d4:	e8 69 f4 ff ff       	call   c0009642 <VAS::getPageTableEntry(unsigned long)>
c000a1d9:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1db:	89 d1                	mov    ecx,edx
c000a1dd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a1e3:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a1e9:	09 cf                	or     edi,ecx
c000a1eb:	89 38                	mov    DWORD PTR [eax],edi
c000a1ed:	89 14 24             	mov    DWORD PTR [esp],edx
c000a1f0:	8b 0d a8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fa8
c000a1f6:	41                   	inc    ecx
c000a1f7:	89 0d a8 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa8,ecx
c000a1fd:	e8 f0 d8 ff ff       	call   c0007af2 <Phys::freePage(unsigned long)>
c000a202:	0f 20 d8             	mov    eax,cr3
c000a205:	0f 22 d8             	mov    cr3,eax
c000a208:	a1 a4 3f 02 c0       	mov    eax,ds:0xc0023fa4
c000a20d:	c7 44 24 40 dd f8 01 c0 	mov    DWORD PTR [esp+0x40],0xc001f8dd
c000a215:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a219:	8d 50 01             	lea    edx,[eax+0x1]
c000a21c:	89 15 a4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa4,edx
c000a222:	83 c4 2c             	add    esp,0x2c
c000a225:	5b                   	pop    ebx
c000a226:	5e                   	pop    esi
c000a227:	5f                   	pop    edi
c000a228:	5d                   	pop    ebp
c000a229:	e9 25 04 00 00       	jmp    c000a653 <Dbg::kprintf(char const*, ...)>

c000a22e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a22e:	55                   	push   ebp
c000a22f:	57                   	push   edi
c000a230:	56                   	push   esi
c000a231:	53                   	push   ebx
c000a232:	83 ec 24             	sub    esp,0x24
c000a235:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a239:	53                   	push   ebx
c000a23a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a240:	68 ee f8 01 c0       	push   0xc001f8ee
c000a245:	e8 09 04 00 00       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c000a24a:	5d                   	pop    ebp
c000a24b:	58                   	pop    eax
c000a24c:	53                   	push   ebx
c000a24d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a251:	50                   	push   eax
c000a252:	e8 eb f3 ff ff       	call   c0009642 <VAS::getPageTableEntry(unsigned long)>
c000a257:	83 c4 10             	add    esp,0x10
c000a25a:	89 c7                	mov    edi,eax
c000a25c:	85 c0                	test   eax,eax
c000a25e:	0f 95 c2             	setne  dl
c000a261:	85 db                	test   ebx,ebx
c000a263:	0f 95 c0             	setne  al
c000a266:	20 c2                	and    dl,al
c000a268:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000a26c:	75 0c                	jne    c000a27a <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a26e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000a272:	83 c4 1c             	add    esp,0x1c
c000a275:	5b                   	pop    ebx
c000a276:	5e                   	pop    esi
c000a277:	5f                   	pop    edi
c000a278:	5d                   	pop    ebp
c000a279:	c3                   	ret    
c000a27a:	8b 07                	mov    eax,DWORD PTR [edi]
c000a27c:	a8 01                	test   al,0x1
c000a27e:	74 11                	je     c000a291 <VAS::tryLoadBackOffDisk(unsigned long)+0x63>
c000a280:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000a285:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000a289:	83 c4 1c             	add    esp,0x1c
c000a28c:	5b                   	pop    ebx
c000a28d:	5e                   	pop    esi
c000a28e:	5f                   	pop    edi
c000a28f:	5d                   	pop    ebp
c000a290:	c3                   	ret    
c000a291:	c1 e8 0b             	shr    eax,0xb
c000a294:	89 c6                	mov    esi,eax
c000a296:	e8 bf d8 ff ff       	call   c0007b5a <Phys::allocatePage()>
c000a29b:	8b 17                	mov    edx,DWORD PTR [edi]
c000a29d:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a2a3:	09 c2                	or     edx,eax
c000a2a5:	81 ca 01 08 00 00    	or     edx,0x801
c000a2ab:	89 17                	mov    DWORD PTR [edi],edx
c000a2ad:	8b 3d 8c 17 02 c0    	mov    edi,DWORD PTR ds:0xc002178c
c000a2b3:	85 ff                	test   edi,edi
c000a2b5:	7e 3e                	jle    c000a2f5 <VAS::tryLoadBackOffDisk(unsigned long)+0xc7>
c000a2b7:	89 dd                	mov    ebp,ebx
c000a2b9:	31 ff                	xor    edi,edi
c000a2bb:	83 ec 0c             	sub    esp,0xc
c000a2be:	56                   	push   esi
c000a2bf:	e8 d3 f1 ff ff       	call   c0009497 <Virt::swapIDToSector(unsigned long)>
c000a2c4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a2c7:	31 d2                	xor    edx,edx
c000a2c9:	6a 01                	push   0x1
c000a2cb:	01 f8                	add    eax,edi
c000a2cd:	52                   	push   edx
c000a2ce:	47                   	inc    edi
c000a2cf:	50                   	push   eax
c000a2d0:	81 c5 00 02 00 00    	add    ebp,0x200
c000a2d6:	0f be 05 98 17 02 c0 	movsx  eax,BYTE PTR ds:0xc0021798
c000a2dd:	8b 0c 85 1c 63 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9ce4]
c000a2e4:	51                   	push   ecx
c000a2e5:	e8 ae 2a 00 00       	call   c000cd98 <LogicalDisk::read(unsigned long long, int, void*)>
c000a2ea:	83 c4 20             	add    esp,0x20
c000a2ed:	39 3d 8c 17 02 c0    	cmp    DWORD PTR ds:0xc002178c,edi
c000a2f3:	7f c6                	jg     c000a2bb <VAS::tryLoadBackOffDisk(unsigned long)+0x8d>
c000a2f5:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000a2fa:	52                   	push   edx
c000a2fb:	48                   	dec    eax
c000a2fc:	50                   	push   eax
c000a2fd:	a3 a8 3f 02 c0       	mov    ds:0xc0023fa8,eax
c000a302:	53                   	push   ebx
c000a303:	68 01 f9 01 c0       	push   0xc001f901
c000a308:	e8 46 03 00 00       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c000a30d:	89 34 24             	mov    DWORD PTR [esp],esi
c000a310:	e8 5e f1 ff ff       	call   c0009473 <Virt::freeSwapfilePage(unsigned long)>
c000a315:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a31a:	83 c4 10             	add    esp,0x10
c000a31d:	48                   	dec    eax
c000a31e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a323:	85 c0                	test   eax,eax
c000a325:	75 01                	jne    c000a328 <VAS::tryLoadBackOffDisk(unsigned long)+0xfa>
c000a327:	fb                   	sti    
c000a328:	0f 20 d8             	mov    eax,cr3
c000a32b:	0f 22 d8             	mov    cr3,eax
c000a32e:	e9 3b ff ff ff       	jmp    c000a26e <VAS::tryLoadBackOffDisk(unsigned long)+0x40>
c000a333:	90                   	nop

c000a334 <VAS::scanForEviction()>:
c000a334:	57                   	push   edi
c000a335:	31 ff                	xor    edi,edi
c000a337:	56                   	push   esi
c000a338:	53                   	push   ebx
c000a339:	83 ec 10             	sub    esp,0x10
c000a33c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a340:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a343:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a349:	75 0e                	jne    c000a359 <VAS::scanForEviction()+0x25>
c000a34b:	89 da                	mov    edx,ebx
c000a34d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a350:	c1 ea 16             	shr    edx,0x16
c000a353:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a357:	74 4e                	je     c000a3a7 <VAS::scanForEviction()+0x73>
c000a359:	53                   	push   ebx
c000a35a:	56                   	push   esi
c000a35b:	e8 e2 f2 ff ff       	call   c0009642 <VAS::getPageTableEntry(unsigned long)>
c000a360:	5a                   	pop    edx
c000a361:	8b 10                	mov    edx,DWORD PTR [eax]
c000a363:	59                   	pop    ecx
c000a364:	89 d1                	mov    ecx,edx
c000a366:	81 e1 01 08 00 00    	and    ecx,0x801
c000a36c:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a372:	74 3e                	je     c000a3b2 <VAS::scanForEviction()+0x7e>
c000a374:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a37a:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a380:	76 2b                	jbe    c000a3ad <VAS::scanForEviction()+0x79>
c000a382:	47                   	inc    edi
c000a383:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a38a:	83 ff 03             	cmp    edi,0x3
c000a38d:	74 32                	je     c000a3c1 <VAS::scanForEviction()+0x8d>
c000a38f:	31 db                	xor    ebx,ebx
c000a391:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a397:	75 c0                	jne    c000a359 <VAS::scanForEviction()+0x25>
c000a399:	89 da                	mov    edx,ebx
c000a39b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a39e:	c1 ea 16             	shr    edx,0x16
c000a3a1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a3a5:	75 b2                	jne    c000a359 <VAS::scanForEviction()+0x25>
c000a3a7:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a3ad:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a3b0:	eb 91                	jmp    c000a343 <VAS::scanForEviction()+0xf>
c000a3b2:	f6 c2 20             	test   dl,0x20
c000a3b5:	74 13                	je     c000a3ca <VAS::scanForEviction()+0x96>
c000a3b7:	83 e2 df             	and    edx,0xffffffdf
c000a3ba:	89 10                	mov    DWORD PTR [eax],edx
c000a3bc:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a3bf:	eb b3                	jmp    c000a374 <VAS::scanForEviction()+0x40>
c000a3c1:	83 c4 10             	add    esp,0x10
c000a3c4:	31 c0                	xor    eax,eax
c000a3c6:	5b                   	pop    ebx
c000a3c7:	5e                   	pop    esi
c000a3c8:	5f                   	pop    edi
c000a3c9:	c3                   	ret    
c000a3ca:	89 d0                	mov    eax,edx
c000a3cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a3d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a3d5:	50                   	push   eax
c000a3d6:	50                   	push   eax
c000a3d7:	53                   	push   ebx
c000a3d8:	68 16 f9 01 c0       	push   0xc001f916
c000a3dd:	e8 71 02 00 00       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c000a3e2:	5a                   	pop    edx
c000a3e3:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a3e6:	59                   	pop    ecx
c000a3e7:	53                   	push   ebx
c000a3e8:	56                   	push   esi
c000a3e9:	e8 7a fd ff ff       	call   c000a168 <VAS::evict(unsigned long)>
c000a3ee:	5f                   	pop    edi
c000a3ef:	58                   	pop    eax
c000a3f0:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a3f3:	50                   	push   eax
c000a3f4:	68 2a f9 01 c0       	push   0xc001f92a
c000a3f9:	e8 55 02 00 00       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c000a3fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	05 00 10 00 00       	add    eax,0x1000
c000a409:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a40c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a410:	83 c4 10             	add    esp,0x10
c000a413:	5b                   	pop    ebx
c000a414:	5e                   	pop    esi
c000a415:	5f                   	pop    edi
c000a416:	c3                   	ret    

c000a417 <mapVASFirstTime>:
c000a417:	55                   	push   ebp
c000a418:	57                   	push   edi
c000a419:	56                   	push   esi
c000a41a:	53                   	push   ebx
c000a41b:	83 ec 0c             	sub    esp,0xc
c000a41e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a423:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a426:	4a                   	dec    edx
c000a427:	0f 84 c8 00 00 00    	je     c000a4f5 <mapVASFirstTime+0xde>
c000a42d:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a430:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a433:	c1 e5 15             	shl    ebp,0x15
c000a436:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a43b:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a440:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a446:	29 eb                	sub    ebx,ebp
c000a448:	29 ef                	sub    edi,ebp
c000a44a:	e8 0b d7 ff ff       	call   c0007b5a <Phys::allocatePage()>
c000a44f:	83 ec 0c             	sub    esp,0xc
c000a452:	68 03 04 00 00       	push   0x403
c000a457:	6a 01                	push   0x1
c000a459:	53                   	push   ebx
c000a45a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a460:	50                   	push   eax
c000a461:	56                   	push   esi
c000a462:	e8 c9 f8 ff ff       	call   c0009d30 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a467:	83 c4 20             	add    esp,0x20
c000a46a:	39 fb                	cmp    ebx,edi
c000a46c:	75 dc                	jne    c000a44a <mapVASFirstTime+0x33>
c000a46e:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a473:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a478:	29 eb                	sub    ebx,ebp
c000a47a:	29 ef                	sub    edi,ebp
c000a47c:	e8 d9 d6 ff ff       	call   c0007b5a <Phys::allocatePage()>
c000a481:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a485:	19 d2                	sbb    edx,edx
c000a487:	83 ec 0c             	sub    esp,0xc
c000a48a:	83 e2 04             	and    edx,0x4
c000a48d:	81 c2 03 04 00 00    	add    edx,0x403
c000a493:	52                   	push   edx
c000a494:	6a 01                	push   0x1
c000a496:	53                   	push   ebx
c000a497:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a49d:	50                   	push   eax
c000a49e:	56                   	push   esi
c000a49f:	e8 8c f8 ff ff       	call   c0009d30 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a4a4:	83 c4 20             	add    esp,0x20
c000a4a7:	39 df                	cmp    edi,ebx
c000a4a9:	75 d1                	jne    c000a47c <mapVASFirstTime+0x65>
c000a4ab:	83 ec 0c             	sub    esp,0xc
c000a4ae:	bb 7c 30 02 c0       	mov    ebx,0xc002307c
c000a4b3:	81 eb 00 20 02 c0    	sub    ebx,0xc0022000
c000a4b9:	c1 eb 0c             	shr    ebx,0xc
c000a4bc:	6a 04                	push   0x4
c000a4be:	6a ff                	push   0xffffffff
c000a4c0:	53                   	push   ebx
c000a4c1:	68 00 20 02 c0       	push   0xc0022000
c000a4c6:	56                   	push   esi
c000a4c7:	e8 f6 f2 ff ff       	call   c00097c2 <VAS::reflagRange(unsigned long, int, int, int)>
c000a4cc:	83 c4 14             	add    esp,0x14
c000a4cf:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c000a4d4:	6a 04                	push   0x4
c000a4d6:	6a ff                	push   0xffffffff
c000a4d8:	53                   	push   ebx
c000a4d9:	68 00 20 02 c0       	push   0xc0022000
c000a4de:	50                   	push   eax
c000a4df:	e8 de f2 ff ff       	call   c00097c2 <VAS::reflagRange(unsigned long, int, int, int)>
c000a4e4:	0f 20 d8             	mov    eax,cr3
c000a4e7:	0f 22 d8             	mov    cr3,eax
c000a4ea:	83 c4 20             	add    esp,0x20
c000a4ed:	83 c4 0c             	add    esp,0xc
c000a4f0:	5b                   	pop    ebx
c000a4f1:	5e                   	pop    esi
c000a4f2:	5f                   	pop    edi
c000a4f3:	5d                   	pop    ebp
c000a4f4:	c3                   	ret    
c000a4f5:	83 ec 0c             	sub    esp,0xc
c000a4f8:	68 3d f9 01 c0       	push   0xc001f93d
c000a4fd:	e8 51 01 00 00       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c000a502:	83 c4 10             	add    esp,0x10
c000a505:	83 c4 0c             	add    esp,0xc
c000a508:	5b                   	pop    ebx
c000a509:	5e                   	pop    esi
c000a50a:	5f                   	pop    edi
c000a50b:	5d                   	pop    ebp
c000a50c:	c3                   	ret    

c000a50d <__cxa_atexit>:
c000a50d:	31 c0                	xor    eax,eax
c000a50f:	c3                   	ret    

c000a510 <__cxa_finalize>:
c000a510:	c3                   	ret    

c000a511 <__stack_chk_fail>:
c000a511:	55                   	push   ebp
c000a512:	89 e5                	mov    ebp,esp
c000a514:	83 ec 10             	sub    esp,0x10
c000a517:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a51a:	68 56 f9 01 c0       	push   0xc001f956
c000a51f:	e8 2f 01 00 00       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c000a524:	58                   	pop    eax
c000a525:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a528:	5a                   	pop    edx
c000a529:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a52c:	68 56 f9 01 c0       	push   0xc001f956
c000a531:	e8 1d 01 00 00       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c000a536:	c7 04 24 5e f9 01 c0 	mov    DWORD PTR [esp],0xc001f95e
c000a53d:	e8 c5 5e 00 00       	call   c0010407 <KePanic(char const*)>
c000a542:	83 c4 10             	add    esp,0x10
c000a545:	c9                   	leave  
c000a546:	c3                   	ret    

c000a547 <__cxa_pure_virtual>:
c000a547:	83 ec 18             	sub    esp,0x18
c000a54a:	68 76 f9 01 c0       	push   0xc001f976
c000a54f:	e8 b3 5e 00 00       	call   c0010407 <KePanic(char const*)>
c000a554:	83 c4 1c             	add    esp,0x1c
c000a557:	c3                   	ret    

c000a558 <operator new[](unsigned long)>:
c000a558:	e9 06 d3 ff ff       	jmp    c0007863 <malloc>

c000a55d <operator delete(void*, unsigned long)>:
c000a55d:	e9 21 d3 ff ff       	jmp    c0007883 <rfree>

c000a562 <operator delete[](void*)>:
c000a562:	e9 1c d3 ff ff       	jmp    c0007883 <rfree>

c000a567 <operator delete[](void*, unsigned long)>:
c000a567:	e9 17 d3 ff ff       	jmp    c0007883 <rfree>

c000a56c <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a56c:	57                   	push   edi
c000a56d:	56                   	push   esi
c000a56e:	53                   	push   ebx
c000a56f:	83 ec 20             	sub    esp,0x20
c000a572:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000a576:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a57a:	c7 44 24 0f 30 31 32 33 	mov    DWORD PTR [esp+0xf],0x33323130
c000a582:	c7 44 24 13 34 35 36 37 	mov    DWORD PTR [esp+0x13],0x37363534
c000a58a:	c7 44 24 17 38 39 41 42 	mov    DWORD PTR [esp+0x17],0x42413938
c000a592:	c7 44 24 1b 43 44 45 46 	mov    DWORD PTR [esp+0x1b],0x46454443
c000a59a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000a59f:	89 f7                	mov    edi,esi
c000a5a1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000a5a5:	eb 02                	jmp    c000a5a9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3d>
c000a5a7:	89 c7                	mov    edi,eax
c000a5a9:	31 d2                	xor    edx,edx
c000a5ab:	89 f8                	mov    eax,edi
c000a5ad:	43                   	inc    ebx
c000a5ae:	f7 f1                	div    ecx
c000a5b0:	39 cf                	cmp    edi,ecx
c000a5b2:	73 f3                	jae    c000a5a7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3b>
c000a5b4:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000a5b7:	eb 02                	jmp    c000a5bb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4f>
c000a5b9:	89 c6                	mov    esi,eax
c000a5bb:	31 d2                	xor    edx,edx
c000a5bd:	89 f0                	mov    eax,esi
c000a5bf:	f7 f1                	div    ecx
c000a5c1:	4b                   	dec    ebx
c000a5c2:	39 ce                	cmp    esi,ecx
c000a5c4:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a5c8:	88 13                	mov    BYTE PTR [ebx],dl
c000a5ca:	73 ed                	jae    c000a5b9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4d>
c000a5cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a5d0:	83 c4 20             	add    esp,0x20
c000a5d3:	5b                   	pop    ebx
c000a5d4:	5e                   	pop    esi
c000a5d5:	5f                   	pop    edi
c000a5d6:	c3                   	ret    

c000a5d7 <Dbg::logc(char)>:
c000a5d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5db:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a5e2:	75 12                	jne    c000a5f6 <Dbg::logc(char)+0x1f>
c000a5e4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a5e9:	ec                   	in     al,dx
c000a5ea:	a8 20                	test   al,0x20
c000a5ec:	74 fb                	je     c000a5e9 <Dbg::logc(char)+0x12>
c000a5ee:	ba f8 03 00 00       	mov    edx,0x3f8
c000a5f3:	88 c8                	mov    al,cl
c000a5f5:	ee                   	out    dx,al
c000a5f6:	c3                   	ret    

c000a5f7 <Dbg::logs(char*)>:
c000a5f7:	53                   	push   ebx
c000a5f8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a5fc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5ff:	84 c0                	test   al,al
c000a601:	74 0f                	je     c000a612 <Dbg::logs(char*)+0x1b>
c000a603:	43                   	inc    ebx
c000a604:	50                   	push   eax
c000a605:	e8 cd ff ff ff       	call   c000a5d7 <Dbg::logc(char)>
c000a60a:	5a                   	pop    edx
c000a60b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a60e:	84 c0                	test   al,al
c000a610:	75 f1                	jne    c000a603 <Dbg::logs(char*)+0xc>
c000a612:	5b                   	pop    ebx
c000a613:	c3                   	ret    

c000a614 <Dbg::logWriteInt(unsigned int)>:
c000a614:	83 ec 10             	sub    esp,0x10
c000a617:	6a 0a                	push   0xa
c000a619:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a61d:	50                   	push   eax
c000a61e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a622:	50                   	push   eax
c000a623:	e8 44 ff ff ff       	call   c000a56c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a628:	50                   	push   eax
c000a629:	e8 c9 ff ff ff       	call   c000a5f7 <Dbg::logs(char*)>
c000a62e:	83 c4 20             	add    esp,0x20
c000a631:	c3                   	ret    

c000a632 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a632:	83 ec 10             	sub    esp,0x10
c000a635:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a639:	50                   	push   eax
c000a63a:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a63e:	50                   	push   eax
c000a63f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a643:	52                   	push   edx
c000a644:	e8 23 ff ff ff       	call   c000a56c <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a649:	50                   	push   eax
c000a64a:	e8 a8 ff ff ff       	call   c000a5f7 <Dbg::logs(char*)>
c000a64f:	83 c4 20             	add    esp,0x20
c000a652:	c3                   	ret    

c000a653 <Dbg::kprintf(char const*, ...)>:
c000a653:	55                   	push   ebp
c000a654:	57                   	push   edi
c000a655:	56                   	push   esi
c000a656:	53                   	push   ebx
c000a657:	83 ec 0c             	sub    esp,0xc
c000a65a:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a661:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a665:	74 08                	je     c000a66f <Dbg::kprintf(char const*, ...)+0x1c>
c000a667:	83 c4 0c             	add    esp,0xc
c000a66a:	5b                   	pop    ebx
c000a66b:	5e                   	pop    esi
c000a66c:	5f                   	pop    edi
c000a66d:	5d                   	pop    ebp
c000a66e:	c3                   	ret    
c000a66f:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a673:	31 ff                	xor    edi,edi
c000a675:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a679:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a67c:	84 c0                	test   al,al
c000a67e:	74 e7                	je     c000a667 <Dbg::kprintf(char const*, ...)+0x14>
c000a680:	8d 77 01             	lea    esi,[edi+0x1]
c000a683:	3c 25                	cmp    al,0x25
c000a685:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a688:	75 47                	jne    c000a6d1 <Dbg::kprintf(char const*, ...)+0x7e>
c000a68a:	83 c7 02             	add    edi,0x2
c000a68d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a690:	83 e8 25             	sub    eax,0x25
c000a693:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a696:	3c 53                	cmp    al,0x53
c000a698:	0f 87 d2 00 00 00    	ja     c000a770 <Dbg::kprintf(char const*, ...)+0x11d>
c000a69e:	25 ff 00 00 00       	and    eax,0xff
c000a6a3:	ff 24 85 8c f9 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0674]
c000a6aa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6ae:	89 c8                	mov    eax,ecx
c000a6b0:	83 c1 04             	add    ecx,0x4
c000a6b3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a6b9:	55                   	push   ebp
c000a6ba:	e8 55 ff ff ff       	call   c000a614 <Dbg::logWriteInt(unsigned int)>
c000a6bf:	58                   	pop    eax
c000a6c0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a6c3:	84 c0                	test   al,al
c000a6c5:	74 a0                	je     c000a667 <Dbg::kprintf(char const*, ...)+0x14>
c000a6c7:	8d 77 01             	lea    esi,[edi+0x1]
c000a6ca:	3c 25                	cmp    al,0x25
c000a6cc:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a6cf:	74 b9                	je     c000a68a <Dbg::kprintf(char const*, ...)+0x37>
c000a6d1:	50                   	push   eax
c000a6d2:	89 f7                	mov    edi,esi
c000a6d4:	e8 fe fe ff ff       	call   c000a5d7 <Dbg::logc(char)>
c000a6d9:	89 ee                	mov    esi,ebp
c000a6db:	58                   	pop    eax
c000a6dc:	eb e2                	jmp    c000a6c0 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6de:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6e2:	89 c8                	mov    eax,ecx
c000a6e4:	83 c1 04             	add    ecx,0x4
c000a6e7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6ed:	50                   	push   eax
c000a6ee:	e8 04 ff ff ff       	call   c000a5f7 <Dbg::logs(char*)>
c000a6f3:	58                   	pop    eax
c000a6f4:	eb ca                	jmp    c000a6c0 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6fa:	89 d0                	mov    eax,edx
c000a6fc:	83 c2 04             	add    edx,0x4
c000a6ff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a703:	8b 00                	mov    eax,DWORD PTR [eax]
c000a705:	50                   	push   eax
c000a706:	e8 09 ff ff ff       	call   c000a614 <Dbg::logWriteInt(unsigned int)>
c000a70b:	58                   	pop    eax
c000a70c:	eb b2                	jmp    c000a6c0 <Dbg::kprintf(char const*, ...)+0x6d>
c000a70e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a712:	89 d0                	mov    eax,edx
c000a714:	83 c2 04             	add    edx,0x4
c000a717:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a71b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a71e:	50                   	push   eax
c000a71f:	e8 b3 fe ff ff       	call   c000a5d7 <Dbg::logc(char)>
c000a724:	58                   	pop    eax
c000a725:	eb 99                	jmp    c000a6c0 <Dbg::kprintf(char const*, ...)+0x6d>
c000a727:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a72b:	89 c8                	mov    eax,ecx
c000a72d:	83 c1 04             	add    ecx,0x4
c000a730:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a734:	6a 10                	push   0x10
c000a736:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a738:	51                   	push   ecx
c000a739:	e8 f4 fe ff ff       	call   c000a632 <Dbg::logWriteIntBase(unsigned int, int)>
c000a73e:	5d                   	pop    ebp
c000a73f:	58                   	pop    eax
c000a740:	e9 7b ff ff ff       	jmp    c000a6c0 <Dbg::kprintf(char const*, ...)+0x6d>
c000a745:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a749:	89 d0                	mov    eax,edx
c000a74b:	83 c2 08             	add    edx,0x8
c000a74e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a752:	6a 10                	push   0x10
c000a754:	8b 00                	mov    eax,DWORD PTR [eax]
c000a756:	50                   	push   eax
c000a757:	e8 d6 fe ff ff       	call   c000a632 <Dbg::logWriteIntBase(unsigned int, int)>
c000a75c:	58                   	pop    eax
c000a75d:	5a                   	pop    edx
c000a75e:	e9 5d ff ff ff       	jmp    c000a6c0 <Dbg::kprintf(char const*, ...)+0x6d>
c000a763:	6a 25                	push   0x25
c000a765:	e8 6d fe ff ff       	call   c000a5d7 <Dbg::logc(char)>
c000a76a:	5a                   	pop    edx
c000a76b:	e9 50 ff ff ff       	jmp    c000a6c0 <Dbg::kprintf(char const*, ...)+0x6d>
c000a770:	6a 25                	push   0x25
c000a772:	e8 60 fe ff ff       	call   c000a5d7 <Dbg::logc(char)>
c000a777:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a77b:	50                   	push   eax
c000a77c:	e8 56 fe ff ff       	call   c000a5d7 <Dbg::logc(char)>
c000a781:	5a                   	pop    edx
c000a782:	59                   	pop    ecx
c000a783:	e9 38 ff ff ff       	jmp    c000a6c0 <Dbg::kprintf(char const*, ...)+0x6d>

c000a788 <File::read(unsigned long long, void*, int*)>:
c000a788:	53                   	push   ebx
c000a789:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a78d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a791:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a798:	3c 19                	cmp    al,0x19
c000a79a:	77 35                	ja     c000a7d1 <File::read(unsigned long long, void*, int*)+0x49>
c000a79c:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a7a3:	85 c0                	test   eax,eax
c000a7a5:	74 2a                	je     c000a7d1 <File::read(unsigned long long, void*, int*)+0x49>
c000a7a7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a7ad:	85 c0                	test   eax,eax
c000a7af:	74 20                	je     c000a7d1 <File::read(unsigned long long, void*, int*)+0x49>
c000a7b1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a7b5:	74 21                	je     c000a7d8 <File::read(unsigned long long, void*, int*)+0x50>
c000a7b7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a7b9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7bd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7cb:	5b                   	pop    ebx
c000a7cc:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a7cf:	ff e0                	jmp    eax
c000a7d1:	b8 0b 00 00 00       	mov    eax,0xb
c000a7d6:	eb 05                	jmp    c000a7dd <File::read(unsigned long long, void*, int*)+0x55>
c000a7d8:	b8 05 00 00 00       	mov    eax,0x5
c000a7dd:	5b                   	pop    ebx
c000a7de:	c3                   	ret    
c000a7df:	90                   	nop

c000a7e0 <File::write(unsigned long long, void*, int*)>:
c000a7e0:	53                   	push   ebx
c000a7e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7e9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7f0:	3c 19                	cmp    al,0x19
c000a7f2:	77 35                	ja     c000a829 <File::write(unsigned long long, void*, int*)+0x49>
c000a7f4:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a7fb:	85 c0                	test   eax,eax
c000a7fd:	74 2a                	je     c000a829 <File::write(unsigned long long, void*, int*)+0x49>
c000a7ff:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a805:	85 c0                	test   eax,eax
c000a807:	74 20                	je     c000a829 <File::write(unsigned long long, void*, int*)+0x49>
c000a809:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a80d:	74 21                	je     c000a830 <File::write(unsigned long long, void*, int*)+0x50>
c000a80f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a811:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a815:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a81b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a81f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a823:	5b                   	pop    ebx
c000a824:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a827:	ff e0                	jmp    eax
c000a829:	b8 0b 00 00 00       	mov    eax,0xb
c000a82e:	eb 05                	jmp    c000a835 <File::write(unsigned long long, void*, int*)+0x55>
c000a830:	b8 05 00 00 00       	mov    eax,0x5
c000a835:	5b                   	pop    ebx
c000a836:	c3                   	ret    
c000a837:	90                   	nop

c000a838 <Directory::read(unsigned long long, void*, int*)>:
c000a838:	53                   	push   ebx
c000a839:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a83d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a841:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a848:	3c 19                	cmp    al,0x19
c000a84a:	77 35                	ja     c000a881 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a84c:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a853:	85 c0                	test   eax,eax
c000a855:	74 2a                	je     c000a881 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a857:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a85d:	85 c0                	test   eax,eax
c000a85f:	74 20                	je     c000a881 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a861:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a865:	74 21                	je     c000a888 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a867:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a869:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a86d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a873:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a877:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a87b:	5b                   	pop    ebx
c000a87c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a87f:	ff e0                	jmp    eax
c000a881:	b8 0b 00 00 00       	mov    eax,0xb
c000a886:	eb 05                	jmp    c000a88d <Directory::read(unsigned long long, void*, int*)+0x55>
c000a888:	b8 05 00 00 00       	mov    eax,0x5
c000a88d:	5b                   	pop    ebx
c000a88e:	c3                   	ret    
c000a88f:	90                   	nop

c000a890 <Directory::write(unsigned long long, void*, int*)>:
c000a890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a894:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a89b:	b8 0b 00 00 00       	mov    eax,0xb
c000a8a0:	80 fa 19             	cmp    dl,0x19
c000a8a3:	77 18                	ja     c000a8bd <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a8a5:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000a8ac:	85 d2                	test   edx,edx
c000a8ae:	74 0d                	je     c000a8bd <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a8b0:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000a8b7:	19 c0                	sbb    eax,eax
c000a8b9:	83 e0 0a             	and    eax,0xa
c000a8bc:	40                   	inc    eax
c000a8bd:	c3                   	ret    

c000a8be <File::isAtty()>:
c000a8be:	31 c0                	xor    eax,eax
c000a8c0:	c3                   	ret    
c000a8c1:	90                   	nop

c000a8c2 <Directory::isAtty()>:
c000a8c2:	31 c0                	xor    eax,eax
c000a8c4:	c3                   	ret    
c000a8c5:	90                   	nop

c000a8c6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a8c6:	b8 0a 00 00 00       	mov    eax,0xa
c000a8cb:	c3                   	ret    

c000a8cc <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a8cc:	b8 0a 00 00 00       	mov    eax,0xa
c000a8d1:	c3                   	ret    

c000a8d2 <Filesystem::allocateSwapfile(char const*, int)>:
c000a8d2:	31 c0                	xor    eax,eax
c000a8d4:	31 d2                	xor    edx,edx
c000a8d6:	c3                   	ret    
c000a8d7:	90                   	nop

c000a8d8 <File::~File()>:
c000a8d8:	83 ec 0c             	sub    esp,0xc
c000a8db:	ba 4c fb 01 c0       	mov    edx,0xc001fb4c
c000a8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8e4:	89 10                	mov    DWORD PTR [eax],edx
c000a8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8ea:	83 ec 0c             	sub    esp,0xc
c000a8ed:	50                   	push   eax
c000a8ee:	e8 09 e8 ff ff       	call   c00090fc <UnixFile::~UnixFile()>
c000a8f3:	83 c4 10             	add    esp,0x10
c000a8f6:	90                   	nop
c000a8f7:	83 c4 0c             	add    esp,0xc
c000a8fa:	c3                   	ret    
c000a8fb:	90                   	nop

c000a8fc <File::~File()>:
c000a8fc:	83 ec 0c             	sub    esp,0xc
c000a8ff:	83 ec 0c             	sub    esp,0xc
c000a902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a906:	e8 cd ff ff ff       	call   c000a8d8 <File::~File()>
c000a90b:	83 c4 10             	add    esp,0x10
c000a90e:	83 ec 08             	sub    esp,0x8
c000a911:	68 14 01 00 00       	push   0x114
c000a916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a91a:	e8 3e fc ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c000a91f:	83 c4 10             	add    esp,0x10
c000a922:	83 c4 0c             	add    esp,0xc
c000a925:	c3                   	ret    

c000a926 <Directory::~Directory()>:
c000a926:	83 ec 0c             	sub    esp,0xc
c000a929:	ba 68 fb 01 c0       	mov    edx,0xc001fb68
c000a92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a932:	89 10                	mov    DWORD PTR [eax],edx
c000a934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a938:	83 ec 0c             	sub    esp,0xc
c000a93b:	50                   	push   eax
c000a93c:	e8 bb e7 ff ff       	call   c00090fc <UnixFile::~UnixFile()>
c000a941:	83 c4 10             	add    esp,0x10
c000a944:	90                   	nop
c000a945:	83 c4 0c             	add    esp,0xc
c000a948:	c3                   	ret    
c000a949:	90                   	nop

c000a94a <Directory::~Directory()>:
c000a94a:	83 ec 0c             	sub    esp,0xc
c000a94d:	83 ec 0c             	sub    esp,0xc
c000a950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a954:	e8 cd ff ff ff       	call   c000a926 <Directory::~Directory()>
c000a959:	83 c4 10             	add    esp,0x10
c000a95c:	83 ec 08             	sub    esp,0x8
c000a95f:	68 14 01 00 00       	push   0x114
c000a964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a968:	e8 f0 fb ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c000a96d:	83 c4 10             	add    esp,0x10
c000a970:	83 c4 0c             	add    esp,0xc
c000a973:	c3                   	ret    

c000a974 <Filesystem::Filesystem()>:
c000a974:	ba e4 fa 01 c0       	mov    edx,0xc001fae4
c000a979:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a97d:	89 10                	mov    DWORD PTR [eax],edx
c000a97f:	8b 15 b4 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fb4
c000a985:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a989:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a98c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a990:	a3 b4 3f 02 c0       	mov    ds:0xc0023fb4,eax
c000a995:	90                   	nop
c000a996:	c3                   	ret    
c000a997:	90                   	nop

c000a998 <Filesystem::~Filesystem()>:
c000a998:	ba e4 fa 01 c0       	mov    edx,0xc001fae4
c000a99d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9a1:	89 10                	mov    DWORD PTR [eax],edx
c000a9a3:	90                   	nop
c000a9a4:	c3                   	ret    
c000a9a5:	90                   	nop

c000a9a6 <Filesystem::~Filesystem()>:
c000a9a6:	83 ec 0c             	sub    esp,0xc
c000a9a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a9ad:	e8 e6 ff ff ff       	call   c000a998 <Filesystem::~Filesystem()>
c000a9b2:	83 c4 04             	add    esp,0x4
c000a9b5:	83 ec 08             	sub    esp,0x8
c000a9b8:	6a 08                	push   0x8
c000a9ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a9be:	e8 9a fb ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c000a9c3:	83 c4 10             	add    esp,0x10
c000a9c6:	83 c4 0c             	add    esp,0xc
c000a9c9:	c3                   	ret    

c000a9ca <Fs::getcwd(Process*, char*, int)>:
c000a9ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9ce:	31 c0                	xor    eax,eax
c000a9d0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a9d3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a9d7:	7d 15                	jge    c000a9ee <Fs::getcwd(Process*, char*, int)+0x24>
c000a9d9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9dd:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a9e4:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a9e7:	84 c9                	test   cl,cl
c000a9e9:	74 06                	je     c000a9f1 <Fs::getcwd(Process*, char*, int)+0x27>
c000a9eb:	40                   	inc    eax
c000a9ec:	eb e2                	jmp    c000a9d0 <Fs::getcwd(Process*, char*, int)+0x6>
c000a9ee:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a9f1:	31 c0                	xor    eax,eax
c000a9f3:	c3                   	ret    

c000a9f4 <Fs::initVFS()>:
c000a9f4:	83 ec 18             	sub    esp,0x18
c000a9f7:	6a 08                	push   0x8
c000a9f9:	e8 65 ce ff ff       	call   c0007863 <malloc>
c000a9fe:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa01:	e8 ea da 00 00       	call   c00184f0 <FAT::FAT()>
c000aa06:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000aa0d:	e8 51 ce ff ff       	call   c0007863 <malloc>
c000aa12:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa15:	e8 72 e9 00 00       	call   c001938c <ISO9660::ISO9660()>
c000aa1a:	83 c4 1c             	add    esp,0x1c
c000aa1d:	c3                   	ret    

c000aa1e <Fs::standardiseFiles(char*, char const*, char const*)>:
c000aa1e:	55                   	push   ebp
c000aa1f:	57                   	push   edi
c000aa20:	56                   	push   esi
c000aa21:	53                   	push   ebx
c000aa22:	81 ec 10 04 00 00    	sub    esp,0x410
c000aa28:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000aa2f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000aa36:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000aa3d:	68 00 04 00 00       	push   0x400
c000aa42:	6a 00                	push   0x0
c000aa44:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000aa48:	56                   	push   esi
c000aa49:	e8 72 5a ff ff       	call   c00004c0 <memset>
c000aa4e:	83 c4 10             	add    esp,0x10
c000aa51:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000aa55:	75 0b                	jne    c000aa62 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000aa57:	50                   	push   eax
c000aa58:	50                   	push   eax
c000aa59:	57                   	push   edi
c000aa5a:	56                   	push   esi
c000aa5b:	e8 90 5b ff ff       	call   c00005f0 <strcpy>
c000aa60:	eb 41                	jmp    c000aaa3 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aa62:	8a 07                	mov    al,BYTE PTR [edi]
c000aa64:	3c 2f                	cmp    al,0x2f
c000aa66:	74 04                	je     c000aa6c <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000aa68:	3c 5c                	cmp    al,0x5c
c000aa6a:	75 18                	jne    c000aa84 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000aa6c:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa6f:	3c 60                	cmp    al,0x60
c000aa71:	7e 03                	jle    c000aa76 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000aa73:	83 e8 20             	sub    eax,0x20
c000aa76:	88 04 24             	mov    BYTE PTR [esp],al
c000aa79:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa80:	50                   	push   eax
c000aa81:	50                   	push   eax
c000aa82:	eb 18                	jmp    c000aa9c <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000aa84:	50                   	push   eax
c000aa85:	50                   	push   eax
c000aa86:	55                   	push   ebp
c000aa87:	56                   	push   esi
c000aa88:	e8 63 5b ff ff       	call   c00005f0 <strcpy>
c000aa8d:	5a                   	pop    edx
c000aa8e:	59                   	pop    ecx
c000aa8f:	68 3b 0a 02 c0       	push   0xc0020a3b
c000aa94:	56                   	push   esi
c000aa95:	e8 26 5d ff ff       	call   c00007c0 <strcat>
c000aa9a:	5d                   	pop    ebp
c000aa9b:	58                   	pop    eax
c000aa9c:	57                   	push   edi
c000aa9d:	56                   	push   esi
c000aa9e:	e8 1d 5d ff ff       	call   c00007c0 <strcat>
c000aaa3:	83 c4 10             	add    esp,0x10
c000aaa6:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aaa9:	3c 60                	cmp    al,0x60
c000aaab:	7e 03                	jle    c000aab0 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000aaad:	83 e8 20             	sub    eax,0x20
c000aab0:	88 04 24             	mov    BYTE PTR [esp],al
c000aab3:	88 03                	mov    BYTE PTR [ebx],al
c000aab5:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aabc:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aac2:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aac6:	bf 03 00 00 00       	mov    edi,0x3
c000aacb:	b8 03 00 00 00       	mov    eax,0x3
c000aad0:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aad3:	84 d2                	test   dl,dl
c000aad5:	0f 84 91 00 00 00    	je     c000ab6c <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aadb:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aade:	80 fa 2f             	cmp    dl,0x2f
c000aae1:	74 05                	je     c000aae8 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aae3:	80 fa 5c             	cmp    dl,0x5c
c000aae6:	75 12                	jne    c000aafa <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aae8:	89 c5                	mov    ebp,eax
c000aaea:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aaef:	74 09                	je     c000aafa <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aaf1:	40                   	inc    eax
c000aaf2:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aaf6:	89 cf                	mov    edi,ecx
c000aaf8:	eb d6                	jmp    c000aad0 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000aafa:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aaff:	75 5b                	jne    c000ab5c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000ab01:	80 fa 2e             	cmp    dl,0x2e
c000ab04:	75 56                	jne    c000ab5c <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000ab06:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000ab0a:	74 19                	je     c000ab25 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000ab0c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000ab11:	74 53                	je     c000ab66 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000ab13:	89 f9                	mov    ecx,edi
c000ab15:	41                   	inc    ecx
c000ab16:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000ab19:	80 fa 2f             	cmp    dl,0x2f
c000ab1c:	74 f7                	je     c000ab15 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000ab1e:	80 fa 5c             	cmp    dl,0x5c
c000ab21:	74 f2                	je     c000ab15 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000ab23:	eb d1                	jmp    c000aaf6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab25:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000ab2a:	74 3a                	je     c000ab66 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000ab2c:	83 f8 03             	cmp    eax,0x3
c000ab2f:	74 c5                	je     c000aaf6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab31:	41                   	inc    ecx
c000ab32:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000ab35:	80 fa 2f             	cmp    dl,0x2f
c000ab38:	74 f7                	je     c000ab31 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000ab3a:	80 fa 5c             	cmp    dl,0x5c
c000ab3d:	74 f2                	je     c000ab31 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000ab3f:	48                   	dec    eax
c000ab40:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab44:	75 06                	jne    c000ab4c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab46:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab4a:	eb f3                	jmp    c000ab3f <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000ab4c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ab50:	74 07                	je     c000ab59 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ab52:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab56:	48                   	dec    eax
c000ab57:	eb f3                	jmp    c000ab4c <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab59:	40                   	inc    eax
c000ab5a:	eb 9a                	jmp    c000aaf6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab5c:	80 fa 2f             	cmp    dl,0x2f
c000ab5f:	74 95                	je     c000aaf6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab61:	80 fa 5c             	cmp    dl,0x5c
c000ab64:	74 90                	je     c000aaf6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab66:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ab69:	40                   	inc    eax
c000ab6a:	eb 8a                	jmp    c000aaf6 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab6c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	53                   	push   ebx
c000ab74:	e8 b7 59 ff ff       	call   c0000530 <strlen>
c000ab79:	83 c4 10             	add    esp,0x10
c000ab7c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ab81:	75 26                	jne    c000aba9 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ab83:	83 ec 0c             	sub    esp,0xc
c000ab86:	53                   	push   ebx
c000ab87:	e8 a4 59 ff ff       	call   c0000530 <strlen>
c000ab8c:	83 c4 10             	add    esp,0x10
c000ab8f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ab94:	74 26                	je     c000abbc <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000ab96:	83 ec 0c             	sub    esp,0xc
c000ab99:	53                   	push   ebx
c000ab9a:	e8 91 59 ff ff       	call   c0000530 <strlen>
c000ab9f:	83 c4 10             	add    esp,0x10
c000aba2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aba7:	eb c7                	jmp    c000ab70 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aba9:	83 ec 0c             	sub    esp,0xc
c000abac:	53                   	push   ebx
c000abad:	e8 7e 59 ff ff       	call   c0000530 <strlen>
c000abb2:	83 c4 10             	add    esp,0x10
c000abb5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000abba:	74 c7                	je     c000ab83 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000abbc:	81 c4 0c 04 00 00    	add    esp,0x40c
c000abc2:	5b                   	pop    ebx
c000abc3:	5e                   	pop    esi
c000abc4:	5f                   	pop    edi
c000abc5:	5d                   	pop    ebp
c000abc6:	c3                   	ret    
c000abc7:	90                   	nop

c000abc8 <File::File(char const*, Process*)>:
c000abc8:	83 ec 0c             	sub    esp,0xc
c000abcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abcf:	83 ec 08             	sub    esp,0x8
c000abd2:	6a 00                	push   0x0
c000abd4:	50                   	push   eax
c000abd5:	e8 40 e3 ff ff       	call   c0008f1a <UnixFile::UnixFile(int)>
c000abda:	83 c4 10             	add    esp,0x10
c000abdd:	ba 4c fb 01 c0       	mov    edx,0xc001fb4c
c000abe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe6:	89 10                	mov    DWORD PTR [eax],edx
c000abe8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000abec:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000abf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abf6:	83 c0 0d             	add    eax,0xd
c000abf9:	83 ec 04             	sub    esp,0x4
c000abfc:	52                   	push   edx
c000abfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac01:	50                   	push   eax
c000ac02:	e8 17 fe ff ff       	call   c000aa1e <Fs::standardiseFiles(char*, char const*, char const*)>
c000ac07:	83 c4 10             	add    esp,0x10
c000ac0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac0e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ac11:	8d 50 bf             	lea    edx,[eax-0x41]
c000ac14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac18:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000ac1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac22:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ac26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac2a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac30:	25 ff 00 00 00       	and    eax,0xff
c000ac35:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac3c:	85 c0                	test   eax,eax
c000ac3e:	74 42                	je     c000ac82 <File::File(char const*, Process*)+0xba>
c000ac40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac44:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac4a:	25 ff 00 00 00       	and    eax,0xff
c000ac4f:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac56:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac5c:	85 c0                	test   eax,eax
c000ac5e:	75 22                	jne    c000ac82 <File::File(char const*, Process*)+0xba>
c000ac60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac64:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac6a:	25 ff 00 00 00       	and    eax,0xff
c000ac6f:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac76:	83 ec 0c             	sub    esp,0xc
c000ac79:	50                   	push   eax
c000ac7a:	e8 57 20 00 00       	call   c000ccd6 <LogicalDisk::mount()>
c000ac7f:	83 c4 10             	add    esp,0x10
c000ac82:	90                   	nop
c000ac83:	83 c4 0c             	add    esp,0xc
c000ac86:	c3                   	ret    
c000ac87:	90                   	nop

c000ac88 <File::open(FileOpenMode)>:
c000ac88:	53                   	push   ebx
c000ac89:	b8 0b 00 00 00       	mov    eax,0xb
c000ac8e:	83 ec 08             	sub    esp,0x8
c000ac91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac95:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ac9c:	80 fa 19             	cmp    dl,0x19
c000ac9f:	77 40                	ja     c000ace1 <File::open(FileOpenMode)+0x59>
c000aca1:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000aca8:	85 d2                	test   edx,edx
c000acaa:	74 35                	je     c000ace1 <File::open(FileOpenMode)+0x59>
c000acac:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000acb2:	85 d2                	test   edx,edx
c000acb4:	74 2b                	je     c000ace1 <File::open(FileOpenMode)+0x59>
c000acb6:	b8 06 00 00 00       	mov    eax,0x6
c000acbb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000acbf:	75 20                	jne    c000ace1 <File::open(FileOpenMode)+0x59>
c000acc1:	8b 02                	mov    eax,DWORD PTR [edx]
c000acc3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000acc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000accd:	51                   	push   ecx
c000acce:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000acd1:	51                   	push   ecx
c000acd2:	52                   	push   edx
c000acd3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000acd6:	83 c4 10             	add    esp,0x10
c000acd9:	85 c0                	test   eax,eax
c000acdb:	75 04                	jne    c000ace1 <File::open(FileOpenMode)+0x59>
c000acdd:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ace1:	83 c4 08             	add    esp,0x8
c000ace4:	5b                   	pop    ebx
c000ace5:	c3                   	ret    

c000ace6 <File::close()>:
c000ace6:	53                   	push   ebx
c000ace7:	b8 0b 00 00 00       	mov    eax,0xb
c000acec:	83 ec 08             	sub    esp,0x8
c000acef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000acf3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000acfa:	80 fa 19             	cmp    dl,0x19
c000acfd:	77 41                	ja     c000ad40 <File::close()+0x5a>
c000acff:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad06:	85 db                	test   ebx,ebx
c000ad08:	74 36                	je     c000ad40 <File::close()+0x5a>
c000ad0a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000ad11:	74 2d                	je     c000ad40 <File::close()+0x5a>
c000ad13:	b8 05 00 00 00       	mov    eax,0x5
c000ad18:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad1c:	74 22                	je     c000ad40 <File::close()+0x5a>
c000ad1e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ad22:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000ad29:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ad2f:	53                   	push   ebx
c000ad30:	53                   	push   ebx
c000ad31:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad33:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad39:	50                   	push   eax
c000ad3a:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ad3d:	83 c4 10             	add    esp,0x10
c000ad40:	83 c4 08             	add    esp,0x8
c000ad43:	5b                   	pop    ebx
c000ad44:	c3                   	ret    
c000ad45:	90                   	nop

c000ad46 <File::seek(unsigned long long)>:
c000ad46:	56                   	push   esi
c000ad47:	b8 0b 00 00 00       	mov    eax,0xb
c000ad4c:	53                   	push   ebx
c000ad4d:	51                   	push   ecx
c000ad4e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ad52:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ad56:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad5a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ad61:	80 fa 19             	cmp    dl,0x19
c000ad64:	77 31                	ja     c000ad97 <File::seek(unsigned long long)+0x51>
c000ad66:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad6d:	85 d2                	test   edx,edx
c000ad6f:	74 26                	je     c000ad97 <File::seek(unsigned long long)+0x51>
c000ad71:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad77:	85 d2                	test   edx,edx
c000ad79:	74 1c                	je     c000ad97 <File::seek(unsigned long long)+0x51>
c000ad7b:	b8 05 00 00 00       	mov    eax,0x5
c000ad80:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ad84:	74 11                	je     c000ad97 <File::seek(unsigned long long)+0x51>
c000ad86:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad88:	53                   	push   ebx
c000ad89:	51                   	push   ecx
c000ad8a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ad90:	52                   	push   edx
c000ad91:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad94:	83 c4 10             	add    esp,0x10
c000ad97:	5a                   	pop    edx
c000ad98:	5b                   	pop    ebx
c000ad99:	5e                   	pop    esi
c000ad9a:	c3                   	ret    
c000ad9b:	90                   	nop

c000ad9c <File::tell(unsigned long long*)>:
c000ad9c:	83 ec 0c             	sub    esp,0xc
c000ad9f:	b8 0b 00 00 00       	mov    eax,0xb
c000ada4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ada8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000adaf:	80 fa 19             	cmp    dl,0x19
c000adb2:	77 34                	ja     c000ade8 <File::tell(unsigned long long*)+0x4c>
c000adb4:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000adbb:	85 d2                	test   edx,edx
c000adbd:	74 29                	je     c000ade8 <File::tell(unsigned long long*)+0x4c>
c000adbf:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000adc5:	85 d2                	test   edx,edx
c000adc7:	74 1f                	je     c000ade8 <File::tell(unsigned long long*)+0x4c>
c000adc9:	b8 05 00 00 00       	mov    eax,0x5
c000adce:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000add2:	74 14                	je     c000ade8 <File::tell(unsigned long long*)+0x4c>
c000add4:	50                   	push   eax
c000add5:	8b 02                	mov    eax,DWORD PTR [edx]
c000add7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000addb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ade1:	52                   	push   edx
c000ade2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ade5:	83 c4 10             	add    esp,0x10
c000ade8:	83 c4 0c             	add    esp,0xc
c000adeb:	c3                   	ret    

c000adec <File::rewind()>:
c000adec:	83 ec 10             	sub    esp,0x10
c000adef:	6a 00                	push   0x0
c000adf1:	6a 00                	push   0x0
c000adf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adf7:	e8 4a ff ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c000adfc:	83 c4 1c             	add    esp,0x1c
c000adff:	c3                   	ret    

c000ae00 <File::unlink()>:
c000ae00:	83 ec 0c             	sub    esp,0xc
c000ae03:	b8 0b 00 00 00       	mov    eax,0xb
c000ae08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae0c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae13:	80 f9 19             	cmp    cl,0x19
c000ae16:	77 2f                	ja     c000ae47 <File::unlink()+0x47>
c000ae18:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae1f:	85 c9                	test   ecx,ecx
c000ae21:	74 24                	je     c000ae47 <File::unlink()+0x47>
c000ae23:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae29:	85 c9                	test   ecx,ecx
c000ae2b:	74 1a                	je     c000ae47 <File::unlink()+0x47>
c000ae2d:	b8 06 00 00 00       	mov    eax,0x6
c000ae32:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae36:	75 0f                	jne    c000ae47 <File::unlink()+0x47>
c000ae38:	50                   	push   eax
c000ae39:	83 c2 0d             	add    edx,0xd
c000ae3c:	50                   	push   eax
c000ae3d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae3f:	52                   	push   edx
c000ae40:	51                   	push   ecx
c000ae41:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ae44:	83 c4 10             	add    esp,0x10
c000ae47:	83 c4 0c             	add    esp,0xc
c000ae4a:	c3                   	ret    
c000ae4b:	90                   	nop

c000ae4c <File::rename(char const*)>:
c000ae4c:	83 ec 0c             	sub    esp,0xc
c000ae4f:	b8 0b 00 00 00       	mov    eax,0xb
c000ae54:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae58:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae5f:	80 f9 19             	cmp    cl,0x19
c000ae62:	77 32                	ja     c000ae96 <File::rename(char const*)+0x4a>
c000ae64:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae6b:	85 c9                	test   ecx,ecx
c000ae6d:	74 27                	je     c000ae96 <File::rename(char const*)+0x4a>
c000ae6f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae75:	85 c9                	test   ecx,ecx
c000ae77:	74 1d                	je     c000ae96 <File::rename(char const*)+0x4a>
c000ae79:	b8 06 00 00 00       	mov    eax,0x6
c000ae7e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae82:	75 12                	jne    c000ae96 <File::rename(char const*)+0x4a>
c000ae84:	50                   	push   eax
c000ae85:	83 c2 0d             	add    edx,0xd
c000ae88:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae8e:	52                   	push   edx
c000ae8f:	51                   	push   ecx
c000ae90:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ae93:	83 c4 10             	add    esp,0x10
c000ae96:	83 c4 0c             	add    esp,0xc
c000ae99:	c3                   	ret    

c000ae9a <File::chfatattr(unsigned char, unsigned char)>:
c000ae9a:	57                   	push   edi
c000ae9b:	b8 0b 00 00 00       	mov    eax,0xb
c000aea0:	56                   	push   esi
c000aea1:	53                   	push   ebx
c000aea2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aea6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aeaa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000aeae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aeb5:	80 f9 19             	cmp    cl,0x19
c000aeb8:	77 37                	ja     c000aef1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000aeba:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000aec1:	85 c9                	test   ecx,ecx
c000aec3:	74 2c                	je     c000aef1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000aec5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000aecb:	85 c9                	test   ecx,ecx
c000aecd:	74 22                	je     c000aef1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000aecf:	b8 06 00 00 00       	mov    eax,0x6
c000aed4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aed8:	75 17                	jne    c000aef1 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000aeda:	89 f0                	mov    eax,esi
c000aedc:	8b 39                	mov    edi,DWORD PTR [ecx]
c000aede:	0f b6 f0             	movzx  esi,al
c000aee1:	56                   	push   esi
c000aee2:	83 c2 0d             	add    edx,0xd
c000aee5:	0f b6 db             	movzx  ebx,bl
c000aee8:	53                   	push   ebx
c000aee9:	52                   	push   edx
c000aeea:	51                   	push   ecx
c000aeeb:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000aeee:	83 c4 10             	add    esp,0x10
c000aef1:	5b                   	pop    ebx
c000aef2:	5e                   	pop    esi
c000aef3:	5f                   	pop    edi
c000aef4:	c3                   	ret    
c000aef5:	90                   	nop

c000aef6 <File::exists()>:
c000aef6:	83 ec 0c             	sub    esp,0xc
c000aef9:	31 c0                	xor    eax,eax
c000aefb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aeff:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af06:	80 f9 19             	cmp    cl,0x19
c000af09:	77 24                	ja     c000af2f <File::exists()+0x39>
c000af0b:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000af12:	85 c9                	test   ecx,ecx
c000af14:	74 19                	je     c000af2f <File::exists()+0x39>
c000af16:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000af1c:	85 c9                	test   ecx,ecx
c000af1e:	74 0f                	je     c000af2f <File::exists()+0x39>
c000af20:	50                   	push   eax
c000af21:	83 c2 0d             	add    edx,0xd
c000af24:	50                   	push   eax
c000af25:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af27:	52                   	push   edx
c000af28:	51                   	push   ecx
c000af29:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000af2c:	83 c4 10             	add    esp,0x10
c000af2f:	83 c4 0c             	add    esp,0xc
c000af32:	c3                   	ret    
c000af33:	90                   	nop

c000af34 <File::stat(unsigned long long*, bool*)>:
c000af34:	56                   	push   esi
c000af35:	53                   	push   ebx
c000af36:	50                   	push   eax
c000af37:	b8 0b 00 00 00       	mov    eax,0xb
c000af3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000af40:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af44:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000af48:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af4f:	80 f9 19             	cmp    cl,0x19
c000af52:	77 3d                	ja     c000af91 <File::stat(unsigned long long*, bool*)+0x5d>
c000af54:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000af5b:	85 c9                	test   ecx,ecx
c000af5d:	74 32                	je     c000af91 <File::stat(unsigned long long*, bool*)+0x5d>
c000af5f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000af65:	85 c9                	test   ecx,ecx
c000af67:	74 28                	je     c000af91 <File::stat(unsigned long long*, bool*)+0x5d>
c000af69:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af6b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af6f:	74 13                	je     c000af84 <File::stat(unsigned long long*, bool*)+0x50>
c000af71:	83 ec 04             	sub    esp,0x4
c000af74:	56                   	push   esi
c000af75:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000af7b:	51                   	push   ecx
c000af7c:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000af7f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000af82:	eb 0a                	jmp    c000af8e <File::stat(unsigned long long*, bool*)+0x5a>
c000af84:	53                   	push   ebx
c000af85:	83 c2 0d             	add    edx,0xd
c000af88:	56                   	push   esi
c000af89:	52                   	push   edx
c000af8a:	51                   	push   ecx
c000af8b:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000af8e:	83 c4 10             	add    esp,0x10
c000af91:	5a                   	pop    edx
c000af92:	5b                   	pop    ebx
c000af93:	5e                   	pop    esi
c000af94:	c3                   	ret    

c000af95 <Fs::setcwd(Process*, char*)>:
c000af95:	55                   	push   ebp
c000af96:	57                   	push   edi
c000af97:	56                   	push   esi
c000af98:	53                   	push   ebx
c000af99:	81 ec 20 02 00 00    	sub    esp,0x220
c000af9f:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000afa6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000afac:	57                   	push   edi
c000afad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000afb4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000afb8:	56                   	push   esi
c000afb9:	e8 60 fa ff ff       	call   c000aa1e <Fs::standardiseFiles(char*, char const*, char const*)>
c000afbe:	89 34 24             	mov    DWORD PTR [esp],esi
c000afc1:	e8 6a 55 ff ff       	call   c0000530 <strlen>
c000afc6:	83 c4 10             	add    esp,0x10
c000afc9:	83 f8 02             	cmp    eax,0x2
c000afcc:	77 15                	ja     c000afe3 <Fs::setcwd(Process*, char*)+0x4e>
c000afce:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000afd3:	83 eb 41             	sub    ebx,0x41
c000afd6:	8b 04 9d 20 64 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9be0]
c000afdd:	85 c0                	test   eax,eax
c000afdf:	75 1c                	jne    c000affd <Fs::setcwd(Process*, char*)+0x68>
c000afe1:	eb 2f                	jmp    c000b012 <Fs::setcwd(Process*, char*)+0x7d>
c000afe3:	83 ec 0c             	sub    esp,0xc
c000afe6:	56                   	push   esi
c000afe7:	e8 44 55 ff ff       	call   c0000530 <strlen>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	83 f8 03             	cmp    eax,0x3
c000aff2:	75 57                	jne    c000b04b <Fs::setcwd(Process*, char*)+0xb6>
c000aff4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000aff9:	75 50                	jne    c000b04b <Fs::setcwd(Process*, char*)+0xb6>
c000affb:	eb d1                	jmp    c000afce <Fs::setcwd(Process*, char*)+0x39>
c000affd:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b004:	75 0c                	jne    c000b012 <Fs::setcwd(Process*, char*)+0x7d>
c000b006:	83 ec 0c             	sub    esp,0xc
c000b009:	50                   	push   eax
c000b00a:	e8 c7 1c 00 00       	call   c000ccd6 <LogicalDisk::mount()>
c000b00f:	83 c4 10             	add    esp,0x10
c000b012:	b8 03 00 00 00       	mov    eax,0x3
c000b017:	83 fb 19             	cmp    ebx,0x19
c000b01a:	0f 87 c6 00 00 00    	ja     c000b0e6 <Fs::setcwd(Process*, char*)+0x151>
c000b020:	8b 14 9d 20 64 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd9be0]
c000b027:	b8 05 00 00 00       	mov    eax,0x5
c000b02c:	85 d2                	test   edx,edx
c000b02e:	0f 84 b2 00 00 00    	je     c000b0e6 <Fs::setcwd(Process*, char*)+0x151>
c000b034:	b8 06 00 00 00       	mov    eax,0x6
c000b039:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b040:	0f 85 92 00 00 00    	jne    c000b0d8 <Fs::setcwd(Process*, char*)+0x143>
c000b046:	e9 9b 00 00 00       	jmp    c000b0e6 <Fs::setcwd(Process*, char*)+0x151>
c000b04b:	83 ec 0c             	sub    esp,0xc
c000b04e:	68 14 01 00 00       	push   0x114
c000b053:	e8 0b c8 ff ff       	call   c0007863 <malloc>
c000b058:	83 c4 0c             	add    esp,0xc
c000b05b:	89 c3                	mov    ebx,eax
c000b05d:	55                   	push   ebp
c000b05e:	56                   	push   esi
c000b05f:	50                   	push   eax
c000b060:	e8 63 fb ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c000b065:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b06a:	83 c4 0c             	add    esp,0xc
c000b06d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b071:	50                   	push   eax
c000b072:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b076:	50                   	push   eax
c000b077:	53                   	push   ebx
c000b078:	e8 b7 fe ff ff       	call   c000af34 <File::stat(unsigned long long*, bool*)>
c000b07d:	83 c4 10             	add    esp,0x10
c000b080:	83 f8 02             	cmp    eax,0x2
c000b083:	74 27                	je     c000b0ac <Fs::setcwd(Process*, char*)+0x117>
c000b085:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b08a:	75 1c                	jne    c000b0a8 <Fs::setcwd(Process*, char*)+0x113>
c000b08c:	b8 02 00 00 00       	mov    eax,0x2
c000b091:	85 db                	test   ebx,ebx
c000b093:	74 51                	je     c000b0e6 <Fs::setcwd(Process*, char*)+0x151>
c000b095:	83 ec 0c             	sub    esp,0xc
c000b098:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b09a:	53                   	push   ebx
c000b09b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b09e:	83 c4 10             	add    esp,0x10
c000b0a1:	b8 02 00 00 00       	mov    eax,0x2
c000b0a6:	eb 3e                	jmp    c000b0e6 <Fs::setcwd(Process*, char*)+0x151>
c000b0a8:	85 c0                	test   eax,eax
c000b0aa:	74 1c                	je     c000b0c8 <Fs::setcwd(Process*, char*)+0x133>
c000b0ac:	b8 01 00 00 00       	mov    eax,0x1
c000b0b1:	85 db                	test   ebx,ebx
c000b0b3:	74 31                	je     c000b0e6 <Fs::setcwd(Process*, char*)+0x151>
c000b0b5:	83 ec 0c             	sub    esp,0xc
c000b0b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0ba:	53                   	push   ebx
c000b0bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0be:	83 c4 10             	add    esp,0x10
c000b0c1:	b8 01 00 00 00       	mov    eax,0x1
c000b0c6:	eb 1e                	jmp    c000b0e6 <Fs::setcwd(Process*, char*)+0x151>
c000b0c8:	85 db                	test   ebx,ebx
c000b0ca:	74 0c                	je     c000b0d8 <Fs::setcwd(Process*, char*)+0x143>
c000b0cc:	83 ec 0c             	sub    esp,0xc
c000b0cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0d1:	53                   	push   ebx
c000b0d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0d5:	83 c4 10             	add    esp,0x10
c000b0d8:	50                   	push   eax
c000b0d9:	50                   	push   eax
c000b0da:	56                   	push   esi
c000b0db:	57                   	push   edi
c000b0dc:	e8 0f 55 ff ff       	call   c00005f0 <strcpy>
c000b0e1:	83 c4 10             	add    esp,0x10
c000b0e4:	31 c0                	xor    eax,eax
c000b0e6:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b0ec:	5b                   	pop    ebx
c000b0ed:	5e                   	pop    esi
c000b0ee:	5f                   	pop    edi
c000b0ef:	5d                   	pop    ebp
c000b0f0:	c3                   	ret    
c000b0f1:	90                   	nop

c000b0f2 <Directory::Directory(char const*, Process*)>:
c000b0f2:	83 ec 0c             	sub    esp,0xc
c000b0f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f9:	83 ec 08             	sub    esp,0x8
c000b0fc:	6a 00                	push   0x0
c000b0fe:	50                   	push   eax
c000b0ff:	e8 16 de ff ff       	call   c0008f1a <UnixFile::UnixFile(int)>
c000b104:	83 c4 10             	add    esp,0x10
c000b107:	ba 68 fb 01 c0       	mov    edx,0xc001fb68
c000b10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b110:	89 10                	mov    DWORD PTR [eax],edx
c000b112:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b116:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b11c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b120:	83 c0 0d             	add    eax,0xd
c000b123:	83 ec 04             	sub    esp,0x4
c000b126:	52                   	push   edx
c000b127:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b12b:	50                   	push   eax
c000b12c:	e8 ed f8 ff ff       	call   c000aa1e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b131:	83 c4 10             	add    esp,0x10
c000b134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b138:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b13b:	8d 50 bf             	lea    edx,[eax-0x41]
c000b13e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b142:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b14c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b154:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b15a:	25 ff 00 00 00       	and    eax,0xff
c000b15f:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b166:	85 c0                	test   eax,eax
c000b168:	74 42                	je     c000b1ac <Directory::Directory(char const*, Process*)+0xba>
c000b16a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b16e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b174:	25 ff 00 00 00       	and    eax,0xff
c000b179:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b180:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b186:	85 c0                	test   eax,eax
c000b188:	75 22                	jne    c000b1ac <Directory::Directory(char const*, Process*)+0xba>
c000b18a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b18e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b194:	25 ff 00 00 00       	and    eax,0xff
c000b199:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b1a0:	83 ec 0c             	sub    esp,0xc
c000b1a3:	50                   	push   eax
c000b1a4:	e8 2d 1b 00 00       	call   c000ccd6 <LogicalDisk::mount()>
c000b1a9:	83 c4 10             	add    esp,0x10
c000b1ac:	90                   	nop
c000b1ad:	83 c4 0c             	add    esp,0xc
c000b1b0:	c3                   	ret    
c000b1b1:	90                   	nop

c000b1b2 <Directory::open()>:
c000b1b2:	53                   	push   ebx
c000b1b3:	b8 0b 00 00 00       	mov    eax,0xb
c000b1b8:	83 ec 08             	sub    esp,0x8
c000b1bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b1bf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b1c6:	80 fa 19             	cmp    dl,0x19
c000b1c9:	77 3d                	ja     c000b208 <Directory::open()+0x56>
c000b1cb:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b1d2:	85 d2                	test   edx,edx
c000b1d4:	74 32                	je     c000b208 <Directory::open()+0x56>
c000b1d6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b1dc:	85 d2                	test   edx,edx
c000b1de:	74 28                	je     c000b208 <Directory::open()+0x56>
c000b1e0:	b8 06 00 00 00       	mov    eax,0x6
c000b1e5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b1e9:	75 1d                	jne    c000b208 <Directory::open()+0x56>
c000b1eb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b1f1:	50                   	push   eax
c000b1f2:	8b 02                	mov    eax,DWORD PTR [edx]
c000b1f4:	51                   	push   ecx
c000b1f5:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b1f8:	51                   	push   ecx
c000b1f9:	52                   	push   edx
c000b1fa:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b1fd:	83 c4 10             	add    esp,0x10
c000b200:	85 c0                	test   eax,eax
c000b202:	75 04                	jne    c000b208 <Directory::open()+0x56>
c000b204:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b208:	83 c4 08             	add    esp,0x8
c000b20b:	5b                   	pop    ebx
c000b20c:	c3                   	ret    
c000b20d:	90                   	nop

c000b20e <Directory::close()>:
c000b20e:	53                   	push   ebx
c000b20f:	b8 0b 00 00 00       	mov    eax,0xb
c000b214:	83 ec 08             	sub    esp,0x8
c000b217:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b21b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b222:	80 fa 19             	cmp    dl,0x19
c000b225:	77 41                	ja     c000b268 <Directory::close()+0x5a>
c000b227:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000b22e:	85 db                	test   ebx,ebx
c000b230:	74 36                	je     c000b268 <Directory::close()+0x5a>
c000b232:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b239:	74 2d                	je     c000b268 <Directory::close()+0x5a>
c000b23b:	b8 05 00 00 00       	mov    eax,0x5
c000b240:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b244:	74 22                	je     c000b268 <Directory::close()+0x5a>
c000b246:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b24a:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000b251:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b257:	53                   	push   ebx
c000b258:	53                   	push   ebx
c000b259:	8b 10                	mov    edx,DWORD PTR [eax]
c000b25b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b261:	50                   	push   eax
c000b262:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	83 c4 08             	add    esp,0x8
c000b26b:	5b                   	pop    ebx
c000b26c:	c3                   	ret    
c000b26d:	90                   	nop

c000b26e <Directory::unlink()>:
c000b26e:	83 ec 0c             	sub    esp,0xc
c000b271:	b8 0b 00 00 00       	mov    eax,0xb
c000b276:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b27a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b281:	80 f9 19             	cmp    cl,0x19
c000b284:	77 2f                	ja     c000b2b5 <Directory::unlink()+0x47>
c000b286:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b28d:	85 c9                	test   ecx,ecx
c000b28f:	74 24                	je     c000b2b5 <Directory::unlink()+0x47>
c000b291:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b297:	85 c9                	test   ecx,ecx
c000b299:	74 1a                	je     c000b2b5 <Directory::unlink()+0x47>
c000b29b:	b8 06 00 00 00       	mov    eax,0x6
c000b2a0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2a4:	75 0f                	jne    c000b2b5 <Directory::unlink()+0x47>
c000b2a6:	50                   	push   eax
c000b2a7:	83 c2 0d             	add    edx,0xd
c000b2aa:	50                   	push   eax
c000b2ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2ad:	52                   	push   edx
c000b2ae:	51                   	push   ecx
c000b2af:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b2b2:	83 c4 10             	add    esp,0x10
c000b2b5:	83 c4 0c             	add    esp,0xc
c000b2b8:	c3                   	ret    
c000b2b9:	90                   	nop

c000b2ba <Directory::rename(char const*)>:
c000b2ba:	83 ec 0c             	sub    esp,0xc
c000b2bd:	b8 0b 00 00 00       	mov    eax,0xb
c000b2c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2cd:	80 f9 19             	cmp    cl,0x19
c000b2d0:	77 32                	ja     c000b304 <Directory::rename(char const*)+0x4a>
c000b2d2:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b2d9:	85 c9                	test   ecx,ecx
c000b2db:	74 27                	je     c000b304 <Directory::rename(char const*)+0x4a>
c000b2dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2e3:	85 c9                	test   ecx,ecx
c000b2e5:	74 1d                	je     c000b304 <Directory::rename(char const*)+0x4a>
c000b2e7:	b8 06 00 00 00       	mov    eax,0x6
c000b2ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2f0:	75 12                	jne    c000b304 <Directory::rename(char const*)+0x4a>
c000b2f2:	50                   	push   eax
c000b2f3:	83 c2 0d             	add    edx,0xd
c000b2f6:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2fc:	52                   	push   edx
c000b2fd:	51                   	push   ecx
c000b2fe:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b301:	83 c4 10             	add    esp,0x10
c000b304:	83 c4 0c             	add    esp,0xc
c000b307:	c3                   	ret    

c000b308 <Directory::exists()>:
c000b308:	83 ec 0c             	sub    esp,0xc
c000b30b:	31 c0                	xor    eax,eax
c000b30d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b311:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b318:	80 f9 19             	cmp    cl,0x19
c000b31b:	77 24                	ja     c000b341 <Directory::exists()+0x39>
c000b31d:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b324:	85 c9                	test   ecx,ecx
c000b326:	74 19                	je     c000b341 <Directory::exists()+0x39>
c000b328:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b32e:	85 c9                	test   ecx,ecx
c000b330:	74 0f                	je     c000b341 <Directory::exists()+0x39>
c000b332:	50                   	push   eax
c000b333:	83 c2 0d             	add    edx,0xd
c000b336:	50                   	push   eax
c000b337:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b339:	52                   	push   edx
c000b33a:	51                   	push   ecx
c000b33b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b33e:	83 c4 10             	add    esp,0x10
c000b341:	83 c4 0c             	add    esp,0xc
c000b344:	c3                   	ret    
c000b345:	90                   	nop

c000b346 <Directory::read(dirent*)>:
c000b346:	83 ec 1c             	sub    esp,0x1c
c000b349:	b8 0b 00 00 00       	mov    eax,0xb
c000b34e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b352:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b359:	80 fa 19             	cmp    dl,0x19
c000b35c:	77 30                	ja     c000b38e <Directory::read(dirent*)+0x48>
c000b35e:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b365:	85 d2                	test   edx,edx
c000b367:	74 25                	je     c000b38e <Directory::read(dirent*)+0x48>
c000b369:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b370:	74 1c                	je     c000b38e <Directory::read(dirent*)+0x48>
c000b372:	83 ec 0c             	sub    esp,0xc
c000b375:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b377:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b37b:	52                   	push   edx
c000b37c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b380:	6a 00                	push   0x0
c000b382:	68 10 01 00 00       	push   0x110
c000b387:	51                   	push   ecx
c000b388:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b38b:	83 c4 20             	add    esp,0x20
c000b38e:	83 c4 1c             	add    esp,0x1c
c000b391:	c3                   	ret    

c000b392 <Directory::create()>:
c000b392:	83 ec 0c             	sub    esp,0xc
c000b395:	b8 0b 00 00 00       	mov    eax,0xb
c000b39a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b39e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3a5:	80 f9 19             	cmp    cl,0x19
c000b3a8:	77 2f                	ja     c000b3d9 <Directory::create()+0x47>
c000b3aa:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b3b1:	85 c9                	test   ecx,ecx
c000b3b3:	74 24                	je     c000b3d9 <Directory::create()+0x47>
c000b3b5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b3bb:	85 c9                	test   ecx,ecx
c000b3bd:	74 1a                	je     c000b3d9 <Directory::create()+0x47>
c000b3bf:	b8 06 00 00 00       	mov    eax,0x6
c000b3c4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3c8:	75 0f                	jne    c000b3d9 <Directory::create()+0x47>
c000b3ca:	50                   	push   eax
c000b3cb:	83 c2 0d             	add    edx,0xd
c000b3ce:	50                   	push   eax
c000b3cf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3d1:	52                   	push   edx
c000b3d2:	51                   	push   ecx
c000b3d3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b3d6:	83 c4 10             	add    esp,0x10
c000b3d9:	83 c4 0c             	add    esp,0xc
c000b3dc:	c3                   	ret    
c000b3dd:	90                   	nop

c000b3de <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b3de:	b8 0a 00 00 00       	mov    eax,0xa
c000b3e3:	c3                   	ret    

c000b3e4 <Bus::Bus(char const*)>:
c000b3e4:	83 ec 0c             	sub    esp,0xc
c000b3e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3eb:	83 ec 08             	sub    esp,0x8
c000b3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f2:	50                   	push   eax
c000b3f3:	e8 2c 08 00 00       	call   c000bc24 <Device::Device(char const*)>
c000b3f8:	83 c4 10             	add    esp,0x10
c000b3fb:	ba 84 fb 01 c0       	mov    edx,0xc001fb84
c000b400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b404:	89 10                	mov    DWORD PTR [eax],edx
c000b406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b414:	90                   	nop
c000b415:	83 c4 0c             	add    esp,0xc
c000b418:	c3                   	ret    
c000b419:	90                   	nop
c000b41a:	66 90                	xchg   ax,ax

c000b41c <Bus::~Bus()>:
c000b41c:	83 ec 0c             	sub    esp,0xc
c000b41f:	ba 84 fb 01 c0       	mov    edx,0xc001fb84
c000b424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b428:	89 10                	mov    DWORD PTR [eax],edx
c000b42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42e:	83 ec 0c             	sub    esp,0xc
c000b431:	50                   	push   eax
c000b432:	e8 5b 05 00 00       	call   c000b992 <Device::~Device()>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	90                   	nop
c000b43b:	83 c4 0c             	add    esp,0xc
c000b43e:	c3                   	ret    
c000b43f:	90                   	nop

c000b440 <Bus::~Bus()>:
c000b440:	83 ec 0c             	sub    esp,0xc
c000b443:	83 ec 0c             	sub    esp,0xc
c000b446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44a:	e8 cd ff ff ff       	call   c000b41c <Bus::~Bus()>
c000b44f:	83 c4 10             	add    esp,0x10
c000b452:	83 ec 08             	sub    esp,0x8
c000b455:	68 58 01 00 00       	push   0x158
c000b45a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45e:	e8 fa f0 ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c000b463:	83 c4 10             	add    esp,0x10
c000b466:	83 c4 0c             	add    esp,0xc
c000b469:	c3                   	ret    

c000b46a <beepThread(void*)>:
c000b46a:	83 ec 0c             	sub    esp,0xc
c000b46d:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000b472:	48                   	dec    eax
c000b473:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b477:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000b47c:	75 01                	jne    c000b47f <beepThread(void*)+0x15>
c000b47e:	fb                   	sti    
c000b47f:	6b c2 0a             	imul   eax,edx,0xa
c000b482:	83 ec 0c             	sub    esp,0xc
c000b485:	50                   	push   eax
c000b486:	e8 cd 99 00 00       	call   c0014e58 <milliTenthSleep(unsigned int)>
c000b48b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b492:	e8 f2 b7 00 00       	call   c0016c89 <HalMakeBeep(int)>
c000b497:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b49f:	83 c4 1c             	add    esp,0x1c
c000b4a2:	e9 9d 98 00 00       	jmp    c0014d44 <blockTask(TaskState)>

c000b4a7 <Krnl::beep(int, int, bool)>:
c000b4a7:	56                   	push   esi
c000b4a8:	53                   	push   ebx
c000b4a9:	83 ec 10             	sub    esp,0x10
c000b4ac:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b4b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b4b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4b8:	e8 cc b7 00 00       	call   c0016c89 <HalMakeBeep(int)>
c000b4bd:	89 f0                	mov    eax,esi
c000b4bf:	83 c4 10             	add    esp,0x10
c000b4c2:	84 c0                	test   al,al
c000b4c4:	74 1e                	je     c000b4e4 <Krnl::beep(int, int, bool)+0x3d>
c000b4c6:	6b db 0a             	imul   ebx,ebx,0xa
c000b4c9:	83 ec 0c             	sub    esp,0xc
c000b4cc:	53                   	push   ebx
c000b4cd:	e8 86 99 00 00       	call   c0014e58 <milliTenthSleep(unsigned int)>
c000b4d2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b4da:	83 c4 14             	add    esp,0x14
c000b4dd:	5b                   	pop    ebx
c000b4de:	5e                   	pop    esi
c000b4df:	e9 a5 b7 00 00       	jmp    c0016c89 <HalMakeBeep(int)>
c000b4e4:	68 e6 00 00 00       	push   0xe6
c000b4e9:	53                   	push   ebx
c000b4ea:	68 6a b4 00 c0       	push   0xc000b46a
c000b4ef:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b4f5:	e8 0a 94 00 00       	call   c0014904 <Process::createThread(void (*)(void*), void*, int)>
c000b4fa:	83 c4 14             	add    esp,0x14
c000b4fd:	5b                   	pop    ebx
c000b4fe:	5e                   	pop    esi
c000b4ff:	c3                   	ret    

c000b500 <User::loadClockSettings(int)>:
c000b500:	53                   	push   ebx
c000b501:	83 ec 14             	sub    esp,0x14
c000b504:	68 14 01 00 00       	push   0x114
c000b509:	e8 55 c3 ff ff       	call   c0007863 <malloc>
c000b50e:	83 c4 0c             	add    esp,0xc
c000b511:	89 c3                	mov    ebx,eax
c000b513:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b519:	68 a8 fb 01 c0       	push   0xc001fba8
c000b51e:	50                   	push   eax
c000b51f:	e8 a4 f6 ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c000b524:	58                   	pop    eax
c000b525:	5a                   	pop    edx
c000b526:	6a 01                	push   0x1
c000b528:	53                   	push   ebx
c000b529:	e8 5a f7 ff ff       	call   c000ac88 <File::open(FileOpenMode)>
c000b52e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b531:	e8 b0 f7 ff ff       	call   c000ace6 <File::close()>
c000b536:	83 c4 10             	add    esp,0x10
c000b539:	85 db                	test   ebx,ebx
c000b53b:	74 0f                	je     c000b54c <User::loadClockSettings(int)+0x4c>
c000b53d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b53f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b543:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b546:	83 c4 08             	add    esp,0x8
c000b549:	5b                   	pop    ebx
c000b54a:	ff e0                	jmp    eax
c000b54c:	83 c4 08             	add    esp,0x8
c000b54f:	5b                   	pop    ebx
c000b550:	c3                   	ret    
c000b551:	90                   	nop

c000b552 <Clock::Clock(char const*)>:
c000b552:	83 ec 0c             	sub    esp,0xc
c000b555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b559:	83 ec 08             	sub    esp,0x8
c000b55c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b560:	50                   	push   eax
c000b561:	e8 be 06 00 00       	call   c000bc24 <Device::Device(char const*)>
c000b566:	83 c4 10             	add    esp,0x10
c000b569:	ba d0 fb 01 c0       	mov    edx,0xc001fbd0
c000b56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b572:	89 10                	mov    DWORD PTR [eax],edx
c000b574:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b578:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b582:	90                   	nop
c000b583:	83 c4 0c             	add    esp,0xc
c000b586:	c3                   	ret    
c000b587:	90                   	nop

c000b588 <Clock::~Clock()>:
c000b588:	83 ec 0c             	sub    esp,0xc
c000b58b:	ba d0 fb 01 c0       	mov    edx,0xc001fbd0
c000b590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b594:	89 10                	mov    DWORD PTR [eax],edx
c000b596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b59a:	83 ec 0c             	sub    esp,0xc
c000b59d:	50                   	push   eax
c000b59e:	e8 ef 03 00 00       	call   c000b992 <Device::~Device()>
c000b5a3:	83 c4 10             	add    esp,0x10
c000b5a6:	90                   	nop
c000b5a7:	83 c4 0c             	add    esp,0xc
c000b5aa:	c3                   	ret    
c000b5ab:	90                   	nop

c000b5ac <Clock::~Clock()>:
c000b5ac:	83 ec 0c             	sub    esp,0xc
c000b5af:	83 ec 0c             	sub    esp,0xc
c000b5b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5b6:	e8 cd ff ff ff       	call   c000b588 <Clock::~Clock()>
c000b5bb:	83 c4 10             	add    esp,0x10
c000b5be:	83 ec 08             	sub    esp,0x8
c000b5c1:	68 58 01 00 00       	push   0x158
c000b5c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5ca:	e8 8e ef ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c000b5cf:	83 c4 10             	add    esp,0x10
c000b5d2:	83 c4 0c             	add    esp,0xc
c000b5d5:	c3                   	ret    

c000b5d6 <Clock::timeInSecondsLocal()>:
c000b5d6:	53                   	push   ebx
c000b5d7:	83 ec 14             	sub    esp,0x14
c000b5da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5de:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5e0:	50                   	push   eax
c000b5e1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b5e4:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b5eb:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b5f1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5f7:	89 cb                	mov    ebx,ecx
c000b5f9:	c1 fb 1f             	sar    ebx,0x1f
c000b5fc:	01 c8                	add    eax,ecx
c000b5fe:	11 da                	adc    edx,ebx
c000b600:	83 c4 10             	add    esp,0x10
c000b603:	31 c9                	xor    ecx,ecx
c000b605:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b60c:	74 05                	je     c000b613 <Clock::timeInSecondsLocal()+0x3d>
c000b60e:	b9 08 07 00 00       	mov    ecx,0x708
c000b613:	31 db                	xor    ebx,ebx
c000b615:	01 c8                	add    eax,ecx
c000b617:	11 da                	adc    edx,ebx
c000b619:	83 c4 08             	add    esp,0x8
c000b61c:	5b                   	pop    ebx
c000b61d:	c3                   	ret    

c000b61e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b61e:	57                   	push   edi
c000b61f:	56                   	push   esi
c000b620:	53                   	push   ebx
c000b621:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b625:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b629:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b62d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b62f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b632:	0f b6 05 b8 3f 02 c0 	movzx  eax,BYTE PTR ds:0xc0023fb8
c000b639:	03 05 bc 3f 02 c0    	add    eax,DWORD PTR ds:0xc0023fbc
c000b63f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b645:	99                   	cdq    
c000b646:	29 c6                	sub    esi,eax
c000b648:	19 d7                	sbb    edi,edx
c000b64a:	89 f0                	mov    eax,esi
c000b64c:	89 fa                	mov    edx,edi
c000b64e:	31 f6                	xor    esi,esi
c000b650:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b657:	74 05                	je     c000b65e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b659:	be 08 07 00 00       	mov    esi,0x708
c000b65e:	31 ff                	xor    edi,edi
c000b660:	29 f0                	sub    eax,esi
c000b662:	19 fa                	sbb    edx,edi
c000b664:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b668:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b66c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b670:	89 d8                	mov    eax,ebx
c000b672:	5b                   	pop    ebx
c000b673:	5e                   	pop    esi
c000b674:	5f                   	pop    edi
c000b675:	ff e0                	jmp    eax

c000b677 <datetimeToSeconds(datetime_t)>:
c000b677:	55                   	push   ebp
c000b678:	57                   	push   edi
c000b679:	56                   	push   esi
c000b67a:	53                   	push   ebx
c000b67b:	83 ec 14             	sub    esp,0x14
c000b67e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b682:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b686:	0f b6 f5             	movzx  esi,ch
c000b689:	6b f6 3c             	imul   esi,esi,0x3c
c000b68c:	89 cf                	mov    edi,ecx
c000b68e:	89 d3                	mov    ebx,edx
c000b690:	0f b6 c9             	movzx  ecx,cl
c000b693:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b699:	0f b6 c6             	movzx  eax,dh
c000b69c:	c1 ef 10             	shr    edi,0x10
c000b69f:	48                   	dec    eax
c000b6a0:	c1 eb 10             	shr    ebx,0x10
c000b6a3:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b6a7:	89 f8                	mov    eax,edi
c000b6a9:	0f b6 f8             	movzx  edi,al
c000b6ac:	01 fe                	add    esi,edi
c000b6ae:	01 f1                	add    ecx,esi
c000b6b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b6b4:	c1 f9 1f             	sar    ecx,0x1f
c000b6b7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b6bb:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b6c0:	0f b6 d2             	movzx  edx,dl
c000b6c3:	66 81 eb 6c 07       	sub    bx,0x76c
c000b6c8:	8b 0c 8d 20 fc 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe03e0]
c000b6cf:	0f b7 f3             	movzx  esi,bx
c000b6d2:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b6d6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b6db:	76 29                	jbe    c000b706 <datetimeToSeconds(datetime_t)+0x8f>
c000b6dd:	f6 c3 03             	test   bl,0x3
c000b6e0:	75 24                	jne    c000b706 <datetimeToSeconds(datetime_t)+0x8f>
c000b6e2:	31 d2                	xor    edx,edx
c000b6e4:	bf 64 00 00 00       	mov    edi,0x64
c000b6e9:	89 d8                	mov    eax,ebx
c000b6eb:	66 f7 f7             	div    di
c000b6ee:	66 85 d2             	test   dx,dx
c000b6f1:	75 12                	jne    c000b705 <datetimeToSeconds(datetime_t)+0x8e>
c000b6f3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b6f9:	bf 90 01 00 00       	mov    edi,0x190
c000b6fe:	99                   	cdq    
c000b6ff:	f7 ff                	idiv   edi
c000b701:	85 d2                	test   edx,edx
c000b703:	75 01                	jne    c000b706 <datetimeToSeconds(datetime_t)+0x8f>
c000b705:	41                   	inc    ecx
c000b706:	66 83 fb 46          	cmp    bx,0x46
c000b70a:	76 45                	jbe    c000b751 <datetimeToSeconds(datetime_t)+0xda>
c000b70c:	bb 46 00 00 00       	mov    ebx,0x46
c000b711:	bf 64 00 00 00       	mov    edi,0x64
c000b716:	bd 90 01 00 00       	mov    ebp,0x190
c000b71b:	b8 6d 01 00 00       	mov    eax,0x16d
c000b720:	f6 c3 03             	test   bl,0x3
c000b723:	75 23                	jne    c000b748 <datetimeToSeconds(datetime_t)+0xd1>
c000b725:	89 d8                	mov    eax,ebx
c000b727:	99                   	cdq    
c000b728:	f7 ff                	idiv   edi
c000b72a:	85 d2                	test   edx,edx
c000b72c:	b8 6e 01 00 00       	mov    eax,0x16e
c000b731:	75 15                	jne    c000b748 <datetimeToSeconds(datetime_t)+0xd1>
c000b733:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b739:	99                   	cdq    
c000b73a:	f7 fd                	idiv   ebp
c000b73c:	31 c0                	xor    eax,eax
c000b73e:	85 d2                	test   edx,edx
c000b740:	0f 94 c0             	sete   al
c000b743:	05 6d 01 00 00       	add    eax,0x16d
c000b748:	43                   	inc    ebx
c000b749:	01 c1                	add    ecx,eax
c000b74b:	39 f3                	cmp    ebx,esi
c000b74d:	7c cc                	jl     c000b71b <datetimeToSeconds(datetime_t)+0xa4>
c000b74f:	eb 3b                	jmp    c000b78c <datetimeToSeconds(datetime_t)+0x115>
c000b751:	74 39                	je     c000b78c <datetimeToSeconds(datetime_t)+0x115>
c000b753:	b8 45 00 00 00       	mov    eax,0x45
c000b758:	89 c2                	mov    edx,eax
c000b75a:	83 e2 03             	and    edx,0x3
c000b75d:	39 f0                	cmp    eax,esi
c000b75f:	7e 13                	jle    c000b774 <datetimeToSeconds(datetime_t)+0xfd>
c000b761:	85 d2                	test   edx,edx
c000b763:	0f 94 c2             	sete   dl
c000b766:	0f b6 d2             	movzx  edx,dl
c000b769:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b76f:	48                   	dec    eax
c000b770:	29 d1                	sub    ecx,edx
c000b772:	eb e4                	jmp    c000b758 <datetimeToSeconds(datetime_t)+0xe1>
c000b774:	b8 6d 01 00 00       	mov    eax,0x16d
c000b779:	85 d2                	test   edx,edx
c000b77b:	75 0d                	jne    c000b78a <datetimeToSeconds(datetime_t)+0x113>
c000b77d:	31 c0                	xor    eax,eax
c000b77f:	66 85 db             	test   bx,bx
c000b782:	0f 95 c0             	setne  al
c000b785:	05 6d 01 00 00       	add    eax,0x16d
c000b78a:	29 c1                	sub    ecx,eax
c000b78c:	b8 80 51 01 00       	mov    eax,0x15180
c000b791:	f7 e9                	imul   ecx
c000b793:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b797:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b79b:	83 c4 14             	add    esp,0x14
c000b79e:	5b                   	pop    ebx
c000b79f:	5e                   	pop    esi
c000b7a0:	5f                   	pop    edi
c000b7a1:	5d                   	pop    ebp
c000b7a2:	c3                   	ret    
c000b7a3:	90                   	nop

c000b7a4 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b7a4:	57                   	push   edi
c000b7a5:	56                   	push   esi
c000b7a6:	53                   	push   ebx
c000b7a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b7ab:	8b 06                	mov    eax,DWORD PTR [esi]
c000b7ad:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b7b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b7b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b7b8:	e8 ba fe ff ff       	call   c000b677 <datetimeToSeconds(datetime_t)>
c000b7bd:	59                   	pop    ecx
c000b7be:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b7c5:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b7cb:	5b                   	pop    ebx
c000b7cc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b7d2:	89 cb                	mov    ebx,ecx
c000b7d4:	c1 fb 1f             	sar    ebx,0x1f
c000b7d7:	29 c8                	sub    eax,ecx
c000b7d9:	19 da                	sbb    edx,ebx
c000b7db:	31 c9                	xor    ecx,ecx
c000b7dd:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b7e4:	74 05                	je     c000b7eb <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b7e6:	b9 08 07 00 00       	mov    ecx,0x708
c000b7eb:	31 db                	xor    ebx,ebx
c000b7ed:	29 c8                	sub    eax,ecx
c000b7ef:	19 da                	sbb    edx,ebx
c000b7f1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b7f5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7f9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b7fd:	5b                   	pop    ebx
c000b7fe:	89 f8                	mov    eax,edi
c000b800:	5e                   	pop    esi
c000b801:	5f                   	pop    edi
c000b802:	ff e0                	jmp    eax

c000b804 <secondsToDatetime(unsigned long long)>:
c000b804:	55                   	push   ebp
c000b805:	57                   	push   edi
c000b806:	56                   	push   esi
c000b807:	53                   	push   ebx
c000b808:	83 ec 1c             	sub    esp,0x1c
c000b80b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b80f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b813:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b817:	6a 00                	push   0x0
c000b819:	68 80 51 01 00       	push   0x15180
c000b81e:	55                   	push   ebp
c000b81f:	57                   	push   edi
c000b820:	e8 ab 26 01 00       	call   c001ded0 <__udivdi3>
c000b825:	83 c4 10             	add    esp,0x10
c000b828:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b82c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b832:	6a 00                	push   0x0
c000b834:	68 80 51 01 00       	push   0x15180
c000b839:	55                   	push   ebp
c000b83a:	57                   	push   edi
c000b83b:	e8 90 27 01 00       	call   c001dfd0 <__umoddi3>
c000b840:	bf 10 0e 00 00       	mov    edi,0xe10
c000b845:	83 c4 10             	add    esp,0x10
c000b848:	99                   	cdq    
c000b849:	f7 ff                	idiv   edi
c000b84b:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b84e:	89 d0                	mov    eax,edx
c000b850:	99                   	cdq    
c000b851:	bf 3c 00 00 00       	mov    edi,0x3c
c000b856:	f7 ff                	idiv   edi
c000b858:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b85b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b85e:	85 db                	test   ebx,ebx
c000b860:	79 11                	jns    c000b873 <secondsToDatetime(unsigned long long)+0x6f>
c000b862:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b866:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b86c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b871:	eb 07                	jmp    c000b87a <secondsToDatetime(unsigned long long)+0x76>
c000b873:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b878:	89 d8                	mov    eax,ebx
c000b87a:	99                   	cdq    
c000b87b:	f7 f9                	idiv   ecx
c000b87d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b881:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b886:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b88e:	01 c3                	add    ebx,eax
c000b890:	31 d2                	xor    edx,edx
c000b892:	89 d8                	mov    eax,ebx
c000b894:	bf b4 05 00 00       	mov    edi,0x5b4
c000b899:	f7 f1                	div    ecx
c000b89b:	31 d2                	xor    edx,edx
c000b89d:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b8a2:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b8a5:	89 d8                	mov    eax,ebx
c000b8a7:	f7 f7                	div    edi
c000b8a9:	29 c1                	sub    ecx,eax
c000b8ab:	31 d2                	xor    edx,edx
c000b8ad:	89 d8                	mov    eax,ebx
c000b8af:	f7 f5                	div    ebp
c000b8b1:	29 c1                	sub    ecx,eax
c000b8b3:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b8b8:	89 c8                	mov    eax,ecx
c000b8ba:	31 d2                	xor    edx,edx
c000b8bc:	f7 f5                	div    ebp
c000b8be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b8c2:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b8c7:	89 c8                	mov    eax,ecx
c000b8c9:	31 d2                	xor    edx,edx
c000b8cb:	f7 f5                	div    ebp
c000b8cd:	01 c3                	add    ebx,eax
c000b8cf:	31 d2                	xor    edx,edx
c000b8d1:	89 c8                	mov    eax,ecx
c000b8d3:	f7 f7                	div    edi
c000b8d5:	29 c3                	sub    ebx,eax
c000b8d7:	bf 99 00 00 00       	mov    edi,0x99
c000b8dc:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b8e4:	29 c3                	sub    ebx,eax
c000b8e6:	31 d2                	xor    edx,edx
c000b8e8:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b8eb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b8ee:	83 c1 02             	add    ecx,0x2
c000b8f1:	bb 05 00 00 00       	mov    ebx,0x5
c000b8f6:	89 c8                	mov    eax,ecx
c000b8f8:	f7 f7                	div    edi
c000b8fa:	89 c7                	mov    edi,eax
c000b8fc:	31 d2                	xor    edx,edx
c000b8fe:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b904:	83 c0 02             	add    eax,0x2
c000b907:	f7 f3                	div    ebx
c000b909:	89 eb                	mov    ebx,ebp
c000b90b:	29 c3                	sub    ebx,eax
c000b90d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b913:	19 c0                	sbb    eax,eax
c000b915:	31 d2                	xor    edx,edx
c000b917:	83 e0 0c             	and    eax,0xc
c000b91a:	88 1e                	mov    BYTE PTR [esi],bl
c000b91c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b920:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b928:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b92c:	83 f9 01             	cmp    ecx,0x1
c000b92f:	0f 96 c2             	setbe  dl
c000b932:	01 d0                	add    eax,edx
c000b934:	41                   	inc    ecx
c000b935:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b939:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b93c:	83 c4 1c             	add    esp,0x1c
c000b93f:	89 f0                	mov    eax,esi
c000b941:	5b                   	pop    ebx
c000b942:	5e                   	pop    esi
c000b943:	5f                   	pop    edi
c000b944:	5d                   	pop    ebp
c000b945:	c2 04 00             	ret    0x4

c000b948 <Clock::timeInDatetimeLocal()>:
c000b948:	53                   	push   ebx
c000b949:	83 ec 14             	sub    esp,0x14
c000b94c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b950:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b954:	e8 7d fc ff ff       	call   c000b5d6 <Clock::timeInSecondsLocal()>
c000b959:	83 c4 0c             	add    esp,0xc
c000b95c:	52                   	push   edx
c000b95d:	50                   	push   eax
c000b95e:	53                   	push   ebx
c000b95f:	e8 a0 fe ff ff       	call   c000b804 <secondsToDatetime(unsigned long long)>
c000b964:	83 c4 14             	add    esp,0x14
c000b967:	89 d8                	mov    eax,ebx
c000b969:	5b                   	pop    ebx
c000b96a:	c2 04 00             	ret    0x4
c000b96d:	90                   	nop

c000b96e <Device::hibernate()>:
c000b96e:	c3                   	ret    
c000b96f:	90                   	nop

c000b970 <Device::wake()>:
c000b970:	c3                   	ret    
c000b971:	90                   	nop

c000b972 <Device::detect()>:
c000b972:	c3                   	ret    
c000b973:	90                   	nop

c000b974 <Device::disableLegacy()>:
c000b974:	c3                   	ret    
c000b975:	90                   	nop

c000b976 <Device::powerSaving(PowerSavingLevel)>:
c000b976:	c3                   	ret    
c000b977:	90                   	nop

c000b978 <DriverlessDevice::close(int, int, void*)>:
c000b978:	31 c0                	xor    eax,eax
c000b97a:	c3                   	ret    
c000b97b:	90                   	nop

c000b97c <DriverlessDevice::detect()>:
c000b97c:	c3                   	ret    
c000b97d:	90                   	nop

c000b97e <DriverlessDevice::open(int, int, void*)>:
c000b97e:	83 ec 18             	sub    esp,0x18
c000b981:	68 50 fc 01 c0       	push   0xc001fc50
c000b986:	e8 7c 4a 00 00       	call   c0010407 <KePanic(char const*)>
c000b98b:	83 c8 ff             	or     eax,0xffffffff
c000b98e:	83 c4 1c             	add    esp,0x1c
c000b991:	c3                   	ret    

c000b992 <Device::~Device()>:
c000b992:	ba b0 fc 01 c0       	mov    edx,0xc001fcb0
c000b997:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b99b:	89 10                	mov    DWORD PTR [eax],edx
c000b99d:	90                   	nop
c000b99e:	c3                   	ret    
c000b99f:	90                   	nop

c000b9a0 <Device::~Device()>:
c000b9a0:	83 ec 0c             	sub    esp,0xc
c000b9a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b9a7:	e8 e6 ff ff ff       	call   c000b992 <Device::~Device()>
c000b9ac:	83 c4 04             	add    esp,0x4
c000b9af:	83 ec 08             	sub    esp,0x8
c000b9b2:	68 58 01 00 00       	push   0x158
c000b9b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9bb:	e8 9d eb ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c000b9c0:	83 c4 10             	add    esp,0x10
c000b9c3:	83 c4 0c             	add    esp,0xc
c000b9c6:	c3                   	ret    
c000b9c7:	90                   	nop

c000b9c8 <Device::findAndLoadDriver()>:
c000b9c8:	c7 44 24 04 6e fc 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fc6e
c000b9d0:	e9 7e ec ff ff       	jmp    c000a653 <Dbg::kprintf(char const*, ...)>
c000b9d5:	90                   	nop

c000b9d6 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b9d6:	57                   	push   edi
c000b9d7:	b9 09 00 00 00       	mov    ecx,0x9
c000b9dc:	56                   	push   esi
c000b9dd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b9e1:	81 c7 18 01 00 00    	add    edi,0x118
c000b9e7:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b9eb:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c000b9f2:	fc                   	cld    
c000b9f3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b9f5:	5e                   	pop    esi
c000b9f6:	5f                   	pop    edi
c000b9f7:	c3                   	ret    

c000b9f8 <Device::preOpenACPI(void*, char*, char*)>:
c000b9f8:	57                   	push   edi
c000b9f9:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b9fe:	56                   	push   esi
c000b9ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ba03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ba0b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000ba15:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000ba1b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000ba21:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ba23:	b9 0e 00 00 00       	mov    ecx,0xe
c000ba28:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000ba2e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ba32:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ba34:	5e                   	pop    esi
c000ba35:	5f                   	pop    edi
c000ba36:	c3                   	ret    
c000ba37:	90                   	nop

c000ba38 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ba38:	53                   	push   ebx
c000ba39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba3d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba41:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ba45:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba49:	0f b6 c0             	movzx  eax,al
c000ba4c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ba50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba54:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba58:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba5c:	5b                   	pop    ebx
c000ba5d:	e9 a4 05 00 00       	jmp    c000c006 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ba62 <Device::getParent()>:
c000ba62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba66:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ba6c:	c3                   	ret    
c000ba6d:	90                   	nop

c000ba6e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ba6e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ba73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba7b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba7f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba87:	e9 e3 06 00 00       	jmp    c000c16f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ba8c <Device::addChild(Device*)>:
c000ba8c:	53                   	push   ebx
c000ba8d:	83 ec 08             	sub    esp,0x8
c000ba90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba94:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba98:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ba9e:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000baa4:	8b 13                	mov    edx,DWORD PTR [ebx]
c000baa6:	85 d2                	test   edx,edx
c000baa8:	74 04                	je     c000baae <Device::addChild(Device*)+0x22>
c000baaa:	89 d3                	mov    ebx,edx
c000baac:	eb f6                	jmp    c000baa4 <Device::addChild(Device*)+0x18>
c000baae:	83 ec 0c             	sub    esp,0xc
c000bab1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bab4:	6a 08                	push   0x8
c000bab6:	e8 a8 bd ff ff       	call   c0007863 <malloc>
c000babb:	89 03                	mov    DWORD PTR [ebx],eax
c000babd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bac3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000baca:	83 c4 18             	add    esp,0x18
c000bacd:	5b                   	pop    ebx
c000bace:	c3                   	ret    
c000bacf:	90                   	nop

c000bad0 <Device::removeAllChildren()>:
c000bad0:	56                   	push   esi
c000bad1:	53                   	push   ebx
c000bad2:	52                   	push   edx
c000bad3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bad7:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000badd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bae0:	74 17                	je     c000baf9 <Device::removeAllChildren()+0x29>
c000bae2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bae5:	85 c0                	test   eax,eax
c000bae7:	74 0c                	je     c000baf5 <Device::removeAllChildren()+0x25>
c000bae9:	83 ec 0c             	sub    esp,0xc
c000baec:	8b 10                	mov    edx,DWORD PTR [eax]
c000baee:	50                   	push   eax
c000baef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000baf2:	83 c4 10             	add    esp,0x10
c000baf5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baf7:	eb e4                	jmp    c000badd <Device::removeAllChildren()+0xd>
c000baf9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000baff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb05:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bb0b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb12:	58                   	pop    eax
c000bb13:	5b                   	pop    ebx
c000bb14:	5e                   	pop    esi
c000bb15:	c3                   	ret    

c000bb16 <Device::hibernateAll()>:
c000bb16:	53                   	push   ebx
c000bb17:	83 ec 14             	sub    esp,0x14
c000bb1a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb20:	53                   	push   ebx
c000bb21:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bb24:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb2a:	83 c4 10             	add    esp,0x10
c000bb2d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb30:	74 0f                	je     c000bb41 <Device::hibernateAll()+0x2b>
c000bb32:	83 ec 0c             	sub    esp,0xc
c000bb35:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb38:	e8 d9 ff ff ff       	call   c000bb16 <Device::hibernateAll()>
c000bb3d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb3f:	eb e9                	jmp    c000bb2a <Device::hibernateAll()+0x14>
c000bb41:	83 c4 08             	add    esp,0x8
c000bb44:	5b                   	pop    ebx
c000bb45:	c3                   	ret    

c000bb46 <Device::wakeAll()>:
c000bb46:	53                   	push   ebx
c000bb47:	83 ec 14             	sub    esp,0x14
c000bb4a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb50:	53                   	push   ebx
c000bb51:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bb54:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb5a:	83 c4 10             	add    esp,0x10
c000bb5d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb60:	74 0f                	je     c000bb71 <Device::wakeAll()+0x2b>
c000bb62:	83 ec 0c             	sub    esp,0xc
c000bb65:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb68:	e8 d9 ff ff ff       	call   c000bb46 <Device::wakeAll()>
c000bb6d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb6f:	eb e9                	jmp    c000bb5a <Device::wakeAll()+0x14>
c000bb71:	83 c4 08             	add    esp,0x8
c000bb74:	5b                   	pop    ebx
c000bb75:	c3                   	ret    

c000bb76 <Device::detectAll()>:
c000bb76:	53                   	push   ebx
c000bb77:	83 ec 14             	sub    esp,0x14
c000bb7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb80:	53                   	push   ebx
c000bb81:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bb84:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb90:	74 0f                	je     c000bba1 <Device::detectAll()+0x2b>
c000bb92:	83 ec 0c             	sub    esp,0xc
c000bb95:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb98:	e8 d9 ff ff ff       	call   c000bb76 <Device::detectAll()>
c000bb9d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb9f:	eb e9                	jmp    c000bb8a <Device::detectAll()+0x14>
c000bba1:	83 c4 08             	add    esp,0x8
c000bba4:	5b                   	pop    ebx
c000bba5:	c3                   	ret    

c000bba6 <Device::disableLegacyAll()>:
c000bba6:	c3                   	ret    
c000bba7:	90                   	nop

c000bba8 <Device::loadDriversForAll()>:
c000bba8:	c3                   	ret    
c000bba9:	90                   	nop

c000bbaa <Device::closeAll()>:
c000bbaa:	53                   	push   ebx
c000bbab:	83 ec 08             	sub    esp,0x8
c000bbae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbb4:	6a 00                	push   0x0
c000bbb6:	6a 00                	push   0x0
c000bbb8:	6a 00                	push   0x0
c000bbba:	53                   	push   ebx
c000bbbb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bbbe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbc4:	83 c4 10             	add    esp,0x10
c000bbc7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbca:	74 0f                	je     c000bbdb <Device::closeAll()+0x31>
c000bbcc:	83 ec 0c             	sub    esp,0xc
c000bbcf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbd2:	e8 d3 ff ff ff       	call   c000bbaa <Device::closeAll()>
c000bbd7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbd9:	eb e9                	jmp    c000bbc4 <Device::closeAll()+0x1a>
c000bbdb:	83 c4 08             	add    esp,0x8
c000bbde:	5b                   	pop    ebx
c000bbdf:	c3                   	ret    

c000bbe0 <Device::powerSavingAll(PowerSavingLevel)>:
c000bbe0:	56                   	push   esi
c000bbe1:	53                   	push   ebx
c000bbe2:	83 ec 0c             	sub    esp,0xc
c000bbe5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bbe9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bbed:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbef:	56                   	push   esi
c000bbf0:	53                   	push   ebx
c000bbf1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bbf4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bbfa:	83 c4 10             	add    esp,0x10
c000bbfd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc00:	74 0f                	je     c000bc11 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bc02:	52                   	push   edx
c000bc03:	52                   	push   edx
c000bc04:	56                   	push   esi
c000bc05:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc08:	e8 d3 ff ff ff       	call   c000bbe0 <Device::powerSavingAll(PowerSavingLevel)>
c000bc0d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc0f:	eb e9                	jmp    c000bbfa <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bc11:	58                   	pop    eax
c000bc12:	5b                   	pop    ebx
c000bc13:	5e                   	pop    esi
c000bc14:	c3                   	ret    
c000bc15:	90                   	nop

c000bc16 <Device::setName(char const*)>:
c000bc16:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bc1e:	e9 cd 49 ff ff       	jmp    c00005f0 <strcpy>
c000bc23:	90                   	nop

c000bc24 <Device::Device(char const*)>:
c000bc24:	83 ec 1c             	sub    esp,0x1c
c000bc27:	ba b0 fc 01 c0       	mov    edx,0xc001fcb0
c000bc2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc30:	89 10                	mov    DWORD PTR [eax],edx
c000bc32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc36:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bc40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc44:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc52:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc60:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc6a:	83 ec 08             	sub    esp,0x8
c000bc6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc75:	e8 9c ff ff ff       	call   c000bc16 <Device::setName(char const*)>
c000bc7a:	83 c4 10             	add    esp,0x10
c000bc7d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bc85:	83 ec 0c             	sub    esp,0xc
c000bc88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc8c:	e8 d2 bb ff ff       	call   c0007863 <malloc>
c000bc91:	83 c4 10             	add    esp,0x10
c000bc94:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bca1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bca5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bcab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcaf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bcb5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bcbb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcbf:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bcc5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcd0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bcd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcdb:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bce2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bce6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bcf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcf4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bcfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd02:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bd0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd10:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000bd1a:	90                   	nop
c000bd1b:	83 c4 1c             	add    esp,0x1c
c000bd1e:	c3                   	ret    
c000bd1f:	90                   	nop

c000bd20 <Device::getName()>:
c000bd20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd24:	05 d0 00 00 00       	add    eax,0xd0
c000bd29:	c3                   	ret    

c000bd2a <DriverlessDevice::DriverlessDevice(char const*)>:
c000bd2a:	83 ec 0c             	sub    esp,0xc
c000bd2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd31:	83 ec 08             	sub    esp,0x8
c000bd34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd38:	50                   	push   eax
c000bd39:	e8 e6 fe ff ff       	call   c000bc24 <Device::Device(char const*)>
c000bd3e:	83 c4 10             	add    esp,0x10
c000bd41:	ba dc fc 01 c0       	mov    edx,0xc001fcdc
c000bd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd4a:	89 10                	mov    DWORD PTR [eax],edx
c000bd4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd50:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bd5a:	90                   	nop
c000bd5b:	83 c4 0c             	add    esp,0xc
c000bd5e:	c3                   	ret    
c000bd5f:	90                   	nop

c000bd60 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bd60:	57                   	push   edi
c000bd61:	56                   	push   esi
c000bd62:	53                   	push   ebx
c000bd63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd67:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd6b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd6f:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bd75:	75 0c                	jne    c000bd83 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bd77:	52                   	push   edx
c000bd78:	52                   	push   edx
c000bd79:	53                   	push   ebx
c000bd7a:	56                   	push   esi
c000bd7b:	e8 02 26 01 00       	call   c001e382 <LinkedList<Device>::addElement(Device*)>
c000bd80:	83 c4 10             	add    esp,0x10
c000bd83:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bd89:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bd8c:	74 12                	je     c000bda0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bd8e:	50                   	push   eax
c000bd8f:	57                   	push   edi
c000bd90:	56                   	push   esi
c000bd91:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bd94:	e8 c7 ff ff ff       	call   c000bd60 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bd9b:	83 c4 10             	add    esp,0x10
c000bd9e:	eb e9                	jmp    c000bd89 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bda0:	5b                   	pop    ebx
c000bda1:	5e                   	pop    esi
c000bda2:	5f                   	pop    edi
c000bda3:	c3                   	ret    

c000bda4 <getDevicesOfType(DeviceType)>:
c000bda4:	53                   	push   ebx
c000bda5:	83 ec 14             	sub    esp,0x14
c000bda8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bdac:	53                   	push   ebx
c000bdad:	e8 ac 26 01 00       	call   c001e45e <LinkedList<Device>::LinkedList()>
c000bdb2:	83 c4 0c             	add    esp,0xc
c000bdb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdb9:	53                   	push   ebx
c000bdba:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000bdc0:	e8 9b ff ff ff       	call   c000bd60 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bdc5:	83 c4 18             	add    esp,0x18
c000bdc8:	89 d8                	mov    eax,ebx
c000bdca:	5b                   	pop    ebx
c000bdcb:	c2 04 00             	ret    0x4
c000bdce:	66 90                	xchg   ax,ax

c000bdd0 <HardDiskController::HardDiskController(char const*)>:
c000bdd0:	83 ec 0c             	sub    esp,0xc
c000bdd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdd7:	83 ec 08             	sub    esp,0x8
c000bdda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdde:	50                   	push   eax
c000bddf:	e8 40 fe ff ff       	call   c000bc24 <Device::Device(char const*)>
c000bde4:	83 c4 10             	add    esp,0x10
c000bde7:	ba 08 fd 01 c0       	mov    edx,0xc001fd08
c000bdec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdf0:	89 10                	mov    DWORD PTR [eax],edx
c000bdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdf6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000be00:	90                   	nop
c000be01:	83 c4 0c             	add    esp,0xc
c000be04:	c3                   	ret    
c000be05:	90                   	nop
c000be06:	66 90                	xchg   ax,ax

c000be08 <HardDiskController::~HardDiskController()>:
c000be08:	83 ec 0c             	sub    esp,0xc
c000be0b:	ba 08 fd 01 c0       	mov    edx,0xc001fd08
c000be10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be14:	89 10                	mov    DWORD PTR [eax],edx
c000be16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be1a:	83 ec 0c             	sub    esp,0xc
c000be1d:	50                   	push   eax
c000be1e:	e8 6f fb ff ff       	call   c000b992 <Device::~Device()>
c000be23:	83 c4 10             	add    esp,0x10
c000be26:	90                   	nop
c000be27:	83 c4 0c             	add    esp,0xc
c000be2a:	c3                   	ret    
c000be2b:	90                   	nop

c000be2c <HardDiskController::~HardDiskController()>:
c000be2c:	83 ec 0c             	sub    esp,0xc
c000be2f:	83 ec 0c             	sub    esp,0xc
c000be32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be36:	e8 cd ff ff ff       	call   c000be08 <HardDiskController::~HardDiskController()>
c000be3b:	83 c4 10             	add    esp,0x10
c000be3e:	83 ec 08             	sub    esp,0x8
c000be41:	68 58 01 00 00       	push   0x158
c000be46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be4a:	e8 0e e7 ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c000be4f:	83 c4 10             	add    esp,0x10
c000be52:	83 c4 0c             	add    esp,0xc
c000be55:	c3                   	ret    

c000be56 <PhysicalDisk::eject()>:
c000be56:	83 c8 ff             	or     eax,0xffffffff
c000be59:	c3                   	ret    

c000be5a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000be5a:	83 ec 0c             	sub    esp,0xc
c000be5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be61:	83 ec 08             	sub    esp,0x8
c000be64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be68:	50                   	push   eax
c000be69:	e8 b6 fd ff ff       	call   c000bc24 <Device::Device(char const*)>
c000be6e:	83 c4 10             	add    esp,0x10
c000be71:	ba 34 fd 01 c0       	mov    edx,0xc001fd34
c000be76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be7a:	89 10                	mov    DWORD PTR [eax],edx
c000be7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be80:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be8b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000be92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be96:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bea4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bea8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000beae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beb2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bebc:	90                   	nop
c000bebd:	83 c4 0c             	add    esp,0xc
c000bec0:	c3                   	ret    
c000bec1:	90                   	nop

c000bec2 <PhysicalDisk::startCache()>:
c000bec2:	56                   	push   esi
c000bec3:	53                   	push   ebx
c000bec4:	83 ec 10             	sub    esp,0x10
c000bec7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000becb:	6a 44                	push   0x44
c000becd:	e8 91 b9 ff ff       	call   c0007863 <malloc>
c000bed2:	89 c6                	mov    esi,eax
c000bed4:	58                   	pop    eax
c000bed5:	5a                   	pop    edx
c000bed6:	53                   	push   ebx
c000bed7:	56                   	push   esi
c000bed8:	e8 9f 16 00 00       	call   c000d57c <VCache::VCache(PhysicalDisk*)>
c000bedd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bee3:	83 c4 14             	add    esp,0x14
c000bee6:	5b                   	pop    ebx
c000bee7:	5e                   	pop    esi
c000bee8:	c3                   	ret    
c000bee9:	90                   	nop

c000beea <PhysicalDisk::~PhysicalDisk()>:
c000beea:	83 ec 0c             	sub    esp,0xc
c000beed:	ba 34 fd 01 c0       	mov    edx,0xc001fd34
c000bef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bef6:	89 10                	mov    DWORD PTR [eax],edx
c000bef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000befc:	83 ec 0c             	sub    esp,0xc
c000beff:	50                   	push   eax
c000bf00:	e8 8d fa ff ff       	call   c000b992 <Device::~Device()>
c000bf05:	83 c4 10             	add    esp,0x10
c000bf08:	90                   	nop
c000bf09:	83 c4 0c             	add    esp,0xc
c000bf0c:	c3                   	ret    
c000bf0d:	90                   	nop

c000bf0e <PhysicalDisk::~PhysicalDisk()>:
c000bf0e:	83 ec 0c             	sub    esp,0xc
c000bf11:	83 ec 0c             	sub    esp,0xc
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 cd ff ff ff       	call   c000beea <PhysicalDisk::~PhysicalDisk()>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	83 ec 08             	sub    esp,0x8
c000bf23:	68 6c 01 00 00       	push   0x16c
c000bf28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf2c:	e8 2c e6 ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c000bf31:	83 c4 10             	add    esp,0x10
c000bf34:	83 c4 0c             	add    esp,0xc
c000bf37:	c3                   	ret    

c000bf38 <int_handler>:
c000bf38:	55                   	push   ebp
c000bf39:	57                   	push   edi
c000bf3a:	56                   	push   esi
c000bf3b:	53                   	push   ebx
c000bf3c:	83 ec 0c             	sub    esp,0xc
c000bf3f:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf46:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bf4a:	74 0b                	je     c000bf57 <int_handler+0x1f>
c000bf4c:	fa                   	cli    
c000bf4d:	f4                   	hlt    
c000bf4e:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf55:	75 f5                	jne    c000bf4c <int_handler+0x14>
c000bf57:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bf5a:	8d 46 e0             	lea    eax,[esi-0x20]
c000bf5d:	83 f8 17             	cmp    eax,0x17
c000bf60:	76 3d                	jbe    c000bf9f <int_handler+0x67>
c000bf62:	c1 e6 04             	shl    esi,0x4
c000bf65:	31 db                	xor    ebx,ebx
c000bf67:	8d ae c0 4f 02 c0    	lea    ebp,[esi-0x3ffdb040]
c000bf6d:	81 c6 c0 3f 02 c0    	add    esi,0xc0023fc0
c000bf73:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bf77:	85 c0                	test   eax,eax
c000bf79:	74 12                	je     c000bf8d <int_handler+0x55>
c000bf7b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bf7e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bf82:	74 29                	je     c000bfad <int_handler+0x75>
c000bf84:	51                   	push   ecx
c000bf85:	51                   	push   ecx
c000bf86:	52                   	push   edx
c000bf87:	57                   	push   edi
c000bf88:	ff d0                	call   eax
c000bf8a:	83 c4 10             	add    esp,0x10
c000bf8d:	43                   	inc    ebx
c000bf8e:	83 fb 04             	cmp    ebx,0x4
c000bf91:	75 e0                	jne    c000bf73 <int_handler+0x3b>
c000bf93:	83 c4 0c             	add    esp,0xc
c000bf96:	31 c0                	xor    eax,eax
c000bf98:	31 d2                	xor    edx,edx
c000bf9a:	5b                   	pop    ebx
c000bf9b:	5e                   	pop    esi
c000bf9c:	5f                   	pop    edi
c000bf9d:	5d                   	pop    ebp
c000bf9e:	c3                   	ret    
c000bf9f:	83 ec 0c             	sub    esp,0xc
c000bfa2:	50                   	push   eax
c000bfa3:	e8 1e ad 00 00       	call   c0016cc6 <HalEndOfInterrupt(int)>
c000bfa8:	83 c4 10             	add    esp,0x10
c000bfab:	eb b5                	jmp    c000bf62 <int_handler+0x2a>
c000bfad:	53                   	push   ebx
c000bfae:	53                   	push   ebx
c000bfaf:	52                   	push   edx
c000bfb0:	57                   	push   edi
c000bfb1:	ff d0                	call   eax
c000bfb3:	83 c4 10             	add    esp,0x10
c000bfb6:	83 c4 0c             	add    esp,0xc
c000bfb9:	5b                   	pop    ebx
c000bfba:	5e                   	pop    esi
c000bfbb:	5f                   	pop    edi
c000bfbc:	5d                   	pop    ebp
c000bfbd:	c3                   	ret    

c000bfbe <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bfbe:	56                   	push   esi
c000bfbf:	31 c0                	xor    eax,eax
c000bfc1:	53                   	push   ebx
c000bfc2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bfc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bfca:	89 ca                	mov    edx,ecx
c000bfcc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bfd0:	c1 e2 04             	shl    edx,0x4
c000bfd3:	83 bc 82 c0 4f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdb040],0x0
c000bfdb:	74 15                	je     c000bff2 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bfdd:	40                   	inc    eax
c000bfde:	83 f8 04             	cmp    eax,0x4
c000bfe1:	75 f0                	jne    c000bfd3 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bfe3:	c7 44 24 0c 64 fd 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fd64
c000bfeb:	5b                   	pop    ebx
c000bfec:	5e                   	pop    esi
c000bfed:	e9 15 44 00 00       	jmp    c0010407 <KePanic(char const*)>
c000bff2:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bff5:	89 1c 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],ebx
c000bffc:	5b                   	pop    ebx
c000bffd:	89 34 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],esi
c000c004:	5e                   	pop    esi
c000c005:	c3                   	ret    

c000c006 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c006:	57                   	push   edi
c000c007:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000c00d:	56                   	push   esi
c000c00e:	53                   	push   ebx
c000c00f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c013:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c017:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c01e:	74 5b                	je     c000c07b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c020:	89 c7                	mov    edi,eax
c000c022:	84 c0                	test   al,al
c000c024:	74 24                	je     c000c04a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c026:	83 fe 0f             	cmp    esi,0xf
c000c029:	0f 8f d6 00 00 00    	jg     c000c105 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xff>
c000c02f:	8a 86 a0 17 02 c0    	mov    al,BYTE PTR [esi-0x3ffde860]
c000c035:	25 ff 00 00 00       	and    eax,0xff
c000c03a:	89 c6                	mov    esi,eax
c000c03c:	66 8b bc 00 60 67 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffd98a0]
c000c044:	66 d1 ef             	shr    di,1
c000c047:	83 e7 01             	and    edi,0x1
c000c04a:	50                   	push   eax
c000c04b:	31 db                	xor    ebx,ebx
c000c04d:	50                   	push   eax
c000c04e:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c000c053:	50                   	push   eax
c000c054:	68 71 fd 01 c0       	push   0xc001fd71
c000c059:	e8 f5 e5 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c000c05e:	8b 15 60 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b60
c000c064:	83 c4 10             	add    esp,0x10
c000c067:	85 d2                	test   edx,edx
c000c069:	7f 4f                	jg     c000c0ba <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb4>
c000c06b:	83 ec 0c             	sub    esp,0xc
c000c06e:	68 88 fd 01 c0       	push   0xc001fd88
c000c073:	e8 8f 43 00 00       	call   c0010407 <KePanic(char const*)>
c000c078:	83 c4 10             	add    esp,0x10
c000c07b:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c07e:	31 d2                	xor    edx,edx
c000c080:	89 c8                	mov    eax,ecx
c000c082:	c1 e0 04             	shl    eax,0x4
c000c085:	8b 9c 90 c0 4f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdb040]
c000c08c:	85 db                	test   ebx,ebx
c000c08e:	0f 84 88 00 00 00    	je     c000c11c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x116>
c000c094:	42                   	inc    edx
c000c095:	83 fa 04             	cmp    edx,0x4
c000c098:	75 eb                	jne    c000c085 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c09a:	83 ec 0c             	sub    esp,0xc
c000c09d:	68 dc fd 01 c0       	push   0xc001fddc
c000c0a2:	e8 60 43 00 00       	call   c0010407 <KePanic(char const*)>
c000c0a7:	83 c4 10             	add    esp,0x10
c000c0aa:	83 c8 ff             	or     eax,0xffffffff
c000c0ad:	5b                   	pop    ebx
c000c0ae:	5e                   	pop    esi
c000c0af:	5f                   	pop    edi
c000c0b0:	c3                   	ret    
c000c0b1:	43                   	inc    ebx
c000c0b2:	39 1d 60 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b60,ebx
c000c0b8:	7e b1                	jle    c000c06b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c0ba:	50                   	push   eax
c000c0bb:	50                   	push   eax
c000c0bc:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c0c3:	56                   	push   esi
c000c0c4:	50                   	push   eax
c000c0c5:	e8 d2 11 01 00       	call   c001d29c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c0ca:	83 c4 10             	add    esp,0x10
c000c0cd:	84 c0                	test   al,al
c000c0cf:	74 e0                	je     c000c0b1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xab>
c000c0d1:	81 e7 ff 00 00 00    	and    edi,0xff
c000c0d7:	50                   	push   eax
c000c0d8:	57                   	push   edi
c000c0d9:	8d 46 20             	lea    eax,[esi+0x20]
c000c0dc:	6a 00                	push   0x0
c000c0de:	25 ff 00 00 00       	and    eax,0xff
c000c0e3:	50                   	push   eax
c000c0e4:	89 f0                	mov    eax,esi
c000c0e6:	6a 00                	push   0x0
c000c0e8:	25 ff 00 00 00       	and    eax,0xff
c000c0ed:	6a 00                	push   0x0
c000c0ef:	50                   	push   eax
c000c0f0:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c0f7:	50                   	push   eax
c000c0f8:	e8 19 13 01 00       	call   c001d416 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c0fd:	83 c4 20             	add    esp,0x20
c000c100:	e9 76 ff ff ff       	jmp    c000c07b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c105:	83 ec 0c             	sub    esp,0xc
c000c108:	31 ff                	xor    edi,edi
c000c10a:	68 a4 fd 01 c0       	push   0xc001fda4
c000c10f:	e8 f3 42 00 00       	call   c0010407 <KePanic(char const*)>
c000c114:	83 c4 10             	add    esp,0x10
c000c117:	e9 2e ff ff ff       	jmp    c000c04a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c11c:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c11f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c123:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c12a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c12e:	5b                   	pop    ebx
c000c12f:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c000c136:	89 f0                	mov    eax,esi
c000c138:	5e                   	pop    esi
c000c139:	5f                   	pop    edi
c000c13a:	c3                   	ret    

c000c13b <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c13b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c13f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c143:	c1 e0 04             	shl    eax,0x4
c000c146:	8d 50 10             	lea    edx,[eax+0x10]
c000c149:	39 88 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ecx
c000c14f:	74 08                	je     c000c159 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c151:	83 c0 04             	add    eax,0x4
c000c154:	39 d0                	cmp    eax,edx
c000c156:	75 f1                	jne    c000c149 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c158:	c3                   	ret    
c000c159:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c163:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c16d:	eb e2                	jmp    c000c151 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c16f <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c16f:	53                   	push   ebx
c000c170:	83 ec 08             	sub    esp,0x8
c000c173:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c177:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c17c:	74 0e                	je     c000c18c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c17e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000c183:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c18a:	75 37                	jne    c000c1c3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c18c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c190:	83 c0 20             	add    eax,0x20
c000c193:	c1 e0 04             	shl    eax,0x4
c000c196:	8d 50 10             	lea    edx,[eax+0x10]
c000c199:	39 98 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ebx
c000c19f:	74 0c                	je     c000c1ad <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c1a1:	83 c0 04             	add    eax,0x4
c000c1a4:	39 d0                	cmp    eax,edx
c000c1a6:	75 f1                	jne    c000c199 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c1a8:	83 c4 08             	add    esp,0x8
c000c1ab:	5b                   	pop    ebx
c000c1ac:	c3                   	ret    
c000c1ad:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c1b7:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c1c1:	eb de                	jmp    c000c1a1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c1c3:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c1c8:	7f 12                	jg     c000c1dc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c1ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c1ce:	31 c0                	xor    eax,eax
c000c1d0:	8a 81 a0 17 02 c0    	mov    al,BYTE PTR [ecx-0x3ffde860]
c000c1d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1da:	eb b0                	jmp    c000c18c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c1dc:	83 ec 0c             	sub    esp,0xc
c000c1df:	68 95 fd 01 c0       	push   0xc001fd95
c000c1e4:	e8 1e 42 00 00       	call   c0010407 <KePanic(char const*)>
c000c1e9:	83 c4 10             	add    esp,0x10
c000c1ec:	eb 9e                	jmp    c000c18c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c1ee <setupINTS()>:
c000c1ee:	31 c0                	xor    eax,eax
c000c1f0:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c1fa:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c204:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c20e:	c7 80 c4 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc03c],0x0
c000c218:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c222:	c7 80 c8 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc038],0x0
c000c22c:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c236:	c7 80 cc 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc034],0x0
c000c240:	83 c0 10             	add    eax,0x10
c000c243:	3d 00 10 00 00       	cmp    eax,0x1000
c000c248:	75 a6                	jne    c000c1f0 <setupINTS()+0x2>
c000c24a:	c3                   	ret    

c000c24b <convertLegacyIRQNumber(int)>:
c000c24b:	83 ec 0c             	sub    esp,0xc
c000c24e:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000c254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c258:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c25f:	74 0f                	je     c000c270 <convertLegacyIRQNumber(int)+0x25>
c000c261:	83 f8 0f             	cmp    eax,0xf
c000c264:	7f 0e                	jg     c000c274 <convertLegacyIRQNumber(int)+0x29>
c000c266:	31 c9                	xor    ecx,ecx
c000c268:	8a 88 a0 17 02 c0    	mov    cl,BYTE PTR [eax-0x3ffde860]
c000c26e:	89 c8                	mov    eax,ecx
c000c270:	83 c4 0c             	add    esp,0xc
c000c273:	c3                   	ret    
c000c274:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c278:	83 ec 0c             	sub    esp,0xc
c000c27b:	68 a4 fd 01 c0       	push   0xc001fda4
c000c280:	e8 82 41 00 00       	call   c0010407 <KePanic(char const*)>
c000c285:	83 c4 10             	add    esp,0x10
c000c288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c28c:	83 c4 0c             	add    esp,0xc
c000c28f:	c3                   	ret    

c000c290 <startGUI(void*)>:
c000c290:	55                   	push   ebp
c000c291:	89 e5                	mov    ebp,esp
c000c293:	53                   	push   ebx
c000c294:	83 ec 04             	sub    esp,0x4
c000c297:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c29c:	48                   	dec    eax
c000c29d:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c2a2:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2a7:	85 c0                	test   eax,eax
c000c2a9:	75 01                	jne    c000c2ac <startGUI(void*)+0x1c>
c000c2ab:	fb                   	sti    
c000c2ac:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c2b2:	83 ec 08             	sub    esp,0x8
c000c2b5:	6a 01                	push   0x1
c000c2b7:	68 01 fe 01 c0       	push   0xc001fe01
c000c2bc:	e8 27 7e 00 00       	call   c00140e8 <Thr::loadDLL(char const*, bool)>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	83 ec 08             	sub    esp,0x8
c000c2c7:	53                   	push   ebx
c000c2c8:	50                   	push   eax
c000c2c9:	e8 4f 80 00 00       	call   c001431d <Thr::executeDLL(unsigned long, void*)>
c000c2ce:	83 c4 10             	add    esp,0x10
c000c2d1:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c2d7:	83 ec 08             	sub    esp,0x8
c000c2da:	6a 01                	push   0x1
c000c2dc:	68 1b fe 01 c0       	push   0xc001fe1b
c000c2e1:	e8 02 7e 00 00       	call   c00140e8 <Thr::loadDLL(char const*, bool)>
c000c2e6:	83 c4 10             	add    esp,0x10
c000c2e9:	83 ec 08             	sub    esp,0x8
c000c2ec:	53                   	push   ebx
c000c2ed:	50                   	push   eax
c000c2ee:	e8 2a 80 00 00       	call   c001431d <Thr::executeDLL(unsigned long, void*)>
c000c2f3:	83 c4 10             	add    esp,0x10
c000c2f6:	90                   	nop
c000c2f7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c2fa:	c9                   	leave  
c000c2fb:	c3                   	ret    

c000c2fc <startGUIVESA(void*)>:
c000c2fc:	55                   	push   ebp
c000c2fd:	89 e5                	mov    ebp,esp
c000c2ff:	53                   	push   ebx
c000c300:	83 ec 04             	sub    esp,0x4
c000c303:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c308:	48                   	dec    eax
c000c309:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c30e:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c313:	85 c0                	test   eax,eax
c000c315:	75 01                	jne    c000c318 <startGUIVESA(void*)+0x1c>
c000c317:	fb                   	sti    
c000c318:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c31e:	83 ec 08             	sub    esp,0x8
c000c321:	6a 01                	push   0x1
c000c323:	68 39 fe 01 c0       	push   0xc001fe39
c000c328:	e8 bb 7d 00 00       	call   c00140e8 <Thr::loadDLL(char const*, bool)>
c000c32d:	83 c4 10             	add    esp,0x10
c000c330:	83 ec 08             	sub    esp,0x8
c000c333:	53                   	push   ebx
c000c334:	50                   	push   eax
c000c335:	e8 e3 7f 00 00       	call   c001431d <Thr::executeDLL(unsigned long, void*)>
c000c33a:	83 c4 10             	add    esp,0x10
c000c33d:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c343:	83 ec 08             	sub    esp,0x8
c000c346:	6a 01                	push   0x1
c000c348:	68 1b fe 01 c0       	push   0xc001fe1b
c000c34d:	e8 96 7d 00 00       	call   c00140e8 <Thr::loadDLL(char const*, bool)>
c000c352:	83 c4 10             	add    esp,0x10
c000c355:	83 ec 08             	sub    esp,0x8
c000c358:	53                   	push   ebx
c000c359:	50                   	push   eax
c000c35a:	e8 be 7f 00 00       	call   c001431d <Thr::executeDLL(unsigned long, void*)>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	90                   	nop
c000c363:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c366:	c9                   	leave  
c000c367:	c3                   	ret    

c000c368 <sendKeyToTerminal(unsigned char)>:
c000c368:	55                   	push   ebp
c000c369:	89 e5                	mov    ebp,esp
c000c36b:	83 ec 28             	sub    esp,0x28
c000c36e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c371:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c374:	8b 15 04 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f04
c000c37a:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c37d:	25 ff 00 00 00       	and    eax,0xff
c000c382:	83 ec 08             	sub    esp,0x8
c000c385:	50                   	push   eax
c000c386:	52                   	push   edx
c000c387:	e8 8e c7 ff ff       	call   c0008b1a <VgaText::receiveKey(unsigned char)>
c000c38c:	83 c4 10             	add    esp,0x10
c000c38f:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c393:	74 10                	je     c000c3a5 <sendKeyToTerminal(unsigned char)+0x3d>
c000c395:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c399:	74 0a                	je     c000c3a5 <sendKeyToTerminal(unsigned char)+0x3d>
c000c39b:	80 7d e4 1c          	cmp    BYTE PTR [ebp-0x1c],0x1c
c000c39f:	0f 85 8f 00 00 00    	jne    c000c434 <sendKeyToTerminal(unsigned char)+0xcc>
c000c3a5:	fa                   	cli    
c000c3a6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c3ab:	40                   	inc    eax
c000c3ac:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c3b1:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3b6:	40                   	inc    eax
c000c3b7:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c3bc:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000c3c1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c3c4:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000c3ce:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c3d2:	74 1f                	je     c000c3f3 <sendKeyToTerminal(unsigned char)+0x8b>
c000c3d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c3d7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c3da:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c3dd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c3e0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c3e3:	83 ec 0c             	sub    esp,0xc
c000c3e6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c3e9:	e8 42 8c 00 00       	call   c0015030 <unblockTask(ThreadControlBlock*)>
c000c3ee:	83 c4 10             	add    esp,0x10
c000c3f1:	eb db                	jmp    c000c3ce <sendKeyToTerminal(unsigned char)+0x66>
c000c3f3:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3f8:	48                   	dec    eax
c000c3f9:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c3fe:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c403:	85 c0                	test   eax,eax
c000c405:	75 18                	jne    c000c41f <sendKeyToTerminal(unsigned char)+0xb7>
c000c407:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c000c40c:	85 c0                	test   eax,eax
c000c40e:	74 0f                	je     c000c41f <sendKeyToTerminal(unsigned char)+0xb7>
c000c410:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000c41a:	e8 31 87 00 00       	call   c0014b50 <schedule()>
c000c41f:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c424:	48                   	dec    eax
c000c425:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c42a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c42f:	85 c0                	test   eax,eax
c000c431:	75 01                	jne    c000c434 <sendKeyToTerminal(unsigned char)+0xcc>
c000c433:	fb                   	sti    
c000c434:	90                   	nop
c000c435:	c9                   	leave  
c000c436:	c3                   	ret    

c000c437 <sendKeyboardToken(KeyboardToken)>:
c000c437:	55                   	push   ebp
c000c438:	89 e5                	mov    ebp,esp
c000c43a:	83 ec 18             	sub    esp,0x18
c000c43d:	e8 15 40 00 00       	call   c0010457 <Krnl::userIOReceived()>
c000c442:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c448:	25 ff ff 00 00       	and    eax,0xffff
c000c44d:	83 f2 01             	xor    edx,0x1
c000c450:	88 90 e0 5f 02 c0    	mov    BYTE PTR [eax-0x3ffda020],dl
c000c456:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c45b:	85 c0                	test   eax,eax
c000c45d:	74 24                	je     c000c483 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c45f:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c465:	83 ec 04             	sub    esp,0x4
c000c468:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c46d:	83 ec 08             	sub    esp,0x8
c000c470:	89 e2                	mov    edx,esp
c000c472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c475:	89 02                	mov    DWORD PTR [edx],eax
c000c477:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c47a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c47e:	ff d1                	call   ecx
c000c480:	83 c4 10             	add    esp,0x10
c000c483:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c487:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c48a:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c48f:	38 c2                	cmp    dl,al
c000c491:	74 1e                	je     c000c4b1 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c493:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c496:	a2 e8 63 02 c0       	mov    ds:0xc00263e8,al
c000c49b:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c4a0:	25 ff 00 00 00       	and    eax,0xff
c000c4a5:	83 ec 0c             	sub    esp,0xc
c000c4a8:	50                   	push   eax
c000c4a9:	e8 c0 bd ff ff       	call   c000826e <setTerminalScrollLock(bool)>
c000c4ae:	83 c4 10             	add    esp,0x10
c000c4b1:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c4b4:	84 c0                	test   al,al
c000c4b6:	0f 84 ae 00 00 00    	je     c000c56a <sendKeyboardToken(KeyboardToken)+0x133>
c000c4bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4bf:	66 3d 18 03          	cmp    ax,0x318
c000c4c3:	75 06                	jne    c000c4cb <sendKeyboardToken(KeyboardToken)+0x94>
c000c4c5:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c4cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ce:	66 3d 19 03          	cmp    ax,0x319
c000c4d2:	75 06                	jne    c000c4da <sendKeyboardToken(KeyboardToken)+0xa3>
c000c4d4:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c4da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4dd:	66 3d 1a 03          	cmp    ax,0x31a
c000c4e1:	75 06                	jne    c000c4e9 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c4e3:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c4e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ec:	66 3d 1b 03          	cmp    ax,0x31b
c000c4f0:	75 06                	jne    c000c4f8 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c4f2:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c4f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4fb:	66 3d 1c 03          	cmp    ax,0x31c
c000c4ff:	75 06                	jne    c000c507 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c501:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c50a:	66 3d 1d 03          	cmp    ax,0x31d
c000c50e:	75 06                	jne    c000c516 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c510:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c519:	66 3d 1e 03          	cmp    ax,0x31e
c000c51d:	75 06                	jne    c000c525 <sendKeyboardToken(KeyboardToken)+0xee>
c000c51f:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c528:	66 3d 1f 03          	cmp    ax,0x31f
c000c52c:	75 06                	jne    c000c534 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c52e:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c537:	66 3d 20 03          	cmp    ax,0x320
c000c53b:	75 06                	jne    c000c543 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c53d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c543:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c546:	66 3d 21 03          	cmp    ax,0x321
c000c54a:	75 06                	jne    c000c552 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c54c:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c555:	66 3d 22 03          	cmp    ax,0x322
c000c559:	0f 85 c9 00 00 00    	jne    c000c628 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c55f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c565:	e9 be 00 00 00       	jmp    c000c628 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c56a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c56d:	66 3d 18 03          	cmp    ax,0x318
c000c571:	75 0a                	jne    c000c57d <sendKeyboardToken(KeyboardToken)+0x146>
c000c573:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c579:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c57d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c580:	66 3d 19 03          	cmp    ax,0x319
c000c584:	75 0a                	jne    c000c590 <sendKeyboardToken(KeyboardToken)+0x159>
c000c586:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c58c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c590:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c593:	66 3d 1a 03          	cmp    ax,0x31a
c000c597:	75 0a                	jne    c000c5a3 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c599:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c59f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5a6:	66 3d 1b 03          	cmp    ax,0x31b
c000c5aa:	75 0a                	jne    c000c5b6 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c5ac:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c5b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5b9:	66 3d 1c 03          	cmp    ax,0x31c
c000c5bd:	75 0a                	jne    c000c5c9 <sendKeyboardToken(KeyboardToken)+0x192>
c000c5bf:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c5c5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5cc:	66 3d 1d 03          	cmp    ax,0x31d
c000c5d0:	75 0a                	jne    c000c5dc <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c5d2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c5d8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5df:	66 3d 1e 03          	cmp    ax,0x31e
c000c5e3:	75 0a                	jne    c000c5ef <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c5e5:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c5eb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5f2:	66 3d 1f 03          	cmp    ax,0x31f
c000c5f6:	75 0a                	jne    c000c602 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c5f8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c5fe:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c602:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c605:	66 3d 20 03          	cmp    ax,0x320
c000c609:	75 0a                	jne    c000c615 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c60b:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c611:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c615:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c618:	66 3d 21 03          	cmp    ax,0x321
c000c61c:	75 0a                	jne    c000c628 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c61e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c624:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c62b:	66 3d 00 02          	cmp    ax,0x200
c000c62f:	75 2c                	jne    c000c65d <sendKeyboardToken(KeyboardToken)+0x226>
c000c631:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c636:	83 f0 01             	xor    eax,0x1
c000c639:	84 c0                	test   al,al
c000c63b:	74 20                	je     c000c65d <sendKeyboardToken(KeyboardToken)+0x226>
c000c63d:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c642:	6a 01                	push   0x1
c000c644:	6a 00                	push   0x0
c000c646:	68 90 c2 00 c0       	push   0xc000c290
c000c64b:	50                   	push   eax
c000c64c:	e8 b3 82 00 00       	call   c0014904 <Process::createThread(void (*)(void*), void*, int)>
c000c651:	83 c4 10             	add    esp,0x10
c000c654:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c65b:	eb 33                	jmp    c000c690 <sendKeyboardToken(KeyboardToken)+0x259>
c000c65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c660:	66 3d 01 02          	cmp    ax,0x201
c000c664:	75 2a                	jne    c000c690 <sendKeyboardToken(KeyboardToken)+0x259>
c000c666:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c66b:	83 f0 01             	xor    eax,0x1
c000c66e:	84 c0                	test   al,al
c000c670:	74 1e                	je     c000c690 <sendKeyboardToken(KeyboardToken)+0x259>
c000c672:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c677:	6a 01                	push   0x1
c000c679:	6a 00                	push   0x0
c000c67b:	68 fc c2 00 c0       	push   0xc000c2fc
c000c680:	50                   	push   eax
c000c681:	e8 7e 82 00 00       	call   c0014904 <Process::createThread(void (*)(void*), void*, int)>
c000c686:	83 c4 10             	add    esp,0x10
c000c689:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c690:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c693:	66 3d 25 03          	cmp    ax,0x325
c000c697:	75 06                	jne    c000c69f <sendKeyboardToken(KeyboardToken)+0x268>
c000c699:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c69f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6a2:	66 3d 24 03          	cmp    ax,0x324
c000c6a6:	75 06                	jne    c000c6ae <sendKeyboardToken(KeyboardToken)+0x277>
c000c6a8:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c6ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b1:	66 3d 23 03          	cmp    ax,0x323
c000c6b5:	75 06                	jne    c000c6bd <sendKeyboardToken(KeyboardToken)+0x286>
c000c6b7:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c6bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c0:	66 3d 26 03          	cmp    ax,0x326
c000c6c4:	75 06                	jne    c000c6cc <sendKeyboardToken(KeyboardToken)+0x295>
c000c6c6:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c6cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6cf:	66 3d 27 03          	cmp    ax,0x327
c000c6d3:	75 06                	jne    c000c6db <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c6d5:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c6db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6de:	66 3d 22 03          	cmp    ax,0x322
c000c6e2:	75 06                	jne    c000c6ea <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c6e4:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c6ea:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c6ee:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6f1:	83 f0 01             	xor    eax,0x1
c000c6f4:	84 c0                	test   al,al
c000c6f6:	74 7b                	je     c000c773 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c6f8:	a0 e1 60 02 c0       	mov    al,ds:0xc00260e1
c000c6fd:	84 c0                	test   al,al
c000c6ff:	74 43                	je     c000c744 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c701:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c705:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c709:	74 2d                	je     c000c738 <sendKeyboardToken(KeyboardToken)+0x301>
c000c70b:	8b 15 e4 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263e4
c000c711:	89 d0                	mov    eax,edx
c000c713:	c1 e0 02             	shl    eax,0x2
c000c716:	01 d0                	add    eax,edx
c000c718:	01 c0                	add    eax,eax
c000c71a:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c71f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c722:	25 ff ff 00 00       	and    eax,0xffff
c000c727:	8d 50 d0             	lea    edx,[eax-0x30]
c000c72a:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c72f:	01 d0                	add    eax,edx
c000c731:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c736:	eb 71                	jmp    c000c7a9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c738:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c742:	eb 65                	jmp    c000c7a9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c744:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c749:	85 c0                	test   eax,eax
c000c74b:	74 1a                	je     c000c767 <sendKeyboardToken(KeyboardToken)+0x330>
c000c74d:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c752:	25 ff 00 00 00       	and    eax,0xff
c000c757:	83 ec 0c             	sub    esp,0xc
c000c75a:	50                   	push   eax
c000c75b:	e8 08 fc ff ff       	call   c000c368 <sendKeyToTerminal(unsigned char)>
c000c760:	83 c4 10             	add    esp,0x10
c000c763:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c767:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c771:	eb 36                	jmp    c000c7a9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c773:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c776:	66 3d 01 01          	cmp    ax,0x101
c000c77a:	75 2d                	jne    c000c7a9 <sendKeyboardToken(KeyboardToken)+0x372>
c000c77c:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c781:	85 c0                	test   eax,eax
c000c783:	74 1a                	je     c000c79f <sendKeyboardToken(KeyboardToken)+0x368>
c000c785:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c78a:	25 ff 00 00 00       	and    eax,0xff
c000c78f:	83 ec 0c             	sub    esp,0xc
c000c792:	50                   	push   eax
c000c793:	e8 d0 fb ff ff       	call   c000c368 <sendKeyToTerminal(unsigned char)>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c79f:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c7a9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c7ac:	83 f0 01             	xor    eax,0x1
c000c7af:	84 c0                	test   al,al
c000c7b1:	74 4e                	je     c000c801 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7b3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7b6:	83 f0 01             	xor    eax,0x1
c000c7b9:	84 c0                	test   al,al
c000c7bb:	74 44                	je     c000c801 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7bd:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c7c2:	83 f0 01             	xor    eax,0x1
c000c7c5:	84 c0                	test   al,al
c000c7c7:	74 38                	je     c000c801 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7cc:	66 83 f8 1f          	cmp    ax,0x1f
c000c7d0:	76 09                	jbe    c000c7db <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c7d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7d5:	66 83 f8 7e          	cmp    ax,0x7e
c000c7d9:	76 12                	jbe    c000c7ed <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c7db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7de:	66 83 f8 0a          	cmp    ax,0xa
c000c7e2:	74 09                	je     c000c7ed <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c7e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7e7:	66 83 f8 08          	cmp    ax,0x8
c000c7eb:	75 14                	jne    c000c801 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c7ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f0:	25 ff 00 00 00       	and    eax,0xff
c000c7f5:	83 ec 0c             	sub    esp,0xc
c000c7f8:	50                   	push   eax
c000c7f9:	e8 6a fb ff ff       	call   c000c368 <sendKeyToTerminal(unsigned char)>
c000c7fe:	83 c4 10             	add    esp,0x10
c000c801:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c804:	83 f0 01             	xor    eax,0x1
c000c807:	84 c0                	test   al,al
c000c809:	74 51                	je     c000c85c <sendKeyboardToken(KeyboardToken)+0x425>
c000c80b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c80e:	83 f0 01             	xor    eax,0x1
c000c811:	84 c0                	test   al,al
c000c813:	74 47                	je     c000c85c <sendKeyboardToken(KeyboardToken)+0x425>
c000c815:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c81a:	84 c0                	test   al,al
c000c81c:	74 3e                	je     c000c85c <sendKeyboardToken(KeyboardToken)+0x425>
c000c81e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c821:	66 83 f8 3f          	cmp    ax,0x3f
c000c825:	76 35                	jbe    c000c85c <sendKeyboardToken(KeyboardToken)+0x425>
c000c827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c82a:	66 83 f8 7f          	cmp    ax,0x7f
c000c82e:	77 2c                	ja     c000c85c <sendKeyboardToken(KeyboardToken)+0x425>
c000c830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c833:	88 c2                	mov    dl,al
c000c835:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c838:	66 83 f8 5f          	cmp    ax,0x5f
c000c83c:	76 04                	jbe    c000c842 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c83e:	b0 20                	mov    al,0x20
c000c840:	eb 02                	jmp    c000c844 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c842:	b0 00                	mov    al,0x0
c000c844:	29 c2                	sub    edx,eax
c000c846:	88 d0                	mov    al,dl
c000c848:	83 e8 40             	sub    eax,0x40
c000c84b:	25 ff 00 00 00       	and    eax,0xff
c000c850:	83 ec 0c             	sub    esp,0xc
c000c853:	50                   	push   eax
c000c854:	e8 0f fb ff ff       	call   c000c368 <sendKeyToTerminal(unsigned char)>
c000c859:	83 c4 10             	add    esp,0x10
c000c85c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c85f:	66 3d 00 03          	cmp    ax,0x300
c000c863:	75 0f                	jne    c000c874 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c865:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c868:	83 f0 01             	xor    eax,0x1
c000c86b:	84 c0                	test   al,al
c000c86d:	74 05                	je     c000c874 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c86f:	e8 fb b9 ff ff       	call   c000826f <doTerminalCycle()>
c000c874:	90                   	nop
c000c875:	c9                   	leave  
c000c876:	c3                   	ret    

c000c877 <clearInternalKeybuffer(VgaText*)>:
c000c877:	55                   	push   ebp
c000c878:	89 e5                	mov    ebp,esp
c000c87a:	83 ec 08             	sub    esp,0x8
c000c87d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c880:	05 02 01 00 00       	add    eax,0x102
c000c885:	83 ec 0c             	sub    esp,0xc
c000c888:	50                   	push   eax
c000c889:	e8 a2 3c ff ff       	call   c0000530 <strlen>
c000c88e:	83 c4 10             	add    esp,0x10
c000c891:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c894:	81 c2 02 01 00 00    	add    edx,0x102
c000c89a:	83 ec 04             	sub    esp,0x4
c000c89d:	50                   	push   eax
c000c89e:	6a 00                	push   0x0
c000c8a0:	52                   	push   edx
c000c8a1:	e8 1a 3c ff ff       	call   c00004c0 <memset>
c000c8a6:	83 c4 10             	add    esp,0x10
c000c8a9:	90                   	nop
c000c8aa:	c9                   	leave  
c000c8ab:	c3                   	ret    

c000c8ac <readKeyboard(VgaText*, char*, unsigned long)>:
c000c8ac:	55                   	push   ebp
c000c8ad:	89 e5                	mov    ebp,esp
c000c8af:	83 ec 18             	sub    esp,0x18
c000c8b2:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c8b7:	85 c0                	test   eax,eax
c000c8b9:	74 2a                	je     c000c8e5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c8bb:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c8c1:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c8c7:	83 ec 04             	sub    esp,0x4
c000c8ca:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c8cf:	83 ec 08             	sub    esp,0x8
c000c8d2:	89 e2                	mov    edx,esp
c000c8d4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c8d7:	89 02                	mov    DWORD PTR [edx],eax
c000c8d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c8dc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c8e0:	ff d1                	call   ecx
c000c8e2:	83 c4 10             	add    esp,0x10
c000c8e5:	fb                   	sti    
c000c8e6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c8ed:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c8f1:	0f 84 f5 00 00 00    	je     c000c9ec <readKeyboard(VgaText*, char*, unsigned long)+0x140>
c000c8f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8fa:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c900:	84 c0                	test   al,al
c000c902:	75 28                	jne    c000c92c <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c904:	fa                   	cli    
c000c905:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c90a:	40                   	inc    eax
c000c90b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c910:	e8 3b 82 00 00       	call   c0014b50 <schedule()>
c000c915:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c91a:	48                   	dec    eax
c000c91b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c920:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c925:	85 c0                	test   eax,eax
c000c927:	75 ce                	jne    c000c8f7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c929:	fb                   	sti    
c000c92a:	eb cb                	jmp    c000c8f7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c92c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c92f:	8d 50 01             	lea    edx,[eax+0x1]
c000c932:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c935:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c938:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000c93e:	88 10                	mov    BYTE PTR [eax],dl
c000c940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c943:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c949:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c94c:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c950:	75 1e                	jne    c000c970 <readKeyboard(VgaText*, char*, unsigned long)+0xc4>
c000c952:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c957:	8b 00                	mov    eax,DWORD PTR [eax]
c000c959:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c95c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c962:	83 ec 08             	sub    esp,0x8
c000c965:	6a 02                	push   0x2
c000c967:	50                   	push   eax
c000c968:	e8 0a 3f 00 00       	call   c0010877 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c96d:	83 c4 10             	add    esp,0x10
c000c970:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000c974:	75 1e                	jne    c000c994 <readKeyboard(VgaText*, char*, unsigned long)+0xe8>
c000c976:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c97b:	8b 00                	mov    eax,DWORD PTR [eax]
c000c97d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c980:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c986:	83 ec 08             	sub    esp,0x8
c000c989:	6a 09                	push   0x9
c000c98b:	50                   	push   eax
c000c98c:	e8 e6 3e 00 00       	call   c0010877 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c991:	83 c4 10             	add    esp,0x10
c000c994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c997:	05 02 01 00 00       	add    eax,0x102
c000c99c:	83 ec 0c             	sub    esp,0xc
c000c99f:	50                   	push   eax
c000c9a0:	e8 8b 3b ff ff       	call   c0000530 <strlen>
c000c9a5:	83 c4 10             	add    esp,0x10
c000c9a8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c9ab:	81 c2 02 01 00 00    	add    edx,0x102
c000c9b1:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c9b4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c9b7:	81 c2 02 01 00 00    	add    edx,0x102
c000c9bd:	83 ec 04             	sub    esp,0x4
c000c9c0:	50                   	push   eax
c000c9c1:	51                   	push   ecx
c000c9c2:	52                   	push   edx
c000c9c3:	e8 08 3a ff ff       	call   c00003d0 <memmove>
c000c9c8:	83 c4 10             	add    esp,0x10
c000c9cb:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c9ce:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c9d1:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c9d5:	74 10                	je     c000c9e7 <readKeyboard(VgaText*, char*, unsigned long)+0x13b>
c000c9d7:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c9db:	74 0a                	je     c000c9e7 <readKeyboard(VgaText*, char*, unsigned long)+0x13b>
c000c9dd:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000c9e1:	0f 85 06 ff ff ff    	jne    c000c8ed <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c9e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9ea:	eb 03                	jmp    c000c9ef <readKeyboard(VgaText*, char*, unsigned long)+0x143>
c000c9ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c9ef:	c9                   	leave  
c000c9f0:	c3                   	ret    
c000c9f1:	90                   	nop

c000c9f2 <Keyboard::Keyboard(char const*)>:
c000c9f2:	83 ec 0c             	sub    esp,0xc
c000c9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9f9:	83 ec 08             	sub    esp,0x8
c000c9fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca00:	50                   	push   eax
c000ca01:	e8 1e f2 ff ff       	call   c000bc24 <Device::Device(char const*)>
c000ca06:	83 c4 10             	add    esp,0x10
c000ca09:	ba 5c fe 01 c0       	mov    edx,0xc001fe5c
c000ca0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca12:	89 10                	mov    DWORD PTR [eax],edx
c000ca14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca18:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ca22:	c6 05 c4 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025fc4,0x1
c000ca29:	90                   	nop
c000ca2a:	83 c4 0c             	add    esp,0xc
c000ca2d:	c3                   	ret    

c000ca2e <Keyboard::~Keyboard()>:
c000ca2e:	83 ec 0c             	sub    esp,0xc
c000ca31:	ba 5c fe 01 c0       	mov    edx,0xc001fe5c
c000ca36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca3a:	89 10                	mov    DWORD PTR [eax],edx
c000ca3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca40:	83 ec 0c             	sub    esp,0xc
c000ca43:	50                   	push   eax
c000ca44:	e8 49 ef ff ff       	call   c000b992 <Device::~Device()>
c000ca49:	83 c4 10             	add    esp,0x10
c000ca4c:	90                   	nop
c000ca4d:	83 c4 0c             	add    esp,0xc
c000ca50:	c3                   	ret    
c000ca51:	90                   	nop

c000ca52 <Keyboard::~Keyboard()>:
c000ca52:	83 ec 0c             	sub    esp,0xc
c000ca55:	83 ec 0c             	sub    esp,0xc
c000ca58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca5c:	e8 cd ff ff ff       	call   c000ca2e <Keyboard::~Keyboard()>
c000ca61:	83 c4 10             	add    esp,0x10
c000ca64:	83 ec 08             	sub    esp,0x8
c000ca67:	68 5c 01 00 00       	push   0x15c
c000ca6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca70:	e8 e8 da ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c000ca75:	83 c4 10             	add    esp,0x10
c000ca78:	83 c4 0c             	add    esp,0xc
c000ca7b:	c3                   	ret    

c000ca7c <LogicalDisk::close(int, int, void*)>:
c000ca7c:	83 c8 ff             	or     eax,0xffffffff
c000ca7f:	c3                   	ret    

c000ca80 <LogicalDisk::~LogicalDisk()>:
c000ca80:	83 ec 0c             	sub    esp,0xc
c000ca83:	ba d4 fe 01 c0       	mov    edx,0xc001fed4
c000ca88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca8c:	89 10                	mov    DWORD PTR [eax],edx
c000ca8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca92:	83 ec 0c             	sub    esp,0xc
c000ca95:	50                   	push   eax
c000ca96:	e8 f7 ee ff ff       	call   c000b992 <Device::~Device()>
c000ca9b:	83 c4 10             	add    esp,0x10
c000ca9e:	90                   	nop
c000ca9f:	83 c4 0c             	add    esp,0xc
c000caa2:	c3                   	ret    
c000caa3:	90                   	nop

c000caa4 <LogicalDisk::~LogicalDisk()>:
c000caa4:	83 ec 0c             	sub    esp,0xc
c000caa7:	83 ec 0c             	sub    esp,0xc
c000caaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caae:	e8 cd ff ff ff       	call   c000ca80 <LogicalDisk::~LogicalDisk()>
c000cab3:	83 c4 10             	add    esp,0x10
c000cab6:	83 ec 08             	sub    esp,0x8
c000cab9:	68 78 01 00 00       	push   0x178
c000cabe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cac2:	e8 96 da ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c000cac7:	83 c4 10             	add    esp,0x10
c000caca:	83 c4 0c             	add    esp,0xc
c000cacd:	c3                   	ret    

c000cace <LogicalDisk::open(int, int, void*)>:
c000cace:	83 ec 18             	sub    esp,0x18
c000cad1:	68 88 fe 01 c0       	push   0xc001fe88
c000cad6:	e8 2c 39 00 00       	call   c0010407 <KePanic(char const*)>
c000cadb:	83 c8 ff             	or     eax,0xffffffff
c000cade:	83 c4 1c             	add    esp,0x1c
c000cae1:	c3                   	ret    

c000cae2 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cae2:	53                   	push   ebx
c000cae3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cae7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000caeb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000caef:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000caf5:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cafb:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cb01:	77 10                	ja     c000cb13 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cb03:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cb09:	89 d3                	mov    ebx,edx
c000cb0b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cb11:	72 05                	jb     c000cb18 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cb13:	83 c8 ff             	or     eax,0xffffffff
c000cb16:	89 c2                	mov    edx,eax
c000cb18:	5b                   	pop    ebx
c000cb19:	c3                   	ret    

c000cb1a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cb1a:	56                   	push   esi
c000cb1b:	83 c8 ff             	or     eax,0xffffffff
c000cb1e:	53                   	push   ebx
c000cb1f:	89 c2                	mov    edx,eax
c000cb21:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cb25:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cb29:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cb2d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cb33:	77 27                	ja     c000cb5c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cb35:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cb3b:	89 d8                	mov    eax,ebx
c000cb3d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cb43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cb48:	89 c2                	mov    edx,eax
c000cb4a:	73 10                	jae    c000cb5c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cb4c:	89 c8                	mov    eax,ecx
c000cb4e:	89 da                	mov    edx,ebx
c000cb50:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cb56:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cb5c:	5b                   	pop    ebx
c000cb5d:	5e                   	pop    esi
c000cb5e:	c3                   	ret    
c000cb5f:	90                   	nop

c000cb60 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cb60:	83 ec 1c             	sub    esp,0x1c
c000cb63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb77:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cb7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb86:	83 ec 08             	sub    esp,0x8
c000cb89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8d:	50                   	push   eax
c000cb8e:	e8 91 f0 ff ff       	call   c000bc24 <Device::Device(char const*)>
c000cb93:	83 c4 10             	add    esp,0x10
c000cb96:	ba d4 fe 01 c0       	mov    edx,0xc001fed4
c000cb9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb9f:	89 10                	mov    DWORD PTR [eax],edx
c000cba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cba5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cbac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbb0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cbb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbbb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cbc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbc6:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cbd0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cbd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cbd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cbdc:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cbe2:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cbe8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cbec:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cbef:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cbf3:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cbf9:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cbff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc03:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cc07:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cc0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc11:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cc1b:	90                   	nop
c000cc1c:	83 c4 1c             	add    esp,0x1c
c000cc1f:	c3                   	ret    

c000cc20 <LogicalDisk::assignDriveLetter()>:
c000cc20:	55                   	push   ebp
c000cc21:	57                   	push   edi
c000cc22:	56                   	push   esi
c000cc23:	53                   	push   ebx
c000cc24:	83 ec 14             	sub    esp,0x14
c000cc27:	8b 3d 00 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026400
c000cc2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cc31:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cc35:	8b 3d 04 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026404
c000cc3b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cc41:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cc45:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cc4b:	3c 01                	cmp    al,0x1
c000cc4d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cc51:	19 c0                	sbb    eax,eax
c000cc53:	83 e0 02             	and    eax,0x2
c000cc56:	83 c0 41             	add    eax,0x41
c000cc59:	0f be e8             	movsx  ebp,al
c000cc5c:	3c 43                	cmp    al,0x43
c000cc5e:	75 10                	jne    c000cc70 <LogicalDisk::assignDriveLetter()+0x50>
c000cc60:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cc67:	75 5d                	jne    c000ccc6 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc69:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cc6e:	75 56                	jne    c000ccc6 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc70:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cc73:	ba 01 00 00 00       	mov    edx,0x1
c000cc78:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cc7c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cc80:	d3 e2                	shl    edx,cl
c000cc82:	89 d7                	mov    edi,edx
c000cc84:	89 d6                	mov    esi,edx
c000cc86:	c1 ff 1f             	sar    edi,0x1f
c000cc89:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cc8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc91:	21 f9                	and    ecx,edi
c000cc93:	09 d1                	or     ecx,edx
c000cc95:	75 2f                	jne    c000ccc6 <LogicalDisk::assignDriveLetter()+0xa6>
c000cc97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc9b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cc9f:	09 f2                	or     edx,esi
c000cca1:	89 15 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,edx
c000cca7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ccab:	09 fa                	or     edx,edi
c000ccad:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000ccb1:	89 15 04 64 02 c0    	mov    DWORD PTR ds:0xc0026404,edx
c000ccb7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000ccbd:	89 1c bd 20 64 02 c0 	mov    DWORD PTR [edi*4-0x3ffd9be0],ebx
c000ccc4:	eb 08                	jmp    c000ccce <LogicalDisk::assignDriveLetter()+0xae>
c000ccc6:	40                   	inc    eax
c000ccc7:	45                   	inc    ebp
c000ccc8:	3c 5b                	cmp    al,0x5b
c000ccca:	75 90                	jne    c000cc5c <LogicalDisk::assignDriveLetter()+0x3c>
c000cccc:	31 c0                	xor    eax,eax
c000ccce:	83 c4 14             	add    esp,0x14
c000ccd1:	5b                   	pop    ebx
c000ccd2:	5e                   	pop    esi
c000ccd3:	5f                   	pop    edi
c000ccd4:	5d                   	pop    ebp
c000ccd5:	c3                   	ret    

c000ccd6 <LogicalDisk::mount()>:
c000ccd6:	56                   	push   esi
c000ccd7:	53                   	push   ebx
c000ccd8:	53                   	push   ebx
c000ccd9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ccdd:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c000cce3:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000cced:	85 db                	test   ebx,ebx
c000ccef:	74 27                	je     c000cd18 <LogicalDisk::mount()+0x42>
c000ccf1:	51                   	push   ecx
c000ccf2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000ccf9:	83 e8 41             	sub    eax,0x41
c000ccfc:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ccfe:	50                   	push   eax
c000ccff:	56                   	push   esi
c000cd00:	53                   	push   ebx
c000cd01:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cd04:	83 c4 10             	add    esp,0x10
c000cd07:	84 c0                	test   al,al
c000cd09:	74 08                	je     c000cd13 <LogicalDisk::mount()+0x3d>
c000cd0b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000cd11:	eb 07                	jmp    c000cd1a <LogicalDisk::mount()+0x44>
c000cd13:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cd16:	eb d5                	jmp    c000cced <LogicalDisk::mount()+0x17>
c000cd18:	31 c0                	xor    eax,eax
c000cd1a:	5a                   	pop    edx
c000cd1b:	5b                   	pop    ebx
c000cd1c:	5e                   	pop    esi
c000cd1d:	c3                   	ret    

c000cd1e <LogicalDisk::unmount()>:
c000cd1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd22:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cd2c:	c3                   	ret    
c000cd2d:	90                   	nop

c000cd2e <LogicalDisk::eject()>:
c000cd2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd32:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cd38:	8b 10                	mov    edx,DWORD PTR [eax]
c000cd3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cd3e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cd41:	90                   	nop

c000cd42 <LogicalDisk::unassignDriveLetter()>:
c000cd42:	57                   	push   edi
c000cd43:	56                   	push   esi
c000cd44:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd48:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cd4f:	84 c9                	test   cl,cl
c000cd51:	75 0f                	jne    c000cd62 <LogicalDisk::unassignDriveLetter()+0x20>
c000cd53:	c7 44 24 0c ac fe 01 c0 	mov    DWORD PTR [esp+0xc],0xc001feac
c000cd5b:	5e                   	pop    esi
c000cd5c:	5f                   	pop    edi
c000cd5d:	e9 a5 36 00 00       	jmp    c0010407 <KePanic(char const*)>
c000cd62:	83 e9 41             	sub    ecx,0x41
c000cd65:	b8 01 00 00 00       	mov    eax,0x1
c000cd6a:	d3 e0                	shl    eax,cl
c000cd6c:	89 c7                	mov    edi,eax
c000cd6e:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cd75:	c1 ff 1f             	sar    edi,0x1f
c000cd78:	c7 04 8d 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd9be0],0x0
c000cd83:	89 fe                	mov    esi,edi
c000cd85:	f7 d6                	not    esi
c000cd87:	f7 d0                	not    eax
c000cd89:	21 35 04 64 02 c0    	and    DWORD PTR ds:0xc0026404,esi
c000cd8f:	5e                   	pop    esi
c000cd90:	21 05 00 64 02 c0    	and    DWORD PTR ds:0xc0026400,eax
c000cd96:	5f                   	pop    edi
c000cd97:	c3                   	ret    

c000cd98 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cd98:	57                   	push   edi
c000cd99:	56                   	push   esi
c000cd9a:	53                   	push   ebx
c000cd9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cda3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cda7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cdab:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cdb1:	77 41                	ja     c000cdf4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cdb3:	99                   	cdq    
c000cdb4:	01 c8                	add    eax,ecx
c000cdb6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cdbc:	11 da                	adc    edx,ebx
c000cdbe:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cdc4:	19 d7                	sbb    edi,edx
c000cdc6:	72 33                	jb     c000cdfb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cdc8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cdce:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cdd4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cdd8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cddc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cde2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdec:	5b                   	pop    ebx
c000cded:	5e                   	pop    esi
c000cdee:	5f                   	pop    edi
c000cdef:	e9 be 0a 00 00       	jmp    c000d8b2 <VCache::read(unsigned long long, int, void*)>
c000cdf4:	b8 05 00 00 00       	mov    eax,0x5
c000cdf9:	eb 05                	jmp    c000ce00 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cdfb:	b8 07 00 00 00       	mov    eax,0x7
c000ce00:	5b                   	pop    ebx
c000ce01:	5e                   	pop    esi
c000ce02:	5f                   	pop    edi
c000ce03:	c3                   	ret    

c000ce04 <LogicalDisk::write(unsigned long long, int, void*)>:
c000ce04:	57                   	push   edi
c000ce05:	56                   	push   esi
c000ce06:	53                   	push   ebx
c000ce07:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ce0b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ce0f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ce13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ce17:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ce1d:	77 41                	ja     c000ce60 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ce1f:	99                   	cdq    
c000ce20:	01 c8                	add    eax,ecx
c000ce22:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ce28:	11 da                	adc    edx,ebx
c000ce2a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ce30:	19 d7                	sbb    edi,edx
c000ce32:	72 33                	jb     c000ce67 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ce34:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ce3a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ce40:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ce44:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ce48:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ce4e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ce54:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce58:	5b                   	pop    ebx
c000ce59:	5e                   	pop    esi
c000ce5a:	5f                   	pop    edi
c000ce5b:	e9 64 09 00 00       	jmp    c000d7c4 <VCache::write(unsigned long long, int, void*)>
c000ce60:	b8 05 00 00 00       	mov    eax,0x5
c000ce65:	eb 05                	jmp    c000ce6c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ce67:	b8 07 00 00 00       	mov    eax,0x7
c000ce6c:	5b                   	pop    ebx
c000ce6d:	5e                   	pop    esi
c000ce6e:	5f                   	pop    edi
c000ce6f:	c3                   	ret    

c000ce70 <Mouse::Mouse(char const*)>:
c000ce70:	83 ec 0c             	sub    esp,0xc
c000ce73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce77:	83 ec 08             	sub    esp,0x8
c000ce7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7e:	50                   	push   eax
c000ce7f:	e8 a0 ed ff ff       	call   c000bc24 <Device::Device(char const*)>
c000ce84:	83 c4 10             	add    esp,0x10
c000ce87:	ba 00 ff 01 c0       	mov    edx,0xc001ff00
c000ce8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce90:	89 10                	mov    DWORD PTR [eax],edx
c000ce92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce96:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cea0:	90                   	nop
c000cea1:	83 c4 0c             	add    esp,0xc
c000cea4:	c3                   	ret    
c000cea5:	90                   	nop
c000cea6:	66 90                	xchg   ax,ax

c000cea8 <Mouse::~Mouse()>:
c000cea8:	83 ec 0c             	sub    esp,0xc
c000ceab:	ba 00 ff 01 c0       	mov    edx,0xc001ff00
c000ceb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceb4:	89 10                	mov    DWORD PTR [eax],edx
c000ceb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceba:	83 ec 0c             	sub    esp,0xc
c000cebd:	50                   	push   eax
c000cebe:	e8 cf ea ff ff       	call   c000b992 <Device::~Device()>
c000cec3:	83 c4 10             	add    esp,0x10
c000cec6:	90                   	nop
c000cec7:	83 c4 0c             	add    esp,0xc
c000ceca:	c3                   	ret    
c000cecb:	90                   	nop

c000cecc <Mouse::~Mouse()>:
c000cecc:	83 ec 0c             	sub    esp,0xc
c000cecf:	83 ec 0c             	sub    esp,0xc
c000ced2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced6:	e8 cd ff ff ff       	call   c000cea8 <Mouse::~Mouse()>
c000cedb:	83 c4 10             	add    esp,0x10
c000cede:	83 ec 08             	sub    esp,0x8
c000cee1:	68 58 01 00 00       	push   0x158
c000cee6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceea:	e8 6e d6 ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c000ceef:	83 c4 10             	add    esp,0x10
c000cef2:	83 c4 0c             	add    esp,0xc
c000cef5:	c3                   	ret    

c000cef6 <NIC::getMAC()>:
c000cef6:	31 c0                	xor    eax,eax
c000cef8:	31 d2                	xor    edx,edx
c000cefa:	c3                   	ret    
c000cefb:	90                   	nop

c000cefc <NIC::write(int, unsigned char*, int*)>:
c000cefc:	b8 01 00 00 00       	mov    eax,0x1
c000cf01:	c3                   	ret    

c000cf02 <NIC::NIC(char const*)>:
c000cf02:	83 ec 0c             	sub    esp,0xc
c000cf05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf09:	83 ec 08             	sub    esp,0x8
c000cf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf10:	50                   	push   eax
c000cf11:	e8 0e ed ff ff       	call   c000bc24 <Device::Device(char const*)>
c000cf16:	83 c4 10             	add    esp,0x10
c000cf19:	ba 2c ff 01 c0       	mov    edx,0xc001ff2c
c000cf1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf22:	89 10                	mov    DWORD PTR [eax],edx
c000cf24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf28:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000cf32:	90                   	nop
c000cf33:	83 c4 0c             	add    esp,0xc
c000cf36:	c3                   	ret    
c000cf37:	90                   	nop

c000cf38 <NIC::~NIC()>:
c000cf38:	83 ec 0c             	sub    esp,0xc
c000cf3b:	ba 2c ff 01 c0       	mov    edx,0xc001ff2c
c000cf40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf44:	89 10                	mov    DWORD PTR [eax],edx
c000cf46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf4a:	83 ec 0c             	sub    esp,0xc
c000cf4d:	50                   	push   eax
c000cf4e:	e8 3f ea ff ff       	call   c000b992 <Device::~Device()>
c000cf53:	83 c4 10             	add    esp,0x10
c000cf56:	90                   	nop
c000cf57:	83 c4 0c             	add    esp,0xc
c000cf5a:	c3                   	ret    
c000cf5b:	90                   	nop

c000cf5c <NIC::~NIC()>:
c000cf5c:	83 ec 0c             	sub    esp,0xc
c000cf5f:	83 ec 0c             	sub    esp,0xc
c000cf62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf66:	e8 cd ff ff ff       	call   c000cf38 <NIC::~NIC()>
c000cf6b:	83 c4 10             	add    esp,0x10
c000cf6e:	83 ec 08             	sub    esp,0x8
c000cf71:	68 58 01 00 00       	push   0x158
c000cf76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf7a:	e8 de d5 ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c000cf7f:	83 c4 10             	add    esp,0x10
c000cf82:	83 c4 0c             	add    esp,0xc
c000cf85:	c3                   	ret    

c000cf86 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf86:	55                   	push   ebp
c000cf87:	57                   	push   edi
c000cf88:	56                   	push   esi
c000cf89:	53                   	push   ebx
c000cf8a:	81 ec 28 01 00 00    	sub    esp,0x128
c000cf90:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cf97:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cf9e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cfa5:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cfac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cfb0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cfb4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cfbb:	e8 60 ed ff ff       	call   c000bd20 <Device::getName()>
c000cfc0:	5a                   	pop    edx
c000cfc1:	59                   	pop    ecx
c000cfc2:	50                   	push   eax
c000cfc3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cfc7:	55                   	push   ebp
c000cfc8:	e8 23 36 ff ff       	call   c00005f0 <strcpy>
c000cfcd:	5b                   	pop    ebx
c000cfce:	58                   	pop    eax
c000cfcf:	68 58 ff 01 c0       	push   0xc001ff58
c000cfd4:	55                   	push   ebp
c000cfd5:	e8 e6 37 ff ff       	call   c00007c0 <strcat>
c000cfda:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000cfe1:	e8 7d a8 ff ff       	call   c0007863 <malloc>
c000cfe6:	83 c4 0c             	add    esp,0xc
c000cfe9:	89 c3                	mov    ebx,eax
c000cfeb:	57                   	push   edi
c000cfec:	56                   	push   esi
c000cfed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cff1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cff5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cffc:	55                   	push   ebp
c000cffd:	50                   	push   eax
c000cffe:	e8 5d fb ff ff       	call   c000cb60 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d003:	83 c4 14             	add    esp,0x14
c000d006:	53                   	push   ebx
c000d007:	e8 14 fc ff ff       	call   c000cc20 <LogicalDisk::assignDriveLetter()>
c000d00c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d00f:	e8 c2 fc ff ff       	call   c000ccd6 <LogicalDisk::mount()>
c000d014:	58                   	pop    eax
c000d015:	5a                   	pop    edx
c000d016:	53                   	push   ebx
c000d017:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d01e:	e8 69 ea ff ff       	call   c000ba8c <Device::addChild(Device*)>
c000d023:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d029:	5b                   	pop    ebx
c000d02a:	5e                   	pop    esi
c000d02b:	5f                   	pop    edi
c000d02c:	5d                   	pop    ebp
c000d02d:	c3                   	ret    

c000d02e <createPartitionsForDisk(PhysicalDisk*)>:
c000d02e:	55                   	push   ebp
c000d02f:	57                   	push   edi
c000d030:	56                   	push   esi
c000d031:	53                   	push   ebx
c000d032:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d038:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d03f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d045:	3d 00 02 00 00       	cmp    eax,0x200
c000d04a:	74 27                	je     c000d073 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d04c:	83 ec 10             	sub    esp,0x10
c000d04f:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d055:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d05b:	99                   	cdq    
c000d05c:	52                   	push   edx
c000d05d:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d061:	50                   	push   eax
c000d062:	89 fd                	mov    ebp,edi
c000d064:	c1 e6 0a             	shl    esi,0xa
c000d067:	55                   	push   ebp
c000d068:	56                   	push   esi
c000d069:	e8 62 0e 01 00       	call   c001ded0 <__udivdi3>
c000d06e:	e9 b1 00 00 00       	jmp    c000d124 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d073:	83 ec 0c             	sub    esp,0xc
c000d076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d078:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d07c:	56                   	push   esi
c000d07d:	6a 01                	push   0x1
c000d07f:	6a 00                	push   0x0
c000d081:	6a 00                	push   0x0
c000d083:	53                   	push   ebx
c000d084:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d087:	83 c4 20             	add    esp,0x20
c000d08a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d092:	75 0a                	jne    c000d09e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d094:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d09c:	74 2c                	je     c000d0ca <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d09e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d0a4:	83 ec 10             	sub    esp,0x10
c000d0a7:	89 f7                	mov    edi,esi
c000d0a9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d0af:	c1 ff 1f             	sar    edi,0x1f
c000d0b2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d0b8:	57                   	push   edi
c000d0b9:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d0bd:	c1 e0 0a             	shl    eax,0xa
c000d0c0:	56                   	push   esi
c000d0c1:	52                   	push   edx
c000d0c2:	50                   	push   eax
c000d0c3:	e8 08 0e 01 00       	call   c001ded0 <__udivdi3>
c000d0c8:	eb 5a                	jmp    c000d124 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d0ca:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d0d1:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d0d8:	83 e0 7f             	and    eax,0x7f
c000d0db:	83 e1 7f             	and    ecx,0x7f
c000d0de:	01 c1                	add    ecx,eax
c000d0e0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d0e7:	83 e0 7f             	and    eax,0x7f
c000d0ea:	01 c1                	add    ecx,eax
c000d0ec:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d0f3:	83 e0 7f             	and    eax,0x7f
c000d0f6:	00 c1                	add    cl,al
c000d0f8:	74 41                	je     c000d13b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d0fa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d100:	83 ec 10             	sub    esp,0x10
c000d103:	89 f7                	mov    edi,esi
c000d105:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d10b:	c1 ff 1f             	sar    edi,0x1f
c000d10e:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d114:	57                   	push   edi
c000d115:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d119:	c1 e0 0a             	shl    eax,0xa
c000d11c:	56                   	push   esi
c000d11d:	52                   	push   edx
c000d11e:	50                   	push   eax
c000d11f:	e8 ac 0d 01 00       	call   c001ded0 <__udivdi3>
c000d124:	83 c4 14             	add    esp,0x14
c000d127:	52                   	push   edx
c000d128:	50                   	push   eax
c000d129:	6a 00                	push   0x0
c000d12b:	6a 00                	push   0x0
c000d12d:	53                   	push   ebx
c000d12e:	e8 53 fe ff ff       	call   c000cf86 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d133:	83 c4 20             	add    esp,0x20
c000d136:	e9 79 01 00 00       	jmp    c000d2b4 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d13b:	89 f0                	mov    eax,esi
c000d13d:	31 f6                	xor    esi,esi
c000d13f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d146:	75 02                	jne    c000d14a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d148:	89 f1                	mov    ecx,esi
c000d14a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d151:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d158:	c1 e2 08             	shl    edx,0x8
c000d15b:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d163:	c1 e7 10             	shl    edi,0x10
c000d166:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d16e:	09 fa                	or     edx,edi
c000d170:	83 c0 10             	add    eax,0x10
c000d173:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c000d17a:	09 fa                	or     edx,edi
c000d17c:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d183:	c1 e7 18             	shl    edi,0x18
c000d186:	09 fa                	or     edx,edi
c000d188:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d18c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d193:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d19a:	c1 e7 10             	shl    edi,0x10
c000d19d:	c1 e2 08             	shl    edx,0x8
c000d1a0:	09 fa                	or     edx,edi
c000d1a2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d1a9:	09 fa                	or     edx,edi
c000d1ab:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d1b2:	c1 e7 18             	shl    edi,0x18
c000d1b5:	09 fa                	or     edx,edi
c000d1b7:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d1bb:	46                   	inc    esi
c000d1bc:	83 fe 04             	cmp    esi,0x4
c000d1bf:	0f 85 7a ff ff ff    	jne    c000d13f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d1c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c9:	83 f0 01             	xor    eax,0x1
c000d1cc:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d1d0:	75 57                	jne    c000d229 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d1d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d1d6:	83 f0 01             	xor    eax,0x1
c000d1d9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d1dd:	75 4a                	jne    c000d229 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d1df:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d1e5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d1e9:	89 f7                	mov    edi,esi
c000d1eb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d1f3:	c1 ff 1f             	sar    edi,0x1f
c000d1f6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d1fe:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d204:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d20a:	57                   	push   edi
c000d20b:	56                   	push   esi
c000d20c:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d210:	c1 e0 0a             	shl    eax,0xa
c000d213:	52                   	push   edx
c000d214:	50                   	push   eax
c000d215:	e8 b6 0c 01 00       	call   c001ded0 <__udivdi3>
c000d21a:	83 c4 10             	add    esp,0x10
c000d21d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d221:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d225:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d229:	84 c9                	test   cl,cl
c000d22b:	74 53                	je     c000d280 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d22d:	0f b6 c9             	movzx  ecx,cl
c000d230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d234:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d238:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d23c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d240:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d244:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d248:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d24c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d250:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d258:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d25c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d260:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d264:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d268:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d26c:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d270:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d274:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d278:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d27c:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d280:	31 ed                	xor    ebp,ebp
c000d282:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d286:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d28a:	89 f8                	mov    eax,edi
c000d28c:	09 f0                	or     eax,esi
c000d28e:	74 1e                	je     c000d2ae <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d290:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d294:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d298:	89 d1                	mov    ecx,edx
c000d29a:	09 c1                	or     ecx,eax
c000d29c:	74 10                	je     c000d2ae <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d29e:	83 ec 0c             	sub    esp,0xc
c000d2a1:	57                   	push   edi
c000d2a2:	56                   	push   esi
c000d2a3:	52                   	push   edx
c000d2a4:	50                   	push   eax
c000d2a5:	53                   	push   ebx
c000d2a6:	e8 db fc ff ff       	call   c000cf86 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d2ab:	83 c4 20             	add    esp,0x20
c000d2ae:	45                   	inc    ebp
c000d2af:	83 fd 04             	cmp    ebp,0x4
c000d2b2:	75 ce                	jne    c000d282 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d2b4:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d2ba:	5b                   	pop    ebx
c000d2bb:	5e                   	pop    esi
c000d2bc:	5f                   	pop    edi
c000d2bd:	5d                   	pop    ebp
c000d2be:	c3                   	ret    
c000d2bf:	90                   	nop

c000d2c0 <Serial::Serial(char const*)>:
c000d2c0:	83 ec 0c             	sub    esp,0xc
c000d2c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c7:	83 ec 08             	sub    esp,0x8
c000d2ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ce:	50                   	push   eax
c000d2cf:	e8 50 e9 ff ff       	call   c000bc24 <Device::Device(char const*)>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	ba 6c ff 01 c0       	mov    edx,0xc001ff6c
c000d2dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2e0:	89 10                	mov    DWORD PTR [eax],edx
c000d2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2e6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d2f0:	90                   	nop
c000d2f1:	83 c4 0c             	add    esp,0xc
c000d2f4:	c3                   	ret    
c000d2f5:	90                   	nop
c000d2f6:	66 90                	xchg   ax,ax

c000d2f8 <Serial::~Serial()>:
c000d2f8:	83 ec 0c             	sub    esp,0xc
c000d2fb:	ba 6c ff 01 c0       	mov    edx,0xc001ff6c
c000d300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d304:	89 10                	mov    DWORD PTR [eax],edx
c000d306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d30a:	83 ec 0c             	sub    esp,0xc
c000d30d:	50                   	push   eax
c000d30e:	e8 7f e6 ff ff       	call   c000b992 <Device::~Device()>
c000d313:	83 c4 10             	add    esp,0x10
c000d316:	90                   	nop
c000d317:	83 c4 0c             	add    esp,0xc
c000d31a:	c3                   	ret    
c000d31b:	90                   	nop

c000d31c <Serial::~Serial()>:
c000d31c:	83 ec 0c             	sub    esp,0xc
c000d31f:	83 ec 0c             	sub    esp,0xc
c000d322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d326:	e8 cd ff ff ff       	call   c000d2f8 <Serial::~Serial()>
c000d32b:	83 c4 10             	add    esp,0x10
c000d32e:	83 ec 08             	sub    esp,0x8
c000d331:	68 58 01 00 00       	push   0x158
c000d336:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d33a:	e8 1e d2 ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c000d33f:	83 c4 10             	add    esp,0x10
c000d342:	83 c4 0c             	add    esp,0xc
c000d345:	c3                   	ret    
c000d346:	66 90                	xchg   ax,ax

c000d348 <Timer::Timer(char const*)>:
c000d348:	83 ec 0c             	sub    esp,0xc
c000d34b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d34f:	83 ec 08             	sub    esp,0x8
c000d352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d356:	50                   	push   eax
c000d357:	e8 c8 e8 ff ff       	call   c000bc24 <Device::Device(char const*)>
c000d35c:	83 c4 10             	add    esp,0x10
c000d35f:	ba b0 ff 01 c0       	mov    edx,0xc001ffb0
c000d364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d368:	89 10                	mov    DWORD PTR [eax],edx
c000d36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d36e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d378:	90                   	nop
c000d379:	83 c4 0c             	add    esp,0xc
c000d37c:	c3                   	ret    
c000d37d:	90                   	nop
c000d37e:	66 90                	xchg   ax,ax

c000d380 <Timer::~Timer()>:
c000d380:	83 ec 0c             	sub    esp,0xc
c000d383:	ba b0 ff 01 c0       	mov    edx,0xc001ffb0
c000d388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d38c:	89 10                	mov    DWORD PTR [eax],edx
c000d38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d392:	83 ec 0c             	sub    esp,0xc
c000d395:	50                   	push   eax
c000d396:	e8 f7 e5 ff ff       	call   c000b992 <Device::~Device()>
c000d39b:	83 c4 10             	add    esp,0x10
c000d39e:	90                   	nop
c000d39f:	83 c4 0c             	add    esp,0xc
c000d3a2:	c3                   	ret    
c000d3a3:	90                   	nop

c000d3a4 <Timer::~Timer()>:
c000d3a4:	83 ec 0c             	sub    esp,0xc
c000d3a7:	83 ec 0c             	sub    esp,0xc
c000d3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3ae:	e8 cd ff ff ff       	call   c000d380 <Timer::~Timer()>
c000d3b3:	83 c4 10             	add    esp,0x10
c000d3b6:	83 ec 08             	sub    esp,0x8
c000d3b9:	68 5c 01 00 00       	push   0x15c
c000d3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c2:	e8 96 d1 ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c000d3c7:	83 c4 10             	add    esp,0x10
c000d3ca:	83 c4 0c             	add    esp,0xc
c000d3cd:	c3                   	ret    

c000d3ce <Timer::read()>:
c000d3ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3d2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d3d8:	c3                   	ret    

c000d3d9 <setupTimer(int)>:
c000d3d9:	53                   	push   ebx
c000d3da:	83 ec 14             	sub    esp,0x14
c000d3dd:	68 5c 01 00 00       	push   0x15c
c000d3e2:	e8 7c a4 ff ff       	call   c0007863 <malloc>
c000d3e7:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3ea:	89 c3                	mov    ebx,eax
c000d3ec:	e8 4b 03 01 00       	call   c001d73c <PIT::PIT()>
c000d3f1:	58                   	pop    eax
c000d3f2:	5a                   	pop    edx
c000d3f3:	53                   	push   ebx
c000d3f4:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000d3fa:	e8 8d e6 ff ff       	call   c000ba8c <Device::addChild(Device*)>
c000d3ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d401:	6a 00                	push   0x0
c000d403:	6a 00                	push   0x0
c000d405:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d409:	53                   	push   ebx
c000d40a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d40d:	83 c4 28             	add    esp,0x28
c000d410:	89 d8                	mov    eax,ebx
c000d412:	5b                   	pop    ebx
c000d413:	c3                   	ret    

c000d414 <timerHandler(unsigned int)>:
c000d414:	56                   	push   esi
c000d415:	53                   	push   ebx
c000d416:	51                   	push   ecx
c000d417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d41b:	01 05 8c 64 02 c0    	add    DWORD PTR ds:0xc002648c,eax
c000d421:	80 3d bd 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebd,0x0
c000d428:	0f 84 4a 01 00 00    	je     c000d578 <timerHandler(unsigned int)+0x164>
c000d42e:	fa                   	cli    
c000d42f:	83 ec 0c             	sub    esp,0xc
c000d432:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d438:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c000d43e:	68 78 71 02 c0       	push   0xc0027178
c000d443:	e8 58 10 01 00       	call   c001e4a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d448:	83 c4 10             	add    esp,0x10
c000d44b:	84 c0                	test   al,al
c000d44d:	0f 85 a1 00 00 00    	jne    c000d4f4 <timerHandler(unsigned int)+0xe0>
c000d453:	83 ec 0c             	sub    esp,0xc
c000d456:	68 78 71 02 c0       	push   0xc0027178
c000d45b:	e8 5c 10 01 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d460:	83 c4 10             	add    esp,0x10
c000d463:	89 c6                	mov    esi,eax
c000d465:	8d 76 00             	lea    esi,[esi+0x0]
c000d468:	83 ec 0c             	sub    esp,0xc
c000d46b:	68 78 71 02 c0       	push   0xc0027178
c000d470:	e8 47 10 01 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d475:	89 c3                	mov    ebx,eax
c000d477:	c7 04 24 78 71 02 c0 	mov    DWORD PTR [esp],0xc0027178
c000d47e:	e8 41 10 01 00       	call   c001e4c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d483:	83 c4 10             	add    esp,0x10
c000d486:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d489:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c000d48f:	77 23                	ja     c000d4b4 <timerHandler(unsigned int)+0xa0>
c000d491:	83 ec 0c             	sub    esp,0xc
c000d494:	53                   	push   ebx
c000d495:	e8 96 7b 00 00       	call   c0015030 <unblockTask(ThreadControlBlock*)>
c000d49a:	83 c4 10             	add    esp,0x10
c000d49d:	39 de                	cmp    esi,ebx
c000d49f:	75 27                	jne    c000d4c8 <timerHandler(unsigned int)+0xb4>
c000d4a1:	83 ec 0c             	sub    esp,0xc
c000d4a4:	68 78 71 02 c0       	push   0xc0027178
c000d4a9:	e8 0e 10 01 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d4ae:	89 c6                	mov    esi,eax
c000d4b0:	eb 12                	jmp    c000d4c4 <timerHandler(unsigned int)+0xb0>
c000d4b2:	66 90                	xchg   ax,ax
c000d4b4:	52                   	push   edx
c000d4b5:	52                   	push   edx
c000d4b6:	53                   	push   ebx
c000d4b7:	68 78 71 02 c0       	push   0xc0027178
c000d4bc:	e8 bb 10 01 00       	call   c001e57c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d4c1:	8d 76 00             	lea    esi,[esi+0x0]
c000d4c4:	83 c4 10             	add    esp,0x10
c000d4c7:	90                   	nop
c000d4c8:	83 ec 0c             	sub    esp,0xc
c000d4cb:	68 78 71 02 c0       	push   0xc0027178
c000d4d0:	e8 cb 0f 01 00       	call   c001e4a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d4d5:	83 c4 10             	add    esp,0x10
c000d4d8:	84 c0                	test   al,al
c000d4da:	75 18                	jne    c000d4f4 <timerHandler(unsigned int)+0xe0>
c000d4dc:	83 ec 0c             	sub    esp,0xc
c000d4df:	68 78 71 02 c0       	push   0xc0027178
c000d4e4:	e8 d3 0f 01 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d4e9:	83 c4 10             	add    esp,0x10
c000d4ec:	39 f0                	cmp    eax,esi
c000d4ee:	0f 85 74 ff ff ff    	jne    c000d468 <timerHandler(unsigned int)+0x54>
c000d4f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d4f9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d4fd:	74 41                	je     c000d540 <timerHandler(unsigned int)+0x12c>
c000d4ff:	80 3d bc 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebc,0x0
c000d506:	74 38                	je     c000d540 <timerHandler(unsigned int)+0x12c>
c000d508:	fa                   	cli    
c000d509:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d50f:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c000d514:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d51a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d51d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d523:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d526:	72 08                	jb     c000d530 <timerHandler(unsigned int)+0x11c>
c000d528:	e8 23 76 00 00       	call   c0014b50 <schedule()>
c000d52d:	8d 76 00             	lea    esi,[esi+0x0]
c000d530:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d535:	48                   	dec    eax
c000d536:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d53b:	75 03                	jne    c000d540 <timerHandler(unsigned int)+0x12c>
c000d53d:	fb                   	sti    
c000d53e:	66 90                	xchg   ax,ax
c000d540:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000d545:	48                   	dec    eax
c000d546:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000d54b:	75 1b                	jne    c000d568 <timerHandler(unsigned int)+0x154>
c000d54d:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c000d554:	74 12                	je     c000d568 <timerHandler(unsigned int)+0x154>
c000d556:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000d560:	e8 eb 75 00 00       	call   c0014b50 <schedule()>
c000d565:	8d 76 00             	lea    esi,[esi+0x0]
c000d568:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d56d:	48                   	dec    eax
c000d56e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d573:	75 03                	jne    c000d578 <timerHandler(unsigned int)+0x164>
c000d575:	fb                   	sti    
c000d576:	66 90                	xchg   ax,ax
c000d578:	58                   	pop    eax
c000d579:	5b                   	pop    ebx
c000d57a:	5e                   	pop    esi
c000d57b:	c3                   	ret    

c000d57c <VCache::VCache(PhysicalDisk*)>:
c000d57c:	53                   	push   ebx
c000d57d:	83 ec 18             	sub    esp,0x18
c000d580:	ba e0 ff 01 c0       	mov    edx,0xc001ffe0
c000d585:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d589:	89 10                	mov    DWORD PTR [eax],edx
c000d58b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d58f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d596:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d59a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d5a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d5ac:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d5b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d5be:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d5c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5c9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d5d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5d4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d5d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5dc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d5e3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d5ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ee:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d5f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5f6:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d5fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5fe:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d602:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d606:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d60d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d615:	83 ec 0c             	sub    esp,0xc
c000d618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d61c:	e8 42 a2 ff ff       	call   c0007863 <malloc>
c000d621:	83 c4 10             	add    esp,0x10
c000d624:	89 c3                	mov    ebx,eax
c000d626:	83 ec 0c             	sub    esp,0xc
c000d629:	53                   	push   ebx
c000d62a:	e8 c1 72 00 00       	call   c00148f0 <Mutex::Mutex()>
c000d62f:	83 c4 10             	add    esp,0x10
c000d632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d636:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d639:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d63d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d641:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d644:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d648:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d64f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d653:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d659:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d65d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d660:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d664:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d66a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d670:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d674:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d677:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d67a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d67e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d682:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d686:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d68c:	05 00 02 00 00       	add    eax,0x200
c000d691:	c1 e0 03             	shl    eax,0x3
c000d694:	83 ec 0c             	sub    esp,0xc
c000d697:	50                   	push   eax
c000d698:	e8 c6 a1 ff ff       	call   c0007863 <malloc>
c000d69d:	83 c4 10             	add    esp,0x10
c000d6a0:	89 c2                	mov    edx,eax
c000d6a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6a6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d6a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6ad:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d6b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6b8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d6bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d6c0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d6c6:	89 d0                	mov    eax,edx
c000d6c8:	c1 e0 02             	shl    eax,0x2
c000d6cb:	01 d0                	add    eax,edx
c000d6cd:	c1 e0 04             	shl    eax,0x4
c000d6d0:	83 ec 0c             	sub    esp,0xc
c000d6d3:	50                   	push   eax
c000d6d4:	e8 8a a1 ff ff       	call   c0007863 <malloc>
c000d6d9:	83 c4 10             	add    esp,0x10
c000d6dc:	89 c2                	mov    edx,eax
c000d6de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6e2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d6e5:	90                   	nop
c000d6e6:	83 c4 18             	add    esp,0x18
c000d6e9:	5b                   	pop    ebx
c000d6ea:	c3                   	ret    
c000d6eb:	90                   	nop

c000d6ec <VCache::invalidateReadBuffer()>:
c000d6ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d6f0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d6f6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d6fa:	c3                   	ret    
c000d6fb:	90                   	nop

c000d6fc <VCache::writeWriteBuffer()>:
c000d6fc:	53                   	push   ebx
c000d6fd:	83 ec 08             	sub    esp,0x8
c000d700:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d704:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d708:	74 1e                	je     c000d728 <VCache::writeWriteBuffer()+0x2c>
c000d70a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d70d:	83 ec 0c             	sub    esp,0xc
c000d710:	8b 10                	mov    edx,DWORD PTR [eax]
c000d712:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d715:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d718:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d71b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d71e:	50                   	push   eax
c000d71f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d722:	83 c4 20             	add    esp,0x20
c000d725:	8d 76 00             	lea    esi,[esi+0x0]
c000d728:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d72f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d736:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d73a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d741:	83 c4 08             	add    esp,0x8
c000d744:	5b                   	pop    ebx
c000d745:	c3                   	ret    
c000d746:	66 90                	xchg   ax,ax

c000d748 <VCache::~VCache()>:
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	ba e0 ff 01 c0       	mov    edx,0xc001ffe0
c000d750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d754:	89 10                	mov    DWORD PTR [eax],edx
c000d756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d75a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d75d:	84 c0                	test   al,al
c000d75f:	74 0f                	je     c000d770 <VCache::~VCache()+0x28>
c000d761:	83 ec 0c             	sub    esp,0xc
c000d764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d768:	e8 8f ff ff ff       	call   c000d6fc <VCache::writeWriteBuffer()>
c000d76d:	83 c4 10             	add    esp,0x10
c000d770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d774:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d777:	83 ec 0c             	sub    esp,0xc
c000d77a:	50                   	push   eax
c000d77b:	e8 f3 a0 ff ff       	call   c0007873 <free>
c000d780:	83 c4 10             	add    esp,0x10
c000d783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d787:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d78a:	83 ec 0c             	sub    esp,0xc
c000d78d:	50                   	push   eax
c000d78e:	e8 e0 a0 ff ff       	call   c0007873 <free>
c000d793:	83 c4 10             	add    esp,0x10
c000d796:	90                   	nop
c000d797:	83 c4 0c             	add    esp,0xc
c000d79a:	c3                   	ret    
c000d79b:	90                   	nop

c000d79c <VCache::~VCache()>:
c000d79c:	83 ec 0c             	sub    esp,0xc
c000d79f:	83 ec 0c             	sub    esp,0xc
c000d7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a6:	e8 9d ff ff ff       	call   c000d748 <VCache::~VCache()>
c000d7ab:	83 c4 10             	add    esp,0x10
c000d7ae:	83 ec 08             	sub    esp,0x8
c000d7b1:	6a 44                	push   0x44
c000d7b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7b7:	e8 a1 cd ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c000d7bc:	83 c4 10             	add    esp,0x10
c000d7bf:	83 c4 0c             	add    esp,0xc
c000d7c2:	c3                   	ret    
c000d7c3:	90                   	nop

c000d7c4 <VCache::write(unsigned long long, int, void*)>:
c000d7c4:	55                   	push   ebp
c000d7c5:	57                   	push   edi
c000d7c6:	56                   	push   esi
c000d7c7:	53                   	push   ebx
c000d7c8:	83 ec 1c             	sub    esp,0x1c
c000d7cb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d7cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7d7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d7db:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000d7df:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d7e3:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d7e7:	74 07                	je     c000d7f0 <VCache::write(unsigned long long, int, void*)+0x2c>
c000d7e9:	53                   	push   ebx
c000d7ea:	e8 fd fe ff ff       	call   c000d6ec <VCache::invalidateReadBuffer()>
c000d7ef:	58                   	pop    eax
c000d7f0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d7f4:	74 62                	je     c000d858 <VCache::write(unsigned long long, int, void*)+0x94>
c000d7f6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d7f9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d7fd:	99                   	cdq    
c000d7fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d802:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d805:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d808:	31 c1                	xor    ecx,eax
c000d80a:	89 d0                	mov    eax,edx
c000d80c:	89 ca                	mov    edx,ecx
c000d80e:	31 e8                	xor    eax,ebp
c000d810:	09 c2                	or     edx,eax
c000d812:	75 38                	jne    c000d84c <VCache::write(unsigned long long, int, void*)+0x88>
c000d814:	83 ff 01             	cmp    edi,0x1
c000d817:	75 33                	jne    c000d84c <VCache::write(unsigned long long, int, void*)+0x88>
c000d819:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d81c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d820:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d823:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d829:	0f af c8             	imul   ecx,eax
c000d82c:	01 cf                	add    edi,ecx
c000d82e:	89 c1                	mov    ecx,eax
c000d830:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d832:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d835:	40                   	inc    eax
c000d836:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d839:	83 f8 50             	cmp    eax,0x50
c000d83c:	75 6a                	jne    c000d8a8 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d83e:	83 ec 0c             	sub    esp,0xc
c000d841:	53                   	push   ebx
c000d842:	e8 b5 fe ff ff       	call   c000d6fc <VCache::writeWriteBuffer()>
c000d847:	83 c4 10             	add    esp,0x10
c000d84a:	eb 5c                	jmp    c000d8a8 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d84c:	83 ec 0c             	sub    esp,0xc
c000d84f:	53                   	push   ebx
c000d850:	e8 a7 fe ff ff       	call   c000d6fc <VCache::writeWriteBuffer()>
c000d855:	83 c4 10             	add    esp,0x10
c000d858:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d85b:	83 ff 4f             	cmp    edi,0x4f
c000d85e:	7f 20                	jg     c000d880 <VCache::write(unsigned long long, int, void*)+0xbc>
c000d860:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d864:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000d867:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d86a:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000d86d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d871:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d874:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d87a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d87c:	eb 2a                	jmp    c000d8a8 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d87e:	66 90                	xchg   ax,ax
c000d880:	8b 10                	mov    edx,DWORD PTR [eax]
c000d882:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d886:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d88a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000d88e:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d892:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000d896:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d89a:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d89d:	83 c4 1c             	add    esp,0x1c
c000d8a0:	5b                   	pop    ebx
c000d8a1:	5e                   	pop    esi
c000d8a2:	5f                   	pop    edi
c000d8a3:	5d                   	pop    ebp
c000d8a4:	ff e0                	jmp    eax
c000d8a6:	66 90                	xchg   ax,ax
c000d8a8:	83 c4 1c             	add    esp,0x1c
c000d8ab:	31 c0                	xor    eax,eax
c000d8ad:	5b                   	pop    ebx
c000d8ae:	5e                   	pop    esi
c000d8af:	5f                   	pop    edi
c000d8b0:	5d                   	pop    ebp
c000d8b1:	c3                   	ret    

c000d8b2 <VCache::read(unsigned long long, int, void*)>:
c000d8b2:	55                   	push   ebp
c000d8b3:	57                   	push   edi
c000d8b4:	56                   	push   esi
c000d8b5:	53                   	push   ebx
c000d8b6:	83 ec 1c             	sub    esp,0x1c
c000d8b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000d8bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d8c1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d8c5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000d8c9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d8cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d8d1:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000d8d5:	74 0d                	je     c000d8e4 <VCache::read(unsigned long long, int, void*)+0x32>
c000d8d7:	83 ec 0c             	sub    esp,0xc
c000d8da:	57                   	push   edi
c000d8db:	e8 1c fe ff ff       	call   c000d6fc <VCache::writeWriteBuffer()>
c000d8e0:	83 c4 10             	add    esp,0x10
c000d8e3:	90                   	nop
c000d8e4:	83 fd 01             	cmp    ebp,0x1
c000d8e7:	0f 85 93 00 00 00    	jne    c000d980 <VCache::read(unsigned long long, int, void*)+0xce>
c000d8ed:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d8f0:	89 04 24             	mov    DWORD PTR [esp],eax
c000d8f3:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000d8fa:	0f 85 80 00 00 00    	jne    c000d980 <VCache::read(unsigned long long, int, void*)+0xce>
c000d900:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000d903:	89 e9                	mov    ecx,ebp
c000d905:	f7 d9                	neg    ecx
c000d907:	89 c8                	mov    eax,ecx
c000d909:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d90d:	c1 f8 1f             	sar    eax,0x1f
c000d910:	21 d9                	and    ecx,ebx
c000d912:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d916:	89 c8                	mov    eax,ecx
c000d918:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d91c:	21 f1                	and    ecx,esi
c000d91e:	89 ca                	mov    edx,ecx
c000d920:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000d924:	74 2e                	je     c000d954 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d926:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000d929:	75 29                	jne    c000d954 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d92b:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000d92e:	75 24                	jne    c000d954 <VCache::read(unsigned long long, int, void*)+0xa2>
c000d930:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d933:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d939:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000d93c:	8d 70 ff             	lea    esi,[eax-0x1]
c000d93f:	21 f3                	and    ebx,esi
c000d941:	0f af d9             	imul   ebx,ecx
c000d944:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000d947:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d94b:	89 de                	mov    esi,ebx
c000d94d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d94f:	31 c0                	xor    eax,eax
c000d951:	eb 61                	jmp    c000d9b4 <VCache::read(unsigned long long, int, void*)+0x102>
c000d953:	90                   	nop
c000d954:	83 ec 0c             	sub    esp,0xc
c000d957:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000d95b:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000d95e:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000d961:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d965:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d967:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000d96a:	55                   	push   ebp
c000d96b:	52                   	push   edx
c000d96c:	50                   	push   eax
c000d96d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d971:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000d974:	83 c4 20             	add    esp,0x20
c000d977:	85 c0                	test   eax,eax
c000d979:	75 39                	jne    c000d9b4 <VCache::read(unsigned long long, int, void*)+0x102>
c000d97b:	eb b3                	jmp    c000d930 <VCache::read(unsigned long long, int, void*)+0x7e>
c000d97d:	8d 76 00             	lea    esi,[esi+0x0]
c000d980:	83 ec 0c             	sub    esp,0xc
c000d983:	57                   	push   edi
c000d984:	e8 63 fd ff ff       	call   c000d6ec <VCache::invalidateReadBuffer()>
c000d989:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d98c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d990:	8b 10                	mov    edx,DWORD PTR [eax]
c000d992:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000d996:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000d99a:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000d99e:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000d9a2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d9a6:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d9a9:	83 c4 2c             	add    esp,0x2c
c000d9ac:	5b                   	pop    ebx
c000d9ad:	5e                   	pop    esi
c000d9ae:	5f                   	pop    edi
c000d9af:	5d                   	pop    ebp
c000d9b0:	ff e0                	jmp    eax
c000d9b2:	66 90                	xchg   ax,ax
c000d9b4:	83 c4 1c             	add    esp,0x1c
c000d9b7:	5b                   	pop    ebx
c000d9b8:	5e                   	pop    esi
c000d9b9:	5f                   	pop    edi
c000d9ba:	5d                   	pop    ebp
c000d9bb:	c3                   	ret    

c000d9bc <Video::putrect(int, int, int, int, unsigned int)>:
c000d9bc:	55                   	push   ebp
c000d9bd:	57                   	push   edi
c000d9be:	56                   	push   esi
c000d9bf:	53                   	push   ebx
c000d9c0:	83 ec 1c             	sub    esp,0x1c
c000d9c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d9c7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d9cb:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d9cf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d9d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d9d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9db:	01 df                	add    edi,ebx
c000d9dd:	39 fb                	cmp    ebx,edi
c000d9df:	7d 1f                	jge    c000da00 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d9e1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d9e5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d9e9:	7d 12                	jge    c000d9fd <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d9eb:	8b 16                	mov    edx,DWORD PTR [esi]
c000d9ed:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9f1:	53                   	push   ebx
c000d9f2:	55                   	push   ebp
c000d9f3:	45                   	inc    ebp
c000d9f4:	56                   	push   esi
c000d9f5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d9f8:	83 c4 10             	add    esp,0x10
c000d9fb:	eb e8                	jmp    c000d9e5 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d9fd:	43                   	inc    ebx
c000d9fe:	eb dd                	jmp    c000d9dd <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000da00:	83 c4 1c             	add    esp,0x1c
c000da03:	5b                   	pop    ebx
c000da04:	5e                   	pop    esi
c000da05:	5f                   	pop    edi
c000da06:	5d                   	pop    ebp
c000da07:	c3                   	ret    

c000da08 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000da08:	55                   	push   ebp
c000da09:	57                   	push   edi
c000da0a:	31 ff                	xor    edi,edi
c000da0c:	56                   	push   esi
c000da0d:	53                   	push   ebx
c000da0e:	83 ec 1c             	sub    esp,0x1c
c000da11:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000da15:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000da19:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000da20:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000da25:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000da29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da2d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000da31:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000da34:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000da38:	01 f9                	add    ecx,edi
c000da3a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000da3e:	7d 2f                	jge    c000da6f <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000da40:	31 f6                	xor    esi,esi
c000da42:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000da46:	01 f2                	add    edx,esi
c000da48:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000da4c:	7d 1a                	jge    c000da68 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000da4e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da51:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000da54:	46                   	inc    esi
c000da55:	51                   	push   ecx
c000da56:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da5a:	52                   	push   edx
c000da5b:	55                   	push   ebp
c000da5c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da5f:	83 c4 10             	add    esp,0x10
c000da62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000da66:	eb da                	jmp    c000da42 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000da68:	47                   	inc    edi
c000da69:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000da6d:	eb c5                	jmp    c000da34 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000da6f:	83 c4 1c             	add    esp,0x1c
c000da72:	5b                   	pop    ebx
c000da73:	5e                   	pop    esi
c000da74:	5f                   	pop    edi
c000da75:	5d                   	pop    ebp
c000da76:	c3                   	ret    
c000da77:	90                   	nop

c000da78 <Video::blit(unsigned int*, int, int, int, int)>:
c000da78:	55                   	push   ebp
c000da79:	57                   	push   edi
c000da7a:	56                   	push   esi
c000da7b:	53                   	push   ebx
c000da7c:	83 ec 1c             	sub    esp,0x1c
c000da7f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000da87:	85 c0                	test   eax,eax
c000da89:	79 02                	jns    c000da8d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000da8b:	31 c0                	xor    eax,eax
c000da8d:	c1 e0 02             	shl    eax,0x2
c000da90:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000da94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000da9c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000daa0:	39 d8                	cmp    eax,ebx
c000daa2:	7e 49                	jle    c000daed <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000daa4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000daaa:	7c 41                	jl     c000daed <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000daac:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000dab0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dab4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dab8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000dabc:	39 f9                	cmp    ecx,edi
c000dabe:	7e 22                	jle    c000dae2 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000dac0:	83 c5 04             	add    ebp,0x4
c000dac3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000dac9:	7c 14                	jl     c000dadf <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000dacb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dacd:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000dad0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000dad4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000dad8:	56                   	push   esi
c000dad9:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000dadc:	83 c4 10             	add    esp,0x10
c000dadf:	47                   	inc    edi
c000dae0:	eb d2                	jmp    c000dab4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000dae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dae6:	43                   	inc    ebx
c000dae7:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000daeb:	eb ab                	jmp    c000da98 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000daed:	83 c4 1c             	add    esp,0x1c
c000daf0:	5b                   	pop    ebx
c000daf1:	5e                   	pop    esi
c000daf2:	5f                   	pop    edi
c000daf3:	5d                   	pop    ebp
c000daf4:	c3                   	ret    
c000daf5:	90                   	nop

c000daf6 <Video::clearScreen(unsigned int)>:
c000daf6:	57                   	push   edi
c000daf7:	56                   	push   esi
c000daf8:	53                   	push   ebx
c000daf9:	31 db                	xor    ebx,ebx
c000dafb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000daff:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000db05:	7e 1f                	jle    c000db26 <Video::clearScreen(unsigned int)+0x30>
c000db07:	31 ff                	xor    edi,edi
c000db09:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000db0f:	7e 12                	jle    c000db23 <Video::clearScreen(unsigned int)+0x2d>
c000db11:	8b 06                	mov    eax,DWORD PTR [esi]
c000db13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db17:	53                   	push   ebx
c000db18:	57                   	push   edi
c000db19:	47                   	inc    edi
c000db1a:	56                   	push   esi
c000db1b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db1e:	83 c4 10             	add    esp,0x10
c000db21:	eb e6                	jmp    c000db09 <Video::clearScreen(unsigned int)+0x13>
c000db23:	43                   	inc    ebx
c000db24:	eb d9                	jmp    c000daff <Video::clearScreen(unsigned int)+0x9>
c000db26:	5b                   	pop    ebx
c000db27:	5e                   	pop    esi
c000db28:	5f                   	pop    edi
c000db29:	c3                   	ret    

c000db2a <Video::putpixel(int, int, unsigned int)>:
c000db2a:	c7 44 24 04 e8 ff 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ffe8
c000db32:	e9 d0 28 00 00       	jmp    c0010407 <KePanic(char const*)>
c000db37:	90                   	nop

c000db38 <Video::readPixelApprox(int, int)>:
c000db38:	83 ec 18             	sub    esp,0x18
c000db3b:	68 09 00 02 c0       	push   0xc0020009
c000db40:	e8 c2 28 00 00       	call   c0010407 <KePanic(char const*)>
c000db45:	31 c0                	xor    eax,eax
c000db47:	83 c4 1c             	add    esp,0x1c
c000db4a:	c3                   	ret    
c000db4b:	90                   	nop

c000db4c <Video::Video(char const*)>:
c000db4c:	83 ec 0c             	sub    esp,0xc
c000db4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db53:	83 ec 08             	sub    esp,0x8
c000db56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db5a:	50                   	push   eax
c000db5b:	e8 c4 e0 ff ff       	call   c000bc24 <Device::Device(char const*)>
c000db60:	83 c4 10             	add    esp,0x10
c000db63:	ba 84 00 02 c0       	mov    edx,0xc0020084
c000db68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db6c:	89 10                	mov    DWORD PTR [eax],edx
c000db6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db72:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000db7c:	90                   	nop
c000db7d:	83 c4 0c             	add    esp,0xc
c000db80:	c3                   	ret    
c000db81:	90                   	nop

c000db82 <Video::~Video()>:
c000db82:	83 ec 0c             	sub    esp,0xc
c000db85:	ba 84 00 02 c0       	mov    edx,0xc0020084
c000db8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db8e:	89 10                	mov    DWORD PTR [eax],edx
c000db90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db94:	83 ec 0c             	sub    esp,0xc
c000db97:	50                   	push   eax
c000db98:	e8 f5 dd ff ff       	call   c000b992 <Device::~Device()>
c000db9d:	83 c4 10             	add    esp,0x10
c000dba0:	90                   	nop
c000dba1:	83 c4 0c             	add    esp,0xc
c000dba4:	c3                   	ret    
c000dba5:	90                   	nop

c000dba6 <Video::~Video()>:
c000dba6:	83 ec 0c             	sub    esp,0xc
c000dba9:	83 ec 0c             	sub    esp,0xc
c000dbac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb0:	e8 cd ff ff ff       	call   c000db82 <Video::~Video()>
c000dbb5:	83 c4 10             	add    esp,0x10
c000dbb8:	83 ec 08             	sub    esp,0x8
c000dbbb:	68 64 01 00 00       	push   0x164
c000dbc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc4:	e8 94 c9 ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c000dbc9:	83 c4 10             	add    esp,0x10
c000dbcc:	83 c4 0c             	add    esp,0xc
c000dbcf:	c3                   	ret    

c000dbd0 <Video::isMonochrome()>:
c000dbd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbd4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000dbda:	c3                   	ret    
c000dbdb:	90                   	nop

c000dbdc <Video::getWidth()>:
c000dbdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbe0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dbe6:	c3                   	ret    
c000dbe7:	90                   	nop

c000dbe8 <Video::getHeight()>:
c000dbe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbec:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dbf2:	c3                   	ret    
c000dbf3:	90                   	nop

c000dbf4 <Video::drawCursor(int, int, unsigned int*, int)>:
c000dbf4:	55                   	push   ebp
c000dbf5:	57                   	push   edi
c000dbf6:	56                   	push   esi
c000dbf7:	53                   	push   ebx
c000dbf8:	83 ec 2c             	sub    esp,0x2c
c000dbfb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dbff:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dc03:	83 f8 01             	cmp    eax,0x1
c000dc06:	19 c9                	sbb    ecx,ecx
c000dc08:	31 db                	xor    ebx,ebx
c000dc0a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000dc0e:	89 cd                	mov    ebp,ecx
c000dc10:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000dc18:	f7 d5                	not    ebp
c000dc1a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000dc20:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dc24:	01 d8                	add    eax,ebx
c000dc26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc2a:	56                   	push   esi
c000dc2b:	e8 b8 ff ff ff       	call   c000dbe8 <Video::getHeight()>
c000dc30:	59                   	pop    ecx
c000dc31:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dc35:	7e 70                	jle    c000dca7 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000dc37:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dc3b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000dc3f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dc42:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc46:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dc4a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dc51:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc55:	89 f8                	mov    eax,edi
c000dc57:	83 c0 20             	add    eax,0x20
c000dc5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc5e:	56                   	push   esi
c000dc5f:	e8 78 ff ff ff       	call   c000dbdc <Video::getWidth()>
c000dc64:	5a                   	pop    edx
c000dc65:	39 c7                	cmp    edi,eax
c000dc67:	7d 34                	jge    c000dc9d <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000dc69:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dc6e:	74 05                	je     c000dc75 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000dc70:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc72:	55                   	push   ebp
c000dc73:	eb 0d                	jmp    c000dc82 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000dc75:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dc7a:	74 12                	je     c000dc8e <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000dc7c:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc82:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc86:	57                   	push   edi
c000dc87:	56                   	push   esi
c000dc88:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc8b:	83 c4 10             	add    esp,0x10
c000dc8e:	47                   	inc    edi
c000dc8f:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dc93:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dc97:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000dc9b:	75 c1                	jne    c000dc5e <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000dc9d:	43                   	inc    ebx
c000dc9e:	83 fb 20             	cmp    ebx,0x20
c000dca1:	0f 85 79 ff ff ff    	jne    c000dc20 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000dca7:	83 c4 2c             	add    esp,0x2c
c000dcaa:	5b                   	pop    ebx
c000dcab:	5e                   	pop    esi
c000dcac:	5f                   	pop    edi
c000dcad:	5d                   	pop    ebp
c000dcae:	c3                   	ret    
c000dcaf:	90                   	nop

c000dcb0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000dcb0:	55                   	push   ebp
c000dcb1:	57                   	push   edi
c000dcb2:	56                   	push   esi
c000dcb3:	53                   	push   ebx
c000dcb4:	83 ec 28             	sub    esp,0x28
c000dcb7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dcbb:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dcbf:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dcc3:	c1 e6 08             	shl    esi,0x8
c000dcc6:	01 c6                	add    esi,eax
c000dcc8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000dccc:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dcd0:	c1 e0 08             	shl    eax,0x8
c000dcd3:	01 d0                	add    eax,edx
c000dcd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dcd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcdd:	0f af c6             	imul   eax,esi
c000dce0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dce7:	50                   	push   eax
c000dce8:	e8 76 9b ff ff       	call   c0007863 <malloc>
c000dced:	83 c4 10             	add    esp,0x10
c000dcf0:	89 c7                	mov    edi,eax
c000dcf2:	85 c0                	test   eax,eax
c000dcf4:	75 10                	jne    c000dd06 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000dcf6:	83 ec 0c             	sub    esp,0xc
c000dcf9:	68 34 00 02 c0       	push   0xc0020034
c000dcfe:	e8 04 27 00 00       	call   c0010407 <KePanic(char const*)>
c000dd03:	83 c4 10             	add    esp,0x10
c000dd06:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dd09:	ba 12 00 00 00       	mov    edx,0x12
c000dd0e:	84 c0                	test   al,al
c000dd10:	74 11                	je     c000dd23 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dd12:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dd16:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dd1a:	c1 fa 03             	sar    edx,0x3
c000dd1d:	0f af d1             	imul   edx,ecx
c000dd20:	83 c2 12             	add    edx,0x12
c000dd23:	85 f6                	test   esi,esi
c000dd25:	74 06                	je     c000dd2d <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dd27:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dd2b:	75 12                	jne    c000dd3f <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dd2d:	83 ec 0c             	sub    esp,0xc
c000dd30:	68 44 00 02 c0       	push   0xc0020044
c000dd35:	e8 19 c9 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c000dd3a:	e9 b8 00 00 00       	jmp    c000ddf7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dd3f:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dd43:	80 f9 02             	cmp    cl,0x2
c000dd46:	0f 85 96 00 00 00    	jne    c000dde2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dd4c:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dd51:	75 0e                	jne    c000dd61 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dd53:	84 c0                	test   al,al
c000dd55:	75 0a                	jne    c000dd61 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dd57:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dd5a:	83 e8 18             	sub    eax,0x18
c000dd5d:	a8 f7                	test   al,0xf7
c000dd5f:	74 0a                	je     c000dd6b <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dd61:	83 ec 0c             	sub    esp,0xc
c000dd64:	68 59 00 02 c0       	push   0xc0020059
c000dd69:	eb 7f                	jmp    c000ddea <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dd6b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd73:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dd7b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dd7f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dd87:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dd8b:	75 0c                	jne    c000dd99 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dd8d:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dd92:	c1 e0 18             	shl    eax,0x18
c000dd95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd99:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dd9e:	c1 e1 10             	shl    ecx,0x10
c000dda1:	45                   	inc    ebp
c000dda2:	89 c8                	mov    eax,ecx
c000dda4:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dda9:	c1 e1 08             	shl    ecx,0x8
c000ddac:	09 c1                	or     ecx,eax
c000ddae:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ddb2:	09 c1                	or     ecx,eax
c000ddb4:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ddb8:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ddbc:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ddc0:	c1 f8 03             	sar    eax,0x3
c000ddc3:	01 c2                	add    edx,eax
c000ddc5:	89 e8                	mov    eax,ebp
c000ddc7:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ddcb:	39 c6                	cmp    esi,eax
c000ddcd:	7f b0                	jg     c000dd7f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000ddcf:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ddd3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ddd7:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ddda:	7e 22                	jle    c000ddfe <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dddc:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dde0:	eb 99                	jmp    c000dd7b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dde2:	50                   	push   eax
c000dde3:	50                   	push   eax
c000dde4:	51                   	push   ecx
c000dde5:	68 67 00 02 c0       	push   0xc0020067
c000ddea:	e8 64 c8 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c000ddef:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ddf2:	e8 7c 9a ff ff       	call   c0007873 <free>
c000ddf7:	83 c4 10             	add    esp,0x10
c000ddfa:	31 ff                	xor    edi,edi
c000ddfc:	eb 0f                	jmp    c000de0d <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000ddfe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000de02:	89 30                	mov    DWORD PTR [eax],esi
c000de04:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de08:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000de0b:	89 30                	mov    DWORD PTR [eax],esi
c000de0d:	83 c4 1c             	add    esp,0x1c
c000de10:	89 f8                	mov    eax,edi
c000de12:	5b                   	pop    ebx
c000de13:	5e                   	pop    esi
c000de14:	5f                   	pop    edi
c000de15:	5d                   	pop    ebp
c000de16:	c3                   	ret    
c000de17:	90                   	nop

c000de18 <Video::putTGA(int, int, unsigned char*, int)>:
c000de18:	55                   	push   ebp
c000de19:	57                   	push   edi
c000de1a:	56                   	push   esi
c000de1b:	53                   	push   ebx
c000de1c:	83 ec 28             	sub    esp,0x28
c000de1f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000de23:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000de27:	50                   	push   eax
c000de28:	8d 44 24 18          	lea    eax,[esp+0x18]
c000de2c:	50                   	push   eax
c000de2d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000de31:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000de35:	56                   	push   esi
c000de36:	e8 75 fe ff ff       	call   c000dcb0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000de3b:	83 c4 20             	add    esp,0x20
c000de3e:	85 c0                	test   eax,eax
c000de40:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de44:	74 35                	je     c000de7b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000de46:	89 c7                	mov    edi,eax
c000de48:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000de4c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000de50:	39 d8                	cmp    eax,ebx
c000de52:	7e 27                	jle    c000de7b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000de54:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de58:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de5c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000de60:	39 e8                	cmp    eax,ebp
c000de62:	7e 14                	jle    c000de78 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000de64:	83 c7 04             	add    edi,0x4
c000de67:	8b 06                	mov    eax,DWORD PTR [esi]
c000de69:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000de6c:	53                   	push   ebx
c000de6d:	55                   	push   ebp
c000de6e:	45                   	inc    ebp
c000de6f:	56                   	push   esi
c000de70:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de73:	83 c4 10             	add    esp,0x10
c000de76:	eb e0                	jmp    c000de58 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000de78:	43                   	inc    ebx
c000de79:	eb cd                	jmp    c000de48 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000de7b:	83 c4 1c             	add    esp,0x1c
c000de7e:	5b                   	pop    ebx
c000de7f:	5e                   	pop    esi
c000de80:	5f                   	pop    edi
c000de81:	5d                   	pop    ebp
c000de82:	c3                   	ret    
c000de83:	90                   	nop

c000de84 <ACPI::close(int, int, void*)>:
c000de84:	83 ec 1c             	sub    esp,0x1c
c000de87:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000de8f:	74 0b                	je     c000de9c <ACPI::close(int, int, void*)+0x18>
c000de91:	b8 00 00 00 00       	mov    eax,0x0
c000de96:	e9 9d 00 00 00       	jmp    c000df38 <ACPI::close(int, int, void*)+0xb4>
c000de9b:	90                   	nop
c000de9c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dea1:	75 29                	jne    c000decc <ACPI::close(int, int, void*)+0x48>
c000dea3:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000dea8:	85 c0                	test   eax,eax
c000deaa:	74 08                	je     c000deb4 <ACPI::close(int, int, void*)+0x30>
c000deac:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000deb1:	ff d0                	call   eax
c000deb3:	90                   	nop
c000deb4:	83 ec 0c             	sub    esp,0xc
c000deb7:	68 c8 00 02 c0       	push   0xc00200c8
c000debc:	e8 46 25 00 00       	call   c0010407 <KePanic(char const*)>
c000dec1:	83 c4 10             	add    esp,0x10
c000dec4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dec9:	eb 6d                	jmp    c000df38 <ACPI::close(int, int, void*)+0xb4>
c000decb:	90                   	nop
c000decc:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ded1:	75 5d                	jne    c000df30 <ACPI::close(int, int, void*)+0xac>
c000ded3:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000ded8:	85 c0                	test   eax,eax
c000deda:	74 08                	je     c000dee4 <ACPI::close(int, int, void*)+0x60>
c000dedc:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000dee1:	ff d0                	call   eax
c000dee3:	90                   	nop
c000dee4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dee9:	8d 76 00             	lea    esi,[esi+0x0]
c000deec:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000def0:	25 ff 00 00 00       	and    eax,0xff
c000def5:	83 e0 02             	and    eax,0x2
c000def8:	74 1e                	je     c000df18 <ACPI::close(int, int, void*)+0x94>
c000defa:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000df01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df05:	89 c2                	mov    edx,eax
c000df07:	ec                   	in     al,dx
c000df08:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000df0c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000df10:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000df14:	eb d6                	jmp    c000deec <ACPI::close(int, int, void*)+0x68>
c000df16:	66 90                	xchg   ax,ax
c000df18:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000df1f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000df24:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000df28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000df2c:	ee                   	out    dx,al
c000df2d:	8d 76 00             	lea    esi,[esi+0x0]
c000df30:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000df35:	8d 76 00             	lea    esi,[esi+0x0]
c000df38:	83 c4 1c             	add    esp,0x1c
c000df3b:	c3                   	ret    

c000df3c <findRSDP()>:
c000df3c:	83 ec 1c             	sub    esp,0x1c
c000df3f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df44:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df4a:	83 e0 04             	and    eax,0x4
c000df4d:	84 c0                	test   al,al
c000df4f:	75 07                	jne    c000df58 <findRSDP()+0x1c>
c000df51:	b8 00 00 00 00       	mov    eax,0x0
c000df56:	eb 70                	jmp    c000dfc8 <findRSDP()+0x8c>
c000df58:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000df5d:	3d ff 07 00 00       	cmp    eax,0x7ff
c000df62:	7f 1c                	jg     c000df80 <findRSDP()+0x44>
c000df64:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df69:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000df6f:	83 e2 fb             	and    edx,0xfffffffb
c000df72:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000df78:	b8 00 00 00 00       	mov    eax,0x0
c000df7d:	eb 49                	jmp    c000dfc8 <findRSDP()+0x8c>
c000df7f:	90                   	nop
c000df80:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000df88:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000df90:	77 2e                	ja     c000dfc0 <findRSDP()+0x84>
c000df92:	83 ec 04             	sub    esp,0x4
c000df95:	6a 08                	push   0x8
c000df97:	68 63 01 02 c0       	push   0xc0020163
c000df9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dfa0:	e8 db 23 ff ff       	call   c0000380 <memcmp>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	85 c0                	test   eax,eax
c000dfaa:	0f 94 c0             	sete   al
c000dfad:	84 c0                	test   al,al
c000dfaf:	74 07                	je     c000dfb8 <findRSDP()+0x7c>
c000dfb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfb5:	eb 11                	jmp    c000dfc8 <findRSDP()+0x8c>
c000dfb7:	90                   	nop
c000dfb8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dfbd:	eb c9                	jmp    c000df88 <findRSDP()+0x4c>
c000dfbf:	90                   	nop
c000dfc0:	b8 00 00 00 00       	mov    eax,0x0
c000dfc5:	8d 76 00             	lea    esi,[esi+0x0]
c000dfc8:	83 c4 1c             	add    esp,0x1c
c000dfcb:	c3                   	ret    

c000dfcc <loadACPITables(unsigned char*)>:
c000dfcc:	57                   	push   edi
c000dfcd:	56                   	push   esi
c000dfce:	53                   	push   ebx
c000dfcf:	83 ec 60             	sub    esp,0x60
c000dfd2:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000dfd7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dfdd:	83 e0 04             	and    eax,0x4
c000dfe0:	84 c0                	test   al,al
c000dfe2:	0f 84 3c 02 00 00    	je     c000e224 <loadACPITables(unsigned char*)+0x258>
c000dfe8:	a0 c0 66 02 c0       	mov    al,ds:0xc00266c0
c000dfed:	84 c0                	test   al,al
c000dfef:	74 77                	je     c000e068 <loadACPITables(unsigned char*)+0x9c>
c000dff1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dff5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dff9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dffd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e000:	83 e8 24             	sub    eax,0x24
c000e003:	c1 e8 03             	shr    eax,0x3
c000e006:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e00a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e012:	66 90                	xchg   ax,ax
c000e014:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e018:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e01c:	0f 8d b6 00 00 00    	jge    c000e0d8 <loadACPITables(unsigned char*)+0x10c>
c000e022:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e026:	83 c0 24             	add    eax,0x24
c000e029:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e02d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e031:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e035:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e039:	c1 e0 03             	shl    eax,0x3
c000e03c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e040:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e047:	8b 00                	mov    eax,DWORD PTR [eax]
c000e049:	89 c1                	mov    ecx,eax
c000e04b:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e050:	8d 50 01             	lea    edx,[eax+0x1]
c000e053:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000e059:	89 ca                	mov    edx,ecx
c000e05b:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e062:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e066:	eb ac                	jmp    c000e014 <loadACPITables(unsigned char*)+0x48>
c000e068:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e06c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e070:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e074:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e077:	83 e8 24             	sub    eax,0x24
c000e07a:	c1 e8 02             	shr    eax,0x2
c000e07d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e081:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e089:	8d 76 00             	lea    esi,[esi+0x0]
c000e08c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e090:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e094:	7d 42                	jge    c000e0d8 <loadACPITables(unsigned char*)+0x10c>
c000e096:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e09a:	83 c0 24             	add    eax,0x24
c000e09d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e0a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e0a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e0a9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e0ad:	c1 e0 02             	shl    eax,0x2
c000e0b0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e0b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e0b8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e0ba:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e0bf:	8d 50 01             	lea    edx,[eax+0x1]
c000e0c2:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000e0c8:	89 ca                	mov    edx,ecx
c000e0ca:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e0d1:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e0d5:	eb b5                	jmp    c000e08c <loadACPITables(unsigned char*)+0xc0>
c000e0d7:	90                   	nop
c000e0d8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e0e0:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e0e5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e0e9:	0f 8d 39 01 00 00    	jge    c000e228 <loadACPITables(unsigned char*)+0x25c>
c000e0ef:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e0f3:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e0fa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e0fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e102:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e106:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e10a:	25 ff 0f 00 00       	and    eax,0xfff
c000e10f:	89 c6                	mov    esi,eax
c000e111:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e117:	83 ec 0c             	sub    esp,0xc
c000e11a:	6a 01                	push   0x1
c000e11c:	e8 41 b2 ff ff       	call   c0009362 <Virt::allocateKernelVirtualPages(int)>
c000e121:	83 c4 10             	add    esp,0x10
c000e124:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e128:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e12e:	83 ec 0c             	sub    esp,0xc
c000e131:	6a 01                	push   0x1
c000e133:	6a 01                	push   0x1
c000e135:	50                   	push   eax
c000e136:	52                   	push   edx
c000e137:	53                   	push   ebx
c000e138:	e8 f3 bb ff ff       	call   c0009d30 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e13d:	83 c4 20             	add    esp,0x20
c000e140:	09 f0                	or     eax,esi
c000e142:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e146:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e14a:	c1 e0 03             	shl    eax,0x3
c000e14d:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e152:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e156:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e15a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e15e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e166:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e16a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e16e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e172:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e176:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e17a:	89 c6                	mov    esi,eax
c000e17c:	89 d7                	mov    edi,edx
c000e17e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e180:	89 c8                	mov    eax,ecx
c000e182:	89 fa                	mov    edx,edi
c000e184:	89 f3                	mov    ebx,esi
c000e186:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e18a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e18e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e192:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e196:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e199:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e19d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e1a1:	05 00 10 00 00       	add    eax,0x1000
c000e1a6:	c1 e8 0c             	shr    eax,0xc
c000e1a9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e1ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1b9:	25 ff 0f 00 00       	and    eax,0xfff
c000e1be:	89 c6                	mov    esi,eax
c000e1c0:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e1c6:	83 ec 0c             	sub    esp,0xc
c000e1c9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e1cd:	e8 90 b1 ff ff       	call   c0009362 <Virt::allocateKernelVirtualPages(int)>
c000e1d2:	83 c4 10             	add    esp,0x10
c000e1d5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e1d9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e1df:	83 ec 0c             	sub    esp,0xc
c000e1e2:	6a 01                	push   0x1
c000e1e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e1e8:	50                   	push   eax
c000e1e9:	52                   	push   edx
c000e1ea:	53                   	push   ebx
c000e1eb:	e8 40 bb ff ff       	call   c0009d30 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e1f0:	83 c4 20             	add    esp,0x20
c000e1f3:	09 f0                	or     eax,esi
c000e1f5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e1f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1fd:	83 ec 0c             	sub    esp,0xc
c000e200:	50                   	push   eax
c000e201:	e8 5b b4 ff ff       	call   c0009661 <Virt::freeKernelVirtualPages(unsigned long)>
c000e206:	83 c4 10             	add    esp,0x10
c000e209:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e20d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e211:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e218:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e21c:	e9 bf fe ff ff       	jmp    c000e0e0 <loadACPITables(unsigned char*)+0x114>
c000e221:	8d 76 00             	lea    esi,[esi+0x0]
c000e224:	90                   	nop
c000e225:	8d 76 00             	lea    esi,[esi+0x0]
c000e228:	83 c4 60             	add    esp,0x60
c000e22b:	5b                   	pop    ebx
c000e22c:	5e                   	pop    esi
c000e22d:	5f                   	pop    edi
c000e22e:	c3                   	ret    
c000e22f:	90                   	nop

c000e230 <findRSDT(unsigned char*)>:
c000e230:	57                   	push   edi
c000e231:	56                   	push   esi
c000e232:	53                   	push   ebx
c000e233:	83 ec 50             	sub    esp,0x50
c000e236:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e23b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e241:	83 e0 04             	and    eax,0x4
c000e244:	84 c0                	test   al,al
c000e246:	75 0c                	jne    c000e254 <findRSDT(unsigned char*)+0x24>
c000e248:	b8 00 00 00 00       	mov    eax,0x0
c000e24d:	e9 26 01 00 00       	jmp    c000e378 <findRSDT(unsigned char*)+0x148>
c000e252:	66 90                	xchg   ax,ax
c000e254:	89 e0                	mov    eax,esp
c000e256:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e25a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e25e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e262:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e26a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e26e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e272:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e276:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e27a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e27e:	89 c6                	mov    esi,eax
c000e280:	89 d7                	mov    edi,edx
c000e282:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e284:	89 c8                	mov    eax,ecx
c000e286:	89 fa                	mov    edx,edi
c000e288:	89 f3                	mov    ebx,esi
c000e28a:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e28e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e292:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e296:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e29a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e29e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e2a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e2aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e2ae:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2b6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e2ba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e2be:	25 ff 0f 00 00       	and    eax,0xfff
c000e2c3:	89 c6                	mov    esi,eax
c000e2c5:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e2cb:	83 ec 0c             	sub    esp,0xc
c000e2ce:	6a 02                	push   0x2
c000e2d0:	e8 8d b0 ff ff       	call   c0009362 <Virt::allocateKernelVirtualPages(int)>
c000e2d5:	83 c4 10             	add    esp,0x10
c000e2d8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e2dc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e2e2:	83 ec 0c             	sub    esp,0xc
c000e2e5:	6a 01                	push   0x1
c000e2e7:	6a 02                	push   0x2
c000e2e9:	50                   	push   eax
c000e2ea:	52                   	push   edx
c000e2eb:	53                   	push   ebx
c000e2ec:	e8 3f ba ff ff       	call   c0009d30 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e2f1:	83 c4 20             	add    esp,0x20
c000e2f4:	09 f0                	or     eax,esi
c000e2f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e2fa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e2fe:	25 ff 0f 00 00       	and    eax,0xfff
c000e303:	89 c6                	mov    esi,eax
c000e305:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e30b:	83 ec 0c             	sub    esp,0xc
c000e30e:	6a 02                	push   0x2
c000e310:	e8 4d b0 ff ff       	call   c0009362 <Virt::allocateKernelVirtualPages(int)>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e31c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e322:	83 ec 0c             	sub    esp,0xc
c000e325:	6a 01                	push   0x1
c000e327:	6a 02                	push   0x2
c000e329:	50                   	push   eax
c000e32a:	52                   	push   edx
c000e32b:	53                   	push   ebx
c000e32c:	e8 ff b9 ff ff       	call   c0009d30 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e331:	83 c4 20             	add    esp,0x20
c000e334:	09 f0                	or     eax,esi
c000e336:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e33a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e33f:	75 13                	jne    c000e354 <findRSDT(unsigned char*)+0x124>
c000e341:	c6 05 c0 66 02 c0 00 	mov    BYTE PTR ds:0xc00266c0,0x0
c000e348:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e34c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e350:	eb 22                	jmp    c000e374 <findRSDT(unsigned char*)+0x144>
c000e352:	66 90                	xchg   ax,ax
c000e354:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e359:	75 11                	jne    c000e36c <findRSDT(unsigned char*)+0x13c>
c000e35b:	c6 05 c0 66 02 c0 01 	mov    BYTE PTR ds:0xc00266c0,0x1
c000e362:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e366:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e36a:	eb 08                	jmp    c000e374 <findRSDT(unsigned char*)+0x144>
c000e36c:	b8 00 00 00 00       	mov    eax,0x0
c000e371:	eb 05                	jmp    c000e378 <findRSDT(unsigned char*)+0x148>
c000e373:	90                   	nop
c000e374:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e378:	83 c4 50             	add    esp,0x50
c000e37b:	5b                   	pop    ebx
c000e37c:	5e                   	pop    esi
c000e37d:	5f                   	pop    edi
c000e37e:	c3                   	ret    
c000e37f:	90                   	nop

c000e380 <findDataTable(unsigned char*, char*)>:
c000e380:	83 ec 1c             	sub    esp,0x1c
c000e383:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e388:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e38e:	83 e0 04             	and    eax,0x4
c000e391:	84 c0                	test   al,al
c000e393:	75 07                	jne    c000e39c <findDataTable(unsigned char*, char*)+0x1c>
c000e395:	b8 00 00 00 00       	mov    eax,0x0
c000e39a:	eb 58                	jmp    c000e3f4 <findDataTable(unsigned char*, char*)+0x74>
c000e39c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e3a4:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e3a9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e3ad:	7d 3d                	jge    c000e3ec <findDataTable(unsigned char*, char*)+0x6c>
c000e3af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3b3:	c1 e0 03             	shl    eax,0x3
c000e3b6:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e3bb:	83 ec 04             	sub    esp,0x4
c000e3be:	6a 04                	push   0x4
c000e3c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e3c4:	50                   	push   eax
c000e3c5:	e8 b6 1f ff ff       	call   c0000380 <memcmp>
c000e3ca:	83 c4 10             	add    esp,0x10
c000e3cd:	85 c0                	test   eax,eax
c000e3cf:	0f 94 c0             	sete   al
c000e3d2:	84 c0                	test   al,al
c000e3d4:	74 0e                	je     c000e3e4 <findDataTable(unsigned char*, char*)+0x64>
c000e3d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3da:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e3e1:	eb 11                	jmp    c000e3f4 <findDataTable(unsigned char*, char*)+0x74>
c000e3e3:	90                   	nop
c000e3e4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e3e8:	eb ba                	jmp    c000e3a4 <findDataTable(unsigned char*, char*)+0x24>
c000e3ea:	66 90                	xchg   ax,ax
c000e3ec:	b8 00 00 00 00       	mov    eax,0x0
c000e3f1:	8d 76 00             	lea    esi,[esi+0x0]
c000e3f4:	83 c4 1c             	add    esp,0x1c
c000e3f7:	c3                   	ret    

c000e3f8 <scanMADT()>:
c000e3f8:	53                   	push   ebx
c000e3f9:	83 ec 38             	sub    esp,0x38
c000e3fc:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000e401:	25 00 04 00 00       	and    eax,0x400
c000e406:	74 14                	je     c000e41c <scanMADT()+0x24>
c000e408:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e40d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e413:	83 e2 fb             	and    edx,0xfffffffb
c000e416:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e41c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e421:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e427:	83 e0 04             	and    eax,0x4
c000e42a:	84 c0                	test   al,al
c000e42c:	0f 84 8a 04 00 00    	je     c000e8bc <scanMADT()+0x4c4>
c000e432:	e8 05 fb ff ff       	call   c000df3c <findRSDP()>
c000e437:	a3 cc 66 02 c0       	mov    ds:0xc00266cc,eax
c000e43c:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e441:	85 c0                	test   eax,eax
c000e443:	75 1b                	jne    c000e460 <scanMADT()+0x68>
c000e445:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e44a:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e450:	83 e2 fb             	and    edx,0xfffffffb
c000e453:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e459:	e9 66 04 00 00       	jmp    c000e8c4 <scanMADT()+0x4cc>
c000e45e:	66 90                	xchg   ax,ax
c000e460:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e465:	83 ec 0c             	sub    esp,0xc
c000e468:	50                   	push   eax
c000e469:	e8 c2 fd ff ff       	call   c000e230 <findRSDT(unsigned char*)>
c000e46e:	83 c4 10             	add    esp,0x10
c000e471:	a3 c8 66 02 c0       	mov    ds:0xc00266c8,eax
c000e476:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e47b:	85 c0                	test   eax,eax
c000e47d:	75 19                	jne    c000e498 <scanMADT()+0xa0>
c000e47f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e484:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e48a:	83 e2 fb             	and    edx,0xfffffffb
c000e48d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e493:	e9 2c 04 00 00       	jmp    c000e8c4 <scanMADT()+0x4cc>
c000e498:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e49d:	83 ec 0c             	sub    esp,0xc
c000e4a0:	50                   	push   eax
c000e4a1:	e8 26 fb ff ff       	call   c000dfcc <loadACPITables(unsigned char*)>
c000e4a6:	83 c4 10             	add    esp,0x10
c000e4a9:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e4ae:	83 ec 08             	sub    esp,0x8
c000e4b1:	68 6c 01 02 c0       	push   0xc002016c
c000e4b6:	50                   	push   eax
c000e4b7:	e8 c4 fe ff ff       	call   c000e380 <findDataTable(unsigned char*, char*)>
c000e4bc:	83 c4 10             	add    esp,0x10
c000e4bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e4c3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e4c8:	75 1a                	jne    c000e4e4 <scanMADT()+0xec>
c000e4ca:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e4cf:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e4d5:	83 e2 fe             	and    edx,0xfffffffe
c000e4d8:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e4de:	e9 e1 03 00 00       	jmp    c000e8c4 <scanMADT()+0x4cc>
c000e4e3:	90                   	nop
c000e4e4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e4ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4f3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e4f7:	0f 87 c7 03 00 00    	ja     c000e8c4 <scanMADT()+0x4cc>
c000e4fd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e505:	0f 87 b9 03 00 00    	ja     c000e8c4 <scanMADT()+0x4cc>
c000e50b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e50f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e517:	8d 50 01             	lea    edx,[eax+0x1]
c000e51a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e51e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e522:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e526:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e52a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e52e:	8d 50 01             	lea    edx,[eax+0x1]
c000e531:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e535:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e539:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e53d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e541:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e546:	0f 86 74 03 00 00    	jbe    c000e8c0 <scanMADT()+0x4c8>
c000e54c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e551:	75 5d                	jne    c000e5b0 <scanMADT()+0x1b8>
c000e553:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e557:	8d 50 01             	lea    edx,[eax+0x1]
c000e55a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e55e:	8a 15 c0 68 02 c0    	mov    dl,BYTE PTR ds:0xc00268c0
c000e564:	81 e2 ff 00 00 00    	and    edx,0xff
c000e56a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e56e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e572:	88 82 00 69 02 c0    	mov    BYTE PTR [edx-0x3ffd9700],al
c000e578:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e57c:	8d 42 01             	lea    eax,[edx+0x1]
c000e57f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e583:	a0 c0 68 02 c0       	mov    al,ds:0xc00268c0
c000e588:	8d 48 01             	lea    ecx,[eax+0x1]
c000e58b:	88 0d c0 68 02 c0    	mov    BYTE PTR ds:0xc00268c0,cl
c000e591:	25 ff 00 00 00       	and    eax,0xff
c000e596:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e59a:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e59e:	88 90 e0 68 02 c0    	mov    BYTE PTR [eax-0x3ffd9720],dl
c000e5a4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e5a9:	e9 f6 02 00 00       	jmp    c000e8a4 <scanMADT()+0x4ac>
c000e5ae:	66 90                	xchg   ax,ax
c000e5b0:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e5b5:	0f 85 29 01 00 00    	jne    c000e6e4 <scanMADT()+0x2ec>
c000e5bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5bf:	8d 50 01             	lea    edx,[eax+0x1]
c000e5c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5c6:	8a 15 80 67 02 c0    	mov    dl,BYTE PTR ds:0xc0026780
c000e5cc:	81 e2 ff 00 00 00    	and    edx,0xff
c000e5d2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e5d6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e5da:	88 82 a0 67 02 c0    	mov    BYTE PTR [edx-0x3ffd9860],al
c000e5e0:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e5e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5ec:	01 d0                	add    eax,edx
c000e5ee:	83 c0 2c             	add    eax,0x2c
c000e5f1:	8a 00                	mov    al,BYTE PTR [eax]
c000e5f3:	31 d2                	xor    edx,edx
c000e5f5:	88 c2                	mov    dl,al
c000e5f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5fb:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e602:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e606:	25 ff 00 00 00       	and    eax,0xff
c000e60b:	c1 e0 08             	shl    eax,0x8
c000e60e:	89 d1                	mov    ecx,edx
c000e610:	09 c1                	or     ecx,eax
c000e612:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e616:	8d 50 02             	lea    edx,[eax+0x2]
c000e619:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e61d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e621:	25 ff 00 00 00       	and    eax,0xff
c000e626:	c1 e0 10             	shl    eax,0x10
c000e629:	09 c1                	or     ecx,eax
c000e62b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e62f:	8d 50 03             	lea    edx,[eax+0x3]
c000e632:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e636:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e63a:	25 ff 00 00 00       	and    eax,0xff
c000e63f:	c1 e0 18             	shl    eax,0x18
c000e642:	09 c1                	or     ecx,eax
c000e644:	89 ca                	mov    edx,ecx
c000e646:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e64b:	25 ff 00 00 00       	and    eax,0xff
c000e650:	89 14 85 c0 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9840],edx
c000e657:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e65c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e660:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e664:	01 d0                	add    eax,edx
c000e666:	83 c0 2c             	add    eax,0x2c
c000e669:	8a 00                	mov    al,BYTE PTR [eax]
c000e66b:	31 d2                	xor    edx,edx
c000e66d:	88 c2                	mov    dl,al
c000e66f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e673:	8d 48 01             	lea    ecx,[eax+0x1]
c000e676:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e67a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e67e:	25 ff 00 00 00       	and    eax,0xff
c000e683:	c1 e0 08             	shl    eax,0x8
c000e686:	89 d1                	mov    ecx,edx
c000e688:	09 c1                	or     ecx,eax
c000e68a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e68e:	8d 50 02             	lea    edx,[eax+0x2]
c000e691:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e695:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e699:	25 ff 00 00 00       	and    eax,0xff
c000e69e:	c1 e0 10             	shl    eax,0x10
c000e6a1:	09 c1                	or     ecx,eax
c000e6a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6a7:	8d 50 03             	lea    edx,[eax+0x3]
c000e6aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6ae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e6b2:	25 ff 00 00 00       	and    eax,0xff
c000e6b7:	c1 e0 18             	shl    eax,0x18
c000e6ba:	09 c1                	or     ecx,eax
c000e6bc:	89 ca                	mov    edx,ecx
c000e6be:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e6c3:	25 ff 00 00 00       	and    eax,0xff
c000e6c8:	89 14 85 40 68 02 c0 	mov    DWORD PTR [eax*4-0x3ffd97c0],edx
c000e6cf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e6d4:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e6d9:	40                   	inc    eax
c000e6da:	a2 80 67 02 c0       	mov    ds:0xc0026780,al
c000e6df:	e9 c0 01 00 00       	jmp    c000e8a4 <scanMADT()+0x4ac>
c000e6e4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e6e9:	0f 85 fd 00 00 00    	jne    c000e7ec <scanMADT()+0x3f4>
c000e6ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6f3:	8d 50 01             	lea    edx,[eax+0x1]
c000e6f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e702:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e706:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e70a:	8d 50 01             	lea    edx,[eax+0x1]
c000e70d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e711:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e715:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e719:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e71d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e721:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e725:	01 d0                	add    eax,edx
c000e727:	83 c0 2c             	add    eax,0x2c
c000e72a:	8a 00                	mov    al,BYTE PTR [eax]
c000e72c:	31 d2                	xor    edx,edx
c000e72e:	88 c2                	mov    dl,al
c000e730:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e734:	8d 48 01             	lea    ecx,[eax+0x1]
c000e737:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e73b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e73f:	25 ff 00 00 00       	and    eax,0xff
c000e744:	c1 e0 08             	shl    eax,0x8
c000e747:	89 d1                	mov    ecx,edx
c000e749:	09 c1                	or     ecx,eax
c000e74b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e74f:	8d 50 02             	lea    edx,[eax+0x2]
c000e752:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e756:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e75a:	25 ff 00 00 00       	and    eax,0xff
c000e75f:	c1 e0 10             	shl    eax,0x10
c000e762:	09 c1                	or     ecx,eax
c000e764:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e768:	8d 50 03             	lea    edx,[eax+0x3]
c000e76b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e76f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e773:	25 ff 00 00 00       	and    eax,0xff
c000e778:	c1 e0 18             	shl    eax,0x18
c000e77b:	09 c8                	or     eax,ecx
c000e77d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e781:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e786:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e78a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e78e:	01 d0                	add    eax,edx
c000e790:	83 c0 2c             	add    eax,0x2c
c000e793:	8a 00                	mov    al,BYTE PTR [eax]
c000e795:	25 ff 00 00 00       	and    eax,0xff
c000e79a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e79e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e7a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7a5:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e7a9:	81 e2 ff 00 00 00    	and    edx,0xff
c000e7af:	c1 e2 08             	shl    edx,0x8
c000e7b2:	09 d0                	or     eax,edx
c000e7b4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e7b9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e7be:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e7c2:	25 ff 00 00 00       	and    eax,0xff
c000e7c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e7cb:	88 90 a0 17 02 c0    	mov    BYTE PTR [eax-0x3ffde860],dl
c000e7d1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e7d5:	31 d2                	xor    edx,edx
c000e7d7:	88 c2                	mov    dl,al
c000e7d9:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e7de:	66 89 84 12 60 67 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd98a0],ax
c000e7e6:	e9 b9 00 00 00       	jmp    c000e8a4 <scanMADT()+0x4ac>
c000e7eb:	90                   	nop
c000e7ec:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e7f1:	0f 85 a1 00 00 00    	jne    c000e898 <scanMADT()+0x4a0>
c000e7f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7fb:	8d 50 01             	lea    edx,[eax+0x1]
c000e7fe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e802:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e806:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e80a:	25 ff 00 00 00       	and    eax,0xff
c000e80f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e813:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e817:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e81b:	01 d0                	add    eax,edx
c000e81d:	83 c0 2c             	add    eax,0x2c
c000e820:	8a 00                	mov    al,BYTE PTR [eax]
c000e822:	31 d2                	xor    edx,edx
c000e824:	88 c2                	mov    dl,al
c000e826:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e82a:	8d 48 01             	lea    ecx,[eax+0x1]
c000e82d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e831:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e835:	25 ff 00 00 00       	and    eax,0xff
c000e83a:	c1 e0 08             	shl    eax,0x8
c000e83d:	09 d0                	or     eax,edx
c000e83f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e843:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e848:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e84c:	8d 50 01             	lea    edx,[eax+0x1]
c000e84f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e853:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e857:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e85b:	25 ff 00 00 00       	and    eax,0xff
c000e860:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e868:	c1 e0 08             	shl    eax,0x8
c000e86b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e86f:	89 c1                	mov    ecx,eax
c000e871:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e875:	c1 e0 18             	shl    eax,0x18
c000e878:	89 c3                	mov    ebx,eax
c000e87a:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c000e87f:	8d 50 01             	lea    edx,[eax+0x1]
c000e882:	89 15 d0 66 02 c0    	mov    DWORD PTR ds:0xc00266d0,edx
c000e888:	09 d9                	or     ecx,ebx
c000e88a:	89 ca                	mov    edx,ecx
c000e88c:	89 14 85 e0 66 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9920],edx
c000e893:	eb 0f                	jmp    c000e8a4 <scanMADT()+0x4ac>
c000e895:	8d 76 00             	lea    esi,[esi+0x0]
c000e898:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e89d:	75 05                	jne    c000e8a4 <scanMADT()+0x4ac>
c000e89f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e8a4:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e8a8:	31 d2                	xor    edx,edx
c000e8aa:	88 c2                	mov    dl,al
c000e8ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e8b0:	01 d0                	add    eax,edx
c000e8b2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e8b6:	e9 31 fc ff ff       	jmp    c000e4ec <scanMADT()+0xf4>
c000e8bb:	90                   	nop
c000e8bc:	90                   	nop
c000e8bd:	eb 05                	jmp    c000e8c4 <scanMADT()+0x4cc>
c000e8bf:	90                   	nop
c000e8c0:	90                   	nop
c000e8c1:	8d 76 00             	lea    esi,[esi+0x0]
c000e8c4:	83 c4 38             	add    esp,0x38
c000e8c7:	5b                   	pop    ebx
c000e8c8:	c3                   	ret    
c000e8c9:	90                   	nop
c000e8ca:	66 90                	xchg   ax,ax

c000e8cc <ACPI::ACPI()>:
c000e8cc:	83 ec 0c             	sub    esp,0xc
c000e8cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d3:	83 ec 08             	sub    esp,0x8
c000e8d6:	68 71 01 02 c0       	push   0xc0020171
c000e8db:	50                   	push   eax
c000e8dc:	e8 43 d3 ff ff       	call   c000bc24 <Device::Device(char const*)>
c000e8e1:	83 c4 10             	add    esp,0x10
c000e8e4:	ba a8 02 02 c0       	mov    edx,0xc00202a8
c000e8e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ed:	89 10                	mov    DWORD PTR [eax],edx
c000e8ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8fe:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e90c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e916:	e8 dd fa ff ff       	call   c000e3f8 <scanMADT()>
c000e91b:	90                   	nop
c000e91c:	83 c4 0c             	add    esp,0xc
c000e91f:	c3                   	ret    

c000e920 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e920:	83 ec 2c             	sub    esp,0x2c
c000e923:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e927:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e92b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e92f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e933:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e938:	88 d0                	mov    al,dl
c000e93a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e93e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e943:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e94b:	90                   	nop
c000e94c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e950:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e956:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e95a:	0f 8d 9c 00 00 00    	jge    c000e9fc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e960:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e964:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e968:	83 c2 2a             	add    edx,0x2a
c000e96b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e96f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e974:	75 7a                	jne    c000e9f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e976:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e97a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e97e:	83 c2 2a             	add    edx,0x2a
c000e981:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e985:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e989:	75 65                	jne    c000e9f0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e98b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e990:	74 3a                	je     c000e9cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e992:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e996:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e99a:	83 c2 2a             	add    edx,0x2a
c000e99d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e9a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9a8:	39 c2                	cmp    edx,eax
c000e9aa:	74 10                	je     c000e9bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e9ac:	83 ec 0c             	sub    esp,0xc
c000e9af:	68 ec 00 02 c0       	push   0xc00200ec
c000e9b4:	e8 4e 1a 00 00       	call   c0010407 <KePanic(char const*)>
c000e9b9:	83 c4 10             	add    esp,0x10
c000e9bc:	83 ec 0c             	sub    esp,0xc
c000e9bf:	68 76 01 02 c0       	push   0xc0020176
c000e9c4:	e8 3e 1a 00 00       	call   c0010407 <KePanic(char const*)>
c000e9c9:	83 c4 10             	add    esp,0x10
c000e9cc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e9d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9d8:	83 c2 2a             	add    edx,0x2a
c000e9db:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e9df:	8b 02                	mov    eax,DWORD PTR [edx]
c000e9e1:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e9e4:	89 01                	mov    DWORD PTR [ecx],eax
c000e9e6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e9e9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9ee:	66 90                	xchg   ax,ax
c000e9f0:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e9f4:	e9 53 ff ff ff       	jmp    c000e94c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e9f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e9fc:	90                   	nop
c000e9fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea01:	83 c4 2c             	add    esp,0x2c
c000ea04:	c2 04 00             	ret    0x4
c000ea07:	90                   	nop

c000ea08 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ea08:	83 ec 1c             	sub    esp,0x1c
c000ea0b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea0f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ea13:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ea17:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ea1c:	88 c8                	mov    al,cl
c000ea1e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ea22:	88 d0                	mov    al,dl
c000ea24:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ea28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea2c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea36:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ea39:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ea3d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ea41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea45:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea4b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ea4f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ea52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea56:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ea5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea5f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea65:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ea69:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea70:	83 c2 2a             	add    edx,0x2a
c000ea73:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ea77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea7b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea85:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ea88:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ea8c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ea90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea94:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea9a:	8d 50 01             	lea    edx,[eax+0x1]
c000ea9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eaa1:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000eaa7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eaab:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eab1:	3d 00 02 00 00       	cmp    eax,0x200
c000eab6:	75 10                	jne    c000eac8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000eab8:	83 ec 0c             	sub    esp,0xc
c000eabb:	68 85 01 02 c0       	push   0xc0020185
c000eac0:	e8 42 19 00 00       	call   c0010407 <KePanic(char const*)>
c000eac5:	83 c4 10             	add    esp,0x10
c000eac8:	90                   	nop
c000eac9:	83 c4 1c             	add    esp,0x1c
c000eacc:	c3                   	ret    
c000eacd:	90                   	nop
c000eace:	66 90                	xchg   ax,ax

c000ead0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ead0:	b8 00 00 00 00       	mov    eax,0x0
c000ead5:	c3                   	ret    
c000ead6:	66 90                	xchg   ax,ax

c000ead8 <ACPI::detectPCI()>:
c000ead8:	53                   	push   ebx
c000ead9:	83 ec 28             	sub    esp,0x28
c000eadc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eae1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000eae6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000eaeb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eaf1:	83 e0 04             	and    eax,0x4
c000eaf4:	84 c0                	test   al,al
c000eaf6:	74 2c                	je     c000eb24 <ACPI::detectPCI()+0x4c>
c000eaf8:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000eafd:	83 ec 08             	sub    esp,0x8
c000eb00:	68 a2 01 02 c0       	push   0xc00201a2
c000eb05:	50                   	push   eax
c000eb06:	e8 75 f8 ff ff       	call   c000e380 <findDataTable(unsigned char*, char*)>
c000eb0b:	83 c4 10             	add    esp,0x10
c000eb0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eb12:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eb17:	74 0b                	je     c000eb24 <ACPI::detectPCI()+0x4c>
c000eb19:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb1e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb23:	90                   	nop
c000eb24:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000eb2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb30:	8a 00                	mov    al,BYTE PTR [eax]
c000eb32:	3c 01                	cmp    al,0x1
c000eb34:	75 0e                	jne    c000eb44 <ACPI::detectPCI()+0x6c>
c000eb36:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb3b:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb40:	eb 2a                	jmp    c000eb6c <ACPI::detectPCI()+0x94>
c000eb42:	66 90                	xchg   ax,ax
c000eb44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb48:	8a 00                	mov    al,BYTE PTR [eax]
c000eb4a:	3c 02                	cmp    al,0x2
c000eb4c:	75 1e                	jne    c000eb6c <ACPI::detectPCI()+0x94>
c000eb4e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb53:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb58:	74 12                	je     c000eb6c <ACPI::detectPCI()+0x94>
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 1c 01 02 c0       	push   0xc002011c
c000eb62:	e8 a0 18 00 00       	call   c0010407 <KePanic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	66 90                	xchg   ax,ax
c000eb6c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000eb70:	83 f0 01             	xor    eax,0x1
c000eb73:	84 c0                	test   al,al
c000eb75:	74 41                	je     c000ebb8 <ACPI::detectPCI()+0xe0>
c000eb77:	e8 b4 15 ff ff       	call   c0000130 <manualPCIProbe>
c000eb7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eb80:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eb85:	75 0d                	jne    c000eb94 <ACPI::detectPCI()+0xbc>
c000eb87:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb8c:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb91:	eb 25                	jmp    c000ebb8 <ACPI::detectPCI()+0xe0>
c000eb93:	90                   	nop
c000eb94:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000eb99:	75 1d                	jne    c000ebb8 <ACPI::detectPCI()+0xe0>
c000eb9b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eba0:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eba5:	74 11                	je     c000ebb8 <ACPI::detectPCI()+0xe0>
c000eba7:	83 ec 0c             	sub    esp,0xc
c000ebaa:	68 1c 01 02 c0       	push   0xc002011c
c000ebaf:	e8 53 18 00 00       	call   c0010407 <KePanic(char const*)>
c000ebb4:	83 c4 10             	add    esp,0x10
c000ebb7:	90                   	nop
c000ebb8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ebbd:	0f 84 85 00 00 00    	je     c000ec48 <ACPI::detectPCI()+0x170>
c000ebc3:	83 ec 0c             	sub    esp,0xc
c000ebc6:	68 a7 01 02 c0       	push   0xc00201a7
c000ebcb:	e8 bf 11 00 00       	call   c000fd8f <KeSetBootMessage(char const*)>
c000ebd0:	83 c4 10             	add    esp,0x10
c000ebd3:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ebdb:	83 ec 0c             	sub    esp,0xc
c000ebde:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ebe2:	e8 7c 8c ff ff       	call   c0007863 <malloc>
c000ebe7:	83 c4 10             	add    esp,0x10
c000ebea:	89 c3                	mov    ebx,eax
c000ebec:	83 ec 0c             	sub    esp,0xc
c000ebef:	53                   	push   ebx
c000ebf0:	e8 cd ad 00 00       	call   c00199c2 <PCI::PCI()>
c000ebf5:	83 c4 10             	add    esp,0x10
c000ebf8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ebfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec00:	83 ec 08             	sub    esp,0x8
c000ec03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ec07:	50                   	push   eax
c000ec08:	e8 7f ce ff ff       	call   c000ba8c <Device::addChild(Device*)>
c000ec0d:	83 c4 10             	add    esp,0x10
c000ec10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec14:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec16:	83 c0 08             	add    eax,0x8
c000ec19:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec1b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ec20:	74 0a                	je     c000ec2c <ACPI::detectPCI()+0x154>
c000ec22:	ba 01 00 00 00       	mov    edx,0x1
c000ec27:	eb 0b                	jmp    c000ec34 <ACPI::detectPCI()+0x15c>
c000ec29:	8d 76 00             	lea    esi,[esi+0x0]
c000ec2c:	ba 02 00 00 00       	mov    edx,0x2
c000ec31:	8d 76 00             	lea    esi,[esi+0x0]
c000ec34:	6a 00                	push   0x0
c000ec36:	6a 00                	push   0x0
c000ec38:	52                   	push   edx
c000ec39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec3d:	ff d0                	call   eax
c000ec3f:	83 c4 10             	add    esp,0x10
c000ec42:	e9 91 00 00 00       	jmp    c000ecd8 <ACPI::detectPCI()+0x200>
c000ec47:	90                   	nop
c000ec48:	83 ec 0c             	sub    esp,0xc
c000ec4b:	68 bf 01 02 c0       	push   0xc00201bf
c000ec50:	e8 3a 11 00 00       	call   c000fd8f <KeSetBootMessage(char const*)>
c000ec55:	83 c4 10             	add    esp,0x10
c000ec58:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ec5f:	83 ec 0c             	sub    esp,0xc
c000ec62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ec66:	e8 f8 8b ff ff       	call   c0007863 <malloc>
c000ec6b:	83 c4 10             	add    esp,0x10
c000ec6e:	89 c3                	mov    ebx,eax
c000ec70:	83 ec 0c             	sub    esp,0xc
c000ec73:	53                   	push   ebx
c000ec74:	e8 af b8 00 00       	call   c001a528 <IDE::IDE()>
c000ec79:	83 c4 10             	add    esp,0x10
c000ec7c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ec80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec84:	83 ec 08             	sub    esp,0x8
c000ec87:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec8b:	50                   	push   eax
c000ec8c:	e8 fb cd ff ff       	call   c000ba8c <Device::addChild(Device*)>
c000ec91:	83 c4 10             	add    esp,0x10
c000ec94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec98:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000eca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eca6:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ecaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb3:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ecbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecc0:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecc2:	83 c0 08             	add    eax,0x8
c000ecc5:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecc7:	6a 00                	push   0x0
c000ecc9:	6a 00                	push   0x0
c000eccb:	6a 00                	push   0x0
c000eccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ecd1:	ff d0                	call   eax
c000ecd3:	83 c4 10             	add    esp,0x10
c000ecd6:	66 90                	xchg   ax,ax
c000ecd8:	90                   	nop
c000ecd9:	83 c4 28             	add    esp,0x28
c000ecdc:	5b                   	pop    ebx
c000ecdd:	c3                   	ret    
c000ecde:	66 90                	xchg   ax,ax

c000ece0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ece0:	83 ec 1c             	sub    esp,0x1c
c000ece3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ece7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ecea:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ecee:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ecf4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ecf8:	25 ff 00 00 00       	and    eax,0xff
c000ecfd:	83 ec 08             	sub    esp,0x8
c000ed00:	50                   	push   eax
c000ed01:	52                   	push   edx
c000ed02:	e8 59 82 ff ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ed0e:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ed14:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ed18:	25 ff 00 00 00       	and    eax,0xff
c000ed1d:	83 ec 04             	sub    esp,0x4
c000ed20:	6a 01                	push   0x1
c000ed22:	50                   	push   eax
c000ed23:	52                   	push   edx
c000ed24:	e8 3b 83 ff ff       	call   c0007064 <Computer::writeCMOS(unsigned char, unsigned char)>
c000ed29:	83 c4 10             	add    esp,0x10
c000ed2c:	90                   	nop
c000ed2d:	83 c4 1c             	add    esp,0x1c
c000ed30:	c3                   	ret    
c000ed31:	90                   	nop
c000ed32:	66 90                	xchg   ax,ax

c000ed34 <ACPI::sleep()>:
c000ed34:	83 ec 0c             	sub    esp,0xc
c000ed37:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ed3c:	85 c0                	test   eax,eax
c000ed3e:	74 08                	je     c000ed48 <ACPI::sleep()+0x14>
c000ed40:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ed45:	ff d0                	call   eax
c000ed47:	90                   	nop
c000ed48:	90                   	nop
c000ed49:	83 c4 0c             	add    esp,0xc
c000ed4c:	c3                   	ret    
c000ed4d:	90                   	nop
c000ed4e:	66 90                	xchg   ax,ax

c000ed50 <ACPI::open(int, int, void*)>:
c000ed50:	57                   	push   edi
c000ed51:	56                   	push   esi
c000ed52:	53                   	push   ebx
c000ed53:	81 ec 70 01 00 00    	sub    esp,0x170
c000ed59:	83 ec 0c             	sub    esp,0xc
c000ed5c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ed63:	e8 70 fd ff ff       	call   c000ead8 <ACPI::detectPCI()>
c000ed68:	83 c4 10             	add    esp,0x10
c000ed6b:	83 ec 0c             	sub    esp,0xc
c000ed6e:	68 44 01 02 c0       	push   0xc0020144
c000ed73:	e8 17 10 00 00       	call   c000fd8f <KeSetBootMessage(char const*)>
c000ed78:	83 c4 10             	add    esp,0x10
c000ed7b:	83 ec 0c             	sub    esp,0xc
c000ed7e:	68 d4 01 02 c0       	push   0xc00201d4
c000ed83:	e8 df 48 00 00       	call   c0013667 <Thr::loadKernelSymbolTable(char const*)>
c000ed88:	83 c4 10             	add    esp,0x10
c000ed8b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ed93:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ed9e:	83 ec 0c             	sub    esp,0xc
c000eda1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eda8:	e8 b6 8a ff ff       	call   c0007863 <malloc>
c000edad:	83 c4 10             	add    esp,0x10
c000edb0:	89 c3                	mov    ebx,eax
c000edb2:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000edb7:	83 ec 04             	sub    esp,0x4
c000edba:	50                   	push   eax
c000edbb:	68 f2 01 02 c0       	push   0xc00201f2
c000edc0:	53                   	push   ebx
c000edc1:	e8 02 be ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c000edc6:	83 c4 10             	add    esp,0x10
c000edc9:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000edd0:	83 ec 08             	sub    esp,0x8
c000edd3:	6a 01                	push   0x1
c000edd5:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eddc:	e8 a7 be ff ff       	call   c000ac88 <File::open(FileOpenMode)>
c000ede1:	83 c4 10             	add    esp,0x10
c000ede4:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000edeb:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000edf3:	75 17                	jne    c000ee0c <ACPI::open(int, int, void*)+0xbc>
c000edf5:	83 ec 0c             	sub    esp,0xc
c000edf8:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000edff:	e8 e2 be ff ff       	call   c000ace6 <File::close()>
c000ee04:	83 c4 10             	add    esp,0x10
c000ee07:	eb 0b                	jmp    c000ee14 <ACPI::open(int, int, void*)+0xc4>
c000ee09:	8d 76 00             	lea    esi,[esi+0x0]
c000ee0c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ee14:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ee1c:	74 1e                	je     c000ee3c <ACPI::open(int, int, void*)+0xec>
c000ee1e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ee25:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee27:	83 c0 08             	add    eax,0x8
c000ee2a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee2c:	83 ec 0c             	sub    esp,0xc
c000ee2f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ee36:	ff d0                	call   eax
c000ee38:	83 c4 10             	add    esp,0x10
c000ee3b:	90                   	nop
c000ee3c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ee43:	83 f0 01             	xor    eax,0x1
c000ee46:	84 c0                	test   al,al
c000ee48:	74 42                	je     c000ee8c <ACPI::open(int, int, void*)+0x13c>
c000ee4a:	83 ec 0c             	sub    esp,0xc
c000ee4d:	68 10 02 02 c0       	push   0xc0020210
c000ee52:	e8 38 0f 00 00       	call   c000fd8f <KeSetBootMessage(char const*)>
c000ee57:	83 c4 10             	add    esp,0x10
c000ee5a:	83 ec 04             	sub    esp,0x4
c000ee5d:	6a 0c                	push   0xc
c000ee5f:	68 2b 02 02 c0       	push   0xc002022b
c000ee64:	68 3c 02 02 c0       	push   0xc002023c
c000ee69:	e8 ab 3b 00 00       	call   c0012a19 <Reg::readIntWithDefault(char*, char*, int)>
c000ee6e:	83 c4 10             	add    esp,0x10
c000ee71:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ee78:	83 ec 0c             	sub    esp,0xc
c000ee7b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ee82:	e8 ef a6 ff ff       	call   c0009576 <Virt::setupPageSwapping(int)>
c000ee87:	83 c4 10             	add    esp,0x10
c000ee8a:	66 90                	xchg   ax,ax
c000ee8c:	83 ec 0c             	sub    esp,0xc
c000ee8f:	68 b5 f2 01 c0       	push   0xc001f2b5
c000ee94:	e8 f6 0e 00 00       	call   c000fd8f <KeSetBootMessage(char const*)>
c000ee99:	83 c4 10             	add    esp,0x10
c000ee9c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000eea3:	83 ec 08             	sub    esp,0x8
c000eea6:	6a 13                	push   0x13
c000eea8:	50                   	push   eax
c000eea9:	e8 f6 ce ff ff       	call   c000bda4 <getDevicesOfType(DeviceType)>
c000eeae:	83 c4 0c             	add    esp,0xc
c000eeb1:	8d 76 00             	lea    esi,[esi+0x0]
c000eeb4:	83 ec 0c             	sub    esp,0xc
c000eeb7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eebe:	50                   	push   eax
c000eebf:	e8 e8 f7 00 00       	call   c001e6ac <LinkedList<Device>::isEmpty()>
c000eec4:	83 c4 10             	add    esp,0x10
c000eec7:	83 f0 01             	xor    eax,0x1
c000eeca:	84 c0                	test   al,al
c000eecc:	0f 84 46 01 00 00    	je     c000f018 <ACPI::open(int, int, void*)+0x2c8>
c000eed2:	83 ec 0c             	sub    esp,0xc
c000eed5:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eedc:	50                   	push   eax
c000eedd:	e8 e6 f7 00 00       	call   c001e6c8 <LinkedList<Device>::getFirstElement()>
c000eee2:	83 c4 10             	add    esp,0x10
c000eee5:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000eeec:	83 ec 0c             	sub    esp,0xc
c000eeef:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eef6:	50                   	push   eax
c000eef7:	e8 d4 f7 00 00       	call   c001e6d0 <LinkedList<Device>::removeFirst()>
c000eefc:	83 c4 10             	add    esp,0x10
c000eeff:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ef06:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ef0d:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ef14:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ef18:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ef1e:	ba 09 00 00 00       	mov    edx,0x9
c000ef23:	fc                   	cld    
c000ef24:	89 c7                	mov    edi,eax
c000ef26:	89 de                	mov    esi,ebx
c000ef28:	89 d1                	mov    ecx,edx
c000ef2a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ef2c:	83 ec 08             	sub    esp,0x8
c000ef2f:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ef33:	50                   	push   eax
c000ef34:	83 ec 24             	sub    esp,0x24
c000ef37:	89 e0                	mov    eax,esp
c000ef39:	89 c3                	mov    ebx,eax
c000ef3b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ef3f:	ba 09 00 00 00       	mov    edx,0x9
c000ef44:	89 df                	mov    edi,ebx
c000ef46:	89 c6                	mov    esi,eax
c000ef48:	89 d1                	mov    ecx,edx
c000ef4a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ef4c:	e8 53 af 00 00       	call   c0019ea4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ef51:	83 c4 30             	add    esp,0x30
c000ef54:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ef5b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ef63:	0f 84 4b ff ff ff    	je     c000eeb4 <ACPI::open(int, int, void*)+0x164>
c000ef69:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ef74:	83 ec 0c             	sub    esp,0xc
c000ef77:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ef7e:	e8 e0 88 ff ff       	call   c0007863 <malloc>
c000ef83:	83 c4 10             	add    esp,0x10
c000ef86:	89 c3                	mov    ebx,eax
c000ef88:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000ef8d:	83 ec 04             	sub    esp,0x4
c000ef90:	50                   	push   eax
c000ef91:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef98:	53                   	push   ebx
c000ef99:	e8 2a bc ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c000ef9e:	83 c4 10             	add    esp,0x10
c000efa1:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000efa8:	83 ec 0c             	sub    esp,0xc
c000efab:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000efb2:	e8 3f bf ff ff       	call   c000aef6 <File::exists()>
c000efb7:	83 c4 10             	add    esp,0x10
c000efba:	84 c0                	test   al,al
c000efbc:	74 2a                	je     c000efe8 <ACPI::open(int, int, void*)+0x298>
c000efbe:	83 ec 08             	sub    esp,0x8
c000efc1:	6a 01                	push   0x1
c000efc3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000efca:	e8 19 51 00 00       	call   c00140e8 <Thr::loadDLL(char const*, bool)>
c000efcf:	83 c4 10             	add    esp,0x10
c000efd2:	83 ec 08             	sub    esp,0x8
c000efd5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000efdc:	50                   	push   eax
c000efdd:	e8 3b 53 00 00       	call   c001431d <Thr::executeDLL(unsigned long, void*)>
c000efe2:	83 c4 10             	add    esp,0x10
c000efe5:	8d 76 00             	lea    esi,[esi+0x0]
c000efe8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000eff0:	0f 84 be fe ff ff    	je     c000eeb4 <ACPI::open(int, int, void*)+0x164>
c000eff6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000effd:	8b 00                	mov    eax,DWORD PTR [eax]
c000efff:	83 c0 08             	add    eax,0x8
c000f002:	8b 00                	mov    eax,DWORD PTR [eax]
c000f004:	83 ec 0c             	sub    esp,0xc
c000f007:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f00e:	ff d0                	call   eax
c000f010:	83 c4 10             	add    esp,0x10
c000f013:	e9 9c fe ff ff       	jmp    c000eeb4 <ACPI::open(int, int, void*)+0x164>
c000f018:	83 ec 0c             	sub    esp,0xc
c000f01b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f022:	50                   	push   eax
c000f023:	e8 80 f6 00 00       	call   c001e6a8 <LinkedList<Device>::~LinkedList()>
c000f028:	83 c4 10             	add    esp,0x10
c000f02b:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000f031:	83 ec 08             	sub    esp,0x8
c000f034:	6a 01                	push   0x1
c000f036:	68 43 02 02 c0       	push   0xc0020243
c000f03b:	e8 a8 50 00 00       	call   c00140e8 <Thr::loadDLL(char const*, bool)>
c000f040:	83 c4 10             	add    esp,0x10
c000f043:	83 ec 08             	sub    esp,0x8
c000f046:	53                   	push   ebx
c000f047:	50                   	push   eax
c000f048:	e8 d0 52 00 00       	call   c001431d <Thr::executeDLL(unsigned long, void*)>
c000f04d:	83 c4 10             	add    esp,0x10
c000f050:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f055:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f05b:	83 e0 04             	and    eax,0x4
c000f05e:	84 c0                	test   al,al
c000f060:	0f 84 16 01 00 00    	je     c000f17c <ACPI::open(int, int, void*)+0x42c>
c000f066:	83 ec 0c             	sub    esp,0xc
c000f069:	68 60 02 02 c0       	push   0xc0020260
c000f06e:	e8 1c 0d 00 00       	call   c000fd8f <KeSetBootMessage(char const*)>
c000f073:	83 c4 10             	add    esp,0x10
c000f076:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f081:	83 ec 0c             	sub    esp,0xc
c000f084:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f08b:	e8 d3 87 ff ff       	call   c0007863 <malloc>
c000f090:	83 c4 10             	add    esp,0x10
c000f093:	89 c3                	mov    ebx,eax
c000f095:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000f09a:	83 ec 04             	sub    esp,0x4
c000f09d:	50                   	push   eax
c000f09e:	68 7d 02 02 c0       	push   0xc002027d
c000f0a3:	53                   	push   ebx
c000f0a4:	e8 1f bb ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c000f0a9:	83 c4 10             	add    esp,0x10
c000f0ac:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f0b3:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f0bb:	74 1b                	je     c000f0d8 <ACPI::open(int, int, void*)+0x388>
c000f0bd:	83 ec 0c             	sub    esp,0xc
c000f0c0:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f0c7:	e8 2a be ff ff       	call   c000aef6 <File::exists()>
c000f0cc:	83 c4 10             	add    esp,0x10
c000f0cf:	84 c0                	test   al,al
c000f0d1:	74 05                	je     c000f0d8 <ACPI::open(int, int, void*)+0x388>
c000f0d3:	b0 01                	mov    al,0x1
c000f0d5:	eb 05                	jmp    c000f0dc <ACPI::open(int, int, void*)+0x38c>
c000f0d7:	90                   	nop
c000f0d8:	b0 00                	mov    al,0x0
c000f0da:	66 90                	xchg   ax,ax
c000f0dc:	84 c0                	test   al,al
c000f0de:	74 28                	je     c000f108 <ACPI::open(int, int, void*)+0x3b8>
c000f0e0:	83 ec 08             	sub    esp,0x8
c000f0e3:	6a 01                	push   0x1
c000f0e5:	68 7d 02 02 c0       	push   0xc002027d
c000f0ea:	e8 f9 4f 00 00       	call   c00140e8 <Thr::loadDLL(char const*, bool)>
c000f0ef:	83 c4 10             	add    esp,0x10
c000f0f2:	83 ec 08             	sub    esp,0x8
c000f0f5:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f0fc:	50                   	push   eax
c000f0fd:	e8 1b 52 00 00       	call   c001431d <Thr::executeDLL(unsigned long, void*)>
c000f102:	83 c4 10             	add    esp,0x10
c000f105:	8d 76 00             	lea    esi,[esi+0x0]
c000f108:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f110:	74 2a                	je     c000f13c <ACPI::open(int, int, void*)+0x3ec>
c000f112:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f11a:	74 20                	je     c000f13c <ACPI::open(int, int, void*)+0x3ec>
c000f11c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f123:	8b 00                	mov    eax,DWORD PTR [eax]
c000f125:	83 c0 08             	add    eax,0x8
c000f128:	8b 00                	mov    eax,DWORD PTR [eax]
c000f12a:	83 ec 0c             	sub    esp,0xc
c000f12d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f134:	ff d0                	call   eax
c000f136:	83 c4 10             	add    esp,0x10
c000f139:	8d 76 00             	lea    esi,[esi+0x0]
c000f13c:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000f141:	83 ec 08             	sub    esp,0x8
c000f144:	68 9a 02 02 c0       	push   0xc002029a
c000f149:	50                   	push   eax
c000f14a:	e8 31 f2 ff ff       	call   c000e380 <findDataTable(unsigned char*, char*)>
c000f14f:	83 c4 10             	add    esp,0x10
c000f152:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f159:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f161:	74 19                	je     c000f17c <ACPI::open(int, int, void*)+0x42c>
c000f163:	83 ec 08             	sub    esp,0x8
c000f166:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f16d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f174:	e8 67 fb ff ff       	call   c000ece0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f179:	83 c4 10             	add    esp,0x10
c000f17c:	b8 00 00 00 00       	mov    eax,0x0
c000f181:	81 c4 70 01 00 00    	add    esp,0x170
c000f187:	5b                   	pop    ebx
c000f188:	5e                   	pop    esi
c000f189:	5f                   	pop    edi
c000f18a:	c3                   	ret    
c000f18b:	90                   	nop

c000f18c <CPU::close(int, int, void*)>:
c000f18c:	31 c0                	xor    eax,eax
c000f18e:	c3                   	ret    
c000f18f:	90                   	nop

c000f190 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f190:	60                   	pusha  
c000f191:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f195:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f199:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f19d:	9c                   	pushf  
c000f19e:	fa                   	cli    
c000f19f:	0f 09                	wbinvd 
c000f1a1:	0f 30                	wrmsr  
c000f1a3:	9d                   	popf   
c000f1a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f1a8:	89 02                	mov    DWORD PTR [edx],eax
c000f1aa:	61                   	popa   
c000f1ab:	c3                   	ret    

c000f1ac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f1ac:	60                   	pusha  
c000f1ad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1b1:	9c                   	pushf  
c000f1b2:	fa                   	cli    
c000f1b3:	0f 09                	wbinvd 
c000f1b5:	31 c0                	xor    eax,eax
c000f1b7:	31 d2                	xor    edx,edx
c000f1b9:	0f 32                	rdmsr  
c000f1bb:	9d                   	popf   
c000f1bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f1c0:	89 02                	mov    DWORD PTR [edx],eax
c000f1c2:	61                   	popa   
c000f1c3:	c3                   	ret    

c000f1c4 <CPU::AMD_K6_writeback(int, int, int)>:
c000f1c4:	56                   	push   esi
c000f1c5:	53                   	push   ebx
c000f1c6:	83 ec 10             	sub    esp,0x10
c000f1c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1cd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f1d2:	75 5d                	jne    c000f231 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1d4:	83 f8 08             	cmp    eax,0x8
c000f1d7:	75 09                	jne    c000f1e2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f1d9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f1de:	7e 13                	jle    c000f1f3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f1e0:	eb 30                	jmp    c000f212 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f1e2:	83 f8 06             	cmp    eax,0x6
c000f1e5:	7c 4a                	jl     c000f231 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1e7:	83 f8 07             	cmp    eax,0x7
c000f1ea:	7e 07                	jle    c000f1f3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f1ec:	83 f8 09             	cmp    eax,0x9
c000f1ef:	74 21                	je     c000f212 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f1f1:	eb 3e                	jmp    c000f231 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1f3:	89 e6                	mov    esi,esp
c000f1f5:	8b 1d dc 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023edc
c000f1fb:	c1 eb 15             	shr    ebx,0x15
c000f1fe:	56                   	push   esi
c000f1ff:	68 82 00 00 c0       	push   0xc0000082
c000f204:	e8 a3 ff ff ff       	call   c000f1ac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f209:	56                   	push   esi
c000f20a:	83 e3 7e             	and    ebx,0x7e
c000f20d:	6a 00                	push   0x0
c000f20f:	53                   	push   ebx
c000f210:	eb 12                	jmp    c000f224 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f212:	89 e3                	mov    ebx,esp
c000f214:	53                   	push   ebx
c000f215:	68 82 00 00 c0       	push   0xc0000082
c000f21a:	e8 8d ff ff ff       	call   c000f1ac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f21f:	53                   	push   ebx
c000f220:	6a 00                	push   0x0
c000f222:	6a 00                	push   0x0
c000f224:	68 82 00 00 c0       	push   0xc0000082
c000f229:	e8 62 ff ff ff       	call   c000f190 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f22e:	83 c4 18             	add    esp,0x18
c000f231:	83 c4 10             	add    esp,0x10
c000f234:	5b                   	pop    ebx
c000f235:	5e                   	pop    esi
c000f236:	c3                   	ret    
c000f237:	90                   	nop

c000f238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f238:	55                   	push   ebp
c000f239:	57                   	push   edi
c000f23a:	56                   	push   esi
c000f23b:	53                   	push   ebx
c000f23c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f240:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f244:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f248:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f24c:	39 05 b0 17 02 c0    	cmp    DWORD PTR ds:0xc00217b0,eax
c000f252:	75 23                	jne    c000f277 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f254:	a1 2c 69 02 c0       	mov    eax,ds:0xc002692c
c000f259:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f25d:	89 06                	mov    DWORD PTR [esi],eax
c000f25f:	a1 28 69 02 c0       	mov    eax,ds:0xc0026928
c000f264:	89 07                	mov    DWORD PTR [edi],eax
c000f266:	a1 24 69 02 c0       	mov    eax,ds:0xc0026924
c000f26b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f26e:	a1 20 69 02 c0       	mov    eax,ds:0xc0026920
c000f273:	89 02                	mov    DWORD PTR [edx],eax
c000f275:	eb 3f                	jmp    c000f2b6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f277:	31 c9                	xor    ecx,ecx
c000f279:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f27d:	0f a2                	cpuid  
c000f27f:	89 06                	mov    DWORD PTR [esi],eax
c000f281:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f285:	89 1f                	mov    DWORD PTR [edi],ebx
c000f287:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f28a:	89 10                	mov    DWORD PTR [eax],edx
c000f28c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f290:	a3 b0 17 02 c0       	mov    ds:0xc00217b0,eax
c000f295:	8b 06                	mov    eax,DWORD PTR [esi]
c000f297:	a3 2c 69 02 c0       	mov    ds:0xc002692c,eax
c000f29c:	8b 07                	mov    eax,DWORD PTR [edi]
c000f29e:	a3 28 69 02 c0       	mov    ds:0xc0026928,eax
c000f2a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f2a6:	a3 24 69 02 c0       	mov    ds:0xc0026924,eax
c000f2ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f2af:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2b1:	a3 20 69 02 c0       	mov    ds:0xc0026920,eax
c000f2b6:	5b                   	pop    ebx
c000f2b7:	5e                   	pop    esi
c000f2b8:	5f                   	pop    edi
c000f2b9:	5d                   	pop    ebp
c000f2ba:	c3                   	ret    
c000f2bb:	90                   	nop

c000f2bc <CPU::cpuidCheckEDX(unsigned int)>:
c000f2bc:	83 ec 10             	sub    esp,0x10
c000f2bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2c3:	50                   	push   eax
c000f2c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2c8:	50                   	push   eax
c000f2c9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2cd:	50                   	push   eax
c000f2ce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2d2:	50                   	push   eax
c000f2d3:	6a 01                	push   0x1
c000f2d5:	e8 5e ff ff ff       	call   c000f238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2de:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f2e2:	0f 95 c0             	setne  al
c000f2e5:	83 c4 24             	add    esp,0x24
c000f2e8:	c3                   	ret    
c000f2e9:	90                   	nop

c000f2ea <CPU::cpuidCheckECX(unsigned int)>:
c000f2ea:	83 ec 10             	sub    esp,0x10
c000f2ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2f1:	50                   	push   eax
c000f2f2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2f6:	50                   	push   eax
c000f2f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2fb:	50                   	push   eax
c000f2fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f300:	50                   	push   eax
c000f301:	6a 01                	push   0x1
c000f303:	e8 30 ff ff ff       	call   c000f238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f308:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f30c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f310:	0f 95 c0             	setne  al
c000f313:	83 c4 24             	add    esp,0x24
c000f316:	c3                   	ret    
c000f317:	90                   	nop

c000f318 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f318:	83 ec 10             	sub    esp,0x10
c000f31b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f31f:	50                   	push   eax
c000f320:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f324:	50                   	push   eax
c000f325:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f329:	50                   	push   eax
c000f32a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f32e:	50                   	push   eax
c000f32f:	6a 07                	push   0x7
c000f331:	e8 02 ff ff ff       	call   c000f238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f336:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f33a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f33e:	0f 95 c0             	setne  al
c000f341:	83 c4 24             	add    esp,0x24
c000f344:	c3                   	ret    
c000f345:	90                   	nop

c000f346 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f346:	83 ec 10             	sub    esp,0x10
c000f349:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f34d:	50                   	push   eax
c000f34e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f352:	50                   	push   eax
c000f353:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f357:	50                   	push   eax
c000f358:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f35c:	50                   	push   eax
c000f35d:	6a 07                	push   0x7
c000f35f:	e8 d4 fe ff ff       	call   c000f238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f364:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f368:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f36c:	0f 95 c0             	setne  al
c000f36f:	83 c4 24             	add    esp,0x24
c000f372:	c3                   	ret    
c000f373:	90                   	nop

c000f374 <CPU::CPU()>:
c000f374:	83 ec 0c             	sub    esp,0xc
c000f377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f37b:	83 ec 08             	sub    esp,0x8
c000f37e:	68 bd 03 02 c0       	push   0xc00203bd
c000f383:	50                   	push   eax
c000f384:	e8 9b c8 ff ff       	call   c000bc24 <Device::Device(char const*)>
c000f389:	83 c4 10             	add    esp,0x10
c000f38c:	ba 44 04 02 c0       	mov    edx,0xc0020444
c000f391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f395:	89 10                	mov    DWORD PTR [eax],edx
c000f397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f39b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f3a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3a9:	05 78 01 00 00       	add    eax,0x178
c000f3ae:	83 ec 0c             	sub    esp,0xc
c000f3b1:	50                   	push   eax
c000f3b2:	e8 6d 7d ff ff       	call   c0007124 <GDT::GDT()>
c000f3b7:	83 c4 10             	add    esp,0x10
c000f3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3be:	05 7c 09 00 00       	add    eax,0x97c
c000f3c3:	83 ec 0c             	sub    esp,0xc
c000f3c6:	50                   	push   eax
c000f3c7:	e8 94 7f ff ff       	call   c0007360 <IDT::IDT()>
c000f3cc:	83 c4 10             	add    esp,0x10
c000f3cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3d3:	05 7c 11 00 00       	add    eax,0x117c
c000f3d8:	83 ec 0c             	sub    esp,0xc
c000f3db:	50                   	push   eax
c000f3dc:	e8 bf 98 ff ff       	call   c0008ca0 <TSS::TSS()>
c000f3e1:	83 c4 10             	add    esp,0x10
c000f3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3e8:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3f3:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f3fd:	90                   	nop
c000f3fe:	83 c4 0c             	add    esp,0xc
c000f401:	c3                   	ret    

c000f402 <CPU::displayFeatures()>:
c000f402:	c3                   	ret    
c000f403:	90                   	nop

c000f404 <CPU::detectFeatures()>:
c000f404:	55                   	push   ebp
c000f405:	57                   	push   edi
c000f406:	56                   	push   esi
c000f407:	53                   	push   ebx
c000f408:	83 ec 30             	sub    esp,0x30
c000f40b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f40f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f419:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f420:	6a 0d                	push   0xd
c000f422:	6a 00                	push   0x0
c000f424:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f42a:	55                   	push   ebp
c000f42b:	e8 90 10 ff ff       	call   c00004c0 <memset>
c000f430:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f435:	83 c4 10             	add    esp,0x10
c000f438:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f43f:	0f 84 d5 05 00 00    	je     c000fa1a <CPU::detectFeatures()+0x616>
c000f445:	83 ec 0c             	sub    esp,0xc
c000f448:	89 ef                	mov    edi,ebp
c000f44a:	6a 10                	push   0x10
c000f44c:	e8 6b fe ff ff       	call   c000f2bc <CPU::cpuidCheckEDX(unsigned int)>
c000f451:	83 e0 01             	and    eax,0x1
c000f454:	8d 14 00             	lea    edx,[eax+eax*1]
c000f457:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f45d:	83 e0 fd             	and    eax,0xfffffffd
c000f460:	09 d0                	or     eax,edx
c000f462:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f468:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f46f:	e8 48 fe ff ff       	call   c000f2bc <CPU::cpuidCheckEDX(unsigned int)>
c000f474:	83 e0 01             	and    eax,0x1
c000f477:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f47e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f484:	83 e0 fb             	and    eax,0xfffffffb
c000f487:	09 d0                	or     eax,edx
c000f489:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f48f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f496:	e8 21 fe ff ff       	call   c000f2bc <CPU::cpuidCheckEDX(unsigned int)>
c000f49b:	83 e0 01             	and    eax,0x1
c000f49e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f4a5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4ab:	83 e0 f7             	and    eax,0xfffffff7
c000f4ae:	09 d0                	or     eax,edx
c000f4b0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4b6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f4bd:	e8 fa fd ff ff       	call   c000f2bc <CPU::cpuidCheckEDX(unsigned int)>
c000f4c2:	83 e0 01             	and    eax,0x1
c000f4c5:	c1 e0 04             	shl    eax,0x4
c000f4c8:	88 c2                	mov    dl,al
c000f4ca:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4d0:	83 e0 ef             	and    eax,0xffffffef
c000f4d3:	09 d0                	or     eax,edx
c000f4d5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4db:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f4e2:	e8 d5 fd ff ff       	call   c000f2bc <CPU::cpuidCheckEDX(unsigned int)>
c000f4e7:	83 e0 01             	and    eax,0x1
c000f4ea:	c1 e0 05             	shl    eax,0x5
c000f4ed:	88 c2                	mov    dl,al
c000f4ef:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4f5:	83 e0 df             	and    eax,0xffffffdf
c000f4f8:	09 d0                	or     eax,edx
c000f4fa:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f500:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f507:	e8 b0 fd ff ff       	call   c000f2bc <CPU::cpuidCheckEDX(unsigned int)>
c000f50c:	83 e0 01             	and    eax,0x1
c000f50f:	8d 14 00             	lea    edx,[eax+eax*1]
c000f512:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f518:	83 e0 fd             	and    eax,0xfffffffd
c000f51b:	09 d0                	or     eax,edx
c000f51d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f523:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f52a:	e8 8d fd ff ff       	call   c000f2bc <CPU::cpuidCheckEDX(unsigned int)>
c000f52f:	83 e0 01             	and    eax,0x1
c000f532:	c1 e0 06             	shl    eax,0x6
c000f535:	88 c2                	mov    dl,al
c000f537:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f53d:	83 e0 bf             	and    eax,0xffffffbf
c000f540:	09 d0                	or     eax,edx
c000f542:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f548:	58                   	pop    eax
c000f549:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f54d:	50                   	push   eax
c000f54e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f552:	50                   	push   eax
c000f553:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f557:	56                   	push   esi
c000f558:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f55c:	50                   	push   eax
c000f55d:	6a 00                	push   0x0
c000f55f:	e8 d4 fc ff ff       	call   c000f238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f564:	b8 04 00 00 00       	mov    eax,0x4
c000f569:	89 c1                	mov    ecx,eax
c000f56b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f56d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f573:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f577:	89 c1                	mov    ecx,eax
c000f579:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f57b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f581:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f585:	89 c1                	mov    ecx,eax
c000f587:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f589:	83 c4 18             	add    esp,0x18
c000f58c:	68 cc 02 02 c0       	push   0xc00202cc
c000f591:	55                   	push   ebp
c000f592:	e8 49 11 ff ff       	call   c00006e0 <strcmp>
c000f597:	83 c4 10             	add    esp,0x10
c000f59a:	85 c0                	test   eax,eax
c000f59c:	75 0f                	jne    c000f5ad <CPU::detectFeatures()+0x1a9>
c000f59e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f5a8:	e9 22 02 00 00       	jmp    c000f7cf <CPU::detectFeatures()+0x3cb>
c000f5ad:	50                   	push   eax
c000f5ae:	50                   	push   eax
c000f5af:	68 d9 02 02 c0       	push   0xc00202d9
c000f5b4:	55                   	push   ebp
c000f5b5:	e8 26 11 ff ff       	call   c00006e0 <strcmp>
c000f5ba:	83 c4 10             	add    esp,0x10
c000f5bd:	85 c0                	test   eax,eax
c000f5bf:	74 dd                	je     c000f59e <CPU::detectFeatures()+0x19a>
c000f5c1:	50                   	push   eax
c000f5c2:	50                   	push   eax
c000f5c3:	68 e6 02 02 c0       	push   0xc00202e6
c000f5c8:	55                   	push   ebp
c000f5c9:	e8 12 11 ff ff       	call   c00006e0 <strcmp>
c000f5ce:	83 c4 10             	add    esp,0x10
c000f5d1:	85 c0                	test   eax,eax
c000f5d3:	74 2a                	je     c000f5ff <CPU::detectFeatures()+0x1fb>
c000f5d5:	50                   	push   eax
c000f5d6:	50                   	push   eax
c000f5d7:	68 f3 02 02 c0       	push   0xc00202f3
c000f5dc:	55                   	push   ebp
c000f5dd:	e8 fe 10 ff ff       	call   c00006e0 <strcmp>
c000f5e2:	83 c4 10             	add    esp,0x10
c000f5e5:	85 c0                	test   eax,eax
c000f5e7:	74 16                	je     c000f5ff <CPU::detectFeatures()+0x1fb>
c000f5e9:	50                   	push   eax
c000f5ea:	50                   	push   eax
c000f5eb:	68 00 03 02 c0       	push   0xc0020300
c000f5f0:	55                   	push   ebp
c000f5f1:	e8 ea 10 ff ff       	call   c00006e0 <strcmp>
c000f5f6:	83 c4 10             	add    esp,0x10
c000f5f9:	85 c0                	test   eax,eax
c000f5fb:	74 48                	je     c000f645 <CPU::detectFeatures()+0x241>
c000f5fd:	eb 0f                	jmp    c000f60e <CPU::detectFeatures()+0x20a>
c000f5ff:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f609:	e9 c1 01 00 00       	jmp    c000f7cf <CPU::detectFeatures()+0x3cb>
c000f60e:	50                   	push   eax
c000f60f:	50                   	push   eax
c000f610:	68 0d 03 02 c0       	push   0xc002030d
c000f615:	55                   	push   ebp
c000f616:	e8 c5 10 ff ff       	call   c00006e0 <strcmp>
c000f61b:	83 c4 10             	add    esp,0x10
c000f61e:	85 c0                	test   eax,eax
c000f620:	74 23                	je     c000f645 <CPU::detectFeatures()+0x241>
c000f622:	57                   	push   edi
c000f623:	57                   	push   edi
c000f624:	68 1a 03 02 c0       	push   0xc002031a
c000f629:	55                   	push   ebp
c000f62a:	e8 b1 10 ff ff       	call   c00006e0 <strcmp>
c000f62f:	83 c4 10             	add    esp,0x10
c000f632:	85 c0                	test   eax,eax
c000f634:	75 1e                	jne    c000f654 <CPU::detectFeatures()+0x250>
c000f636:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f640:	e9 8a 01 00 00       	jmp    c000f7cf <CPU::detectFeatures()+0x3cb>
c000f645:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f64f:	e9 7b 01 00 00       	jmp    c000f7cf <CPU::detectFeatures()+0x3cb>
c000f654:	56                   	push   esi
c000f655:	56                   	push   esi
c000f656:	68 27 03 02 c0       	push   0xc0020327
c000f65b:	55                   	push   ebp
c000f65c:	e8 7f 10 ff ff       	call   c00006e0 <strcmp>
c000f661:	83 c4 10             	add    esp,0x10
c000f664:	85 c0                	test   eax,eax
c000f666:	75 0f                	jne    c000f677 <CPU::detectFeatures()+0x273>
c000f668:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f672:	e9 58 01 00 00       	jmp    c000f7cf <CPU::detectFeatures()+0x3cb>
c000f677:	51                   	push   ecx
c000f678:	51                   	push   ecx
c000f679:	68 e6 02 02 c0       	push   0xc00202e6
c000f67e:	55                   	push   ebp
c000f67f:	e8 5c 10 ff ff       	call   c00006e0 <strcmp>
c000f684:	83 c4 10             	add    esp,0x10
c000f687:	85 c0                	test   eax,eax
c000f689:	75 0f                	jne    c000f69a <CPU::detectFeatures()+0x296>
c000f68b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f695:	e9 35 01 00 00       	jmp    c000f7cf <CPU::detectFeatures()+0x3cb>
c000f69a:	52                   	push   edx
c000f69b:	52                   	push   edx
c000f69c:	68 34 03 02 c0       	push   0xc0020334
c000f6a1:	55                   	push   ebp
c000f6a2:	e8 39 10 ff ff       	call   c00006e0 <strcmp>
c000f6a7:	83 c4 10             	add    esp,0x10
c000f6aa:	85 c0                	test   eax,eax
c000f6ac:	75 0f                	jne    c000f6bd <CPU::detectFeatures()+0x2b9>
c000f6ae:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f6b8:	e9 12 01 00 00       	jmp    c000f7cf <CPU::detectFeatures()+0x3cb>
c000f6bd:	50                   	push   eax
c000f6be:	50                   	push   eax
c000f6bf:	68 41 03 02 c0       	push   0xc0020341
c000f6c4:	55                   	push   ebp
c000f6c5:	e8 16 10 ff ff       	call   c00006e0 <strcmp>
c000f6ca:	83 c4 10             	add    esp,0x10
c000f6cd:	85 c0                	test   eax,eax
c000f6cf:	75 0f                	jne    c000f6e0 <CPU::detectFeatures()+0x2dc>
c000f6d1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f6db:	e9 ef 00 00 00       	jmp    c000f7cf <CPU::detectFeatures()+0x3cb>
c000f6e0:	50                   	push   eax
c000f6e1:	50                   	push   eax
c000f6e2:	68 4e 03 02 c0       	push   0xc002034e
c000f6e7:	55                   	push   ebp
c000f6e8:	e8 f3 0f ff ff       	call   c00006e0 <strcmp>
c000f6ed:	83 c4 10             	add    esp,0x10
c000f6f0:	85 c0                	test   eax,eax
c000f6f2:	75 0f                	jne    c000f703 <CPU::detectFeatures()+0x2ff>
c000f6f4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f6fe:	e9 cc 00 00 00       	jmp    c000f7cf <CPU::detectFeatures()+0x3cb>
c000f703:	50                   	push   eax
c000f704:	50                   	push   eax
c000f705:	68 5b 03 02 c0       	push   0xc002035b
c000f70a:	55                   	push   ebp
c000f70b:	e8 d0 0f ff ff       	call   c00006e0 <strcmp>
c000f710:	83 c4 10             	add    esp,0x10
c000f713:	85 c0                	test   eax,eax
c000f715:	75 0f                	jne    c000f726 <CPU::detectFeatures()+0x322>
c000f717:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f721:	e9 a9 00 00 00       	jmp    c000f7cf <CPU::detectFeatures()+0x3cb>
c000f726:	50                   	push   eax
c000f727:	50                   	push   eax
c000f728:	68 68 03 02 c0       	push   0xc0020368
c000f72d:	55                   	push   ebp
c000f72e:	e8 ad 0f ff ff       	call   c00006e0 <strcmp>
c000f733:	83 c4 10             	add    esp,0x10
c000f736:	85 c0                	test   eax,eax
c000f738:	75 0f                	jne    c000f749 <CPU::detectFeatures()+0x345>
c000f73a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f744:	e9 86 00 00 00       	jmp    c000f7cf <CPU::detectFeatures()+0x3cb>
c000f749:	50                   	push   eax
c000f74a:	50                   	push   eax
c000f74b:	68 75 03 02 c0       	push   0xc0020375
c000f750:	55                   	push   ebp
c000f751:	e8 8a 0f ff ff       	call   c00006e0 <strcmp>
c000f756:	83 c4 10             	add    esp,0x10
c000f759:	85 c0                	test   eax,eax
c000f75b:	75 0c                	jne    c000f769 <CPU::detectFeatures()+0x365>
c000f75d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f767:	eb 66                	jmp    c000f7cf <CPU::detectFeatures()+0x3cb>
c000f769:	50                   	push   eax
c000f76a:	50                   	push   eax
c000f76b:	68 82 03 02 c0       	push   0xc0020382
c000f770:	55                   	push   ebp
c000f771:	e8 6a 0f ff ff       	call   c00006e0 <strcmp>
c000f776:	83 c4 10             	add    esp,0x10
c000f779:	85 c0                	test   eax,eax
c000f77b:	75 0c                	jne    c000f789 <CPU::detectFeatures()+0x385>
c000f77d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f787:	eb 46                	jmp    c000f7cf <CPU::detectFeatures()+0x3cb>
c000f789:	57                   	push   edi
c000f78a:	57                   	push   edi
c000f78b:	68 8f 03 02 c0       	push   0xc002038f
c000f790:	55                   	push   ebp
c000f791:	e8 4a 0f ff ff       	call   c00006e0 <strcmp>
c000f796:	83 c4 10             	add    esp,0x10
c000f799:	85 c0                	test   eax,eax
c000f79b:	74 e0                	je     c000f77d <CPU::detectFeatures()+0x379>
c000f79d:	56                   	push   esi
c000f79e:	56                   	push   esi
c000f79f:	68 9c 03 02 c0       	push   0xc002039c
c000f7a4:	55                   	push   ebp
c000f7a5:	e8 36 0f ff ff       	call   c00006e0 <strcmp>
c000f7aa:	83 c4 10             	add    esp,0x10
c000f7ad:	85 c0                	test   eax,eax
c000f7af:	74 cc                	je     c000f77d <CPU::detectFeatures()+0x379>
c000f7b1:	51                   	push   ecx
c000f7b2:	51                   	push   ecx
c000f7b3:	68 a9 03 02 c0       	push   0xc00203a9
c000f7b8:	55                   	push   ebp
c000f7b9:	e8 22 0f ff ff       	call   c00006e0 <strcmp>
c000f7be:	83 c4 10             	add    esp,0x10
c000f7c1:	85 c0                	test   eax,eax
c000f7c3:	74 b8                	je     c000f77d <CPU::detectFeatures()+0x379>
c000f7c5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f7cf:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f7d4:	0f 86 be 00 00 00    	jbe    c000f898 <CPU::detectFeatures()+0x494>
c000f7da:	83 ec 0c             	sub    esp,0xc
c000f7dd:	68 80 00 00 00       	push   0x80
c000f7e2:	e8 31 fb ff ff       	call   c000f318 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7e7:	83 e0 01             	and    eax,0x1
c000f7ea:	c1 e0 06             	shl    eax,0x6
c000f7ed:	88 c2                	mov    dl,al
c000f7ef:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7f5:	83 e0 bf             	and    eax,0xffffffbf
c000f7f8:	09 d0                	or     eax,edx
c000f7fa:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f800:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f807:	e8 0c fb ff ff       	call   c000f318 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f80c:	83 e0 01             	and    eax,0x1
c000f80f:	c1 e0 04             	shl    eax,0x4
c000f812:	88 c2                	mov    dl,al
c000f814:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f81a:	83 e0 ef             	and    eax,0xffffffef
c000f81d:	09 d0                	or     eax,edx
c000f81f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f825:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f82c:	e8 e7 fa ff ff       	call   c000f318 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f831:	c1 e0 07             	shl    eax,0x7
c000f834:	88 c2                	mov    dl,al
c000f836:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f83c:	83 e0 7f             	and    eax,0x7f
c000f83f:	09 d0                	or     eax,edx
c000f841:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f847:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f84e:	e8 f3 fa ff ff       	call   c000f346 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f853:	83 e0 01             	and    eax,0x1
c000f856:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f85d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f863:	83 e0 f7             	and    eax,0xfffffff7
c000f866:	09 d0                	or     eax,edx
c000f868:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f86e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f875:	e8 cc fa ff ff       	call   c000f346 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f87a:	83 c4 10             	add    esp,0x10
c000f87d:	83 e0 01             	and    eax,0x1
c000f880:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f887:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f88d:	83 e0 fb             	and    eax,0xfffffffb
c000f890:	09 d0                	or     eax,edx
c000f892:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f898:	83 ec 0c             	sub    esp,0xc
c000f89b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f89f:	50                   	push   eax
c000f8a0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8a4:	50                   	push   eax
c000f8a5:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f8a9:	56                   	push   esi
c000f8aa:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f8ae:	50                   	push   eax
c000f8af:	6a 01                	push   0x1
c000f8b1:	e8 82 f9 ff ff       	call   c000f238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f8b6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f8ba:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f8c0:	88 ca                	mov    dl,cl
c000f8c2:	83 e0 f0             	and    eax,0xfffffff0
c000f8c5:	83 e2 0f             	and    edx,0xf
c000f8c8:	09 d0                	or     eax,edx
c000f8ca:	88 ca                	mov    dl,cl
c000f8cc:	c0 ea 04             	shr    dl,0x4
c000f8cf:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f8d5:	0f b6 c2             	movzx  eax,dl
c000f8d8:	c1 e0 06             	shl    eax,0x6
c000f8db:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f8df:	89 c7                	mov    edi,eax
c000f8e1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f8e7:	66 25 3f c0          	and    ax,0xc03f
c000f8eb:	83 c4 20             	add    esp,0x20
c000f8ee:	09 f8                	or     eax,edi
c000f8f0:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f8f7:	89 c8                	mov    eax,ecx
c000f8f9:	c1 e8 08             	shr    eax,0x8
c000f8fc:	83 e0 0f             	and    eax,0xf
c000f8ff:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f906:	89 c7                	mov    edi,eax
c000f908:	83 e5 3f             	and    ebp,0x3f
c000f90b:	c1 e7 06             	shl    edi,0x6
c000f90e:	09 ef                	or     edi,ebp
c000f910:	89 fa                	mov    edx,edi
c000f912:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f919:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f91f:	88 c2                	mov    dl,al
c000f921:	c0 ea 02             	shr    dl,0x2
c000f924:	83 e5 c0             	and    ebp,0xffffffc0
c000f927:	89 d7                	mov    edi,edx
c000f929:	09 ef                	or     edi,ebp
c000f92b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f931:	89 fa                	mov    edx,edi
c000f933:	89 cf                	mov    edi,ecx
c000f935:	c1 ef 0c             	shr    edi,0xc
c000f938:	83 e5 cf             	and    ebp,0xffffffcf
c000f93b:	83 e7 03             	and    edi,0x3
c000f93e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f944:	c1 e7 04             	shl    edi,0x4
c000f947:	09 ef                	or     edi,ebp
c000f949:	3c 06                	cmp    al,0x6
c000f94b:	89 fa                	mov    edx,edi
c000f94d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f953:	74 04                	je     c000f959 <CPU::detectFeatures()+0x555>
c000f955:	3c 0f                	cmp    al,0xf
c000f957:	75 5c                	jne    c000f9b5 <CPU::detectFeatures()+0x5b1>
c000f959:	89 cf                	mov    edi,ecx
c000f95b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f95f:	c1 ef 10             	shr    edi,0x10
c000f962:	c1 e7 04             	shl    edi,0x4
c000f965:	09 fa                	or     edx,edi
c000f967:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f96d:	0f b6 d2             	movzx  edx,dl
c000f970:	c1 e2 06             	shl    edx,0x6
c000f973:	66 81 e7 3f c0       	and    di,0xc03f
c000f978:	09 fa                	or     edx,edi
c000f97a:	3c 0f                	cmp    al,0xf
c000f97c:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f983:	75 30                	jne    c000f9b5 <CPU::detectFeatures()+0x5b1>
c000f985:	c1 e9 14             	shr    ecx,0x14
c000f988:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f98e:	83 c1 0f             	add    ecx,0xf
c000f991:	83 e0 3f             	and    eax,0x3f
c000f994:	88 ca                	mov    dl,cl
c000f996:	c1 e2 06             	shl    edx,0x6
c000f999:	c0 e9 02             	shr    cl,0x2
c000f99c:	09 d0                	or     eax,edx
c000f99e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f9a4:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f9aa:	83 e0 c0             	and    eax,0xffffffc0
c000f9ad:	09 c1                	or     ecx,eax
c000f9af:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f9b5:	83 ec 0c             	sub    esp,0xc
c000f9b8:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f9bf:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9c3:	50                   	push   eax
c000f9c4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f9c8:	55                   	push   ebp
c000f9c9:	56                   	push   esi
c000f9ca:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f9ce:	57                   	push   edi
c000f9cf:	68 00 00 00 80       	push   0x80000000
c000f9d4:	e8 5f f8 ff ff       	call   c000f238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9d9:	83 c4 20             	add    esp,0x20
c000f9dc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f9e4:	76 22                	jbe    c000fa08 <CPU::detectFeatures()+0x604>
c000f9e6:	83 ec 0c             	sub    esp,0xc
c000f9e9:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9ed:	50                   	push   eax
c000f9ee:	55                   	push   ebp
c000f9ef:	56                   	push   esi
c000f9f0:	57                   	push   edi
c000f9f1:	68 01 00 00 80       	push   0x80000001
c000f9f6:	e8 3d f8 ff ff       	call   c000f238 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9fb:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fa05:	83 c4 20             	add    esp,0x20
c000fa08:	52                   	push   edx
c000fa09:	52                   	push   edx
c000fa0a:	68 b5 03 02 c0       	push   0xc00203b5
c000fa0f:	53                   	push   ebx
c000fa10:	e8 01 c2 ff ff       	call   c000bc16 <Device::setName(char const*)>
c000fa15:	83 c4 10             	add    esp,0x10
c000fa18:	eb 67                	jmp    c000fa81 <CPU::detectFeatures()+0x67d>
c000fa1a:	50                   	push   eax
c000fa1b:	50                   	push   eax
c000fa1c:	68 1a 03 02 c0       	push   0xc002031a
c000fa21:	55                   	push   ebp
c000fa22:	e8 c9 0b ff ff       	call   c00005f0 <strcpy>
c000fa27:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa31:	e8 8d 07 ff ff       	call   c00001c3 <is486>
c000fa36:	83 c4 10             	add    esp,0x10
c000fa39:	85 c0                	test   eax,eax
c000fa3b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fa41:	74 1d                	je     c000fa60 <CPU::detectFeatures()+0x65c>
c000fa43:	83 c8 07             	or     eax,0x7
c000fa46:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fa4c:	0f 20 c0             	mov    eax,cr0
c000fa4f:	83 e0 14             	and    eax,0x14
c000fa52:	83 f8 04             	cmp    eax,0x4
c000fa55:	75 0e                	jne    c000fa65 <CPU::detectFeatures()+0x661>
c000fa57:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fa5e:	eb 21                	jmp    c000fa81 <CPU::detectFeatures()+0x67d>
c000fa60:	83 e0 f8             	and    eax,0xfffffff8
c000fa63:	eb e1                	jmp    c000fa46 <CPU::detectFeatures()+0x642>
c000fa65:	e8 34 07 ff ff       	call   c000019e <hasLegacyFPU>
c000fa6a:	83 e0 01             	and    eax,0x1
c000fa6d:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa70:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa76:	83 e0 fd             	and    eax,0xfffffffd
c000fa79:	09 d0                	or     eax,edx
c000fa7b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa81:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fa88:	74 0e                	je     c000fa98 <CPU::detectFeatures()+0x694>
c000fa8a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000fa8f:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fa96:	eb 20                	jmp    c000fab8 <CPU::detectFeatures()+0x6b4>
c000fa98:	e8 01 07 ff ff       	call   c000019e <hasLegacyFPU>
c000fa9d:	83 e0 01             	and    eax,0x1
c000faa0:	8d 14 00             	lea    edx,[eax+eax*1]
c000faa3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000faa9:	83 e0 fd             	and    eax,0xfffffffd
c000faac:	09 d0                	or     eax,edx
c000faae:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fab4:	a8 02                	test   al,0x2
c000fab6:	75 d2                	jne    c000fa8a <CPU::detectFeatures()+0x686>
c000fab8:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fabf:	83 c4 2c             	add    esp,0x2c
c000fac2:	5b                   	pop    ebx
c000fac3:	5e                   	pop    esi
c000fac4:	5f                   	pop    edi
c000fac5:	5d                   	pop    ebp
c000fac6:	c3                   	ret    
c000fac7:	90                   	nop

c000fac8 <CPU::setupSMEP()>:
c000fac8:	0f 20 e0             	mov    eax,cr4
c000facb:	0d 00 00 10 00       	or     eax,0x100000
c000fad0:	0f 22 e0             	mov    cr4,eax
c000fad3:	c3                   	ret    

c000fad4 <CPU::setupUMIP()>:
c000fad4:	0f 20 e0             	mov    eax,cr4
c000fad7:	80 cc 08             	or     ah,0x8
c000fada:	0f 22 e0             	mov    cr4,eax
c000fadd:	c3                   	ret    

c000fade <CPU::setupTSC()>:
c000fade:	0f 20 e0             	mov    eax,cr4
c000fae1:	83 c8 04             	or     eax,0x4
c000fae4:	0f 22 e0             	mov    cr4,eax
c000fae7:	c3                   	ret    

c000fae8 <CPU::setupLargePages()>:
c000fae8:	0f 20 e0             	mov    eax,cr4
c000faeb:	83 c8 10             	or     eax,0x10
c000faee:	0f 22 e0             	mov    cr4,eax
c000faf1:	c3                   	ret    

c000faf2 <CPU::setupPAT()>:
c000faf2:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000faf7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fafe:	74 2c                	je     c000fb2c <CPU::setupPAT()+0x3a>
c000fb00:	53                   	push   ebx
c000fb01:	83 ec 10             	sub    esp,0x10
c000fb04:	68 77 02 00 00       	push   0x277
c000fb09:	50                   	push   eax
c000fb0a:	e8 9d 73 ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c000fb0f:	83 e2 f8             	and    edx,0xfffffff8
c000fb12:	83 ca 01             	or     edx,0x1
c000fb15:	52                   	push   edx
c000fb16:	50                   	push   eax
c000fb17:	68 77 02 00 00       	push   0x277
c000fb1c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000fb22:	e8 b1 73 ff ff       	call   c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fb27:	83 c4 28             	add    esp,0x28
c000fb2a:	5b                   	pop    ebx
c000fb2b:	c3                   	ret    
c000fb2c:	c3                   	ret    
c000fb2d:	90                   	nop

c000fb2e <CPU::setupMTRR()>:
c000fb2e:	c3                   	ret    
c000fb2f:	90                   	nop

c000fb30 <CPU::setupGlobalPages()>:
c000fb30:	0f 20 e0             	mov    eax,cr4
c000fb33:	0c 80                	or     al,0x80
c000fb35:	0f 22 e0             	mov    cr4,eax
c000fb38:	c3                   	ret    
c000fb39:	90                   	nop

c000fb3a <CPU::allowUsermodeDataAccess()>:
c000fb3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb3e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fb45:	74 03                	je     c000fb4a <CPU::allowUsermodeDataAccess()+0x10>
c000fb47:	0f 01 cb             	stac   
c000fb4a:	c3                   	ret    
c000fb4b:	90                   	nop

c000fb4c <CPU::prohibitUsermodeDataAccess()>:
c000fb4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb50:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fb57:	74 03                	je     c000fb5c <CPU::prohibitUsermodeDataAccess()+0x10>
c000fb59:	0f 01 ca             	clac   
c000fb5c:	c3                   	ret    
c000fb5d:	90                   	nop

c000fb5e <CPU::setupSMAP()>:
c000fb5e:	0f 20 e0             	mov    eax,cr4
c000fb61:	0d 00 00 20 00       	or     eax,0x200000
c000fb66:	0f 22 e0             	mov    cr4,eax
c000fb69:	eb e1                	jmp    c000fb4c <CPU::prohibitUsermodeDataAccess()>
c000fb6b:	90                   	nop

c000fb6c <CPU::setupFeatures()>:
c000fb6c:	53                   	push   ebx
c000fb6d:	83 ec 08             	sub    esp,0x8
c000fb70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb74:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fb7b:	74 18                	je     c000fb95 <CPU::setupFeatures()+0x29>
c000fb7d:	83 ec 0c             	sub    esp,0xc
c000fb80:	68 c1 03 02 c0       	push   0xc00203c1
c000fb85:	e8 c9 aa ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c000fb8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb8d:	e8 42 ff ff ff       	call   c000fad4 <CPU::setupUMIP()>
c000fb92:	83 c4 10             	add    esp,0x10
c000fb95:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fb9c:	74 18                	je     c000fbb6 <CPU::setupFeatures()+0x4a>
c000fb9e:	83 ec 0c             	sub    esp,0xc
c000fba1:	68 cb 03 02 c0       	push   0xc00203cb
c000fba6:	e8 a8 aa ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c000fbab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbae:	e8 2b ff ff ff       	call   c000fade <CPU::setupTSC()>
c000fbb3:	83 c4 10             	add    esp,0x10
c000fbb6:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fbbd:	74 18                	je     c000fbd7 <CPU::setupFeatures()+0x6b>
c000fbbf:	83 ec 0c             	sub    esp,0xc
c000fbc2:	68 d4 03 02 c0       	push   0xc00203d4
c000fbc7:	e8 87 aa ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c000fbcc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbcf:	e8 14 ff ff ff       	call   c000fae8 <CPU::setupLargePages()>
c000fbd4:	83 c4 10             	add    esp,0x10
c000fbd7:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fbde:	74 18                	je     c000fbf8 <CPU::setupFeatures()+0x8c>
c000fbe0:	83 ec 0c             	sub    esp,0xc
c000fbe3:	68 dd 03 02 c0       	push   0xc00203dd
c000fbe8:	e8 66 aa ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c000fbed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbf0:	e8 3b ff ff ff       	call   c000fb30 <CPU::setupGlobalPages()>
c000fbf5:	83 c4 10             	add    esp,0x10
c000fbf8:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fbff:	74 18                	je     c000fc19 <CPU::setupFeatures()+0xad>
c000fc01:	83 ec 0c             	sub    esp,0xc
c000fc04:	68 ef 03 02 c0       	push   0xc00203ef
c000fc09:	e8 45 aa ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c000fc0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc11:	e8 dc fe ff ff       	call   c000faf2 <CPU::setupPAT()>
c000fc16:	83 c4 10             	add    esp,0x10
c000fc19:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fc20:	74 11                	je     c000fc33 <CPU::setupFeatures()+0xc7>
c000fc22:	c7 44 24 10 f8 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc00203f8
c000fc2a:	83 c4 08             	add    esp,0x8
c000fc2d:	5b                   	pop    ebx
c000fc2e:	e9 20 aa ff ff       	jmp    c000a653 <Dbg::kprintf(char const*, ...)>
c000fc33:	83 c4 08             	add    esp,0x8
c000fc36:	5b                   	pop    ebx
c000fc37:	c3                   	ret    

c000fc38 <CPU::open(int, int, void*)>:
c000fc38:	57                   	push   edi
c000fc39:	56                   	push   esi
c000fc3a:	53                   	push   ebx
c000fc3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fc43:	83 ec 0c             	sub    esp,0xc
c000fc46:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fc4c:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fc52:	50                   	push   eax
c000fc53:	e8 2e 75 ff ff       	call   c0007186 <GDT::setup()>
c000fc58:	83 c4 0c             	add    esp,0xc
c000fc5b:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fc61:	6a 00                	push   0x0
c000fc63:	68 ef be ad de       	push   0xdeadbeef
c000fc68:	57                   	push   edi
c000fc69:	e8 76 90 ff ff       	call   c0008ce4 <TSS::setup(unsigned long, unsigned long)>
c000fc6e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fc71:	e8 4e 90 ff ff       	call   c0008cc4 <TSS::flush()>
c000fc76:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fc7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc7f:	e8 52 77 ff ff       	call   c00073d6 <IDT::setup()>
c000fc84:	b8 00 04 00 00       	mov    eax,0x400
c000fc89:	0f 23 f8             	mov    db7,eax
c000fc8c:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fc96:	e8 bf 7e ff ff       	call   c0007b5a <Phys::allocatePage()>
c000fc9b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fca1:	89 30                	mov    DWORD PTR [eax],esi
c000fca3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fca9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fcac:	58                   	pop    eax
c000fcad:	5a                   	pop    edx
c000fcae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fcb4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fcb8:	e8 55 a0 ff ff       	call   c0009d12 <VAS::setCPUSpecific(unsigned long)>
c000fcbd:	c7 04 24 02 04 02 c0 	mov    DWORD PTR [esp],0xc0020402
c000fcc4:	e8 c6 00 00 00       	call   c000fd8f <KeSetBootMessage(char const*)>
c000fcc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fccc:	e8 33 f7 ff ff       	call   c000f404 <CPU::detectFeatures()>
c000fcd1:	c7 04 24 25 04 02 c0 	mov    DWORD PTR [esp],0xc0020425
c000fcd8:	e8 b2 00 00 00       	call   c000fd8f <KeSetBootMessage(char const*)>
c000fcdd:	e8 01 6e 00 00       	call   c0016ae3 <HalInitialise()>
c000fce2:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000fce7:	83 e0 10             	and    eax,0x10
c000fcea:	83 f8 01             	cmp    eax,0x1
c000fced:	19 c0                	sbb    eax,eax
c000fcef:	83 e0 46             	and    eax,0x46
c000fcf2:	83 c0 1e             	add    eax,0x1e
c000fcf5:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcf8:	e8 dc d6 ff ff       	call   c000d3d9 <setupTimer(int)>
c000fcfd:	83 c4 10             	add    esp,0x10
c000fd00:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fd06:	f6 05 d0 3e 02 c0 20 	test   BYTE PTR ds:0xc0023ed0,0x20
c000fd0d:	74 0c                	je     c000fd1b <CPU::open(int, int, void*)+0xe3>
c000fd0f:	83 ec 0c             	sub    esp,0xc
c000fd12:	53                   	push   ebx
c000fd13:	e8 54 fe ff ff       	call   c000fb6c <CPU::setupFeatures()>
c000fd18:	83 c4 10             	add    esp,0x10
c000fd1b:	5b                   	pop    ebx
c000fd1c:	31 c0                	xor    eax,eax
c000fd1e:	5e                   	pop    esi
c000fd1f:	5f                   	pop    edi
c000fd20:	c3                   	ret    

c000fd21 <KeDisplaySplashScreen()>:
c000fd21:	55                   	push   ebp
c000fd22:	bd 05 00 00 00       	mov    ebp,0x5
c000fd27:	57                   	push   edi
c000fd28:	bf c0 17 02 c0       	mov    edi,0xc00217c0
c000fd2d:	56                   	push   esi
c000fd2e:	be 0a 00 00 00       	mov    esi,0xa
c000fd33:	53                   	push   ebx
c000fd34:	31 db                	xor    ebx,ebx
c000fd36:	83 ec 0c             	sub    esp,0xc
c000fd39:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fd3c:	84 c0                	test   al,al
c000fd3e:	74 47                	je     c000fd87 <KeDisplaySplashScreen()+0x66>
c000fd40:	80 bb f6 17 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde80a],0xdb
c000fd47:	75 13                	jne    c000fd5c <KeDisplaySplashScreen()+0x3b>
c000fd49:	0f b6 93 f5 17 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffde80b]
c000fd50:	83 e2 fe             	and    edx,0xfffffffe
c000fd53:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fd59:	75 01                	jne    c000fd5c <KeDisplaySplashScreen()+0x3b>
c000fd5b:	46                   	inc    esi
c000fd5c:	3c 0d                	cmp    al,0xd
c000fd5e:	74 24                	je     c000fd84 <KeDisplaySplashScreen()+0x63>
c000fd60:	3c 0a                	cmp    al,0xa
c000fd62:	75 0a                	jne    c000fd6e <KeDisplaySplashScreen()+0x4d>
c000fd64:	45                   	inc    ebp
c000fd65:	be 0a 00 00 00       	mov    esi,0xa
c000fd6a:	31 db                	xor    ebx,ebx
c000fd6c:	eb 16                	jmp    c000fd84 <KeDisplaySplashScreen()+0x63>
c000fd6e:	83 ec 0c             	sub    esp,0xc
c000fd71:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fd74:	43                   	inc    ebx
c000fd75:	55                   	push   ebp
c000fd76:	52                   	push   edx
c000fd77:	6a 00                	push   0x0
c000fd79:	6a 0e                	push   0xe
c000fd7b:	50                   	push   eax
c000fd7c:	e8 c3 79 00 00       	call   c0017744 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fd81:	83 c4 20             	add    esp,0x20
c000fd84:	47                   	inc    edi
c000fd85:	eb b2                	jmp    c000fd39 <KeDisplaySplashScreen()+0x18>
c000fd87:	83 c4 0c             	add    esp,0xc
c000fd8a:	5b                   	pop    ebx
c000fd8b:	5e                   	pop    esi
c000fd8c:	5f                   	pop    edi
c000fd8d:	5d                   	pop    ebp
c000fd8e:	c3                   	ret    

c000fd8f <KeSetBootMessage(char const*)>:
c000fd8f:	57                   	push   edi
c000fd90:	56                   	push   esi
c000fd91:	53                   	push   ebx
c000fd92:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fd98:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fd9f:	68 9e 00 00 00       	push   0x9e
c000fda4:	6a 00                	push   0x0
c000fda6:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fdaa:	56                   	push   esi
c000fdab:	e8 10 07 ff ff       	call   c00004c0 <memset>
c000fdb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdb3:	e8 78 07 ff ff       	call   c0000530 <strlen>
c000fdb8:	ba 50 00 00 00       	mov    edx,0x50
c000fdbd:	83 c4 10             	add    esp,0x10
c000fdc0:	29 c2                	sub    edx,eax
c000fdc2:	31 c9                	xor    ecx,ecx
c000fdc4:	83 e2 fe             	and    edx,0xfffffffe
c000fdc7:	01 f2                	add    edx,esi
c000fdc9:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fdce:	84 c0                	test   al,al
c000fdd0:	74 0a                	je     c000fddc <KeSetBootMessage(char const*)+0x4d>
c000fdd2:	80 cc 0f             	or     ah,0xf
c000fdd5:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fdd9:	41                   	inc    ecx
c000fdda:	eb ed                	jmp    c000fdc9 <KeSetBootMessage(char const*)+0x3a>
c000fddc:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fde1:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fde6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fde8:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fdee:	5b                   	pop    ebx
c000fdef:	5e                   	pop    esi
c000fdf0:	5f                   	pop    edi
c000fdf1:	c3                   	ret    

c000fdf2 <EnvVarContainer::getEnv(char const*)>:
c000fdf2:	57                   	push   edi
c000fdf3:	56                   	push   esi
c000fdf4:	53                   	push   ebx
c000fdf5:	31 db                	xor    ebx,ebx
c000fdf7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fdfb:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fdfd:	7e 2b                	jle    c000fe2a <EnvVarContainer::getEnv(char const*)+0x38>
c000fdff:	50                   	push   eax
c000fe00:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fe07:	50                   	push   eax
c000fe08:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fe0b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fe0e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fe12:	e8 c9 08 ff ff       	call   c00006e0 <strcmp>
c000fe17:	83 c4 10             	add    esp,0x10
c000fe1a:	85 c0                	test   eax,eax
c000fe1c:	75 09                	jne    c000fe27 <EnvVarContainer::getEnv(char const*)+0x35>
c000fe1e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fe21:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fe25:	eb 05                	jmp    c000fe2c <EnvVarContainer::getEnv(char const*)+0x3a>
c000fe27:	43                   	inc    ebx
c000fe28:	eb d1                	jmp    c000fdfb <EnvVarContainer::getEnv(char const*)+0x9>
c000fe2a:	31 c0                	xor    eax,eax
c000fe2c:	5b                   	pop    ebx
c000fe2d:	5e                   	pop    esi
c000fe2e:	5f                   	pop    edi
c000fe2f:	c3                   	ret    

c000fe30 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fe30:	55                   	push   ebp
c000fe31:	57                   	push   edi
c000fe32:	56                   	push   esi
c000fe33:	53                   	push   ebx
c000fe34:	83 ec 28             	sub    esp,0x28
c000fe37:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fe3b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fe3f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fe43:	56                   	push   esi
c000fe44:	e8 e7 06 ff ff       	call   c0000530 <strlen>
c000fe49:	40                   	inc    eax
c000fe4a:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe4d:	e8 11 7a ff ff       	call   c0007863 <malloc>
c000fe52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe59:	e8 d2 06 ff ff       	call   c0000530 <strlen>
c000fe5e:	40                   	inc    eax
c000fe5f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe62:	e8 fc 79 ff ff       	call   c0007863 <malloc>
c000fe67:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe6a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fe6e:	e8 bd 06 ff ff       	call   c0000530 <strlen>
c000fe73:	83 c4 0c             	add    esp,0xc
c000fe76:	40                   	inc    eax
c000fe77:	50                   	push   eax
c000fe78:	6a 00                	push   0x0
c000fe7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fe7e:	e8 3d 06 ff ff       	call   c00004c0 <memset>
c000fe83:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe86:	e8 a5 06 ff ff       	call   c0000530 <strlen>
c000fe8b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fe8f:	8d 48 01             	lea    ecx,[eax+0x1]
c000fe92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe97:	e8 94 06 ff ff       	call   c0000530 <strlen>
c000fe9c:	83 c4 0c             	add    esp,0xc
c000fe9f:	40                   	inc    eax
c000fea0:	89 de                	mov    esi,ebx
c000fea2:	50                   	push   eax
c000fea3:	6a 00                	push   0x0
c000fea5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fea9:	e8 12 06 ff ff       	call   c00004c0 <memset>
c000feae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000feb1:	e8 7a 06 ff ff       	call   c0000530 <strlen>
c000feb6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000feba:	8d 48 01             	lea    ecx,[eax+0x1]
c000febd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000febf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fec2:	40                   	inc    eax
c000fec3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fec6:	c1 e0 03             	shl    eax,0x3
c000fec9:	5a                   	pop    edx
c000feca:	59                   	pop    ecx
c000fecb:	50                   	push   eax
c000fecc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fecf:	e8 7b 79 ff ff       	call   c000784f <realloc>
c000fed4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fed7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000feda:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fede:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fee2:	b9 08 00 00 00       	mov    ecx,0x8
c000fee7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fee9:	83 c4 2c             	add    esp,0x2c
c000feec:	5b                   	pop    ebx
c000feed:	5e                   	pop    esi
c000feee:	5f                   	pop    edi
c000feef:	5d                   	pop    ebp
c000fef0:	c3                   	ret    
c000fef1:	90                   	nop

c000fef2 <EnvVarContainer::deleteEnv(char const*)>:
c000fef2:	c3                   	ret    
c000fef3:	90                   	nop

c000fef4 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fef4:	55                   	push   ebp
c000fef5:	57                   	push   edi
c000fef6:	56                   	push   esi
c000fef7:	53                   	push   ebx
c000fef8:	81 ec 38 01 00 00    	sub    esp,0x138
c000fefe:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000ff05:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000ff0c:	68 14 01 00 00       	push   0x114
c000ff11:	e8 4d 79 ff ff       	call   c0007863 <malloc>
c000ff16:	83 c4 0c             	add    esp,0xc
c000ff19:	89 c3                	mov    ebx,eax
c000ff1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ff1e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ff25:	50                   	push   eax
c000ff26:	e8 9d ac ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c000ff2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff2e:	e8 c3 af ff ff       	call   c000aef6 <File::exists()>
c000ff33:	83 c4 10             	add    esp,0x10
c000ff36:	84 c0                	test   al,al
c000ff38:	75 31                	jne    c000ff6b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000ff3a:	50                   	push   eax
c000ff3b:	50                   	push   eax
c000ff3c:	6a 12                	push   0x12
c000ff3e:	53                   	push   ebx
c000ff3f:	e8 44 ad ff ff       	call   c000ac88 <File::open(FileOpenMode)>
c000ff44:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ff46:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000ff49:	89 34 24             	mov    DWORD PTR [esp],esi
c000ff4c:	e8 df 05 ff ff       	call   c0000530 <strlen>
c000ff51:	5a                   	pop    edx
c000ff52:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ff56:	31 d2                	xor    edx,edx
c000ff58:	51                   	push   ecx
c000ff59:	56                   	push   esi
c000ff5a:	52                   	push   edx
c000ff5b:	50                   	push   eax
c000ff5c:	53                   	push   ebx
c000ff5d:	ff d7                	call   edi
c000ff5f:	83 c4 14             	add    esp,0x14
c000ff62:	53                   	push   ebx
c000ff63:	e8 7e ad ff ff       	call   c000ace6 <File::close()>
c000ff68:	83 c4 10             	add    esp,0x10
c000ff6b:	56                   	push   esi
c000ff6c:	31 f6                	xor    esi,esi
c000ff6e:	68 00 01 00 00       	push   0x100
c000ff73:	6a 00                	push   0x0
c000ff75:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ff79:	50                   	push   eax
c000ff7a:	e8 41 05 ff ff       	call   c00004c0 <memset>
c000ff7f:	5f                   	pop    edi
c000ff80:	58                   	pop    eax
c000ff81:	6a 01                	push   0x1
c000ff83:	53                   	push   ebx
c000ff84:	e8 ff ac ff ff       	call   c000ac88 <File::open(FileOpenMode)>
c000ff89:	83 c4 10             	add    esp,0x10
c000ff8c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ff94:	83 ec 0c             	sub    esp,0xc
c000ff97:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ff99:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ff9d:	51                   	push   ecx
c000ff9e:	8d 54 24 23          	lea    edx,[esp+0x23]
c000ffa2:	52                   	push   edx
c000ffa3:	6a 00                	push   0x0
c000ffa5:	6a 01                	push   0x1
c000ffa7:	53                   	push   ebx
c000ffa8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ffab:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000ffaf:	83 c4 20             	add    esp,0x20
c000ffb2:	3c 0d                	cmp    al,0xd
c000ffb4:	0f 84 09 01 00 00    	je     c00100c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ffba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ffbf:	0f 84 ef 00 00 00    	je     c00100b4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000ffc5:	3c 0a                	cmp    al,0xa
c000ffc7:	74 13                	je     c000ffdc <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000ffc9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ffce:	74 0c                	je     c000ffdc <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000ffd0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000ffd6:	0f 8e d8 00 00 00    	jle    c00100b4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000ffdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ffe0:	83 ec 0c             	sub    esp,0xc
c000ffe3:	8d 78 01             	lea    edi,[eax+0x1]
c000ffe6:	57                   	push   edi
c000ffe7:	e8 77 78 ff ff       	call   c0007863 <malloc>
c000ffec:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fff0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fff4:	8d 56 04             	lea    edx,[esi+0x4]
c000fff7:	89 14 24             	mov    DWORD PTR [esp],edx
c000fffa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fffe:	e8 60 78 ff ff       	call   c0007863 <malloc>
c0010003:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010007:	83 c4 0c             	add    esp,0xc
c001000a:	57                   	push   edi
c001000b:	6a 00                	push   0x0
c001000d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010011:	e8 aa 04 ff ff       	call   c00004c0 <memset>
c0010016:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001001a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001001e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010022:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010024:	83 c4 0c             	add    esp,0xc
c0010027:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001002b:	52                   	push   edx
c001002c:	6a 00                	push   0x0
c001002e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010032:	e8 89 04 ff ff       	call   c00004c0 <memset>
c0010037:	8d 74 24 30          	lea    esi,[esp+0x30]
c001003b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001003f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010042:	e8 e9 04 ff ff       	call   c0000530 <strlen>
c0010047:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001004b:	89 c1                	mov    ecx,eax
c001004d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001004f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010052:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010055:	40                   	inc    eax
c0010056:	83 c4 10             	add    esp,0x10
c0010059:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001005c:	85 d2                	test   edx,edx
c001005e:	75 0c                	jne    c001006c <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0010060:	83 ec 0c             	sub    esp,0xc
c0010063:	6a 08                	push   0x8
c0010065:	e8 f9 77 ff ff       	call   c0007863 <malloc>
c001006a:	eb 0c                	jmp    c0010078 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001006c:	c1 e0 03             	shl    eax,0x3
c001006f:	51                   	push   ecx
c0010070:	51                   	push   ecx
c0010071:	50                   	push   eax
c0010072:	52                   	push   edx
c0010073:	e8 d7 77 ff ff       	call   c000784f <realloc>
c0010078:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001007b:	83 c4 10             	add    esp,0x10
c001007e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010081:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010084:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010088:	b9 08 00 00 00       	mov    ecx,0x8
c001008d:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010091:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010093:	50                   	push   eax
c0010094:	31 f6                	xor    esi,esi
c0010096:	68 00 01 00 00       	push   0x100
c001009b:	6a 00                	push   0x0
c001009d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00100a1:	50                   	push   eax
c00100a2:	e8 19 04 ff ff       	call   c00004c0 <memset>
c00100a7:	83 c4 10             	add    esp,0x10
c00100aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00100b2:	eb 0f                	jmp    c00100c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00100b4:	3c 3d                	cmp    al,0x3d
c00100b6:	74 07                	je     c00100bf <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00100b8:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00100bc:	46                   	inc    esi
c00100bd:	eb 04                	jmp    c00100c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00100bf:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00100c3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00100c8:	0f 85 c6 fe ff ff    	jne    c000ff94 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00100ce:	81 c4 2c 01 00 00    	add    esp,0x12c
c00100d4:	5b                   	pop    ebx
c00100d5:	5e                   	pop    esi
c00100d6:	5f                   	pop    edi
c00100d7:	5d                   	pop    ebp
c00100d8:	c3                   	ret    
c00100d9:	90                   	nop

c00100da <EnvVarContainer::__loadSystem()>:
c00100da:	83 ec 10             	sub    esp,0x10
c00100dd:	68 20 19 02 c0       	push   0xc0021920
c00100e2:	68 68 04 02 c0       	push   0xc0020468
c00100e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100eb:	e8 04 fe ff ff       	call   c000fef4 <EnvVarContainer::loadFrom(char const*, char const*)>
c00100f0:	83 c4 1c             	add    esp,0x1c
c00100f3:	c3                   	ret    

c00100f4 <EnvVarContainer::__loadUser()>:
c00100f4:	c3                   	ret    
c00100f5:	90                   	nop

c00100f6 <EnvVarContainer::EnvVarContainer(Process*)>:
c00100f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010100:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010104:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010108:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001010b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001010f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010116:	90                   	nop
c0010117:	c3                   	ret    

c0010118 <EnvVarContainer::~EnvVarContainer()>:
c0010118:	83 ec 0c             	sub    esp,0xc
c001011b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001011f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010122:	85 c0                	test   eax,eax
c0010124:	74 1d                	je     c0010143 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001012a:	8b 00                	mov    eax,DWORD PTR [eax]
c001012c:	85 c0                	test   eax,eax
c001012e:	74 13                	je     c0010143 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010134:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010137:	83 ec 0c             	sub    esp,0xc
c001013a:	50                   	push   eax
c001013b:	e8 33 77 ff ff       	call   c0007873 <free>
c0010140:	83 c4 10             	add    esp,0x10
c0010143:	90                   	nop
c0010144:	83 c4 0c             	add    esp,0xc
c0010147:	c3                   	ret    

c0010148 <Krnl::getEnv(Process*, char const*)>:
c0010148:	53                   	push   ebx
c0010149:	83 ec 08             	sub    esp,0x8
c001014c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010150:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010154:	39 05 90 71 02 c0    	cmp    DWORD PTR ds:0xc0027190,eax
c001015a:	74 04                	je     c0010160 <Krnl::getEnv(Process*, char const*)+0x18>
c001015c:	85 c0                	test   eax,eax
c001015e:	75 0b                	jne    c001016b <Krnl::getEnv(Process*, char const*)+0x23>
c0010160:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c0010165:	85 c0                	test   eax,eax
c0010167:	75 19                	jne    c0010182 <Krnl::getEnv(Process*, char const*)+0x3a>
c0010169:	eb 27                	jmp    c0010192 <Krnl::getEnv(Process*, char const*)+0x4a>
c001016b:	52                   	push   edx
c001016c:	52                   	push   edx
c001016d:	53                   	push   ebx
c001016e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010174:	e8 79 fc ff ff       	call   c000fdf2 <EnvVarContainer::getEnv(char const*)>
c0010179:	83 c4 10             	add    esp,0x10
c001017c:	85 c0                	test   eax,eax
c001017e:	75 28                	jne    c00101a8 <Krnl::getEnv(Process*, char const*)+0x60>
c0010180:	eb de                	jmp    c0010160 <Krnl::getEnv(Process*, char const*)+0x18>
c0010182:	52                   	push   edx
c0010183:	52                   	push   edx
c0010184:	53                   	push   ebx
c0010185:	50                   	push   eax
c0010186:	e8 67 fc ff ff       	call   c000fdf2 <EnvVarContainer::getEnv(char const*)>
c001018b:	83 c4 10             	add    esp,0x10
c001018e:	85 c0                	test   eax,eax
c0010190:	75 16                	jne    c00101a8 <Krnl::getEnv(Process*, char const*)+0x60>
c0010192:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c0010197:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001019b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001019f:	83 c4 08             	add    esp,0x8
c00101a2:	5b                   	pop    ebx
c00101a3:	e9 4a fc ff ff       	jmp    c000fdf2 <EnvVarContainer::getEnv(char const*)>
c00101a8:	83 c4 08             	add    esp,0x8
c00101ab:	5b                   	pop    ebx
c00101ac:	c3                   	ret    

c00101ad <Krnl::setEnvSystem(char const*, char const*)>:
c00101ad:	83 ec 10             	sub    esp,0x10
c00101b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101b8:	ff 35 34 69 02 c0    	push   DWORD PTR ds:0xc0026934
c00101be:	e8 6d fc ff ff       	call   c000fe30 <EnvVarContainer::setEnv(char const*, char const*)>
c00101c3:	83 c4 1c             	add    esp,0x1c
c00101c6:	c3                   	ret    

c00101c7 <Krnl::setEnvUser(char const*, char const*)>:
c00101c7:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c00101cc:	85 c0                	test   eax,eax
c00101ce:	74 15                	je     c00101e5 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00101d0:	83 ec 10             	sub    esp,0x10
c00101d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101db:	50                   	push   eax
c00101dc:	e8 4f fc ff ff       	call   c000fe30 <EnvVarContainer::setEnv(char const*, char const*)>
c00101e1:	83 c4 1c             	add    esp,0x1c
c00101e4:	c3                   	ret    
c00101e5:	c3                   	ret    

c00101e6 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00101e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101ea:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00101f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00101f4:	e9 37 fc ff ff       	jmp    c000fe30 <EnvVarContainer::setEnv(char const*, char const*)>

c00101f9 <Krnl::deleteEnvSystem(char const*)>:
c00101f9:	c3                   	ret    

c00101fa <Krnl::deleteEnvUser(char const*)>:
c00101fa:	c3                   	ret    

c00101fb <Krnl::deleteEnvProcess(Process*, char const*)>:
c00101fb:	c3                   	ret    

c00101fc <Krnl::newProcessEnv(Process*)>:
c00101fc:	83 ec 28             	sub    esp,0x28
c00101ff:	6a 0c                	push   0xc
c0010201:	e8 5d 76 ff ff       	call   c0007863 <malloc>
c0010206:	5a                   	pop    edx
c0010207:	59                   	pop    ecx
c0010208:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001020c:	50                   	push   eax
c001020d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010211:	e8 e0 fe ff ff       	call   c00100f6 <EnvVarContainer::EnvVarContainer(Process*)>
c0010216:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001021a:	83 c4 2c             	add    esp,0x2c
c001021d:	c3                   	ret    

c001021e <Krnl::copyProcessEnv(Process*, Process*)>:
c001021e:	57                   	push   edi
c001021f:	56                   	push   esi
c0010220:	53                   	push   ebx
c0010221:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010225:	83 ec 0c             	sub    esp,0xc
c0010228:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001022e:	6a 0c                	push   0xc
c0010230:	e8 2e 76 ff ff       	call   c0007863 <malloc>
c0010235:	89 c3                	mov    ebx,eax
c0010237:	58                   	pop    eax
c0010238:	5a                   	pop    edx
c0010239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001023d:	53                   	push   ebx
c001023e:	e8 b3 fe ff ff       	call   c00100f6 <EnvVarContainer::EnvVarContainer(Process*)>
c0010243:	8b 07                	mov    eax,DWORD PTR [edi]
c0010245:	89 03                	mov    DWORD PTR [ebx],eax
c0010247:	c1 e0 03             	shl    eax,0x3
c001024a:	89 04 24             	mov    DWORD PTR [esp],eax
c001024d:	e8 11 76 ff ff       	call   c0007863 <malloc>
c0010252:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010255:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0010257:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001025a:	c1 e1 03             	shl    ecx,0x3
c001025d:	89 c7                	mov    edi,eax
c001025f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010261:	83 c4 10             	add    esp,0x10
c0010264:	89 d8                	mov    eax,ebx
c0010266:	5b                   	pop    ebx
c0010267:	5e                   	pop    esi
c0010268:	5f                   	pop    edi
c0010269:	c3                   	ret    

c001026a <Krnl::loadSystemEnv()>:
c001026a:	53                   	push   ebx
c001026b:	83 ec 14             	sub    esp,0x14
c001026e:	6a 0c                	push   0xc
c0010270:	e8 ee 75 ff ff       	call   c0007863 <malloc>
c0010275:	89 c3                	mov    ebx,eax
c0010277:	58                   	pop    eax
c0010278:	5a                   	pop    edx
c0010279:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001027f:	53                   	push   ebx
c0010280:	e8 71 fe ff ff       	call   c00100f6 <EnvVarContainer::EnvVarContainer(Process*)>
c0010285:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010288:	89 1d 34 69 02 c0    	mov    DWORD PTR ds:0xc0026934,ebx
c001028e:	e8 47 fe ff ff       	call   c00100da <EnvVarContainer::__loadSystem()>
c0010293:	83 c4 18             	add    esp,0x18
c0010296:	5b                   	pop    ebx
c0010297:	c3                   	ret    

c0010298 <Krnl::loadUserEnv()>:
c0010298:	53                   	push   ebx
c0010299:	83 ec 14             	sub    esp,0x14
c001029c:	6a 0c                	push   0xc
c001029e:	e8 c0 75 ff ff       	call   c0007863 <malloc>
c00102a3:	89 c3                	mov    ebx,eax
c00102a5:	58                   	pop    eax
c00102a6:	5a                   	pop    edx
c00102a7:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00102ad:	53                   	push   ebx
c00102ae:	e8 43 fe ff ff       	call   c00100f6 <EnvVarContainer::EnvVarContainer(Process*)>
c00102b3:	89 1d 30 69 02 c0    	mov    DWORD PTR ds:0xc0026930,ebx
c00102b9:	83 c4 18             	add    esp,0x18
c00102bc:	5b                   	pop    ebx
c00102bd:	c3                   	ret    

c00102be <Krnl::flushEnv()>:
c00102be:	c3                   	ret    

c00102bf <Krnl::getProcessTotalEnvCount(Process*)>:
c00102bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102c3:	8b 15 30 69 02 c0    	mov    edx,DWORD PTR ds:0xc0026930
c00102c9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00102cf:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c00102d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00102d6:	03 01                	add    eax,DWORD PTR [ecx]
c00102d8:	85 d2                	test   edx,edx
c00102da:	74 02                	je     c00102de <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00102dc:	03 02                	add    eax,DWORD PTR [edx]
c00102de:	c3                   	ret    

c00102df <Krnl::getProcessEnvPair(Process*, int)>:
c00102df:	57                   	push   edi
c00102e0:	56                   	push   esi
c00102e1:	8b 35 30 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026930
c00102e7:	53                   	push   ebx
c00102e8:	85 f6                	test   esi,esi
c00102ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00102f6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00102fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00102fe:	75 16                	jne    c0010316 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010300:	39 c2                	cmp    edx,eax
c0010302:	7c 16                	jl     c001031a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010304:	8b 0d 34 69 02 c0    	mov    ecx,DWORD PTR ds:0xc0026934
c001030a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001030c:	01 c6                	add    esi,eax
c001030e:	39 d6                	cmp    esi,edx
c0010310:	7e 3c                	jle    c001034e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010312:	29 c2                	sub    edx,eax
c0010314:	eb 04                	jmp    c001031a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010316:	39 c2                	cmp    edx,eax
c0010318:	7d 05                	jge    c001031f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001031a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001031d:	eb 20                	jmp    c001033f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001031f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010321:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010324:	39 d1                	cmp    ecx,edx
c0010326:	7e 04                	jle    c001032c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010328:	29 c2                	sub    edx,eax
c001032a:	eb 10                	jmp    c001033c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001032c:	8b 35 34 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026934
c0010332:	03 0e                	add    ecx,DWORD PTR [esi]
c0010334:	39 d1                	cmp    ecx,edx
c0010336:	7e 16                	jle    c001034e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010338:	29 c2                	sub    edx,eax
c001033a:	29 fa                	sub    edx,edi
c001033c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001033f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010342:	8b 02                	mov    eax,DWORD PTR [edx]
c0010344:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0010347:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001034a:	89 03                	mov    DWORD PTR [ebx],eax
c001034c:	eb 1d                	jmp    c001036b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001034e:	83 ec 0c             	sub    esp,0xc
c0010351:	68 8a 04 02 c0       	push   0xc002048a
c0010356:	e8 ac 00 00 00       	call   c0010407 <KePanic(char const*)>
c001035b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010361:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010368:	83 c4 10             	add    esp,0x10
c001036b:	89 d8                	mov    eax,ebx
c001036d:	5b                   	pop    ebx
c001036e:	5e                   	pop    esi
c001036f:	5f                   	pop    edi
c0010370:	c2 04 00             	ret    0x4

c0010373 <CPU::current()>:
c0010373:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010378:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001037e:	c3                   	ret    

c001037f <operator new(unsigned long)>:
c001037f:	e9 df 74 ff ff       	jmp    c0007863 <malloc>

c0010384 <operator delete(void*)>:
c0010384:	e9 fa 74 ff ff       	jmp    c0007883 <rfree>

c0010389 <disableIRQs()>:
c0010389:	fa                   	cli    
c001038a:	c3                   	ret    

c001038b <enableIRQs()>:
c001038b:	fb                   	sti    
c001038c:	c3                   	ret    

c001038d <lockScheduler()>:
c001038d:	fa                   	cli    
c001038e:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0010394:	c3                   	ret    

c0010395 <unlockScheduler()>:
c0010395:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001039a:	48                   	dec    eax
c001039b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00103a0:	75 01                	jne    c00103a3 <unlockScheduler()+0xe>
c00103a2:	fb                   	sti    
c00103a3:	c3                   	ret    

c00103a4 <lockStuff()>:
c00103a4:	fa                   	cli    
c00103a5:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00103ab:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c00103b1:	c3                   	ret    

c00103b2 <unlockStuff()>:
c00103b2:	83 ec 0c             	sub    esp,0xc
c00103b5:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00103ba:	48                   	dec    eax
c00103bb:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c00103c0:	75 18                	jne    c00103da <unlockStuff()+0x28>
c00103c2:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c00103c9:	74 0f                	je     c00103da <unlockStuff()+0x28>
c00103cb:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00103d5:	e8 76 47 00 00       	call   c0014b50 <schedule()>
c00103da:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00103df:	48                   	dec    eax
c00103e0:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00103e5:	75 01                	jne    c00103e8 <unlockStuff()+0x36>
c00103e7:	fb                   	sti    
c00103e8:	83 c4 0c             	add    esp,0xc
c00103eb:	c3                   	ret    

c00103ec <Virt::getAKernelVAS()>:
c00103ec:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c00103f1:	c3                   	ret    

c00103f2 <__not_memcpy>:
c00103f2:	57                   	push   edi
c00103f3:	56                   	push   esi
c00103f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00103fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010400:	89 c7                	mov    edi,eax
c0010402:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010404:	5e                   	pop    esi
c0010405:	5f                   	pop    edi
c0010406:	c3                   	ret    

c0010407 <KePanic(char const*)>:
c0010407:	c6 05 38 69 02 c0 01 	mov    BYTE PTR ds:0xc0026938,0x1
c001040e:	e9 bc 65 00 00       	jmp    c00169cf <HalPanic(char const*)>

c0010413 <Krnl::powerThread(void*)>:
c0010413:	83 ec 0c             	sub    esp,0xc
c0010416:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001041b:	48                   	dec    eax
c001041c:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0010421:	75 01                	jne    c0010424 <Krnl::powerThread(void*)+0x11>
c0010423:	fb                   	sti    
c0010424:	83 ec 0c             	sub    esp,0xc
c0010427:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c001042e:	6a 0a                	push   0xa
c0010430:	e8 37 4a 00 00       	call   c0014e6c <sleep(unsigned int)>
c0010435:	83 05 84 69 02 c0 0a 	add    DWORD PTR ds:0xc0026984,0xa
c001043c:	83 c4 10             	add    esp,0x10
c001043f:	eb e3                	jmp    c0010424 <Krnl::powerThread(void*)+0x11>

c0010441 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010441:	57                   	push   edi
c0010442:	b9 09 00 00 00       	mov    ecx,0x9
c0010447:	bf 60 69 02 c0       	mov    edi,0xc0026960
c001044c:	56                   	push   esi
c001044d:	fc                   	cld    
c001044e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010452:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010454:	5e                   	pop    esi
c0010455:	5f                   	pop    edi
c0010456:	c3                   	ret    

c0010457 <Krnl::userIOReceived()>:
c0010457:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c0010461:	c3                   	ret    

c0010462 <Krnl::handlePowerButton()>:
c0010462:	83 ec 0c             	sub    esp,0xc
c0010465:	a1 60 69 02 c0       	mov    eax,ds:0xc0026960
c001046a:	83 f8 02             	cmp    eax,0x2
c001046d:	75 10                	jne    c001047f <Krnl::handlePowerButton()+0x1d>
c001046f:	83 ec 0c             	sub    esp,0xc
c0010472:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010478:	e8 93 6a ff ff       	call   c0006f10 <Computer::shutdown()>
c001047d:	eb 11                	jmp    c0010490 <Krnl::handlePowerButton()+0x2e>
c001047f:	48                   	dec    eax
c0010480:	75 11                	jne    c0010493 <Krnl::handlePowerButton()+0x31>
c0010482:	83 ec 0c             	sub    esp,0xc
c0010485:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001048b:	e8 b0 6a ff ff       	call   c0006f40 <Computer::sleep()>
c0010490:	83 c4 10             	add    esp,0x10
c0010493:	83 c4 0c             	add    esp,0xc
c0010496:	c3                   	ret    

c0010497 <Krnl::handleSleepButton()>:
c0010497:	83 ec 0c             	sub    esp,0xc
c001049a:	a1 64 69 02 c0       	mov    eax,ds:0xc0026964
c001049f:	83 f8 02             	cmp    eax,0x2
c00104a2:	75 10                	jne    c00104b4 <Krnl::handleSleepButton()+0x1d>
c00104a4:	83 ec 0c             	sub    esp,0xc
c00104a7:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00104ad:	e8 5e 6a ff ff       	call   c0006f10 <Computer::shutdown()>
c00104b2:	eb 11                	jmp    c00104c5 <Krnl::handleSleepButton()+0x2e>
c00104b4:	48                   	dec    eax
c00104b5:	75 11                	jne    c00104c8 <Krnl::handleSleepButton()+0x31>
c00104b7:	83 ec 0c             	sub    esp,0xc
c00104ba:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00104c0:	e8 7b 6a ff ff       	call   c0006f40 <Computer::sleep()>
c00104c5:	83 c4 10             	add    esp,0x10
c00104c8:	83 c4 0c             	add    esp,0xc
c00104cb:	c3                   	ret    

c00104cc <Krnl::setupPowerManager()>:
c00104cc:	83 ec 0c             	sub    esp,0xc
c00104cf:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c00104d9:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c00104e0:	68 f0 00 00 00       	push   0xf0
c00104e5:	6a 00                	push   0x0
c00104e7:	68 13 04 01 c0       	push   0xc0010413
c00104ec:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00104f2:	e8 0d 44 00 00       	call   c0014904 <Process::createThread(void (*)(void*), void*, int)>
c00104f7:	c7 05 60 69 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0026960,0x2
c0010501:	c7 05 64 69 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026964,0x1
c001050b:	c7 05 68 69 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0026968,0x3
c0010515:	c7 05 6c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002696c,0x0
c001051f:	c7 05 78 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026978,0x0
c0010529:	c7 05 70 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026970,0x0
c0010533:	c7 05 7c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002697c,0x0
c001053d:	c7 05 74 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026974,0x3c
c0010547:	c7 05 80 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026980,0x3c
c0010551:	83 c4 1c             	add    esp,0x1c
c0010554:	c3                   	ret    

c0010555 <KeRand()>:
c0010555:	69 05 88 69 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0026988,0x2875
c001055f:	69 0d 8c 69 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002698c,0xa2e7b175
c0010569:	01 c1                	add    ecx,eax
c001056b:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0010570:	f7 25 88 69 02 c0    	mul    DWORD PTR ds:0xc0026988
c0010576:	01 ca                	add    edx,ecx
c0010578:	05 ef 04 b5 00       	add    eax,0xb504ef
c001057d:	83 d2 00             	adc    edx,0x0
c0010580:	53                   	push   ebx
c0010581:	0f b7 da             	movzx  ebx,dx
c0010584:	89 da                	mov    edx,ebx
c0010586:	a3 88 69 02 c0       	mov    ds:0xc0026988,eax
c001058b:	89 1d 8c 69 02 c0    	mov    DWORD PTR ds:0xc002698c,ebx
c0010591:	5b                   	pop    ebx
c0010592:	0f ac d0 0e          	shrd   eax,edx,0xe
c0010596:	c3                   	ret    

c0010597 <KeSeedRand(unsigned int)>:
c0010597:	53                   	push   ebx
c0010598:	83 ec 08             	sub    esp,0x8
c001059b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001059f:	e8 1f 67 00 00       	call   c0016cc3 <HalGetRand()>
c00105a4:	31 d8                	xor    eax,ebx
c00105a6:	c7 05 8c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002698c,0x0
c00105b0:	a3 88 69 02 c0       	mov    ds:0xc0026988,eax
c00105b5:	e8 9b ff ff ff       	call   c0010555 <KeRand()>
c00105ba:	83 c4 08             	add    esp,0x8
c00105bd:	5b                   	pop    ebx
c00105be:	eb 95                	jmp    c0010555 <KeRand()>

c00105c0 <KeInitRand()>:
c00105c0:	83 ec 0c             	sub    esp,0xc
c00105c3:	e8 00 65 00 00       	call   c0016ac8 <HalQueryPerformanceCounter()>
c00105c8:	0f 20 da             	mov    edx,cr3
c00105cb:	0f 22 da             	mov    cr3,edx
c00105ce:	0f 20 da             	mov    edx,cr3
c00105d1:	0f 22 da             	mov    cr3,edx
c00105d4:	0f 20 da             	mov    edx,cr3
c00105d7:	0f 22 da             	mov    cr3,edx
c00105da:	0f 20 da             	mov    edx,cr3
c00105dd:	0f 22 da             	mov    cr3,edx
c00105e0:	83 ec 0c             	sub    esp,0xc
c00105e3:	35 03 8a 95 38       	xor    eax,0x38958a03
c00105e8:	50                   	push   eax
c00105e9:	e8 a9 ff ff ff       	call   c0010597 <KeSeedRand(unsigned int)>
c00105ee:	83 c4 1c             	add    esp,0x1c
c00105f1:	c3                   	ret    
c00105f2:	66 90                	xchg   ax,ax

c00105f4 <KeResolveCompatibilitySymbol(char*)>:
c00105f4:	83 ec 0c             	sub    esp,0xc
c00105f7:	83 ec 08             	sub    esp,0x8
c00105fa:	68 a4 04 02 c0       	push   0xc00204a4
c00105ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010603:	e8 d8 00 ff ff       	call   c00006e0 <strcmp>
c0010608:	83 c4 10             	add    esp,0x10
c001060b:	85 c0                	test   eax,eax
c001060d:	0f 94 c0             	sete   al
c0010610:	84 c0                	test   al,al
c0010612:	74 0c                	je     c0010620 <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010614:	b8 b8 3e 02 c0       	mov    eax,0xc0023eb8
c0010619:	e9 62 01 00 00       	jmp    c0010780 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001061e:	66 90                	xchg   ax,ax
c0010620:	83 ec 08             	sub    esp,0x8
c0010623:	68 ad 04 02 c0       	push   0xc00204ad
c0010628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001062c:	e8 af 00 ff ff       	call   c00006e0 <strcmp>
c0010631:	83 c4 10             	add    esp,0x10
c0010634:	85 c0                	test   eax,eax
c0010636:	0f 94 c0             	sete   al
c0010639:	84 c0                	test   al,al
c001063b:	74 0b                	je     c0010648 <KeResolveCompatibilitySymbol(char*)+0x54>
c001063d:	b8 d0 de 01 c0       	mov    eax,0xc001ded0
c0010642:	e9 39 01 00 00       	jmp    c0010780 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010647:	90                   	nop
c0010648:	83 ec 08             	sub    esp,0x8
c001064b:	68 b7 04 02 c0       	push   0xc00204b7
c0010650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010654:	e8 87 00 ff ff       	call   c00006e0 <strcmp>
c0010659:	83 c4 10             	add    esp,0x10
c001065c:	85 c0                	test   eax,eax
c001065e:	0f 94 c0             	sete   al
c0010661:	84 c0                	test   al,al
c0010663:	74 0b                	je     c0010670 <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010665:	b8 04 dc 01 c0       	mov    eax,0xc001dc04
c001066a:	e9 11 01 00 00       	jmp    c0010780 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001066f:	90                   	nop
c0010670:	83 ec 08             	sub    esp,0x8
c0010673:	68 c0 04 02 c0       	push   0xc00204c0
c0010678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001067c:	e8 5f 00 ff ff       	call   c00006e0 <strcmp>
c0010681:	83 c4 10             	add    esp,0x10
c0010684:	85 c0                	test   eax,eax
c0010686:	0f 94 c0             	sete   al
c0010689:	84 c0                	test   al,al
c001068b:	74 0b                	je     c0010698 <KeResolveCompatibilitySymbol(char*)+0xa4>
c001068d:	b8 07 04 01 c0       	mov    eax,0xc0010407
c0010692:	e9 e9 00 00 00       	jmp    c0010780 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010697:	90                   	nop
c0010698:	83 ec 08             	sub    esp,0x8
c001069b:	68 d3 04 02 c0       	push   0xc00204d3
c00106a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106a4:	e8 37 00 ff ff       	call   c00006e0 <strcmp>
c00106a9:	83 c4 10             	add    esp,0x10
c00106ac:	85 c0                	test   eax,eax
c00106ae:	0f 94 c0             	sete   al
c00106b1:	84 c0                	test   al,al
c00106b3:	74 0b                	je     c00106c0 <KeResolveCompatibilitySymbol(char*)+0xcc>
c00106b5:	b8 8f fd 00 c0       	mov    eax,0xc000fd8f
c00106ba:	e9 c1 00 00 00       	jmp    c0010780 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00106bf:	90                   	nop
c00106c0:	83 ec 08             	sub    esp,0x8
c00106c3:	68 f0 04 02 c0       	push   0xc00204f0
c00106c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106cc:	e8 0f 00 ff ff       	call   c00006e0 <strcmp>
c00106d1:	83 c4 10             	add    esp,0x10
c00106d4:	85 c0                	test   eax,eax
c00106d6:	0f 94 c0             	sete   al
c00106d9:	84 c0                	test   al,al
c00106db:	74 0b                	je     c00106e8 <KeResolveCompatibilitySymbol(char*)+0xf4>
c00106dd:	b8 d0 df 01 c0       	mov    eax,0xc001dfd0
c00106e2:	e9 99 00 00 00       	jmp    c0010780 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00106e7:	90                   	nop
c00106e8:	83 ec 08             	sub    esp,0x8
c00106eb:	68 fa 04 02 c0       	push   0xc00204fa
c00106f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106f4:	e8 e7 ff fe ff       	call   c00006e0 <strcmp>
c00106f9:	83 c4 10             	add    esp,0x10
c00106fc:	85 c0                	test   eax,eax
c00106fe:	0f 94 c0             	sete   al
c0010701:	84 c0                	test   al,al
c0010703:	74 07                	je     c001070c <KeResolveCompatibilitySymbol(char*)+0x118>
c0010705:	b8 50 dd 01 c0       	mov    eax,0xc001dd50
c001070a:	eb 74                	jmp    c0010780 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001070c:	83 ec 08             	sub    esp,0x8
c001070f:	68 03 05 02 c0       	push   0xc0020503
c0010714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010718:	e8 c3 ff fe ff       	call   c00006e0 <strcmp>
c001071d:	83 c4 10             	add    esp,0x10
c0010720:	85 c0                	test   eax,eax
c0010722:	0f 94 c0             	sete   al
c0010725:	84 c0                	test   al,al
c0010727:	74 07                	je     c0010730 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010729:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c001072e:	eb 50                	jmp    c0010780 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010730:	83 ec 08             	sub    esp,0x8
c0010733:	68 1b 05 02 c0       	push   0xc002051b
c0010738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001073c:	e8 9f ff fe ff       	call   c00006e0 <strcmp>
c0010741:	83 c4 10             	add    esp,0x10
c0010744:	85 c0                	test   eax,eax
c0010746:	0f 94 c0             	sete   al
c0010749:	84 c0                	test   al,al
c001074b:	74 07                	je     c0010754 <KeResolveCompatibilitySymbol(char*)+0x160>
c001074d:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c0010752:	eb 2c                	jmp    c0010780 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010754:	83 ec 08             	sub    esp,0x8
c0010757:	68 28 05 02 c0       	push   0xc0020528
c001075c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010760:	e8 7b ff fe ff       	call   c00006e0 <strcmp>
c0010765:	83 c4 10             	add    esp,0x10
c0010768:	85 c0                	test   eax,eax
c001076a:	0f 94 c0             	sete   al
c001076d:	84 c0                	test   al,al
c001076f:	74 07                	je     c0010778 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010771:	b8 bd 3e 02 c0       	mov    eax,0xc0023ebd
c0010776:	eb 08                	jmp    c0010780 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010778:	b8 00 00 00 00       	mov    eax,0x0
c001077d:	8d 76 00             	lea    esi,[esi+0x0]
c0010780:	83 c4 0c             	add    esp,0xc
c0010783:	c3                   	ret    

c0010784 <KiSigKill(int)>:
c0010784:	83 ec 0c             	sub    esp,0xc
c0010787:	6a 00                	push   0x0
c0010789:	6a 00                	push   0x0
c001078b:	6a ff                	push   0xffffffff
c001078d:	6a 01                	push   0x1
c001078f:	e8 be 18 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010794:	83 c4 1c             	add    esp,0x1c
c0010797:	c3                   	ret    

c0010798 <KiDefaultSignalHandlerIgnore(int)>:
c0010798:	c3                   	ret    

c0010799 <KiDefaultSignalHandlerPause(int)>:
c0010799:	57                   	push   edi
c001079a:	b9 07 00 00 00       	mov    ecx,0x7
c001079f:	56                   	push   esi
c00107a0:	be 71 05 02 c0       	mov    esi,0xc0020571
c00107a5:	83 ec 24             	sub    esp,0x24
c00107a8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00107ac:	fc                   	cld    
c00107ad:	8d 44 24 04          	lea    eax,[esp+0x4]
c00107b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00107b3:	50                   	push   eax
c00107b4:	6a 00                	push   0x0
c00107b6:	6a 00                	push   0x0
c00107b8:	6a 27                	push   0x27
c00107ba:	e8 93 18 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00107bf:	83 c4 34             	add    esp,0x34
c00107c2:	5e                   	pop    esi
c00107c3:	5f                   	pop    edi
c00107c4:	c3                   	ret    

c00107c5 <KiDefaultSignalHandlerResume(int)>:
c00107c5:	57                   	push   edi
c00107c6:	b9 1d 00 00 00       	mov    ecx,0x1d
c00107cb:	56                   	push   esi
c00107cc:	be 8d 05 02 c0       	mov    esi,0xc002058d
c00107d1:	83 ec 24             	sub    esp,0x24
c00107d4:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00107d8:	fc                   	cld    
c00107d9:	8d 44 24 03          	lea    eax,[esp+0x3]
c00107dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107df:	50                   	push   eax
c00107e0:	6a 00                	push   0x0
c00107e2:	6a 00                	push   0x0
c00107e4:	6a 27                	push   0x27
c00107e6:	e8 67 18 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00107eb:	83 c4 34             	add    esp,0x34
c00107ee:	5e                   	pop    esi
c00107ef:	5f                   	pop    edi
c00107f0:	c3                   	ret    

c00107f1 <KeDeinitSignals(SigHandlerBlock*)>:
c00107f1:	e9 7d 70 ff ff       	jmp    c0007873 <free>

c00107f6 <KeInitSignals()>:
c00107f6:	53                   	push   ebx
c00107f7:	83 ec 14             	sub    esp,0x14
c00107fa:	68 c8 00 00 00       	push   0xc8
c00107ff:	e8 5f 70 ff ff       	call   c0007863 <malloc>
c0010804:	83 c4 0c             	add    esp,0xc
c0010807:	89 c3                	mov    ebx,eax
c0010809:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010813:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001081d:	6a 20                	push   0x20
c001081f:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010825:	6a 00                	push   0x0
c0010827:	50                   	push   eax
c0010828:	e8 93 fc fe ff       	call   c00004c0 <memset>
c001082d:	83 c4 0c             	add    esp,0xc
c0010830:	6a 44                	push   0x44
c0010832:	6a 00                	push   0x0
c0010834:	53                   	push   ebx
c0010835:	e8 86 fc fe ff       	call   c00004c0 <memset>
c001083a:	83 c4 18             	add    esp,0x18
c001083d:	89 d8                	mov    eax,ebx
c001083f:	5b                   	pop    ebx
c0010840:	c3                   	ret    

c0010841 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010841:	53                   	push   ebx
c0010842:	b8 01 00 00 00       	mov    eax,0x1
c0010847:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001084b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001084f:	83 f9 10             	cmp    ecx,0x10
c0010852:	7f 21                	jg     c0010875 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010854:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085b:	89 03                	mov    DWORD PTR [ebx],eax
c001085d:	b8 01 00 00 00       	mov    eax,0x1
c0010862:	d3 e0                	shl    eax,cl
c0010864:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010868:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001086b:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010873:	31 c0                	xor    eax,eax
c0010875:	5b                   	pop    ebx
c0010876:	c3                   	ret    

c0010877 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010877:	55                   	push   ebp
c0010878:	57                   	push   edi
c0010879:	bf 08 00 00 00       	mov    edi,0x8
c001087e:	56                   	push   esi
c001087f:	53                   	push   ebx
c0010880:	83 ec 18             	sub    esp,0x18
c0010883:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010887:	68 aa 05 02 c0       	push   0xc00205aa
c001088c:	e8 c2 9d ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0010891:	83 c4 10             	add    esp,0x10
c0010894:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001089b:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00108a1:	31 c9                	xor    ecx,ecx
c00108a3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00108a7:	99                   	cdq    
c00108a8:	f7 ff                	idiv   edi
c00108aa:	8d 42 24             	lea    eax,[edx+0x24]
c00108ad:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00108b1:	85 f6                	test   esi,esi
c00108b3:	75 1a                	jne    c00108cf <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00108b5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00108b9:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00108bd:	50                   	push   eax
c00108be:	50                   	push   eax
c00108bf:	52                   	push   edx
c00108c0:	68 bb 05 02 c0       	push   0xc00205bb
c00108c5:	e8 89 9d ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c00108ca:	83 c4 10             	add    esp,0x10
c00108cd:	eb 1b                	jmp    c00108ea <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00108cf:	41                   	inc    ecx
c00108d0:	83 f9 08             	cmp    ecx,0x8
c00108d3:	75 ce                	jne    c00108a3 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00108d5:	83 ec 0c             	sub    esp,0xc
c00108d8:	be 01 00 00 00       	mov    esi,0x1
c00108dd:	68 dc 05 02 c0       	push   0xc00205dc
c00108e2:	e8 6c 9d ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c00108e7:	83 c4 10             	add    esp,0x10
c00108ea:	83 c4 0c             	add    esp,0xc
c00108ed:	89 f0                	mov    eax,esi
c00108ef:	5b                   	pop    ebx
c00108f0:	5e                   	pop    esi
c00108f1:	5f                   	pop    edi
c00108f2:	5d                   	pop    ebp
c00108f3:	c3                   	ret    

c00108f4 <KeCheckSignal(SigHandlerBlock*, int*)>:
c00108f4:	55                   	push   ebp
c00108f5:	57                   	push   edi
c00108f6:	56                   	push   esi
c00108f7:	53                   	push   ebx
c00108f8:	51                   	push   ecx
c00108f9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00108fd:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010904:	0f 84 af 00 00 00    	je     c00109b9 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c001090a:	31 c9                	xor    ecx,ecx
c001090c:	bf 08 00 00 00       	mov    edi,0x8
c0010911:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010917:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001091a:	99                   	cdq    
c001091b:	f7 ff                	idiv   edi
c001091d:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010924:	85 ed                	test   ebp,ebp
c0010926:	0f 84 9e 00 00 00    	je     c00109ca <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c001092c:	89 e9                	mov    ecx,ebp
c001092e:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010934:	bf 01 00 00 00       	mov    edi,0x1
c0010939:	89 04 24             	mov    DWORD PTR [esp],eax
c001093c:	d3 e7                	shl    edi,cl
c001093e:	31 c9                	xor    ecx,ecx
c0010940:	b8 01 00 00 00       	mov    eax,0x1
c0010945:	d3 e0                	shl    eax,cl
c0010947:	85 04 24             	test   DWORD PTR [esp],eax
c001094a:	74 06                	je     c0010952 <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c001094c:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010950:	75 67                	jne    c00109b9 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010952:	41                   	inc    ecx
c0010953:	83 f9 11             	cmp    ecx,0x11
c0010956:	75 e8                	jne    c0010940 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001095b:	46                   	inc    esi
c001095c:	09 f8                	or     eax,edi
c001095e:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010964:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001096f:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010975:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001097c:	31 c0                	xor    eax,eax
c001097e:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010986:	74 09                	je     c0010991 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010988:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001098f:	eb 06                	jmp    c0010997 <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010991:	40                   	inc    eax
c0010992:	83 f8 08             	cmp    eax,0x8
c0010995:	75 e7                	jne    c001097e <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c0010997:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001099b:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c001099e:	83 fd 09             	cmp    ebp,0x9
c00109a1:	89 2a                	mov    DWORD PTR [edx],ebp
c00109a3:	75 07                	jne    c00109ac <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c00109a5:	b8 84 07 01 c0       	mov    eax,0xc0010784
c00109aa:	eb 31                	jmp    c00109dd <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00109ac:	83 f8 01             	cmp    eax,0x1
c00109af:	75 0c                	jne    c00109bd <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c00109b1:	f7 d7                	not    edi
c00109b3:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00109b9:	31 c0                	xor    eax,eax
c00109bb:	eb 20                	jmp    c00109dd <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00109bd:	85 c0                	test   eax,eax
c00109bf:	75 1c                	jne    c00109dd <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00109c1:	8b 04 ad 80 19 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffde680]
c00109c8:	eb 13                	jmp    c00109dd <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00109ca:	46                   	inc    esi
c00109cb:	41                   	inc    ecx
c00109cc:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00109d2:	83 f9 08             	cmp    ecx,0x8
c00109d5:	0f 85 36 ff ff ff    	jne    c0010911 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c00109db:	eb dc                	jmp    c00109b9 <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c00109dd:	5a                   	pop    edx
c00109de:	5b                   	pop    ebx
c00109df:	5e                   	pop    esi
c00109e0:	5f                   	pop    edi
c00109e1:	5d                   	pop    ebp
c00109e2:	c3                   	ret    

c00109e3 <KiCheckSignalZ>:
c00109e3:	83 ec 10             	sub    esp,0x10
c00109e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00109ea:	50                   	push   eax
c00109eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109f3:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00109f9:	e8 f6 fe ff ff       	call   c00108f4 <KeCheckSignal(SigHandlerBlock*, int*)>
c00109fe:	5a                   	pop    edx
c00109ff:	31 d2                	xor    edx,edx
c0010a01:	59                   	pop    ecx
c0010a02:	85 c0                	test   eax,eax
c0010a04:	74 19                	je     c0010a1f <KiCheckSignalZ+0x3c>
c0010a06:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010a0c:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010a0f:	89 02                	mov    DWORD PTR [edx],eax
c0010a11:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010a18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010a1c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010a1f:	89 d0                	mov    eax,edx
c0010a21:	83 c4 10             	add    esp,0x10
c0010a24:	c3                   	ret    

c0010a25 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010a25:	56                   	push   esi
c0010a26:	53                   	push   ebx
c0010a27:	bb 01 00 00 00       	mov    ebx,0x1
c0010a2c:	52                   	push   edx
c0010a2d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010a31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010a35:	d3 e3                	shl    ebx,cl
c0010a37:	83 f9 10             	cmp    ecx,0x10
c0010a3a:	7f 08                	jg     c0010a44 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010a3c:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010a42:	75 10                	jne    c0010a54 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010a44:	83 ec 0c             	sub    esp,0xc
c0010a47:	68 ed 05 02 c0       	push   0xc00205ed
c0010a4c:	e8 b6 f9 ff ff       	call   c0010407 <KePanic(char const*)>
c0010a51:	83 c4 10             	add    esp,0x10
c0010a54:	f7 d3                	not    ebx
c0010a56:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010a5c:	58                   	pop    eax
c0010a5d:	5b                   	pop    ebx
c0010a5e:	5e                   	pop    esi
c0010a5f:	c3                   	ret    

c0010a60 <KiFinishSignalZ>:
c0010a60:	53                   	push   ebx
c0010a61:	83 ec 10             	sub    esp,0x10
c0010a64:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010a68:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010a6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a73:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010a79:	e8 a7 ff ff ff       	call   c0010a25 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010a7e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010a84:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010a8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010a92:	83 c4 18             	add    esp,0x18
c0010a95:	5b                   	pop    ebx
c0010a96:	c3                   	ret    

c0010a97 <SysSeekDir(regs*)>:
c0010a97:	31 c0                	xor    eax,eax
c0010a99:	31 d2                	xor    edx,edx
c0010a9b:	c3                   	ret    

c0010a9c <SysTellDir(regs*)>:
c0010a9c:	31 c0                	xor    eax,eax
c0010a9e:	31 d2                	xor    edx,edx
c0010aa0:	c3                   	ret    

c0010aa1 <SysVerify(regs*)>:
c0010aa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010aa5:	31 d2                	xor    edx,edx
c0010aa7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010aaa:	c3                   	ret    

c0010aab <SysGetArgc(regs*)>:
c0010aab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ab0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ab3:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010ab9:	89 c2                	mov    edx,eax
c0010abb:	c1 fa 1f             	sar    edx,0x1f
c0010abe:	c3                   	ret    

c0010abf <SysTTYName(regs*)>:
c0010abf:	b8 01 00 00 00       	mov    eax,0x1
c0010ac4:	31 d2                	xor    edx,edx
c0010ac6:	c3                   	ret    

c0010ac7 <SysFormatDisk(regs*)>:
c0010ac7:	56                   	push   esi
c0010ac8:	53                   	push   ebx
c0010ac9:	50                   	push   eax
c0010aca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ace:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c0010ad4:	eb 2a                	jmp    c0010b00 <SysFormatDisk(regs*)+0x39>
c0010ad6:	83 ec 0c             	sub    esp,0xc
c0010ad9:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010adc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010adf:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ae1:	51                   	push   ecx
c0010ae2:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010ae5:	51                   	push   ecx
c0010ae6:	50                   	push   eax
c0010ae7:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0010aee:	50                   	push   eax
c0010aef:	53                   	push   ebx
c0010af0:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010af3:	83 c4 20             	add    esp,0x20
c0010af6:	89 c1                	mov    ecx,eax
c0010af8:	83 f8 08             	cmp    eax,0x8
c0010afb:	75 12                	jne    c0010b0f <SysFormatDisk(regs*)+0x48>
c0010afd:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010b00:	85 db                	test   ebx,ebx
c0010b02:	75 d2                	jne    c0010ad6 <SysFormatDisk(regs*)+0xf>
c0010b04:	b8 03 00 00 00       	mov    eax,0x3
c0010b09:	31 d2                	xor    edx,edx
c0010b0b:	59                   	pop    ecx
c0010b0c:	5b                   	pop    ebx
c0010b0d:	5e                   	pop    esi
c0010b0e:	c3                   	ret    
c0010b0f:	85 c0                	test   eax,eax
c0010b11:	74 13                	je     c0010b26 <SysFormatDisk(regs*)+0x5f>
c0010b13:	31 d2                	xor    edx,edx
c0010b15:	b8 01 00 00 00       	mov    eax,0x1
c0010b1a:	83 f9 09             	cmp    ecx,0x9
c0010b1d:	74 ec                	je     c0010b0b <SysFormatDisk(regs*)+0x44>
c0010b1f:	b8 02 00 00 00       	mov    eax,0x2
c0010b24:	eb e3                	jmp    c0010b09 <SysFormatDisk(regs*)+0x42>
c0010b26:	31 c0                	xor    eax,eax
c0010b28:	eb df                	jmp    c0010b09 <SysFormatDisk(regs*)+0x42>

c0010b2a <SysSetDiskVolumeLabel(regs*)>:
c0010b2a:	56                   	push   esi
c0010b2b:	53                   	push   ebx
c0010b2c:	53                   	push   ebx
c0010b2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010b31:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010b34:	83 f8 19             	cmp    eax,0x19
c0010b37:	77 31                	ja     c0010b6a <SysSetDiskVolumeLabel(regs*)+0x40>
c0010b39:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0010b40:	85 c9                	test   ecx,ecx
c0010b42:	74 26                	je     c0010b6a <SysSetDiskVolumeLabel(regs*)+0x40>
c0010b44:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010b47:	85 db                	test   ebx,ebx
c0010b49:	74 1f                	je     c0010b6a <SysSetDiskVolumeLabel(regs*)+0x40>
c0010b4b:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010b51:	85 d2                	test   edx,edx
c0010b53:	74 15                	je     c0010b6a <SysSetDiskVolumeLabel(regs*)+0x40>
c0010b55:	8b 32                	mov    esi,DWORD PTR [edx]
c0010b57:	53                   	push   ebx
c0010b58:	50                   	push   eax
c0010b59:	51                   	push   ecx
c0010b5a:	52                   	push   edx
c0010b5b:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010b5e:	83 c4 10             	add    esp,0x10
c0010b61:	89 c2                	mov    edx,eax
c0010b63:	c1 fa 1f             	sar    edx,0x1f
c0010b66:	59                   	pop    ecx
c0010b67:	5b                   	pop    ebx
c0010b68:	5e                   	pop    esi
c0010b69:	c3                   	ret    
c0010b6a:	59                   	pop    ecx
c0010b6b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010b70:	5b                   	pop    ebx
c0010b71:	83 ca ff             	or     edx,0xffffffff
c0010b74:	5e                   	pop    esi
c0010b75:	c3                   	ret    

c0010b76 <SysGetDiskVolumeLabel(regs*)>:
c0010b76:	57                   	push   edi
c0010b77:	56                   	push   esi
c0010b78:	53                   	push   ebx
c0010b79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010b80:	83 fa 19             	cmp    edx,0x19
c0010b83:	77 3c                	ja     c0010bc1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010b85:	8b 0c 95 20 64 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd9be0]
c0010b8c:	85 c9                	test   ecx,ecx
c0010b8e:	74 31                	je     c0010bc1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010b90:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010b93:	85 db                	test   ebx,ebx
c0010b95:	74 2a                	je     c0010bc1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010b97:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010b9a:	85 f6                	test   esi,esi
c0010b9c:	74 23                	je     c0010bc1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010b9e:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010ba4:	85 c0                	test   eax,eax
c0010ba6:	74 19                	je     c0010bc1 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010ba8:	83 ec 0c             	sub    esp,0xc
c0010bab:	8b 38                	mov    edi,DWORD PTR [eax]
c0010bad:	56                   	push   esi
c0010bae:	53                   	push   ebx
c0010baf:	52                   	push   edx
c0010bb0:	51                   	push   ecx
c0010bb1:	50                   	push   eax
c0010bb2:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010bb5:	83 c4 20             	add    esp,0x20
c0010bb8:	89 c2                	mov    edx,eax
c0010bba:	c1 fa 1f             	sar    edx,0x1f
c0010bbd:	5b                   	pop    ebx
c0010bbe:	5e                   	pop    esi
c0010bbf:	5f                   	pop    edi
c0010bc0:	c3                   	ret    
c0010bc1:	5b                   	pop    ebx
c0010bc2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010bc7:	5e                   	pop    esi
c0010bc8:	83 ca ff             	or     edx,0xffffffff
c0010bcb:	5f                   	pop    edi
c0010bcc:	c3                   	ret    

c0010bcd <SysShutdown(regs*)>:
c0010bcd:	57                   	push   edi
c0010bce:	56                   	push   esi
c0010bcf:	56                   	push   esi
c0010bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bd4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010bd7:	85 c0                	test   eax,eax
c0010bd9:	74 18                	je     c0010bf3 <SysShutdown(regs*)+0x26>
c0010bdb:	83 f8 01             	cmp    eax,0x1
c0010bde:	74 51                	je     c0010c31 <SysShutdown(regs*)+0x64>
c0010be0:	83 ce ff             	or     esi,0xffffffff
c0010be3:	83 cf ff             	or     edi,0xffffffff
c0010be6:	83 f8 02             	cmp    eax,0x2
c0010be9:	74 2a                	je     c0010c15 <SysShutdown(regs*)+0x48>
c0010beb:	59                   	pop    ecx
c0010bec:	89 f0                	mov    eax,esi
c0010bee:	5e                   	pop    esi
c0010bef:	89 fa                	mov    edx,edi
c0010bf1:	5f                   	pop    edi
c0010bf2:	c3                   	ret    
c0010bf3:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010bf8:	83 ce ff             	or     esi,0xffffffff
c0010bfb:	83 cf ff             	or     edi,0xffffffff
c0010bfe:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c00:	6a 00                	push   0x0
c0010c02:	6a 00                	push   0x0
c0010c04:	6a 00                	push   0x0
c0010c06:	50                   	push   eax
c0010c07:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010c0a:	83 c4 10             	add    esp,0x10
c0010c0d:	89 f0                	mov    eax,esi
c0010c0f:	89 fa                	mov    edx,edi
c0010c11:	59                   	pop    ecx
c0010c12:	5e                   	pop    esi
c0010c13:	5f                   	pop    edi
c0010c14:	c3                   	ret    
c0010c15:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010c1a:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c1c:	6a 00                	push   0x0
c0010c1e:	6a 00                	push   0x0
c0010c20:	6a 01                	push   0x1
c0010c22:	50                   	push   eax
c0010c23:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010c26:	83 c4 10             	add    esp,0x10
c0010c29:	89 f0                	mov    eax,esi
c0010c2b:	89 fa                	mov    edx,edi
c0010c2d:	59                   	pop    ecx
c0010c2e:	5e                   	pop    esi
c0010c2f:	5f                   	pop    edi
c0010c30:	c3                   	ret    
c0010c31:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c0010c36:	85 c0                	test   eax,eax
c0010c38:	74 02                	je     c0010c3c <SysShutdown(regs*)+0x6f>
c0010c3a:	ff d0                	call   eax
c0010c3c:	31 f6                	xor    esi,esi
c0010c3e:	59                   	pop    ecx
c0010c3f:	31 ff                	xor    edi,edi
c0010c41:	89 f0                	mov    eax,esi
c0010c43:	5e                   	pop    esi
c0010c44:	89 fa                	mov    edx,edi
c0010c46:	5f                   	pop    edi
c0010c47:	c3                   	ret    

c0010c48 <SysRealpath(regs*)>:
c0010c48:	53                   	push   ebx
c0010c49:	83 ec 08             	sub    esp,0x8
c0010c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c50:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0010c53:	85 c9                	test   ecx,ecx
c0010c55:	74 35                	je     c0010c8c <SysRealpath(regs*)+0x44>
c0010c57:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010c5a:	31 d2                	xor    edx,edx
c0010c5c:	b8 01 00 00 00       	mov    eax,0x1
c0010c61:	85 db                	test   ebx,ebx
c0010c63:	75 05                	jne    c0010c6a <SysRealpath(regs*)+0x22>
c0010c65:	83 c4 08             	add    esp,0x8
c0010c68:	5b                   	pop    ebx
c0010c69:	c3                   	ret    
c0010c6a:	50                   	push   eax
c0010c6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c73:	05 0c 01 00 00       	add    eax,0x10c
c0010c78:	50                   	push   eax
c0010c79:	51                   	push   ecx
c0010c7a:	53                   	push   ebx
c0010c7b:	e8 9e 9d ff ff       	call   c000aa1e <Fs::standardiseFiles(char*, char const*, char const*)>
c0010c80:	83 c4 10             	add    esp,0x10
c0010c83:	31 c0                	xor    eax,eax
c0010c85:	31 d2                	xor    edx,edx
c0010c87:	83 c4 08             	add    esp,0x8
c0010c8a:	5b                   	pop    ebx
c0010c8b:	c3                   	ret    
c0010c8c:	b8 01 00 00 00       	mov    eax,0x1
c0010c91:	31 d2                	xor    edx,edx
c0010c93:	eb f2                	jmp    c0010c87 <SysRealpath(regs*)+0x3f>

c0010c95 <SysReadDir(regs*)>:
c0010c95:	53                   	push   ebx
c0010c96:	83 ec 18             	sub    esp,0x18
c0010c99:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010c9d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010ca0:	83 f8 02             	cmp    eax,0x2
c0010ca3:	76 4f                	jbe    c0010cf4 <SysReadDir(regs*)+0x5f>
c0010ca5:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010cac:	77 52                	ja     c0010d00 <SysReadDir(regs*)+0x6b>
c0010cae:	83 ec 0c             	sub    esp,0xc
c0010cb1:	50                   	push   eax
c0010cb2:	e8 50 85 ff ff       	call   c0009207 <getFromFileDescriptor(int)>
c0010cb7:	83 c4 10             	add    esp,0x10
c0010cba:	85 c0                	test   eax,eax
c0010cbc:	74 42                	je     c0010d00 <SysReadDir(regs*)+0x6b>
c0010cbe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010cc6:	83 ec 0c             	sub    esp,0xc
c0010cc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ccb:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010ccf:	51                   	push   ecx
c0010cd0:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010cd3:	51                   	push   ecx
c0010cd4:	6a 00                	push   0x0
c0010cd6:	68 10 01 00 00       	push   0x110
c0010cdb:	50                   	push   eax
c0010cdc:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010cdf:	83 c4 20             	add    esp,0x20
c0010ce2:	89 c1                	mov    ecx,eax
c0010ce4:	85 c0                	test   eax,eax
c0010ce6:	74 23                	je     c0010d0b <SysReadDir(regs*)+0x76>
c0010ce8:	31 d2                	xor    edx,edx
c0010cea:	b8 02 00 00 00       	mov    eax,0x2
c0010cef:	83 f9 07             	cmp    ecx,0x7
c0010cf2:	75 12                	jne    c0010d06 <SysReadDir(regs*)+0x71>
c0010cf4:	b8 01 00 00 00       	mov    eax,0x1
c0010cf9:	31 d2                	xor    edx,edx
c0010cfb:	83 c4 18             	add    esp,0x18
c0010cfe:	5b                   	pop    ebx
c0010cff:	c3                   	ret    
c0010d00:	83 c8 ff             	or     eax,0xffffffff
c0010d03:	83 ca ff             	or     edx,0xffffffff
c0010d06:	83 c4 18             	add    esp,0x18
c0010d09:	5b                   	pop    ebx
c0010d0a:	c3                   	ret    
c0010d0b:	31 c0                	xor    eax,eax
c0010d0d:	31 d2                	xor    edx,edx
c0010d0f:	eb ea                	jmp    c0010cfb <SysReadDir(regs*)+0x66>

c0010d11 <SysIsATTY(regs*)>:
c0010d11:	83 ec 0c             	sub    esp,0xc
c0010d14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d18:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d1b:	83 f8 02             	cmp    eax,0x2
c0010d1e:	76 07                	jbe    c0010d27 <SysIsATTY(regs*)+0x16>
c0010d20:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d25:	75 28                	jne    c0010d4f <SysIsATTY(regs*)+0x3e>
c0010d27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d2c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d2f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010d35:	85 c0                	test   eax,eax
c0010d37:	74 26                	je     c0010d5f <SysIsATTY(regs*)+0x4e>
c0010d39:	83 ec 0c             	sub    esp,0xc
c0010d3c:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d3e:	50                   	push   eax
c0010d3f:	ff 12                	call   DWORD PTR [edx]
c0010d41:	83 c4 10             	add    esp,0x10
c0010d44:	25 ff 00 00 00       	and    eax,0xff
c0010d49:	31 d2                	xor    edx,edx
c0010d4b:	83 c4 0c             	add    esp,0xc
c0010d4e:	c3                   	ret    
c0010d4f:	83 ec 0c             	sub    esp,0xc
c0010d52:	50                   	push   eax
c0010d53:	e8 af 84 ff ff       	call   c0009207 <getFromFileDescriptor(int)>
c0010d58:	83 c4 10             	add    esp,0x10
c0010d5b:	85 c0                	test   eax,eax
c0010d5d:	75 da                	jne    c0010d39 <SysIsATTY(regs*)+0x28>
c0010d5f:	83 c8 ff             	or     eax,0xffffffff
c0010d62:	83 ca ff             	or     edx,0xffffffff
c0010d65:	83 c4 0c             	add    esp,0xc
c0010d68:	c3                   	ret    

c0010d69 <SysSeek(regs*)>:
c0010d69:	56                   	push   esi
c0010d6a:	53                   	push   ebx
c0010d6b:	53                   	push   ebx
c0010d6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d70:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010d73:	8d 71 fd             	lea    esi,[ecx-0x3]
c0010d76:	81 fe fd fe ff 0f    	cmp    esi,0xffffefd
c0010d7c:	77 33                	ja     c0010db1 <SysSeek(regs*)+0x48>
c0010d7e:	83 ec 0c             	sub    esp,0xc
c0010d81:	51                   	push   ecx
c0010d82:	e8 80 84 ff ff       	call   c0009207 <getFromFileDescriptor(int)>
c0010d87:	83 c4 0c             	add    esp,0xc
c0010d8a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010d8d:	31 db                	xor    ebx,ebx
c0010d8f:	53                   	push   ebx
c0010d90:	51                   	push   ecx
c0010d91:	50                   	push   eax
c0010d92:	e8 af 9f ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c0010d97:	83 c4 10             	add    esp,0x10
c0010d9a:	85 c0                	test   eax,eax
c0010d9c:	0f 95 c0             	setne  al
c0010d9f:	25 ff 00 00 00       	and    eax,0xff
c0010da4:	31 d2                	xor    edx,edx
c0010da6:	59                   	pop    ecx
c0010da7:	f7 d8                	neg    eax
c0010da9:	83 d2 00             	adc    edx,0x0
c0010dac:	5b                   	pop    ebx
c0010dad:	f7 da                	neg    edx
c0010daf:	5e                   	pop    esi
c0010db0:	c3                   	ret    
c0010db1:	59                   	pop    ecx
c0010db2:	83 c8 ff             	or     eax,0xffffffff
c0010db5:	5b                   	pop    ebx
c0010db6:	83 ca ff             	or     edx,0xffffffff
c0010db9:	5e                   	pop    esi
c0010dba:	c3                   	ret    

c0010dbb <SysTell(regs*)>:
c0010dbb:	53                   	push   ebx
c0010dbc:	83 ec 08             	sub    esp,0x8
c0010dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010dc3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010dc6:	83 f8 02             	cmp    eax,0x2
c0010dc9:	76 50                	jbe    c0010e1b <SysTell(regs*)+0x60>
c0010dcb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010dd0:	76 19                	jbe    c0010deb <SysTell(regs*)+0x30>
c0010dd2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010dd5:	31 d2                	xor    edx,edx
c0010dd7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ddd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010de4:	83 c4 08             	add    esp,0x8
c0010de7:	31 c0                	xor    eax,eax
c0010de9:	5b                   	pop    ebx
c0010dea:	c3                   	ret    
c0010deb:	83 ec 0c             	sub    esp,0xc
c0010dee:	50                   	push   eax
c0010def:	e8 13 84 ff ff       	call   c0009207 <getFromFileDescriptor(int)>
c0010df4:	5a                   	pop    edx
c0010df5:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010df8:	59                   	pop    ecx
c0010df9:	53                   	push   ebx
c0010dfa:	50                   	push   eax
c0010dfb:	e8 9c 9f ff ff       	call   c000ad9c <File::tell(unsigned long long*)>
c0010e00:	83 c4 10             	add    esp,0x10
c0010e03:	85 c0                	test   eax,eax
c0010e05:	0f 95 c0             	setne  al
c0010e08:	25 ff 00 00 00       	and    eax,0xff
c0010e0d:	31 d2                	xor    edx,edx
c0010e0f:	f7 d8                	neg    eax
c0010e11:	83 d2 00             	adc    edx,0x0
c0010e14:	83 c4 08             	add    esp,0x8
c0010e17:	f7 da                	neg    edx
c0010e19:	5b                   	pop    ebx
c0010e1a:	c3                   	ret    
c0010e1b:	83 c4 08             	add    esp,0x8
c0010e1e:	83 c8 ff             	or     eax,0xffffffff
c0010e21:	83 ca ff             	or     edx,0xffffffff
c0010e24:	5b                   	pop    ebx
c0010e25:	c3                   	ret    

c0010e26 <SysSize(regs*)>:
c0010e26:	53                   	push   ebx
c0010e27:	83 ec 18             	sub    esp,0x18
c0010e2a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010e2e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010e31:	83 f8 02             	cmp    eax,0x2
c0010e34:	76 56                	jbe    c0010e8c <SysSize(regs*)+0x66>
c0010e36:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e3b:	76 19                	jbe    c0010e56 <SysSize(regs*)+0x30>
c0010e3d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010e40:	31 d2                	xor    edx,edx
c0010e42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010e48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e4f:	83 c4 18             	add    esp,0x18
c0010e52:	31 c0                	xor    eax,eax
c0010e54:	5b                   	pop    ebx
c0010e55:	c3                   	ret    
c0010e56:	83 ec 0c             	sub    esp,0xc
c0010e59:	50                   	push   eax
c0010e5a:	e8 a8 83 ff ff       	call   c0009207 <getFromFileDescriptor(int)>
c0010e5f:	83 c4 0c             	add    esp,0xc
c0010e62:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010e66:	52                   	push   edx
c0010e67:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010e6a:	52                   	push   edx
c0010e6b:	50                   	push   eax
c0010e6c:	e8 c3 a0 ff ff       	call   c000af34 <File::stat(unsigned long long*, bool*)>
c0010e71:	83 c4 10             	add    esp,0x10
c0010e74:	85 c0                	test   eax,eax
c0010e76:	0f 95 c0             	setne  al
c0010e79:	25 ff 00 00 00       	and    eax,0xff
c0010e7e:	31 d2                	xor    edx,edx
c0010e80:	f7 d8                	neg    eax
c0010e82:	83 d2 00             	adc    edx,0x0
c0010e85:	83 c4 18             	add    esp,0x18
c0010e88:	f7 da                	neg    edx
c0010e8a:	5b                   	pop    ebx
c0010e8b:	c3                   	ret    
c0010e8c:	83 c4 18             	add    esp,0x18
c0010e8f:	83 c8 ff             	or     eax,0xffffffff
c0010e92:	83 ca ff             	or     edx,0xffffffff
c0010e95:	5b                   	pop    ebx
c0010e96:	c3                   	ret    

c0010e97 <SysSizeFromFilename(regs*)>:
c0010e97:	57                   	push   edi
c0010e98:	56                   	push   esi
c0010e99:	53                   	push   ebx
c0010e9a:	83 ec 20             	sub    esp,0x20
c0010e9d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ea1:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010ea4:	83 fb 02             	cmp    ebx,0x2
c0010ea7:	0f 86 8c 00 00 00    	jbe    c0010f39 <SysSizeFromFilename(regs*)+0xa2>
c0010ead:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010eb3:	76 1b                	jbe    c0010ed0 <SysSizeFromFilename(regs*)+0x39>
c0010eb5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010eb8:	31 d2                	xor    edx,edx
c0010eba:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ec0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ec7:	83 c4 20             	add    esp,0x20
c0010eca:	31 c0                	xor    eax,eax
c0010ecc:	5b                   	pop    ebx
c0010ecd:	5e                   	pop    esi
c0010ece:	5f                   	pop    edi
c0010ecf:	c3                   	ret    
c0010ed0:	83 ec 0c             	sub    esp,0xc
c0010ed3:	68 14 01 00 00       	push   0x114
c0010ed8:	e8 86 69 ff ff       	call   c0007863 <malloc>
c0010edd:	89 c7                	mov    edi,eax
c0010edf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ee4:	83 c4 0c             	add    esp,0xc
c0010ee7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010eea:	50                   	push   eax
c0010eeb:	53                   	push   ebx
c0010eec:	57                   	push   edi
c0010eed:	e8 d6 9c ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c0010ef2:	83 c4 0c             	add    esp,0xc
c0010ef5:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010ef9:	50                   	push   eax
c0010efa:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010efd:	52                   	push   edx
c0010efe:	57                   	push   edi
c0010eff:	e8 30 a0 ff ff       	call   c000af34 <File::stat(unsigned long long*, bool*)>
c0010f04:	83 c4 10             	add    esp,0x10
c0010f07:	85 ff                	test   edi,edi
c0010f09:	74 14                	je     c0010f1f <SysSizeFromFilename(regs*)+0x88>
c0010f0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f0f:	83 ec 0c             	sub    esp,0xc
c0010f12:	8b 17                	mov    edx,DWORD PTR [edi]
c0010f14:	57                   	push   edi
c0010f15:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f18:	83 c4 10             	add    esp,0x10
c0010f1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f1f:	85 c0                	test   eax,eax
c0010f21:	0f 95 c0             	setne  al
c0010f24:	25 ff 00 00 00       	and    eax,0xff
c0010f29:	31 d2                	xor    edx,edx
c0010f2b:	f7 d8                	neg    eax
c0010f2d:	83 d2 00             	adc    edx,0x0
c0010f30:	83 c4 20             	add    esp,0x20
c0010f33:	f7 da                	neg    edx
c0010f35:	5b                   	pop    ebx
c0010f36:	5e                   	pop    esi
c0010f37:	5f                   	pop    edi
c0010f38:	c3                   	ret    
c0010f39:	83 c4 20             	add    esp,0x20
c0010f3c:	83 c8 ff             	or     eax,0xffffffff
c0010f3f:	83 ca ff             	or     edx,0xffffffff
c0010f42:	5b                   	pop    ebx
c0010f43:	5e                   	pop    esi
c0010f44:	5f                   	pop    edi
c0010f45:	c3                   	ret    

c0010f46 <SysClose(regs*)>:
c0010f46:	53                   	push   ebx
c0010f47:	83 ec 08             	sub    esp,0x8
c0010f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f4e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f51:	83 f8 02             	cmp    eax,0x2
c0010f54:	76 41                	jbe    c0010f97 <SysClose(regs*)+0x51>
c0010f56:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010f5c:	83 fa 01             	cmp    edx,0x1
c0010f5f:	76 2d                	jbe    c0010f8e <SysClose(regs*)+0x48>
c0010f61:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010f66:	77 2f                	ja     c0010f97 <SysClose(regs*)+0x51>
c0010f68:	83 ec 0c             	sub    esp,0xc
c0010f6b:	50                   	push   eax
c0010f6c:	e8 96 82 ff ff       	call   c0009207 <getFromFileDescriptor(int)>
c0010f71:	89 c3                	mov    ebx,eax
c0010f73:	89 04 24             	mov    DWORD PTR [esp],eax
c0010f76:	e8 6b 9d ff ff       	call   c000ace6 <File::close()>
c0010f7b:	83 c4 10             	add    esp,0x10
c0010f7e:	85 db                	test   ebx,ebx
c0010f80:	74 0c                	je     c0010f8e <SysClose(regs*)+0x48>
c0010f82:	83 ec 0c             	sub    esp,0xc
c0010f85:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f87:	53                   	push   ebx
c0010f88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f8b:	83 c4 10             	add    esp,0x10
c0010f8e:	83 c4 08             	add    esp,0x8
c0010f91:	31 c0                	xor    eax,eax
c0010f93:	31 d2                	xor    edx,edx
c0010f95:	5b                   	pop    ebx
c0010f96:	c3                   	ret    
c0010f97:	83 c4 08             	add    esp,0x8
c0010f9a:	83 c8 ff             	or     eax,0xffffffff
c0010f9d:	83 ca ff             	or     edx,0xffffffff
c0010fa0:	5b                   	pop    ebx
c0010fa1:	c3                   	ret    

c0010fa2 <SysOpenDir(regs*)>:
c0010fa2:	56                   	push   esi
c0010fa3:	53                   	push   ebx
c0010fa4:	50                   	push   eax
c0010fa5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fa9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fac:	85 c0                	test   eax,eax
c0010fae:	74 5b                	je     c001100b <SysOpenDir(regs*)+0x69>
c0010fb0:	83 ec 0c             	sub    esp,0xc
c0010fb3:	68 14 01 00 00       	push   0x114
c0010fb8:	e8 a6 68 ff ff       	call   c0007863 <malloc>
c0010fbd:	89 c6                	mov    esi,eax
c0010fbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fc4:	83 c4 0c             	add    esp,0xc
c0010fc7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fca:	50                   	push   eax
c0010fcb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010fce:	50                   	push   eax
c0010fcf:	56                   	push   esi
c0010fd0:	e8 1d a1 ff ff       	call   c000b0f2 <Directory::Directory(char const*, Process*)>
c0010fd5:	83 c4 10             	add    esp,0x10
c0010fd8:	85 f6                	test   esi,esi
c0010fda:	74 2f                	je     c001100b <SysOpenDir(regs*)+0x69>
c0010fdc:	83 ec 0c             	sub    esp,0xc
c0010fdf:	56                   	push   esi
c0010fe0:	e8 cd a1 ff ff       	call   c000b1b2 <Directory::open()>
c0010fe5:	83 c4 10             	add    esp,0x10
c0010fe8:	85 c0                	test   eax,eax
c0010fea:	75 1f                	jne    c001100b <SysOpenDir(regs*)+0x69>
c0010fec:	83 ec 0c             	sub    esp,0xc
c0010fef:	56                   	push   esi
c0010ff0:	e8 1d 7f ff ff       	call   c0008f12 <UnixFile::getFileDescriptor()>
c0010ff5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010ff8:	83 c4 10             	add    esp,0x10
c0010ffb:	89 02                	mov    DWORD PTR [edx],eax
c0010ffd:	c1 f8 1f             	sar    eax,0x1f
c0011000:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011003:	31 c0                	xor    eax,eax
c0011005:	59                   	pop    ecx
c0011006:	31 d2                	xor    edx,edx
c0011008:	5b                   	pop    ebx
c0011009:	5e                   	pop    esi
c001100a:	c3                   	ret    
c001100b:	59                   	pop    ecx
c001100c:	83 c8 ff             	or     eax,0xffffffff
c001100f:	5b                   	pop    ebx
c0011010:	83 ca ff             	or     edx,0xffffffff
c0011013:	5e                   	pop    esi
c0011014:	c3                   	ret    

c0011015 <SysMakeDir(regs*)>:
c0011015:	56                   	push   esi
c0011016:	53                   	push   ebx
c0011017:	83 ec 10             	sub    esp,0x10
c001101a:	68 14 01 00 00       	push   0x114
c001101f:	e8 3f 68 ff ff       	call   c0007863 <malloc>
c0011024:	89 c3                	mov    ebx,eax
c0011026:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001102b:	83 c4 0c             	add    esp,0xc
c001102e:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0011031:	56                   	push   esi
c0011032:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011036:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011039:	50                   	push   eax
c001103a:	53                   	push   ebx
c001103b:	e8 b2 a0 ff ff       	call   c000b0f2 <Directory::Directory(char const*, Process*)>
c0011040:	83 c4 10             	add    esp,0x10
c0011043:	85 db                	test   ebx,ebx
c0011045:	74 2a                	je     c0011071 <SysMakeDir(regs*)+0x5c>
c0011047:	83 ec 0c             	sub    esp,0xc
c001104a:	53                   	push   ebx
c001104b:	e8 42 a3 ff ff       	call   c000b392 <Directory::create()>
c0011050:	89 c6                	mov    esi,eax
c0011052:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011054:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011057:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001105a:	83 c4 10             	add    esp,0x10
c001105d:	31 c0                	xor    eax,eax
c001105f:	85 f6                	test   esi,esi
c0011061:	0f 95 c0             	setne  al
c0011064:	59                   	pop    ecx
c0011065:	31 d2                	xor    edx,edx
c0011067:	f7 d8                	neg    eax
c0011069:	83 d2 00             	adc    edx,0x0
c001106c:	5b                   	pop    ebx
c001106d:	f7 da                	neg    edx
c001106f:	5e                   	pop    esi
c0011070:	c3                   	ret    
c0011071:	59                   	pop    ecx
c0011072:	83 c8 ff             	or     eax,0xffffffff
c0011075:	5b                   	pop    ebx
c0011076:	83 ca ff             	or     edx,0xffffffff
c0011079:	5e                   	pop    esi
c001107a:	c3                   	ret    

c001107b <SysCloseDir(regs*)>:
c001107b:	53                   	push   ebx
c001107c:	83 ca ff             	or     edx,0xffffffff
c001107f:	83 ec 08             	sub    esp,0x8
c0011082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011086:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011089:	83 c8 ff             	or     eax,0xffffffff
c001108c:	8d 59 fd             	lea    ebx,[ecx-0x3]
c001108f:	81 fb fd fe ff 0f    	cmp    ebx,0xffffefd
c0011095:	77 2a                	ja     c00110c1 <SysCloseDir(regs*)+0x46>
c0011097:	83 ec 0c             	sub    esp,0xc
c001109a:	51                   	push   ecx
c001109b:	e8 67 81 ff ff       	call   c0009207 <getFromFileDescriptor(int)>
c00110a0:	89 c3                	mov    ebx,eax
c00110a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00110a5:	e8 64 a1 ff ff       	call   c000b20e <Directory::close()>
c00110aa:	83 c4 10             	add    esp,0x10
c00110ad:	85 db                	test   ebx,ebx
c00110af:	74 0c                	je     c00110bd <SysCloseDir(regs*)+0x42>
c00110b1:	83 ec 0c             	sub    esp,0xc
c00110b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110b6:	53                   	push   ebx
c00110b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00110ba:	83 c4 10             	add    esp,0x10
c00110bd:	31 c0                	xor    eax,eax
c00110bf:	31 d2                	xor    edx,edx
c00110c1:	83 c4 08             	add    esp,0x8
c00110c4:	5b                   	pop    ebx
c00110c5:	c3                   	ret    

c00110c6 <SysWait(regs*)>:
c00110c6:	83 ec 10             	sub    esp,0x10
c00110c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110cd:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00110d0:	52                   	push   edx
c00110d1:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00110d4:	51                   	push   ecx
c00110d5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00110d8:	50                   	push   eax
c00110d9:	e8 9a 3c 00 00       	call   c0014d78 <waitTask(int, int*, int)>
c00110de:	89 c2                	mov    edx,eax
c00110e0:	83 c4 1c             	add    esp,0x1c
c00110e3:	c1 fa 1f             	sar    edx,0x1f
c00110e6:	c3                   	ret    

c00110e7 <SysNotImpl(regs*)>:
c00110e7:	83 ec 18             	sub    esp,0x18
c00110ea:	68 fe 05 02 c0       	push   0xc00205fe
c00110ef:	e8 13 f3 ff ff       	call   c0010407 <KePanic(char const*)>
c00110f4:	83 c8 ff             	or     eax,0xffffffff
c00110f7:	83 ca ff             	or     edx,0xffffffff
c00110fa:	83 c4 1c             	add    esp,0x1c
c00110fd:	c3                   	ret    

c00110fe <SysPanic(regs*)>:
c00110fe:	83 ec 18             	sub    esp,0x18
c0011101:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011105:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011108:	50                   	push   eax
c0011109:	e8 f9 f2 ff ff       	call   c0010407 <KePanic(char const*)>
c001110e:	b8 01 00 00 00       	mov    eax,0x1
c0011113:	31 d2                	xor    edx,edx
c0011115:	83 c4 1c             	add    esp,0x1c
c0011118:	c3                   	ret    

c0011119 <SysRmdir(regs*)>:
c0011119:	56                   	push   esi
c001111a:	53                   	push   ebx
c001111b:	83 ec 20             	sub    esp,0x20
c001111e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011122:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011125:	68 14 01 00 00       	push   0x114
c001112a:	e8 34 67 ff ff       	call   c0007863 <malloc>
c001112f:	83 c4 0c             	add    esp,0xc
c0011132:	89 c3                	mov    ebx,eax
c0011134:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011139:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001113c:	50                   	push   eax
c001113d:	56                   	push   esi
c001113e:	53                   	push   ebx
c001113f:	e8 84 9a ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c0011144:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011147:	e8 b4 9c ff ff       	call   c000ae00 <File::unlink()>
c001114c:	83 c4 10             	add    esp,0x10
c001114f:	85 db                	test   ebx,ebx
c0011151:	74 14                	je     c0011167 <SysRmdir(regs*)+0x4e>
c0011153:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011157:	83 ec 0c             	sub    esp,0xc
c001115a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001115c:	53                   	push   ebx
c001115d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011160:	83 c4 10             	add    esp,0x10
c0011163:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011167:	85 c0                	test   eax,eax
c0011169:	0f 95 c0             	setne  al
c001116c:	25 ff 00 00 00       	and    eax,0xff
c0011171:	31 d2                	xor    edx,edx
c0011173:	f7 d8                	neg    eax
c0011175:	83 d2 00             	adc    edx,0x0
c0011178:	83 c4 14             	add    esp,0x14
c001117b:	f7 da                	neg    edx
c001117d:	5b                   	pop    ebx
c001117e:	5e                   	pop    esi
c001117f:	c3                   	ret    

c0011180 <SysUnlink(regs*)>:
c0011180:	56                   	push   esi
c0011181:	53                   	push   ebx
c0011182:	83 ec 20             	sub    esp,0x20
c0011185:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011189:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001118c:	68 14 01 00 00       	push   0x114
c0011191:	e8 cd 66 ff ff       	call   c0007863 <malloc>
c0011196:	83 c4 0c             	add    esp,0xc
c0011199:	89 c3                	mov    ebx,eax
c001119b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111a3:	50                   	push   eax
c00111a4:	56                   	push   esi
c00111a5:	53                   	push   ebx
c00111a6:	e8 1d 9a ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c00111ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111ae:	e8 4d 9c ff ff       	call   c000ae00 <File::unlink()>
c00111b3:	83 c4 10             	add    esp,0x10
c00111b6:	85 db                	test   ebx,ebx
c00111b8:	74 14                	je     c00111ce <SysUnlink(regs*)+0x4e>
c00111ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111be:	83 ec 0c             	sub    esp,0xc
c00111c1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00111c3:	53                   	push   ebx
c00111c4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00111c7:	83 c4 10             	add    esp,0x10
c00111ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111ce:	85 c0                	test   eax,eax
c00111d0:	0f 95 c0             	setne  al
c00111d3:	25 ff 00 00 00       	and    eax,0xff
c00111d8:	31 d2                	xor    edx,edx
c00111da:	f7 d8                	neg    eax
c00111dc:	83 d2 00             	adc    edx,0x0
c00111df:	83 c4 14             	add    esp,0x14
c00111e2:	f7 da                	neg    edx
c00111e4:	5b                   	pop    ebx
c00111e5:	5e                   	pop    esi
c00111e6:	c3                   	ret    

c00111e7 <SysGetArgv(regs*)>:
c00111e7:	83 ec 0c             	sub    esp,0xc
c00111ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00111ee:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00111f1:	85 c0                	test   eax,eax
c00111f3:	78 2b                	js     c0011220 <SysGetArgv(regs*)+0x39>
c00111f5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00111fb:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00111fe:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011204:	7d 1a                	jge    c0011220 <SysGetArgv(regs*)+0x39>
c0011206:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001120d:	85 c0                	test   eax,eax
c001120f:	74 17                	je     c0011228 <SysGetArgv(regs*)+0x41>
c0011211:	51                   	push   ecx
c0011212:	51                   	push   ecx
c0011213:	50                   	push   eax
c0011214:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011217:	50                   	push   eax
c0011218:	e8 d3 f3 fe ff       	call   c00005f0 <strcpy>
c001121d:	83 c4 10             	add    esp,0x10
c0011220:	31 c0                	xor    eax,eax
c0011222:	31 d2                	xor    edx,edx
c0011224:	83 c4 0c             	add    esp,0xc
c0011227:	c3                   	ret    
c0011228:	b8 01 00 00 00       	mov    eax,0x1
c001122d:	31 d2                	xor    edx,edx
c001122f:	83 c4 0c             	add    esp,0xc
c0011232:	c3                   	ret    

c0011233 <SysUSleep(regs*)>:
c0011233:	83 ec 1c             	sub    esp,0x1c
c0011236:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001123a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001123d:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011240:	6a 00                	push   0x0
c0011242:	6a 64                	push   0x64
c0011244:	52                   	push   edx
c0011245:	50                   	push   eax
c0011246:	e8 85 cc 00 00       	call   c001ded0 <__udivdi3>
c001124b:	83 c4 14             	add    esp,0x14
c001124e:	50                   	push   eax
c001124f:	e8 04 3c 00 00       	call   c0014e58 <milliTenthSleep(unsigned int)>
c0011254:	31 c0                	xor    eax,eax
c0011256:	31 d2                	xor    edx,edx
c0011258:	83 c4 1c             	add    esp,0x1c
c001125b:	c3                   	ret    

c001125c <SysSpawn(regs*)>:
c001125c:	56                   	push   esi
c001125d:	53                   	push   ebx
c001125e:	53                   	push   ebx
c001125f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011263:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011266:	85 f6                	test   esi,esi
c0011268:	75 08                	jne    c0011272 <SysSpawn(regs*)+0x16>
c001126a:	59                   	pop    ecx
c001126b:	31 c0                	xor    eax,eax
c001126d:	5b                   	pop    ebx
c001126e:	31 d2                	xor    edx,edx
c0011270:	5e                   	pop    esi
c0011271:	c3                   	ret    
c0011272:	83 ec 0c             	sub    esp,0xc
c0011275:	68 24 07 00 00       	push   0x724
c001127a:	e8 e4 65 ff ff       	call   c0007863 <malloc>
c001127f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011282:	89 c6                	mov    esi,eax
c0011284:	83 c4 10             	add    esp,0x10
c0011287:	31 c0                	xor    eax,eax
c0011289:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001128c:	85 c9                	test   ecx,ecx
c001128e:	75 08                	jne    c0011298 <SysSpawn(regs*)+0x3c>
c0011290:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011295:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011298:	52                   	push   edx
c0011299:	50                   	push   eax
c001129a:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c001129d:	53                   	push   ebx
c001129e:	56                   	push   esi
c001129f:	e8 2c 32 00 00       	call   c00144d0 <Process::Process(char const*, Process*, char**)>
c00112a4:	83 c4 10             	add    esp,0x10
c00112a7:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00112ae:	75 ba                	jne    c001126a <SysSpawn(regs*)+0xe>
c00112b0:	83 ec 0c             	sub    esp,0xc
c00112b3:	56                   	push   esi
c00112b4:	e8 53 37 00 00       	call   c0014a0c <Process::createUserThread()>
c00112b9:	83 c4 10             	add    esp,0x10
c00112bc:	8b 06                	mov    eax,DWORD PTR [esi]
c00112be:	89 c2                	mov    edx,eax
c00112c0:	c1 fa 1f             	sar    edx,0x1f
c00112c3:	59                   	pop    ecx
c00112c4:	5b                   	pop    ebx
c00112c5:	5e                   	pop    esi
c00112c6:	c3                   	ret    

c00112c7 <SysGetEnv(regs*)>:
c00112c7:	57                   	push   edi
c00112c8:	56                   	push   esi
c00112c9:	53                   	push   ebx
c00112ca:	83 ec 1c             	sub    esp,0x1c
c00112cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112d2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00112d6:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00112d9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00112dc:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00112df:	51                   	push   ecx
c00112e0:	e8 da ef ff ff       	call   c00102bf <Krnl::getProcessTotalEnvCount(Process*)>
c00112e5:	83 c4 10             	add    esp,0x10
c00112e8:	39 c7                	cmp    edi,eax
c00112ea:	7c 12                	jl     c00112fe <SysGetEnv(regs*)+0x37>
c00112ec:	31 c0                	xor    eax,eax
c00112ee:	31 d2                	xor    edx,edx
c00112f0:	85 f6                	test   esi,esi
c00112f2:	74 03                	je     c00112f7 <SysGetEnv(regs*)+0x30>
c00112f4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00112f7:	83 c4 10             	add    esp,0x10
c00112fa:	5b                   	pop    ebx
c00112fb:	5e                   	pop    esi
c00112fc:	5f                   	pop    edi
c00112fd:	c3                   	ret    
c00112fe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011302:	51                   	push   ecx
c0011303:	57                   	push   edi
c0011304:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001130a:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c001130d:	57                   	push   edi
c001130e:	50                   	push   eax
c001130f:	e8 cb ef ff ff       	call   c00102df <Krnl::getProcessEnvPair(Process*, int)>
c0011314:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011317:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001131b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001131f:	83 c4 0c             	add    esp,0xc
c0011322:	85 d2                	test   edx,edx
c0011324:	75 23                	jne    c0011349 <SysGetEnv(regs*)+0x82>
c0011326:	83 ec 0c             	sub    esp,0xc
c0011329:	50                   	push   eax
c001132a:	e8 01 f2 fe ff       	call   c0000530 <strlen>
c001132f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011332:	89 c3                	mov    ebx,eax
c0011334:	e8 f7 f1 fe ff       	call   c0000530 <strlen>
c0011339:	83 c4 10             	add    esp,0x10
c001133c:	83 c4 10             	add    esp,0x10
c001133f:	31 d2                	xor    edx,edx
c0011341:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011345:	5b                   	pop    ebx
c0011346:	5e                   	pop    esi
c0011347:	5f                   	pop    edi
c0011348:	c3                   	ret    
c0011349:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001134c:	52                   	push   edx
c001134d:	52                   	push   edx
c001134e:	50                   	push   eax
c001134f:	56                   	push   esi
c0011350:	e8 9b f2 fe ff       	call   c00005f0 <strcpy>
c0011355:	59                   	pop    ecx
c0011356:	5b                   	pop    ebx
c0011357:	68 18 06 02 c0       	push   0xc0020618
c001135c:	56                   	push   esi
c001135d:	e8 5e f4 fe ff       	call   c00007c0 <strcat>
c0011362:	58                   	pop    eax
c0011363:	5a                   	pop    edx
c0011364:	57                   	push   edi
c0011365:	56                   	push   esi
c0011366:	e8 55 f4 fe ff       	call   c00007c0 <strcat>
c001136b:	83 c4 10             	add    esp,0x10
c001136e:	31 c0                	xor    eax,eax
c0011370:	83 c4 10             	add    esp,0x10
c0011373:	31 d2                	xor    edx,edx
c0011375:	5b                   	pop    ebx
c0011376:	5e                   	pop    esi
c0011377:	5f                   	pop    edi
c0011378:	c3                   	ret    

c0011379 <SysSetFatAttrib(regs*)>:
c0011379:	57                   	push   edi
c001137a:	56                   	push   esi
c001137b:	53                   	push   ebx
c001137c:	83 ec 1c             	sub    esp,0x1c
c001137f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011383:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011386:	68 14 01 00 00       	push   0x114
c001138b:	e8 d3 64 ff ff       	call   c0007863 <malloc>
c0011390:	83 c4 0c             	add    esp,0xc
c0011393:	89 c3                	mov    ebx,eax
c0011395:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001139a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001139d:	50                   	push   eax
c001139e:	57                   	push   edi
c001139f:	53                   	push   ebx
c00113a0:	e8 23 98 ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c00113a5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00113a8:	83 c4 0c             	add    esp,0xc
c00113ab:	0f b6 d4             	movzx  edx,ah
c00113ae:	52                   	push   edx
c00113af:	25 ff 00 00 00       	and    eax,0xff
c00113b4:	50                   	push   eax
c00113b5:	53                   	push   ebx
c00113b6:	e8 df 9a ff ff       	call   c000ae9a <File::chfatattr(unsigned char, unsigned char)>
c00113bb:	83 c4 10             	add    esp,0x10
c00113be:	85 db                	test   ebx,ebx
c00113c0:	74 14                	je     c00113d6 <SysSetFatAttrib(regs*)+0x5d>
c00113c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00113c6:	83 ec 0c             	sub    esp,0xc
c00113c9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00113cb:	53                   	push   ebx
c00113cc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00113cf:	83 c4 10             	add    esp,0x10
c00113d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113d6:	85 c0                	test   eax,eax
c00113d8:	0f 95 c0             	setne  al
c00113db:	25 ff 00 00 00       	and    eax,0xff
c00113e0:	31 d2                	xor    edx,edx
c00113e2:	f7 d8                	neg    eax
c00113e4:	83 d2 00             	adc    edx,0x0
c00113e7:	83 c4 10             	add    esp,0x10
c00113ea:	f7 da                	neg    edx
c00113ec:	5b                   	pop    ebx
c00113ed:	5e                   	pop    esi
c00113ee:	5f                   	pop    edi
c00113ef:	c3                   	ret    

c00113f0 <SysPipe(regs*)>:
c00113f0:	57                   	push   edi
c00113f1:	56                   	push   esi
c00113f2:	53                   	push   ebx
c00113f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113f7:	83 ec 0c             	sub    esp,0xc
c00113fa:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00113fd:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011400:	6a 20                	push   0x20
c0011402:	e8 5c 64 ff ff       	call   c0007863 <malloc>
c0011407:	89 c3                	mov    ebx,eax
c0011409:	58                   	pop    eax
c001140a:	5a                   	pop    edx
c001140b:	68 00 50 00 00       	push   0x5000
c0011410:	53                   	push   ebx
c0011411:	e8 7e 6d ff ff       	call   c0008194 <Pipe::Pipe(int)>
c0011416:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011419:	e8 f4 7a ff ff       	call   c0008f12 <UnixFile::getFileDescriptor()>
c001141e:	89 07                	mov    DWORD PTR [edi],eax
c0011420:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011423:	e8 ea 7a ff ff       	call   c0008f12 <UnixFile::getFileDescriptor()>
c0011428:	83 c4 10             	add    esp,0x10
c001142b:	89 06                	mov    DWORD PTR [esi],eax
c001142d:	31 d2                	xor    edx,edx
c001142f:	5b                   	pop    ebx
c0011430:	31 c0                	xor    eax,eax
c0011432:	5e                   	pop    esi
c0011433:	5f                   	pop    edi
c0011434:	c3                   	ret    

c0011435 <SysGetUnixTime(regs*)>:
c0011435:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001143a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011440:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011444:	e9 8d a1 ff ff       	jmp    c000b5d6 <Clock::timeInSecondsLocal()>

c0011449 <string_ends_with(char const*, char const*)>:
c0011449:	57                   	push   edi
c001144a:	56                   	push   esi
c001144b:	53                   	push   ebx
c001144c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011450:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011454:	83 ec 0c             	sub    esp,0xc
c0011457:	53                   	push   ebx
c0011458:	e8 d3 f0 fe ff       	call   c0000530 <strlen>
c001145d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011460:	89 c6                	mov    esi,eax
c0011462:	e8 c9 f0 fe ff       	call   c0000530 <strlen>
c0011467:	83 c4 10             	add    esp,0x10
c001146a:	31 d2                	xor    edx,edx
c001146c:	39 c6                	cmp    esi,eax
c001146e:	7d 06                	jge    c0011476 <string_ends_with(char const*, char const*)+0x2d>
c0011470:	5b                   	pop    ebx
c0011471:	89 d0                	mov    eax,edx
c0011473:	5e                   	pop    esi
c0011474:	5f                   	pop    edi
c0011475:	c3                   	ret    
c0011476:	52                   	push   edx
c0011477:	29 c6                	sub    esi,eax
c0011479:	52                   	push   edx
c001147a:	01 f3                	add    ebx,esi
c001147c:	57                   	push   edi
c001147d:	53                   	push   ebx
c001147e:	e8 5d f2 fe ff       	call   c00006e0 <strcmp>
c0011483:	83 c4 10             	add    esp,0x10
c0011486:	31 d2                	xor    edx,edx
c0011488:	85 c0                	test   eax,eax
c001148a:	5b                   	pop    ebx
c001148b:	0f 94 c2             	sete   dl
c001148e:	5e                   	pop    esi
c001148f:	89 d0                	mov    eax,edx
c0011491:	5f                   	pop    edi
c0011492:	c3                   	ret    

c0011493 <SysOpen(regs*)>:
c0011493:	56                   	push   esi
c0011494:	53                   	push   ebx
c0011495:	81 ec 04 01 00 00    	sub    esp,0x104
c001149b:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00114a2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00114a5:	85 f6                	test   esi,esi
c00114a7:	0f 84 b8 01 00 00    	je     c0011665 <SysOpen(regs*)+0x1d2>
c00114ad:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00114b0:	85 c0                	test   eax,eax
c00114b2:	0f 84 ad 01 00 00    	je     c0011665 <SysOpen(regs*)+0x1d2>
c00114b8:	51                   	push   ecx
c00114b9:	68 1a 06 02 c0       	push   0xc002061a
c00114be:	50                   	push   eax
c00114bf:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00114c3:	56                   	push   esi
c00114c4:	e8 55 95 ff ff       	call   c000aa1e <Fs::standardiseFiles(char*, char const*, char const*)>
c00114c9:	89 34 24             	mov    DWORD PTR [esp],esi
c00114cc:	e8 5f f0 fe ff       	call   c0000530 <strlen>
c00114d1:	83 c4 10             	add    esp,0x10
c00114d4:	48                   	dec    eax
c00114d5:	74 25                	je     c00114fc <SysOpen(regs*)+0x69>
c00114d7:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00114da:	80 fa 2e             	cmp    dl,0x2e
c00114dd:	74 19                	je     c00114f8 <SysOpen(regs*)+0x65>
c00114df:	80 fa 3a             	cmp    dl,0x3a
c00114e2:	74 14                	je     c00114f8 <SysOpen(regs*)+0x65>
c00114e4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00114e8:	48                   	dec    eax
c00114e9:	74 11                	je     c00114fc <SysOpen(regs*)+0x69>
c00114eb:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00114ee:	80 fa 3a             	cmp    dl,0x3a
c00114f1:	74 05                	je     c00114f8 <SysOpen(regs*)+0x65>
c00114f3:	80 fa 2e             	cmp    dl,0x2e
c00114f6:	75 ec                	jne    c00114e4 <SysOpen(regs*)+0x51>
c00114f8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00114fc:	50                   	push   eax
c00114fd:	50                   	push   eax
c00114fe:	68 1e 06 02 c0       	push   0xc002061e
c0011503:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011506:	52                   	push   edx
c0011507:	e8 3d ff ff ff       	call   c0011449 <string_ends_with(char const*, char const*)>
c001150c:	83 c4 10             	add    esp,0x10
c001150f:	85 c0                	test   eax,eax
c0011511:	74 1d                	je     c0011530 <SysOpen(regs*)+0x9d>
c0011513:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011516:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001151c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011523:	81 c4 04 01 00 00    	add    esp,0x104
c0011529:	31 c0                	xor    eax,eax
c001152b:	31 d2                	xor    edx,edx
c001152d:	5b                   	pop    ebx
c001152e:	5e                   	pop    esi
c001152f:	c3                   	ret    
c0011530:	50                   	push   eax
c0011531:	50                   	push   eax
c0011532:	68 23 06 02 c0       	push   0xc0020623
c0011537:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001153a:	50                   	push   eax
c001153b:	e8 09 ff ff ff       	call   c0011449 <string_ends_with(char const*, char const*)>
c0011540:	83 c4 10             	add    esp,0x10
c0011543:	85 c0                	test   eax,eax
c0011545:	75 cc                	jne    c0011513 <SysOpen(regs*)+0x80>
c0011547:	50                   	push   eax
c0011548:	50                   	push   eax
c0011549:	68 1f 06 02 c0       	push   0xc002061f
c001154e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011551:	50                   	push   eax
c0011552:	e8 89 f1 fe ff       	call   c00006e0 <strcmp>
c0011557:	83 c4 10             	add    esp,0x10
c001155a:	85 c0                	test   eax,eax
c001155c:	74 b5                	je     c0011513 <SysOpen(regs*)+0x80>
c001155e:	50                   	push   eax
c001155f:	50                   	push   eax
c0011560:	68 1e 06 02 c0       	push   0xc002061e
c0011565:	56                   	push   esi
c0011566:	e8 de fe ff ff       	call   c0011449 <string_ends_with(char const*, char const*)>
c001156b:	83 c4 10             	add    esp,0x10
c001156e:	85 c0                	test   eax,eax
c0011570:	75 a1                	jne    c0011513 <SysOpen(regs*)+0x80>
c0011572:	52                   	push   edx
c0011573:	52                   	push   edx
c0011574:	68 28 06 02 c0       	push   0xc0020628
c0011579:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001157c:	51                   	push   ecx
c001157d:	e8 c7 fe ff ff       	call   c0011449 <string_ends_with(char const*, char const*)>
c0011582:	83 c4 10             	add    esp,0x10
c0011585:	85 c0                	test   eax,eax
c0011587:	0f 85 e7 00 00 00    	jne    c0011674 <SysOpen(regs*)+0x1e1>
c001158d:	50                   	push   eax
c001158e:	50                   	push   eax
c001158f:	68 2d 06 02 c0       	push   0xc002062d
c0011594:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011597:	50                   	push   eax
c0011598:	e8 ac fe ff ff       	call   c0011449 <string_ends_with(char const*, char const*)>
c001159d:	83 c4 10             	add    esp,0x10
c00115a0:	85 c0                	test   eax,eax
c00115a2:	0f 85 cc 00 00 00    	jne    c0011674 <SysOpen(regs*)+0x1e1>
c00115a8:	50                   	push   eax
c00115a9:	50                   	push   eax
c00115aa:	68 29 06 02 c0       	push   0xc0020629
c00115af:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00115b2:	50                   	push   eax
c00115b3:	e8 28 f1 fe ff       	call   c00006e0 <strcmp>
c00115b8:	83 c4 10             	add    esp,0x10
c00115bb:	85 c0                	test   eax,eax
c00115bd:	0f 84 b1 00 00 00    	je     c0011674 <SysOpen(regs*)+0x1e1>
c00115c3:	50                   	push   eax
c00115c4:	50                   	push   eax
c00115c5:	68 28 06 02 c0       	push   0xc0020628
c00115ca:	56                   	push   esi
c00115cb:	e8 79 fe ff ff       	call   c0011449 <string_ends_with(char const*, char const*)>
c00115d0:	83 c4 10             	add    esp,0x10
c00115d3:	85 c0                	test   eax,eax
c00115d5:	0f 85 99 00 00 00    	jne    c0011674 <SysOpen(regs*)+0x1e1>
c00115db:	83 ec 0c             	sub    esp,0xc
c00115de:	68 14 01 00 00       	push   0x114
c00115e3:	e8 7b 62 ff ff       	call   c0007863 <malloc>
c00115e8:	89 c6                	mov    esi,eax
c00115ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115ef:	83 c4 0c             	add    esp,0xc
c00115f2:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00115f5:	51                   	push   ecx
c00115f6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00115f9:	50                   	push   eax
c00115fa:	56                   	push   esi
c00115fb:	e8 c8 95 ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c0011600:	83 c4 10             	add    esp,0x10
c0011603:	85 f6                	test   esi,esi
c0011605:	74 5e                	je     c0011665 <SysOpen(regs*)+0x1d2>
c0011607:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001160a:	89 d0                	mov    eax,edx
c001160c:	25 ff 00 00 00       	and    eax,0xff
c0011611:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011614:	89 d0                	mov    eax,edx
c0011616:	83 e0 01             	and    eax,0x1
c0011619:	f6 c2 02             	test   dl,0x2
c001161c:	74 03                	je     c0011621 <SysOpen(regs*)+0x18e>
c001161e:	83 c8 02             	or     eax,0x2
c0011621:	f6 c2 04             	test   dl,0x4
c0011624:	74 03                	je     c0011629 <SysOpen(regs*)+0x196>
c0011626:	83 c8 04             	or     eax,0x4
c0011629:	f6 c2 08             	test   dl,0x8
c001162c:	74 03                	je     c0011631 <SysOpen(regs*)+0x19e>
c001162e:	83 c8 0a             	or     eax,0xa
c0011631:	83 e2 10             	and    edx,0x10
c0011634:	74 03                	je     c0011639 <SysOpen(regs*)+0x1a6>
c0011636:	83 c8 12             	or     eax,0x12
c0011639:	52                   	push   edx
c001163a:	52                   	push   edx
c001163b:	50                   	push   eax
c001163c:	56                   	push   esi
c001163d:	e8 46 96 ff ff       	call   c000ac88 <File::open(FileOpenMode)>
c0011642:	83 c4 10             	add    esp,0x10
c0011645:	85 c0                	test   eax,eax
c0011647:	75 1c                	jne    c0011665 <SysOpen(regs*)+0x1d2>
c0011649:	83 ec 0c             	sub    esp,0xc
c001164c:	56                   	push   esi
c001164d:	e8 c0 78 ff ff       	call   c0008f12 <UnixFile::getFileDescriptor()>
c0011652:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011655:	83 c4 10             	add    esp,0x10
c0011658:	89 02                	mov    DWORD PTR [edx],eax
c001165a:	c1 f8 1f             	sar    eax,0x1f
c001165d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011660:	e9 be fe ff ff       	jmp    c0011523 <SysOpen(regs*)+0x90>
c0011665:	81 c4 04 01 00 00    	add    esp,0x104
c001166b:	83 c8 ff             	or     eax,0xffffffff
c001166e:	83 ca ff             	or     edx,0xffffffff
c0011671:	5b                   	pop    ebx
c0011672:	5e                   	pop    esi
c0011673:	c3                   	ret    
c0011674:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011677:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001167d:	e9 9a fe ff ff       	jmp    c001151c <SysOpen(regs*)+0x89>

c0011682 <KeSystemCall(regs*, void*)>:
c0011682:	53                   	push   ebx
c0011683:	83 ec 08             	sub    esp,0x8
c0011686:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001168a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001168d:	83 f8 3b             	cmp    eax,0x3b
c0011690:	77 16                	ja     c00116a8 <KeSystemCall(regs*, void*)+0x26>
c0011692:	8b 14 85 e0 19 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffde620]
c0011699:	85 d2                	test   edx,edx
c001169b:	74 0b                	je     c00116a8 <KeSystemCall(regs*, void*)+0x26>
c001169d:	83 ec 0c             	sub    esp,0xc
c00116a0:	53                   	push   ebx
c00116a1:	ff d2                	call   edx
c00116a3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00116a6:	eb 0d                	jmp    c00116b5 <KeSystemCall(regs*, void*)+0x33>
c00116a8:	52                   	push   edx
c00116a9:	52                   	push   edx
c00116aa:	50                   	push   eax
c00116ab:	68 32 06 02 c0       	push   0xc0020632
c00116b0:	e8 9e 8f ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c00116b5:	83 c4 10             	add    esp,0x10
c00116b8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00116bd:	83 c4 08             	add    esp,0x8
c00116c0:	31 d2                	xor    edx,edx
c00116c2:	5b                   	pop    ebx
c00116c3:	c3                   	ret    

c00116c4 <KeSwitchEndian16(unsigned short)>:
c00116c4:	83 ec 04             	sub    esp,0x4
c00116c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00116cb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00116cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00116d2:	25 ff ff 00 00       	and    eax,0xffff
c00116d7:	c1 f8 08             	sar    eax,0x8
c00116da:	89 c2                	mov    edx,eax
c00116dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00116df:	25 ff ff 00 00       	and    eax,0xffff
c00116e4:	c1 e0 08             	shl    eax,0x8
c00116e7:	09 d0                	or     eax,edx
c00116e9:	83 c4 04             	add    esp,0x4
c00116ec:	c3                   	ret    
c00116ed:	8d 76 00             	lea    esi,[esi+0x0]

c00116f0 <KeSwitchEndian32(unsigned int)>:
c00116f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116f4:	c1 e8 18             	shr    eax,0x18
c00116f7:	89 c2                	mov    edx,eax
c00116f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fd:	c1 e0 08             	shl    eax,0x8
c0011700:	25 00 00 ff 00       	and    eax,0xff0000
c0011705:	09 c2                	or     edx,eax
c0011707:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001170b:	c1 e8 08             	shr    eax,0x8
c001170e:	25 00 ff 00 00       	and    eax,0xff00
c0011713:	09 c2                	or     edx,eax
c0011715:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011719:	c1 e0 18             	shl    eax,0x18
c001171c:	09 d0                	or     eax,edx
c001171e:	c3                   	ret    
c001171f:	90                   	nop

c0011720 <EthernetCRC32(unsigned char*, int)>:
c0011720:	83 ec 10             	sub    esp,0x10
c0011723:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011728:	75 0a                	jne    c0011734 <EthernetCRC32(unsigned char*, int)+0x14>
c001172a:	b8 00 00 00 00       	mov    eax,0x0
c001172f:	e9 8c 00 00 00       	jmp    c00117c0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011734:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011739:	7f 09                	jg     c0011744 <EthernetCRC32(unsigned char*, int)+0x24>
c001173b:	b8 00 00 00 00       	mov    eax,0x0
c0011740:	eb 7e                	jmp    c00117c0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011742:	66 90                	xchg   ax,ax
c0011744:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001174c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011754:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011758:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001175c:	7d 5a                	jge    c00117b8 <EthernetCRC32(unsigned char*, int)+0x98>
c001175e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011762:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011766:	01 d0                	add    eax,edx
c0011768:	8a 00                	mov    al,BYTE PTR [eax]
c001176a:	25 ff 00 00 00       	and    eax,0xff
c001176f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011773:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001177b:	90                   	nop
c001177c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011781:	7f 2d                	jg     c00117b0 <EthernetCRC32(unsigned char*, int)+0x90>
c0011783:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011787:	83 e0 01             	and    eax,0x1
c001178a:	74 10                	je     c001179c <EthernetCRC32(unsigned char*, int)+0x7c>
c001178c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011790:	d1 e8                	shr    eax,1
c0011792:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011797:	eb 0b                	jmp    c00117a4 <EthernetCRC32(unsigned char*, int)+0x84>
c0011799:	8d 76 00             	lea    esi,[esi+0x0]
c001179c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117a0:	d1 e8                	shr    eax,1
c00117a2:	66 90                	xchg   ax,ax
c00117a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00117a8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00117ac:	eb ce                	jmp    c001177c <EthernetCRC32(unsigned char*, int)+0x5c>
c00117ae:	66 90                	xchg   ax,ax
c00117b0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00117b4:	eb 9e                	jmp    c0011754 <EthernetCRC32(unsigned char*, int)+0x34>
c00117b6:	66 90                	xchg   ax,ax
c00117b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117bc:	f7 d0                	not    eax
c00117be:	66 90                	xchg   ax,ax
c00117c0:	83 c4 10             	add    esp,0x10
c00117c3:	c3                   	ret    

c00117c4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c00117c4:	83 ec 2c             	sub    esp,0x2c
c00117c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00117cb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00117d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00117d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00117d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117df:	66 3d 06 08          	cmp    ax,0x806
c00117e3:	75 13                	jne    c00117f8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x34>
c00117e5:	83 ec 0c             	sub    esp,0xc
c00117e8:	68 46 06 02 c0       	push   0xc0020646
c00117ed:	e8 61 8e ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c00117f2:	83 c4 10             	add    esp,0x10
c00117f5:	eb 21                	jmp    c0011818 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x54>
c00117f7:	90                   	nop
c00117f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00117ff:	66 3d 00 08          	cmp    ax,0x800
c0011803:	75 13                	jne    c0011818 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x54>
c0011805:	83 ec 0c             	sub    esp,0xc
c0011808:	68 5c 06 02 c0       	push   0xc002065c
c001180d:	e8 41 8e ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0011812:	83 c4 10             	add    esp,0x10
c0011815:	8d 76 00             	lea    esi,[esi+0x0]
c0011818:	90                   	nop
c0011819:	83 c4 2c             	add    esp,0x2c
c001181c:	c3                   	ret    

c001181d <CmOpen(char const*)>:
c001181d:	57                   	push   edi
c001181e:	56                   	push   esi
c001181f:	53                   	push   ebx
c0011820:	83 ec 1c             	sub    esp,0x1c
c0011823:	6a 30                	push   0x30
c0011825:	e8 39 60 ff ff       	call   c0007863 <malloc>
c001182a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011831:	89 c3                	mov    ebx,eax
c0011833:	e8 2b 60 ff ff       	call   c0007863 <malloc>
c0011838:	83 c4 0c             	add    esp,0xc
c001183b:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0011841:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011845:	89 c6                	mov    esi,eax
c0011847:	50                   	push   eax
c0011848:	e8 7b 93 ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c001184d:	83 c4 0c             	add    esp,0xc
c0011850:	89 33                	mov    DWORD PTR [ebx],esi
c0011852:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011856:	50                   	push   eax
c0011857:	8d 44 24 10          	lea    eax,[esp+0x10]
c001185b:	50                   	push   eax
c001185c:	56                   	push   esi
c001185d:	e8 d2 96 ff ff       	call   c000af34 <File::stat(unsigned long long*, bool*)>
c0011862:	5a                   	pop    edx
c0011863:	59                   	pop    ecx
c0011864:	6a 01                	push   0x1
c0011866:	ff 33                	push   DWORD PTR [ebx]
c0011868:	e8 1b 94 ff ff       	call   c000ac88 <File::open(FileOpenMode)>
c001186d:	5e                   	pop    esi
c001186e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011872:	e8 ec 5f ff ff       	call   c0007863 <malloc>
c0011877:	5a                   	pop    edx
c0011878:	89 c7                	mov    edi,eax
c001187a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001187c:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011880:	8b 10                	mov    edx,DWORD PTR [eax]
c0011882:	56                   	push   esi
c0011883:	57                   	push   edi
c0011884:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011888:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001188c:	50                   	push   eax
c001188d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011890:	83 c4 14             	add    esp,0x14
c0011893:	ff 33                	push   DWORD PTR [ebx]
c0011895:	e8 4c 94 ff ff       	call   c000ace6 <File::close()>
c001189a:	59                   	pop    ecx
c001189b:	58                   	pop    eax
c001189c:	6a 13                	push   0x13
c001189e:	ff 33                	push   DWORD PTR [ebx]
c00118a0:	e8 e3 93 ff ff       	call   c000ac88 <File::open(FileOpenMode)>
c00118a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118a7:	8b 10                	mov    edx,DWORD PTR [eax]
c00118a9:	89 34 24             	mov    DWORD PTR [esp],esi
c00118ac:	57                   	push   edi
c00118ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00118b1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00118b5:	50                   	push   eax
c00118b6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00118b9:	83 c4 14             	add    esp,0x14
c00118bc:	57                   	push   edi
c00118bd:	e8 b1 5f ff ff       	call   c0007873 <free>
c00118c2:	83 c4 10             	add    esp,0x10
c00118c5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00118c8:	75 10                	jne    c00118da <CmOpen(char const*)+0xbd>
c00118ca:	83 ec 0c             	sub    esp,0xc
c00118cd:	68 71 06 02 c0       	push   0xc0020671
c00118d2:	e8 30 eb ff ff       	call   c0010407 <KePanic(char const*)>
c00118d7:	83 c4 10             	add    esp,0x10
c00118da:	50                   	push   eax
c00118db:	8d 7b 05             	lea    edi,[ebx+0x5]
c00118de:	6a 00                	push   0x0
c00118e0:	6a 00                	push   0x0
c00118e2:	ff 33                	push   DWORD PTR [ebx]
c00118e4:	e8 5d 94 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c00118e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00118eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00118ed:	89 34 24             	mov    DWORD PTR [esp],esi
c00118f0:	57                   	push   edi
c00118f1:	6a 00                	push   0x0
c00118f3:	6a 2b                	push   0x2b
c00118f5:	50                   	push   eax
c00118f6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00118f9:	83 c4 1c             	add    esp,0x1c
c00118fc:	6a 00                	push   0x0
c00118fe:	6a 00                	push   0x0
c0011900:	ff 33                	push   DWORD PTR [ebx]
c0011902:	e8 3f 94 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c0011907:	83 c4 0c             	add    esp,0xc
c001190a:	6a 08                	push   0x8
c001190c:	68 82 06 02 c0       	push   0xc0020682
c0011911:	57                   	push   edi
c0011912:	e8 69 ea fe ff       	call   c0000380 <memcmp>
c0011917:	83 c4 10             	add    esp,0x10
c001191a:	85 c0                	test   eax,eax
c001191c:	74 10                	je     c001192e <CmOpen(char const*)+0x111>
c001191e:	83 ec 0c             	sub    esp,0xc
c0011921:	68 8b 06 02 c0       	push   0xc002068b
c0011926:	e8 dc ea ff ff       	call   c0010407 <KePanic(char const*)>
c001192b:	83 c4 10             	add    esp,0x10
c001192e:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011932:	83 c4 10             	add    esp,0x10
c0011935:	89 d8                	mov    eax,ebx
c0011937:	5b                   	pop    ebx
c0011938:	5e                   	pop    esi
c0011939:	5f                   	pop    edi
c001193a:	c3                   	ret    

c001193b <CmClose(Reghive_Tag*)>:
c001193b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001193f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011943:	74 0b                	je     c0011950 <CmClose(Reghive_Tag*)+0x15>
c0011945:	8b 00                	mov    eax,DWORD PTR [eax]
c0011947:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001194b:	e9 96 93 ff ff       	jmp    c000ace6 <File::close()>
c0011950:	c3                   	ret    

c0011951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011951:	53                   	push   ebx
c0011952:	83 ec 18             	sub    esp,0x18
c0011955:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011959:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001195d:	74 29                	je     c0011988 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001195f:	50                   	push   eax
c0011960:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011965:	99                   	cdq    
c0011966:	52                   	push   edx
c0011967:	50                   	push   eax
c0011968:	ff 33                	push   DWORD PTR [ebx]
c001196a:	e8 d7 93 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c001196f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011971:	5a                   	pop    edx
c0011972:	8b 10                	mov    edx,DWORD PTR [eax]
c0011974:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011978:	51                   	push   ecx
c0011979:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001197d:	6a 00                	push   0x0
c001197f:	6a 2b                	push   0x2b
c0011981:	50                   	push   eax
c0011982:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011985:	83 c4 20             	add    esp,0x20
c0011988:	83 c4 18             	add    esp,0x18
c001198b:	5b                   	pop    ebx
c001198c:	c3                   	ret    

c001198d <CmGetString(Reghive_Tag*, int, char*)>:
c001198d:	55                   	push   ebp
c001198e:	57                   	push   edi
c001198f:	56                   	push   esi
c0011990:	53                   	push   ebx
c0011991:	31 db                	xor    ebx,ebx
c0011993:	83 ec 70             	sub    esp,0x70
c0011996:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001199a:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00119a1:	50                   	push   eax
c00119a2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00119a9:	55                   	push   ebp
c00119aa:	e8 a2 ff ff ff       	call   c0011951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00119af:	83 c4 10             	add    esp,0x10
c00119b2:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00119b7:	c1 e0 08             	shl    eax,0x8
c00119ba:	89 c2                	mov    edx,eax
c00119bc:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00119c1:	09 d0                	or     eax,edx
c00119c3:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00119c8:	c1 e0 08             	shl    eax,0x8
c00119cb:	09 d0                	or     eax,edx
c00119cd:	74 25                	je     c00119f4 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00119cf:	6b fb 0d             	imul   edi,ebx,0xd
c00119d2:	52                   	push   edx
c00119d3:	8d 54 24 39          	lea    edx,[esp+0x39]
c00119d7:	52                   	push   edx
c00119d8:	50                   	push   eax
c00119d9:	55                   	push   ebp
c00119da:	e8 72 ff ff ff       	call   c0011951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00119df:	8d 74 24 49          	lea    esi,[esp+0x49]
c00119e3:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00119ea:	b9 27 00 00 00       	mov    ecx,0x27
c00119ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00119f1:	83 c4 10             	add    esp,0x10
c00119f4:	83 c3 03             	add    ebx,0x3
c00119f7:	83 fb 15             	cmp    ebx,0x15
c00119fa:	75 b6                	jne    c00119b2 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00119fc:	83 c4 6c             	add    esp,0x6c
c00119ff:	5b                   	pop    ebx
c0011a00:	5e                   	pop    esi
c0011a01:	5f                   	pop    edi
c0011a02:	5d                   	pop    ebp
c0011a03:	c3                   	ret    

c0011a04 <CmEnterDirectory(Reghive_Tag*, int)>:
c0011a04:	83 ec 40             	sub    esp,0x40
c0011a07:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011a0b:	50                   	push   eax
c0011a0c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a10:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a14:	e8 38 ff ff ff       	call   c0011951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011a19:	83 c4 10             	add    esp,0x10
c0011a1c:	83 c8 ff             	or     eax,0xffffffff
c0011a1f:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011a24:	75 19                	jne    c0011a3f <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011a26:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a2b:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011a30:	c1 e0 08             	shl    eax,0x8
c0011a33:	09 c2                	or     edx,eax
c0011a35:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011a3a:	c1 e0 10             	shl    eax,0x10
c0011a3d:	09 d0                	or     eax,edx
c0011a3f:	83 c4 3c             	add    esp,0x3c
c0011a42:	c3                   	ret    

c0011a43 <CmGetNext(Reghive_Tag*, int)>:
c0011a43:	83 ec 40             	sub    esp,0x40
c0011a46:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011a4a:	50                   	push   eax
c0011a4b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a4f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a53:	e8 f9 fe ff ff       	call   c0011951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011a58:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a5d:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011a62:	c1 e0 08             	shl    eax,0x8
c0011a65:	09 c2                	or     edx,eax
c0011a67:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011a6c:	c1 e0 10             	shl    eax,0x10
c0011a6f:	83 c4 4c             	add    esp,0x4c
c0011a72:	09 d0                	or     eax,edx
c0011a74:	c3                   	ret    

c0011a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011a75:	53                   	push   ebx
c0011a76:	83 ec 18             	sub    esp,0x18
c0011a79:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011a7d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011a81:	74 29                	je     c0011aac <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011a83:	50                   	push   eax
c0011a84:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011a89:	99                   	cdq    
c0011a8a:	52                   	push   edx
c0011a8b:	50                   	push   eax
c0011a8c:	ff 33                	push   DWORD PTR [ebx]
c0011a8e:	e8 b3 92 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c0011a93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a95:	5a                   	pop    edx
c0011a96:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a98:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011a9c:	51                   	push   ecx
c0011a9d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011aa1:	6a 00                	push   0x0
c0011aa3:	6a 2b                	push   0x2b
c0011aa5:	50                   	push   eax
c0011aa6:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011aa9:	83 c4 20             	add    esp,0x20
c0011aac:	83 c4 18             	add    esp,0x18
c0011aaf:	5b                   	pop    ebx
c0011ab0:	c3                   	ret    

c0011ab1 <CmFreeExtent(Reghive_Tag*, int)>:
c0011ab1:	53                   	push   ebx
c0011ab2:	83 ec 3c             	sub    esp,0x3c
c0011ab5:	6a 2b                	push   0x2b
c0011ab7:	6a 00                	push   0x0
c0011ab9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011abd:	53                   	push   ebx
c0011abe:	e8 fd e9 fe ff       	call   c00004c0 <memset>
c0011ac3:	83 c4 0c             	add    esp,0xc
c0011ac6:	53                   	push   ebx
c0011ac7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011acb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011acf:	e8 a1 ff ff ff       	call   c0011a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011ad4:	83 c4 48             	add    esp,0x48
c0011ad7:	5b                   	pop    ebx
c0011ad8:	c3                   	ret    

c0011ad9 <CmUpdateHeader(Reghive_Tag*)>:
c0011ad9:	83 ec 0c             	sub    esp,0xc
c0011adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ae0:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011ae4:	74 10                	je     c0011af6 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011ae6:	52                   	push   edx
c0011ae7:	8d 50 05             	lea    edx,[eax+0x5]
c0011aea:	52                   	push   edx
c0011aeb:	6a 00                	push   0x0
c0011aed:	50                   	push   eax
c0011aee:	e8 82 ff ff ff       	call   c0011a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011af3:	83 c4 10             	add    esp,0x10
c0011af6:	83 c4 0c             	add    esp,0xc
c0011af9:	c3                   	ret    

c0011afa <CmExpand(Reghive_Tag*, int)>:
c0011afa:	57                   	push   edi
c0011afb:	56                   	push   esi
c0011afc:	83 ce ff             	or     esi,0xffffffff
c0011aff:	53                   	push   ebx
c0011b00:	83 ec 30             	sub    esp,0x30
c0011b03:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011b07:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011b0b:	74 5f                	je     c0011b6c <CmExpand(Reghive_Tag*, int)+0x72>
c0011b0d:	50                   	push   eax
c0011b0e:	31 d2                	xor    edx,edx
c0011b10:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011b14:	52                   	push   edx
c0011b15:	31 f6                	xor    esi,esi
c0011b17:	50                   	push   eax
c0011b18:	ff 33                	push   DWORD PTR [ebx]
c0011b1a:	e8 27 92 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c0011b1f:	83 c4 0c             	add    esp,0xc
c0011b22:	6a 2b                	push   0x2b
c0011b24:	6a 00                	push   0x0
c0011b26:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0011b2a:	57                   	push   edi
c0011b2b:	e8 90 e9 fe ff       	call   c00004c0 <memset>
c0011b30:	83 c4 10             	add    esp,0x10
c0011b33:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0011b37:	7d 1b                	jge    c0011b54 <CmExpand(Reghive_Tag*, int)+0x5a>
c0011b39:	83 ec 0c             	sub    esp,0xc
c0011b3c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b3e:	46                   	inc    esi
c0011b3f:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0011b43:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b45:	51                   	push   ecx
c0011b46:	57                   	push   edi
c0011b47:	6a 00                	push   0x0
c0011b49:	6a 2b                	push   0x2b
c0011b4b:	50                   	push   eax
c0011b4c:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011b4f:	83 c4 20             	add    esp,0x20
c0011b52:	eb df                	jmp    c0011b33 <CmExpand(Reghive_Tag*, int)+0x39>
c0011b54:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011b58:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0011b5b:	83 ec 0c             	sub    esp,0xc
c0011b5e:	01 f2                	add    edx,esi
c0011b60:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0011b63:	53                   	push   ebx
c0011b64:	e8 70 ff ff ff       	call   c0011ad9 <CmUpdateHeader(Reghive_Tag*)>
c0011b69:	83 c4 10             	add    esp,0x10
c0011b6c:	83 c4 30             	add    esp,0x30
c0011b6f:	89 f0                	mov    eax,esi
c0011b71:	5b                   	pop    ebx
c0011b72:	5e                   	pop    esi
c0011b73:	5f                   	pop    edi
c0011b74:	c3                   	ret    

c0011b75 <CmFindUnusedExtent(Reghive_Tag*)>:
c0011b75:	55                   	push   ebp
c0011b76:	57                   	push   edi
c0011b77:	56                   	push   esi
c0011b78:	53                   	push   ebx
c0011b79:	83 cb ff             	or     ebx,0xffffffff
c0011b7c:	83 ec 1c             	sub    esp,0x1c
c0011b7f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011b83:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0011b87:	74 68                	je     c0011bf1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011b89:	51                   	push   ecx
c0011b8a:	be 2b 00 00 00       	mov    esi,0x2b
c0011b8f:	6a 00                	push   0x0
c0011b91:	31 ff                	xor    edi,edi
c0011b93:	6a 00                	push   0x0
c0011b95:	31 db                	xor    ebx,ebx
c0011b97:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011b9a:	e8 a7 91 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c0011b9f:	83 c4 10             	add    esp,0x10
c0011ba2:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0011ba5:	76 3b                	jbe    c0011be2 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0011ba7:	83 ec 0c             	sub    esp,0xc
c0011baa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011bad:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011bb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bb3:	51                   	push   ecx
c0011bb4:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0011bb8:	51                   	push   ecx
c0011bb9:	6a 00                	push   0x0
c0011bbb:	6a 01                	push   0x1
c0011bbd:	50                   	push   eax
c0011bbe:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011bc1:	83 c4 20             	add    esp,0x20
c0011bc4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bc9:	74 26                	je     c0011bf1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011bcb:	52                   	push   edx
c0011bcc:	43                   	inc    ebx
c0011bcd:	57                   	push   edi
c0011bce:	56                   	push   esi
c0011bcf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011bd2:	e8 6f 91 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c0011bd7:	83 c6 2b             	add    esi,0x2b
c0011bda:	83 d7 00             	adc    edi,0x0
c0011bdd:	83 c4 10             	add    esp,0x10
c0011be0:	eb c0                	jmp    c0011ba2 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0011be2:	50                   	push   eax
c0011be3:	50                   	push   eax
c0011be4:	6a 40                	push   0x40
c0011be6:	55                   	push   ebp
c0011be7:	e8 0e ff ff ff       	call   c0011afa <CmExpand(Reghive_Tag*, int)>
c0011bec:	83 c4 10             	add    esp,0x10
c0011bef:	89 c3                	mov    ebx,eax
c0011bf1:	83 c4 1c             	add    esp,0x1c
c0011bf4:	89 d8                	mov    eax,ebx
c0011bf6:	5b                   	pop    ebx
c0011bf7:	5e                   	pop    esi
c0011bf8:	5f                   	pop    edi
c0011bf9:	5d                   	pop    ebp
c0011bfa:	c3                   	ret    

c0011bfb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0011bfb:	55                   	push   ebp
c0011bfc:	57                   	push   edi
c0011bfd:	56                   	push   esi
c0011bfe:	53                   	push   ebx
c0011bff:	81 ec 88 00 00 00    	sub    esp,0x88
c0011c05:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0011c0c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011c13:	e8 5d ff ff ff       	call   c0011b75 <CmFindUnusedExtent(Reghive_Tag*)>
c0011c18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c1c:	83 c4 0c             	add    esp,0xc
c0011c1f:	6a 2b                	push   0x2b
c0011c21:	6a 00                	push   0x0
c0011c23:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0011c27:	55                   	push   ebp
c0011c28:	e8 93 e8 fe ff       	call   c00004c0 <memset>
c0011c2d:	83 c4 10             	add    esp,0x10
c0011c30:	85 db                	test   ebx,ebx
c0011c32:	74 12                	je     c0011c46 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0011c34:	51                   	push   ecx
c0011c35:	55                   	push   ebp
c0011c36:	53                   	push   ebx
c0011c37:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011c3e:	e8 0e fd ff ff       	call   c0011951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011c43:	83 c4 10             	add    esp,0x10
c0011c46:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0011c4a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011c51:	b9 2b 00 00 00       	mov    ecx,0x2b
c0011c56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011c58:	85 db                	test   ebx,ebx
c0011c5a:	74 49                	je     c0011ca5 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0011c5c:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0011c61:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0011c66:	c1 e0 08             	shl    eax,0x8
c0011c69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c6d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0011c73:	09 c8                	or     eax,ecx
c0011c75:	74 11                	je     c0011c88 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0011c77:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0011c7b:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0011c7f:	c1 e8 10             	shr    eax,0x10
c0011c82:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0011c86:	eb 0f                	jmp    c0011c97 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0011c88:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011c8d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011c92:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011c97:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0011c9b:	c1 ea 08             	shr    edx,0x8
c0011c9e:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0011ca3:	eb 0f                	jmp    c0011cb4 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0011ca5:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011caa:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011caf:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011cb4:	52                   	push   edx
c0011cb5:	8d 44 24 49          	lea    eax,[esp+0x49]
c0011cb9:	50                   	push   eax
c0011cba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cbe:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011cc5:	e8 ab fd ff ff       	call   c0011a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011cca:	83 c4 10             	add    esp,0x10
c0011ccd:	85 db                	test   ebx,ebx
c0011ccf:	74 12                	je     c0011ce3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0011cd1:	50                   	push   eax
c0011cd2:	55                   	push   ebp
c0011cd3:	53                   	push   ebx
c0011cd4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011cdb:	e8 95 fd ff ff       	call   c0011a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011ce0:	83 c4 10             	add    esp,0x10
c0011ce3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ce7:	83 c4 7c             	add    esp,0x7c
c0011cea:	5b                   	pop    ebx
c0011ceb:	5e                   	pop    esi
c0011cec:	5f                   	pop    edi
c0011ced:	5d                   	pop    ebp
c0011cee:	c3                   	ret    

c0011cef <CmSetString(Reghive_Tag*, int, char const*)>:
c0011cef:	55                   	push   ebp
c0011cf0:	57                   	push   edi
c0011cf1:	56                   	push   esi
c0011cf2:	53                   	push   ebx
c0011cf3:	bb 27 00 00 00       	mov    ebx,0x27
c0011cf8:	81 ec 88 00 00 00    	sub    esp,0x88
c0011cfe:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011d05:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0011d0c:	e8 1f e8 fe ff       	call   c0000530 <strlen>
c0011d11:	8d 48 26             	lea    ecx,[eax+0x26]
c0011d14:	89 c8                	mov    eax,ecx
c0011d16:	99                   	cdq    
c0011d17:	f7 fb                	idiv   ebx
c0011d19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011d1d:	83 c4 10             	add    esp,0x10
c0011d20:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0011d26:	7e 10                	jle    c0011d38 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0011d28:	83 ec 0c             	sub    esp,0xc
c0011d2b:	68 9c 06 02 c0       	push   0xc002069c
c0011d30:	e8 d2 e6 ff ff       	call   c0010407 <KePanic(char const*)>
c0011d35:	83 c4 10             	add    esp,0x10
c0011d38:	50                   	push   eax
c0011d39:	31 ff                	xor    edi,edi
c0011d3b:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0011d3f:	53                   	push   ebx
c0011d40:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011d47:	56                   	push   esi
c0011d48:	e8 04 fc ff ff       	call   c0011951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011d4d:	83 c4 10             	add    esp,0x10
c0011d50:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0011d54:	89 d0                	mov    eax,edx
c0011d56:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0011d5a:	c1 e0 08             	shl    eax,0x8
c0011d5d:	09 c2                	or     edx,eax
c0011d5f:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0011d63:	c1 e2 08             	shl    edx,0x8
c0011d66:	09 c2                	or     edx,eax
c0011d68:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0011d6c:	7e 76                	jle    c0011de4 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0011d6e:	85 d2                	test   edx,edx
c0011d70:	75 25                	jne    c0011d97 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0011d72:	8d 44 24 45          	lea    eax,[esp+0x45]
c0011d76:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0011d7b:	50                   	push   eax
c0011d7c:	6a 00                	push   0x0
c0011d7e:	6a 00                	push   0x0
c0011d80:	56                   	push   esi
c0011d81:	e8 75 fe ff ff       	call   c0011bfb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0011d86:	89 c2                	mov    edx,eax
c0011d88:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0011d8b:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0011d8e:	83 c4 10             	add    esp,0x10
c0011d91:	c1 f8 10             	sar    eax,0x10
c0011d94:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0011d97:	55                   	push   ebp
c0011d98:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0011d9c:	55                   	push   ebp
c0011d9d:	52                   	push   edx
c0011d9e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0011da2:	56                   	push   esi
c0011da3:	e8 a9 fb ff ff       	call   c0011951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011da8:	83 c4 0c             	add    esp,0xc
c0011dab:	6a 27                	push   0x27
c0011dad:	6a 00                	push   0x0
c0011daf:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011db3:	51                   	push   ecx
c0011db4:	e8 07 e7 fe ff       	call   c00004c0 <memset>
c0011db9:	6b c7 27             	imul   eax,edi,0x27
c0011dbc:	83 c4 0c             	add    esp,0xc
c0011dbf:	6a 27                	push   0x27
c0011dc1:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0011dc8:	50                   	push   eax
c0011dc9:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011dcd:	51                   	push   ecx
c0011dce:	e8 4d e8 fe ff       	call   c0000620 <strncpy>
c0011dd3:	83 c4 0c             	add    esp,0xc
c0011dd6:	55                   	push   ebp
c0011dd7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011ddb:	52                   	push   edx
c0011ddc:	56                   	push   esi
c0011ddd:	e8 93 fc ff ff       	call   c0011a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011de2:	eb 19                	jmp    c0011dfd <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0011de4:	85 d2                	test   edx,edx
c0011de6:	74 18                	je     c0011e00 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0011de8:	51                   	push   ecx
c0011de9:	51                   	push   ecx
c0011dea:	52                   	push   edx
c0011deb:	56                   	push   esi
c0011dec:	e8 c0 fc ff ff       	call   c0011ab1 <CmFreeExtent(Reghive_Tag*, int)>
c0011df1:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0011df5:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0011df9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0011dfd:	83 c4 10             	add    esp,0x10
c0011e00:	47                   	inc    edi
c0011e01:	83 c3 03             	add    ebx,0x3
c0011e04:	83 ff 07             	cmp    edi,0x7
c0011e07:	0f 85 43 ff ff ff    	jne    c0011d50 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0011e0d:	50                   	push   eax
c0011e0e:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0011e12:	50                   	push   eax
c0011e13:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011e1a:	56                   	push   esi
c0011e1b:	e8 55 fc ff ff       	call   c0011a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011e20:	81 c4 8c 00 00 00    	add    esp,0x8c
c0011e26:	5b                   	pop    ebx
c0011e27:	5e                   	pop    esi
c0011e28:	5f                   	pop    edi
c0011e29:	5d                   	pop    ebp
c0011e2a:	c3                   	ret    

c0011e2b <CmGetMatch(char*, char*, bool, bool*)>:
c0011e2b:	56                   	push   esi
c0011e2c:	53                   	push   ebx
c0011e2d:	50                   	push   eax
c0011e2e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011e32:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0011e37:	74 25                	je     c0011e5e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0011e39:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011e3c:	31 db                	xor    ebx,ebx
c0011e3e:	50                   	push   eax
c0011e3f:	50                   	push   eax
c0011e40:	8d 04 9d e0 1a 02 c0 	lea    eax,[ebx*4-0x3ffde520]
c0011e47:	50                   	push   eax
c0011e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e4c:	e8 8f e8 fe ff       	call   c00006e0 <strcmp>
c0011e51:	83 c4 10             	add    esp,0x10
c0011e54:	85 c0                	test   eax,eax
c0011e56:	74 2e                	je     c0011e86 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011e58:	43                   	inc    ebx
c0011e59:	83 fb 3f             	cmp    ebx,0x3f
c0011e5c:	75 e0                	jne    c0011e3e <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0011e5e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011e61:	31 db                	xor    ebx,ebx
c0011e63:	51                   	push   ecx
c0011e64:	8d 04 9d e0 1a 02 c0 	lea    eax,[ebx*4-0x3ffde520]
c0011e6b:	51                   	push   ecx
c0011e6c:	50                   	push   eax
c0011e6d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e71:	e8 6a e8 fe ff       	call   c00006e0 <strcmp>
c0011e76:	83 c4 10             	add    esp,0x10
c0011e79:	85 c0                	test   eax,eax
c0011e7b:	74 09                	je     c0011e86 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011e7d:	43                   	inc    ebx
c0011e7e:	83 fb 3f             	cmp    ebx,0x3f
c0011e81:	75 e0                	jne    c0011e63 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0011e83:	83 cb ff             	or     ebx,0xffffffff
c0011e86:	5a                   	pop    edx
c0011e87:	89 d8                	mov    eax,ebx
c0011e89:	5b                   	pop    ebx
c0011e8a:	5e                   	pop    esi
c0011e8b:	c3                   	ret    

c0011e8c <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0011e8c:	55                   	push   ebp
c0011e8d:	31 c0                	xor    eax,eax
c0011e8f:	57                   	push   edi
c0011e90:	56                   	push   esi
c0011e91:	53                   	push   ebx
c0011e92:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011e96:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011e9a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011e9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ea2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011ea4:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0011ea7:	83 fd 1f             	cmp    ebp,0x1f
c0011eaa:	7f 0b                	jg     c0011eb7 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0011eac:	0f b6 c2             	movzx  eax,dl
c0011eaf:	d3 e0                	shl    eax,cl
c0011eb1:	09 07                	or     DWORD PTR [edi],eax
c0011eb3:	b0 01                	mov    al,0x1
c0011eb5:	01 33                	add    DWORD PTR [ebx],esi
c0011eb7:	5b                   	pop    ebx
c0011eb8:	5e                   	pop    esi
c0011eb9:	5f                   	pop    edi
c0011eba:	5d                   	pop    ebp
c0011ebb:	c3                   	ret    

c0011ebc <CmGetShift(unsigned int*, int*, int, bool*)>:
c0011ebc:	57                   	push   edi
c0011ebd:	56                   	push   esi
c0011ebe:	53                   	push   ebx
c0011ebf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011ec3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011ec7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0011ecb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011ecf:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0011ed1:	7c 17                	jl     c0011eea <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0011ed3:	b8 01 00 00 00       	mov    eax,0x1
c0011ed8:	8b 17                	mov    edx,DWORD PTR [edi]
c0011eda:	d3 e0                	shl    eax,cl
c0011edc:	48                   	dec    eax
c0011edd:	21 d0                	and    eax,edx
c0011edf:	d3 ea                	shr    edx,cl
c0011ee1:	89 17                	mov    DWORD PTR [edi],edx
c0011ee3:	29 0b                	sub    DWORD PTR [ebx],ecx
c0011ee5:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011ee8:	eb 05                	jmp    c0011eef <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0011eea:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011eed:	31 c0                	xor    eax,eax
c0011eef:	5b                   	pop    ebx
c0011ef0:	5e                   	pop    esi
c0011ef1:	5f                   	pop    edi
c0011ef2:	c3                   	ret    

c0011ef3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0011ef3:	83 ec 40             	sub    esp,0x40
c0011ef6:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011efa:	50                   	push   eax
c0011efb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011eff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f03:	e8 49 fa ff ff       	call   c0011951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f08:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011f0c:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0011f10:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0011f14:	89 10                	mov    DWORD PTR [eax],edx
c0011f16:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0011f19:	83 c4 4c             	add    esp,0x4c
c0011f1c:	c3                   	ret    

c0011f1d <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0011f1d:	55                   	push   ebp
c0011f1e:	57                   	push   edi
c0011f1f:	56                   	push   esi
c0011f20:	53                   	push   ebx
c0011f21:	83 ec 40             	sub    esp,0x40
c0011f24:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0011f28:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0011f2c:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0011f30:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0011f34:	53                   	push   ebx
c0011f35:	56                   	push   esi
c0011f36:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011f3a:	e8 12 fa ff ff       	call   c0011951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f3f:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0011f43:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0011f47:	83 c4 0c             	add    esp,0xc
c0011f4a:	53                   	push   ebx
c0011f4b:	56                   	push   esi
c0011f4c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011f50:	e8 20 fb ff ff       	call   c0011a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f55:	83 c4 4c             	add    esp,0x4c
c0011f58:	5b                   	pop    ebx
c0011f59:	5e                   	pop    esi
c0011f5a:	5f                   	pop    edi
c0011f5b:	5d                   	pop    ebp
c0011f5c:	c3                   	ret    

c0011f5d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0011f5d:	55                   	push   ebp
c0011f5e:	57                   	push   edi
c0011f5f:	56                   	push   esi
c0011f60:	31 f6                	xor    esi,esi
c0011f62:	53                   	push   ebx
c0011f63:	31 db                	xor    ebx,ebx
c0011f65:	83 ec 40             	sub    esp,0x40
c0011f68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011f70:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011f78:	6a 12                	push   0x12
c0011f7a:	68 ee 00 00 00       	push   0xee
c0011f7f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011f83:	e8 38 e5 fe ff       	call   c00004c0 <memset>
c0011f88:	83 c4 10             	add    esp,0x10
c0011f8b:	6a 08                	push   0x8
c0011f8d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011f91:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0011f95:	50                   	push   eax
c0011f96:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011f9a:	57                   	push   edi
c0011f9b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0011f9f:	55                   	push   ebp
c0011fa0:	e8 e7 fe ff ff       	call   c0011e8c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0011fa5:	83 c4 10             	add    esp,0x10
c0011fa8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0011fac:	50                   	push   eax
c0011fad:	6a 06                	push   0x6
c0011faf:	57                   	push   edi
c0011fb0:	55                   	push   ebp
c0011fb1:	e8 06 ff ff ff       	call   c0011ebc <CmGetShift(unsigned int*, int*, int, bool*)>
c0011fb6:	83 c4 10             	add    esp,0x10
c0011fb9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011fbe:	74 07                	je     c0011fc7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0011fc0:	46                   	inc    esi
c0011fc1:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0011fc5:	eb e1                	jmp    c0011fa8 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0011fc7:	43                   	inc    ebx
c0011fc8:	83 fb 12             	cmp    ebx,0x12
c0011fcb:	75 be                	jne    c0011f8b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x2e>
c0011fcd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011fd1:	31 db                	xor    ebx,ebx
c0011fd3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011fd6:	50                   	push   eax
c0011fd7:	50                   	push   eax
c0011fd8:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0011fdd:	43                   	inc    ebx
c0011fde:	8d 04 85 e0 1a 02 c0 	lea    eax,[eax*4-0x3ffde520]
c0011fe5:	50                   	push   eax
c0011fe6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011fea:	e8 d1 e7 fe ff       	call   c00007c0 <strcat>
c0011fef:	83 c4 10             	add    esp,0x10
c0011ff2:	83 fb 18             	cmp    ebx,0x18
c0011ff5:	75 df                	jne    c0011fd6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0011ff7:	83 c4 3c             	add    esp,0x3c
c0011ffa:	31 c0                	xor    eax,eax
c0011ffc:	5b                   	pop    ebx
c0011ffd:	5e                   	pop    esi
c0011ffe:	5f                   	pop    edi
c0011fff:	5d                   	pop    ebp
c0012000:	c3                   	ret    

c0012001 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012001:	83 ec 40             	sub    esp,0x40
c0012004:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012008:	50                   	push   eax
c0012009:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001200d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012011:	e8 3b f9 ff ff       	call   c0011951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012016:	58                   	pop    eax
c0012017:	5a                   	pop    edx
c0012018:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001201c:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012020:	50                   	push   eax
c0012021:	e8 37 ff ff ff       	call   c0011f5d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012026:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c001202b:	83 c4 4c             	add    esp,0x4c
c001202e:	c3                   	ret    

c001202f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c001202f:	55                   	push   ebp
c0012030:	57                   	push   edi
c0012031:	56                   	push   esi
c0012032:	53                   	push   ebx
c0012033:	31 db                	xor    ebx,ebx
c0012035:	83 ec 70             	sub    esp,0x70
c0012038:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c001203f:	6a 30                	push   0x30
c0012041:	6a 00                	push   0x0
c0012043:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012047:	56                   	push   esi
c0012048:	e8 73 e4 fe ff       	call   c00004c0 <memset>
c001204d:	83 c4 10             	add    esp,0x10
c0012050:	83 ec 0c             	sub    esp,0xc
c0012053:	57                   	push   edi
c0012054:	e8 d7 e4 fe ff       	call   c0000530 <strlen>
c0012059:	83 c4 10             	add    esp,0x10
c001205c:	39 d8                	cmp    eax,ebx
c001205e:	76 16                	jbe    c0012076 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012060:	83 ec 0c             	sub    esp,0xc
c0012063:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012067:	50                   	push   eax
c0012068:	e8 43 e8 fe ff       	call   c00008b0 <toupper>
c001206d:	83 c4 10             	add    esp,0x10
c0012070:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012073:	43                   	inc    ebx
c0012074:	eb da                	jmp    c0012050 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012076:	52                   	push   edx
c0012077:	31 f6                	xor    esi,esi
c0012079:	6a 18                	push   0x18
c001207b:	31 ff                	xor    edi,edi
c001207d:	6a 3f                	push   0x3f
c001207f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012083:	50                   	push   eax
c0012084:	e8 37 e4 fe ff       	call   c00004c0 <memset>
c0012089:	83 c4 10             	add    esp,0x10
c001208c:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0012090:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0012094:	84 c0                	test   al,al
c0012096:	0f 84 b0 00 00 00    	je     c001214c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001209c:	8d 6e 01             	lea    ebp,[esi+0x1]
c001209f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00120a3:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00120a8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00120ac:	8a 54 2c 30          	mov    dl,BYTE PTR [esp+ebp*1+0x30]
c00120b0:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00120b5:	88 54 24 15          	mov    BYTE PTR [esp+0x15],dl
c00120b9:	83 ec 0c             	sub    esp,0xc
c00120bc:	53                   	push   ebx
c00120bd:	e8 6e e4 fe ff       	call   c0000530 <strlen>
c00120c2:	83 c4 10             	add    esp,0x10
c00120c5:	85 c0                	test   eax,eax
c00120c7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00120cb:	74 0b                	je     c00120d8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00120cd:	50                   	push   eax
c00120ce:	6a 01                	push   0x1
c00120d0:	53                   	push   ebx
c00120d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00120d5:	50                   	push   eax
c00120d6:	eb 0a                	jmp    c00120e2 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00120d8:	50                   	push   eax
c00120d9:	6a 00                	push   0x0
c00120db:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00120df:	50                   	push   eax
c00120e0:	6a 00                	push   0x0
c00120e2:	e8 44 fd ff ff       	call   c0011e2b <CmGetMatch(char*, char*, bool, bool*)>
c00120e7:	83 c4 10             	add    esp,0x10
c00120ea:	83 f8 ff             	cmp    eax,0xffffffff
c00120ed:	75 1a                	jne    c0012109 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00120ef:	83 ec 0c             	sub    esp,0xc
c00120f2:	68 b1 06 02 c0       	push   0xc00206b1
c00120f7:	e8 0b e3 ff ff       	call   c0010407 <KePanic(char const*)>
c00120fc:	83 c4 10             	add    esp,0x10
c00120ff:	b8 02 00 00 00       	mov    eax,0x2
c0012104:	e9 bc 00 00 00       	jmp    c00121c5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012109:	83 ff 18             	cmp    edi,0x18
c001210c:	75 1a                	jne    c0012128 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c001210e:	83 ec 0c             	sub    esp,0xc
c0012111:	68 c6 06 02 c0       	push   0xc00206c6
c0012116:	e8 ec e2 ff ff       	call   c0010407 <KePanic(char const*)>
c001211b:	83 c4 10             	add    esp,0x10
c001211e:	b8 01 00 00 00       	mov    eax,0x1
c0012123:	e9 9d 00 00 00       	jmp    c00121c5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012128:	47                   	inc    edi
c0012129:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001212e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012132:	74 02                	je     c0012136 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0012134:	89 ee                	mov    esi,ebp
c0012136:	83 ec 0c             	sub    esp,0xc
c0012139:	53                   	push   ebx
c001213a:	e8 f1 e3 fe ff       	call   c0000530 <strlen>
c001213f:	83 c4 10             	add    esp,0x10
c0012142:	85 c0                	test   eax,eax
c0012144:	74 06                	je     c001214c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012146:	46                   	inc    esi
c0012147:	e9 40 ff ff ff       	jmp    c001208c <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001214c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012154:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001215c:	50                   	push   eax
c001215d:	31 f6                	xor    esi,esi
c001215f:	6a 12                	push   0x12
c0012161:	31 ff                	xor    edi,edi
c0012163:	68 ee 00 00 00       	push   0xee
c0012168:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001216f:	e8 4c e3 fe ff       	call   c00004c0 <memset>
c0012174:	83 c4 10             	add    esp,0x10
c0012177:	83 fe 17             	cmp    esi,0x17
c001217a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001217e:	7e 26                	jle    c00121a6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0012180:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012184:	50                   	push   eax
c0012185:	6a 08                	push   0x8
c0012187:	55                   	push   ebp
c0012188:	53                   	push   ebx
c0012189:	e8 2e fd ff ff       	call   c0011ebc <CmGetShift(unsigned int*, int*, int, bool*)>
c001218e:	83 c4 10             	add    esp,0x10
c0012191:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012196:	74 26                	je     c00121be <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0012198:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001219f:	4e                   	dec    esi
c00121a0:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00121a3:	47                   	inc    edi
c00121a4:	eb 1c                	jmp    c00121c2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00121a6:	6a 06                	push   0x6
c00121a8:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00121ad:	50                   	push   eax
c00121ae:	55                   	push   ebp
c00121af:	53                   	push   ebx
c00121b0:	e8 d7 fc ff ff       	call   c0011e8c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00121b5:	83 c4 10             	add    esp,0x10
c00121b8:	84 c0                	test   al,al
c00121ba:	75 06                	jne    c00121c2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00121bc:	eb c2                	jmp    c0012180 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c00121be:	31 c0                	xor    eax,eax
c00121c0:	eb 03                	jmp    c00121c5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00121c2:	46                   	inc    esi
c00121c3:	eb b2                	jmp    c0012177 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00121c5:	83 c4 6c             	add    esp,0x6c
c00121c8:	5b                   	pop    ebx
c00121c9:	5e                   	pop    esi
c00121ca:	5f                   	pop    edi
c00121cb:	5d                   	pop    ebp
c00121cc:	c3                   	ret    

c00121cd <CmCreateString(Reghive_Tag*, int, char const*)>:
c00121cd:	53                   	push   ebx
c00121ce:	83 ec 3c             	sub    esp,0x3c
c00121d1:	6a 2b                	push   0x2b
c00121d3:	6a 00                	push   0x0
c00121d5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00121d9:	53                   	push   ebx
c00121da:	e8 e1 e2 fe ff       	call   c00004c0 <memset>
c00121df:	58                   	pop    eax
c00121e0:	5a                   	pop    edx
c00121e1:	8d 44 24 11          	lea    eax,[esp+0x11]
c00121e5:	50                   	push   eax
c00121e6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00121ea:	e8 40 fe ff ff       	call   c001202f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00121ef:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00121f4:	83 c4 0c             	add    esp,0xc
c00121f7:	6a 15                	push   0x15
c00121f9:	6a 00                	push   0x0
c00121fb:	8d 44 24 27          	lea    eax,[esp+0x27]
c00121ff:	50                   	push   eax
c0012200:	e8 bb e2 fe ff       	call   c00004c0 <memset>
c0012205:	53                   	push   ebx
c0012206:	6a 00                	push   0x0
c0012208:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001220c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012210:	e8 e6 f9 ff ff       	call   c0011bfb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012215:	83 c4 58             	add    esp,0x58
c0012218:	5b                   	pop    ebx
c0012219:	c3                   	ret    

c001221a <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001221a:	56                   	push   esi
c001221b:	53                   	push   ebx
c001221c:	83 ec 48             	sub    esp,0x48
c001221f:	6a 12                	push   0x12
c0012221:	68 ff 00 00 00       	push   0xff
c0012226:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001222a:	56                   	push   esi
c001222b:	e8 90 e2 fe ff       	call   c00004c0 <memset>
c0012230:	5a                   	pop    edx
c0012231:	59                   	pop    ecx
c0012232:	56                   	push   esi
c0012233:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012237:	e8 f3 fd ff ff       	call   c001202f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001223c:	83 c4 10             	add    esp,0x10
c001223f:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0012243:	85 db                	test   ebx,ebx
c0012245:	74 42                	je     c0012289 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0012247:	50                   	push   eax
c0012248:	8d 44 24 19          	lea    eax,[esp+0x19]
c001224c:	50                   	push   eax
c001224d:	53                   	push   ebx
c001224e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012252:	e8 fa f6 ff ff       	call   c0011951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012257:	83 c4 0c             	add    esp,0xc
c001225a:	6a 12                	push   0x12
c001225c:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012260:	50                   	push   eax
c0012261:	56                   	push   esi
c0012262:	e8 19 e1 fe ff       	call   c0000380 <memcmp>
c0012267:	83 c4 10             	add    esp,0x10
c001226a:	85 c0                	test   eax,eax
c001226c:	74 1e                	je     c001228c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001226e:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012273:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0012278:	c1 e3 08             	shl    ebx,0x8
c001227b:	09 d8                	or     eax,ebx
c001227d:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0012282:	c1 e3 10             	shl    ebx,0x10
c0012285:	09 c3                	or     ebx,eax
c0012287:	eb ba                	jmp    c0012243 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012289:	83 cb ff             	or     ebx,0xffffffff
c001228c:	83 c4 44             	add    esp,0x44
c001228f:	89 d8                	mov    eax,ebx
c0012291:	5b                   	pop    ebx
c0012292:	5e                   	pop    esi
c0012293:	c3                   	ret    

c0012294 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0012294:	57                   	push   edi
c0012295:	56                   	push   esi
c0012296:	53                   	push   ebx
c0012297:	83 ec 34             	sub    esp,0x34
c001229a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001229e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00122a2:	6a 2b                	push   0x2b
c00122a4:	6a 00                	push   0x0
c00122a6:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00122aa:	53                   	push   ebx
c00122ab:	e8 10 e2 fe ff       	call   c00004c0 <memset>
c00122b0:	58                   	pop    eax
c00122b1:	5a                   	pop    edx
c00122b2:	8d 44 24 11          	lea    eax,[esp+0x11]
c00122b6:	50                   	push   eax
c00122b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00122bb:	e8 6f fd ff ff       	call   c001202f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00122c0:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00122c4:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00122c8:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00122cc:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00122d0:	53                   	push   ebx
c00122d1:	6a 00                	push   0x0
c00122d3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00122d7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00122db:	e8 1b f9 ff ff       	call   c0011bfb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00122e0:	83 c4 50             	add    esp,0x50
c00122e3:	5b                   	pop    ebx
c00122e4:	5e                   	pop    esi
c00122e5:	5f                   	pop    edi
c00122e6:	c3                   	ret    

c00122e7 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00122e7:	55                   	push   ebp
c00122e8:	57                   	push   edi
c00122e9:	56                   	push   esi
c00122ea:	53                   	push   ebx
c00122eb:	83 ec 40             	sub    esp,0x40
c00122ee:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00122f2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00122f6:	6a 2b                	push   0x2b
c00122f8:	6a 00                	push   0x0
c00122fa:	8d 74 24 11          	lea    esi,[esp+0x11]
c00122fe:	56                   	push   esi
c00122ff:	e8 bc e1 fe ff       	call   c00004c0 <memset>
c0012304:	5f                   	pop    edi
c0012305:	89 ef                	mov    edi,ebp
c0012307:	58                   	pop    eax
c0012308:	8d 44 24 11          	lea    eax,[esp+0x11]
c001230c:	50                   	push   eax
c001230d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0012311:	e8 19 fd ff ff       	call   c001202f <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012316:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001231b:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0012320:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012325:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001232a:	83 c4 10             	add    esp,0x10
c001232d:	85 ed                	test   ebp,ebp
c001232f:	74 14                	je     c0012345 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012331:	51                   	push   ecx
c0012332:	51                   	push   ecx
c0012333:	57                   	push   edi
c0012334:	53                   	push   ebx
c0012335:	e8 09 f7 ff ff       	call   c0011a43 <CmGetNext(Reghive_Tag*, int)>
c001233a:	83 c4 10             	add    esp,0x10
c001233d:	85 c0                	test   eax,eax
c001233f:	74 04                	je     c0012345 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0012341:	89 c7                	mov    edi,eax
c0012343:	eb e8                	jmp    c001232d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0012345:	56                   	push   esi
c0012346:	6a 00                	push   0x0
c0012348:	57                   	push   edi
c0012349:	53                   	push   ebx
c001234a:	e8 ac f8 ff ff       	call   c0011bfb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001234f:	83 c4 0c             	add    esp,0xc
c0012352:	89 c7                	mov    edi,eax
c0012354:	56                   	push   esi
c0012355:	50                   	push   eax
c0012356:	53                   	push   ebx
c0012357:	e8 f5 f5 ff ff       	call   c0011951 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001235c:	58                   	pop    eax
c001235d:	5a                   	pop    edx
c001235e:	6a 6c                	push   0x6c
c0012360:	6a 00                	push   0x0
c0012362:	6a 00                	push   0x0
c0012364:	68 d7 06 02 c0       	push   0xc00206d7
c0012369:	57                   	push   edi
c001236a:	53                   	push   ebx
c001236b:	e8 24 ff ff ff       	call   c0012294 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012370:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0012374:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0012378:	c1 e8 10             	shr    eax,0x10
c001237b:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001237f:	83 c4 1c             	add    esp,0x1c
c0012382:	56                   	push   esi
c0012383:	57                   	push   edi
c0012384:	53                   	push   ebx
c0012385:	e8 eb f6 ff ff       	call   c0011a75 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001238a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001238f:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012394:	c1 e0 08             	shl    eax,0x8
c0012397:	09 c2                	or     edx,eax
c0012399:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001239e:	c1 e0 10             	shl    eax,0x10
c00123a1:	83 c4 4c             	add    esp,0x4c
c00123a4:	09 d0                	or     eax,edx
c00123a6:	5b                   	pop    ebx
c00123a7:	5e                   	pop    esi
c00123a8:	5f                   	pop    edi
c00123a9:	5d                   	pop    ebp
c00123aa:	c3                   	ret    

c00123ab <zStrtok(char*, char const*)>:
c00123ab:	57                   	push   edi
c00123ac:	56                   	push   esi
c00123ad:	53                   	push   ebx
c00123ae:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00123b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123b6:	85 ff                	test   edi,edi
c00123b8:	74 2b                	je     c00123e5 <zStrtok(char*, char const*)+0x3a>
c00123ba:	85 c0                	test   eax,eax
c00123bc:	75 09                	jne    c00123c7 <zStrtok(char*, char const*)+0x1c>
c00123be:	a1 90 69 02 c0       	mov    eax,ds:0xc0026990
c00123c3:	85 c0                	test   eax,eax
c00123c5:	74 49                	je     c0012410 <zStrtok(char*, char const*)+0x65>
c00123c7:	31 c9                	xor    ecx,ecx
c00123c9:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00123cd:	74 03                	je     c00123d2 <zStrtok(char*, char const*)+0x27>
c00123cf:	41                   	inc    ecx
c00123d0:	eb f7                	jmp    c00123c9 <zStrtok(char*, char const*)+0x1e>
c00123d2:	31 d2                	xor    edx,edx
c00123d4:	39 ca                	cmp    edx,ecx
c00123d6:	74 11                	je     c00123e9 <zStrtok(char*, char const*)+0x3e>
c00123d8:	8a 1f                	mov    bl,BYTE PTR [edi]
c00123da:	8d 34 10             	lea    esi,[eax+edx*1]
c00123dd:	38 1c 10             	cmp    BYTE PTR [eax+edx*1],bl
c00123e0:	74 13                	je     c00123f5 <zStrtok(char*, char const*)+0x4a>
c00123e2:	42                   	inc    edx
c00123e3:	eb ef                	jmp    c00123d4 <zStrtok(char*, char const*)+0x29>
c00123e5:	31 c0                	xor    eax,eax
c00123e7:	eb 27                	jmp    c0012410 <zStrtok(char*, char const*)+0x65>
c00123e9:	c7 05 90 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026990,0x0
c00123f3:	eb 1b                	jmp    c0012410 <zStrtok(char*, char const*)+0x65>
c00123f5:	3a 18                	cmp    bl,BYTE PTR [eax]
c00123f7:	75 0a                	jne    c0012403 <zStrtok(char*, char const*)+0x58>
c00123f9:	40                   	inc    eax
c00123fa:	a3 90 69 02 c0       	mov    ds:0xc0026990,eax
c00123ff:	89 f8                	mov    eax,edi
c0012401:	eb 0d                	jmp    c0012410 <zStrtok(char*, char const*)+0x65>
c0012403:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0012407:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001240a:	89 15 90 69 02 c0    	mov    DWORD PTR ds:0xc0026990,edx
c0012410:	5b                   	pop    ebx
c0012411:	5e                   	pop    esi
c0012412:	5f                   	pop    edi
c0012413:	c3                   	ret    

c0012414 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0012414:	57                   	push   edi
c0012415:	56                   	push   esi
c0012416:	53                   	push   ebx
c0012417:	81 ec 08 01 00 00    	sub    esp,0x108
c001241d:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0012424:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001242b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001242f:	53                   	push   ebx
c0012430:	e8 bb e1 fe ff       	call   c00005f0 <strcpy>
c0012435:	59                   	pop    ecx
c0012436:	5e                   	pop    esi
c0012437:	68 3b 0a 02 c0       	push   0xc0020a3b
c001243c:	53                   	push   ebx
c001243d:	e8 69 ff ff ff       	call   c00123ab <zStrtok(char*, char const*)>
c0012442:	bb 01 00 00 00       	mov    ebx,0x1
c0012447:	83 c4 10             	add    esp,0x10
c001244a:	85 c0                	test   eax,eax
c001244c:	74 3b                	je     c0012489 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001244e:	52                   	push   edx
c001244f:	50                   	push   eax
c0012450:	6a 01                	push   0x1
c0012452:	57                   	push   edi
c0012453:	e8 c2 fd ff ff       	call   c001221a <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012458:	59                   	pop    ecx
c0012459:	89 c3                	mov    ebx,eax
c001245b:	5e                   	pop    esi
c001245c:	68 3b 0a 02 c0       	push   0xc0020a3b
c0012461:	6a 00                	push   0x0
c0012463:	e8 43 ff ff ff       	call   c00123ab <zStrtok(char*, char const*)>
c0012468:	83 c4 10             	add    esp,0x10
c001246b:	89 c6                	mov    esi,eax
c001246d:	85 c0                	test   eax,eax
c001246f:	74 18                	je     c0012489 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012471:	52                   	push   edx
c0012472:	52                   	push   edx
c0012473:	53                   	push   ebx
c0012474:	57                   	push   edi
c0012475:	e8 8a f5 ff ff       	call   c0011a04 <CmEnterDirectory(Reghive_Tag*, int)>
c001247a:	83 c4 10             	add    esp,0x10
c001247d:	89 c3                	mov    ebx,eax
c001247f:	83 f8 ff             	cmp    eax,0xffffffff
c0012482:	74 05                	je     c0012489 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012484:	50                   	push   eax
c0012485:	56                   	push   esi
c0012486:	53                   	push   ebx
c0012487:	eb c9                	jmp    c0012452 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012489:	81 c4 00 01 00 00    	add    esp,0x100
c001248f:	89 d8                	mov    eax,ebx
c0012491:	5b                   	pop    ebx
c0012492:	5e                   	pop    esi
c0012493:	5f                   	pop    edi
c0012494:	c3                   	ret    

c0012495 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012495:	55                   	push   ebp
c0012496:	57                   	push   edi
c0012497:	56                   	push   esi
c0012498:	53                   	push   ebx
c0012499:	83 ec 5c             	sub    esp,0x5c
c001249c:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00124a0:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00124a4:	85 db                	test   ebx,ebx
c00124a6:	0f 8e 84 00 00 00    	jle    c0012530 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00124ac:	57                   	push   edi
c00124ad:	31 ed                	xor    ebp,ebp
c00124af:	6a 32                	push   0x32
c00124b1:	6a 00                	push   0x0
c00124b3:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00124b7:	57                   	push   edi
c00124b8:	e8 03 e0 fe ff       	call   c00004c0 <memset>
c00124bd:	83 c4 0c             	add    esp,0xc
c00124c0:	57                   	push   edi
c00124c1:	53                   	push   ebx
c00124c2:	56                   	push   esi
c00124c3:	e8 39 fb ff ff       	call   c0012001 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00124c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124cc:	83 c4 10             	add    esp,0x10
c00124cf:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00124d3:	7d 13                	jge    c00124e8 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00124d5:	83 ec 0c             	sub    esp,0xc
c00124d8:	45                   	inc    ebp
c00124d9:	68 a8 0d 02 c0       	push   0xc0020da8
c00124de:	e8 70 81 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c00124e3:	83 c4 10             	add    esp,0x10
c00124e6:	eb e7                	jmp    c00124cf <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00124e8:	51                   	push   ecx
c00124e9:	57                   	push   edi
c00124ea:	53                   	push   ebx
c00124eb:	68 dd 06 02 c0       	push   0xc00206dd
c00124f0:	e8 5e 81 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c00124f5:	83 c4 10             	add    esp,0x10
c00124f8:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00124fd:	75 1e                	jne    c001251d <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00124ff:	52                   	push   edx
c0012500:	52                   	push   edx
c0012501:	53                   	push   ebx
c0012502:	56                   	push   esi
c0012503:	e8 fc f4 ff ff       	call   c0011a04 <CmEnterDirectory(Reghive_Tag*, int)>
c0012508:	83 c4 0c             	add    esp,0xc
c001250b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001250f:	8d 51 04             	lea    edx,[ecx+0x4]
c0012512:	52                   	push   edx
c0012513:	50                   	push   eax
c0012514:	56                   	push   esi
c0012515:	e8 7b ff ff ff       	call   c0012495 <CmDisplayTree(Reghive_Tag*, int, int)>
c001251a:	83 c4 10             	add    esp,0x10
c001251d:	50                   	push   eax
c001251e:	50                   	push   eax
c001251f:	53                   	push   ebx
c0012520:	56                   	push   esi
c0012521:	e8 1d f5 ff ff       	call   c0011a43 <CmGetNext(Reghive_Tag*, int)>
c0012526:	83 c4 10             	add    esp,0x10
c0012529:	89 c3                	mov    ebx,eax
c001252b:	e9 74 ff ff ff       	jmp    c00124a4 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0012530:	83 c4 5c             	add    esp,0x5c
c0012533:	5b                   	pop    ebx
c0012534:	5e                   	pop    esi
c0012535:	5f                   	pop    edi
c0012536:	5d                   	pop    ebp
c0012537:	c3                   	ret    

c0012538 <CmSplitFinalSlashInPlace(char*)>:
c0012538:	53                   	push   ebx
c0012539:	83 ec 14             	sub    esp,0x14
c001253c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012540:	53                   	push   ebx
c0012541:	e8 ea df fe ff       	call   c0000530 <strlen>
c0012546:	83 c4 10             	add    esp,0x10
c0012549:	48                   	dec    eax
c001254a:	85 c0                	test   eax,eax
c001254c:	74 15                	je     c0012563 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001254e:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012551:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012555:	75 09                	jne    c0012560 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012557:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001255a:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001255e:	eb 05                	jmp    c0012565 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012560:	48                   	dec    eax
c0012561:	eb e7                	jmp    c001254a <CmSplitFinalSlashInPlace(char*)+0x12>
c0012563:	31 c0                	xor    eax,eax
c0012565:	83 c4 08             	add    esp,0x8
c0012568:	5b                   	pop    ebx
c0012569:	c3                   	ret    

c001256a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001256a:	55                   	push   ebp
c001256b:	57                   	push   edi
c001256c:	56                   	push   esi
c001256d:	53                   	push   ebx
c001256e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012574:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001257b:	8d 46 01             	lea    eax,[esi+0x1]
c001257e:	8a 1e                	mov    bl,BYTE PTR [esi]
c0012580:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012584:	80 fb 40             	cmp    bl,0x40
c0012587:	75 19                	jne    c00125a2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c0012589:	8a 06                	mov    al,BYTE PTR [esi]
c001258b:	84 c0                	test   al,al
c001258d:	74 07                	je     c0012596 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c001258f:	3c 3a                	cmp    al,0x3a
c0012591:	74 03                	je     c0012596 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0012593:	46                   	inc    esi
c0012594:	eb f3                	jmp    c0012589 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0012596:	84 c0                	test   al,al
c0012598:	0f 84 1f 01 00 00    	je     c00126bd <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c001259e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00125a1:	46                   	inc    esi
c00125a2:	50                   	push   eax
c00125a3:	6a 40                	push   0x40
c00125a5:	6a 00                	push   0x0
c00125a7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00125ab:	50                   	push   eax
c00125ac:	e8 0f df fe ff       	call   c00004c0 <memset>
c00125b1:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00125b8:	31 d2                	xor    edx,edx
c00125ba:	83 c4 10             	add    esp,0x10
c00125bd:	8a 07                	mov    al,BYTE PTR [edi]
c00125bf:	84 c0                	test   al,al
c00125c1:	0f 84 f6 00 00 00    	je     c00126bd <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c00125c7:	81 fa c7 00 00 00    	cmp    edx,0xc7
c00125cd:	0f 8f ea 00 00 00    	jg     c00126bd <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c00125d3:	3c 0a                	cmp    al,0xa
c00125d5:	0f 85 d3 00 00 00    	jne    c00126ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c00125db:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c00125e0:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c00125e4:	f6 c1 df             	test   cl,0xdf
c00125e7:	0f 94 c2             	sete   dl
c00125ea:	80 f9 23             	cmp    cl,0x23
c00125ed:	0f 94 c0             	sete   al
c00125f0:	08 c2                	or     dl,al
c00125f2:	75 47                	jne    c001263b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c00125f4:	8d 41 f7             	lea    eax,[ecx-0x9]
c00125f7:	3c 01                	cmp    al,0x1
c00125f9:	76 40                	jbe    c001263b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c00125fb:	80 f9 5b             	cmp    cl,0x5b
c00125fe:	75 3f                	jne    c001263f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c0012600:	80 fb 40             	cmp    bl,0x40
c0012603:	75 36                	jne    c001263b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0012605:	83 ec 0c             	sub    esp,0xc
c0012608:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c001260c:	55                   	push   ebp
c001260d:	e8 1e df fe ff       	call   c0000530 <strlen>
c0012612:	83 c4 10             	add    esp,0x10
c0012615:	83 f8 3f             	cmp    eax,0x3f
c0012618:	0f 87 9f 00 00 00    	ja     c00126bd <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c001261e:	50                   	push   eax
c001261f:	50                   	push   eax
c0012620:	55                   	push   ebp
c0012621:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0012625:	55                   	push   ebp
c0012626:	e8 c5 df fe ff       	call   c00005f0 <strcpy>
c001262b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001262e:	e8 fd de fe ff       	call   c0000530 <strlen>
c0012633:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012638:	83 c4 10             	add    esp,0x10
c001263b:	31 c9                	xor    ecx,ecx
c001263d:	eb 76                	jmp    c00126b5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c001263f:	80 fb 40             	cmp    bl,0x40
c0012642:	74 06                	je     c001264a <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c0012644:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0012648:	eb 19                	jmp    c0012663 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c001264a:	51                   	push   ecx
c001264b:	51                   	push   ecx
c001264c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012650:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012654:	50                   	push   eax
c0012655:	e8 86 e0 fe ff       	call   c00006e0 <strcmp>
c001265a:	83 c4 10             	add    esp,0x10
c001265d:	85 c0                	test   eax,eax
c001265f:	75 da                	jne    c001263b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0012661:	eb e1                	jmp    c0012644 <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c0012663:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012666:	84 c0                	test   al,al
c0012668:	0f 94 c1             	sete   cl
c001266b:	3c 3d                	cmp    al,0x3d
c001266d:	0f 94 c2             	sete   dl
c0012670:	08 d1                	or     cl,dl
c0012672:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0012676:	75 03                	jne    c001267b <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c0012678:	45                   	inc    ebp
c0012679:	eb e8                	jmp    c0012663 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c001267b:	84 c0                	test   al,al
c001267d:	74 3e                	je     c00126bd <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c001267f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0012683:	52                   	push   edx
c0012684:	52                   	push   edx
c0012685:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012689:	50                   	push   eax
c001268a:	56                   	push   esi
c001268b:	e8 50 e0 fe ff       	call   c00006e0 <strcmp>
c0012690:	83 c4 10             	add    esp,0x10
c0012693:	85 c0                	test   eax,eax
c0012695:	75 a4                	jne    c001263b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0012697:	50                   	push   eax
c0012698:	8d 55 01             	lea    edx,[ebp+0x1]
c001269b:	50                   	push   eax
c001269c:	52                   	push   edx
c001269d:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00126a4:	e8 47 df fe ff       	call   c00005f0 <strcpy>
c00126a9:	83 c4 10             	add    esp,0x10
c00126ac:	eb 14                	jmp    c00126c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c00126ae:	8d 4a 01             	lea    ecx,[edx+0x1]
c00126b1:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c00126b5:	47                   	inc    edi
c00126b6:	89 ca                	mov    edx,ecx
c00126b8:	e9 00 ff ff ff       	jmp    c00125bd <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c00126bd:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00126c2:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00126c6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00126cc:	5b                   	pop    ebx
c00126cd:	5e                   	pop    esi
c00126ce:	5f                   	pop    edi
c00126cf:	5d                   	pop    ebp
c00126d0:	c3                   	ret    

c00126d1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00126d1:	57                   	push   edi
c00126d2:	56                   	push   esi
c00126d3:	53                   	push   ebx
c00126d4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00126da:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00126e1:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00126e8:	53                   	push   ebx
c00126e9:	e8 42 de fe ff       	call   c0000530 <strlen>
c00126ee:	89 34 24             	mov    DWORD PTR [esp],esi
c00126f1:	89 c7                	mov    edi,eax
c00126f3:	e8 38 de fe ff       	call   c0000530 <strlen>
c00126f8:	83 c4 10             	add    esp,0x10
c00126fb:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00126ff:	3d ff 00 00 00       	cmp    eax,0xff
c0012704:	0f 87 d3 00 00 00    	ja     c00127dd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001270a:	57                   	push   edi
c001270b:	57                   	push   edi
c001270c:	56                   	push   esi
c001270d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012711:	56                   	push   esi
c0012712:	e8 d9 de fe ff       	call   c00005f0 <strcpy>
c0012717:	58                   	pop    eax
c0012718:	5a                   	pop    edx
c0012719:	68 3b 0a 02 c0       	push   0xc0020a3b
c001271e:	56                   	push   esi
c001271f:	e8 9c e0 fe ff       	call   c00007c0 <strcat>
c0012724:	59                   	pop    ecx
c0012725:	5f                   	pop    edi
c0012726:	53                   	push   ebx
c0012727:	56                   	push   esi
c0012728:	e8 93 e0 fe ff       	call   c00007c0 <strcat>
c001272d:	58                   	pop    eax
c001272e:	5a                   	pop    edx
c001272f:	68 e7 06 02 c0       	push   0xc00206e7
c0012734:	56                   	push   esi
c0012735:	e8 86 e0 fe ff       	call   c00007c0 <strcat>
c001273a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012741:	e8 1d 51 ff ff       	call   c0007863 <malloc>
c0012746:	83 c4 0c             	add    esp,0xc
c0012749:	89 c3                	mov    ebx,eax
c001274b:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0012751:	56                   	push   esi
c0012752:	50                   	push   eax
c0012753:	e8 70 84 ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c0012758:	83 c4 10             	add    esp,0x10
c001275b:	85 db                	test   ebx,ebx
c001275d:	74 7e                	je     c00127dd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001275f:	51                   	push   ecx
c0012760:	51                   	push   ecx
c0012761:	6a 01                	push   0x1
c0012763:	53                   	push   ebx
c0012764:	e8 1f 85 ff ff       	call   c000ac88 <File::open(FileOpenMode)>
c0012769:	83 c4 10             	add    esp,0x10
c001276c:	85 c0                	test   eax,eax
c001276e:	74 08                	je     c0012778 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012770:	83 ec 0c             	sub    esp,0xc
c0012773:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012775:	53                   	push   ebx
c0012776:	eb 5f                	jmp    c00127d7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012778:	52                   	push   edx
c0012779:	8d 44 24 17          	lea    eax,[esp+0x17]
c001277d:	50                   	push   eax
c001277e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012782:	50                   	push   eax
c0012783:	53                   	push   ebx
c0012784:	e8 ab 87 ff ff       	call   c000af34 <File::stat(unsigned long long*, bool*)>
c0012789:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001278d:	83 c4 10             	add    esp,0x10
c0012790:	89 c1                	mov    ecx,eax
c0012792:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012796:	74 31                	je     c00127c9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012798:	83 ec 0c             	sub    esp,0xc
c001279b:	50                   	push   eax
c001279c:	e8 c2 50 ff ff       	call   c0007863 <malloc>
c00127a1:	89 c6                	mov    esi,eax
c00127a3:	58                   	pop    eax
c00127a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127a6:	8d 54 24 20          	lea    edx,[esp+0x20]
c00127aa:	52                   	push   edx
c00127ab:	56                   	push   esi
c00127ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00127b0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00127b4:	53                   	push   ebx
c00127b5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00127b8:	83 c4 20             	add    esp,0x20
c00127bb:	85 c0                	test   eax,eax
c00127bd:	75 0a                	jne    c00127c9 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00127bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127c3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00127c7:	74 18                	je     c00127e1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00127c9:	83 ec 0c             	sub    esp,0xc
c00127cc:	53                   	push   ebx
c00127cd:	e8 14 85 ff ff       	call   c000ace6 <File::close()>
c00127d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00127da:	83 c4 10             	add    esp,0x10
c00127dd:	31 c0                	xor    eax,eax
c00127df:	eb 3b                	jmp    c001281c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00127e1:	83 ec 0c             	sub    esp,0xc
c00127e4:	53                   	push   ebx
c00127e5:	e8 fc 84 ff ff       	call   c000ace6 <File::close()>
c00127ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00127f2:	83 c4 0c             	add    esp,0xc
c00127f5:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00127fc:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012803:	56                   	push   esi
c0012804:	e8 61 fd ff ff       	call   c001256a <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012809:	89 34 24             	mov    DWORD PTR [esp],esi
c001280c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012810:	e8 5e 50 ff ff       	call   c0007873 <free>
c0012815:	83 c4 10             	add    esp,0x10
c0012818:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001281c:	81 c4 20 01 00 00    	add    esp,0x120
c0012822:	5b                   	pop    ebx
c0012823:	5e                   	pop    esi
c0012824:	5f                   	pop    edi
c0012825:	c3                   	ret    

c0012826 <Reg::getLine(char*, char*, char*)>:
c0012826:	57                   	push   edi
c0012827:	56                   	push   esi
c0012828:	53                   	push   ebx
c0012829:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001282d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012831:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012835:	57                   	push   edi
c0012836:	56                   	push   esi
c0012837:	53                   	push   ebx
c0012838:	68 ec 06 02 c0       	push   0xc00206ec
c001283d:	e8 8f fe ff ff       	call   c00126d1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012842:	83 c4 10             	add    esp,0x10
c0012845:	84 c0                	test   al,al
c0012847:	75 10                	jne    c0012859 <Reg::getLine(char*, char*, char*)+0x33>
c0012849:	57                   	push   edi
c001284a:	56                   	push   esi
c001284b:	53                   	push   ebx
c001284c:	68 11 07 02 c0       	push   0xc0020711
c0012851:	e8 7b fe ff ff       	call   c00126d1 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012856:	83 c4 10             	add    esp,0x10
c0012859:	5b                   	pop    ebx
c001285a:	5e                   	pop    esi
c001285b:	5f                   	pop    edi
c001285c:	c3                   	ret    

c001285d <Reg::readInt(char*, char*, int*)>:
c001285d:	55                   	push   ebp
c001285e:	57                   	push   edi
c001285f:	56                   	push   esi
c0012860:	53                   	push   ebx
c0012861:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012867:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001286b:	57                   	push   edi
c001286c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012873:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001287a:	e8 a7 ff ff ff       	call   c0012826 <Reg::getLine(char*, char*, char*)>
c001287f:	83 c4 10             	add    esp,0x10
c0012882:	84 c0                	test   al,al
c0012884:	0f 84 b2 00 00 00    	je     c001293c <Reg::readInt(char*, char*, int*)+0xdf>
c001288a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001288e:	80 fa 2b             	cmp    dl,0x2b
c0012891:	74 0c                	je     c001289f <Reg::readInt(char*, char*, int*)+0x42>
c0012893:	80 fa 2d             	cmp    dl,0x2d
c0012896:	75 0e                	jne    c00128a6 <Reg::readInt(char*, char*, int*)+0x49>
c0012898:	ba 01 00 00 00       	mov    edx,0x1
c001289d:	eb 0b                	jmp    c00128aa <Reg::readInt(char*, char*, int*)+0x4d>
c001289f:	ba 01 00 00 00       	mov    edx,0x1
c00128a4:	eb 02                	jmp    c00128a8 <Reg::readInt(char*, char*, int*)+0x4b>
c00128a6:	31 d2                	xor    edx,edx
c00128a8:	31 c0                	xor    eax,eax
c00128aa:	be 0a 00 00 00       	mov    esi,0xa
c00128af:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00128b4:	75 20                	jne    c00128d6 <Reg::readInt(char*, char*, int*)+0x79>
c00128b6:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00128ba:	80 f9 78             	cmp    cl,0x78
c00128bd:	75 0a                	jne    c00128c9 <Reg::readInt(char*, char*, int*)+0x6c>
c00128bf:	83 c2 02             	add    edx,0x2
c00128c2:	be 10 00 00 00       	mov    esi,0x10
c00128c7:	eb 0d                	jmp    c00128d6 <Reg::readInt(char*, char*, int*)+0x79>
c00128c9:	80 f9 62             	cmp    cl,0x62
c00128cc:	75 08                	jne    c00128d6 <Reg::readInt(char*, char*, int*)+0x79>
c00128ce:	83 c2 02             	add    edx,0x2
c00128d1:	be 02 00 00 00       	mov    esi,0x2
c00128d6:	01 d7                	add    edi,edx
c00128d8:	31 d2                	xor    edx,edx
c00128da:	8a 1f                	mov    bl,BYTE PTR [edi]
c00128dc:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00128e0:	84 db                	test   bl,bl
c00128e2:	0f 94 c3             	sete   bl
c00128e5:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c00128ea:	0f 94 c1             	sete   cl
c00128ed:	08 cb                	or     bl,cl
c00128ef:	75 3a                	jne    c001292b <Reg::readInt(char*, char*, int*)+0xce>
c00128f1:	0f af d6             	imul   edx,esi
c00128f4:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00128f9:	83 fe 10             	cmp    esi,0x10
c00128fc:	75 26                	jne    c0012924 <Reg::readInt(char*, char*, int*)+0xc7>
c00128fe:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012902:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0012905:	89 e9                	mov    ecx,ebp
c0012907:	80 f9 05             	cmp    cl,0x5
c001290a:	77 06                	ja     c0012912 <Reg::readInt(char*, char*, int*)+0xb5>
c001290c:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0012910:	eb 16                	jmp    c0012928 <Reg::readInt(char*, char*, int*)+0xcb>
c0012912:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0012916:	83 e9 61             	sub    ecx,0x61
c0012919:	80 f9 05             	cmp    cl,0x5
c001291c:	77 06                	ja     c0012924 <Reg::readInt(char*, char*, int*)+0xc7>
c001291e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0012922:	eb 04                	jmp    c0012928 <Reg::readInt(char*, char*, int*)+0xcb>
c0012924:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0012928:	47                   	inc    edi
c0012929:	eb af                	jmp    c00128da <Reg::readInt(char*, char*, int*)+0x7d>
c001292b:	84 c0                	test   al,al
c001292d:	74 02                	je     c0012931 <Reg::readInt(char*, char*, int*)+0xd4>
c001292f:	f7 da                	neg    edx
c0012931:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012938:	89 10                	mov    DWORD PTR [eax],edx
c001293a:	88 d8                	mov    al,bl
c001293c:	81 c4 ec 00 00 00    	add    esp,0xec
c0012942:	5b                   	pop    ebx
c0012943:	5e                   	pop    esi
c0012944:	5f                   	pop    edi
c0012945:	5d                   	pop    ebp
c0012946:	c3                   	ret    

c0012947 <Reg::readString(char*, char*, char*, int)>:
c0012947:	57                   	push   edi
c0012948:	56                   	push   esi
c0012949:	53                   	push   ebx
c001294a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012950:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012954:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001295b:	57                   	push   edi
c001295c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012963:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001296a:	e8 b7 fe ff ff       	call   c0012826 <Reg::getLine(char*, char*, char*)>
c001296f:	83 c4 10             	add    esp,0x10
c0012972:	89 c6                	mov    esi,eax
c0012974:	84 c0                	test   al,al
c0012976:	74 44                	je     c00129bc <Reg::readString(char*, char*, char*, int)+0x75>
c0012978:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001297f:	31 c0                	xor    eax,eax
c0012981:	4a                   	dec    edx
c0012982:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012985:	84 c9                	test   cl,cl
c0012987:	74 0f                	je     c0012998 <Reg::readString(char*, char*, char*, int)+0x51>
c0012989:	39 c2                	cmp    edx,eax
c001298b:	7e 0b                	jle    c0012998 <Reg::readString(char*, char*, char*, int)+0x51>
c001298d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012990:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012995:	40                   	inc    eax
c0012996:	eb ea                	jmp    c0012982 <Reg::readString(char*, char*, char*, int)+0x3b>
c0012998:	83 ec 0c             	sub    esp,0xc
c001299b:	53                   	push   ebx
c001299c:	e8 8f db fe ff       	call   c0000530 <strlen>
c00129a1:	83 c4 10             	add    esp,0x10
c00129a4:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00129a9:	75 11                	jne    c00129bc <Reg::readString(char*, char*, char*, int)+0x75>
c00129ab:	83 ec 0c             	sub    esp,0xc
c00129ae:	53                   	push   ebx
c00129af:	e8 7c db fe ff       	call   c0000530 <strlen>
c00129b4:	83 c4 10             	add    esp,0x10
c00129b7:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00129bc:	81 c4 d0 00 00 00    	add    esp,0xd0
c00129c2:	89 f0                	mov    eax,esi
c00129c4:	5b                   	pop    ebx
c00129c5:	5e                   	pop    esi
c00129c6:	5f                   	pop    edi
c00129c7:	c3                   	ret    

c00129c8 <Reg::readBool(char*, char*, bool*)>:
c00129c8:	83 ec 20             	sub    esp,0x20
c00129cb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00129cf:	50                   	push   eax
c00129d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129d8:	e8 80 fe ff ff       	call   c001285d <Reg::readInt(char*, char*, int*)>
c00129dd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00129e1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00129e6:	0f 95 02             	setne  BYTE PTR [edx]
c00129e9:	83 c4 2c             	add    esp,0x2c
c00129ec:	c3                   	ret    

c00129ed <Reg::readBoolWithDefault(char*, char*, bool)>:
c00129ed:	53                   	push   ebx
c00129ee:	83 ec 1c             	sub    esp,0x1c
c00129f1:	8d 44 24 13          	lea    eax,[esp+0x13]
c00129f5:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00129f9:	50                   	push   eax
c00129fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a02:	e8 c1 ff ff ff       	call   c00129c8 <Reg::readBool(char*, char*, bool*)>
c0012a07:	83 c4 10             	add    esp,0x10
c0012a0a:	84 c0                	test   al,al
c0012a0c:	74 04                	je     c0012a12 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012a0e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012a12:	83 c4 18             	add    esp,0x18
c0012a15:	88 d8                	mov    al,bl
c0012a17:	5b                   	pop    ebx
c0012a18:	c3                   	ret    

c0012a19 <Reg::readIntWithDefault(char*, char*, int)>:
c0012a19:	53                   	push   ebx
c0012a1a:	83 ec 1c             	sub    esp,0x1c
c0012a1d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012a21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012a25:	50                   	push   eax
c0012a26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a2e:	e8 2a fe ff ff       	call   c001285d <Reg::readInt(char*, char*, int*)>
c0012a33:	83 c4 10             	add    esp,0x10
c0012a36:	84 c0                	test   al,al
c0012a38:	74 04                	je     c0012a3e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012a3a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a3e:	83 c4 18             	add    esp,0x18
c0012a41:	89 d8                	mov    eax,ebx
c0012a43:	5b                   	pop    ebx
c0012a44:	c3                   	ret    

c0012a45 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012a45:	57                   	push   edi
c0012a46:	56                   	push   esi
c0012a47:	56                   	push   esi
c0012a48:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012a4c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012a50:	56                   	push   esi
c0012a51:	57                   	push   edi
c0012a52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a5a:	e8 e8 fe ff ff       	call   c0012947 <Reg::readString(char*, char*, char*, int)>
c0012a5f:	83 c4 10             	add    esp,0x10
c0012a62:	84 c0                	test   al,al
c0012a64:	75 1a                	jne    c0012a80 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012a66:	51                   	push   ecx
c0012a67:	56                   	push   esi
c0012a68:	6a 00                	push   0x0
c0012a6a:	57                   	push   edi
c0012a6b:	e8 50 da fe ff       	call   c00004c0 <memset>
c0012a70:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012a73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012a77:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a79:	83 c4 10             	add    esp,0x10
c0012a7c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012a80:	5a                   	pop    edx
c0012a81:	89 f8                	mov    eax,edi
c0012a83:	5e                   	pop    esi
c0012a84:	5f                   	pop    edi
c0012a85:	c3                   	ret    

c0012a86 <SysEject(regs*)>:
c0012a86:	83 ec 0c             	sub    esp,0xc
c0012a89:	83 ca ff             	or     edx,0xffffffff
c0012a8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a90:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012a93:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012a98:	83 e9 41             	sub    ecx,0x41
c0012a9b:	83 f9 19             	cmp    ecx,0x19
c0012a9e:	77 18                	ja     c0012ab8 <SysEject(regs*)+0x32>
c0012aa0:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c0012aa7:	85 c9                	test   ecx,ecx
c0012aa9:	74 0d                	je     c0012ab8 <SysEject(regs*)+0x32>
c0012aab:	83 ec 0c             	sub    esp,0xc
c0012aae:	51                   	push   ecx
c0012aaf:	e8 7a a2 ff ff       	call   c000cd2e <LogicalDisk::eject()>
c0012ab4:	83 c4 10             	add    esp,0x10
c0012ab7:	99                   	cdq    
c0012ab8:	83 c4 0c             	add    esp,0xc
c0012abb:	c3                   	ret    

c0012abc <SysExit(regs*)>:
c0012abc:	83 ec 18             	sub    esp,0x18
c0012abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ac3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012ac6:	e8 d9 29 00 00       	call   c00154a4 <terminateTask(int)>
c0012acb:	83 c8 ff             	or     eax,0xffffffff
c0012ace:	89 c2                	mov    edx,eax
c0012ad0:	83 c4 1c             	add    esp,0x1c
c0012ad3:	c3                   	ret    

c0012ad4 <SysGetCwd(regs*)>:
c0012ad4:	83 ec 10             	sub    esp,0x10
c0012ad7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012adb:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012ade:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012ae1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ae6:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012ae9:	e8 dc 7e ff ff       	call   c000a9ca <Fs::getcwd(Process*, char*, int)>
c0012aee:	83 c4 1c             	add    esp,0x1c
c0012af1:	99                   	cdq    
c0012af2:	c3                   	ret    

c0012af3 <SysGetPID(regs*)>:
c0012af3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012af8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012afb:	8b 00                	mov    eax,DWORD PTR [eax]
c0012afd:	99                   	cdq    
c0012afe:	c3                   	ret    

c0012aff <SysGetRAMData(regs*)>:
c0012aff:	69 05 e4 3e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0023ee4,0xc8
c0012b09:	8b 0d e8 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ee8
c0012b0f:	99                   	cdq    
c0012b10:	f7 f9                	idiv   ecx
c0012b12:	c1 e0 18             	shl    eax,0x18
c0012b15:	09 c8                	or     eax,ecx
c0012b17:	99                   	cdq    
c0012b18:	c3                   	ret    

c0012b19 <SysGetVGAPtr(regs*)>:
c0012b19:	55                   	push   ebp
c0012b1a:	57                   	push   edi
c0012b1b:	56                   	push   esi
c0012b1c:	53                   	push   ebx
c0012b1d:	83 ec 18             	sub    esp,0x18
c0012b20:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012b24:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012b27:	e8 5c 24 00 00       	call   c0014f88 <Thr::processFromPID(int)>
c0012b2c:	83 c4 10             	add    esp,0x10
c0012b2f:	89 c1                	mov    ecx,eax
c0012b31:	b8 01 00 00 00       	mov    eax,0x1
c0012b36:	85 c9                	test   ecx,ecx
c0012b38:	74 57                	je     c0012b91 <SysGetVGAPtr(regs*)+0x78>
c0012b3a:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0012b40:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0012b44:	74 0c                	je     c0012b52 <SysGetVGAPtr(regs*)+0x39>
c0012b46:	83 ec 0c             	sub    esp,0xc
c0012b49:	55                   	push   ebp
c0012b4a:	e8 78 59 ff ff       	call   c00084c7 <setActiveTerminal(VgaText*)>
c0012b4f:	83 c4 10             	add    esp,0x10
c0012b52:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0012b55:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012b58:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0012b5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012b5f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b62:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0012b65:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0012b6b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b6e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0012b71:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0012b77:	50                   	push   eax
c0012b78:	50                   	push   eax
c0012b79:	68 2c 07 02 c0       	push   0xc002072c
c0012b7e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b81:	05 a8 0f 00 00       	add    eax,0xfa8
c0012b86:	50                   	push   eax
c0012b87:	e8 64 da fe ff       	call   c00005f0 <strcpy>
c0012b8c:	83 c4 10             	add    esp,0x10
c0012b8f:	31 c0                	xor    eax,eax
c0012b91:	83 c4 0c             	add    esp,0xc
c0012b94:	31 d2                	xor    edx,edx
c0012b96:	5b                   	pop    ebx
c0012b97:	5e                   	pop    esi
c0012b98:	5f                   	pop    edi
c0012b99:	5d                   	pop    ebp
c0012b9a:	c3                   	ret    
c0012b9b:	90                   	nop

c0012b9c <SysKill(regs*)>:
c0012b9c:	53                   	push   ebx
c0012b9d:	83 ec 08             	sub    esp,0x8
c0012ba0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012ba4:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0012ba8:	75 16                	jne    c0012bc0 <SysKill(regs*)+0x24>
c0012baa:	83 ec 0c             	sub    esp,0xc
c0012bad:	68 36 07 02 c0       	push   0xc0020736
c0012bb2:	e8 50 d8 ff ff       	call   c0010407 <KePanic(char const*)>
c0012bb7:	83 c4 10             	add    esp,0x10
c0012bba:	e9 89 00 00 00       	jmp    c0012c48 <SysKill(regs*)+0xac>
c0012bbf:	90                   	nop
c0012bc0:	83 ec 0c             	sub    esp,0xc
c0012bc3:	68 84 71 02 c0       	push   0xc0027184
c0012bc8:	e8 ef b8 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0012bd0:	83 c4 10             	add    esp,0x10
c0012bd3:	85 c0                	test   eax,eax
c0012bd5:	74 19                	je     c0012bf0 <SysKill(regs*)+0x54>
c0012bd7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0012bda:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012bdd:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012bdf:	74 33                	je     c0012c14 <SysKill(regs*)+0x78>
c0012be1:	52                   	push   edx
c0012be2:	52                   	push   edx
c0012be3:	50                   	push   eax
c0012be4:	68 84 71 02 c0       	push   0xc0027184
c0012be9:	e8 ea bb 00 00       	call   c001e7d8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012bee:	eb e0                	jmp    c0012bd0 <SysKill(regs*)+0x34>
c0012bf0:	83 ec 0c             	sub    esp,0xc
c0012bf3:	68 78 71 02 c0       	push   0xc0027178
c0012bf8:	e8 bf b8 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012bfd:	8d 76 00             	lea    esi,[esi+0x0]
c0012c00:	83 c4 10             	add    esp,0x10
c0012c03:	85 c0                	test   eax,eax
c0012c05:	74 41                	je     c0012c48 <SysKill(regs*)+0xac>
c0012c07:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0012c0a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0012c0d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0012c0f:	75 27                	jne    c0012c38 <SysKill(regs*)+0x9c>
c0012c11:	8d 76 00             	lea    esi,[esi+0x0]
c0012c14:	51                   	push   ecx
c0012c15:	51                   	push   ecx
c0012c16:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012c19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c1e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012c21:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0012c27:	e8 4b dc ff ff       	call   c0010877 <KeRaiseSignal(SigHandlerBlock*, int)>
c0012c2c:	83 c4 10             	add    esp,0x10
c0012c2f:	31 c0                	xor    eax,eax
c0012c31:	31 d2                	xor    edx,edx
c0012c33:	eb 1b                	jmp    c0012c50 <SysKill(regs*)+0xb4>
c0012c35:	8d 76 00             	lea    esi,[esi+0x0]
c0012c38:	52                   	push   edx
c0012c39:	52                   	push   edx
c0012c3a:	50                   	push   eax
c0012c3b:	68 78 71 02 c0       	push   0xc0027178
c0012c40:	e8 93 bb 00 00       	call   c001e7d8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0012c45:	eb b9                	jmp    c0012c00 <SysKill(regs*)+0x64>
c0012c47:	90                   	nop
c0012c48:	83 c8 ff             	or     eax,0xffffffff
c0012c4b:	89 c2                	mov    edx,eax
c0012c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c50:	83 c4 08             	add    esp,0x8
c0012c53:	5b                   	pop    ebx
c0012c54:	c3                   	ret    

c0012c55 <SysLoadDLL(regs*)>:
c0012c55:	56                   	push   esi
c0012c56:	31 d2                	xor    edx,edx
c0012c58:	53                   	push   ebx
c0012c59:	b8 01 00 00 00       	mov    eax,0x1
c0012c5e:	51                   	push   ecx
c0012c5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c63:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0012c67:	0f 84 8c 00 00 00    	je     c0012cf9 <SysLoadDLL(regs*)+0xa4>
c0012c6d:	83 ec 0c             	sub    esp,0xc
c0012c70:	68 14 01 00 00       	push   0x114
c0012c75:	e8 e9 4b ff ff       	call   c0007863 <malloc>
c0012c7a:	89 c3                	mov    ebx,eax
c0012c7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c81:	83 c4 0c             	add    esp,0xc
c0012c84:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012c87:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012c8a:	53                   	push   ebx
c0012c8b:	e8 38 7f ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c0012c90:	83 c4 10             	add    esp,0x10
c0012c93:	31 d2                	xor    edx,edx
c0012c95:	b8 02 00 00 00       	mov    eax,0x2
c0012c9a:	85 db                	test   ebx,ebx
c0012c9c:	74 5b                	je     c0012cf9 <SysLoadDLL(regs*)+0xa4>
c0012c9e:	83 ec 0c             	sub    esp,0xc
c0012ca1:	53                   	push   ebx
c0012ca2:	e8 4f 82 ff ff       	call   c000aef6 <File::exists()>
c0012ca7:	83 c4 10             	add    esp,0x10
c0012caa:	84 c0                	test   al,al
c0012cac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cae:	75 11                	jne    c0012cc1 <SysLoadDLL(regs*)+0x6c>
c0012cb0:	83 ec 0c             	sub    esp,0xc
c0012cb3:	53                   	push   ebx
c0012cb4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cb7:	83 c4 10             	add    esp,0x10
c0012cba:	b8 03 00 00 00       	mov    eax,0x3
c0012cbf:	eb 36                	jmp    c0012cf7 <SysLoadDLL(regs*)+0xa2>
c0012cc1:	83 ec 0c             	sub    esp,0xc
c0012cc4:	53                   	push   ebx
c0012cc5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cc8:	58                   	pop    eax
c0012cc9:	5a                   	pop    edx
c0012cca:	6a 00                	push   0x0
c0012ccc:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012ccf:	e8 14 14 00 00       	call   c00140e8 <Thr::loadDLL(char const*, bool)>
c0012cd4:	83 c4 10             	add    esp,0x10
c0012cd7:	89 c1                	mov    ecx,eax
c0012cd9:	31 d2                	xor    edx,edx
c0012cdb:	b8 04 00 00 00       	mov    eax,0x4
c0012ce0:	85 c9                	test   ecx,ecx
c0012ce2:	74 15                	je     c0012cf9 <SysLoadDLL(regs*)+0xa4>
c0012ce4:	53                   	push   ebx
c0012ce5:	53                   	push   ebx
c0012ce6:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0012cec:	51                   	push   ecx
c0012ced:	e8 2b 16 00 00       	call   c001431d <Thr::executeDLL(unsigned long, void*)>
c0012cf2:	83 c4 10             	add    esp,0x10
c0012cf5:	31 c0                	xor    eax,eax
c0012cf7:	31 d2                	xor    edx,edx
c0012cf9:	59                   	pop    ecx
c0012cfa:	5b                   	pop    ebx
c0012cfb:	5e                   	pop    esi
c0012cfc:	c3                   	ret    

c0012cfd <SysRead(regs*)>:
c0012cfd:	57                   	push   edi
c0012cfe:	56                   	push   esi
c0012cff:	53                   	push   ebx
c0012d00:	83 ec 10             	sub    esp,0x10
c0012d03:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d07:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012d0a:	83 f8 02             	cmp    eax,0x2
c0012d0d:	77 10                	ja     c0012d1f <SysRead(regs*)+0x22>
c0012d0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d14:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012d17:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0012d1d:	eb 0e                	jmp    c0012d2d <SysRead(regs*)+0x30>
c0012d1f:	83 ec 0c             	sub    esp,0xc
c0012d22:	50                   	push   eax
c0012d23:	e8 df 64 ff ff       	call   c0009207 <getFromFileDescriptor(int)>
c0012d28:	83 c4 10             	add    esp,0x10
c0012d2b:	89 c1                	mov    ecx,eax
c0012d2d:	83 c8 ff             	or     eax,0xffffffff
c0012d30:	85 c9                	test   ecx,ecx
c0012d32:	89 c2                	mov    edx,eax
c0012d34:	74 28                	je     c0012d5e <SysRead(regs*)+0x61>
c0012d36:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012d3e:	83 ec 0c             	sub    esp,0xc
c0012d41:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d43:	31 ff                	xor    edi,edi
c0012d45:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012d49:	52                   	push   edx
c0012d4a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012d4d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0012d50:	57                   	push   edi
c0012d51:	56                   	push   esi
c0012d52:	51                   	push   ecx
c0012d53:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012d56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012d5a:	83 c4 20             	add    esp,0x20
c0012d5d:	99                   	cdq    
c0012d5e:	83 c4 10             	add    esp,0x10
c0012d61:	5b                   	pop    ebx
c0012d62:	5e                   	pop    esi
c0012d63:	5f                   	pop    edi
c0012d64:	c3                   	ret    

c0012d65 <SysRegisterSignal(regs*)>:
c0012d65:	83 ec 18             	sub    esp,0x18
c0012d68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d6c:	6a 00                	push   0x0
c0012d6e:	6a 00                	push   0x0
c0012d70:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012d73:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012d76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d7b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012d7e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0012d84:	e8 b8 da ff ff       	call   c0010841 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0012d89:	83 c4 2c             	add    esp,0x2c
c0012d8c:	99                   	cdq    
c0012d8d:	c3                   	ret    

c0012d8e <SysRegistryGetTypeFromPath(regs*)>:
c0012d8e:	57                   	push   edi
c0012d8f:	56                   	push   esi
c0012d90:	53                   	push   ebx
c0012d91:	81 ec 38 01 00 00    	sub    esp,0x138
c0012d97:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0012d9e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012da1:	68 57 07 02 c0       	push   0xc0020757
c0012da6:	e8 a8 78 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0012dab:	5a                   	pop    edx
c0012dac:	59                   	pop    ecx
c0012dad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012db0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012db3:	e8 5c f6 ff ff       	call   c0012414 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0012db8:	5f                   	pop    edi
c0012db9:	89 c6                	mov    esi,eax
c0012dbb:	5a                   	pop    edx
c0012dbc:	50                   	push   eax
c0012dbd:	68 77 07 02 c0       	push   0xc0020777
c0012dc2:	e8 8c 78 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0012dc7:	83 c4 10             	add    esp,0x10
c0012dca:	85 f6                	test   esi,esi
c0012dcc:	74 28                	je     c0012df6 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0012dce:	50                   	push   eax
c0012dcf:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0012dd3:	57                   	push   edi
c0012dd4:	56                   	push   esi
c0012dd5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012dd8:	e8 24 f2 ff ff       	call   c0012001 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012ddd:	83 c4 0c             	add    esp,0xc
c0012de0:	57                   	push   edi
c0012de1:	89 c3                	mov    ebx,eax
c0012de3:	50                   	push   eax
c0012de4:	68 7f 07 02 c0       	push   0xc002077f
c0012de9:	e8 65 78 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0012dee:	89 d8                	mov    eax,ebx
c0012df0:	83 c4 10             	add    esp,0x10
c0012df3:	99                   	cdq    
c0012df4:	eb 05                	jmp    c0012dfb <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0012df6:	83 c8 ff             	or     eax,0xffffffff
c0012df9:	89 c2                	mov    edx,eax
c0012dfb:	81 c4 30 01 00 00    	add    esp,0x130
c0012e01:	5b                   	pop    ebx
c0012e02:	5e                   	pop    esi
c0012e03:	5f                   	pop    edi
c0012e04:	c3                   	ret    

c0012e05 <SysRegistryReadExtent(regs*)>:
c0012e05:	83 ec 1c             	sub    esp,0x1c
c0012e08:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012e0c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0012e0f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0012e12:	85 c0                	test   eax,eax
c0012e14:	79 1f                	jns    c0012e35 <SysRegistryReadExtent(regs*)+0x30>
c0012e16:	52                   	push   edx
c0012e17:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0012e1c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0012e20:	52                   	push   edx
c0012e21:	50                   	push   eax
c0012e22:	51                   	push   ecx
c0012e23:	e8 cb f0 ff ff       	call   c0011ef3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0012e28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012e30:	83 c4 10             	add    esp,0x10
c0012e33:	eb 14                	jmp    c0012e49 <SysRegistryReadExtent(regs*)+0x44>
c0012e35:	83 ec 04             	sub    esp,0x4
c0012e38:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0012e3b:	50                   	push   eax
c0012e3c:	51                   	push   ecx
c0012e3d:	e8 4b eb ff ff       	call   c001198d <CmGetString(Reghive_Tag*, int, char*)>
c0012e42:	83 c4 10             	add    esp,0x10
c0012e45:	31 c0                	xor    eax,eax
c0012e47:	31 d2                	xor    edx,edx
c0012e49:	83 c4 1c             	add    esp,0x1c
c0012e4c:	c3                   	ret    

c0012e4d <SysRegistryPathToExtentLookup(regs*)>:
c0012e4d:	53                   	push   ebx
c0012e4e:	83 ec 10             	sub    esp,0x10
c0012e51:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e55:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012e58:	68 95 07 02 c0       	push   0xc0020795
c0012e5d:	e8 f1 77 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0012e62:	58                   	pop    eax
c0012e63:	5a                   	pop    edx
c0012e64:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012e67:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012e6a:	e8 a5 f5 ff ff       	call   c0012414 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0012e6f:	83 c4 18             	add    esp,0x18
c0012e72:	99                   	cdq    
c0012e73:	5b                   	pop    ebx
c0012e74:	c3                   	ret    

c0012e75 <SysRegistryEnterDirectory(regs*)>:
c0012e75:	53                   	push   ebx
c0012e76:	83 ec 10             	sub    esp,0x10
c0012e79:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e7d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012e80:	68 b8 07 02 c0       	push   0xc00207b8
c0012e85:	e8 c9 77 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0012e8a:	58                   	pop    eax
c0012e8b:	5a                   	pop    edx
c0012e8c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012e8f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012e92:	e8 6d eb ff ff       	call   c0011a04 <CmEnterDirectory(Reghive_Tag*, int)>
c0012e97:	83 c4 18             	add    esp,0x18
c0012e9a:	99                   	cdq    
c0012e9b:	5b                   	pop    ebx
c0012e9c:	c3                   	ret    

c0012e9d <SysRegistryGetNext(regs*)>:
c0012e9d:	53                   	push   ebx
c0012e9e:	83 ec 10             	sub    esp,0x10
c0012ea1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012ea5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012ea8:	68 d6 07 02 c0       	push   0xc00207d6
c0012ead:	e8 a1 77 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0012eb2:	58                   	pop    eax
c0012eb3:	5a                   	pop    edx
c0012eb4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012eb7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012eba:	e8 84 eb ff ff       	call   c0011a43 <CmGetNext(Reghive_Tag*, int)>
c0012ebf:	83 c4 18             	add    esp,0x18
c0012ec2:	99                   	cdq    
c0012ec3:	5b                   	pop    ebx
c0012ec4:	c3                   	ret    

c0012ec5 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0012ec5:	57                   	push   edi
c0012ec6:	56                   	push   esi
c0012ec7:	53                   	push   ebx
c0012ec8:	81 ec 34 01 00 00    	sub    esp,0x134
c0012ece:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0012ed5:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0012ed9:	57                   	push   edi
c0012eda:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0012edd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012ee0:	e8 1c f1 ff ff       	call   c0012001 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012ee5:	89 c3                	mov    ebx,eax
c0012ee7:	58                   	pop    eax
c0012ee8:	5a                   	pop    edx
c0012ee9:	57                   	push   edi
c0012eea:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0012eed:	e8 fe d6 fe ff       	call   c00005f0 <strcpy>
c0012ef2:	81 c4 40 01 00 00    	add    esp,0x140
c0012ef8:	89 d8                	mov    eax,ebx
c0012efa:	5b                   	pop    ebx
c0012efb:	5e                   	pop    esi
c0012efc:	99                   	cdq    
c0012efd:	5f                   	pop    edi
c0012efe:	c3                   	ret    

c0012eff <SysRegistryOpen(regs*)>:
c0012eff:	83 ec 18             	sub    esp,0x18
c0012f02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f06:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012f09:	e8 0f e9 ff ff       	call   c001181d <CmOpen(char const*)>
c0012f0e:	83 c4 1c             	add    esp,0x1c
c0012f11:	99                   	cdq    
c0012f12:	c3                   	ret    

c0012f13 <SysRegistryClose(regs*)>:
c0012f13:	83 ec 18             	sub    esp,0x18
c0012f16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f1a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f1d:	e8 19 ea ff ff       	call   c001193b <CmClose(Reghive_Tag*)>
c0012f22:	31 c0                	xor    eax,eax
c0012f24:	31 d2                	xor    edx,edx
c0012f26:	83 c4 1c             	add    esp,0x1c
c0012f29:	c3                   	ret    

c0012f2a <SysSbrk(regs*)>:
c0012f2a:	56                   	push   esi
c0012f2b:	53                   	push   ebx
c0012f2c:	50                   	push   eax
c0012f2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f39:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0012f3c:	85 db                	test   ebx,ebx
c0012f3e:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0012f44:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0012f47:	74 02                	je     c0012f4b <SysSbrk(regs*)+0x21>
c0012f49:	79 06                	jns    c0012f51 <SysSbrk(regs*)+0x27>
c0012f4b:	89 f0                	mov    eax,esi
c0012f4d:	31 d2                	xor    edx,edx
c0012f4f:	eb 2a                	jmp    c0012f7b <SysSbrk(regs*)+0x51>
c0012f51:	83 c8 ff             	or     eax,0xffffffff
c0012f54:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0012f5a:	89 c2                	mov    edx,eax
c0012f5c:	77 1d                	ja     c0012f7b <SysSbrk(regs*)+0x51>
c0012f5e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0012f64:	50                   	push   eax
c0012f65:	c1 ea 0c             	shr    edx,0xc
c0012f68:	68 07 0c 00 00       	push   0xc07
c0012f6d:	52                   	push   edx
c0012f6e:	51                   	push   ecx
c0012f6f:	e8 c4 6b ff ff       	call   c0009b38 <VAS::allocatePages(int, int)>
c0012f74:	89 f0                	mov    eax,esi
c0012f76:	31 d2                	xor    edx,edx
c0012f78:	83 c4 10             	add    esp,0x10
c0012f7b:	59                   	pop    ecx
c0012f7c:	5b                   	pop    ebx
c0012f7d:	5e                   	pop    esi
c0012f7e:	c3                   	ret    

c0012f7f <SysSetCwd(regs*)>:
c0012f7f:	83 ec 14             	sub    esp,0x14
c0012f82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f86:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f8e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012f91:	e8 ff 7f ff ff       	call   c000af95 <Fs::setcwd(Process*, char*)>
c0012f96:	83 c4 1c             	add    esp,0x1c
c0012f99:	99                   	cdq    
c0012f9a:	c3                   	ret    

c0012f9b <SysSetTime(regs*)>:
c0012f9b:	55                   	push   ebp
c0012f9c:	31 c9                	xor    ecx,ecx
c0012f9e:	57                   	push   edi
c0012f9f:	bd 0c 00 00 00       	mov    ebp,0xc
c0012fa4:	56                   	push   esi
c0012fa5:	53                   	push   ebx
c0012fa6:	31 db                	xor    ebx,ebx
c0012fa8:	83 ec 10             	sub    esp,0x10
c0012fab:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012faf:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0012fb2:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0012fb5:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0012fb8:	89 c2                	mov    edx,eax
c0012fba:	c1 e8 05             	shr    eax,0x5
c0012fbd:	83 e2 1f             	and    edx,0x1f
c0012fc0:	66 81 ef 6c 07       	sub    di,0x76c
c0012fc5:	42                   	inc    edx
c0012fc6:	c1 e7 10             	shl    edi,0x10
c0012fc9:	88 d1                	mov    cl,dl
c0012fcb:	31 d2                	xor    edx,edx
c0012fcd:	f7 f5                	div    ebp
c0012fcf:	88 d5                	mov    ch,dl
c0012fd1:	31 d2                	xor    edx,edx
c0012fd3:	0f b7 c1             	movzx  eax,cx
c0012fd6:	09 f8                	or     eax,edi
c0012fd8:	bf 3c 00 00 00       	mov    edi,0x3c
c0012fdd:	89 c1                	mov    ecx,eax
c0012fdf:	89 f0                	mov    eax,esi
c0012fe1:	f7 f7                	div    edi
c0012fe3:	c1 e2 10             	shl    edx,0x10
c0012fe6:	89 dd                	mov    ebp,ebx
c0012fe8:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0012fee:	09 d5                	or     ebp,edx
c0012ff0:	31 d2                	xor    edx,edx
c0012ff2:	f7 f7                	div    edi
c0012ff4:	89 eb                	mov    ebx,ebp
c0012ff6:	bf 10 0e 00 00       	mov    edi,0xe10
c0012ffb:	88 d7                	mov    bh,dl
c0012ffd:	89 f0                	mov    eax,esi
c0012fff:	31 d2                	xor    edx,edx
c0013001:	f7 f7                	div    edi
c0013003:	bf 18 00 00 00       	mov    edi,0x18
c0013008:	31 d2                	xor    edx,edx
c001300a:	f7 f7                	div    edi
c001300c:	88 d3                	mov    bl,dl
c001300e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0013013:	53                   	push   ebx
c0013014:	51                   	push   ecx
c0013015:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001301b:	e8 84 87 ff ff       	call   c000b7a4 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013020:	83 c4 1c             	add    esp,0x1c
c0013023:	5b                   	pop    ebx
c0013024:	83 f0 01             	xor    eax,0x1
c0013027:	5e                   	pop    esi
c0013028:	31 d2                	xor    edx,edx
c001302a:	5f                   	pop    edi
c001302b:	0f b6 c0             	movzx  eax,al
c001302e:	5d                   	pop    ebp
c001302f:	c3                   	ret    

c0013030 <SysTimezone(regs*)>:
c0013030:	53                   	push   ebx
c0013031:	83 ec 08             	sub    esp,0x8
c0013034:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013038:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001303c:	75 17                	jne    c0013055 <SysTimezone(regs*)+0x25>
c001303e:	83 ec 0c             	sub    esp,0xc
c0013041:	68 ed 07 02 c0       	push   0xc00207ed
c0013046:	e8 08 76 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c001304b:	83 c8 ff             	or     eax,0xffffffff
c001304e:	83 c4 10             	add    esp,0x10
c0013051:	89 c2                	mov    edx,eax
c0013053:	eb 20                	jmp    c0013075 <SysTimezone(regs*)+0x45>
c0013055:	83 ec 0c             	sub    esp,0xc
c0013058:	68 02 08 02 c0       	push   0xc0020802
c001305d:	e8 f1 75 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0013062:	58                   	pop    eax
c0013063:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013066:	e8 95 84 ff ff       	call   c000b500 <User::loadClockSettings(int)>
c001306b:	83 c4 10             	add    esp,0x10
c001306e:	b8 01 00 00 00       	mov    eax,0x1
c0013073:	31 d2                	xor    edx,edx
c0013075:	83 c4 08             	add    esp,0x8
c0013078:	5b                   	pop    ebx
c0013079:	c3                   	ret    

c001307a <SysWrite(regs*)>:
c001307a:	57                   	push   edi
c001307b:	56                   	push   esi
c001307c:	53                   	push   ebx
c001307d:	83 ec 10             	sub    esp,0x10
c0013080:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013084:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013087:	83 f8 02             	cmp    eax,0x2
c001308a:	77 10                	ja     c001309c <SysWrite(regs*)+0x22>
c001308c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013091:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013094:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001309a:	eb 0e                	jmp    c00130aa <SysWrite(regs*)+0x30>
c001309c:	83 ec 0c             	sub    esp,0xc
c001309f:	50                   	push   eax
c00130a0:	e8 62 61 ff ff       	call   c0009207 <getFromFileDescriptor(int)>
c00130a5:	83 c4 10             	add    esp,0x10
c00130a8:	89 c1                	mov    ecx,eax
c00130aa:	83 c8 ff             	or     eax,0xffffffff
c00130ad:	85 c9                	test   ecx,ecx
c00130af:	89 c2                	mov    edx,eax
c00130b1:	74 28                	je     c00130db <SysWrite(regs*)+0x61>
c00130b3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00130bb:	83 ec 0c             	sub    esp,0xc
c00130be:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130c0:	31 ff                	xor    edi,edi
c00130c2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00130c6:	52                   	push   edx
c00130c7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00130ca:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00130cd:	57                   	push   edi
c00130ce:	56                   	push   esi
c00130cf:	51                   	push   ecx
c00130d0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00130d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00130d7:	83 c4 20             	add    esp,0x20
c00130da:	99                   	cdq    
c00130db:	83 c4 10             	add    esp,0x10
c00130de:	5b                   	pop    ebx
c00130df:	5e                   	pop    esi
c00130e0:	5f                   	pop    edi
c00130e1:	c3                   	ret    

c00130e2 <SysWsbe(regs*)>:
c00130e2:	57                   	push   edi
c00130e3:	b9 0b 00 00 00       	mov    ecx,0xb
c00130e8:	56                   	push   esi
c00130e9:	be 41 08 02 c0       	mov    esi,0xc0020841
c00130ee:	53                   	push   ebx
c00130ef:	83 ec 30             	sub    esp,0x30
c00130f2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00130f6:	fc                   	cld    
c00130f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00130f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130fe:	83 ec 0c             	sub    esp,0xc
c0013101:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013104:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013108:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001310e:	8b 06                	mov    eax,DWORD PTR [esi]
c0013110:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0013113:	57                   	push   edi
c0013114:	e8 17 d4 fe ff       	call   c0000530 <strlen>
c0013119:	5a                   	pop    edx
c001311a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001311e:	52                   	push   edx
c001311f:	31 d2                	xor    edx,edx
c0013121:	57                   	push   edi
c0013122:	52                   	push   edx
c0013123:	50                   	push   eax
c0013124:	56                   	push   esi
c0013125:	ff d3                	call   ebx
c0013127:	83 c4 14             	add    esp,0x14
c001312a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001312e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013131:	e8 6e 23 00 00       	call   c00154a4 <terminateTask(int)>
c0013136:	83 c4 40             	add    esp,0x40
c0013139:	5b                   	pop    ebx
c001313a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001313f:	5e                   	pop    esi
c0013140:	31 d2                	xor    edx,edx
c0013142:	5f                   	pop    edi
c0013143:	c3                   	ret    

c0013144 <SysYield(regs*)>:
c0013144:	83 ec 0c             	sub    esp,0xc
c0013147:	fa                   	cli    
c0013148:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001314e:	e8 fd 19 00 00       	call   c0014b50 <schedule()>
c0013153:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0013158:	48                   	dec    eax
c0013159:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001315e:	75 01                	jne    c0013161 <SysYield(regs*)+0x1d>
c0013160:	fb                   	sti    
c0013161:	31 c0                	xor    eax,eax
c0013163:	31 d2                	xor    edx,edx
c0013165:	83 c4 0c             	add    esp,0xc
c0013168:	c3                   	ret    

c0013169 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013169:	55                   	push   ebp
c001316a:	57                   	push   edi
c001316b:	56                   	push   esi
c001316c:	53                   	push   ebx
c001316d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013173:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001317e:	74 3b                	je     c00131bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013180:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013188:	74 31                	je     c00131bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c001318a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013192:	75 27                	jne    c00131bb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x52>
c0013194:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001319b:	05 00 10 00 00       	add    eax,0x1000
c00131a0:	89 c2                	mov    edx,eax
c00131a2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00131a7:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c00131ad:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00131b4:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c00131bb:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00131c2:	83 ec 0c             	sub    esp,0xc
c00131c5:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00131cb:	6a 01                	push   0x1
c00131cd:	e8 90 61 ff ff       	call   c0009362 <Virt::allocateKernelVirtualPages(int)>
c00131d2:	83 c4 10             	add    esp,0x10
c00131d5:	89 c3                	mov    ebx,eax
c00131d7:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00131dd:	0f 86 25 01 00 00    	jbe    c0013308 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19f>
c00131e3:	c1 ee 0c             	shr    esi,0xc
c00131e6:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00131ed:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00131f1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00131f9:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013200:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013204:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001320b:	29 ef                	sub    edi,ebp
c001320d:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c0013211:	0f 83 f8 00 00 00    	jae    c001330f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a6>
c0013217:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001321d:	76 05                	jbe    c0013224 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xbb>
c001321f:	bf 00 10 00 00       	mov    edi,0x1000
c0013224:	83 ec 0c             	sub    esp,0xc
c0013227:	31 d2                	xor    edx,edx
c0013229:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013230:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013232:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013236:	50                   	push   eax
c0013237:	8d 74 24 30          	lea    esi,[esp+0x30]
c001323b:	56                   	push   esi
c001323c:	52                   	push   edx
c001323d:	57                   	push   edi
c001323e:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013245:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013248:	83 c4 20             	add    esp,0x20
c001324b:	85 c0                	test   eax,eax
c001324d:	75 06                	jne    c0013255 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xec>
c001324f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013253:	74 13                	je     c0013268 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xff>
c0013255:	83 ec 0c             	sub    esp,0xc
c0013258:	53                   	push   ebx
c0013259:	e8 03 64 ff ff       	call   c0009661 <Virt::freeKernelVirtualPages(unsigned long)>
c001325e:	83 c4 10             	add    esp,0x10
c0013261:	31 c0                	xor    eax,eax
c0013263:	e9 7c 01 00 00       	jmp    c00133e4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x27b>
c0013268:	fa                   	cli    
c0013269:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001326f:	e8 e6 48 ff ff       	call   c0007b5a <Phys::allocatePage()>
c0013274:	6a 07                	push   0x7
c0013276:	89 c7                	mov    edi,eax
c0013278:	53                   	push   ebx
c0013279:	50                   	push   eax
c001327a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001327f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013282:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013288:	e8 a5 67 ff ff       	call   c0009a32 <VAS::mapPage(unsigned long, unsigned long, int)>
c001328d:	83 c4 0c             	add    esp,0xc
c0013290:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013297:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001329d:	6a 00                	push   0x0
c001329f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132a7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00132ad:	e8 f2 65 ff ff       	call   c00098a4 <VAS::mapOtherVASIn(bool, VAS*)>
c00132b2:	58                   	pop    eax
c00132b3:	5a                   	pop    edx
c00132b4:	68 07 0c 00 00       	push   0xc07
c00132b9:	55                   	push   ebp
c00132ba:	57                   	push   edi
c00132bb:	89 df                	mov    edi,ebx
c00132bd:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00132c4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00132ca:	6a 00                	push   0x0
c00132cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00132d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00132d4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00132da:	e8 17 6b ff ff       	call   c0009df6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00132df:	b9 00 10 00 00       	mov    ecx,0x1000
c00132e4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00132e6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00132eb:	83 c4 20             	add    esp,0x20
c00132ee:	48                   	dec    eax
c00132ef:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00132f4:	85 c0                	test   eax,eax
c00132f6:	75 01                	jne    c00132f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x190>
c00132f8:	fb                   	sti    
c00132f9:	81 c5 00 10 00 00    	add    ebp,0x1000
c00132ff:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013303:	e9 f1 fe ff ff       	jmp    c00131f9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x90>
c0013308:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001330f:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013316:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001331c:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013322:	0f 86 ae 00 00 00    	jbe    c00133d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26d>
c0013328:	fa                   	cli    
c0013329:	51                   	push   ecx
c001332a:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0013330:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013337:	31 ff                	xor    edi,edi
c0013339:	c1 ee 0c             	shr    esi,0xc
c001333c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013342:	6a 00                	push   0x0
c0013344:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013349:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001334c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013352:	e8 4d 65 ff ff       	call   c00098a4 <VAS::mapOtherVASIn(bool, VAS*)>
c0013357:	83 c4 10             	add    esp,0x10
c001335a:	e8 fb 47 ff ff       	call   c0007b5a <Phys::allocatePage()>
c001335f:	6a 07                	push   0x7
c0013361:	53                   	push   ebx
c0013362:	47                   	inc    edi
c0013363:	50                   	push   eax
c0013364:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013368:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001336e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013371:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013377:	e8 b6 66 ff ff       	call   c0009a32 <VAS::mapPage(unsigned long, unsigned long, int)>
c001337c:	58                   	pop    eax
c001337d:	5a                   	pop    edx
c001337e:	68 07 0c 00 00       	push   0xc07
c0013383:	55                   	push   ebp
c0013384:	81 c5 00 10 00 00    	add    ebp,0x1000
c001338a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001338e:	50                   	push   eax
c001338f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013396:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001339c:	6a 00                	push   0x0
c001339e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00133a6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00133ac:	e8 45 6a ff ff       	call   c0009df6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00133b1:	83 c4 1c             	add    esp,0x1c
c00133b4:	68 00 10 00 00       	push   0x1000
c00133b9:	6a 00                	push   0x0
c00133bb:	53                   	push   ebx
c00133bc:	e8 ff d0 fe ff       	call   c00004c0 <memset>
c00133c1:	83 c4 10             	add    esp,0x10
c00133c4:	39 fe                	cmp    esi,edi
c00133c6:	77 92                	ja     c001335a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f1>
c00133c8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00133cd:	48                   	dec    eax
c00133ce:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00133d3:	75 01                	jne    c00133d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26d>
c00133d5:	fb                   	sti    
c00133d6:	83 ec 0c             	sub    esp,0xc
c00133d9:	53                   	push   ebx
c00133da:	e8 82 62 ff ff       	call   c0009661 <Virt::freeKernelVirtualPages(unsigned long)>
c00133df:	83 c4 10             	add    esp,0x10
c00133e2:	b0 01                	mov    al,0x1
c00133e4:	81 c4 2c 10 00 00    	add    esp,0x102c
c00133ea:	5b                   	pop    ebx
c00133eb:	5e                   	pop    esi
c00133ec:	5f                   	pop    edi
c00133ed:	5d                   	pop    ebp
c00133ee:	c3                   	ret    

c00133ef <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00133ef:	55                   	push   ebp
c00133f0:	57                   	push   edi
c00133f1:	56                   	push   esi
c00133f2:	53                   	push   ebx
c00133f3:	83 ec 48             	sub    esp,0x48
c00133f6:	68 14 01 00 00       	push   0x114
c00133fb:	e8 63 44 ff ff       	call   c0007863 <malloc>
c0013400:	83 c4 0c             	add    esp,0xc
c0013403:	89 c6                	mov    esi,eax
c0013405:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013409:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001340d:	50                   	push   eax
c001340e:	e8 b5 77 ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c0013413:	58                   	pop    eax
c0013414:	5a                   	pop    edx
c0013415:	6a 01                	push   0x1
c0013417:	56                   	push   esi
c0013418:	e8 6b 78 ff ff       	call   c000ac88 <File::open(FileOpenMode)>
c001341d:	83 c4 10             	add    esp,0x10
c0013420:	85 c0                	test   eax,eax
c0013422:	0f 85 47 01 00 00    	jne    c001356f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013428:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013430:	83 ec 0c             	sub    esp,0xc
c0013433:	6a 34                	push   0x34
c0013435:	e8 29 44 ff ff       	call   c0007863 <malloc>
c001343a:	89 c3                	mov    ebx,eax
c001343c:	58                   	pop    eax
c001343d:	8b 06                	mov    eax,DWORD PTR [esi]
c001343f:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0013443:	57                   	push   edi
c0013444:	53                   	push   ebx
c0013445:	6a 00                	push   0x0
c0013447:	6a 34                	push   0x34
c0013449:	56                   	push   esi
c001344a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001344d:	83 c4 20             	add    esp,0x20
c0013450:	85 c0                	test   eax,eax
c0013452:	0f 85 17 01 00 00    	jne    c001356f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013458:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001345e:	0f 85 0b 01 00 00    	jne    c001356f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013464:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013467:	85 c0                	test   eax,eax
c0013469:	0f 84 00 01 00 00    	je     c001356f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001346f:	31 d2                	xor    edx,edx
c0013471:	55                   	push   ebp
c0013472:	52                   	push   edx
c0013473:	50                   	push   eax
c0013474:	56                   	push   esi
c0013475:	e8 cc 78 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c001347a:	83 c4 10             	add    esp,0x10
c001347d:	85 c0                	test   eax,eax
c001347f:	0f 85 ea 00 00 00    	jne    c001356f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013485:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013488:	83 ec 0c             	sub    esp,0xc
c001348b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001348f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013493:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013497:	0f af c2             	imul   eax,edx
c001349a:	50                   	push   eax
c001349b:	e8 c3 43 ff ff       	call   c0007863 <malloc>
c00134a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00134a4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00134a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00134a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00134ad:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00134b1:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00134b5:	0f af c2             	imul   eax,edx
c00134b8:	99                   	cdq    
c00134b9:	52                   	push   edx
c00134ba:	50                   	push   eax
c00134bb:	56                   	push   esi
c00134bc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00134bf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00134c2:	83 c4 20             	add    esp,0x20
c00134c5:	85 c0                	test   eax,eax
c00134c7:	0f 84 a2 00 00 00    	je     c001356f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00134cd:	31 d2                	xor    edx,edx
c00134cf:	51                   	push   ecx
c00134d0:	52                   	push   edx
c00134d1:	50                   	push   eax
c00134d2:	56                   	push   esi
c00134d3:	e8 6e 78 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c00134d8:	83 c4 10             	add    esp,0x10
c00134db:	85 c0                	test   eax,eax
c00134dd:	0f 85 8c 00 00 00    	jne    c001356f <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00134e3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00134e7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00134eb:	0f af c2             	imul   eax,edx
c00134ee:	83 ec 0c             	sub    esp,0xc
c00134f1:	31 ed                	xor    ebp,ebp
c00134f3:	50                   	push   eax
c00134f4:	e8 6a 43 ff ff       	call   c0007863 <malloc>
c00134f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134fd:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00134ff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013506:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001350a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001350e:	0f af c2             	imul   eax,edx
c0013511:	99                   	cdq    
c0013512:	52                   	push   edx
c0013513:	50                   	push   eax
c0013514:	56                   	push   esi
c0013515:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013518:	83 c4 20             	add    esp,0x20
c001351b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013523:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0013527:	0f 86 80 00 00 00    	jbe    c00135ad <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001352d:	0f b7 fd             	movzx  edi,bp
c0013530:	c1 e7 05             	shl    edi,0x5
c0013533:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013537:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001353a:	75 6b                	jne    c00135a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001353c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001353f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013543:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013546:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001354a:	52                   	push   edx
c001354b:	31 d2                	xor    edx,edx
c001354d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013550:	52                   	push   edx
c0013551:	50                   	push   eax
c0013552:	56                   	push   esi
c0013553:	e8 ee 77 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c0013558:	83 c4 10             	add    esp,0x10
c001355b:	85 c0                	test   eax,eax
c001355d:	74 17                	je     c0013576 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001355f:	83 ec 0c             	sub    esp,0xc
c0013562:	68 6d 08 02 c0       	push   0xc002086d
c0013567:	e8 e7 70 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c001356c:	83 c4 10             	add    esp,0x10
c001356f:	31 c0                	xor    eax,eax
c0013571:	e9 87 00 00 00       	jmp    c00135fd <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0013576:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013579:	83 ec 0c             	sub    esp,0xc
c001357c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001357f:	50                   	push   eax
c0013580:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013584:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013588:	56                   	push   esi
c0013589:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001358d:	e8 d7 fb ff ff       	call   c0013169 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013592:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013596:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001359a:	83 c4 20             	add    esp,0x20
c001359d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00135a1:	73 04                	jae    c00135a7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00135a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00135a7:	45                   	inc    ebp
c00135a8:	e9 76 ff ff ff       	jmp    c0013523 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00135ad:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00135b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00135b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00135b9:	83 ec 0c             	sub    esp,0xc
c00135bc:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00135c2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00135c7:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00135cd:	05 00 10 00 00       	add    eax,0x1000
c00135d2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00135d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135d9:	e8 95 42 ff ff       	call   c0007873 <free>
c00135de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00135e1:	e8 8d 42 ff ff       	call   c0007873 <free>
c00135e6:	58                   	pop    eax
c00135e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135eb:	e8 83 42 ff ff       	call   c0007873 <free>
c00135f0:	89 34 24             	mov    DWORD PTR [esp],esi
c00135f3:	e8 ee 76 ff ff       	call   c000ace6 <File::close()>
c00135f8:	83 c4 10             	add    esp,0x10
c00135fb:	b0 01                	mov    al,0x1
c00135fd:	83 c4 3c             	add    esp,0x3c
c0013600:	5b                   	pop    ebx
c0013601:	5e                   	pop    esi
c0013602:	5f                   	pop    edi
c0013603:	5d                   	pop    ebp
c0013604:	c3                   	ret    

c0013605 <Thr::runtimeReferenceHelper()>:
c0013605:	83 ec 18             	sub    esp,0x18
c0013608:	68 75 08 02 c0       	push   0xc0020875
c001360d:	e8 41 70 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0013612:	fa                   	cli    
c0013613:	83 c4 10             	add    esp,0x10
c0013616:	eb fe                	jmp    c0013616 <Thr::runtimeReferenceHelper()+0x11>

c0013618 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013618:	57                   	push   edi
c0013619:	56                   	push   esi
c001361a:	53                   	push   ebx
c001361b:	31 db                	xor    ebx,ebx
c001361d:	39 1d 40 71 02 c0    	cmp    DWORD PTR ds:0xc0027140,ebx
c0013623:	7e 3c                	jle    c0013661 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013625:	8b 34 9d c0 70 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8f40]
c001362c:	31 ff                	xor    edi,edi
c001362e:	39 3c 9d c0 6f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd9040],edi
c0013635:	7e 27                	jle    c001365e <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013637:	50                   	push   eax
c0013638:	50                   	push   eax
c0013639:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001363d:	8b 06                	mov    eax,DWORD PTR [esi]
c001363f:	03 04 9d 40 70 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8fc0]
c0013646:	50                   	push   eax
c0013647:	e8 94 d0 fe ff       	call   c00006e0 <strcmp>
c001364c:	83 c4 10             	add    esp,0x10
c001364f:	85 c0                	test   eax,eax
c0013651:	75 05                	jne    c0013658 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013653:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013656:	eb 0b                	jmp    c0013663 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013658:	83 c6 10             	add    esi,0x10
c001365b:	47                   	inc    edi
c001365c:	eb d0                	jmp    c001362e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001365e:	43                   	inc    ebx
c001365f:	eb bc                	jmp    c001361d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013661:	31 c0                	xor    eax,eax
c0013663:	5b                   	pop    ebx
c0013664:	5e                   	pop    esi
c0013665:	5f                   	pop    edi
c0013666:	c3                   	ret    

c0013667 <Thr::loadKernelSymbolTable(char const*)>:
c0013667:	55                   	push   ebp
c0013668:	57                   	push   edi
c0013669:	56                   	push   esi
c001366a:	53                   	push   ebx
c001366b:	83 ec 68             	sub    esp,0x68
c001366e:	8b 35 90 71 02 c0    	mov    esi,DWORD PTR ds:0xc0027190
c0013674:	68 14 01 00 00       	push   0x114
c0013679:	e8 e5 41 ff ff       	call   c0007863 <malloc>
c001367e:	83 c4 0c             	add    esp,0xc
c0013681:	89 c3                	mov    ebx,eax
c0013683:	56                   	push   esi
c0013684:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013688:	50                   	push   eax
c0013689:	e8 3a 75 ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c001368e:	5e                   	pop    esi
c001368f:	5f                   	pop    edi
c0013690:	6a 01                	push   0x1
c0013692:	53                   	push   ebx
c0013693:	e8 f0 75 ff ff       	call   c000ac88 <File::open(FileOpenMode)>
c0013698:	83 c4 10             	add    esp,0x10
c001369b:	85 c0                	test   eax,eax
c001369d:	74 0a                	je     c00136a9 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001369f:	83 ec 0c             	sub    esp,0xc
c00136a2:	68 97 08 02 c0       	push   0xc0020897
c00136a7:	eb 34                	jmp    c00136dd <Thr::loadKernelSymbolTable(char const*)+0x76>
c00136a9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00136b1:	83 ec 0c             	sub    esp,0xc
c00136b4:	6a 34                	push   0x34
c00136b6:	e8 a8 41 ff ff       	call   c0007863 <malloc>
c00136bb:	59                   	pop    ecx
c00136bc:	89 c7                	mov    edi,eax
c00136be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136c0:	8d 74 24 34          	lea    esi,[esp+0x34]
c00136c4:	56                   	push   esi
c00136c5:	57                   	push   edi
c00136c6:	6a 00                	push   0x0
c00136c8:	6a 34                	push   0x34
c00136ca:	53                   	push   ebx
c00136cb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00136ce:	83 c4 20             	add    esp,0x20
c00136d1:	85 c0                	test   eax,eax
c00136d3:	74 17                	je     c00136ec <Thr::loadKernelSymbolTable(char const*)+0x85>
c00136d5:	83 ec 0c             	sub    esp,0xc
c00136d8:	68 ae 08 02 c0       	push   0xc00208ae
c00136dd:	e8 25 cd ff ff       	call   c0010407 <KePanic(char const*)>
c00136e2:	83 c4 10             	add    esp,0x10
c00136e5:	31 c0                	xor    eax,eax
c00136e7:	e9 31 02 00 00       	jmp    c001391d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00136ec:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00136f2:	75 e1                	jne    c00136d5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00136f4:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00136f7:	85 c0                	test   eax,eax
c00136f9:	74 da                	je     c00136d5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00136fb:	52                   	push   edx
c00136fc:	31 d2                	xor    edx,edx
c00136fe:	52                   	push   edx
c00136ff:	50                   	push   eax
c0013700:	53                   	push   ebx
c0013701:	e8 40 76 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c0013706:	83 c4 10             	add    esp,0x10
c0013709:	85 c0                	test   eax,eax
c001370b:	75 c8                	jne    c00136d5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001370d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013711:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013715:	0f af c2             	imul   eax,edx
c0013718:	83 ec 0c             	sub    esp,0xc
c001371b:	31 ed                	xor    ebp,ebp
c001371d:	50                   	push   eax
c001371e:	e8 40 41 ff ff       	call   c0007863 <malloc>
c0013723:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013727:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013729:	89 34 24             	mov    DWORD PTR [esp],esi
c001372c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013730:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013734:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013738:	0f af c2             	imul   eax,edx
c001373b:	99                   	cdq    
c001373c:	52                   	push   edx
c001373d:	50                   	push   eax
c001373e:	53                   	push   ebx
c001373f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013742:	83 c4 20             	add    esp,0x20
c0013745:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001374d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013755:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001375d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013765:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0013769:	0f 86 aa 00 00 00    	jbe    c0013819 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001376f:	0f b7 f5             	movzx  esi,bp
c0013772:	6b f6 28             	imul   esi,esi,0x28
c0013775:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013779:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001377c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013780:	50                   	push   eax
c0013781:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013785:	6b c0 28             	imul   eax,eax,0x28
c0013788:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001378c:	8b 16                	mov    edx,DWORD PTR [esi]
c001378e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013792:	89 d0                	mov    eax,edx
c0013794:	31 d2                	xor    edx,edx
c0013796:	52                   	push   edx
c0013797:	50                   	push   eax
c0013798:	53                   	push   ebx
c0013799:	e8 a8 75 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c001379e:	83 c4 0c             	add    esp,0xc
c00137a1:	6a 20                	push   0x20
c00137a3:	6a 00                	push   0x0
c00137a5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00137a9:	52                   	push   edx
c00137aa:	e8 11 cd fe ff       	call   c00004c0 <memset>
c00137af:	58                   	pop    eax
c00137b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137b2:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00137b6:	51                   	push   ecx
c00137b7:	8d 54 24 40          	lea    edx,[esp+0x40]
c00137bb:	52                   	push   edx
c00137bc:	6a 00                	push   0x0
c00137be:	6a 1f                	push   0x1f
c00137c0:	53                   	push   ebx
c00137c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137c4:	83 c4 18             	add    esp,0x18
c00137c7:	68 c5 08 02 c0       	push   0xc00208c5
c00137cc:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00137d0:	52                   	push   edx
c00137d1:	e8 0a cf fe ff       	call   c00006e0 <strcmp>
c00137d6:	83 c4 10             	add    esp,0x10
c00137d9:	85 c0                	test   eax,eax
c00137db:	75 0f                	jne    c00137ec <Thr::loadKernelSymbolTable(char const*)+0x185>
c00137dd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00137e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00137e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00137e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137ec:	50                   	push   eax
c00137ed:	50                   	push   eax
c00137ee:	68 cd 08 02 c0       	push   0xc00208cd
c00137f3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00137f7:	50                   	push   eax
c00137f8:	e8 e3 ce fe ff       	call   c00006e0 <strcmp>
c00137fd:	83 c4 10             	add    esp,0x10
c0013800:	85 c0                	test   eax,eax
c0013802:	75 0f                	jne    c0013813 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013804:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013807:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001380b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001380f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013813:	45                   	inc    ebp
c0013814:	e9 4c ff ff ff       	jmp    c0013765 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013819:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001381e:	75 10                	jne    c0013830 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013820:	83 ec 0c             	sub    esp,0xc
c0013823:	68 d5 08 02 c0       	push   0xc00208d5
c0013828:	e8 da cb ff ff       	call   c0010407 <KePanic(char const*)>
c001382d:	83 c4 10             	add    esp,0x10
c0013830:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013835:	75 10                	jne    c0013847 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013837:	83 ec 0c             	sub    esp,0xc
c001383a:	68 d5 08 02 c0       	push   0xc00208d5
c001383f:	e8 c3 cb ff ff       	call   c0010407 <KePanic(char const*)>
c0013844:	83 c4 10             	add    esp,0x10
c0013847:	31 d2                	xor    edx,edx
c0013849:	50                   	push   eax
c001384a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001384e:	52                   	push   edx
c001384f:	50                   	push   eax
c0013850:	53                   	push   ebx
c0013851:	e8 f0 74 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c0013856:	5a                   	pop    edx
c0013857:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001385b:	e8 03 40 ff ff       	call   c0007863 <malloc>
c0013860:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013864:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013868:	5e                   	pop    esi
c0013869:	8b 03                	mov    eax,DWORD PTR [ebx]
c001386b:	31 c9                	xor    ecx,ecx
c001386d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013871:	55                   	push   ebp
c0013872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013876:	51                   	push   ecx
c0013877:	52                   	push   edx
c0013878:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001387c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013880:	53                   	push   ebx
c0013881:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013884:	83 c4 14             	add    esp,0x14
c0013887:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001388b:	e8 d3 3f ff ff       	call   c0007863 <malloc>
c0013890:	89 c6                	mov    esi,eax
c0013892:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013894:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013897:	56                   	push   esi
c0013898:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001389c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00138a0:	51                   	push   ecx
c00138a1:	52                   	push   edx
c00138a2:	53                   	push   ebx
c00138a3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00138a6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00138aa:	8b 15 40 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027140
c00138b0:	c1 e8 04             	shr    eax,0x4
c00138b3:	83 c4 1c             	add    esp,0x1c
c00138b6:	89 04 95 c0 6f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9040],eax
c00138bd:	31 d2                	xor    edx,edx
c00138bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00138c3:	52                   	push   edx
c00138c4:	50                   	push   eax
c00138c5:	53                   	push   ebx
c00138c6:	e8 7b 74 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c00138cb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00138cd:	31 d2                	xor    edx,edx
c00138cf:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00138d2:	56                   	push   esi
c00138d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00138d7:	52                   	push   edx
c00138d8:	50                   	push   eax
c00138d9:	53                   	push   ebx
c00138da:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00138dd:	83 c4 14             	add    esp,0x14
c00138e0:	53                   	push   ebx
c00138e1:	e8 00 74 ff ff       	call   c000ace6 <File::close()>
c00138e6:	5d                   	pop    ebp
c00138e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00138eb:	e8 83 3f ff ff       	call   c0007873 <free>
c00138f0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00138f3:	e8 7b 3f ff ff       	call   c0007873 <free>
c00138f8:	a1 40 71 02 c0       	mov    eax,ds:0xc0027140
c00138fd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013901:	8d 50 01             	lea    edx,[eax+0x1]
c0013904:	89 0c 85 c0 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f40],ecx
c001390b:	89 34 85 40 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8fc0],esi
c0013912:	89 15 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edx
c0013918:	83 c4 10             	add    esp,0x10
c001391b:	b0 01                	mov    al,0x1
c001391d:	83 c4 5c             	add    esp,0x5c
c0013920:	5b                   	pop    ebx
c0013921:	5e                   	pop    esi
c0013922:	5f                   	pop    edi
c0013923:	5d                   	pop    ebp
c0013924:	c3                   	ret    

c0013925 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013925:	55                   	push   ebp
c0013926:	57                   	push   edi
c0013927:	56                   	push   esi
c0013928:	53                   	push   ebx
c0013929:	81 ec 68 03 00 00    	sub    esp,0x368
c001392f:	8b 1d 90 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027190
c0013935:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001393c:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0013940:	68 14 01 00 00       	push   0x114
c0013945:	e8 19 3f ff ff       	call   c0007863 <malloc>
c001394a:	83 c4 0c             	add    esp,0xc
c001394d:	53                   	push   ebx
c001394e:	89 c5                	mov    ebp,eax
c0013950:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013957:	50                   	push   eax
c0013958:	e8 6b 72 ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c001395d:	5e                   	pop    esi
c001395e:	5f                   	pop    edi
c001395f:	6a 01                	push   0x1
c0013961:	55                   	push   ebp
c0013962:	e8 21 73 ff ff       	call   c000ac88 <File::open(FileOpenMode)>
c0013967:	83 c4 10             	add    esp,0x10
c001396a:	85 c0                	test   eax,eax
c001396c:	0f 85 b1 06 00 00    	jne    c0014023 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c0013972:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001397a:	83 ec 0c             	sub    esp,0xc
c001397d:	6a 34                	push   0x34
c001397f:	e8 df 3e ff ff       	call   c0007863 <malloc>
c0013984:	5b                   	pop    ebx
c0013985:	89 c7                	mov    edi,eax
c0013987:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001398a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001398e:	53                   	push   ebx
c001398f:	57                   	push   edi
c0013990:	6a 00                	push   0x0
c0013992:	6a 34                	push   0x34
c0013994:	55                   	push   ebp
c0013995:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013998:	83 c4 20             	add    esp,0x20
c001399b:	85 c0                	test   eax,eax
c001399d:	0f 85 80 06 00 00    	jne    c0014023 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c00139a3:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00139a9:	0f 85 74 06 00 00    	jne    c0014023 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c00139af:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00139b2:	85 c0                	test   eax,eax
c00139b4:	0f 84 69 06 00 00    	je     c0014023 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c00139ba:	31 d2                	xor    edx,edx
c00139bc:	51                   	push   ecx
c00139bd:	52                   	push   edx
c00139be:	50                   	push   eax
c00139bf:	55                   	push   ebp
c00139c0:	e8 81 73 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c00139c5:	83 c4 10             	add    esp,0x10
c00139c8:	85 c0                	test   eax,eax
c00139ca:	0f 85 53 06 00 00    	jne    c0014023 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c00139d0:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00139d3:	83 ec 0c             	sub    esp,0xc
c00139d6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00139da:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00139de:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00139e2:	0f af c2             	imul   eax,edx
c00139e5:	50                   	push   eax
c00139e6:	e8 78 3e ff ff       	call   c0007863 <malloc>
c00139eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00139ef:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00139f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139f9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00139fd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013a01:	0f af c2             	imul   eax,edx
c0013a04:	99                   	cdq    
c0013a05:	52                   	push   edx
c0013a06:	50                   	push   eax
c0013a07:	55                   	push   ebp
c0013a08:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a0b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0013a0e:	83 c4 20             	add    esp,0x20
c0013a11:	85 c0                	test   eax,eax
c0013a13:	0f 84 0a 06 00 00    	je     c0014023 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c0013a19:	52                   	push   edx
c0013a1a:	31 d2                	xor    edx,edx
c0013a1c:	52                   	push   edx
c0013a1d:	50                   	push   eax
c0013a1e:	55                   	push   ebp
c0013a1f:	e8 22 73 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c0013a24:	83 c4 10             	add    esp,0x10
c0013a27:	85 c0                	test   eax,eax
c0013a29:	0f 85 f4 05 00 00    	jne    c0014023 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c0013a2f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013a33:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013a37:	0f af c2             	imul   eax,edx
c0013a3a:	83 ec 0c             	sub    esp,0xc
c0013a3d:	31 f6                	xor    esi,esi
c0013a3f:	50                   	push   eax
c0013a40:	e8 1e 3e ff ff       	call   c0007863 <malloc>
c0013a45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013a49:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013a4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a4f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a53:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013a57:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013a5b:	0f af c2             	imul   eax,edx
c0013a5e:	99                   	cdq    
c0013a5f:	52                   	push   edx
c0013a60:	50                   	push   eax
c0013a61:	55                   	push   ebp
c0013a62:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013a65:	83 c4 20             	add    esp,0x20
c0013a68:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0013a6c:	0f 86 8a 00 00 00    	jbe    c0013afc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0013a72:	0f b7 de             	movzx  ebx,si
c0013a75:	c1 e3 05             	shl    ebx,0x5
c0013a78:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0013a7c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0013a7f:	75 75                	jne    c0013af6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0013a81:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013a84:	31 d2                	xor    edx,edx
c0013a86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a8a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013a8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013a91:	50                   	push   eax
c0013a92:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013a95:	52                   	push   edx
c0013a96:	50                   	push   eax
c0013a97:	55                   	push   ebp
c0013a98:	e8 a9 72 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c0013a9d:	83 c4 10             	add    esp,0x10
c0013aa0:	85 c0                	test   eax,eax
c0013aa2:	0f 85 7b 05 00 00    	jne    c0014023 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c0013aa8:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013aaf:	83 ec 0c             	sub    esp,0xc
c0013ab2:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
c0013ab6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013ab9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0013abd:	31 d2                	xor    edx,edx
c0013abf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013ac3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013aca:	50                   	push   eax
c0013acb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013acf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ad3:	52                   	push   edx
c0013ad4:	50                   	push   eax
c0013ad5:	55                   	push   ebp
c0013ad6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ad9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013adc:	83 c4 1c             	add    esp,0x1c
c0013adf:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0013ae2:	50                   	push   eax
c0013ae3:	6a 00                	push   0x0
c0013ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ae9:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0013aed:	50                   	push   eax
c0013aee:	e8 cd c9 fe ff       	call   c00004c0 <memset>
c0013af3:	83 c4 10             	add    esp,0x10
c0013af6:	46                   	inc    esi
c0013af7:	e9 6c ff ff ff       	jmp    c0013a68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0013afc:	53                   	push   ebx
c0013afd:	31 db                	xor    ebx,ebx
c0013aff:	68 00 01 00 00       	push   0x100
c0013b04:	6a 00                	push   0x0
c0013b06:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013b0a:	50                   	push   eax
c0013b0b:	e8 b0 c9 fe ff       	call   c00004c0 <memset>
c0013b10:	83 c4 0c             	add    esp,0xc
c0013b13:	68 00 01 00 00       	push   0x100
c0013b18:	6a 00                	push   0x0
c0013b1a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0013b21:	50                   	push   eax
c0013b22:	e8 99 c9 fe ff       	call   c00004c0 <memset>
c0013b27:	83 c4 10             	add    esp,0x10
c0013b2a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013b32:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0013b3a:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0013b42:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013b4a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013b52:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0013b56:	0f 86 30 01 00 00    	jbe    c0013c8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0013b5c:	0f b7 f3             	movzx  esi,bx
c0013b5f:	6b f6 28             	imul   esi,esi,0x28
c0013b62:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013b66:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013b69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b6d:	52                   	push   edx
c0013b6e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0013b72:	6b d2 28             	imul   edx,edx,0x28
c0013b75:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013b79:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b7b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0013b7f:	31 d2                	xor    edx,edx
c0013b81:	52                   	push   edx
c0013b82:	50                   	push   eax
c0013b83:	55                   	push   ebp
c0013b84:	e8 bd 71 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c0013b89:	83 c4 0c             	add    esp,0xc
c0013b8c:	6a 20                	push   0x20
c0013b8e:	6a 00                	push   0x0
c0013b90:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0013b97:	51                   	push   ecx
c0013b98:	e8 23 c9 fe ff       	call   c00004c0 <memset>
c0013b9d:	59                   	pop    ecx
c0013b9e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ba1:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013ba5:	52                   	push   edx
c0013ba6:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0013bad:	51                   	push   ecx
c0013bae:	6a 00                	push   0x0
c0013bb0:	6a 1f                	push   0x1f
c0013bb2:	55                   	push   ebp
c0013bb3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bb6:	83 c4 1c             	add    esp,0x1c
c0013bb9:	6a 09                	push   0x9
c0013bbb:	68 ef 08 02 c0       	push   0xc00208ef
c0013bc0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0013bc7:	51                   	push   ecx
c0013bc8:	e8 b3 c7 fe ff       	call   c0000380 <memcmp>
c0013bcd:	83 c4 10             	add    esp,0x10
c0013bd0:	85 c0                	test   eax,eax
c0013bd2:	75 21                	jne    c0013bf5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0013bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013bdc:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0013be0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013be4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013be7:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0013bee:	89 d0                	mov    eax,edx
c0013bf0:	40                   	inc    eax
c0013bf1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013bf5:	50                   	push   eax
c0013bf6:	6a 09                	push   0x9
c0013bf8:	68 f9 08 02 c0       	push   0xc00208f9
c0013bfd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013c04:	50                   	push   eax
c0013c05:	e8 76 c7 fe ff       	call   c0000380 <memcmp>
c0013c0a:	83 c4 10             	add    esp,0x10
c0013c0d:	85 c0                	test   eax,eax
c0013c0f:	75 21                	jne    c0013c32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0013c11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013c19:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013c1d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0013c21:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013c24:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0013c2b:	89 c8                	mov    eax,ecx
c0013c2d:	40                   	inc    eax
c0013c2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c32:	50                   	push   eax
c0013c33:	50                   	push   eax
c0013c34:	68 c5 08 02 c0       	push   0xc00208c5
c0013c39:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013c40:	50                   	push   eax
c0013c41:	e8 9a ca fe ff       	call   c00006e0 <strcmp>
c0013c46:	83 c4 10             	add    esp,0x10
c0013c49:	85 c0                	test   eax,eax
c0013c4b:	75 0f                	jne    c0013c5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0013c4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013c50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c5c:	50                   	push   eax
c0013c5d:	50                   	push   eax
c0013c5e:	68 cd 08 02 c0       	push   0xc00208cd
c0013c63:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013c6a:	50                   	push   eax
c0013c6b:	e8 70 ca fe ff       	call   c00006e0 <strcmp>
c0013c70:	83 c4 10             	add    esp,0x10
c0013c73:	85 c0                	test   eax,eax
c0013c75:	75 0f                	jne    c0013c86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0013c77:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013c7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013c7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c82:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013c86:	43                   	inc    ebx
c0013c87:	e9 c6 fe ff ff       	jmp    c0013b52 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0013c8c:	31 d2                	xor    edx,edx
c0013c8e:	50                   	push   eax
c0013c8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c93:	52                   	push   edx
c0013c94:	50                   	push   eax
c0013c95:	55                   	push   ebp
c0013c96:	e8 ab 70 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c0013c9b:	58                   	pop    eax
c0013c9c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013ca0:	e8 be 3b ff ff       	call   c0007863 <malloc>
c0013ca5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013ca8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013cac:	58                   	pop    eax
c0013cad:	31 d2                	xor    edx,edx
c0013caf:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013cb3:	53                   	push   ebx
c0013cb4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013cb8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013cbc:	52                   	push   edx
c0013cbd:	50                   	push   eax
c0013cbe:	55                   	push   ebp
c0013cbf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013cc2:	83 c4 14             	add    esp,0x14
c0013cc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013cc9:	e8 95 3b ff ff       	call   c0007863 <malloc>
c0013cce:	31 d2                	xor    edx,edx
c0013cd0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013cd4:	83 c4 0c             	add    esp,0xc
c0013cd7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013cdb:	52                   	push   edx
c0013cdc:	50                   	push   eax
c0013cdd:	55                   	push   ebp
c0013cde:	e8 63 70 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c0013ce3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013ce6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ce9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013ced:	31 d2                	xor    edx,edx
c0013cef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013cf3:	52                   	push   edx
c0013cf4:	50                   	push   eax
c0013cf5:	55                   	push   ebp
c0013cf6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013cf9:	83 c4 20             	add    esp,0x20
c0013cfc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013d04:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013d08:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0013d0c:	0f 84 15 03 00 00    	je     c0014027 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x702>
c0013d12:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0013d19:	31 d2                	xor    edx,edx
c0013d1b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d1f:	c1 e8 03             	shr    eax,0x3
c0013d22:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013d26:	51                   	push   ecx
c0013d27:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d2b:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0013d2f:	52                   	push   edx
c0013d30:	50                   	push   eax
c0013d31:	55                   	push   ebp
c0013d32:	e8 0f 70 ff ff       	call   c000ad46 <File::seek(unsigned long long)>
c0013d37:	5b                   	pop    ebx
c0013d38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d3c:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0013d43:	e8 1b 3b ff ff       	call   c0007863 <malloc>
c0013d48:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013d4b:	5e                   	pop    esi
c0013d4c:	89 c3                	mov    ebx,eax
c0013d4e:	31 d2                	xor    edx,edx
c0013d50:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013d54:	50                   	push   eax
c0013d55:	53                   	push   ebx
c0013d56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013d5a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0013d61:	52                   	push   edx
c0013d62:	50                   	push   eax
c0013d63:	55                   	push   ebp
c0013d64:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d67:	83 c4 20             	add    esp,0x20
c0013d6a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0013d72:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013d76:	39 54 24 20          	cmp    DWORD PTR [esp+0x20],edx
c0013d7a:	0f 8d 8e 02 00 00    	jge    c001400e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e9>
c0013d80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d84:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0013d89:	8b 04 c3             	mov    eax,DWORD PTR [ebx+eax*8]
c0013d8c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013d90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d94:	8b 44 c3 04          	mov    eax,DWORD PTR [ebx+eax*8+0x4]
c0013d98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d9c:	c1 e8 08             	shr    eax,0x8
c0013d9f:	89 c6                	mov    esi,eax
c0013da1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013da5:	c1 e6 04             	shl    esi,0x4
c0013da8:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013dac:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0013daf:	85 d2                	test   edx,edx
c0013db1:	0f 85 bf 00 00 00    	jne    c0013e76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x551>
c0013db7:	83 ec 0c             	sub    esp,0xc
c0013dba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013dbe:	03 06                	add    eax,DWORD PTR [esi]
c0013dc0:	50                   	push   eax
c0013dc1:	e8 52 f8 ff ff       	call   c0013618 <Thr::getAddressOfKernelSymbol(char const*)>
c0013dc6:	83 c4 10             	add    esp,0x10
c0013dc9:	89 c2                	mov    edx,eax
c0013dcb:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0013dd0:	85 c0                	test   eax,eax
c0013dd2:	0f 85 9e 00 00 00    	jne    c0013e76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x551>
c0013dd8:	83 ec 0c             	sub    esp,0xc
c0013ddb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013ddf:	03 06                	add    eax,DWORD PTR [esi]
c0013de1:	50                   	push   eax
c0013de2:	e8 0d c8 ff ff       	call   c00105f4 <KeResolveCompatibilitySymbol(char*)>
c0013de7:	83 c4 10             	add    esp,0x10
c0013dea:	89 c2                	mov    edx,eax
c0013dec:	85 c0                	test   eax,eax
c0013dee:	0f 85 82 00 00 00    	jne    c0013e76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x551>
c0013df4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013df8:	50                   	push   eax
c0013df9:	50                   	push   eax
c0013dfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dfe:	03 06                	add    eax,DWORD PTR [esi]
c0013e00:	50                   	push   eax
c0013e01:	68 03 09 02 c0       	push   0xc0020903
c0013e06:	e8 48 68 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0013e0b:	58                   	pop    eax
c0013e0c:	5a                   	pop    edx
c0013e0d:	68 1d 09 02 c0       	push   0xc002091d
c0013e12:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013e19:	50                   	push   eax
c0013e1a:	e8 d1 c7 fe ff       	call   c00005f0 <strcpy>
c0013e1f:	59                   	pop    ecx
c0013e20:	58                   	pop    eax
c0013e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e25:	03 06                	add    eax,DWORD PTR [esi]
c0013e27:	50                   	push   eax
c0013e28:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013e2f:	50                   	push   eax
c0013e30:	e8 8b c9 fe ff       	call   c00007c0 <strcat>
c0013e35:	58                   	pop    eax
c0013e36:	5a                   	pop    edx
c0013e37:	68 b3 09 02 c0       	push   0xc00209b3
c0013e3c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013e43:	50                   	push   eax
c0013e44:	e8 77 c9 fe ff       	call   c00007c0 <strcat>
c0013e49:	83 c4 10             	add    esp,0x10
c0013e4c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013e51:	0f 84 73 01 00 00    	je     c0013fca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c0013e57:	83 ec 0c             	sub    esp,0xc
c0013e5a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013e61:	50                   	push   eax
c0013e62:	e8 a0 c5 ff ff       	call   c0010407 <KePanic(char const*)>
c0013e67:	83 c4 10             	add    esp,0x10
c0013e6a:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0013e6e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013e72:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0013e76:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0013e7b:	0f 85 90 00 00 00    	jne    c0013f11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ec>
c0013e81:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0013e88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013e8c:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0013e90:	01 f0                	add    eax,esi
c0013e92:	81 7c 24 0c 01 01 00 00 	cmp    DWORD PTR [esp+0xc],0x101
c0013e9a:	0f 94 c1             	sete   cl
c0013e9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013ea1:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ea3:	81 7c 24 0c 01 04 00 00 	cmp    DWORD PTR [esp+0xc],0x401
c0013eab:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013eb0:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0013eb4:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013eb9:	74 39                	je     c0013ef4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cf>
c0013ebb:	8d 34 10             	lea    esi,[eax+edx*1]
c0013ebe:	84 c9                	test   cl,cl
c0013ec0:	75 15                	jne    c0013ed7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b2>
c0013ec2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013ec6:	66 83 f8 0c          	cmp    ax,0xc
c0013eca:	76 05                	jbe    c0013ed1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ac>
c0013ecc:	b8 0c 00 00 00       	mov    eax,0xc
c0013ed1:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0013ed5:	76 2f                	jbe    c0013f06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e1>
c0013ed7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013edc:	0f 84 e8 00 00 00    	je     c0013fca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c0013ee2:	83 ec 0c             	sub    esp,0xc
c0013ee5:	68 34 09 02 c0       	push   0xc0020934
c0013eea:	e8 18 c5 ff ff       	call   c0010407 <KePanic(char const*)>
c0013eef:	83 c4 10             	add    esp,0x10
c0013ef2:	eb 12                	jmp    c0013f06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e1>
c0013ef4:	01 c6                	add    esi,eax
c0013ef6:	84 c9                	test   cl,cl
c0013ef8:	75 0c                	jne    c0013f06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e1>
c0013efa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013efe:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0013f02:	77 02                	ja     c0013f06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e1>
c0013f04:	01 d6                	add    esi,edx
c0013f06:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013f0a:	89 30                	mov    DWORD PTR [eax],esi
c0013f0c:	e9 f4 00 00 00       	jmp    c0014005 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e0>
c0013f11:	80 7c 24 0c 02       	cmp    BYTE PTR [esp+0xc],0x2
c0013f16:	0f 85 80 00 00 00    	jne    c0013f9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x677>
c0013f1c:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0013f23:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0013f27:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0013f2b:	81 7c 24 0c 01 01 00 00 	cmp    DWORD PTR [esp+0xc],0x101
c0013f33:	74 22                	je     c0013f57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0013f35:	81 7c 24 0c 01 04 00 00 	cmp    DWORD PTR [esp+0xc],0x401
c0013f3d:	74 18                	je     c0013f57 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x632>
c0013f3f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013f43:	66 83 f8 0e          	cmp    ax,0xe
c0013f47:	b9 0a 00 00 00       	mov    ecx,0xa
c0013f4c:	77 03                	ja     c0013f51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62c>
c0013f4e:	8d 48 fc             	lea    ecx,[eax-0x4]
c0013f51:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0013f55:	76 1f                	jbe    c0013f76 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x651>
c0013f57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013f5b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013f60:	74 68                	je     c0013fca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c0013f62:	83 ec 0c             	sub    esp,0xc
c0013f65:	68 50 09 02 c0       	push   0xc0020950
c0013f6a:	e8 98 c4 ff ff       	call   c0010407 <KePanic(char const*)>
c0013f6f:	83 c4 10             	add    esp,0x10
c0013f72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013f76:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f78:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013f7d:	74 13                	je     c0013f92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66d>
c0013f7f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013f83:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0013f8a:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0013f8e:	01 c8                	add    eax,ecx
c0013f90:	eb 04                	jmp    c0013f96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x671>
c0013f92:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0013f96:	01 c2                	add    edx,eax
c0013f98:	89 16                	mov    DWORD PTR [esi],edx
c0013f9a:	eb 69                	jmp    c0014005 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e0>
c0013f9c:	56                   	push   esi
c0013f9d:	56                   	push   esi
c0013f9e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0013fa3:	50                   	push   eax
c0013fa4:	68 6c 09 02 c0       	push   0xc002096c
c0013fa9:	e8 a5 66 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0013fae:	83 c4 10             	add    esp,0x10
c0013fb1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013fb6:	74 12                	je     c0013fca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c0013fb8:	83 ec 0c             	sub    esp,0xc
c0013fbb:	68 77 09 02 c0       	push   0xc0020977
c0013fc0:	e8 42 c4 ff ff       	call   c0010407 <KePanic(char const*)>
c0013fc5:	83 c4 10             	add    esp,0x10
c0013fc8:	eb 3b                	jmp    c0014005 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e0>
c0013fca:	83 ec 0c             	sub    esp,0xc
c0013fcd:	55                   	push   ebp
c0013fce:	e8 13 6d ff ff       	call   c000ace6 <File::close()>
c0013fd3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013fd6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013fd9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013fdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013fdf:	e8 8f 38 ff ff       	call   c0007873 <free>
c0013fe4:	59                   	pop    ecx
c0013fe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013fe9:	e8 85 38 ff ff       	call   c0007873 <free>
c0013fee:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013ff1:	e8 7d 38 ff ff       	call   c0007873 <free>
c0013ff6:	5b                   	pop    ebx
c0013ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ffb:	e8 73 38 ff ff       	call   c0007873 <free>
c0014000:	83 c4 10             	add    esp,0x10
c0014003:	eb 1e                	jmp    c0014023 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fe>
c0014005:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014009:	e9 64 fd ff ff       	jmp    c0013d72 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x44d>
c001400e:	83 ec 0c             	sub    esp,0xc
c0014011:	53                   	push   ebx
c0014012:	e8 5c 38 ff ff       	call   c0007873 <free>
c0014017:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001401b:	83 c4 10             	add    esp,0x10
c001401e:	e9 e1 fc ff ff       	jmp    c0013d04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0014023:	31 c0                	xor    eax,eax
c0014025:	eb 33                	jmp    c001405a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x735>
c0014027:	83 ec 0c             	sub    esp,0xc
c001402a:	55                   	push   ebp
c001402b:	e8 b6 6c ff ff       	call   c000ace6 <File::close()>
c0014030:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014033:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014036:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014039:	58                   	pop    eax
c001403a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001403e:	e8 30 38 ff ff       	call   c0007873 <free>
c0014043:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014046:	e8 28 38 ff ff       	call   c0007873 <free>
c001404b:	5a                   	pop    edx
c001404c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014050:	e8 1e 38 ff ff       	call   c0007873 <free>
c0014055:	83 c4 10             	add    esp,0x10
c0014058:	b0 01                	mov    al,0x1
c001405a:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014060:	5b                   	pop    ebx
c0014061:	5e                   	pop    esi
c0014062:	5f                   	pop    edi
c0014063:	5d                   	pop    ebp
c0014064:	c3                   	ret    

c0014065 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014065:	56                   	push   esi
c0014066:	31 d2                	xor    edx,edx
c0014068:	53                   	push   ebx
c0014069:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c001406f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014073:	39 d3                	cmp    ebx,edx
c0014075:	7e 1b                	jle    c0014092 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014077:	8b 04 95 c0 6b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9440]
c001407e:	39 c8                	cmp    eax,ecx
c0014080:	77 0d                	ja     c001408f <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014082:	8b 34 95 c0 69 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd9640]
c0014089:	01 c6                	add    esi,eax
c001408b:	39 ce                	cmp    esi,ecx
c001408d:	77 05                	ja     c0014094 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001408f:	42                   	inc    edx
c0014090:	eb e1                	jmp    c0014073 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014092:	31 c0                	xor    eax,eax
c0014094:	5b                   	pop    ebx
c0014095:	5e                   	pop    esi
c0014096:	c3                   	ret    

c0014097 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014097:	53                   	push   ebx
c0014098:	31 c0                	xor    eax,eax
c001409a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001409e:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c00140a4:	39 c3                	cmp    ebx,eax
c00140a6:	7e 22                	jle    c00140ca <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00140a8:	8b 14 85 c0 6b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9440]
c00140af:	39 ca                	cmp    edx,ecx
c00140b1:	77 14                	ja     c00140c7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00140b3:	03 14 85 c0 69 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd9640]
c00140ba:	39 ca                	cmp    edx,ecx
c00140bc:	76 09                	jbe    c00140c7 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00140be:	8b 04 85 c0 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9240]
c00140c5:	eb 05                	jmp    c00140cc <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00140c7:	40                   	inc    eax
c00140c8:	eb da                	jmp    c00140a4 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00140ca:	31 c0                	xor    eax,eax
c00140cc:	5b                   	pop    ebx
c00140cd:	c3                   	ret    

c00140ce <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00140ce:	53                   	push   ebx
c00140cf:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00140d3:	53                   	push   ebx
c00140d4:	e8 8c ff ff ff       	call   c0014065 <Thr::getDriverBaseFromAddress(unsigned long)>
c00140d9:	5a                   	pop    edx
c00140da:	31 d2                	xor    edx,edx
c00140dc:	85 c0                	test   eax,eax
c00140de:	74 04                	je     c00140e4 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00140e0:	89 da                	mov    edx,ebx
c00140e2:	29 c2                	sub    edx,eax
c00140e4:	89 d0                	mov    eax,edx
c00140e6:	5b                   	pop    ebx
c00140e7:	c3                   	ret    

c00140e8 <Thr::loadDLL(char const*, bool)>:
c00140e8:	55                   	push   ebp
c00140e9:	57                   	push   edi
c00140ea:	56                   	push   esi
c00140eb:	53                   	push   ebx
c00140ec:	81 ec 34 01 00 00    	sub    esp,0x134
c00140f2:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00140f9:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014100:	56                   	push   esi
c0014101:	68 8f 09 02 c0       	push   0xc002098f
c0014106:	e8 48 65 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c001410b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014112:	e8 4c 37 ff ff       	call   c0007863 <malloc>
c0014117:	83 c4 0c             	add    esp,0xc
c001411a:	89 c3                	mov    ebx,eax
c001411c:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0014122:	56                   	push   esi
c0014123:	50                   	push   eax
c0014124:	e8 9f 6a ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c0014129:	83 c4 10             	add    esp,0x10
c001412c:	85 db                	test   ebx,ebx
c001412e:	75 3c                	jne    c001416c <Thr::loadDLL(char const*, bool)+0x84>
c0014130:	89 e8                	mov    eax,ebp
c0014132:	84 c0                	test   al,al
c0014134:	0f 84 d6 01 00 00    	je     c0014310 <Thr::loadDLL(char const*, bool)+0x228>
c001413a:	57                   	push   edi
c001413b:	57                   	push   edi
c001413c:	68 a0 09 02 c0       	push   0xc00209a0
c0014141:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c0014145:	57                   	push   edi
c0014146:	e8 a5 c4 fe ff       	call   c00005f0 <strcpy>
c001414b:	58                   	pop    eax
c001414c:	5a                   	pop    edx
c001414d:	56                   	push   esi
c001414e:	57                   	push   edi
c001414f:	e8 6c c6 fe ff       	call   c00007c0 <strcat>
c0014154:	59                   	pop    ecx
c0014155:	58                   	pop    eax
c0014156:	68 b3 09 02 c0       	push   0xc00209b3
c001415b:	57                   	push   edi
c001415c:	e8 5f c6 fe ff       	call   c00007c0 <strcat>
c0014161:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014164:	e8 9e c2 ff ff       	call   c0010407 <KePanic(char const*)>
c0014169:	83 c4 10             	add    esp,0x10
c001416c:	51                   	push   ecx
c001416d:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014171:	50                   	push   eax
c0014172:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014176:	50                   	push   eax
c0014177:	53                   	push   ebx
c0014178:	e8 b7 6d ff ff       	call   c000af34 <File::stat(unsigned long long*, bool*)>
c001417d:	83 c4 10             	add    esp,0x10
c0014180:	85 db                	test   ebx,ebx
c0014182:	74 0c                	je     c0014190 <Thr::loadDLL(char const*, bool)+0xa8>
c0014184:	83 ec 0c             	sub    esp,0xc
c0014187:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014189:	53                   	push   ebx
c001418a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001418d:	83 c4 10             	add    esp,0x10
c0014190:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014195:	75 0a                	jne    c00141a1 <Thr::loadDLL(char const*, bool)+0xb9>
c0014197:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001419b:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001419f:	75 3c                	jne    c00141dd <Thr::loadDLL(char const*, bool)+0xf5>
c00141a1:	89 e8                	mov    eax,ebp
c00141a3:	84 c0                	test   al,al
c00141a5:	0f 84 63 01 00 00    	je     c001430e <Thr::loadDLL(char const*, bool)+0x226>
c00141ab:	51                   	push   ecx
c00141ac:	51                   	push   ecx
c00141ad:	68 a0 09 02 c0       	push   0xc00209a0
c00141b2:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00141b6:	53                   	push   ebx
c00141b7:	e8 34 c4 fe ff       	call   c00005f0 <strcpy>
c00141bc:	5f                   	pop    edi
c00141bd:	58                   	pop    eax
c00141be:	56                   	push   esi
c00141bf:	53                   	push   ebx
c00141c0:	e8 fb c5 fe ff       	call   c00007c0 <strcat>
c00141c5:	58                   	pop    eax
c00141c6:	5a                   	pop    edx
c00141c7:	68 b3 09 02 c0       	push   0xc00209b3
c00141cc:	53                   	push   ebx
c00141cd:	e8 ee c5 fe ff       	call   c00007c0 <strcat>
c00141d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141d5:	e8 2d c2 ff ff       	call   c0010407 <KePanic(char const*)>
c00141da:	83 c4 10             	add    esp,0x10
c00141dd:	52                   	push   edx
c00141de:	6a 03                	push   0x3
c00141e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141e4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00141e8:	05 ff 0f 00 00       	add    eax,0xfff
c00141ed:	83 d2 00             	adc    edx,0x0
c00141f0:	0f ac d0 0c          	shrd   eax,edx,0xc
c00141f4:	50                   	push   eax
c00141f5:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00141fb:	e8 38 59 ff ff       	call   c0009b38 <VAS::allocatePages(int, int)>
c0014200:	59                   	pop    ecx
c0014201:	89 c3                	mov    ebx,eax
c0014203:	5f                   	pop    edi
c0014204:	50                   	push   eax
c0014205:	68 2e f5 01 c0       	push   0xc001f52e
c001420a:	e8 44 64 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c001420f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014212:	e8 19 c3 fe ff       	call   c0000530 <strlen>
c0014217:	40                   	inc    eax
c0014218:	8b 3d a0 69 02 c0    	mov    edi,DWORD PTR ds:0xc00269a0
c001421e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014221:	e8 3d 36 ff ff       	call   c0007863 <malloc>
c0014226:	89 04 bd c0 6d 02 c0 	mov    DWORD PTR [edi*4-0x3ffd9240],eax
c001422d:	58                   	pop    eax
c001422e:	5a                   	pop    edx
c001422f:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c0014234:	56                   	push   esi
c0014235:	ff 34 85 c0 6d 02 c0 	push   DWORD PTR [eax*4-0x3ffd9240]
c001423c:	e8 af c3 fe ff       	call   c00005f0 <strcpy>
c0014241:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c0014246:	8d 50 01             	lea    edx,[eax+0x1]
c0014249:	89 1c 85 c0 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9440],ebx
c0014250:	89 15 a0 69 02 c0    	mov    DWORD PTR ds:0xc00269a0,edx
c0014256:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001425a:	83 c4 0c             	add    esp,0xc
c001425d:	89 14 85 c0 69 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9640],edx
c0014264:	6a 01                	push   0x1
c0014266:	53                   	push   ebx
c0014267:	56                   	push   esi
c0014268:	e8 b8 f6 ff ff       	call   c0013925 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001426d:	83 c4 10             	add    esp,0x10
c0014270:	89 c7                	mov    edi,eax
c0014272:	fe c8                	dec    al
c0014274:	74 2e                	je     c00142a4 <Thr::loadDLL(char const*, bool)+0x1bc>
c0014276:	89 e8                	mov    eax,ebp
c0014278:	84 c0                	test   al,al
c001427a:	74 12                	je     c001428e <Thr::loadDLL(char const*, bool)+0x1a6>
c001427c:	83 ec 0c             	sub    esp,0xc
c001427f:	68 b5 09 02 c0       	push   0xc00209b5
c0014284:	e8 7e c1 ff ff       	call   c0010407 <KePanic(char const*)>
c0014289:	83 c4 10             	add    esp,0x10
c001428c:	eb 06                	jmp    c0014294 <Thr::loadDLL(char const*, bool)+0x1ac>
c001428e:	89 f8                	mov    eax,edi
c0014290:	84 c0                	test   al,al
c0014292:	75 10                	jne    c00142a4 <Thr::loadDLL(char const*, bool)+0x1bc>
c0014294:	83 ec 0c             	sub    esp,0xc
c0014297:	68 d4 09 02 c0       	push   0xc00209d4
c001429c:	e8 66 c1 ff ff       	call   c0010407 <KePanic(char const*)>
c00142a1:	83 c4 10             	add    esp,0x10
c00142a4:	31 f6                	xor    esi,esi
c00142a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00142ae:	05 ff 0f 00 00       	add    eax,0xfff
c00142b3:	83 d2 00             	adc    edx,0x0
c00142b6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00142ba:	c1 ea 0c             	shr    edx,0xc
c00142bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00142c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00142c5:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00142c9:	ba 00 00 00 00       	mov    edx,0x0
c00142ce:	89 d0                	mov    eax,edx
c00142d0:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00142d4:	73 32                	jae    c0014308 <Thr::loadDLL(char const*, bool)+0x220>
c00142d6:	50                   	push   eax
c00142d7:	50                   	push   eax
c00142d8:	89 f0                	mov    eax,esi
c00142da:	c1 e0 0c             	shl    eax,0xc
c00142dd:	01 d8                	add    eax,ebx
c00142df:	50                   	push   eax
c00142e0:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00142e6:	e8 57 53 ff ff       	call   c0009642 <VAS::getPageTableEntry(unsigned long)>
c00142eb:	83 c4 10             	add    esp,0x10
c00142ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00142f0:	a8 60                	test   al,0x60
c00142f2:	75 11                	jne    c0014305 <Thr::loadDLL(char const*, bool)+0x21d>
c00142f4:	83 ec 0c             	sub    esp,0xc
c00142f7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00142fc:	50                   	push   eax
c00142fd:	e8 f0 37 ff ff       	call   c0007af2 <Phys::freePage(unsigned long)>
c0014302:	83 c4 10             	add    esp,0x10
c0014305:	46                   	inc    esi
c0014306:	eb 9e                	jmp    c00142a6 <Thr::loadDLL(char const*, bool)+0x1be>
c0014308:	89 f8                	mov    eax,edi
c001430a:	84 c0                	test   al,al
c001430c:	75 02                	jne    c0014310 <Thr::loadDLL(char const*, bool)+0x228>
c001430e:	31 db                	xor    ebx,ebx
c0014310:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014316:	89 d8                	mov    eax,ebx
c0014318:	5b                   	pop    ebx
c0014319:	5e                   	pop    esi
c001431a:	5f                   	pop    edi
c001431b:	5d                   	pop    ebp
c001431c:	c3                   	ret    

c001431d <Thr::executeDLL(unsigned long, void*)>:
c001431d:	56                   	push   esi
c001431e:	53                   	push   ebx
c001431f:	52                   	push   edx
c0014320:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014324:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014328:	85 db                	test   ebx,ebx
c001432a:	75 10                	jne    c001433c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001432c:	83 ec 0c             	sub    esp,0xc
c001432f:	68 f0 09 02 c0       	push   0xc00209f0
c0014334:	e8 ce c0 ff ff       	call   c0010407 <KePanic(char const*)>
c0014339:	83 c4 10             	add    esp,0x10
c001433c:	50                   	push   eax
c001433d:	50                   	push   eax
c001433e:	53                   	push   ebx
c001433f:	68 1a 0a 02 c0       	push   0xc0020a1a
c0014344:	e8 0a 63 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0014349:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001434d:	83 c4 14             	add    esp,0x14
c0014350:	89 d8                	mov    eax,ebx
c0014352:	5b                   	pop    ebx
c0014353:	5e                   	pop    esi
c0014354:	ff e0                	jmp    eax
c0014356:	66 90                	xchg   ax,ax

c0014358 <userModeEntryPoint(void*)>:
c0014358:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001435d:	48                   	dec    eax
c001435e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014363:	75 03                	jne    c0014368 <userModeEntryPoint(void*)+0x10>
c0014365:	fb                   	sti    
c0014366:	66 90                	xchg   ax,ax
c0014368:	fb                   	sti    
c0014369:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001436e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014371:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014377:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001437b:	e9 bf be fe ff       	jmp    c000023f <goToUsermode>

c0014380 <changeTSS>:
c0014380:	83 ec 14             	sub    esp,0x14
c0014383:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014388:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001438b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014390:	c1 e2 15             	shl    edx,0x15
c0014393:	29 d0                	sub    eax,edx
c0014395:	50                   	push   eax
c0014396:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001439b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143a1:	05 7c 11 00 00       	add    eax,0x117c
c00143a6:	50                   	push   eax
c00143a7:	e8 04 49 ff ff       	call   c0008cb0 <TSS::setESP(unsigned long)>
c00143ac:	83 c4 1c             	add    esp,0x1c
c00143af:	c3                   	ret    

c00143b0 <switchToThread(ThreadControlBlock*)>:
c00143b0:	57                   	push   edi
c00143b1:	8b 0d 64 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027164
c00143b7:	56                   	push   esi
c00143b8:	85 c9                	test   ecx,ecx
c00143ba:	53                   	push   ebx
c00143bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143bf:	0f 85 93 00 00 00    	jne    c0014458 <switchToThread(ThreadControlBlock*)+0xa8>
c00143c5:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c00143c8:	80 fa ff             	cmp    dl,0xff
c00143cb:	0f 84 83 00 00 00    	je     c0014454 <switchToThread(ThreadControlBlock*)+0xa4>
c00143d1:	81 e2 ff 00 00 00    	and    edx,0xff
c00143d7:	b8 00 04 00 00       	mov    eax,0x400
c00143dc:	29 d0                	sub    eax,edx
c00143de:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00143e1:	d1 f8                	sar    eax,1
c00143e3:	01 d0                	add    eax,edx
c00143e5:	8d 76 00             	lea    esi,[esi+0x0]
c00143e8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00143eb:	e8 d8 26 00 00       	call   c0016ac8 <HalQueryPerformanceCounter()>
c00143f0:	89 c6                	mov    esi,eax
c00143f2:	a3 a8 71 02 c0       	mov    ds:0xc00271a8,eax
c00143f7:	2b 35 98 71 02 c0    	sub    esi,DWORD PTR ds:0xc0027198
c00143fd:	a3 98 71 02 c0       	mov    ds:0xc0027198,eax
c0014402:	89 35 a0 71 02 c0    	mov    DWORD PTR ds:0xc00271a0,esi
c0014408:	89 d7                	mov    edi,edx
c001440a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014410:	89 15 ac 71 02 c0    	mov    DWORD PTR ds:0xc00271ac,edx
c0014416:	1b 3d 9c 71 02 c0    	sbb    edi,DWORD PTR ds:0xc002719c
c001441c:	89 15 9c 71 02 c0    	mov    DWORD PTR ds:0xc002719c,edx
c0014422:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014425:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014428:	01 c6                	add    esi,eax
c001442a:	89 3d a4 71 02 c0    	mov    DWORD PTR ds:0xc00271a4,edi
c0014430:	11 d7                	adc    edi,edx
c0014432:	83 ec 0c             	sub    esp,0xc
c0014435:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014438:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001443b:	53                   	push   ebx
c001443c:	e8 36 be fe ff       	call   c0000277 <switchToThreadASM>
c0014441:	0f 20 c0             	mov    eax,cr0
c0014444:	83 c8 08             	or     eax,0x8
c0014447:	0f 22 c0             	mov    cr0,eax
c001444a:	83 c4 10             	add    esp,0x10
c001444d:	5b                   	pop    ebx
c001444e:	5e                   	pop    esi
c001444f:	5f                   	pop    edi
c0014450:	c3                   	ret    
c0014451:	8d 76 00             	lea    esi,[esi+0x0]
c0014454:	31 c0                	xor    eax,eax
c0014456:	eb 90                	jmp    c00143e8 <switchToThread(ThreadControlBlock*)+0x38>
c0014458:	5b                   	pop    ebx
c0014459:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c0014463:	5e                   	pop    esi
c0014464:	5f                   	pop    edi
c0014465:	c3                   	ret    
c0014466:	66 90                	xchg   ax,ax

c0014468 <Process::addArgs(char**)>:
c0014468:	57                   	push   edi
c0014469:	56                   	push   esi
c001446a:	53                   	push   ebx
c001446b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001446f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014473:	85 ff                	test   edi,edi
c0014475:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c001447f:	74 4b                	je     c00144cc <Process::addArgs(char**)+0x64>
c0014481:	8b 07                	mov    eax,DWORD PTR [edi]
c0014483:	85 c0                	test   eax,eax
c0014485:	74 45                	je     c00144cc <Process::addArgs(char**)+0x64>
c0014487:	31 db                	xor    ebx,ebx
c0014489:	8d 76 00             	lea    esi,[esi+0x0]
c001448c:	83 ec 0c             	sub    esp,0xc
c001448f:	50                   	push   eax
c0014490:	e8 9b c0 fe ff       	call   c0000530 <strlen>
c0014495:	40                   	inc    eax
c0014496:	89 04 24             	mov    DWORD PTR [esp],eax
c0014499:	e8 c5 33 ff ff       	call   c0007863 <malloc>
c001449e:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00144a5:	5a                   	pop    edx
c00144a6:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00144a9:	59                   	pop    ecx
c00144aa:	43                   	inc    ebx
c00144ab:	52                   	push   edx
c00144ac:	50                   	push   eax
c00144ad:	e8 3e c1 fe ff       	call   c00005f0 <strcpy>
c00144b2:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c00144b8:	83 c4 10             	add    esp,0x10
c00144bb:	41                   	inc    ecx
c00144bc:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c00144c2:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00144c5:	85 c0                	test   eax,eax
c00144c7:	75 c3                	jne    c001448c <Process::addArgs(char**)+0x24>
c00144c9:	8d 76 00             	lea    esi,[esi+0x0]
c00144cc:	5b                   	pop    ebx
c00144cd:	5e                   	pop    esi
c00144ce:	5f                   	pop    edi
c00144cf:	c3                   	ret    

c00144d0 <Process::Process(char const*, Process*, char**)>:
c00144d0:	56                   	push   esi
c00144d1:	53                   	push   ebx
c00144d2:	83 ec 14             	sub    esp,0x14
c00144d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d9:	05 0c 02 00 00       	add    eax,0x20c
c00144de:	bb 07 00 00 00       	mov    ebx,0x7
c00144e3:	89 c6                	mov    esi,eax
c00144e5:	8d 76 00             	lea    esi,[esi+0x0]
c00144e8:	85 db                	test   ebx,ebx
c00144ea:	78 14                	js     c0014500 <Process::Process(char const*, Process*, char**)+0x30>
c00144ec:	83 ec 0c             	sub    esp,0xc
c00144ef:	56                   	push   esi
c00144f0:	e8 ef a2 00 00       	call   c001e7e4 <ThreadControlBlock::ThreadControlBlock()>
c00144f5:	83 c4 10             	add    esp,0x10
c00144f8:	83 c6 5f             	add    esi,0x5f
c00144fb:	4b                   	dec    ebx
c00144fc:	eb ea                	jmp    c00144e8 <Process::Process(char const*, Process*, char**)+0x18>
c00144fe:	66 90                	xchg   ax,ax
c0014500:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014504:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001450b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001450f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014516:	83 ec 0c             	sub    esp,0xc
c0014519:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001451d:	e8 da bc ff ff       	call   c00101fc <Krnl::newProcessEnv(Process*)>
c0014522:	83 c4 10             	add    esp,0x10
c0014525:	89 c2                	mov    edx,eax
c0014527:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001452b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014531:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014535:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001453e:	a1 e0 1b 02 c0       	mov    eax,ds:0xc0021be0
c0014543:	8d 50 01             	lea    edx,[eax+0x1]
c0014546:	89 15 e0 1b 02 c0    	mov    DWORD PTR ds:0xc0021be0,edx
c001454c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014550:	89 02                	mov    DWORD PTR [edx],eax
c0014552:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001455a:	83 ec 0c             	sub    esp,0xc
c001455d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014561:	e8 fd 32 ff ff       	call   c0007863 <malloc>
c0014566:	83 c4 10             	add    esp,0x10
c0014569:	89 c3                	mov    ebx,eax
c001456b:	83 ec 08             	sub    esp,0x8
c001456e:	6a 00                	push   0x0
c0014570:	53                   	push   ebx
c0014571:	e8 72 59 ff ff       	call   c0009ee8 <VAS::VAS(bool)>
c0014576:	83 c4 10             	add    esp,0x10
c0014579:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001457d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014587:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014591:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014595:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014599:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001459f:	e8 52 c2 ff ff       	call   c00107f6 <KeInitSignals()>
c00145a4:	89 c2                	mov    edx,eax
c00145a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145aa:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00145b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00145ba:	85 c0                	test   eax,eax
c00145bc:	74 42                	je     c0014600 <Process::Process(char const*, Process*, char**)+0x130>
c00145be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00145c8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00145ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145d2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00145d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145dc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00145e2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00145e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145ec:	05 0c 01 00 00       	add    eax,0x10c
c00145f1:	83 ec 08             	sub    esp,0x8
c00145f4:	52                   	push   edx
c00145f5:	50                   	push   eax
c00145f6:	e8 f5 bf fe ff       	call   c00005f0 <strcpy>
c00145fb:	83 c4 10             	add    esp,0x10
c00145fe:	eb 64                	jmp    c0014664 <Process::Process(char const*, Process*, char**)+0x194>
c0014600:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014608:	83 ec 0c             	sub    esp,0xc
c001460b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001460f:	e8 4f 32 ff ff       	call   c0007863 <malloc>
c0014614:	83 c4 10             	add    esp,0x10
c0014617:	89 c3                	mov    ebx,eax
c0014619:	83 ec 08             	sub    esp,0x8
c001461c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014620:	53                   	push   ebx
c0014621:	e8 a4 43 ff ff       	call   c00089ca <VgaText::VgaText(char const*)>
c0014626:	83 c4 10             	add    esp,0x10
c0014629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001462d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014633:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014637:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001463d:	83 ec 0c             	sub    esp,0xc
c0014640:	50                   	push   eax
c0014641:	e8 2a 3c ff ff       	call   c0008270 <addToTerminalCycle(VgaText*)>
c0014646:	83 c4 10             	add    esp,0x10
c0014649:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001464d:	05 0c 01 00 00       	add    eax,0x10c
c0014652:	83 ec 08             	sub    esp,0x8
c0014655:	68 39 0a 02 c0       	push   0xc0020a39
c001465a:	50                   	push   eax
c001465b:	e8 90 bf fe ff       	call   c00005f0 <strcpy>
c0014660:	83 c4 10             	add    esp,0x10
c0014663:	90                   	nop
c0014664:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014668:	83 c0 0c             	add    eax,0xc
c001466b:	83 ec 08             	sub    esp,0x8
c001466e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014672:	50                   	push   eax
c0014673:	e8 78 bf fe ff       	call   c00005f0 <strcpy>
c0014678:	83 c4 10             	add    esp,0x10
c001467b:	83 ec 08             	sub    esp,0x8
c001467e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014682:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014686:	e8 dd fd ff ff       	call   c0014468 <Process::addArgs(char**)>
c001468b:	83 c4 10             	add    esp,0x10
c001468e:	83 ec 08             	sub    esp,0x8
c0014691:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014695:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014699:	e8 51 ed ff ff       	call   c00133ef <Thr::loadProgramIntoMemory(Process*, char const*)>
c001469e:	83 c4 10             	add    esp,0x10
c00146a1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00146a5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00146a9:	83 f0 01             	xor    eax,0x1
c00146ac:	88 c2                	mov    dl,al
c00146ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00146b8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00146bc:	25 ff 00 00 00       	and    eax,0xff
c00146c1:	83 ec 08             	sub    esp,0x8
c00146c4:	50                   	push   eax
c00146c5:	68 90 0a 02 c0       	push   0xc0020a90
c00146ca:	e8 84 5f ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c00146cf:	83 c4 10             	add    esp,0x10
c00146d2:	90                   	nop
c00146d3:	83 c4 14             	add    esp,0x14
c00146d6:	5b                   	pop    ebx
c00146d7:	5e                   	pop    esi
c00146d8:	c3                   	ret    
c00146d9:	90                   	nop
c00146da:	66 90                	xchg   ax,ax

c00146dc <Process::Process(bool, char const*, Process*, char**)>:
c00146dc:	56                   	push   esi
c00146dd:	53                   	push   ebx
c00146de:	83 ec 24             	sub    esp,0x24
c00146e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00146e5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00146e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00146ed:	05 0c 02 00 00       	add    eax,0x20c
c00146f2:	bb 07 00 00 00       	mov    ebx,0x7
c00146f7:	89 c6                	mov    esi,eax
c00146f9:	8d 76 00             	lea    esi,[esi+0x0]
c00146fc:	85 db                	test   ebx,ebx
c00146fe:	78 14                	js     c0014714 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014700:	83 ec 0c             	sub    esp,0xc
c0014703:	56                   	push   esi
c0014704:	e8 db a0 00 00       	call   c001e7e4 <ThreadControlBlock::ThreadControlBlock()>
c0014709:	83 c4 10             	add    esp,0x10
c001470c:	83 c6 5f             	add    esi,0x5f
c001470f:	4b                   	dec    ebx
c0014710:	eb ea                	jmp    c00146fc <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014712:	66 90                	xchg   ax,ax
c0014714:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014718:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001471f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014723:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001472a:	83 ec 0c             	sub    esp,0xc
c001472d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014731:	e8 c6 ba ff ff       	call   c00101fc <Krnl::newProcessEnv(Process*)>
c0014736:	83 c4 10             	add    esp,0x10
c0014739:	89 c2                	mov    edx,eax
c001473b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001473f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014745:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014749:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014752:	a1 e0 1b 02 c0       	mov    eax,ds:0xc0021be0
c0014757:	8d 50 01             	lea    edx,[eax+0x1]
c001475a:	89 15 e0 1b 02 c0    	mov    DWORD PTR ds:0xc0021be0,edx
c0014760:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014764:	89 02                	mov    DWORD PTR [edx],eax
c0014766:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001476e:	83 ec 0c             	sub    esp,0xc
c0014771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014775:	e8 e9 30 ff ff       	call   c0007863 <malloc>
c001477a:	83 c4 10             	add    esp,0x10
c001477d:	89 c3                	mov    ebx,eax
c001477f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0014783:	25 ff 00 00 00       	and    eax,0xff
c0014788:	83 ec 08             	sub    esp,0x8
c001478b:	50                   	push   eax
c001478c:	53                   	push   ebx
c001478d:	e8 56 57 ff ff       	call   c0009ee8 <VAS::VAS(bool)>
c0014792:	83 c4 10             	add    esp,0x10
c0014795:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014799:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001479f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147a3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00147ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147b1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00147b5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00147bb:	e8 36 c0 ff ff       	call   c00107f6 <KeInitSignals()>
c00147c0:	89 c2                	mov    edx,eax
c00147c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147c6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00147cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147d0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00147d6:	85 c0                	test   eax,eax
c00147d8:	74 42                	je     c001481c <Process::Process(bool, char const*, Process*, char**)+0x140>
c00147da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147de:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00147e4:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00147ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147ee:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00147f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00147f8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00147fe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014804:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014808:	05 0c 01 00 00       	add    eax,0x10c
c001480d:	83 ec 08             	sub    esp,0x8
c0014810:	52                   	push   edx
c0014811:	50                   	push   eax
c0014812:	e8 d9 bd fe ff       	call   c00005f0 <strcpy>
c0014817:	83 c4 10             	add    esp,0x10
c001481a:	eb 64                	jmp    c0014880 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c001481c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014824:	83 ec 0c             	sub    esp,0xc
c0014827:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001482b:	e8 33 30 ff ff       	call   c0007863 <malloc>
c0014830:	83 c4 10             	add    esp,0x10
c0014833:	89 c3                	mov    ebx,eax
c0014835:	83 ec 08             	sub    esp,0x8
c0014838:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001483c:	53                   	push   ebx
c001483d:	e8 88 41 ff ff       	call   c00089ca <VgaText::VgaText(char const*)>
c0014842:	83 c4 10             	add    esp,0x10
c0014845:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014849:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001484f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014853:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014859:	83 ec 0c             	sub    esp,0xc
c001485c:	50                   	push   eax
c001485d:	e8 0e 3a ff ff       	call   c0008270 <addToTerminalCycle(VgaText*)>
c0014862:	83 c4 10             	add    esp,0x10
c0014865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014869:	05 0c 01 00 00       	add    eax,0x10c
c001486e:	83 ec 08             	sub    esp,0x8
c0014871:	68 39 0a 02 c0       	push   0xc0020a39
c0014876:	50                   	push   eax
c0014877:	e8 74 bd fe ff       	call   c00005f0 <strcpy>
c001487c:	83 c4 10             	add    esp,0x10
c001487f:	90                   	nop
c0014880:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014884:	83 c0 0c             	add    eax,0xc
c0014887:	83 ec 08             	sub    esp,0x8
c001488a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001488e:	50                   	push   eax
c001488f:	e8 5c bd fe ff       	call   c00005f0 <strcpy>
c0014894:	83 c4 10             	add    esp,0x10
c0014897:	83 ec 08             	sub    esp,0x8
c001489a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001489e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00148a2:	e8 c1 fb ff ff       	call   c0014468 <Process::addArgs(char**)>
c00148a7:	83 c4 10             	add    esp,0x10
c00148aa:	90                   	nop
c00148ab:	83 c4 24             	add    esp,0x24
c00148ae:	5b                   	pop    ebx
c00148af:	5e                   	pop    esi
c00148b0:	c3                   	ret    
c00148b1:	8d 76 00             	lea    esi,[esi+0x0]

c00148b4 <taskStartupFunction>:
c00148b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148b9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00148bc:	c3                   	ret    
c00148bd:	90                   	nop
c00148be:	66 90                	xchg   ax,ax

c00148c0 <Semaphore::Semaphore(int)>:
c00148c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00148c8:	89 10                	mov    DWORD PTR [eax],edx
c00148ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148ce:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00148d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00148e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148e4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00148eb:	90                   	nop
c00148ec:	c3                   	ret    
c00148ed:	90                   	nop
c00148ee:	66 90                	xchg   ax,ax

c00148f0 <Mutex::Mutex()>:
c00148f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148f4:	6a 01                	push   0x1
c00148f6:	50                   	push   eax
c00148f7:	e8 c4 ff ff ff       	call   c00148c0 <Semaphore::Semaphore(int)>
c00148fc:	83 c4 08             	add    esp,0x8
c00148ff:	90                   	nop
c0014900:	c3                   	ret    
c0014901:	90                   	nop
c0014902:	66 90                	xchg   ax,ax

c0014904 <Process::createThread(void (*)(void*), void*, int)>:
c0014904:	57                   	push   edi
c0014905:	31 c9                	xor    ecx,ecx
c0014907:	56                   	push   esi
c0014908:	53                   	push   ebx
c0014909:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001490d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014914:	89 f2                	mov    edx,esi
c0014916:	66 90                	xchg   ax,ax
c0014918:	31 c0                	xor    eax,eax
c001491a:	66 89 d0             	mov    ax,dx
c001491d:	83 e2 01             	and    edx,0x1
c0014920:	74 12                	je     c0014934 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014922:	d1 f8                	sar    eax,1
c0014924:	41                   	inc    ecx
c0014925:	89 c2                	mov    edx,eax
c0014927:	83 f9 10             	cmp    ecx,0x10
c001492a:	75 ec                	jne    c0014918 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001492c:	31 db                	xor    ebx,ebx
c001492e:	89 d8                	mov    eax,ebx
c0014930:	5b                   	pop    ebx
c0014931:	5e                   	pop    esi
c0014932:	5f                   	pop    edi
c0014933:	c3                   	ret    
c0014934:	b8 01 00 00 00       	mov    eax,0x1
c0014939:	d3 e0                	shl    eax,cl
c001493b:	09 c6                	or     esi,eax
c001493d:	8d 04 49             	lea    eax,[ecx+ecx*2]
c0014940:	c1 e0 05             	shl    eax,0x5
c0014943:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001494a:	29 c8                	sub    eax,ecx
c001494c:	01 d8                	add    eax,ebx
c001494e:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014955:	75 0d                	jne    c0014964 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014957:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014961:	8d 76 00             	lea    esi,[esi+0x0]
c0014964:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0014967:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001496d:	c1 e6 05             	shl    esi,0x5
c0014970:	83 ec 0c             	sub    esp,0xc
c0014973:	29 ce                	sub    esi,ecx
c0014975:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014978:	8d 04 33             	lea    eax,[ebx+esi*1]
c001497b:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014981:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014985:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c001498b:	89 ca                	mov    edx,ecx
c001498d:	f7 da                	neg    edx
c001498f:	c1 e2 15             	shl    edx,0x15
c0014992:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014998:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001499e:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00149a4:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00149aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00149ae:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00149b4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149b8:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00149c2:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00149c8:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00149d2:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00149dc:	8d b8 00 02 00 00    	lea    edi,[eax+0x200]
c00149e2:	68 00 01 00 00       	push   0x100
c00149e7:	e8 77 2e ff ff       	call   c0007863 <malloc>
c00149ec:	8d 9c 33 0c 02 00 00 	lea    ebx,[ebx+esi*1+0x20c]
c00149f3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c00149f6:	58                   	pop    eax
c00149f7:	5a                   	pop    edx
c00149f8:	53                   	push   ebx
c00149f9:	68 84 71 02 c0       	push   0xc0027184
c00149fe:	e8 79 9b 00 00       	call   c001e57c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014a03:	83 c4 10             	add    esp,0x10
c0014a06:	89 d8                	mov    eax,ebx
c0014a08:	5b                   	pop    ebx
c0014a09:	5e                   	pop    esi
c0014a0a:	5f                   	pop    edi
c0014a0b:	c3                   	ret    

c0014a0c <Process::createUserThread()>:
c0014a0c:	83 ec 0c             	sub    esp,0xc
c0014a0f:	68 80 00 00 00       	push   0x80
c0014a14:	6a 00                	push   0x0
c0014a16:	68 58 43 01 c0       	push   0xc0014358
c0014a1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a1f:	50                   	push   eax
c0014a20:	e8 df fe ff ff       	call   c0014904 <Process::createThread(void (*)(void*), void*, int)>
c0014a25:	83 c4 1c             	add    esp,0x1c
c0014a28:	c3                   	ret    
c0014a29:	8d 76 00             	lea    esi,[esi+0x0]

c0014a2c <setupMultitasking(void (*)())>:
c0014a2c:	56                   	push   esi
c0014a2d:	53                   	push   ebx
c0014a2e:	50                   	push   eax
c0014a2f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a33:	eb 13                	jmp    c0014a48 <setupMultitasking(void (*)())+0x1c>
c0014a35:	8d 76 00             	lea    esi,[esi+0x0]
c0014a38:	83 ec 0c             	sub    esp,0xc
c0014a3b:	68 84 71 02 c0       	push   0xc0027184
c0014a40:	e8 7f 9a 00 00       	call   c001e4c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014a45:	83 c4 10             	add    esp,0x10
c0014a48:	83 ec 0c             	sub    esp,0xc
c0014a4b:	68 84 71 02 c0       	push   0xc0027184
c0014a50:	e8 4b 9a 00 00       	call   c001e4a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014a55:	83 c4 10             	add    esp,0x10
c0014a58:	84 c0                	test   al,al
c0014a5a:	74 dc                	je     c0014a38 <setupMultitasking(void (*)())+0xc>
c0014a5c:	83 ec 0c             	sub    esp,0xc
c0014a5f:	68 24 07 00 00       	push   0x724
c0014a64:	e8 fa 2d ff ff       	call   c0007863 <malloc>
c0014a69:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014a70:	6a 00                	push   0x0
c0014a72:	68 3d 0a 02 c0       	push   0xc0020a3d
c0014a77:	89 c3                	mov    ebx,eax
c0014a79:	6a 01                	push   0x1
c0014a7b:	50                   	push   eax
c0014a7c:	e8 5b fc ff ff       	call   c00146dc <Process::Process(bool, char const*, Process*, char**)>
c0014a81:	83 c4 14             	add    esp,0x14
c0014a84:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014a8a:	89 1d 90 71 02 c0    	mov    DWORD PTR ds:0xc0027190,ebx
c0014a90:	50                   	push   eax
c0014a91:	e8 31 3a ff ff       	call   c00084c7 <setActiveTerminal(VgaText*)>
c0014a96:	66 8b 93 04 05 00 00 	mov    dx,WORD PTR [ebx+0x504]
c0014a9d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014aa3:	83 ca 01             	or     edx,0x1
c0014aa6:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014ab0:	66 89 93 04 05 00 00 	mov    WORD PTR [ebx+0x504],dx
c0014ab7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014aba:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0014ac4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014aca:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014ad0:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014ada:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0014ae4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014aee:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0014af4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014afe:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0014b08:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014b0f:	e8 4f 2d ff ff       	call   c0007863 <malloc>
c0014b14:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0014b1a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0014b20:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0014b26:	59                   	pop    ecx
c0014b27:	58                   	pop    eax
c0014b28:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0014b2e:	68 39 0a 02 c0       	push   0xc0020a39
c0014b33:	50                   	push   eax
c0014b34:	e8 b7 ba fe ff       	call   c00005f0 <strcpy>
c0014b39:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0014b40:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014b44:	83 c4 14             	add    esp,0x14
c0014b47:	5b                   	pop    ebx
c0014b48:	5e                   	pop    esi
c0014b49:	e9 1b b7 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0014b4e:	66 90                	xchg   ax,ax

c0014b50 <schedule()>:
c0014b50:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014b55:	85 c0                	test   eax,eax
c0014b57:	74 0b                	je     c0014b64 <schedule()+0x14>
c0014b59:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c0014b63:	c3                   	ret    
c0014b64:	53                   	push   ebx
c0014b65:	83 ec 14             	sub    esp,0x14
c0014b68:	68 84 71 02 c0       	push   0xc0027184
c0014b6d:	e8 2e 99 00 00       	call   c001e4a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014b72:	83 c4 10             	add    esp,0x10
c0014b75:	84 c0                	test   al,al
c0014b77:	75 3b                	jne    c0014bb4 <schedule()+0x64>
c0014b79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b7e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014b81:	4a                   	dec    edx
c0014b82:	74 38                	je     c0014bbc <schedule()+0x6c>
c0014b84:	83 ec 0c             	sub    esp,0xc
c0014b87:	68 84 71 02 c0       	push   0xc0027184
c0014b8c:	e8 2b 99 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014b91:	89 c3                	mov    ebx,eax
c0014b93:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014b9a:	e8 25 99 00 00       	call   c001e4c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014b9f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0014ba6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ba9:	e8 02 f8 ff ff       	call   c00143b0 <switchToThread(ThreadControlBlock*)>
c0014bae:	83 c4 10             	add    esp,0x10
c0014bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0014bb4:	83 c4 08             	add    esp,0x8
c0014bb7:	5b                   	pop    ebx
c0014bb8:	c3                   	ret    
c0014bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0014bbc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0014bc3:	51                   	push   ecx
c0014bc4:	51                   	push   ecx
c0014bc5:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0014bcb:	53                   	push   ebx
c0014bcc:	68 84 71 02 c0       	push   0xc0027184
c0014bd1:	e8 a6 99 00 00       	call   c001e57c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014bd6:	83 c4 10             	add    esp,0x10
c0014bd9:	eb a9                	jmp    c0014b84 <schedule()+0x34>
c0014bdb:	90                   	nop

c0014bdc <Semaphore::tryAcquire()>:
c0014bdc:	53                   	push   ebx
c0014bdd:	83 ec 08             	sub    esp,0x8
c0014be0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014be4:	fa                   	cli    
c0014be5:	8b 15 68 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027168
c0014beb:	8d 42 01             	lea    eax,[edx+0x1]
c0014bee:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014bf3:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014bf8:	8d 58 01             	lea    ebx,[eax+0x1]
c0014bfb:	89 1d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ebx
c0014c01:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0014c04:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0014c06:	7c 2c                	jl     c0014c34 <Semaphore::tryAcquire()+0x58>
c0014c08:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014c0d:	85 c0                	test   eax,eax
c0014c0f:	75 0b                	jne    c0014c1c <Semaphore::tryAcquire()+0x40>
c0014c11:	8b 1d 60 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027160
c0014c17:	85 db                	test   ebx,ebx
c0014c19:	75 59                	jne    c0014c74 <Semaphore::tryAcquire()+0x98>
c0014c1b:	90                   	nop
c0014c1c:	31 c0                	xor    eax,eax
c0014c1e:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0014c24:	85 d2                	test   edx,edx
c0014c26:	75 04                	jne    c0014c2c <Semaphore::tryAcquire()+0x50>
c0014c28:	fb                   	sti    
c0014c29:	8d 76 00             	lea    esi,[esi+0x0]
c0014c2c:	83 c4 08             	add    esp,0x8
c0014c2f:	5b                   	pop    ebx
c0014c30:	c3                   	ret    
c0014c31:	8d 76 00             	lea    esi,[esi+0x0]
c0014c34:	43                   	inc    ebx
c0014c35:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014c3a:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0014c3d:	85 c0                	test   eax,eax
c0014c3f:	75 23                	jne    c0014c64 <Semaphore::tryAcquire()+0x88>
c0014c41:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014c46:	85 c0                	test   eax,eax
c0014c48:	74 1a                	je     c0014c64 <Semaphore::tryAcquire()+0x88>
c0014c4a:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014c54:	e8 f7 fe ff ff       	call   c0014b50 <schedule()>
c0014c59:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014c5e:	8d 50 ff             	lea    edx,[eax-0x1]
c0014c61:	8d 76 00             	lea    esi,[esi+0x0]
c0014c64:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0014c6a:	b0 01                	mov    al,0x1
c0014c6c:	85 d2                	test   edx,edx
c0014c6e:	75 bc                	jne    c0014c2c <Semaphore::tryAcquire()+0x50>
c0014c70:	eb b6                	jmp    c0014c28 <Semaphore::tryAcquire()+0x4c>
c0014c72:	66 90                	xchg   ax,ax
c0014c74:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014c7e:	e8 cd fe ff ff       	call   c0014b50 <schedule()>
c0014c83:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014c88:	8d 50 ff             	lea    edx,[eax-0x1]
c0014c8b:	31 c0                	xor    eax,eax
c0014c8d:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0014c93:	85 d2                	test   edx,edx
c0014c95:	75 95                	jne    c0014c2c <Semaphore::tryAcquire()+0x50>
c0014c97:	eb 8f                	jmp    c0014c28 <Semaphore::tryAcquire()+0x4c>
c0014c99:	90                   	nop
c0014c9a:	66 90                	xchg   ax,ax

c0014c9c <Semaphore::assertLocked(char const*)>:
c0014c9c:	83 ec 0c             	sub    esp,0xc
c0014c9f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014ca3:	fa                   	cli    
c0014ca4:	8b 0d 68 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027168
c0014caa:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014caf:	41                   	inc    ecx
c0014cb0:	89 0d 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,ecx
c0014cb6:	8d 48 01             	lea    ecx,[eax+0x1]
c0014cb9:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014cbf:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014cc1:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0014cc4:	7c 2a                	jl     c0014cf0 <Semaphore::assertLocked(char const*)+0x54>
c0014cc6:	66 90                	xchg   ax,ax
c0014cc8:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014ccd:	85 c0                	test   eax,eax
c0014ccf:	75 0b                	jne    c0014cdc <Semaphore::assertLocked(char const*)+0x40>
c0014cd1:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014cd6:	85 c0                	test   eax,eax
c0014cd8:	75 2e                	jne    c0014d08 <Semaphore::assertLocked(char const*)+0x6c>
c0014cda:	66 90                	xchg   ax,ax
c0014cdc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014ce1:	48                   	dec    eax
c0014ce2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014ce7:	75 03                	jne    c0014cec <Semaphore::assertLocked(char const*)+0x50>
c0014ce9:	fb                   	sti    
c0014cea:	66 90                	xchg   ax,ax
c0014cec:	83 c4 0c             	add    esp,0xc
c0014cef:	c3                   	ret    
c0014cf0:	83 ec 0c             	sub    esp,0xc
c0014cf3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014cf7:	52                   	push   edx
c0014cf8:	e8 0a b7 ff ff       	call   c0010407 <KePanic(char const*)>
c0014cfd:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014d02:	83 c4 10             	add    esp,0x10
c0014d05:	48                   	dec    eax
c0014d06:	eb c0                	jmp    c0014cc8 <Semaphore::assertLocked(char const*)+0x2c>
c0014d08:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014d12:	e8 39 fe ff ff       	call   c0014b50 <schedule()>
c0014d17:	eb c3                	jmp    c0014cdc <Semaphore::assertLocked(char const*)+0x40>
c0014d19:	8d 76 00             	lea    esi,[esi+0x0]

c0014d1c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0014d1c:	83 ec 0c             	sub    esp,0xc
c0014d1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014d28:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014d2b:	e8 20 fe ff ff       	call   c0014b50 <schedule()>
c0014d30:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014d35:	48                   	dec    eax
c0014d36:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014d3b:	75 03                	jne    c0014d40 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0014d3d:	fb                   	sti    
c0014d3e:	66 90                	xchg   ax,ax
c0014d40:	83 c4 0c             	add    esp,0xc
c0014d43:	c3                   	ret    

c0014d44 <blockTask(TaskState)>:
c0014d44:	83 ec 0c             	sub    esp,0xc
c0014d47:	fa                   	cli    
c0014d48:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014d4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014d51:	40                   	inc    eax
c0014d52:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014d57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d5c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014d5f:	e8 ec fd ff ff       	call   c0014b50 <schedule()>
c0014d64:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014d69:	48                   	dec    eax
c0014d6a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014d6f:	75 03                	jne    c0014d74 <blockTask(TaskState)+0x30>
c0014d71:	fb                   	sti    
c0014d72:	66 90                	xchg   ax,ax
c0014d74:	83 c4 0c             	add    esp,0xc
c0014d77:	c3                   	ret    

c0014d78 <waitTask(int, int*, int)>:
c0014d78:	83 ec 18             	sub    esp,0x18
c0014d7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d80:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014d84:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0014d87:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d90:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0014d93:	6a 07                	push   0x7
c0014d95:	e8 aa ff ff ff       	call   c0014d44 <blockTask(TaskState)>
c0014d9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d9f:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0014da2:	83 c4 10             	add    esp,0x10
c0014da5:	85 d2                	test   edx,edx
c0014da7:	74 0b                	je     c0014db4 <waitTask(int, int*, int)+0x3c>
c0014da9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0014dac:	89 02                	mov    DWORD PTR [edx],eax
c0014dae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014db3:	90                   	nop
c0014db4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0014db7:	83 c4 0c             	add    esp,0xc
c0014dba:	c3                   	ret    
c0014dbb:	90                   	nop

c0014dbc <milliTenthSleepUntil(unsigned int)>:
c0014dbc:	83 ec 0c             	sub    esp,0xc
c0014dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014dc3:	39 05 8c 64 02 c0    	cmp    DWORD PTR ds:0xc002648c,eax
c0014dc9:	76 05                	jbe    c0014dd0 <milliTenthSleepUntil(unsigned int)+0x14>
c0014dcb:	90                   	nop
c0014dcc:	83 c4 0c             	add    esp,0xc
c0014dcf:	c3                   	ret    
c0014dd0:	fa                   	cli    
c0014dd1:	8b 15 68 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027168
c0014dd7:	8b 0d 64 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027164
c0014ddd:	41                   	inc    ecx
c0014dde:	42                   	inc    edx
c0014ddf:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014de5:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0014deb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014df1:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0014df4:	50                   	push   eax
c0014df5:	50                   	push   eax
c0014df6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dfb:	50                   	push   eax
c0014dfc:	68 78 71 02 c0       	push   0xc0027178
c0014e01:	e8 76 97 00 00       	call   c001e57c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014e06:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0014e0d:	e8 32 ff ff ff       	call   c0014d44 <blockTask(TaskState)>
c0014e12:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014e17:	83 c4 10             	add    esp,0x10
c0014e1a:	48                   	dec    eax
c0014e1b:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014e20:	85 c0                	test   eax,eax
c0014e22:	75 0c                	jne    c0014e30 <milliTenthSleepUntil(unsigned int)+0x74>
c0014e24:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014e29:	85 c0                	test   eax,eax
c0014e2b:	75 17                	jne    c0014e44 <milliTenthSleepUntil(unsigned int)+0x88>
c0014e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0014e30:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014e35:	48                   	dec    eax
c0014e36:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014e3b:	75 8f                	jne    c0014dcc <milliTenthSleepUntil(unsigned int)+0x10>
c0014e3d:	fb                   	sti    
c0014e3e:	83 c4 0c             	add    esp,0xc
c0014e41:	c3                   	ret    
c0014e42:	66 90                	xchg   ax,ax
c0014e44:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014e4e:	e8 fd fc ff ff       	call   c0014b50 <schedule()>
c0014e53:	eb db                	jmp    c0014e30 <milliTenthSleepUntil(unsigned int)+0x74>
c0014e55:	8d 76 00             	lea    esi,[esi+0x0]

c0014e58 <milliTenthSleep(unsigned int)>:
c0014e58:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014e5c:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c0014e61:	01 c2                	add    edx,eax
c0014e63:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014e67:	e9 50 ff ff ff       	jmp    c0014dbc <milliTenthSleepUntil(unsigned int)>

c0014e6c <sleep(unsigned int)>:
c0014e6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e70:	8d 04 80             	lea    eax,[eax+eax*4]
c0014e73:	8d 04 80             	lea    eax,[eax+eax*4]
c0014e76:	8d 04 80             	lea    eax,[eax+eax*4]
c0014e79:	8d 04 80             	lea    eax,[eax+eax*4]
c0014e7c:	c1 e0 04             	shl    eax,0x4
c0014e7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e83:	eb d3                	jmp    c0014e58 <milliTenthSleep(unsigned int)>
c0014e85:	90                   	nop
c0014e86:	66 90                	xchg   ax,ax

c0014e88 <Semaphore::acquire()>:
c0014e88:	83 ec 0c             	sub    esp,0xc
c0014e8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014e8f:	fa                   	cli    
c0014e90:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014e95:	40                   	inc    eax
c0014e96:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014e9b:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014ea0:	8d 48 01             	lea    ecx,[eax+0x1]
c0014ea3:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014ea9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0014eac:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0014eae:	7d 2c                	jge    c0014edc <Semaphore::acquire()+0x54>
c0014eb0:	41                   	inc    ecx
c0014eb1:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0014eb4:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014eb9:	85 c0                	test   eax,eax
c0014ebb:	75 0b                	jne    c0014ec8 <Semaphore::acquire()+0x40>
c0014ebd:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014ec2:	85 c0                	test   eax,eax
c0014ec4:	75 62                	jne    c0014f28 <Semaphore::acquire()+0xa0>
c0014ec6:	66 90                	xchg   ax,ax
c0014ec8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014ecd:	48                   	dec    eax
c0014ece:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014ed3:	75 03                	jne    c0014ed8 <Semaphore::acquire()+0x50>
c0014ed5:	fb                   	sti    
c0014ed6:	66 90                	xchg   ax,ax
c0014ed8:	83 c4 0c             	add    esp,0xc
c0014edb:	c3                   	ret    
c0014edc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ee1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0014ee8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0014eeb:	85 c9                	test   ecx,ecx
c0014eed:	74 4d                	je     c0014f3c <Semaphore::acquire()+0xb4>
c0014eef:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0014ef2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014ef8:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0014efb:	90                   	nop
c0014efc:	83 ec 0c             	sub    esp,0xc
c0014eff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f04:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0014f07:	68 b8 0a 02 c0       	push   0xc0020ab8
c0014f0c:	e8 42 57 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0014f11:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0014f18:	e8 27 fe ff ff       	call   c0014d44 <blockTask(TaskState)>
c0014f1d:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014f22:	83 c4 10             	add    esp,0x10
c0014f25:	48                   	dec    eax
c0014f26:	eb 8c                	jmp    c0014eb4 <Semaphore::acquire()+0x2c>
c0014f28:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014f32:	e8 19 fc ff ff       	call   c0014b50 <schedule()>
c0014f37:	eb 8f                	jmp    c0014ec8 <Semaphore::acquire()+0x40>
c0014f39:	8d 76 00             	lea    esi,[esi+0x0]
c0014f3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f41:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014f44:	eb b6                	jmp    c0014efc <Semaphore::acquire()+0x74>
c0014f46:	66 90                	xchg   ax,ax

c0014f48 <taskReturned>:
c0014f48:	83 ec 18             	sub    esp,0x18
c0014f4b:	68 d8 0a 02 c0       	push   0xc0020ad8
c0014f50:	e8 b2 b4 ff ff       	call   c0010407 <KePanic(char const*)>
c0014f55:	83 c4 10             	add    esp,0x10
c0014f58:	83 ec 0c             	sub    esp,0xc
c0014f5b:	6a 02                	push   0x2
c0014f5d:	e8 e2 fd ff ff       	call   c0014d44 <blockTask(TaskState)>
c0014f62:	fa                   	cli    
c0014f63:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014f68:	40                   	inc    eax
c0014f69:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014f6e:	e8 dd fb ff ff       	call   c0014b50 <schedule()>
c0014f73:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014f78:	83 c4 10             	add    esp,0x10
c0014f7b:	48                   	dec    eax
c0014f7c:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014f81:	85 c0                	test   eax,eax
c0014f83:	75 d3                	jne    c0014f58 <taskReturned+0x10>
c0014f85:	fb                   	sti    
c0014f86:	eb d0                	jmp    c0014f58 <taskReturned+0x10>

c0014f88 <Thr::processFromPID(int)>:
c0014f88:	57                   	push   edi
c0014f89:	56                   	push   esi
c0014f8a:	53                   	push   ebx
c0014f8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014f8f:	fa                   	cli    
c0014f90:	8b 0d 68 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027168
c0014f96:	83 ec 0c             	sub    esp,0xc
c0014f99:	41                   	inc    ecx
c0014f9a:	68 84 71 02 c0       	push   0xc0027184
c0014f9f:	89 0d 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,ecx
c0014fa5:	e8 12 95 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014faa:	83 c4 10             	add    esp,0x10
c0014fad:	89 c7                	mov    edi,eax
c0014faf:	eb 17                	jmp    c0014fc8 <Thr::processFromPID(int)+0x40>
c0014fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0014fb4:	83 ec 0c             	sub    esp,0xc
c0014fb7:	68 84 71 02 c0       	push   0xc0027184
c0014fbc:	e8 fb 94 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014fc1:	83 c4 10             	add    esp,0x10
c0014fc4:	39 f8                	cmp    eax,edi
c0014fc6:	74 4c                	je     c0015014 <Thr::processFromPID(int)+0x8c>
c0014fc8:	83 ec 0c             	sub    esp,0xc
c0014fcb:	68 84 71 02 c0       	push   0xc0027184
c0014fd0:	e8 e7 94 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014fd5:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014fdc:	89 c3                	mov    ebx,eax
c0014fde:	e8 e1 94 00 00       	call   c001e4c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014fe3:	58                   	pop    eax
c0014fe4:	5a                   	pop    edx
c0014fe5:	53                   	push   ebx
c0014fe6:	68 84 71 02 c0       	push   0xc0027184
c0014feb:	e8 8c 95 00 00       	call   c001e57c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014ff0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014ff3:	83 c4 10             	add    esp,0x10
c0014ff6:	39 30                	cmp    DWORD PTR [eax],esi
c0014ff8:	75 ba                	jne    c0014fb4 <Thr::processFromPID(int)+0x2c>
c0014ffa:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014fff:	48                   	dec    eax
c0015000:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015005:	74 09                	je     c0015010 <Thr::processFromPID(int)+0x88>
c0015007:	90                   	nop
c0015008:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001500b:	90                   	nop
c001500c:	5b                   	pop    ebx
c001500d:	5e                   	pop    esi
c001500e:	5f                   	pop    edi
c001500f:	c3                   	ret    
c0015010:	fb                   	sti    
c0015011:	eb f5                	jmp    c0015008 <Thr::processFromPID(int)+0x80>
c0015013:	90                   	nop
c0015014:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015019:	8d 50 ff             	lea    edx,[eax-0x1]
c001501c:	31 c0                	xor    eax,eax
c001501e:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0015024:	85 d2                	test   edx,edx
c0015026:	75 e4                	jne    c001500c <Thr::processFromPID(int)+0x84>
c0015028:	fb                   	sti    
c0015029:	5b                   	pop    ebx
c001502a:	5e                   	pop    esi
c001502b:	5f                   	pop    edi
c001502c:	c3                   	ret    
c001502d:	8d 76 00             	lea    esi,[esi+0x0]

c0015030 <unblockTask(ThreadControlBlock*)>:
c0015030:	53                   	push   ebx
c0015031:	83 ec 08             	sub    esp,0x8
c0015034:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015038:	fa                   	cli    
c0015039:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001503e:	40                   	inc    eax
c001503f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015044:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015047:	85 c0                	test   eax,eax
c0015049:	74 61                	je     c00150ac <unblockTask(ThreadControlBlock*)+0x7c>
c001504b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001504e:	48                   	dec    eax
c001504f:	74 33                	je     c0015084 <unblockTask(ThreadControlBlock*)+0x54>
c0015051:	83 ec 0c             	sub    esp,0xc
c0015054:	68 84 71 02 c0       	push   0xc0027184
c0015059:	e8 5e 94 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001505e:	83 c4 10             	add    esp,0x10
c0015061:	85 c0                	test   eax,eax
c0015063:	75 17                	jne    c001507c <unblockTask(ThreadControlBlock*)+0x4c>
c0015065:	eb 59                	jmp    c00150c0 <unblockTask(ThreadControlBlock*)+0x90>
c0015067:	90                   	nop
c0015068:	51                   	push   ecx
c0015069:	51                   	push   ecx
c001506a:	50                   	push   eax
c001506b:	68 84 71 02 c0       	push   0xc0027184
c0015070:	e8 63 97 00 00       	call   c001e7d8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015075:	83 c4 10             	add    esp,0x10
c0015078:	85 c0                	test   eax,eax
c001507a:	74 44                	je     c00150c0 <unblockTask(ThreadControlBlock*)+0x90>
c001507c:	39 c3                	cmp    ebx,eax
c001507e:	75 e8                	jne    c0015068 <unblockTask(ThreadControlBlock*)+0x38>
c0015080:	eb 12                	jmp    c0015094 <unblockTask(ThreadControlBlock*)+0x64>
c0015082:	66 90                	xchg   ax,ax
c0015084:	83 ec 0c             	sub    esp,0xc
c0015087:	68 5b 0a 02 c0       	push   0xc0020a5b
c001508c:	e8 c2 55 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0015091:	83 c4 10             	add    esp,0x10
c0015094:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015099:	48                   	dec    eax
c001509a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001509f:	75 03                	jne    c00150a4 <unblockTask(ThreadControlBlock*)+0x74>
c00150a1:	fb                   	sti    
c00150a2:	66 90                	xchg   ax,ax
c00150a4:	83 c4 08             	add    esp,0x8
c00150a7:	5b                   	pop    ebx
c00150a8:	c3                   	ret    
c00150a9:	8d 76 00             	lea    esi,[esi+0x0]
c00150ac:	83 ec 0c             	sub    esp,0xc
c00150af:	68 44 0a 02 c0       	push   0xc0020a44
c00150b4:	e8 9a 55 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c00150b9:	83 c4 10             	add    esp,0x10
c00150bc:	eb d6                	jmp    c0015094 <unblockTask(ThreadControlBlock*)+0x64>
c00150be:	66 90                	xchg   ax,ax
c00150c0:	50                   	push   eax
c00150c1:	50                   	push   eax
c00150c2:	53                   	push   ebx
c00150c3:	68 84 71 02 c0       	push   0xc0027184
c00150c8:	e8 af 94 00 00       	call   c001e57c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00150cd:	83 c4 10             	add    esp,0x10
c00150d0:	eb c2                	jmp    c0015094 <unblockTask(ThreadControlBlock*)+0x64>
c00150d2:	66 90                	xchg   ax,ax

c00150d4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00150d4:	55                   	push   ebp
c00150d5:	57                   	push   edi
c00150d6:	56                   	push   esi
c00150d7:	53                   	push   ebx
c00150d8:	83 ec 1c             	sub    esp,0x1c
c00150db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00150df:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00150e2:	8b 90 16 05 00 00    	mov    edx,DWORD PTR [eax+0x516]
c00150e8:	85 d2                	test   edx,edx
c00150ea:	7e 24                	jle    c0015110 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00150ec:	31 f6                	xor    esi,esi
c00150ee:	66 90                	xchg   ax,ax
c00150f0:	83 ec 0c             	sub    esp,0xc
c00150f3:	8b 84 b0 1a 05 00 00 	mov    eax,DWORD PTR [eax+esi*4+0x51a]
c00150fa:	46                   	inc    esi
c00150fb:	50                   	push   eax
c00150fc:	e8 72 27 ff ff       	call   c0007873 <free>
c0015101:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015104:	83 c4 10             	add    esp,0x10
c0015107:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001510d:	7f e1                	jg     c00150f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001510f:	90                   	nop
c0015110:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001511a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001511f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015122:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015125:	d3 c0                	rol    eax,cl
c0015127:	66 8b aa 04 05 00 00 	mov    bp,WORD PTR [edx+0x504]
c001512e:	21 c5                	and    ebp,eax
c0015130:	66 89 aa 04 05 00 00 	mov    WORD PTR [edx+0x504],bp
c0015137:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001513a:	89 f7                	mov    edi,esi
c001513c:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015144:	0f 85 72 01 00 00    	jne    c00152bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c001514a:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015150:	85 ed                	test   ebp,ebp
c0015152:	74 1c                	je     c0015170 <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c0015154:	83 ec 0c             	sub    esp,0xc
c0015157:	55                   	push   ebp
c0015158:	e8 bb af ff ff       	call   c0010118 <EnvVarContainer::~EnvVarContainer()>
c001515d:	5e                   	pop    esi
c001515e:	5f                   	pop    edi
c001515f:	6a 0c                	push   0xc
c0015161:	55                   	push   ebp
c0015162:	e8 f6 53 ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c0015167:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001516a:	83 c4 10             	add    esp,0x10
c001516d:	89 f7                	mov    edi,esi
c001516f:	90                   	nop
c0015170:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0015176:	85 c0                	test   eax,eax
c0015178:	0f 84 b2 00 00 00    	je     c0015230 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c001517e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015181:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015185:	31 c9                	xor    ecx,ecx
c0015187:	eb 17                	jmp    c00151a0 <cleanupTerminatedTask(ThreadControlBlock*)+0xcc>
c0015189:	8d 76 00             	lea    esi,[esi+0x0]
c001518c:	41                   	inc    ecx
c001518d:	83 f9 10             	cmp    ecx,0x10
c0015190:	0f 84 9a 00 00 00    	je     c0015230 <cleanupTerminatedTask(ThreadControlBlock*)+0x15c>
c0015196:	66 90                	xchg   ax,ax
c0015198:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001519e:	66 90                	xchg   ax,ax
c00151a0:	31 d2                	xor    edx,edx
c00151a2:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c00151a9:	d3 fa                	sar    edx,cl
c00151ab:	83 e2 01             	and    edx,0x1
c00151ae:	74 dc                	je     c001518c <cleanupTerminatedTask(ThreadControlBlock*)+0xb8>
c00151b0:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00151b3:	c1 e2 05             	shl    edx,0x5
c00151b6:	29 ca                	sub    edx,ecx
c00151b8:	01 d0                	add    eax,edx
c00151ba:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00151c0:	83 fd 07             	cmp    ebp,0x7
c00151c3:	75 c7                	jne    c001518c <cleanupTerminatedTask(ThreadControlBlock*)+0xb8>
c00151c5:	05 40 02 00 00       	add    eax,0x240
c00151ca:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00151cd:	83 fd ff             	cmp    ebp,0xffffffff
c00151d0:	0f 8c ee 00 00 00    	jl     c00152c4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f0>
c00151d6:	0f 84 a8 01 00 00    	je     c0015384 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c00151dc:	85 ed                	test   ebp,ebp
c00151de:	0f 84 8c 01 00 00    	je     c0015370 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c00151e4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00151e6:	75 a4                	jne    c001518c <cleanupTerminatedTask(ThreadControlBlock*)+0xb8>
c00151e8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00151ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00151f2:	01 d0                	add    eax,edx
c00151f4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00151f8:	83 ec 0c             	sub    esp,0xc
c00151fb:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015201:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015204:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001520a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015211:	50                   	push   eax
c0015212:	e8 19 fe ff ff       	call   c0015030 <unblockTask(ThreadControlBlock*)>
c0015217:	83 c4 10             	add    esp,0x10
c001521a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001521e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015221:	41                   	inc    ecx
c0015222:	89 f7                	mov    edi,esi
c0015224:	83 f9 10             	cmp    ecx,0x10
c0015227:	0f 85 6b ff ff ff    	jne    c0015198 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c001522d:	8d 76 00             	lea    esi,[esi+0x0]
c0015230:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015236:	85 c0                	test   eax,eax
c0015238:	74 62                	je     c001529c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c001523a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015240:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0015246:	74 54                	je     c001529c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c8>
c0015248:	83 ec 0c             	sub    esp,0xc
c001524b:	68 84 71 02 c0       	push   0xc0027184
c0015250:	e8 67 92 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015255:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c001525c:	89 c7                	mov    edi,eax
c001525e:	e8 3d 92 00 00       	call   c001e4a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015263:	83 c4 10             	add    esp,0x10
c0015266:	84 c0                	test   al,al
c0015268:	0f 84 ca 00 00 00    	je     c0015338 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c001526e:	66 90                	xchg   ax,ax
c0015270:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015273:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015279:	85 d2                	test   edx,edx
c001527b:	74 0f                	je     c001528c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001527d:	83 ec 0c             	sub    esp,0xc
c0015280:	8b 02                	mov    eax,DWORD PTR [edx]
c0015282:	52                   	push   edx
c0015283:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015286:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015289:	83 c4 10             	add    esp,0x10
c001528c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0015296:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0015299:	8d 76 00             	lea    esi,[esi+0x0]
c001529c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00152a2:	85 db                	test   ebx,ebx
c00152a4:	74 16                	je     c00152bc <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00152a6:	83 ec 0c             	sub    esp,0xc
c00152a9:	53                   	push   ebx
c00152aa:	e8 1f 46 ff ff       	call   c00098ce <VAS::~VAS()>
c00152af:	58                   	pop    eax
c00152b0:	5a                   	pop    edx
c00152b1:	6a 14                	push   0x14
c00152b3:	53                   	push   ebx
c00152b4:	e8 a4 52 ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c00152b9:	83 c4 10             	add    esp,0x10
c00152bc:	83 c4 1c             	add    esp,0x1c
c00152bf:	5b                   	pop    ebx
c00152c0:	5e                   	pop    esi
c00152c1:	5f                   	pop    edi
c00152c2:	5d                   	pop    ebp
c00152c3:	c3                   	ret    
c00152c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00152c8:	83 ec 0c             	sub    esp,0xc
c00152cb:	68 0c 0b 02 c0       	push   0xc0020b0c
c00152d0:	e8 32 b1 ff ff       	call   c0010407 <KePanic(char const*)>
c00152d5:	83 c4 10             	add    esp,0x10
c00152d8:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00152db:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00152df:	89 f7                	mov    edi,esi
c00152e1:	e9 a6 fe ff ff       	jmp    c001518c <cleanupTerminatedTask(ThreadControlBlock*)+0xb8>
c00152e6:	66 90                	xchg   ax,ax
c00152e8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00152ee:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00152f4:	75 1e                	jne    c0015314 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c00152f6:	83 ec 0c             	sub    esp,0xc
c00152f9:	68 74 0b 02 c0       	push   0xc0020b74
c00152fe:	e8 50 53 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0015303:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001530a:	e8 35 fa ff ff       	call   c0014d44 <blockTask(TaskState)>
c001530f:	83 c4 10             	add    esp,0x10
c0015312:	66 90                	xchg   ax,ax
c0015314:	51                   	push   ecx
c0015315:	51                   	push   ecx
c0015316:	56                   	push   esi
c0015317:	68 84 71 02 c0       	push   0xc0027184
c001531c:	e8 5b 92 00 00       	call   c001e57c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015321:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0015328:	e8 8f 91 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001532d:	83 c4 10             	add    esp,0x10
c0015330:	39 f8                	cmp    eax,edi
c0015332:	0f 84 38 ff ff ff    	je     c0015270 <cleanupTerminatedTask(ThreadControlBlock*)+0x19c>
c0015338:	83 ec 0c             	sub    esp,0xc
c001533b:	68 84 71 02 c0       	push   0xc0027184
c0015340:	e8 77 91 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015345:	89 c6                	mov    esi,eax
c0015347:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c001534e:	e8 71 91 00 00       	call   c001e4c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015353:	83 c4 10             	add    esp,0x10
c0015356:	39 f3                	cmp    ebx,esi
c0015358:	74 ba                	je     c0015314 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c001535a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001535d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015360:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015366:	75 ac                	jne    c0015314 <cleanupTerminatedTask(ThreadControlBlock*)+0x240>
c0015368:	e9 7b ff ff ff       	jmp    c00152e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x214>
c001536d:	8d 76 00             	lea    esi,[esi+0x0]
c0015370:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015374:	83 ec 0c             	sub    esp,0xc
c0015377:	68 40 0b 02 c0       	push   0xc0020b40
c001537c:	e9 4f ff ff ff       	jmp    c00152d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fc>
c0015381:	8d 76 00             	lea    esi,[esi+0x0]
c0015384:	8b 36                	mov    esi,DWORD PTR [esi]
c0015386:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001538a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001538d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015390:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015396:	01 d7                	add    edi,edx
c0015398:	89 f8                	mov    eax,edi
c001539a:	e9 55 fe ff ff       	jmp    c00151f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x120>
c001539f:	90                   	nop

c00153a0 <cleanerTaskFunction(void*)>:
c00153a0:	53                   	push   ebx
c00153a1:	83 ec 08             	sub    esp,0x8
c00153a4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00153a9:	48                   	dec    eax
c00153aa:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00153af:	75 03                	jne    c00153b4 <cleanerTaskFunction(void*)+0x14>
c00153b1:	fb                   	sti    
c00153b2:	66 90                	xchg   ax,ax
c00153b4:	fa                   	cli    
c00153b5:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00153ba:	80 3d 4c 71 02 c0 00 	cmp    BYTE PTR ds:0xc002714c,0x0
c00153c1:	8d 50 01             	lea    edx,[eax+0x1]
c00153c4:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c00153ca:	0f 84 c0 00 00 00    	je     c0015490 <cleanerTaskFunction(void*)+0xf0>
c00153d0:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00153d5:	85 c0                	test   eax,eax
c00153d7:	75 03                	jne    c00153dc <cleanerTaskFunction(void*)+0x3c>
c00153d9:	fb                   	sti    
c00153da:	66 90                	xchg   ax,ax
c00153dc:	c6 05 4c 71 02 c0 00 	mov    BYTE PTR ds:0xc002714c,0x0
c00153e3:	fa                   	cli    
c00153e4:	8b 15 68 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027168
c00153ea:	8b 0d 64 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027164
c00153f0:	42                   	inc    edx
c00153f1:	41                   	inc    ecx
c00153f2:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c00153f8:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c00153fe:	fa                   	cli    
c00153ff:	8b 1d 68 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027168
c0015405:	43                   	inc    ebx
c0015406:	89 1d 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,ebx
c001540c:	eb 2a                	jmp    c0015438 <cleanerTaskFunction(void*)+0x98>
c001540e:	66 90                	xchg   ax,ax
c0015410:	83 ec 0c             	sub    esp,0xc
c0015413:	68 6c 71 02 c0       	push   0xc002716c
c0015418:	e8 9f 90 00 00       	call   c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001541d:	89 c3                	mov    ebx,eax
c001541f:	c7 04 24 6c 71 02 c0 	mov    DWORD PTR [esp],0xc002716c
c0015426:	e8 99 90 00 00       	call   c001e4c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001542b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001542e:	e8 a1 fc ff ff       	call   c00150d4 <cleanupTerminatedTask(ThreadControlBlock*)>
c0015433:	83 c4 10             	add    esp,0x10
c0015436:	66 90                	xchg   ax,ax
c0015438:	83 ec 0c             	sub    esp,0xc
c001543b:	68 6c 71 02 c0       	push   0xc002716c
c0015440:	e8 5b 90 00 00       	call   c001e4a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015445:	83 c4 10             	add    esp,0x10
c0015448:	84 c0                	test   al,al
c001544a:	74 c4                	je     c0015410 <cleanerTaskFunction(void*)+0x70>
c001544c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015451:	48                   	dec    eax
c0015452:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015457:	75 03                	jne    c001545c <cleanerTaskFunction(void*)+0xbc>
c0015459:	fb                   	sti    
c001545a:	66 90                	xchg   ax,ax
c001545c:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0015461:	48                   	dec    eax
c0015462:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0015467:	0f 85 37 ff ff ff    	jne    c00153a4 <cleanerTaskFunction(void*)+0x4>
c001546d:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0015472:	85 c0                	test   eax,eax
c0015474:	0f 84 2a ff ff ff    	je     c00153a4 <cleanerTaskFunction(void*)+0x4>
c001547a:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0015484:	e8 c7 f6 ff ff       	call   c0014b50 <schedule()>
c0015489:	e9 16 ff ff ff       	jmp    c00153a4 <cleanerTaskFunction(void*)+0x4>
c001548e:	66 90                	xchg   ax,ax
c0015490:	83 ec 0c             	sub    esp,0xc
c0015493:	6a 02                	push   0x2
c0015495:	e8 82 f8 ff ff       	call   c0014d1c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001549a:	83 c4 10             	add    esp,0x10
c001549d:	e9 3a ff ff ff       	jmp    c00153dc <cleanerTaskFunction(void*)+0x3c>
c00154a2:	66 90                	xchg   ax,ax

c00154a4 <terminateTask(int)>:
c00154a4:	83 ec 14             	sub    esp,0x14
c00154a7:	fa                   	cli    
c00154a8:	8b 15 68 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027168
c00154ae:	8b 0d 64 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027164
c00154b4:	42                   	inc    edx
c00154b5:	41                   	inc    ecx
c00154b6:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c00154bc:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c00154c2:	fa                   	cli    
c00154c3:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00154c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00154cc:	40                   	inc    eax
c00154cd:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00154d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154d7:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00154da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154df:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00154e2:	50                   	push   eax
c00154e3:	68 6c 71 02 c0       	push   0xc002716c
c00154e8:	e8 8f 90 00 00       	call   c001e57c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00154ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154f2:	83 c4 10             	add    esp,0x10
c00154f5:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00154fc:	a1 48 71 02 c0       	mov    eax,ds:0xc0027148
c0015501:	85 c0                	test   eax,eax
c0015503:	74 5f                	je     c0015564 <terminateTask(int)+0xc0>
c0015505:	83 ec 0c             	sub    esp,0xc
c0015508:	c6 05 4c 71 02 c0 01 	mov    BYTE PTR ds:0xc002714c,0x1
c001550f:	50                   	push   eax
c0015510:	e8 1b fb ff ff       	call   c0015030 <unblockTask(ThreadControlBlock*)>
c0015515:	83 c4 10             	add    esp,0x10
c0015518:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001551d:	48                   	dec    eax
c001551e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015523:	75 03                	jne    c0015528 <terminateTask(int)+0x84>
c0015525:	fb                   	sti    
c0015526:	66 90                	xchg   ax,ax
c0015528:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c001552d:	48                   	dec    eax
c001552e:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0015533:	75 0b                	jne    c0015540 <terminateTask(int)+0x9c>
c0015535:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c001553c:	75 3a                	jne    c0015578 <terminateTask(int)+0xd4>
c001553e:	66 90                	xchg   ax,ax
c0015540:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015545:	48                   	dec    eax
c0015546:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001554b:	75 03                	jne    c0015550 <terminateTask(int)+0xac>
c001554d:	fb                   	sti    
c001554e:	66 90                	xchg   ax,ax
c0015550:	fa                   	cli    
c0015551:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015556:	40                   	inc    eax
c0015557:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001555c:	e8 ef f5 ff ff       	call   c0014b50 <schedule()>
c0015561:	eb dd                	jmp    c0015540 <terminateTask(int)+0x9c>
c0015563:	90                   	nop
c0015564:	83 ec 0c             	sub    esp,0xc
c0015567:	68 72 0a 02 c0       	push   0xc0020a72
c001556c:	e8 e2 50 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0015571:	83 c4 10             	add    esp,0x10
c0015574:	eb a2                	jmp    c0015518 <terminateTask(int)+0x74>
c0015576:	66 90                	xchg   ax,ax
c0015578:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0015582:	eb d8                	jmp    c001555c <terminateTask(int)+0xb8>

c0015584 <Thr::terminateFromIRQ(int)>:
c0015584:	83 ec 18             	sub    esp,0x18
c0015587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001558b:	50                   	push   eax
c001558c:	e8 13 ff ff ff       	call   c00154a4 <terminateTask(int)>
c0015591:	90                   	nop
c0015592:	66 90                	xchg   ax,ax

c0015594 <Semaphore::release()>:
c0015594:	83 ec 0c             	sub    esp,0xc
c0015597:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001559b:	fa                   	cli    
c001559c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00155a1:	40                   	inc    eax
c00155a2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00155a7:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00155ac:	8d 48 01             	lea    ecx,[eax+0x1]
c00155af:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c00155b5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00155b8:	85 c9                	test   ecx,ecx
c00155ba:	74 40                	je     c00155fc <Semaphore::release()+0x68>
c00155bc:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00155bf:	83 ec 0c             	sub    esp,0xc
c00155c2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00155c5:	51                   	push   ecx
c00155c6:	e8 65 fa ff ff       	call   c0015030 <unblockTask(ThreadControlBlock*)>
c00155cb:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00155d0:	83 c4 10             	add    esp,0x10
c00155d3:	48                   	dec    eax
c00155d4:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c00155d9:	85 c0                	test   eax,eax
c00155db:	75 0b                	jne    c00155e8 <Semaphore::release()+0x54>
c00155dd:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c00155e2:	85 c0                	test   eax,eax
c00155e4:	75 22                	jne    c0015608 <Semaphore::release()+0x74>
c00155e6:	66 90                	xchg   ax,ax
c00155e8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00155ed:	48                   	dec    eax
c00155ee:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00155f3:	75 03                	jne    c00155f8 <Semaphore::release()+0x64>
c00155f5:	fb                   	sti    
c00155f6:	66 90                	xchg   ax,ax
c00155f8:	83 c4 0c             	add    esp,0xc
c00155fb:	c3                   	ret    
c00155fc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00155ff:	49                   	dec    ecx
c0015600:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015603:	eb cf                	jmp    c00155d4 <Semaphore::release()+0x40>
c0015605:	8d 76 00             	lea    esi,[esi+0x0]
c0015608:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0015612:	e8 39 f5 ff ff       	call   c0014b50 <schedule()>
c0015617:	eb cf                	jmp    c00155e8 <Semaphore::release()+0x54>
c0015619:	8d 76 00             	lea    esi,[esi+0x0]

c001561c <__static_initialization_and_destruction_0(int, int)>:
c001561c:	83 ec 0c             	sub    esp,0xc
c001561f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015624:	0f 85 8e 00 00 00    	jne    c00156b8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001562a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015632:	0f 85 80 00 00 00    	jne    c00156b8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015638:	83 ec 0c             	sub    esp,0xc
c001563b:	68 84 71 02 c0       	push   0xc0027184
c0015640:	e8 eb 91 00 00       	call   c001e830 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015645:	83 c4 10             	add    esp,0x10
c0015648:	83 ec 04             	sub    esp,0x4
c001564b:	68 08 17 02 c0       	push   0xc0021708
c0015650:	68 84 71 02 c0       	push   0xc0027184
c0015655:	68 e0 e7 01 c0       	push   0xc001e7e0
c001565a:	e8 ae 4e ff ff       	call   c000a50d <__cxa_atexit>
c001565f:	83 c4 10             	add    esp,0x10
c0015662:	83 ec 0c             	sub    esp,0xc
c0015665:	68 78 71 02 c0       	push   0xc0027178
c001566a:	e8 c1 91 00 00       	call   c001e830 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001566f:	83 c4 10             	add    esp,0x10
c0015672:	83 ec 04             	sub    esp,0x4
c0015675:	68 08 17 02 c0       	push   0xc0021708
c001567a:	68 78 71 02 c0       	push   0xc0027178
c001567f:	68 e0 e7 01 c0       	push   0xc001e7e0
c0015684:	e8 84 4e ff ff       	call   c000a50d <__cxa_atexit>
c0015689:	83 c4 10             	add    esp,0x10
c001568c:	83 ec 0c             	sub    esp,0xc
c001568f:	68 6c 71 02 c0       	push   0xc002716c
c0015694:	e8 97 91 00 00       	call   c001e830 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015699:	83 c4 10             	add    esp,0x10
c001569c:	83 ec 04             	sub    esp,0x4
c001569f:	68 08 17 02 c0       	push   0xc0021708
c00156a4:	68 6c 71 02 c0       	push   0xc002716c
c00156a9:	68 e0 e7 01 c0       	push   0xc001e7e0
c00156ae:	e8 5a 4e ff ff       	call   c000a50d <__cxa_atexit>
c00156b3:	83 c4 10             	add    esp,0x10
c00156b6:	66 90                	xchg   ax,ax
c00156b8:	90                   	nop
c00156b9:	83 c4 0c             	add    esp,0xc
c00156bc:	c3                   	ret    
c00156bd:	8d 76 00             	lea    esi,[esi+0x0]

c00156c0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00156c0:	83 ec 0c             	sub    esp,0xc
c00156c3:	83 ec 08             	sub    esp,0x8
c00156c6:	68 ff ff 00 00       	push   0xffff
c00156cb:	6a 01                	push   0x1
c00156cd:	e8 4a ff ff ff       	call   c001561c <__static_initialization_and_destruction_0(int, int)>
c00156d2:	83 c4 10             	add    esp,0x10
c00156d5:	83 c4 0c             	add    esp,0xc
c00156d8:	c3                   	ret    

c00156d9 <Vm::inbv(unsigned short)>:
c00156d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00156dd:	66 81 fa fe fe       	cmp    dx,0xfefe
c00156e2:	75 06                	jne    c00156ea <Vm::inbv(unsigned short)+0x11>
c00156e4:	a0 cc 71 02 c0       	mov    al,ds:0xc00271cc
c00156e9:	c3                   	ret    
c00156ea:	ec                   	in     al,dx
c00156eb:	c3                   	ret    

c00156ec <Vm::outbv(unsigned short, unsigned char)>:
c00156ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00156f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00156f4:	66 81 fa fe fe       	cmp    dx,0xfefe
c00156f9:	75 25                	jne    c0015720 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00156fb:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c0015701:	8d 51 01             	lea    edx,[ecx+0x1]
c0015704:	88 81 e0 71 02 c0    	mov    BYTE PTR [ecx-0x3ffd8e20],al
c001570a:	89 15 cc 71 02 c0    	mov    DWORD PTR ds:0xc00271cc,edx
c0015710:	83 fa 20             	cmp    edx,0x20
c0015713:	75 0c                	jne    c0015721 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015715:	c7 05 cc 71 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x1f
c001571f:	c3                   	ret    
c0015720:	ee                   	out    dx,al
c0015721:	c3                   	ret    

c0015722 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015722:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015727:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001572c:	c1 e0 04             	shl    eax,0x4
c001572f:	01 d0                	add    eax,edx
c0015731:	c3                   	ret    

c0015732 <Vm::getSegment(unsigned int)>:
c0015732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015736:	c1 e8 10             	shr    eax,0x10
c0015739:	c3                   	ret    

c001573a <Vm::getOffset(unsigned int)>:
c001573a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001573e:	c3                   	ret    

c001573f <Vm::mainloop2()>:
c001573f:	83 ec 18             	sub    esp,0x18
c0015742:	fa                   	cli    
c0015743:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015749:	6a 02                	push   0x2
c001574b:	c6 05 c5 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c5,0x1
c0015752:	e8 c5 f5 ff ff       	call   c0014d1c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015757:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001575c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015760:	52                   	push   edx
c0015761:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015765:	52                   	push   edx
c0015766:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001576a:	52                   	push   edx
c001576b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001576f:	50                   	push   eax
c0015770:	e8 9a aa fe ff       	call   c000020f <goToVM86>
c0015775:	83 c4 2c             	add    esp,0x2c
c0015778:	c3                   	ret    

c0015779 <Vm::mainVm8086Loop(void*)>:
c0015779:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001577e:	48                   	dec    eax
c001577f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015784:	75 01                	jne    c0015787 <Vm::mainVm8086Loop(void*)+0xe>
c0015786:	fb                   	sti    
c0015787:	eb b6                	jmp    c001573f <Vm::mainloop2()>

c0015789 <Vm::mainloop3(unsigned long)>:
c0015789:	83 ec 18             	sub    esp,0x18
c001578c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015790:	fa                   	cli    
c0015791:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015797:	6a 02                	push   0x2
c0015799:	c6 05 c4 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c4,0x1
c00157a0:	a3 c0 71 02 c0       	mov    ds:0xc00271c0,eax
c00157a5:	e8 72 f5 ff ff       	call   c0014d1c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00157aa:	83 c4 1c             	add    esp,0x1c
c00157ad:	eb 90                	jmp    c001573f <Vm::mainloop2()>

c00157af <Vm::initialise8086()>:
c00157af:	83 ec 0c             	sub    esp,0xc
c00157b2:	68 80 00 00 00       	push   0x80
c00157b7:	6a 00                	push   0x0
c00157b9:	68 79 57 01 c0       	push   0xc0015779
c00157be:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00157c4:	e8 3b f1 ff ff       	call   c0014904 <Process::createThread(void (*)(void*), void*, int)>
c00157c9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00157d0:	68 00 01 00 00       	push   0x100
c00157d5:	a3 c8 71 02 c0       	mov    ds:0xc00271c8,eax
c00157da:	6a 00                	push   0x0
c00157dc:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00157e1:	6a 00                	push   0x0
c00157e3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00157e9:	e8 42 45 ff ff       	call   c0009d30 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00157ee:	83 c4 2c             	add    esp,0x2c
c00157f1:	c3                   	ret    

c00157f2 <Vm::finish8086()>:
c00157f2:	53                   	push   ebx
c00157f3:	83 ec 08             	sub    esp,0x8
c00157f6:	fa                   	cli    
c00157f7:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00157fd:	80 3d c4 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c4,0x0
c0015804:	75 15                	jne    c001581b <Vm::finish8086()+0x29>
c0015806:	e8 45 f3 ff ff       	call   c0014b50 <schedule()>
c001580b:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015810:	48                   	dec    eax
c0015811:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015816:	75 de                	jne    c00157f6 <Vm::finish8086()+0x4>
c0015818:	fb                   	sti    
c0015819:	eb db                	jmp    c00157f6 <Vm::finish8086()+0x4>
c001581b:	83 ec 0c             	sub    esp,0xc
c001581e:	8b 1d c0 71 02 c0    	mov    ebx,DWORD PTR ds:0xc00271c0
c0015824:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c001582a:	c6 05 c4 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c4,0x0
c0015831:	e8 fa f7 ff ff       	call   c0015030 <unblockTask(ThreadControlBlock*)>
c0015836:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001583b:	83 c4 10             	add    esp,0x10
c001583e:	8d 50 ff             	lea    edx,[eax-0x1]
c0015841:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0015847:	85 d2                	test   edx,edx
c0015849:	75 01                	jne    c001584c <Vm::finish8086()+0x5a>
c001584b:	fb                   	sti    
c001584c:	83 c4 08             	add    esp,0x8
c001584f:	89 d8                	mov    eax,ebx
c0015851:	5b                   	pop    ebx
c0015852:	c3                   	ret    

c0015853 <Vm::getOutput8086(unsigned char*)>:
c0015853:	57                   	push   edi
c0015854:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c001585a:	56                   	push   esi
c001585b:	be e0 71 02 c0       	mov    esi,0xc00271e0
c0015860:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015864:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015866:	5e                   	pop    esi
c0015867:	a1 cc 71 02 c0       	mov    eax,ds:0xc00271cc
c001586c:	5f                   	pop    edi
c001586d:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c0015877:	c3                   	ret    

c0015878 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015878:	55                   	push   ebp
c0015879:	57                   	push   edi
c001587a:	56                   	push   esi
c001587b:	53                   	push   ebx
c001587c:	83 ec 0c             	sub    esp,0xc
c001587f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015883:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015887:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001588b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001588f:	fa                   	cli    
c0015890:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015896:	80 3d c5 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c5,0x0
c001589d:	75 15                	jne    c00158b4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001589f:	e8 ac f2 ff ff       	call   c0014b50 <schedule()>
c00158a4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00158a9:	48                   	dec    eax
c00158aa:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00158af:	75 de                	jne    c001588f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00158b1:	fb                   	sti    
c00158b2:	eb db                	jmp    c001588f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00158b4:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c00158b9:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c00158c3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00158c7:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00158cb:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00158cf:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00158d3:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00158d7:	50                   	push   eax
c00158d8:	6a 20                	push   0x20
c00158da:	6a 00                	push   0x0
c00158dc:	68 e0 71 02 c0       	push   0xc00271e0
c00158e1:	e8 da ab fe ff       	call   c00004c0 <memset>
c00158e6:	5a                   	pop    edx
c00158e7:	59                   	pop    ecx
c00158e8:	0f b7 ff             	movzx  edi,di
c00158eb:	57                   	push   edi
c00158ec:	0f b7 f6             	movzx  esi,si
c00158ef:	56                   	push   esi
c00158f0:	e8 2d fe ff ff       	call   c0015722 <Vm::realToLinear(unsigned short, unsigned short)>
c00158f5:	83 c4 10             	add    esp,0x10
c00158f8:	89 c7                	mov    edi,eax
c00158fa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00158fe:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015902:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015904:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015909:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c0015910:	48                   	dec    eax
c0015911:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015916:	75 01                	jne    c0015919 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015918:	fb                   	sti    
c0015919:	83 ec 0c             	sub    esp,0xc
c001591c:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c0015922:	e8 09 f7 ff ff       	call   c0015030 <unblockTask(ThreadControlBlock*)>
c0015927:	83 c4 1c             	add    esp,0x1c
c001592a:	5b                   	pop    ebx
c001592b:	b0 01                	mov    al,0x1
c001592d:	5e                   	pop    esi
c001592e:	5f                   	pop    edi
c001592f:	5d                   	pop    ebp
c0015930:	c3                   	ret    

c0015931 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015931:	55                   	push   ebp
c0015932:	57                   	push   edi
c0015933:	56                   	push   esi
c0015934:	53                   	push   ebx
c0015935:	83 ec 2c             	sub    esp,0x2c
c0015938:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001593c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0015940:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015944:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015948:	fa                   	cli    
c0015949:	0f b6 35 c5 71 02 c0 	movzx  esi,BYTE PTR ds:0xc00271c5
c0015950:	89 f0                	mov    eax,esi
c0015952:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015958:	84 c0                	test   al,al
c001595a:	75 1d                	jne    c0015979 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001595c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015960:	e8 eb f1 ff ff       	call   c0014b50 <schedule()>
c0015965:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001596a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001596e:	48                   	dec    eax
c001596f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015974:	75 d2                	jne    c0015948 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015976:	fb                   	sti    
c0015977:	eb cf                	jmp    c0015948 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015979:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c001597e:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c0015988:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001598c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015990:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0015994:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0015998:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001599c:	50                   	push   eax
c001599d:	6a 20                	push   0x20
c001599f:	6a 00                	push   0x0
c00159a1:	68 e0 71 02 c0       	push   0xc00271e0
c00159a6:	e8 15 ab fe ff       	call   c00004c0 <memset>
c00159ab:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00159b2:	e8 ac 1e ff ff       	call   c0007863 <malloc>
c00159b7:	83 c4 0c             	add    esp,0xc
c00159ba:	89 c3                	mov    ebx,eax
c00159bc:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00159c2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00159c6:	50                   	push   eax
c00159c7:	e8 fc 51 ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c00159cc:	83 c4 10             	add    esp,0x10
c00159cf:	85 db                	test   ebx,ebx
c00159d1:	75 0a                	jne    c00159dd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00159d3:	83 ec 0c             	sub    esp,0xc
c00159d6:	68 9c 0b 02 c0       	push   0xc0020b9c
c00159db:	eb 3e                	jmp    c0015a1b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00159dd:	50                   	push   eax
c00159de:	8d 44 24 17          	lea    eax,[esp+0x17]
c00159e2:	50                   	push   eax
c00159e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00159e7:	50                   	push   eax
c00159e8:	53                   	push   ebx
c00159e9:	e8 46 55 ff ff       	call   c000af34 <File::stat(unsigned long long*, bool*)>
c00159ee:	83 c4 10             	add    esp,0x10
c00159f1:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00159f6:	74 0a                	je     c0015a02 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00159f8:	83 ec 0c             	sub    esp,0xc
c00159fb:	68 b0 0b 02 c0       	push   0xc0020bb0
c0015a00:	eb 19                	jmp    c0015a1b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0015a02:	51                   	push   ecx
c0015a03:	51                   	push   ecx
c0015a04:	6a 01                	push   0x1
c0015a06:	53                   	push   ebx
c0015a07:	e8 7c 52 ff ff       	call   c000ac88 <File::open(FileOpenMode)>
c0015a0c:	83 c4 10             	add    esp,0x10
c0015a0f:	85 c0                	test   eax,eax
c0015a11:	74 24                	je     c0015a37 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0015a13:	83 ec 0c             	sub    esp,0xc
c0015a16:	68 c9 0b 02 c0       	push   0xc0020bc9
c0015a1b:	e8 e7 a9 ff ff       	call   c0010407 <KePanic(char const*)>
c0015a20:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015a25:	48                   	dec    eax
c0015a26:	83 c4 10             	add    esp,0x10
c0015a29:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015a2e:	85 c0                	test   eax,eax
c0015a30:	75 01                	jne    c0015a33 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0015a32:	fb                   	sti    
c0015a33:	31 f6                	xor    esi,esi
c0015a35:	eb 58                	jmp    c0015a8f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0015a37:	50                   	push   eax
c0015a38:	50                   	push   eax
c0015a39:	0f b7 ed             	movzx  ebp,bp
c0015a3c:	55                   	push   ebp
c0015a3d:	0f b7 ff             	movzx  edi,di
c0015a40:	57                   	push   edi
c0015a41:	e8 dc fc ff ff       	call   c0015722 <Vm::realToLinear(unsigned short, unsigned short)>
c0015a46:	5a                   	pop    edx
c0015a47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015a49:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0015a4d:	51                   	push   ecx
c0015a4e:	50                   	push   eax
c0015a4f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015a53:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015a57:	53                   	push   ebx
c0015a58:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015a5b:	83 c4 14             	add    esp,0x14
c0015a5e:	53                   	push   ebx
c0015a5f:	e8 82 52 ff ff       	call   c000ace6 <File::close()>
c0015a64:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015a69:	83 c4 10             	add    esp,0x10
c0015a6c:	48                   	dec    eax
c0015a6d:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c0015a74:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015a79:	85 c0                	test   eax,eax
c0015a7b:	75 01                	jne    c0015a7e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0015a7d:	fb                   	sti    
c0015a7e:	83 ec 0c             	sub    esp,0xc
c0015a81:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c0015a87:	e8 a4 f5 ff ff       	call   c0015030 <unblockTask(ThreadControlBlock*)>
c0015a8c:	83 c4 10             	add    esp,0x10
c0015a8f:	83 c4 2c             	add    esp,0x2c
c0015a92:	89 f0                	mov    eax,esi
c0015a94:	5b                   	pop    ebx
c0015a95:	5e                   	pop    esi
c0015a96:	5f                   	pop    edi
c0015a97:	5d                   	pop    ebp
c0015a98:	c3                   	ret    

c0015a99 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015a99:	57                   	push   edi
c0015a9a:	56                   	push   esi
c0015a9b:	53                   	push   ebx
c0015a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aa0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015aa4:	83 e8 06             	sub    eax,0x6
c0015aa7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015aab:	0f b7 c0             	movzx  eax,ax
c0015aae:	50                   	push   eax
c0015aaf:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0015ab4:	50                   	push   eax
c0015ab5:	e8 68 fc ff ff       	call   c0015722 <Vm::realToLinear(unsigned short, unsigned short)>
c0015aba:	5a                   	pop    edx
c0015abb:	5e                   	pop    esi
c0015abc:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0015abf:	8d 56 fa             	lea    edx,[esi-0x6]
c0015ac2:	81 e2 ff ff 00 00    	and    edx,0xffff
c0015ac8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0015acb:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0015ace:	83 c2 02             	add    edx,0x2
c0015ad1:	66 89 10             	mov    WORD PTR [eax],dx
c0015ad4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0015ad7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0015adb:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0015ade:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0015ae2:	89 d6                	mov    esi,edx
c0015ae4:	66 81 e6 ff fd       	and    si,0xfdff
c0015ae9:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0015aef:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0015af3:	74 07                	je     c0015afc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0015af5:	89 d6                	mov    esi,edx
c0015af7:	66 81 ce 00 02       	or     si,0x200
c0015afc:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0015b00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b05:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015b09:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0015b11:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0015b14:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0015b1c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0015b1f:	5b                   	pop    ebx
c0015b20:	5e                   	pop    esi
c0015b21:	5f                   	pop    edi
c0015b22:	c3                   	ret    

c0015b23 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0015b23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015b28:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015b2d:	c1 e0 04             	shl    eax,0x4
c0015b30:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0015b33:	c3                   	ret    

c0015b34 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0015b34:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015b39:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015b3e:	c1 e0 04             	shl    eax,0x4
c0015b41:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0015b45:	c3                   	ret    

c0015b46 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0015b46:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015b4b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015b50:	c1 e0 04             	shl    eax,0x4
c0015b53:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0015b56:	c3                   	ret    

c0015b57 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0015b57:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015b5c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015b61:	c1 e0 04             	shl    eax,0x4
c0015b64:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b68:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0015b6b:	c3                   	ret    

c0015b6c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0015b6c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015b71:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015b76:	c1 e0 04             	shl    eax,0x4
c0015b79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b7d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0015b81:	c3                   	ret    

c0015b82 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0015b82:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015b87:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015b8c:	c1 e0 04             	shl    eax,0x4
c0015b8f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b93:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0015b96:	c3                   	ret    

c0015b97 <Vm::faultHandler(regs*)>:
c0015b97:	55                   	push   ebp
c0015b98:	57                   	push   edi
c0015b99:	56                   	push   esi
c0015b9a:	53                   	push   ebx
c0015b9b:	83 ec 1c             	sub    esp,0x1c
c0015b9e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015ba2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0015ba6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015ba9:	52                   	push   edx
c0015baa:	0f b7 f8             	movzx  edi,ax
c0015bad:	0f b7 c0             	movzx  eax,ax
c0015bb0:	50                   	push   eax
c0015bb1:	e8 6c fb ff ff       	call   c0015722 <Vm::realToLinear(unsigned short, unsigned short)>
c0015bb6:	5a                   	pop    edx
c0015bb7:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0015bba:	59                   	pop    ecx
c0015bbb:	89 c1                	mov    ecx,eax
c0015bbd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015bc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015bc4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015bc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015bcd:	0f b7 c5             	movzx  eax,bp
c0015bd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015bd4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015bd8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015bdc:	e8 41 fb ff ff       	call   c0015722 <Vm::realToLinear(unsigned short, unsigned short)>
c0015be1:	5e                   	pop    esi
c0015be2:	be 06 00 00 00       	mov    esi,0x6
c0015be7:	5a                   	pop    edx
c0015be8:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0015bed:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0015bf2:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0015bf5:	80 fa 9d             	cmp    dl,0x9d
c0015bf8:	0f 84 2c 02 00 00    	je     c0015e2a <Vm::faultHandler(regs*)+0x293>
c0015bfe:	0f 87 91 00 00 00    	ja     c0015c95 <Vm::faultHandler(regs*)+0xfe>
c0015c04:	80 fa 66             	cmp    dl,0x66
c0015c07:	0f 84 98 01 00 00    	je     c0015da5 <Vm::faultHandler(regs*)+0x20e>
c0015c0d:	77 47                	ja     c0015c56 <Vm::faultHandler(regs*)+0xbf>
c0015c0f:	80 fa 36             	cmp    dl,0x36
c0015c12:	0f 84 80 01 00 00    	je     c0015d98 <Vm::faultHandler(regs*)+0x201>
c0015c18:	77 1a                	ja     c0015c34 <Vm::faultHandler(regs*)+0x9d>
c0015c1a:	80 fa 26             	cmp    dl,0x26
c0015c1d:	0f 84 4e 01 00 00    	je     c0015d71 <Vm::faultHandler(regs*)+0x1da>
c0015c23:	80 fa 2e             	cmp    dl,0x2e
c0015c26:	0f 85 e2 05 00 00    	jne    c001620e <Vm::faultHandler(regs*)+0x677>
c0015c2c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015c2f:	31 f6                	xor    esi,esi
c0015c31:	41                   	inc    ecx
c0015c32:	eb be                	jmp    c0015bf2 <Vm::faultHandler(regs*)+0x5b>
c0015c34:	80 fa 64             	cmp    dl,0x64
c0015c37:	0f 84 41 01 00 00    	je     c0015d7e <Vm::faultHandler(regs*)+0x1e7>
c0015c3d:	0f 87 48 01 00 00    	ja     c0015d8b <Vm::faultHandler(regs*)+0x1f4>
c0015c43:	80 fa 3e             	cmp    dl,0x3e
c0015c46:	0f 85 c2 05 00 00    	jne    c001620e <Vm::faultHandler(regs*)+0x677>
c0015c4c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015c4f:	be 01 00 00 00       	mov    esi,0x1
c0015c54:	eb db                	jmp    c0015c31 <Vm::faultHandler(regs*)+0x9a>
c0015c56:	80 fa 6d             	cmp    dl,0x6d
c0015c59:	0f 84 ec 02 00 00    	je     c0015f4b <Vm::faultHandler(regs*)+0x3b4>
c0015c5f:	77 17                	ja     c0015c78 <Vm::faultHandler(regs*)+0xe1>
c0015c61:	80 fa 67             	cmp    dl,0x67
c0015c64:	0f 84 48 01 00 00    	je     c0015db2 <Vm::faultHandler(regs*)+0x21b>
c0015c6a:	80 fa 6c             	cmp    dl,0x6c
c0015c6d:	0f 84 69 02 00 00    	je     c0015edc <Vm::faultHandler(regs*)+0x345>
c0015c73:	e9 96 05 00 00       	jmp    c001620e <Vm::faultHandler(regs*)+0x677>
c0015c78:	80 fa 6f             	cmp    dl,0x6f
c0015c7b:	0f 84 f4 03 00 00    	je     c0016075 <Vm::faultHandler(regs*)+0x4de>
c0015c81:	0f 82 59 03 00 00    	jb     c0015fe0 <Vm::faultHandler(regs*)+0x449>
c0015c87:	80 fa 9c             	cmp    dl,0x9c
c0015c8a:	0f 84 2f 01 00 00    	je     c0015dbf <Vm::faultHandler(regs*)+0x228>
c0015c90:	e9 79 05 00 00       	jmp    c001620e <Vm::faultHandler(regs*)+0x677>
c0015c95:	80 fa ec             	cmp    dl,0xec
c0015c98:	0f 84 14 05 00 00    	je     c00161b2 <Vm::faultHandler(regs*)+0x61b>
c0015c9e:	77 7b                	ja     c0015d1b <Vm::faultHandler(regs*)+0x184>
c0015ca0:	80 fa e4             	cmp    dl,0xe4
c0015ca3:	0f 84 93 04 00 00    	je     c001613c <Vm::faultHandler(regs*)+0x5a5>
c0015ca9:	77 53                	ja     c0015cfe <Vm::faultHandler(regs*)+0x167>
c0015cab:	80 fa cd             	cmp    dl,0xcd
c0015cae:	0f 84 d9 01 00 00    	je     c0015e8d <Vm::faultHandler(regs*)+0x2f6>
c0015cb4:	80 fa cf             	cmp    dl,0xcf
c0015cb7:	0f 85 51 05 00 00    	jne    c001620e <Vm::faultHandler(regs*)+0x677>
c0015cbd:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0015cc0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0015cc3:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0015cc7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0015cca:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0015cce:	81 ca 00 02 02 00    	or     edx,0x20200
c0015cd4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015cd7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0015cdb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015ce1:	66 c1 e8 09          	shr    ax,0x9
c0015ce5:	83 e0 01             	and    eax,0x1
c0015ce8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015ceb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015cee:	83 c0 06             	add    eax,0x6
c0015cf1:	25 ff ff 00 00       	and    eax,0xffff
c0015cf6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015cf9:	e9 0c 05 00 00       	jmp    c001620a <Vm::faultHandler(regs*)+0x673>
c0015cfe:	80 fa e6             	cmp    dl,0xe6
c0015d01:	0f 84 7f 04 00 00    	je     c0016186 <Vm::faultHandler(regs*)+0x5ef>
c0015d07:	0f 82 4b 04 00 00    	jb     c0016158 <Vm::faultHandler(regs*)+0x5c1>
c0015d0d:	80 fa e7             	cmp    dl,0xe7
c0015d10:	0f 84 87 04 00 00    	je     c001619d <Vm::faultHandler(regs*)+0x606>
c0015d16:	e9 f3 04 00 00       	jmp    c001620e <Vm::faultHandler(regs*)+0x677>
c0015d1b:	80 fa ef             	cmp    dl,0xef
c0015d1e:	0f 84 d1 04 00 00    	je     c00161f5 <Vm::faultHandler(regs*)+0x65e>
c0015d24:	77 28                	ja     c0015d4e <Vm::faultHandler(regs*)+0x1b7>
c0015d26:	80 fa ed             	cmp    dl,0xed
c0015d29:	0f 84 9f 04 00 00    	je     c00161ce <Vm::faultHandler(regs*)+0x637>
c0015d2f:	80 fa ee             	cmp    dl,0xee
c0015d32:	0f 85 d6 04 00 00    	jne    c001620e <Vm::faultHandler(regs*)+0x677>
c0015d38:	50                   	push   eax
c0015d39:	50                   	push   eax
c0015d3a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015d3e:	50                   	push   eax
c0015d3f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015d43:	50                   	push   eax
c0015d44:	e8 a3 f9 ff ff       	call   c00156ec <Vm::outbv(unsigned short, unsigned char)>
c0015d49:	e9 9f 04 00 00       	jmp    c00161ed <Vm::faultHandler(regs*)+0x656>
c0015d4e:	80 fa fa             	cmp    dl,0xfa
c0015d51:	0f 84 69 01 00 00    	je     c0015ec0 <Vm::faultHandler(regs*)+0x329>
c0015d57:	80 fa fb             	cmp    dl,0xfb
c0015d5a:	0f 84 6e 01 00 00    	je     c0015ece <Vm::faultHandler(regs*)+0x337>
c0015d60:	80 fa f3             	cmp    dl,0xf3
c0015d63:	0f 85 a5 04 00 00    	jne    c001620e <Vm::faultHandler(regs*)+0x677>
c0015d69:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015d6c:	e9 c0 fe ff ff       	jmp    c0015c31 <Vm::faultHandler(regs*)+0x9a>
c0015d71:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015d74:	be 02 00 00 00       	mov    esi,0x2
c0015d79:	e9 b3 fe ff ff       	jmp    c0015c31 <Vm::faultHandler(regs*)+0x9a>
c0015d7e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015d81:	be 03 00 00 00       	mov    esi,0x3
c0015d86:	e9 a6 fe ff ff       	jmp    c0015c31 <Vm::faultHandler(regs*)+0x9a>
c0015d8b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015d8e:	be 04 00 00 00       	mov    esi,0x4
c0015d93:	e9 99 fe ff ff       	jmp    c0015c31 <Vm::faultHandler(regs*)+0x9a>
c0015d98:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015d9b:	be 05 00 00 00       	mov    esi,0x5
c0015da0:	e9 8c fe ff ff       	jmp    c0015c31 <Vm::faultHandler(regs*)+0x9a>
c0015da5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015da8:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0015dad:	e9 7f fe ff ff       	jmp    c0015c31 <Vm::faultHandler(regs*)+0x9a>
c0015db2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015db5:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0015dba:	e9 72 fe ff ff       	jmp    c0015c31 <Vm::faultHandler(regs*)+0x9a>
c0015dbf:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0015dc2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015dc6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015dcb:	74 30                	je     c0015dfd <Vm::faultHandler(regs*)+0x266>
c0015dcd:	83 e9 04             	sub    ecx,0x4
c0015dd0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0015dd6:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0015ddc:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015ddf:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0015de2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015de8:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015dec:	0f 84 15 04 00 00    	je     c0016207 <Vm::faultHandler(regs*)+0x670>
c0015df2:	80 ce 02             	or     dh,0x2
c0015df5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0015df8:	e9 0a 04 00 00       	jmp    c0016207 <Vm::faultHandler(regs*)+0x670>
c0015dfd:	83 e9 02             	sub    ecx,0x2
c0015e00:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0015e06:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015e09:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015e0d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015e13:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015e17:	74 05                	je     c0015e1e <Vm::faultHandler(regs*)+0x287>
c0015e19:	80 ce 02             	or     dh,0x2
c0015e1c:	eb 03                	jmp    c0015e21 <Vm::faultHandler(regs*)+0x28a>
c0015e1e:	80 e6 fd             	and    dh,0xfd
c0015e21:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015e25:	e9 dd 03 00 00       	jmp    c0016207 <Vm::faultHandler(regs*)+0x670>
c0015e2a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015e2f:	74 2a                	je     c0015e5b <Vm::faultHandler(regs*)+0x2c4>
c0015e31:	8b 10                	mov    edx,DWORD PTR [eax]
c0015e33:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0015e39:	81 ca 00 02 02 00    	or     edx,0x20200
c0015e3f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015e42:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e44:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015e4a:	c1 e8 09             	shr    eax,0x9
c0015e4d:	83 e0 01             	and    eax,0x1
c0015e50:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015e53:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015e56:	83 c0 04             	add    eax,0x4
c0015e59:	eb 25                	jmp    c0015e80 <Vm::faultHandler(regs*)+0x2e9>
c0015e5b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0015e5e:	81 ca 00 02 02 00    	or     edx,0x20200
c0015e64:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015e67:	66 8b 00             	mov    ax,WORD PTR [eax]
c0015e6a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015e70:	66 c1 e8 09          	shr    ax,0x9
c0015e74:	83 e0 01             	and    eax,0x1
c0015e77:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015e7a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015e7d:	83 c0 02             	add    eax,0x2
c0015e80:	25 ff ff 00 00       	and    eax,0xffff
c0015e85:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015e88:	e9 7a 03 00 00       	jmp    c0016207 <Vm::faultHandler(regs*)+0x670>
c0015e8d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015e91:	3c ee                	cmp    al,0xee
c0015e93:	75 10                	jne    c0015ea5 <Vm::faultHandler(regs*)+0x30e>
c0015e95:	83 ec 0c             	sub    esp,0xc
c0015e98:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0015e9b:	e8 e9 f8 ff ff       	call   c0015789 <Vm::mainloop3(unsigned long)>
c0015ea0:	e9 4b 03 00 00       	jmp    c00161f0 <Vm::faultHandler(regs*)+0x659>
c0015ea5:	83 ec 0c             	sub    esp,0xc
c0015ea8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015eb0:	51                   	push   ecx
c0015eb1:	50                   	push   eax
c0015eb2:	53                   	push   ebx
c0015eb3:	e8 e1 fb ff ff       	call   c0015a99 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0015eb8:	83 c4 20             	add    esp,0x20
c0015ebb:	e9 4a 03 00 00       	jmp    c001620a <Vm::faultHandler(regs*)+0x673>
c0015ec0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ec5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015ec9:	e9 39 03 00 00       	jmp    c0016207 <Vm::faultHandler(regs*)+0x670>
c0015ece:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ed3:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0015ed7:	e9 2b 03 00 00       	jmp    c0016207 <Vm::faultHandler(regs*)+0x670>
c0015edc:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015edf:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015ee4:	74 2b                	je     c0015f11 <Vm::faultHandler(regs*)+0x37a>
c0015ee6:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0015eed:	76 22                	jbe    c0015f11 <Vm::faultHandler(regs*)+0x37a>
c0015eef:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015ef3:	50                   	push   eax
c0015ef4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015ef8:	50                   	push   eax
c0015ef9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015efd:	50                   	push   eax
c0015efe:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015f02:	50                   	push   eax
c0015f03:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015f07:	50                   	push   eax
c0015f08:	6a 6c                	push   0x6c
c0015f0a:	6a 6c                	push   0x6c
c0015f0c:	e9 b9 01 00 00       	jmp    c00160ca <Vm::faultHandler(regs*)+0x533>
c0015f11:	83 ec 0c             	sub    esp,0xc
c0015f14:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015f18:	50                   	push   eax
c0015f19:	e8 bb f7 ff ff       	call   c00156d9 <Vm::inbv(unsigned short)>
c0015f1e:	83 c4 0c             	add    esp,0xc
c0015f21:	0f b6 c0             	movzx  eax,al
c0015f24:	50                   	push   eax
c0015f25:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0015f29:	0f b7 f6             	movzx  esi,si
c0015f2c:	50                   	push   eax
c0015f2d:	56                   	push   esi
c0015f2e:	e8 24 fc ff ff       	call   c0015b57 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0015f33:	83 c4 10             	add    esp,0x10
c0015f36:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015f39:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015f3d:	74 03                	je     c0015f42 <Vm::faultHandler(regs*)+0x3ab>
c0015f3f:	48                   	dec    eax
c0015f40:	eb 01                	jmp    c0015f43 <Vm::faultHandler(regs*)+0x3ac>
c0015f42:	40                   	inc    eax
c0015f43:	0f b7 c0             	movzx  eax,ax
c0015f46:	e9 8d 00 00 00       	jmp    c0015fd8 <Vm::faultHandler(regs*)+0x441>
c0015f4b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015f4e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015f51:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015f56:	74 29                	je     c0015f81 <Vm::faultHandler(regs*)+0x3ea>
c0015f58:	3d ff ff 00 00       	cmp    eax,0xffff
c0015f5d:	76 22                	jbe    c0015f81 <Vm::faultHandler(regs*)+0x3ea>
c0015f5f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015f63:	50                   	push   eax
c0015f64:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015f68:	50                   	push   eax
c0015f69:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015f6d:	50                   	push   eax
c0015f6e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015f72:	50                   	push   eax
c0015f73:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015f77:	50                   	push   eax
c0015f78:	6a 6d                	push   0x6d
c0015f7a:	6a 6d                	push   0x6d
c0015f7c:	e9 49 01 00 00       	jmp    c00160ca <Vm::faultHandler(regs*)+0x533>
c0015f81:	0f b7 c8             	movzx  ecx,ax
c0015f84:	0f b7 f6             	movzx  esi,si
c0015f87:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015f8a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015f8f:	74 20                	je     c0015fb1 <Vm::faultHandler(regs*)+0x41a>
c0015f91:	ed                   	in     eax,dx
c0015f92:	55                   	push   ebp
c0015f93:	50                   	push   eax
c0015f94:	51                   	push   ecx
c0015f95:	56                   	push   esi
c0015f96:	e8 e7 fb ff ff       	call   c0015b82 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0015f9b:	83 c4 10             	add    esp,0x10
c0015f9e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015fa1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015fa5:	74 05                	je     c0015fac <Vm::faultHandler(regs*)+0x415>
c0015fa7:	83 e8 04             	sub    eax,0x4
c0015faa:	eb 27                	jmp    c0015fd3 <Vm::faultHandler(regs*)+0x43c>
c0015fac:	83 c0 04             	add    eax,0x4
c0015faf:	eb 22                	jmp    c0015fd3 <Vm::faultHandler(regs*)+0x43c>
c0015fb1:	66 ed                	in     ax,dx
c0015fb3:	0f b7 c0             	movzx  eax,ax
c0015fb6:	57                   	push   edi
c0015fb7:	50                   	push   eax
c0015fb8:	51                   	push   ecx
c0015fb9:	56                   	push   esi
c0015fba:	e8 ad fb ff ff       	call   c0015b6c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0015fbf:	83 c4 10             	add    esp,0x10
c0015fc2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015fc5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015fc9:	74 05                	je     c0015fd0 <Vm::faultHandler(regs*)+0x439>
c0015fcb:	83 e8 02             	sub    eax,0x2
c0015fce:	eb 03                	jmp    c0015fd3 <Vm::faultHandler(regs*)+0x43c>
c0015fd0:	83 c0 02             	add    eax,0x2
c0015fd3:	25 ff ff 00 00       	and    eax,0xffff
c0015fd8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0015fdb:	e9 27 02 00 00       	jmp    c0016207 <Vm::faultHandler(regs*)+0x670>
c0015fe0:	8d 46 ff             	lea    eax,[esi-0x1]
c0015fe3:	3c 05                	cmp    al,0x5
c0015fe5:	77 24                	ja     c001600b <Vm::faultHandler(regs*)+0x474>
c0015fe7:	0f b6 c0             	movzx  eax,al
c0015fea:	ff 24 85 3c 0c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf3c4]
c0015ff1:	0f b7 fd             	movzx  edi,bp
c0015ff4:	eb 15                	jmp    c001600b <Vm::faultHandler(regs*)+0x474>
c0015ff6:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0015ffa:	eb 0f                	jmp    c001600b <Vm::faultHandler(regs*)+0x474>
c0015ffc:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016000:	eb 09                	jmp    c001600b <Vm::faultHandler(regs*)+0x474>
c0016002:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016006:	eb 03                	jmp    c001600b <Vm::faultHandler(regs*)+0x474>
c0016008:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001600b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001600e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016013:	74 29                	je     c001603e <Vm::faultHandler(regs*)+0x4a7>
c0016015:	3d ff ff 00 00       	cmp    eax,0xffff
c001601a:	76 22                	jbe    c001603e <Vm::faultHandler(regs*)+0x4a7>
c001601c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016020:	50                   	push   eax
c0016021:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016025:	50                   	push   eax
c0016026:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001602a:	50                   	push   eax
c001602b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001602f:	50                   	push   eax
c0016030:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016034:	50                   	push   eax
c0016035:	6a 6e                	push   0x6e
c0016037:	6a 6e                	push   0x6e
c0016039:	e9 8c 00 00 00       	jmp    c00160ca <Vm::faultHandler(regs*)+0x533>
c001603e:	52                   	push   edx
c001603f:	52                   	push   edx
c0016040:	0f b7 c0             	movzx  eax,ax
c0016043:	50                   	push   eax
c0016044:	57                   	push   edi
c0016045:	e8 d9 fa ff ff       	call   c0015b23 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001604a:	59                   	pop    ecx
c001604b:	5e                   	pop    esi
c001604c:	0f b6 c0             	movzx  eax,al
c001604f:	50                   	push   eax
c0016050:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016054:	50                   	push   eax
c0016055:	e8 92 f6 ff ff       	call   c00156ec <Vm::outbv(unsigned short, unsigned char)>
c001605a:	83 c4 10             	add    esp,0x10
c001605d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016060:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016064:	74 03                	je     c0016069 <Vm::faultHandler(regs*)+0x4d2>
c0016066:	48                   	dec    eax
c0016067:	eb 01                	jmp    c001606a <Vm::faultHandler(regs*)+0x4d3>
c0016069:	40                   	inc    eax
c001606a:	0f b7 c0             	movzx  eax,ax
c001606d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0016070:	e9 92 01 00 00       	jmp    c0016207 <Vm::faultHandler(regs*)+0x670>
c0016075:	8d 46 ff             	lea    eax,[esi-0x1]
c0016078:	3c 05                	cmp    al,0x5
c001607a:	77 1f                	ja     c001609b <Vm::faultHandler(regs*)+0x504>
c001607c:	0f b6 c0             	movzx  eax,al
c001607f:	ff 24 85 54 0c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf3ac]
c0016086:	89 ef                	mov    edi,ebp
c0016088:	eb 11                	jmp    c001609b <Vm::faultHandler(regs*)+0x504>
c001608a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001608d:	eb 0c                	jmp    c001609b <Vm::faultHandler(regs*)+0x504>
c001608f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016092:	eb 07                	jmp    c001609b <Vm::faultHandler(regs*)+0x504>
c0016094:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016097:	eb 02                	jmp    c001609b <Vm::faultHandler(regs*)+0x504>
c0016099:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001609b:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001609e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00160a3:	74 37                	je     c00160dc <Vm::faultHandler(regs*)+0x545>
c00160a5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00160ab:	76 2f                	jbe    c00160dc <Vm::faultHandler(regs*)+0x545>
c00160ad:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00160b1:	50                   	push   eax
c00160b2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00160b6:	50                   	push   eax
c00160b7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00160bb:	50                   	push   eax
c00160bc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00160c0:	50                   	push   eax
c00160c1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00160c5:	50                   	push   eax
c00160c6:	6a 6f                	push   0x6f
c00160c8:	6a 6f                	push   0x6f
c00160ca:	68 e2 0b 02 c0       	push   0xc0020be2
c00160cf:	e8 7f 45 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c00160d4:	83 c4 20             	add    esp,0x20
c00160d7:	e9 86 01 00 00       	jmp    c0016262 <Vm::faultHandler(regs*)+0x6cb>
c00160dc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00160df:	0f b7 d7             	movzx  edx,di
c00160e2:	81 e1 00 04 00 00    	and    ecx,0x400
c00160e8:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00160eb:	0f b7 c6             	movzx  eax,si
c00160ee:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00160f3:	74 1d                	je     c0016112 <Vm::faultHandler(regs*)+0x57b>
c00160f5:	55                   	push   ebp
c00160f6:	55                   	push   ebp
c00160f7:	50                   	push   eax
c00160f8:	52                   	push   edx
c00160f9:	e8 48 fa ff ff       	call   c0015b46 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00160fe:	83 c4 10             	add    esp,0x10
c0016101:	89 fa                	mov    edx,edi
c0016103:	ef                   	out    dx,eax
c0016104:	85 c9                	test   ecx,ecx
c0016106:	74 05                	je     c001610d <Vm::faultHandler(regs*)+0x576>
c0016108:	83 ee 04             	sub    esi,0x4
c001610b:	eb 21                	jmp    c001612e <Vm::faultHandler(regs*)+0x597>
c001610d:	83 c6 04             	add    esi,0x4
c0016110:	eb 1c                	jmp    c001612e <Vm::faultHandler(regs*)+0x597>
c0016112:	55                   	push   ebp
c0016113:	55                   	push   ebp
c0016114:	50                   	push   eax
c0016115:	52                   	push   edx
c0016116:	e8 19 fa ff ff       	call   c0015b34 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001611b:	83 c4 10             	add    esp,0x10
c001611e:	89 fa                	mov    edx,edi
c0016120:	66 ef                	out    dx,ax
c0016122:	85 c9                	test   ecx,ecx
c0016124:	74 05                	je     c001612b <Vm::faultHandler(regs*)+0x594>
c0016126:	83 ee 02             	sub    esi,0x2
c0016129:	eb 03                	jmp    c001612e <Vm::faultHandler(regs*)+0x597>
c001612b:	83 c6 02             	add    esi,0x2
c001612e:	81 e6 ff ff 00 00    	and    esi,0xffff
c0016134:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0016137:	e9 cb 00 00 00       	jmp    c0016207 <Vm::faultHandler(regs*)+0x670>
c001613c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016143:	83 ec 0c             	sub    esp,0xc
c0016146:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001614a:	50                   	push   eax
c001614b:	e8 89 f5 ff ff       	call   c00156d9 <Vm::inbv(unsigned short)>
c0016150:	0f b6 c0             	movzx  eax,al
c0016153:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016156:	eb 3f                	jmp    c0016197 <Vm::faultHandler(regs*)+0x600>
c0016158:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001615d:	74 07                	je     c0016166 <Vm::faultHandler(regs*)+0x5cf>
c001615f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016163:	ed                   	in     eax,dx
c0016164:	eb 14                	jmp    c001617a <Vm::faultHandler(regs*)+0x5e3>
c0016166:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0016169:	66 31 f6             	xor    si,si
c001616c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001616f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016173:	66 ed                	in     ax,dx
c0016175:	0f b7 c0             	movzx  eax,ax
c0016178:	09 f0                	or     eax,esi
c001617a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001617d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016181:	e9 84 00 00 00       	jmp    c001620a <Vm::faultHandler(regs*)+0x673>
c0016186:	52                   	push   edx
c0016187:	52                   	push   edx
c0016188:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001618c:	50                   	push   eax
c001618d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016191:	50                   	push   eax
c0016192:	e8 55 f5 ff ff       	call   c00156ec <Vm::outbv(unsigned short, unsigned char)>
c0016197:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001619b:	eb 53                	jmp    c00161f0 <Vm::faultHandler(regs*)+0x659>
c001619d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00161a0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00161a4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00161a9:	74 03                	je     c00161ae <Vm::faultHandler(regs*)+0x617>
c00161ab:	ef                   	out    dx,eax
c00161ac:	eb cf                	jmp    c001617d <Vm::faultHandler(regs*)+0x5e6>
c00161ae:	66 ef                	out    dx,ax
c00161b0:	eb cb                	jmp    c001617d <Vm::faultHandler(regs*)+0x5e6>
c00161b2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00161b9:	83 ec 0c             	sub    esp,0xc
c00161bc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00161c0:	50                   	push   eax
c00161c1:	e8 13 f5 ff ff       	call   c00156d9 <Vm::inbv(unsigned short)>
c00161c6:	0f b6 c0             	movzx  eax,al
c00161c9:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00161cc:	eb 1f                	jmp    c00161ed <Vm::faultHandler(regs*)+0x656>
c00161ce:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00161d1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00161d6:	74 03                	je     c00161db <Vm::faultHandler(regs*)+0x644>
c00161d8:	ed                   	in     eax,dx
c00161d9:	eb 0d                	jmp    c00161e8 <Vm::faultHandler(regs*)+0x651>
c00161db:	66 ed                	in     ax,dx
c00161dd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00161e0:	66 31 d2             	xor    dx,dx
c00161e3:	0f b7 c0             	movzx  eax,ax
c00161e6:	09 d0                	or     eax,edx
c00161e8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00161eb:	eb 1a                	jmp    c0016207 <Vm::faultHandler(regs*)+0x670>
c00161ed:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00161f0:	83 c4 10             	add    esp,0x10
c00161f3:	eb 15                	jmp    c001620a <Vm::faultHandler(regs*)+0x673>
c00161f5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00161f8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00161fb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0016200:	74 03                	je     c0016205 <Vm::faultHandler(regs*)+0x66e>
c0016202:	ef                   	out    dx,eax
c0016203:	eb 02                	jmp    c0016207 <Vm::faultHandler(regs*)+0x670>
c0016205:	66 ef                	out    dx,ax
c0016207:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001620a:	b0 01                	mov    al,0x1
c001620c:	eb 56                	jmp    c0016264 <Vm::faultHandler(regs*)+0x6cd>
c001620e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016212:	50                   	push   eax
c0016213:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016217:	50                   	push   eax
c0016218:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001621c:	50                   	push   eax
c001621d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016221:	50                   	push   eax
c0016222:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016226:	50                   	push   eax
c0016227:	52                   	push   edx
c0016228:	52                   	push   edx
c0016229:	68 0f 0c 02 c0       	push   0xc0020c0f
c001622e:	e8 20 44 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0016233:	83 c4 20             	add    esp,0x20
c0016236:	83 ec 0c             	sub    esp,0xc
c0016239:	6a 60                	push   0x60
c001623b:	e8 99 f4 ff ff       	call   c00156d9 <Vm::inbv(unsigned short)>
c0016240:	83 c4 10             	add    esp,0x10
c0016243:	3c 1c                	cmp    al,0x1c
c0016245:	74 04                	je     c001624b <Vm::faultHandler(regs*)+0x6b4>
c0016247:	3c 5a                	cmp    al,0x5a
c0016249:	75 eb                	jne    c0016236 <Vm::faultHandler(regs*)+0x69f>
c001624b:	3c 1c                	cmp    al,0x1c
c001624d:	74 04                	je     c0016253 <Vm::faultHandler(regs*)+0x6bc>
c001624f:	3c 5a                	cmp    al,0x5a
c0016251:	75 0f                	jne    c0016262 <Vm::faultHandler(regs*)+0x6cb>
c0016253:	83 ec 0c             	sub    esp,0xc
c0016256:	6a 60                	push   0x60
c0016258:	e8 7c f4 ff ff       	call   c00156d9 <Vm::inbv(unsigned short)>
c001625d:	83 c4 10             	add    esp,0x10
c0016260:	eb e9                	jmp    c001624b <Vm::faultHandler(regs*)+0x6b4>
c0016262:	31 c0                	xor    eax,eax
c0016264:	83 c4 1c             	add    esp,0x1c
c0016267:	5b                   	pop    ebx
c0016268:	5e                   	pop    esi
c0016269:	5f                   	pop    edi
c001626a:	5d                   	pop    ebp
c001626b:	c3                   	ret    

c001626c <noCopro(unsigned long)>:
c001626c:	c3                   	ret    

c001626d <nmiHandler(regs*, void*)>:
c001626d:	83 ec 0c             	sub    esp,0xc
c0016270:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016275:	83 ec 0c             	sub    esp,0xc
c0016278:	50                   	push   eax
c0016279:	e8 06 0e ff ff       	call   c0007084 <Computer::handleNMI()>
c001627e:	83 c4 10             	add    esp,0x10
c0016281:	90                   	nop
c0016282:	83 c4 0c             	add    esp,0xc
c0016285:	c3                   	ret    

c0016286 <doubleFault(regs*, void*)>:
c0016286:	55                   	push   ebp
c0016287:	89 e5                	mov    ebp,esp
c0016289:	83 ec 08             	sub    esp,0x8
c001628c:	83 ec 0c             	sub    esp,0xc
c001628f:	68 6c 0c 02 c0       	push   0xc0020c6c
c0016294:	e8 6e a1 ff ff       	call   c0010407 <KePanic(char const*)>
c0016299:	83 c4 10             	add    esp,0x10
c001629c:	90                   	nop
c001629d:	c9                   	leave  
c001629e:	c3                   	ret    

c001629f <displayDebugInfo(regs*)>:
c001629f:	83 ec 1c             	sub    esp,0x1c
c00162a2:	0f 20 c0             	mov    eax,cr0
c00162a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162a9:	0f 20 d0             	mov    eax,cr2
c00162ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00162b0:	0f 20 d8             	mov    eax,cr3
c00162b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00162b7:	0f 20 e0             	mov    eax,cr4
c00162ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00162bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162c1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00162c4:	83 ec 08             	sub    esp,0x8
c00162c7:	50                   	push   eax
c00162c8:	68 88 0c 02 c0       	push   0xc0020c88
c00162cd:	e8 81 43 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c00162d2:	83 c4 10             	add    esp,0x10
c00162d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162d9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00162dc:	83 ec 08             	sub    esp,0x8
c00162df:	50                   	push   eax
c00162e0:	68 79 0c 02 c0       	push   0xc0020c79
c00162e5:	e8 69 43 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c00162ea:	83 c4 10             	add    esp,0x10
c00162ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00162f1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00162f4:	83 ec 08             	sub    esp,0x8
c00162f7:	50                   	push   eax
c00162f8:	68 84 0c 02 c0       	push   0xc0020c84
c00162fd:	e8 51 43 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0016302:	83 c4 10             	add    esp,0x10
c0016305:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016309:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001630c:	83 ec 08             	sub    esp,0x8
c001630f:	50                   	push   eax
c0016310:	68 93 0c 02 c0       	push   0xc0020c93
c0016315:	e8 39 43 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c001631a:	83 c4 10             	add    esp,0x10
c001631d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016321:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016324:	83 ec 08             	sub    esp,0x8
c0016327:	50                   	push   eax
c0016328:	68 9e 0c 02 c0       	push   0xc0020c9e
c001632d:	e8 21 43 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0016332:	83 c4 10             	add    esp,0x10
c0016335:	83 ec 08             	sub    esp,0x8
c0016338:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001633c:	68 a9 0c 02 c0       	push   0xc0020ca9
c0016341:	e8 0d 43 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0016346:	83 c4 10             	add    esp,0x10
c0016349:	83 ec 08             	sub    esp,0x8
c001634c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016350:	68 b4 0c 02 c0       	push   0xc0020cb4
c0016355:	e8 f9 42 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c001635a:	83 c4 10             	add    esp,0x10
c001635d:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016362:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016368:	83 ec 0c             	sub    esp,0xc
c001636b:	50                   	push   eax
c001636c:	e8 56 21 ff ff       	call   c00084c7 <setActiveTerminal(VgaText*)>
c0016371:	83 c4 10             	add    esp,0x10
c0016374:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016379:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001637f:	83 ec 08             	sub    esp,0x8
c0016382:	68 bf 0c 02 c0       	push   0xc0020cbf
c0016387:	50                   	push   eax
c0016388:	e8 79 24 ff ff       	call   c0008806 <VgaText::puts(char const*)>
c001638d:	83 c4 10             	add    esp,0x10
c0016390:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016395:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001639b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001639f:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00163a2:	83 ec 08             	sub    esp,0x8
c00163a5:	52                   	push   edx
c00163a6:	50                   	push   eax
c00163a7:	e8 14 24 ff ff       	call   c00087c0 <VgaText::putx(unsigned int)>
c00163ac:	83 c4 10             	add    esp,0x10
c00163af:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00163b4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163ba:	83 ec 08             	sub    esp,0x8
c00163bd:	68 cd 0c 02 c0       	push   0xc0020ccd
c00163c2:	50                   	push   eax
c00163c3:	e8 3e 24 ff ff       	call   c0008806 <VgaText::puts(char const*)>
c00163c8:	83 c4 10             	add    esp,0x10
c00163cb:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00163d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163d6:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00163db:	8b 12                	mov    edx,DWORD PTR [edx]
c00163dd:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00163e0:	83 c2 0c             	add    edx,0xc
c00163e3:	83 ec 08             	sub    esp,0x8
c00163e6:	52                   	push   edx
c00163e7:	50                   	push   eax
c00163e8:	e8 19 24 ff ff       	call   c0008806 <VgaText::puts(char const*)>
c00163ed:	83 c4 10             	add    esp,0x10
c00163f0:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00163f5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00163fb:	83 ec 08             	sub    esp,0x8
c00163fe:	68 d6 0c 02 c0       	push   0xc0020cd6
c0016403:	50                   	push   eax
c0016404:	e8 fd 23 ff ff       	call   c0008806 <VgaText::puts(char const*)>
c0016409:	83 c4 10             	add    esp,0x10
c001640c:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016411:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016417:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001641b:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001641e:	83 ec 08             	sub    esp,0x8
c0016421:	52                   	push   edx
c0016422:	50                   	push   eax
c0016423:	e8 98 23 ff ff       	call   c00087c0 <VgaText::putx(unsigned int)>
c0016428:	83 c4 10             	add    esp,0x10
c001642b:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016430:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016436:	83 ec 08             	sub    esp,0x8
c0016439:	68 de 0c 02 c0       	push   0xc0020cde
c001643e:	50                   	push   eax
c001643f:	e8 c2 23 ff ff       	call   c0008806 <VgaText::puts(char const*)>
c0016444:	83 c4 10             	add    esp,0x10
c0016447:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001644c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016452:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016456:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016459:	83 ec 08             	sub    esp,0x8
c001645c:	52                   	push   edx
c001645d:	50                   	push   eax
c001645e:	e8 5d 23 ff ff       	call   c00087c0 <VgaText::putx(unsigned int)>
c0016463:	83 c4 10             	add    esp,0x10
c0016466:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001646b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016471:	83 ec 08             	sub    esp,0x8
c0016474:	68 e6 0c 02 c0       	push   0xc0020ce6
c0016479:	50                   	push   eax
c001647a:	e8 87 23 ff ff       	call   c0008806 <VgaText::puts(char const*)>
c001647f:	83 c4 10             	add    esp,0x10
c0016482:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016487:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001648d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016491:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016494:	83 ec 08             	sub    esp,0x8
c0016497:	52                   	push   edx
c0016498:	50                   	push   eax
c0016499:	e8 22 23 ff ff       	call   c00087c0 <VgaText::putx(unsigned int)>
c001649e:	83 c4 10             	add    esp,0x10
c00164a1:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00164a6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00164ac:	83 ec 08             	sub    esp,0x8
c00164af:	68 ee 0c 02 c0       	push   0xc0020cee
c00164b4:	50                   	push   eax
c00164b5:	e8 4c 23 ff ff       	call   c0008806 <VgaText::puts(char const*)>
c00164ba:	83 c4 10             	add    esp,0x10
c00164bd:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00164c2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00164c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00164cc:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00164cf:	83 ec 08             	sub    esp,0x8
c00164d2:	52                   	push   edx
c00164d3:	50                   	push   eax
c00164d4:	e8 e7 22 ff ff       	call   c00087c0 <VgaText::putx(unsigned int)>
c00164d9:	83 c4 10             	add    esp,0x10
c00164dc:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00164e1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00164e7:	83 ec 08             	sub    esp,0x8
c00164ea:	68 f6 0c 02 c0       	push   0xc0020cf6
c00164ef:	50                   	push   eax
c00164f0:	e8 11 23 ff ff       	call   c0008806 <VgaText::puts(char const*)>
c00164f5:	83 c4 10             	add    esp,0x10
c00164f8:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00164fd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016503:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016507:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001650a:	83 ec 08             	sub    esp,0x8
c001650d:	52                   	push   edx
c001650e:	50                   	push   eax
c001650f:	e8 ac 22 ff ff       	call   c00087c0 <VgaText::putx(unsigned int)>
c0016514:	83 c4 10             	add    esp,0x10
c0016517:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001651c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016522:	83 ec 08             	sub    esp,0x8
c0016525:	68 fe 0c 02 c0       	push   0xc0020cfe
c001652a:	50                   	push   eax
c001652b:	e8 d6 22 ff ff       	call   c0008806 <VgaText::puts(char const*)>
c0016530:	83 c4 10             	add    esp,0x10
c0016533:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016538:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001653e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016542:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016545:	83 ec 08             	sub    esp,0x8
c0016548:	52                   	push   edx
c0016549:	50                   	push   eax
c001654a:	e8 71 22 ff ff       	call   c00087c0 <VgaText::putx(unsigned int)>
c001654f:	83 c4 10             	add    esp,0x10
c0016552:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016557:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001655d:	83 ec 08             	sub    esp,0x8
c0016560:	68 06 0d 02 c0       	push   0xc0020d06
c0016565:	50                   	push   eax
c0016566:	e8 9b 22 ff ff       	call   c0008806 <VgaText::puts(char const*)>
c001656b:	83 c4 10             	add    esp,0x10
c001656e:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016573:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016579:	83 ec 08             	sub    esp,0x8
c001657c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016580:	50                   	push   eax
c0016581:	e8 3a 22 ff ff       	call   c00087c0 <VgaText::putx(unsigned int)>
c0016586:	83 c4 10             	add    esp,0x10
c0016589:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001658e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016594:	83 ec 08             	sub    esp,0x8
c0016597:	68 0f 0d 02 c0       	push   0xc0020d0f
c001659c:	50                   	push   eax
c001659d:	e8 64 22 ff ff       	call   c0008806 <VgaText::puts(char const*)>
c00165a2:	83 c4 10             	add    esp,0x10
c00165a5:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00165aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00165b0:	83 ec 08             	sub    esp,0x8
c00165b3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00165b7:	50                   	push   eax
c00165b8:	e8 03 22 ff ff       	call   c00087c0 <VgaText::putx(unsigned int)>
c00165bd:	83 c4 10             	add    esp,0x10
c00165c0:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00165c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00165cb:	83 ec 08             	sub    esp,0x8
c00165ce:	68 17 0d 02 c0       	push   0xc0020d17
c00165d3:	50                   	push   eax
c00165d4:	e8 2d 22 ff ff       	call   c0008806 <VgaText::puts(char const*)>
c00165d9:	83 c4 10             	add    esp,0x10
c00165dc:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00165e1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00165e7:	83 ec 08             	sub    esp,0x8
c00165ea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00165ee:	50                   	push   eax
c00165ef:	e8 cc 21 ff ff       	call   c00087c0 <VgaText::putx(unsigned int)>
c00165f4:	83 c4 10             	add    esp,0x10
c00165f7:	fa                   	cli    
c00165f8:	f4                   	hlt    
c00165f9:	eb fe                	jmp    c00165f9 <displayDebugInfo(regs*)+0x35a>

c00165fb <HalSystemIdle()>:
c00165fb:	56                   	push   esi
c00165fc:	53                   	push   ebx
c00165fd:	83 ec 14             	sub    esp,0x14
c0016600:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016605:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001660b:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016611:	83 e0 04             	and    eax,0x4
c0016614:	84 c0                	test   al,al
c0016616:	0f 95 c0             	setne  al
c0016619:	84 c0                	test   al,al
c001661b:	74 4c                	je     c0016669 <HalSystemIdle()+0x6e>
c001661d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016622:	83 ec 08             	sub    esp,0x8
c0016625:	68 e1 00 00 00       	push   0xe1
c001662a:	50                   	push   eax
c001662b:	e8 7c 08 ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c0016630:	83 c4 10             	add    esp,0x10
c0016633:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001663b:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016640:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016644:	83 e2 02             	and    edx,0x2
c0016647:	89 d3                	mov    ebx,edx
c0016649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001664d:	83 e2 00             	and    edx,0x0
c0016650:	89 d6                	mov    esi,edx
c0016652:	56                   	push   esi
c0016653:	53                   	push   ebx
c0016654:	68 e1 00 00 00       	push   0xe1
c0016659:	50                   	push   eax
c001665a:	e8 79 08 ff ff       	call   c0006ed8 <Computer::wrmsr(unsigned int, unsigned long long)>
c001665f:	83 c4 10             	add    esp,0x10
c0016662:	e8 2d 9b fe ff       	call   c0000194 <doTPAUSE>
c0016667:	eb 01                	jmp    c001666a <HalSystemIdle()+0x6f>
c0016669:	f4                   	hlt    
c001666a:	90                   	nop
c001666b:	83 c4 14             	add    esp,0x14
c001666e:	5b                   	pop    ebx
c001666f:	5e                   	pop    esi
c0016670:	c3                   	ret    

c0016671 <displayProgramFault(char const*)>:
c0016671:	83 ec 0c             	sub    esp,0xc
c0016674:	83 ec 0c             	sub    esp,0xc
c0016677:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001667b:	e8 d3 3f ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0016680:	83 c4 10             	add    esp,0x10
c0016683:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016688:	8b 00                	mov    eax,DWORD PTR [eax]
c001668a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001668d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016693:	85 c0                	test   eax,eax
c0016695:	74 21                	je     c00166b8 <displayProgramFault(char const*)+0x47>
c0016697:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001669c:	8b 00                	mov    eax,DWORD PTR [eax]
c001669e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00166a7:	6a 04                	push   0x4
c00166a9:	6a 0f                	push   0xf
c00166ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00166af:	50                   	push   eax
c00166b0:	e8 c3 21 ff ff       	call   c0008878 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00166b5:	83 c4 10             	add    esp,0x10
c00166b8:	90                   	nop
c00166b9:	83 c4 0c             	add    esp,0xc
c00166bc:	c3                   	ret    

c00166bd <gpFault(regs*, void*)>:
c00166bd:	83 ec 1c             	sub    esp,0x1c
c00166c0:	c7 05 10 72 02 c0 97 5b 01 c0 	mov    DWORD PTR ds:0xc0027210,0xc0015b97
c00166ca:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c00166cf:	85 c0                	test   eax,eax
c00166d1:	74 1c                	je     c00166ef <gpFault(regs*, void*)+0x32>
c00166d3:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c00166d8:	83 ec 0c             	sub    esp,0xc
c00166db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00166df:	ff d0                	call   eax
c00166e1:	83 c4 10             	add    esp,0x10
c00166e4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00166e8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00166ed:	75 2e                	jne    c001671d <gpFault(regs*, void*)+0x60>
c00166ef:	83 ec 0c             	sub    esp,0xc
c00166f2:	68 1f 0d 02 c0       	push   0xc0020d1f
c00166f7:	e8 75 ff ff ff       	call   c0016671 <displayProgramFault(char const*)>
c00166fc:	83 c4 10             	add    esp,0x10
c00166ff:	83 ec 0c             	sub    esp,0xc
c0016702:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016706:	e8 94 fb ff ff       	call   c001629f <displayDebugInfo(regs*)>
c001670b:	83 c4 10             	add    esp,0x10
c001670e:	83 ec 0c             	sub    esp,0xc
c0016711:	6a 00                	push   0x0
c0016713:	e8 6c ee ff ff       	call   c0015584 <Thr::terminateFromIRQ(int)>
c0016718:	83 c4 10             	add    esp,0x10
c001671b:	eb 01                	jmp    c001671e <gpFault(regs*, void*)+0x61>
c001671d:	90                   	nop
c001671e:	83 c4 1c             	add    esp,0x1c
c0016721:	c3                   	ret    

c0016722 <pgFault(regs*, void*)>:
c0016722:	83 ec 1c             	sub    esp,0x1c
c0016725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016729:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001672c:	0f 20 d0             	mov    eax,cr2
c001672f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016733:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016737:	83 ec 04             	sub    esp,0x4
c001673a:	52                   	push   edx
c001673b:	50                   	push   eax
c001673c:	68 fc 0d 02 c0       	push   0xc0020dfc
c0016741:	e8 0d 3f ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0016746:	83 c4 10             	add    esp,0x10
c0016749:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001674e:	8b 00                	mov    eax,DWORD PTR [eax]
c0016750:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016753:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016759:	0f 20 d2             	mov    edx,cr2
c001675c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016760:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016764:	83 ec 08             	sub    esp,0x8
c0016767:	52                   	push   edx
c0016768:	50                   	push   eax
c0016769:	e8 c0 3a ff ff       	call   c000a22e <VAS::tryLoadBackOffDisk(unsigned long)>
c001676e:	83 c4 10             	add    esp,0x10
c0016771:	84 c0                	test   al,al
c0016773:	75 2e                	jne    c00167a3 <pgFault(regs*, void*)+0x81>
c0016775:	83 ec 0c             	sub    esp,0xc
c0016778:	68 38 0d 02 c0       	push   0xc0020d38
c001677d:	e8 ef fe ff ff       	call   c0016671 <displayProgramFault(char const*)>
c0016782:	83 c4 10             	add    esp,0x10
c0016785:	83 ec 0c             	sub    esp,0xc
c0016788:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001678c:	e8 0e fb ff ff       	call   c001629f <displayDebugInfo(regs*)>
c0016791:	83 c4 10             	add    esp,0x10
c0016794:	83 ec 0c             	sub    esp,0xc
c0016797:	6a 00                	push   0x0
c0016799:	e8 e6 ed ff ff       	call   c0015584 <Thr::terminateFromIRQ(int)>
c001679e:	83 c4 10             	add    esp,0x10
c00167a1:	eb 01                	jmp    c00167a4 <pgFault(regs*, void*)+0x82>
c00167a3:	90                   	nop
c00167a4:	83 c4 1c             	add    esp,0x1c
c00167a7:	c3                   	ret    

c00167a8 <otherISRHandler(regs*, void*)>:
c00167a8:	83 ec 0c             	sub    esp,0xc
c00167ab:	83 ec 0c             	sub    esp,0xc
c00167ae:	68 24 0e 02 c0       	push   0xc0020e24
c00167b3:	e8 b9 fe ff ff       	call   c0016671 <displayProgramFault(char const*)>
c00167b8:	83 c4 10             	add    esp,0x10
c00167bb:	83 ec 0c             	sub    esp,0xc
c00167be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167c2:	e8 d8 fa ff ff       	call   c001629f <displayDebugInfo(regs*)>
c00167c7:	83 c4 10             	add    esp,0x10
c00167ca:	83 ec 0c             	sub    esp,0xc
c00167cd:	6a 00                	push   0x0
c00167cf:	e8 b0 ed ff ff       	call   c0015584 <Thr::terminateFromIRQ(int)>
c00167d4:	83 c4 10             	add    esp,0x10
c00167d7:	90                   	nop
c00167d8:	83 c4 0c             	add    esp,0xc
c00167db:	c3                   	ret    

c00167dc <opcodeFault(regs*, void*)>:
c00167dc:	55                   	push   ebp
c00167dd:	89 e5                	mov    ebp,esp
c00167df:	83 ec 08             	sub    esp,0x8
c00167e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00167e5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00167e8:	83 ec 08             	sub    esp,0x8
c00167eb:	50                   	push   eax
c00167ec:	68 43 0d 02 c0       	push   0xc0020d43
c00167f1:	e8 5d 3e ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c00167f6:	83 c4 10             	add    esp,0x10
c00167f9:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00167fe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016804:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001680a:	84 c0                	test   al,al
c001680c:	74 21                	je     c001682f <opcodeFault(regs*, void*)+0x53>
c001680e:	83 ec 0c             	sub    esp,0xc
c0016811:	68 4c 0e 02 c0       	push   0xc0020e4c
c0016816:	e8 38 3e ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c001681b:	83 c4 10             	add    esp,0x10
c001681e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016821:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016824:	8d 50 19             	lea    edx,[eax+0x19]
c0016827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001682a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001682d:	eb 2b                	jmp    c001685a <opcodeFault(regs*, void*)+0x7e>
c001682f:	83 ec 0c             	sub    esp,0xc
c0016832:	68 51 0d 02 c0       	push   0xc0020d51
c0016837:	e8 35 fe ff ff       	call   c0016671 <displayProgramFault(char const*)>
c001683c:	83 c4 10             	add    esp,0x10
c001683f:	83 ec 0c             	sub    esp,0xc
c0016842:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016845:	e8 55 fa ff ff       	call   c001629f <displayDebugInfo(regs*)>
c001684a:	83 c4 10             	add    esp,0x10
c001684d:	83 ec 0c             	sub    esp,0xc
c0016850:	6a 00                	push   0x0
c0016852:	e8 2d ed ff ff       	call   c0015584 <Thr::terminateFromIRQ(int)>
c0016857:	83 c4 10             	add    esp,0x10
c001685a:	c9                   	leave  
c001685b:	c3                   	ret    

c001685c <i386SaveCoprocessor(void*)>:
c001685c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016860:	83 c0 3f             	add    eax,0x3f
c0016863:	83 e0 c0             	and    eax,0xffffffc0
c0016866:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001686a:	ff 25 0c 72 02 c0    	jmp    DWORD PTR ds:0xc002720c

c0016870 <i386LoadCoprocessor(void*)>:
c0016870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016874:	83 c0 3f             	add    eax,0x3f
c0016877:	83 e0 c0             	and    eax,0xffffffc0
c001687a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001687e:	ff 25 08 72 02 c0    	jmp    DWORD PTR ds:0xc0027208

c0016884 <x87EmulHandler(regs*, void*)>:
c0016884:	53                   	push   ebx
c0016885:	83 ec 08             	sub    esp,0x8
c0016888:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001688d:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016891:	74 10                	je     c00168a3 <x87EmulHandler(regs*, void*)+0x1f>
c0016893:	83 ec 0c             	sub    esp,0xc
c0016896:	68 5e 0d 02 c0       	push   0xc0020d5e
c001689b:	e8 67 9b ff ff       	call   c0010407 <KePanic(char const*)>
c00168a0:	83 c4 10             	add    esp,0x10
c00168a3:	0f 20 c0             	mov    eax,cr0
c00168a6:	a8 08                	test   al,0x8
c00168a8:	74 59                	je     c0016903 <x87EmulHandler(regs*, void*)+0x7f>
c00168aa:	0f 06                	clts   
c00168ac:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c00168b1:	85 c0                	test   eax,eax
c00168b3:	74 0e                	je     c00168c3 <x87EmulHandler(regs*, void*)+0x3f>
c00168b5:	83 ec 0c             	sub    esp,0xc
c00168b8:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00168bb:	e8 9c ff ff ff       	call   c001685c <i386SaveCoprocessor(void*)>
c00168c0:	83 c4 10             	add    esp,0x10
c00168c3:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00168c9:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00168cd:	75 12                	jne    c00168e1 <x87EmulHandler(regs*, void*)+0x5d>
c00168cf:	83 ec 0c             	sub    esp,0xc
c00168d2:	68 40 02 00 00       	push   0x240
c00168d7:	e8 87 0f ff ff       	call   c0007863 <malloc>
c00168dc:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00168df:	eb 10                	jmp    c00168f1 <x87EmulHandler(regs*, void*)+0x6d>
c00168e1:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c00168e6:	83 ec 0c             	sub    esp,0xc
c00168e9:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00168ec:	e8 7f ff ff ff       	call   c0016870 <i386LoadCoprocessor(void*)>
c00168f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168f6:	83 c4 10             	add    esp,0x10
c00168f9:	a3 04 72 02 c0       	mov    ds:0xc0027204,eax
c00168fe:	83 c4 08             	add    esp,0x8
c0016901:	5b                   	pop    ebx
c0016902:	c3                   	ret    
c0016903:	83 ec 0c             	sub    esp,0xc
c0016906:	68 72 0d 02 c0       	push   0xc0020d72
c001690b:	e8 43 3d ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0016910:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016918:	83 c4 18             	add    esp,0x18
c001691b:	5b                   	pop    ebx
c001691c:	e9 63 ec ff ff       	jmp    c0015584 <Thr::terminateFromIRQ(int)>

c0016921 <HalInitialiseCoprocessor()>:
c0016921:	83 ec 10             	sub    esp,0x10
c0016924:	c7 05 04 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027204,0x0
c001692e:	6a 00                	push   0x0
c0016930:	68 84 68 01 c0       	push   0xc0016884
c0016935:	6a 07                	push   0x7
c0016937:	e8 82 56 ff ff       	call   c000bfbe <installISRHandler(int, void (*)(regs*, void*), void*)>
c001693c:	e8 7f 6e 00 00       	call   c001d7c0 <avxDetect>
c0016941:	83 c4 10             	add    esp,0x10
c0016944:	85 c0                	test   eax,eax
c0016946:	74 1c                	je     c0016964 <HalInitialiseCoprocessor()+0x43>
c0016948:	c7 05 0c 72 02 c0 ea d7 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d7ea
c0016952:	c7 05 08 72 02 c0 fb d7 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d7fb
c001695c:	83 c4 0c             	add    esp,0xc
c001695f:	e9 a8 6e 00 00       	jmp    c001d80c <avxInit>
c0016964:	e8 e7 71 00 00       	call   c001db50 <absolutelyNoChanceInHell>
c0016969:	85 c0                	test   eax,eax
c001696b:	74 1c                	je     c0016989 <HalInitialiseCoprocessor()+0x68>
c001696d:	c7 05 0c 72 02 c0 68 db 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001db68
c0016977:	c7 05 08 72 02 c0 70 db 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001db70
c0016981:	83 c4 0c             	add    esp,0xc
c0016984:	e9 ef 71 00 00       	jmp    c001db78 <sseInit>
c0016989:	e8 08 72 00 00       	call   c001db96 <x87Detect>
c001698e:	85 c0                	test   eax,eax
c0016990:	74 1c                	je     c00169ae <HalInitialiseCoprocessor()+0x8d>
c0016992:	c7 05 0c 72 02 c0 b1 db 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001dbb1
c001699c:	c7 05 08 72 02 c0 b8 db 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001dbb8
c00169a6:	83 c4 0c             	add    esp,0xc
c00169a9:	e9 11 72 00 00       	jmp    c001dbbf <x87Init>
c00169ae:	c7 05 0c 72 02 c0 6c 62 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001626c
c00169b8:	c7 05 08 72 02 c0 6c 62 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001626c
c00169c2:	0f 20 c0             	mov    eax,cr0
c00169c5:	83 c8 04             	or     eax,0x4
c00169c8:	0f 22 c0             	mov    cr0,eax
c00169cb:	83 c4 0c             	add    esp,0xc
c00169ce:	c3                   	ret    

c00169cf <HalPanic(char const*)>:
c00169cf:	53                   	push   ebx
c00169d0:	83 ec 10             	sub    esp,0x10
c00169d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00169d7:	fa                   	cli    
c00169d8:	53                   	push   ebx
c00169d9:	68 88 0d 02 c0       	push   0xc0020d88
c00169de:	e8 70 3c ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c00169e3:	83 c4 0c             	add    esp,0xc
c00169e6:	6a 01                	push   0x1
c00169e8:	6a 0f                	push   0xf
c00169ea:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00169f0:	e8 2b 19 ff ff       	call   c0008320 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00169f5:	58                   	pop    eax
c00169f6:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00169fc:	e8 11 1b ff ff       	call   c0008512 <VgaText::clearScreen()>
c0016a01:	5a                   	pop    edx
c0016a02:	59                   	pop    ecx
c0016a03:	68 e0 f5 01 c0       	push   0xc001f5e0
c0016a08:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a0e:	e8 45 19 ff ff       	call   c0008358 <VgaText::setTitle(char*)>
c0016a13:	83 c4 0c             	add    esp,0xc
c0016a16:	6a 01                	push   0x1
c0016a18:	6a 0f                	push   0xf
c0016a1a:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a20:	e8 fb 18 ff ff       	call   c0008320 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016a25:	58                   	pop    eax
c0016a26:	5a                   	pop    edx
c0016a27:	68 a1 0d 02 c0       	push   0xc0020da1
c0016a2c:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a32:	e8 cf 1d ff ff       	call   c0008806 <VgaText::puts(char const*)>
c0016a37:	83 c4 0c             	add    esp,0xc
c0016a3a:	6a 0f                	push   0xf
c0016a3c:	6a 01                	push   0x1
c0016a3e:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a44:	e8 d7 18 ff ff       	call   c0008320 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016a49:	59                   	pop    ecx
c0016a4a:	58                   	pop    eax
c0016a4b:	68 aa 0d 02 c0       	push   0xc0020daa
c0016a50:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a56:	e8 ab 1d ff ff       	call   c0008806 <VgaText::puts(char const*)>
c0016a5b:	83 c4 0c             	add    esp,0xc
c0016a5e:	6a 01                	push   0x1
c0016a60:	6a 0f                	push   0xf
c0016a62:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a68:	e8 b3 18 ff ff       	call   c0008320 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016a6d:	58                   	pop    eax
c0016a6e:	5a                   	pop    edx
c0016a6f:	68 ee 0d 02 c0       	push   0xc0020dee
c0016a74:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a7a:	e8 87 1d ff ff       	call   c0008806 <VgaText::puts(char const*)>
c0016a7f:	59                   	pop    ecx
c0016a80:	58                   	pop    eax
c0016a81:	68 b7 0d 02 c0       	push   0xc0020db7
c0016a86:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a8c:	e8 75 1d ff ff       	call   c0008806 <VgaText::puts(char const*)>
c0016a91:	58                   	pop    eax
c0016a92:	5a                   	pop    edx
c0016a93:	68 f1 0d 02 c0       	push   0xc0020df1
c0016a98:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016a9e:	e8 63 1d ff ff       	call   c0008806 <VgaText::puts(char const*)>
c0016aa3:	59                   	pop    ecx
c0016aa4:	58                   	pop    eax
c0016aa5:	53                   	push   ebx
c0016aa6:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016aac:	e8 55 1d ff ff       	call   c0008806 <VgaText::puts(char const*)>
c0016ab1:	58                   	pop    eax
c0016ab2:	5a                   	pop    edx
c0016ab3:	68 ee 0d 02 c0       	push   0xc0020dee
c0016ab8:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016abe:	e8 43 1d ff ff       	call   c0008806 <VgaText::puts(char const*)>
c0016ac3:	83 c4 10             	add    esp,0x10
c0016ac6:	eb fe                	jmp    c0016ac6 <HalPanic(char const*)+0xf7>

c0016ac8 <HalQueryPerformanceCounter()>:
c0016ac8:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016acd:	31 d2                	xor    edx,edx
c0016acf:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016ad5:	31 c0                	xor    eax,eax
c0016ad7:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0016ade:	74 02                	je     c0016ae2 <HalQueryPerformanceCounter()+0x1a>
c0016ae0:	0f 31                	rdtsc  
c0016ae2:	c3                   	ret    

c0016ae3 <HalInitialise()>:
c0016ae3:	53                   	push   ebx
c0016ae4:	83 ec 08             	sub    esp,0x8
c0016ae7:	e8 02 57 ff ff       	call   c000c1ee <setupINTS()>
c0016aec:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016af1:	80 3d 80 67 02 c0 00 	cmp    BYTE PTR ds:0xc0026780,0x0
c0016af8:	75 07                	jne    c0016b01 <HalInitialise()+0x1e>
c0016afa:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016b01:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016b08:	c6 05 00 72 02 c0 00 	mov    BYTE PTR ds:0xc0027200,0x0
c0016b0f:	e8 a8 02 00 00       	call   c0016dbc <picOpen()>
c0016b14:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c0016b1b:	74 0a                	je     c0016b27 <HalInitialise()+0x44>
c0016b1d:	e8 e2 01 00 00       	call   c0016d04 <picDisable()>
c0016b22:	e8 0f 66 00 00       	call   c001d136 <apicOpen()>
c0016b27:	50                   	push   eax
c0016b28:	bb 0f 00 00 00       	mov    ebx,0xf
c0016b2d:	6a 00                	push   0x0
c0016b2f:	68 a8 67 01 c0       	push   0xc00167a8
c0016b34:	6a 00                	push   0x0
c0016b36:	e8 83 54 ff ff       	call   c000bfbe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b3b:	83 c4 0c             	add    esp,0xc
c0016b3e:	6a 00                	push   0x0
c0016b40:	68 a8 67 01 c0       	push   0xc00167a8
c0016b45:	6a 01                	push   0x1
c0016b47:	e8 72 54 ff ff       	call   c000bfbe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b4c:	83 c4 0c             	add    esp,0xc
c0016b4f:	6a 00                	push   0x0
c0016b51:	68 6d 62 01 c0       	push   0xc001626d
c0016b56:	6a 02                	push   0x2
c0016b58:	e8 61 54 ff ff       	call   c000bfbe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b5d:	83 c4 0c             	add    esp,0xc
c0016b60:	6a 00                	push   0x0
c0016b62:	68 a8 67 01 c0       	push   0xc00167a8
c0016b67:	6a 03                	push   0x3
c0016b69:	e8 50 54 ff ff       	call   c000bfbe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b6e:	83 c4 0c             	add    esp,0xc
c0016b71:	6a 00                	push   0x0
c0016b73:	68 a8 67 01 c0       	push   0xc00167a8
c0016b78:	6a 04                	push   0x4
c0016b7a:	e8 3f 54 ff ff       	call   c000bfbe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b7f:	83 c4 0c             	add    esp,0xc
c0016b82:	6a 00                	push   0x0
c0016b84:	68 a8 67 01 c0       	push   0xc00167a8
c0016b89:	6a 05                	push   0x5
c0016b8b:	e8 2e 54 ff ff       	call   c000bfbe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016b90:	83 c4 0c             	add    esp,0xc
c0016b93:	6a 00                	push   0x0
c0016b95:	68 dc 67 01 c0       	push   0xc00167dc
c0016b9a:	6a 06                	push   0x6
c0016b9c:	e8 1d 54 ff ff       	call   c000bfbe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ba1:	83 c4 0c             	add    esp,0xc
c0016ba4:	6a 00                	push   0x0
c0016ba6:	68 86 62 01 c0       	push   0xc0016286
c0016bab:	6a 08                	push   0x8
c0016bad:	e8 0c 54 ff ff       	call   c000bfbe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016bb2:	83 c4 0c             	add    esp,0xc
c0016bb5:	6a 00                	push   0x0
c0016bb7:	68 a8 67 01 c0       	push   0xc00167a8
c0016bbc:	6a 09                	push   0x9
c0016bbe:	e8 fb 53 ff ff       	call   c000bfbe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016bc3:	83 c4 0c             	add    esp,0xc
c0016bc6:	6a 00                	push   0x0
c0016bc8:	68 a8 67 01 c0       	push   0xc00167a8
c0016bcd:	6a 0a                	push   0xa
c0016bcf:	e8 ea 53 ff ff       	call   c000bfbe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016bd4:	83 c4 0c             	add    esp,0xc
c0016bd7:	6a 00                	push   0x0
c0016bd9:	68 a8 67 01 c0       	push   0xc00167a8
c0016bde:	6a 0b                	push   0xb
c0016be0:	e8 d9 53 ff ff       	call   c000bfbe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016be5:	83 c4 0c             	add    esp,0xc
c0016be8:	6a 00                	push   0x0
c0016bea:	68 bd 66 01 c0       	push   0xc00166bd
c0016bef:	6a 0d                	push   0xd
c0016bf1:	e8 c8 53 ff ff       	call   c000bfbe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016bf6:	83 c4 0c             	add    esp,0xc
c0016bf9:	6a 00                	push   0x0
c0016bfb:	68 22 67 01 c0       	push   0xc0016722
c0016c00:	6a 0e                	push   0xe
c0016c02:	e8 b7 53 ff ff       	call   c000bfbe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016c07:	83 c4 10             	add    esp,0x10
c0016c0a:	50                   	push   eax
c0016c0b:	6a 00                	push   0x0
c0016c0d:	68 a8 67 01 c0       	push   0xc00167a8
c0016c12:	53                   	push   ebx
c0016c13:	43                   	inc    ebx
c0016c14:	e8 a5 53 ff ff       	call   c000bfbe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016c19:	83 c4 10             	add    esp,0x10
c0016c1c:	83 fb 1e             	cmp    ebx,0x1e
c0016c1f:	75 e9                	jne    c0016c0a <HalInitialise()+0x127>
c0016c21:	50                   	push   eax
c0016c22:	6a 00                	push   0x0
c0016c24:	68 82 16 01 c0       	push   0xc0011682
c0016c29:	6a 60                	push   0x60
c0016c2b:	e8 8e 53 ff ff       	call   c000bfbe <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016c30:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016c35:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0016c3f:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0016c46:	e8 18 0c ff ff       	call   c0007863 <malloc>
c0016c4b:	89 c3                	mov    ebx,eax
c0016c4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c50:	e8 2d 09 00 00       	call   c0017582 <RTC::RTC()>
c0016c55:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0016c5f:	5a                   	pop    edx
c0016c60:	59                   	pop    ecx
c0016c61:	53                   	push   ebx
c0016c62:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016c68:	e8 1f 4e ff ff       	call   c000ba8c <Device::addChild(Device*)>
c0016c6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c6f:	6a 00                	push   0x0
c0016c71:	6a 00                	push   0x0
c0016c73:	6a 00                	push   0x0
c0016c75:	53                   	push   ebx
c0016c76:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c79:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016c7e:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0016c84:	83 c4 28             	add    esp,0x28
c0016c87:	5b                   	pop    ebx
c0016c88:	c3                   	ret    

c0016c89 <HalMakeBeep(int)>:
c0016c89:	53                   	push   ebx
c0016c8a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016c8e:	85 db                	test   ebx,ebx
c0016c90:	75 07                	jne    c0016c99 <HalMakeBeep(int)+0x10>
c0016c92:	e4 61                	in     al,0x61
c0016c94:	83 e0 fc             	and    eax,0xfffffffc
c0016c97:	eb 26                	jmp    c0016cbf <HalMakeBeep(int)+0x36>
c0016c99:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0016c9e:	99                   	cdq    
c0016c9f:	f7 fb                	idiv   ebx
c0016ca1:	89 c1                	mov    ecx,eax
c0016ca3:	b0 b6                	mov    al,0xb6
c0016ca5:	e6 43                	out    0x43,al
c0016ca7:	88 c8                	mov    al,cl
c0016ca9:	e6 42                	out    0x42,al
c0016cab:	89 c8                	mov    eax,ecx
c0016cad:	c1 e8 08             	shr    eax,0x8
c0016cb0:	e6 42                	out    0x42,al
c0016cb2:	e4 61                	in     al,0x61
c0016cb4:	88 c2                	mov    dl,al
c0016cb6:	83 ca 03             	or     edx,0x3
c0016cb9:	38 c2                	cmp    dl,al
c0016cbb:	74 04                	je     c0016cc1 <HalMakeBeep(int)+0x38>
c0016cbd:	88 d0                	mov    al,dl
c0016cbf:	e6 61                	out    0x61,al
c0016cc1:	5b                   	pop    ebx
c0016cc2:	c3                   	ret    

c0016cc3 <HalGetRand()>:
c0016cc3:	31 c0                	xor    eax,eax
c0016cc5:	c3                   	ret    

c0016cc6 <HalEndOfInterrupt(int)>:
c0016cc6:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c0016ccd:	74 23                	je     c0016cf2 <HalEndOfInterrupt(int)+0x2c>
c0016ccf:	83 ec 14             	sub    esp,0x14
c0016cd2:	6a 1b                	push   0x1b
c0016cd4:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016cda:	e8 cd 01 ff ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c0016cdf:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016ce4:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0016cee:	83 c4 1c             	add    esp,0x1c
c0016cf1:	c3                   	ret    
c0016cf2:	e9 55 02 00 00       	jmp    c0016f4c <picEOI(int)>

c0016cf7 <HalRestart()>:
c0016cf7:	c3                   	ret    

c0016cf8 <HalShutdown()>:
c0016cf8:	c3                   	ret    

c0016cf9 <HalSleep()>:
c0016cf9:	c3                   	ret    
c0016cfa:	66 90                	xchg   ax,ax

c0016cfc <picIoWait()>:
c0016cfc:	eb 00                	jmp    c0016cfe <picIoWait()+0x2>
c0016cfe:	eb 00                	jmp    c0016d00 <picIoWait()+0x4>
c0016d00:	90                   	nop
c0016d01:	c3                   	ret    
c0016d02:	66 90                	xchg   ax,ax

c0016d04 <picDisable()>:
c0016d04:	83 ec 10             	sub    esp,0x10
c0016d07:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0016d0e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0016d13:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016d17:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016d1c:	ee                   	out    dx,al
c0016d1d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0016d24:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0016d29:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016d2d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016d32:	ee                   	out    dx,al
c0016d33:	90                   	nop
c0016d34:	83 c4 10             	add    esp,0x10
c0016d37:	c3                   	ret    

c0016d38 <picGetIRQReg(int)>:
c0016d38:	83 ec 10             	sub    esp,0x10
c0016d3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d3f:	25 ff 00 00 00       	and    eax,0xff
c0016d44:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0016d4b:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0016d4f:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0016d53:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016d58:	ee                   	out    dx,al
c0016d59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d5d:	25 ff 00 00 00       	and    eax,0xff
c0016d62:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016d69:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0016d6d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0016d71:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016d76:	ee                   	out    dx,al
c0016d77:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0016d7e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0016d83:	89 c2                	mov    edx,eax
c0016d85:	ec                   	in     al,dx
c0016d86:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016d8a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016d8e:	25 ff 00 00 00       	and    eax,0xff
c0016d93:	c1 e0 08             	shl    eax,0x8
c0016d96:	89 c1                	mov    ecx,eax
c0016d98:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0016d9f:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0016da4:	89 c2                	mov    edx,eax
c0016da6:	ec                   	in     al,dx
c0016da7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016dab:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016daf:	25 ff 00 00 00       	and    eax,0xff
c0016db4:	09 c8                	or     eax,ecx
c0016db6:	83 c4 10             	add    esp,0x10
c0016db9:	c3                   	ret    
c0016dba:	66 90                	xchg   ax,ax

c0016dbc <picOpen()>:
c0016dbc:	83 ec 50             	sub    esp,0x50
c0016dbf:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0016dc6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016dcb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016dcf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016dd3:	ee                   	out    dx,al
c0016dd4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0016ddb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016de0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016de4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016de8:	ee                   	out    dx,al
c0016de9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0016df1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0016df9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0016e00:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e04:	89 c2                	mov    edx,eax
c0016e06:	ec                   	in     al,dx
c0016e07:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0016e0b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016e0f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0016e13:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0016e1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016e1e:	89 c2                	mov    edx,eax
c0016e20:	ec                   	in     al,dx
c0016e21:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016e25:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016e29:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0016e2d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0016e34:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0016e39:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0016e3d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016e41:	ee                   	out    dx,al
c0016e42:	e8 b5 fe ff ff       	call   c0016cfc <picIoWait()>
c0016e47:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0016e4e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0016e53:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016e57:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016e5b:	ee                   	out    dx,al
c0016e5c:	e8 9b fe ff ff       	call   c0016cfc <picIoWait()>
c0016e61:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016e65:	25 ff 00 00 00       	and    eax,0xff
c0016e6a:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0016e71:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0016e75:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0016e79:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016e7d:	ee                   	out    dx,al
c0016e7e:	e8 79 fe ff ff       	call   c0016cfc <picIoWait()>
c0016e83:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016e87:	25 ff 00 00 00       	and    eax,0xff
c0016e8c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0016e93:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016e97:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0016e9b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016e9f:	ee                   	out    dx,al
c0016ea0:	e8 57 fe ff ff       	call   c0016cfc <picIoWait()>
c0016ea5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0016eac:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0016eb1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0016eb5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016eb9:	ee                   	out    dx,al
c0016eba:	e8 3d fe ff ff       	call   c0016cfc <picIoWait()>
c0016ebf:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0016ec6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0016ecb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0016ecf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016ed3:	ee                   	out    dx,al
c0016ed4:	e8 23 fe ff ff       	call   c0016cfc <picIoWait()>
c0016ed9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0016ee0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0016ee5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0016ee9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016eed:	ee                   	out    dx,al
c0016eee:	e8 09 fe ff ff       	call   c0016cfc <picIoWait()>
c0016ef3:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0016efa:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0016eff:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0016f03:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016f07:	ee                   	out    dx,al
c0016f08:	e8 ef fd ff ff       	call   c0016cfc <picIoWait()>
c0016f0d:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0016f11:	25 ff 00 00 00       	and    eax,0xff
c0016f16:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0016f1d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0016f21:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0016f25:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016f29:	ee                   	out    dx,al
c0016f2a:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0016f2e:	25 ff 00 00 00       	and    eax,0xff
c0016f33:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0016f3a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0016f3e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0016f42:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016f46:	ee                   	out    dx,al
c0016f47:	90                   	nop
c0016f48:	83 c4 50             	add    esp,0x50
c0016f4b:	c3                   	ret    

c0016f4c <picEOI(int)>:
c0016f4c:	83 ec 10             	sub    esp,0x10
c0016f4f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0016f54:	75 22                	jne    c0016f78 <picEOI(int)+0x2c>
c0016f56:	6a 0b                	push   0xb
c0016f58:	e8 db fd ff ff       	call   c0016d38 <picGetIRQReg(int)>
c0016f5d:	83 c4 04             	add    esp,0x4
c0016f60:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0016f65:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0016f6a:	25 ff ff 00 00       	and    eax,0xffff
c0016f6f:	25 80 00 00 00       	and    eax,0x80
c0016f74:	74 72                	je     c0016fe8 <picEOI(int)+0x9c>
c0016f76:	66 90                	xchg   ax,ax
c0016f78:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0016f7d:	75 31                	jne    c0016fb0 <picEOI(int)+0x64>
c0016f7f:	6a 0b                	push   0xb
c0016f81:	e8 b2 fd ff ff       	call   c0016d38 <picGetIRQReg(int)>
c0016f86:	83 c4 04             	add    esp,0x4
c0016f89:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016f8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f92:	66 85 c0             	test   ax,ax
c0016f95:	78 19                	js     c0016fb0 <picEOI(int)+0x64>
c0016f97:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0016f9e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0016fa3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016fa7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016fac:	ee                   	out    dx,al
c0016fad:	eb 3d                	jmp    c0016fec <picEOI(int)+0xa0>
c0016faf:	90                   	nop
c0016fb0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0016fb5:	7e 19                	jle    c0016fd0 <picEOI(int)+0x84>
c0016fb7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016fbe:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0016fc3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0016fc7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016fcc:	ee                   	out    dx,al
c0016fcd:	8d 76 00             	lea    esi,[esi+0x0]
c0016fd0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0016fd7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0016fdc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0016fe0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016fe5:	ee                   	out    dx,al
c0016fe6:	eb 04                	jmp    c0016fec <picEOI(int)+0xa0>
c0016fe8:	90                   	nop
c0016fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fec:	83 c4 10             	add    esp,0x10
c0016fef:	c3                   	ret    

c0016ff0 <RTC::open(int, int, void*)>:
c0016ff0:	31 c0                	xor    eax,eax
c0016ff2:	c3                   	ret    
c0016ff3:	90                   	nop

c0016ff4 <RTC::close(int, int, void*)>:
c0016ff4:	31 c0                	xor    eax,eax
c0016ff6:	c3                   	ret    
c0016ff7:	90                   	nop

c0016ff8 <RTC::timeInSecondsUTC()>:
c0016ff8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ffc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017002:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017008:	c3                   	ret    
c0017009:	90                   	nop

c001700a <RTC::timeInDatetimeUTC()>:
c001700a:	53                   	push   ebx
c001700b:	83 ec 14             	sub    esp,0x14
c001700e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017012:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017016:	8b 10                	mov    edx,DWORD PTR [eax]
c0017018:	50                   	push   eax
c0017019:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001701c:	83 c4 0c             	add    esp,0xc
c001701f:	52                   	push   edx
c0017020:	50                   	push   eax
c0017021:	53                   	push   ebx
c0017022:	e8 dd 47 ff ff       	call   c000b804 <secondsToDatetime(unsigned long long)>
c0017027:	83 c4 14             	add    esp,0x14
c001702a:	89 d8                	mov    eax,ebx
c001702c:	5b                   	pop    ebx
c001702d:	c2 04 00             	ret    0x4

c0017030 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0017030:	56                   	push   esi
c0017031:	53                   	push   ebx
c0017032:	83 ec 14             	sub    esp,0x14
c0017035:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017039:	8b 03                	mov    eax,DWORD PTR [ebx]
c001703b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001703e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017042:	52                   	push   edx
c0017043:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017047:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001704b:	50                   	push   eax
c001704c:	e8 b3 47 ff ff       	call   c000b804 <secondsToDatetime(unsigned long long)>
c0017051:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017055:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017059:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001705d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017061:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017065:	83 c4 20             	add    esp,0x20
c0017068:	89 f0                	mov    eax,esi
c001706a:	5b                   	pop    ebx
c001706b:	5e                   	pop    esi
c001706c:	ff e0                	jmp    eax

c001706e <RTC::~RTC()>:
c001706e:	83 ec 0c             	sub    esp,0xc
c0017071:	ba 8c 0e 02 c0       	mov    edx,0xc0020e8c
c0017076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001707a:	89 10                	mov    DWORD PTR [eax],edx
c001707c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017080:	83 ec 0c             	sub    esp,0xc
c0017083:	50                   	push   eax
c0017084:	e8 ff 44 ff ff       	call   c000b588 <Clock::~Clock()>
c0017089:	83 c4 10             	add    esp,0x10
c001708c:	90                   	nop
c001708d:	83 c4 0c             	add    esp,0xc
c0017090:	c3                   	ret    
c0017091:	90                   	nop

c0017092 <RTC::~RTC()>:
c0017092:	83 ec 0c             	sub    esp,0xc
c0017095:	83 ec 0c             	sub    esp,0xc
c0017098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001709c:	e8 cd ff ff ff       	call   c001706e <RTC::~RTC()>
c00170a1:	83 c4 10             	add    esp,0x10
c00170a4:	83 ec 08             	sub    esp,0x8
c00170a7:	68 60 01 00 00       	push   0x160
c00170ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170b0:	e8 a8 34 ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c00170b5:	83 c4 10             	add    esp,0x10
c00170b8:	83 c4 0c             	add    esp,0xc
c00170bb:	c3                   	ret    

c00170bc <RTC::get_update_in_progress_flag()>:
c00170bc:	83 ec 14             	sub    esp,0x14
c00170bf:	6a 0a                	push   0xa
c00170c1:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00170c7:	e8 94 fe fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c00170cc:	83 c4 1c             	add    esp,0x1c
c00170cf:	c0 e8 07             	shr    al,0x7
c00170d2:	c3                   	ret    
c00170d3:	90                   	nop

c00170d4 <RTC::completeRTCRefresh()>:
c00170d4:	55                   	push   ebp
c00170d5:	57                   	push   edi
c00170d6:	56                   	push   esi
c00170d7:	53                   	push   ebx
c00170d8:	83 ec 2c             	sub    esp,0x2c
c00170db:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c00170e1:	83 ec 0c             	sub    esp,0xc
c00170e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00170e8:	e8 cf ff ff ff       	call   c00170bc <RTC::get_update_in_progress_flag()>
c00170ed:	83 c4 10             	add    esp,0x10
c00170f0:	84 c0                	test   al,al
c00170f2:	74 0e                	je     c0017102 <RTC::completeRTCRefresh()+0x2e>
c00170f4:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00170fa:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c0017100:	73 df                	jae    c00170e1 <RTC::completeRTCRefresh()+0xd>
c0017102:	55                   	push   ebp
c0017103:	55                   	push   ebp
c0017104:	6a 00                	push   0x0
c0017106:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001710c:	e8 4f fe fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017111:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017115:	58                   	pop    eax
c0017116:	5a                   	pop    edx
c0017117:	6a 02                	push   0x2
c0017119:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001711f:	e8 3c fe fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017124:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0017128:	59                   	pop    ecx
c0017129:	5b                   	pop    ebx
c001712a:	6a 04                	push   0x4
c001712c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017132:	e8 29 fe fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017137:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001713b:	5e                   	pop    esi
c001713c:	5f                   	pop    edi
c001713d:	6a 07                	push   0x7
c001713f:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017145:	e8 16 fe fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c001714a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001714e:	5d                   	pop    ebp
c001714f:	58                   	pop    eax
c0017150:	6a 08                	push   0x8
c0017152:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017158:	e8 03 fe fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c001715d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0017161:	58                   	pop    eax
c0017162:	5a                   	pop    edx
c0017163:	6a 09                	push   0x9
c0017165:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001716b:	e8 f0 fd fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017170:	83 c4 10             	add    esp,0x10
c0017173:	0f b6 e8             	movzx  ebp,al
c0017176:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c001717c:	83 ec 0c             	sub    esp,0xc
c001717f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017183:	e8 34 ff ff ff       	call   c00170bc <RTC::get_update_in_progress_flag()>
c0017188:	83 c4 10             	add    esp,0x10
c001718b:	84 c0                	test   al,al
c001718d:	74 0e                	je     c001719d <RTC::completeRTCRefresh()+0xc9>
c001718f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017195:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c001719b:	73 df                	jae    c001717c <RTC::completeRTCRefresh()+0xa8>
c001719d:	50                   	push   eax
c001719e:	50                   	push   eax
c001719f:	6a 00                	push   0x0
c00171a1:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00171a7:	e8 b4 fd fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c00171ac:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c00171b0:	58                   	pop    eax
c00171b1:	5a                   	pop    edx
c00171b2:	6a 02                	push   0x2
c00171b4:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00171ba:	e8 a1 fd fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c00171bf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00171c3:	59                   	pop    ecx
c00171c4:	5b                   	pop    ebx
c00171c5:	6a 04                	push   0x4
c00171c7:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00171cd:	e8 8e fd fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c00171d2:	5e                   	pop    esi
c00171d3:	88 c3                	mov    bl,al
c00171d5:	5f                   	pop    edi
c00171d6:	6a 07                	push   0x7
c00171d8:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00171de:	e8 7d fd fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c00171e3:	89 c6                	mov    esi,eax
c00171e5:	58                   	pop    eax
c00171e6:	5a                   	pop    edx
c00171e7:	6a 08                	push   0x8
c00171e9:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00171ef:	e8 6c fd fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c00171f4:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00171f8:	59                   	pop    ecx
c00171f9:	5f                   	pop    edi
c00171fa:	6a 09                	push   0x9
c00171fc:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017202:	e8 59 fd fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017207:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001720b:	83 c4 10             	add    esp,0x10
c001720e:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0017212:	0f b6 f8             	movzx  edi,al
c0017215:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0017219:	74 29                	je     c0017244 <RTC::completeRTCRefresh()+0x170>
c001721b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001721f:	89 fd                	mov    ebp,edi
c0017221:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017225:	89 f0                	mov    eax,esi
c0017227:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001722b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001722f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017233:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0017237:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c001723b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001723f:	e9 32 ff ff ff       	jmp    c0017176 <RTC::completeRTCRefresh()+0xa2>
c0017244:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017248:	38 4c 24 1c          	cmp    BYTE PTR [esp+0x1c],cl
c001724c:	75 cd                	jne    c001721b <RTC::completeRTCRefresh()+0x147>
c001724e:	89 f2                	mov    edx,esi
c0017250:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0017254:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0017258:	0f 94 c0             	sete   al
c001725b:	38 54 24 1e          	cmp    BYTE PTR [esp+0x1e],dl
c001725f:	0f 94 c2             	sete   dl
c0017262:	21 c2                	and    edx,eax
c0017264:	38 4c 24 1f          	cmp    BYTE PTR [esp+0x1f],cl
c0017268:	0f 94 c0             	sete   al
c001726b:	84 c2                	test   dl,al
c001726d:	74 ac                	je     c001721b <RTC::completeRTCRefresh()+0x147>
c001726f:	39 fd                	cmp    ebp,edi
c0017271:	75 a8                	jne    c001721b <RTC::completeRTCRefresh()+0x147>
c0017273:	55                   	push   ebp
c0017274:	55                   	push   ebp
c0017275:	6a 0b                	push   0xb
c0017277:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001727d:	e8 de fc fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017282:	83 c4 10             	add    esp,0x10
c0017285:	89 c5                	mov    ebp,eax
c0017287:	a8 04                	test   al,0x4
c0017289:	75 7d                	jne    c0017308 <RTC::completeRTCRefresh()+0x234>
c001728b:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c001728f:	b1 0a                	mov    cl,0xa
c0017291:	c0 e8 04             	shr    al,0x4
c0017294:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0017298:	0f af c1             	imul   eax,ecx
c001729b:	c1 ef 04             	shr    edi,0x4
c001729e:	83 e2 0f             	and    edx,0xf
c00172a1:	01 d0                	add    eax,edx
c00172a3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00172a7:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00172ab:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00172af:	c0 e8 04             	shr    al,0x4
c00172b2:	83 e2 0f             	and    edx,0xf
c00172b5:	0f af c1             	imul   eax,ecx
c00172b8:	01 d0                	add    eax,edx
c00172ba:	88 da                	mov    dl,bl
c00172bc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00172c0:	88 d8                	mov    al,bl
c00172c2:	c0 e8 04             	shr    al,0x4
c00172c5:	83 e2 0f             	and    edx,0xf
c00172c8:	83 e0 07             	and    eax,0x7
c00172cb:	83 e3 80             	and    ebx,0xffffff80
c00172ce:	0f af c1             	imul   eax,ecx
c00172d1:	01 d0                	add    eax,edx
c00172d3:	89 f2                	mov    edx,esi
c00172d5:	09 c3                	or     ebx,eax
c00172d7:	89 f0                	mov    eax,esi
c00172d9:	c0 e8 04             	shr    al,0x4
c00172dc:	83 e2 0f             	and    edx,0xf
c00172df:	0f af c1             	imul   eax,ecx
c00172e2:	6b ff 0a             	imul   edi,edi,0xa
c00172e5:	8d 34 02             	lea    esi,[edx+eax*1]
c00172e8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00172ec:	c0 e8 04             	shr    al,0x4
c00172ef:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00172f3:	0f af c1             	imul   eax,ecx
c00172f6:	83 e2 0f             	and    edx,0xf
c00172f9:	01 d0                	add    eax,edx
c00172fb:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00172ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017303:	83 e0 0f             	and    eax,0xf
c0017306:	01 c7                	add    edi,eax
c0017308:	83 e5 02             	and    ebp,0x2
c001730b:	75 14                	jne    c0017321 <RTC::completeRTCRefresh()+0x24d>
c001730d:	84 db                	test   bl,bl
c001730f:	79 10                	jns    c0017321 <RTC::completeRTCRefresh()+0x24d>
c0017311:	83 e3 7f             	and    ebx,0x7f
c0017314:	b9 18 00 00 00       	mov    ecx,0x18
c0017319:	8d 43 0c             	lea    eax,[ebx+0xc]
c001731c:	99                   	cdq    
c001731d:	f7 f9                	idiv   ecx
c001731f:	88 d3                	mov    bl,dl
c0017321:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0017327:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001732d:	77 06                	ja     c0017335 <RTC::completeRTCRefresh()+0x261>
c001732f:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0017335:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c001733a:	31 d2                	xor    edx,edx
c001733c:	31 c0                	xor    eax,eax
c001733e:	c1 e1 10             	shl    ecx,0x10
c0017341:	89 d7                	mov    edi,edx
c0017343:	c1 e5 10             	shl    ebp,0x10
c0017346:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001734c:	09 cf                	or     edi,ecx
c001734e:	89 fa                	mov    edx,edi
c0017350:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0017354:	88 da                	mov    dl,bl
c0017356:	89 f3                	mov    ebx,esi
c0017358:	88 d8                	mov    al,bl
c001735a:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c001735e:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0017362:	0f b7 c8             	movzx  ecx,ax
c0017365:	09 e9                	or     ecx,ebp
c0017367:	89 c8                	mov    eax,ecx
c0017369:	51                   	push   ecx
c001736a:	51                   	push   ecx
c001736b:	52                   	push   edx
c001736c:	50                   	push   eax
c001736d:	e8 05 43 ff ff       	call   c000b677 <datetimeToSeconds(datetime_t)>
c0017372:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0017376:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001737c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0017382:	83 c4 3c             	add    esp,0x3c
c0017385:	5b                   	pop    ebx
c0017386:	5e                   	pop    esi
c0017387:	5f                   	pop    edi
c0017388:	5d                   	pop    ebp
c0017389:	c3                   	ret    

c001738a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001738a:	55                   	push   ebp
c001738b:	57                   	push   edi
c001738c:	56                   	push   esi
c001738d:	53                   	push   ebx
c001738e:	83 ec 30             	sub    esp,0x30
c0017391:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017395:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0017399:	6a 00                	push   0x0
c001739b:	6a 00                	push   0x0
c001739d:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00173a3:	e8 bc fc fe ff       	call   c0007064 <Computer::writeCMOS(unsigned char, unsigned char)>
c00173a8:	83 c4 0c             	add    esp,0xc
c00173ab:	6a 00                	push   0x0
c00173ad:	6a 02                	push   0x2
c00173af:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00173b5:	e8 aa fc fe ff       	call   c0007064 <Computer::writeCMOS(unsigned char, unsigned char)>
c00173ba:	89 f8                	mov    eax,edi
c00173bc:	0f b6 c4             	movzx  eax,ah
c00173bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00173c3:	89 f0                	mov    eax,esi
c00173c5:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00173c9:	89 f0                	mov    eax,esi
c00173cb:	0f b6 c4             	movzx  eax,ah
c00173ce:	89 f9                	mov    ecx,edi
c00173d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00173d4:	c1 e9 10             	shr    ecx,0x10
c00173d7:	89 f0                	mov    eax,esi
c00173d9:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c00173dd:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00173e1:	c1 e8 10             	shr    eax,0x10
c00173e4:	b9 64 00 00 00       	mov    ecx,0x64
c00173e9:	31 d2                	xor    edx,edx
c00173eb:	66 f7 f1             	div    cx
c00173ee:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c00173f3:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c00173f8:	59                   	pop    ecx
c00173f9:	5b                   	pop    ebx
c00173fa:	89 fb                	mov    ebx,edi
c00173fc:	6a 0b                	push   0xb
c00173fe:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017404:	e8 57 fb fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017409:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001740d:	83 c4 10             	add    esp,0x10
c0017410:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0017415:	75 74                	jne    c001748b <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0017417:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001741b:	b2 0a                	mov    dl,0xa
c001741d:	0f b6 c1             	movzx  eax,cl
c0017420:	f6 f2                	div    dl
c0017422:	88 c3                	mov    bl,al
c0017424:	88 e0                	mov    al,ah
c0017426:	c1 e3 04             	shl    ebx,0x4
c0017429:	09 c3                	or     ebx,eax
c001742b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017430:	f6 f2                	div    dl
c0017432:	88 c1                	mov    cl,al
c0017434:	88 e0                	mov    al,ah
c0017436:	c1 e1 04             	shl    ecx,0x4
c0017439:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001743d:	09 c1                	or     ecx,eax
c001743f:	89 f8                	mov    eax,edi
c0017441:	0f b6 c0             	movzx  eax,al
c0017444:	f6 f2                	div    dl
c0017446:	88 c3                	mov    bl,al
c0017448:	88 e0                	mov    al,ah
c001744a:	c1 e3 04             	shl    ebx,0x4
c001744d:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017451:	09 c3                	or     ebx,eax
c0017453:	89 f0                	mov    eax,esi
c0017455:	0f b6 c0             	movzx  eax,al
c0017458:	f6 f2                	div    dl
c001745a:	88 c1                	mov    cl,al
c001745c:	88 e0                	mov    al,ah
c001745e:	c1 e1 04             	shl    ecx,0x4
c0017461:	09 c1                	or     ecx,eax
c0017463:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0017468:	f6 f2                	div    dl
c001746a:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001746e:	88 c1                	mov    cl,al
c0017470:	c1 e1 04             	shl    ecx,0x4
c0017473:	88 e0                	mov    al,ah
c0017475:	09 c1                	or     ecx,eax
c0017477:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001747c:	f6 f2                	div    dl
c001747e:	89 c5                	mov    ebp,eax
c0017480:	88 e0                	mov    al,ah
c0017482:	c1 e5 04             	shl    ebp,0x4
c0017485:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017489:	09 c5                	or     ebp,eax
c001748b:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0017490:	75 17                	jne    c00174a9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0017492:	80 fb 0b             	cmp    bl,0xb
c0017495:	76 0c                	jbe    c00174a3 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0017497:	80 eb 0c             	sub    bl,0xc
c001749a:	75 02                	jne    c001749e <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c001749c:	b3 0c                	mov    bl,0xc
c001749e:	83 cb 80             	or     ebx,0xffffff80
c00174a1:	eb 06                	jmp    c00174a9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00174a3:	84 db                	test   bl,bl
c00174a5:	75 02                	jne    c00174a9 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00174a7:	b3 0c                	mov    bl,0xc
c00174a9:	50                   	push   eax
c00174aa:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00174af:	50                   	push   eax
c00174b0:	6a 00                	push   0x0
c00174b2:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00174b8:	e8 a7 fb fe ff       	call   c0007064 <Computer::writeCMOS(unsigned char, unsigned char)>
c00174bd:	83 c4 0c             	add    esp,0xc
c00174c0:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00174c5:	50                   	push   eax
c00174c6:	6a 02                	push   0x2
c00174c8:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00174ce:	e8 91 fb fe ff       	call   c0007064 <Computer::writeCMOS(unsigned char, unsigned char)>
c00174d3:	83 c4 0c             	add    esp,0xc
c00174d6:	0f b6 db             	movzx  ebx,bl
c00174d9:	53                   	push   ebx
c00174da:	6a 04                	push   0x4
c00174dc:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00174e2:	e8 7d fb fe ff       	call   c0007064 <Computer::writeCMOS(unsigned char, unsigned char)>
c00174e7:	83 c4 0c             	add    esp,0xc
c00174ea:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00174ef:	50                   	push   eax
c00174f0:	6a 07                	push   0x7
c00174f2:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00174f8:	e8 67 fb fe ff       	call   c0007064 <Computer::writeCMOS(unsigned char, unsigned char)>
c00174fd:	83 c4 0c             	add    esp,0xc
c0017500:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0017505:	50                   	push   eax
c0017506:	6a 08                	push   0x8
c0017508:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001750e:	e8 51 fb fe ff       	call   c0007064 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017513:	83 c4 0c             	add    esp,0xc
c0017516:	89 e8                	mov    eax,ebp
c0017518:	0f b6 e8             	movzx  ebp,al
c001751b:	55                   	push   ebp
c001751c:	6a 09                	push   0x9
c001751e:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017524:	e8 3b fb fe ff       	call   c0007064 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017529:	5a                   	pop    edx
c001752a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001752e:	e8 a1 fb ff ff       	call   c00170d4 <RTC::completeRTCRefresh()>
c0017533:	83 c4 3c             	add    esp,0x3c
c0017536:	5b                   	pop    ebx
c0017537:	b0 01                	mov    al,0x1
c0017539:	5e                   	pop    esi
c001753a:	5f                   	pop    edi
c001753b:	5d                   	pop    ebp
c001753c:	c3                   	ret    

c001753d <rtcIRQHandler(regs*, void*)>:
c001753d:	53                   	push   ebx
c001753e:	83 ec 10             	sub    esp,0x10
c0017541:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017545:	6a 0c                	push   0xc
c0017547:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001754d:	e8 0e fa fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c0017552:	83 c4 10             	add    esp,0x10
c0017555:	84 c0                	test   al,al
c0017557:	79 24                	jns    c001757d <rtcIRQHandler(regs*, void*)+0x40>
c0017559:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017560:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017567:	66 ff 05 14 72 02 c0 	inc    WORD PTR ds:0xc0027214
c001756e:	75 0d                	jne    c001757d <rtcIRQHandler(regs*, void*)+0x40>
c0017570:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017574:	83 c4 08             	add    esp,0x8
c0017577:	5b                   	pop    ebx
c0017578:	e9 57 fb ff ff       	jmp    c00170d4 <RTC::completeRTCRefresh()>
c001757d:	83 c4 08             	add    esp,0x8
c0017580:	5b                   	pop    ebx
c0017581:	c3                   	ret    

c0017582 <RTC::RTC()>:
c0017582:	83 ec 1c             	sub    esp,0x1c
c0017585:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017589:	83 ec 08             	sub    esp,0x8
c001758c:	68 6f 0e 02 c0       	push   0xc0020e6f
c0017591:	50                   	push   eax
c0017592:	e8 bb 3f ff ff       	call   c000b552 <Clock::Clock(char const*)>
c0017597:	83 c4 10             	add    esp,0x10
c001759a:	ba 8c 0e 02 c0       	mov    edx,0xc0020e8c
c001759f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175a3:	89 10                	mov    DWORD PTR [eax],edx
c00175a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175a9:	83 ec 0c             	sub    esp,0xc
c00175ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175b0:	6a 01                	push   0x1
c00175b2:	68 3d 75 01 c0       	push   0xc001753d
c00175b7:	6a 08                	push   0x8
c00175b9:	50                   	push   eax
c00175ba:	e8 79 44 ff ff       	call   c000ba38 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00175bf:	83 c4 20             	add    esp,0x20
c00175c2:	89 c2                	mov    edx,eax
c00175c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175c8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00175ce:	fa                   	cli    
c00175cf:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00175d4:	40                   	inc    eax
c00175d5:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00175da:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00175df:	83 ec 08             	sub    esp,0x8
c00175e2:	6a 0b                	push   0xb
c00175e4:	50                   	push   eax
c00175e5:	e8 76 f9 fe ff       	call   c0006f60 <Computer::readCMOS(unsigned char)>
c00175ea:	83 c4 10             	add    esp,0x10
c00175ed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00175f1:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00175f6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00175fa:	83 ca 10             	or     edx,0x10
c00175fd:	81 e2 ff 00 00 00    	and    edx,0xff
c0017603:	83 ec 04             	sub    esp,0x4
c0017606:	52                   	push   edx
c0017607:	6a 0b                	push   0xb
c0017609:	50                   	push   eax
c001760a:	e8 55 fa fe ff       	call   c0007064 <Computer::writeCMOS(unsigned char, unsigned char)>
c001760f:	83 c4 10             	add    esp,0x10
c0017612:	83 ec 0c             	sub    esp,0xc
c0017615:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017619:	e8 b6 fa ff ff       	call   c00170d4 <RTC::completeRTCRefresh()>
c001761e:	83 c4 10             	add    esp,0x10
c0017621:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0017626:	48                   	dec    eax
c0017627:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001762c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0017631:	85 c0                	test   eax,eax
c0017633:	75 01                	jne    c0017636 <RTC::RTC()+0xb4>
c0017635:	fb                   	sti    
c0017636:	90                   	nop
c0017637:	83 c4 1c             	add    esp,0x1c
c001763a:	c3                   	ret    
c001763b:	90                   	nop

c001763c <HalConsoleScroll(int, int)>:
c001763c:	83 ec 10             	sub    esp,0x10
c001763f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017647:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001764f:	90                   	nop
c0017650:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017655:	0f 8f e1 00 00 00    	jg     c001773c <HalConsoleScroll(int, int)+0x100>
c001765b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017663:	90                   	nop
c0017664:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001766c:	0f 8f be 00 00 00    	jg     c0017730 <HalConsoleScroll(int, int)+0xf4>
c0017672:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017676:	89 d0                	mov    eax,edx
c0017678:	c1 e0 02             	shl    eax,0x2
c001767b:	01 d0                	add    eax,edx
c001767d:	c1 e0 05             	shl    eax,0x5
c0017680:	89 c2                	mov    edx,eax
c0017682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017686:	01 d0                	add    eax,edx
c0017688:	89 c2                	mov    edx,eax
c001768a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001768e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017691:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017695:	89 d0                	mov    eax,edx
c0017697:	c1 e0 02             	shl    eax,0x2
c001769a:	01 d0                	add    eax,edx
c001769c:	c1 e0 05             	shl    eax,0x5
c001769f:	89 c2                	mov    edx,eax
c00176a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00176a5:	01 d0                	add    eax,edx
c00176a7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00176ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176b1:	01 c2                	add    edx,eax
c00176b3:	8a 01                	mov    al,BYTE PTR [ecx]
c00176b5:	88 02                	mov    BYTE PTR [edx],al
c00176b7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00176bc:	75 66                	jne    c0017724 <HalConsoleScroll(int, int)+0xe8>
c00176be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00176c2:	83 e0 01             	and    eax,0x1
c00176c5:	74 39                	je     c0017700 <HalConsoleScroll(int, int)+0xc4>
c00176c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176cb:	83 e0 0f             	and    eax,0xf
c00176ce:	88 c2                	mov    dl,al
c00176d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00176d4:	c1 e0 04             	shl    eax,0x4
c00176d7:	88 d1                	mov    cl,dl
c00176d9:	09 c1                	or     ecx,eax
c00176db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176df:	89 d0                	mov    eax,edx
c00176e1:	c1 e0 02             	shl    eax,0x2
c00176e4:	01 d0                	add    eax,edx
c00176e6:	c1 e0 05             	shl    eax,0x5
c00176e9:	89 c2                	mov    edx,eax
c00176eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00176ef:	01 d0                	add    eax,edx
c00176f1:	89 c2                	mov    edx,eax
c00176f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176f7:	01 d0                	add    eax,edx
c00176f9:	88 ca                	mov    dl,cl
c00176fb:	88 10                	mov    BYTE PTR [eax],dl
c00176fd:	eb 25                	jmp    c0017724 <HalConsoleScroll(int, int)+0xe8>
c00176ff:	90                   	nop
c0017700:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017704:	89 d0                	mov    eax,edx
c0017706:	c1 e0 02             	shl    eax,0x2
c0017709:	01 d0                	add    eax,edx
c001770b:	c1 e0 05             	shl    eax,0x5
c001770e:	89 c2                	mov    edx,eax
c0017710:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017714:	01 d0                	add    eax,edx
c0017716:	89 c2                	mov    edx,eax
c0017718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001771c:	01 d0                	add    eax,edx
c001771e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017721:	8d 76 00             	lea    esi,[esi+0x0]
c0017724:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0017728:	e9 37 ff ff ff       	jmp    c0017664 <HalConsoleScroll(int, int)+0x28>
c001772d:	8d 76 00             	lea    esi,[esi+0x0]
c0017730:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017734:	e9 17 ff ff ff       	jmp    c0017650 <HalConsoleScroll(int, int)+0x14>
c0017739:	8d 76 00             	lea    esi,[esi+0x0]
c001773c:	90                   	nop
c001773d:	83 c4 10             	add    esp,0x10
c0017740:	c3                   	ret    
c0017741:	8d 76 00             	lea    esi,[esi+0x0]

c0017744 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017744:	83 ec 14             	sub    esp,0x14
c0017747:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001774b:	88 04 24             	mov    BYTE PTR [esp],al
c001774e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017751:	25 ff 00 00 00       	and    eax,0xff
c0017756:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001775a:	89 d1                	mov    ecx,edx
c001775c:	83 e1 0f             	and    ecx,0xf
c001775f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017763:	c1 e2 04             	shl    edx,0x4
c0017766:	81 e2 ff 00 00 00    	and    edx,0xff
c001776c:	09 ca                	or     edx,ecx
c001776e:	c1 e2 08             	shl    edx,0x8
c0017771:	09 d0                	or     eax,edx
c0017773:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017778:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017780:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017784:	89 d0                	mov    eax,edx
c0017786:	c1 e0 02             	shl    eax,0x2
c0017789:	01 d0                	add    eax,edx
c001778b:	c1 e0 04             	shl    eax,0x4
c001778e:	89 c2                	mov    edx,eax
c0017790:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017794:	01 d0                	add    eax,edx
c0017796:	01 c0                	add    eax,eax
c0017798:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001779c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177a0:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00177a5:	66 89 02             	mov    WORD PTR [edx],ax
c00177a8:	90                   	nop
c00177a9:	83 c4 14             	add    esp,0x14
c00177ac:	c3                   	ret    
c00177ad:	8d 76 00             	lea    esi,[esi+0x0]

c00177b0 <HalConsoleCursorUpdate(int, int)>:
c00177b0:	83 ec 20             	sub    esp,0x20
c00177b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177b7:	89 c2                	mov    edx,eax
c00177b9:	89 d0                	mov    eax,edx
c00177bb:	c1 e0 02             	shl    eax,0x2
c00177be:	01 d0                	add    eax,edx
c00177c0:	c1 e0 04             	shl    eax,0x4
c00177c3:	89 c2                	mov    edx,eax
c00177c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00177c9:	01 d0                	add    eax,edx
c00177cb:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00177d0:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00177d7:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00177dc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00177e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00177e4:	ee                   	out    dx,al
c00177e5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00177ea:	25 ff 00 00 00       	and    eax,0xff
c00177ef:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00177f6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00177fa:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00177fe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017802:	ee                   	out    dx,al
c0017803:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001780a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001780f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017813:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017817:	ee                   	out    dx,al
c0017818:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001781d:	66 c1 e8 08          	shr    ax,0x8
c0017821:	25 ff 00 00 00       	and    eax,0xff
c0017826:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001782d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017831:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017835:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017839:	ee                   	out    dx,al
c001783a:	90                   	nop
c001783b:	83 c4 20             	add    esp,0x20
c001783e:	c3                   	ret    
c001783f:	90                   	nop

c0017840 <FAT::getName()>:
c0017840:	b8 c0 0e 02 c0       	mov    eax,0xc0020ec0
c0017845:	c3                   	ret    
c0017846:	66 90                	xchg   ax,ax

c0017848 <FAT::tell(void*, unsigned long long*)>:
c0017848:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001784d:	75 09                	jne    c0017858 <FAT::tell(void*, unsigned long long*)+0x10>
c001784f:	b8 04 00 00 00       	mov    eax,0x4
c0017854:	c3                   	ret    
c0017855:	8d 76 00             	lea    esi,[esi+0x0]
c0017858:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001785d:	75 09                	jne    c0017868 <FAT::tell(void*, unsigned long long*)+0x20>
c001785f:	b8 04 00 00 00       	mov    eax,0x4
c0017864:	c3                   	ret    
c0017865:	8d 76 00             	lea    esi,[esi+0x0]
c0017868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001786c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001786f:	ba 00 00 00 00       	mov    edx,0x0
c0017874:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017878:	89 01                	mov    DWORD PTR [ecx],eax
c001787a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001787d:	b8 00 00 00 00       	mov    eax,0x0
c0017882:	c3                   	ret    
c0017883:	90                   	nop

c0017884 <FAT::stat(void*, unsigned long long*)>:
c0017884:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017889:	75 09                	jne    c0017894 <FAT::stat(void*, unsigned long long*)+0x10>
c001788b:	b8 04 00 00 00       	mov    eax,0x4
c0017890:	c3                   	ret    
c0017891:	8d 76 00             	lea    esi,[esi+0x0]
c0017894:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017899:	75 09                	jne    c00178a4 <FAT::stat(void*, unsigned long long*)+0x20>
c001789b:	b8 04 00 00 00       	mov    eax,0x4
c00178a0:	c3                   	ret    
c00178a1:	8d 76 00             	lea    esi,[esi+0x0]
c00178a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00178a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00178ab:	ba 00 00 00 00       	mov    edx,0x0
c00178b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00178b4:	89 01                	mov    DWORD PTR [ecx],eax
c00178b6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00178b9:	b8 00 00 00 00       	mov    eax,0x0
c00178be:	c3                   	ret    
c00178bf:	90                   	nop

c00178c0 <FAT::~FAT()>:
c00178c0:	83 ec 0c             	sub    esp,0xc
c00178c3:	ba 0c 0f 02 c0       	mov    edx,0xc0020f0c
c00178c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178cc:	89 10                	mov    DWORD PTR [eax],edx
c00178ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178d2:	83 ec 0c             	sub    esp,0xc
c00178d5:	50                   	push   eax
c00178d6:	e8 bd 30 ff ff       	call   c000a998 <Filesystem::~Filesystem()>
c00178db:	83 c4 10             	add    esp,0x10
c00178de:	90                   	nop
c00178df:	83 c4 0c             	add    esp,0xc
c00178e2:	c3                   	ret    
c00178e3:	90                   	nop

c00178e4 <FAT::~FAT()>:
c00178e4:	83 ec 0c             	sub    esp,0xc
c00178e7:	83 ec 0c             	sub    esp,0xc
c00178ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178ee:	e8 cd ff ff ff       	call   c00178c0 <FAT::~FAT()>
c00178f3:	83 c4 10             	add    esp,0x10
c00178f6:	83 ec 08             	sub    esp,0x8
c00178f9:	6a 08                	push   0x8
c00178fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178ff:	e8 59 2c ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c0017904:	83 c4 10             	add    esp,0x10
c0017907:	83 c4 0c             	add    esp,0xc
c001790a:	c3                   	ret    
c001790b:	90                   	nop

c001790c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001790c:	83 ec 1c             	sub    esp,0x1c
c001790f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017916:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001791b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001791f:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017926:	83 f8 ff             	cmp    eax,0xffffffff
c0017929:	75 35                	jne    c0017960 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001792b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001792f:	88 c2                	mov    dl,al
c0017931:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017936:	01 d0                	add    eax,edx
c0017938:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001793c:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017942:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017946:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c001794d:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017952:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017956:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c001795d:	eb 19                	jmp    c0017978 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001795f:	90                   	nop
c0017960:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017964:	88 c2                	mov    dl,al
c0017966:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001796a:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017971:	01 d0                	add    eax,edx
c0017973:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017977:	90                   	nop
c0017978:	83 ec 04             	sub    esp,0x4
c001797b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001797f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017983:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017987:	50                   	push   eax
c0017988:	e8 b4 d4 fe ff       	call   c0004e41 <f_getlabel>
c001798d:	83 c4 10             	add    esp,0x10
c0017990:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017994:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017999:	75 09                	jne    c00179a4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001799b:	b8 00 00 00 00       	mov    eax,0x0
c00179a0:	eb 0a                	jmp    c00179ac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00179a2:	66 90                	xchg   ax,ax
c00179a4:	b8 01 00 00 00       	mov    eax,0x1
c00179a9:	8d 76 00             	lea    esi,[esi+0x0]
c00179ac:	83 c4 1c             	add    esp,0x1c
c00179af:	c3                   	ret    

c00179b0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00179b0:	57                   	push   edi
c00179b1:	83 ec 58             	sub    esp,0x58
c00179b4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00179bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00179c0:	b8 00 00 00 00       	mov    eax,0x0
c00179c5:	b9 0f 00 00 00       	mov    ecx,0xf
c00179ca:	fc                   	cld    
c00179cb:	89 d7                	mov    edi,edx
c00179cd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00179cf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00179d3:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00179da:	83 f8 ff             	cmp    eax,0xffffffff
c00179dd:	75 35                	jne    c0017a14 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00179df:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00179e3:	88 c2                	mov    dl,al
c00179e5:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00179ea:	01 d0                	add    eax,edx
c00179ec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00179f0:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c00179f6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00179fa:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017a01:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017a06:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0017a0a:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017a11:	eb 19                	jmp    c0017a2c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0017a13:	90                   	nop
c0017a14:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017a18:	88 c2                	mov    dl,al
c0017a1a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017a1e:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017a25:	01 d0                	add    eax,edx
c0017a27:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017a2b:	90                   	nop
c0017a2c:	83 ec 08             	sub    esp,0x8
c0017a2f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0017a33:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017a37:	50                   	push   eax
c0017a38:	e8 83 8d fe ff       	call   c00007c0 <strcat>
c0017a3d:	83 c4 10             	add    esp,0x10
c0017a40:	83 ec 0c             	sub    esp,0xc
c0017a43:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017a47:	50                   	push   eax
c0017a48:	e8 4b d5 fe ff       	call   c0004f98 <f_setlabel>
c0017a4d:	83 c4 10             	add    esp,0x10
c0017a50:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a54:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0017a59:	75 09                	jne    c0017a64 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0017a5b:	b8 00 00 00 00       	mov    eax,0x0
c0017a60:	eb 0a                	jmp    c0017a6c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0017a62:	66 90                	xchg   ax,ax
c0017a64:	b8 01 00 00 00       	mov    eax,0x1
c0017a69:	8d 76 00             	lea    esi,[esi+0x0]
c0017a6c:	83 c4 58             	add    esp,0x58
c0017a6f:	5f                   	pop    edi
c0017a70:	c3                   	ret    
c0017a71:	90                   	nop
c0017a72:	66 90                	xchg   ax,ax

c0017a74 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0017a74:	83 ec 2c             	sub    esp,0x2c
c0017a77:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017a7f:	83 ec 08             	sub    esp,0x8
c0017a82:	68 e4 0e 02 c0       	push   0xc0020ee4
c0017a87:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017a8b:	e8 50 8c fe ff       	call   c00006e0 <strcmp>
c0017a90:	83 c4 10             	add    esp,0x10
c0017a93:	85 c0                	test   eax,eax
c0017a95:	0f 94 c0             	sete   al
c0017a98:	84 c0                	test   al,al
c0017a9a:	74 10                	je     c0017aac <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0017a9c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017aa4:	e9 b3 00 00 00       	jmp    c0017b5c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0017aac:	83 ec 08             	sub    esp,0x8
c0017aaf:	68 d6 0e 02 c0       	push   0xc0020ed6
c0017ab4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017ab8:	e8 23 8c fe ff       	call   c00006e0 <strcmp>
c0017abd:	83 c4 10             	add    esp,0x10
c0017ac0:	85 c0                	test   eax,eax
c0017ac2:	0f 94 c0             	sete   al
c0017ac5:	84 c0                	test   al,al
c0017ac7:	74 0f                	je     c0017ad8 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0017ac9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017ad1:	e9 86 00 00 00       	jmp    c0017b5c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017ad6:	66 90                	xchg   ax,ax
c0017ad8:	83 ec 08             	sub    esp,0x8
c0017adb:	68 dc 0e 02 c0       	push   0xc0020edc
c0017ae0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017ae4:	e8 f7 8b fe ff       	call   c00006e0 <strcmp>
c0017ae9:	83 c4 10             	add    esp,0x10
c0017aec:	85 c0                	test   eax,eax
c0017aee:	0f 94 c0             	sete   al
c0017af1:	84 c0                	test   al,al
c0017af3:	74 0b                	je     c0017b00 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0017af5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017afd:	eb 5d                	jmp    c0017b5c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017aff:	90                   	nop
c0017b00:	83 ec 08             	sub    esp,0x8
c0017b03:	68 bc ec 01 c0       	push   0xc001ecbc
c0017b08:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017b0c:	e8 cf 8b fe ff       	call   c00006e0 <strcmp>
c0017b11:	83 c4 10             	add    esp,0x10
c0017b14:	85 c0                	test   eax,eax
c0017b16:	0f 94 c0             	sete   al
c0017b19:	84 c0                	test   al,al
c0017b1b:	74 0b                	je     c0017b28 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0017b1d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0017b25:	eb 35                	jmp    c0017b5c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017b27:	90                   	nop
c0017b28:	83 ec 08             	sub    esp,0x8
c0017b2b:	68 e2 0e 02 c0       	push   0xc0020ee2
c0017b30:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017b34:	e8 a7 8b fe ff       	call   c00006e0 <strcmp>
c0017b39:	83 c4 10             	add    esp,0x10
c0017b3c:	85 c0                	test   eax,eax
c0017b3e:	0f 94 c0             	sete   al
c0017b41:	84 c0                	test   al,al
c0017b43:	74 0b                	je     c0017b50 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0017b45:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0017b4d:	eb 0d                	jmp    c0017b5c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017b4f:	90                   	nop
c0017b50:	b8 08 00 00 00       	mov    eax,0x8
c0017b55:	e9 ea 00 00 00       	jmp    c0017c44 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017b5a:	66 90                	xchg   ax,ax
c0017b5c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0017b63:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017b68:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b6c:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017b73:	83 f8 ff             	cmp    eax,0xffffffff
c0017b76:	75 34                	jne    c0017bac <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0017b78:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017b7c:	88 c2                	mov    dl,al
c0017b7e:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017b83:	01 d0                	add    eax,edx
c0017b85:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017b89:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017b8f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b93:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017b9a:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017b9f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017ba3:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017baa:	eb 18                	jmp    c0017bc4 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0017bac:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017bb0:	88 c2                	mov    dl,al
c0017bb2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017bb6:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017bbd:	01 d0                	add    eax,edx
c0017bbf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017bc3:	90                   	nop
c0017bc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bc8:	88 04 24             	mov    BYTE PTR [esp],al
c0017bcb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017bcf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017bd3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017bdb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0017be0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017be8:	83 ec 0c             	sub    esp,0xc
c0017beb:	68 00 20 00 00       	push   0x2000
c0017bf0:	e8 6e fc fe ff       	call   c0007863 <malloc>
c0017bf5:	83 c4 10             	add    esp,0x10
c0017bf8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bfc:	68 00 20 00 00       	push   0x2000
c0017c01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c05:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017c09:	50                   	push   eax
c0017c0a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0017c0e:	50                   	push   eax
c0017c0f:	e8 74 d6 fe ff       	call   c0005288 <f_mkfs>
c0017c14:	83 c4 10             	add    esp,0x10
c0017c17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c1b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017c20:	75 0a                	jne    c0017c2c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0017c22:	b8 00 00 00 00       	mov    eax,0x0
c0017c27:	eb 1b                	jmp    c0017c44 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017c29:	8d 76 00             	lea    esi,[esi+0x0]
c0017c2c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0017c31:	75 09                	jne    c0017c3c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0017c33:	b8 09 00 00 00       	mov    eax,0x9
c0017c38:	eb 0a                	jmp    c0017c44 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0017c3a:	66 90                	xchg   ax,ax
c0017c3c:	b8 01 00 00 00       	mov    eax,0x1
c0017c41:	8d 76 00             	lea    esi,[esi+0x0]
c0017c44:	83 c4 2c             	add    esp,0x2c
c0017c47:	c3                   	ret    

c0017c48 <FAT::tryMount(LogicalDisk*, int)>:
c0017c48:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0017c4e:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017c53:	83 f8 14             	cmp    eax,0x14
c0017c56:	75 18                	jne    c0017c70 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0017c58:	83 ec 0c             	sub    esp,0xc
c0017c5b:	68 e8 0e 02 c0       	push   0xc0020ee8
c0017c60:	e8 a2 87 ff ff       	call   c0010407 <KePanic(char const*)>
c0017c65:	83 c4 10             	add    esp,0x10
c0017c68:	b0 00                	mov    al,0x0
c0017c6a:	e9 e9 01 00 00       	jmp    c0017e58 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017c6f:	90                   	nop
c0017c70:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0017c77:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017c7d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017c83:	3d 00 02 00 00       	cmp    eax,0x200
c0017c88:	74 0a                	je     c0017c94 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0017c8a:	b0 00                	mov    al,0x0
c0017c8c:	e9 c7 01 00 00       	jmp    c0017e58 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017c91:	8d 76 00             	lea    esi,[esi+0x0]
c0017c94:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0017c9c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0017ca3:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017caa:	83 f8 ff             	cmp    eax,0xffffffff
c0017cad:	74 09                	je     c0017cb8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0017caf:	b0 01                	mov    al,0x1
c0017cb1:	e9 a2 01 00 00       	jmp    c0017e58 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017cb6:	66 90                	xchg   ax,ax
c0017cb8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0017cc2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0017cca:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0017cd1:	88 c2                	mov    dl,al
c0017cd3:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017cd8:	01 d0                	add    eax,edx
c0017cda:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0017ce1:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017ce7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0017cee:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017cf5:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017cfa:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0017d01:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017d08:	83 ec 0c             	sub    esp,0xc
c0017d0b:	68 34 02 00 00       	push   0x234
c0017d10:	e8 4e fb fe ff       	call   c0007863 <malloc>
c0017d15:	83 c4 10             	add    esp,0x10
c0017d18:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0017d1f:	83 ec 04             	sub    esp,0x4
c0017d22:	6a 00                	push   0x0
c0017d24:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017d2b:	50                   	push   eax
c0017d2c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017d33:	e8 72 bd fe ff       	call   c0003aaa <f_mount>
c0017d38:	83 c4 10             	add    esp,0x10
c0017d3b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0017d42:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0017d4a:	74 1c                	je     c0017d68 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0017d4c:	83 ec 0c             	sub    esp,0xc
c0017d4f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017d56:	e8 28 fb fe ff       	call   c0007883 <rfree>
c0017d5b:	83 c4 10             	add    esp,0x10
c0017d5e:	b0 00                	mov    al,0x0
c0017d60:	e9 f3 00 00 00       	jmp    c0017e58 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017d65:	8d 76 00             	lea    esi,[esi+0x0]
c0017d68:	83 ec 04             	sub    esp,0x4
c0017d6b:	68 00 01 00 00       	push   0x100
c0017d70:	6a 00                	push   0x0
c0017d72:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017d79:	50                   	push   eax
c0017d7a:	e8 41 87 fe ff       	call   c00004c0 <memset>
c0017d7f:	83 c4 10             	add    esp,0x10
c0017d82:	83 ec 08             	sub    esp,0x8
c0017d85:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017d8c:	50                   	push   eax
c0017d8d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017d94:	50                   	push   eax
c0017d95:	e8 26 8a fe ff       	call   c00007c0 <strcat>
c0017d9a:	83 c4 10             	add    esp,0x10
c0017d9d:	83 ec 08             	sub    esp,0x8
c0017da0:	68 f6 0e 02 c0       	push   0xc0020ef6
c0017da5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0017dac:	50                   	push   eax
c0017dad:	e8 0e 8a fe ff       	call   c00007c0 <strcat>
c0017db2:	83 c4 10             	add    esp,0x10
c0017db5:	83 ec 04             	sub    esp,0x4
c0017db8:	6a 01                	push   0x1
c0017dba:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0017dc1:	50                   	push   eax
c0017dc2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017dc6:	50                   	push   eax
c0017dc7:	e8 40 bd fe ff       	call   c0003b0c <f_open>
c0017dcc:	83 c4 10             	add    esp,0x10
c0017dcf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0017dd6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0017ddd:	85 c0                	test   eax,eax
c0017ddf:	74 0b                	je     c0017dec <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0017de1:	78 31                	js     c0017e14 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0017de3:	83 e8 04             	sub    eax,0x4
c0017de6:	83 f8 01             	cmp    eax,0x1
c0017de9:	77 29                	ja     c0017e14 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0017deb:	90                   	nop
c0017dec:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0017df4:	83 ec 0c             	sub    esp,0xc
c0017df7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017dfb:	50                   	push   eax
c0017dfc:	e8 be c4 fe ff       	call   c00042bf <f_close>
c0017e01:	83 c4 10             	add    esp,0x10
c0017e04:	90                   	nop
c0017e05:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0017e0d:	74 41                	je     c0017e50 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0017e0f:	eb 33                	jmp    c0017e44 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0017e11:	8d 76 00             	lea    esi,[esi+0x0]
c0017e14:	83 ec 0c             	sub    esp,0xc
c0017e17:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017e1e:	e8 60 fa fe ff       	call   c0007883 <rfree>
c0017e23:	83 c4 10             	add    esp,0x10
c0017e26:	83 ec 04             	sub    esp,0x4
c0017e29:	6a 00                	push   0x0
c0017e2b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017e32:	50                   	push   eax
c0017e33:	6a 00                	push   0x0
c0017e35:	e8 70 bc fe ff       	call   c0003aaa <f_mount>
c0017e3a:	83 c4 10             	add    esp,0x10
c0017e3d:	b0 00                	mov    al,0x0
c0017e3f:	eb 17                	jmp    c0017e58 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017e41:	8d 76 00             	lea    esi,[esi+0x0]
c0017e44:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017e49:	40                   	inc    eax
c0017e4a:	a3 20 72 02 c0       	mov    ds:0xc0027220,eax
c0017e4f:	90                   	nop
c0017e50:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0017e57:	90                   	nop
c0017e58:	81 c4 4c 03 00 00    	add    esp,0x34c
c0017e5e:	c3                   	ret    
c0017e5f:	90                   	nop

c0017e60 <FAT::allocateSwapfile(char const*, int)>:
c0017e60:	55                   	push   ebp
c0017e61:	57                   	push   edi
c0017e62:	56                   	push   esi
c0017e63:	53                   	push   ebx
c0017e64:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0017e6a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0017e75:	83 ec 0c             	sub    esp,0xc
c0017e78:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0017e7f:	e8 df f9 fe ff       	call   c0007863 <malloc>
c0017e84:	83 c4 10             	add    esp,0x10
c0017e87:	89 c7                	mov    edi,eax
c0017e89:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0017e8e:	83 ec 04             	sub    esp,0x4
c0017e91:	50                   	push   eax
c0017e92:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0017e99:	57                   	push   edi
c0017e9a:	e8 29 2d ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c0017e9f:	83 c4 10             	add    esp,0x10
c0017ea2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0017ea9:	83 ec 04             	sub    esp,0x4
c0017eac:	8d 44 24 13          	lea    eax,[esp+0x13]
c0017eb0:	50                   	push   eax
c0017eb1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017eb5:	50                   	push   eax
c0017eb6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017ebd:	e8 72 30 ff ff       	call   c000af34 <File::stat(unsigned long long*, bool*)>
c0017ec2:	83 c4 10             	add    esp,0x10
c0017ec5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0017ecc:	c1 e0 14             	shl    eax,0x14
c0017ecf:	89 c7                	mov    edi,eax
c0017ed1:	89 c5                	mov    ebp,eax
c0017ed3:	c1 fd 1f             	sar    ebp,0x1f
c0017ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017eda:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017ede:	89 f9                	mov    ecx,edi
c0017ee0:	31 c1                	xor    ecx,eax
c0017ee2:	89 cb                	mov    ebx,ecx
c0017ee4:	89 e9                	mov    ecx,ebp
c0017ee6:	31 d1                	xor    ecx,edx
c0017ee8:	89 ce                	mov    esi,ecx
c0017eea:	89 f0                	mov    eax,esi
c0017eec:	09 d8                	or     eax,ebx
c0017eee:	0f 84 9c 00 00 00    	je     c0017f90 <FAT::allocateSwapfile(char const*, int)+0x130>
c0017ef4:	83 ec 0c             	sub    esp,0xc
c0017ef7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017efe:	e8 fd 2e ff ff       	call   c000ae00 <File::unlink()>
c0017f03:	83 c4 10             	add    esp,0x10
c0017f06:	83 ec 08             	sub    esp,0x8
c0017f09:	6a 12                	push   0x12
c0017f0b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017f12:	e8 71 2d ff ff       	call   c000ac88 <File::open(FileOpenMode)>
c0017f17:	83 c4 10             	add    esp,0x10
c0017f1a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017f21:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017f27:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017f2e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0017f35:	c1 e0 14             	shl    eax,0x14
c0017f38:	83 ec 04             	sub    esp,0x4
c0017f3b:	6a 01                	push   0x1
c0017f3d:	50                   	push   eax
c0017f3e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0017f45:	e8 de d1 fe ff       	call   c0005128 <f_expand>
c0017f4a:	83 c4 10             	add    esp,0x10
c0017f4d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017f54:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f56:	83 c0 10             	add    eax,0x10
c0017f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0017f5b:	83 ec 0c             	sub    esp,0xc
c0017f5e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017f62:	52                   	push   edx
c0017f63:	8d 54 24 30          	lea    edx,[esp+0x30]
c0017f67:	52                   	push   edx
c0017f68:	6a 00                	push   0x0
c0017f6a:	68 00 04 00 00       	push   0x400
c0017f6f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0017f76:	ff d0                	call   eax
c0017f78:	83 c4 20             	add    esp,0x20
c0017f7b:	83 ec 0c             	sub    esp,0xc
c0017f7e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017f85:	e8 5c 2d ff ff       	call   c000ace6 <File::close()>
c0017f8a:	83 c4 10             	add    esp,0x10
c0017f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0017f90:	83 ec 08             	sub    esp,0x8
c0017f93:	6a 01                	push   0x1
c0017f95:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017f9c:	e8 e7 2c ff ff       	call   c000ac88 <File::open(FileOpenMode)>
c0017fa1:	83 c4 10             	add    esp,0x10
c0017fa4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017fab:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fad:	83 c0 0c             	add    eax,0xc
c0017fb0:	8b 00                	mov    eax,DWORD PTR [eax]
c0017fb2:	83 ec 0c             	sub    esp,0xc
c0017fb5:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017fb9:	52                   	push   edx
c0017fba:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0017fbe:	52                   	push   edx
c0017fbf:	6a 00                	push   0x0
c0017fc1:	6a 04                	push   0x4
c0017fc3:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0017fca:	ff d0                	call   eax
c0017fcc:	83 c4 20             	add    esp,0x20
c0017fcf:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017fd6:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017fdc:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017fe3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0017fea:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017fed:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0017ff4:	83 ec 0c             	sub    esp,0xc
c0017ff7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017ffe:	e8 e3 2c ff ff       	call   c000ace6 <File::close()>
c0018003:	83 c4 10             	add    esp,0x10
c0018006:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001800d:	ba 00 00 00 00       	mov    edx,0x0
c0018012:	81 c4 3c 04 00 00    	add    esp,0x43c
c0018018:	5b                   	pop    ebx
c0018019:	5e                   	pop    esi
c001801a:	5f                   	pop    edi
c001801b:	5d                   	pop    ebp
c001801c:	c3                   	ret    
c001801d:	90                   	nop
c001801e:	66 90                	xchg   ax,ax

c0018020 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0018020:	57                   	push   edi
c0018021:	56                   	push   esi
c0018022:	53                   	push   ebx
c0018023:	81 ec 50 02 00 00    	sub    esp,0x250
c0018029:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0018031:	74 0d                	je     c0018040 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0018033:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001803b:	75 0f                	jne    c001804c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001803d:	8d 76 00             	lea    esi,[esi+0x0]
c0018040:	b8 04 00 00 00       	mov    eax,0x4
c0018045:	e9 36 01 00 00       	jmp    c0018180 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001804a:	66 90                	xchg   ax,ax
c001804c:	83 ec 08             	sub    esp,0x8
c001804f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0018056:	50                   	push   eax
c0018057:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001805e:	e8 1f c5 fe ff       	call   c0004582 <f_readdir>
c0018063:	83 c4 10             	add    esp,0x10
c0018066:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001806d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0018074:	83 ec 0c             	sub    esp,0xc
c0018077:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001807e:	83 c0 16             	add    eax,0x16
c0018081:	50                   	push   eax
c0018082:	e8 a9 84 fe ff       	call   c0000530 <strlen>
c0018087:	83 c4 10             	add    esp,0x10
c001808a:	ba 00 00 00 00       	mov    edx,0x0
c001808f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018093:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0018097:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001809e:	25 ff 00 00 00       	and    eax,0xff
c00180a3:	83 e0 10             	and    eax,0x10
c00180a6:	74 08                	je     c00180b0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00180a8:	b8 02 00 00 00       	mov    eax,0x2
c00180ad:	eb 09                	jmp    c00180b8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00180af:	90                   	nop
c00180b0:	b8 01 00 00 00       	mov    eax,0x1
c00180b5:	8d 76 00             	lea    esi,[esi+0x0]
c00180b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180bc:	83 ec 08             	sub    esp,0x8
c00180bf:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00180c6:	83 c0 16             	add    eax,0x16
c00180c9:	50                   	push   eax
c00180ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00180ce:	83 c0 10             	add    eax,0x10
c00180d1:	50                   	push   eax
c00180d2:	e8 19 85 fe ff       	call   c00005f0 <strcpy>
c00180d7:	83 c4 10             	add    esp,0x10
c00180da:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00180e1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00180e8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00180ec:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00180f3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00180fa:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0018101:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0018108:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001810f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0018116:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001811d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0018124:	89 c6                	mov    esi,eax
c0018126:	89 d7                	mov    edi,edx
c0018128:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001812a:	89 c8                	mov    eax,ecx
c001812c:	89 fa                	mov    edx,edi
c001812e:	89 f3                	mov    ebx,esi
c0018130:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0018137:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001813e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0018145:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001814c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0018152:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0018159:	84 c0                	test   al,al
c001815b:	75 07                	jne    c0018164 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001815d:	b8 07 00 00 00       	mov    eax,0x7
c0018162:	eb 1c                	jmp    c0018180 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0018164:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001816b:	85 c0                	test   eax,eax
c001816d:	75 09                	jne    c0018178 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001816f:	b8 00 00 00 00       	mov    eax,0x0
c0018174:	eb 0a                	jmp    c0018180 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0018176:	66 90                	xchg   ax,ax
c0018178:	b8 01 00 00 00       	mov    eax,0x1
c001817d:	8d 76 00             	lea    esi,[esi+0x0]
c0018180:	81 c4 50 02 00 00    	add    esp,0x250
c0018186:	5b                   	pop    ebx
c0018187:	5e                   	pop    esi
c0018188:	5f                   	pop    edi
c0018189:	c3                   	ret    
c001818a:	66 90                	xchg   ax,ax

c001818c <FAT::read(void*, unsigned long, void*, int*)>:
c001818c:	83 ec 1c             	sub    esp,0x1c
c001818f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018194:	74 0a                	je     c00181a0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0018196:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001819b:	75 0b                	jne    c00181a8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001819d:	8d 76 00             	lea    esi,[esi+0x0]
c00181a0:	b8 04 00 00 00       	mov    eax,0x4
c00181a5:	eb 41                	jmp    c00181e8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00181a7:	90                   	nop
c00181a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00181ac:	50                   	push   eax
c00181ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00181b5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00181b9:	e8 19 bc fe ff       	call   c0003dd7 <f_read>
c00181be:	83 c4 10             	add    esp,0x10
c00181c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181c9:	89 c2                	mov    edx,eax
c00181cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181cf:	89 10                	mov    DWORD PTR [eax],edx
c00181d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181d5:	85 c0                	test   eax,eax
c00181d7:	75 07                	jne    c00181e0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00181d9:	b8 00 00 00 00       	mov    eax,0x0
c00181de:	eb 08                	jmp    c00181e8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00181e0:	b8 01 00 00 00       	mov    eax,0x1
c00181e5:	8d 76 00             	lea    esi,[esi+0x0]
c00181e8:	83 c4 1c             	add    esp,0x1c
c00181eb:	c3                   	ret    

c00181ec <FAT::write(void*, unsigned long, void*, int*)>:
c00181ec:	83 ec 1c             	sub    esp,0x1c
c00181ef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00181f4:	74 0a                	je     c0018200 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00181f6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00181fb:	75 0b                	jne    c0018208 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00181fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018200:	b8 04 00 00 00       	mov    eax,0x4
c0018205:	eb 41                	jmp    c0018248 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018207:	90                   	nop
c0018208:	8d 44 24 08          	lea    eax,[esp+0x8]
c001820c:	50                   	push   eax
c001820d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018211:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018215:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018219:	e8 b8 bd fe ff       	call   c0003fd6 <f_write>
c001821e:	83 c4 10             	add    esp,0x10
c0018221:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018225:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018229:	89 c2                	mov    edx,eax
c001822b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001822f:	89 10                	mov    DWORD PTR [eax],edx
c0018231:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018235:	85 c0                	test   eax,eax
c0018237:	75 07                	jne    c0018240 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0018239:	b8 00 00 00 00       	mov    eax,0x0
c001823e:	eb 08                	jmp    c0018248 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0018240:	b8 01 00 00 00       	mov    eax,0x1
c0018245:	8d 76 00             	lea    esi,[esi+0x0]
c0018248:	83 c4 1c             	add    esp,0x1c
c001824b:	c3                   	ret    

c001824c <FAT::close(void*)>:
c001824c:	83 ec 1c             	sub    esp,0x1c
c001824f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018254:	75 0a                	jne    c0018260 <FAT::close(void*)+0x14>
c0018256:	b8 04 00 00 00       	mov    eax,0x4
c001825b:	eb 3f                	jmp    c001829c <FAT::close(void*)+0x50>
c001825d:	8d 76 00             	lea    esi,[esi+0x0]
c0018260:	83 ec 0c             	sub    esp,0xc
c0018263:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018267:	e8 53 c0 fe ff       	call   c00042bf <f_close>
c001826c:	83 c4 10             	add    esp,0x10
c001826f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018273:	83 ec 0c             	sub    esp,0xc
c0018276:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001827a:	e8 f4 f5 fe ff       	call   c0007873 <free>
c001827f:	83 c4 10             	add    esp,0x10
c0018282:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018286:	85 c0                	test   eax,eax
c0018288:	75 0a                	jne    c0018294 <FAT::close(void*)+0x48>
c001828a:	b8 00 00 00 00       	mov    eax,0x0
c001828f:	eb 0b                	jmp    c001829c <FAT::close(void*)+0x50>
c0018291:	8d 76 00             	lea    esi,[esi+0x0]
c0018294:	b8 01 00 00 00       	mov    eax,0x1
c0018299:	8d 76 00             	lea    esi,[esi+0x0]
c001829c:	83 c4 1c             	add    esp,0x1c
c001829f:	c3                   	ret    

c00182a0 <FAT::closeDir(void*)>:
c00182a0:	83 ec 1c             	sub    esp,0x1c
c00182a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00182a8:	75 0a                	jne    c00182b4 <FAT::closeDir(void*)+0x14>
c00182aa:	b8 04 00 00 00       	mov    eax,0x4
c00182af:	eb 3f                	jmp    c00182f0 <FAT::closeDir(void*)+0x50>
c00182b1:	8d 76 00             	lea    esi,[esi+0x0]
c00182b4:	83 ec 0c             	sub    esp,0xc
c00182b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00182bb:	e8 a0 c2 fe ff       	call   c0004560 <f_closedir>
c00182c0:	83 c4 10             	add    esp,0x10
c00182c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00182c7:	83 ec 0c             	sub    esp,0xc
c00182ca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00182ce:	e8 a0 f5 fe ff       	call   c0007873 <free>
c00182d3:	83 c4 10             	add    esp,0x10
c00182d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182da:	85 c0                	test   eax,eax
c00182dc:	75 0a                	jne    c00182e8 <FAT::closeDir(void*)+0x48>
c00182de:	b8 00 00 00 00       	mov    eax,0x0
c00182e3:	eb 0b                	jmp    c00182f0 <FAT::closeDir(void*)+0x50>
c00182e5:	8d 76 00             	lea    esi,[esi+0x0]
c00182e8:	b8 01 00 00 00       	mov    eax,0x1
c00182ed:	8d 76 00             	lea    esi,[esi+0x0]
c00182f0:	83 c4 1c             	add    esp,0x1c
c00182f3:	c3                   	ret    

c00182f4 <FAT::seek(void*, unsigned long long)>:
c00182f4:	83 ec 2c             	sub    esp,0x2c
c00182f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00182fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00182ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018303:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018307:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001830c:	75 0a                	jne    c0018318 <FAT::seek(void*, unsigned long long)+0x24>
c001830e:	b8 04 00 00 00       	mov    eax,0x4
c0018313:	eb 33                	jmp    c0018348 <FAT::seek(void*, unsigned long long)+0x54>
c0018315:	8d 76 00             	lea    esi,[esi+0x0]
c0018318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001831c:	83 ec 08             	sub    esp,0x8
c001831f:	50                   	push   eax
c0018320:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018324:	e8 c5 bf fe ff       	call   c00042ee <f_lseek>
c0018329:	83 c4 10             	add    esp,0x10
c001832c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018330:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018334:	85 c0                	test   eax,eax
c0018336:	75 08                	jne    c0018340 <FAT::seek(void*, unsigned long long)+0x4c>
c0018338:	b8 00 00 00 00       	mov    eax,0x0
c001833d:	eb 09                	jmp    c0018348 <FAT::seek(void*, unsigned long long)+0x54>
c001833f:	90                   	nop
c0018340:	b8 01 00 00 00       	mov    eax,0x1
c0018345:	8d 76 00             	lea    esi,[esi+0x0]
c0018348:	83 c4 2c             	add    esp,0x2c
c001834b:	c3                   	ret    

c001834c <fatWrapperReadDisk>:
c001834c:	53                   	push   ebx
c001834d:	83 ec 18             	sub    esp,0x18
c0018350:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018354:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018358:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001835c:	25 ff 00 00 00       	and    eax,0xff
c0018361:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0018368:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001836c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018370:	ba 00 00 00 00       	mov    edx,0x0
c0018375:	83 ec 0c             	sub    esp,0xc
c0018378:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001837c:	53                   	push   ebx
c001837d:	52                   	push   edx
c001837e:	50                   	push   eax
c001837f:	51                   	push   ecx
c0018380:	e8 13 4a ff ff       	call   c000cd98 <LogicalDisk::read(unsigned long long, int, void*)>
c0018385:	83 c4 20             	add    esp,0x20
c0018388:	83 c4 18             	add    esp,0x18
c001838b:	5b                   	pop    ebx
c001838c:	c3                   	ret    
c001838d:	8d 76 00             	lea    esi,[esi+0x0]

c0018390 <fatWrapperWriteDisk>:
c0018390:	53                   	push   ebx
c0018391:	83 ec 18             	sub    esp,0x18
c0018394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018398:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001839c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00183a0:	25 ff 00 00 00       	and    eax,0xff
c00183a5:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c00183ac:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00183b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183b4:	ba 00 00 00 00       	mov    edx,0x0
c00183b9:	83 ec 0c             	sub    esp,0xc
c00183bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00183c0:	53                   	push   ebx
c00183c1:	52                   	push   edx
c00183c2:	50                   	push   eax
c00183c3:	51                   	push   ecx
c00183c4:	e8 3b 4a ff ff       	call   c000ce04 <LogicalDisk::write(unsigned long long, int, void*)>
c00183c9:	83 c4 20             	add    esp,0x20
c00183cc:	83 c4 18             	add    esp,0x18
c00183cf:	5b                   	pop    ebx
c00183d0:	c3                   	ret    
c00183d1:	8d 76 00             	lea    esi,[esi+0x0]

c00183d4 <fatWrapperIoctl>:
c00183d4:	53                   	push   ebx
c00183d5:	83 ec 28             	sub    esp,0x28
c00183d8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00183dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183e0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00183e4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00183e8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00183ed:	75 35                	jne    c0018424 <fatWrapperIoctl+0x50>
c00183ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00183f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00183f7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00183fb:	25 ff 00 00 00       	and    eax,0xff
c0018400:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0018407:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001840d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018413:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018417:	66 89 02             	mov    WORD PTR [edx],ax
c001841a:	b8 00 00 00 00       	mov    eax,0x0
c001841f:	e9 c4 00 00 00       	jmp    c00184e8 <fatWrapperIoctl+0x114>
c0018424:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0018429:	75 75                	jne    c00184a0 <fatWrapperIoctl+0xcc>
c001842b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001842f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018433:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018437:	25 ff 00 00 00       	and    eax,0xff
c001843c:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0018443:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018449:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001844f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018455:	89 c8                	mov    eax,ecx
c0018457:	89 da                	mov    edx,ebx
c0018459:	0f a4 c2 0a          	shld   edx,eax,0xa
c001845d:	c1 e0 0a             	shl    eax,0xa
c0018460:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018464:	81 e1 ff 00 00 00    	and    ecx,0xff
c001846a:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c0018471:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018477:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001847d:	89 cb                	mov    ebx,ecx
c001847f:	c1 fb 1f             	sar    ebx,0x1f
c0018482:	53                   	push   ebx
c0018483:	51                   	push   ecx
c0018484:	52                   	push   edx
c0018485:	50                   	push   eax
c0018486:	e8 45 5a 00 00       	call   c001ded0 <__udivdi3>
c001848b:	83 c4 10             	add    esp,0x10
c001848e:	89 c2                	mov    edx,eax
c0018490:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018494:	89 10                	mov    DWORD PTR [eax],edx
c0018496:	b8 00 00 00 00       	mov    eax,0x0
c001849b:	eb 4b                	jmp    c00184e8 <fatWrapperIoctl+0x114>
c001849d:	8d 76 00             	lea    esi,[esi+0x0]
c00184a0:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00184a5:	75 09                	jne    c00184b0 <fatWrapperIoctl+0xdc>
c00184a7:	b8 00 00 00 00       	mov    eax,0x0
c00184ac:	eb 3a                	jmp    c00184e8 <fatWrapperIoctl+0x114>
c00184ae:	66 90                	xchg   ax,ax
c00184b0:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00184b5:	75 19                	jne    c00184d0 <fatWrapperIoctl+0xfc>
c00184b7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00184bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00184bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184c3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00184c9:	b8 00 00 00 00       	mov    eax,0x0
c00184ce:	eb 18                	jmp    c00184e8 <fatWrapperIoctl+0x114>
c00184d0:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00184d5:	75 09                	jne    c00184e0 <fatWrapperIoctl+0x10c>
c00184d7:	b8 00 00 00 00       	mov    eax,0x0
c00184dc:	eb 0a                	jmp    c00184e8 <fatWrapperIoctl+0x114>
c00184de:	66 90                	xchg   ax,ax
c00184e0:	b8 04 00 00 00       	mov    eax,0x4
c00184e5:	8d 76 00             	lea    esi,[esi+0x0]
c00184e8:	83 c4 28             	add    esp,0x28
c00184eb:	5b                   	pop    ebx
c00184ec:	c3                   	ret    
c00184ed:	90                   	nop
c00184ee:	66 90                	xchg   ax,ax

c00184f0 <FAT::FAT()>:
c00184f0:	83 ec 1c             	sub    esp,0x1c
c00184f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184f7:	83 ec 0c             	sub    esp,0xc
c00184fa:	50                   	push   eax
c00184fb:	e8 74 24 ff ff       	call   c000a974 <Filesystem::Filesystem()>
c0018500:	83 c4 10             	add    esp,0x10
c0018503:	ba 0c 0f 02 c0       	mov    edx,0xc0020f0c
c0018508:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001850c:	89 10                	mov    DWORD PTR [eax],edx
c001850e:	c7 05 20 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027220,0x0
c0018518:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018520:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018525:	7f 15                	jg     c001853c <FAT::FAT()+0x4c>
c0018527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001852b:	c7 04 85 40 72 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8dc0],0xffffffff
c0018536:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001853a:	eb e4                	jmp    c0018520 <FAT::FAT()+0x30>
c001853c:	90                   	nop
c001853d:	83 c4 1c             	add    esp,0x1c
c0018540:	c3                   	ret    
c0018541:	90                   	nop
c0018542:	66 90                	xchg   ax,ax

c0018544 <FAT::fixFilepath(char*)>:
c0018544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018548:	8a 00                	mov    al,BYTE PTR [eax]
c001854a:	3c 40                	cmp    al,0x40
c001854c:	7e 2e                	jle    c001857c <FAT::fixFilepath(char*)+0x38>
c001854e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018552:	8a 00                	mov    al,BYTE PTR [eax]
c0018554:	83 e8 41             	sub    eax,0x41
c0018557:	88 c2                	mov    dl,al
c0018559:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001855d:	88 10                	mov    BYTE PTR [eax],dl
c001855f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018563:	8a 00                	mov    al,BYTE PTR [eax]
c0018565:	0f be c0             	movsx  eax,al
c0018568:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c001856f:	83 c0 30             	add    eax,0x30
c0018572:	88 c2                	mov    dl,al
c0018574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018578:	88 10                	mov    BYTE PTR [eax],dl
c001857a:	66 90                	xchg   ax,ax
c001857c:	90                   	nop
c001857d:	c3                   	ret    
c001857e:	66 90                	xchg   ax,ax

c0018580 <FAT::open(char const*, void**, FileOpenMode)>:
c0018580:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018586:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001858e:	74 0c                	je     c001859c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018590:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018598:	75 0e                	jne    c00185a8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001859a:	66 90                	xchg   ax,ax
c001859c:	b8 04 00 00 00       	mov    eax,0x4
c00185a1:	e9 0a 01 00 00       	jmp    c00186b0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00185a6:	66 90                	xchg   ax,ax
c00185a8:	83 ec 08             	sub    esp,0x8
c00185ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00185b2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00185b6:	50                   	push   eax
c00185b7:	e8 34 80 fe ff       	call   c00005f0 <strcpy>
c00185bc:	83 c4 10             	add    esp,0x10
c00185bf:	83 ec 08             	sub    esp,0x8
c00185c2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00185c6:	50                   	push   eax
c00185c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00185ce:	e8 71 ff ff ff       	call   c0018544 <FAT::fixFilepath(char*)>
c00185d3:	83 c4 10             	add    esp,0x10
c00185d6:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00185de:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00185e5:	83 e0 01             	and    eax,0x1
c00185e8:	74 0a                	je     c00185f4 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00185ea:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00185f2:	66 90                	xchg   ax,ax
c00185f4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00185fb:	83 e0 04             	and    eax,0x4
c00185fe:	74 10                	je     c0018610 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0018600:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0018608:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0018610:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018617:	83 e0 02             	and    eax,0x2
c001861a:	74 08                	je     c0018624 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001861c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0018624:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001862b:	83 e0 08             	and    eax,0x8
c001862e:	74 08                	je     c0018638 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0018630:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0018638:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001863f:	83 e0 10             	and    eax,0x10
c0018642:	74 08                	je     c001864c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018644:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001864c:	83 ec 0c             	sub    esp,0xc
c001864f:	68 28 02 00 00       	push   0x228
c0018654:	e8 0a f2 fe ff       	call   c0007863 <malloc>
c0018659:	83 c4 10             	add    esp,0x10
c001865c:	89 c2                	mov    edx,eax
c001865e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018665:	89 10                	mov    DWORD PTR [eax],edx
c0018667:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001866e:	31 d2                	xor    edx,edx
c0018670:	88 c2                	mov    dl,al
c0018672:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018679:	8b 00                	mov    eax,DWORD PTR [eax]
c001867b:	83 ec 04             	sub    esp,0x4
c001867e:	52                   	push   edx
c001867f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018683:	52                   	push   edx
c0018684:	50                   	push   eax
c0018685:	e8 82 b4 fe ff       	call   c0003b0c <f_open>
c001868a:	83 c4 10             	add    esp,0x10
c001868d:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018694:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001869c:	74 0a                	je     c00186a8 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c001869e:	b8 01 00 00 00       	mov    eax,0x1
c00186a3:	eb 0b                	jmp    c00186b0 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00186a5:	8d 76 00             	lea    esi,[esi+0x0]
c00186a8:	b8 00 00 00 00       	mov    eax,0x0
c00186ad:	8d 76 00             	lea    esi,[esi+0x0]
c00186b0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00186b6:	c3                   	ret    
c00186b7:	90                   	nop

c00186b8 <FAT::openDir(char const*, void**)>:
c00186b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00186be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00186c6:	74 0c                	je     c00186d4 <FAT::openDir(char const*, void**)+0x1c>
c00186c8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00186d0:	75 0e                	jne    c00186e0 <FAT::openDir(char const*, void**)+0x28>
c00186d2:	66 90                	xchg   ax,ax
c00186d4:	b8 04 00 00 00       	mov    eax,0x4
c00186d9:	e9 82 00 00 00       	jmp    c0018760 <FAT::openDir(char const*, void**)+0xa8>
c00186de:	66 90                	xchg   ax,ax
c00186e0:	83 ec 08             	sub    esp,0x8
c00186e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00186ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c00186ee:	50                   	push   eax
c00186ef:	e8 fc 7e fe ff       	call   c00005f0 <strcpy>
c00186f4:	83 c4 10             	add    esp,0x10
c00186f7:	83 ec 08             	sub    esp,0x8
c00186fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00186fe:	50                   	push   eax
c00186ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018706:	e8 39 fe ff ff       	call   c0018544 <FAT::fixFilepath(char*)>
c001870b:	83 c4 10             	add    esp,0x10
c001870e:	83 ec 0c             	sub    esp,0xc
c0018711:	6a 30                	push   0x30
c0018713:	e8 4b f1 fe ff       	call   c0007863 <malloc>
c0018718:	83 c4 10             	add    esp,0x10
c001871b:	89 c2                	mov    edx,eax
c001871d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018724:	89 10                	mov    DWORD PTR [eax],edx
c0018726:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001872d:	8b 00                	mov    eax,DWORD PTR [eax]
c001872f:	83 ec 08             	sub    esp,0x8
c0018732:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018736:	52                   	push   edx
c0018737:	50                   	push   eax
c0018738:	e8 58 bd fe ff       	call   c0004495 <f_opendir>
c001873d:	83 c4 10             	add    esp,0x10
c0018740:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018747:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001874f:	74 07                	je     c0018758 <FAT::openDir(char const*, void**)+0xa0>
c0018751:	b8 01 00 00 00       	mov    eax,0x1
c0018756:	eb 08                	jmp    c0018760 <FAT::openDir(char const*, void**)+0xa8>
c0018758:	b8 00 00 00 00       	mov    eax,0x0
c001875d:	8d 76 00             	lea    esi,[esi+0x0]
c0018760:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018766:	c3                   	ret    
c0018767:	90                   	nop

c0018768 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018768:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001876e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018776:	75 0c                	jne    c0018784 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018778:	b8 04 00 00 00       	mov    eax,0x4
c001877d:	e9 d6 00 00 00       	jmp    c0018858 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018782:	66 90                	xchg   ax,ax
c0018784:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001878c:	75 0a                	jne    c0018798 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001878e:	b8 04 00 00 00       	mov    eax,0x4
c0018793:	e9 c0 00 00 00       	jmp    c0018858 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018798:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00187a0:	75 0a                	jne    c00187ac <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00187a2:	b8 04 00 00 00       	mov    eax,0x4
c00187a7:	e9 ac 00 00 00       	jmp    c0018858 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00187ac:	83 ec 08             	sub    esp,0x8
c00187af:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00187b6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00187bd:	50                   	push   eax
c00187be:	e8 2d 7e fe ff       	call   c00005f0 <strcpy>
c00187c3:	83 c4 10             	add    esp,0x10
c00187c6:	83 ec 08             	sub    esp,0x8
c00187c9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00187d0:	50                   	push   eax
c00187d1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00187d8:	e8 67 fd ff ff       	call   c0018544 <FAT::fixFilepath(char*)>
c00187dd:	83 c4 10             	add    esp,0x10
c00187e0:	83 ec 08             	sub    esp,0x8
c00187e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187e7:	50                   	push   eax
c00187e8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00187ef:	50                   	push   eax
c00187f0:	e8 1f be fe ff       	call   c0004614 <f_stat>
c00187f5:	83 c4 10             	add    esp,0x10
c00187f8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00187ff:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018806:	85 c0                	test   eax,eax
c0018808:	74 0a                	je     c0018814 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001880a:	83 f8 04             	cmp    eax,0x4
c001880d:	74 39                	je     c0018848 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001880f:	eb 3f                	jmp    c0018850 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018811:	8d 76 00             	lea    esi,[esi+0x0]
c0018814:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018818:	25 ff 00 00 00       	and    eax,0xff
c001881d:	83 e0 10             	and    eax,0x10
c0018820:	0f 95 c2             	setne  dl
c0018823:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001882a:	88 10                	mov    BYTE PTR [eax],dl
c001882c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018830:	ba 00 00 00 00       	mov    edx,0x0
c0018835:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001883c:	89 01                	mov    DWORD PTR [ecx],eax
c001883e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018841:	b8 00 00 00 00       	mov    eax,0x0
c0018846:	eb 10                	jmp    c0018858 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018848:	b8 02 00 00 00       	mov    eax,0x2
c001884d:	eb 09                	jmp    c0018858 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001884f:	90                   	nop
c0018850:	b8 01 00 00 00       	mov    eax,0x1
c0018855:	8d 76 00             	lea    esi,[esi+0x0]
c0018858:	81 c4 2c 02 00 00    	add    esp,0x22c
c001885e:	c3                   	ret    
c001885f:	90                   	nop

c0018860 <FAT::unlink(char const*)>:
c0018860:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018866:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001886e:	75 08                	jne    c0018878 <FAT::unlink(char const*)+0x18>
c0018870:	b8 04 00 00 00       	mov    eax,0x4
c0018875:	eb 61                	jmp    c00188d8 <FAT::unlink(char const*)+0x78>
c0018877:	90                   	nop
c0018878:	83 ec 08             	sub    esp,0x8
c001887b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018882:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018886:	50                   	push   eax
c0018887:	e8 64 7d fe ff       	call   c00005f0 <strcpy>
c001888c:	83 c4 10             	add    esp,0x10
c001888f:	83 ec 08             	sub    esp,0x8
c0018892:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018896:	50                   	push   eax
c0018897:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001889e:	e8 a1 fc ff ff       	call   c0018544 <FAT::fixFilepath(char*)>
c00188a3:	83 c4 10             	add    esp,0x10
c00188a6:	83 ec 0c             	sub    esp,0xc
c00188a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00188ad:	50                   	push   eax
c00188ae:	e8 c6 bf fe ff       	call   c0004879 <f_unlink>
c00188b3:	83 c4 10             	add    esp,0x10
c00188b6:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00188bd:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00188c4:	85 c0                	test   eax,eax
c00188c6:	75 08                	jne    c00188d0 <FAT::unlink(char const*)+0x70>
c00188c8:	b8 00 00 00 00       	mov    eax,0x0
c00188cd:	eb 09                	jmp    c00188d8 <FAT::unlink(char const*)+0x78>
c00188cf:	90                   	nop
c00188d0:	b8 01 00 00 00       	mov    eax,0x1
c00188d5:	8d 76 00             	lea    esi,[esi+0x0]
c00188d8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00188de:	c3                   	ret    
c00188df:	90                   	nop

c00188e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00188e0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00188e6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00188ed:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00188f4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00188f8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00188fc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018904:	75 0a                	jne    c0018910 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0018906:	b8 04 00 00 00       	mov    eax,0x4
c001890b:	e9 54 01 00 00       	jmp    c0018a64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0018910:	83 ec 08             	sub    esp,0x8
c0018913:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001891a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001891e:	50                   	push   eax
c001891f:	e8 cc 7c fe ff       	call   c00005f0 <strcpy>
c0018924:	83 c4 10             	add    esp,0x10
c0018927:	83 ec 08             	sub    esp,0x8
c001892a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001892e:	50                   	push   eax
c001892f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018936:	e8 09 fc ff ff       	call   c0018544 <FAT::fixFilepath(char*)>
c001893b:	83 c4 10             	add    esp,0x10
c001893e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018946:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001894e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018952:	25 ff 00 00 00       	and    eax,0xff
c0018957:	83 e0 01             	and    eax,0x1
c001895a:	74 08                	je     c0018964 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001895c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0018964:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018968:	25 ff 00 00 00       	and    eax,0xff
c001896d:	83 e0 02             	and    eax,0x2
c0018970:	74 0a                	je     c001897c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0018972:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001897a:	66 90                	xchg   ax,ax
c001897c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018980:	25 ff 00 00 00       	and    eax,0xff
c0018985:	83 e0 04             	and    eax,0x4
c0018988:	74 0a                	je     c0018994 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001898a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0018992:	66 90                	xchg   ax,ax
c0018994:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018998:	25 ff 00 00 00       	and    eax,0xff
c001899d:	83 e0 08             	and    eax,0x8
c00189a0:	74 0a                	je     c00189ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00189a2:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00189aa:	66 90                	xchg   ax,ax
c00189ac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00189b0:	25 ff 00 00 00       	and    eax,0xff
c00189b5:	83 e0 01             	and    eax,0x1
c00189b8:	74 0a                	je     c00189c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00189ba:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00189c2:	66 90                	xchg   ax,ax
c00189c4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00189c8:	25 ff 00 00 00       	and    eax,0xff
c00189cd:	83 e0 02             	and    eax,0x2
c00189d0:	74 0a                	je     c00189dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00189d2:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00189da:	66 90                	xchg   ax,ax
c00189dc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00189e0:	25 ff 00 00 00       	and    eax,0xff
c00189e5:	83 e0 04             	and    eax,0x4
c00189e8:	74 0a                	je     c00189f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00189ea:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00189f2:	66 90                	xchg   ax,ax
c00189f4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00189f8:	25 ff 00 00 00       	and    eax,0xff
c00189fd:	83 e0 08             	and    eax,0x8
c0018a00:	74 0a                	je     c0018a0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0018a02:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0018a0a:	66 90                	xchg   ax,ax
c0018a0c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018a13:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0018a1a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018a21:	31 d2                	xor    edx,edx
c0018a23:	88 c2                	mov    dl,al
c0018a25:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018a2c:	25 ff 00 00 00       	and    eax,0xff
c0018a31:	83 ec 04             	sub    esp,0x4
c0018a34:	52                   	push   edx
c0018a35:	50                   	push   eax
c0018a36:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018a3a:	50                   	push   eax
c0018a3b:	e8 aa c2 fe ff       	call   c0004cea <f_chmod>
c0018a40:	83 c4 10             	add    esp,0x10
c0018a43:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0018a4a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0018a51:	85 c0                	test   eax,eax
c0018a53:	75 07                	jne    c0018a5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0018a55:	b8 00 00 00 00       	mov    eax,0x0
c0018a5a:	eb 08                	jmp    c0018a64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0018a5c:	b8 01 00 00 00       	mov    eax,0x1
c0018a61:	8d 76 00             	lea    esi,[esi+0x0]
c0018a64:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018a6a:	c3                   	ret    
c0018a6b:	90                   	nop

c0018a6c <FAT::rename(char const*, char const*)>:
c0018a6c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0018a72:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0018a7a:	74 0c                	je     c0018a88 <FAT::rename(char const*, char const*)+0x1c>
c0018a7c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0018a84:	75 0e                	jne    c0018a94 <FAT::rename(char const*, char const*)+0x28>
c0018a86:	66 90                	xchg   ax,ax
c0018a88:	b8 04 00 00 00       	mov    eax,0x4
c0018a8d:	e9 9e 00 00 00       	jmp    c0018b30 <FAT::rename(char const*, char const*)+0xc4>
c0018a92:	66 90                	xchg   ax,ax
c0018a94:	83 ec 08             	sub    esp,0x8
c0018a97:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018a9e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0018aa5:	50                   	push   eax
c0018aa6:	e8 45 7b fe ff       	call   c00005f0 <strcpy>
c0018aab:	83 c4 10             	add    esp,0x10
c0018aae:	83 ec 08             	sub    esp,0x8
c0018ab1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0018ab8:	50                   	push   eax
c0018ab9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018ac0:	e8 7f fa ff ff       	call   c0018544 <FAT::fixFilepath(char*)>
c0018ac5:	83 c4 10             	add    esp,0x10
c0018ac8:	83 ec 08             	sub    esp,0x8
c0018acb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0018ad2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ad6:	50                   	push   eax
c0018ad7:	e8 14 7b fe ff       	call   c00005f0 <strcpy>
c0018adc:	83 c4 10             	add    esp,0x10
c0018adf:	83 ec 08             	sub    esp,0x8
c0018ae2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018ae6:	50                   	push   eax
c0018ae7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018aee:	e8 51 fa ff ff       	call   c0018544 <FAT::fixFilepath(char*)>
c0018af3:	83 c4 10             	add    esp,0x10
c0018af6:	83 ec 08             	sub    esp,0x8
c0018af9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018afd:	50                   	push   eax
c0018afe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0018b05:	50                   	push   eax
c0018b06:	e8 29 c0 fe ff       	call   c0004b34 <f_rename>
c0018b0b:	83 c4 10             	add    esp,0x10
c0018b0e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0018b15:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0018b1c:	85 c0                	test   eax,eax
c0018b1e:	75 08                	jne    c0018b28 <FAT::rename(char const*, char const*)+0xbc>
c0018b20:	b8 00 00 00 00       	mov    eax,0x0
c0018b25:	eb 09                	jmp    c0018b30 <FAT::rename(char const*, char const*)+0xc4>
c0018b27:	90                   	nop
c0018b28:	b8 01 00 00 00       	mov    eax,0x1
c0018b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018b30:	81 c4 1c 02 00 00    	add    esp,0x21c
c0018b36:	c3                   	ret    
c0018b37:	90                   	nop

c0018b38 <FAT::mkdir(char const*)>:
c0018b38:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018b3e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018b46:	75 08                	jne    c0018b50 <FAT::mkdir(char const*)+0x18>
c0018b48:	b8 04 00 00 00       	mov    eax,0x4
c0018b4d:	eb 61                	jmp    c0018bb0 <FAT::mkdir(char const*)+0x78>
c0018b4f:	90                   	nop
c0018b50:	83 ec 08             	sub    esp,0x8
c0018b53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b5a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b5e:	50                   	push   eax
c0018b5f:	e8 8c 7a fe ff       	call   c00005f0 <strcpy>
c0018b64:	83 c4 10             	add    esp,0x10
c0018b67:	83 ec 08             	sub    esp,0x8
c0018b6a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018b6e:	50                   	push   eax
c0018b6f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b76:	e8 c9 f9 ff ff       	call   c0018544 <FAT::fixFilepath(char*)>
c0018b7b:	83 c4 10             	add    esp,0x10
c0018b7e:	83 ec 0c             	sub    esp,0xc
c0018b81:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b85:	50                   	push   eax
c0018b86:	e8 0e be fe ff       	call   c0004999 <f_mkdir>
c0018b8b:	83 c4 10             	add    esp,0x10
c0018b8e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018b95:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018b9c:	85 c0                	test   eax,eax
c0018b9e:	75 08                	jne    c0018ba8 <FAT::mkdir(char const*)+0x70>
c0018ba0:	b8 00 00 00 00       	mov    eax,0x0
c0018ba5:	eb 09                	jmp    c0018bb0 <FAT::mkdir(char const*)+0x78>
c0018ba7:	90                   	nop
c0018ba8:	b8 01 00 00 00       	mov    eax,0x1
c0018bad:	8d 76 00             	lea    esi,[esi+0x0]
c0018bb0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018bb6:	c3                   	ret    
c0018bb7:	90                   	nop

c0018bb8 <FAT::exists(char const*)>:
c0018bb8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018bbe:	83 ec 08             	sub    esp,0x8
c0018bc1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018bc8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018bcc:	50                   	push   eax
c0018bcd:	e8 1e 7a fe ff       	call   c00005f0 <strcpy>
c0018bd2:	83 c4 10             	add    esp,0x10
c0018bd5:	83 ec 08             	sub    esp,0x8
c0018bd8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018bdc:	50                   	push   eax
c0018bdd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018be4:	e8 5b f9 ff ff       	call   c0018544 <FAT::fixFilepath(char*)>
c0018be9:	83 c4 10             	add    esp,0x10
c0018bec:	83 ec 08             	sub    esp,0x8
c0018bef:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0018bf6:	50                   	push   eax
c0018bf7:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018bfb:	50                   	push   eax
c0018bfc:	e8 13 ba fe ff       	call   c0004614 <f_stat>
c0018c01:	83 c4 10             	add    esp,0x10
c0018c04:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018c0b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018c12:	85 c0                	test   eax,eax
c0018c14:	75 06                	jne    c0018c1c <FAT::exists(char const*)+0x64>
c0018c16:	b0 01                	mov    al,0x1
c0018c18:	eb 06                	jmp    c0018c20 <FAT::exists(char const*)+0x68>
c0018c1a:	66 90                	xchg   ax,ax
c0018c1c:	b0 00                	mov    al,0x0
c0018c1e:	66 90                	xchg   ax,ax
c0018c20:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018c26:	c3                   	ret    
c0018c27:	90                   	nop

c0018c28 <isoReadDiscSectorHelper>:
c0018c28:	83 ec 2c             	sub    esp,0x2c
c0018c2b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018c2f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018c33:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0018c38:	83 e8 41             	sub    eax,0x41
c0018c3b:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0018c42:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018c46:	ba 00 00 00 00       	mov    edx,0x0
c0018c4b:	83 ec 0c             	sub    esp,0xc
c0018c4e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018c52:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c56:	52                   	push   edx
c0018c57:	50                   	push   eax
c0018c58:	51                   	push   ecx
c0018c59:	e8 3a 41 ff ff       	call   c000cd98 <LogicalDisk::read(unsigned long long, int, void*)>
c0018c5e:	83 c4 20             	add    esp,0x20
c0018c61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018c65:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018c6a:	74 0c                	je     c0018c78 <isoReadDiscSectorHelper+0x50>
c0018c6c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c70:	c1 e0 0b             	shl    eax,0xb
c0018c73:	eb 0b                	jmp    c0018c80 <isoReadDiscSectorHelper+0x58>
c0018c75:	8d 76 00             	lea    esi,[esi+0x0]
c0018c78:	b8 00 00 00 00       	mov    eax,0x0
c0018c7d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c80:	83 c4 2c             	add    esp,0x2c
c0018c83:	c3                   	ret    

c0018c84 <iso_kprintf>:
c0018c84:	83 ec 0c             	sub    esp,0xc
c0018c87:	83 ec 08             	sub    esp,0x8
c0018c8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018c8e:	68 19 09 02 c0       	push   0xc0020919
c0018c93:	e8 bb 19 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0018c98:	83 c4 10             	add    esp,0x10
c0018c9b:	90                   	nop
c0018c9c:	83 c4 0c             	add    esp,0xc
c0018c9f:	c3                   	ret    

c0018ca0 <iso_kprintfd>:
c0018ca0:	83 ec 0c             	sub    esp,0xc
c0018ca3:	83 ec 08             	sub    esp,0x8
c0018ca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018caa:	68 37 f9 01 c0       	push   0xc001f937
c0018caf:	e8 9f 19 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0018cb4:	83 c4 10             	add    esp,0x10
c0018cb7:	90                   	nop
c0018cb8:	83 c4 0c             	add    esp,0xc
c0018cbb:	c3                   	ret    

c0018cbc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0018cbc:	b8 08 00 00 00       	mov    eax,0x8
c0018cc1:	c3                   	ret    

c0018cc2 <ISO9660::getName()>:
c0018cc2:	b8 6c 0f 02 c0       	mov    eax,0xc0020f6c
c0018cc7:	c3                   	ret    

c0018cc8 <ISO9660::closeDir(void*)>:
c0018cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ccc:	8b 00                	mov    eax,DWORD PTR [eax]
c0018cce:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0018cd1:	90                   	nop

c0018cd2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0018cd2:	b8 01 00 00 00       	mov    eax,0x1
c0018cd7:	c3                   	ret    

c0018cd8 <ISO9660::unlink(char const*)>:
c0018cd8:	b8 01 00 00 00       	mov    eax,0x1
c0018cdd:	c3                   	ret    

c0018cde <ISO9660::write(void*, unsigned long, void*, int*)>:
c0018cde:	b8 03 00 00 00       	mov    eax,0x3
c0018ce3:	c3                   	ret    

c0018ce4 <ISO9660::rename(char const*, char const*)>:
c0018ce4:	b8 01 00 00 00       	mov    eax,0x1
c0018ce9:	c3                   	ret    

c0018cea <ISO9660::mkdir(char const*)>:
c0018cea:	b8 01 00 00 00       	mov    eax,0x1
c0018cef:	c3                   	ret    

c0018cf0 <ISO9660::~ISO9660()>:
c0018cf0:	83 ec 0c             	sub    esp,0xc
c0018cf3:	ba ac 10 02 c0       	mov    edx,0xc00210ac
c0018cf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cfc:	89 10                	mov    DWORD PTR [eax],edx
c0018cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d02:	83 ec 0c             	sub    esp,0xc
c0018d05:	50                   	push   eax
c0018d06:	e8 8d 1c ff ff       	call   c000a998 <Filesystem::~Filesystem()>
c0018d0b:	83 c4 10             	add    esp,0x10
c0018d0e:	90                   	nop
c0018d0f:	83 c4 0c             	add    esp,0xc
c0018d12:	c3                   	ret    
c0018d13:	90                   	nop

c0018d14 <ISO9660::~ISO9660()>:
c0018d14:	83 ec 0c             	sub    esp,0xc
c0018d17:	83 ec 0c             	sub    esp,0xc
c0018d1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d1e:	e8 cd ff ff ff       	call   c0018cf0 <ISO9660::~ISO9660()>
c0018d23:	83 c4 10             	add    esp,0x10
c0018d26:	83 ec 08             	sub    esp,0x8
c0018d29:	6a 08                	push   0x8
c0018d2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d2f:	e8 29 18 ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c0018d34:	83 c4 10             	add    esp,0x10
c0018d37:	83 c4 0c             	add    esp,0xc
c0018d3a:	c3                   	ret    
c0018d3b:	90                   	nop

c0018d3c <ISO9660::exists(char const*)>:
c0018d3c:	83 ec 18             	sub    esp,0x18
c0018d3f:	68 87 0f 02 c0       	push   0xc0020f87
c0018d44:	e8 be 76 ff ff       	call   c0010407 <KePanic(char const*)>
c0018d49:	31 c0                	xor    eax,eax
c0018d4b:	83 c4 1c             	add    esp,0x1c
c0018d4e:	c3                   	ret    
c0018d4f:	90                   	nop

c0018d50 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0018d50:	56                   	push   esi
c0018d51:	53                   	push   ebx
c0018d52:	53                   	push   ebx
c0018d53:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018d57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d5b:	85 db                	test   ebx,ebx
c0018d5d:	0f 84 c2 00 00 00    	je     c0018e25 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c0018d63:	85 f6                	test   esi,esi
c0018d65:	0f 84 ba 00 00 00    	je     c0018e25 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c0018d6b:	b8 03 00 00 00       	mov    eax,0x3
c0018d70:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0018d75:	0f 85 af 00 00 00    	jne    c0018e2a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018d7b:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018d80:	38 03                	cmp    BYTE PTR [ebx],al
c0018d82:	74 1b                	je     c0018d9f <ISO9660::open(char const*, void**, FileOpenMode)+0x4f>
c0018d84:	84 c0                	test   al,al
c0018d86:	74 10                	je     c0018d98 <ISO9660::open(char const*, void**, FileOpenMode)+0x48>
c0018d88:	83 ec 0c             	sub    esp,0xc
c0018d8b:	68 a5 0f 02 c0       	push   0xc0020fa5
c0018d90:	e8 72 76 ff ff       	call   c0010407 <KePanic(char const*)>
c0018d95:	83 c4 10             	add    esp,0x10
c0018d98:	8a 03                	mov    al,BYTE PTR [ebx]
c0018d9a:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018d9f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018da2:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018da9:	85 c0                	test   eax,eax
c0018dab:	74 09                	je     c0018db6 <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c0018dad:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018db4:	74 48                	je     c0018dfe <ISO9660::open(char const*, void**, FileOpenMode)+0xae>
c0018db6:	83 ec 0c             	sub    esp,0xc
c0018db9:	68 b5 0f 02 c0       	push   0xc0020fb5
c0018dbe:	e8 90 18 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0018dc3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018dc6:	83 c4 10             	add    esp,0x10
c0018dc9:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018dd0:	85 c0                	test   eax,eax
c0018dd2:	74 17                	je     c0018deb <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c0018dd4:	83 ec 0c             	sub    esp,0xc
c0018dd7:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018dde:	68 d5 0f 02 c0       	push   0xc0020fd5
c0018de3:	e8 6b 18 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0018de8:	83 c4 10             	add    esp,0x10
c0018deb:	83 ec 0c             	sub    esp,0xc
c0018dee:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018df5:	50                   	push   eax
c0018df6:	e8 41 da fe ff       	call   c000683c <init_percd>
c0018dfb:	83 c4 10             	add    esp,0x10
c0018dfe:	51                   	push   ecx
c0018dff:	83 c3 03             	add    ebx,0x3
c0018e02:	51                   	push   ecx
c0018e03:	6a 00                	push   0x0
c0018e05:	53                   	push   ebx
c0018e06:	e8 f9 d4 fe ff       	call   c0006304 <iso_open>
c0018e0b:	89 c2                	mov    edx,eax
c0018e0d:	83 c4 10             	add    esp,0x10
c0018e10:	b8 01 00 00 00       	mov    eax,0x1
c0018e15:	83 fa ff             	cmp    edx,0xffffffff
c0018e18:	74 10                	je     c0018e2a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018e1a:	83 c2 32             	add    edx,0x32
c0018e1d:	31 c0                	xor    eax,eax
c0018e1f:	01 d2                	add    edx,edx
c0018e21:	89 16                	mov    DWORD PTR [esi],edx
c0018e23:	eb 05                	jmp    c0018e2a <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018e25:	b8 04 00 00 00       	mov    eax,0x4
c0018e2a:	5a                   	pop    edx
c0018e2b:	5b                   	pop    ebx
c0018e2c:	5e                   	pop    esi
c0018e2d:	c3                   	ret    

c0018e2e <ISO9660::read(void*, unsigned long, void*, int*)>:
c0018e2e:	53                   	push   ebx
c0018e2f:	83 ec 08             	sub    esp,0x8
c0018e32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e36:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018e3a:	85 c0                	test   eax,eax
c0018e3c:	74 2d                	je     c0018e6b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0018e3e:	85 db                	test   ebx,ebx
c0018e40:	74 29                	je     c0018e6b <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0018e42:	52                   	push   edx
c0018e43:	b9 02 00 00 00       	mov    ecx,0x2
c0018e48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018e50:	99                   	cdq    
c0018e51:	f7 f9                	idiv   ecx
c0018e53:	83 e8 32             	sub    eax,0x32
c0018e56:	50                   	push   eax
c0018e57:	e8 50 d5 fe ff       	call   c00063ac <iso_read>
c0018e5c:	83 c4 10             	add    esp,0x10
c0018e5f:	89 03                	mov    DWORD PTR [ebx],eax
c0018e61:	09 d0                	or     eax,edx
c0018e63:	0f 94 c0             	sete   al
c0018e66:	0f b6 c0             	movzx  eax,al
c0018e69:	eb 05                	jmp    c0018e70 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0018e6b:	b8 04 00 00 00       	mov    eax,0x4
c0018e70:	83 c4 08             	add    esp,0x8
c0018e73:	5b                   	pop    ebx
c0018e74:	c3                   	ret    
c0018e75:	90                   	nop

c0018e76 <ISO9660::seek(void*, unsigned long long)>:
c0018e76:	57                   	push   edi
c0018e77:	b8 04 00 00 00       	mov    eax,0x4
c0018e7c:	56                   	push   esi
c0018e7d:	51                   	push   ecx
c0018e7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018e82:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018e86:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018e8a:	85 d2                	test   edx,edx
c0018e8c:	74 26                	je     c0018eb4 <ISO9660::seek(void*, unsigned long long)+0x3e>
c0018e8e:	89 d0                	mov    eax,edx
c0018e90:	6a 00                	push   0x0
c0018e92:	b9 02 00 00 00       	mov    ecx,0x2
c0018e97:	57                   	push   edi
c0018e98:	99                   	cdq    
c0018e99:	f7 f9                	idiv   ecx
c0018e9b:	56                   	push   esi
c0018e9c:	83 e8 32             	sub    eax,0x32
c0018e9f:	50                   	push   eax
c0018ea0:	e8 1d d6 fe ff       	call   c00064c2 <iso_seek>
c0018ea5:	31 f0                	xor    eax,esi
c0018ea7:	31 fa                	xor    edx,edi
c0018ea9:	83 c4 10             	add    esp,0x10
c0018eac:	09 d0                	or     eax,edx
c0018eae:	0f 95 c0             	setne  al
c0018eb1:	0f b6 c0             	movzx  eax,al
c0018eb4:	5a                   	pop    edx
c0018eb5:	5e                   	pop    esi
c0018eb6:	5f                   	pop    edi
c0018eb7:	c3                   	ret    

c0018eb8 <ISO9660::tell(void*, unsigned long long*)>:
c0018eb8:	53                   	push   ebx
c0018eb9:	83 ec 08             	sub    esp,0x8
c0018ebc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ec0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018ec4:	85 c0                	test   eax,eax
c0018ec6:	74 24                	je     c0018eec <ISO9660::tell(void*, unsigned long long*)+0x34>
c0018ec8:	85 db                	test   ebx,ebx
c0018eca:	74 20                	je     c0018eec <ISO9660::tell(void*, unsigned long long*)+0x34>
c0018ecc:	b9 02 00 00 00       	mov    ecx,0x2
c0018ed1:	83 ec 0c             	sub    esp,0xc
c0018ed4:	99                   	cdq    
c0018ed5:	f7 f9                	idiv   ecx
c0018ed7:	83 e8 32             	sub    eax,0x32
c0018eda:	50                   	push   eax
c0018edb:	e8 66 d6 fe ff       	call   c0006546 <iso_tell>
c0018ee0:	83 c4 10             	add    esp,0x10
c0018ee3:	89 03                	mov    DWORD PTR [ebx],eax
c0018ee5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0018ee8:	31 c0                	xor    eax,eax
c0018eea:	eb 05                	jmp    c0018ef1 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0018eec:	b8 04 00 00 00       	mov    eax,0x4
c0018ef1:	83 c4 08             	add    esp,0x8
c0018ef4:	5b                   	pop    ebx
c0018ef5:	c3                   	ret    

c0018ef6 <ISO9660::stat(void*, unsigned long long*)>:
c0018ef6:	53                   	push   ebx
c0018ef7:	83 ec 14             	sub    esp,0x14
c0018efa:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018efe:	68 f9 0f 02 c0       	push   0xc0020ff9
c0018f03:	e8 4b 17 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0018f08:	83 c4 10             	add    esp,0x10
c0018f0b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018f10:	74 2c                	je     c0018f3e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018f12:	85 db                	test   ebx,ebx
c0018f14:	74 28                	je     c0018f3e <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018f16:	83 ec 0c             	sub    esp,0xc
c0018f19:	b9 02 00 00 00       	mov    ecx,0x2
c0018f1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f22:	99                   	cdq    
c0018f23:	f7 f9                	idiv   ecx
c0018f25:	83 e8 32             	sub    eax,0x32
c0018f28:	50                   	push   eax
c0018f29:	e8 49 d6 fe ff       	call   c0006577 <iso_total>
c0018f2e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018f35:	89 03                	mov    DWORD PTR [ebx],eax
c0018f37:	83 c4 10             	add    esp,0x10
c0018f3a:	31 c0                	xor    eax,eax
c0018f3c:	eb 05                	jmp    c0018f43 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0018f3e:	b8 04 00 00 00       	mov    eax,0x4
c0018f43:	83 c4 08             	add    esp,0x8
c0018f46:	5b                   	pop    ebx
c0018f47:	c3                   	ret    

c0018f48 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0018f48:	55                   	push   ebp
c0018f49:	57                   	push   edi
c0018f4a:	56                   	push   esi
c0018f4b:	53                   	push   ebx
c0018f4c:	83 ec 18             	sub    esp,0x18
c0018f4f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0018f53:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018f57:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018f5b:	68 01 10 02 c0       	push   0xc0021001
c0018f60:	e8 ee 16 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0018f65:	83 c4 10             	add    esp,0x10
c0018f68:	85 ff                	test   edi,edi
c0018f6a:	0f 94 c2             	sete   dl
c0018f6d:	85 f6                	test   esi,esi
c0018f6f:	0f 94 c0             	sete   al
c0018f72:	08 c2                	or     dl,al
c0018f74:	0f 85 d5 00 00 00    	jne    c001904f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0018f7a:	85 db                	test   ebx,ebx
c0018f7c:	0f 84 cd 00 00 00    	je     c001904f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0018f82:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018f85:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0018f8b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0018f92:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018f97:	38 03                	cmp    BYTE PTR [ebx],al
c0018f99:	74 1b                	je     c0018fb6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x6e>
c0018f9b:	84 c0                	test   al,al
c0018f9d:	74 10                	je     c0018faf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x67>
c0018f9f:	83 ec 0c             	sub    esp,0xc
c0018fa2:	68 a5 0f 02 c0       	push   0xc0020fa5
c0018fa7:	e8 5b 74 ff ff       	call   c0010407 <KePanic(char const*)>
c0018fac:	83 c4 10             	add    esp,0x10
c0018faf:	8a 03                	mov    al,BYTE PTR [ebx]
c0018fb1:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018fb6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018fb9:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018fc0:	85 c0                	test   eax,eax
c0018fc2:	74 09                	je     c0018fcd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x85>
c0018fc4:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018fcb:	74 51                	je     c001901e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd6>
c0018fcd:	83 ec 0c             	sub    esp,0xc
c0018fd0:	68 09 10 02 c0       	push   0xc0021009
c0018fd5:	e8 79 16 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0018fda:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018fdd:	83 c4 10             	add    esp,0x10
c0018fe0:	83 3c 85 1c 63 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd9ce4],0x0
c0018fe8:	74 21                	je     c001900b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0018fea:	83 ec 0c             	sub    esp,0xc
c0018fed:	68 29 10 02 c0       	push   0xc0021029
c0018ff2:	e8 5c 16 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c0018ff7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018ffa:	83 c4 10             	add    esp,0x10
c0018ffd:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0019004:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001900b:	83 ec 0c             	sub    esp,0xc
c001900e:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0019015:	50                   	push   eax
c0019016:	e8 21 d8 fe ff       	call   c000683c <init_percd>
c001901b:	83 c4 10             	add    esp,0x10
c001901e:	52                   	push   edx
c001901f:	83 c3 03             	add    ebx,0x3
c0019022:	52                   	push   edx
c0019023:	6a 00                	push   0x0
c0019025:	53                   	push   ebx
c0019026:	e8 d9 d2 fe ff       	call   c0006304 <iso_open>
c001902b:	83 c4 10             	add    esp,0x10
c001902e:	89 c5                	mov    ebp,eax
c0019030:	83 f8 ff             	cmp    eax,0xffffffff
c0019033:	75 21                	jne    c0019056 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x10e>
c0019035:	50                   	push   eax
c0019036:	50                   	push   eax
c0019037:	6a 01                	push   0x1
c0019039:	53                   	push   ebx
c001903a:	e8 c5 d2 fe ff       	call   c0006304 <iso_open>
c001903f:	83 c4 10             	add    esp,0x10
c0019042:	ba 02 00 00 00       	mov    edx,0x2
c0019047:	40                   	inc    eax
c0019048:	74 2b                	je     c0019075 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c001904a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001904d:	eb 24                	jmp    c0019073 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12b>
c001904f:	ba 04 00 00 00       	mov    edx,0x4
c0019054:	eb 1f                	jmp    c0019075 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0019056:	83 ec 0c             	sub    esp,0xc
c0019059:	50                   	push   eax
c001905a:	e8 18 d5 fe ff       	call   c0006577 <iso_total>
c001905f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019066:	89 07                	mov    DWORD PTR [edi],eax
c0019068:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001906b:	e8 1e d3 fe ff       	call   c000638e <iso_close>
c0019070:	83 c4 10             	add    esp,0x10
c0019073:	31 d2                	xor    edx,edx
c0019075:	83 c4 0c             	add    esp,0xc
c0019078:	89 d0                	mov    eax,edx
c001907a:	5b                   	pop    ebx
c001907b:	5e                   	pop    esi
c001907c:	5f                   	pop    edi
c001907d:	5d                   	pop    ebp
c001907e:	c3                   	ret    
c001907f:	90                   	nop

c0019080 <ISO9660::close(void*)>:
c0019080:	83 ec 0c             	sub    esp,0xc
c0019083:	b8 04 00 00 00       	mov    eax,0x4
c0019088:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001908c:	85 d2                	test   edx,edx
c001908e:	74 1b                	je     c00190ab <ISO9660::close(void*)+0x2b>
c0019090:	89 d0                	mov    eax,edx
c0019092:	b9 02 00 00 00       	mov    ecx,0x2
c0019097:	99                   	cdq    
c0019098:	83 ec 0c             	sub    esp,0xc
c001909b:	f7 f9                	idiv   ecx
c001909d:	83 e8 32             	sub    eax,0x32
c00190a0:	50                   	push   eax
c00190a1:	e8 e8 d2 fe ff       	call   c000638e <iso_close>
c00190a6:	83 c4 10             	add    esp,0x10
c00190a9:	31 c0                	xor    eax,eax
c00190ab:	83 c4 0c             	add    esp,0xc
c00190ae:	c3                   	ret    
c00190af:	90                   	nop

c00190b0 <ISO9660::openDir(char const*, void**)>:
c00190b0:	56                   	push   esi
c00190b1:	53                   	push   ebx
c00190b2:	50                   	push   eax
c00190b3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00190b7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00190bb:	85 db                	test   ebx,ebx
c00190bd:	0f 84 b5 00 00 00    	je     c0019178 <ISO9660::openDir(char const*, void**)+0xc8>
c00190c3:	85 f6                	test   esi,esi
c00190c5:	0f 84 ad 00 00 00    	je     c0019178 <ISO9660::openDir(char const*, void**)+0xc8>
c00190cb:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c00190d0:	38 03                	cmp    BYTE PTR [ebx],al
c00190d2:	74 1b                	je     c00190ef <ISO9660::openDir(char const*, void**)+0x3f>
c00190d4:	84 c0                	test   al,al
c00190d6:	74 10                	je     c00190e8 <ISO9660::openDir(char const*, void**)+0x38>
c00190d8:	83 ec 0c             	sub    esp,0xc
c00190db:	68 a5 0f 02 c0       	push   0xc0020fa5
c00190e0:	e8 22 73 ff ff       	call   c0010407 <KePanic(char const*)>
c00190e5:	83 c4 10             	add    esp,0x10
c00190e8:	8a 03                	mov    al,BYTE PTR [ebx]
c00190ea:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c00190ef:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00190f2:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c00190f9:	85 c0                	test   eax,eax
c00190fb:	74 10                	je     c001910d <ISO9660::openDir(char const*, void**)+0x5d>
c00190fd:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019104:	74 1a                	je     c0019120 <ISO9660::openDir(char const*, void**)+0x70>
c0019106:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001910d:	83 ec 0c             	sub    esp,0xc
c0019110:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0019117:	50                   	push   eax
c0019118:	e8 1f d7 fe ff       	call   c000683c <init_percd>
c001911d:	83 c4 10             	add    esp,0x10
c0019120:	50                   	push   eax
c0019121:	83 c3 03             	add    ebx,0x3
c0019124:	50                   	push   eax
c0019125:	6a 01                	push   0x1
c0019127:	53                   	push   ebx
c0019128:	e8 d7 d1 fe ff       	call   c0006304 <iso_open>
c001912d:	83 c4 10             	add    esp,0x10
c0019130:	89 c3                	mov    ebx,eax
c0019132:	83 f8 ff             	cmp    eax,0xffffffff
c0019135:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001913a:	75 1c                	jne    c0019158 <ISO9660::openDir(char const*, void**)+0xa8>
c001913c:	53                   	push   ebx
c001913d:	53                   	push   ebx
c001913e:	68 4d 10 02 c0       	push   0xc002104d
c0019143:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019149:	e8 b8 f6 fe ff       	call   c0008806 <VgaText::puts(char const*)>
c001914e:	83 c4 10             	add    esp,0x10
c0019151:	b8 01 00 00 00       	mov    eax,0x1
c0019156:	eb 25                	jmp    c001917d <ISO9660::openDir(char const*, void**)+0xcd>
c0019158:	51                   	push   ecx
c0019159:	01 db                	add    ebx,ebx
c001915b:	51                   	push   ecx
c001915c:	83 c3 65             	add    ebx,0x65
c001915f:	68 60 10 02 c0       	push   0xc0021060
c0019164:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001916a:	e8 97 f6 fe ff       	call   c0008806 <VgaText::puts(char const*)>
c001916f:	89 1e                	mov    DWORD PTR [esi],ebx
c0019171:	83 c4 10             	add    esp,0x10
c0019174:	31 c0                	xor    eax,eax
c0019176:	eb 05                	jmp    c001917d <ISO9660::openDir(char const*, void**)+0xcd>
c0019178:	b8 04 00 00 00       	mov    eax,0x4
c001917d:	5a                   	pop    edx
c001917e:	5b                   	pop    ebx
c001917f:	5e                   	pop    esi
c0019180:	c3                   	ret    
c0019181:	90                   	nop

c0019182 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0019182:	55                   	push   ebp
c0019183:	57                   	push   edi
c0019184:	56                   	push   esi
c0019185:	53                   	push   ebx
c0019186:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001918c:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0019193:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001919a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00191a2:	0f 84 e7 00 00 00    	je     c001928f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00191a8:	85 db                	test   ebx,ebx
c00191aa:	0f 84 df 00 00 00    	je     c001928f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00191b0:	83 ec 0c             	sub    esp,0xc
c00191b3:	68 73 10 02 c0       	push   0xc0021073
c00191b8:	e8 96 14 ff ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c00191bd:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00191c4:	b9 02 00 00 00       	mov    ecx,0x2
c00191c9:	99                   	cdq    
c00191ca:	f7 f9                	idiv   ecx
c00191cc:	83 e8 32             	sub    eax,0x32
c00191cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00191d2:	e8 f1 d3 fe ff       	call   c00065c8 <iso_readdir>
c00191d7:	83 c4 10             	add    esp,0x10
c00191da:	89 c6                	mov    esi,eax
c00191dc:	85 c0                	test   eax,eax
c00191de:	75 37                	jne    c0019217 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c00191e0:	56                   	push   esi
c00191e1:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00191e6:	56                   	push   esi
c00191e7:	68 7e 10 02 c0       	push   0xc002107e
c00191ec:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00191f2:	e8 0f f6 fe ff       	call   c0008806 <VgaText::puts(char const*)>
c00191f7:	83 c4 0c             	add    esp,0xc
c00191fa:	68 10 01 00 00       	push   0x110
c00191ff:	6a 00                	push   0x0
c0019201:	57                   	push   edi
c0019202:	e8 b9 72 fe ff       	call   c00004c0 <memset>
c0019207:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001920d:	83 c4 10             	add    esp,0x10
c0019210:	b8 01 00 00 00       	mov    eax,0x1
c0019215:	eb 7d                	jmp    c0019294 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0019217:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001921d:	83 ec 0c             	sub    esp,0xc
c0019220:	8d 68 08             	lea    ebp,[eax+0x8]
c0019223:	55                   	push   ebp
c0019224:	e8 07 73 fe ff       	call   c0000530 <strlen>
c0019229:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019231:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019235:	83 c4 10             	add    esp,0x10
c0019238:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001923c:	75 0a                	jne    c0019248 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001923e:	b8 02 00 00 00       	mov    eax,0x2
c0019243:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0019246:	74 05                	je     c001924d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0019248:	b8 01 00 00 00       	mov    eax,0x1
c001924d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019251:	50                   	push   eax
c0019252:	50                   	push   eax
c0019253:	55                   	push   ebp
c0019254:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019258:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001925c:	50                   	push   eax
c001925d:	e8 8e 73 fe ff       	call   c00005f0 <strcpy>
c0019262:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0019269:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001926b:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0019271:	5a                   	pop    edx
c0019272:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0019277:	59                   	pop    ecx
c0019278:	68 91 10 02 c0       	push   0xc0021091
c001927d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019283:	e8 7e f5 fe ff       	call   c0008806 <VgaText::puts(char const*)>
c0019288:	83 c4 10             	add    esp,0x10
c001928b:	31 c0                	xor    eax,eax
c001928d:	eb 05                	jmp    c0019294 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001928f:	b8 04 00 00 00       	mov    eax,0x4
c0019294:	81 c4 1c 01 00 00    	add    esp,0x11c
c001929a:	5b                   	pop    ebx
c001929b:	5e                   	pop    esi
c001929c:	5f                   	pop    edi
c001929d:	5d                   	pop    ebp
c001929e:	c3                   	ret    

c001929f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001929f:	57                   	push   edi
c00192a0:	56                   	push   esi
c00192a1:	53                   	push   ebx
c00192a2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00192a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00192aa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00192ae:	39 35 24 73 02 c0    	cmp    DWORD PTR ds:0xc0027324,esi
c00192b4:	75 08                	jne    c00192be <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00192b6:	38 1d e4 1b 02 c0    	cmp    BYTE PTR ds:0xc0021be4,bl
c00192bc:	74 4a                	je     c0019308 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c00192be:	83 ec 0c             	sub    esp,0xc
c00192c1:	31 d2                	xor    edx,edx
c00192c3:	0f be c3             	movsx  eax,bl
c00192c6:	68 40 73 02 c0       	push   0xc0027340
c00192cb:	6a 01                	push   0x1
c00192cd:	52                   	push   edx
c00192ce:	56                   	push   esi
c00192cf:	ff 34 85 1c 63 02 c0 	push   DWORD PTR [eax*4-0x3ffd9ce4]
c00192d6:	e8 bd 3a ff ff       	call   c000cd98 <LogicalDisk::read(unsigned long long, int, void*)>
c00192db:	83 c4 20             	add    esp,0x20
c00192de:	85 c0                	test   eax,eax
c00192e0:	75 0e                	jne    c00192f0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c00192e2:	89 35 24 73 02 c0    	mov    DWORD PTR ds:0xc0027324,esi
c00192e8:	88 1d e4 1b 02 c0    	mov    BYTE PTR ds:0xc0021be4,bl
c00192ee:	eb 18                	jmp    c0019308 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c00192f0:	50                   	push   eax
c00192f1:	68 00 08 00 00       	push   0x800
c00192f6:	6a 00                	push   0x0
c00192f8:	57                   	push   edi
c00192f9:	e8 c2 71 fe ff       	call   c00004c0 <memset>
c00192fe:	83 c4 10             	add    esp,0x10
c0019301:	b8 01 00 00 00       	mov    eax,0x1
c0019306:	eb 0e                	jmp    c0019316 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0019308:	be 40 73 02 c0       	mov    esi,0xc0027340
c001930d:	b9 00 08 00 00       	mov    ecx,0x800
c0019312:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019314:	31 c0                	xor    eax,eax
c0019316:	5b                   	pop    ebx
c0019317:	5e                   	pop    esi
c0019318:	5f                   	pop    edi
c0019319:	c3                   	ret    

c001931a <ISO9660::tryMount(LogicalDisk*, int)>:
c001931a:	53                   	push   ebx
c001931b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0019321:	c7 05 24 73 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0027324,0xdeadbeef
c001932b:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0019332:	8d 58 41             	lea    ebx,[eax+0x41]
c0019335:	0f be db             	movsx  ebx,bl
c0019338:	53                   	push   ebx
c0019339:	8d 44 24 08          	lea    eax,[esp+0x8]
c001933d:	50                   	push   eax
c001933e:	6a 10                	push   0x10
c0019340:	e8 5a ff ff ff       	call   c001929f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019345:	83 c4 10             	add    esp,0x10
c0019348:	31 d2                	xor    edx,edx
c001934a:	85 c0                	test   eax,eax
c001934c:	75 33                	jne    c0019381 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001934e:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019353:	75 2c                	jne    c0019381 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019355:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001935a:	75 25                	jne    c0019381 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001935c:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019361:	75 1e                	jne    c0019381 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019363:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019368:	75 17                	jne    c0019381 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001936a:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001936f:	75 10                	jne    c0019381 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019371:	83 ec 0c             	sub    esp,0xc
c0019374:	53                   	push   ebx
c0019375:	e8 c2 d4 fe ff       	call   c000683c <init_percd>
c001937a:	83 c4 10             	add    esp,0x10
c001937d:	40                   	inc    eax
c001937e:	0f 95 c2             	setne  dl
c0019381:	81 c4 08 08 00 00    	add    esp,0x808
c0019387:	88 d0                	mov    al,dl
c0019389:	5b                   	pop    ebx
c001938a:	c3                   	ret    
c001938b:	90                   	nop

c001938c <ISO9660::ISO9660()>:
c001938c:	83 ec 0c             	sub    esp,0xc
c001938f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019393:	83 ec 0c             	sub    esp,0xc
c0019396:	50                   	push   eax
c0019397:	e8 d8 15 ff ff       	call   c000a974 <Filesystem::Filesystem()>
c001939c:	83 c4 10             	add    esp,0x10
c001939f:	ba ac 10 02 c0       	mov    edx,0xc00210ac
c00193a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193a8:	89 10                	mov    DWORD PTR [eax],edx
c00193aa:	e8 9f d5 fe ff       	call   c000694e <fs_iso9660_init>
c00193af:	90                   	nop
c00193b0:	83 c4 0c             	add    esp,0xc
c00193b3:	c3                   	ret    

c00193b4 <SoundCard::beginPlayback()>:
c00193b4:	c7 44 24 04 0c 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002110c
c00193bc:	e9 46 70 ff ff       	jmp    c0010407 <KePanic(char const*)>
c00193c1:	90                   	nop

c00193c2 <SoundCard::stopPlayback()>:
c00193c2:	c7 44 24 04 0c 11 02 c0 	mov    DWORD PTR [esp+0x4],0xc002110c
c00193ca:	e9 38 70 ff ff       	jmp    c0010407 <KePanic(char const*)>
c00193cf:	90                   	nop

c00193d0 <SoundCard::SoundCard(char const*)>:
c00193d0:	83 ec 1c             	sub    esp,0x1c
c00193d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193d7:	83 ec 08             	sub    esp,0x8
c00193da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00193de:	50                   	push   eax
c00193df:	e8 40 28 ff ff       	call   c000bc24 <Device::Device(char const*)>
c00193e4:	83 c4 10             	add    esp,0x10
c00193e7:	ba 58 11 02 c0       	mov    edx,0xc0021158
c00193ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193f0:	89 10                	mov    DWORD PTR [eax],edx
c00193f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193f6:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00193fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019401:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001940b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001940f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019419:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001941d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019427:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001942b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019435:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001943d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019442:	7f 19                	jg     c001945d <SoundCard::SoundCard(char const*)+0x8d>
c0019444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001944c:	83 c2 54             	add    edx,0x54
c001944f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019457:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001945b:	eb e0                	jmp    c001943d <SoundCard::SoundCard(char const*)+0x6d>
c001945d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019461:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019468:	90                   	nop
c0019469:	83 c4 1c             	add    esp,0x1c
c001946c:	c3                   	ret    
c001946d:	90                   	nop

c001946e <SoundCard::~SoundCard()>:
c001946e:	83 ec 0c             	sub    esp,0xc
c0019471:	ba 58 11 02 c0       	mov    edx,0xc0021158
c0019476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001947a:	89 10                	mov    DWORD PTR [eax],edx
c001947c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019480:	83 ec 0c             	sub    esp,0xc
c0019483:	50                   	push   eax
c0019484:	e8 09 25 ff ff       	call   c000b992 <Device::~Device()>
c0019489:	83 c4 10             	add    esp,0x10
c001948c:	90                   	nop
c001948d:	83 c4 0c             	add    esp,0xc
c0019490:	c3                   	ret    
c0019491:	90                   	nop

c0019492 <SoundCard::~SoundCard()>:
c0019492:	83 ec 0c             	sub    esp,0xc
c0019495:	83 ec 0c             	sub    esp,0xc
c0019498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001949c:	e8 cd ff ff ff       	call   c001946e <SoundCard::~SoundCard()>
c00194a1:	83 c4 10             	add    esp,0x10
c00194a4:	83 ec 08             	sub    esp,0x8
c00194a7:	68 e8 01 00 00       	push   0x1e8
c00194ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00194b0:	e8 a8 10 ff ff       	call   c000a55d <operator delete(void*, unsigned long)>
c00194b5:	83 c4 10             	add    esp,0x10
c00194b8:	83 c4 0c             	add    esp,0xc
c00194bb:	c3                   	ret    

c00194bc <SoundCard::configureRates(int, int, int)>:
c00194bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00194c0:	31 c0                	xor    eax,eax
c00194c2:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c00194c9:	75 20                	jne    c00194eb <SoundCard::configureRates(int, int, int)+0x2f>
c00194cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194cf:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00194d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194d9:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00194df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00194e3:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00194e9:	b0 01                	mov    al,0x1
c00194eb:	c3                   	ret    

c00194ec <SoundCard::getSamples16(int, short*)>:
c00194ec:	55                   	push   ebp
c00194ed:	57                   	push   edi
c00194ee:	31 ff                	xor    edi,edi
c00194f0:	56                   	push   esi
c00194f1:	53                   	push   ebx
c00194f2:	31 db                	xor    ebx,ebx
c00194f4:	83 ec 10             	sub    esp,0x10
c00194f7:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00194fb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00194ff:	8d 04 36             	lea    eax,[esi+esi*1]
c0019502:	50                   	push   eax
c0019503:	6a 00                	push   0x0
c0019505:	55                   	push   ebp
c0019506:	e8 b5 6f fe ff       	call   c00004c0 <memset>
c001950b:	83 c4 10             	add    esp,0x10
c001950e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019512:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0019519:	85 c0                	test   eax,eax
c001951b:	74 1b                	je     c0019538 <SoundCard::getSamples16(int, short*)+0x4c>
c001951d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019521:	75 15                	jne    c0019538 <SoundCard::getSamples16(int, short*)+0x4c>
c0019523:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019527:	55                   	push   ebp
c0019528:	56                   	push   esi
c0019529:	50                   	push   eax
c001952a:	e8 ed 02 00 00       	call   c001981c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001952f:	83 c4 10             	add    esp,0x10
c0019532:	39 c7                	cmp    edi,eax
c0019534:	7d 02                	jge    c0019538 <SoundCard::getSamples16(int, short*)+0x4c>
c0019536:	89 c7                	mov    edi,eax
c0019538:	43                   	inc    ebx
c0019539:	83 fb 20             	cmp    ebx,0x20
c001953c:	75 d0                	jne    c001950e <SoundCard::getSamples16(int, short*)+0x22>
c001953e:	83 c4 0c             	add    esp,0xc
c0019541:	89 f8                	mov    eax,edi
c0019543:	5b                   	pop    ebx
c0019544:	5e                   	pop    esi
c0019545:	5f                   	pop    edi
c0019546:	5d                   	pop    ebp
c0019547:	c3                   	ret    

c0019548 <SoundCard::getSamples32(int, int*)>:
c0019548:	55                   	push   ebp
c0019549:	57                   	push   edi
c001954a:	31 ff                	xor    edi,edi
c001954c:	56                   	push   esi
c001954d:	31 f6                	xor    esi,esi
c001954f:	53                   	push   ebx
c0019550:	83 ec 10             	sub    esp,0x10
c0019553:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019557:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001955b:	c1 e0 02             	shl    eax,0x2
c001955e:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019562:	50                   	push   eax
c0019563:	6a 00                	push   0x0
c0019565:	55                   	push   ebp
c0019566:	e8 55 6f fe ff       	call   c00004c0 <memset>
c001956b:	83 c4 10             	add    esp,0x10
c001956e:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019575:	85 c0                	test   eax,eax
c0019577:	74 1b                	je     c0019594 <SoundCard::getSamples32(int, int*)+0x4c>
c0019579:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001957d:	75 15                	jne    c0019594 <SoundCard::getSamples32(int, int*)+0x4c>
c001957f:	53                   	push   ebx
c0019580:	55                   	push   ebp
c0019581:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019585:	50                   	push   eax
c0019586:	e8 59 03 00 00       	call   c00198e4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001958b:	83 c4 10             	add    esp,0x10
c001958e:	39 c6                	cmp    esi,eax
c0019590:	7d 02                	jge    c0019594 <SoundCard::getSamples32(int, int*)+0x4c>
c0019592:	89 c6                	mov    esi,eax
c0019594:	47                   	inc    edi
c0019595:	83 ff 20             	cmp    edi,0x20
c0019598:	75 d4                	jne    c001956e <SoundCard::getSamples32(int, int*)+0x26>
c001959a:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00195a0:	85 f6                	test   esi,esi
c00195a2:	75 0f                	jne    c00195b3 <SoundCard::getSamples32(int, int*)+0x6b>
c00195a4:	84 c0                	test   al,al
c00195a6:	74 1b                	je     c00195c3 <SoundCard::getSamples32(int, int*)+0x7b>
c00195a8:	83 ec 0c             	sub    esp,0xc
c00195ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00195ad:	53                   	push   ebx
c00195ae:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00195b1:	eb 0d                	jmp    c00195c0 <SoundCard::getSamples32(int, int*)+0x78>
c00195b3:	84 c0                	test   al,al
c00195b5:	75 0c                	jne    c00195c3 <SoundCard::getSamples32(int, int*)+0x7b>
c00195b7:	83 ec 0c             	sub    esp,0xc
c00195ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00195bc:	53                   	push   ebx
c00195bd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00195c0:	83 c4 10             	add    esp,0x10
c00195c3:	83 c4 0c             	add    esp,0xc
c00195c6:	89 f0                	mov    eax,esi
c00195c8:	5b                   	pop    ebx
c00195c9:	5e                   	pop    esi
c00195ca:	5f                   	pop    edi
c00195cb:	5d                   	pop    ebp
c00195cc:	c3                   	ret    
c00195cd:	90                   	nop

c00195ce <SoundCard::addChannel(SoundPort*)>:
c00195ce:	83 ec 0c             	sub    esp,0xc
c00195d1:	31 c0                	xor    eax,eax
c00195d3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00195d7:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00195df:	74 1b                	je     c00195fc <SoundCard::addChannel(SoundPort*)+0x2e>
c00195e1:	40                   	inc    eax
c00195e2:	83 f8 20             	cmp    eax,0x20
c00195e5:	75 f0                	jne    c00195d7 <SoundCard::addChannel(SoundPort*)+0x9>
c00195e7:	83 ec 0c             	sub    esp,0xc
c00195ea:	68 31 11 02 c0       	push   0xc0021131
c00195ef:	e8 13 6e ff ff       	call   c0010407 <KePanic(char const*)>
c00195f4:	83 c4 10             	add    esp,0x10
c00195f7:	83 c8 ff             	or     eax,0xffffffff
c00195fa:	eb 0b                	jmp    c0019607 <SoundCard::addChannel(SoundPort*)+0x39>
c00195fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019600:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019607:	83 c4 0c             	add    esp,0xc
c001960a:	c3                   	ret    
c001960b:	90                   	nop

c001960c <SoundCard::removeChannel(int)>:
c001960c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019610:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019614:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001961f:	c3                   	ret    

c0019620 <SoundPort::SoundPort(int, int, int, int)>:
c0019620:	83 ec 0c             	sub    esp,0xc
c0019623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019627:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001962e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019632:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001963a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001963e:	89 10                	mov    DWORD PTR [eax],edx
c0019640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019644:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019648:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001964b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001964f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019653:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019656:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001965b:	75 13                	jne    c0019670 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001965d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019661:	8b 00                	mov    eax,DWORD PTR [eax]
c0019663:	05 a0 0f 00 00       	add    eax,0xfa0
c0019668:	01 c0                	add    eax,eax
c001966a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001966e:	66 90                	xchg   ax,ax
c0019670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019674:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019678:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001967b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001967f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001968a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001968d:	c1 e0 02             	shl    eax,0x2
c0019690:	83 ec 0c             	sub    esp,0xc
c0019693:	50                   	push   eax
c0019694:	e8 ca e1 fe ff       	call   c0007863 <malloc>
c0019699:	83 c4 10             	add    esp,0x10
c001969c:	89 c2                	mov    edx,eax
c001969e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196a2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00196a5:	90                   	nop
c00196a6:	83 c4 0c             	add    esp,0xc
c00196a9:	c3                   	ret    
c00196aa:	66 90                	xchg   ax,ax

c00196ac <SoundPort::~SoundPort()>:
c00196ac:	83 ec 0c             	sub    esp,0xc
c00196af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196b3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00196b6:	85 c0                	test   eax,eax
c00196b8:	74 1e                	je     c00196d8 <SoundPort::~SoundPort()+0x2c>
c00196ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196be:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00196c1:	83 ec 0c             	sub    esp,0xc
c00196c4:	50                   	push   eax
c00196c5:	e8 a9 e1 fe ff       	call   c0007873 <free>
c00196ca:	83 c4 10             	add    esp,0x10
c00196cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196d1:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00196d8:	90                   	nop
c00196d9:	83 c4 0c             	add    esp,0xc
c00196dc:	c3                   	ret    
c00196dd:	90                   	nop
c00196de:	66 90                	xchg   ax,ax

c00196e0 <SoundPort::unpause()>:
c00196e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196e4:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00196e8:	c3                   	ret    
c00196e9:	90                   	nop
c00196ea:	66 90                	xchg   ax,ax

c00196ec <SoundPort::pause()>:
c00196ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196f0:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00196f4:	c3                   	ret    
c00196f5:	90                   	nop
c00196f6:	66 90                	xchg   ax,ax

c00196f8 <SoundPort::getBufferUsed()>:
c00196f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196fc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00196ff:	c3                   	ret    

c0019700 <SoundPort::getBufferSize()>:
c0019700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019704:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019707:	c3                   	ret    

c0019708 <SoundPort::buffer16(short*, int)>:
c0019708:	55                   	push   ebp
c0019709:	57                   	push   edi
c001970a:	56                   	push   esi
c001970b:	53                   	push   ebx
c001970c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019710:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019714:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019717:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001971a:	74 68                	je     c0019784 <SoundPort::buffer16(short*, int)+0x7c>
c001971c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019720:	85 c9                	test   ecx,ecx
c0019722:	7e 60                	jle    c0019784 <SoundPort::buffer16(short*, int)+0x7c>
c0019724:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019728:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001972b:	8d 70 01             	lea    esi,[eax+0x1]
c001972e:	c1 e1 0f             	shl    ecx,0xf
c0019731:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019734:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019737:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001973a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001973d:	74 4d                	je     c001978c <SoundPort::buffer16(short*, int)+0x84>
c001973f:	31 f6                	xor    esi,esi
c0019741:	eb 21                	jmp    c0019764 <SoundPort::buffer16(short*, int)+0x5c>
c0019743:	90                   	nop
c0019744:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019749:	c1 e3 0f             	shl    ebx,0xf
c001974c:	8d 79 01             	lea    edi,[ecx+0x1]
c001974f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019752:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019755:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019758:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001975b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001975e:	74 1c                	je     c001977c <SoundPort::buffer16(short*, int)+0x74>
c0019760:	89 c6                	mov    esi,eax
c0019762:	66 90                	xchg   ax,ax
c0019764:	8d 46 01             	lea    eax,[esi+0x1]
c0019767:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001976b:	75 d7                	jne    c0019744 <SoundPort::buffer16(short*, int)+0x3c>
c001976d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019771:	8d 76 00             	lea    esi,[esi+0x0]
c0019774:	5b                   	pop    ebx
c0019775:	5e                   	pop    esi
c0019776:	5f                   	pop    edi
c0019777:	5d                   	pop    ebp
c0019778:	c3                   	ret    
c0019779:	8d 76 00             	lea    esi,[esi+0x0]
c001977c:	5b                   	pop    ebx
c001977d:	8d 46 02             	lea    eax,[esi+0x2]
c0019780:	5e                   	pop    esi
c0019781:	5f                   	pop    edi
c0019782:	5d                   	pop    ebp
c0019783:	c3                   	ret    
c0019784:	5b                   	pop    ebx
c0019785:	31 c0                	xor    eax,eax
c0019787:	5e                   	pop    esi
c0019788:	5f                   	pop    edi
c0019789:	5d                   	pop    ebp
c001978a:	c3                   	ret    
c001978b:	90                   	nop
c001978c:	b8 01 00 00 00       	mov    eax,0x1
c0019791:	eb e1                	jmp    c0019774 <SoundPort::buffer16(short*, int)+0x6c>
c0019793:	90                   	nop

c0019794 <SoundPort::buffer32(int*, int)>:
c0019794:	55                   	push   ebp
c0019795:	57                   	push   edi
c0019796:	56                   	push   esi
c0019797:	53                   	push   ebx
c0019798:	51                   	push   ecx
c0019799:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001979d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197a1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00197a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00197a8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00197ab:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00197ae:	74 5c                	je     c001980c <SoundPort::buffer32(int*, int)+0x78>
c00197b0:	85 c0                	test   eax,eax
c00197b2:	7e 58                	jle    c001980c <SoundPort::buffer32(int*, int)+0x78>
c00197b4:	8d 71 01             	lea    esi,[ecx+0x1]
c00197b7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00197ba:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00197bd:	8b 37                	mov    esi,DWORD PTR [edi]
c00197bf:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00197c2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00197c5:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00197c8:	74 4a                	je     c0019814 <SoundPort::buffer32(int*, int)+0x80>
c00197ca:	31 f6                	xor    esi,esi
c00197cc:	eb 1e                	jmp    c00197ec <SoundPort::buffer32(int*, int)+0x58>
c00197ce:	66 90                	xchg   ax,ax
c00197d0:	8d 69 01             	lea    ebp,[ecx+0x1]
c00197d3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00197d6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00197d9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00197dc:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00197e0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00197e3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00197e6:	74 18                	je     c0019800 <SoundPort::buffer32(int*, int)+0x6c>
c00197e8:	89 de                	mov    esi,ebx
c00197ea:	66 90                	xchg   ax,ax
c00197ec:	8d 5e 01             	lea    ebx,[esi+0x1]
c00197ef:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c00197f2:	75 dc                	jne    c00197d0 <SoundPort::buffer32(int*, int)+0x3c>
c00197f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00197f7:	90                   	nop
c00197f8:	5a                   	pop    edx
c00197f9:	5b                   	pop    ebx
c00197fa:	5e                   	pop    esi
c00197fb:	5f                   	pop    edi
c00197fc:	5d                   	pop    ebp
c00197fd:	c3                   	ret    
c00197fe:	66 90                	xchg   ax,ax
c0019800:	5a                   	pop    edx
c0019801:	8d 46 02             	lea    eax,[esi+0x2]
c0019804:	5b                   	pop    ebx
c0019805:	5e                   	pop    esi
c0019806:	5f                   	pop    edi
c0019807:	5d                   	pop    ebp
c0019808:	c3                   	ret    
c0019809:	8d 76 00             	lea    esi,[esi+0x0]
c001980c:	5a                   	pop    edx
c001980d:	31 c0                	xor    eax,eax
c001980f:	5b                   	pop    ebx
c0019810:	5e                   	pop    esi
c0019811:	5f                   	pop    edi
c0019812:	5d                   	pop    ebp
c0019813:	c3                   	ret    
c0019814:	b8 01 00 00 00       	mov    eax,0x1
c0019819:	eb dd                	jmp    c00197f8 <SoundPort::buffer32(int*, int)+0x64>
c001981b:	90                   	nop

c001981c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001981c:	57                   	push   edi
c001981d:	56                   	push   esi
c001981e:	53                   	push   ebx
c001981f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0019823:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019827:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001982b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0019831:	39 03                	cmp    DWORD PTR [ebx],eax
c0019833:	74 13                	je     c0019848 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x2c>
c0019835:	83 ec 0c             	sub    esp,0xc
c0019838:	68 84 11 02 c0       	push   0xc0021184
c001983d:	e8 c5 6b ff ff       	call   c0010407 <KePanic(char const*)>
c0019842:	83 c4 10             	add    esp,0x10
c0019845:	8d 76 00             	lea    esi,[esi+0x0]
c0019848:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001984e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019851:	74 11                	je     c0019864 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x48>
c0019853:	83 ec 0c             	sub    esp,0xc
c0019856:	68 c3 11 02 c0       	push   0xc00211c3
c001985b:	e8 a7 6b ff ff       	call   c0010407 <KePanic(char const*)>
c0019860:	83 c4 10             	add    esp,0x10
c0019863:	90                   	nop
c0019864:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001986a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001986d:	74 11                	je     c0019880 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x64>
c001986f:	83 ec 0c             	sub    esp,0xc
c0019872:	68 c3 11 02 c0       	push   0xc00211c3
c0019877:	e8 8b 6b ff ff       	call   c0010407 <KePanic(char const*)>
c001987c:	83 c4 10             	add    esp,0x10
c001987f:	90                   	nop
c0019880:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019883:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0019887:	7e 07                	jle    c0019890 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x74>
c0019889:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001988d:	8d 76 00             	lea    esi,[esi+0x0]
c0019890:	85 f6                	test   esi,esi
c0019892:	7e 28                	jle    c00198bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0019894:	31 d2                	xor    edx,edx
c0019896:	66 90                	xchg   ax,ax
c0019898:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001989b:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c001989e:	89 c8                	mov    eax,ecx
c00198a0:	c1 f8 1f             	sar    eax,0x1f
c00198a3:	25 ff 7f 00 00       	and    eax,0x7fff
c00198a8:	01 c8                	add    eax,ecx
c00198aa:	66 8b 0c 57          	mov    cx,WORD PTR [edi+edx*2]
c00198ae:	c1 f8 0f             	sar    eax,0xf
c00198b1:	01 c1                	add    ecx,eax
c00198b3:	66 89 0c 57          	mov    WORD PTR [edi+edx*2],cx
c00198b7:	42                   	inc    edx
c00198b8:	39 f2                	cmp    edx,esi
c00198ba:	75 dc                	jne    c0019898 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x7c>
c00198bc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00198bf:	50                   	push   eax
c00198c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00198c3:	29 f0                	sub    eax,esi
c00198c5:	c1 e0 02             	shl    eax,0x2
c00198c8:	50                   	push   eax
c00198c9:	8d 04 b2             	lea    eax,[edx+esi*4]
c00198cc:	50                   	push   eax
c00198cd:	52                   	push   edx
c00198ce:	e8 fd 6a fe ff       	call   c00003d0 <memmove>
c00198d3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00198d6:	83 c4 10             	add    esp,0x10
c00198d9:	29 f2                	sub    edx,esi
c00198db:	89 f0                	mov    eax,esi
c00198dd:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00198e0:	5b                   	pop    ebx
c00198e1:	5e                   	pop    esi
c00198e2:	5f                   	pop    edi
c00198e3:	c3                   	ret    

c00198e4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00198e4:	57                   	push   edi
c00198e5:	56                   	push   esi
c00198e6:	53                   	push   ebx
c00198e7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00198eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00198ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00198f3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c00198f9:	39 06                	cmp    DWORD PTR [esi],eax
c00198fb:	74 13                	je     c0019910 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00198fd:	83 ec 0c             	sub    esp,0xc
c0019900:	68 a4 11 02 c0       	push   0xc00211a4
c0019905:	e8 fd 6a ff ff       	call   c0010407 <KePanic(char const*)>
c001990a:	83 c4 10             	add    esp,0x10
c001990d:	8d 76 00             	lea    esi,[esi+0x0]
c0019910:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0019916:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0019919:	74 11                	je     c001992c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001991b:	83 ec 0c             	sub    esp,0xc
c001991e:	68 df 11 02 c0       	push   0xc00211df
c0019923:	e8 df 6a ff ff       	call   c0010407 <KePanic(char const*)>
c0019928:	83 c4 10             	add    esp,0x10
c001992b:	90                   	nop
c001992c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0019932:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0019935:	74 11                	je     c0019948 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0019937:	83 ec 0c             	sub    esp,0xc
c001993a:	68 df 11 02 c0       	push   0xc00211df
c001993f:	e8 c3 6a ff ff       	call   c0010407 <KePanic(char const*)>
c0019944:	83 c4 10             	add    esp,0x10
c0019947:	90                   	nop
c0019948:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001994b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001994f:	7e 07                	jle    c0019958 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0019951:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019955:	8d 76 00             	lea    esi,[esi+0x0]
c0019958:	85 ff                	test   edi,edi
c001995a:	7e 1c                	jle    c0019978 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001995c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019963:	31 c0                	xor    eax,eax
c0019965:	8d 76 00             	lea    esi,[esi+0x0]
c0019968:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001996b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001996e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0019971:	83 c0 04             	add    eax,0x4
c0019974:	39 c1                	cmp    ecx,eax
c0019976:	75 f0                	jne    c0019968 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0019978:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001997b:	50                   	push   eax
c001997c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001997f:	29 f8                	sub    eax,edi
c0019981:	c1 e0 02             	shl    eax,0x2
c0019984:	50                   	push   eax
c0019985:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019988:	50                   	push   eax
c0019989:	52                   	push   edx
c001998a:	e8 41 6a fe ff       	call   c00003d0 <memmove>
c001998f:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0019992:	83 c4 10             	add    esp,0x10
c0019995:	29 fa                	sub    edx,edi
c0019997:	89 f8                	mov    eax,edi
c0019999:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001999c:	5b                   	pop    ebx
c001999d:	5e                   	pop    esi
c001999e:	5f                   	pop    edi
c001999f:	c3                   	ret    

c00199a0 <PCI::open(int, int, void*)>:
c00199a0:	83 ec 18             	sub    esp,0x18
c00199a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00199a7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00199ab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00199b1:	8b 10                	mov    edx,DWORD PTR [eax]
c00199b3:	50                   	push   eax
c00199b4:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00199b7:	31 c0                	xor    eax,eax
c00199b9:	83 c4 1c             	add    esp,0x1c
c00199bc:	c3                   	ret    
c00199bd:	90                   	nop

c00199be <PCI::close(int, int, void*)>:
c00199be:	31 c0                	xor    eax,eax
c00199c0:	c3                   	ret    
c00199c1:	90                   	nop

c00199c2 <PCI::PCI()>:
c00199c2:	83 ec 0c             	sub    esp,0xc
c00199c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199c9:	83 ec 08             	sub    esp,0x8
c00199cc:	68 fb 11 02 c0       	push   0xc00211fb
c00199d1:	50                   	push   eax
c00199d2:	e8 0d 1a ff ff       	call   c000b3e4 <Bus::Bus(char const*)>
c00199d7:	83 c4 10             	add    esp,0x10
c00199da:	ba a4 12 02 c0       	mov    edx,0xc00212a4
c00199df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199e3:	89 10                	mov    DWORD PTR [eax],edx
c00199e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199e9:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00199f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199f7:	a3 40 7b 02 c0       	mov    ds:0xc0027b40,eax
c00199fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a00:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019a06:	31 d2                	xor    edx,edx
c0019a08:	88 c2                	mov    dl,al
c0019a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a0e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0019a15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a19:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019a1f:	31 d2                	xor    edx,edx
c0019a21:	88 c2                	mov    dl,al
c0019a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a27:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0019a2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a30:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019a36:	8d 50 01             	lea    edx,[eax+0x1]
c0019a39:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019a3d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0019a43:	31 d2                	xor    edx,edx
c0019a45:	88 c2                	mov    dl,al
c0019a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a4b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0019a4f:	83 c9 c0             	or     ecx,0xffffffc0
c0019a52:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0019a56:	90                   	nop
c0019a57:	83 c4 0c             	add    esp,0xc
c0019a5a:	c3                   	ret    
c0019a5b:	90                   	nop

c0019a5c <PCI::readBAR8(unsigned int, int)>:
c0019a5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a64:	f6 c2 01             	test   dl,0x1
c0019a67:	74 07                	je     c0019a70 <PCI::readBAR8(unsigned int, int)+0x14>
c0019a69:	83 e2 fc             	and    edx,0xfffffffc
c0019a6c:	01 c2                	add    edx,eax
c0019a6e:	ec                   	in     al,dx
c0019a6f:	c3                   	ret    
c0019a70:	83 e2 f0             	and    edx,0xfffffff0
c0019a73:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0019a76:	c3                   	ret    
c0019a77:	90                   	nop

c0019a78 <PCI::readBAR16(unsigned int, int)>:
c0019a78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a80:	f6 c2 01             	test   dl,0x1
c0019a83:	74 08                	je     c0019a8d <PCI::readBAR16(unsigned int, int)+0x15>
c0019a85:	83 e2 fc             	and    edx,0xfffffffc
c0019a88:	01 c2                	add    edx,eax
c0019a8a:	66 ed                	in     ax,dx
c0019a8c:	c3                   	ret    
c0019a8d:	83 e2 f0             	and    edx,0xfffffff0
c0019a90:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0019a94:	c3                   	ret    
c0019a95:	90                   	nop

c0019a96 <PCI::readBAR32(unsigned int, int)>:
c0019a96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a9e:	f6 c2 01             	test   dl,0x1
c0019aa1:	74 07                	je     c0019aaa <PCI::readBAR32(unsigned int, int)+0x14>
c0019aa3:	83 e2 fc             	and    edx,0xfffffffc
c0019aa6:	01 c2                	add    edx,eax
c0019aa8:	ed                   	in     eax,dx
c0019aa9:	c3                   	ret    
c0019aaa:	83 e2 f0             	and    edx,0xfffffff0
c0019aad:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0019ab0:	c3                   	ret    
c0019ab1:	90                   	nop

c0019ab2 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0019ab2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ab6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019aba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019abe:	f6 c2 01             	test   dl,0x1
c0019ac1:	74 07                	je     c0019aca <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0019ac3:	83 e2 fc             	and    edx,0xfffffffc
c0019ac6:	01 ca                	add    edx,ecx
c0019ac8:	ee                   	out    dx,al
c0019ac9:	c3                   	ret    
c0019aca:	83 e2 f0             	and    edx,0xfffffff0
c0019acd:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0019ad0:	c3                   	ret    
c0019ad1:	90                   	nop

c0019ad2 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0019ad2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ad6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ada:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019ade:	f6 c2 01             	test   dl,0x1
c0019ae1:	74 08                	je     c0019aeb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0019ae3:	83 e2 fc             	and    edx,0xfffffffc
c0019ae6:	01 ca                	add    edx,ecx
c0019ae8:	66 ef                	out    dx,ax
c0019aea:	c3                   	ret    
c0019aeb:	83 e2 f0             	and    edx,0xfffffff0
c0019aee:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0019af2:	c3                   	ret    
c0019af3:	90                   	nop

c0019af4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0019af4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019af8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019afc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019b00:	f6 c2 01             	test   dl,0x1
c0019b03:	74 07                	je     c0019b0c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0019b05:	83 e2 fc             	and    edx,0xfffffffc
c0019b08:	01 ca                	add    edx,ecx
c0019b0a:	ef                   	out    dx,eax
c0019b0b:	c3                   	ret    
c0019b0c:	83 e2 f0             	and    edx,0xfffffff0
c0019b0f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0019b12:	c3                   	ret    
c0019b13:	90                   	nop

c0019b14 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019b14:	55                   	push   ebp
c0019b15:	57                   	push   edi
c0019b16:	56                   	push   esi
c0019b17:	53                   	push   ebx
c0019b18:	83 ec 0c             	sub    esp,0xc
c0019b1b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019b1f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0019b23:	89 f0                	mov    eax,esi
c0019b25:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0019b29:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019b2d:	3c 07                	cmp    al,0x7
c0019b2f:	76 10                	jbe    c0019b41 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0019b31:	83 ec 0c             	sub    esp,0xc
c0019b34:	68 03 12 02 c0       	push   0xc0021203
c0019b39:	e8 c9 68 ff ff       	call   c0010407 <KePanic(char const*)>
c0019b3e:	83 c4 10             	add    esp,0x10
c0019b41:	80 fb 0f             	cmp    bl,0xf
c0019b44:	76 10                	jbe    c0019b56 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0019b46:	83 ec 0c             	sub    esp,0xc
c0019b49:	68 33 12 02 c0       	push   0xc0021233
c0019b4e:	e8 b4 68 ff ff       	call   c0010407 <KePanic(char const*)>
c0019b53:	83 c4 10             	add    esp,0x10
c0019b56:	8d 04 36             	lea    eax,[esi+esi*1]
c0019b59:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019b5e:	83 c8 f0             	or     eax,0xfffffff0
c0019b61:	ee                   	out    dx,al
c0019b62:	ba fa 0c 00 00       	mov    edx,0xcfa
c0019b67:	89 e8                	mov    eax,ebp
c0019b69:	ee                   	out    dx,al
c0019b6a:	83 c4 0c             	add    esp,0xc
c0019b6d:	89 d8                	mov    eax,ebx
c0019b6f:	66 81 e7 fc 00       	and    di,0xfc
c0019b74:	c1 e0 08             	shl    eax,0x8
c0019b77:	5b                   	pop    ebx
c0019b78:	5e                   	pop    esi
c0019b79:	09 f8                	or     eax,edi
c0019b7b:	66 0d 00 c0          	or     ax,0xc000
c0019b7f:	5f                   	pop    edi
c0019b80:	5d                   	pop    ebp
c0019b81:	c3                   	ret    

c0019b82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019b82:	57                   	push   edi
c0019b83:	56                   	push   esi
c0019b84:	53                   	push   ebx
c0019b85:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019b89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019b8d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019b91:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019b95:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0019b9b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019b9f:	83 ff 01             	cmp    edi,0x1
c0019ba2:	75 3e                	jne    c0019be2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0019ba4:	89 de                	mov    esi,ebx
c0019ba6:	0f b6 c0             	movzx  eax,al
c0019ba9:	c1 e0 10             	shl    eax,0x10
c0019bac:	81 e6 fc 00 00 00    	and    esi,0xfc
c0019bb2:	0f b6 c9             	movzx  ecx,cl
c0019bb5:	c1 e1 08             	shl    ecx,0x8
c0019bb8:	09 f0                	or     eax,esi
c0019bba:	0f b6 d2             	movzx  edx,dl
c0019bbd:	c1 e2 0b             	shl    edx,0xb
c0019bc0:	09 c8                	or     eax,ecx
c0019bc2:	09 d0                	or     eax,edx
c0019bc4:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019bc9:	0d 00 00 00 80       	or     eax,0x80000000
c0019bce:	ef                   	out    dx,eax
c0019bcf:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019bd4:	ed                   	in     eax,dx
c0019bd5:	83 e3 02             	and    ebx,0x2
c0019bd8:	0f b6 cb             	movzx  ecx,bl
c0019bdb:	c1 e1 03             	shl    ecx,0x3
c0019bde:	d3 e8                	shr    eax,cl
c0019be0:	eb 43                	jmp    c0019c25 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0019be2:	83 ff 02             	cmp    edi,0x2
c0019be5:	75 2c                	jne    c0019c13 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0019be7:	83 ec 0c             	sub    esp,0xc
c0019bea:	0f b6 fb             	movzx  edi,bl
c0019bed:	57                   	push   edi
c0019bee:	0f b6 c9             	movzx  ecx,cl
c0019bf1:	51                   	push   ecx
c0019bf2:	0f b6 d2             	movzx  edx,dl
c0019bf5:	52                   	push   edx
c0019bf6:	0f b6 c0             	movzx  eax,al
c0019bf9:	50                   	push   eax
c0019bfa:	56                   	push   esi
c0019bfb:	e8 14 ff ff ff       	call   c0019b14 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c00:	89 c2                	mov    edx,eax
c0019c02:	ed                   	in     eax,dx
c0019c03:	83 e3 02             	and    ebx,0x2
c0019c06:	83 c4 20             	add    esp,0x20
c0019c09:	0f b6 cb             	movzx  ecx,bl
c0019c0c:	c1 e1 03             	shl    ecx,0x3
c0019c0f:	d3 e8                	shr    eax,cl
c0019c11:	eb 12                	jmp    c0019c25 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0019c13:	83 ec 0c             	sub    esp,0xc
c0019c16:	68 63 12 02 c0       	push   0xc0021263
c0019c1b:	e8 e7 67 ff ff       	call   c0010407 <KePanic(char const*)>
c0019c20:	83 c4 10             	add    esp,0x10
c0019c23:	31 c0                	xor    eax,eax
c0019c25:	5b                   	pop    ebx
c0019c26:	5e                   	pop    esi
c0019c27:	5f                   	pop    edi
c0019c28:	c3                   	ret    
c0019c29:	90                   	nop

c0019c2a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0019c2a:	83 ec 18             	sub    esp,0x18
c0019c2d:	6a 00                	push   0x0
c0019c2f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c34:	50                   	push   eax
c0019c35:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c3a:	50                   	push   eax
c0019c3b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c40:	50                   	push   eax
c0019c41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c45:	e8 38 ff ff ff       	call   c0019b82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c4a:	83 c4 2c             	add    esp,0x2c
c0019c4d:	c3                   	ret    

c0019c4e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0019c4e:	83 ec 18             	sub    esp,0x18
c0019c51:	6a 0e                	push   0xe
c0019c53:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c58:	50                   	push   eax
c0019c59:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c5e:	50                   	push   eax
c0019c5f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c64:	50                   	push   eax
c0019c65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c69:	e8 14 ff ff ff       	call   c0019b82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c6e:	83 c4 2c             	add    esp,0x2c
c0019c71:	0f b6 c0             	movzx  eax,al
c0019c74:	c3                   	ret    
c0019c75:	90                   	nop

c0019c76 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0019c76:	55                   	push   ebp
c0019c77:	57                   	push   edi
c0019c78:	56                   	push   esi
c0019c79:	53                   	push   ebx
c0019c7a:	83 ec 18             	sub    esp,0x18
c0019c7d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0019c82:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0019c87:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0019c8c:	6a 0a                	push   0xa
c0019c8e:	56                   	push   esi
c0019c8f:	55                   	push   ebp
c0019c90:	57                   	push   edi
c0019c91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019c95:	e8 e8 fe ff ff       	call   c0019b82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019c9a:	83 c4 14             	add    esp,0x14
c0019c9d:	6a 0a                	push   0xa
c0019c9f:	89 c3                	mov    ebx,eax
c0019ca1:	56                   	push   esi
c0019ca2:	55                   	push   ebp
c0019ca3:	57                   	push   edi
c0019ca4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019ca8:	e8 d5 fe ff ff       	call   c0019b82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019cad:	83 c4 2c             	add    esp,0x2c
c0019cb0:	0f b6 db             	movzx  ebx,bl
c0019cb3:	25 00 ff 00 00       	and    eax,0xff00
c0019cb8:	09 d8                	or     eax,ebx
c0019cba:	5b                   	pop    ebx
c0019cbb:	5e                   	pop    esi
c0019cbc:	5f                   	pop    edi
c0019cbd:	5d                   	pop    ebp
c0019cbe:	c3                   	ret    
c0019cbf:	90                   	nop

c0019cc0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0019cc0:	83 ec 18             	sub    esp,0x18
c0019cc3:	6a 08                	push   0x8
c0019cc5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019cca:	50                   	push   eax
c0019ccb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019cd0:	50                   	push   eax
c0019cd1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019cd6:	50                   	push   eax
c0019cd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019cdb:	e8 a2 fe ff ff       	call   c0019b82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019ce0:	83 c4 2c             	add    esp,0x2c
c0019ce3:	0f b6 c4             	movzx  eax,ah
c0019ce6:	c3                   	ret    
c0019ce7:	90                   	nop

c0019ce8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0019ce8:	83 ec 18             	sub    esp,0x18
c0019ceb:	6a 08                	push   0x8
c0019ced:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019cf2:	50                   	push   eax
c0019cf3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019cf8:	50                   	push   eax
c0019cf9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019cfe:	50                   	push   eax
c0019cff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019d03:	e8 7a fe ff ff       	call   c0019b82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019d08:	83 c4 2c             	add    esp,0x2c
c0019d0b:	c3                   	ret    

c0019d0c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0019d0c:	83 ec 18             	sub    esp,0x18
c0019d0f:	6a 3c                	push   0x3c
c0019d11:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d16:	50                   	push   eax
c0019d17:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d1c:	50                   	push   eax
c0019d1d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d22:	50                   	push   eax
c0019d23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019d27:	e8 56 fe ff ff       	call   c0019b82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019d2c:	83 c4 2c             	add    esp,0x2c
c0019d2f:	c3                   	ret    

c0019d30 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0019d30:	83 ec 18             	sub    esp,0x18
c0019d33:	6a 18                	push   0x18
c0019d35:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d3a:	50                   	push   eax
c0019d3b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d40:	50                   	push   eax
c0019d41:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d46:	50                   	push   eax
c0019d47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019d4b:	e8 32 fe ff ff       	call   c0019b82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019d50:	83 c4 2c             	add    esp,0x2c
c0019d53:	0f b6 c4             	movzx  eax,ah
c0019d56:	c3                   	ret    
c0019d57:	90                   	nop

c0019d58 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019d58:	55                   	push   ebp
c0019d59:	57                   	push   edi
c0019d5a:	56                   	push   esi
c0019d5b:	53                   	push   ebx
c0019d5c:	83 ec 28             	sub    esp,0x28
c0019d5f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0019d63:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0019d68:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0019d6f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0019d74:	8d 43 12             	lea    eax,[ebx+0x12]
c0019d77:	83 c3 10             	add    ebx,0x10
c0019d7a:	0f b6 c0             	movzx  eax,al
c0019d7d:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0019d82:	50                   	push   eax
c0019d83:	51                   	push   ecx
c0019d84:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0019d88:	57                   	push   edi
c0019d89:	55                   	push   ebp
c0019d8a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019d8e:	e8 ef fd ff ff       	call   c0019b82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019d93:	83 c4 14             	add    esp,0x14
c0019d96:	0f b6 db             	movzx  ebx,bl
c0019d99:	53                   	push   ebx
c0019d9a:	89 c6                	mov    esi,eax
c0019d9c:	c1 e6 10             	shl    esi,0x10
c0019d9f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019da3:	51                   	push   ecx
c0019da4:	57                   	push   edi
c0019da5:	55                   	push   ebp
c0019da6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019daa:	e8 d3 fd ff ff       	call   c0019b82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019daf:	83 c4 3c             	add    esp,0x3c
c0019db2:	0f b7 c0             	movzx  eax,ax
c0019db5:	5b                   	pop    ebx
c0019db6:	09 f0                	or     eax,esi
c0019db8:	5e                   	pop    esi
c0019db9:	5f                   	pop    edi
c0019dba:	5d                   	pop    ebp
c0019dbb:	c3                   	ret    

c0019dbc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0019dbc:	55                   	push   ebp
c0019dbd:	57                   	push   edi
c0019dbe:	56                   	push   esi
c0019dbf:	53                   	push   ebx
c0019dc0:	83 ec 0c             	sub    esp,0xc
c0019dc3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019dc7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019dcb:	89 f5                	mov    ebp,esi
c0019dcd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019dd1:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0019dd7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019ddb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019ddf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019de3:	83 f9 01             	cmp    ecx,0x1
c0019de6:	75 5d                	jne    c0019e45 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0019de8:	0f b6 c8             	movzx  ecx,al
c0019deb:	c1 e1 10             	shl    ecx,0x10
c0019dee:	89 f0                	mov    eax,esi
c0019df0:	25 fc 00 00 00       	and    eax,0xfc
c0019df5:	09 c1                	or     ecx,eax
c0019df7:	89 e8                	mov    eax,ebp
c0019df9:	0f b6 c0             	movzx  eax,al
c0019dfc:	c1 e0 08             	shl    eax,0x8
c0019dff:	0f b6 d2             	movzx  edx,dl
c0019e02:	c1 e2 0b             	shl    edx,0xb
c0019e05:	09 c1                	or     ecx,eax
c0019e07:	09 d1                	or     ecx,edx
c0019e09:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019e0e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0019e14:	89 c8                	mov    eax,ecx
c0019e16:	ef                   	out    dx,eax
c0019e17:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019e1c:	ed                   	in     eax,dx
c0019e1d:	0f b7 db             	movzx  ebx,bx
c0019e20:	83 e6 02             	and    esi,0x2
c0019e23:	74 0a                	je     c0019e2f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0019e25:	0f b7 d0             	movzx  edx,ax
c0019e28:	c1 e3 10             	shl    ebx,0x10
c0019e2b:	09 d3                	or     ebx,edx
c0019e2d:	eb 05                	jmp    c0019e34 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0019e2f:	66 31 c0             	xor    ax,ax
c0019e32:	09 c3                	or     ebx,eax
c0019e34:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019e39:	89 c8                	mov    eax,ecx
c0019e3b:	ef                   	out    dx,eax
c0019e3c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019e41:	89 d8                	mov    eax,ebx
c0019e43:	eb 41                	jmp    c0019e86 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0019e45:	83 f9 02             	cmp    ecx,0x2
c0019e48:	75 45                	jne    c0019e8f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0019e4a:	83 ec 0c             	sub    esp,0xc
c0019e4d:	89 f1                	mov    ecx,esi
c0019e4f:	0f b6 f1             	movzx  esi,cl
c0019e52:	89 e9                	mov    ecx,ebp
c0019e54:	56                   	push   esi
c0019e55:	0f b6 c9             	movzx  ecx,cl
c0019e58:	51                   	push   ecx
c0019e59:	0f b6 d2             	movzx  edx,dl
c0019e5c:	52                   	push   edx
c0019e5d:	0f b6 c0             	movzx  eax,al
c0019e60:	50                   	push   eax
c0019e61:	57                   	push   edi
c0019e62:	e8 ad fc ff ff       	call   c0019b14 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019e67:	89 c2                	mov    edx,eax
c0019e69:	ed                   	in     eax,dx
c0019e6a:	83 c4 20             	add    esp,0x20
c0019e6d:	0f b7 db             	movzx  ebx,bx
c0019e70:	f6 c2 02             	test   dl,0x2
c0019e73:	74 0c                	je     c0019e81 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0019e75:	0f b7 c8             	movzx  ecx,ax
c0019e78:	89 d8                	mov    eax,ebx
c0019e7a:	c1 e0 10             	shl    eax,0x10
c0019e7d:	09 c8                	or     eax,ecx
c0019e7f:	eb 05                	jmp    c0019e86 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0019e81:	66 31 c0             	xor    ax,ax
c0019e84:	09 d8                	or     eax,ebx
c0019e86:	ef                   	out    dx,eax
c0019e87:	83 c4 0c             	add    esp,0xc
c0019e8a:	5b                   	pop    ebx
c0019e8b:	5e                   	pop    esi
c0019e8c:	5f                   	pop    edi
c0019e8d:	5d                   	pop    ebp
c0019e8e:	c3                   	ret    
c0019e8f:	c7 44 24 20 63 12 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021263
c0019e97:	83 c4 0c             	add    esp,0xc
c0019e9a:	5b                   	pop    ebx
c0019e9b:	5e                   	pop    esi
c0019e9c:	5f                   	pop    edi
c0019e9d:	5d                   	pop    ebp
c0019e9e:	e9 64 65 ff ff       	jmp    c0010407 <KePanic(char const*)>
c0019ea3:	90                   	nop

c0019ea4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0019ea4:	55                   	push   ebp
c0019ea5:	57                   	push   edi
c0019ea6:	56                   	push   esi
c0019ea7:	53                   	push   ebx
c0019ea8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019eae:	80 3d 4c 7b 02 c0 00 	cmp    BYTE PTR ds:0xc0027b4c,0x0
c0019eb5:	0f 85 bd 00 00 00    	jne    c0019f78 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xd4>
c0019ebb:	83 ec 0c             	sub    esp,0xc
c0019ebe:	68 14 01 00 00       	push   0x114
c0019ec3:	e8 9b d9 fe ff       	call   c0007863 <malloc>
c0019ec8:	83 c4 0c             	add    esp,0xc
c0019ecb:	89 c3                	mov    ebx,eax
c0019ecd:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0019ed3:	68 69 12 02 c0       	push   0xc0021269
c0019ed8:	50                   	push   eax
c0019ed9:	e8 ea 0c ff ff       	call   c000abc8 <File::File(char const*, Process*)>
c0019ede:	83 c4 10             	add    esp,0x10
c0019ee1:	85 db                	test   ebx,ebx
c0019ee3:	0f 84 47 02 00 00    	je     c001a130 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019ee9:	56                   	push   esi
c0019eea:	56                   	push   esi
c0019eeb:	6a 01                	push   0x1
c0019eed:	53                   	push   ebx
c0019eee:	e8 95 0d ff ff       	call   c000ac88 <File::open(FileOpenMode)>
c0019ef3:	83 c4 10             	add    esp,0x10
c0019ef6:	85 c0                	test   eax,eax
c0019ef8:	0f 85 32 02 00 00    	jne    c001a130 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019efe:	52                   	push   edx
c0019eff:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0019f03:	50                   	push   eax
c0019f04:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019f08:	50                   	push   eax
c0019f09:	53                   	push   ebx
c0019f0a:	e8 25 10 ff ff       	call   c000af34 <File::stat(unsigned long long*, bool*)>
c0019f0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f13:	40                   	inc    eax
c0019f14:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f17:	e8 47 d9 fe ff       	call   c0007863 <malloc>
c0019f1c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019f20:	a3 48 7b 02 c0       	mov    ds:0xc0027b48,eax
c0019f25:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0019f29:	59                   	pop    ecx
c0019f2a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019f2c:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0019f30:	51                   	push   ecx
c0019f31:	50                   	push   eax
c0019f32:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019f36:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019f3a:	53                   	push   ebx
c0019f3b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019f3e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0019f42:	83 c4 20             	add    esp,0x20
c0019f45:	89 c8                	mov    eax,ecx
c0019f47:	99                   	cdq    
c0019f48:	3b 54 24 24          	cmp    edx,DWORD PTR [esp+0x24]
c0019f4c:	0f 85 de 01 00 00    	jne    c001a130 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019f52:	3b 4c 24 20          	cmp    ecx,DWORD PTR [esp+0x20]
c0019f56:	0f 85 d4 01 00 00    	jne    c001a130 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019f5c:	83 ec 0c             	sub    esp,0xc
c0019f5f:	53                   	push   ebx
c0019f60:	e8 81 0d ff ff       	call   c000ace6 <File::close()>
c0019f65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019f69:	c6 05 4c 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027b4c,0x1
c0019f70:	a3 44 7b 02 c0       	mov    ds:0xc0027b44,eax
c0019f75:	83 c4 10             	add    esp,0x10
c0019f78:	a1 44 7b 02 c0       	mov    eax,ds:0xc0027b44
c0019f7d:	8b 15 48 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b48
c0019f83:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f86:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0019f8e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0019f93:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0019f9b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0019fa0:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0019fa7:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0019fab:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0019fb2:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019fb6:	31 ff                	xor    edi,edi
c0019fb8:	31 f6                	xor    esi,esi
c0019fba:	31 db                	xor    ebx,ebx
c0019fbc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0019fbf:	0f 8e 6b 01 00 00    	jle    c001a130 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019fc5:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019fc8:	d4 40                	aam    0x40
c0019fca:	d5 39                	aad    0x39
c0019fcc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019fd0:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0019fd4:	d4 40                	aam    0x40
c0019fd6:	d5 39                	aad    0x39
c0019fd8:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019fdc:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0019fe0:	d4 40                	aam    0x40
c0019fe2:	d5 39                	aad    0x39
c0019fe4:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019fe8:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0019fec:	d4 40                	aam    0x40
c0019fee:	d5 39                	aad    0x39
c0019ff0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019ff4:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0019ff8:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0019ffc:	3c 56                	cmp    al,0x56
c0019ffe:	74 45                	je     c001a045 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a1>
c001a000:	d4 40                	aam    0x40
c001a002:	d5 39                	aad    0x39
c001a004:	8d 48 d0             	lea    ecx,[eax-0x30]
c001a007:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001a00b:	0f b6 c9             	movzx  ecx,cl
c001a00e:	c1 e1 04             	shl    ecx,0x4
c001a011:	d4 40                	aam    0x40
c001a013:	d5 39                	aad    0x39
c001a015:	8d 58 d0             	lea    ebx,[eax-0x30]
c001a018:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001a01c:	0f b6 db             	movzx  ebx,bl
c001a01f:	09 cb                	or     ebx,ecx
c001a021:	c1 e3 04             	shl    ebx,0x4
c001a024:	d4 40                	aam    0x40
c001a026:	d5 39                	aad    0x39
c001a028:	8d 48 d0             	lea    ecx,[eax-0x30]
c001a02b:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001a02f:	0f b6 c9             	movzx  ecx,cl
c001a032:	09 cb                	or     ebx,ecx
c001a034:	c1 e3 04             	shl    ebx,0x4
c001a037:	89 d9                	mov    ecx,ebx
c001a039:	d4 40                	aam    0x40
c001a03b:	d5 39                	aad    0x39
c001a03d:	8d 58 d0             	lea    ebx,[eax-0x30]
c001a040:	0f b6 db             	movzx  ebx,bl
c001a043:	09 cb                	or     ebx,ecx
c001a045:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001a049:	80 f9 58             	cmp    cl,0x58
c001a04c:	74 47                	je     c001a095 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f1>
c001a04e:	88 c8                	mov    al,cl
c001a050:	d4 40                	aam    0x40
c001a052:	d5 39                	aad    0x39
c001a054:	83 e8 30             	sub    eax,0x30
c001a057:	0f b6 e8             	movzx  ebp,al
c001a05a:	c1 e5 04             	shl    ebp,0x4
c001a05d:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001a061:	d4 40                	aam    0x40
c001a063:	d5 39                	aad    0x39
c001a065:	83 e8 30             	sub    eax,0x30
c001a068:	0f b6 f0             	movzx  esi,al
c001a06b:	09 ee                	or     esi,ebp
c001a06d:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001a071:	c1 e6 04             	shl    esi,0x4
c001a074:	d4 40                	aam    0x40
c001a076:	d5 39                	aad    0x39
c001a078:	83 e8 30             	sub    eax,0x30
c001a07b:	0f b6 e8             	movzx  ebp,al
c001a07e:	09 ee                	or     esi,ebp
c001a080:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001a084:	c1 e6 04             	shl    esi,0x4
c001a087:	89 f5                	mov    ebp,esi
c001a089:	d4 40                	aam    0x40
c001a08b:	d5 39                	aad    0x39
c001a08d:	83 e8 30             	sub    eax,0x30
c001a090:	0f b6 f0             	movzx  esi,al
c001a093:	09 ee                	or     esi,ebp
c001a095:	83 c7 10             	add    edi,0x10
c001a098:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001a09c:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001a09f:	3c 0a                	cmp    al,0xa
c001a0a1:	74 09                	je     c001a0ac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x208>
c001a0a3:	45                   	inc    ebp
c001a0a4:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001a0a7:	75 16                	jne    c001a0bf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x21b>
c001a0a9:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001a0ac:	3c 0a                	cmp    al,0xa
c001a0ae:	0f 94 c0             	sete   al
c001a0b1:	0f b6 c0             	movzx  eax,al
c001a0b4:	01 c7                	add    edi,eax
c001a0b6:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001a0bb:	75 0c                	jne    c001a0c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x225>
c001a0bd:	eb 15                	jmp    c001a0d4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x230>
c001a0bf:	47                   	inc    edi
c001a0c0:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001a0c3:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001a0c7:	eb d3                	jmp    c001a09c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f8>
c001a0c9:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001a0ce:	0f 85 e8 fe ff ff    	jne    c0019fbc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c001a0d4:	80 f9 58             	cmp    cl,0x58
c001a0d7:	74 0b                	je     c001a0e4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x240>
c001a0d9:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001a0de:	0f 85 d8 fe ff ff    	jne    c0019fbc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c001a0e4:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a0e8:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a0ec:	c1 e1 04             	shl    ecx,0x4
c001a0ef:	83 e8 30             	sub    eax,0x30
c001a0f2:	09 c8                	or     eax,ecx
c001a0f4:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001a0f8:	0f 85 be fe ff ff    	jne    c0019fbc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c001a0fe:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001a102:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a106:	c1 e1 04             	shl    ecx,0x4
c001a109:	83 e8 30             	sub    eax,0x30
c001a10c:	09 c8                	or     eax,ecx
c001a10e:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001a112:	0f 85 a4 fe ff ff    	jne    c0019fbc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c001a118:	50                   	push   eax
c001a119:	50                   	push   eax
c001a11a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a11e:	50                   	push   eax
c001a11f:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001a126:	e8 c5 64 fe ff       	call   c00005f0 <strcpy>
c001a12b:	83 c4 10             	add    esp,0x10
c001a12e:	eb 15                	jmp    c001a145 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a1>
c001a130:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001a137:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001a142:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a145:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001a14c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a152:	5b                   	pop    ebx
c001a153:	5e                   	pop    esi
c001a154:	5f                   	pop    edi
c001a155:	5d                   	pop    ebp
c001a156:	c3                   	ret    
c001a157:	90                   	nop

c001a158 <PCI::checkBus(unsigned char)>:
c001a158:	56                   	push   esi
c001a159:	31 f6                	xor    esi,esi
c001a15b:	53                   	push   ebx
c001a15c:	51                   	push   ecx
c001a15d:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001a161:	52                   	push   edx
c001a162:	56                   	push   esi
c001a163:	46                   	inc    esi
c001a164:	0f b6 c3             	movzx  eax,bl
c001a167:	50                   	push   eax
c001a168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a16c:	e8 f3 02 00 00       	call   c001a464 <PCI::checkDevice(unsigned char, unsigned char)>
c001a171:	83 c4 10             	add    esp,0x10
c001a174:	83 fe 20             	cmp    esi,0x20
c001a177:	75 e8                	jne    c001a161 <PCI::checkBus(unsigned char)+0x9>
c001a179:	58                   	pop    eax
c001a17a:	5b                   	pop    ebx
c001a17b:	5e                   	pop    esi
c001a17c:	c3                   	ret    
c001a17d:	90                   	nop

c001a17e <PCI::foundDevice(PCIDeviceInfo)>:
c001a17e:	55                   	push   ebp
c001a17f:	57                   	push   edi
c001a180:	56                   	push   esi
c001a181:	53                   	push   ebx
c001a182:	83 ec 1c             	sub    esp,0x1c
c001a185:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a189:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001a18f:	0f 84 52 01 00 00    	je     c001a2e7 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001a195:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001a199:	66 81 f9 06 04       	cmp    cx,0x406
c001a19e:	75 2c                	jne    c001a1cc <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001a1a0:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a1a5:	50                   	push   eax
c001a1a6:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a1ab:	50                   	push   eax
c001a1ac:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a1b1:	50                   	push   eax
c001a1b2:	56                   	push   esi
c001a1b3:	e8 78 fb ff ff       	call   c0019d30 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a1b8:	0f b6 c0             	movzx  eax,al
c001a1bb:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a1bf:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a1c3:	83 c4 2c             	add    esp,0x2c
c001a1c6:	5b                   	pop    ebx
c001a1c7:	5e                   	pop    esi
c001a1c8:	5f                   	pop    edi
c001a1c9:	5d                   	pop    ebp
c001a1ca:	eb 8c                	jmp    c001a158 <PCI::checkBus(unsigned char)>
c001a1cc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001a1d0:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001a1d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a1da:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001a1de:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a1e2:	88 d3                	mov    bl,dl
c001a1e4:	85 c0                	test   eax,eax
c001a1e6:	74 33                	je     c001a21b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001a1e8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a1eb:	85 d2                	test   edx,edx
c001a1ed:	74 28                	je     c001a217 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a1ef:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001a1f5:	31 ef                	xor    edi,ebp
c001a1f7:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001a1fd:	75 18                	jne    c001a217 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a1ff:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001a203:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001a209:	75 0c                	jne    c001a217 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001a20b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001a211:	0f 84 d0 00 00 00    	je     c001a2e7 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001a217:	8b 00                	mov    eax,DWORD PTR [eax]
c001a219:	eb c9                	jmp    c001a1e4 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001a21b:	66 81 f9 01 06       	cmp    cx,0x601
c001a220:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001a224:	75 19                	jne    c001a23f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001a226:	83 ec 0c             	sub    esp,0xc
c001a229:	68 64 01 00 00       	push   0x164
c001a22e:	e8 30 d6 fe ff       	call   c0007863 <malloc>
c001a233:	89 c5                	mov    ebp,eax
c001a235:	89 04 24             	mov    DWORD PTR [esp],eax
c001a238:	e8 4b 0e 00 00       	call   c001b088 <SATABus::SATABus()>
c001a23d:	eb 1e                	jmp    c001a25d <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001a23f:	66 81 f9 01 01       	cmp    cx,0x101
c001a244:	75 60                	jne    c001a2a6 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001a246:	83 ec 0c             	sub    esp,0xc
c001a249:	68 70 02 00 00       	push   0x270
c001a24e:	e8 10 d6 fe ff       	call   c0007863 <malloc>
c001a253:	89 c5                	mov    ebp,eax
c001a255:	89 04 24             	mov    DWORD PTR [esp],eax
c001a258:	e8 cb 02 00 00       	call   c001a528 <IDE::IDE()>
c001a25d:	58                   	pop    eax
c001a25e:	5a                   	pop    edx
c001a25f:	55                   	push   ebp
c001a260:	56                   	push   esi
c001a261:	e8 26 18 ff ff       	call   c000ba8c <Device::addChild(Device*)>
c001a266:	83 ec 1c             	sub    esp,0x1c
c001a269:	b9 09 00 00 00       	mov    ecx,0x9
c001a26e:	fc                   	cld    
c001a26f:	89 e7                	mov    edi,esp
c001a271:	89 de                	mov    esi,ebx
c001a273:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a275:	55                   	push   ebp
c001a276:	e8 5b 17 ff ff       	call   c000b9d6 <Device::preOpenPCI(PCIDeviceInfo)>
c001a27b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a27e:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a282:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a28a:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a292:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a29a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001a29d:	83 c4 4c             	add    esp,0x4c
c001a2a0:	5b                   	pop    ebx
c001a2a1:	5e                   	pop    esi
c001a2a2:	5f                   	pop    edi
c001a2a3:	5d                   	pop    ebp
c001a2a4:	ff e0                	jmp    eax
c001a2a6:	83 ec 0c             	sub    esp,0xc
c001a2a9:	68 58 01 00 00       	push   0x158
c001a2ae:	e8 b0 d5 fe ff       	call   c0007863 <malloc>
c001a2b3:	89 c5                	mov    ebp,eax
c001a2b5:	58                   	pop    eax
c001a2b6:	5a                   	pop    edx
c001a2b7:	68 82 12 02 c0       	push   0xc0021282
c001a2bc:	55                   	push   ebp
c001a2bd:	e8 68 1a ff ff       	call   c000bd2a <DriverlessDevice::DriverlessDevice(char const*)>
c001a2c2:	59                   	pop    ecx
c001a2c3:	5f                   	pop    edi
c001a2c4:	55                   	push   ebp
c001a2c5:	56                   	push   esi
c001a2c6:	e8 c1 17 ff ff       	call   c000ba8c <Device::addChild(Device*)>
c001a2cb:	b9 09 00 00 00       	mov    ecx,0x9
c001a2d0:	fc                   	cld    
c001a2d1:	89 df                	mov    edi,ebx
c001a2d3:	89 de                	mov    esi,ebx
c001a2d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a2d7:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001a2db:	83 c4 2c             	add    esp,0x2c
c001a2de:	5b                   	pop    ebx
c001a2df:	5e                   	pop    esi
c001a2e0:	5f                   	pop    edi
c001a2e1:	5d                   	pop    ebp
c001a2e2:	e9 ef 16 ff ff       	jmp    c000b9d6 <Device::preOpenPCI(PCIDeviceInfo)>
c001a2e7:	83 c4 1c             	add    esp,0x1c
c001a2ea:	5b                   	pop    ebx
c001a2eb:	5e                   	pop    esi
c001a2ec:	5f                   	pop    edi
c001a2ed:	5d                   	pop    ebp
c001a2ee:	c3                   	ret    
c001a2ef:	90                   	nop

c001a2f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a2f0:	55                   	push   ebp
c001a2f1:	57                   	push   edi
c001a2f2:	56                   	push   esi
c001a2f3:	53                   	push   ebx
c001a2f4:	83 ec 68             	sub    esp,0x68
c001a2f7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a2fe:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a302:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a306:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a30d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a311:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a318:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a31c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a321:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c001a326:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001a32b:	6a 0c                	push   0xc
c001a32d:	57                   	push   edi
c001a32e:	53                   	push   ebx
c001a32f:	56                   	push   esi
c001a330:	55                   	push   ebp
c001a331:	e8 4c f8 ff ff       	call   c0019b82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a336:	83 c4 20             	add    esp,0x20
c001a339:	57                   	push   edi
c001a33a:	53                   	push   ebx
c001a33b:	56                   	push   esi
c001a33c:	55                   	push   ebp
c001a33d:	e8 34 f9 ff ff       	call   c0019c76 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a342:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001a347:	57                   	push   edi
c001a348:	53                   	push   ebx
c001a349:	56                   	push   esi
c001a34a:	55                   	push   ebp
c001a34b:	e8 bc f9 ff ff       	call   c0019d0c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a350:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001a354:	83 c4 14             	add    esp,0x14
c001a357:	6a 3c                	push   0x3c
c001a359:	57                   	push   edi
c001a35a:	53                   	push   ebx
c001a35b:	56                   	push   esi
c001a35c:	55                   	push   ebp
c001a35d:	e8 20 f8 ff ff       	call   c0019b82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a362:	0f b6 c4             	movzx  eax,ah
c001a365:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a369:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001a36d:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001a371:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001a376:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001a37c:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001a382:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a386:	83 c4 20             	add    esp,0x20
c001a389:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a38e:	74 30                	je     c001a3c0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a390:	31 c0                	xor    eax,eax
c001a392:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001a396:	7e 28                	jle    c001a3c0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a398:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001a3a0:	39 cb                	cmp    ebx,ecx
c001a3a2:	75 19                	jne    c001a3bd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001a3a4:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001a3ac:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c001a3b0:	75 0b                	jne    c001a3bd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001a3b2:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001a3b9:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c001a3bd:	40                   	inc    eax
c001a3be:	eb d2                	jmp    c001a392 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001a3c0:	31 d2                	xor    edx,edx
c001a3c2:	83 ec 0c             	sub    esp,0xc
c001a3c5:	57                   	push   edi
c001a3c6:	53                   	push   ebx
c001a3c7:	56                   	push   esi
c001a3c8:	52                   	push   edx
c001a3c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001a3cd:	55                   	push   ebp
c001a3ce:	e8 85 f9 ff ff       	call   c0019d58 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a3d7:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001a3db:	42                   	inc    edx
c001a3dc:	83 c4 20             	add    esp,0x20
c001a3df:	83 fa 06             	cmp    edx,0x6
c001a3e2:	75 de                	jne    c001a3c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001a3e4:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001a3e9:	83 ec 0c             	sub    esp,0xc
c001a3ec:	86 e0                	xchg   al,ah
c001a3ee:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001a3f3:	6a 02                	push   0x2
c001a3f5:	57                   	push   edi
c001a3f6:	53                   	push   ebx
c001a3f7:	56                   	push   esi
c001a3f8:	55                   	push   ebp
c001a3f9:	e8 84 f7 ff ff       	call   c0019b82 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3fe:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001a403:	83 c4 20             	add    esp,0x20
c001a406:	57                   	push   edi
c001a407:	53                   	push   ebx
c001a408:	56                   	push   esi
c001a409:	55                   	push   ebp
c001a40a:	e8 b1 f8 ff ff       	call   c0019cc0 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001a40f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001a413:	57                   	push   edi
c001a414:	53                   	push   ebx
c001a415:	56                   	push   esi
c001a416:	55                   	push   ebp
c001a417:	e8 0e f8 ff ff       	call   c0019c2a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a41c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001a421:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c001a425:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001a429:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a42d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001a431:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001a435:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001a439:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001a43d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001a441:	b9 09 00 00 00       	mov    ecx,0x9
c001a446:	83 ec 0c             	sub    esp,0xc
c001a449:	fc                   	cld    
c001a44a:	89 e7                	mov    edi,esp
c001a44c:	8d 74 24 58          	lea    esi,[esp+0x58]
c001a450:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a452:	55                   	push   ebp
c001a453:	e8 26 fd ff ff       	call   c001a17e <PCI::foundDevice(PCIDeviceInfo)>
c001a458:	81 c4 8c 00 00 00    	add    esp,0x8c
c001a45e:	5b                   	pop    ebx
c001a45f:	5e                   	pop    esi
c001a460:	5f                   	pop    edi
c001a461:	5d                   	pop    ebp
c001a462:	c3                   	ret    
c001a463:	90                   	nop

c001a464 <PCI::checkDevice(unsigned char, unsigned char)>:
c001a464:	55                   	push   ebp
c001a465:	57                   	push   edi
c001a466:	56                   	push   esi
c001a467:	53                   	push   ebx
c001a468:	83 ec 0c             	sub    esp,0xc
c001a46b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001a470:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a474:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a479:	6a 00                	push   0x0
c001a47b:	56                   	push   esi
c001a47c:	57                   	push   edi
c001a47d:	55                   	push   ebp
c001a47e:	e8 a7 f7 ff ff       	call   c0019c2a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a483:	6a 00                	push   0x0
c001a485:	56                   	push   esi
c001a486:	57                   	push   edi
c001a487:	55                   	push   ebp
c001a488:	e8 63 fe ff ff       	call   c001a2f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a48d:	83 c4 20             	add    esp,0x20
c001a490:	6a 00                	push   0x0
c001a492:	56                   	push   esi
c001a493:	57                   	push   edi
c001a494:	55                   	push   ebp
c001a495:	e8 b4 f7 ff ff       	call   c0019c4e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a49a:	83 c4 10             	add    esp,0x10
c001a49d:	84 c0                	test   al,al
c001a49f:	79 27                	jns    c001a4c8 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001a4a1:	bb 01 00 00 00       	mov    ebx,0x1
c001a4a6:	53                   	push   ebx
c001a4a7:	56                   	push   esi
c001a4a8:	57                   	push   edi
c001a4a9:	55                   	push   ebp
c001a4aa:	e8 7b f7 ff ff       	call   c0019c2a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a4af:	83 c4 10             	add    esp,0x10
c001a4b2:	66 40                	inc    ax
c001a4b4:	74 0c                	je     c001a4c2 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001a4b6:	53                   	push   ebx
c001a4b7:	56                   	push   esi
c001a4b8:	57                   	push   edi
c001a4b9:	55                   	push   ebp
c001a4ba:	e8 31 fe ff ff       	call   c001a2f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a4bf:	83 c4 10             	add    esp,0x10
c001a4c2:	43                   	inc    ebx
c001a4c3:	83 fb 08             	cmp    ebx,0x8
c001a4c6:	75 de                	jne    c001a4a6 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001a4c8:	83 c4 0c             	add    esp,0xc
c001a4cb:	5b                   	pop    ebx
c001a4cc:	5e                   	pop    esi
c001a4cd:	5f                   	pop    edi
c001a4ce:	5d                   	pop    ebp
c001a4cf:	c3                   	ret    

c001a4d0 <PCI::detect()>:
c001a4d0:	56                   	push   esi
c001a4d1:	53                   	push   ebx
c001a4d2:	53                   	push   ebx
c001a4d3:	31 db                	xor    ebx,ebx
c001a4d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4d9:	6a 00                	push   0x0
c001a4db:	6a 00                	push   0x0
c001a4dd:	6a 00                	push   0x0
c001a4df:	56                   	push   esi
c001a4e0:	e8 69 f7 ff ff       	call   c0019c4e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a4e5:	83 c4 10             	add    esp,0x10
c001a4e8:	a8 80                	test   al,0x80
c001a4ea:	75 21                	jne    c001a50d <PCI::detect()+0x3d>
c001a4ec:	51                   	push   ecx
c001a4ed:	51                   	push   ecx
c001a4ee:	6a 00                	push   0x0
c001a4f0:	56                   	push   esi
c001a4f1:	e8 62 fc ff ff       	call   c001a158 <PCI::checkBus(unsigned char)>
c001a4f6:	83 c4 10             	add    esp,0x10
c001a4f9:	eb 24                	jmp    c001a51f <PCI::detect()+0x4f>
c001a4fb:	52                   	push   edx
c001a4fc:	52                   	push   edx
c001a4fd:	53                   	push   ebx
c001a4fe:	43                   	inc    ebx
c001a4ff:	56                   	push   esi
c001a500:	e8 53 fc ff ff       	call   c001a158 <PCI::checkBus(unsigned char)>
c001a505:	83 c4 10             	add    esp,0x10
c001a508:	83 fb 08             	cmp    ebx,0x8
c001a50b:	74 12                	je     c001a51f <PCI::detect()+0x4f>
c001a50d:	53                   	push   ebx
c001a50e:	6a 00                	push   0x0
c001a510:	6a 00                	push   0x0
c001a512:	56                   	push   esi
c001a513:	e8 12 f7 ff ff       	call   c0019c2a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a518:	83 c4 10             	add    esp,0x10
c001a51b:	66 40                	inc    ax
c001a51d:	74 dc                	je     c001a4fb <PCI::detect()+0x2b>
c001a51f:	58                   	pop    eax
c001a520:	5b                   	pop    ebx
c001a521:	5e                   	pop    esi
c001a522:	c3                   	ret    
c001a523:	90                   	nop

c001a524 <IDE::close(int, int, void*)>:
c001a524:	83 c8 ff             	or     eax,0xffffffff
c001a527:	c3                   	ret    

c001a528 <IDE::IDE()>:
c001a528:	83 ec 0c             	sub    esp,0xc
c001a52b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a52f:	83 ec 08             	sub    esp,0x8
c001a532:	68 c8 12 02 c0       	push   0xc00212c8
c001a537:	50                   	push   eax
c001a538:	e8 93 18 ff ff       	call   c000bdd0 <HardDiskController::HardDiskController(char const*)>
c001a53d:	83 c4 10             	add    esp,0x10
c001a540:	ba 58 13 02 c0       	mov    edx,0xc0021358
c001a545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a549:	89 10                	mov    DWORD PTR [eax],edx
c001a54b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a54f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001a556:	90                   	nop
c001a557:	83 c4 0c             	add    esp,0xc
c001a55a:	c3                   	ret    
c001a55b:	90                   	nop

c001a55c <IDE::prepareInterrupt(unsigned char)>:
c001a55c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a561:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a565:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001a56d:	c3                   	ret    

c001a56e <selectDrive(unsigned char, unsigned char)>:
c001a56e:	c3                   	ret    
c001a56f:	90                   	nop

c001a570 <IDE::getBase(unsigned char)>:
c001a570:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001a575:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a579:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001a581:	c3                   	ret    

c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001a582:	55                   	push   ebp
c001a583:	57                   	push   edi
c001a584:	56                   	push   esi
c001a585:	53                   	push   ebx
c001a586:	83 ec 1c             	sub    esp,0x1c
c001a589:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a58d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a591:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a595:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a599:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001a59c:	80 f9 03             	cmp    cl,0x3
c001a59f:	77 51                	ja     c001a5f2 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001a5a1:	0f b6 f2             	movzx  esi,dl
c001a5a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5a8:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a5ab:	0f b6 db             	movzx  ebx,bl
c001a5ae:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001a5b2:	83 ca 80             	or     edx,0xffffff80
c001a5b5:	0f b6 d2             	movzx  edx,dl
c001a5b8:	52                   	push   edx
c001a5b9:	6a 0c                	push   0xc
c001a5bb:	56                   	push   esi
c001a5bc:	57                   	push   edi
c001a5bd:	e8 c0 ff ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5c2:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001a5c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a5cb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001a5cf:	ee                   	out    dx,al
c001a5d0:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001a5d5:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001a5d9:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001a5dd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a5e1:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001a5e9:	83 c4 2c             	add    esp,0x2c
c001a5ec:	5b                   	pop    ebx
c001a5ed:	5e                   	pop    esi
c001a5ee:	5f                   	pop    edi
c001a5ef:	5d                   	pop    ebp
c001a5f0:	eb 90                	jmp    c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5f2:	80 fb 07             	cmp    bl,0x7
c001a5f5:	77 12                	ja     c001a609 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001a5f7:	0f b6 d2             	movzx  edx,dl
c001a5fa:	0f b6 db             	movzx  ebx,bl
c001a5fd:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001a605:	89 da                	mov    edx,ebx
c001a607:	eb 2f                	jmp    c001a638 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a609:	80 fb 0d             	cmp    bl,0xd
c001a60c:	77 13                	ja     c001a621 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001a60e:	0f b6 d2             	movzx  edx,dl
c001a611:	0f b6 db             	movzx  ebx,bl
c001a614:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001a61b:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001a61f:	eb 17                	jmp    c001a638 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a621:	80 fb 15             	cmp    bl,0x15
c001a624:	77 13                	ja     c001a639 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001a626:	0f b6 d2             	movzx  edx,dl
c001a629:	0f b6 db             	movzx  ebx,bl
c001a62c:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001a634:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001a638:	ee                   	out    dx,al
c001a639:	83 c4 1c             	add    esp,0x1c
c001a63c:	5b                   	pop    ebx
c001a63d:	5e                   	pop    esi
c001a63e:	5f                   	pop    edi
c001a63f:	5d                   	pop    ebp
c001a640:	c3                   	ret    
c001a641:	90                   	nop

c001a642 <IDE::read(unsigned char, unsigned char)>:
c001a642:	55                   	push   ebp
c001a643:	57                   	push   edi
c001a644:	56                   	push   esi
c001a645:	53                   	push   ebx
c001a646:	83 ec 1c             	sub    esp,0x1c
c001a649:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a64d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a651:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a655:	8d 43 f8             	lea    eax,[ebx-0x8]
c001a658:	3c 03                	cmp    al,0x3
c001a65a:	77 43                	ja     c001a69f <IDE::read(unsigned char, unsigned char)+0x5d>
c001a65c:	0f b6 f2             	movzx  esi,dl
c001a65f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a662:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001a666:	83 c8 80             	or     eax,0xffffff80
c001a669:	0f b6 c0             	movzx  eax,al
c001a66c:	50                   	push   eax
c001a66d:	6a 0c                	push   0xc
c001a66f:	56                   	push   esi
c001a670:	57                   	push   edi
c001a671:	e8 0c ff ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a676:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001a67b:	0f b6 c3             	movzx  eax,bl
c001a67e:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001a682:	ec                   	in     al,dx
c001a683:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001a688:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a68c:	52                   	push   edx
c001a68d:	6a 0c                	push   0xc
c001a68f:	56                   	push   esi
c001a690:	57                   	push   edi
c001a691:	e8 ec fe ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a696:	83 c4 20             	add    esp,0x20
c001a699:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a69d:	eb 49                	jmp    c001a6e8 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a69f:	80 fb 07             	cmp    bl,0x7
c001a6a2:	77 12                	ja     c001a6b6 <IDE::read(unsigned char, unsigned char)+0x74>
c001a6a4:	0f b6 d2             	movzx  edx,dl
c001a6a7:	0f b6 c3             	movzx  eax,bl
c001a6aa:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001a6b2:	89 c2                	mov    edx,eax
c001a6b4:	eb 31                	jmp    c001a6e7 <IDE::read(unsigned char, unsigned char)+0xa5>
c001a6b6:	80 fb 0d             	cmp    bl,0xd
c001a6b9:	77 13                	ja     c001a6ce <IDE::read(unsigned char, unsigned char)+0x8c>
c001a6bb:	0f b6 d2             	movzx  edx,dl
c001a6be:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001a6c5:	0f b6 d3             	movzx  edx,bl
c001a6c8:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001a6cc:	eb 19                	jmp    c001a6e7 <IDE::read(unsigned char, unsigned char)+0xa5>
c001a6ce:	31 c0                	xor    eax,eax
c001a6d0:	80 fb 15             	cmp    bl,0x15
c001a6d3:	77 13                	ja     c001a6e8 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a6d5:	0f b6 d2             	movzx  edx,dl
c001a6d8:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001a6e0:	0f b6 d3             	movzx  edx,bl
c001a6e3:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001a6e7:	ec                   	in     al,dx
c001a6e8:	83 c4 1c             	add    esp,0x1c
c001a6eb:	5b                   	pop    ebx
c001a6ec:	5e                   	pop    esi
c001a6ed:	5f                   	pop    edi
c001a6ee:	5d                   	pop    ebp
c001a6ef:	c3                   	ret    

c001a6f0 <IDE::waitInterrupt(unsigned char)>:
c001a6f0:	57                   	push   edi
c001a6f1:	56                   	push   esi
c001a6f2:	31 f6                	xor    esi,esi
c001a6f4:	53                   	push   ebx
c001a6f5:	83 ec 10             	sub    esp,0x10
c001a6f8:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001a6fc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a700:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a704:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a709:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001a710:	84 db                	test   bl,bl
c001a712:	75 33                	jne    c001a747 <IDE::waitInterrupt(unsigned char)+0x57>
c001a714:	52                   	push   edx
c001a715:	6a 0c                	push   0xc
c001a717:	50                   	push   eax
c001a718:	57                   	push   edi
c001a719:	e8 24 ff ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001a71e:	83 c4 10             	add    esp,0x10
c001a721:	a8 01                	test   al,0x1
c001a723:	75 2a                	jne    c001a74f <IDE::waitInterrupt(unsigned char)+0x5f>
c001a725:	f7 c6 04 00 00 00    	test   esi,0x4
c001a72b:	75 12                	jne    c001a73f <IDE::waitInterrupt(unsigned char)+0x4f>
c001a72d:	83 fe 32             	cmp    esi,0x32
c001a730:	7e 0d                	jle    c001a73f <IDE::waitInterrupt(unsigned char)+0x4f>
c001a732:	83 ec 0c             	sub    esp,0xc
c001a735:	6a 64                	push   0x64
c001a737:	e8 1c a7 ff ff       	call   c0014e58 <milliTenthSleep(unsigned int)>
c001a73c:	83 c4 10             	add    esp,0x10
c001a73f:	83 fe 3c             	cmp    esi,0x3c
c001a742:	74 0b                	je     c001a74f <IDE::waitInterrupt(unsigned char)+0x5f>
c001a744:	46                   	inc    esi
c001a745:	eb bd                	jmp    c001a704 <IDE::waitInterrupt(unsigned char)+0x14>
c001a747:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001a74f:	83 c4 10             	add    esp,0x10
c001a752:	88 d8                	mov    al,bl
c001a754:	5b                   	pop    ebx
c001a755:	5e                   	pop    esi
c001a756:	5f                   	pop    edi
c001a757:	c3                   	ret    

c001a758 <ideChannel0IRQHandler(regs*, void*)>:
c001a758:	83 ec 10             	sub    esp,0x10
c001a75b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a75f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001a766:	6a 07                	push   0x7
c001a768:	6a 00                	push   0x0
c001a76a:	50                   	push   eax
c001a76b:	e8 d2 fe ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001a770:	83 c4 1c             	add    esp,0x1c
c001a773:	c3                   	ret    

c001a774 <ideChannel1IRQHandler(regs*, void*)>:
c001a774:	83 ec 10             	sub    esp,0x10
c001a777:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a77b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001a782:	6a 07                	push   0x7
c001a784:	6a 01                	push   0x1
c001a786:	50                   	push   eax
c001a787:	e8 b6 fe ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001a78c:	83 c4 1c             	add    esp,0x1c
c001a78f:	c3                   	ret    

c001a790 <IDE::enableIRQs(unsigned char, bool)>:
c001a790:	57                   	push   edi
c001a791:	56                   	push   esi
c001a792:	be 04 00 00 00       	mov    esi,0x4
c001a797:	53                   	push   ebx
c001a798:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001a79d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a7a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a7a6:	0f 94 c0             	sete   al
c001a7a9:	01 c0                	add    eax,eax
c001a7ab:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001a7b2:	0f b6 c0             	movzx  eax,al
c001a7b5:	50                   	push   eax
c001a7b6:	6a 0c                	push   0xc
c001a7b8:	57                   	push   edi
c001a7b9:	53                   	push   ebx
c001a7ba:	e8 c3 fd ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a7bf:	83 c4 10             	add    esp,0x10
c001a7c2:	50                   	push   eax
c001a7c3:	6a 0c                	push   0xc
c001a7c5:	57                   	push   edi
c001a7c6:	53                   	push   ebx
c001a7c7:	e8 76 fe ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001a7cc:	83 c4 10             	add    esp,0x10
c001a7cf:	4e                   	dec    esi
c001a7d0:	75 f0                	jne    c001a7c2 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001a7d2:	5b                   	pop    ebx
c001a7d3:	5e                   	pop    esi
c001a7d4:	5f                   	pop    edi
c001a7d5:	c3                   	ret    

c001a7d6 <IDE::open(int, int, void*)>:
c001a7d6:	55                   	push   ebp
c001a7d7:	57                   	push   edi
c001a7d8:	56                   	push   esi
c001a7d9:	53                   	push   ebx
c001a7da:	83 ec 1c             	sub    esp,0x1c
c001a7dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a7e1:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001a7ea:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001a7f3:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001a7fa:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001a801:	0f 85 b2 02 00 00    	jne    c001aab9 <IDE::open(int, int, void*)+0x2e3>
c001a807:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001a80d:	88 04 24             	mov    BYTE PTR [esp],al
c001a810:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a813:	83 e0 7f             	and    eax,0x7f
c001a816:	83 f8 05             	cmp    eax,0x5
c001a819:	74 05                	je     c001a820 <IDE::open(int, int, void*)+0x4a>
c001a81b:	83 f8 0f             	cmp    eax,0xf
c001a81e:	75 32                	jne    c001a852 <IDE::open(int, int, void*)+0x7c>
c001a820:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001a826:	83 e0 fc             	and    eax,0xfffffffc
c001a829:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a830:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001a836:	83 e0 fc             	and    eax,0xfffffffc
c001a839:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a840:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001a846:	83 e0 fc             	and    eax,0xfffffffc
c001a849:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a850:	eb 14                	jmp    c001a866 <IDE::open(int, int, void*)+0x90>
c001a852:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001a85c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001a866:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001a86d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001a874:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a878:	89 c6                	mov    esi,eax
c001a87a:	89 e8                	mov    eax,ebp
c001a87c:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a881:	c1 e6 10             	shl    esi,0x10
c001a884:	89 fa                	mov    edx,edi
c001a886:	c1 e0 0b             	shl    eax,0xb
c001a889:	09 f0                	or     eax,esi
c001a88b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001a892:	c1 e6 08             	shl    esi,0x8
c001a895:	09 c6                	or     esi,eax
c001a897:	89 f0                	mov    eax,esi
c001a899:	0d 08 00 00 80       	or     eax,0x80000008
c001a89e:	ef                   	out    dx,eax
c001a89f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001a8a4:	89 ca                	mov    edx,ecx
c001a8a6:	ed                   	in     eax,dx
c001a8a7:	c1 e8 10             	shr    eax,0x10
c001a8aa:	3d ff ff 00 00       	cmp    eax,0xffff
c001a8af:	0f 84 f3 00 00 00    	je     c001a9a8 <IDE::open(int, int, void*)+0x1d2>
c001a8b5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001a8bb:	89 fa                	mov    edx,edi
c001a8bd:	89 f0                	mov    eax,esi
c001a8bf:	ef                   	out    dx,eax
c001a8c0:	b0 fe                	mov    al,0xfe
c001a8c2:	89 ca                	mov    edx,ecx
c001a8c4:	ee                   	out    dx,al
c001a8c5:	89 f0                	mov    eax,esi
c001a8c7:	89 fa                	mov    edx,edi
c001a8c9:	ef                   	out    dx,eax
c001a8ca:	89 ca                	mov    edx,ecx
c001a8cc:	ed                   	in     eax,dx
c001a8cd:	3c fe                	cmp    al,0xfe
c001a8cf:	0f 85 a9 00 00 00    	jne    c001a97e <IDE::open(int, int, void*)+0x1a8>
c001a8d5:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c001a8db:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001a8e2:	74 33                	je     c001a917 <IDE::open(int, int, void*)+0x141>
c001a8e4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001a8ea:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001a8ee:	40                   	inc    eax
c001a8ef:	83 ec 0c             	sub    esp,0xc
c001a8f2:	0f b6 c0             	movzx  eax,al
c001a8f5:	50                   	push   eax
c001a8f6:	55                   	push   ebp
c001a8f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a8fb:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001a901:	51                   	push   ecx
c001a902:	e8 19 40 ff ff       	call   c000e920 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001a907:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001a90c:	83 c4 1c             	add    esp,0x1c
c001a90f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001a915:	eb 0a                	jmp    c001a921 <IDE::open(int, int, void*)+0x14b>
c001a917:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001a921:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001a928:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001a92f:	c1 e1 10             	shl    ecx,0x10
c001a932:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a937:	c1 e0 08             	shl    eax,0x8
c001a93a:	89 fa                	mov    edx,edi
c001a93c:	09 c1                	or     ecx,eax
c001a93e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001a945:	c1 e0 0b             	shl    eax,0xb
c001a948:	09 c1                	or     ecx,eax
c001a94a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001a950:	89 c8                	mov    eax,ecx
c001a952:	ef                   	out    dx,eax
c001a953:	be fc 0c 00 00       	mov    esi,0xcfc
c001a958:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001a95e:	89 f2                	mov    edx,esi
c001a960:	ee                   	out    dx,al
c001a961:	89 c8                	mov    eax,ecx
c001a963:	89 fa                	mov    edx,edi
c001a965:	ef                   	out    dx,eax
c001a966:	89 f2                	mov    edx,esi
c001a968:	ed                   	in     eax,dx
c001a969:	0f b6 c0             	movzx  eax,al
c001a96c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001a972:	74 44                	je     c001a9b8 <IDE::open(int, int, void*)+0x1e2>
c001a974:	83 ec 0c             	sub    esp,0xc
c001a977:	68 e0 12 02 c0       	push   0xc00212e0
c001a97c:	eb 32                	jmp    c001a9b0 <IDE::open(int, int, void*)+0x1da>
c001a97e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001a987:	75 15                	jne    c001a99e <IDE::open(int, int, void*)+0x1c8>
c001a989:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001a98d:	74 06                	je     c001a995 <IDE::open(int, int, void*)+0x1bf>
c001a98f:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001a993:	75 09                	jne    c001a99e <IDE::open(int, int, void*)+0x1c8>
c001a995:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001a99c:	eb 1a                	jmp    c001a9b8 <IDE::open(int, int, void*)+0x1e2>
c001a99e:	83 ec 0c             	sub    esp,0xc
c001a9a1:	68 e8 12 02 c0       	push   0xc00212e8
c001a9a6:	eb 08                	jmp    c001a9b0 <IDE::open(int, int, void*)+0x1da>
c001a9a8:	83 ec 0c             	sub    esp,0xc
c001a9ab:	68 19 13 02 c0       	push   0xc0021319
c001a9b0:	e8 52 5a ff ff       	call   c0010407 <KePanic(char const*)>
c001a9b5:	83 c4 10             	add    esp,0x10
c001a9b8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001a9bf:	79 1a                	jns    c001a9db <IDE::open(int, int, void*)+0x205>
c001a9c1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001a9c7:	83 e0 fc             	and    eax,0xfffffffc
c001a9ca:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001a9d1:	83 c0 08             	add    eax,0x8
c001a9d4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001a9db:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001a9e1:	89 c2                	mov    edx,eax
c001a9e3:	83 e2 0f             	and    edx,0xf
c001a9e6:	66 83 fa 08          	cmp    dx,0x8
c001a9ea:	75 0a                	jne    c001a9f6 <IDE::open(int, int, void*)+0x220>
c001a9ec:	83 e8 02             	sub    eax,0x2
c001a9ef:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a9f6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001a9fc:	89 c2                	mov    edx,eax
c001a9fe:	83 e2 0f             	and    edx,0xf
c001aa01:	66 83 fa 08          	cmp    dx,0x8
c001aa05:	75 0a                	jne    c001aa11 <IDE::open(int, int, void*)+0x23b>
c001aa07:	83 e8 02             	sub    eax,0x2
c001aa0a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001aa11:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001aa18:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001aa1f:	89 d0                	mov    eax,edx
c001aa21:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001aa24:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001aa28:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001aa2c:	8d 4a 01             	lea    ecx,[edx+0x1]
c001aa2f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001aa34:	0f b6 c9             	movzx  ecx,cl
c001aa37:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001aa3e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001aa41:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001aa45:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001aa49:	8d 50 02             	lea    edx,[eax+0x2]
c001aa4c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001aa51:	0f b6 d2             	movzx  edx,dl
c001aa54:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001aa5a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001aa5d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001aa61:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001aa65:	8d 48 03             	lea    ecx,[eax+0x3]
c001aa68:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001aa6d:	0f b6 c9             	movzx  ecx,cl
c001aa70:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001aa76:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001aa79:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001aa7d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001aa81:	8d 50 04             	lea    edx,[eax+0x4]
c001aa84:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001aa8a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001aa8f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001aa96:	66 85 f6             	test   si,si
c001aa99:	74 5b                	je     c001aaf6 <IDE::open(int, int, void*)+0x320>
c001aa9b:	0f b6 d2             	movzx  edx,dl
c001aa9e:	83 c0 05             	add    eax,0x5
c001aaa1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001aaa4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001aaa8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001aaac:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001aab2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001aab7:	eb 3d                	jmp    c001aaf6 <IDE::open(int, int, void*)+0x320>
c001aab9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001aabf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001aac6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001aacd:	66 05 06 02          	add    ax,0x206
c001aad1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001aad8:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001aadf:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001aae6:	66 05 06 02          	add    ax,0x206
c001aaea:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001aaf1:	e9 e5 fe ff ff       	jmp    c001a9db <IDE::open(int, int, void*)+0x205>
c001aaf6:	50                   	push   eax
c001aaf7:	50                   	push   eax
c001aaf8:	6a 00                	push   0x0
c001aafa:	53                   	push   ebx
c001aafb:	e8 5c fa ff ff       	call   c001a55c <IDE::prepareInterrupt(unsigned char)>
c001ab00:	5a                   	pop    edx
c001ab01:	59                   	pop    ecx
c001ab02:	6a 01                	push   0x1
c001ab04:	53                   	push   ebx
c001ab05:	e8 52 fa ff ff       	call   c001a55c <IDE::prepareInterrupt(unsigned char)>
c001ab0a:	83 c4 0c             	add    esp,0xc
c001ab0d:	6a 00                	push   0x0
c001ab0f:	6a 00                	push   0x0
c001ab11:	53                   	push   ebx
c001ab12:	e8 79 fc ff ff       	call   c001a790 <IDE::enableIRQs(unsigned char, bool)>
c001ab17:	83 c4 0c             	add    esp,0xc
c001ab1a:	6a 00                	push   0x0
c001ab1c:	6a 01                	push   0x1
c001ab1e:	53                   	push   ebx
c001ab1f:	e8 6c fc ff ff       	call   c001a790 <IDE::enableIRQs(unsigned char, bool)>
c001ab24:	83 c4 10             	add    esp,0x10
c001ab27:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ab2e:	74 34                	je     c001ab64 <IDE::open(int, int, void*)+0x38e>
c001ab30:	83 ec 0c             	sub    esp,0xc
c001ab33:	53                   	push   ebx
c001ab34:	6a 01                	push   0x1
c001ab36:	68 58 a7 01 c0       	push   0xc001a758
c001ab3b:	6a 0e                	push   0xe
c001ab3d:	53                   	push   ebx
c001ab3e:	e8 f5 0e ff ff       	call   c000ba38 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ab43:	83 c4 14             	add    esp,0x14
c001ab46:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ab4c:	53                   	push   ebx
c001ab4d:	6a 01                	push   0x1
c001ab4f:	68 74 a7 01 c0       	push   0xc001a774
c001ab54:	6a 0f                	push   0xf
c001ab56:	53                   	push   ebx
c001ab57:	e8 dc 0e ff ff       	call   c000ba38 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ab5c:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ab62:	eb 38                	jmp    c001ab9c <IDE::open(int, int, void*)+0x3c6>
c001ab64:	83 ec 0c             	sub    esp,0xc
c001ab67:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ab71:	53                   	push   ebx
c001ab72:	6a 00                	push   0x0
c001ab74:	68 58 a7 01 c0       	push   0xc001a758
c001ab79:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ab7f:	53                   	push   ebx
c001ab80:	e8 b3 0e ff ff       	call   c000ba38 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ab85:	83 c4 14             	add    esp,0x14
c001ab88:	53                   	push   ebx
c001ab89:	6a 00                	push   0x0
c001ab8b:	68 74 a7 01 c0       	push   0xc001a774
c001ab90:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ab96:	53                   	push   ebx
c001ab97:	e8 9c 0e ff ff       	call   c000ba38 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ab9c:	83 c4 20             	add    esp,0x20
c001ab9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aba1:	83 ec 0c             	sub    esp,0xc
c001aba4:	53                   	push   ebx
c001aba5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001aba8:	83 c4 0c             	add    esp,0xc
c001abab:	6a 07                	push   0x7
c001abad:	6a 00                	push   0x0
c001abaf:	53                   	push   ebx
c001abb0:	e8 8d fa ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001abb5:	83 c4 0c             	add    esp,0xc
c001abb8:	6a 07                	push   0x7
c001abba:	6a 01                	push   0x1
c001abbc:	53                   	push   ebx
c001abbd:	e8 80 fa ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001abc2:	83 c4 0c             	add    esp,0xc
c001abc5:	6a 01                	push   0x1
c001abc7:	6a 00                	push   0x0
c001abc9:	53                   	push   ebx
c001abca:	e8 c1 fb ff ff       	call   c001a790 <IDE::enableIRQs(unsigned char, bool)>
c001abcf:	83 c4 0c             	add    esp,0xc
c001abd2:	6a 01                	push   0x1
c001abd4:	6a 01                	push   0x1
c001abd6:	53                   	push   ebx
c001abd7:	e8 b4 fb ff ff       	call   c001a790 <IDE::enableIRQs(unsigned char, bool)>
c001abdc:	83 c4 2c             	add    esp,0x2c
c001abdf:	31 c0                	xor    eax,eax
c001abe1:	5b                   	pop    ebx
c001abe2:	5e                   	pop    esi
c001abe3:	5f                   	pop    edi
c001abe4:	5d                   	pop    ebp
c001abe5:	c3                   	ret    

c001abe6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001abe6:	55                   	push   ebp
c001abe7:	57                   	push   edi
c001abe8:	56                   	push   esi
c001abe9:	53                   	push   ebx
c001abea:	83 ec 1c             	sub    esp,0x1c
c001abed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abf1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001abf5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001abf9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001abfd:	8d 50 f8             	lea    edx,[eax-0x8]
c001ac00:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ac04:	80 fa 03             	cmp    dl,0x3
c001ac07:	77 5d                	ja     c001ac66 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ac09:	0f b6 db             	movzx  ebx,bl
c001ac0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ac10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac14:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ac17:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ac1b:	83 ca 80             	or     edx,0xffffff80
c001ac1e:	0f b6 d2             	movzx  edx,dl
c001ac21:	52                   	push   edx
c001ac22:	6a 0c                	push   0xc
c001ac24:	53                   	push   ebx
c001ac25:	56                   	push   esi
c001ac26:	e8 57 f9 ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac2f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ac34:	0f b6 c0             	movzx  eax,al
c001ac37:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ac3b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ac3f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ac41:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ac46:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ac4a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ac4e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ac52:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ac5a:	83 c4 2c             	add    esp,0x2c
c001ac5d:	5b                   	pop    ebx
c001ac5e:	5e                   	pop    esi
c001ac5f:	5f                   	pop    edi
c001ac60:	5d                   	pop    ebp
c001ac61:	e9 1c f9 ff ff       	jmp    c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac66:	3c 07                	cmp    al,0x7
c001ac68:	77 10                	ja     c001ac7a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ac6a:	0f b6 db             	movzx  ebx,bl
c001ac6d:	0f b6 d0             	movzx  edx,al
c001ac70:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ac78:	eb 2d                	jmp    c001aca7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ac7a:	3c 0d                	cmp    al,0xd
c001ac7c:	77 13                	ja     c001ac91 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ac7e:	0f b6 db             	movzx  ebx,bl
c001ac81:	0f b6 c0             	movzx  eax,al
c001ac84:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ac8b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ac8f:	eb 16                	jmp    c001aca7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ac91:	3c 15                	cmp    al,0x15
c001ac93:	77 14                	ja     c001aca9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001ac95:	0f b6 db             	movzx  ebx,bl
c001ac98:	0f b6 c0             	movzx  eax,al
c001ac9b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001aca3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001aca7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001aca9:	83 c4 1c             	add    esp,0x1c
c001acac:	5b                   	pop    ebx
c001acad:	5e                   	pop    esi
c001acae:	5f                   	pop    edi
c001acaf:	5d                   	pop    ebp
c001acb0:	c3                   	ret    
c001acb1:	90                   	nop

c001acb2 <IDE::detect()>:
c001acb2:	55                   	push   ebp
c001acb3:	57                   	push   edi
c001acb4:	56                   	push   esi
c001acb5:	53                   	push   ebx
c001acb6:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001acbc:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001acc3:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001acca:	0f 85 99 02 00 00    	jne    c001af69 <IDE::detect()+0x2b7>
c001acd0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001acd7:	31 f6                	xor    esi,esi
c001acd9:	31 ed                	xor    ebp,ebp
c001acdb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ace3:	89 e8                	mov    eax,ebp
c001ace5:	c1 e0 06             	shl    eax,0x6
c001ace8:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001acf0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001acf4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001acf8:	c1 e0 04             	shl    eax,0x4
c001acfb:	83 c8 a0             	or     eax,0xffffffa0
c001acfe:	0f b6 c0             	movzx  eax,al
c001ad01:	50                   	push   eax
c001ad02:	6a 06                	push   0x6
c001ad04:	56                   	push   esi
c001ad05:	53                   	push   ebx
c001ad06:	e8 77 f8 ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad0b:	83 c4 0c             	add    esp,0xc
c001ad0e:	6a 0c                	push   0xc
c001ad10:	56                   	push   esi
c001ad11:	53                   	push   ebx
c001ad12:	e8 2b f9 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001ad17:	83 c4 0c             	add    esp,0xc
c001ad1a:	6a 0c                	push   0xc
c001ad1c:	56                   	push   esi
c001ad1d:	53                   	push   ebx
c001ad1e:	e8 1f f9 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001ad23:	83 c4 0c             	add    esp,0xc
c001ad26:	6a 0c                	push   0xc
c001ad28:	56                   	push   esi
c001ad29:	53                   	push   ebx
c001ad2a:	e8 13 f9 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001ad2f:	83 c4 0c             	add    esp,0xc
c001ad32:	6a 0c                	push   0xc
c001ad34:	56                   	push   esi
c001ad35:	53                   	push   ebx
c001ad36:	e8 07 f9 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001ad3b:	68 ec 00 00 00       	push   0xec
c001ad40:	6a 07                	push   0x7
c001ad42:	56                   	push   esi
c001ad43:	53                   	push   ebx
c001ad44:	e8 39 f8 ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ad49:	83 c4 1c             	add    esp,0x1c
c001ad4c:	6a 0c                	push   0xc
c001ad4e:	56                   	push   esi
c001ad4f:	53                   	push   ebx
c001ad50:	e8 ed f8 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001ad55:	83 c4 0c             	add    esp,0xc
c001ad58:	6a 0c                	push   0xc
c001ad5a:	56                   	push   esi
c001ad5b:	53                   	push   ebx
c001ad5c:	e8 e1 f8 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001ad61:	83 c4 0c             	add    esp,0xc
c001ad64:	6a 0c                	push   0xc
c001ad66:	56                   	push   esi
c001ad67:	53                   	push   ebx
c001ad68:	e8 d5 f8 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001ad6d:	83 c4 0c             	add    esp,0xc
c001ad70:	6a 0c                	push   0xc
c001ad72:	56                   	push   esi
c001ad73:	53                   	push   ebx
c001ad74:	e8 c9 f8 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001ad79:	83 c4 0c             	add    esp,0xc
c001ad7c:	6a 0c                	push   0xc
c001ad7e:	56                   	push   esi
c001ad7f:	53                   	push   ebx
c001ad80:	e8 bd f8 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001ad85:	83 c4 10             	add    esp,0x10
c001ad88:	84 c0                	test   al,al
c001ad8a:	0f 84 5f 01 00 00    	je     c001aeef <IDE::detect()+0x23d>
c001ad90:	31 ff                	xor    edi,edi
c001ad92:	50                   	push   eax
c001ad93:	6a 0c                	push   0xc
c001ad95:	56                   	push   esi
c001ad96:	53                   	push   ebx
c001ad97:	e8 a6 f8 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001ad9c:	83 c4 10             	add    esp,0x10
c001ad9f:	a8 01                	test   al,0x1
c001ada1:	0f 85 69 01 00 00    	jne    c001af10 <IDE::detect()+0x25e>
c001ada7:	84 c0                	test   al,al
c001ada9:	78 04                	js     c001adaf <IDE::detect()+0xfd>
c001adab:	a8 08                	test   al,0x8
c001adad:	75 23                	jne    c001add2 <IDE::detect()+0x120>
c001adaf:	47                   	inc    edi
c001adb0:	81 ff 17 01 00 00    	cmp    edi,0x117
c001adb6:	7e da                	jle    c001ad92 <IDE::detect()+0xe0>
c001adb8:	83 ec 0c             	sub    esp,0xc
c001adbb:	6a 32                	push   0x32
c001adbd:	e8 96 a0 ff ff       	call   c0014e58 <milliTenthSleep(unsigned int)>
c001adc2:	83 c4 10             	add    esp,0x10
c001adc5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001adcb:	75 c5                	jne    c001ad92 <IDE::detect()+0xe0>
c001adcd:	e9 3e 01 00 00       	jmp    c001af10 <IDE::detect()+0x25e>
c001add2:	31 c9                	xor    ecx,ecx
c001add4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001add8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001addc:	83 ec 0c             	sub    esp,0xc
c001addf:	68 80 00 00 00       	push   0x80
c001ade4:	57                   	push   edi
c001ade5:	6a 00                	push   0x0
c001ade7:	56                   	push   esi
c001ade8:	53                   	push   ebx
c001ade9:	e8 f8 fd ff ff       	call   c001abe6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001adee:	89 e8                	mov    eax,ebp
c001adf0:	c1 e0 06             	shl    eax,0x6
c001adf3:	01 d8                	add    eax,ebx
c001adf5:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001adfa:	89 d1                	mov    ecx,edx
c001adfc:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ae03:	89 f2                	mov    edx,esi
c001ae05:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ae0c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ae12:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ae16:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ae1c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ae20:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ae27:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ae2f:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ae36:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ae3e:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ae44:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ae4b:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ae51:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ae55:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ae59:	83 c4 20             	add    esp,0x20
c001ae5c:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001ae5f:	83 c7 02             	add    edi,0x2
c001ae62:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001ae68:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001ae6b:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001ae71:	83 c0 02             	add    eax,0x2
c001ae74:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001ae78:	75 e2                	jne    c001ae5c <IDE::detect()+0x1aa>
c001ae7a:	89 e8                	mov    eax,ebp
c001ae7c:	c1 e0 06             	shl    eax,0x6
c001ae7f:	01 d8                	add    eax,ebx
c001ae81:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001ae87:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001ae8e:	66 c1 ea 09          	shr    dx,0x9
c001ae92:	83 e2 01             	and    edx,0x1
c001ae95:	84 c9                	test   cl,cl
c001ae97:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001ae9d:	75 22                	jne    c001aec1 <IDE::detect()+0x20f>
c001ae9f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001aea6:	74 46                	je     c001aeee <IDE::detect()+0x23c>
c001aea8:	83 ec 0c             	sub    esp,0xc
c001aeab:	68 7c 01 00 00       	push   0x17c
c001aeb0:	e8 ae c9 fe ff       	call   c0007863 <malloc>
c001aeb5:	89 c7                	mov    edi,eax
c001aeb7:	89 04 24             	mov    DWORD PTR [esp],eax
c001aeba:	e8 13 05 00 00       	call   c001b3d2 <ATA::ATA()>
c001aebf:	eb 17                	jmp    c001aed8 <IDE::detect()+0x226>
c001aec1:	83 ec 0c             	sub    esp,0xc
c001aec4:	68 84 01 00 00       	push   0x184
c001aec9:	e8 95 c9 fe ff       	call   c0007863 <malloc>
c001aece:	89 c7                	mov    edi,eax
c001aed0:	89 04 24             	mov    DWORD PTR [esp],eax
c001aed3:	e8 44 0e 00 00       	call   c001bd1c <ATAPI::ATAPI()>
c001aed8:	5a                   	pop    edx
c001aed9:	59                   	pop    ecx
c001aeda:	57                   	push   edi
c001aedb:	53                   	push   ebx
c001aedc:	e8 ab 0b ff ff       	call   c000ba8c <Device::addChild(Device*)>
c001aee1:	8b 07                	mov    eax,DWORD PTR [edi]
c001aee3:	53                   	push   ebx
c001aee4:	55                   	push   ebp
c001aee5:	6a 00                	push   0x0
c001aee7:	57                   	push   edi
c001aee8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aeeb:	83 c4 20             	add    esp,0x20
c001aeee:	45                   	inc    ebp
c001aeef:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001aef4:	74 0d                	je     c001af03 <IDE::detect()+0x251>
c001aef6:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001aefe:	e9 e0 fd ff ff       	jmp    c001ace3 <IDE::detect()+0x31>
c001af03:	4e                   	dec    esi
c001af04:	74 63                	je     c001af69 <IDE::detect()+0x2b7>
c001af06:	be 01 00 00 00       	mov    esi,0x1
c001af0b:	e9 cb fd ff ff       	jmp    c001acdb <IDE::detect()+0x29>
c001af10:	50                   	push   eax
c001af11:	6a 04                	push   0x4
c001af13:	56                   	push   esi
c001af14:	53                   	push   ebx
c001af15:	e8 28 f7 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001af1a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001af1e:	83 c4 0c             	add    esp,0xc
c001af21:	6a 05                	push   0x5
c001af23:	56                   	push   esi
c001af24:	53                   	push   ebx
c001af25:	e8 18 f7 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001af2a:	83 c4 10             	add    esp,0x10
c001af2d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001af31:	80 fa 14             	cmp    dl,0x14
c001af34:	74 2d                	je     c001af63 <IDE::detect()+0x2b1>
c001af36:	80 fa 69             	cmp    dl,0x69
c001af39:	75 b4                	jne    c001aeef <IDE::detect()+0x23d>
c001af3b:	3c 96                	cmp    al,0x96
c001af3d:	75 b0                	jne    c001aeef <IDE::detect()+0x23d>
c001af3f:	68 a1 00 00 00       	push   0xa1
c001af44:	6a 07                	push   0x7
c001af46:	56                   	push   esi
c001af47:	53                   	push   ebx
c001af48:	e8 35 f6 ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001af4d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001af54:	e8 ff 9e ff ff       	call   c0014e58 <milliTenthSleep(unsigned int)>
c001af59:	83 c4 10             	add    esp,0x10
c001af5c:	b1 01                	mov    cl,0x1
c001af5e:	e9 71 fe ff ff       	jmp    c001add4 <IDE::detect()+0x122>
c001af63:	3c eb                	cmp    al,0xeb
c001af65:	75 cf                	jne    c001af36 <IDE::detect()+0x284>
c001af67:	eb d6                	jmp    c001af3f <IDE::detect()+0x28d>
c001af69:	81 c4 1c 02 00 00    	add    esp,0x21c
c001af6f:	5b                   	pop    ebx
c001af70:	5e                   	pop    esi
c001af71:	5f                   	pop    edi
c001af72:	5d                   	pop    ebp
c001af73:	c3                   	ret    

c001af74 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001af74:	55                   	push   ebp
c001af75:	57                   	push   edi
c001af76:	56                   	push   esi
c001af77:	53                   	push   ebx
c001af78:	83 ec 1c             	sub    esp,0x1c
c001af7b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001af7f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001af83:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001af87:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001af8b:	88 c3                	mov    bl,al
c001af8d:	84 c0                	test   al,al
c001af8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af93:	0f 84 81 00 00 00    	je     c001b01a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001af99:	83 ec 0c             	sub    esp,0xc
c001af9c:	68 43 13 02 c0       	push   0xc0021343
c001afa1:	e8 ad f6 fe ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c001afa6:	83 c4 10             	add    esp,0x10
c001afa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afad:	3c 01                	cmp    al,0x1
c001afaf:	74 63                	je     c001b014 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001afb1:	3c 02                	cmp    al,0x2
c001afb3:	75 53                	jne    c001b008 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001afb5:	01 f6                	add    esi,esi
c001afb7:	50                   	push   eax
c001afb8:	09 ee                	or     esi,ebp
c001afba:	6a 01                	push   0x1
c001afbc:	89 f0                	mov    eax,esi
c001afbe:	0f b6 f0             	movzx  esi,al
c001afc1:	c1 e6 06             	shl    esi,0x6
c001afc4:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001afcc:	50                   	push   eax
c001afcd:	57                   	push   edi
c001afce:	e8 6f f6 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001afd3:	83 c4 10             	add    esp,0x10
c001afd6:	a8 01                	test   al,0x1
c001afd8:	74 02                	je     c001afdc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001afda:	b3 07                	mov    bl,0x7
c001afdc:	a8 02                	test   al,0x2
c001afde:	74 02                	je     c001afe2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001afe0:	b3 03                	mov    bl,0x3
c001afe2:	a8 04                	test   al,0x4
c001afe4:	74 02                	je     c001afe8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001afe6:	b3 14                	mov    bl,0x14
c001afe8:	a8 08                	test   al,0x8
c001afea:	74 02                	je     c001afee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001afec:	b3 03                	mov    bl,0x3
c001afee:	a8 10                	test   al,0x10
c001aff0:	74 02                	je     c001aff4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001aff2:	b3 15                	mov    bl,0x15
c001aff4:	a8 20                	test   al,0x20
c001aff6:	74 02                	je     c001affa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001aff8:	b3 03                	mov    bl,0x3
c001affa:	a8 40                	test   al,0x40
c001affc:	74 02                	je     c001b000 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001affe:	b3 16                	mov    bl,0x16
c001b000:	84 c0                	test   al,al
c001b002:	79 16                	jns    c001b01a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001b004:	b3 0d                	mov    bl,0xd
c001b006:	eb 12                	jmp    c001b01a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001b008:	3c 03                	cmp    al,0x3
c001b00a:	74 0c                	je     c001b018 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001b00c:	3c 04                	cmp    al,0x4
c001b00e:	75 0a                	jne    c001b01a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001b010:	b3 08                	mov    bl,0x8
c001b012:	eb 06                	jmp    c001b01a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001b014:	b3 13                	mov    bl,0x13
c001b016:	eb 02                	jmp    c001b01a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001b018:	b3 17                	mov    bl,0x17
c001b01a:	83 c4 1c             	add    esp,0x1c
c001b01d:	88 d8                	mov    al,bl
c001b01f:	5b                   	pop    ebx
c001b020:	5e                   	pop    esi
c001b021:	5f                   	pop    edi
c001b022:	5d                   	pop    ebp
c001b023:	c3                   	ret    

c001b024 <IDE::polling(unsigned char, unsigned int)>:
c001b024:	55                   	push   ebp
c001b025:	bd 04 00 00 00       	mov    ebp,0x4
c001b02a:	57                   	push   edi
c001b02b:	56                   	push   esi
c001b02c:	53                   	push   ebx
c001b02d:	83 ec 0c             	sub    esp,0xc
c001b030:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b034:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001b038:	52                   	push   edx
c001b039:	6a 0c                	push   0xc
c001b03b:	0f b6 f3             	movzx  esi,bl
c001b03e:	56                   	push   esi
c001b03f:	57                   	push   edi
c001b040:	e8 fd f5 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001b045:	83 c4 10             	add    esp,0x10
c001b048:	4d                   	dec    ebp
c001b049:	75 ed                	jne    c001b038 <IDE::polling(unsigned char, unsigned int)+0x14>
c001b04b:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b050:	50                   	push   eax
c001b051:	6a 0c                	push   0xc
c001b053:	56                   	push   esi
c001b054:	57                   	push   edi
c001b055:	e8 e8 f5 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001b05a:	83 c4 10             	add    esp,0x10
c001b05d:	a8 01                	test   al,0x1
c001b05f:	75 17                	jne    c001b078 <IDE::polling(unsigned char, unsigned int)+0x54>
c001b061:	a8 20                	test   al,0x20
c001b063:	75 0f                	jne    c001b074 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b065:	4b                   	dec    ebx
c001b066:	74 10                	je     c001b078 <IDE::polling(unsigned char, unsigned int)+0x54>
c001b068:	84 c0                	test   al,al
c001b06a:	78 e4                	js     c001b050 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001b06c:	a8 08                	test   al,0x8
c001b06e:	74 e0                	je     c001b050 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001b070:	31 c0                	xor    eax,eax
c001b072:	eb 06                	jmp    c001b07a <IDE::polling(unsigned char, unsigned int)+0x56>
c001b074:	b0 01                	mov    al,0x1
c001b076:	eb 02                	jmp    c001b07a <IDE::polling(unsigned char, unsigned int)+0x56>
c001b078:	b0 02                	mov    al,0x2
c001b07a:	83 c4 0c             	add    esp,0xc
c001b07d:	5b                   	pop    ebx
c001b07e:	5e                   	pop    esi
c001b07f:	5f                   	pop    edi
c001b080:	5d                   	pop    ebp
c001b081:	c3                   	ret    

c001b082 <SATABus::close(int, int, void*)>:
c001b082:	31 c0                	xor    eax,eax
c001b084:	c3                   	ret    
c001b085:	90                   	nop

c001b086 <SATABus::detect()>:
c001b086:	c3                   	ret    
c001b087:	90                   	nop

c001b088 <SATABus::SATABus()>:
c001b088:	83 ec 0c             	sub    esp,0xc
c001b08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b08f:	83 ec 08             	sub    esp,0x8
c001b092:	68 7c 13 02 c0       	push   0xc002137c
c001b097:	50                   	push   eax
c001b098:	e8 33 0d ff ff       	call   c000bdd0 <HardDiskController::HardDiskController(char const*)>
c001b09d:	83 c4 10             	add    esp,0x10
c001b0a0:	ba a8 13 02 c0       	mov    edx,0xc00213a8
c001b0a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0a9:	89 10                	mov    DWORD PTR [eax],edx
c001b0ab:	83 ec 0c             	sub    esp,0xc
c001b0ae:	6a 50                	push   0x50
c001b0b0:	e8 71 cb fe ff       	call   c0007c26 <Phys::allocateContiguousPages(int)>
c001b0b5:	83 c4 10             	add    esp,0x10
c001b0b8:	89 c2                	mov    edx,eax
c001b0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0be:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b0c4:	83 ec 0c             	sub    esp,0xc
c001b0c7:	6a 50                	push   0x50
c001b0c9:	e8 94 e2 fe ff       	call   c0009362 <Virt::allocateKernelVirtualPages(int)>
c001b0ce:	83 c4 10             	add    esp,0x10
c001b0d1:	89 c2                	mov    edx,eax
c001b0d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0d7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b0dd:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c001b0e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b0e6:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b0ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b0f0:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b0f6:	83 ec 0c             	sub    esp,0xc
c001b0f9:	6a 03                	push   0x3
c001b0fb:	6a 50                	push   0x50
c001b0fd:	51                   	push   ecx
c001b0fe:	52                   	push   edx
c001b0ff:	50                   	push   eax
c001b100:	e8 2b ec fe ff       	call   c0009d30 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b105:	83 c4 20             	add    esp,0x20
c001b108:	90                   	nop
c001b109:	83 c4 0c             	add    esp,0xc
c001b10c:	c3                   	ret    
c001b10d:	90                   	nop

c001b10e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b10e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b112:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b115:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b118:	09 c2                	or     edx,eax
c001b11a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b11e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b124:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b126:	31 c0                	xor    eax,eax
c001b128:	c1 e9 08             	shr    ecx,0x8
c001b12b:	83 e1 0f             	and    ecx,0xf
c001b12e:	39 c8                	cmp    eax,ecx
c001b130:	74 0a                	je     c001b13c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b132:	f6 c2 01             	test   dl,0x1
c001b135:	74 08                	je     c001b13f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b137:	d1 ea                	shr    edx,1
c001b139:	40                   	inc    eax
c001b13a:	eb f2                	jmp    c001b12e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b13c:	83 c8 ff             	or     eax,0xffffffff
c001b13f:	c3                   	ret    

c001b140 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b140:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b144:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b147:	89 c2                	mov    edx,eax
c001b149:	c1 ea 08             	shr    edx,0x8
c001b14c:	83 e2 0f             	and    edx,0xf
c001b14f:	fe ca                	dec    dl
c001b151:	75 31                	jne    c001b184 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b153:	83 e0 0f             	and    eax,0xf
c001b156:	3c 03                	cmp    al,0x3
c001b158:	75 2a                	jne    c001b184 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b15a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b15d:	b8 02 00 00 00       	mov    eax,0x2
c001b162:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b168:	74 1c                	je     c001b186 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b16a:	b8 04 00 00 00       	mov    eax,0x4
c001b16f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b175:	74 0f                	je     c001b186 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b177:	31 c0                	xor    eax,eax
c001b179:	83 fa 03             	cmp    edx,0x3
c001b17c:	0f 94 c0             	sete   al
c001b17f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b183:	c3                   	ret    
c001b184:	31 c0                	xor    eax,eax
c001b186:	c3                   	ret    
c001b187:	90                   	nop

c001b188 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b188:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b18c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b18f:	0f ba e2 0f          	bt     edx,0xf
c001b193:	72 f7                	jb     c001b18c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b195:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b198:	83 ca 10             	or     edx,0x10
c001b19b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b19e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b1a1:	83 ca 01             	or     edx,0x1
c001b1a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b1a7:	c3                   	ret    

c001b1a8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b1a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1ac:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b1af:	83 e2 fe             	and    edx,0xfffffffe
c001b1b2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b1b5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b1b8:	83 e2 ef             	and    edx,0xffffffef
c001b1bb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b1be:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b1c1:	0f ba e2 0e          	bt     edx,0xe
c001b1c5:	72 f7                	jb     c001b1be <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b1c7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b1ca:	0f ba e2 0f          	bt     edx,0xf
c001b1ce:	72 ee                	jb     c001b1be <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b1d0:	c3                   	ret    
c001b1d1:	90                   	nop

c001b1d2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b1d2:	55                   	push   ebp
c001b1d3:	57                   	push   edi
c001b1d4:	56                   	push   esi
c001b1d5:	53                   	push   ebx
c001b1d6:	83 ec 1c             	sub    esp,0x1c
c001b1d9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b1dd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b1e1:	53                   	push   ebx
c001b1e2:	56                   	push   esi
c001b1e3:	e8 c0 ff ff ff       	call   c001b1a8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b1e8:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b1ec:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b1f2:	c1 e5 0a             	shl    ebp,0xa
c001b1f5:	83 ec 0c             	sub    esp,0xc
c001b1f8:	01 e8                	add    eax,ebp
c001b1fa:	89 03                	mov    DWORD PTR [ebx],eax
c001b1fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1fe:	68 00 04 00 00       	push   0x400
c001b203:	6a 00                	push   0x0
c001b205:	50                   	push   eax
c001b206:	e8 b5 52 fe ff       	call   c00004c0 <memset>
c001b20b:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001b211:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b215:	01 e8                	add    eax,ebp
c001b217:	83 c4 1c             	add    esp,0x1c
c001b21a:	c1 e2 08             	shl    edx,0x8
c001b21d:	89 03                	mov    DWORD PTR [ebx],eax
c001b21f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b226:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b22c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001b232:	01 f8                	add    eax,edi
c001b234:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b237:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b23a:	68 00 01 00 00       	push   0x100
c001b23f:	6a 00                	push   0x0
c001b241:	50                   	push   eax
c001b242:	e8 79 52 fe ff       	call   c00004c0 <memset>
c001b247:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001b24d:	01 fa                	add    edx,edi
c001b24f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b253:	c1 e7 0d             	shl    edi,0xd
c001b256:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001b259:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b260:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001b266:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001b26c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b270:	31 ff                	xor    edi,edi
c001b272:	83 c4 10             	add    esp,0x10
c001b275:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001b27b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b27f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001b285:	83 c5 20             	add    ebp,0x20
c001b288:	01 f8                	add    eax,edi
c001b28a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b28d:	52                   	push   edx
c001b28e:	68 00 01 00 00       	push   0x100
c001b293:	6a 00                	push   0x0
c001b295:	50                   	push   eax
c001b296:	e8 25 52 fe ff       	call   c00004c0 <memset>
c001b29b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b29f:	83 c4 10             	add    esp,0x10
c001b2a2:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001b2a8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001b2af:	01 f8                	add    eax,edi
c001b2b1:	81 c7 00 01 00 00    	add    edi,0x100
c001b2b7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b2ba:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001b2c0:	75 b3                	jne    c001b275 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001b2c2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b2c9:	50                   	push   eax
c001b2ca:	50                   	push   eax
c001b2cb:	53                   	push   ebx
c001b2cc:	56                   	push   esi
c001b2cd:	e8 b6 fe ff ff       	call   c001b188 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b2d2:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b2d9:	83 c4 2c             	add    esp,0x2c
c001b2dc:	5b                   	pop    ebx
c001b2dd:	5e                   	pop    esi
c001b2de:	5f                   	pop    edi
c001b2df:	5d                   	pop    ebp
c001b2e0:	c3                   	ret    
c001b2e1:	90                   	nop

c001b2e2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b2e2:	55                   	push   ebp
c001b2e3:	57                   	push   edi
c001b2e4:	56                   	push   esi
c001b2e5:	53                   	push   ebx
c001b2e6:	31 db                	xor    ebx,ebx
c001b2e8:	83 ec 0c             	sub    esp,0xc
c001b2eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b2ef:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b2f3:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b2f6:	f7 c7 01 00 00 00    	test   edi,0x1
c001b2fc:	74 7a                	je     c001b378 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b2fe:	89 d8                	mov    eax,ebx
c001b300:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b304:	c1 e0 07             	shl    eax,0x7
c001b307:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b30e:	55                   	push   ebp
c001b30f:	56                   	push   esi
c001b310:	e8 2b fe ff ff       	call   c001b140 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b315:	5a                   	pop    edx
c001b316:	83 f8 01             	cmp    eax,0x1
c001b319:	59                   	pop    ecx
c001b31a:	75 21                	jne    c001b33d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b31c:	50                   	push   eax
c001b31d:	53                   	push   ebx
c001b31e:	55                   	push   ebp
c001b31f:	56                   	push   esi
c001b320:	e8 ad fe ff ff       	call   c001b1d2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b325:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b32c:	e8 32 c5 fe ff       	call   c0007863 <malloc>
c001b331:	89 c5                	mov    ebp,eax
c001b333:	89 04 24             	mov    DWORD PTR [esp],eax
c001b336:	e8 95 10 00 00       	call   c001c3d0 <SATA::SATA()>
c001b33b:	eb 24                	jmp    c001b361 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b33d:	83 f8 04             	cmp    eax,0x4
c001b340:	75 36                	jne    c001b378 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b342:	51                   	push   ecx
c001b343:	53                   	push   ebx
c001b344:	55                   	push   ebp
c001b345:	56                   	push   esi
c001b346:	e8 87 fe ff ff       	call   c001b1d2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b34b:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001b352:	e8 0c c5 fe ff       	call   c0007863 <malloc>
c001b357:	89 c5                	mov    ebp,eax
c001b359:	89 04 24             	mov    DWORD PTR [esp],eax
c001b35c:	e8 c9 17 00 00       	call   c001cb2a <SATAPI::SATAPI()>
c001b361:	58                   	pop    eax
c001b362:	5a                   	pop    edx
c001b363:	55                   	push   ebp
c001b364:	56                   	push   esi
c001b365:	e8 22 07 ff ff       	call   c000ba8c <Device::addChild(Device*)>
c001b36a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b36d:	56                   	push   esi
c001b36e:	6a 00                	push   0x0
c001b370:	53                   	push   ebx
c001b371:	55                   	push   ebp
c001b372:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b375:	83 c4 20             	add    esp,0x20
c001b378:	d1 ef                	shr    edi,1
c001b37a:	43                   	inc    ebx
c001b37b:	83 fb 20             	cmp    ebx,0x20
c001b37e:	0f 85 72 ff ff ff    	jne    c001b2f6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001b384:	83 c4 0c             	add    esp,0xc
c001b387:	5b                   	pop    ebx
c001b388:	5e                   	pop    esi
c001b389:	5f                   	pop    edi
c001b38a:	5d                   	pop    ebp
c001b38b:	c3                   	ret    

c001b38c <SATABus::open(int, int, void*)>:
c001b38c:	83 ec 14             	sub    esp,0x14
c001b38f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b393:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001b399:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b39f:	52                   	push   edx
c001b3a0:	50                   	push   eax
c001b3a1:	e8 3c ff ff ff       	call   c001b2e2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001b3a6:	31 c0                	xor    eax,eax
c001b3a8:	83 c4 1c             	add    esp,0x1c
c001b3ab:	c3                   	ret    

c001b3ac <ATA::close(int, int, void*)>:
c001b3ac:	83 ec 0c             	sub    esp,0xc
c001b3af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3b3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b3b9:	85 c0                	test   eax,eax
c001b3bb:	74 0c                	je     c001b3c9 <ATA::close(int, int, void*)+0x1d>
c001b3bd:	83 ec 0c             	sub    esp,0xc
c001b3c0:	8b 10                	mov    edx,DWORD PTR [eax]
c001b3c2:	50                   	push   eax
c001b3c3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b3c6:	83 c4 10             	add    esp,0x10
c001b3c9:	31 c0                	xor    eax,eax
c001b3cb:	83 c4 0c             	add    esp,0xc
c001b3ce:	c3                   	ret    
c001b3cf:	90                   	nop

c001b3d0 <ATA::powerSaving(PowerSavingLevel)>:
c001b3d0:	c3                   	ret    
c001b3d1:	90                   	nop

c001b3d2 <ATA::ATA()>:
c001b3d2:	83 ec 0c             	sub    esp,0xc
c001b3d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3d9:	83 ec 04             	sub    esp,0x4
c001b3dc:	68 00 02 00 00       	push   0x200
c001b3e1:	68 75 14 02 c0       	push   0xc0021475
c001b3e6:	50                   	push   eax
c001b3e7:	e8 6e 0a ff ff       	call   c000be5a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b3ec:	83 c4 10             	add    esp,0x10
c001b3ef:	ba e8 13 02 c0       	mov    edx,0xc00213e8
c001b3f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3f8:	89 10                	mov    DWORD PTR [eax],edx
c001b3fa:	90                   	nop
c001b3fb:	83 c4 0c             	add    esp,0xc
c001b3fe:	c3                   	ret    
c001b3ff:	90                   	nop

c001b400 <ATA::flush(bool)>:
c001b400:	53                   	push   ebx
c001b401:	83 ec 08             	sub    esp,0x8
c001b404:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001b409:	19 c0                	sbb    eax,eax
c001b40b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b40f:	83 e0 fd             	and    eax,0xfffffffd
c001b412:	05 ea 00 00 00       	add    eax,0xea
c001b417:	50                   	push   eax
c001b418:	6a 07                	push   0x7
c001b41a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b421:	50                   	push   eax
c001b422:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b428:	e8 55 f1 ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b42d:	83 c4 0c             	add    esp,0xc
c001b430:	6a 00                	push   0x0
c001b432:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b439:	50                   	push   eax
c001b43a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b440:	e8 df fb ff ff       	call   c001b024 <IDE::polling(unsigned char, unsigned int)>
c001b445:	83 c4 18             	add    esp,0x18
c001b448:	5b                   	pop    ebx
c001b449:	c3                   	ret    

c001b44a <ATA::readyForCommand()>:
c001b44a:	56                   	push   esi
c001b44b:	53                   	push   ebx
c001b44c:	53                   	push   ebx
c001b44d:	31 db                	xor    ebx,ebx
c001b44f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b453:	51                   	push   ecx
c001b454:	6a 0c                	push   0xc
c001b456:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b45d:	50                   	push   eax
c001b45e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b464:	e8 d9 f1 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001b469:	83 c4 10             	add    esp,0x10
c001b46c:	a8 88                	test   al,0x88
c001b46e:	74 1f                	je     c001b48f <ATA::readyForCommand()+0x45>
c001b470:	43                   	inc    ebx
c001b471:	83 fb 63             	cmp    ebx,0x63
c001b474:	7e dd                	jle    c001b453 <ATA::readyForCommand()+0x9>
c001b476:	83 ec 0c             	sub    esp,0xc
c001b479:	6a 0a                	push   0xa
c001b47b:	e8 d8 99 ff ff       	call   c0014e58 <milliTenthSleep(unsigned int)>
c001b480:	83 c4 10             	add    esp,0x10
c001b483:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001b489:	75 c8                	jne    c001b453 <ATA::readyForCommand()+0x9>
c001b48b:	31 c0                	xor    eax,eax
c001b48d:	eb 02                	jmp    c001b491 <ATA::readyForCommand()+0x47>
c001b48f:	b0 01                	mov    al,0x1
c001b491:	5a                   	pop    edx
c001b492:	5b                   	pop    ebx
c001b493:	5e                   	pop    esi
c001b494:	c3                   	ret    
c001b495:	90                   	nop

c001b496 <ATA::access(unsigned long long, int, void*, bool)>:
c001b496:	55                   	push   ebp
c001b497:	57                   	push   edi
c001b498:	56                   	push   esi
c001b499:	53                   	push   ebx
c001b49a:	83 ec 2c             	sub    esp,0x2c
c001b49d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b4a1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001b4a5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4a8:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001b4ac:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b4af:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001b4b3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b4b7:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001b4bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b4c1:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c001b4c7:	c1 e0 06             	shl    eax,0x6
c001b4ca:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b4ce:	80 bc 03 a9 01 00 00 00 	cmp    BYTE PTR [ebx+eax*1+0x1a9],0x0
c001b4d6:	74 5a                	je     c001b532 <ATA::access(unsigned long long, int, void*, bool)+0x9c>
c001b4d8:	89 ea                	mov    edx,ebp
c001b4da:	89 f8                	mov    eax,edi
c001b4dc:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001b4e0:	c1 ea 1c             	shr    edx,0x1c
c001b4e3:	89 d1                	mov    ecx,edx
c001b4e5:	09 c1                	or     ecx,eax
c001b4e7:	74 25                	je     c001b50e <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001b4e9:	31 db                	xor    ebx,ebx
c001b4eb:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b4f2:	89 ea                	mov    edx,ebp
c001b4f4:	89 f8                	mov    eax,edi
c001b4f6:	0f ad d0             	shrd   eax,edx,cl
c001b4f9:	d3 ea                	shr    edx,cl
c001b4fb:	f6 c1 20             	test   cl,0x20
c001b4fe:	74 02                	je     c001b502 <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001b500:	89 d0                	mov    eax,edx
c001b502:	88 44 1c 1a          	mov    BYTE PTR [esp+ebx*1+0x1a],al
c001b506:	43                   	inc    ebx
c001b507:	83 fb 06             	cmp    ebx,0x6
c001b50a:	75 df                	jne    c001b4eb <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001b50c:	eb 70                	jmp    c001b57e <ATA::access(unsigned long long, int, void*, bool)+0xe8>
c001b50e:	89 f8                	mov    eax,edi
c001b510:	89 ea                	mov    edx,ebp
c001b512:	0f ac d0 10          	shrd   eax,edx,0x10
c001b516:	66 89 7c 24 1a       	mov    WORD PTR [esp+0x1a],di
c001b51b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b51f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b526:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b52b:	c1 ef 18             	shr    edi,0x18
c001b52e:	b3 01                	mov    bl,0x1
c001b530:	eb 50                	jmp    c001b582 <ATA::access(unsigned long long, int, void*, bool)+0xec>
c001b532:	6a 00                	push   0x0
c001b534:	31 db                	xor    ebx,ebx
c001b536:	6a 3f                	push   0x3f
c001b538:	55                   	push   ebp
c001b539:	57                   	push   edi
c001b53a:	e8 91 2a 00 00       	call   c001dfd0 <__umoddi3>
c001b53f:	83 c4 10             	add    esp,0x10
c001b542:	40                   	inc    eax
c001b543:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001b547:	6a 00                	push   0x0
c001b549:	68 f0 03 00 00       	push   0x3f0
c001b54e:	55                   	push   ebp
c001b54f:	57                   	push   edi
c001b550:	e8 7b 29 00 00       	call   c001ded0 <__udivdi3>
c001b555:	83 c4 10             	add    esp,0x10
c001b558:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001b55d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b564:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b569:	6a 00                	push   0x0
c001b56b:	6a 3f                	push   0x3f
c001b56d:	55                   	push   ebp
c001b56e:	57                   	push   edi
c001b56f:	e8 5c 29 00 00       	call   c001ded0 <__udivdi3>
c001b574:	89 c7                	mov    edi,eax
c001b576:	83 c4 10             	add    esp,0x10
c001b579:	83 e7 0f             	and    edi,0xf
c001b57c:	eb 04                	jmp    c001b582 <ATA::access(unsigned long long, int, void*, bool)+0xec>
c001b57e:	31 ff                	xor    edi,edi
c001b580:	b3 02                	mov    bl,0x2
c001b582:	55                   	push   ebp
c001b583:	6a 00                	push   0x0
c001b585:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b58c:	50                   	push   eax
c001b58d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b591:	e8 fa f1 ff ff       	call   c001a790 <IDE::enableIRQs(unsigned char, bool)>
c001b596:	89 34 24             	mov    DWORD PTR [esp],esi
c001b599:	e8 ac fe ff ff       	call   c001b44a <ATA::readyForCommand()>
c001b59e:	83 c4 10             	add    esp,0x10
c001b5a1:	84 c0                	test   al,al
c001b5a3:	75 0a                	jne    c001b5af <ATA::access(unsigned long long, int, void*, bool)+0x119>
c001b5a5:	bf 01 00 00 00       	mov    edi,0x1
c001b5aa:	e9 7d 02 00 00       	jmp    c001b82c <ATA::access(unsigned long long, int, void*, bool)+0x396>
c001b5af:	8b 86 74 01 00 00    	mov    eax,DWORD PTR [esi+0x174]
c001b5b5:	8b 96 6c 01 00 00    	mov    edx,DWORD PTR [esi+0x16c]
c001b5bb:	c1 e0 04             	shl    eax,0x4
c001b5be:	09 c7                	or     edi,eax
c001b5c0:	84 db                	test   bl,bl
c001b5c2:	0f b6 8e 70 01 00 00 	movzx  ecx,BYTE PTR [esi+0x170]
c001b5c9:	75 05                	jne    c001b5d0 <ATA::access(unsigned long long, int, void*, bool)+0x13a>
c001b5cb:	83 cf a0             	or     edi,0xffffffa0
c001b5ce:	eb 03                	jmp    c001b5d3 <ATA::access(unsigned long long, int, void*, bool)+0x13d>
c001b5d0:	83 cf e0             	or     edi,0xffffffe0
c001b5d3:	89 f8                	mov    eax,edi
c001b5d5:	0f b6 f8             	movzx  edi,al
c001b5d8:	57                   	push   edi
c001b5d9:	6a 06                	push   0x6
c001b5db:	51                   	push   ecx
c001b5dc:	52                   	push   edx
c001b5dd:	e8 a0 ef ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5e2:	83 c4 10             	add    esp,0x10
c001b5e5:	6a 00                	push   0x0
c001b5e7:	6a 01                	push   0x1
c001b5e9:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b5f0:	50                   	push   eax
c001b5f1:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b5f7:	e8 86 ef ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5fc:	83 c4 10             	add    esp,0x10
c001b5ff:	80 fb 02             	cmp    bl,0x2
c001b602:	75 6e                	jne    c001b672 <ATA::access(unsigned long long, int, void*, bool)+0x1dc>
c001b604:	6a 00                	push   0x0
c001b606:	6a 08                	push   0x8
c001b608:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b60f:	50                   	push   eax
c001b610:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b616:	e8 67 ef ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b61b:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001b620:	50                   	push   eax
c001b621:	6a 09                	push   0x9
c001b623:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b62a:	50                   	push   eax
c001b62b:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b631:	e8 4c ef ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b636:	83 c4 20             	add    esp,0x20
c001b639:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001b63e:	50                   	push   eax
c001b63f:	6a 0a                	push   0xa
c001b641:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b648:	50                   	push   eax
c001b649:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b64f:	e8 2e ef ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b654:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001b659:	50                   	push   eax
c001b65a:	6a 0b                	push   0xb
c001b65c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b663:	50                   	push   eax
c001b664:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b66a:	e8 13 ef ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b66f:	83 c4 20             	add    esp,0x20
c001b672:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001b677:	50                   	push   eax
c001b678:	6a 02                	push   0x2
c001b67a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b681:	50                   	push   eax
c001b682:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b688:	e8 f5 ee ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b68d:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001b692:	50                   	push   eax
c001b693:	6a 03                	push   0x3
c001b695:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b69c:	50                   	push   eax
c001b69d:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b6a3:	e8 da ee ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6a8:	83 c4 20             	add    esp,0x20
c001b6ab:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001b6b0:	50                   	push   eax
c001b6b1:	6a 04                	push   0x4
c001b6b3:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b6ba:	50                   	push   eax
c001b6bb:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b6c1:	e8 bc ee ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6c6:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b6cb:	50                   	push   eax
c001b6cc:	6a 05                	push   0x5
c001b6ce:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b6d5:	50                   	push   eax
c001b6d6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b6dc:	e8 a1 ee ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b6e1:	83 c4 20             	add    esp,0x20
c001b6e4:	80 fb 02             	cmp    bl,0x2
c001b6e7:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001b6ec:	75 06                	jne    c001b6f4 <ATA::access(unsigned long long, int, void*, bool)+0x25e>
c001b6ee:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b6f2:	75 3f                	jne    c001b733 <ATA::access(unsigned long long, int, void*, bool)+0x29d>
c001b6f4:	80 fb 02             	cmp    bl,0x2
c001b6f7:	0f 95 c1             	setne  cl
c001b6fa:	74 0b                	je     c001b707 <ATA::access(unsigned long long, int, void*, bool)+0x271>
c001b6fc:	b8 30 00 00 00       	mov    eax,0x30
c001b701:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b705:	75 31                	jne    c001b738 <ATA::access(unsigned long long, int, void*, bool)+0x2a2>
c001b707:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001b70a:	83 f2 01             	xor    edx,0x1
c001b70d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b712:	74 09                	je     c001b71d <ATA::access(unsigned long long, int, void*, bool)+0x287>
c001b714:	b8 24 00 00 00       	mov    eax,0x24
c001b719:	84 d2                	test   dl,dl
c001b71b:	75 1b                	jne    c001b738 <ATA::access(unsigned long long, int, void*, bool)+0x2a2>
c001b71d:	84 c9                	test   cl,cl
c001b71f:	0f 84 80 fe ff ff    	je     c001b5a5 <ATA::access(unsigned long long, int, void*, bool)+0x10f>
c001b725:	b8 20 00 00 00       	mov    eax,0x20
c001b72a:	84 d2                	test   dl,dl
c001b72c:	75 0a                	jne    c001b738 <ATA::access(unsigned long long, int, void*, bool)+0x2a2>
c001b72e:	e9 72 fe ff ff       	jmp    c001b5a5 <ATA::access(unsigned long long, int, void*, bool)+0x10f>
c001b733:	b8 34 00 00 00       	mov    eax,0x34
c001b738:	50                   	push   eax
c001b739:	6a 07                	push   0x7
c001b73b:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b742:	50                   	push   eax
c001b743:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b749:	e8 34 ee ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b74e:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c001b752:	83 c4 10             	add    esp,0x10
c001b755:	85 ed                	test   ebp,ebp
c001b757:	0f 84 b6 00 00 00    	je     c001b813 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c001b75d:	57                   	push   edi
c001b75e:	6a 01                	push   0x1
c001b760:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b767:	50                   	push   eax
c001b768:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b76e:	e8 b1 f8 ff ff       	call   c001b024 <IDE::polling(unsigned char, unsigned int)>
c001b773:	83 c4 10             	add    esp,0x10
c001b776:	8b 96 70 01 00 00    	mov    edx,DWORD PTR [esi+0x170]
c001b77c:	84 c0                	test   al,al
c001b77e:	74 20                	je     c001b7a0 <ATA::access(unsigned long long, int, void*, bool)+0x30a>
c001b780:	0f b6 f8             	movzx  edi,al
c001b783:	57                   	push   edi
c001b784:	0f b6 86 74 01 00 00 	movzx  eax,BYTE PTR [esi+0x174]
c001b78b:	0f b6 d2             	movzx  edx,dl
c001b78e:	50                   	push   eax
c001b78f:	52                   	push   edx
c001b790:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b796:	e8 d9 f7 ff ff       	call   c001af74 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001b79b:	e9 89 00 00 00       	jmp    c001b829 <ATA::access(unsigned long long, int, void*, bool)+0x393>
c001b7a0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001b7a5:	74 3b                	je     c001b7e2 <ATA::access(unsigned long long, int, void*, bool)+0x34c>
c001b7a7:	31 c9                	xor    ecx,ecx
c001b7a9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b7ad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b7b1:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001b7b5:	53                   	push   ebx
c001b7b6:	53                   	push   ebx
c001b7b7:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b7be:	50                   	push   eax
c001b7bf:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b7c5:	e8 a6 ed ff ff       	call   c001a570 <IDE::getBase(unsigned char)>
c001b7ca:	89 c2                	mov    edx,eax
c001b7cc:	89 f8                	mov    eax,edi
c001b7ce:	66 ef                	out    dx,ax
c001b7d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b7d4:	83 c4 10             	add    esp,0x10
c001b7d7:	41                   	inc    ecx
c001b7d8:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001b7de:	75 c9                	jne    c001b7a9 <ATA::access(unsigned long long, int, void*, bool)+0x313>
c001b7e0:	eb 23                	jmp    c001b805 <ATA::access(unsigned long long, int, void*, bool)+0x36f>
c001b7e2:	51                   	push   ecx
c001b7e3:	51                   	push   ecx
c001b7e4:	0f b6 d2             	movzx  edx,dl
c001b7e7:	52                   	push   edx
c001b7e8:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b7ee:	e8 7d ed ff ff       	call   c001a570 <IDE::getBase(unsigned char)>
c001b7f3:	b9 00 01 00 00       	mov    ecx,0x100
c001b7f8:	89 c2                	mov    edx,eax
c001b7fa:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001b7fe:	fc                   	cld    
c001b7ff:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001b802:	83 c4 10             	add    esp,0x10
c001b805:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001b80d:	4d                   	dec    ebp
c001b80e:	e9 42 ff ff ff       	jmp    c001b755 <ATA::access(unsigned long long, int, void*, bool)+0x2bf>
c001b813:	31 ff                	xor    edi,edi
c001b815:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b819:	74 11                	je     c001b82c <ATA::access(unsigned long long, int, void*, bool)+0x396>
c001b81b:	50                   	push   eax
c001b81c:	50                   	push   eax
c001b81d:	0f b6 5c 24 0c       	movzx  ebx,BYTE PTR [esp+0xc]
c001b822:	53                   	push   ebx
c001b823:	56                   	push   esi
c001b824:	e8 d7 fb ff ff       	call   c001b400 <ATA::flush(bool)>
c001b829:	83 c4 10             	add    esp,0x10
c001b82c:	83 c4 2c             	add    esp,0x2c
c001b82f:	89 f8                	mov    eax,edi
c001b831:	5b                   	pop    ebx
c001b832:	5e                   	pop    esi
c001b833:	5f                   	pop    edi
c001b834:	5d                   	pop    ebp
c001b835:	c3                   	ret    

c001b836 <ATA::detectCHS()>:
c001b836:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b83a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001b840:	c1 e0 06             	shl    eax,0x6
c001b843:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001b849:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001b853:	c7 44 24 04 cc 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc00213cc
c001b85b:	e9 a7 4b ff ff       	jmp    c0010407 <KePanic(char const*)>

c001b860 <ATA::open(int, int, void*)>:
c001b860:	53                   	push   ebx
c001b861:	83 ec 08             	sub    esp,0x8
c001b864:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b86c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b870:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001b876:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001b87c:	c1 e0 06             	shl    eax,0x6
c001b87f:	01 d0                	add    eax,edx
c001b881:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001b888:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001b88e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001b895:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001b89f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001b8a5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001b8ac:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001b8b3:	75 0c                	jne    c001b8c1 <ATA::open(int, int, void*)+0x61>
c001b8b5:	83 ec 0c             	sub    esp,0xc
c001b8b8:	53                   	push   ebx
c001b8b9:	e8 78 ff ff ff       	call   c001b836 <ATA::detectCHS()>
c001b8be:	83 c4 10             	add    esp,0x10
c001b8c1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001b8c7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b8cd:	c1 e0 06             	shl    eax,0x6
c001b8d0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001b8d7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b8e1:	d1 e8                	shr    eax,1
c001b8e3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001b8e9:	6a 04                	push   0x4
c001b8eb:	6a 0c                	push   0xc
c001b8ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b8f4:	50                   	push   eax
c001b8f5:	52                   	push   edx
c001b8f6:	e8 87 ec ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8fb:	90                   	nop
c001b8fc:	90                   	nop
c001b8fd:	6a 00                	push   0x0
c001b8ff:	6a 0c                	push   0xc
c001b901:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b908:	50                   	push   eax
c001b909:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b90f:	e8 6e ec ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b914:	83 c4 14             	add    esp,0x14
c001b917:	53                   	push   ebx
c001b918:	e8 a5 05 ff ff       	call   c000bec2 <PhysicalDisk::startCache()>
c001b91d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b920:	e8 09 17 ff ff       	call   c000d02e <createPartitionsForDisk(PhysicalDisk*)>
c001b925:	83 c4 18             	add    esp,0x18
c001b928:	31 c0                	xor    eax,eax
c001b92a:	5b                   	pop    ebx
c001b92b:	c3                   	ret    

c001b92c <combineCharAndColour(char, unsigned char)>:
c001b92c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b931:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001b937:	c1 e0 08             	shl    eax,0x8
c001b93a:	09 d0                	or     eax,edx
c001b93c:	c3                   	ret    

c001b93d <combineColours(unsigned char, unsigned char)>:
c001b93d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b942:	c1 e0 04             	shl    eax,0x4
c001b945:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001b949:	c3                   	ret    

c001b94a <ATA::read(unsigned long long, int, void*)>:
c001b94a:	55                   	push   ebp
c001b94b:	57                   	push   edi
c001b94c:	56                   	push   esi
c001b94d:	be 04 00 00 00       	mov    esi,0x4
c001b952:	53                   	push   ebx
c001b953:	83 ec 0c             	sub    esp,0xc
c001b956:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b95a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b95e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b962:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b966:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b969:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b96f:	0f 87 a1 01 00 00    	ja     c001bb16 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b975:	be 06 00 00 00       	mov    esi,0x6
c001b97a:	85 c9                	test   ecx,ecx
c001b97c:	0f 84 94 01 00 00    	je     c001bb16 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b982:	55                   	push   ebp
c001b983:	55                   	push   ebp
c001b984:	6a 00                	push   0x0
c001b986:	51                   	push   ecx
c001b987:	53                   	push   ebx
c001b988:	52                   	push   edx
c001b989:	50                   	push   eax
c001b98a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b98e:	e8 03 fb ff ff       	call   c001b496 <ATA::access(unsigned long long, int, void*, bool)>
c001b993:	83 c4 20             	add    esp,0x20
c001b996:	89 c6                	mov    esi,eax
c001b998:	85 c0                	test   eax,eax
c001b99a:	0f 85 71 01 00 00    	jne    c001bb11 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001b9a0:	50                   	push   eax
c001b9a1:	03 1d 54 7b 02 c0    	add    ebx,DWORD PTR ds:0xc0027b54
c001b9a7:	50                   	push   eax
c001b9a8:	89 da                	mov    edx,ebx
c001b9aa:	6a 0f                	push   0xf
c001b9ac:	89 1d 54 7b 02 c0    	mov    DWORD PTR ds:0xc0027b54,ebx
c001b9b2:	6a 00                	push   0x0
c001b9b4:	e8 84 ff ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001b9b9:	59                   	pop    ecx
c001b9ba:	bd 10 27 00 00       	mov    ebp,0x2710
c001b9bf:	5b                   	pop    ebx
c001b9c0:	b9 0a 00 00 00       	mov    ecx,0xa
c001b9c5:	0f b6 d8             	movzx  ebx,al
c001b9c8:	89 d0                	mov    eax,edx
c001b9ca:	53                   	push   ebx
c001b9cb:	99                   	cdq    
c001b9cc:	f7 fd                	idiv   ebp
c001b9ce:	99                   	cdq    
c001b9cf:	f7 f9                	idiv   ecx
c001b9d1:	83 c2 30             	add    edx,0x30
c001b9d4:	0f b6 d2             	movzx  edx,dl
c001b9d7:	52                   	push   edx
c001b9d8:	e8 4f ff ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001b9dd:	5f                   	pop    edi
c001b9de:	bf e8 03 00 00       	mov    edi,0x3e8
c001b9e3:	5a                   	pop    edx
c001b9e4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b9ea:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b9ef:	53                   	push   ebx
c001b9f0:	99                   	cdq    
c001b9f1:	f7 ff                	idiv   edi
c001b9f3:	99                   	cdq    
c001b9f4:	f7 f9                	idiv   ecx
c001b9f6:	8d 42 30             	lea    eax,[edx+0x30]
c001b9f9:	0f b6 c0             	movzx  eax,al
c001b9fc:	50                   	push   eax
c001b9fd:	e8 2a ff ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001ba02:	5f                   	pop    edi
c001ba03:	bf 64 00 00 00       	mov    edi,0x64
c001ba08:	5a                   	pop    edx
c001ba09:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ba0f:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001ba14:	53                   	push   ebx
c001ba15:	99                   	cdq    
c001ba16:	f7 ff                	idiv   edi
c001ba18:	99                   	cdq    
c001ba19:	f7 f9                	idiv   ecx
c001ba1b:	8d 42 30             	lea    eax,[edx+0x30]
c001ba1e:	0f b6 c0             	movzx  eax,al
c001ba21:	50                   	push   eax
c001ba22:	e8 05 ff ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001ba27:	5a                   	pop    edx
c001ba28:	5a                   	pop    edx
c001ba29:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ba2f:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001ba34:	53                   	push   ebx
c001ba35:	99                   	cdq    
c001ba36:	f7 f9                	idiv   ecx
c001ba38:	99                   	cdq    
c001ba39:	f7 f9                	idiv   ecx
c001ba3b:	8d 42 30             	lea    eax,[edx+0x30]
c001ba3e:	0f b6 c0             	movzx  eax,al
c001ba41:	50                   	push   eax
c001ba42:	e8 e5 fe ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001ba47:	5a                   	pop    edx
c001ba48:	5a                   	pop    edx
c001ba49:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ba4f:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001ba54:	53                   	push   ebx
c001ba55:	99                   	cdq    
c001ba56:	f7 f9                	idiv   ecx
c001ba58:	83 c2 30             	add    edx,0x30
c001ba5b:	0f b6 d2             	movzx  edx,dl
c001ba5e:	52                   	push   edx
c001ba5f:	e8 c8 fe ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001ba64:	5a                   	pop    edx
c001ba65:	5a                   	pop    edx
c001ba66:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ba6c:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001ba71:	53                   	push   ebx
c001ba72:	99                   	cdq    
c001ba73:	f7 fd                	idiv   ebp
c001ba75:	99                   	cdq    
c001ba76:	f7 f9                	idiv   ecx
c001ba78:	8d 42 30             	lea    eax,[edx+0x30]
c001ba7b:	0f b6 c0             	movzx  eax,al
c001ba7e:	50                   	push   eax
c001ba7f:	e8 a8 fe ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001ba84:	5d                   	pop    ebp
c001ba85:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ba8a:	5a                   	pop    edx
c001ba8b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ba91:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001ba96:	53                   	push   ebx
c001ba97:	99                   	cdq    
c001ba98:	f7 fd                	idiv   ebp
c001ba9a:	99                   	cdq    
c001ba9b:	f7 f9                	idiv   ecx
c001ba9d:	8d 42 30             	lea    eax,[edx+0x30]
c001baa0:	0f b6 c0             	movzx  eax,al
c001baa3:	50                   	push   eax
c001baa4:	e8 83 fe ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001baa9:	5d                   	pop    ebp
c001baaa:	5a                   	pop    edx
c001baab:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001bab1:	53                   	push   ebx
c001bab2:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bab7:	99                   	cdq    
c001bab8:	f7 ff                	idiv   edi
c001baba:	99                   	cdq    
c001babb:	f7 f9                	idiv   ecx
c001babd:	8d 42 30             	lea    eax,[edx+0x30]
c001bac0:	0f b6 c0             	movzx  eax,al
c001bac3:	50                   	push   eax
c001bac4:	e8 63 fe ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001bac9:	5f                   	pop    edi
c001baca:	5d                   	pop    ebp
c001bacb:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001bad1:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bad6:	53                   	push   ebx
c001bad7:	99                   	cdq    
c001bad8:	f7 f9                	idiv   ecx
c001bada:	99                   	cdq    
c001badb:	f7 f9                	idiv   ecx
c001badd:	8d 42 30             	lea    eax,[edx+0x30]
c001bae0:	0f b6 c0             	movzx  eax,al
c001bae3:	50                   	push   eax
c001bae4:	e8 43 fe ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001bae9:	5a                   	pop    edx
c001baea:	5f                   	pop    edi
c001baeb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001baf1:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001baf6:	53                   	push   ebx
c001baf7:	99                   	cdq    
c001baf8:	f7 f9                	idiv   ecx
c001bafa:	83 c2 30             	add    edx,0x30
c001bafd:	0f b6 d2             	movzx  edx,dl
c001bb00:	52                   	push   edx
c001bb01:	e8 26 fe ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001bb06:	83 c4 10             	add    esp,0x10
c001bb09:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001bb0f:	eb 05                	jmp    c001bb16 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001bb11:	be 01 00 00 00       	mov    esi,0x1
c001bb16:	83 c4 0c             	add    esp,0xc
c001bb19:	89 f0                	mov    eax,esi
c001bb1b:	5b                   	pop    ebx
c001bb1c:	5e                   	pop    esi
c001bb1d:	5f                   	pop    edi
c001bb1e:	5d                   	pop    ebp
c001bb1f:	c3                   	ret    

c001bb20 <ATA::write(unsigned long long, int, void*)>:
c001bb20:	55                   	push   ebp
c001bb21:	57                   	push   edi
c001bb22:	56                   	push   esi
c001bb23:	be 04 00 00 00       	mov    esi,0x4
c001bb28:	53                   	push   ebx
c001bb29:	83 ec 0c             	sub    esp,0xc
c001bb2c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bb30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bb34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bb38:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bb3c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001bb3f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001bb45:	0f 87 9c 01 00 00    	ja     c001bce7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001bb4b:	be 06 00 00 00       	mov    esi,0x6
c001bb50:	85 c9                	test   ecx,ecx
c001bb52:	0f 84 8f 01 00 00    	je     c001bce7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001bb58:	55                   	push   ebp
c001bb59:	55                   	push   ebp
c001bb5a:	6a 01                	push   0x1
c001bb5c:	51                   	push   ecx
c001bb5d:	53                   	push   ebx
c001bb5e:	52                   	push   edx
c001bb5f:	50                   	push   eax
c001bb60:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bb64:	e8 2d f9 ff ff       	call   c001b496 <ATA::access(unsigned long long, int, void*, bool)>
c001bb69:	83 c4 20             	add    esp,0x20
c001bb6c:	89 c6                	mov    esi,eax
c001bb6e:	85 c0                	test   eax,eax
c001bb70:	0f 85 6c 01 00 00    	jne    c001bce2 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001bb76:	50                   	push   eax
c001bb77:	01 1d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebx
c001bb7d:	50                   	push   eax
c001bb7e:	bd 10 27 00 00       	mov    ebp,0x2710
c001bb83:	6a 0f                	push   0xf
c001bb85:	6a 00                	push   0x0
c001bb87:	e8 b1 fd ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001bb8c:	0f b6 d8             	movzx  ebx,al
c001bb8f:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bb94:	5a                   	pop    edx
c001bb95:	99                   	cdq    
c001bb96:	f7 fd                	idiv   ebp
c001bb98:	59                   	pop    ecx
c001bb99:	b9 0a 00 00 00       	mov    ecx,0xa
c001bb9e:	99                   	cdq    
c001bb9f:	f7 f9                	idiv   ecx
c001bba1:	53                   	push   ebx
c001bba2:	8d 42 30             	lea    eax,[edx+0x30]
c001bba5:	0f b6 c0             	movzx  eax,al
c001bba8:	50                   	push   eax
c001bba9:	e8 7e fd ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001bbae:	5f                   	pop    edi
c001bbaf:	bf e8 03 00 00       	mov    edi,0x3e8
c001bbb4:	5a                   	pop    edx
c001bbb5:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001bbbb:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bbc0:	53                   	push   ebx
c001bbc1:	99                   	cdq    
c001bbc2:	f7 ff                	idiv   edi
c001bbc4:	99                   	cdq    
c001bbc5:	f7 f9                	idiv   ecx
c001bbc7:	8d 42 30             	lea    eax,[edx+0x30]
c001bbca:	0f b6 c0             	movzx  eax,al
c001bbcd:	50                   	push   eax
c001bbce:	e8 59 fd ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001bbd3:	5f                   	pop    edi
c001bbd4:	bf 64 00 00 00       	mov    edi,0x64
c001bbd9:	5a                   	pop    edx
c001bbda:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001bbe0:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bbe5:	53                   	push   ebx
c001bbe6:	99                   	cdq    
c001bbe7:	f7 ff                	idiv   edi
c001bbe9:	99                   	cdq    
c001bbea:	f7 f9                	idiv   ecx
c001bbec:	8d 42 30             	lea    eax,[edx+0x30]
c001bbef:	0f b6 c0             	movzx  eax,al
c001bbf2:	50                   	push   eax
c001bbf3:	e8 34 fd ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001bbf8:	5a                   	pop    edx
c001bbf9:	5a                   	pop    edx
c001bbfa:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001bc00:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bc05:	53                   	push   ebx
c001bc06:	99                   	cdq    
c001bc07:	f7 f9                	idiv   ecx
c001bc09:	99                   	cdq    
c001bc0a:	f7 f9                	idiv   ecx
c001bc0c:	8d 42 30             	lea    eax,[edx+0x30]
c001bc0f:	0f b6 c0             	movzx  eax,al
c001bc12:	50                   	push   eax
c001bc13:	e8 14 fd ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001bc18:	5a                   	pop    edx
c001bc19:	5a                   	pop    edx
c001bc1a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001bc20:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001bc25:	53                   	push   ebx
c001bc26:	99                   	cdq    
c001bc27:	f7 f9                	idiv   ecx
c001bc29:	8d 42 30             	lea    eax,[edx+0x30]
c001bc2c:	0f b6 c0             	movzx  eax,al
c001bc2f:	50                   	push   eax
c001bc30:	e8 f7 fc ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001bc35:	5a                   	pop    edx
c001bc36:	5a                   	pop    edx
c001bc37:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001bc3d:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bc42:	53                   	push   ebx
c001bc43:	99                   	cdq    
c001bc44:	f7 fd                	idiv   ebp
c001bc46:	99                   	cdq    
c001bc47:	f7 f9                	idiv   ecx
c001bc49:	8d 42 30             	lea    eax,[edx+0x30]
c001bc4c:	0f b6 c0             	movzx  eax,al
c001bc4f:	50                   	push   eax
c001bc50:	e8 d7 fc ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001bc55:	5d                   	pop    ebp
c001bc56:	bd e8 03 00 00       	mov    ebp,0x3e8
c001bc5b:	5a                   	pop    edx
c001bc5c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001bc62:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bc67:	53                   	push   ebx
c001bc68:	99                   	cdq    
c001bc69:	f7 fd                	idiv   ebp
c001bc6b:	99                   	cdq    
c001bc6c:	f7 f9                	idiv   ecx
c001bc6e:	8d 42 30             	lea    eax,[edx+0x30]
c001bc71:	0f b6 c0             	movzx  eax,al
c001bc74:	50                   	push   eax
c001bc75:	e8 b2 fc ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001bc7a:	5d                   	pop    ebp
c001bc7b:	5a                   	pop    edx
c001bc7c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001bc82:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bc87:	53                   	push   ebx
c001bc88:	99                   	cdq    
c001bc89:	f7 ff                	idiv   edi
c001bc8b:	99                   	cdq    
c001bc8c:	f7 f9                	idiv   ecx
c001bc8e:	8d 42 30             	lea    eax,[edx+0x30]
c001bc91:	0f b6 c0             	movzx  eax,al
c001bc94:	50                   	push   eax
c001bc95:	e8 92 fc ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001bc9a:	5f                   	pop    edi
c001bc9b:	5d                   	pop    ebp
c001bc9c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001bca2:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bca7:	53                   	push   ebx
c001bca8:	99                   	cdq    
c001bca9:	f7 f9                	idiv   ecx
c001bcab:	99                   	cdq    
c001bcac:	f7 f9                	idiv   ecx
c001bcae:	8d 42 30             	lea    eax,[edx+0x30]
c001bcb1:	0f b6 c0             	movzx  eax,al
c001bcb4:	50                   	push   eax
c001bcb5:	e8 72 fc ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001bcba:	5a                   	pop    edx
c001bcbb:	5f                   	pop    edi
c001bcbc:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001bcc2:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001bcc7:	53                   	push   ebx
c001bcc8:	99                   	cdq    
c001bcc9:	f7 f9                	idiv   ecx
c001bccb:	83 c2 30             	add    edx,0x30
c001bcce:	0f b6 d2             	movzx  edx,dl
c001bcd1:	52                   	push   edx
c001bcd2:	e8 55 fc ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001bcd7:	83 c4 10             	add    esp,0x10
c001bcda:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001bce0:	eb 05                	jmp    c001bce7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001bce2:	be 01 00 00 00       	mov    esi,0x1
c001bce7:	83 c4 0c             	add    esp,0xc
c001bcea:	89 f0                	mov    eax,esi
c001bcec:	5b                   	pop    ebx
c001bced:	5e                   	pop    esi
c001bcee:	5f                   	pop    edi
c001bcef:	5d                   	pop    ebp
c001bcf0:	c3                   	ret    
c001bcf1:	90                   	nop

c001bcf2 <ATAPI::write(unsigned long long, int, void*)>:
c001bcf2:	b8 03 00 00 00       	mov    eax,0x3
c001bcf7:	c3                   	ret    

c001bcf8 <ATAPI::close(int, int, void*)>:
c001bcf8:	83 ec 0c             	sub    esp,0xc
c001bcfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bd05:	85 c0                	test   eax,eax
c001bd07:	74 0c                	je     c001bd15 <ATAPI::close(int, int, void*)+0x1d>
c001bd09:	83 ec 0c             	sub    esp,0xc
c001bd0c:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd0e:	50                   	push   eax
c001bd0f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001bd12:	83 c4 10             	add    esp,0x10
c001bd15:	31 c0                	xor    eax,eax
c001bd17:	83 c4 0c             	add    esp,0xc
c001bd1a:	c3                   	ret    
c001bd1b:	90                   	nop

c001bd1c <ATAPI::ATAPI()>:
c001bd1c:	83 ec 0c             	sub    esp,0xc
c001bd1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd23:	83 ec 04             	sub    esp,0x4
c001bd26:	68 00 08 00 00       	push   0x800
c001bd2b:	68 15 15 02 c0       	push   0xc0021515
c001bd30:	50                   	push   eax
c001bd31:	e8 24 01 ff ff       	call   c000be5a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bd36:	83 c4 10             	add    esp,0x10
c001bd39:	ba 30 14 02 c0       	mov    edx,0xc0021430
c001bd3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd42:	89 10                	mov    DWORD PTR [eax],edx
c001bd44:	90                   	nop
c001bd45:	83 c4 0c             	add    esp,0xc
c001bd48:	c3                   	ret    
c001bd49:	90                   	nop

c001bd4a <ATAPI::readyForCommand()>:
c001bd4a:	56                   	push   esi
c001bd4b:	53                   	push   ebx
c001bd4c:	53                   	push   ebx
c001bd4d:	31 db                	xor    ebx,ebx
c001bd4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bd53:	51                   	push   ecx
c001bd54:	6a 0c                	push   0xc
c001bd56:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bd5d:	50                   	push   eax
c001bd5e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bd64:	e8 d9 e8 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001bd69:	83 c4 10             	add    esp,0x10
c001bd6c:	a8 88                	test   al,0x88
c001bd6e:	74 25                	je     c001bd95 <ATAPI::readyForCommand()+0x4b>
c001bd70:	43                   	inc    ebx
c001bd71:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001bd77:	7e da                	jle    c001bd53 <ATAPI::readyForCommand()+0x9>
c001bd79:	83 ec 0c             	sub    esp,0xc
c001bd7c:	68 5e 01 00 00       	push   0x15e
c001bd81:	e8 d2 90 ff ff       	call   c0014e58 <milliTenthSleep(unsigned int)>
c001bd86:	83 c4 10             	add    esp,0x10
c001bd89:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001bd8f:	75 c2                	jne    c001bd53 <ATAPI::readyForCommand()+0x9>
c001bd91:	31 c0                	xor    eax,eax
c001bd93:	eb 02                	jmp    c001bd97 <ATAPI::readyForCommand()+0x4d>
c001bd95:	b0 01                	mov    al,0x1
c001bd97:	5a                   	pop    edx
c001bd98:	5b                   	pop    ebx
c001bd99:	5e                   	pop    esi
c001bd9a:	c3                   	ret    
c001bd9b:	90                   	nop

c001bd9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001bd9c:	55                   	push   ebp
c001bd9d:	57                   	push   edi
c001bd9e:	56                   	push   esi
c001bd9f:	53                   	push   ebx
c001bda0:	83 ec 20             	sub    esp,0x20
c001bda3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001bda7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001bdab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bdaf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001bdb3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001bdb7:	6a 01                	push   0x1
c001bdb9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bdc0:	50                   	push   eax
c001bdc1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bdc7:	e8 c4 e9 ff ff       	call   c001a790 <IDE::enableIRQs(unsigned char, bool)>
c001bdcc:	5e                   	pop    esi
c001bdcd:	58                   	pop    eax
c001bdce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bdd5:	50                   	push   eax
c001bdd6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bddc:	e8 7b e7 ff ff       	call   c001a55c <IDE::prepareInterrupt(unsigned char)>
c001bde1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bde4:	e8 61 ff ff ff       	call   c001bd4a <ATAPI::readyForCommand()>
c001bde9:	83 c4 10             	add    esp,0x10
c001bdec:	84 c0                	test   al,al
c001bdee:	75 0a                	jne    c001bdfa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001bdf0:	bb 01 00 00 00       	mov    ebx,0x1
c001bdf5:	e9 57 02 00 00       	jmp    c001c051 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001bdfa:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001be00:	c1 e0 04             	shl    eax,0x4
c001be03:	0f b6 c0             	movzx  eax,al
c001be06:	50                   	push   eax
c001be07:	6a 06                	push   0x6
c001be09:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001be10:	50                   	push   eax
c001be11:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001be17:	e8 66 e7 ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be1c:	6a 00                	push   0x0
c001be1e:	6a 01                	push   0x1
c001be20:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001be27:	50                   	push   eax
c001be28:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001be2e:	e8 4f e7 ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be33:	83 c4 20             	add    esp,0x20
c001be36:	0f b6 c3             	movzx  eax,bl
c001be39:	50                   	push   eax
c001be3a:	6a 04                	push   0x4
c001be3c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001be43:	50                   	push   eax
c001be44:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001be4a:	0f b6 df             	movzx  ebx,bh
c001be4d:	e8 30 e7 ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be52:	53                   	push   ebx
c001be53:	6a 05                	push   0x5
c001be55:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001be5c:	50                   	push   eax
c001be5d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001be63:	e8 1a e7 ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be68:	83 c4 20             	add    esp,0x20
c001be6b:	68 a0 00 00 00       	push   0xa0
c001be70:	6a 07                	push   0x7
c001be72:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001be79:	50                   	push   eax
c001be7a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001be80:	e8 fd e6 ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be85:	83 c4 0c             	add    esp,0xc
c001be88:	6a 01                	push   0x1
c001be8a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001be91:	50                   	push   eax
c001be92:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001be98:	e8 87 f1 ff ff       	call   c001b024 <IDE::polling(unsigned char, unsigned int)>
c001be9d:	83 c4 10             	add    esp,0x10
c001bea0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001bea6:	84 c0                	test   al,al
c001bea8:	74 23                	je     c001becd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001beaa:	0f b6 d8             	movzx  ebx,al
c001bead:	53                   	push   ebx
c001beae:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001beb5:	0f b6 d2             	movzx  edx,dl
c001beb8:	50                   	push   eax
c001beb9:	52                   	push   edx
c001beba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bec0:	e8 af f0 ff ff       	call   c001af74 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001bec5:	83 c4 10             	add    esp,0x10
c001bec8:	e9 84 01 00 00       	jmp    c001c051 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001becd:	53                   	push   ebx
c001bece:	53                   	push   ebx
c001becf:	0f b6 d2             	movzx  edx,dl
c001bed2:	52                   	push   edx
c001bed3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bed9:	e8 92 e6 ff ff       	call   c001a570 <IDE::getBase(unsigned char)>
c001bede:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bee2:	b9 06 00 00 00       	mov    ecx,0x6
c001bee7:	89 c2                	mov    edx,eax
c001bee9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001beec:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001bef0:	83 c4 10             	add    esp,0x10
c001bef3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bef9:	85 db                	test   ebx,ebx
c001befb:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bf02:	0f 84 ec 00 00 00    	je     c001bff4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001bf08:	51                   	push   ecx
c001bf09:	51                   	push   ecx
c001bf0a:	52                   	push   edx
c001bf0b:	50                   	push   eax
c001bf0c:	e8 df e7 ff ff       	call   c001a6f0 <IDE::waitInterrupt(unsigned char)>
c001bf11:	83 c4 10             	add    esp,0x10
c001bf14:	84 c0                	test   al,al
c001bf16:	0f 84 d4 fe ff ff    	je     c001bdf0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001bf1c:	56                   	push   esi
c001bf1d:	56                   	push   esi
c001bf1e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bf25:	50                   	push   eax
c001bf26:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bf2c:	e8 2b e6 ff ff       	call   c001a55c <IDE::prepareInterrupt(unsigned char)>
c001bf31:	83 c4 0c             	add    esp,0xc
c001bf34:	6a 04                	push   0x4
c001bf36:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bf3d:	50                   	push   eax
c001bf3e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bf44:	e8 f9 e6 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001bf49:	83 c4 0c             	add    esp,0xc
c001bf4c:	6a 05                	push   0x5
c001bf4e:	89 c6                	mov    esi,eax
c001bf50:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bf57:	50                   	push   eax
c001bf58:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bf5e:	e8 df e6 ff ff       	call   c001a642 <IDE::read(unsigned char, unsigned char)>
c001bf63:	89 f1                	mov    ecx,esi
c001bf65:	0f b6 c0             	movzx  eax,al
c001bf68:	c1 e0 08             	shl    eax,0x8
c001bf6b:	0f b6 f1             	movzx  esi,cl
c001bf6e:	09 c6                	or     esi,eax
c001bf70:	d1 fe                	sar    esi,1
c001bf72:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001bf76:	83 c4 10             	add    esp,0x10
c001bf79:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001bf7e:	74 41                	je     c001bfc1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001bf80:	31 c9                	xor    ecx,ecx
c001bf82:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bf88:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001bf8c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bf93:	75 0a                	jne    c001bf9f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001bf95:	01 c9                	add    ecx,ecx
c001bf97:	01 cd                	add    ebp,ecx
c001bf99:	4b                   	dec    ebx
c001bf9a:	e9 54 ff ff ff       	jmp    c001bef3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001bf9f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001bfa4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bfa8:	51                   	push   ecx
c001bfa9:	51                   	push   ecx
c001bfaa:	52                   	push   edx
c001bfab:	50                   	push   eax
c001bfac:	e8 bf e5 ff ff       	call   c001a570 <IDE::getBase(unsigned char)>
c001bfb1:	89 c2                	mov    edx,eax
c001bfb3:	89 f0                	mov    eax,esi
c001bfb5:	66 ef                	out    dx,ax
c001bfb7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bfbb:	83 c4 10             	add    esp,0x10
c001bfbe:	41                   	inc    ecx
c001bfbf:	eb c1                	jmp    c001bf82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001bfc1:	31 f6                	xor    esi,esi
c001bfc3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bfc9:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001bfcd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bfd4:	75 06                	jne    c001bfdc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001bfd6:	01 f6                	add    esi,esi
c001bfd8:	01 f5                	add    ebp,esi
c001bfda:	eb bd                	jmp    c001bf99 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001bfdc:	51                   	push   ecx
c001bfdd:	51                   	push   ecx
c001bfde:	52                   	push   edx
c001bfdf:	50                   	push   eax
c001bfe0:	e8 8b e5 ff ff       	call   c001a570 <IDE::getBase(unsigned char)>
c001bfe5:	89 c2                	mov    edx,eax
c001bfe7:	66 ed                	in     ax,dx
c001bfe9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001bfee:	83 c4 10             	add    esp,0x10
c001bff1:	46                   	inc    esi
c001bff2:	eb cf                	jmp    c001bfc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001bff4:	51                   	push   ecx
c001bff5:	51                   	push   ecx
c001bff6:	52                   	push   edx
c001bff7:	50                   	push   eax
c001bff8:	e8 f3 e6 ff ff       	call   c001a6f0 <IDE::waitInterrupt(unsigned char)>
c001bffd:	83 c4 10             	add    esp,0x10
c001c000:	84 c0                	test   al,al
c001c002:	0f 84 e8 fd ff ff    	je     c001bdf0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c008:	52                   	push   edx
c001c009:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c00e:	52                   	push   edx
c001c00f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c016:	50                   	push   eax
c001c017:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c01d:	e8 3a e5 ff ff       	call   c001a55c <IDE::prepareInterrupt(unsigned char)>
c001c022:	83 c4 10             	add    esp,0x10
c001c025:	50                   	push   eax
c001c026:	50                   	push   eax
c001c027:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c02e:	50                   	push   eax
c001c02f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c035:	e8 36 e5 ff ff       	call   c001a570 <IDE::getBase(unsigned char)>
c001c03a:	8d 50 07             	lea    edx,[eax+0x7]
c001c03d:	ec                   	in     al,dx
c001c03e:	83 c4 10             	add    esp,0x10
c001c041:	a8 88                	test   al,0x88
c001c043:	74 0a                	je     c001c04f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001c045:	4b                   	dec    ebx
c001c046:	75 dd                	jne    c001c025 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001c048:	bb 02 00 00 00       	mov    ebx,0x2
c001c04d:	eb 02                	jmp    c001c051 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c04f:	31 db                	xor    ebx,ebx
c001c051:	83 c4 1c             	add    esp,0x1c
c001c054:	89 d8                	mov    eax,ebx
c001c056:	5b                   	pop    ebx
c001c057:	5e                   	pop    esi
c001c058:	5f                   	pop    edi
c001c059:	5d                   	pop    ebp
c001c05a:	c3                   	ret    
c001c05b:	90                   	nop

c001c05c <ATAPI::diskRemoved()>:
c001c05c:	53                   	push   ebx
c001c05d:	83 ec 14             	sub    esp,0x14
c001c060:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c064:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c06b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c071:	e8 a8 0c ff ff       	call   c000cd1e <LogicalDisk::unmount()>
c001c076:	58                   	pop    eax
c001c077:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c07d:	e8 7a 16 ff ff       	call   c000d6fc <VCache::writeWriteBuffer()>
c001c082:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c088:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c08c:	83 c4 18             	add    esp,0x18
c001c08f:	5b                   	pop    ebx
c001c090:	e9 57 16 ff ff       	jmp    c000d6ec <VCache::invalidateReadBuffer()>
c001c095:	90                   	nop

c001c096 <ATAPI::eject()>:
c001c096:	57                   	push   edi
c001c097:	b9 03 00 00 00       	mov    ecx,0x3
c001c09c:	53                   	push   ebx
c001c09d:	83 ec 14             	sub    esp,0x14
c001c0a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c0a4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c0a8:	fc                   	cld    
c001c0a9:	31 c0                	xor    eax,eax
c001c0ab:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c0ad:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c0b2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c0b7:	50                   	push   eax
c001c0b8:	50                   	push   eax
c001c0b9:	6a 00                	push   0x0
c001c0bb:	6a 00                	push   0x0
c001c0bd:	6a 00                	push   0x0
c001c0bf:	6a 02                	push   0x2
c001c0c1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c0c5:	50                   	push   eax
c001c0c6:	53                   	push   ebx
c001c0c7:	e8 d0 fc ff ff       	call   c001bd9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c0cc:	83 c4 14             	add    esp,0x14
c001c0cf:	53                   	push   ebx
c001c0d0:	e8 87 ff ff ff       	call   c001c05c <ATAPI::diskRemoved()>
c001c0d5:	83 c4 24             	add    esp,0x24
c001c0d8:	31 c0                	xor    eax,eax
c001c0da:	5b                   	pop    ebx
c001c0db:	5f                   	pop    edi
c001c0dc:	c3                   	ret    
c001c0dd:	90                   	nop

c001c0de <ATAPI::diskInserted()>:
c001c0de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0e2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c0e9:	c3                   	ret    

c001c0ea <ATAPI::detectMedia()>:
c001c0ea:	56                   	push   esi
c001c0eb:	53                   	push   ebx
c001c0ec:	83 ec 28             	sub    esp,0x28
c001c0ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c0f3:	6a 0c                	push   0xc
c001c0f5:	6a 00                	push   0x0
c001c0f7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c0fb:	56                   	push   esi
c001c0fc:	e8 bf 43 fe ff       	call   c00004c0 <memset>
c001c101:	58                   	pop    eax
c001c102:	5a                   	pop    edx
c001c103:	6a 00                	push   0x0
c001c105:	6a 00                	push   0x0
c001c107:	6a 00                	push   0x0
c001c109:	6a 00                	push   0x0
c001c10b:	56                   	push   esi
c001c10c:	53                   	push   ebx
c001c10d:	e8 8a fc ff ff       	call   c001bd9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c112:	83 c4 1c             	add    esp,0x1c
c001c115:	6a 0c                	push   0xc
c001c117:	6a 00                	push   0x0
c001c119:	56                   	push   esi
c001c11a:	e8 a1 43 fe ff       	call   c00004c0 <memset>
c001c11f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c124:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c129:	59                   	pop    ecx
c001c12a:	58                   	pop    eax
c001c12b:	6a 01                	push   0x1
c001c12d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c131:	50                   	push   eax
c001c132:	6a 00                	push   0x0
c001c134:	6a 12                	push   0x12
c001c136:	56                   	push   esi
c001c137:	53                   	push   ebx
c001c138:	e8 5f fc ff ff       	call   c001bd9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c13d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c141:	83 c4 20             	add    esp,0x20
c001c144:	83 e0 7f             	and    eax,0x7f
c001c147:	3c 70                	cmp    al,0x70
c001c149:	74 15                	je     c001c160 <ATAPI::detectMedia()+0x76>
c001c14b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c152:	75 0c                	jne    c001c160 <ATAPI::detectMedia()+0x76>
c001c154:	83 ec 0c             	sub    esp,0xc
c001c157:	53                   	push   ebx
c001c158:	e8 81 ff ff ff       	call   c001c0de <ATAPI::diskInserted()>
c001c15d:	83 c4 10             	add    esp,0x10
c001c160:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c164:	83 e0 0f             	and    eax,0xf
c001c167:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c16c:	75 18                	jne    c001c186 <ATAPI::detectMedia()+0x9c>
c001c16e:	3c 02                	cmp    al,0x2
c001c170:	75 14                	jne    c001c186 <ATAPI::detectMedia()+0x9c>
c001c172:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c179:	74 24                	je     c001c19f <ATAPI::detectMedia()+0xb5>
c001c17b:	83 ec 0c             	sub    esp,0xc
c001c17e:	53                   	push   ebx
c001c17f:	e8 d8 fe ff ff       	call   c001c05c <ATAPI::diskRemoved()>
c001c184:	eb 16                	jmp    c001c19c <ATAPI::detectMedia()+0xb2>
c001c186:	84 c0                	test   al,al
c001c188:	75 15                	jne    c001c19f <ATAPI::detectMedia()+0xb5>
c001c18a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c191:	75 0c                	jne    c001c19f <ATAPI::detectMedia()+0xb5>
c001c193:	83 ec 0c             	sub    esp,0xc
c001c196:	53                   	push   ebx
c001c197:	e8 42 ff ff ff       	call   c001c0de <ATAPI::diskInserted()>
c001c19c:	83 c4 10             	add    esp,0x10
c001c19f:	83 c4 24             	add    esp,0x24
c001c1a2:	5b                   	pop    ebx
c001c1a3:	5e                   	pop    esi
c001c1a4:	c3                   	ret    
c001c1a5:	90                   	nop

c001c1a6 <ATAPI::open(int, int, void*)>:
c001c1a6:	56                   	push   esi
c001c1a7:	53                   	push   ebx
c001c1a8:	50                   	push   eax
c001c1a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c1b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c1b5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c1bb:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c1c1:	c1 e0 06             	shl    eax,0x6
c001c1c4:	01 d0                	add    eax,edx
c001c1c6:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c1cd:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c1d3:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c1da:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c1e4:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c1ea:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c1f1:	6a 04                	push   0x4
c001c1f3:	6a 0c                	push   0xc
c001c1f5:	51                   	push   ecx
c001c1f6:	52                   	push   edx
c001c1f7:	e8 86 e3 ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1fc:	90                   	nop
c001c1fd:	90                   	nop
c001c1fe:	6a 00                	push   0x0
c001c200:	6a 0c                	push   0xc
c001c202:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c209:	50                   	push   eax
c001c20a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c210:	e8 6d e3 ff ff       	call   c001a582 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c215:	83 c4 14             	add    esp,0x14
c001c218:	68 78 01 00 00       	push   0x178
c001c21d:	e8 41 b6 fe ff       	call   c0007863 <malloc>
c001c222:	83 c4 0c             	add    esp,0xc
c001c225:	89 c6                	mov    esi,eax
c001c227:	6a 00                	push   0x0
c001c229:	68 ff ff ff 7f       	push   0x7fffffff
c001c22e:	6a 00                	push   0x0
c001c230:	6a 00                	push   0x0
c001c232:	53                   	push   ebx
c001c233:	68 c7 15 02 c0       	push   0xc00215c7
c001c238:	50                   	push   eax
c001c239:	e8 22 09 ff ff       	call   c000cb60 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c23e:	83 c4 14             	add    esp,0x14
c001c241:	56                   	push   esi
c001c242:	e8 d9 09 ff ff       	call   c000cc20 <LogicalDisk::assignDriveLetter()>
c001c247:	5a                   	pop    edx
c001c248:	59                   	pop    ecx
c001c249:	0f be c0             	movsx  eax,al
c001c24c:	50                   	push   eax
c001c24d:	68 18 14 02 c0       	push   0xc0021418
c001c252:	e8 fc e3 fe ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c001c257:	58                   	pop    eax
c001c258:	5a                   	pop    edx
c001c259:	56                   	push   esi
c001c25a:	53                   	push   ebx
c001c25b:	e8 2c f8 fe ff       	call   c000ba8c <Device::addChild(Device*)>
c001c260:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c266:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c269:	e8 54 fc fe ff       	call   c000bec2 <PhysicalDisk::startCache()>
c001c26e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c275:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c278:	e8 6d fe ff ff       	call   c001c0ea <ATAPI::detectMedia()>
c001c27d:	83 c4 14             	add    esp,0x14
c001c280:	31 c0                	xor    eax,eax
c001c282:	5b                   	pop    ebx
c001c283:	5e                   	pop    esi
c001c284:	c3                   	ret    
c001c285:	90                   	nop

c001c286 <ATAPI::read(unsigned long long, int, void*)>:
c001c286:	55                   	push   ebp
c001c287:	57                   	push   edi
c001c288:	56                   	push   esi
c001c289:	53                   	push   ebx
c001c28a:	83 ec 1c             	sub    esp,0x1c
c001c28d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c291:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c295:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c299:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c2a0:	74 3c                	je     c001c2de <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c2a2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c2a6:	b9 03 00 00 00       	mov    ecx,0x3
c001c2ab:	fc                   	cld    
c001c2ac:	31 c0                	xor    eax,eax
c001c2ae:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c2b0:	0f ce                	bswap  esi
c001c2b2:	89 e8                	mov    eax,ebp
c001c2b4:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c2b9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001c2bd:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c2c1:	50                   	push   eax
c001c2c2:	50                   	push   eax
c001c2c3:	55                   	push   ebp
c001c2c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c2c8:	c1 e5 0b             	shl    ebp,0xb
c001c2cb:	6a 00                	push   0x0
c001c2cd:	55                   	push   ebp
c001c2ce:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c2d2:	50                   	push   eax
c001c2d3:	53                   	push   ebx
c001c2d4:	e8 c3 fa ff ff       	call   c001bd9c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c2d9:	83 c4 20             	add    esp,0x20
c001c2dc:	eb 1a                	jmp    c001c2f8 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001c2de:	83 ec 0c             	sub    esp,0xc
c001c2e1:	53                   	push   ebx
c001c2e2:	e8 03 fe ff ff       	call   c001c0ea <ATAPI::detectMedia()>
c001c2e7:	83 c4 10             	add    esp,0x10
c001c2ea:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c2f1:	75 af                	jne    c001c2a2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c2f3:	b8 02 00 00 00       	mov    eax,0x2
c001c2f8:	83 c4 1c             	add    esp,0x1c
c001c2fb:	5b                   	pop    ebx
c001c2fc:	5e                   	pop    esi
c001c2fd:	5f                   	pop    edi
c001c2fe:	5d                   	pop    ebp
c001c2ff:	c3                   	ret    

c001c300 <SATA::close(int, int, void*)>:
c001c300:	83 ec 0c             	sub    esp,0xc
c001c303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c307:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c30d:	85 c0                	test   eax,eax
c001c30f:	74 0c                	je     c001c31d <SATA::close(int, int, void*)+0x1d>
c001c311:	83 ec 0c             	sub    esp,0xc
c001c314:	8b 10                	mov    edx,DWORD PTR [eax]
c001c316:	50                   	push   eax
c001c317:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c31a:	83 c4 10             	add    esp,0x10
c001c31d:	31 c0                	xor    eax,eax
c001c31f:	83 c4 0c             	add    esp,0xc
c001c322:	c3                   	ret    
c001c323:	90                   	nop

c001c324 <SATA::powerSaving(PowerSavingLevel)>:
c001c324:	c3                   	ret    
c001c325:	90                   	nop

c001c326 <SATA::open(int, int, void*)>:
c001c326:	56                   	push   esi
c001c327:	53                   	push   ebx
c001c328:	50                   	push   eax
c001c329:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c32d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c331:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c337:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c33b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001c341:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c34b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c355:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c35f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001c366:	e8 ef b7 fe ff       	call   c0007b5a <Phys::allocatePage()>
c001c36b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c371:	89 c6                	mov    esi,eax
c001c373:	e8 e2 b7 fe ff       	call   c0007b5a <Phys::allocatePage()>
c001c378:	81 c6 00 10 00 00    	add    esi,0x1000
c001c37e:	39 c6                	cmp    esi,eax
c001c380:	74 10                	je     c001c392 <SATA::open(int, int, void*)+0x6c>
c001c382:	83 ec 0c             	sub    esp,0xc
c001c385:	68 60 14 02 c0       	push   0xc0021460
c001c38a:	e8 78 40 ff ff       	call   c0010407 <KePanic(char const*)>
c001c38f:	83 c4 10             	add    esp,0x10
c001c392:	83 ec 0c             	sub    esp,0xc
c001c395:	6a 02                	push   0x2
c001c397:	e8 c6 cf fe ff       	call   c0009362 <Virt::allocateKernelVirtualPages(int)>
c001c39c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c3a2:	6a 03                	push   0x3
c001c3a4:	50                   	push   eax
c001c3a5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001c3ab:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001c3b1:	e8 7c d6 fe ff       	call   c0009a32 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c3b6:	83 c4 14             	add    esp,0x14
c001c3b9:	53                   	push   ebx
c001c3ba:	e8 03 fb fe ff       	call   c000bec2 <PhysicalDisk::startCache()>
c001c3bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3c2:	e8 67 0c ff ff       	call   c000d02e <createPartitionsForDisk(PhysicalDisk*)>
c001c3c7:	83 c4 14             	add    esp,0x14
c001c3ca:	31 c0                	xor    eax,eax
c001c3cc:	5b                   	pop    ebx
c001c3cd:	5e                   	pop    esi
c001c3ce:	c3                   	ret    
c001c3cf:	90                   	nop

c001c3d0 <SATA::SATA()>:
c001c3d0:	83 ec 0c             	sub    esp,0xc
c001c3d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3d7:	83 ec 04             	sub    esp,0x4
c001c3da:	68 00 02 00 00       	push   0x200
c001c3df:	68 74 14 02 c0       	push   0xc0021474
c001c3e4:	50                   	push   eax
c001c3e5:	e8 70 fa fe ff       	call   c000be5a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c3ea:	83 c4 10             	add    esp,0x10
c001c3ed:	ba e4 14 02 c0       	mov    edx,0xc00214e4
c001c3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f6:	89 10                	mov    DWORD PTR [eax],edx
c001c3f8:	90                   	nop
c001c3f9:	83 c4 0c             	add    esp,0xc
c001c3fc:	c3                   	ret    
c001c3fd:	90                   	nop

c001c3fe <SATA::access(unsigned long long, int, void*, bool)>:
c001c3fe:	55                   	push   ebp
c001c3ff:	57                   	push   edi
c001c400:	56                   	push   esi
c001c401:	53                   	push   ebx
c001c402:	83 ec 2c             	sub    esp,0x2c
c001c405:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c409:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c40d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c411:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c415:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c419:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c41d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001c422:	7e 10                	jle    c001c434 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001c424:	83 ec 0c             	sub    esp,0xc
c001c427:	68 84 14 02 c0       	push   0xc0021484
c001c42c:	e8 d6 3f ff ff       	call   c0010407 <KePanic(char const*)>
c001c431:	83 c4 10             	add    esp,0x10
c001c434:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c43a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c440:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c446:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c44a:	89 d0                	mov    eax,edx
c001c44c:	c1 e0 07             	shl    eax,0x7
c001c44f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c453:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c45d:	51                   	push   ecx
c001c45e:	8d 42 02             	lea    eax,[edx+0x2]
c001c461:	51                   	push   ecx
c001c462:	c1 e0 07             	shl    eax,0x7
c001c465:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c469:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c46d:	50                   	push   eax
c001c46e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001c474:	e8 95 ec ff ff       	call   c001b10e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c479:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c47d:	83 c4 10             	add    esp,0x10
c001c480:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c484:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001c489:	0f 84 4f 01 00 00    	je     c001c5de <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c48f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c493:	c1 e0 09             	shl    eax,0x9
c001c496:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c49a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c49f:	74 0e                	je     c001c4af <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001c4a1:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001c4a7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001c4ab:	89 c1                	mov    ecx,eax
c001c4ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c4af:	8d 42 02             	lea    eax,[edx+0x2]
c001c4b2:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c4b8:	c1 e0 07             	shl    eax,0x7
c001c4bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c4bf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c4c3:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4c5:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001c4cb:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001c4d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c4d5:	c1 e1 05             	shl    ecx,0x5
c001c4d8:	01 c8                	add    eax,ecx
c001c4da:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001c4de:	83 e1 01             	and    ecx,0x1
c001c4e1:	89 ce                	mov    esi,ecx
c001c4e3:	8a 08                	mov    cl,BYTE PTR [eax]
c001c4e5:	c1 e6 06             	shl    esi,0x6
c001c4e8:	83 e1 bf             	and    ecx,0xffffffbf
c001c4eb:	09 f1                	or     ecx,esi
c001c4ed:	88 08                	mov    BYTE PTR [eax],cl
c001c4ef:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c4f1:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001c4f7:	81 c9 05 00 01 00    	or     ecx,0x10005
c001c4fd:	89 08                	mov    DWORD PTR [eax],ecx
c001c4ff:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c505:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001c50b:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001c511:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001c514:	50                   	push   eax
c001c515:	68 90 00 00 00       	push   0x90
c001c51a:	6a 00                	push   0x0
c001c51c:	56                   	push   esi
c001c51d:	e8 9e 3f fe ff       	call   c00004c0 <memset>
c001c522:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c528:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001c52c:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001c532:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c536:	48                   	dec    eax
c001c537:	83 c4 10             	add    esp,0x10
c001c53a:	25 ff ff 3f 00       	and    eax,0x3fffff
c001c53f:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001c543:	89 c1                	mov    ecx,eax
c001c545:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001c54b:	25 00 00 c0 ff       	and    eax,0xffc00000
c001c550:	09 c8                	or     eax,ecx
c001c552:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001c558:	66 8b 06             	mov    ax,WORD PTR [esi]
c001c55b:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001c562:	66 25 00 7f          	and    ax,0x7f00
c001c566:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c56a:	66 0d 27 80          	or     ax,0x8027
c001c56e:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001c573:	66 89 06             	mov    WORD PTR [esi],ax
c001c576:	19 c0                	sbb    eax,eax
c001c578:	83 e0 f0             	and    eax,0xfffffff0
c001c57b:	83 c0 35             	add    eax,0x35
c001c57e:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001c581:	89 e8                	mov    eax,ebp
c001c583:	c1 e8 10             	shr    eax,0x10
c001c586:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001c589:	89 e8                	mov    eax,ebp
c001c58b:	c1 e8 18             	shr    eax,0x18
c001c58e:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001c591:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c595:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001c598:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c59c:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001c59f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c5a3:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001c5a7:	89 d6                	mov    esi,edx
c001c5a9:	c1 e6 07             	shl    esi,0x7
c001c5ac:	31 c0                	xor    eax,eax
c001c5ae:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c5b2:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001c5b8:	80 e1 88             	and    cl,0x88
c001c5bb:	74 0a                	je     c001c5c7 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001c5bd:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c5c2:	74 0a                	je     c001c5ce <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001c5c4:	40                   	inc    eax
c001c5c5:	eb eb                	jmp    c001c5b2 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001c5c7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c5cc:	75 17                	jne    c001c5e5 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001c5ce:	83 ec 0c             	sub    esp,0xc
c001c5d1:	68 bd 14 02 c0       	push   0xc00214bd
c001c5d6:	e8 78 e0 fe ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c001c5db:	83 c4 10             	add    esp,0x10
c001c5de:	b8 01 00 00 00       	mov    eax,0x1
c001c5e3:	eb 5d                	jmp    c001c642 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c5e5:	b8 01 00 00 00       	mov    eax,0x1
c001c5ea:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001c5ee:	c1 e2 07             	shl    edx,0x7
c001c5f1:	d3 e0                	shl    eax,cl
c001c5f3:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001c5f7:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001c5fd:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001c603:	85 c8                	test   eax,ecx
c001c605:	74 16                	je     c001c61d <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001c607:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001c60d:	0f ba e1 1e          	bt     ecx,0x1e
c001c611:	73 ea                	jae    c001c5fd <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001c613:	83 ec 0c             	sub    esp,0xc
c001c616:	68 cb 14 02 c0       	push   0xc00214cb
c001c61b:	eb b9                	jmp    c001c5d6 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001c61d:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001c623:	0f ba e0 1e          	bt     eax,0x1e
c001c627:	72 b5                	jb     c001c5de <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c629:	31 c0                	xor    eax,eax
c001c62b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c630:	75 10                	jne    c001c642 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c632:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001c638:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001c63c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c640:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c642:	83 c4 2c             	add    esp,0x2c
c001c645:	5b                   	pop    ebx
c001c646:	5e                   	pop    esi
c001c647:	5f                   	pop    edi
c001c648:	5d                   	pop    ebp
c001c649:	c3                   	ret    

c001c64a <SATA::read(unsigned long long, int, void*)>:
c001c64a:	55                   	push   ebp
c001c64b:	57                   	push   edi
c001c64c:	56                   	push   esi
c001c64d:	be 04 00 00 00       	mov    esi,0x4
c001c652:	53                   	push   ebx
c001c653:	83 ec 0c             	sub    esp,0xc
c001c656:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c65a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c65e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c662:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c666:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c669:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c66f:	0f 87 1a 02 00 00    	ja     c001c88f <SATA::read(unsigned long long, int, void*)+0x245>
c001c675:	be 06 00 00 00       	mov    esi,0x6
c001c67a:	85 c9                	test   ecx,ecx
c001c67c:	0f 84 0d 02 00 00    	je     c001c88f <SATA::read(unsigned long long, int, void*)+0x245>
c001c682:	56                   	push   esi
c001c683:	56                   	push   esi
c001c684:	6a 00                	push   0x0
c001c686:	51                   	push   ecx
c001c687:	53                   	push   ebx
c001c688:	52                   	push   edx
c001c689:	50                   	push   eax
c001c68a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c68e:	e8 6b fd ff ff       	call   c001c3fe <SATA::access(unsigned long long, int, void*, bool)>
c001c693:	83 c4 20             	add    esp,0x20
c001c696:	89 c6                	mov    esi,eax
c001c698:	85 c0                	test   eax,eax
c001c69a:	0f 85 ea 01 00 00    	jne    c001c88a <SATA::read(unsigned long long, int, void*)+0x240>
c001c6a0:	50                   	push   eax
c001c6a1:	01 1d 54 7b 02 c0    	add    DWORD PTR ds:0xc0027b54,ebx
c001c6a7:	50                   	push   eax
c001c6a8:	bb 0a 00 00 00       	mov    ebx,0xa
c001c6ad:	6a 0f                	push   0xf
c001c6af:	6a 00                	push   0x0
c001c6b1:	e8 87 f2 ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001c6b6:	5a                   	pop    edx
c001c6b7:	59                   	pop    ecx
c001c6b8:	b9 10 27 00 00       	mov    ecx,0x2710
c001c6bd:	0f b6 c0             	movzx  eax,al
c001c6c0:	50                   	push   eax
c001c6c1:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c6c6:	99                   	cdq    
c001c6c7:	f7 f9                	idiv   ecx
c001c6c9:	99                   	cdq    
c001c6ca:	f7 fb                	idiv   ebx
c001c6cc:	8d 42 30             	lea    eax,[edx+0x30]
c001c6cf:	0f b6 c0             	movzx  eax,al
c001c6d2:	50                   	push   eax
c001c6d3:	e8 54 f2 ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001c6d8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c6de:	5f                   	pop    edi
c001c6df:	5d                   	pop    ebp
c001c6e0:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c6e5:	6a 0f                	push   0xf
c001c6e7:	6a 00                	push   0x0
c001c6e9:	e8 4f f2 ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001c6ee:	5a                   	pop    edx
c001c6ef:	59                   	pop    ecx
c001c6f0:	0f b6 c0             	movzx  eax,al
c001c6f3:	50                   	push   eax
c001c6f4:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c6f9:	99                   	cdq    
c001c6fa:	f7 fd                	idiv   ebp
c001c6fc:	99                   	cdq    
c001c6fd:	f7 fb                	idiv   ebx
c001c6ff:	8d 42 30             	lea    eax,[edx+0x30]
c001c702:	0f b6 c0             	movzx  eax,al
c001c705:	50                   	push   eax
c001c706:	e8 21 f2 ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001c70b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c711:	5f                   	pop    edi
c001c712:	bf 64 00 00 00       	mov    edi,0x64
c001c717:	58                   	pop    eax
c001c718:	6a 0f                	push   0xf
c001c71a:	6a 00                	push   0x0
c001c71c:	e8 1c f2 ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001c721:	5a                   	pop    edx
c001c722:	59                   	pop    ecx
c001c723:	0f b6 c0             	movzx  eax,al
c001c726:	50                   	push   eax
c001c727:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c72c:	99                   	cdq    
c001c72d:	f7 ff                	idiv   edi
c001c72f:	99                   	cdq    
c001c730:	f7 fb                	idiv   ebx
c001c732:	8d 42 30             	lea    eax,[edx+0x30]
c001c735:	0f b6 c0             	movzx  eax,al
c001c738:	50                   	push   eax
c001c739:	e8 ee f1 ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001c73e:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c744:	58                   	pop    eax
c001c745:	5a                   	pop    edx
c001c746:	6a 0f                	push   0xf
c001c748:	6a 00                	push   0x0
c001c74a:	e8 ee f1 ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001c74f:	59                   	pop    ecx
c001c750:	5a                   	pop    edx
c001c751:	0f b6 c0             	movzx  eax,al
c001c754:	50                   	push   eax
c001c755:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c75a:	99                   	cdq    
c001c75b:	f7 fb                	idiv   ebx
c001c75d:	99                   	cdq    
c001c75e:	f7 fb                	idiv   ebx
c001c760:	8d 42 30             	lea    eax,[edx+0x30]
c001c763:	0f b6 c0             	movzx  eax,al
c001c766:	50                   	push   eax
c001c767:	e8 c0 f1 ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001c76c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c772:	59                   	pop    ecx
c001c773:	58                   	pop    eax
c001c774:	6a 0f                	push   0xf
c001c776:	6a 00                	push   0x0
c001c778:	e8 c0 f1 ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001c77d:	5a                   	pop    edx
c001c77e:	59                   	pop    ecx
c001c77f:	0f b6 c0             	movzx  eax,al
c001c782:	50                   	push   eax
c001c783:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c788:	99                   	cdq    
c001c789:	f7 fb                	idiv   ebx
c001c78b:	8d 42 30             	lea    eax,[edx+0x30]
c001c78e:	0f b6 c0             	movzx  eax,al
c001c791:	50                   	push   eax
c001c792:	e8 95 f1 ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001c797:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c79d:	58                   	pop    eax
c001c79e:	5a                   	pop    edx
c001c79f:	6a 0f                	push   0xf
c001c7a1:	6a 00                	push   0x0
c001c7a3:	e8 95 f1 ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001c7a8:	59                   	pop    ecx
c001c7a9:	b9 10 27 00 00       	mov    ecx,0x2710
c001c7ae:	5a                   	pop    edx
c001c7af:	0f b6 c0             	movzx  eax,al
c001c7b2:	50                   	push   eax
c001c7b3:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c7b8:	99                   	cdq    
c001c7b9:	f7 f9                	idiv   ecx
c001c7bb:	99                   	cdq    
c001c7bc:	f7 fb                	idiv   ebx
c001c7be:	8d 42 30             	lea    eax,[edx+0x30]
c001c7c1:	0f b6 c0             	movzx  eax,al
c001c7c4:	50                   	push   eax
c001c7c5:	e8 62 f1 ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001c7ca:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c7d0:	59                   	pop    ecx
c001c7d1:	58                   	pop    eax
c001c7d2:	6a 0f                	push   0xf
c001c7d4:	6a 00                	push   0x0
c001c7d6:	e8 62 f1 ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001c7db:	5a                   	pop    edx
c001c7dc:	59                   	pop    ecx
c001c7dd:	0f b6 c0             	movzx  eax,al
c001c7e0:	50                   	push   eax
c001c7e1:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c7e6:	99                   	cdq    
c001c7e7:	f7 fd                	idiv   ebp
c001c7e9:	99                   	cdq    
c001c7ea:	f7 fb                	idiv   ebx
c001c7ec:	8d 42 30             	lea    eax,[edx+0x30]
c001c7ef:	0f b6 c0             	movzx  eax,al
c001c7f2:	50                   	push   eax
c001c7f3:	e8 34 f1 ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001c7f8:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c7fe:	5d                   	pop    ebp
c001c7ff:	58                   	pop    eax
c001c800:	6a 0f                	push   0xf
c001c802:	6a 00                	push   0x0
c001c804:	e8 34 f1 ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001c809:	5a                   	pop    edx
c001c80a:	59                   	pop    ecx
c001c80b:	0f b6 c0             	movzx  eax,al
c001c80e:	50                   	push   eax
c001c80f:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c814:	99                   	cdq    
c001c815:	f7 ff                	idiv   edi
c001c817:	99                   	cdq    
c001c818:	f7 fb                	idiv   ebx
c001c81a:	8d 42 30             	lea    eax,[edx+0x30]
c001c81d:	0f b6 c0             	movzx  eax,al
c001c820:	50                   	push   eax
c001c821:	e8 06 f1 ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001c826:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c82c:	5f                   	pop    edi
c001c82d:	5d                   	pop    ebp
c001c82e:	6a 0f                	push   0xf
c001c830:	6a 00                	push   0x0
c001c832:	e8 06 f1 ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001c837:	5a                   	pop    edx
c001c838:	59                   	pop    ecx
c001c839:	0f b6 c0             	movzx  eax,al
c001c83c:	50                   	push   eax
c001c83d:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c842:	99                   	cdq    
c001c843:	f7 fb                	idiv   ebx
c001c845:	99                   	cdq    
c001c846:	f7 fb                	idiv   ebx
c001c848:	8d 42 30             	lea    eax,[edx+0x30]
c001c84b:	0f b6 c0             	movzx  eax,al
c001c84e:	50                   	push   eax
c001c84f:	e8 d8 f0 ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001c854:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c85a:	5f                   	pop    edi
c001c85b:	5d                   	pop    ebp
c001c85c:	6a 0f                	push   0xf
c001c85e:	6a 00                	push   0x0
c001c860:	e8 d8 f0 ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001c865:	5a                   	pop    edx
c001c866:	59                   	pop    ecx
c001c867:	0f b6 c0             	movzx  eax,al
c001c86a:	50                   	push   eax
c001c86b:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c870:	99                   	cdq    
c001c871:	f7 fb                	idiv   ebx
c001c873:	83 c2 30             	add    edx,0x30
c001c876:	0f b6 d2             	movzx  edx,dl
c001c879:	52                   	push   edx
c001c87a:	e8 ad f0 ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001c87f:	83 c4 10             	add    esp,0x10
c001c882:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c888:	eb 05                	jmp    c001c88f <SATA::read(unsigned long long, int, void*)+0x245>
c001c88a:	be 01 00 00 00       	mov    esi,0x1
c001c88f:	83 c4 0c             	add    esp,0xc
c001c892:	89 f0                	mov    eax,esi
c001c894:	5b                   	pop    ebx
c001c895:	5e                   	pop    esi
c001c896:	5f                   	pop    edi
c001c897:	5d                   	pop    ebp
c001c898:	c3                   	ret    
c001c899:	90                   	nop

c001c89a <SATA::write(unsigned long long, int, void*)>:
c001c89a:	55                   	push   ebp
c001c89b:	b8 04 00 00 00       	mov    eax,0x4
c001c8a0:	57                   	push   edi
c001c8a1:	56                   	push   esi
c001c8a2:	53                   	push   ebx
c001c8a3:	83 ec 1c             	sub    esp,0x1c
c001c8a6:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c8aa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c8ae:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c8b2:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001c8b6:	8d 75 ff             	lea    esi,[ebp-0x1]
c001c8b9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001c8bf:	0f 87 32 02 00 00    	ja     c001caf7 <SATA::write(unsigned long long, int, void*)+0x25d>
c001c8c5:	b8 06 00 00 00       	mov    eax,0x6
c001c8ca:	85 ff                	test   edi,edi
c001c8cc:	0f 84 25 02 00 00    	je     c001caf7 <SATA::write(unsigned long long, int, void*)+0x25d>
c001c8d2:	89 ee                	mov    esi,ebp
c001c8d4:	c1 e6 09             	shl    esi,0x9
c001c8d7:	01 fe                	add    esi,edi
c001c8d9:	89 c8                	mov    eax,ecx
c001c8db:	89 da                	mov    edx,ebx
c001c8dd:	83 c0 01             	add    eax,0x1
c001c8e0:	83 d2 00             	adc    edx,0x0
c001c8e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c8eb:	50                   	push   eax
c001c8ec:	50                   	push   eax
c001c8ed:	6a 01                	push   0x1
c001c8ef:	57                   	push   edi
c001c8f0:	81 c7 00 02 00 00    	add    edi,0x200
c001c8f6:	6a 01                	push   0x1
c001c8f8:	53                   	push   ebx
c001c8f9:	51                   	push   ecx
c001c8fa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c8fe:	e8 fb fa ff ff       	call   c001c3fe <SATA::access(unsigned long long, int, void*, bool)>
c001c903:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c907:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c90b:	83 c4 20             	add    esp,0x20
c001c90e:	39 f7                	cmp    edi,esi
c001c910:	75 c7                	jne    c001c8d9 <SATA::write(unsigned long long, int, void*)+0x3f>
c001c912:	50                   	push   eax
c001c913:	01 2d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebp
c001c919:	50                   	push   eax
c001c91a:	bd 10 27 00 00       	mov    ebp,0x2710
c001c91f:	6a 0f                	push   0xf
c001c921:	bb 0a 00 00 00       	mov    ebx,0xa
c001c926:	6a 00                	push   0x0
c001c928:	e8 10 f0 ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001c92d:	5a                   	pop    edx
c001c92e:	59                   	pop    ecx
c001c92f:	0f b6 c0             	movzx  eax,al
c001c932:	50                   	push   eax
c001c933:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c938:	99                   	cdq    
c001c939:	f7 fd                	idiv   ebp
c001c93b:	99                   	cdq    
c001c93c:	f7 fb                	idiv   ebx
c001c93e:	8d 42 30             	lea    eax,[edx+0x30]
c001c941:	0f b6 c0             	movzx  eax,al
c001c944:	50                   	push   eax
c001c945:	e8 e2 ef ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001c94a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c950:	5e                   	pop    esi
c001c951:	5f                   	pop    edi
c001c952:	bf e8 03 00 00       	mov    edi,0x3e8
c001c957:	6a 0f                	push   0xf
c001c959:	6a 00                	push   0x0
c001c95b:	e8 dd ef ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001c960:	5a                   	pop    edx
c001c961:	59                   	pop    ecx
c001c962:	0f b6 c0             	movzx  eax,al
c001c965:	50                   	push   eax
c001c966:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c96b:	99                   	cdq    
c001c96c:	f7 ff                	idiv   edi
c001c96e:	99                   	cdq    
c001c96f:	f7 fb                	idiv   ebx
c001c971:	8d 42 30             	lea    eax,[edx+0x30]
c001c974:	0f b6 c0             	movzx  eax,al
c001c977:	50                   	push   eax
c001c978:	e8 af ef ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001c97d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c983:	5e                   	pop    esi
c001c984:	be 64 00 00 00       	mov    esi,0x64
c001c989:	58                   	pop    eax
c001c98a:	6a 0f                	push   0xf
c001c98c:	6a 00                	push   0x0
c001c98e:	e8 aa ef ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001c993:	5a                   	pop    edx
c001c994:	59                   	pop    ecx
c001c995:	0f b6 c0             	movzx  eax,al
c001c998:	50                   	push   eax
c001c999:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c99e:	99                   	cdq    
c001c99f:	f7 fe                	idiv   esi
c001c9a1:	99                   	cdq    
c001c9a2:	f7 fb                	idiv   ebx
c001c9a4:	8d 42 30             	lea    eax,[edx+0x30]
c001c9a7:	0f b6 c0             	movzx  eax,al
c001c9aa:	50                   	push   eax
c001c9ab:	e8 7c ef ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001c9b0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c9b6:	58                   	pop    eax
c001c9b7:	5a                   	pop    edx
c001c9b8:	6a 0f                	push   0xf
c001c9ba:	6a 00                	push   0x0
c001c9bc:	e8 7c ef ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001c9c1:	59                   	pop    ecx
c001c9c2:	5a                   	pop    edx
c001c9c3:	0f b6 c0             	movzx  eax,al
c001c9c6:	50                   	push   eax
c001c9c7:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c9cc:	99                   	cdq    
c001c9cd:	f7 fb                	idiv   ebx
c001c9cf:	99                   	cdq    
c001c9d0:	f7 fb                	idiv   ebx
c001c9d2:	8d 42 30             	lea    eax,[edx+0x30]
c001c9d5:	0f b6 c0             	movzx  eax,al
c001c9d8:	50                   	push   eax
c001c9d9:	e8 4e ef ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001c9de:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c9e4:	59                   	pop    ecx
c001c9e5:	58                   	pop    eax
c001c9e6:	6a 0f                	push   0xf
c001c9e8:	6a 00                	push   0x0
c001c9ea:	e8 4e ef ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001c9ef:	5a                   	pop    edx
c001c9f0:	59                   	pop    ecx
c001c9f1:	0f b6 c0             	movzx  eax,al
c001c9f4:	50                   	push   eax
c001c9f5:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c9fa:	99                   	cdq    
c001c9fb:	f7 fb                	idiv   ebx
c001c9fd:	83 c2 30             	add    edx,0x30
c001ca00:	0f b6 d2             	movzx  edx,dl
c001ca03:	52                   	push   edx
c001ca04:	e8 23 ef ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001ca09:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ca0f:	58                   	pop    eax
c001ca10:	5a                   	pop    edx
c001ca11:	6a 0f                	push   0xf
c001ca13:	6a 00                	push   0x0
c001ca15:	e8 23 ef ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001ca1a:	59                   	pop    ecx
c001ca1b:	5a                   	pop    edx
c001ca1c:	0f b6 c0             	movzx  eax,al
c001ca1f:	50                   	push   eax
c001ca20:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001ca25:	99                   	cdq    
c001ca26:	f7 fd                	idiv   ebp
c001ca28:	99                   	cdq    
c001ca29:	f7 fb                	idiv   ebx
c001ca2b:	8d 42 30             	lea    eax,[edx+0x30]
c001ca2e:	0f b6 c0             	movzx  eax,al
c001ca31:	50                   	push   eax
c001ca32:	e8 f5 ee ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001ca37:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ca3d:	59                   	pop    ecx
c001ca3e:	5d                   	pop    ebp
c001ca3f:	6a 0f                	push   0xf
c001ca41:	6a 00                	push   0x0
c001ca43:	e8 f5 ee ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001ca48:	5a                   	pop    edx
c001ca49:	59                   	pop    ecx
c001ca4a:	0f b6 c0             	movzx  eax,al
c001ca4d:	50                   	push   eax
c001ca4e:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001ca53:	99                   	cdq    
c001ca54:	f7 ff                	idiv   edi
c001ca56:	99                   	cdq    
c001ca57:	f7 fb                	idiv   ebx
c001ca59:	8d 42 30             	lea    eax,[edx+0x30]
c001ca5c:	0f b6 c0             	movzx  eax,al
c001ca5f:	50                   	push   eax
c001ca60:	e8 c7 ee ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001ca65:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ca6b:	5f                   	pop    edi
c001ca6c:	5d                   	pop    ebp
c001ca6d:	6a 0f                	push   0xf
c001ca6f:	6a 00                	push   0x0
c001ca71:	e8 c7 ee ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001ca76:	5a                   	pop    edx
c001ca77:	59                   	pop    ecx
c001ca78:	0f b6 c0             	movzx  eax,al
c001ca7b:	50                   	push   eax
c001ca7c:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001ca81:	99                   	cdq    
c001ca82:	f7 fe                	idiv   esi
c001ca84:	99                   	cdq    
c001ca85:	f7 fb                	idiv   ebx
c001ca87:	8d 42 30             	lea    eax,[edx+0x30]
c001ca8a:	0f b6 c0             	movzx  eax,al
c001ca8d:	50                   	push   eax
c001ca8e:	e8 99 ee ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001ca93:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ca99:	5e                   	pop    esi
c001ca9a:	5f                   	pop    edi
c001ca9b:	6a 0f                	push   0xf
c001ca9d:	6a 00                	push   0x0
c001ca9f:	e8 99 ee ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001caa4:	5d                   	pop    ebp
c001caa5:	5a                   	pop    edx
c001caa6:	0f b6 c0             	movzx  eax,al
c001caa9:	50                   	push   eax
c001caaa:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001caaf:	99                   	cdq    
c001cab0:	f7 fb                	idiv   ebx
c001cab2:	99                   	cdq    
c001cab3:	f7 fb                	idiv   ebx
c001cab5:	8d 42 30             	lea    eax,[edx+0x30]
c001cab8:	0f b6 c0             	movzx  eax,al
c001cabb:	50                   	push   eax
c001cabc:	e8 6b ee ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001cac1:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cac7:	59                   	pop    ecx
c001cac8:	5e                   	pop    esi
c001cac9:	6a 0f                	push   0xf
c001cacb:	6a 00                	push   0x0
c001cacd:	e8 6b ee ff ff       	call   c001b93d <combineColours(unsigned char, unsigned char)>
c001cad2:	5f                   	pop    edi
c001cad3:	5d                   	pop    ebp
c001cad4:	0f b6 c0             	movzx  eax,al
c001cad7:	50                   	push   eax
c001cad8:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001cadd:	99                   	cdq    
c001cade:	f7 fb                	idiv   ebx
c001cae0:	83 c2 30             	add    edx,0x30
c001cae3:	0f b6 d2             	movzx  edx,dl
c001cae6:	52                   	push   edx
c001cae7:	e8 40 ee ff ff       	call   c001b92c <combineCharAndColour(char, unsigned char)>
c001caec:	83 c4 10             	add    esp,0x10
c001caef:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001caf5:	31 c0                	xor    eax,eax
c001caf7:	83 c4 1c             	add    esp,0x1c
c001cafa:	5b                   	pop    ebx
c001cafb:	5e                   	pop    esi
c001cafc:	5f                   	pop    edi
c001cafd:	5d                   	pop    ebp
c001cafe:	c3                   	ret    
c001caff:	90                   	nop

c001cb00 <SATAPI::write(unsigned long long, int, void*)>:
c001cb00:	b8 03 00 00 00       	mov    eax,0x3
c001cb05:	c3                   	ret    

c001cb06 <SATAPI::close(int, int, void*)>:
c001cb06:	83 ec 0c             	sub    esp,0xc
c001cb09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb0d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cb13:	85 c0                	test   eax,eax
c001cb15:	74 0c                	je     c001cb23 <SATAPI::close(int, int, void*)+0x1d>
c001cb17:	83 ec 0c             	sub    esp,0xc
c001cb1a:	8b 10                	mov    edx,DWORD PTR [eax]
c001cb1c:	50                   	push   eax
c001cb1d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cb20:	83 c4 10             	add    esp,0x10
c001cb23:	31 c0                	xor    eax,eax
c001cb25:	83 c4 0c             	add    esp,0xc
c001cb28:	c3                   	ret    
c001cb29:	90                   	nop

c001cb2a <SATAPI::SATAPI()>:
c001cb2a:	83 ec 0c             	sub    esp,0xc
c001cb2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb31:	83 ec 04             	sub    esp,0x4
c001cb34:	68 00 08 00 00       	push   0x800
c001cb39:	68 14 15 02 c0       	push   0xc0021514
c001cb3e:	50                   	push   eax
c001cb3f:	e8 16 f3 fe ff       	call   c000be5a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cb44:	83 c4 10             	add    esp,0x10
c001cb47:	ba 08 16 02 c0       	mov    edx,0xc0021608
c001cb4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb50:	89 10                	mov    DWORD PTR [eax],edx
c001cb52:	90                   	nop
c001cb53:	83 c4 0c             	add    esp,0xc
c001cb56:	c3                   	ret    
c001cb57:	90                   	nop

c001cb58 <SATAPI::diskRemoved()>:
c001cb58:	c3                   	ret    
c001cb59:	90                   	nop

c001cb5a <SATAPI::diskInserted()>:
c001cb5a:	83 ec 18             	sub    esp,0x18
c001cb5d:	68 20 15 02 c0       	push   0xc0021520
c001cb62:	e8 ec da fe ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c001cb67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb6b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001cb72:	83 c4 1c             	add    esp,0x1c
c001cb75:	c3                   	ret    

c001cb76 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001cb76:	55                   	push   ebp
c001cb77:	57                   	push   edi
c001cb78:	56                   	push   esi
c001cb79:	53                   	push   ebx
c001cb7a:	83 ec 34             	sub    esp,0x34
c001cb7d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001cb81:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001cb85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb89:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001cb8d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001cb93:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001cb97:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cb9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cba1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001cba7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cbab:	83 c0 02             	add    eax,0x2
c001cbae:	c1 e0 07             	shl    eax,0x7
c001cbb1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cbb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cbbd:	c1 e0 07             	shl    eax,0x7
c001cbc0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cbc4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cbc8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cbd2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cbd6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001cbdc:	e8 2d e5 ff ff       	call   c001b10e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cbe1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbe5:	83 c4 10             	add    esp,0x10
c001cbe8:	b8 01 00 00 00       	mov    eax,0x1
c001cbed:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001cbf2:	0f 84 49 02 00 00    	je     c001ce41 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001cbf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbfc:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001cc02:	8b 00                	mov    eax,DWORD PTR [eax]
c001cc04:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cc0a:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cc10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc14:	c1 e1 05             	shl    ecx,0x5
c001cc17:	01 c8                	add    eax,ecx
c001cc19:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cc1b:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001cc21:	81 c9 25 00 01 00    	or     ecx,0x10025
c001cc27:	89 08                	mov    DWORD PTR [eax],ecx
c001cc29:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001cc2f:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001cc35:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001cc3b:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001cc3e:	50                   	push   eax
c001cc3f:	68 90 00 00 00       	push   0x90
c001cc44:	6a 00                	push   0x0
c001cc46:	8d 7b 40             	lea    edi,[ebx+0x40]
c001cc49:	53                   	push   ebx
c001cc4a:	e8 71 38 fe ff       	call   c00004c0 <memset>
c001cc4f:	b9 0c 00 00 00       	mov    ecx,0xc
c001cc54:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001cc58:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cc5a:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001cc60:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001cc64:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001cc6a:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001cc6e:	48                   	dec    eax
c001cc6f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001cc73:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cc78:	89 c1                	mov    ecx,eax
c001cc7a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001cc80:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cc85:	09 c8                	or     eax,ecx
c001cc87:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001cc8d:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001cc90:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001cc97:	66 25 00 7f          	and    ax,0x7f00
c001cc9b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cc9f:	66 0d 27 80          	or     ax,0x8027
c001cca3:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001cca7:	66 89 03             	mov    WORD PTR [ebx],ax
c001ccaa:	89 d0                	mov    eax,edx
c001ccac:	c1 e8 10             	shr    eax,0x10
c001ccaf:	c1 ea 18             	shr    edx,0x18
c001ccb2:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001ccb5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001ccb9:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001ccbc:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001ccbf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ccc3:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001ccc6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ccca:	83 c4 10             	add    esp,0x10
c001cccd:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001ccd1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ccd5:	31 c0                	xor    eax,eax
c001ccd7:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001ccdd:	80 e1 88             	and    cl,0x88
c001cce0:	74 0a                	je     c001ccec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x176>
c001cce2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cce7:	74 0a                	je     c001ccf3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17d>
c001cce9:	40                   	inc    eax
c001ccea:	eb eb                	jmp    c001ccd7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x161>
c001ccec:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ccf1:	75 43                	jne    c001cd36 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001ccf3:	83 ec 0c             	sub    esp,0xc
c001ccf6:	68 38 15 02 c0       	push   0xc0021538
c001ccfb:	e8 53 d9 fe ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c001cd00:	58                   	pop    eax
c001cd01:	5a                   	pop    edx
c001cd02:	68 4d 15 02 c0       	push   0xc002154d
c001cd07:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001cd0d:	e8 f4 ba fe ff       	call   c0008806 <VgaText::puts(char const*)>
c001cd12:	59                   	pop    ecx
c001cd13:	5b                   	pop    ebx
c001cd14:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cd18:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001cd1e:	e8 85 e4 ff ff       	call   c001b1a8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001cd23:	5e                   	pop    esi
c001cd24:	5f                   	pop    edi
c001cd25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cd29:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001cd2f:	e8 54 e4 ff ff       	call   c001b188 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cd34:	eb 48                	jmp    c001cd7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x208>
c001cd36:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001cd3a:	be 01 00 00 00       	mov    esi,0x1
c001cd3f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001cd43:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001cd48:	c1 e7 07             	shl    edi,0x7
c001cd4b:	d3 e6                	shl    esi,cl
c001cd4d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001cd51:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001cd57:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001cd5d:	85 c6                	test   esi,eax
c001cd5f:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001cd65:	0f 84 a3 00 00 00    	je     c001ce0e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x298>
c001cd6b:	0f ba e0 1e          	bt     eax,0x1e
c001cd6f:	73 1a                	jae    c001cd8b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001cd71:	83 ec 0c             	sub    esp,0xc
c001cd74:	68 5f 15 02 c0       	push   0xc002155f
c001cd79:	e8 d5 d8 fe ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c001cd7e:	83 c4 10             	add    esp,0x10
c001cd81:	b8 01 00 00 00       	mov    eax,0x1
c001cd86:	e9 b6 00 00 00       	jmp    c001ce41 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001cd8b:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001cd91:	83 f8 0d             	cmp    eax,0xd
c001cd94:	77 0a                	ja     c001cda0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c001cd96:	83 ec 0c             	sub    esp,0xc
c001cd99:	68 c8 00 00 00       	push   0xc8
c001cd9e:	eb 28                	jmp    c001cdc8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001cda0:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001cda6:	83 f8 0d             	cmp    eax,0xd
c001cda9:	77 0a                	ja     c001cdb5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23f>
c001cdab:	83 ec 0c             	sub    esp,0xc
c001cdae:	68 58 02 00 00       	push   0x258
c001cdb3:	eb 13                	jmp    c001cdc8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001cdb5:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001cdbb:	83 f8 06             	cmp    eax,0x6
c001cdbe:	77 10                	ja     c001cdd0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001cdc0:	83 ec 0c             	sub    esp,0xc
c001cdc3:	68 dc 05 00 00       	push   0x5dc
c001cdc8:	e8 8b 80 ff ff       	call   c0014e58 <milliTenthSleep(unsigned int)>
c001cdcd:	83 c4 10             	add    esp,0x10
c001cdd0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cdd4:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001cdd7:	75 06                	jne    c001cddf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x269>
c001cdd9:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001cddd:	74 15                	je     c001cdf4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001cddf:	83 fb 06             	cmp    ebx,0x6
c001cde2:	77 10                	ja     c001cdf4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001cde4:	83 ec 0c             	sub    esp,0xc
c001cde7:	68 c4 09 00 00       	push   0x9c4
c001cdec:	e8 67 80 ff ff       	call   c0014e58 <milliTenthSleep(unsigned int)>
c001cdf1:	83 c4 10             	add    esp,0x10
c001cdf4:	43                   	inc    ebx
c001cdf5:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001cdfb:	0f 85 56 ff ff ff    	jne    c001cd57 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e1>
c001ce01:	83 ec 0c             	sub    esp,0xc
c001ce04:	68 72 15 02 c0       	push   0xc0021572
c001ce09:	e9 6b ff ff ff       	jmp    c001cd79 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001ce0e:	0f ba e0 1e          	bt     eax,0x1e
c001ce12:	73 0d                	jae    c001ce21 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ab>
c001ce14:	83 ec 0c             	sub    esp,0xc
c001ce17:	68 86 15 02 c0       	push   0xc0021586
c001ce1c:	e9 58 ff ff ff       	jmp    c001cd79 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001ce21:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ce26:	74 17                	je     c001ce3f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001ce28:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ce2d:	74 10                	je     c001ce3f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001ce2f:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ce35:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ce39:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ce3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ce3f:	31 c0                	xor    eax,eax
c001ce41:	83 c4 2c             	add    esp,0x2c
c001ce44:	5b                   	pop    ebx
c001ce45:	5e                   	pop    esi
c001ce46:	5f                   	pop    edi
c001ce47:	5d                   	pop    ebp
c001ce48:	c3                   	ret    
c001ce49:	90                   	nop

c001ce4a <SATAPI::eject()>:
c001ce4a:	57                   	push   edi
c001ce4b:	b9 03 00 00 00       	mov    ecx,0x3
c001ce50:	83 ec 18             	sub    esp,0x18
c001ce53:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ce57:	fc                   	cld    
c001ce58:	31 c0                	xor    eax,eax
c001ce5a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ce5c:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ce61:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ce66:	50                   	push   eax
c001ce67:	6a 00                	push   0x0
c001ce69:	6a 00                	push   0x0
c001ce6b:	6a 00                	push   0x0
c001ce6d:	6a 00                	push   0x0
c001ce6f:	6a 02                	push   0x2
c001ce71:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ce75:	50                   	push   eax
c001ce76:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce7a:	e8 f7 fc ff ff       	call   c001cb76 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ce7f:	83 c4 38             	add    esp,0x38
c001ce82:	31 c0                	xor    eax,eax
c001ce84:	5f                   	pop    edi
c001ce85:	c3                   	ret    

c001ce86 <SATAPI::detectMedia()>:
c001ce86:	53                   	push   ebx
c001ce87:	83 ec 14             	sub    esp,0x14
c001ce8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ce8e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ce94:	e8 63 08 ff ff       	call   c000d6fc <VCache::writeWriteBuffer()>
c001ce99:	59                   	pop    ecx
c001ce9a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001cea0:	e8 47 08 ff ff       	call   c000d6ec <VCache::invalidateReadBuffer()>
c001cea5:	c7 04 24 9b 15 02 c0 	mov    DWORD PTR [esp],0xc002159b
c001ceac:	e8 a2 d7 fe ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c001ceb1:	83 c4 10             	add    esp,0x10
c001ceb4:	31 c0                	xor    eax,eax
c001ceb6:	8b 14 85 20 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9be0]
c001cebd:	85 d2                	test   edx,edx
c001cebf:	74 0f                	je     c001ced0 <SATAPI::detectMedia()+0x4a>
c001cec1:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001cec7:	75 07                	jne    c001ced0 <SATAPI::detectMedia()+0x4a>
c001cec9:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001ced0:	40                   	inc    eax
c001ced1:	83 f8 1a             	cmp    eax,0x1a
c001ced4:	75 e0                	jne    c001ceb6 <SATAPI::detectMedia()+0x30>
c001ced6:	83 c4 08             	add    esp,0x8
c001ced9:	5b                   	pop    ebx
c001ceda:	c3                   	ret    
c001cedb:	90                   	nop

c001cedc <SATAPI::open(int, int, void*)>:
c001cedc:	56                   	push   esi
c001cedd:	53                   	push   ebx
c001cede:	51                   	push   ecx
c001cedf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cee3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cee7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ceed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cef1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001cef7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001cf01:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cf0b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001cf15:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001cf1c:	e8 39 ac fe ff       	call   c0007b5a <Phys::allocatePage()>
c001cf21:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001cf27:	89 c6                	mov    esi,eax
c001cf29:	e8 2c ac fe ff       	call   c0007b5a <Phys::allocatePage()>
c001cf2e:	81 c6 00 10 00 00    	add    esi,0x1000
c001cf34:	39 c6                	cmp    esi,eax
c001cf36:	74 10                	je     c001cf48 <SATAPI::open(int, int, void*)+0x6c>
c001cf38:	83 ec 0c             	sub    esp,0xc
c001cf3b:	68 b0 15 02 c0       	push   0xc00215b0
c001cf40:	e8 c2 34 ff ff       	call   c0010407 <KePanic(char const*)>
c001cf45:	83 c4 10             	add    esp,0x10
c001cf48:	83 ec 0c             	sub    esp,0xc
c001cf4b:	6a 02                	push   0x2
c001cf4d:	e8 10 c4 fe ff       	call   c0009362 <Virt::allocateKernelVirtualPages(int)>
c001cf52:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001cf58:	6a 03                	push   0x3
c001cf5a:	50                   	push   eax
c001cf5b:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001cf61:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001cf67:	e8 c6 ca fe ff       	call   c0009a32 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cf6c:	83 c4 14             	add    esp,0x14
c001cf6f:	68 78 01 00 00       	push   0x178
c001cf74:	e8 ea a8 fe ff       	call   c0007863 <malloc>
c001cf79:	83 c4 0c             	add    esp,0xc
c001cf7c:	89 c6                	mov    esi,eax
c001cf7e:	6a 00                	push   0x0
c001cf80:	68 ff ff ff 7f       	push   0x7fffffff
c001cf85:	6a 00                	push   0x0
c001cf87:	6a 00                	push   0x0
c001cf89:	53                   	push   ebx
c001cf8a:	68 c6 15 02 c0       	push   0xc00215c6
c001cf8f:	50                   	push   eax
c001cf90:	e8 cb fb fe ff       	call   c000cb60 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cf95:	83 c4 14             	add    esp,0x14
c001cf98:	56                   	push   esi
c001cf99:	e8 82 fc fe ff       	call   c000cc20 <LogicalDisk::assignDriveLetter()>
c001cf9e:	5a                   	pop    edx
c001cf9f:	59                   	pop    ecx
c001cfa0:	0f be c0             	movsx  eax,al
c001cfa3:	50                   	push   eax
c001cfa4:	68 18 14 02 c0       	push   0xc0021418
c001cfa9:	e8 a5 d6 fe ff       	call   c000a653 <Dbg::kprintf(char const*, ...)>
c001cfae:	58                   	pop    eax
c001cfaf:	5a                   	pop    edx
c001cfb0:	56                   	push   esi
c001cfb1:	53                   	push   ebx
c001cfb2:	e8 d5 ea fe ff       	call   c000ba8c <Device::addChild(Device*)>
c001cfb7:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001cfbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfc0:	e8 fd ee fe ff       	call   c000bec2 <PhysicalDisk::startCache()>
c001cfc5:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001cfcc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfcf:	e8 b2 fe ff ff       	call   c001ce86 <SATAPI::detectMedia()>
c001cfd4:	83 c4 14             	add    esp,0x14
c001cfd7:	31 c0                	xor    eax,eax
c001cfd9:	5b                   	pop    ebx
c001cfda:	5e                   	pop    esi
c001cfdb:	c3                   	ret    

c001cfdc <SATAPI::read(unsigned long long, int, void*)>:
c001cfdc:	57                   	push   edi
c001cfdd:	56                   	push   esi
c001cfde:	53                   	push   ebx
c001cfdf:	83 ec 30             	sub    esp,0x30
c001cfe2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cfe6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001cfea:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001cfee:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cffa:	83 fe 04             	cmp    esi,0x4
c001cffd:	7e 10                	jle    c001d00f <SATAPI::read(unsigned long long, int, void*)+0x33>
c001cfff:	83 ec 0c             	sub    esp,0xc
c001d002:	68 d4 15 02 c0       	push   0xc00215d4
c001d007:	e8 fb 33 ff ff       	call   c0010407 <KePanic(char const*)>
c001d00c:	83 c4 10             	add    esp,0x10
c001d00f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d015:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d01b:	51                   	push   ecx
c001d01c:	50                   	push   eax
c001d01d:	83 c0 02             	add    eax,0x2
c001d020:	c1 e0 07             	shl    eax,0x7
c001d023:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d029:	50                   	push   eax
c001d02a:	52                   	push   edx
c001d02b:	e8 a2 e1 ff ff       	call   c001b1d2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d030:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d034:	b9 03 00 00 00       	mov    ecx,0x3
c001d039:	fc                   	cld    
c001d03a:	31 c0                	xor    eax,eax
c001d03c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d03e:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d043:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d048:	83 c4 0c             	add    esp,0xc
c001d04b:	6a 00                	push   0x0
c001d04d:	6a 00                	push   0x0
c001d04f:	6a 00                	push   0x0
c001d051:	6a 00                	push   0x0
c001d053:	6a 02                	push   0x2
c001d055:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d059:	50                   	push   eax
c001d05a:	53                   	push   ebx
c001d05b:	e8 16 fb ff ff       	call   c001cb76 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d060:	83 c4 20             	add    esp,0x20
c001d063:	85 c0                	test   eax,eax
c001d065:	75 44                	jne    c001d0ab <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001d067:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d06b:	b9 03 00 00 00       	mov    ecx,0x3
c001d070:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d072:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d076:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d07b:	0f c8                	bswap  eax
c001d07d:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d081:	89 f0                	mov    eax,esi
c001d083:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d087:	50                   	push   eax
c001d088:	56                   	push   esi
c001d089:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d08d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d091:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d095:	c1 e6 0b             	shl    esi,0xb
c001d098:	56                   	push   esi
c001d099:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d09d:	50                   	push   eax
c001d09e:	53                   	push   ebx
c001d09f:	e8 d2 fa ff ff       	call   c001cb76 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d0a4:	83 c4 20             	add    esp,0x20
c001d0a7:	85 c0                	test   eax,eax
c001d0a9:	74 14                	je     c001d0bf <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001d0ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d0af:	83 ec 0c             	sub    esp,0xc
c001d0b2:	53                   	push   ebx
c001d0b3:	e8 ce fd ff ff       	call   c001ce86 <SATAPI::detectMedia()>
c001d0b8:	83 c4 10             	add    esp,0x10
c001d0bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0bf:	83 c4 30             	add    esp,0x30
c001d0c2:	5b                   	pop    ebx
c001d0c3:	5e                   	pop    esi
c001d0c4:	5f                   	pop    edi
c001d0c5:	c3                   	ret    

c001d0c6 <IOAPIC::close(int, int, void*)>:
c001d0c6:	b8 00 00 00 00       	mov    eax,0x0
c001d0cb:	c3                   	ret    

c001d0cc <apicGetBase()>:
c001d0cc:	55                   	push   ebp
c001d0cd:	89 e5                	mov    ebp,esp
c001d0cf:	83 ec 18             	sub    esp,0x18
c001d0d2:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001d0d7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d0dd:	83 e0 08             	and    eax,0x8
c001d0e0:	84 c0                	test   al,al
c001d0e2:	75 07                	jne    c001d0eb <apicGetBase()+0x1f>
c001d0e4:	b8 00 00 00 00       	mov    eax,0x0
c001d0e9:	eb 21                	jmp    c001d10c <apicGetBase()+0x40>
c001d0eb:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001d0f0:	83 ec 08             	sub    esp,0x8
c001d0f3:	6a 1b                	push   0x1b
c001d0f5:	50                   	push   eax
c001d0f6:	e8 b1 9d fe ff       	call   c0006eac <Computer::rdmsr(unsigned int)>
c001d0fb:	83 c4 10             	add    esp,0x10
c001d0fe:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d101:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d104:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d107:	25 00 00 ff ff       	and    eax,0xffff0000
c001d10c:	c9                   	leave  
c001d10d:	c3                   	ret    

c001d10e <IOAPIC::IOAPIC()>:
c001d10e:	83 ec 0c             	sub    esp,0xc
c001d111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d115:	83 ec 08             	sub    esp,0x8
c001d118:	68 38 16 02 c0       	push   0xc0021638
c001d11d:	50                   	push   eax
c001d11e:	e8 01 eb fe ff       	call   c000bc24 <Device::Device(char const*)>
c001d123:	83 c4 10             	add    esp,0x10
c001d126:	ba 48 16 02 c0       	mov    edx,0xc0021648
c001d12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d12f:	89 10                	mov    DWORD PTR [eax],edx
c001d131:	90                   	nop
c001d132:	83 c4 0c             	add    esp,0xc
c001d135:	c3                   	ret    

c001d136 <apicOpen()>:
c001d136:	55                   	push   ebp
c001d137:	89 e5                	mov    ebp,esp
c001d139:	53                   	push   ebx
c001d13a:	83 ec 34             	sub    esp,0x34
c001d13d:	a0 a0 7b 02 c0       	mov    al,ds:0xc0027ba0
c001d142:	83 f0 01             	xor    eax,0x1
c001d145:	84 c0                	test   al,al
c001d147:	0f 84 9d 00 00 00    	je     c001d1ea <apicOpen()+0xb4>
c001d14d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d151:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c001d156:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001d159:	0f 83 84 00 00 00    	jae    c001d1e3 <apicOpen()+0xad>
c001d15f:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d166:	83 ec 0c             	sub    esp,0xc
c001d169:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d16c:	e8 f2 a6 fe ff       	call   c0007863 <malloc>
c001d171:	83 c4 10             	add    esp,0x10
c001d174:	89 c3                	mov    ebx,eax
c001d176:	83 ec 0c             	sub    esp,0xc
c001d179:	53                   	push   ebx
c001d17a:	e8 8f ff ff ff       	call   c001d10e <IOAPIC::IOAPIC()>
c001d17f:	83 c4 10             	add    esp,0x10
c001d182:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d185:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d188:	25 ff 00 00 00       	and    eax,0xff
c001d18d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d190:	89 14 85 80 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8480],edx
c001d197:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c001d19c:	40                   	inc    eax
c001d19d:	a3 60 7b 02 c0       	mov    ds:0xc0027b60,eax
c001d1a2:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001d1a7:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d1ad:	83 ec 08             	sub    esp,0x8
c001d1b0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d1b3:	50                   	push   eax
c001d1b4:	e8 d3 e8 fe ff       	call   c000ba8c <Device::addChild(Device*)>
c001d1b9:	83 c4 10             	add    esp,0x10
c001d1bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d1bf:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1c1:	83 c0 08             	add    eax,0x8
c001d1c4:	8b 10                	mov    edx,DWORD PTR [eax]
c001d1c6:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d1c9:	25 ff 00 00 00       	and    eax,0xff
c001d1ce:	6a 00                	push   0x0
c001d1d0:	6a 00                	push   0x0
c001d1d2:	50                   	push   eax
c001d1d3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d1d6:	ff d2                	call   edx
c001d1d8:	83 c4 10             	add    esp,0x10
c001d1db:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001d1de:	e9 6e ff ff ff       	jmp    c001d151 <apicOpen()+0x1b>
c001d1e3:	c6 05 a0 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027ba0,0x1
c001d1ea:	e8 dd fe ff ff       	call   c001d0cc <apicGetBase()>
c001d1ef:	05 f0 00 00 00       	add    eax,0xf0
c001d1f4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d1f7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d1fa:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1fc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d1ff:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d206:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d20d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d210:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d213:	89 10                	mov    DWORD PTR [eax],edx
c001d215:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d21c:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c001d221:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d224:	7d 70                	jge    c001d296 <apicOpen()+0x160>
c001d226:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d229:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d230:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d233:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d236:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d23d:	c1 e8 08             	shr    eax,0x8
c001d240:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d244:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d247:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001d24e:	c1 e8 18             	shr    eax,0x18
c001d251:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d254:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001d258:	75 37                	jne    c001d291 <apicOpen()+0x15b>
c001d25a:	e8 6d fe ff ff       	call   c001d0cc <apicGetBase()>
c001d25f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001d263:	75 07                	jne    c001d26c <apicOpen()+0x136>
c001d265:	ba 60 03 00 00       	mov    edx,0x360
c001d26a:	eb 05                	jmp    c001d271 <apicOpen()+0x13b>
c001d26c:	ba 50 03 00 00       	mov    edx,0x350
c001d271:	01 d0                	add    eax,edx
c001d273:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d276:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d279:	8b 00                	mov    eax,DWORD PTR [eax]
c001d27b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d27e:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d285:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d289:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d28c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d28f:	89 10                	mov    DWORD PTR [eax],edx
c001d291:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d294:	eb 86                	jmp    c001d21c <apicOpen()+0xe6>
c001d296:	90                   	nop
c001d297:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d29a:	c9                   	leave  
c001d29b:	c3                   	ret    

c001d29c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d29c:	55                   	push   ebp
c001d29d:	89 e5                	mov    ebp,esp
c001d29f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2a8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d2ab:	72 1d                	jb     c001d2ca <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d2ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2b0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d2b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2b9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d2bf:	01 d0                	add    eax,edx
c001d2c1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d2c4:	73 04                	jae    c001d2ca <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d2c6:	b0 01                	mov    al,0x1
c001d2c8:	eb 02                	jmp    c001d2cc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d2ca:	b0 00                	mov    al,0x0
c001d2cc:	5d                   	pop    ebp
c001d2cd:	c3                   	ret    

c001d2ce <IOAPIC::read(int)>:
c001d2ce:	55                   	push   ebp
c001d2cf:	89 e5                	mov    ebp,esp
c001d2d1:	83 ec 10             	sub    esp,0x10
c001d2d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2d7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d2dd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d2e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d2e3:	31 d2                	xor    edx,edx
c001d2e5:	88 c2                	mov    dl,al
c001d2e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d2ea:	89 10                	mov    DWORD PTR [eax],edx
c001d2ec:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d2ef:	83 c0 10             	add    eax,0x10
c001d2f2:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2f4:	c9                   	leave  
c001d2f5:	c3                   	ret    

c001d2f6 <IOAPIC::open(int, int, void*)>:
c001d2f6:	55                   	push   ebp
c001d2f7:	89 e5                	mov    ebp,esp
c001d2f9:	57                   	push   edi
c001d2fa:	56                   	push   esi
c001d2fb:	53                   	push   ebx
c001d2fc:	83 ec 04             	sub    esp,0x4
c001d2ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d305:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d30b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d30e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d314:	8b 14 85 c0 67 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9840]
c001d31b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d31e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d327:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d32d:	8b 14 85 40 68 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd97c0]
c001d334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d337:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d33d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d340:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d349:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d34f:	89 c6                	mov    esi,eax
c001d351:	81 e6 ff 00 00 00    	and    esi,0xff
c001d357:	89 d0                	mov    eax,edx
c001d359:	ba 00 00 00 00       	mov    edx,0x0
c001d35e:	89 c7                	mov    edi,eax
c001d360:	83 e7 ff             	and    edi,0xffffffff
c001d363:	89 f9                	mov    ecx,edi
c001d365:	89 d0                	mov    eax,edx
c001d367:	25 ff 00 00 00       	and    eax,0xff
c001d36c:	89 c3                	mov    ebx,eax
c001d36e:	89 c8                	mov    eax,ecx
c001d370:	89 da                	mov    edx,ebx
c001d372:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d375:	8d 5e 08             	lea    ebx,[esi+0x8]
c001d378:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d37c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d380:	83 e0 00             	and    eax,0x0
c001d383:	09 d0                	or     eax,edx
c001d385:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d38c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d392:	8d 50 01             	lea    edx,[eax+0x1]
c001d395:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d398:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d39e:	31 d2                	xor    edx,edx
c001d3a0:	88 c2                	mov    dl,al
c001d3a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3a5:	83 c2 08             	add    edx,0x8
c001d3a8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d3ac:	81 e1 ff 00 00 00    	and    ecx,0xff
c001d3b2:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d3b8:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d3bc:	6a 01                	push   0x1
c001d3be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d3c1:	e8 08 ff ff ff       	call   c001d2ce <IOAPIC::read(int)>
c001d3c6:	83 c4 08             	add    esp,0x8
c001d3c9:	c1 f8 10             	sar    eax,0x10
c001d3cc:	25 ff 00 00 00       	and    eax,0xff
c001d3d1:	8d 50 01             	lea    edx,[eax+0x1]
c001d3d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3d7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d3dd:	b8 00 00 00 00       	mov    eax,0x0
c001d3e2:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d3e5:	5b                   	pop    ebx
c001d3e6:	5e                   	pop    esi
c001d3e7:	5f                   	pop    edi
c001d3e8:	5d                   	pop    ebp
c001d3e9:	c3                   	ret    

c001d3ea <IOAPIC::write(int, int)>:
c001d3ea:	55                   	push   ebp
c001d3eb:	89 e5                	mov    ebp,esp
c001d3ed:	83 ec 10             	sub    esp,0x10
c001d3f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d3f3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d3f9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d3fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d3ff:	31 d2                	xor    edx,edx
c001d401:	88 c2                	mov    dl,al
c001d403:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d406:	89 10                	mov    DWORD PTR [eax],edx
c001d408:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d40b:	8d 50 10             	lea    edx,[eax+0x10]
c001d40e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d411:	89 02                	mov    DWORD PTR [edx],eax
c001d413:	90                   	nop
c001d414:	c9                   	leave  
c001d415:	c3                   	ret    

c001d416 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001d416:	55                   	push   ebp
c001d417:	89 e5                	mov    ebp,esp
c001d419:	53                   	push   ebx
c001d41a:	83 ec 2c             	sub    esp,0x2c
c001d41d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d420:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001d423:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001d426:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001d429:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d42c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d42f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d432:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d435:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001d438:	88 d8                	mov    al,bl
c001d43a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001d43d:	88 c8                	mov    al,cl
c001d43f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001d442:	88 d0                	mov    al,dl
c001d444:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001d447:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001d44a:	25 ff 00 00 00       	and    eax,0xff
c001d44f:	83 c0 08             	add    eax,0x8
c001d452:	01 c0                	add    eax,eax
c001d454:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d457:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001d45a:	25 ff 00 00 00       	and    eax,0xff
c001d45f:	83 c0 08             	add    eax,0x8
c001d462:	01 c0                	add    eax,eax
c001d464:	40                   	inc    eax
c001d465:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001d468:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d46b:	50                   	push   eax
c001d46c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d46f:	e8 5a fe ff ff       	call   c001d2ce <IOAPIC::read(int)>
c001d474:	83 c4 08             	add    esp,0x8
c001d477:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d47a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001d481:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d484:	c1 e0 18             	shl    eax,0x18
c001d487:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001d48a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001d48d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d490:	52                   	push   edx
c001d491:	50                   	push   eax
c001d492:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d495:	e8 50 ff ff ff       	call   c001d3ea <IOAPIC::write(int, int)>
c001d49a:	83 c4 0c             	add    esp,0xc
c001d49d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d4a0:	50                   	push   eax
c001d4a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d4a4:	e8 25 fe ff ff       	call   c001d2ce <IOAPIC::read(int)>
c001d4a9:	83 c4 08             	add    esp,0x8
c001d4ac:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d4af:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001d4b6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001d4bd:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001d4c4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001d4c8:	74 09                	je     c001d4d3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001d4ca:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001d4d1:	eb 07                	jmp    c001d4da <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001d4d3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001d4da:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001d4de:	74 09                	je     c001d4e9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001d4e0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001d4e7:	eb 07                	jmp    c001d4f0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001d4e9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001d4f0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001d4f7:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001d4fa:	25 ff 00 00 00       	and    eax,0xff
c001d4ff:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d502:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d505:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d508:	52                   	push   edx
c001d509:	50                   	push   eax
c001d50a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d50d:	e8 d8 fe ff ff       	call   c001d3ea <IOAPIC::write(int, int)>
c001d512:	83 c4 0c             	add    esp,0xc
c001d515:	90                   	nop
c001d516:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d519:	c9                   	leave  
c001d51a:	c3                   	ret    
c001d51b:	90                   	nop

c001d51c <APICTimer::close(int, int, void*)>:
c001d51c:	b8 00 00 00 00       	mov    eax,0x0
c001d521:	c3                   	ret    
c001d522:	66 90                	xchg   ax,ax

c001d524 <apicTimerHandler(regs*, void*)>:
c001d524:	83 ec 0c             	sub    esp,0xc
c001d527:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d52b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d52d:	b8 10 27 00 00       	mov    eax,0x2710
c001d532:	ba 00 00 00 00       	mov    edx,0x0
c001d537:	f7 f1                	div    ecx
c001d539:	83 ec 0c             	sub    esp,0xc
c001d53c:	50                   	push   eax
c001d53d:	e8 d2 fe fe ff       	call   c000d414 <timerHandler(unsigned int)>
c001d542:	83 c4 10             	add    esp,0x10
c001d545:	90                   	nop
c001d546:	83 c4 0c             	add    esp,0xc
c001d549:	c3                   	ret    
c001d54a:	66 90                	xchg   ax,ax

c001d54c <APICTimer::open(int, int, void*)>:
c001d54c:	83 ec 0c             	sub    esp,0xc
c001d54f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d553:	8b 00                	mov    eax,DWORD PTR [eax]
c001d555:	83 c0 24             	add    eax,0x24
c001d558:	8b 00                	mov    eax,DWORD PTR [eax]
c001d55a:	83 ec 08             	sub    esp,0x8
c001d55d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d561:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d565:	ff d0                	call   eax
c001d567:	83 c4 10             	add    esp,0x10
c001d56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d56e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d572:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d57c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d580:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001d586:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d58a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d590:	83 ec 0c             	sub    esp,0xc
c001d593:	51                   	push   ecx
c001d594:	6a 01                	push   0x1
c001d596:	68 24 d5 01 c0       	push   0xc001d524
c001d59b:	52                   	push   edx
c001d59c:	50                   	push   eax
c001d59d:	e8 96 e4 fe ff       	call   c000ba38 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d5a2:	83 c4 20             	add    esp,0x20
c001d5a5:	89 c2                	mov    edx,eax
c001d5a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ab:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d5b1:	b8 00 00 00 00       	mov    eax,0x0
c001d5b6:	83 c4 0c             	add    esp,0xc
c001d5b9:	c3                   	ret    
c001d5ba:	66 90                	xchg   ax,ax

c001d5bc <APICTimer::write(int)>:
c001d5bc:	83 ec 0c             	sub    esp,0xc
c001d5bf:	83 ec 0c             	sub    esp,0xc
c001d5c2:	68 6c 16 02 c0       	push   0xc002166c
c001d5c7:	e8 3b 2e ff ff       	call   c0010407 <KePanic(char const*)>
c001d5cc:	83 c4 10             	add    esp,0x10
c001d5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d5d7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d5dd:	90                   	nop
c001d5de:	83 c4 0c             	add    esp,0xc
c001d5e1:	c3                   	ret    
c001d5e2:	66 90                	xchg   ax,ax

c001d5e4 <APICTimer::APICTimer()>:
c001d5e4:	83 ec 0c             	sub    esp,0xc
c001d5e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5eb:	83 ec 08             	sub    esp,0x8
c001d5ee:	68 7c 16 02 c0       	push   0xc002167c
c001d5f3:	50                   	push   eax
c001d5f4:	e8 4f fd fe ff       	call   c000d348 <Timer::Timer(char const*)>
c001d5f9:	83 c4 10             	add    esp,0x10
c001d5fc:	ba 90 16 02 c0       	mov    edx,0xc0021690
c001d601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d605:	89 10                	mov    DWORD PTR [eax],edx
c001d607:	90                   	nop
c001d608:	83 c4 0c             	add    esp,0xc
c001d60b:	c3                   	ret    

c001d60c <PIT::write(int)>:
c001d60c:	83 ec 10             	sub    esp,0x10
c001d60f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d613:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d617:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d61d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d621:	a3 a4 7b 02 c0       	mov    ds:0xc0027ba4,eax
c001d626:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001d62b:	89 c2                	mov    edx,eax
c001d62d:	c1 fa 1f             	sar    edx,0x1f
c001d630:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001d634:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d638:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001d63f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001d644:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001d648:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001d64d:	ee                   	out    dx,al
c001d64e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d652:	25 ff 00 00 00       	and    eax,0xff
c001d657:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001d65e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d662:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001d666:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001d66b:	ee                   	out    dx,al
c001d66c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d670:	c1 f8 08             	sar    eax,0x8
c001d673:	25 ff 00 00 00       	and    eax,0xff
c001d678:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001d67f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001d683:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001d687:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001d68c:	ee                   	out    dx,al
c001d68d:	90                   	nop
c001d68e:	83 c4 10             	add    esp,0x10
c001d691:	c3                   	ret    
c001d692:	66 90                	xchg   ax,ax

c001d694 <pitHandler(regs*, void*)>:
c001d694:	83 ec 0c             	sub    esp,0xc
c001d697:	8b 0d a4 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ba4
c001d69d:	b8 10 27 00 00       	mov    eax,0x2710
c001d6a2:	89 c2                	mov    edx,eax
c001d6a4:	c1 fa 1f             	sar    edx,0x1f
c001d6a7:	f7 f9                	idiv   ecx
c001d6a9:	83 ec 0c             	sub    esp,0xc
c001d6ac:	50                   	push   eax
c001d6ad:	e8 62 fd fe ff       	call   c000d414 <timerHandler(unsigned int)>
c001d6b2:	83 c4 10             	add    esp,0x10
c001d6b5:	90                   	nop
c001d6b6:	83 c4 0c             	add    esp,0xc
c001d6b9:	c3                   	ret    
c001d6ba:	66 90                	xchg   ax,ax

c001d6bc <PIT::open(int, int, void*)>:
c001d6bc:	83 ec 0c             	sub    esp,0xc
c001d6bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6c3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6c5:	83 c0 24             	add    eax,0x24
c001d6c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6ca:	83 ec 08             	sub    esp,0x8
c001d6cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6d5:	ff d0                	call   eax
c001d6d7:	83 c4 10             	add    esp,0x10
c001d6da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6de:	83 ec 0c             	sub    esp,0xc
c001d6e1:	6a 00                	push   0x0
c001d6e3:	6a 01                	push   0x1
c001d6e5:	68 94 d6 01 c0       	push   0xc001d694
c001d6ea:	6a 00                	push   0x0
c001d6ec:	50                   	push   eax
c001d6ed:	e8 46 e3 fe ff       	call   c000ba38 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d6f2:	83 c4 20             	add    esp,0x20
c001d6f5:	89 c2                	mov    edx,eax
c001d6f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6fb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d701:	b8 00 00 00 00       	mov    eax,0x0
c001d706:	83 c4 0c             	add    esp,0xc
c001d709:	c3                   	ret    
c001d70a:	66 90                	xchg   ax,ax

c001d70c <PIT::close(int, int, void*)>:
c001d70c:	83 ec 0c             	sub    esp,0xc
c001d70f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d713:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001d71d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d721:	6a 01                	push   0x1
c001d723:	68 94 d6 01 c0       	push   0xc001d694
c001d728:	6a 00                	push   0x0
c001d72a:	50                   	push   eax
c001d72b:	e8 3e e3 fe ff       	call   c000ba6e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001d730:	83 c4 10             	add    esp,0x10
c001d733:	b8 00 00 00 00       	mov    eax,0x0
c001d738:	83 c4 0c             	add    esp,0xc
c001d73b:	c3                   	ret    

c001d73c <PIT::PIT()>:
c001d73c:	83 ec 0c             	sub    esp,0xc
c001d73f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d743:	83 ec 08             	sub    esp,0x8
c001d746:	68 b8 16 02 c0       	push   0xc00216b8
c001d74b:	50                   	push   eax
c001d74c:	e8 f7 fb fe ff       	call   c000d348 <Timer::Timer(char const*)>
c001d751:	83 c4 10             	add    esp,0x10
c001d754:	ba e0 16 02 c0       	mov    edx,0xc00216e0
c001d759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d75d:	89 10                	mov    DWORD PTR [eax],edx
c001d75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d763:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d769:	31 d2                	xor    edx,edx
c001d76b:	88 c2                	mov    dl,al
c001d76d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d771:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001d778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d77c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d782:	31 d2                	xor    edx,edx
c001d784:	88 c2                	mov    dl,al
c001d786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d78a:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001d78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d793:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d799:	8d 50 01             	lea    edx,[eax+0x1]
c001d79c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d7a0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d7a6:	31 d2                	xor    edx,edx
c001d7a8:	88 c2                	mov    dl,al
c001d7aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ae:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d7b2:	83 e1 3f             	and    ecx,0x3f
c001d7b5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d7b9:	90                   	nop
c001d7ba:	83 c4 0c             	add    esp,0xc
c001d7bd:	c3                   	ret    
c001d7be:	66 90                	xchg   ax,ax

c001d7c0 <avxDetect>:
c001d7c0:	b8 01 00 00 00       	mov    eax,0x1
c001d7c5:	0f a2                	cpuid  
c001d7c7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001d7cd:	74 15                	je     c001d7e4 <avxDetect.noAVX>
c001d7cf:	b8 01 00 00 00       	mov    eax,0x1
c001d7d4:	0f a2                	cpuid  
c001d7d6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001d7dc:	74 06                	je     c001d7e4 <avxDetect.noAVX>
c001d7de:	b8 01 00 00 00       	mov    eax,0x1
c001d7e3:	c3                   	ret    

c001d7e4 <avxDetect.noAVX>:
c001d7e4:	b8 00 00 00 00       	mov    eax,0x0
c001d7e9:	c3                   	ret    

c001d7ea <avxSave>:
c001d7ea:	53                   	push   ebx
c001d7eb:	52                   	push   edx
c001d7ec:	31 c0                	xor    eax,eax
c001d7ee:	48                   	dec    eax
c001d7ef:	89 c2                	mov    edx,eax
c001d7f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d7f5:	0f ae 23             	xsave  [ebx]
c001d7f8:	5a                   	pop    edx
c001d7f9:	5b                   	pop    ebx
c001d7fa:	c3                   	ret    

c001d7fb <avxLoad>:
c001d7fb:	53                   	push   ebx
c001d7fc:	52                   	push   edx
c001d7fd:	31 c0                	xor    eax,eax
c001d7ff:	48                   	dec    eax
c001d800:	89 c2                	mov    edx,eax
c001d802:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d806:	0f ae 2b             	xrstor [ebx]
c001d809:	5a                   	pop    edx
c001d80a:	5b                   	pop    ebx
c001d80b:	c3                   	ret    

c001d80c <avxInit>:
c001d80c:	e8 67 03 00 00       	call   c001db78 <sseInit>
c001d811:	50                   	push   eax
c001d812:	51                   	push   ecx
c001d813:	0f 20 e0             	mov    eax,cr4
c001d816:	0d 00 00 04 00       	or     eax,0x40000
c001d81b:	0f 22 e0             	mov    cr4,eax
c001d81e:	31 c9                	xor    ecx,ecx
c001d820:	0f 01 d0             	xgetbv 
c001d823:	0d 07 00 00 00       	or     eax,0x7
c001d828:	0f 01 d1             	xsetbv 
c001d82b:	59                   	pop    ecx
c001d82c:	58                   	pop    eax
c001d82d:	c3                   	ret    

c001d82e <avxClose>:
c001d82e:	c3                   	ret    

c001d82f <wouldSheSayYes>:
c001d82f:	c3                   	ret    
c001d830:	49                   	dec    ecx
c001d831:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001d835:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001d839:	75 20                	jne    c001d85b <isr0+0xb>
c001d83b:	4e                   	dec    esi
c001d83c:	79 61                	jns    c001d89f <isr7+0x3>
c001d83e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001d843:	66 90                	xchg   ax,ax
c001d845:	66 90                	xchg   ax,ax
c001d847:	66 90                	xchg   ax,ax
c001d849:	66 90                	xchg   ax,ax
c001d84b:	66 90                	xchg   ax,ax
c001d84d:	66 90                	xchg   ax,ax
c001d84f:	90                   	nop

c001d850 <isr0>:
c001d850:	fa                   	cli    
c001d851:	68 00 00 00 00       	push   0x0
c001d856:	68 00 00 00 00       	push   0x0
c001d85b:	e9 56 01 00 00       	jmp    c001d9b6 <int_common_stub>

c001d860 <isr1>:
c001d860:	fa                   	cli    
c001d861:	6a 00                	push   0x0
c001d863:	6a 01                	push   0x1
c001d865:	e9 4c 01 00 00       	jmp    c001d9b6 <int_common_stub>

c001d86a <isr2>:
c001d86a:	fa                   	cli    
c001d86b:	6a 00                	push   0x0
c001d86d:	6a 02                	push   0x2
c001d86f:	e9 42 01 00 00       	jmp    c001d9b6 <int_common_stub>

c001d874 <isr3>:
c001d874:	fa                   	cli    
c001d875:	6a 00                	push   0x0
c001d877:	6a 03                	push   0x3
c001d879:	e9 38 01 00 00       	jmp    c001d9b6 <int_common_stub>

c001d87e <isr4>:
c001d87e:	fa                   	cli    
c001d87f:	6a 00                	push   0x0
c001d881:	6a 04                	push   0x4
c001d883:	e9 2e 01 00 00       	jmp    c001d9b6 <int_common_stub>

c001d888 <isr5>:
c001d888:	fa                   	cli    
c001d889:	6a 00                	push   0x0
c001d88b:	6a 05                	push   0x5
c001d88d:	e9 24 01 00 00       	jmp    c001d9b6 <int_common_stub>

c001d892 <isr6>:
c001d892:	fa                   	cli    
c001d893:	6a 00                	push   0x0
c001d895:	6a 06                	push   0x6
c001d897:	e9 1a 01 00 00       	jmp    c001d9b6 <int_common_stub>

c001d89c <isr7>:
c001d89c:	fa                   	cli    
c001d89d:	6a 00                	push   0x0
c001d89f:	6a 07                	push   0x7
c001d8a1:	e9 10 01 00 00       	jmp    c001d9b6 <int_common_stub>

c001d8a6 <isr8>:
c001d8a6:	fa                   	cli    
c001d8a7:	6a 08                	push   0x8
c001d8a9:	e9 08 01 00 00       	jmp    c001d9b6 <int_common_stub>

c001d8ae <isr9>:
c001d8ae:	fa                   	cli    
c001d8af:	6a 00                	push   0x0
c001d8b1:	6a 09                	push   0x9
c001d8b3:	e9 fe 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d8b8 <isr10>:
c001d8b8:	fa                   	cli    
c001d8b9:	6a 0a                	push   0xa
c001d8bb:	e9 f6 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d8c0 <isr11>:
c001d8c0:	fa                   	cli    
c001d8c1:	6a 0b                	push   0xb
c001d8c3:	e9 ee 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d8c8 <isr12>:
c001d8c8:	fa                   	cli    
c001d8c9:	6a 0c                	push   0xc
c001d8cb:	e9 e6 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d8d0 <isr13>:
c001d8d0:	fa                   	cli    
c001d8d1:	6a 0d                	push   0xd
c001d8d3:	53                   	push   ebx
c001d8d4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d8d8:	81 fb a6 da 01 c0    	cmp    ebx,0xc001daa6
c001d8de:	5b                   	pop    ebx
c001d8df:	0f 84 c3 01 00 00    	je     c001daa8 <finishSignal2>
c001d8e5:	e9 cc 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d8ea <isr14>:
c001d8ea:	fa                   	cli    
c001d8eb:	6a 0e                	push   0xe
c001d8ed:	e9 c4 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d8f2 <isr15>:
c001d8f2:	fa                   	cli    
c001d8f3:	6a 00                	push   0x0
c001d8f5:	6a 0f                	push   0xf
c001d8f7:	e9 ba 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d8fc <isr16>:
c001d8fc:	fa                   	cli    
c001d8fd:	6a 00                	push   0x0
c001d8ff:	6a 10                	push   0x10
c001d901:	e9 b0 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d906 <isr17>:
c001d906:	fa                   	cli    
c001d907:	6a 00                	push   0x0
c001d909:	6a 11                	push   0x11
c001d90b:	e9 a6 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d910 <isr18>:
c001d910:	fa                   	cli    
c001d911:	6a 00                	push   0x0
c001d913:	6a 12                	push   0x12
c001d915:	e9 9c 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d91a <irq3>:
c001d91a:	fa                   	cli    
c001d91b:	6a 00                	push   0x0
c001d91d:	6a 23                	push   0x23
c001d91f:	e9 92 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d924 <irq4>:
c001d924:	fa                   	cli    
c001d925:	6a 00                	push   0x0
c001d927:	6a 24                	push   0x24
c001d929:	e9 88 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d92e <irq5>:
c001d92e:	fa                   	cli    
c001d92f:	6a 00                	push   0x0
c001d931:	6a 25                	push   0x25
c001d933:	e9 7e 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d938 <irq6>:
c001d938:	fa                   	cli    
c001d939:	6a 00                	push   0x0
c001d93b:	6a 26                	push   0x26
c001d93d:	e9 74 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d942 <irq7>:
c001d942:	fa                   	cli    
c001d943:	6a 00                	push   0x0
c001d945:	6a 27                	push   0x27
c001d947:	e9 6a 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d94c <irq8>:
c001d94c:	fa                   	cli    
c001d94d:	6a 00                	push   0x0
c001d94f:	6a 28                	push   0x28
c001d951:	e9 60 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d956 <irq9>:
c001d956:	fa                   	cli    
c001d957:	6a 00                	push   0x0
c001d959:	6a 29                	push   0x29
c001d95b:	e9 56 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d960 <irq10>:
c001d960:	fa                   	cli    
c001d961:	6a 00                	push   0x0
c001d963:	6a 2a                	push   0x2a
c001d965:	e9 4c 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d96a <irq11>:
c001d96a:	fa                   	cli    
c001d96b:	6a 00                	push   0x0
c001d96d:	6a 2b                	push   0x2b
c001d96f:	e9 42 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d974 <irq12>:
c001d974:	fa                   	cli    
c001d975:	6a 00                	push   0x0
c001d977:	6a 2c                	push   0x2c
c001d979:	e9 38 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d97e <irq13>:
c001d97e:	fa                   	cli    
c001d97f:	6a 00                	push   0x0
c001d981:	6a 2d                	push   0x2d
c001d983:	e9 2e 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d988 <irq14>:
c001d988:	fa                   	cli    
c001d989:	6a 00                	push   0x0
c001d98b:	6a 2e                	push   0x2e
c001d98d:	e9 24 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d992 <irq15>:
c001d992:	fa                   	cli    
c001d993:	6a 00                	push   0x0
c001d995:	6a 2f                	push   0x2f
c001d997:	e9 1a 00 00 00       	jmp    c001d9b6 <int_common_stub>

c001d99c <irq1>:
c001d99c:	fa                   	cli    
c001d99d:	6a 00                	push   0x0
c001d99f:	6a 21                	push   0x21
c001d9a1:	eb 13                	jmp    c001d9b6 <int_common_stub>

c001d9a3 <irq2>:
c001d9a3:	fa                   	cli    
c001d9a4:	6a 00                	push   0x0
c001d9a6:	6a 22                	push   0x22
c001d9a8:	eb 0c                	jmp    c001d9b6 <int_common_stub>

c001d9aa <isr96>:
c001d9aa:	6a 00                	push   0x0
c001d9ac:	6a 60                	push   0x60
c001d9ae:	fb                   	sti    
c001d9af:	eb 37                	jmp    c001d9e8 <syscall_common_stub>

c001d9b1 <irq0>:
c001d9b1:	fa                   	cli    
c001d9b2:	6a 00                	push   0x0
c001d9b4:	6a 20                	push   0x20

c001d9b6 <int_common_stub>:
c001d9b6:	60                   	pusha  
c001d9b7:	1e                   	push   ds
c001d9b8:	06                   	push   es
c001d9b9:	0f a0                	push   fs
c001d9bb:	0f a8                	push   gs
c001d9bd:	66 b8 10 00          	mov    ax,0x10
c001d9c1:	66 8e d8             	mov    ds,ax
c001d9c4:	66 8e c0             	mov    es,ax
c001d9c7:	66 8e e0             	mov    fs,ax
c001d9ca:	66 8e e8             	mov    gs,ax
c001d9cd:	54                   	push   esp
c001d9ce:	fc                   	cld    
c001d9cf:	e8 64 e5 fe ff       	call   c000bf38 <int_handler>
c001d9d4:	81 c4 04 00 00 00    	add    esp,0x4
c001d9da:	0f a9                	pop    gs
c001d9dc:	0f a1                	pop    fs
c001d9de:	07                   	pop    es
c001d9df:	1f                   	pop    ds
c001d9e0:	61                   	popa   
c001d9e1:	81 c4 08 00 00 00    	add    esp,0x8
c001d9e7:	cf                   	iret   

c001d9e8 <syscall_common_stub>:
c001d9e8:	60                   	pusha  
c001d9e9:	1e                   	push   ds
c001d9ea:	06                   	push   es
c001d9eb:	0f a0                	push   fs
c001d9ed:	0f a8                	push   gs
c001d9ef:	66 b8 10 00          	mov    ax,0x10
c001d9f3:	66 8e d8             	mov    ds,ax
c001d9f6:	66 8e c0             	mov    es,ax
c001d9f9:	66 8e e0             	mov    fs,ax
c001d9fc:	66 8e e8             	mov    gs,ax
c001d9ff:	54                   	push   esp
c001da00:	fc                   	cld    
c001da01:	e8 32 e5 fe ff       	call   c000bf38 <int_handler>
c001da06:	81 c4 04 00 00 00    	add    esp,0x4
c001da0c:	0f a9                	pop    gs
c001da0e:	0f a1                	pop    fs
c001da10:	07                   	pop    es
c001da11:	1f                   	pop    ds
c001da12:	e8 cc 2f ff ff       	call   c00109e3 <KiCheckSignalZ>
c001da17:	3d 00 00 00 00       	cmp    eax,0x0
c001da1c:	0f 84 c0 00 00 00    	je     c001dae2 <skipSignals>
c001da22:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001da27:	61                   	popa   
c001da28:	53                   	push   ebx
c001da29:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001da2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001da32:	5b                   	pop    ebx
c001da33:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001da38:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001da3b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001da3e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001da41:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001da44:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001da47:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001da4a:	81 c4 08 00 00 00    	add    esp,0x8
c001da50:	5e                   	pop    esi
c001da51:	5b                   	pop    ebx
c001da52:	59                   	pop    ecx
c001da53:	5a                   	pop    edx
c001da54:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001da57:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001da5a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001da5d:	52                   	push   edx
c001da5e:	51                   	push   ecx
c001da5f:	53                   	push   ebx
c001da60:	56                   	push   esi
c001da61:	81 ec 08 00 00 00    	sub    esp,0x8
c001da67:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001da6a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001da6d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001da70:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001da73:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001da76:	60                   	pusha  
c001da77:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001da7d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001da80:	89 e3                	mov    ebx,esp
c001da82:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001da85:	52                   	push   edx
c001da86:	68 a6 da 01 c0       	push   0xc001daa6
c001da8b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001da8e:	89 dc                	mov    esp,ebx
c001da90:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001da93:	68 23 00 00 00       	push   0x23
c001da98:	51                   	push   ecx
c001da99:	68 02 02 00 00       	push   0x202
c001da9e:	68 1b 00 00 00       	push   0x1b
c001daa3:	ff 36                	push   DWORD PTR [esi]
c001daa5:	cf                   	iret   

c001daa6 <finishSignal>:
c001daa6:	cd 0f                	int    0xf

c001daa8 <finishSignal2>:
c001daa8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001daae:	e8 ad 2f ff ff       	call   c0010a60 <KiFinishSignalZ>
c001dab3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001dab9:	68 23 00 00 00       	push   0x23
c001dabe:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001dac1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001dac4:	68 1b 00 00 00       	push   0x1b
c001dac9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001dacc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dacf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001dad2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001dad5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001dad8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001dadb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001dade:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001dae1:	cf                   	iret   

c001dae2 <skipSignals>:
c001dae2:	61                   	popa   
c001dae3:	81 c4 08 00 00 00    	add    esp,0x8
c001dae9:	cf                   	iret   
c001daea:	90                   	nop
c001daeb:	90                   	nop

c001daec <irq16>:
c001daec:	fa                   	cli    
c001daed:	6a 00                	push   0x0
c001daef:	6a 30                	push   0x30
c001daf1:	e9 c0 fe ff ff       	jmp    c001d9b6 <int_common_stub>

c001daf6 <irq17>:
c001daf6:	fa                   	cli    
c001daf7:	6a 00                	push   0x0
c001daf9:	6a 31                	push   0x31
c001dafb:	e9 b6 fe ff ff       	jmp    c001d9b6 <int_common_stub>

c001db00 <irq18>:
c001db00:	fa                   	cli    
c001db01:	6a 00                	push   0x0
c001db03:	6a 32                	push   0x32
c001db05:	e9 ac fe ff ff       	jmp    c001d9b6 <int_common_stub>

c001db0a <irq19>:
c001db0a:	fa                   	cli    
c001db0b:	6a 00                	push   0x0
c001db0d:	6a 33                	push   0x33
c001db0f:	e9 a2 fe ff ff       	jmp    c001d9b6 <int_common_stub>

c001db14 <irq20>:
c001db14:	fa                   	cli    
c001db15:	6a 00                	push   0x0
c001db17:	6a 34                	push   0x34
c001db19:	e9 98 fe ff ff       	jmp    c001d9b6 <int_common_stub>

c001db1e <irq21>:
c001db1e:	fa                   	cli    
c001db1f:	6a 00                	push   0x0
c001db21:	6a 35                	push   0x35
c001db23:	e9 8e fe ff ff       	jmp    c001d9b6 <int_common_stub>

c001db28 <irq22>:
c001db28:	fa                   	cli    
c001db29:	6a 00                	push   0x0
c001db2b:	6a 36                	push   0x36
c001db2d:	e9 84 fe ff ff       	jmp    c001d9b6 <int_common_stub>

c001db32 <irq23>:
c001db32:	fa                   	cli    
c001db33:	6a 00                	push   0x0
c001db35:	6a 37                	push   0x37
c001db37:	e9 7a fe ff ff       	jmp    c001d9b6 <int_common_stub>
c001db3c:	66 90                	xchg   ax,ax
c001db3e:	66 90                	xchg   ax,ax

c001db40 <i386GetRDRAND>:
c001db40:	b9 64 00 00 00       	mov    ecx,0x64

c001db45 <retry>:
c001db45:	0f c7 f0             	rdrand eax
c001db48:	72 05                	jb     c001db4f <retry.done>
c001db4a:	e2 f9                	loop   c001db45 <retry>

c001db4c <retry.fail>:
c001db4c:	31 c0                	xor    eax,eax
c001db4e:	c3                   	ret    

c001db4f <retry.done>:
c001db4f:	c3                   	ret    

c001db50 <absolutelyNoChanceInHell>:
c001db50:	b8 01 00 00 00       	mov    eax,0x1
c001db55:	0f a2                	cpuid  
c001db57:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001db5d:	74 06                	je     c001db65 <sseDetect.noSSE>
c001db5f:	b8 01 00 00 00       	mov    eax,0x1
c001db64:	c3                   	ret    

c001db65 <sseDetect.noSSE>:
c001db65:	31 c0                	xor    eax,eax
c001db67:	c3                   	ret    

c001db68 <sseSave>:
c001db68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db6c:	0f ae 00             	fxsave [eax]
c001db6f:	c3                   	ret    

c001db70 <sseLoad>:
c001db70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db74:	0f ae 08             	fxrstor [eax]
c001db77:	c3                   	ret    

c001db78 <sseInit>:
c001db78:	e8 42 00 00 00       	call   c001dbbf <x87Init>
c001db7d:	0f 20 e0             	mov    eax,cr4
c001db80:	66 0d 00 06          	or     ax,0x600
c001db84:	0f 22 e0             	mov    cr4,eax
c001db87:	c3                   	ret    

c001db88 <sseClose>:
c001db88:	c3                   	ret    
c001db89:	66 90                	xchg   ax,ax
c001db8b:	66 90                	xchg   ax,ax
c001db8d:	66 90                	xchg   ax,ax
c001db8f:	90                   	nop

c001db90 <value_37F>:
c001db90:	7f 03                	jg     c001db95 <value_37A+0x1>

c001db92 <value_37E>:
c001db92:	7e 03                	jle    c001db97 <x87Detect+0x1>

c001db94 <value_37A>:
c001db94:	7a 03                	jp     c001db99 <x87Detect+0x3>

c001db96 <x87Detect>:
c001db96:	b8 01 00 00 00       	mov    eax,0x1
c001db9b:	0f a2                	cpuid  
c001db9d:	f7 c2 01 00 00 00    	test   edx,0x1
c001dba3:	74 06                	je     c001dbab <x87Detect.nox87>
c001dba5:	b8 01 00 00 00       	mov    eax,0x1
c001dbaa:	c3                   	ret    

c001dbab <x87Detect.nox87>:
c001dbab:	b8 00 00 00 00       	mov    eax,0x0
c001dbb0:	c3                   	ret    

c001dbb1 <x87Save>:
c001dbb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dbb5:	dd 30                	fnsave [eax]
c001dbb7:	c3                   	ret    

c001dbb8 <x87Load>:
c001dbb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dbbc:	dd 20                	frstor [eax]
c001dbbe:	c3                   	ret    

c001dbbf <x87Init>:
c001dbbf:	0f 20 c0             	mov    eax,cr0
c001dbc2:	66 25 fb ff          	and    ax,0xfffb
c001dbc6:	66 0d 22 00          	or     ax,0x22
c001dbca:	0f 22 c0             	mov    cr0,eax
c001dbcd:	db e3                	fninit 
c001dbcf:	0f 06                	clts   
c001dbd1:	d9 2d 94 db 01 c0    	fldcw  WORD PTR ds:0xc001db94
c001dbd7:	c3                   	ret    

c001dbd8 <x87Close>:
c001dbd8:	c3                   	ret    
c001dbd9:	66 90                	xchg   ax,ax
c001dbdb:	90                   	nop

c001dbdc <__do_global_ctors_aux>:
c001dbdc:	a1 8c eb 01 c0       	mov    eax,ds:0xc001eb8c
c001dbe1:	83 f8 ff             	cmp    eax,0xffffffff
c001dbe4:	74 1a                	je     c001dc00 <__do_global_ctors_aux+0x24>
c001dbe6:	55                   	push   ebp
c001dbe7:	89 e5                	mov    ebp,esp
c001dbe9:	53                   	push   ebx
c001dbea:	52                   	push   edx
c001dbeb:	bb 8c eb 01 c0       	mov    ebx,0xc001eb8c
c001dbf0:	ff d0                	call   eax
c001dbf2:	83 eb 04             	sub    ebx,0x4
c001dbf5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dbf7:	83 f8 ff             	cmp    eax,0xffffffff
c001dbfa:	75 f4                	jne    c001dbf0 <__do_global_ctors_aux+0x14>
c001dbfc:	58                   	pop    eax
c001dbfd:	5b                   	pop    ebx
c001dbfe:	5d                   	pop    ebp
c001dbff:	c3                   	ret    
c001dc00:	c3                   	ret    
c001dc01:	66 90                	xchg   ax,ax
c001dc03:	90                   	nop

c001dc04 <__divdi3>:
c001dc04:	55                   	push   ebp
c001dc05:	57                   	push   edi
c001dc06:	56                   	push   esi
c001dc07:	53                   	push   ebx
c001dc08:	83 ec 1c             	sub    esp,0x1c
c001dc0b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001dc0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dc13:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001dc16:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001dc1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dc1e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dc22:	85 db                	test   ebx,ebx
c001dc24:	0f 88 8e 00 00 00    	js     c001dcb8 <__divdi3+0xb4>
c001dc2a:	89 dd                	mov    ebp,ebx
c001dc2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001dc34:	89 d3                	mov    ebx,edx
c001dc36:	85 d2                	test   edx,edx
c001dc38:	79 0d                	jns    c001dc47 <__divdi3+0x43>
c001dc3a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001dc3e:	f7 d8                	neg    eax
c001dc40:	83 d2 00             	adc    edx,0x0
c001dc43:	f7 da                	neg    edx
c001dc45:	89 d3                	mov    ebx,edx
c001dc47:	89 c7                	mov    edi,eax
c001dc49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001dc4c:	85 db                	test   ebx,ebx
c001dc4e:	75 48                	jne    c001dc98 <__divdi3+0x94>
c001dc50:	39 ef                	cmp    edi,ebp
c001dc52:	76 24                	jbe    c001dc78 <__divdi3+0x74>
c001dc54:	89 ea                	mov    edx,ebp
c001dc56:	f7 f7                	div    edi
c001dc58:	89 c1                	mov    ecx,eax
c001dc5a:	31 f6                	xor    esi,esi
c001dc5c:	89 c8                	mov    eax,ecx
c001dc5e:	89 f2                	mov    edx,esi
c001dc60:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dc64:	85 c9                	test   ecx,ecx
c001dc66:	74 07                	je     c001dc6f <__divdi3+0x6b>
c001dc68:	f7 d8                	neg    eax
c001dc6a:	83 d2 00             	adc    edx,0x0
c001dc6d:	f7 da                	neg    edx
c001dc6f:	83 c4 1c             	add    esp,0x1c
c001dc72:	5b                   	pop    ebx
c001dc73:	5e                   	pop    esi
c001dc74:	5f                   	pop    edi
c001dc75:	5d                   	pop    ebp
c001dc76:	c3                   	ret    
c001dc77:	90                   	nop
c001dc78:	85 ff                	test   edi,edi
c001dc7a:	75 0b                	jne    c001dc87 <__divdi3+0x83>
c001dc7c:	b8 01 00 00 00       	mov    eax,0x1
c001dc81:	31 d2                	xor    edx,edx
c001dc83:	f7 f3                	div    ebx
c001dc85:	89 c7                	mov    edi,eax
c001dc87:	31 d2                	xor    edx,edx
c001dc89:	89 e8                	mov    eax,ebp
c001dc8b:	f7 f7                	div    edi
c001dc8d:	89 c6                	mov    esi,eax
c001dc8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001dc92:	f7 f7                	div    edi
c001dc94:	89 c1                	mov    ecx,eax
c001dc96:	eb c4                	jmp    c001dc5c <__divdi3+0x58>
c001dc98:	39 eb                	cmp    ebx,ebp
c001dc9a:	77 3c                	ja     c001dcd8 <__divdi3+0xd4>
c001dc9c:	0f bd f3             	bsr    esi,ebx
c001dc9f:	83 f6 1f             	xor    esi,0x1f
c001dca2:	75 40                	jne    c001dce4 <__divdi3+0xe0>
c001dca4:	39 eb                	cmp    ebx,ebp
c001dca6:	72 09                	jb     c001dcb1 <__divdi3+0xad>
c001dca8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001dcab:	0f 87 97 00 00 00    	ja     c001dd48 <__divdi3+0x144>
c001dcb1:	b9 01 00 00 00       	mov    ecx,0x1
c001dcb6:	eb a4                	jmp    c001dc5c <__divdi3+0x58>
c001dcb8:	f7 d9                	neg    ecx
c001dcba:	83 d3 00             	adc    ebx,0x0
c001dcbd:	f7 db                	neg    ebx
c001dcbf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001dcc2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001dcc6:	89 dd                	mov    ebp,ebx
c001dcc8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001dcd0:	e9 5f ff ff ff       	jmp    c001dc34 <__divdi3+0x30>
c001dcd5:	8d 76 00             	lea    esi,[esi+0x0]
c001dcd8:	31 f6                	xor    esi,esi
c001dcda:	31 c9                	xor    ecx,ecx
c001dcdc:	e9 7b ff ff ff       	jmp    c001dc5c <__divdi3+0x58>
c001dce1:	8d 76 00             	lea    esi,[esi+0x0]
c001dce4:	b8 20 00 00 00       	mov    eax,0x20
c001dce9:	29 f0                	sub    eax,esi
c001dceb:	89 f1                	mov    ecx,esi
c001dced:	d3 e3                	shl    ebx,cl
c001dcef:	89 fa                	mov    edx,edi
c001dcf1:	88 c1                	mov    cl,al
c001dcf3:	d3 ea                	shr    edx,cl
c001dcf5:	09 da                	or     edx,ebx
c001dcf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dcfb:	89 f1                	mov    ecx,esi
c001dcfd:	d3 e7                	shl    edi,cl
c001dcff:	89 eb                	mov    ebx,ebp
c001dd01:	88 c1                	mov    cl,al
c001dd03:	d3 eb                	shr    ebx,cl
c001dd05:	89 f1                	mov    ecx,esi
c001dd07:	d3 e5                	shl    ebp,cl
c001dd09:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001dd0c:	88 c1                	mov    cl,al
c001dd0e:	d3 ea                	shr    edx,cl
c001dd10:	09 d5                	or     ebp,edx
c001dd12:	89 e8                	mov    eax,ebp
c001dd14:	89 da                	mov    edx,ebx
c001dd16:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001dd1a:	89 d3                	mov    ebx,edx
c001dd1c:	89 c5                	mov    ebp,eax
c001dd1e:	f7 e7                	mul    edi
c001dd20:	39 d3                	cmp    ebx,edx
c001dd22:	72 18                	jb     c001dd3c <__divdi3+0x138>
c001dd24:	74 0a                	je     c001dd30 <__divdi3+0x12c>
c001dd26:	89 e9                	mov    ecx,ebp
c001dd28:	31 f6                	xor    esi,esi
c001dd2a:	e9 2d ff ff ff       	jmp    c001dc5c <__divdi3+0x58>
c001dd2f:	90                   	nop
c001dd30:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001dd33:	89 f1                	mov    ecx,esi
c001dd35:	d3 e7                	shl    edi,cl
c001dd37:	39 c7                	cmp    edi,eax
c001dd39:	73 eb                	jae    c001dd26 <__divdi3+0x122>
c001dd3b:	90                   	nop
c001dd3c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001dd3f:	31 f6                	xor    esi,esi
c001dd41:	e9 16 ff ff ff       	jmp    c001dc5c <__divdi3+0x58>
c001dd46:	66 90                	xchg   ax,ax
c001dd48:	31 c9                	xor    ecx,ecx
c001dd4a:	e9 0d ff ff ff       	jmp    c001dc5c <__divdi3+0x58>
c001dd4f:	90                   	nop

c001dd50 <__moddi3>:
c001dd50:	55                   	push   ebp
c001dd51:	57                   	push   edi
c001dd52:	56                   	push   esi
c001dd53:	53                   	push   ebx
c001dd54:	83 ec 2c             	sub    esp,0x2c
c001dd57:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dd5b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001dd5f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dd63:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001dd67:	85 db                	test   ebx,ebx
c001dd69:	0f 88 85 00 00 00    	js     c001ddf4 <__moddi3+0xa4>
c001dd6f:	89 de                	mov    esi,ebx
c001dd71:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001dd79:	89 d7                	mov    edi,edx
c001dd7b:	85 d2                	test   edx,edx
c001dd7d:	79 09                	jns    c001dd88 <__moddi3+0x38>
c001dd7f:	f7 d8                	neg    eax
c001dd81:	83 d2 00             	adc    edx,0x0
c001dd84:	f7 da                	neg    edx
c001dd86:	89 d7                	mov    edi,edx
c001dd88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dd8c:	89 cd                	mov    ebp,ecx
c001dd8e:	85 ff                	test   edi,edi
c001dd90:	75 52                	jne    c001dde4 <__moddi3+0x94>
c001dd92:	89 c3                	mov    ebx,eax
c001dd94:	39 f0                	cmp    eax,esi
c001dd96:	76 24                	jbe    c001ddbc <__moddi3+0x6c>
c001dd98:	89 c8                	mov    eax,ecx
c001dd9a:	89 f2                	mov    edx,esi
c001dd9c:	f7 f3                	div    ebx
c001dd9e:	89 d6                	mov    esi,edx
c001dda0:	89 f0                	mov    eax,esi
c001dda2:	31 d2                	xor    edx,edx
c001dda4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dda8:	85 c9                	test   ecx,ecx
c001ddaa:	74 07                	je     c001ddb3 <__moddi3+0x63>
c001ddac:	f7 d8                	neg    eax
c001ddae:	83 d2 00             	adc    edx,0x0
c001ddb1:	f7 da                	neg    edx
c001ddb3:	83 c4 2c             	add    esp,0x2c
c001ddb6:	5b                   	pop    ebx
c001ddb7:	5e                   	pop    esi
c001ddb8:	5f                   	pop    edi
c001ddb9:	5d                   	pop    ebp
c001ddba:	c3                   	ret    
c001ddbb:	90                   	nop
c001ddbc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ddc0:	85 db                	test   ebx,ebx
c001ddc2:	75 0d                	jne    c001ddd1 <__moddi3+0x81>
c001ddc4:	b8 01 00 00 00       	mov    eax,0x1
c001ddc9:	31 d2                	xor    edx,edx
c001ddcb:	f7 f7                	div    edi
c001ddcd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ddd1:	89 f0                	mov    eax,esi
c001ddd3:	31 d2                	xor    edx,edx
c001ddd5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ddd9:	f7 f7                	div    edi
c001dddb:	89 e8                	mov    eax,ebp
c001dddd:	f7 f7                	div    edi
c001dddf:	89 d6                	mov    esi,edx
c001dde1:	eb bd                	jmp    c001dda0 <__moddi3+0x50>
c001dde3:	90                   	nop
c001dde4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001dde8:	39 f7                	cmp    edi,esi
c001ddea:	76 20                	jbe    c001de0c <__moddi3+0xbc>
c001ddec:	89 c8                	mov    eax,ecx
c001ddee:	89 f2                	mov    edx,esi
c001ddf0:	eb b2                	jmp    c001dda4 <__moddi3+0x54>
c001ddf2:	66 90                	xchg   ax,ax
c001ddf4:	f7 d9                	neg    ecx
c001ddf6:	83 d3 00             	adc    ebx,0x0
c001ddf9:	f7 db                	neg    ebx
c001ddfb:	89 de                	mov    esi,ebx
c001ddfd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001de05:	e9 6f ff ff ff       	jmp    c001dd79 <__moddi3+0x29>
c001de0a:	66 90                	xchg   ax,ax
c001de0c:	0f bd c7             	bsr    eax,edi
c001de0f:	83 f0 1f             	xor    eax,0x1f
c001de12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001de16:	75 24                	jne    c001de3c <__moddi3+0xec>
c001de18:	39 f7                	cmp    edi,esi
c001de1a:	72 06                	jb     c001de22 <__moddi3+0xd2>
c001de1c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001de20:	77 0c                	ja     c001de2e <__moddi3+0xde>
c001de22:	89 e9                	mov    ecx,ebp
c001de24:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001de28:	19 fe                	sbb    esi,edi
c001de2a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001de2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de32:	89 f2                	mov    edx,esi
c001de34:	e9 6b ff ff ff       	jmp    c001dda4 <__moddi3+0x54>
c001de39:	8d 76 00             	lea    esi,[esi+0x0]
c001de3c:	b8 20 00 00 00       	mov    eax,0x20
c001de41:	89 c2                	mov    edx,eax
c001de43:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001de47:	29 da                	sub    edx,ebx
c001de49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001de4d:	88 d9                	mov    cl,bl
c001de4f:	d3 e7                	shl    edi,cl
c001de51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001de55:	88 d1                	mov    cl,dl
c001de57:	d3 e8                	shr    eax,cl
c001de59:	09 c7                	or     edi,eax
c001de5b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001de5f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001de63:	89 d8                	mov    eax,ebx
c001de65:	88 d9                	mov    cl,bl
c001de67:	d3 e7                	shl    edi,cl
c001de69:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001de6d:	89 f3                	mov    ebx,esi
c001de6f:	88 d1                	mov    cl,dl
c001de71:	d3 eb                	shr    ebx,cl
c001de73:	89 c7                	mov    edi,eax
c001de75:	88 c1                	mov    cl,al
c001de77:	d3 e6                	shl    esi,cl
c001de79:	89 e8                	mov    eax,ebp
c001de7b:	88 d1                	mov    cl,dl
c001de7d:	d3 e8                	shr    eax,cl
c001de7f:	09 f0                	or     eax,esi
c001de81:	89 f9                	mov    ecx,edi
c001de83:	d3 e5                	shl    ebp,cl
c001de85:	89 da                	mov    edx,ebx
c001de87:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001de8b:	89 d3                	mov    ebx,edx
c001de8d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001de91:	89 c6                	mov    esi,eax
c001de93:	89 d1                	mov    ecx,edx
c001de95:	39 d3                	cmp    ebx,edx
c001de97:	72 27                	jb     c001dec0 <__moddi3+0x170>
c001de99:	74 21                	je     c001debc <__moddi3+0x16c>
c001de9b:	29 f5                	sub    ebp,esi
c001de9d:	19 cb                	sbb    ebx,ecx
c001de9f:	89 de                	mov    esi,ebx
c001dea1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001dea5:	d3 e6                	shl    esi,cl
c001dea7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001deab:	89 f9                	mov    ecx,edi
c001dead:	d3 ed                	shr    ebp,cl
c001deaf:	09 ee                	or     esi,ebp
c001deb1:	89 f0                	mov    eax,esi
c001deb3:	d3 eb                	shr    ebx,cl
c001deb5:	89 da                	mov    edx,ebx
c001deb7:	e9 e8 fe ff ff       	jmp    c001dda4 <__moddi3+0x54>
c001debc:	39 c5                	cmp    ebp,eax
c001debe:	73 db                	jae    c001de9b <__moddi3+0x14b>
c001dec0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001dec4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001dec8:	89 d1                	mov    ecx,edx
c001deca:	89 c6                	mov    esi,eax
c001decc:	eb cd                	jmp    c001de9b <__moddi3+0x14b>
c001dece:	66 90                	xchg   ax,ax

c001ded0 <__udivdi3>:
c001ded0:	55                   	push   ebp
c001ded1:	57                   	push   edi
c001ded2:	56                   	push   esi
c001ded3:	53                   	push   ebx
c001ded4:	83 ec 1c             	sub    esp,0x1c
c001ded7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001dedb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001dedf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001dee3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dee7:	85 d2                	test   edx,edx
c001dee9:	75 41                	jne    c001df2c <__udivdi3+0x5c>
c001deeb:	39 f7                	cmp    edi,esi
c001deed:	76 15                	jbe    c001df04 <__udivdi3+0x34>
c001deef:	89 e8                	mov    eax,ebp
c001def1:	89 f2                	mov    edx,esi
c001def3:	f7 f7                	div    edi
c001def5:	31 db                	xor    ebx,ebx
c001def7:	89 da                	mov    edx,ebx
c001def9:	83 c4 1c             	add    esp,0x1c
c001defc:	5b                   	pop    ebx
c001defd:	5e                   	pop    esi
c001defe:	5f                   	pop    edi
c001deff:	5d                   	pop    ebp
c001df00:	c3                   	ret    
c001df01:	8d 76 00             	lea    esi,[esi+0x0]
c001df04:	89 f9                	mov    ecx,edi
c001df06:	85 ff                	test   edi,edi
c001df08:	75 0b                	jne    c001df15 <__udivdi3+0x45>
c001df0a:	b8 01 00 00 00       	mov    eax,0x1
c001df0f:	31 d2                	xor    edx,edx
c001df11:	f7 f7                	div    edi
c001df13:	89 c1                	mov    ecx,eax
c001df15:	31 d2                	xor    edx,edx
c001df17:	89 f0                	mov    eax,esi
c001df19:	f7 f1                	div    ecx
c001df1b:	89 c3                	mov    ebx,eax
c001df1d:	89 e8                	mov    eax,ebp
c001df1f:	f7 f1                	div    ecx
c001df21:	89 da                	mov    edx,ebx
c001df23:	83 c4 1c             	add    esp,0x1c
c001df26:	5b                   	pop    ebx
c001df27:	5e                   	pop    esi
c001df28:	5f                   	pop    edi
c001df29:	5d                   	pop    ebp
c001df2a:	c3                   	ret    
c001df2b:	90                   	nop
c001df2c:	39 f2                	cmp    edx,esi
c001df2e:	77 1c                	ja     c001df4c <__udivdi3+0x7c>
c001df30:	0f bd da             	bsr    ebx,edx
c001df33:	83 f3 1f             	xor    ebx,0x1f
c001df36:	75 24                	jne    c001df5c <__udivdi3+0x8c>
c001df38:	39 f2                	cmp    edx,esi
c001df3a:	72 08                	jb     c001df44 <__udivdi3+0x74>
c001df3c:	39 ef                	cmp    edi,ebp
c001df3e:	0f 87 84 00 00 00    	ja     c001dfc8 <__udivdi3+0xf8>
c001df44:	b8 01 00 00 00       	mov    eax,0x1
c001df49:	eb ac                	jmp    c001def7 <__udivdi3+0x27>
c001df4b:	90                   	nop
c001df4c:	31 db                	xor    ebx,ebx
c001df4e:	31 c0                	xor    eax,eax
c001df50:	89 da                	mov    edx,ebx
c001df52:	83 c4 1c             	add    esp,0x1c
c001df55:	5b                   	pop    ebx
c001df56:	5e                   	pop    esi
c001df57:	5f                   	pop    edi
c001df58:	5d                   	pop    ebp
c001df59:	c3                   	ret    
c001df5a:	66 90                	xchg   ax,ax
c001df5c:	b8 20 00 00 00       	mov    eax,0x20
c001df61:	29 d8                	sub    eax,ebx
c001df63:	88 d9                	mov    cl,bl
c001df65:	d3 e2                	shl    edx,cl
c001df67:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001df6b:	89 fa                	mov    edx,edi
c001df6d:	88 c1                	mov    cl,al
c001df6f:	d3 ea                	shr    edx,cl
c001df71:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001df75:	09 d1                	or     ecx,edx
c001df77:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001df7b:	88 d9                	mov    cl,bl
c001df7d:	d3 e7                	shl    edi,cl
c001df7f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001df83:	89 f7                	mov    edi,esi
c001df85:	88 c1                	mov    cl,al
c001df87:	d3 ef                	shr    edi,cl
c001df89:	88 d9                	mov    cl,bl
c001df8b:	d3 e6                	shl    esi,cl
c001df8d:	89 ea                	mov    edx,ebp
c001df8f:	88 c1                	mov    cl,al
c001df91:	d3 ea                	shr    edx,cl
c001df93:	09 d6                	or     esi,edx
c001df95:	89 f0                	mov    eax,esi
c001df97:	89 fa                	mov    edx,edi
c001df99:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001df9d:	89 d7                	mov    edi,edx
c001df9f:	89 c6                	mov    esi,eax
c001dfa1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001dfa5:	39 d7                	cmp    edi,edx
c001dfa7:	72 13                	jb     c001dfbc <__udivdi3+0xec>
c001dfa9:	74 09                	je     c001dfb4 <__udivdi3+0xe4>
c001dfab:	89 f0                	mov    eax,esi
c001dfad:	31 db                	xor    ebx,ebx
c001dfaf:	e9 43 ff ff ff       	jmp    c001def7 <__udivdi3+0x27>
c001dfb4:	88 d9                	mov    cl,bl
c001dfb6:	d3 e5                	shl    ebp,cl
c001dfb8:	39 c5                	cmp    ebp,eax
c001dfba:	73 ef                	jae    c001dfab <__udivdi3+0xdb>
c001dfbc:	8d 46 ff             	lea    eax,[esi-0x1]
c001dfbf:	31 db                	xor    ebx,ebx
c001dfc1:	e9 31 ff ff ff       	jmp    c001def7 <__udivdi3+0x27>
c001dfc6:	66 90                	xchg   ax,ax
c001dfc8:	31 c0                	xor    eax,eax
c001dfca:	e9 28 ff ff ff       	jmp    c001def7 <__udivdi3+0x27>
c001dfcf:	90                   	nop

c001dfd0 <__umoddi3>:
c001dfd0:	55                   	push   ebp
c001dfd1:	57                   	push   edi
c001dfd2:	56                   	push   esi
c001dfd3:	53                   	push   ebx
c001dfd4:	83 ec 1c             	sub    esp,0x1c
c001dfd7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dfdb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dfdf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001dfe3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001dfe7:	89 da                	mov    edx,ebx
c001dfe9:	85 c0                	test   eax,eax
c001dfeb:	75 37                	jne    c001e024 <__umoddi3+0x54>
c001dfed:	39 df                	cmp    edi,ebx
c001dfef:	76 13                	jbe    c001e004 <__umoddi3+0x34>
c001dff1:	89 f0                	mov    eax,esi
c001dff3:	f7 f7                	div    edi
c001dff5:	89 d0                	mov    eax,edx
c001dff7:	31 d2                	xor    edx,edx
c001dff9:	83 c4 1c             	add    esp,0x1c
c001dffc:	5b                   	pop    ebx
c001dffd:	5e                   	pop    esi
c001dffe:	5f                   	pop    edi
c001dfff:	5d                   	pop    ebp
c001e000:	c3                   	ret    
c001e001:	8d 76 00             	lea    esi,[esi+0x0]
c001e004:	89 fd                	mov    ebp,edi
c001e006:	85 ff                	test   edi,edi
c001e008:	75 0b                	jne    c001e015 <__umoddi3+0x45>
c001e00a:	b8 01 00 00 00       	mov    eax,0x1
c001e00f:	31 d2                	xor    edx,edx
c001e011:	f7 f7                	div    edi
c001e013:	89 c5                	mov    ebp,eax
c001e015:	89 d8                	mov    eax,ebx
c001e017:	31 d2                	xor    edx,edx
c001e019:	f7 f5                	div    ebp
c001e01b:	89 f0                	mov    eax,esi
c001e01d:	f7 f5                	div    ebp
c001e01f:	89 d0                	mov    eax,edx
c001e021:	eb d4                	jmp    c001dff7 <__umoddi3+0x27>
c001e023:	90                   	nop
c001e024:	89 f1                	mov    ecx,esi
c001e026:	39 d8                	cmp    eax,ebx
c001e028:	76 0a                	jbe    c001e034 <__umoddi3+0x64>
c001e02a:	89 f0                	mov    eax,esi
c001e02c:	83 c4 1c             	add    esp,0x1c
c001e02f:	5b                   	pop    ebx
c001e030:	5e                   	pop    esi
c001e031:	5f                   	pop    edi
c001e032:	5d                   	pop    ebp
c001e033:	c3                   	ret    
c001e034:	0f bd e8             	bsr    ebp,eax
c001e037:	83 f5 1f             	xor    ebp,0x1f
c001e03a:	75 1c                	jne    c001e058 <__umoddi3+0x88>
c001e03c:	39 d8                	cmp    eax,ebx
c001e03e:	72 04                	jb     c001e044 <__umoddi3+0x74>
c001e040:	39 f7                	cmp    edi,esi
c001e042:	77 08                	ja     c001e04c <__umoddi3+0x7c>
c001e044:	89 da                	mov    edx,ebx
c001e046:	29 fe                	sub    esi,edi
c001e048:	19 c2                	sbb    edx,eax
c001e04a:	89 f1                	mov    ecx,esi
c001e04c:	89 c8                	mov    eax,ecx
c001e04e:	83 c4 1c             	add    esp,0x1c
c001e051:	5b                   	pop    ebx
c001e052:	5e                   	pop    esi
c001e053:	5f                   	pop    edi
c001e054:	5d                   	pop    ebp
c001e055:	c3                   	ret    
c001e056:	66 90                	xchg   ax,ax
c001e058:	ba 20 00 00 00       	mov    edx,0x20
c001e05d:	29 ea                	sub    edx,ebp
c001e05f:	89 e9                	mov    ecx,ebp
c001e061:	d3 e0                	shl    eax,cl
c001e063:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e067:	89 f8                	mov    eax,edi
c001e069:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e06d:	88 d1                	mov    cl,dl
c001e06f:	d3 e8                	shr    eax,cl
c001e071:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e075:	09 c1                	or     ecx,eax
c001e077:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e07b:	89 e9                	mov    ecx,ebp
c001e07d:	d3 e7                	shl    edi,cl
c001e07f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e083:	89 d8                	mov    eax,ebx
c001e085:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e089:	88 d1                	mov    cl,dl
c001e08b:	d3 e8                	shr    eax,cl
c001e08d:	89 c7                	mov    edi,eax
c001e08f:	89 e9                	mov    ecx,ebp
c001e091:	d3 e3                	shl    ebx,cl
c001e093:	89 f0                	mov    eax,esi
c001e095:	88 d1                	mov    cl,dl
c001e097:	d3 e8                	shr    eax,cl
c001e099:	09 d8                	or     eax,ebx
c001e09b:	89 e9                	mov    ecx,ebp
c001e09d:	d3 e6                	shl    esi,cl
c001e09f:	89 f3                	mov    ebx,esi
c001e0a1:	89 fa                	mov    edx,edi
c001e0a3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e0a7:	89 d1                	mov    ecx,edx
c001e0a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e0ad:	89 c6                	mov    esi,eax
c001e0af:	89 d7                	mov    edi,edx
c001e0b1:	39 d1                	cmp    ecx,edx
c001e0b3:	72 27                	jb     c001e0dc <__umoddi3+0x10c>
c001e0b5:	74 21                	je     c001e0d8 <__umoddi3+0x108>
c001e0b7:	89 ca                	mov    edx,ecx
c001e0b9:	29 f3                	sub    ebx,esi
c001e0bb:	19 fa                	sbb    edx,edi
c001e0bd:	89 d0                	mov    eax,edx
c001e0bf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e0c3:	d3 e0                	shl    eax,cl
c001e0c5:	89 e9                	mov    ecx,ebp
c001e0c7:	d3 eb                	shr    ebx,cl
c001e0c9:	09 d8                	or     eax,ebx
c001e0cb:	d3 ea                	shr    edx,cl
c001e0cd:	83 c4 1c             	add    esp,0x1c
c001e0d0:	5b                   	pop    ebx
c001e0d1:	5e                   	pop    esi
c001e0d2:	5f                   	pop    edi
c001e0d3:	5d                   	pop    ebp
c001e0d4:	c3                   	ret    
c001e0d5:	8d 76 00             	lea    esi,[esi+0x0]
c001e0d8:	39 c3                	cmp    ebx,eax
c001e0da:	73 db                	jae    c001e0b7 <__umoddi3+0xe7>
c001e0dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e0e0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e0e4:	89 d7                	mov    edi,edx
c001e0e6:	89 c6                	mov    esi,eax
c001e0e8:	eb cd                	jmp    c001e0b7 <__umoddi3+0xe7>

Disassembly of section .init:

c001e0ea <_init>:
c001e0ea:	55                   	push   ebp
c001e0eb:	89 e5                	mov    ebp,esp
c001e0ed:	e8 02 20 fe ff       	call   c00000f4 <frame_dummy>
c001e0f2:	e8 e5 fa ff ff       	call   c001dbdc <__do_global_ctors_aux>
c001e0f7:	5d                   	pop    ebp
c001e0f8:	c3                   	ret    

Disassembly of section .fini:

c001e0f9 <_fini>:
c001e0f9:	55                   	push   ebp
c001e0fa:	89 e5                	mov    ebp,esp
c001e0fc:	e8 83 1f fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e101:	5d                   	pop    ebp
c001e102:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e104 <Computer::~Computer()>:
c001e104:	83 ec 0c             	sub    esp,0xc
c001e107:	ba f0 f3 01 c0       	mov    edx,0xc001f3f0
c001e10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e110:	89 10                	mov    DWORD PTR [eax],edx
c001e112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e116:	83 ec 0c             	sub    esp,0xc
c001e119:	50                   	push   eax
c001e11a:	e8 73 d8 fe ff       	call   c000b992 <Device::~Device()>
c001e11f:	83 c4 10             	add    esp,0x10
c001e122:	90                   	nop
c001e123:	83 c4 0c             	add    esp,0xc
c001e126:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e128 <Computer::~Computer()>:
c001e128:	83 ec 0c             	sub    esp,0xc
c001e12b:	83 ec 0c             	sub    esp,0xc
c001e12e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e132:	e8 cd ff ff ff       	call   c001e104 <Computer::~Computer()>
c001e137:	83 c4 10             	add    esp,0x10
c001e13a:	83 ec 08             	sub    esp,0x8
c001e13d:	68 70 01 00 00       	push   0x170
c001e142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e146:	e8 12 c4 fe ff       	call   c000a55d <operator delete(void*, unsigned long)>
c001e14b:	83 c4 10             	add    esp,0x10
c001e14e:	83 c4 0c             	add    esp,0xc
c001e151:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e152 <idleCommon()>:
c001e152:	83 ec 0c             	sub    esp,0xc
c001e155:	fa                   	cli    
c001e156:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001e15c:	e8 ef 69 ff ff       	call   c0014b50 <schedule()>
c001e161:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001e166:	48                   	dec    eax
c001e167:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001e16c:	75 01                	jne    c001e16f <idleCommon()+0x1d>
c001e16e:	fb                   	sti    
c001e16f:	83 c4 0c             	add    esp,0xc
c001e172:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e174 <LinkedList<UnixFile>::~LinkedList()>:
c001e174:	90                   	nop
c001e175:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e176 <LinkedList<UnixFile>::LinkedList()>:
c001e176:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e17a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e184:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e18b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e18f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e196:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e19a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e1a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e1ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e1af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e1b6:	90                   	nop
c001e1b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e1b8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e1b8:	83 ec 0c             	sub    esp,0xc
c001e1bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e1c0:	75 10                	jne    c001e1d2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e1c2:	83 ec 0c             	sub    esp,0xc
c001e1c5:	68 04 f6 01 c0       	push   0xc001f604
c001e1ca:	e8 38 22 ff ff       	call   c0010407 <KePanic(char const*)>
c001e1cf:	83 c4 10             	add    esp,0x10
c001e1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1d8:	85 c0                	test   eax,eax
c001e1da:	74 34                	je     c001e210 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e1e3:	85 c0                	test   eax,eax
c001e1e5:	74 29                	je     c001e210 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e1e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e1ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e204:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e207:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e20e:	eb 65                	jmp    c001e275 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e214:	8b 00                	mov    eax,DWORD PTR [eax]
c001e216:	85 c0                	test   eax,eax
c001e218:	75 4b                	jne    c001e265 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e21a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e21e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e221:	85 c0                	test   eax,eax
c001e223:	75 40                	jne    c001e265 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e229:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e22d:	89 10                	mov    DWORD PTR [eax],edx
c001e22f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e233:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e237:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e23a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e23e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e241:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e24c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e24f:	85 c0                	test   eax,eax
c001e251:	74 22                	je     c001e275 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e253:	83 ec 0c             	sub    esp,0xc
c001e256:	68 26 f6 01 c0       	push   0xc001f626
c001e25b:	e8 a7 21 ff ff       	call   c0010407 <KePanic(char const*)>
c001e260:	83 c4 10             	add    esp,0x10
c001e263:	eb 10                	jmp    c001e275 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e265:	83 ec 0c             	sub    esp,0xc
c001e268:	68 30 f6 01 c0       	push   0xc001f630
c001e26d:	e8 95 21 ff ff       	call   c0010407 <KePanic(char const*)>
c001e272:	83 c4 10             	add    esp,0x10
c001e275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e279:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e27c:	8d 50 01             	lea    edx,[eax+0x1]
c001e27f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e283:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e286:	90                   	nop
c001e287:	83 c4 0c             	add    esp,0xc
c001e28a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e28c <LinkedList<UnixFile>::getFirstElement()>:
c001e28c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e290:	8b 00                	mov    eax,DWORD PTR [eax]
c001e292:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e294 <LinkedList<UnixFile>::removeFirst()>:
c001e294:	83 ec 0c             	sub    esp,0xc
c001e297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e29b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e29d:	85 c0                	test   eax,eax
c001e29f:	75 12                	jne    c001e2b3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e2a1:	83 ec 0c             	sub    esp,0xc
c001e2a4:	68 3c f6 01 c0       	push   0xc001f63c
c001e2a9:	e8 59 21 ff ff       	call   c0010407 <KePanic(char const*)>
c001e2ae:	83 c4 10             	add    esp,0x10
c001e2b1:	eb 7e                	jmp    c001e331 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e2b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e2ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e2bd:	85 c0                	test   eax,eax
c001e2bf:	74 10                	je     c001e2d1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e2c1:	83 ec 0c             	sub    esp,0xc
c001e2c4:	68 87 f6 01 c0       	push   0xc001f687
c001e2c9:	e8 39 21 ff ff       	call   c0010407 <KePanic(char const*)>
c001e2ce:	83 c4 10             	add    esp,0x10
c001e2d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e2da:	85 c0                	test   eax,eax
c001e2dc:	75 33                	jne    c001e311 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e2fa:	83 f8 01             	cmp    eax,0x1
c001e2fd:	74 21                	je     c001e320 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e2ff:	83 ec 0c             	sub    esp,0xc
c001e302:	68 60 f6 01 c0       	push   0xc001f660
c001e307:	e8 fb 20 ff ff       	call   c0010407 <KePanic(char const*)>
c001e30c:	83 c4 10             	add    esp,0x10
c001e30f:	eb 0f                	jmp    c001e320 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e315:	8b 00                	mov    eax,DWORD PTR [eax]
c001e317:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e31e:	89 10                	mov    DWORD PTR [eax],edx
c001e320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e324:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e327:	8d 50 ff             	lea    edx,[eax-0x1]
c001e32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e32e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e331:	83 c4 0c             	add    esp,0xc
c001e334:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e336 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e336:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e33a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e33d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e33e <DriverlessDevice::~DriverlessDevice()>:
c001e33e:	ba dc fc 01 c0       	mov    edx,0xc001fcdc
c001e343:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e347:	89 10                	mov    DWORD PTR [eax],edx
c001e349:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e34d:	50                   	push   eax
c001e34e:	e8 3f d6 fe ff       	call   c000b992 <Device::~Device()>
c001e353:	83 c4 04             	add    esp,0x4
c001e356:	90                   	nop
c001e357:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e358 <DriverlessDevice::~DriverlessDevice()>:
c001e358:	83 ec 0c             	sub    esp,0xc
c001e35b:	83 ec 0c             	sub    esp,0xc
c001e35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e362:	e8 d7 ff ff ff       	call   c001e33e <DriverlessDevice::~DriverlessDevice()>
c001e367:	83 c4 10             	add    esp,0x10
c001e36a:	83 ec 08             	sub    esp,0x8
c001e36d:	68 58 01 00 00       	push   0x158
c001e372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e376:	e8 e2 c1 fe ff       	call   c000a55d <operator delete(void*, unsigned long)>
c001e37b:	83 c4 10             	add    esp,0x10
c001e37e:	83 c4 0c             	add    esp,0xc
c001e381:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e382 <LinkedList<Device>::addElement(Device*)>:
c001e382:	83 ec 0c             	sub    esp,0xc
c001e385:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e38a:	75 10                	jne    c001e39c <LinkedList<Device>::addElement(Device*)+0x1a>
c001e38c:	83 ec 0c             	sub    esp,0xc
c001e38f:	68 04 f6 01 c0       	push   0xc001f604
c001e394:	e8 6e 20 ff ff       	call   c0010407 <KePanic(char const*)>
c001e399:	83 c4 10             	add    esp,0x10
c001e39c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3a2:	85 c0                	test   eax,eax
c001e3a4:	74 3a                	je     c001e3e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3ad:	85 c0                	test   eax,eax
c001e3af:	74 2f                	je     c001e3e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e3b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e3bc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e3ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e3cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3d4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e3de:	eb 68                	jmp    c001e448 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e3e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e3e6:	85 c0                	test   eax,eax
c001e3e8:	75 4e                	jne    c001e438 <LinkedList<Device>::addElement(Device*)+0xb6>
c001e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e3f1:	85 c0                	test   eax,eax
c001e3f3:	75 43                	jne    c001e438 <LinkedList<Device>::addElement(Device*)+0xb6>
c001e3f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e3fd:	89 10                	mov    DWORD PTR [eax],edx
c001e3ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e403:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e407:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e40e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e411:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e41b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e41f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e422:	85 c0                	test   eax,eax
c001e424:	74 22                	je     c001e448 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e426:	83 ec 0c             	sub    esp,0xc
c001e429:	68 26 f6 01 c0       	push   0xc001f626
c001e42e:	e8 d4 1f ff ff       	call   c0010407 <KePanic(char const*)>
c001e433:	83 c4 10             	add    esp,0x10
c001e436:	eb 10                	jmp    c001e448 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e438:	83 ec 0c             	sub    esp,0xc
c001e43b:	68 30 f6 01 c0       	push   0xc001f630
c001e440:	e8 c2 1f ff ff       	call   c0010407 <KePanic(char const*)>
c001e445:	83 c4 10             	add    esp,0x10
c001e448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e44c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e44f:	8d 50 01             	lea    edx,[eax+0x1]
c001e452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e456:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e459:	90                   	nop
c001e45a:	83 c4 0c             	add    esp,0xc
c001e45d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e45e <LinkedList<Device>::LinkedList()>:
c001e45e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e462:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e46c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e473:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e477:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e47e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e482:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e488:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e48c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e493:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e497:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e49e:	90                   	nop
c001e49f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e4a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e4a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4a6:	85 c0                	test   eax,eax
c001e4a8:	75 0e                	jne    c001e4b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e4aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4b1:	85 c0                	test   eax,eax
c001e4b3:	75 03                	jne    c001e4b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e4b5:	b0 01                	mov    al,0x1
c001e4b7:	c3                   	ret    
c001e4b8:	b0 00                	mov    al,0x0
c001e4ba:	90                   	nop
c001e4bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e4bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e4bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e4c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e4c4:	83 ec 0c             	sub    esp,0xc
c001e4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4cd:	85 c0                	test   eax,eax
c001e4cf:	75 17                	jne    c001e4e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001e4d1:	83 ec 0c             	sub    esp,0xc
c001e4d4:	68 3c f6 01 c0       	push   0xc001f63c
c001e4d9:	e8 29 1f ff ff       	call   c0010407 <KePanic(char const*)>
c001e4de:	83 c4 10             	add    esp,0x10
c001e4e1:	e9 92 00 00 00       	jmp    c001e578 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001e4e6:	66 90                	xchg   ax,ax
c001e4e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e4f2:	85 c0                	test   eax,eax
c001e4f4:	0f 95 c0             	setne  al
c001e4f7:	84 c0                	test   al,al
c001e4f9:	74 11                	je     c001e50c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001e4fb:	83 ec 0c             	sub    esp,0xc
c001e4fe:	68 87 f6 01 c0       	push   0xc001f687
c001e503:	e8 ff 1e ff ff       	call   c0010407 <KePanic(char const*)>
c001e508:	83 c4 10             	add    esp,0x10
c001e50b:	90                   	nop
c001e50c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e510:	8b 00                	mov    eax,DWORD PTR [eax]
c001e512:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e515:	85 c0                	test   eax,eax
c001e517:	0f 94 c0             	sete   al
c001e51a:	84 c0                	test   al,al
c001e51c:	74 36                	je     c001e554 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001e51e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e522:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e52c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e537:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e53a:	83 f8 01             	cmp    eax,0x1
c001e53d:	74 25                	je     c001e564 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001e53f:	83 ec 0c             	sub    esp,0xc
c001e542:	68 60 f6 01 c0       	push   0xc001f660
c001e547:	e8 bb 1e ff ff       	call   c0010407 <KePanic(char const*)>
c001e54c:	83 c4 10             	add    esp,0x10
c001e54f:	eb 13                	jmp    c001e564 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001e551:	8d 76 00             	lea    esi,[esi+0x0]
c001e554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e558:	8b 00                	mov    eax,DWORD PTR [eax]
c001e55a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e561:	89 10                	mov    DWORD PTR [eax],edx
c001e563:	90                   	nop
c001e564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e568:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e56b:	8d 50 ff             	lea    edx,[eax-0x1]
c001e56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e572:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e575:	8d 76 00             	lea    esi,[esi+0x0]
c001e578:	83 c4 0c             	add    esp,0xc
c001e57b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e57c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e57c:	83 ec 0c             	sub    esp,0xc
c001e57f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e584:	75 12                	jne    c001e598 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001e586:	83 ec 0c             	sub    esp,0xc
c001e589:	68 04 f6 01 c0       	push   0xc001f604
c001e58e:	e8 74 1e ff ff       	call   c0010407 <KePanic(char const*)>
c001e593:	83 c4 10             	add    esp,0x10
c001e596:	66 90                	xchg   ax,ax
c001e598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e59c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e59e:	85 c0                	test   eax,eax
c001e5a0:	74 36                	je     c001e5d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001e5a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5a9:	85 c0                	test   eax,eax
c001e5ab:	74 2b                	je     c001e5d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001e5ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e5b8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001e5bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e5c3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e5c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5cd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e5d4:	eb 6a                	jmp    c001e640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e5d6:	66 90                	xchg   ax,ax
c001e5d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5de:	85 c0                	test   eax,eax
c001e5e0:	75 4e                	jne    c001e630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001e5e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5e9:	85 c0                	test   eax,eax
c001e5eb:	75 43                	jne    c001e630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001e5ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e5f5:	89 10                	mov    DWORD PTR [eax],edx
c001e5f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e5ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e606:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e609:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e614:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e617:	85 c0                	test   eax,eax
c001e619:	74 25                	je     c001e640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e61b:	83 ec 0c             	sub    esp,0xc
c001e61e:	68 26 f6 01 c0       	push   0xc001f626
c001e623:	e8 df 1d ff ff       	call   c0010407 <KePanic(char const*)>
c001e628:	83 c4 10             	add    esp,0x10
c001e62b:	eb 13                	jmp    c001e640 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e62d:	8d 76 00             	lea    esi,[esi+0x0]
c001e630:	83 ec 0c             	sub    esp,0xc
c001e633:	68 30 f6 01 c0       	push   0xc001f630
c001e638:	e8 ca 1d ff ff       	call   c0010407 <KePanic(char const*)>
c001e63d:	83 c4 10             	add    esp,0x10
c001e640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e644:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e647:	8d 50 01             	lea    edx,[eax+0x1]
c001e64a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e64e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e651:	90                   	nop
c001e652:	83 c4 0c             	add    esp,0xc
c001e655:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001e658 <ACPI::~ACPI()>:
c001e658:	83 ec 0c             	sub    esp,0xc
c001e65b:	ba a8 02 02 c0       	mov    edx,0xc00202a8
c001e660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e664:	89 10                	mov    DWORD PTR [eax],edx
c001e666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e66a:	83 ec 0c             	sub    esp,0xc
c001e66d:	50                   	push   eax
c001e66e:	e8 1f d3 fe ff       	call   c000b992 <Device::~Device()>
c001e673:	83 c4 10             	add    esp,0x10
c001e676:	90                   	nop
c001e677:	83 c4 0c             	add    esp,0xc
c001e67a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001e67c <ACPI::~ACPI()>:
c001e67c:	83 ec 0c             	sub    esp,0xc
c001e67f:	83 ec 0c             	sub    esp,0xc
c001e682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e686:	e8 cd ff ff ff       	call   c001e658 <ACPI::~ACPI()>
c001e68b:	83 c4 10             	add    esp,0x10
c001e68e:	83 ec 08             	sub    esp,0x8
c001e691:	68 64 12 00 00       	push   0x1264
c001e696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e69a:	e8 be be fe ff       	call   c000a55d <operator delete(void*, unsigned long)>
c001e69f:	83 c4 10             	add    esp,0x10
c001e6a2:	83 c4 0c             	add    esp,0xc
c001e6a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001e6a8 <LinkedList<Device>::~LinkedList()>:
c001e6a8:	90                   	nop
c001e6a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001e6ac <LinkedList<Device>::isEmpty()>:
c001e6ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6b2:	85 c0                	test   eax,eax
c001e6b4:	75 0e                	jne    c001e6c4 <LinkedList<Device>::isEmpty()+0x18>
c001e6b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6bd:	85 c0                	test   eax,eax
c001e6bf:	75 03                	jne    c001e6c4 <LinkedList<Device>::isEmpty()+0x18>
c001e6c1:	b0 01                	mov    al,0x1
c001e6c3:	c3                   	ret    
c001e6c4:	b0 00                	mov    al,0x0
c001e6c6:	90                   	nop
c001e6c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001e6c8 <LinkedList<Device>::getFirstElement()>:
c001e6c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001e6d0 <LinkedList<Device>::removeFirst()>:
c001e6d0:	83 ec 0c             	sub    esp,0xc
c001e6d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6d7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6d9:	85 c0                	test   eax,eax
c001e6db:	75 17                	jne    c001e6f4 <LinkedList<Device>::removeFirst()+0x24>
c001e6dd:	83 ec 0c             	sub    esp,0xc
c001e6e0:	68 3c f6 01 c0       	push   0xc001f63c
c001e6e5:	e8 1d 1d ff ff       	call   c0010407 <KePanic(char const*)>
c001e6ea:	83 c4 10             	add    esp,0x10
c001e6ed:	e9 92 00 00 00       	jmp    c001e784 <LinkedList<Device>::removeFirst()+0xb4>
c001e6f2:	66 90                	xchg   ax,ax
c001e6f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6fb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e701:	85 c0                	test   eax,eax
c001e703:	74 13                	je     c001e718 <LinkedList<Device>::removeFirst()+0x48>
c001e705:	83 ec 0c             	sub    esp,0xc
c001e708:	68 87 f6 01 c0       	push   0xc001f687
c001e70d:	e8 f5 1c ff ff       	call   c0010407 <KePanic(char const*)>
c001e712:	83 c4 10             	add    esp,0x10
c001e715:	8d 76 00             	lea    esi,[esi+0x0]
c001e718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e71c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e71e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e724:	85 c0                	test   eax,eax
c001e726:	75 34                	jne    c001e75c <LinkedList<Device>::removeFirst()+0x8c>
c001e728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e72c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e736:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e741:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e744:	83 f8 01             	cmp    eax,0x1
c001e747:	74 27                	je     c001e770 <LinkedList<Device>::removeFirst()+0xa0>
c001e749:	83 ec 0c             	sub    esp,0xc
c001e74c:	68 60 f6 01 c0       	push   0xc001f660
c001e751:	e8 b1 1c ff ff       	call   c0010407 <KePanic(char const*)>
c001e756:	83 c4 10             	add    esp,0x10
c001e759:	eb 15                	jmp    c001e770 <LinkedList<Device>::removeFirst()+0xa0>
c001e75b:	90                   	nop
c001e75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e760:	8b 00                	mov    eax,DWORD PTR [eax]
c001e762:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001e768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e76c:	89 10                	mov    DWORD PTR [eax],edx
c001e76e:	66 90                	xchg   ax,ax
c001e770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e774:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e777:	8d 50 ff             	lea    edx,[eax-0x1]
c001e77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e77e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e781:	8d 76 00             	lea    esi,[esi+0x0]
c001e784:	83 c4 0c             	add    esp,0xc
c001e787:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001e788 <CPU::~CPU()>:
c001e788:	83 ec 0c             	sub    esp,0xc
c001e78b:	ba 44 04 02 c0       	mov    edx,0xc0020444
c001e790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e794:	89 10                	mov    DWORD PTR [eax],edx
c001e796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e79a:	83 ec 0c             	sub    esp,0xc
c001e79d:	50                   	push   eax
c001e79e:	e8 ef d1 fe ff       	call   c000b992 <Device::~Device()>
c001e7a3:	83 c4 10             	add    esp,0x10
c001e7a6:	90                   	nop
c001e7a7:	83 c4 0c             	add    esp,0xc
c001e7aa:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001e7ac <CPU::~CPU()>:
c001e7ac:	83 ec 0c             	sub    esp,0xc
c001e7af:	83 ec 0c             	sub    esp,0xc
c001e7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7b6:	e8 cd ff ff ff       	call   c001e788 <CPU::~CPU()>
c001e7bb:	83 c4 10             	add    esp,0x10
c001e7be:	83 ec 08             	sub    esp,0x8
c001e7c1:	68 94 11 00 00       	push   0x1194
c001e7c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7ca:	e8 8e bd fe ff       	call   c000a55d <operator delete(void*, unsigned long)>
c001e7cf:	83 c4 10             	add    esp,0x10
c001e7d2:	83 c4 0c             	add    esp,0xc
c001e7d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001e7d8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001e7d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7dc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e7df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e7e0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e7e0:	90                   	nop
c001e7e1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e7e4 <ThreadControlBlock::ThreadControlBlock()>:
c001e7e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7e8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e7ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7f3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e7fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7fe:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001e805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e809:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001e810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e814:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001e81b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e81f:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001e823:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e827:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001e82b:	90                   	nop
c001e82c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001e830 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001e830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e834:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e83a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e83e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e845:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e849:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e854:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e85a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e85e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e865:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e869:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e870:	90                   	nop
c001e871:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001e872 <PCI::~PCI()>:
c001e872:	83 ec 0c             	sub    esp,0xc
c001e875:	ba a4 12 02 c0       	mov    edx,0xc00212a4
c001e87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e87e:	89 10                	mov    DWORD PTR [eax],edx
c001e880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e884:	83 ec 0c             	sub    esp,0xc
c001e887:	50                   	push   eax
c001e888:	e8 8f cb fe ff       	call   c000b41c <Bus::~Bus()>
c001e88d:	83 c4 10             	add    esp,0x10
c001e890:	90                   	nop
c001e891:	83 c4 0c             	add    esp,0xc
c001e894:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001e896 <PCI::~PCI()>:
c001e896:	83 ec 0c             	sub    esp,0xc
c001e899:	83 ec 0c             	sub    esp,0xc
c001e89c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8a0:	e8 cd ff ff ff       	call   c001e872 <PCI::~PCI()>
c001e8a5:	83 c4 10             	add    esp,0x10
c001e8a8:	83 ec 08             	sub    esp,0x8
c001e8ab:	68 5c 01 00 00       	push   0x15c
c001e8b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8b4:	e8 a4 bc fe ff       	call   c000a55d <operator delete(void*, unsigned long)>
c001e8b9:	83 c4 10             	add    esp,0x10
c001e8bc:	83 c4 0c             	add    esp,0xc
c001e8bf:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001e8c0 <IDE::~IDE()>:
c001e8c0:	83 ec 0c             	sub    esp,0xc
c001e8c3:	ba 58 13 02 c0       	mov    edx,0xc0021358
c001e8c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8cc:	89 10                	mov    DWORD PTR [eax],edx
c001e8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d2:	83 ec 0c             	sub    esp,0xc
c001e8d5:	50                   	push   eax
c001e8d6:	e8 2d d5 fe ff       	call   c000be08 <HardDiskController::~HardDiskController()>
c001e8db:	83 c4 10             	add    esp,0x10
c001e8de:	90                   	nop
c001e8df:	83 c4 0c             	add    esp,0xc
c001e8e2:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001e8e4 <IDE::~IDE()>:
c001e8e4:	83 ec 0c             	sub    esp,0xc
c001e8e7:	83 ec 0c             	sub    esp,0xc
c001e8ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8ee:	e8 cd ff ff ff       	call   c001e8c0 <IDE::~IDE()>
c001e8f3:	83 c4 10             	add    esp,0x10
c001e8f6:	83 ec 08             	sub    esp,0x8
c001e8f9:	68 70 02 00 00       	push   0x270
c001e8fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e902:	e8 56 bc fe ff       	call   c000a55d <operator delete(void*, unsigned long)>
c001e907:	83 c4 10             	add    esp,0x10
c001e90a:	83 c4 0c             	add    esp,0xc
c001e90d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001e90e <SATABus::~SATABus()>:
c001e90e:	83 ec 0c             	sub    esp,0xc
c001e911:	ba a8 13 02 c0       	mov    edx,0xc00213a8
c001e916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e91a:	89 10                	mov    DWORD PTR [eax],edx
c001e91c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e920:	83 ec 0c             	sub    esp,0xc
c001e923:	50                   	push   eax
c001e924:	e8 df d4 fe ff       	call   c000be08 <HardDiskController::~HardDiskController()>
c001e929:	83 c4 10             	add    esp,0x10
c001e92c:	90                   	nop
c001e92d:	83 c4 0c             	add    esp,0xc
c001e930:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001e932 <SATABus::~SATABus()>:
c001e932:	83 ec 0c             	sub    esp,0xc
c001e935:	83 ec 0c             	sub    esp,0xc
c001e938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e93c:	e8 cd ff ff ff       	call   c001e90e <SATABus::~SATABus()>
c001e941:	83 c4 10             	add    esp,0x10
c001e944:	83 ec 08             	sub    esp,0x8
c001e947:	68 64 01 00 00       	push   0x164
c001e94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e950:	e8 08 bc fe ff       	call   c000a55d <operator delete(void*, unsigned long)>
c001e955:	83 c4 10             	add    esp,0x10
c001e958:	83 c4 0c             	add    esp,0xc
c001e95b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001e95c <ATA::~ATA()>:
c001e95c:	83 ec 0c             	sub    esp,0xc
c001e95f:	ba e8 13 02 c0       	mov    edx,0xc00213e8
c001e964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e968:	89 10                	mov    DWORD PTR [eax],edx
c001e96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96e:	83 ec 0c             	sub    esp,0xc
c001e971:	50                   	push   eax
c001e972:	e8 73 d5 fe ff       	call   c000beea <PhysicalDisk::~PhysicalDisk()>
c001e977:	83 c4 10             	add    esp,0x10
c001e97a:	90                   	nop
c001e97b:	83 c4 0c             	add    esp,0xc
c001e97e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001e980 <ATA::~ATA()>:
c001e980:	83 ec 0c             	sub    esp,0xc
c001e983:	83 ec 0c             	sub    esp,0xc
c001e986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e98a:	e8 cd ff ff ff       	call   c001e95c <ATA::~ATA()>
c001e98f:	83 c4 10             	add    esp,0x10
c001e992:	83 ec 08             	sub    esp,0x8
c001e995:	68 7c 01 00 00       	push   0x17c
c001e99a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e99e:	e8 ba bb fe ff       	call   c000a55d <operator delete(void*, unsigned long)>
c001e9a3:	83 c4 10             	add    esp,0x10
c001e9a6:	83 c4 0c             	add    esp,0xc
c001e9a9:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001e9aa <ATAPI::~ATAPI()>:
c001e9aa:	83 ec 0c             	sub    esp,0xc
c001e9ad:	ba 30 14 02 c0       	mov    edx,0xc0021430
c001e9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b6:	89 10                	mov    DWORD PTR [eax],edx
c001e9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bc:	83 ec 0c             	sub    esp,0xc
c001e9bf:	50                   	push   eax
c001e9c0:	e8 25 d5 fe ff       	call   c000beea <PhysicalDisk::~PhysicalDisk()>
c001e9c5:	83 c4 10             	add    esp,0x10
c001e9c8:	90                   	nop
c001e9c9:	83 c4 0c             	add    esp,0xc
c001e9cc:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001e9ce <ATAPI::~ATAPI()>:
c001e9ce:	83 ec 0c             	sub    esp,0xc
c001e9d1:	83 ec 0c             	sub    esp,0xc
c001e9d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9d8:	e8 cd ff ff ff       	call   c001e9aa <ATAPI::~ATAPI()>
c001e9dd:	83 c4 10             	add    esp,0x10
c001e9e0:	83 ec 08             	sub    esp,0x8
c001e9e3:	68 84 01 00 00       	push   0x184
c001e9e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9ec:	e8 6c bb fe ff       	call   c000a55d <operator delete(void*, unsigned long)>
c001e9f1:	83 c4 10             	add    esp,0x10
c001e9f4:	83 c4 0c             	add    esp,0xc
c001e9f7:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001e9f8 <SATA::~SATA()>:
c001e9f8:	83 ec 0c             	sub    esp,0xc
c001e9fb:	ba e4 14 02 c0       	mov    edx,0xc00214e4
c001ea00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea04:	89 10                	mov    DWORD PTR [eax],edx
c001ea06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea0a:	83 ec 0c             	sub    esp,0xc
c001ea0d:	50                   	push   eax
c001ea0e:	e8 d7 d4 fe ff       	call   c000beea <PhysicalDisk::~PhysicalDisk()>
c001ea13:	83 c4 10             	add    esp,0x10
c001ea16:	90                   	nop
c001ea17:	83 c4 0c             	add    esp,0xc
c001ea1a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001ea1c <SATA::~SATA()>:
c001ea1c:	83 ec 0c             	sub    esp,0xc
c001ea1f:	83 ec 0c             	sub    esp,0xc
c001ea22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea26:	e8 cd ff ff ff       	call   c001e9f8 <SATA::~SATA()>
c001ea2b:	83 c4 10             	add    esp,0x10
c001ea2e:	83 ec 08             	sub    esp,0x8
c001ea31:	68 7c 01 00 00       	push   0x17c
c001ea36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea3a:	e8 1e bb fe ff       	call   c000a55d <operator delete(void*, unsigned long)>
c001ea3f:	83 c4 10             	add    esp,0x10
c001ea42:	83 c4 0c             	add    esp,0xc
c001ea45:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001ea46 <SATAPI::~SATAPI()>:
c001ea46:	83 ec 0c             	sub    esp,0xc
c001ea49:	ba 08 16 02 c0       	mov    edx,0xc0021608
c001ea4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea52:	89 10                	mov    DWORD PTR [eax],edx
c001ea54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea58:	83 ec 0c             	sub    esp,0xc
c001ea5b:	50                   	push   eax
c001ea5c:	e8 89 d4 fe ff       	call   c000beea <PhysicalDisk::~PhysicalDisk()>
c001ea61:	83 c4 10             	add    esp,0x10
c001ea64:	90                   	nop
c001ea65:	83 c4 0c             	add    esp,0xc
c001ea68:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001ea6a <SATAPI::~SATAPI()>:
c001ea6a:	83 ec 0c             	sub    esp,0xc
c001ea6d:	83 ec 0c             	sub    esp,0xc
c001ea70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea74:	e8 cd ff ff ff       	call   c001ea46 <SATAPI::~SATAPI()>
c001ea79:	83 c4 10             	add    esp,0x10
c001ea7c:	83 ec 08             	sub    esp,0x8
c001ea7f:	68 84 01 00 00       	push   0x184
c001ea84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea88:	e8 d0 ba fe ff       	call   c000a55d <operator delete(void*, unsigned long)>
c001ea8d:	83 c4 10             	add    esp,0x10
c001ea90:	83 c4 0c             	add    esp,0xc
c001ea93:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ea94 <IOAPIC::~IOAPIC()>:
c001ea94:	83 ec 0c             	sub    esp,0xc
c001ea97:	ba 48 16 02 c0       	mov    edx,0xc0021648
c001ea9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa0:	89 10                	mov    DWORD PTR [eax],edx
c001eaa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa6:	83 ec 0c             	sub    esp,0xc
c001eaa9:	50                   	push   eax
c001eaaa:	e8 e3 ce fe ff       	call   c000b992 <Device::~Device()>
c001eaaf:	83 c4 10             	add    esp,0x10
c001eab2:	90                   	nop
c001eab3:	83 c4 0c             	add    esp,0xc
c001eab6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001eab8 <IOAPIC::~IOAPIC()>:
c001eab8:	83 ec 0c             	sub    esp,0xc
c001eabb:	83 ec 0c             	sub    esp,0xc
c001eabe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eac2:	e8 cd ff ff ff       	call   c001ea94 <IOAPIC::~IOAPIC()>
c001eac7:	83 c4 10             	add    esp,0x10
c001eaca:	83 ec 08             	sub    esp,0x8
c001eacd:	68 68 01 00 00       	push   0x168
c001ead2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ead6:	e8 82 ba fe ff       	call   c000a55d <operator delete(void*, unsigned long)>
c001eadb:	83 c4 10             	add    esp,0x10
c001eade:	83 c4 0c             	add    esp,0xc
c001eae1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001eae4 <APICTimer::~APICTimer()>:
c001eae4:	83 ec 0c             	sub    esp,0xc
c001eae7:	ba 90 16 02 c0       	mov    edx,0xc0021690
c001eaec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf0:	89 10                	mov    DWORD PTR [eax],edx
c001eaf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf6:	83 ec 0c             	sub    esp,0xc
c001eaf9:	50                   	push   eax
c001eafa:	e8 81 e8 fe ff       	call   c000d380 <Timer::~Timer()>
c001eaff:	83 c4 10             	add    esp,0x10
c001eb02:	90                   	nop
c001eb03:	83 c4 0c             	add    esp,0xc
c001eb06:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001eb08 <APICTimer::~APICTimer()>:
c001eb08:	83 ec 0c             	sub    esp,0xc
c001eb0b:	83 ec 0c             	sub    esp,0xc
c001eb0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb12:	e8 cd ff ff ff       	call   c001eae4 <APICTimer::~APICTimer()>
c001eb17:	83 c4 10             	add    esp,0x10
c001eb1a:	83 ec 08             	sub    esp,0x8
c001eb1d:	68 60 01 00 00       	push   0x160
c001eb22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb26:	e8 32 ba fe ff       	call   c000a55d <operator delete(void*, unsigned long)>
c001eb2b:	83 c4 10             	add    esp,0x10
c001eb2e:	83 c4 0c             	add    esp,0xc
c001eb31:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001eb34 <PIT::~PIT()>:
c001eb34:	83 ec 0c             	sub    esp,0xc
c001eb37:	ba e0 16 02 c0       	mov    edx,0xc00216e0
c001eb3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb40:	89 10                	mov    DWORD PTR [eax],edx
c001eb42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb46:	83 ec 0c             	sub    esp,0xc
c001eb49:	50                   	push   eax
c001eb4a:	e8 31 e8 fe ff       	call   c000d380 <Timer::~Timer()>
c001eb4f:	83 c4 10             	add    esp,0x10
c001eb52:	90                   	nop
c001eb53:	83 c4 0c             	add    esp,0xc
c001eb56:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001eb58 <PIT::~PIT()>:
c001eb58:	83 ec 0c             	sub    esp,0xc
c001eb5b:	83 ec 0c             	sub    esp,0xc
c001eb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb62:	e8 cd ff ff ff       	call   c001eb34 <PIT::~PIT()>
c001eb67:	83 c4 10             	add    esp,0x10
c001eb6a:	83 ec 08             	sub    esp,0x8
c001eb6d:	68 5c 01 00 00       	push   0x15c
c001eb72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb76:	e8 e2 b9 fe ff       	call   c000a55d <operator delete(void*, unsigned long)>
c001eb7b:	83 c4 10             	add    esp,0x10
c001eb7e:	83 c4 0c             	add    esp,0xc
c001eb81:	c3                   	ret    

Disassembly of section userkernel:

c0022000 <KiDefaultSignalHandlerAbort(int)>:
c0022000:	57                   	push   edi
c0022001:	b9 07 00 00 00       	mov    ecx,0x7
c0022006:	56                   	push   esi
c0022007:	be 35 05 02 c0       	mov    esi,0xc0020535
c002200c:	83 ec 24             	sub    esp,0x24
c002200f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022013:	fc                   	cld    
c0022014:	8d 44 24 04          	lea    eax,[esp+0x4]
c0022018:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002201a:	50                   	push   eax
c002201b:	6a 00                	push   0x0
c002201d:	6a 38                	push   0x38
c002201f:	6a 01                	push   0x1
c0022021:	e8 2c 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0022026:	83 c4 34             	add    esp,0x34
c0022029:	5e                   	pop    esi
c002202a:	5f                   	pop    edi
c002202b:	c3                   	ret    

c002202c <KiDefaultSignalHandlerTerminate(int)>:
c002202c:	57                   	push   edi
c002202d:	b9 08 00 00 00       	mov    ecx,0x8
c0022032:	56                   	push   esi
c0022033:	be 51 05 02 c0       	mov    esi,0xc0020551
c0022038:	83 ec 24             	sub    esp,0x24
c002203b:	89 e7                	mov    edi,esp
c002203d:	fc                   	cld    
c002203e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022040:	54                   	push   esp
c0022041:	6a 00                	push   0x0
c0022043:	6a 37                	push   0x37
c0022045:	6a 01                	push   0x1
c0022047:	e8 06 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002204c:	83 c4 34             	add    esp,0x34
c002204f:	5e                   	pop    esi
c0022050:	5f                   	pop    edi
c0022051:	c3                   	ret    

c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0022052:	53                   	push   ebx
c0022053:	83 ec 10             	sub    esp,0x10
c0022056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002205a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002205e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022066:	cd 60                	int    0x60
c0022068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002206c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022078:	83 c4 10             	add    esp,0x10
c002207b:	5b                   	pop    ebx
c002207c:	c3                   	ret    

Disassembly of section align_previous:

c0023000 <DO_NOT_DELETE()>:
c0023000:	c3                   	ret    
