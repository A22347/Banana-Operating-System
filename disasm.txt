
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 d4 fa 01 c0       	mov    eax,0xc001fad4
c0000025:	3d d4 fa 01 c0       	cmp    eax,0xc001fad4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 d4 fa 01 c0       	push   0xc001fad4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 d4 fa 01 c0       	mov    eax,0xc001fad4
c0000051:	2d d4 fa 01 c0       	sub    eax,0xc001fad4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 d4 fa 01 c0       	push   0xc001fad4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 10 02 c0 00 	cmp    BYTE PTR ds:0xc00210c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb c8 cd 01 c0       	mov    ebx,0xc001cdc8
c0000097:	81 eb c4 cd 01 c0    	sub    ebx,0xc001cdc4
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be c4 cd 01 c0       	mov    esi,0xc001cdc4
c00000a6:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 10 02 c0       	mov    ds:0xc00210c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 d4 fa 01 c0       	push   0xc001fad4
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 10 02 c0 01 	mov    BYTE PTR ds:0xc00210c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 10 02 c0       	push   0xc00210c8
c0000108:	68 d4 fa 01 c0       	push   0xc001fad4
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 58 2d 01 00       	call   c0013008 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 46 a0 00 00       	call   c000a30e <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 36 2d 01 00       	call   c0013008 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 3f 32 01 00       	call   c0013530 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 8e 38 01 00       	call   c0013b88 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 1e 02 c0 	lgdtd  ds:0xc0021ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 34 fe 00 00       	jmp    c00101b6 <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 10 02 c0       	mov    ds:0xc00210e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 10 02 c0    	mov    DWORD PTR ds:0xc00210e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 10 02 c0    	mov    ebx,DWORD PTR ds:0xc00210e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 e0 cd 01 c0 02 	test   BYTE PTR [edx-0x3ffe3220],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 e0 cd 01 c0 01 	test   BYTE PTR [edx-0x3ffe3220],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 e0 cd 01 c0 08 	test   BYTE PTR [edx-0x3ffe3220],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 e0 cd 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3220],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 e0 cd 01 c0 01 	test   BYTE PTR [edx-0x3ffe3220],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 11 02 c0    	mov    ecx,DWORD PTR ds:0xc0021100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 11 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 11 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 11 02 c0    	mov    ecx,DWORD PTR ds:0xc002113c
c0000d3d:	c7 42 0c 34 11 02 c0 	mov    DWORD PTR [edx+0xc],0xc0021134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 11 02 c0 02 	test   BYTE PTR ds:0xc0021100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 11 02 c0    	mov    edi,DWORD PTR ds:0xc0021100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 11 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 11 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 11 02 c0 	lea    edx,[eax*8-0x3ffdeecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 11 02 c0    	mov    ebx,DWORD PTR ds:0xc0021140
c00010bf:	81 fb 34 11 02 c0    	cmp    ebx,0xc0021134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 11 02 c0       	cmp    eax,0xc0021134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 11 02 c0    	cmp    DWORD PTR ds:0xc0021130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 11 02 c0       	mov    ds:0xc002113c,eax
c00010fb:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c0001100:	a3 30 11 02 c0       	mov    ds:0xc0021130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c000110e:	c7 40 0c 34 11 02 c0 	mov    DWORD PTR [eax+0xc],0xc0021134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 10 02 c0 	lea    ebp,[edx*4-0x3ffdef08]
c000115f:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 11 02 c0 	lea    ecx,[edx*4-0x3ffdef00]
c000117a:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 14 02 c0 	or     DWORD PTR [edi*4-0x3ffdebcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 11 02 c0 	lea    eax,[eax*8-0x3ffdeecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,ecx
c0001234:	89 0d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,ecx
c000123a:	c7 41 08 34 11 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0021134
c0001241:	c7 41 0c 34 11 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0021134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 11 02 c0 	lea    edx,[ecx*8-0x3ffdeed4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 11 02 c0 	lea    edx,[eax*4-0x3ffdeed4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 14 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdebcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edi
c0001307:	89 3d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,edi
c000130d:	c7 47 08 34 11 02 c0 	mov    DWORD PTR [edi+0x8],0xc0021134
c0001314:	c7 47 0c 34 11 02 c0 	mov    DWORD PTR [edi+0xc],0xc0021134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 11 02 c0    	mov    DWORD PTR ds:0xc0021130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 11 02 c0       	mov    edx,0xc0021100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 14 02 c0    	mov    ebx,DWORD PTR ds:0xc0021454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 14 02 c0    	mov    DWORD PTR ds:0xc0021454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 14 02 c0    	push   DWORD PTR ds:0xc002145c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 14 02 c0       	mov    eax,ds:0xc002145c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 11 02 c0 00 	cmp    DWORD PTR ds:0xc002112c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 11 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 11 02 c0       	mov    eax,0xc0021134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 14 02 c0       	cmp    eax,0xc002142c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 14 02 c0       	mov    eax,ds:0xc0021468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 e4 ce 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe311c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 11 02 c0       	mov    eax,ds:0xc0021100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 11 02 c0       	mov    ds:0xc0021100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 14 02 c0    	mov    DWORD PTR ds:0xc0021444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 14 02 c0    	mov    DWORD PTR ds:0xc0021448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 14 02 c0    	mov    DWORD PTR ds:0xc002144c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 2e 52 01 00       	jmp    c0016f18 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 5c 52 01 00       	jmp    c0016f5c <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 81 52 01 00       	jmp    c0016fa0 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 40 d0 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2fc0]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 40 d0 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2fc0]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba dc ef 01 c0       	mov    edx,0xc001efdc
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba fc ce 01 c0       	mov    edx,0xc001cefc
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 14 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdeb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 14 02 c0    	mov    ax,ds:0xc0021480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 14 02 c0    	mov    ds:0xc0021480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 02 cf 01 c0       	mov    eax,0xc001cf02
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad c0 cf 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3040]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 0b cf 01 c0       	mov    eax,0xc001cf0b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 40 d0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2fc0]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 14 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 14 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 90 cf 01 c0       	mov    eax,0xc001cf90
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 14 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 80 cf 01 c0       	mov    ebx,0xc001cf80
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 60 cf 01 c0       	mov    edx,0xc001cf60
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 70 cf 01 c0       	mov    edx,0xc001cf70
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 12 cf 01 c0       	mov    edx,0xc001cf12
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 1e cf 01 c0       	mov    edx,0xc001cf1e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba 32 cf 01 c0       	mov    edx,0xc001cf32
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 60 d3 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d360
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 60 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d360
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 60 d1 01 c0       	mov    eax,0xc001d160
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 a0 d0 01 c0       	mov    eax,0xc001d0a0
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 60 d0 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2fa0]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 20 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdefe0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 80 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdef80]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 d0 15 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdea30],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 60 10 02 c0 	movsx  eax,BYTE PTR ds:0xc0021060
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 75 18 01 00       	call   c00177f4 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 80 10 02 c0       	mov    eax,0xc0021080
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 20 10 02 c0       	mov    eax,0xc0021020
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 b4 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021eb4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 60 d4 01 c0       	push   0xc001d460
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 80 1e 02 c0       	mov    ecx,0xc0021e80
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 40 15 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdeac0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdeac0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 44 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeabc],esi
c000634e:	89 87 40 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeac0],eax
c0006354:	c7 87 48 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdeab8],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 d0 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdea30],0x0
c0006370:	89 87 4c 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeab4],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 40 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeac0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 d0 15 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdea30]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c00063e9:	8b 8d 4c 15 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdeab4]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 40 15 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdeac0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 20 10 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdefe0]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 48 15 02 c0    	add    DWORD PTR [ebp-0x3ffdeab8],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 40 15 02 c0    	lea    ecx,[ebp-0x3ffdeac0]
c00064e1:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 4c 15 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdeab4]
c000651f:	05 40 15 02 c0       	add    eax,0xc0021540
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 48 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab8]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 40 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdeac0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb d0 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdea30],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 48 15 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdeab8]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 40 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdeac0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba d0 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdea30],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 4c 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab4]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 40 15 02 c0    	lea    esi,[eax-0x3ffdeac0]
c00065e4:	83 b8 40 15 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdeac0],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 48 15 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdeab8]
c0006653:	81 c2 40 15 02 c0    	add    edx,0xc0021540
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 58 15 02 c0    	lea    ebp,[eax-0x3ffdeaa8]
c00066b9:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 58 15 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdeaa8],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 60 d4 01 c0       	push   0xc001d460
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 53 15 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdeaad],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 50 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeab0],eax
c000678f:	89 91 54 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeaac],edx
c0006795:	81 c1 40 15 02 c0    	add    ecx,0xc0021540
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 50 15 02 c0       	add    eax,0xc0021550
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 60 10 02 c0       	mov    ds:0xc0021060,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 b4 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb4,0x0
c00067df:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 63 d4 01 c0       	push   0xc001d463
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 b4 1e 02 c0       	mov    ds:0xc0021eb4,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 6a d4 01 c0       	push   0xc001d46a
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 80 10 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdef80]
c000687d:	bf 80 1e 02 c0       	mov    edi,0xc0021e80
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 82 1e 02 c0       	mov    eax,0xc0021e82
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 a8 1e 02 c0       	mov    ds:0xc0021ea8,eax
c00068a0:	b8 8a 1e 02 c0       	mov    eax,0xc0021e8a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 a4 1e 02 c0       	mov    ds:0xc0021ea4,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 40 15 02 c0       	push   0xc0021540
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0021540,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 b0 1e 02 c0       	mov    ds:0xc0021eb0,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 20 15 02 c0       	mov    ds:0xc0021520,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 80 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdef80],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 20 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdefe0],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 80 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdef80]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 20 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdefe0]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 b0 1e 02 c0       	mov    eax,ds:0xc0021eb0
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 20 15 02 c0       	mov    eax,ds:0xc0021520
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 20 15 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021520,0x0
c00069a9:	c7 05 b0 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb0,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 ce 50 00 00       	call   c000baa6 <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 71 d4 01 c0       	push   0xc001d471
c0006a09:	e8 45 91 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0006a28:	50                   	push   eax
c0006a29:	68 8a d4 01 c0       	push   0xc001d48a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 22 c9 00 00       	call   c0013358 <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 35 cb 00 00       	call   c0013580 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 90 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025190
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 d4 3f 01 c0       	push   0xc0013fd4
c0006a5a:	52                   	push   edx
c0006a5b:	e8 20 cb 00 00       	call   c0013580 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 48 51 02 c0       	mov    ds:0xc0025148,eax
c0006a68:	68 88 d5 01 c0       	push   0xc001d588
c0006a6d:	c6 05 bd 1e 02 c0 01 	mov    BYTE PTR ds:0xc0021ebd,0x1
c0006a74:	e8 da 90 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c0006a79:	e8 35 d9 00 00       	call   c00143b3 <Vm::initialise8086()>
c0006a7e:	e8 69 3e 00 00       	call   c000a8ec <Fs::initVFS()>
c0006a83:	c7 04 24 97 d4 01 c0 	mov    DWORD PTR [esp],0xc001d497
c0006a8a:	e8 c4 90 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c0006a8f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 88 d5 01 c0       	push   0xc001d588
c0006aae:	e8 a0 90 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c0006ab3:	e8 76 95 00 00       	call   c001002e <Krnl::loadSystemEnv()>
c0006ab8:	e8 d3 97 00 00       	call   c0010290 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 b1 d4 01 c0       	push   0xc001d4b1
c0006ac7:	68 ba d4 01 c0       	push   0xc001d4ba
c0006acc:	e8 2d ae 00 00       	call   c00118fe <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 1f 49 00 00       	call   c000b3f8 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 ac d5 01 c0 	mov    DWORD PTR [esp],0xc001d5ac
c0006ae0:	e8 6e 90 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 ad 4f 00 00       	call   c000baa4 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 c2 d4 01 c0 	mov    DWORD PTR [esp],0xc001d4c2
c0006afe:	e8 50 90 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 d3 d4 01 c0       	push   0xc001d4d3
c0006b12:	e8 5c c2 00 00       	call   c0012d73 <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 84 c4 00 00       	call   c0012fa4 <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 6f ce 00 00       	call   c001399c <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 ef d4 01 c0       	push   0xc001d4ef
c0006b41:	50                   	push   eax
c0006b42:	e8 d9 4f 00 00       	call   c000bb20 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba f8 d5 01 c0       	mov    edx,0xc001d5f8
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 d1 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 95 51 01 00       	call   c001bdc6 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 14 84 00 00       	call   c000f080 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 ed 83 00 00       	call   c000f080 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 cb 83 00 00       	call   c000f080 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 a9 83 00 00       	call   c000f080 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 d0 1e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0021ed0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 b7 82 00 00       	call   c000effc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 92 82 00 00       	call   c000effc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 ff 4f 01 00       	call   c001bd80 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 fc 4c 01 00       	call   c001baa0 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 ae 82 00 00       	call   c000f080 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 f8 d4 01 c0       	push   0xc001d4f8
c0006e14:	e8 b2 93 00 00       	call   c00101cb <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 fe d4 01 c0       	push   0xc001d4fe
c0006e4c:	e8 7a 93 00 00       	call   c00101cb <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 5f 7c 00 00       	jmp    c000eaf8 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 d0 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed0,0x4
c0006ee8:	68 04 d5 01 c0       	push   0xc001d504
c0006eed:	0f 94 05 40 f7 01 c0 	sete   BYTE PTR ds:0xc001f740
c0006ef4:	e8 5a 8c 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 81 77 00 00       	call   c000e690 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 6a 4a 00 00       	call   c000b988 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 1c d5 01 c0 	mov    DWORD PTR [esp],0xc001d51c
c0006f37:	e8 17 8c 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 e6 81 00 00       	call   c000f138 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 27 4a 00 00       	call   c000b988 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 cc d5 01 c0       	push   0xc001d5cc
c0006f7e:	e8 d0 8b 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c0006f83:	e8 62 e5 00 00       	call   c00154ea <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 36 d5 01 c0 	mov    DWORD PTR [esp],0xc001d536
c0006f8f:	e8 bf 8b 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 f8 c6 00 00       	call   c0013698 <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 51 d5 01 c0       	push   0xc001d551
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 59 35 00 00       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 62 d5 01 c0       	push   0xc001d562
c000700e:	e8 b8 91 00 00       	call   c00101cb <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 6f d5 01 c0       	push   0xc001d56f
c0007023:	e8 a3 91 00 00       	call   c00101cb <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 79 d5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d579
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 8c 91 00 00       	jmp    c00101cb <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 c2 1e 02 c0       	mov    ds:0xc0021ec2,eax
c00070cf:	66 89 15 c0 1e 02 c0 	mov    WORD PTR ds:0xc0021ec0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007217:	48                   	dec    eax
c0007218:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 9f df 00 00       	call   c00151c4 <HalSystemIdle()>
c0007225:	e8 58 51 01 00       	call   c001c382 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 c8 1e 02 c0 ff 07 	mov    WORD PTR ds:0xc0021ec8,0x7ff
c000731d:	a3 ca 1e 02 c0       	mov    ds:0xc0021eca,eax
c0007322:	0f 01 1d c8 1e 02 c0 	lidtd  ds:0xc0021ec8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 30 bb 01 c0       	push   0xc001bb30
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 40 bb 01 c0       	push   0xc001bb40
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 4a bb 01 c0       	push   0xc001bb4a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 54 bb 01 c0       	push   0xc001bb54
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 5e bb 01 c0       	push   0xc001bb5e
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 68 bb 01 c0       	push   0xc001bb68
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 72 bb 01 c0       	push   0xc001bb72
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 7c bb 01 c0       	push   0xc001bb7c
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 86 bb 01 c0       	push   0xc001bb86
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 8e bb 01 c0       	push   0xc001bb8e
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 98 bb 01 c0       	push   0xc001bb98
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 a0 bb 01 c0       	push   0xc001bba0
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 a8 bb 01 c0       	push   0xc001bba8
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 b0 bb 01 c0       	push   0xc001bbb0
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 b8 bb 01 c0       	push   0xc001bbb8
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 c0 bb 01 c0       	push   0xc001bbc0
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 ca bb 01 c0       	push   0xc001bbca
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 d4 bb 01 c0       	push   0xc001bbd4
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 de bb 01 c0       	push   0xc001bbde
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 78 bc 01 c0       	push   0xc001bc78
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 7f bc 01 c0       	push   0xc001bc7f
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 6a bc 01 c0       	push   0xc001bc6a
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 71 bc 01 c0       	push   0xc001bc71
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 e8 bb 01 c0       	push   0xc001bbe8
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 f2 bb 01 c0       	push   0xc001bbf2
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 fc bb 01 c0       	push   0xc001bbfc
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 06 bc 01 c0       	push   0xc001bc06
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 10 bc 01 c0       	push   0xc001bc10
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 1a bc 01 c0       	push   0xc001bc1a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 24 bc 01 c0       	push   0xc001bc24
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 2e bc 01 c0       	push   0xc001bc2e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 38 bc 01 c0       	push   0xc001bc38
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 42 bc 01 c0       	push   0xc001bc42
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 4c bc 01 c0       	push   0xc001bc4c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 56 bc 01 c0       	push   0xc001bc56
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 60 bc 01 c0       	push   0xc001bc60
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 11 bd 01 c0       	push   0xc001bd11
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 1b bd 01 c0       	push   0xc001bd1b
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 25 bd 01 c0       	push   0xc001bd25
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 2f bd 01 c0       	push   0xc001bd2f
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 39 bd 01 c0       	push   0xc001bd39
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 43 bd 01 c0       	push   0xc001bd43
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 4d bd 01 c0       	push   0xc001bd4d
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 57 bd 01 c0       	push   0xc001bd57
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007614:	e8 3b 24 00 00       	call   c0009a54 <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 99 15 00 00       	call   c0008bd0 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 86 bb 01 c0       	push   0xc001bb86
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 ce 15 00 00       	call   c0008c14 <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 2c f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f72c
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 b0 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fb0
c00076c2:	8b 3d 2c f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f72c
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 76 22 00 00       	call   c0009950 <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 2c f7 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f72c,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 2c f7 01 c0       	mov    eax,ds:0xc001f72c
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 1c d6 01 c0       	push   0xc001d61c
c000770e:	e8 37 2e 00 00       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 4c d6 01 c0       	push   0xc001d64c
c000772d:	e8 99 8a 00 00       	call   c00101cb <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 51 d6 01 c0       	push   0xc001d651
c0007743:	e8 83 8a 00 00       	call   c00101cb <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007763:	48                   	dec    eax
c0007764:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007781:	e8 ce 22 00 00       	call   c0009a54 <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007797:	e8 0a 1f 00 00       	call   c00096a6 <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 d0 1e 02 c0       	mov    ds:0xc0021ed0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 58 d6 01 c0       	push   0xc001d658
c0007862:	e8 e3 2c 00 00       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0007867:	e8 79 82 00 00       	call   c000fae5 <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 c4 1b 00 00       	call   c000944c <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 91 1e 00 00       	call   c0009724 <VAS::VAS()>
c0007893:	89 1d b0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fb0,ebx
c0007899:	e8 7c 4a 01 00       	call   c001c31a <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 b8 1e 02 c0    	mov    DWORD PTR ds:0xc0021eb8,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 1d 1f 00 00       	call   c00097ec <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb ec 1e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffde114],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 70 d6 01 c0       	push   0xc001d670
c000792c:	e8 9a 88 00 00       	call   c00101cb <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 ec 1e 02 c0    	lea    edx,[ebp-0x3ffde114]
c000796e:	8d 84 05 ed 1e 02 c0 	lea    eax,[ebp+eax*1-0x3ffde113]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d e4 1e 02 c0    	add    DWORD PTR ds:0xc0021ee4,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 70 d6 01 c0       	push   0xc001d670
c0007993:	e8 33 88 00 00       	call   c00101cb <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 e4 1e 02 c0    	sub    DWORD PTR ds:0xc0021ee4,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 ec 1e 02 c0       	add    eax,0xc0021eec
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 30 f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f730
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 30 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f730
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 30 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f730
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d e4 1e 02 c0    	dec    DWORD PTR ds:0xc0021ee4
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 15 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d715
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 48 87 00 00       	jmp    c00101cb <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 d8 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021ed8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d d8 1e 02 c0    	mov    DWORD PTR ds:0xc0021ed8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 d8 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ed8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 fc 1e 02 c0 01 	xor    BYTE PTR ds:0xc0021efc,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 3e 27 00 00       	call   c000a22e <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 98 d6 01 c0       	push   0xc001d698
c0007aff:	e8 c7 86 00 00       	call   c00101cb <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d d8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ed8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 d8 1e 02 c0       	mov    eax,ds:0xc0021ed8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 e4 1e 02 c0    	inc    DWORD PTR ds:0xc0021ee4
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007b99:	48                   	dec    eax
c0007b9a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d dc 1e 02 c0    	cmp    DWORD PTR ds:0xc0021edc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d dc 1e 02 c0    	mov    DWORD PTR ds:0xc0021edc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 ec 1e 02 c0       	push   0xc0021eec
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 2b d7 01 c0       	push   0xc001d72b
c0007c18:	e8 2d 29 00 00       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 c8 d6 01 c0       	push   0xc001d6c8
c0007ca4:	e8 a1 28 00 00       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 ec d6 01 c0       	push   0xc001d6ec
c0007d40:	e8 05 28 00 00       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 e8 1e 02 c0    	add    eax,DWORD PTR ds:0xc0021ee8
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 51 d7 01 c0       	push   0xc001d751
c0007d76:	e8 cf 27 00 00       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 43 d7 01 c0       	push   0xc001d743
c0007de5:	e8 e1 83 00 00       	call   c00101cb <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 e8 1e 02 c0 02 	add    DWORD PTR ds:0xc0021ee8,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba b0 d7 01 c0       	mov    edx,0xc001d7b0
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 5b 11 00 00       	call   c000902c <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 5a 25 00 00       	call   c000a454 <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 6d d7 01 c0       	push   0xc001d76d
c0007fa7:	e8 1f 82 00 00       	call   c00101cb <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007ff0:	e8 ab b7 00 00       	call   c00137a0 <schedule()>
c0007ff5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 73 41 01 00       	call   c001c200 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 8a d7 01 c0       	push   0xc001d78a
c00080a2:	e8 24 81 00 00       	call   c00101cb <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 7a 0d 00 00       	call   c0008e4a <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba b0 d7 01 c0       	mov    edx,0xc001d7b0
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba 44 d8 01 c0       	mov    edx,0xc001d844
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 e7 0e 00 00       	call   c000902c <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 e3 22 00 00       	call   c000a454 <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 1c 46 00 00       	call   c000c7a8 <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 ca e1 00 00       	call   c001637c <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d 60 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe08a0]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d 60 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe08a0]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 18 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe09e8]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 f0 f5 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0a10]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 ed de 00 00       	call   c0016208 <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 48 df 00 00       	jmp    c0016310 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 c4 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d7c4
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 b7 7d 00 00       	jmp    c00101cb <KePanic(char const*)>
c0008414:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 04 1f 02 c0    	mov    DWORD PTR ds:0xc0021f04,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 30 2e 00 00       	jmp    c000b39f <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be d2 d7 01 c0       	mov    esi,0xc001d7d2
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 5a da 00 00       	call   c0016310 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 3c 05 00 00       	call   c0008e4a <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba 44 d8 01 c0       	mov    edx,0xc001d844
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 0a 09 00 00       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 a0 0f 00 00       	call   c0009950 <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	89 f0                	mov    eax,esi
c0008a56:	84 c0                	test   al,al
c0008a58:	0f 84 45 01 00 00    	je     c0008ba3 <VgaText::receiveKey(unsigned char)+0x15d>
c0008a5e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a64:	3c 08                	cmp    al,0x8
c0008a66:	75 68                	jne    c0008ad0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a68:	83 ec 0c             	sub    esp,0xc
c0008a6b:	57                   	push   edi
c0008a6c:	e8 cf 7a ff ff       	call   c0000540 <strlen>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	85 c0                	test   eax,eax
c0008a76:	0f 84 be 00 00 00    	je     c0008b3a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a7c:	50                   	push   eax
c0008a7d:	50                   	push   eax
c0008a7e:	6a 08                	push   0x8
c0008a80:	53                   	push   ebx
c0008a81:	e8 7e fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a89:	e8 b2 7a ff ff       	call   c0000540 <strlen>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008a98:	3c 0d                	cmp    al,0xd
c0008a9a:	0f 95 c1             	setne  cl
c0008a9d:	3c 18                	cmp    al,0x18
c0008a9f:	0f 9e c2             	setle  dl
c0008aa2:	84 d1                	test   cl,dl
c0008aa4:	74 17                	je     c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aa6:	83 e8 08             	sub    eax,0x8
c0008aa9:	3c 02                	cmp    al,0x2
c0008aab:	76 10                	jbe    c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aad:	50                   	push   eax
c0008aae:	50                   	push   eax
c0008aaf:	68 e3 d7 01 c0       	push   0xc001d7e3
c0008ab4:	53                   	push   ebx
c0008ab5:	e8 7c fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	83 ec 0c             	sub    esp,0xc
c0008ac0:	57                   	push   edi
c0008ac1:	e8 7a 7a ff ff       	call   c0000540 <strlen>
c0008ac6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ace:	eb 67                	jmp    c0008b37 <VgaText::receiveKey(unsigned char)+0xf1>
c0008ad0:	3c 18                	cmp    al,0x18
c0008ad2:	0f 96 c2             	setbe  dl
c0008ad5:	3c 0d                	cmp    al,0xd
c0008ad7:	0f 95 c0             	setne  al
c0008ada:	84 c2                	test   dl,al
c0008adc:	74 30                	je     c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ade:	8d 46 f7             	lea    eax,[esi-0x9]
c0008ae1:	3c 01                	cmp    al,0x1
c0008ae3:	76 29                	jbe    c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ae5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ae8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aeb:	68 e9 d7 01 c0       	push   0xc001d7e9
c0008af0:	53                   	push   ebx
c0008af1:	e8 b2 fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008af6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af9:	8d 46 40             	lea    eax,[esi+0x40]
c0008afc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aff:	0f b6 c0             	movzx  eax,al
c0008b02:	50                   	push   eax
c0008b03:	53                   	push   ebx
c0008b04:	e8 2d fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b09:	83 c4 20             	add    esp,0x20
c0008b0c:	eb 11                	jmp    c0008b1f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b0e:	89 f0                	mov    eax,esi
c0008b10:	51                   	push   ecx
c0008b11:	0f be c0             	movsx  eax,al
c0008b14:	51                   	push   ecx
c0008b15:	50                   	push   eax
c0008b16:	53                   	push   ebx
c0008b17:	e8 e8 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b24:	89 f0                	mov    eax,esi
c0008b26:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b2a:	52                   	push   edx
c0008b2b:	52                   	push   edx
c0008b2c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b30:	50                   	push   eax
c0008b31:	57                   	push   edi
c0008b32:	e8 89 7c ff ff       	call   c00007c0 <strcat>
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	89 f0                	mov    eax,esi
c0008b3c:	3c 03                	cmp    al,0x3
c0008b3e:	0f 94 c2             	sete   dl
c0008b41:	3c 0a                	cmp    al,0xa
c0008b43:	0f 94 c0             	sete   al
c0008b46:	08 c2                	or     dl,al
c0008b48:	75 09                	jne    c0008b53 <VgaText::receiveKey(unsigned char)+0x10d>
c0008b4a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b51:	74 50                	je     c0008ba3 <VgaText::receiveKey(unsigned char)+0x15d>
c0008b53:	83 ec 0c             	sub    esp,0xc
c0008b56:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b5c:	53                   	push   ebx
c0008b5d:	e8 de 79 ff ff       	call   c0000540 <strlen>
c0008b62:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b65:	89 c6                	mov    esi,eax
c0008b67:	e8 d4 79 ff ff       	call   c0000540 <strlen>
c0008b6c:	83 c4 10             	add    esp,0x10
c0008b6f:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b73:	3d 80 00 00 00       	cmp    eax,0x80
c0008b78:	76 10                	jbe    c0008b8a <VgaText::receiveKey(unsigned char)+0x144>
c0008b7a:	83 ec 0c             	sub    esp,0xc
c0008b7d:	68 ef d7 01 c0       	push   0xc001d7ef
c0008b82:	e8 44 76 00 00       	call   c00101cb <KePanic(char const*)>
c0008b87:	83 c4 10             	add    esp,0x10
c0008b8a:	50                   	push   eax
c0008b8b:	50                   	push   eax
c0008b8c:	57                   	push   edi
c0008b8d:	53                   	push   ebx
c0008b8e:	e8 2d 7c ff ff       	call   c00007c0 <strcat>
c0008b93:	83 c4 0c             	add    esp,0xc
c0008b96:	6a 30                	push   0x30
c0008b98:	6a 00                	push   0x0
c0008b9a:	57                   	push   edi
c0008b9b:	e8 30 79 ff ff       	call   c00004d0 <memset>
c0008ba0:	83 c4 10             	add    esp,0x10
c0008ba3:	83 c4 10             	add    esp,0x10
c0008ba6:	5b                   	pop    ebx
c0008ba7:	5e                   	pop    esi
c0008ba8:	5f                   	pop    edi
c0008ba9:	c3                   	ret    

c0008baa <VgaText::doUpdate()>:
c0008baa:	c3                   	ret    

c0008bab <newTerminal(char*)>:
c0008bab:	83 ec 28             	sub    esp,0x28
c0008bae:	68 34 01 00 00       	push   0x134
c0008bb3:	e8 01 ec ff ff       	call   c00077b9 <malloc>
c0008bb8:	5a                   	pop    edx
c0008bb9:	59                   	pop    ecx
c0008bba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bbe:	50                   	push   eax
c0008bbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bc3:	e8 32 fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bcc:	83 c4 2c             	add    esp,0x2c
c0008bcf:	c3                   	ret    

c0008bd0 <TSS::TSS()>:
c0008bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bd4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bdb:	90                   	nop
c0008bdc:	c3                   	ret    
c0008bdd:	90                   	nop
c0008bde:	66 90                	xchg   ax,ax

c0008be0 <TSS::setESP(unsigned long)>:
c0008be0:	55                   	push   ebp
c0008be1:	89 e5                	mov    ebp,esp
c0008be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008be6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008bec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008bef:	90                   	nop
c0008bf0:	5d                   	pop    ebp
c0008bf1:	c3                   	ret    
c0008bf2:	66 90                	xchg   ax,ax

c0008bf4 <TSS::flush()>:
c0008bf4:	55                   	push   ebp
c0008bf5:	89 e5                	mov    ebp,esp
c0008bf7:	83 ec 10             	sub    esp,0x10
c0008bfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bff:	83 c8 03             	or     eax,0x3
c0008c02:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008c06:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c0a:	66 89 d0             	mov    ax,dx
c0008c0d:	0f 00 d8             	ltr    ax
c0008c10:	90                   	nop
c0008c11:	c9                   	leave  
c0008c12:	c3                   	ret    
c0008c13:	90                   	nop

c0008c14 <TSS::setup(unsigned long, unsigned long)>:
c0008c14:	55                   	push   ebp
c0008c15:	89 e5                	mov    ebp,esp
c0008c17:	83 ec 18             	sub    esp,0x18
c0008c1a:	83 ec 0c             	sub    esp,0xc
c0008c1d:	6a 68                	push   0x68
c0008c1f:	e8 95 eb ff ff       	call   c00077b9 <malloc>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 c2                	mov    edx,eax
c0008c29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c35:	83 ec 04             	sub    esp,0x4
c0008c38:	6a 68                	push   0x68
c0008c3a:	6a 00                	push   0x0
c0008c3c:	50                   	push   eax
c0008c3d:	e8 8e 78 ff ff       	call   c00004d0 <memset>
c0008c42:	83 c4 10             	add    esp,0x10
c0008c45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c57:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c63:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c66:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c6f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c87:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c93:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c9f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008ca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cab:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cb7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cc6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ccc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ccf:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cdc:	0f 20 da             	mov    edx,cr3
c0008cdf:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008ce2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008ce5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ceb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cee:	83 ec 08             	sub    esp,0x8
c0008cf1:	50                   	push   eax
c0008cf2:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cf5:	50                   	push   eax
c0008cf6:	e8 45 e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008cfb:	83 c4 10             	add    esp,0x10
c0008cfe:	83 ec 08             	sub    esp,0x8
c0008d01:	6a 68                	push   0x68
c0008d03:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008d06:	50                   	push   eax
c0008d07:	e8 50 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d0c:	83 c4 10             	add    esp,0x10
c0008d0f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d13:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d16:	83 e0 0f             	and    eax,0xf
c0008d19:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d1c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d1f:	83 c8 40             	or     eax,0x40
c0008d22:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d25:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d2a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d30:	05 78 01 00 00       	add    eax,0x178
c0008d35:	83 ec 04             	sub    esp,0x4
c0008d38:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d3b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d3e:	50                   	push   eax
c0008d3f:	e8 4c e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d44:	83 c4 10             	add    esp,0x10
c0008d47:	89 c2                	mov    edx,eax
c0008d49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d4c:	89 10                	mov    DWORD PTR [eax],edx
c0008d4e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d53:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d59:	05 78 01 00 00       	add    eax,0x178
c0008d5e:	83 ec 0c             	sub    esp,0xc
c0008d61:	50                   	push   eax
c0008d62:	e8 53 e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d67:	83 c4 10             	add    esp,0x10
c0008d6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d6f:	c9                   	leave  
c0008d70:	c3                   	ret    
c0008d71:	90                   	nop

c0008d72 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d7d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d82:	75 08                	jne    c0008d8c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d84:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d8a:	eb 38                	jmp    c0008dc4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d8c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d91:	75 17                	jne    c0008daa <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d98:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d9b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008da1:	8b 10                	mov    edx,DWORD PTR [eax]
c0008da3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008da7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008daa:	89 c1                	mov    ecx,eax
c0008dac:	83 e1 fd             	and    ecx,0xfffffffd
c0008daf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008db5:	74 cd                	je     c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008db7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008dbc:	83 e0 ef             	and    eax,0xffffffef
c0008dbf:	83 f8 08             	cmp    eax,0x8
c0008dc2:	76 c0                	jbe    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dc4:	31 c0                	xor    eax,eax
c0008dc6:	c3                   	ret    
c0008dc7:	90                   	nop

c0008dc8 <ReservedFilename::isAtty()>:
c0008dc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dcc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dcf:	31 c0                	xor    eax,eax
c0008dd1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dd7:	74 09                	je     c0008de2 <ReservedFilename::isAtty()+0x1a>
c0008dd9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008ddf:	0f 94 c0             	sete   al
c0008de2:	c3                   	ret    
c0008de3:	90                   	nop

c0008de4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008dec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008def:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008df3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df8:	75 08                	jne    c0008e02 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008dfa:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e00:	eb 3d                	jmp    c0008e3f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e02:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e07:	75 17                	jne    c0008e20 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e11:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e17:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e1d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e20:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e25:	75 04                	jne    c0008e2b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e27:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e29:	eb 14                	jmp    c0008e3f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e2b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e30:	74 c8                	je     c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e32:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e37:	83 e0 ef             	and    eax,0xffffffef
c0008e3a:	83 f8 08             	cmp    eax,0x8
c0008e3d:	76 bb                	jbe    c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e3f:	31 c0                	xor    eax,eax
c0008e41:	c3                   	ret    

c0008e42 <UnixFile::getFileDescriptor()>:
c0008e42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e49:	c3                   	ret    

c0008e4a <UnixFile::UnixFile(int)>:
c0008e4a:	53                   	push   ebx
c0008e4b:	83 ec 28             	sub    esp,0x28
c0008e4e:	ba 0c d9 01 c0       	mov    edx,0xc001d90c
c0008e53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e57:	89 10                	mov    DWORD PTR [eax],edx
c0008e59:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e61:	0f 8f 8c 01 00 00    	jg     c0008ff3 <UnixFile::UnixFile(int)+0x1a9>
c0008e67:	a1 a0 f7 01 c0       	mov    eax,ds:0xc001f7a0
c0008e6c:	8d 50 01             	lea    edx,[eax+0x1]
c0008e6f:	89 15 a0 f7 01 c0    	mov    DWORD PTR ds:0xc001f7a0,edx
c0008e75:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e79:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e7c:	83 ec 08             	sub    esp,0x8
c0008e7f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e83:	68 98 1f 02 c0       	push   0xc0021f98
c0008e88:	e8 5b 35 01 00       	call   c001c3e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e8d:	83 c4 10             	add    esp,0x10
c0008e90:	a0 94 1f 02 c0       	mov    al,ds:0xc0021f94
c0008e95:	83 f0 01             	xor    eax,0x1
c0008e98:	84 c0                	test   al,al
c0008e9a:	0f 84 54 01 00 00    	je     c0008ff4 <UnixFile::UnixFile(int)+0x1aa>
c0008ea0:	c6 05 94 1f 02 c0 01 	mov    BYTE PTR ds:0xc0021f94,0x1
c0008ea7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008eaf:	83 ec 0c             	sub    esp,0xc
c0008eb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008eb6:	e8 fe e8 ff ff       	call   c00077b9 <malloc>
c0008ebb:	83 c4 10             	add    esp,0x10
c0008ebe:	89 c3                	mov    ebx,eax
c0008ec0:	83 ec 08             	sub    esp,0x8
c0008ec3:	68 03 ff ff 0f       	push   0xfffff03
c0008ec8:	53                   	push   ebx
c0008ec9:	e8 2c 01 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008ece:	83 c4 10             	add    esp,0x10
c0008ed1:	89 1d 8c 1f 02 c0    	mov    DWORD PTR ds:0xc0021f8c,ebx
c0008ed7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008edf:	83 ec 0c             	sub    esp,0xc
c0008ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ee6:	e8 ce e8 ff ff       	call   c00077b9 <malloc>
c0008eeb:	83 c4 10             	add    esp,0x10
c0008eee:	89 c3                	mov    ebx,eax
c0008ef0:	83 ec 08             	sub    esp,0x8
c0008ef3:	68 01 ff ff 0f       	push   0xfffff01
c0008ef8:	53                   	push   ebx
c0008ef9:	e8 fc 00 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008efe:	83 c4 10             	add    esp,0x10
c0008f01:	89 1d 90 1f 02 c0    	mov    DWORD PTR ds:0xc0021f90,ebx
c0008f07:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f0f:	83 ec 0c             	sub    esp,0xc
c0008f12:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f16:	e8 9e e8 ff ff       	call   c00077b9 <malloc>
c0008f1b:	83 c4 10             	add    esp,0x10
c0008f1e:	89 c3                	mov    ebx,eax
c0008f20:	83 ec 08             	sub    esp,0x8
c0008f23:	68 00 ff ff 0f       	push   0xfffff00
c0008f28:	53                   	push   ebx
c0008f29:	e8 cc 00 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008f2e:	83 c4 10             	add    esp,0x10
c0008f31:	89 1d 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,ebx
c0008f37:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f3f:	83 ec 0c             	sub    esp,0xc
c0008f42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f46:	e8 6e e8 ff ff       	call   c00077b9 <malloc>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	89 c3                	mov    ebx,eax
c0008f50:	83 ec 08             	sub    esp,0x8
c0008f53:	68 02 ff ff 0f       	push   0xfffff02
c0008f58:	53                   	push   ebx
c0008f59:	e8 9c 00 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008f5e:	83 c4 10             	add    esp,0x10
c0008f61:	89 1d 88 1f 02 c0    	mov    DWORD PTR ds:0xc0021f88,ebx
c0008f67:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f6f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f74:	7f 7e                	jg     c0008ff4 <UnixFile::UnixFile(int)+0x1aa>
c0008f76:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f7e:	83 ec 0c             	sub    esp,0xc
c0008f81:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f85:	e8 2f e8 ff ff       	call   c00077b9 <malloc>
c0008f8a:	83 c4 10             	add    esp,0x10
c0008f8d:	89 c3                	mov    ebx,eax
c0008f8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f93:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f98:	83 ec 08             	sub    esp,0x8
c0008f9b:	50                   	push   eax
c0008f9c:	53                   	push   ebx
c0008f9d:	e8 58 00 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa9:	89 1c 85 60 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0a0],ebx
c0008fb0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fb8:	83 ec 0c             	sub    esp,0xc
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 f5 e7 ff ff       	call   c00077b9 <malloc>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 c3                	mov    ebx,eax
c0008fc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fcd:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fd2:	83 ec 08             	sub    esp,0x8
c0008fd5:	50                   	push   eax
c0008fd6:	53                   	push   ebx
c0008fd7:	e8 1e 00 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fe3:	89 1c 85 20 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0e0],ebx
c0008fea:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fee:	e9 7c ff ff ff       	jmp    c0008f6f <UnixFile::UnixFile(int)+0x125>
c0008ff3:	90                   	nop
c0008ff4:	83 c4 28             	add    esp,0x28
c0008ff7:	5b                   	pop    ebx
c0008ff8:	c3                   	ret    
c0008ff9:	90                   	nop

c0008ffa <ReservedFilename::ReservedFilename(int)>:
c0008ffa:	83 ec 0c             	sub    esp,0xc
c0008ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009001:	83 ec 08             	sub    esp,0x8
c0009004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009008:	50                   	push   eax
c0009009:	e8 3c fe ff ff       	call   c0008e4a <UnixFile::UnixFile(int)>
c000900e:	83 c4 10             	add    esp,0x10
c0009011:	ba 28 d9 01 c0       	mov    edx,0xc001d928
c0009016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000901a:	89 10                	mov    DWORD PTR [eax],edx
c000901c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009020:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009024:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009027:	90                   	nop
c0009028:	83 c4 0c             	add    esp,0xc
c000902b:	c3                   	ret    

c000902c <UnixFile::~UnixFile()>:
c000902c:	83 ec 1c             	sub    esp,0x1c
c000902f:	ba 0c d9 01 c0       	mov    edx,0xc001d90c
c0009034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009038:	89 10                	mov    DWORD PTR [eax],edx
c000903a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000903e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009041:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009046:	7f 73                	jg     c00090bb <UnixFile::~UnixFile()+0x8f>
c0009048:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009050:	83 ec 0c             	sub    esp,0xc
c0009053:	68 98 1f 02 c0       	push   0xc0021f98
c0009058:	e8 5f 34 01 00       	call   c001c4bc <LinkedList<UnixFile>::getFirstElement()>
c000905d:	83 c4 10             	add    esp,0x10
c0009060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009064:	83 ec 0c             	sub    esp,0xc
c0009067:	68 98 1f 02 c0       	push   0xc0021f98
c000906c:	e8 53 34 01 00       	call   c001c4c4 <LinkedList<UnixFile>::removeFirst()>
c0009071:	83 c4 10             	add    esp,0x10
c0009074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009078:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000907c:	74 40                	je     c00090be <UnixFile::~UnixFile()+0x92>
c000907e:	83 ec 08             	sub    esp,0x8
c0009081:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009085:	68 98 1f 02 c0       	push   0xc0021f98
c000908a:	e8 59 33 01 00       	call   c001c3e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000908f:	83 c4 10             	add    esp,0x10
c0009092:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009096:	8d 50 01             	lea    edx,[eax+0x1]
c0009099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000909d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00090a2:	0f 94 c0             	sete   al
c00090a5:	84 c0                	test   al,al
c00090a7:	74 a7                	je     c0009050 <UnixFile::~UnixFile()+0x24>
c00090a9:	83 ec 0c             	sub    esp,0xc
c00090ac:	68 e4 d8 01 c0       	push   0xc001d8e4
c00090b1:	e8 15 71 00 00       	call   c00101cb <KePanic(char const*)>
c00090b6:	83 c4 10             	add    esp,0x10
c00090b9:	eb 95                	jmp    c0009050 <UnixFile::~UnixFile()+0x24>
c00090bb:	90                   	nop
c00090bc:	eb 01                	jmp    c00090bf <UnixFile::~UnixFile()+0x93>
c00090be:	90                   	nop
c00090bf:	90                   	nop
c00090c0:	83 c4 1c             	add    esp,0x1c
c00090c3:	c3                   	ret    

c00090c4 <UnixFile::~UnixFile()>:
c00090c4:	83 ec 0c             	sub    esp,0xc
c00090c7:	83 ec 0c             	sub    esp,0xc
c00090ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ce:	e8 59 ff ff ff       	call   c000902c <UnixFile::~UnixFile()>
c00090d3:	83 c4 10             	add    esp,0x10
c00090d6:	83 ec 08             	sub    esp,0x8
c00090d9:	6a 0c                	push   0xc
c00090db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090df:	e8 70 13 00 00       	call   c000a454 <operator delete(void*, unsigned long)>
c00090e4:	83 c4 10             	add    esp,0x10
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <ReservedFilename::~ReservedFilename()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ba 28 d9 01 c0       	mov    edx,0xc001d928
c00090f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	50                   	push   eax
c0009102:	e8 25 ff ff ff       	call   c000902c <UnixFile::~UnixFile()>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	90                   	nop
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <ReservedFilename::~ReservedFilename()>:
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000911a:	e8 cd ff ff ff       	call   c00090ec <ReservedFilename::~ReservedFilename()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	83 ec 08             	sub    esp,0x8
c0009125:	6a 0c                	push   0xc
c0009127:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912b:	e8 24 13 00 00       	call   c000a454 <operator delete(void*, unsigned long)>
c0009130:	83 c4 10             	add    esp,0x10
c0009133:	83 c4 0c             	add    esp,0xc
c0009136:	c3                   	ret    

c0009137 <getFromFileDescriptor(int)>:
c0009137:	53                   	push   ebx
c0009138:	83 ec 08             	sub    esp,0x8
c000913b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000913f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009145:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000914b:	7f 2c                	jg     c0009179 <getFromFileDescriptor(int)+0x42>
c000914d:	83 ec 0c             	sub    esp,0xc
c0009150:	68 98 1f 02 c0       	push   0xc0021f98
c0009155:	e8 62 33 01 00       	call   c001c4bc <LinkedList<UnixFile>::getFirstElement()>
c000915a:	83 c4 10             	add    esp,0x10
c000915d:	85 c0                	test   eax,eax
c000915f:	75 04                	jne    c0009165 <getFromFileDescriptor(int)+0x2e>
c0009161:	31 c0                	xor    eax,eax
c0009163:	eb 6e                	jmp    c00091d3 <getFromFileDescriptor(int)+0x9c>
c0009165:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009168:	74 69                	je     c00091d3 <getFromFileDescriptor(int)+0x9c>
c000916a:	52                   	push   edx
c000916b:	52                   	push   edx
c000916c:	50                   	push   eax
c000916d:	68 98 1f 02 c0       	push   0xc0021f98
c0009172:	e8 ef 33 01 00       	call   c001c566 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009177:	eb e1                	jmp    c000915a <getFromFileDescriptor(int)+0x23>
c0009179:	a1 8c 1f 02 c0       	mov    eax,ds:0xc0021f8c
c000917e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009184:	74 4d                	je     c00091d3 <getFromFileDescriptor(int)+0x9c>
c0009186:	a1 90 1f 02 c0       	mov    eax,ds:0xc0021f90
c000918b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009191:	74 40                	je     c00091d3 <getFromFileDescriptor(int)+0x9c>
c0009193:	a1 88 1f 02 c0       	mov    eax,ds:0xc0021f88
c0009198:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000919e:	74 33                	je     c00091d3 <getFromFileDescriptor(int)+0x9c>
c00091a0:	a1 84 1f 02 c0       	mov    eax,ds:0xc0021f84
c00091a5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091ab:	74 26                	je     c00091d3 <getFromFileDescriptor(int)+0x9c>
c00091ad:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091b3:	83 f8 08             	cmp    eax,0x8
c00091b6:	77 09                	ja     c00091c1 <getFromFileDescriptor(int)+0x8a>
c00091b8:	8b 04 85 60 1f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde0a0]
c00091bf:	eb 12                	jmp    c00091d3 <getFromFileDescriptor(int)+0x9c>
c00091c1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091c7:	83 fb 08             	cmp    ebx,0x8
c00091ca:	77 95                	ja     c0009161 <getFromFileDescriptor(int)+0x2a>
c00091cc:	8b 04 9d 20 1f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde0e0]
c00091d3:	83 c4 08             	add    esp,0x8
c00091d6:	5b                   	pop    ebx
c00091d7:	c3                   	ret    

c00091d8 <__static_initialization_and_destruction_0(int, int)>:
c00091d8:	83 ec 0c             	sub    esp,0xc
c00091db:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091e0:	75 34                	jne    c0009216 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091e2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091ea:	75 2a                	jne    c0009216 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091ec:	83 ec 0c             	sub    esp,0xc
c00091ef:	68 98 1f 02 c0       	push   0xc0021f98
c00091f4:	e8 ad 31 01 00       	call   c001c3a6 <LinkedList<UnixFile>::LinkedList()>
c00091f9:	83 c4 10             	add    esp,0x10
c00091fc:	83 ec 04             	sub    esp,0x4
c00091ff:	68 28 f7 01 c0       	push   0xc001f728
c0009204:	68 98 1f 02 c0       	push   0xc0021f98
c0009209:	68 a4 c3 01 c0       	push   0xc001c3a4
c000920e:	e8 f1 11 00 00       	call   c000a404 <__cxa_atexit>
c0009213:	83 c4 10             	add    esp,0x10
c0009216:	90                   	nop
c0009217:	83 c4 0c             	add    esp,0xc
c000921a:	c3                   	ret    

c000921b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000921b:	83 ec 0c             	sub    esp,0xc
c000921e:	83 ec 08             	sub    esp,0x8
c0009221:	68 ff ff 00 00       	push   0xffff
c0009226:	6a 01                	push   0x1
c0009228:	e8 ab ff ff ff       	call   c00091d8 <__static_initialization_and_destruction_0(int, int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	83 c4 0c             	add    esp,0xc
c0009233:	c3                   	ret    

c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009234:	53                   	push   ebx
c0009235:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009239:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000923d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0009243:	89 c8                	mov    eax,ecx
c0009245:	d1 e8                	shr    eax,1
c0009247:	03 05 a8 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7a8
c000924d:	83 e1 01             	and    ecx,0x1
c0009250:	8a 10                	mov    dl,BYTE PTR [eax]
c0009252:	75 09                	jne    c000925d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009254:	83 e2 f0             	and    edx,0xfffffff0
c0009257:	09 da                	or     edx,ebx
c0009259:	88 10                	mov    BYTE PTR [eax],dl
c000925b:	5b                   	pop    ebx
c000925c:	c3                   	ret    
c000925d:	c1 e3 04             	shl    ebx,0x4
c0009260:	83 e2 0f             	and    edx,0xf
c0009263:	09 da                	or     edx,ebx
c0009265:	88 10                	mov    BYTE PTR [eax],dl
c0009267:	5b                   	pop    ebx
c0009268:	c3                   	ret    

c0009269 <Virt::getPageState(unsigned long)>:
c0009269:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000926d:	8b 0d a8 f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7a8
c0009273:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009279:	89 d0                	mov    eax,edx
c000927b:	d1 e8                	shr    eax,1
c000927d:	83 e2 01             	and    edx,0x1
c0009280:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009283:	75 04                	jne    c0009289 <Virt::getPageState(unsigned long)+0x20>
c0009285:	83 e0 0f             	and    eax,0xf
c0009288:	c3                   	ret    
c0009289:	c0 e8 04             	shr    al,0x4
c000928c:	c3                   	ret    

c000928d <Virt::allocateKernelVirtualPages(int)>:
c000928d:	55                   	push   ebp
c000928e:	31 ed                	xor    ebp,ebp
c0009290:	57                   	push   edi
c0009291:	56                   	push   esi
c0009292:	53                   	push   ebx
c0009293:	31 db                	xor    ebx,ebx
c0009295:	83 ec 1c             	sub    esp,0x1c
c0009298:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000929c:	8b 3d a4 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f7a4
c00092a2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00092a7:	57                   	push   edi
c00092a8:	e8 bc ff ff ff       	call   c0009269 <Virt::getPageState(unsigned long)>
c00092ad:	5a                   	pop    edx
c00092ae:	84 c0                	test   al,al
c00092b0:	75 3a                	jne    c00092ec <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092b2:	85 db                	test   ebx,ebx
c00092b4:	75 02                	jne    c00092b8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092b6:	89 fd                	mov    ebp,edi
c00092b8:	43                   	inc    ebx
c00092b9:	39 f3                	cmp    ebx,esi
c00092bb:	74 5a                	je     c0009317 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092bd:	47                   	inc    edi
c00092be:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092c4:	76 31                	jbe    c00092f7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092c6:	c7 05 a4 f7 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f7a4,0xc8000
c00092d0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092d5:	75 28                	jne    c00092ff <Virt::allocateKernelVirtualPages(int)+0x72>
c00092d7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092dc:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092e1:	57                   	push   edi
c00092e2:	e8 82 ff ff ff       	call   c0009269 <Virt::getPageState(unsigned long)>
c00092e7:	5a                   	pop    edx
c00092e8:	84 c0                	test   al,al
c00092ea:	74 c6                	je     c00092b2 <Virt::allocateKernelVirtualPages(int)+0x25>
c00092ec:	31 db                	xor    ebx,ebx
c00092ee:	47                   	inc    edi
c00092ef:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092f5:	77 cf                	ja     c00092c6 <Virt::allocateKernelVirtualPages(int)+0x39>
c00092f7:	89 3d a4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7a4,edi
c00092fd:	eb a8                	jmp    c00092a7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092ff:	83 ec 0c             	sub    esp,0xc
c0009302:	68 3c d9 01 c0       	push   0xc001d93c
c0009307:	e8 bf 6e 00 00       	call   c00101cb <KePanic(char const*)>
c000930c:	8b 3d a4 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f7a4
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	eb 90                	jmp    c00092a7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009317:	89 2d a4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7a4,ebp
c000931d:	4b                   	dec    ebx
c000931e:	74 5f                	je     c000937f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009320:	85 f6                	test   esi,esi
c0009322:	74 3d                	je     c0009361 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009324:	89 e8                	mov    eax,ebp
c0009326:	31 db                	xor    ebx,ebx
c0009328:	8d 7e ff             	lea    edi,[esi-0x1]
c000932b:	eb 14                	jmp    c0009341 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000932d:	6a 01                	push   0x1
c000932f:	43                   	inc    ebx
c0009330:	50                   	push   eax
c0009331:	e8 fe fe ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009336:	58                   	pop    eax
c0009337:	39 f3                	cmp    ebx,esi
c0009339:	5a                   	pop    edx
c000933a:	74 25                	je     c0009361 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000933c:	a1 a4 f7 01 c0       	mov    eax,ds:0xc001f7a4
c0009341:	8d 50 01             	lea    edx,[eax+0x1]
c0009344:	85 db                	test   ebx,ebx
c0009346:	89 15 a4 f7 01 c0    	mov    DWORD PTR ds:0xc001f7a4,edx
c000934c:	74 20                	je     c000936e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000934e:	39 df                	cmp    edi,ebx
c0009350:	75 db                	jne    c000932d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009352:	6a 03                	push   0x3
c0009354:	43                   	inc    ebx
c0009355:	50                   	push   eax
c0009356:	e8 d9 fe ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000935b:	59                   	pop    ecx
c000935c:	39 f3                	cmp    ebx,esi
c000935e:	58                   	pop    eax
c000935f:	75 db                	jne    c000933c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009361:	83 c4 1c             	add    esp,0x1c
c0009364:	89 e8                	mov    eax,ebp
c0009366:	5b                   	pop    ebx
c0009367:	c1 e0 0c             	shl    eax,0xc
c000936a:	5e                   	pop    esi
c000936b:	5f                   	pop    edi
c000936c:	5d                   	pop    ebp
c000936d:	c3                   	ret    
c000936e:	6a 02                	push   0x2
c0009370:	bb 01 00 00 00       	mov    ebx,0x1
c0009375:	50                   	push   eax
c0009376:	e8 b9 fe ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000937b:	58                   	pop    eax
c000937c:	5a                   	pop    edx
c000937d:	eb bd                	jmp    c000933c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000937f:	6a 04                	push   0x4
c0009381:	8d 45 01             	lea    eax,[ebp+0x1]
c0009384:	55                   	push   ebp
c0009385:	a3 a4 f7 01 c0       	mov    ds:0xc001f7a4,eax
c000938a:	e8 a5 fe ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000938f:	59                   	pop    ecx
c0009390:	89 e8                	mov    eax,ebp
c0009392:	5b                   	pop    ebx
c0009393:	c1 e0 0c             	shl    eax,0xc
c0009396:	83 c4 1c             	add    esp,0x1c
c0009399:	5b                   	pop    ebx
c000939a:	5e                   	pop    esi
c000939b:	5f                   	pop    edi
c000939c:	5d                   	pop    ebp
c000939d:	c3                   	ret    

c000939e <Virt::freeSwapfilePage(unsigned long)>:
c000939e:	53                   	push   ebx
c000939f:	8b 15 ac 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fac
c00093a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093a9:	b8 01 00 00 00       	mov    eax,0x1
c00093ae:	89 cb                	mov    ebx,ecx
c00093b0:	d3 e0                	shl    eax,cl
c00093b2:	c1 eb 05             	shr    ebx,0x5
c00093b5:	f7 d0                	not    eax
c00093b7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093ba:	5b                   	pop    ebx
c00093bb:	c3                   	ret    

c00093bc <Virt::swapIDToSector(unsigned long)>:
c00093bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093c0:	0f af 05 ac f7 01 c0 	imul   eax,DWORD PTR ds:0xc001f7ac
c00093c7:	03 05 b4 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7b4
c00093cd:	c3                   	ret    

c00093ce <Virt::allocateSwapfilePage()>:
c00093ce:	55                   	push   ebp
c00093cf:	31 d2                	xor    edx,edx
c00093d1:	57                   	push   edi
c00093d2:	56                   	push   esi
c00093d3:	53                   	push   ebx
c00093d4:	83 ec 0c             	sub    esp,0xc
c00093d7:	8b 0d ac f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7ac
c00093dd:	a1 b0 f7 01 c0       	mov    eax,ds:0xc001f7b0
c00093e2:	f7 f1                	div    ecx
c00093e4:	39 0d b0 f7 01 c0    	cmp    DWORD PTR ds:0xc001f7b0,ecx
c00093ea:	72 2d                	jb     c0009419 <Virt::allocateSwapfilePage()+0x4b>
c00093ec:	8b 35 ac 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fac
c00093f2:	8b 16                	mov    edx,DWORD PTR [esi]
c00093f4:	f6 c2 01             	test   dl,0x1
c00093f7:	74 3c                	je     c0009435 <Virt::allocateSwapfilePage()+0x67>
c00093f9:	31 c9                	xor    ecx,ecx
c00093fb:	bf 01 00 00 00       	mov    edi,0x1
c0009400:	eb 12                	jmp    c0009414 <Virt::allocateSwapfilePage()+0x46>
c0009402:	89 fd                	mov    ebp,edi
c0009404:	89 ca                	mov    edx,ecx
c0009406:	d3 e5                	shl    ebp,cl
c0009408:	c1 ea 05             	shr    edx,0x5
c000940b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000940e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009410:	85 ea                	test   edx,ebp
c0009412:	74 2a                	je     c000943e <Virt::allocateSwapfilePage()+0x70>
c0009414:	41                   	inc    ecx
c0009415:	39 c8                	cmp    eax,ecx
c0009417:	77 e9                	ja     c0009402 <Virt::allocateSwapfilePage()+0x34>
c0009419:	83 ec 0c             	sub    esp,0xc
c000941c:	68 a3 da 01 c0       	push   0xc001daa3
c0009421:	e8 a5 6d 00 00       	call   c00101cb <KePanic(char const*)>
c0009426:	83 c4 10             	add    esp,0x10
c0009429:	31 c9                	xor    ecx,ecx
c000942b:	83 c4 0c             	add    esp,0xc
c000942e:	89 c8                	mov    eax,ecx
c0009430:	5b                   	pop    ebx
c0009431:	5e                   	pop    esi
c0009432:	5f                   	pop    edi
c0009433:	5d                   	pop    ebp
c0009434:	c3                   	ret    
c0009435:	89 f3                	mov    ebx,esi
c0009437:	bd 01 00 00 00       	mov    ebp,0x1
c000943c:	31 c9                	xor    ecx,ecx
c000943e:	09 ea                	or     edx,ebp
c0009440:	89 c8                	mov    eax,ecx
c0009442:	89 13                	mov    DWORD PTR [ebx],edx
c0009444:	83 c4 0c             	add    esp,0xc
c0009447:	5b                   	pop    ebx
c0009448:	5e                   	pop    esi
c0009449:	5f                   	pop    edi
c000944a:	5d                   	pop    ebp
c000944b:	c3                   	ret    

c000944c <Virt::virtualMemorySetup()>:
c000944c:	53                   	push   ebx
c000944d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009452:	6a 0f                	push   0xf
c0009454:	53                   	push   ebx
c0009455:	43                   	inc    ebx
c0009456:	e8 d9 fd ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000945b:	58                   	pop    eax
c000945c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009462:	5a                   	pop    edx
c0009463:	75 ed                	jne    c0009452 <Virt::virtualMemorySetup()+0x6>
c0009465:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000946a:	6a 00                	push   0x0
c000946c:	53                   	push   ebx
c000946d:	43                   	inc    ebx
c000946e:	e8 c1 fd ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009473:	59                   	pop    ecx
c0009474:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000947a:	58                   	pop    eax
c000947b:	75 ed                	jne    c000946a <Virt::virtualMemorySetup()+0x1e>
c000947d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009482:	6a 0f                	push   0xf
c0009484:	53                   	push   ebx
c0009485:	43                   	inc    ebx
c0009486:	e8 a9 fd ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000948b:	58                   	pop    eax
c000948c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009492:	5a                   	pop    edx
c0009493:	75 ed                	jne    c0009482 <Virt::virtualMemorySetup()+0x36>
c0009495:	5b                   	pop    ebx
c0009496:	c3                   	ret    

c0009497 <Virt::setupPageSwapping(int)>:
c0009497:	53                   	push   ebx
c0009498:	83 ec 0c             	sub    esp,0xc
c000949b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000949f:	a1 28 44 02 c0       	mov    eax,ds:0xc0024428
c00094a4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00094ac:	53                   	push   ebx
c00094ad:	c1 e3 0b             	shl    ebx,0xb
c00094b0:	68 ba da 01 c0       	push   0xc001daba
c00094b5:	50                   	push   eax
c00094b6:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094b9:	89 1d b0 f7 01 c0    	mov    DWORD PTR ds:0xc001f7b0,ebx
c00094bf:	c6 05 b8 f7 01 c0 43 	mov    BYTE PTR ds:0xc001f7b8,0x43
c00094c6:	c1 eb 08             	shr    ebx,0x8
c00094c9:	a3 b4 f7 01 c0       	mov    ds:0xc001f7b4,eax
c00094ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094d1:	c7 05 ac f7 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f7ac,0x8
c00094db:	e8 d9 e2 ff ff       	call   c00077b9 <malloc>
c00094e0:	83 c4 0c             	add    esp,0xc
c00094e3:	89 c1                	mov    ecx,eax
c00094e5:	a3 ac 1f 02 c0       	mov    ds:0xc0021fac,eax
c00094ea:	31 d2                	xor    edx,edx
c00094ec:	a1 b0 f7 01 c0       	mov    eax,ds:0xc001f7b0
c00094f1:	f7 35 ac f7 01 c0    	div    DWORD PTR ds:0xc001f7ac
c00094f7:	c1 e8 05             	shr    eax,0x5
c00094fa:	50                   	push   eax
c00094fb:	6a 00                	push   0x0
c00094fd:	51                   	push   ecx
c00094fe:	e8 cd 6f ff ff       	call   c00004d0 <memset>
c0009503:	83 c4 18             	add    esp,0x18
c0009506:	5b                   	pop    ebx
c0009507:	c3                   	ret    

c0009508 <VAS::VAS(VAS*)>:
c0009508:	83 ec 0c             	sub    esp,0xc
c000950b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000950f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000951a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009521:	83 ec 0c             	sub    esp,0xc
c0009524:	68 5c d9 01 c0       	push   0xc001d95c
c0009529:	e8 9d 6c 00 00       	call   c00101cb <KePanic(char const*)>
c000952e:	83 c4 10             	add    esp,0x10
c0009531:	90                   	nop
c0009532:	83 c4 0c             	add    esp,0xc
c0009535:	c3                   	ret    

c0009536 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009536:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000953a:	89 c2                	mov    edx,eax
c000953c:	c1 e8 0a             	shr    eax,0xa
c000953f:	c1 ea 16             	shr    edx,0x16
c0009542:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009547:	19 c9                	sbb    ecx,ecx
c0009549:	c1 e2 0c             	shl    edx,0xc
c000954c:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009552:	25 fc 0f 00 00       	and    eax,0xffc
c0009557:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000955e:	01 d0                	add    eax,edx
c0009560:	c3                   	ret    
c0009561:	90                   	nop

c0009562 <VAS::getPageTableEntry(unsigned long)>:
c0009562:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009566:	89 ca                	mov    edx,ecx
c0009568:	c1 e9 0a             	shr    ecx,0xa
c000956b:	c1 ea 16             	shr    edx,0x16
c000956e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009574:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000957a:	c1 e0 0c             	shl    eax,0xc
c000957d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009580:	c3                   	ret    

c0009581 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009581:	57                   	push   edi
c0009582:	56                   	push   esi
c0009583:	be 01 00 00 00       	mov    esi,0x1
c0009588:	53                   	push   ebx
c0009589:	83 ec 10             	sub    esp,0x10
c000958c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009590:	c1 eb 0c             	shr    ebx,0xc
c0009593:	eb 3f                	jmp    c00095d4 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009595:	83 ec 08             	sub    esp,0x8
c0009598:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c000959d:	57                   	push   edi
c000959e:	50                   	push   eax
c000959f:	e8 be ff ff ff       	call   c0009562 <VAS::getPageTableEntry(unsigned long)>
c00095a4:	83 c4 10             	add    esp,0x10
c00095a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00095a9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095ad:	f6 c4 04             	test   ah,0x4
c00095b0:	75 60                	jne    c0009612 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095b2:	80 fa 04             	cmp    dl,0x4
c00095b5:	74 79                	je     c0009630 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095b7:	80 fa 02             	cmp    dl,0x2
c00095ba:	0f 84 89 00 00 00    	je     c0009649 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095c0:	80 fa 03             	cmp    dl,0x3
c00095c3:	0f 84 ae 00 00 00    	je     c0009677 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095c9:	fe ca                	dec    dl
c00095cb:	0f 84 93 00 00 00    	je     c0009664 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00095d1:	43                   	inc    ebx
c00095d2:	31 f6                	xor    esi,esi
c00095d4:	53                   	push   ebx
c00095d5:	89 df                	mov    edi,ebx
c00095d7:	e8 8d fc ff ff       	call   c0009269 <Virt::getPageState(unsigned long)>
c00095dc:	c1 e7 0c             	shl    edi,0xc
c00095df:	5a                   	pop    edx
c00095e0:	84 c0                	test   al,al
c00095e2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00095e6:	75 ad                	jne    c0009595 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00095e8:	83 ec 0c             	sub    esp,0xc
c00095eb:	68 d1 da 01 c0       	push   0xc001dad1
c00095f0:	e8 d6 6b 00 00       	call   c00101cb <KePanic(char const*)>
c00095f5:	5a                   	pop    edx
c00095f6:	59                   	pop    ecx
c00095f7:	57                   	push   edi
c00095f8:	8b 3d b0 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021fb0
c00095fe:	57                   	push   edi
c00095ff:	e8 5e ff ff ff       	call   c0009562 <VAS::getPageTableEntry(unsigned long)>
c0009604:	83 c4 10             	add    esp,0x10
c0009607:	8b 00                	mov    eax,DWORD PTR [eax]
c0009609:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000960d:	f6 c4 04             	test   ah,0x4
c0009610:	74 bf                	je     c00095d1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009612:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009616:	25 00 f0 ff ff       	and    eax,0xfffff000
c000961b:	83 ec 0c             	sub    esp,0xc
c000961e:	50                   	push   eax
c000961f:	e8 0f e4 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009624:	83 c4 10             	add    esp,0x10
c0009627:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000962b:	80 fa 04             	cmp    dl,0x4
c000962e:	75 87                	jne    c00095b7 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009630:	89 f0                	mov    eax,esi
c0009632:	84 c0                	test   al,al
c0009634:	75 47                	jne    c000967d <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0009636:	c7 44 24 20 80 d9 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d980
c000963e:	83 c4 10             	add    esp,0x10
c0009641:	5b                   	pop    ebx
c0009642:	5e                   	pop    esi
c0009643:	5f                   	pop    edi
c0009644:	e9 82 6b 00 00       	jmp    c00101cb <KePanic(char const*)>
c0009649:	89 f0                	mov    eax,esi
c000964b:	84 c0                	test   al,al
c000964d:	75 15                	jne    c0009664 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c000964f:	83 ec 0c             	sub    esp,0xc
c0009652:	68 ed da 01 c0       	push   0xc001daed
c0009657:	e8 6f 6b 00 00       	call   c00101cb <KePanic(char const*)>
c000965c:	83 c4 10             	add    esp,0x10
c000965f:	e9 6d ff ff ff       	jmp    c00095d1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009664:	83 ec 08             	sub    esp,0x8
c0009667:	6a 00                	push   0x0
c0009669:	53                   	push   ebx
c000966a:	e8 c5 fb ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000966f:	83 c4 10             	add    esp,0x10
c0009672:	e9 5a ff ff ff       	jmp    c00095d1 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009677:	89 f0                	mov    eax,esi
c0009679:	84 c0                	test   al,al
c000967b:	75 15                	jne    c0009692 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c000967d:	83 ec 08             	sub    esp,0x8
c0009680:	6a 00                	push   0x0
c0009682:	53                   	push   ebx
c0009683:	e8 ac fb ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009688:	83 c4 10             	add    esp,0x10
c000968b:	83 c4 10             	add    esp,0x10
c000968e:	5b                   	pop    ebx
c000968f:	5e                   	pop    esi
c0009690:	5f                   	pop    edi
c0009691:	c3                   	ret    
c0009692:	c7 44 24 20 09 db 01 c0 	mov    DWORD PTR [esp+0x20],0xc001db09
c000969a:	83 c4 10             	add    esp,0x10
c000969d:	5b                   	pop    ebx
c000969e:	5e                   	pop    esi
c000969f:	5f                   	pop    edi
c00096a0:	e9 26 6b 00 00       	jmp    c00101cb <KePanic(char const*)>
c00096a5:	90                   	nop

c00096a6 <VAS::freeAllocatedPages(unsigned long)>:
c00096a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096ae:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096b2:	74 09                	je     c00096bd <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096b4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096b8:	e9 c4 fe ff ff       	jmp    c0009581 <Virt::freeKernelVirtualPages(unsigned long)>
c00096bd:	c7 44 24 04 a4 d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d9a4
c00096c5:	e9 80 0e 00 00       	jmp    c000a54a <Dbg::kprintf(char const*, ...)>

c00096ca <VAS::virtualToPhysical(unsigned long)>:
c00096ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096ce:	50                   	push   eax
c00096cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096d3:	52                   	push   edx
c00096d4:	e8 89 fe ff ff       	call   c0009562 <VAS::getPageTableEntry(unsigned long)>
c00096d9:	59                   	pop    ecx
c00096da:	8b 00                	mov    eax,DWORD PTR [eax]
c00096dc:	5a                   	pop    edx
c00096dd:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096e2:	c3                   	ret    
c00096e3:	90                   	nop

c00096e4 <VAS::reflagRange(unsigned long, int, int, int)>:
c00096e4:	55                   	push   ebp
c00096e5:	57                   	push   edi
c00096e6:	56                   	push   esi
c00096e7:	53                   	push   ebx
c00096e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00096ec:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00096f0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00096f4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00096f8:	85 db                	test   ebx,ebx
c00096fa:	7e 22                	jle    c000971e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00096fc:	c1 e3 0c             	shl    ebx,0xc
c00096ff:	01 f3                	add    ebx,esi
c0009701:	56                   	push   esi
c0009702:	81 c6 00 10 00 00    	add    esi,0x1000
c0009708:	55                   	push   ebp
c0009709:	e8 54 fe ff ff       	call   c0009562 <VAS::getPageTableEntry(unsigned long)>
c000970e:	5a                   	pop    edx
c000970f:	59                   	pop    ecx
c0009710:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009712:	21 f9                	and    ecx,edi
c0009714:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009718:	39 f3                	cmp    ebx,esi
c000971a:	89 08                	mov    DWORD PTR [eax],ecx
c000971c:	75 e3                	jne    c0009701 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000971e:	5b                   	pop    ebx
c000971f:	5e                   	pop    esi
c0009720:	5f                   	pop    edi
c0009721:	5d                   	pop    ebp
c0009722:	c3                   	ret    
c0009723:	90                   	nop

c0009724 <VAS::VAS()>:
c0009724:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009728:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000972f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009733:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000973a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000973e:	a3 b0 1f 02 c0       	mov    ds:0xc0021fb0,eax
c0009743:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009747:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000974b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000974f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009752:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009756:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000975d:	ba 7d 00 02 c0       	mov    edx,0xc002007d
c0009762:	b8 00 00 02 c0       	mov    eax,0xc0020000
c0009767:	29 c2                	sub    edx,eax
c0009769:	89 d0                	mov    eax,edx
c000976b:	05 ff 0f 00 00       	add    eax,0xfff
c0009770:	c1 e8 0c             	shr    eax,0xc
c0009773:	89 c2                	mov    edx,eax
c0009775:	b8 00 00 02 c0       	mov    eax,0xc0020000
c000977a:	6a 04                	push   0x4
c000977c:	6a ff                	push   0xffffffff
c000977e:	52                   	push   edx
c000977f:	50                   	push   eax
c0009780:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009784:	e8 5b ff ff ff       	call   c00096e4 <VAS::reflagRange(unsigned long, int, int, int)>
c0009789:	83 c4 14             	add    esp,0x14
c000978c:	90                   	nop
c000978d:	c3                   	ret    

c000978e <VAS::setToWriteCombining(unsigned long, int)>:
c000978e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009793:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009799:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c00097a0:	75 01                	jne    c00097a3 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00097a2:	c3                   	ret    
c00097a3:	68 80 00 00 00       	push   0x80
c00097a8:	6a ff                	push   0xffffffff
c00097aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00097ae:	50                   	push   eax
c00097af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097b3:	52                   	push   edx
c00097b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00097b8:	51                   	push   ecx
c00097b9:	e8 26 ff ff ff       	call   c00096e4 <VAS::reflagRange(unsigned long, int, int, int)>
c00097be:	83 c4 14             	add    esp,0x14
c00097c1:	c3                   	ret    

c00097c2 <VAS::mapOtherVASIn(bool, VAS*)>:
c00097c2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00097c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097cb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00097ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097d2:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00097d5:	19 c0                	sbb    eax,eax
c00097d7:	83 ca 03             	or     edx,0x3
c00097da:	83 e0 fc             	and    eax,0xfffffffc
c00097dd:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00097e4:	0f 20 d8             	mov    eax,cr3
c00097e7:	0f 22 d8             	mov    cr3,eax
c00097ea:	c3                   	ret    
c00097eb:	90                   	nop

c00097ec <VAS::~VAS()>:
c00097ec:	83 ec 2c             	sub    esp,0x2c
c00097ef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00097f7:	fa                   	cli    
c00097f8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00097fd:	40                   	inc    eax
c00097fe:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0009803:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009808:	8b 00                	mov    eax,DWORD PTR [eax]
c000980a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000980d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009813:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009817:	6a 01                	push   0x1
c0009819:	50                   	push   eax
c000981a:	e8 a3 ff ff ff       	call   c00097c2 <VAS::mapOtherVASIn(bool, VAS*)>
c000981f:	83 c4 0c             	add    esp,0xc
c0009822:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000982a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009832:	0f 8f d4 00 00 00    	jg     c000990c <VAS::~VAS()+0x120>
c0009838:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000983c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000983f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009843:	c1 e2 02             	shl    edx,0x2
c0009846:	01 d0                	add    eax,edx
c0009848:	8b 00                	mov    eax,DWORD PTR [eax]
c000984a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000984e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009852:	83 e0 01             	and    eax,0x1
c0009855:	0f 84 a8 00 00 00    	je     c0009903 <VAS::~VAS()+0x117>
c000985b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009863:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000986b:	7f 72                	jg     c00098df <VAS::~VAS()+0xf3>
c000986d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009871:	c1 e0 0a             	shl    eax,0xa
c0009874:	89 c2                	mov    edx,eax
c0009876:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000987a:	01 d0                	add    eax,edx
c000987c:	c1 e0 0c             	shl    eax,0xc
c000987f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009883:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009888:	8b 00                	mov    eax,DWORD PTR [eax]
c000988a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000988d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009893:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009897:	6a 01                	push   0x1
c0009899:	50                   	push   eax
c000989a:	e8 97 fc ff ff       	call   c0009536 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000989f:	83 c4 0c             	add    esp,0xc
c00098a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00098ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00098b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098b4:	25 01 04 00 00       	and    eax,0x401
c00098b9:	3d 01 04 00 00       	cmp    eax,0x401
c00098be:	75 19                	jne    c00098d9 <VAS::~VAS()+0xed>
c00098c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	50                   	push   eax
c00098cd:	e8 61 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098d2:	83 c4 10             	add    esp,0x10
c00098d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098d9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00098dd:	eb 84                	jmp    c0009863 <VAS::~VAS()+0x77>
c00098df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098e3:	25 00 04 00 00       	and    eax,0x400
c00098e8:	74 19                	je     c0009903 <VAS::~VAS()+0x117>
c00098ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098ee:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098f3:	83 ec 0c             	sub    esp,0xc
c00098f6:	50                   	push   eax
c00098f7:	e8 37 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098fc:	83 c4 10             	add    esp,0x10
c00098ff:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009903:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009907:	e9 1e ff ff ff       	jmp    c000982a <VAS::~VAS()+0x3e>
c000990c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009910:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009913:	83 ec 0c             	sub    esp,0xc
c0009916:	50                   	push   eax
c0009917:	e8 65 fc ff ff       	call   c0009581 <Virt::freeKernelVirtualPages(unsigned long)>
c000991c:	83 c4 10             	add    esp,0x10
c000991f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009923:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009926:	83 ec 0c             	sub    esp,0xc
c0009929:	50                   	push   eax
c000992a:	e8 04 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000992f:	83 c4 10             	add    esp,0x10
c0009932:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009936:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000993b:	48                   	dec    eax
c000993c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0009941:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0009946:	85 c0                	test   eax,eax
c0009948:	75 01                	jne    c000994b <VAS::~VAS()+0x15f>
c000994a:	fb                   	sti    
c000994b:	90                   	nop
c000994c:	83 c4 2c             	add    esp,0x2c
c000994f:	c3                   	ret    

c0009950 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009950:	55                   	push   ebp
c0009951:	57                   	push   edi
c0009952:	56                   	push   esi
c0009953:	53                   	push   ebx
c0009954:	83 ec 1c             	sub    esp,0x1c
c0009957:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000995b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000995f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009965:	77 0b                	ja     c0009972 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009967:	0f 20 d8             	mov    eax,cr3
c000996a:	0f 20 d8             	mov    eax,cr3
c000996d:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009970:	75 47                	jne    c00099b9 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009972:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009976:	09 d8                	or     eax,ebx
c0009978:	a9 ff 0f 00 00       	test   eax,0xfff
c000997d:	75 57                	jne    c00099d6 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000997f:	89 de                	mov    esi,ebx
c0009981:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009984:	c1 ee 16             	shr    esi,0x16
c0009987:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000998e:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009992:	74 54                	je     c00099e8 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009994:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009998:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000999e:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00099a2:	c1 e6 0c             	shl    esi,0xc
c00099a5:	c1 eb 0a             	shr    ebx,0xa
c00099a8:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00099ae:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00099b1:	83 c4 1c             	add    esp,0x1c
c00099b4:	5b                   	pop    ebx
c00099b5:	5e                   	pop    esi
c00099b6:	5f                   	pop    edi
c00099b7:	5d                   	pop    ebp
c00099b8:	c3                   	ret    
c00099b9:	83 ec 0c             	sub    esp,0xc
c00099bc:	68 c8 d9 01 c0       	push   0xc001d9c8
c00099c1:	e8 84 0b 00 00       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c00099c6:	83 c4 10             	add    esp,0x10
c00099c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00099cd:	09 d8                	or     eax,ebx
c00099cf:	a9 ff 0f 00 00       	test   eax,0xfff
c00099d4:	74 a9                	je     c000997f <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099d6:	83 ec 0c             	sub    esp,0xc
c00099d9:	68 30 da 01 c0       	push   0xc001da30
c00099de:	e8 e8 67 00 00       	call   c00101cb <KePanic(char const*)>
c00099e3:	83 c4 10             	add    esp,0x10
c00099e6:	eb 97                	jmp    c000997f <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099ec:	e8 a4 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00099f1:	83 ec 0c             	sub    esp,0xc
c00099f4:	89 c5                	mov    ebp,eax
c00099f6:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c00099fc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009a00:	6a 01                	push   0x1
c0009a02:	e8 86 f8 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c0009a07:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009a0e:	6a 01                	push   0x1
c0009a10:	50                   	push   eax
c0009a11:	55                   	push   ebp
c0009a12:	81 cd 07 04 00 00    	or     ebp,0x407
c0009a18:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009a1c:	51                   	push   ecx
c0009a1d:	e8 28 02 00 00       	call   c0009c4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009a22:	83 c4 1c             	add    esp,0x1c
c0009a25:	68 00 10 00 00       	push   0x1000
c0009a2a:	6a 00                	push   0x0
c0009a2c:	50                   	push   eax
c0009a2d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a31:	e8 9a 6a ff ff       	call   c00004d0 <memset>
c0009a36:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009a3a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a3d:	e8 3f fb ff ff       	call   c0009581 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a46:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a49:	83 c4 10             	add    esp,0x10
c0009a4c:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009a4f:	e9 40 ff ff ff       	jmp    c0009994 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009a54 <VAS::allocatePages(int, int)>:
c0009a54:	55                   	push   ebp
c0009a55:	57                   	push   edi
c0009a56:	56                   	push   esi
c0009a57:	53                   	push   ebx
c0009a58:	83 ec 1c             	sub    esp,0x1c
c0009a5b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a5f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009a64:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a6a:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a70:	83 e0 01             	and    eax,0x1
c0009a73:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a77:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a7b:	0f 85 cc 00 00 00    	jne    c0009b4d <VAS::allocatePages(int, int)+0xf9>
c0009a81:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a88:	85 c0                	test   eax,eax
c0009a8a:	0f 84 a1 00 00 00    	je     c0009b31 <VAS::allocatePages(int, int)+0xdd>
c0009a90:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a98:	c1 e6 0c             	shl    esi,0xc
c0009a9b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a9f:	85 c0                	test   eax,eax
c0009aa1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009aa4:	7e 33                	jle    c0009ad9 <VAS::allocatePages(int, int)+0x85>
c0009aa6:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009aaa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009aae:	81 cd 00 04 00 00    	or     ebp,0x400
c0009ab4:	e8 dc df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009ab9:	55                   	push   ebp
c0009aba:	53                   	push   ebx
c0009abb:	50                   	push   eax
c0009abc:	57                   	push   edi
c0009abd:	e8 8e fe ff ff       	call   c0009950 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009ac2:	83 c4 10             	add    esp,0x10
c0009ac5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009aca:	74 03                	je     c0009acf <VAS::allocatePages(int, int)+0x7b>
c0009acc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009acf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ad5:	39 de                	cmp    esi,ebx
c0009ad7:	75 db                	jne    c0009ab4 <VAS::allocatePages(int, int)+0x60>
c0009ad9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ade:	75 12                	jne    c0009af2 <VAS::allocatePages(int, int)+0x9e>
c0009ae0:	0f 20 d8             	mov    eax,cr3
c0009ae3:	0f 22 d8             	mov    cr3,eax
c0009ae6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009aea:	83 c4 1c             	add    esp,0x1c
c0009aed:	5b                   	pop    ebx
c0009aee:	5e                   	pop    esi
c0009aef:	5f                   	pop    edi
c0009af0:	5d                   	pop    ebp
c0009af1:	c3                   	ret    
c0009af2:	c1 ee 0a             	shr    esi,0xa
c0009af5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009af9:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009aff:	c1 eb 0a             	shr    ebx,0xa
c0009b02:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009b08:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b0e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b14:	39 c3                	cmp    ebx,eax
c0009b16:	77 ce                	ja     c0009ae6 <VAS::allocatePages(int, int)+0x92>
c0009b18:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b1b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b21:	39 d8                	cmp    eax,ebx
c0009b23:	73 f3                	jae    c0009b18 <VAS::allocatePages(int, int)+0xc4>
c0009b25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b29:	83 c4 1c             	add    esp,0x1c
c0009b2c:	5b                   	pop    ebx
c0009b2d:	5e                   	pop    esi
c0009b2e:	5f                   	pop    edi
c0009b2f:	5d                   	pop    ebp
c0009b30:	c3                   	ret    
c0009b31:	83 ec 0c             	sub    esp,0xc
c0009b34:	68 54 da 01 c0       	push   0xc001da54
c0009b39:	e8 8d 66 00 00       	call   c00101cb <KePanic(char const*)>
c0009b3e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b41:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b45:	83 c4 10             	add    esp,0x10
c0009b48:	e9 43 ff ff ff       	jmp    c0009a90 <VAS::allocatePages(int, int)+0x3c>
c0009b4d:	83 ec 0c             	sub    esp,0xc
c0009b50:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009b54:	51                   	push   ecx
c0009b55:	e8 33 f7 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c0009b5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b5e:	83 c4 10             	add    esp,0x10
c0009b61:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b66:	0f 87 9b 00 00 00    	ja     c0009c07 <VAS::allocatePages(int, int)+0x1b3>
c0009b6c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b70:	85 d2                	test   edx,edx
c0009b72:	7e 3c                	jle    c0009bb0 <VAS::allocatePages(int, int)+0x15c>
c0009b74:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b78:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b7c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b80:	c1 e5 0c             	shl    ebp,0xc
c0009b83:	81 ce 00 04 00 00    	or     esi,0x400
c0009b89:	01 dd                	add    ebp,ebx
c0009b8b:	e8 05 df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b90:	56                   	push   esi
c0009b91:	53                   	push   ebx
c0009b92:	50                   	push   eax
c0009b93:	57                   	push   edi
c0009b94:	e8 b7 fd ff ff       	call   c0009950 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b99:	83 c4 10             	add    esp,0x10
c0009b9c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ba1:	74 03                	je     c0009ba6 <VAS::allocatePages(int, int)+0x152>
c0009ba3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ba6:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bac:	39 dd                	cmp    ebp,ebx
c0009bae:	75 db                	jne    c0009b8b <VAS::allocatePages(int, int)+0x137>
c0009bb0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009bb5:	0f 84 25 ff ff ff    	je     c0009ae0 <VAS::allocatePages(int, int)+0x8c>
c0009bbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bbf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009bc3:	89 d3                	mov    ebx,edx
c0009bc5:	c1 e0 0c             	shl    eax,0xc
c0009bc8:	c1 eb 0a             	shr    ebx,0xa
c0009bcb:	01 d0                	add    eax,edx
c0009bcd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bd3:	c1 e8 0a             	shr    eax,0xa
c0009bd6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bdc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009be1:	2d 00 00 40 00       	sub    eax,0x400000
c0009be6:	39 c3                	cmp    ebx,eax
c0009be8:	0f 87 f8 fe ff ff    	ja     c0009ae6 <VAS::allocatePages(int, int)+0x92>
c0009bee:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bf1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bf7:	39 d8                	cmp    eax,ebx
c0009bf9:	73 f3                	jae    c0009bee <VAS::allocatePages(int, int)+0x19a>
c0009bfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bff:	83 c4 1c             	add    esp,0x1c
c0009c02:	5b                   	pop    ebx
c0009c03:	5e                   	pop    esi
c0009c04:	5f                   	pop    edi
c0009c05:	5d                   	pop    ebp
c0009c06:	c3                   	ret    
c0009c07:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009c0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c12:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009c19:	0f 84 4d ff ff ff    	je     c0009b6c <VAS::allocatePages(int, int)+0x118>
c0009c1f:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009c27:	e9 40 ff ff ff       	jmp    c0009b6c <VAS::allocatePages(int, int)+0x118>

c0009c2c <VAS::setCPUSpecific(unsigned long)>:
c0009c2c:	83 ec 0c             	sub    esp,0xc
c0009c2f:	6a 05                	push   0x5
c0009c31:	68 00 00 40 c2       	push   0xc2400000
c0009c36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c3a:	50                   	push   eax
c0009c3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c3f:	52                   	push   edx
c0009c40:	e8 0b fd ff ff       	call   c0009950 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c45:	83 c4 1c             	add    esp,0x1c
c0009c48:	c3                   	ret    
c0009c49:	90                   	nop

c0009c4a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009c4a:	55                   	push   ebp
c0009c4b:	57                   	push   edi
c0009c4c:	56                   	push   esi
c0009c4d:	53                   	push   ebx
c0009c4e:	83 ec 1c             	sub    esp,0x1c
c0009c51:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009c56:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c60:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c64:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c6a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c6e:	83 e0 01             	and    eax,0x1
c0009c71:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c75:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c79:	85 c0                	test   eax,eax
c0009c7b:	7e 39                	jle    c0009cb6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c7d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c81:	89 f3                	mov    ebx,esi
c0009c83:	c1 e0 0c             	shl    eax,0xc
c0009c86:	01 f0                	add    eax,esi
c0009c88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c8c:	55                   	push   ebp
c0009c8d:	53                   	push   ebx
c0009c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c92:	29 f0                	sub    eax,esi
c0009c94:	01 d8                	add    eax,ebx
c0009c96:	50                   	push   eax
c0009c97:	57                   	push   edi
c0009c98:	e8 b3 fc ff ff       	call   c0009950 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c9d:	83 c4 10             	add    esp,0x10
c0009ca0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ca5:	74 03                	je     c0009caa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009ca7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009caa:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cb0:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009cb4:	75 d6                	jne    c0009c8c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009cb6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009cbb:	75 10                	jne    c0009ccd <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009cbd:	0f 20 d8             	mov    eax,cr3
c0009cc0:	0f 22 d8             	mov    cr3,eax
c0009cc3:	83 c4 1c             	add    esp,0x1c
c0009cc6:	89 f0                	mov    eax,esi
c0009cc8:	5b                   	pop    ebx
c0009cc9:	5e                   	pop    esi
c0009cca:	5f                   	pop    edi
c0009ccb:	5d                   	pop    ebp
c0009ccc:	c3                   	ret    
c0009ccd:	89 f3                	mov    ebx,esi
c0009ccf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009cd3:	c1 eb 0a             	shr    ebx,0xa
c0009cd6:	c1 e0 0c             	shl    eax,0xc
c0009cd9:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009cdf:	01 f0                	add    eax,esi
c0009ce1:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ce7:	c1 e8 0a             	shr    eax,0xa
c0009cea:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cef:	2d 00 00 40 00       	sub    eax,0x400000
c0009cf4:	39 c3                	cmp    ebx,eax
c0009cf6:	77 cb                	ja     c0009cc3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009cf8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cfb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d01:	39 d8                	cmp    eax,ebx
c0009d03:	73 f3                	jae    c0009cf8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009d05:	83 c4 1c             	add    esp,0x1c
c0009d08:	89 f0                	mov    eax,esi
c0009d0a:	5b                   	pop    ebx
c0009d0b:	5e                   	pop    esi
c0009d0c:	5f                   	pop    edi
c0009d0d:	5d                   	pop    ebp
c0009d0e:	c3                   	ret    
c0009d0f:	90                   	nop

c0009d10 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009d10:	55                   	push   ebp
c0009d11:	57                   	push   edi
c0009d12:	56                   	push   esi
c0009d13:	53                   	push   ebx
c0009d14:	83 ec 1c             	sub    esp,0x1c
c0009d17:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d1b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d1f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009d23:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009d27:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d2c:	75 4a                	jne    c0009d78 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d2e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d32:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d35:	c1 eb 16             	shr    ebx,0x16
c0009d38:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d3f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d43:	74 4d                	je     c0009d92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d45:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d49:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d4d:	c1 e8 0a             	shr    eax,0xa
c0009d50:	80 fa 01             	cmp    dl,0x1
c0009d53:	19 d2                	sbb    edx,edx
c0009d55:	c1 e3 0c             	shl    ebx,0xc
c0009d58:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d5c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d62:	25 fc 0f 00 00       	and    eax,0xffc
c0009d67:	01 d8                	add    eax,ebx
c0009d69:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d70:	83 c4 1c             	add    esp,0x1c
c0009d73:	5b                   	pop    ebx
c0009d74:	5e                   	pop    esi
c0009d75:	5f                   	pop    edi
c0009d76:	5d                   	pop    ebp
c0009d77:	c3                   	ret    
c0009d78:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d7c:	83 ec 0c             	sub    esp,0xc
c0009d7f:	68 80 da 01 c0       	push   0xc001da80
c0009d84:	e8 42 64 00 00       	call   c00101cb <KePanic(char const*)>
c0009d89:	83 c4 10             	add    esp,0x10
c0009d8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d90:	eb 9c                	jmp    c0009d2e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d96:	e8 fa dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009d9b:	83 ec 0c             	sub    esp,0xc
c0009d9e:	89 c5                	mov    ebp,eax
c0009da0:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c0009da6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009daa:	6a 01                	push   0x1
c0009dac:	e8 dc f4 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c0009db1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db8:	6a 01                	push   0x1
c0009dba:	50                   	push   eax
c0009dbb:	55                   	push   ebp
c0009dbc:	81 cd 07 04 00 00    	or     ebp,0x407
c0009dc2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dc6:	51                   	push   ecx
c0009dc7:	e8 7e fe ff ff       	call   c0009c4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dcc:	83 c4 1c             	add    esp,0x1c
c0009dcf:	68 00 10 00 00       	push   0x1000
c0009dd4:	6a 00                	push   0x0
c0009dd6:	50                   	push   eax
c0009dd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ddb:	e8 f0 66 ff ff       	call   c00004d0 <memset>
c0009de0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009de4:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009de7:	e8 95 f7 ff ff       	call   c0009581 <Virt::freeKernelVirtualPages(unsigned long)>
c0009dec:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009def:	83 c4 10             	add    esp,0x10
c0009df2:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009df5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009df9:	e9 47 ff ff ff       	jmp    c0009d45 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009dfe <VAS::VAS(bool)>:
c0009dfe:	53                   	push   ebx
c0009dff:	83 ec 28             	sub    esp,0x28
c0009e02:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e06:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009e0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009e15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e19:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009e20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e24:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009e28:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009e2b:	e8 65 dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009e30:	89 c2                	mov    edx,eax
c0009e32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e36:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e39:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0009e3f:	83 ec 0c             	sub    esp,0xc
c0009e42:	6a 01                	push   0x1
c0009e44:	e8 44 f4 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 c2                	mov    edx,eax
c0009e4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e52:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e55:	83 ec 0c             	sub    esp,0xc
c0009e58:	6a 03                	push   0x3
c0009e5a:	6a 01                	push   0x1
c0009e5c:	52                   	push   edx
c0009e5d:	50                   	push   eax
c0009e5e:	53                   	push   ebx
c0009e5f:	e8 e6 fd ff ff       	call   c0009c4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e64:	83 c4 20             	add    esp,0x20
c0009e67:	89 c2                	mov    edx,eax
c0009e69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e6d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e70:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e78:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e80:	7f 1c                	jg     c0009e9e <VAS::VAS(bool)+0xa0>
c0009e82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e86:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e8d:	c1 e2 02             	shl    edx,0x2
c0009e90:	01 d0                	add    eax,edx
c0009e92:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e98:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009e9c:	eb da                	jmp    c0009e78 <VAS::VAS(bool)+0x7a>
c0009e9e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009ea6:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009eae:	7f 7a                	jg     c0009f2a <VAS::VAS(bool)+0x12c>
c0009eb0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009eb4:	2d 00 02 00 00       	sub    eax,0x200
c0009eb9:	c1 e0 0c             	shl    eax,0xc
c0009ebc:	83 c8 05             	or     eax,0x5
c0009ebf:	89 c2                	mov    edx,eax
c0009ec1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009ec6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ecc:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ed2:	83 e0 10             	and    eax,0x10
c0009ed5:	84 c0                	test   al,al
c0009ed7:	74 07                	je     c0009ee0 <VAS::VAS(bool)+0xe2>
c0009ed9:	b8 00 01 00 00       	mov    eax,0x100
c0009ede:	eb 05                	jmp    c0009ee5 <VAS::VAS(bool)+0xe7>
c0009ee0:	b8 00 00 00 00       	mov    eax,0x0
c0009ee5:	09 d0                	or     eax,edx
c0009ee7:	89 c1                	mov    ecx,eax
c0009ee9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009eed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ef0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ef4:	c1 e2 02             	shl    edx,0x2
c0009ef7:	01 d0                	add    eax,edx
c0009ef9:	89 ca                	mov    edx,ecx
c0009efb:	89 10                	mov    DWORD PTR [eax],edx
c0009efd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f01:	2d 40 03 00 00       	sub    eax,0x340
c0009f06:	83 f8 7f             	cmp    eax,0x7f
c0009f09:	77 16                	ja     c0009f21 <VAS::VAS(bool)+0x123>
c0009f0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f0f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f12:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009f16:	c1 e2 02             	shl    edx,0x2
c0009f19:	01 d0                	add    eax,edx
c0009f1b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f21:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009f25:	e9 7c ff ff ff       	jmp    c0009ea6 <VAS::VAS(bool)+0xa8>
c0009f2a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f2f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f35:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f3b:	83 e0 10             	and    eax,0x10
c0009f3e:	84 c0                	test   al,al
c0009f40:	74 07                	je     c0009f49 <VAS::VAS(bool)+0x14b>
c0009f42:	b8 03 41 00 00       	mov    eax,0x4103
c0009f47:	eb 05                	jmp    c0009f4e <VAS::VAS(bool)+0x150>
c0009f49:	b8 03 40 00 00       	mov    eax,0x4003
c0009f4e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f52:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f55:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f5b:	89 02                	mov    DWORD PTR [edx],eax
c0009f5d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f68:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f6e:	83 ec 08             	sub    esp,0x8
c0009f71:	50                   	push   eax
c0009f72:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f76:	e8 b1 fc ff ff       	call   c0009c2c <VAS::setCPUSpecific(unsigned long)>
c0009f7b:	83 c4 10             	add    esp,0x10
c0009f7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f82:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f85:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f8a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f90:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f96:	83 e0 10             	and    eax,0x10
c0009f99:	84 c0                	test   al,al
c0009f9b:	74 07                	je     c0009fa4 <VAS::VAS(bool)+0x1a6>
c0009f9d:	b8 00 01 00 00       	mov    eax,0x100
c0009fa2:	eb 05                	jmp    c0009fa9 <VAS::VAS(bool)+0x1ab>
c0009fa4:	b8 00 00 00 00       	mov    eax,0x0
c0009fa9:	09 c2                	or     edx,eax
c0009fab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009faf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fb2:	05 fc 0f 00 00       	add    eax,0xffc
c0009fb7:	83 ca 03             	or     edx,0x3
c0009fba:	89 10                	mov    DWORD PTR [eax],edx
c0009fbc:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009fc1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fc7:	83 ec 0c             	sub    esp,0xc
c0009fca:	50                   	push   eax
c0009fcb:	e8 4c 1c 00 00       	call   c000bc1c <Device::getName()>
c0009fd0:	83 c4 10             	add    esp,0x10
c0009fd3:	83 ec 08             	sub    esp,0x8
c0009fd6:	68 23 db 01 c0       	push   0xc001db23
c0009fdb:	50                   	push   eax
c0009fdc:	e8 ff 66 ff ff       	call   c00006e0 <strcmp>
c0009fe1:	83 c4 10             	add    esp,0x10
c0009fe4:	85 c0                	test   eax,eax
c0009fe6:	0f 94 c0             	sete   al
c0009fe9:	84 c0                	test   al,al
c0009feb:	0f 84 87 00 00 00    	je     c000a078 <VAS::VAS(bool)+0x27a>
c0009ff1:	fa                   	cli    
c0009ff2:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0009ff7:	40                   	inc    eax
c0009ff8:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0009ffd:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a002:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a008:	05 7c 09 00 00       	add    eax,0x97c
c000a00d:	83 ec 0c             	sub    esp,0xc
c000a010:	50                   	push   eax
c000a011:	e8 a0 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a016:	83 c4 10             	add    esp,0x10
c000a019:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a01e:	89 c3                	mov    ebx,eax
c000a020:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a025:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a02b:	05 7c 09 00 00       	add    eax,0x97c
c000a030:	83 ec 0c             	sub    esp,0xc
c000a033:	50                   	push   eax
c000a034:	e8 7d d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a039:	83 c4 10             	add    esp,0x10
c000a03c:	83 ec 08             	sub    esp,0x8
c000a03f:	50                   	push   eax
c000a040:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a044:	e8 19 f5 ff ff       	call   c0009562 <VAS::getPageTableEntry(unsigned long)>
c000a049:	83 c4 10             	add    esp,0x10
c000a04c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a04e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a053:	6a 11                	push   0x11
c000a055:	53                   	push   ebx
c000a056:	50                   	push   eax
c000a057:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a05b:	e8 f0 f8 ff ff       	call   c0009950 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a060:	83 c4 10             	add    esp,0x10
c000a063:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a068:	48                   	dec    eax
c000a069:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a06e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a073:	85 c0                	test   eax,eax
c000a075:	75 01                	jne    c000a078 <VAS::VAS(bool)+0x27a>
c000a077:	fb                   	sti    
c000a078:	90                   	nop
c000a079:	83 c4 28             	add    esp,0x28
c000a07c:	5b                   	pop    ebx
c000a07d:	c3                   	ret    

c000a07e <VAS::evict(unsigned long)>:
c000a07e:	55                   	push   ebp
c000a07f:	57                   	push   edi
c000a080:	56                   	push   esi
c000a081:	53                   	push   ebx
c000a082:	83 ec 1c             	sub    esp,0x1c
c000a085:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a089:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a08d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a091:	e8 38 f3 ff ff       	call   c00093ce <Virt::allocateSwapfilePage()>
c000a096:	8b 0d ac f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f7ac
c000a09c:	89 c7                	mov    edi,eax
c000a09e:	85 c9                	test   ecx,ecx
c000a0a0:	7e 3e                	jle    c000a0e0 <VAS::evict(unsigned long)+0x62>
c000a0a2:	89 ee                	mov    esi,ebp
c000a0a4:	31 db                	xor    ebx,ebx
c000a0a6:	83 ec 0c             	sub    esp,0xc
c000a0a9:	57                   	push   edi
c000a0aa:	e8 0d f3 ff ff       	call   c00093bc <Virt::swapIDToSector(unsigned long)>
c000a0af:	89 34 24             	mov    DWORD PTR [esp],esi
c000a0b2:	01 d8                	add    eax,ebx
c000a0b4:	6a 01                	push   0x1
c000a0b6:	31 d2                	xor    edx,edx
c000a0b8:	43                   	inc    ebx
c000a0b9:	52                   	push   edx
c000a0ba:	81 c6 00 02 00 00    	add    esi,0x200
c000a0c0:	50                   	push   eax
c000a0c1:	0f be 05 b8 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f7b8
c000a0c8:	8b 14 85 1c 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbce4]
c000a0cf:	52                   	push   edx
c000a0d0:	e8 07 2c 00 00       	call   c000ccdc <LogicalDisk::write(unsigned long long, int, void*)>
c000a0d5:	83 c4 20             	add    esp,0x20
c000a0d8:	39 1d ac f7 01 c0    	cmp    DWORD PTR ds:0xc001f7ac,ebx
c000a0de:	7f c6                	jg     c000a0a6 <VAS::evict(unsigned long)+0x28>
c000a0e0:	83 ec 08             	sub    esp,0x8
c000a0e3:	c1 e7 0b             	shl    edi,0xb
c000a0e6:	55                   	push   ebp
c000a0e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0eb:	50                   	push   eax
c000a0ec:	e8 71 f4 ff ff       	call   c0009562 <VAS::getPageTableEntry(unsigned long)>
c000a0f1:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0f3:	89 d1                	mov    ecx,edx
c000a0f5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a0fb:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a101:	09 cf                	or     edi,ecx
c000a103:	89 38                	mov    DWORD PTR [eax],edi
c000a105:	89 14 24             	mov    DWORD PTR [esp],edx
c000a108:	ff 05 a8 1f 02 c0    	inc    DWORD PTR ds:0xc0021fa8
c000a10e:	e8 20 d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a113:	0f 20 d8             	mov    eax,cr3
c000a116:	0f 22 d8             	mov    cr3,eax
c000a119:	a1 a4 1f 02 c0       	mov    eax,ds:0xc0021fa4
c000a11e:	c7 44 24 40 31 db 01 c0 	mov    DWORD PTR [esp+0x40],0xc001db31
c000a126:	8d 50 01             	lea    edx,[eax+0x1]
c000a129:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a12d:	89 15 a4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fa4,edx
c000a133:	83 c4 2c             	add    esp,0x2c
c000a136:	5b                   	pop    ebx
c000a137:	5e                   	pop    esi
c000a138:	5f                   	pop    edi
c000a139:	5d                   	pop    ebp
c000a13a:	e9 0b 04 00 00       	jmp    c000a54a <Dbg::kprintf(char const*, ...)>
c000a13f:	90                   	nop

c000a140 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a140:	55                   	push   ebp
c000a141:	57                   	push   edi
c000a142:	56                   	push   esi
c000a143:	53                   	push   ebx
c000a144:	83 ec 14             	sub    esp,0x14
c000a147:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a14b:	53                   	push   ebx
c000a14c:	68 42 db 01 c0       	push   0xc001db42
c000a151:	e8 f4 03 00 00       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c000a156:	83 c4 10             	add    esp,0x10
c000a159:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a15f:	74 21                	je     c000a182 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a161:	83 ec 08             	sub    esp,0x8
c000a164:	53                   	push   ebx
c000a165:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a169:	57                   	push   edi
c000a16a:	e8 f3 f3 ff ff       	call   c0009562 <VAS::getPageTableEntry(unsigned long)>
c000a16f:	83 c4 10             	add    esp,0x10
c000a172:	89 c6                	mov    esi,eax
c000a174:	85 c0                	test   eax,eax
c000a176:	74 0a                	je     c000a182 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a178:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a17a:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a180:	74 0a                	je     c000a18c <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a182:	31 c0                	xor    eax,eax
c000a184:	83 c4 0c             	add    esp,0xc
c000a187:	5b                   	pop    ebx
c000a188:	5e                   	pop    esi
c000a189:	5f                   	pop    edi
c000a18a:	5d                   	pop    ebp
c000a18b:	c3                   	ret    
c000a18c:	e8 04 d9 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a191:	c1 ed 0b             	shr    ebp,0xb
c000a194:	8b 16                	mov    edx,DWORD PTR [esi]
c000a196:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a19c:	09 c2                	or     edx,eax
c000a19e:	81 ca 01 08 00 00    	or     edx,0x801
c000a1a4:	89 16                	mov    DWORD PTR [esi],edx
c000a1a6:	8b 35 ac f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f7ac
c000a1ac:	85 f6                	test   esi,esi
c000a1ae:	7e 3e                	jle    c000a1ee <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a1b0:	89 df                	mov    edi,ebx
c000a1b2:	31 f6                	xor    esi,esi
c000a1b4:	83 ec 0c             	sub    esp,0xc
c000a1b7:	55                   	push   ebp
c000a1b8:	e8 ff f1 ff ff       	call   c00093bc <Virt::swapIDToSector(unsigned long)>
c000a1bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a1c0:	01 f0                	add    eax,esi
c000a1c2:	6a 01                	push   0x1
c000a1c4:	31 d2                	xor    edx,edx
c000a1c6:	46                   	inc    esi
c000a1c7:	52                   	push   edx
c000a1c8:	81 c7 00 02 00 00    	add    edi,0x200
c000a1ce:	50                   	push   eax
c000a1cf:	0f be 05 b8 f7 01 c0 	movsx  eax,BYTE PTR ds:0xc001f7b8
c000a1d6:	8b 0c 85 1c 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbce4]
c000a1dd:	51                   	push   ecx
c000a1de:	e8 8d 2a 00 00       	call   c000cc70 <LogicalDisk::read(unsigned long long, int, void*)>
c000a1e3:	83 c4 20             	add    esp,0x20
c000a1e6:	39 35 ac f7 01 c0    	cmp    DWORD PTR ds:0xc001f7ac,esi
c000a1ec:	7f c6                	jg     c000a1b4 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a1ee:	a1 a8 1f 02 c0       	mov    eax,ds:0xc0021fa8
c000a1f3:	48                   	dec    eax
c000a1f4:	52                   	push   edx
c000a1f5:	a3 a8 1f 02 c0       	mov    ds:0xc0021fa8,eax
c000a1fa:	50                   	push   eax
c000a1fb:	53                   	push   ebx
c000a1fc:	68 55 db 01 c0       	push   0xc001db55
c000a201:	e8 44 03 00 00       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c000a206:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a209:	e8 90 f1 ff ff       	call   c000939e <Virt::freeSwapfilePage(unsigned long)>
c000a20e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	48                   	dec    eax
c000a217:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a21c:	85 c0                	test   eax,eax
c000a21e:	75 01                	jne    c000a221 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a220:	fb                   	sti    
c000a221:	0f 20 d8             	mov    eax,cr3
c000a224:	0f 22 d8             	mov    cr3,eax
c000a227:	b0 01                	mov    al,0x1
c000a229:	e9 56 ff ff ff       	jmp    c000a184 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a22e <VAS::scanForEviction()>:
c000a22e:	57                   	push   edi
c000a22f:	31 ff                	xor    edi,edi
c000a231:	56                   	push   esi
c000a232:	53                   	push   ebx
c000a233:	83 ec 10             	sub    esp,0x10
c000a236:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a23a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a23d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a243:	75 0e                	jne    c000a253 <VAS::scanForEviction()+0x25>
c000a245:	89 da                	mov    edx,ebx
c000a247:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a24a:	c1 ea 16             	shr    edx,0x16
c000a24d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a251:	74 4e                	je     c000a2a1 <VAS::scanForEviction()+0x73>
c000a253:	53                   	push   ebx
c000a254:	56                   	push   esi
c000a255:	e8 08 f3 ff ff       	call   c0009562 <VAS::getPageTableEntry(unsigned long)>
c000a25a:	5a                   	pop    edx
c000a25b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a25d:	59                   	pop    ecx
c000a25e:	89 d1                	mov    ecx,edx
c000a260:	81 e1 01 08 00 00    	and    ecx,0x801
c000a266:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a26c:	74 3e                	je     c000a2ac <VAS::scanForEviction()+0x7e>
c000a26e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a274:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a27a:	76 2b                	jbe    c000a2a7 <VAS::scanForEviction()+0x79>
c000a27c:	47                   	inc    edi
c000a27d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a284:	83 ff 03             	cmp    edi,0x3
c000a287:	74 32                	je     c000a2bb <VAS::scanForEviction()+0x8d>
c000a289:	31 db                	xor    ebx,ebx
c000a28b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a291:	75 c0                	jne    c000a253 <VAS::scanForEviction()+0x25>
c000a293:	89 da                	mov    edx,ebx
c000a295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a298:	c1 ea 16             	shr    edx,0x16
c000a29b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a29f:	75 b2                	jne    c000a253 <VAS::scanForEviction()+0x25>
c000a2a1:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a2a7:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a2aa:	eb 91                	jmp    c000a23d <VAS::scanForEviction()+0xf>
c000a2ac:	f6 c2 20             	test   dl,0x20
c000a2af:	74 13                	je     c000a2c4 <VAS::scanForEviction()+0x96>
c000a2b1:	83 e2 df             	and    edx,0xffffffdf
c000a2b4:	89 10                	mov    DWORD PTR [eax],edx
c000a2b6:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a2b9:	eb b3                	jmp    c000a26e <VAS::scanForEviction()+0x40>
c000a2bb:	83 c4 10             	add    esp,0x10
c000a2be:	31 c0                	xor    eax,eax
c000a2c0:	5b                   	pop    ebx
c000a2c1:	5e                   	pop    esi
c000a2c2:	5f                   	pop    edi
c000a2c3:	c3                   	ret    
c000a2c4:	83 ec 08             	sub    esp,0x8
c000a2c7:	89 d0                	mov    eax,edx
c000a2c9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2d2:	53                   	push   ebx
c000a2d3:	68 6a db 01 c0       	push   0xc001db6a
c000a2d8:	e8 6d 02 00 00       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c000a2dd:	58                   	pop    eax
c000a2de:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a2e1:	5a                   	pop    edx
c000a2e2:	51                   	push   ecx
c000a2e3:	56                   	push   esi
c000a2e4:	e8 95 fd ff ff       	call   c000a07e <VAS::evict(unsigned long)>
c000a2e9:	5b                   	pop    ebx
c000a2ea:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a2ed:	5f                   	pop    edi
c000a2ee:	50                   	push   eax
c000a2ef:	68 7e db 01 c0       	push   0xc001db7e
c000a2f4:	e8 51 02 00 00       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c000a2f9:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a300:	83 c4 10             	add    esp,0x10
c000a303:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a307:	83 c4 10             	add    esp,0x10
c000a30a:	5b                   	pop    ebx
c000a30b:	5e                   	pop    esi
c000a30c:	5f                   	pop    edi
c000a30d:	c3                   	ret    

c000a30e <mapVASFirstTime>:
c000a30e:	55                   	push   ebp
c000a30f:	57                   	push   edi
c000a310:	56                   	push   esi
c000a311:	53                   	push   ebx
c000a312:	83 ec 0c             	sub    esp,0xc
c000a315:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a31a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a31d:	4a                   	dec    edx
c000a31e:	0f 84 c8 00 00 00    	je     c000a3ec <mapVASFirstTime+0xde>
c000a324:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a327:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a32a:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a32f:	c1 e5 15             	shl    ebp,0x15
c000a332:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a337:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a33d:	29 eb                	sub    ebx,ebp
c000a33f:	29 ef                	sub    edi,ebp
c000a341:	e8 4f d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a346:	83 ec 0c             	sub    esp,0xc
c000a349:	68 03 04 00 00       	push   0x403
c000a34e:	6a 01                	push   0x1
c000a350:	53                   	push   ebx
c000a351:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a357:	50                   	push   eax
c000a358:	56                   	push   esi
c000a359:	e8 ec f8 ff ff       	call   c0009c4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a35e:	83 c4 20             	add    esp,0x20
c000a361:	39 fb                	cmp    ebx,edi
c000a363:	75 dc                	jne    c000a341 <mapVASFirstTime+0x33>
c000a365:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a36a:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a36f:	29 eb                	sub    ebx,ebp
c000a371:	29 ef                	sub    edi,ebp
c000a373:	e8 1d d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a378:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a37c:	19 d2                	sbb    edx,edx
c000a37e:	83 ec 0c             	sub    esp,0xc
c000a381:	83 e2 04             	and    edx,0x4
c000a384:	81 c2 03 04 00 00    	add    edx,0x403
c000a38a:	52                   	push   edx
c000a38b:	6a 01                	push   0x1
c000a38d:	53                   	push   ebx
c000a38e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a394:	50                   	push   eax
c000a395:	56                   	push   esi
c000a396:	e8 af f8 ff ff       	call   c0009c4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a39b:	83 c4 20             	add    esp,0x20
c000a39e:	39 df                	cmp    edi,ebx
c000a3a0:	75 d1                	jne    c000a373 <mapVASFirstTime+0x65>
c000a3a2:	83 ec 0c             	sub    esp,0xc
c000a3a5:	bb 7c 10 02 c0       	mov    ebx,0xc002107c
c000a3aa:	6a 04                	push   0x4
c000a3ac:	81 eb 00 00 02 c0    	sub    ebx,0xc0020000
c000a3b2:	6a ff                	push   0xffffffff
c000a3b4:	c1 eb 0c             	shr    ebx,0xc
c000a3b7:	53                   	push   ebx
c000a3b8:	68 00 00 02 c0       	push   0xc0020000
c000a3bd:	56                   	push   esi
c000a3be:	e8 21 f3 ff ff       	call   c00096e4 <VAS::reflagRange(unsigned long, int, int, int)>
c000a3c3:	83 c4 14             	add    esp,0x14
c000a3c6:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c000a3cb:	6a 04                	push   0x4
c000a3cd:	6a ff                	push   0xffffffff
c000a3cf:	53                   	push   ebx
c000a3d0:	68 00 00 02 c0       	push   0xc0020000
c000a3d5:	50                   	push   eax
c000a3d6:	e8 09 f3 ff ff       	call   c00096e4 <VAS::reflagRange(unsigned long, int, int, int)>
c000a3db:	0f 20 d8             	mov    eax,cr3
c000a3de:	0f 22 d8             	mov    cr3,eax
c000a3e1:	83 c4 20             	add    esp,0x20
c000a3e4:	83 c4 0c             	add    esp,0xc
c000a3e7:	5b                   	pop    ebx
c000a3e8:	5e                   	pop    esi
c000a3e9:	5f                   	pop    edi
c000a3ea:	5d                   	pop    ebp
c000a3eb:	c3                   	ret    
c000a3ec:	83 ec 0c             	sub    esp,0xc
c000a3ef:	68 91 db 01 c0       	push   0xc001db91
c000a3f4:	e8 51 01 00 00       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c000a3f9:	83 c4 10             	add    esp,0x10
c000a3fc:	83 c4 0c             	add    esp,0xc
c000a3ff:	5b                   	pop    ebx
c000a400:	5e                   	pop    esi
c000a401:	5f                   	pop    edi
c000a402:	5d                   	pop    ebp
c000a403:	c3                   	ret    

c000a404 <__cxa_atexit>:
c000a404:	31 c0                	xor    eax,eax
c000a406:	c3                   	ret    

c000a407 <__cxa_finalize>:
c000a407:	c3                   	ret    

c000a408 <__stack_chk_fail>:
c000a408:	55                   	push   ebp
c000a409:	89 e5                	mov    ebp,esp
c000a40b:	83 ec 10             	sub    esp,0x10
c000a40e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a411:	68 aa db 01 c0       	push   0xc001dbaa
c000a416:	e8 2f 01 00 00       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c000a41b:	58                   	pop    eax
c000a41c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a41f:	5a                   	pop    edx
c000a420:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a423:	68 aa db 01 c0       	push   0xc001dbaa
c000a428:	e8 1d 01 00 00       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c000a42d:	c7 04 24 b2 db 01 c0 	mov    DWORD PTR [esp],0xc001dbb2
c000a434:	e8 92 5d 00 00       	call   c00101cb <KePanic(char const*)>
c000a439:	83 c4 10             	add    esp,0x10
c000a43c:	c9                   	leave  
c000a43d:	c3                   	ret    

c000a43e <__cxa_pure_virtual>:
c000a43e:	83 ec 18             	sub    esp,0x18
c000a441:	68 ca db 01 c0       	push   0xc001dbca
c000a446:	e8 80 5d 00 00       	call   c00101cb <KePanic(char const*)>
c000a44b:	83 c4 1c             	add    esp,0x1c
c000a44e:	c3                   	ret    

c000a44f <operator new[](unsigned long)>:
c000a44f:	e9 65 d3 ff ff       	jmp    c00077b9 <malloc>

c000a454 <operator delete(void*, unsigned long)>:
c000a454:	e9 80 d3 ff ff       	jmp    c00077d9 <rfree>

c000a459 <operator delete[](void*)>:
c000a459:	e9 7b d3 ff ff       	jmp    c00077d9 <rfree>

c000a45e <operator delete[](void*, unsigned long)>:
c000a45e:	e9 76 d3 ff ff       	jmp    c00077d9 <rfree>

c000a463 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a463:	55                   	push   ebp
c000a464:	b9 04 00 00 00       	mov    ecx,0x4
c000a469:	57                   	push   edi
c000a46a:	56                   	push   esi
c000a46b:	be d3 d7 01 c0       	mov    esi,0xc001d7d3
c000a470:	53                   	push   ebx
c000a471:	83 ec 20             	sub    esp,0x20
c000a474:	a1 d2 d7 01 c0       	mov    eax,ds:0xc001d7d2
c000a479:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a47d:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a481:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a485:	a1 df d7 01 c0       	mov    eax,ds:0xc001d7df
c000a48a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a48e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a492:	fc                   	cld    
c000a493:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a495:	89 ee                	mov    esi,ebp
c000a497:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a49b:	eb 02                	jmp    c000a49f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a49d:	89 c6                	mov    esi,eax
c000a49f:	31 d2                	xor    edx,edx
c000a4a1:	41                   	inc    ecx
c000a4a2:	89 f0                	mov    eax,esi
c000a4a4:	f7 f3                	div    ebx
c000a4a6:	39 de                	cmp    esi,ebx
c000a4a8:	73 f3                	jae    c000a49d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a4aa:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a4ad:	eb 02                	jmp    c000a4b1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a4af:	89 c5                	mov    ebp,eax
c000a4b1:	31 d2                	xor    edx,edx
c000a4b3:	49                   	dec    ecx
c000a4b4:	89 e8                	mov    eax,ebp
c000a4b6:	f7 f3                	div    ebx
c000a4b8:	39 dd                	cmp    ebp,ebx
c000a4ba:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a4be:	88 11                	mov    BYTE PTR [ecx],dl
c000a4c0:	73 ed                	jae    c000a4af <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a4c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a4c6:	83 c4 20             	add    esp,0x20
c000a4c9:	5b                   	pop    ebx
c000a4ca:	5e                   	pop    esi
c000a4cb:	5f                   	pop    edi
c000a4cc:	5d                   	pop    ebp
c000a4cd:	c3                   	ret    

c000a4ce <Dbg::logc(char)>:
c000a4ce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a4d2:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a4d9:	75 12                	jne    c000a4ed <Dbg::logc(char)+0x1f>
c000a4db:	ba fd 03 00 00       	mov    edx,0x3fd
c000a4e0:	ec                   	in     al,dx
c000a4e1:	a8 20                	test   al,0x20
c000a4e3:	74 fb                	je     c000a4e0 <Dbg::logc(char)+0x12>
c000a4e5:	ba f8 03 00 00       	mov    edx,0x3f8
c000a4ea:	88 c8                	mov    al,cl
c000a4ec:	ee                   	out    dx,al
c000a4ed:	c3                   	ret    

c000a4ee <Dbg::logs(char*)>:
c000a4ee:	53                   	push   ebx
c000a4ef:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a4f3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4f6:	84 c0                	test   al,al
c000a4f8:	74 0f                	je     c000a509 <Dbg::logs(char*)+0x1b>
c000a4fa:	50                   	push   eax
c000a4fb:	43                   	inc    ebx
c000a4fc:	e8 cd ff ff ff       	call   c000a4ce <Dbg::logc(char)>
c000a501:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a504:	5a                   	pop    edx
c000a505:	84 c0                	test   al,al
c000a507:	75 f1                	jne    c000a4fa <Dbg::logs(char*)+0xc>
c000a509:	5b                   	pop    ebx
c000a50a:	c3                   	ret    

c000a50b <Dbg::logWriteInt(unsigned int)>:
c000a50b:	83 ec 10             	sub    esp,0x10
c000a50e:	6a 0a                	push   0xa
c000a510:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a514:	50                   	push   eax
c000a515:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a519:	50                   	push   eax
c000a51a:	e8 44 ff ff ff       	call   c000a463 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a51f:	50                   	push   eax
c000a520:	e8 c9 ff ff ff       	call   c000a4ee <Dbg::logs(char*)>
c000a525:	83 c4 20             	add    esp,0x20
c000a528:	c3                   	ret    

c000a529 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a529:	83 ec 10             	sub    esp,0x10
c000a52c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a530:	50                   	push   eax
c000a531:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a535:	50                   	push   eax
c000a536:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a53a:	52                   	push   edx
c000a53b:	e8 23 ff ff ff       	call   c000a463 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a540:	50                   	push   eax
c000a541:	e8 a8 ff ff ff       	call   c000a4ee <Dbg::logs(char*)>
c000a546:	83 c4 20             	add    esp,0x20
c000a549:	c3                   	ret    

c000a54a <Dbg::kprintf(char const*, ...)>:
c000a54a:	55                   	push   ebp
c000a54b:	57                   	push   edi
c000a54c:	56                   	push   esi
c000a54d:	53                   	push   ebx
c000a54e:	83 ec 0c             	sub    esp,0xc
c000a551:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a555:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a55c:	74 08                	je     c000a566 <Dbg::kprintf(char const*, ...)+0x1c>
c000a55e:	83 c4 0c             	add    esp,0xc
c000a561:	5b                   	pop    ebx
c000a562:	5e                   	pop    esi
c000a563:	5f                   	pop    edi
c000a564:	5d                   	pop    ebp
c000a565:	c3                   	ret    
c000a566:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a56a:	31 ff                	xor    edi,edi
c000a56c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a570:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a573:	84 c0                	test   al,al
c000a575:	74 e7                	je     c000a55e <Dbg::kprintf(char const*, ...)+0x14>
c000a577:	8d 77 01             	lea    esi,[edi+0x1]
c000a57a:	3c 25                	cmp    al,0x25
c000a57c:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a57f:	75 47                	jne    c000a5c8 <Dbg::kprintf(char const*, ...)+0x7e>
c000a581:	83 c7 02             	add    edi,0x2
c000a584:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a587:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a58a:	83 e8 25             	sub    eax,0x25
c000a58d:	3c 53                	cmp    al,0x53
c000a58f:	0f 87 d2 00 00 00    	ja     c000a667 <Dbg::kprintf(char const*, ...)+0x11d>
c000a595:	25 ff 00 00 00       	and    eax,0xff
c000a59a:	ff 24 85 e0 db 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2420]
c000a5a1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5a5:	89 c8                	mov    eax,ecx
c000a5a7:	83 c1 04             	add    ecx,0x4
c000a5aa:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5ae:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a5b0:	55                   	push   ebp
c000a5b1:	e8 55 ff ff ff       	call   c000a50b <Dbg::logWriteInt(unsigned int)>
c000a5b6:	58                   	pop    eax
c000a5b7:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a5ba:	84 c0                	test   al,al
c000a5bc:	74 a0                	je     c000a55e <Dbg::kprintf(char const*, ...)+0x14>
c000a5be:	8d 77 01             	lea    esi,[edi+0x1]
c000a5c1:	3c 25                	cmp    al,0x25
c000a5c3:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a5c6:	74 b9                	je     c000a581 <Dbg::kprintf(char const*, ...)+0x37>
c000a5c8:	50                   	push   eax
c000a5c9:	89 f7                	mov    edi,esi
c000a5cb:	e8 fe fe ff ff       	call   c000a4ce <Dbg::logc(char)>
c000a5d0:	89 ee                	mov    esi,ebp
c000a5d2:	58                   	pop    eax
c000a5d3:	eb e2                	jmp    c000a5b7 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5d5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5d9:	89 c8                	mov    eax,ecx
c000a5db:	83 c1 04             	add    ecx,0x4
c000a5de:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5e0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5e4:	50                   	push   eax
c000a5e5:	e8 04 ff ff ff       	call   c000a4ee <Dbg::logs(char*)>
c000a5ea:	58                   	pop    eax
c000a5eb:	eb ca                	jmp    c000a5b7 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5ed:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5f1:	89 d0                	mov    eax,edx
c000a5f3:	83 c2 04             	add    edx,0x4
c000a5f6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5fa:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5fc:	50                   	push   eax
c000a5fd:	e8 09 ff ff ff       	call   c000a50b <Dbg::logWriteInt(unsigned int)>
c000a602:	58                   	pop    eax
c000a603:	eb b2                	jmp    c000a5b7 <Dbg::kprintf(char const*, ...)+0x6d>
c000a605:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a609:	89 d0                	mov    eax,edx
c000a60b:	83 c2 04             	add    edx,0x4
c000a60e:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a611:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a615:	50                   	push   eax
c000a616:	e8 b3 fe ff ff       	call   c000a4ce <Dbg::logc(char)>
c000a61b:	58                   	pop    eax
c000a61c:	eb 99                	jmp    c000a5b7 <Dbg::kprintf(char const*, ...)+0x6d>
c000a61e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a622:	89 c8                	mov    eax,ecx
c000a624:	83 c1 04             	add    ecx,0x4
c000a627:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a62b:	6a 10                	push   0x10
c000a62d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a62f:	51                   	push   ecx
c000a630:	e8 f4 fe ff ff       	call   c000a529 <Dbg::logWriteIntBase(unsigned int, int)>
c000a635:	5d                   	pop    ebp
c000a636:	58                   	pop    eax
c000a637:	e9 7b ff ff ff       	jmp    c000a5b7 <Dbg::kprintf(char const*, ...)+0x6d>
c000a63c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a640:	89 d0                	mov    eax,edx
c000a642:	83 c2 08             	add    edx,0x8
c000a645:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a649:	6a 10                	push   0x10
c000a64b:	8b 00                	mov    eax,DWORD PTR [eax]
c000a64d:	50                   	push   eax
c000a64e:	e8 d6 fe ff ff       	call   c000a529 <Dbg::logWriteIntBase(unsigned int, int)>
c000a653:	58                   	pop    eax
c000a654:	5a                   	pop    edx
c000a655:	e9 5d ff ff ff       	jmp    c000a5b7 <Dbg::kprintf(char const*, ...)+0x6d>
c000a65a:	6a 25                	push   0x25
c000a65c:	e8 6d fe ff ff       	call   c000a4ce <Dbg::logc(char)>
c000a661:	5a                   	pop    edx
c000a662:	e9 50 ff ff ff       	jmp    c000a5b7 <Dbg::kprintf(char const*, ...)+0x6d>
c000a667:	6a 25                	push   0x25
c000a669:	e8 60 fe ff ff       	call   c000a4ce <Dbg::logc(char)>
c000a66e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a672:	50                   	push   eax
c000a673:	e8 56 fe ff ff       	call   c000a4ce <Dbg::logc(char)>
c000a678:	5a                   	pop    edx
c000a679:	59                   	pop    ecx
c000a67a:	e9 38 ff ff ff       	jmp    c000a5b7 <Dbg::kprintf(char const*, ...)+0x6d>
c000a67f:	90                   	nop

c000a680 <File::read(unsigned long long, void*, int*)>:
c000a680:	53                   	push   ebx
c000a681:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a685:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a689:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a690:	3c 19                	cmp    al,0x19
c000a692:	77 35                	ja     c000a6c9 <File::read(unsigned long long, void*, int*)+0x49>
c000a694:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a69b:	85 c0                	test   eax,eax
c000a69d:	74 2a                	je     c000a6c9 <File::read(unsigned long long, void*, int*)+0x49>
c000a69f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6a5:	85 c0                	test   eax,eax
c000a6a7:	74 20                	je     c000a6c9 <File::read(unsigned long long, void*, int*)+0x49>
c000a6a9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6ad:	74 21                	je     c000a6d0 <File::read(unsigned long long, void*, int*)+0x50>
c000a6af:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6b1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6b5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6c3:	5b                   	pop    ebx
c000a6c4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a6c7:	ff e0                	jmp    eax
c000a6c9:	b8 0b 00 00 00       	mov    eax,0xb
c000a6ce:	eb 05                	jmp    c000a6d5 <File::read(unsigned long long, void*, int*)+0x55>
c000a6d0:	b8 05 00 00 00       	mov    eax,0x5
c000a6d5:	5b                   	pop    ebx
c000a6d6:	c3                   	ret    
c000a6d7:	90                   	nop

c000a6d8 <File::write(unsigned long long, void*, int*)>:
c000a6d8:	53                   	push   ebx
c000a6d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6e1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6e8:	3c 19                	cmp    al,0x19
c000a6ea:	77 35                	ja     c000a721 <File::write(unsigned long long, void*, int*)+0x49>
c000a6ec:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a6f3:	85 c0                	test   eax,eax
c000a6f5:	74 2a                	je     c000a721 <File::write(unsigned long long, void*, int*)+0x49>
c000a6f7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6fd:	85 c0                	test   eax,eax
c000a6ff:	74 20                	je     c000a721 <File::write(unsigned long long, void*, int*)+0x49>
c000a701:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a705:	74 21                	je     c000a728 <File::write(unsigned long long, void*, int*)+0x50>
c000a707:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a709:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a70d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a713:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a717:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a71b:	5b                   	pop    ebx
c000a71c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a71f:	ff e0                	jmp    eax
c000a721:	b8 0b 00 00 00       	mov    eax,0xb
c000a726:	eb 05                	jmp    c000a72d <File::write(unsigned long long, void*, int*)+0x55>
c000a728:	b8 05 00 00 00       	mov    eax,0x5
c000a72d:	5b                   	pop    ebx
c000a72e:	c3                   	ret    
c000a72f:	90                   	nop

c000a730 <Directory::read(unsigned long long, void*, int*)>:
c000a730:	53                   	push   ebx
c000a731:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a735:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a739:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a740:	3c 19                	cmp    al,0x19
c000a742:	77 35                	ja     c000a779 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a744:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a74b:	85 c0                	test   eax,eax
c000a74d:	74 2a                	je     c000a779 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a74f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a755:	85 c0                	test   eax,eax
c000a757:	74 20                	je     c000a779 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a759:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a75d:	74 21                	je     c000a780 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a75f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a761:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a765:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a773:	5b                   	pop    ebx
c000a774:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a777:	ff e0                	jmp    eax
c000a779:	b8 0b 00 00 00       	mov    eax,0xb
c000a77e:	eb 05                	jmp    c000a785 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a780:	b8 05 00 00 00       	mov    eax,0x5
c000a785:	5b                   	pop    ebx
c000a786:	c3                   	ret    
c000a787:	90                   	nop

c000a788 <Directory::write(unsigned long long, void*, int*)>:
c000a788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a78c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a793:	b8 0b 00 00 00       	mov    eax,0xb
c000a798:	80 fa 19             	cmp    dl,0x19
c000a79b:	77 18                	ja     c000a7b5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a79d:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000a7a4:	85 d2                	test   edx,edx
c000a7a6:	74 0d                	je     c000a7b5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a7a8:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a7af:	19 c0                	sbb    eax,eax
c000a7b1:	83 e0 0a             	and    eax,0xa
c000a7b4:	40                   	inc    eax
c000a7b5:	c3                   	ret    

c000a7b6 <File::isAtty()>:
c000a7b6:	31 c0                	xor    eax,eax
c000a7b8:	c3                   	ret    
c000a7b9:	90                   	nop

c000a7ba <Directory::isAtty()>:
c000a7ba:	31 c0                	xor    eax,eax
c000a7bc:	c3                   	ret    
c000a7bd:	90                   	nop

c000a7be <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a7be:	b8 0a 00 00 00       	mov    eax,0xa
c000a7c3:	c3                   	ret    

c000a7c4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a7c4:	b8 0a 00 00 00       	mov    eax,0xa
c000a7c9:	c3                   	ret    

c000a7ca <Filesystem::allocateSwapfile(char const*, int)>:
c000a7ca:	31 c0                	xor    eax,eax
c000a7cc:	31 d2                	xor    edx,edx
c000a7ce:	c3                   	ret    
c000a7cf:	90                   	nop

c000a7d0 <File::~File()>:
c000a7d0:	83 ec 0c             	sub    esp,0xc
c000a7d3:	ba a0 dd 01 c0       	mov    edx,0xc001dda0
c000a7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7dc:	89 10                	mov    DWORD PTR [eax],edx
c000a7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7e2:	83 ec 0c             	sub    esp,0xc
c000a7e5:	50                   	push   eax
c000a7e6:	e8 41 e8 ff ff       	call   c000902c <UnixFile::~UnixFile()>
c000a7eb:	83 c4 10             	add    esp,0x10
c000a7ee:	90                   	nop
c000a7ef:	83 c4 0c             	add    esp,0xc
c000a7f2:	c3                   	ret    
c000a7f3:	90                   	nop

c000a7f4 <File::~File()>:
c000a7f4:	83 ec 0c             	sub    esp,0xc
c000a7f7:	83 ec 0c             	sub    esp,0xc
c000a7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7fe:	e8 cd ff ff ff       	call   c000a7d0 <File::~File()>
c000a803:	83 c4 10             	add    esp,0x10
c000a806:	83 ec 08             	sub    esp,0x8
c000a809:	68 14 01 00 00       	push   0x114
c000a80e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a812:	e8 3d fc ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c000a817:	83 c4 10             	add    esp,0x10
c000a81a:	83 c4 0c             	add    esp,0xc
c000a81d:	c3                   	ret    

c000a81e <Directory::~Directory()>:
c000a81e:	83 ec 0c             	sub    esp,0xc
c000a821:	ba bc dd 01 c0       	mov    edx,0xc001ddbc
c000a826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a82a:	89 10                	mov    DWORD PTR [eax],edx
c000a82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a830:	83 ec 0c             	sub    esp,0xc
c000a833:	50                   	push   eax
c000a834:	e8 f3 e7 ff ff       	call   c000902c <UnixFile::~UnixFile()>
c000a839:	83 c4 10             	add    esp,0x10
c000a83c:	90                   	nop
c000a83d:	83 c4 0c             	add    esp,0xc
c000a840:	c3                   	ret    
c000a841:	90                   	nop

c000a842 <Directory::~Directory()>:
c000a842:	83 ec 0c             	sub    esp,0xc
c000a845:	83 ec 0c             	sub    esp,0xc
c000a848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a84c:	e8 cd ff ff ff       	call   c000a81e <Directory::~Directory()>
c000a851:	83 c4 10             	add    esp,0x10
c000a854:	83 ec 08             	sub    esp,0x8
c000a857:	68 14 01 00 00       	push   0x114
c000a85c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a860:	e8 ef fb ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c000a865:	83 c4 10             	add    esp,0x10
c000a868:	83 c4 0c             	add    esp,0xc
c000a86b:	c3                   	ret    

c000a86c <Filesystem::Filesystem()>:
c000a86c:	ba 38 dd 01 c0       	mov    edx,0xc001dd38
c000a871:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a875:	89 10                	mov    DWORD PTR [eax],edx
c000a877:	8b 15 b4 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fb4
c000a87d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a881:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a884:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a888:	a3 b4 1f 02 c0       	mov    ds:0xc0021fb4,eax
c000a88d:	90                   	nop
c000a88e:	c3                   	ret    
c000a88f:	90                   	nop

c000a890 <Filesystem::~Filesystem()>:
c000a890:	ba 38 dd 01 c0       	mov    edx,0xc001dd38
c000a895:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a899:	89 10                	mov    DWORD PTR [eax],edx
c000a89b:	90                   	nop
c000a89c:	c3                   	ret    
c000a89d:	90                   	nop

c000a89e <Filesystem::~Filesystem()>:
c000a89e:	83 ec 0c             	sub    esp,0xc
c000a8a1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a8a5:	e8 e6 ff ff ff       	call   c000a890 <Filesystem::~Filesystem()>
c000a8aa:	83 c4 04             	add    esp,0x4
c000a8ad:	83 ec 08             	sub    esp,0x8
c000a8b0:	6a 08                	push   0x8
c000a8b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8b6:	e8 99 fb ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c000a8bb:	83 c4 10             	add    esp,0x10
c000a8be:	83 c4 0c             	add    esp,0xc
c000a8c1:	c3                   	ret    

c000a8c2 <Fs::getcwd(Process*, char*, int)>:
c000a8c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8c6:	31 c0                	xor    eax,eax
c000a8c8:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a8cb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a8cf:	7d 15                	jge    c000a8e6 <Fs::getcwd(Process*, char*, int)+0x24>
c000a8d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8d5:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a8dc:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a8df:	84 c9                	test   cl,cl
c000a8e1:	74 06                	je     c000a8e9 <Fs::getcwd(Process*, char*, int)+0x27>
c000a8e3:	40                   	inc    eax
c000a8e4:	eb e2                	jmp    c000a8c8 <Fs::getcwd(Process*, char*, int)+0x6>
c000a8e6:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a8e9:	31 c0                	xor    eax,eax
c000a8eb:	c3                   	ret    

c000a8ec <Fs::initVFS()>:
c000a8ec:	83 ec 18             	sub    esp,0x18
c000a8ef:	6a 08                	push   0x8
c000a8f1:	e8 c3 ce ff ff       	call   c00077b9 <malloc>
c000a8f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8f9:	e8 be c7 00 00       	call   c00170bc <FAT::FAT()>
c000a8fe:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a905:	e8 af ce ff ff       	call   c00077b9 <malloc>
c000a90a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a90d:	e8 06 d5 00 00       	call   c0017e18 <ISO9660::ISO9660()>
c000a912:	83 c4 1c             	add    esp,0x1c
c000a915:	c3                   	ret    

c000a916 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a916:	55                   	push   ebp
c000a917:	57                   	push   edi
c000a918:	56                   	push   esi
c000a919:	53                   	push   ebx
c000a91a:	81 ec 10 04 00 00    	sub    esp,0x410
c000a920:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a927:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a92e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a935:	68 00 04 00 00       	push   0x400
c000a93a:	6a 00                	push   0x0
c000a93c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a940:	56                   	push   esi
c000a941:	e8 8a 5b ff ff       	call   c00004d0 <memset>
c000a946:	83 c4 10             	add    esp,0x10
c000a949:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a94d:	75 0b                	jne    c000a95a <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a94f:	50                   	push   eax
c000a950:	50                   	push   eax
c000a951:	57                   	push   edi
c000a952:	56                   	push   esi
c000a953:	e8 a8 5c ff ff       	call   c0000600 <strcpy>
c000a958:	eb 41                	jmp    c000a99b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a95a:	8a 07                	mov    al,BYTE PTR [edi]
c000a95c:	3c 5c                	cmp    al,0x5c
c000a95e:	74 04                	je     c000a964 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a960:	3c 2f                	cmp    al,0x2f
c000a962:	75 18                	jne    c000a97c <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a964:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a967:	3c 60                	cmp    al,0x60
c000a969:	7e 03                	jle    c000a96e <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a96b:	83 e8 20             	sub    eax,0x20
c000a96e:	88 04 24             	mov    BYTE PTR [esp],al
c000a971:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a978:	50                   	push   eax
c000a979:	50                   	push   eax
c000a97a:	eb 18                	jmp    c000a994 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a97c:	50                   	push   eax
c000a97d:	50                   	push   eax
c000a97e:	55                   	push   ebp
c000a97f:	56                   	push   esi
c000a980:	e8 7b 5c ff ff       	call   c0000600 <strcpy>
c000a985:	5a                   	pop    edx
c000a986:	59                   	pop    ecx
c000a987:	68 3e eb 01 c0       	push   0xc001eb3e
c000a98c:	56                   	push   esi
c000a98d:	e8 2e 5e ff ff       	call   c00007c0 <strcat>
c000a992:	5d                   	pop    ebp
c000a993:	58                   	pop    eax
c000a994:	57                   	push   edi
c000a995:	56                   	push   esi
c000a996:	e8 25 5e ff ff       	call   c00007c0 <strcat>
c000a99b:	83 c4 10             	add    esp,0x10
c000a99e:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a9a1:	3c 60                	cmp    al,0x60
c000a9a3:	7e 03                	jle    c000a9a8 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a9a5:	83 e8 20             	sub    eax,0x20
c000a9a8:	88 04 24             	mov    BYTE PTR [esp],al
c000a9ab:	88 03                	mov    BYTE PTR [ebx],al
c000a9ad:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a9b4:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a9ba:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a9be:	bf 03 00 00 00       	mov    edi,0x3
c000a9c3:	b8 03 00 00 00       	mov    eax,0x3
c000a9c8:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a9cb:	84 d2                	test   dl,dl
c000a9cd:	0f 84 91 00 00 00    	je     c000aa64 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a9d3:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a9d6:	80 fa 5c             	cmp    dl,0x5c
c000a9d9:	74 05                	je     c000a9e0 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a9db:	80 fa 2f             	cmp    dl,0x2f
c000a9de:	75 12                	jne    c000a9f2 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a9e0:	89 c5                	mov    ebp,eax
c000a9e2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a9e7:	74 09                	je     c000a9f2 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a9e9:	40                   	inc    eax
c000a9ea:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a9ee:	89 cf                	mov    edi,ecx
c000a9f0:	eb d6                	jmp    c000a9c8 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a9f2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a9f7:	75 5b                	jne    c000aa54 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a9f9:	80 fa 2e             	cmp    dl,0x2e
c000a9fc:	75 56                	jne    c000aa54 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a9fe:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aa02:	74 19                	je     c000aa1d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aa04:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aa09:	74 53                	je     c000aa5e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aa0b:	89 f9                	mov    ecx,edi
c000aa0d:	41                   	inc    ecx
c000aa0e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aa11:	80 fa 2f             	cmp    dl,0x2f
c000aa14:	74 f7                	je     c000aa0d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aa16:	80 fa 5c             	cmp    dl,0x5c
c000aa19:	74 f2                	je     c000aa0d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aa1b:	eb d1                	jmp    c000a9ee <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa1d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aa22:	74 3a                	je     c000aa5e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aa24:	83 f8 03             	cmp    eax,0x3
c000aa27:	74 c5                	je     c000a9ee <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa29:	41                   	inc    ecx
c000aa2a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aa2d:	80 fa 2f             	cmp    dl,0x2f
c000aa30:	74 f7                	je     c000aa29 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aa32:	80 fa 5c             	cmp    dl,0x5c
c000aa35:	74 f2                	je     c000aa29 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aa37:	48                   	dec    eax
c000aa38:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa3c:	75 06                	jne    c000aa44 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa3e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa42:	eb f3                	jmp    c000aa37 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000aa44:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aa48:	74 07                	je     c000aa51 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aa4a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa4e:	48                   	dec    eax
c000aa4f:	eb f3                	jmp    c000aa44 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aa51:	40                   	inc    eax
c000aa52:	eb 9a                	jmp    c000a9ee <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa54:	80 fa 2f             	cmp    dl,0x2f
c000aa57:	74 95                	je     c000a9ee <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa59:	80 fa 5c             	cmp    dl,0x5c
c000aa5c:	74 90                	je     c000a9ee <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa5e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000aa61:	40                   	inc    eax
c000aa62:	eb 8a                	jmp    c000a9ee <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa64:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa68:	83 ec 0c             	sub    esp,0xc
c000aa6b:	53                   	push   ebx
c000aa6c:	e8 cf 5a ff ff       	call   c0000540 <strlen>
c000aa71:	83 c4 10             	add    esp,0x10
c000aa74:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aa79:	75 26                	jne    c000aaa1 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aa7b:	83 ec 0c             	sub    esp,0xc
c000aa7e:	53                   	push   ebx
c000aa7f:	e8 bc 5a ff ff       	call   c0000540 <strlen>
c000aa84:	83 c4 10             	add    esp,0x10
c000aa87:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aa8c:	74 26                	je     c000aab4 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aa8e:	83 ec 0c             	sub    esp,0xc
c000aa91:	53                   	push   ebx
c000aa92:	e8 a9 5a ff ff       	call   c0000540 <strlen>
c000aa97:	83 c4 10             	add    esp,0x10
c000aa9a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aa9f:	eb c7                	jmp    c000aa68 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aaa1:	83 ec 0c             	sub    esp,0xc
c000aaa4:	53                   	push   ebx
c000aaa5:	e8 96 5a ff ff       	call   c0000540 <strlen>
c000aaaa:	83 c4 10             	add    esp,0x10
c000aaad:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aab2:	74 c7                	je     c000aa7b <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aab4:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aaba:	5b                   	pop    ebx
c000aabb:	5e                   	pop    esi
c000aabc:	5f                   	pop    edi
c000aabd:	5d                   	pop    ebp
c000aabe:	c3                   	ret    
c000aabf:	90                   	nop

c000aac0 <File::File(char const*, Process*)>:
c000aac0:	83 ec 0c             	sub    esp,0xc
c000aac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac7:	83 ec 08             	sub    esp,0x8
c000aaca:	6a 00                	push   0x0
c000aacc:	50                   	push   eax
c000aacd:	e8 78 e3 ff ff       	call   c0008e4a <UnixFile::UnixFile(int)>
c000aad2:	83 c4 10             	add    esp,0x10
c000aad5:	ba a0 dd 01 c0       	mov    edx,0xc001dda0
c000aada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aade:	89 10                	mov    DWORD PTR [eax],edx
c000aae0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aae4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aaea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaee:	83 c0 0d             	add    eax,0xd
c000aaf1:	83 ec 04             	sub    esp,0x4
c000aaf4:	52                   	push   edx
c000aaf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaf9:	50                   	push   eax
c000aafa:	e8 17 fe ff ff       	call   c000a916 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aaff:	83 c4 10             	add    esp,0x10
c000ab02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab06:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ab09:	8d 50 bf             	lea    edx,[eax-0x41]
c000ab0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab10:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000ab16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab1a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000ab1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab22:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab28:	25 ff 00 00 00       	and    eax,0xff
c000ab2d:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ab34:	85 c0                	test   eax,eax
c000ab36:	74 42                	je     c000ab7a <File::File(char const*, Process*)+0xba>
c000ab38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab3c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab42:	25 ff 00 00 00       	and    eax,0xff
c000ab47:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ab4e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ab54:	85 c0                	test   eax,eax
c000ab56:	75 22                	jne    c000ab7a <File::File(char const*, Process*)+0xba>
c000ab58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab5c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab62:	25 ff 00 00 00       	and    eax,0xff
c000ab67:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ab6e:	83 ec 0c             	sub    esp,0xc
c000ab71:	50                   	push   eax
c000ab72:	e8 37 20 00 00       	call   c000cbae <LogicalDisk::mount()>
c000ab77:	83 c4 10             	add    esp,0x10
c000ab7a:	90                   	nop
c000ab7b:	83 c4 0c             	add    esp,0xc
c000ab7e:	c3                   	ret    
c000ab7f:	90                   	nop

c000ab80 <File::open(FileOpenMode)>:
c000ab80:	53                   	push   ebx
c000ab81:	b8 0b 00 00 00       	mov    eax,0xb
c000ab86:	83 ec 08             	sub    esp,0x8
c000ab89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab8d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ab94:	80 fa 19             	cmp    dl,0x19
c000ab97:	77 40                	ja     c000abd9 <File::open(FileOpenMode)+0x59>
c000ab99:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000aba0:	85 d2                	test   edx,edx
c000aba2:	74 35                	je     c000abd9 <File::open(FileOpenMode)+0x59>
c000aba4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000abaa:	85 d2                	test   edx,edx
c000abac:	74 2b                	je     c000abd9 <File::open(FileOpenMode)+0x59>
c000abae:	b8 06 00 00 00       	mov    eax,0x6
c000abb3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000abb7:	75 20                	jne    c000abd9 <File::open(FileOpenMode)+0x59>
c000abb9:	8b 02                	mov    eax,DWORD PTR [edx]
c000abbb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000abc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000abc5:	51                   	push   ecx
c000abc6:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000abc9:	51                   	push   ecx
c000abca:	52                   	push   edx
c000abcb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000abce:	83 c4 10             	add    esp,0x10
c000abd1:	85 c0                	test   eax,eax
c000abd3:	75 04                	jne    c000abd9 <File::open(FileOpenMode)+0x59>
c000abd5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000abd9:	83 c4 08             	add    esp,0x8
c000abdc:	5b                   	pop    ebx
c000abdd:	c3                   	ret    

c000abde <File::close()>:
c000abde:	53                   	push   ebx
c000abdf:	b8 0b 00 00 00       	mov    eax,0xb
c000abe4:	83 ec 08             	sub    esp,0x8
c000abe7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000abeb:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000abf2:	80 fa 19             	cmp    dl,0x19
c000abf5:	77 41                	ja     c000ac38 <File::close()+0x5a>
c000abf7:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000abfe:	85 db                	test   ebx,ebx
c000ac00:	74 36                	je     c000ac38 <File::close()+0x5a>
c000ac02:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ac09:	74 2d                	je     c000ac38 <File::close()+0x5a>
c000ac0b:	b8 05 00 00 00       	mov    eax,0x5
c000ac10:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac14:	74 22                	je     c000ac38 <File::close()+0x5a>
c000ac16:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000ac1a:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac21:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ac27:	53                   	push   ebx
c000ac28:	53                   	push   ebx
c000ac29:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac2b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac31:	50                   	push   eax
c000ac32:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ac35:	83 c4 10             	add    esp,0x10
c000ac38:	83 c4 08             	add    esp,0x8
c000ac3b:	5b                   	pop    ebx
c000ac3c:	c3                   	ret    
c000ac3d:	90                   	nop

c000ac3e <File::seek(unsigned long long)>:
c000ac3e:	56                   	push   esi
c000ac3f:	53                   	push   ebx
c000ac40:	b8 0b 00 00 00       	mov    eax,0xb
c000ac45:	51                   	push   ecx
c000ac46:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ac4a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ac4e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ac55:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac59:	80 fa 19             	cmp    dl,0x19
c000ac5c:	77 31                	ja     c000ac8f <File::seek(unsigned long long)+0x51>
c000ac5e:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac65:	85 d2                	test   edx,edx
c000ac67:	74 26                	je     c000ac8f <File::seek(unsigned long long)+0x51>
c000ac69:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac6f:	85 d2                	test   edx,edx
c000ac71:	74 1c                	je     c000ac8f <File::seek(unsigned long long)+0x51>
c000ac73:	b8 05 00 00 00       	mov    eax,0x5
c000ac78:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ac7c:	74 11                	je     c000ac8f <File::seek(unsigned long long)+0x51>
c000ac7e:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac80:	53                   	push   ebx
c000ac81:	51                   	push   ecx
c000ac82:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ac88:	52                   	push   edx
c000ac89:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ac8c:	83 c4 10             	add    esp,0x10
c000ac8f:	5a                   	pop    edx
c000ac90:	5b                   	pop    ebx
c000ac91:	5e                   	pop    esi
c000ac92:	c3                   	ret    
c000ac93:	90                   	nop

c000ac94 <File::tell(unsigned long long*)>:
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	b8 0b 00 00 00       	mov    eax,0xb
c000ac9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aca0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000aca7:	80 fa 19             	cmp    dl,0x19
c000acaa:	77 34                	ja     c000ace0 <File::tell(unsigned long long*)+0x4c>
c000acac:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000acb3:	85 d2                	test   edx,edx
c000acb5:	74 29                	je     c000ace0 <File::tell(unsigned long long*)+0x4c>
c000acb7:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000acbd:	85 d2                	test   edx,edx
c000acbf:	74 1f                	je     c000ace0 <File::tell(unsigned long long*)+0x4c>
c000acc1:	b8 05 00 00 00       	mov    eax,0x5
c000acc6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000acca:	74 14                	je     c000ace0 <File::tell(unsigned long long*)+0x4c>
c000accc:	50                   	push   eax
c000accd:	8b 02                	mov    eax,DWORD PTR [edx]
c000accf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000acd9:	52                   	push   edx
c000acda:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000acdd:	83 c4 10             	add    esp,0x10
c000ace0:	83 c4 0c             	add    esp,0xc
c000ace3:	c3                   	ret    

c000ace4 <File::rewind()>:
c000ace4:	83 ec 10             	sub    esp,0x10
c000ace7:	6a 00                	push   0x0
c000ace9:	6a 00                	push   0x0
c000aceb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acef:	e8 4a ff ff ff       	call   c000ac3e <File::seek(unsigned long long)>
c000acf4:	83 c4 1c             	add    esp,0x1c
c000acf7:	c3                   	ret    

c000acf8 <File::unlink()>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	b8 0b 00 00 00       	mov    eax,0xb
c000ad00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad04:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad0b:	80 f9 19             	cmp    cl,0x19
c000ad0e:	77 2f                	ja     c000ad3f <File::unlink()+0x47>
c000ad10:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ad17:	85 c9                	test   ecx,ecx
c000ad19:	74 24                	je     c000ad3f <File::unlink()+0x47>
c000ad1b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad21:	85 c9                	test   ecx,ecx
c000ad23:	74 1a                	je     c000ad3f <File::unlink()+0x47>
c000ad25:	b8 06 00 00 00       	mov    eax,0x6
c000ad2a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad2e:	75 0f                	jne    c000ad3f <File::unlink()+0x47>
c000ad30:	83 c2 0d             	add    edx,0xd
c000ad33:	50                   	push   eax
c000ad34:	50                   	push   eax
c000ad35:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad37:	52                   	push   edx
c000ad38:	51                   	push   ecx
c000ad39:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ad3c:	83 c4 10             	add    esp,0x10
c000ad3f:	83 c4 0c             	add    esp,0xc
c000ad42:	c3                   	ret    
c000ad43:	90                   	nop

c000ad44 <File::rename(char const*)>:
c000ad44:	83 ec 0c             	sub    esp,0xc
c000ad47:	b8 0b 00 00 00       	mov    eax,0xb
c000ad4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad50:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad57:	80 f9 19             	cmp    cl,0x19
c000ad5a:	77 32                	ja     c000ad8e <File::rename(char const*)+0x4a>
c000ad5c:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ad63:	85 c9                	test   ecx,ecx
c000ad65:	74 27                	je     c000ad8e <File::rename(char const*)+0x4a>
c000ad67:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad6d:	85 c9                	test   ecx,ecx
c000ad6f:	74 1d                	je     c000ad8e <File::rename(char const*)+0x4a>
c000ad71:	b8 06 00 00 00       	mov    eax,0x6
c000ad76:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad7a:	75 12                	jne    c000ad8e <File::rename(char const*)+0x4a>
c000ad7c:	83 c2 0d             	add    edx,0xd
c000ad7f:	50                   	push   eax
c000ad80:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad86:	52                   	push   edx
c000ad87:	51                   	push   ecx
c000ad88:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ad8b:	83 c4 10             	add    esp,0x10
c000ad8e:	83 c4 0c             	add    esp,0xc
c000ad91:	c3                   	ret    

c000ad92 <File::chfatattr(unsigned char, unsigned char)>:
c000ad92:	57                   	push   edi
c000ad93:	b8 0b 00 00 00       	mov    eax,0xb
c000ad98:	56                   	push   esi
c000ad99:	53                   	push   ebx
c000ad9a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad9e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ada2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ada9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000adad:	80 f9 19             	cmp    cl,0x19
c000adb0:	77 37                	ja     c000ade9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adb2:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000adb9:	85 c9                	test   ecx,ecx
c000adbb:	74 2c                	je     c000ade9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adbd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adc3:	85 c9                	test   ecx,ecx
c000adc5:	74 22                	je     c000ade9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000adc7:	b8 06 00 00 00       	mov    eax,0x6
c000adcc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000add0:	75 17                	jne    c000ade9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000add2:	8b 39                	mov    edi,DWORD PTR [ecx]
c000add4:	89 f0                	mov    eax,esi
c000add6:	83 c2 0d             	add    edx,0xd
c000add9:	0f b6 f0             	movzx  esi,al
c000addc:	0f b6 db             	movzx  ebx,bl
c000addf:	56                   	push   esi
c000ade0:	53                   	push   ebx
c000ade1:	52                   	push   edx
c000ade2:	51                   	push   ecx
c000ade3:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ade6:	83 c4 10             	add    esp,0x10
c000ade9:	5b                   	pop    ebx
c000adea:	5e                   	pop    esi
c000adeb:	5f                   	pop    edi
c000adec:	c3                   	ret    
c000aded:	90                   	nop

c000adee <File::exists()>:
c000adee:	83 ec 0c             	sub    esp,0xc
c000adf1:	31 c0                	xor    eax,eax
c000adf3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adf7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adfe:	80 f9 19             	cmp    cl,0x19
c000ae01:	77 24                	ja     c000ae27 <File::exists()+0x39>
c000ae03:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae0a:	85 c9                	test   ecx,ecx
c000ae0c:	74 19                	je     c000ae27 <File::exists()+0x39>
c000ae0e:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae14:	85 c9                	test   ecx,ecx
c000ae16:	74 0f                	je     c000ae27 <File::exists()+0x39>
c000ae18:	83 c2 0d             	add    edx,0xd
c000ae1b:	50                   	push   eax
c000ae1c:	50                   	push   eax
c000ae1d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae1f:	52                   	push   edx
c000ae20:	51                   	push   ecx
c000ae21:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ae24:	83 c4 10             	add    esp,0x10
c000ae27:	83 c4 0c             	add    esp,0xc
c000ae2a:	c3                   	ret    
c000ae2b:	90                   	nop

c000ae2c <File::stat(unsigned long long*, bool*)>:
c000ae2c:	56                   	push   esi
c000ae2d:	53                   	push   ebx
c000ae2e:	50                   	push   eax
c000ae2f:	b8 0b 00 00 00       	mov    eax,0xb
c000ae34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae38:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae3c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae43:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ae47:	80 f9 19             	cmp    cl,0x19
c000ae4a:	77 3d                	ja     c000ae89 <File::stat(unsigned long long*, bool*)+0x5d>
c000ae4c:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae53:	85 c9                	test   ecx,ecx
c000ae55:	74 32                	je     c000ae89 <File::stat(unsigned long long*, bool*)+0x5d>
c000ae57:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae5d:	85 c9                	test   ecx,ecx
c000ae5f:	74 28                	je     c000ae89 <File::stat(unsigned long long*, bool*)+0x5d>
c000ae61:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae63:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae67:	74 13                	je     c000ae7c <File::stat(unsigned long long*, bool*)+0x50>
c000ae69:	83 ec 04             	sub    esp,0x4
c000ae6c:	56                   	push   esi
c000ae6d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ae73:	51                   	push   ecx
c000ae74:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ae77:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ae7a:	eb 0a                	jmp    c000ae86 <File::stat(unsigned long long*, bool*)+0x5a>
c000ae7c:	53                   	push   ebx
c000ae7d:	83 c2 0d             	add    edx,0xd
c000ae80:	56                   	push   esi
c000ae81:	52                   	push   edx
c000ae82:	51                   	push   ecx
c000ae83:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ae86:	83 c4 10             	add    esp,0x10
c000ae89:	5a                   	pop    edx
c000ae8a:	5b                   	pop    ebx
c000ae8b:	5e                   	pop    esi
c000ae8c:	c3                   	ret    

c000ae8d <Fs::setcwd(Process*, char*)>:
c000ae8d:	55                   	push   ebp
c000ae8e:	57                   	push   edi
c000ae8f:	56                   	push   esi
c000ae90:	53                   	push   ebx
c000ae91:	81 ec 20 02 00 00    	sub    esp,0x220
c000ae97:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ae9e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000aea4:	57                   	push   edi
c000aea5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000aeac:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000aeb0:	56                   	push   esi
c000aeb1:	e8 60 fa ff ff       	call   c000a916 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aeb6:	89 34 24             	mov    DWORD PTR [esp],esi
c000aeb9:	e8 82 56 ff ff       	call   c0000540 <strlen>
c000aebe:	83 c4 10             	add    esp,0x10
c000aec1:	83 f8 02             	cmp    eax,0x2
c000aec4:	77 15                	ja     c000aedb <Fs::setcwd(Process*, char*)+0x4e>
c000aec6:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000aecb:	83 eb 41             	sub    ebx,0x41
c000aece:	8b 04 9d 20 44 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbbe0]
c000aed5:	85 c0                	test   eax,eax
c000aed7:	75 1c                	jne    c000aef5 <Fs::setcwd(Process*, char*)+0x68>
c000aed9:	eb 2f                	jmp    c000af0a <Fs::setcwd(Process*, char*)+0x7d>
c000aedb:	83 ec 0c             	sub    esp,0xc
c000aede:	56                   	push   esi
c000aedf:	e8 5c 56 ff ff       	call   c0000540 <strlen>
c000aee4:	83 c4 10             	add    esp,0x10
c000aee7:	83 f8 03             	cmp    eax,0x3
c000aeea:	75 57                	jne    c000af43 <Fs::setcwd(Process*, char*)+0xb6>
c000aeec:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000aef1:	75 50                	jne    c000af43 <Fs::setcwd(Process*, char*)+0xb6>
c000aef3:	eb d1                	jmp    c000aec6 <Fs::setcwd(Process*, char*)+0x39>
c000aef5:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000aefc:	75 0c                	jne    c000af0a <Fs::setcwd(Process*, char*)+0x7d>
c000aefe:	83 ec 0c             	sub    esp,0xc
c000af01:	50                   	push   eax
c000af02:	e8 a7 1c 00 00       	call   c000cbae <LogicalDisk::mount()>
c000af07:	83 c4 10             	add    esp,0x10
c000af0a:	b8 03 00 00 00       	mov    eax,0x3
c000af0f:	83 fb 19             	cmp    ebx,0x19
c000af12:	0f 87 c6 00 00 00    	ja     c000afde <Fs::setcwd(Process*, char*)+0x151>
c000af18:	8b 14 9d 20 44 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdbbe0]
c000af1f:	b8 05 00 00 00       	mov    eax,0x5
c000af24:	85 d2                	test   edx,edx
c000af26:	0f 84 b2 00 00 00    	je     c000afde <Fs::setcwd(Process*, char*)+0x151>
c000af2c:	b8 06 00 00 00       	mov    eax,0x6
c000af31:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000af38:	0f 85 92 00 00 00    	jne    c000afd0 <Fs::setcwd(Process*, char*)+0x143>
c000af3e:	e9 9b 00 00 00       	jmp    c000afde <Fs::setcwd(Process*, char*)+0x151>
c000af43:	83 ec 0c             	sub    esp,0xc
c000af46:	68 14 01 00 00       	push   0x114
c000af4b:	e8 69 c8 ff ff       	call   c00077b9 <malloc>
c000af50:	83 c4 0c             	add    esp,0xc
c000af53:	89 c3                	mov    ebx,eax
c000af55:	55                   	push   ebp
c000af56:	56                   	push   esi
c000af57:	50                   	push   eax
c000af58:	e8 63 fb ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c000af5d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000af62:	83 c4 0c             	add    esp,0xc
c000af65:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000af69:	50                   	push   eax
c000af6a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000af6e:	50                   	push   eax
c000af6f:	53                   	push   ebx
c000af70:	e8 b7 fe ff ff       	call   c000ae2c <File::stat(unsigned long long*, bool*)>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	83 f8 02             	cmp    eax,0x2
c000af7b:	74 04                	je     c000af81 <Fs::setcwd(Process*, char*)+0xf4>
c000af7d:	85 c0                	test   eax,eax
c000af7f:	74 1c                	je     c000af9d <Fs::setcwd(Process*, char*)+0x110>
c000af81:	b8 01 00 00 00       	mov    eax,0x1
c000af86:	85 db                	test   ebx,ebx
c000af88:	74 54                	je     c000afde <Fs::setcwd(Process*, char*)+0x151>
c000af8a:	83 ec 0c             	sub    esp,0xc
c000af8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af8f:	53                   	push   ebx
c000af90:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af93:	83 c4 10             	add    esp,0x10
c000af96:	b8 01 00 00 00       	mov    eax,0x1
c000af9b:	eb 41                	jmp    c000afde <Fs::setcwd(Process*, char*)+0x151>
c000af9d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000afa2:	75 1c                	jne    c000afc0 <Fs::setcwd(Process*, char*)+0x133>
c000afa4:	b8 02 00 00 00       	mov    eax,0x2
c000afa9:	85 db                	test   ebx,ebx
c000afab:	74 31                	je     c000afde <Fs::setcwd(Process*, char*)+0x151>
c000afad:	83 ec 0c             	sub    esp,0xc
c000afb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afb2:	53                   	push   ebx
c000afb3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000afb6:	83 c4 10             	add    esp,0x10
c000afb9:	b8 02 00 00 00       	mov    eax,0x2
c000afbe:	eb 1e                	jmp    c000afde <Fs::setcwd(Process*, char*)+0x151>
c000afc0:	85 db                	test   ebx,ebx
c000afc2:	74 0c                	je     c000afd0 <Fs::setcwd(Process*, char*)+0x143>
c000afc4:	83 ec 0c             	sub    esp,0xc
c000afc7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afc9:	53                   	push   ebx
c000afca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000afcd:	83 c4 10             	add    esp,0x10
c000afd0:	50                   	push   eax
c000afd1:	50                   	push   eax
c000afd2:	56                   	push   esi
c000afd3:	57                   	push   edi
c000afd4:	e8 27 56 ff ff       	call   c0000600 <strcpy>
c000afd9:	83 c4 10             	add    esp,0x10
c000afdc:	31 c0                	xor    eax,eax
c000afde:	81 c4 1c 02 00 00    	add    esp,0x21c
c000afe4:	5b                   	pop    ebx
c000afe5:	5e                   	pop    esi
c000afe6:	5f                   	pop    edi
c000afe7:	5d                   	pop    ebp
c000afe8:	c3                   	ret    
c000afe9:	90                   	nop

c000afea <Directory::Directory(char const*, Process*)>:
c000afea:	83 ec 0c             	sub    esp,0xc
c000afed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff1:	83 ec 08             	sub    esp,0x8
c000aff4:	6a 00                	push   0x0
c000aff6:	50                   	push   eax
c000aff7:	e8 4e de ff ff       	call   c0008e4a <UnixFile::UnixFile(int)>
c000affc:	83 c4 10             	add    esp,0x10
c000afff:	ba bc dd 01 c0       	mov    edx,0xc001ddbc
c000b004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b008:	89 10                	mov    DWORD PTR [eax],edx
c000b00a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b00e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b018:	83 c0 0d             	add    eax,0xd
c000b01b:	83 ec 04             	sub    esp,0x4
c000b01e:	52                   	push   edx
c000b01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b023:	50                   	push   eax
c000b024:	e8 ed f8 ff ff       	call   c000a916 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b029:	83 c4 10             	add    esp,0x10
c000b02c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b030:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b033:	8d 50 bf             	lea    edx,[eax-0x41]
c000b036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b03a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b044:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b052:	25 ff 00 00 00       	and    eax,0xff
c000b057:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b05e:	85 c0                	test   eax,eax
c000b060:	74 42                	je     c000b0a4 <Directory::Directory(char const*, Process*)+0xba>
c000b062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b066:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b06c:	25 ff 00 00 00       	and    eax,0xff
c000b071:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b078:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b07e:	85 c0                	test   eax,eax
c000b080:	75 22                	jne    c000b0a4 <Directory::Directory(char const*, Process*)+0xba>
c000b082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b086:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b08c:	25 ff 00 00 00       	and    eax,0xff
c000b091:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b098:	83 ec 0c             	sub    esp,0xc
c000b09b:	50                   	push   eax
c000b09c:	e8 0d 1b 00 00       	call   c000cbae <LogicalDisk::mount()>
c000b0a1:	83 c4 10             	add    esp,0x10
c000b0a4:	90                   	nop
c000b0a5:	83 c4 0c             	add    esp,0xc
c000b0a8:	c3                   	ret    
c000b0a9:	90                   	nop

c000b0aa <Directory::open()>:
c000b0aa:	53                   	push   ebx
c000b0ab:	b8 0b 00 00 00       	mov    eax,0xb
c000b0b0:	83 ec 08             	sub    esp,0x8
c000b0b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b0b7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b0be:	80 fa 19             	cmp    dl,0x19
c000b0c1:	77 3d                	ja     c000b100 <Directory::open()+0x56>
c000b0c3:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b0ca:	85 d2                	test   edx,edx
c000b0cc:	74 32                	je     c000b100 <Directory::open()+0x56>
c000b0ce:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b0d4:	85 d2                	test   edx,edx
c000b0d6:	74 28                	je     c000b100 <Directory::open()+0x56>
c000b0d8:	b8 06 00 00 00       	mov    eax,0x6
c000b0dd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b0e1:	75 1d                	jne    c000b100 <Directory::open()+0x56>
c000b0e3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b0e9:	50                   	push   eax
c000b0ea:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0ec:	51                   	push   ecx
c000b0ed:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b0f0:	51                   	push   ecx
c000b0f1:	52                   	push   edx
c000b0f2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b0f5:	83 c4 10             	add    esp,0x10
c000b0f8:	85 c0                	test   eax,eax
c000b0fa:	75 04                	jne    c000b100 <Directory::open()+0x56>
c000b0fc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b100:	83 c4 08             	add    esp,0x8
c000b103:	5b                   	pop    ebx
c000b104:	c3                   	ret    
c000b105:	90                   	nop

c000b106 <Directory::close()>:
c000b106:	53                   	push   ebx
c000b107:	b8 0b 00 00 00       	mov    eax,0xb
c000b10c:	83 ec 08             	sub    esp,0x8
c000b10f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b113:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b11a:	80 fa 19             	cmp    dl,0x19
c000b11d:	77 41                	ja     c000b160 <Directory::close()+0x5a>
c000b11f:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b126:	85 db                	test   ebx,ebx
c000b128:	74 36                	je     c000b160 <Directory::close()+0x5a>
c000b12a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b131:	74 2d                	je     c000b160 <Directory::close()+0x5a>
c000b133:	b8 05 00 00 00       	mov    eax,0x5
c000b138:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b13c:	74 22                	je     c000b160 <Directory::close()+0x5a>
c000b13e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b142:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000b149:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b14f:	53                   	push   ebx
c000b150:	53                   	push   ebx
c000b151:	8b 10                	mov    edx,DWORD PTR [eax]
c000b153:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b159:	50                   	push   eax
c000b15a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b15d:	83 c4 10             	add    esp,0x10
c000b160:	83 c4 08             	add    esp,0x8
c000b163:	5b                   	pop    ebx
c000b164:	c3                   	ret    
c000b165:	90                   	nop

c000b166 <Directory::unlink()>:
c000b166:	83 ec 0c             	sub    esp,0xc
c000b169:	b8 0b 00 00 00       	mov    eax,0xb
c000b16e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b172:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b179:	80 f9 19             	cmp    cl,0x19
c000b17c:	77 2f                	ja     c000b1ad <Directory::unlink()+0x47>
c000b17e:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b185:	85 c9                	test   ecx,ecx
c000b187:	74 24                	je     c000b1ad <Directory::unlink()+0x47>
c000b189:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b18f:	85 c9                	test   ecx,ecx
c000b191:	74 1a                	je     c000b1ad <Directory::unlink()+0x47>
c000b193:	b8 06 00 00 00       	mov    eax,0x6
c000b198:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b19c:	75 0f                	jne    c000b1ad <Directory::unlink()+0x47>
c000b19e:	83 c2 0d             	add    edx,0xd
c000b1a1:	50                   	push   eax
c000b1a2:	50                   	push   eax
c000b1a3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1a5:	52                   	push   edx
c000b1a6:	51                   	push   ecx
c000b1a7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b1aa:	83 c4 10             	add    esp,0x10
c000b1ad:	83 c4 0c             	add    esp,0xc
c000b1b0:	c3                   	ret    
c000b1b1:	90                   	nop

c000b1b2 <Directory::rename(char const*)>:
c000b1b2:	83 ec 0c             	sub    esp,0xc
c000b1b5:	b8 0b 00 00 00       	mov    eax,0xb
c000b1ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1be:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1c5:	80 f9 19             	cmp    cl,0x19
c000b1c8:	77 32                	ja     c000b1fc <Directory::rename(char const*)+0x4a>
c000b1ca:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b1d1:	85 c9                	test   ecx,ecx
c000b1d3:	74 27                	je     c000b1fc <Directory::rename(char const*)+0x4a>
c000b1d5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1db:	85 c9                	test   ecx,ecx
c000b1dd:	74 1d                	je     c000b1fc <Directory::rename(char const*)+0x4a>
c000b1df:	b8 06 00 00 00       	mov    eax,0x6
c000b1e4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1e8:	75 12                	jne    c000b1fc <Directory::rename(char const*)+0x4a>
c000b1ea:	83 c2 0d             	add    edx,0xd
c000b1ed:	50                   	push   eax
c000b1ee:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1f4:	52                   	push   edx
c000b1f5:	51                   	push   ecx
c000b1f6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b1f9:	83 c4 10             	add    esp,0x10
c000b1fc:	83 c4 0c             	add    esp,0xc
c000b1ff:	c3                   	ret    

c000b200 <Directory::exists()>:
c000b200:	83 ec 0c             	sub    esp,0xc
c000b203:	31 c0                	xor    eax,eax
c000b205:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b209:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b210:	80 f9 19             	cmp    cl,0x19
c000b213:	77 24                	ja     c000b239 <Directory::exists()+0x39>
c000b215:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b21c:	85 c9                	test   ecx,ecx
c000b21e:	74 19                	je     c000b239 <Directory::exists()+0x39>
c000b220:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b226:	85 c9                	test   ecx,ecx
c000b228:	74 0f                	je     c000b239 <Directory::exists()+0x39>
c000b22a:	83 c2 0d             	add    edx,0xd
c000b22d:	50                   	push   eax
c000b22e:	50                   	push   eax
c000b22f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b231:	52                   	push   edx
c000b232:	51                   	push   ecx
c000b233:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b236:	83 c4 10             	add    esp,0x10
c000b239:	83 c4 0c             	add    esp,0xc
c000b23c:	c3                   	ret    
c000b23d:	90                   	nop

c000b23e <Directory::read(dirent*)>:
c000b23e:	83 ec 1c             	sub    esp,0x1c
c000b241:	b8 0b 00 00 00       	mov    eax,0xb
c000b246:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b24a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b251:	80 fa 19             	cmp    dl,0x19
c000b254:	77 30                	ja     c000b286 <Directory::read(dirent*)+0x48>
c000b256:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b25d:	85 d2                	test   edx,edx
c000b25f:	74 25                	je     c000b286 <Directory::read(dirent*)+0x48>
c000b261:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b268:	74 1c                	je     c000b286 <Directory::read(dirent*)+0x48>
c000b26a:	83 ec 0c             	sub    esp,0xc
c000b26d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b26f:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b273:	52                   	push   edx
c000b274:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b278:	6a 00                	push   0x0
c000b27a:	68 10 01 00 00       	push   0x110
c000b27f:	51                   	push   ecx
c000b280:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b283:	83 c4 20             	add    esp,0x20
c000b286:	83 c4 1c             	add    esp,0x1c
c000b289:	c3                   	ret    

c000b28a <Directory::create()>:
c000b28a:	83 ec 0c             	sub    esp,0xc
c000b28d:	b8 0b 00 00 00       	mov    eax,0xb
c000b292:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b296:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b29d:	80 f9 19             	cmp    cl,0x19
c000b2a0:	77 2f                	ja     c000b2d1 <Directory::create()+0x47>
c000b2a2:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b2a9:	85 c9                	test   ecx,ecx
c000b2ab:	74 24                	je     c000b2d1 <Directory::create()+0x47>
c000b2ad:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b2b3:	85 c9                	test   ecx,ecx
c000b2b5:	74 1a                	je     c000b2d1 <Directory::create()+0x47>
c000b2b7:	b8 06 00 00 00       	mov    eax,0x6
c000b2bc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2c0:	75 0f                	jne    c000b2d1 <Directory::create()+0x47>
c000b2c2:	83 c2 0d             	add    edx,0xd
c000b2c5:	50                   	push   eax
c000b2c6:	50                   	push   eax
c000b2c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2c9:	52                   	push   edx
c000b2ca:	51                   	push   ecx
c000b2cb:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b2ce:	83 c4 10             	add    esp,0x10
c000b2d1:	83 c4 0c             	add    esp,0xc
c000b2d4:	c3                   	ret    
c000b2d5:	90                   	nop

c000b2d6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b2d6:	b8 0a 00 00 00       	mov    eax,0xa
c000b2db:	c3                   	ret    

c000b2dc <Bus::Bus(char const*)>:
c000b2dc:	83 ec 0c             	sub    esp,0xc
c000b2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2e3:	83 ec 08             	sub    esp,0x8
c000b2e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2ea:	50                   	push   eax
c000b2eb:	e8 30 08 00 00       	call   c000bb20 <Device::Device(char const*)>
c000b2f0:	83 c4 10             	add    esp,0x10
c000b2f3:	ba d8 dd 01 c0       	mov    edx,0xc001ddd8
c000b2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2fc:	89 10                	mov    DWORD PTR [eax],edx
c000b2fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b302:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b30c:	90                   	nop
c000b30d:	83 c4 0c             	add    esp,0xc
c000b310:	c3                   	ret    
c000b311:	90                   	nop
c000b312:	66 90                	xchg   ax,ax

c000b314 <Bus::~Bus()>:
c000b314:	83 ec 0c             	sub    esp,0xc
c000b317:	ba d8 dd 01 c0       	mov    edx,0xc001ddd8
c000b31c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b320:	89 10                	mov    DWORD PTR [eax],edx
c000b322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b326:	83 ec 0c             	sub    esp,0xc
c000b329:	50                   	push   eax
c000b32a:	e8 5b 05 00 00       	call   c000b88a <Device::~Device()>
c000b32f:	83 c4 10             	add    esp,0x10
c000b332:	90                   	nop
c000b333:	83 c4 0c             	add    esp,0xc
c000b336:	c3                   	ret    
c000b337:	90                   	nop

c000b338 <Bus::~Bus()>:
c000b338:	83 ec 0c             	sub    esp,0xc
c000b33b:	83 ec 0c             	sub    esp,0xc
c000b33e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b342:	e8 cd ff ff ff       	call   c000b314 <Bus::~Bus()>
c000b347:	83 c4 10             	add    esp,0x10
c000b34a:	83 ec 08             	sub    esp,0x8
c000b34d:	68 58 01 00 00       	push   0x158
c000b352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b356:	e8 f9 f0 ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c000b35b:	83 c4 10             	add    esp,0x10
c000b35e:	83 c4 0c             	add    esp,0xc
c000b361:	c3                   	ret    

c000b362 <beepThread(void*)>:
c000b362:	83 ec 0c             	sub    esp,0xc
c000b365:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000b36a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b36e:	48                   	dec    eax
c000b36f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000b374:	75 01                	jne    c000b377 <beepThread(void*)+0x15>
c000b376:	fb                   	sti    
c000b377:	83 ec 0c             	sub    esp,0xc
c000b37a:	6b c2 0a             	imul   eax,edx,0xa
c000b37d:	50                   	push   eax
c000b37e:	e8 1d 87 00 00       	call   c0013aa0 <milliTenthSleep(unsigned int)>
c000b383:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b38a:	e8 c3 a4 00 00       	call   c0015852 <HalMakeBeep(int)>
c000b38f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b397:	83 c4 1c             	add    esp,0x1c
c000b39a:	e9 fd 85 00 00       	jmp    c001399c <blockTask(TaskState)>

c000b39f <Krnl::beep(int, int, bool)>:
c000b39f:	56                   	push   esi
c000b3a0:	53                   	push   ebx
c000b3a1:	83 ec 10             	sub    esp,0x10
c000b3a4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b3a8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b3ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b0:	e8 9d a4 00 00       	call   c0015852 <HalMakeBeep(int)>
c000b3b5:	83 c4 10             	add    esp,0x10
c000b3b8:	89 f0                	mov    eax,esi
c000b3ba:	84 c0                	test   al,al
c000b3bc:	74 1e                	je     c000b3dc <Krnl::beep(int, int, bool)+0x3d>
c000b3be:	83 ec 0c             	sub    esp,0xc
c000b3c1:	6b db 0a             	imul   ebx,ebx,0xa
c000b3c4:	53                   	push   ebx
c000b3c5:	e8 d6 86 00 00       	call   c0013aa0 <milliTenthSleep(unsigned int)>
c000b3ca:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b3d2:	83 c4 14             	add    esp,0x14
c000b3d5:	5b                   	pop    ebx
c000b3d6:	5e                   	pop    esi
c000b3d7:	e9 76 a4 00 00       	jmp    c0015852 <HalMakeBeep(int)>
c000b3dc:	68 e6 00 00 00       	push   0xe6
c000b3e1:	53                   	push   ebx
c000b3e2:	68 62 b3 00 c0       	push   0xc000b362
c000b3e7:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b3ed:	e8 8e 81 00 00       	call   c0013580 <Process::createThread(void (*)(void*), void*, int)>
c000b3f2:	83 c4 14             	add    esp,0x14
c000b3f5:	5b                   	pop    ebx
c000b3f6:	5e                   	pop    esi
c000b3f7:	c3                   	ret    

c000b3f8 <User::loadClockSettings(int)>:
c000b3f8:	53                   	push   ebx
c000b3f9:	83 ec 14             	sub    esp,0x14
c000b3fc:	68 14 01 00 00       	push   0x114
c000b401:	e8 b3 c3 ff ff       	call   c00077b9 <malloc>
c000b406:	83 c4 0c             	add    esp,0xc
c000b409:	89 c3                	mov    ebx,eax
c000b40b:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b411:	68 fc dd 01 c0       	push   0xc001ddfc
c000b416:	50                   	push   eax
c000b417:	e8 a4 f6 ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c000b41c:	58                   	pop    eax
c000b41d:	5a                   	pop    edx
c000b41e:	6a 01                	push   0x1
c000b420:	53                   	push   ebx
c000b421:	e8 5a f7 ff ff       	call   c000ab80 <File::open(FileOpenMode)>
c000b426:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b429:	e8 b0 f7 ff ff       	call   c000abde <File::close()>
c000b42e:	83 c4 10             	add    esp,0x10
c000b431:	85 db                	test   ebx,ebx
c000b433:	74 0f                	je     c000b444 <User::loadClockSettings(int)+0x4c>
c000b435:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b437:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b43b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b43e:	83 c4 08             	add    esp,0x8
c000b441:	5b                   	pop    ebx
c000b442:	ff e0                	jmp    eax
c000b444:	83 c4 08             	add    esp,0x8
c000b447:	5b                   	pop    ebx
c000b448:	c3                   	ret    
c000b449:	90                   	nop

c000b44a <Clock::Clock(char const*)>:
c000b44a:	83 ec 0c             	sub    esp,0xc
c000b44d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b451:	83 ec 08             	sub    esp,0x8
c000b454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b458:	50                   	push   eax
c000b459:	e8 c2 06 00 00       	call   c000bb20 <Device::Device(char const*)>
c000b45e:	83 c4 10             	add    esp,0x10
c000b461:	ba 24 de 01 c0       	mov    edx,0xc001de24
c000b466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b46a:	89 10                	mov    DWORD PTR [eax],edx
c000b46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b470:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b47a:	90                   	nop
c000b47b:	83 c4 0c             	add    esp,0xc
c000b47e:	c3                   	ret    
c000b47f:	90                   	nop

c000b480 <Clock::~Clock()>:
c000b480:	83 ec 0c             	sub    esp,0xc
c000b483:	ba 24 de 01 c0       	mov    edx,0xc001de24
c000b488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b48c:	89 10                	mov    DWORD PTR [eax],edx
c000b48e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b492:	83 ec 0c             	sub    esp,0xc
c000b495:	50                   	push   eax
c000b496:	e8 ef 03 00 00       	call   c000b88a <Device::~Device()>
c000b49b:	83 c4 10             	add    esp,0x10
c000b49e:	90                   	nop
c000b49f:	83 c4 0c             	add    esp,0xc
c000b4a2:	c3                   	ret    
c000b4a3:	90                   	nop

c000b4a4 <Clock::~Clock()>:
c000b4a4:	83 ec 0c             	sub    esp,0xc
c000b4a7:	83 ec 0c             	sub    esp,0xc
c000b4aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ae:	e8 cd ff ff ff       	call   c000b480 <Clock::~Clock()>
c000b4b3:	83 c4 10             	add    esp,0x10
c000b4b6:	83 ec 08             	sub    esp,0x8
c000b4b9:	68 58 01 00 00       	push   0x158
c000b4be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c2:	e8 8d ef ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c000b4c7:	83 c4 10             	add    esp,0x10
c000b4ca:	83 c4 0c             	add    esp,0xc
c000b4cd:	c3                   	ret    

c000b4ce <Clock::timeInSecondsLocal()>:
c000b4ce:	53                   	push   ebx
c000b4cf:	83 ec 14             	sub    esp,0x14
c000b4d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4d6:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4d8:	50                   	push   eax
c000b4d9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b4dc:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b4e3:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b4e9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b4ef:	89 cb                	mov    ebx,ecx
c000b4f1:	c1 fb 1f             	sar    ebx,0x1f
c000b4f4:	01 c8                	add    eax,ecx
c000b4f6:	11 da                	adc    edx,ebx
c000b4f8:	83 c4 10             	add    esp,0x10
c000b4fb:	31 c9                	xor    ecx,ecx
c000b4fd:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b504:	74 05                	je     c000b50b <Clock::timeInSecondsLocal()+0x3d>
c000b506:	b9 08 07 00 00       	mov    ecx,0x708
c000b50b:	31 db                	xor    ebx,ebx
c000b50d:	01 c8                	add    eax,ecx
c000b50f:	11 da                	adc    edx,ebx
c000b511:	83 c4 08             	add    esp,0x8
c000b514:	5b                   	pop    ebx
c000b515:	c3                   	ret    

c000b516 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b516:	57                   	push   edi
c000b517:	56                   	push   esi
c000b518:	53                   	push   ebx
c000b519:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b51d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b521:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b523:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b527:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b52a:	0f b6 05 b8 1f 02 c0 	movzx  eax,BYTE PTR ds:0xc0021fb8
c000b531:	03 05 bc 1f 02 c0    	add    eax,DWORD PTR ds:0xc0021fbc
c000b537:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b53d:	99                   	cdq    
c000b53e:	29 c6                	sub    esi,eax
c000b540:	19 d7                	sbb    edi,edx
c000b542:	89 f0                	mov    eax,esi
c000b544:	89 fa                	mov    edx,edi
c000b546:	31 f6                	xor    esi,esi
c000b548:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b54f:	74 05                	je     c000b556 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b551:	be 08 07 00 00       	mov    esi,0x708
c000b556:	31 ff                	xor    edi,edi
c000b558:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b55c:	29 f0                	sub    eax,esi
c000b55e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b562:	19 fa                	sbb    edx,edi
c000b564:	89 d8                	mov    eax,ebx
c000b566:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b56a:	5b                   	pop    ebx
c000b56b:	5e                   	pop    esi
c000b56c:	5f                   	pop    edi
c000b56d:	ff e0                	jmp    eax

c000b56f <datetimeToSeconds(datetime_t)>:
c000b56f:	55                   	push   ebp
c000b570:	57                   	push   edi
c000b571:	56                   	push   esi
c000b572:	53                   	push   ebx
c000b573:	83 ec 14             	sub    esp,0x14
c000b576:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b57a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b57e:	89 d3                	mov    ebx,edx
c000b580:	0f b6 c6             	movzx  eax,dh
c000b583:	c1 eb 10             	shr    ebx,0x10
c000b586:	48                   	dec    eax
c000b587:	66 81 eb 6c 07       	sub    bx,0x76c
c000b58c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b590:	0f b6 f5             	movzx  esi,ch
c000b593:	89 cf                	mov    edi,ecx
c000b595:	6b f6 3c             	imul   esi,esi,0x3c
c000b598:	c1 ef 10             	shr    edi,0x10
c000b59b:	0f b6 c9             	movzx  ecx,cl
c000b59e:	89 f8                	mov    eax,edi
c000b5a0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b5a6:	0f b6 f8             	movzx  edi,al
c000b5a9:	0f b6 d2             	movzx  edx,dl
c000b5ac:	01 fe                	add    esi,edi
c000b5ae:	01 f1                	add    ecx,esi
c000b5b0:	0f b7 f3             	movzx  esi,bx
c000b5b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b5b7:	c1 f9 1f             	sar    ecx,0x1f
c000b5ba:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b5bf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b5c3:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b5c8:	8b 0c 8d 60 de 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe21a0]
c000b5cf:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b5d3:	76 29                	jbe    c000b5fe <datetimeToSeconds(datetime_t)+0x8f>
c000b5d5:	f6 c3 03             	test   bl,0x3
c000b5d8:	75 24                	jne    c000b5fe <datetimeToSeconds(datetime_t)+0x8f>
c000b5da:	31 d2                	xor    edx,edx
c000b5dc:	bf 64 00 00 00       	mov    edi,0x64
c000b5e1:	89 d8                	mov    eax,ebx
c000b5e3:	66 f7 f7             	div    di
c000b5e6:	66 85 d2             	test   dx,dx
c000b5e9:	75 12                	jne    c000b5fd <datetimeToSeconds(datetime_t)+0x8e>
c000b5eb:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b5f1:	bf 90 01 00 00       	mov    edi,0x190
c000b5f6:	99                   	cdq    
c000b5f7:	f7 ff                	idiv   edi
c000b5f9:	85 d2                	test   edx,edx
c000b5fb:	75 01                	jne    c000b5fe <datetimeToSeconds(datetime_t)+0x8f>
c000b5fd:	41                   	inc    ecx
c000b5fe:	66 83 fb 46          	cmp    bx,0x46
c000b602:	76 45                	jbe    c000b649 <datetimeToSeconds(datetime_t)+0xda>
c000b604:	bb 46 00 00 00       	mov    ebx,0x46
c000b609:	bf 64 00 00 00       	mov    edi,0x64
c000b60e:	bd 90 01 00 00       	mov    ebp,0x190
c000b613:	b8 6d 01 00 00       	mov    eax,0x16d
c000b618:	f6 c3 03             	test   bl,0x3
c000b61b:	75 23                	jne    c000b640 <datetimeToSeconds(datetime_t)+0xd1>
c000b61d:	89 d8                	mov    eax,ebx
c000b61f:	99                   	cdq    
c000b620:	f7 ff                	idiv   edi
c000b622:	b8 6e 01 00 00       	mov    eax,0x16e
c000b627:	85 d2                	test   edx,edx
c000b629:	75 15                	jne    c000b640 <datetimeToSeconds(datetime_t)+0xd1>
c000b62b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b631:	99                   	cdq    
c000b632:	f7 fd                	idiv   ebp
c000b634:	31 c0                	xor    eax,eax
c000b636:	85 d2                	test   edx,edx
c000b638:	0f 94 c0             	sete   al
c000b63b:	05 6d 01 00 00       	add    eax,0x16d
c000b640:	01 c1                	add    ecx,eax
c000b642:	43                   	inc    ebx
c000b643:	39 f3                	cmp    ebx,esi
c000b645:	7c cc                	jl     c000b613 <datetimeToSeconds(datetime_t)+0xa4>
c000b647:	eb 3b                	jmp    c000b684 <datetimeToSeconds(datetime_t)+0x115>
c000b649:	74 39                	je     c000b684 <datetimeToSeconds(datetime_t)+0x115>
c000b64b:	b8 45 00 00 00       	mov    eax,0x45
c000b650:	89 c2                	mov    edx,eax
c000b652:	83 e2 03             	and    edx,0x3
c000b655:	39 f0                	cmp    eax,esi
c000b657:	7e 13                	jle    c000b66c <datetimeToSeconds(datetime_t)+0xfd>
c000b659:	85 d2                	test   edx,edx
c000b65b:	0f 94 c2             	sete   dl
c000b65e:	48                   	dec    eax
c000b65f:	0f b6 d2             	movzx  edx,dl
c000b662:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b668:	29 d1                	sub    ecx,edx
c000b66a:	eb e4                	jmp    c000b650 <datetimeToSeconds(datetime_t)+0xe1>
c000b66c:	b8 6d 01 00 00       	mov    eax,0x16d
c000b671:	85 d2                	test   edx,edx
c000b673:	75 0d                	jne    c000b682 <datetimeToSeconds(datetime_t)+0x113>
c000b675:	31 c0                	xor    eax,eax
c000b677:	66 85 db             	test   bx,bx
c000b67a:	0f 95 c0             	setne  al
c000b67d:	05 6d 01 00 00       	add    eax,0x16d
c000b682:	29 c1                	sub    ecx,eax
c000b684:	b8 80 51 01 00       	mov    eax,0x15180
c000b689:	f7 e9                	imul   ecx
c000b68b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b68f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b693:	83 c4 14             	add    esp,0x14
c000b696:	5b                   	pop    ebx
c000b697:	5e                   	pop    esi
c000b698:	5f                   	pop    edi
c000b699:	5d                   	pop    ebp
c000b69a:	c3                   	ret    
c000b69b:	90                   	nop

c000b69c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b69c:	57                   	push   edi
c000b69d:	56                   	push   esi
c000b69e:	53                   	push   ebx
c000b69f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b6a3:	8b 06                	mov    eax,DWORD PTR [esi]
c000b6a5:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b6a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b6ac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b6b0:	e8 ba fe ff ff       	call   c000b56f <datetimeToSeconds(datetime_t)>
c000b6b5:	59                   	pop    ecx
c000b6b6:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b6bd:	5b                   	pop    ebx
c000b6be:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b6c4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b6ca:	89 cb                	mov    ebx,ecx
c000b6cc:	c1 fb 1f             	sar    ebx,0x1f
c000b6cf:	29 c8                	sub    eax,ecx
c000b6d1:	19 da                	sbb    edx,ebx
c000b6d3:	31 c9                	xor    ecx,ecx
c000b6d5:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b6dc:	74 05                	je     c000b6e3 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b6de:	b9 08 07 00 00       	mov    ecx,0x708
c000b6e3:	31 db                	xor    ebx,ebx
c000b6e5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b6e9:	29 c8                	sub    eax,ecx
c000b6eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b6ef:	19 da                	sbb    edx,ebx
c000b6f1:	89 f8                	mov    eax,edi
c000b6f3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b6f7:	5b                   	pop    ebx
c000b6f8:	5e                   	pop    esi
c000b6f9:	5f                   	pop    edi
c000b6fa:	ff e0                	jmp    eax

c000b6fc <secondsToDatetime(unsigned long long)>:
c000b6fc:	55                   	push   ebp
c000b6fd:	57                   	push   edi
c000b6fe:	56                   	push   esi
c000b6ff:	53                   	push   ebx
c000b700:	83 ec 1c             	sub    esp,0x1c
c000b703:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b707:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b70b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b70f:	6a 00                	push   0x0
c000b711:	68 80 51 01 00       	push   0x15180
c000b716:	55                   	push   ebp
c000b717:	57                   	push   edi
c000b718:	e8 e3 09 01 00       	call   c001c100 <__udivdi3>
c000b71d:	83 c4 10             	add    esp,0x10
c000b720:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b726:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b72a:	6a 00                	push   0x0
c000b72c:	68 80 51 01 00       	push   0x15180
c000b731:	55                   	push   ebp
c000b732:	57                   	push   edi
c000b733:	bf 10 0e 00 00       	mov    edi,0xe10
c000b738:	e8 c3 0a 01 00       	call   c001c200 <__umoddi3>
c000b73d:	83 c4 10             	add    esp,0x10
c000b740:	99                   	cdq    
c000b741:	f7 ff                	idiv   edi
c000b743:	bf 3c 00 00 00       	mov    edi,0x3c
c000b748:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b74b:	89 d0                	mov    eax,edx
c000b74d:	99                   	cdq    
c000b74e:	f7 ff                	idiv   edi
c000b750:	85 db                	test   ebx,ebx
c000b752:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b755:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b758:	79 11                	jns    c000b76b <secondsToDatetime(unsigned long long)+0x6f>
c000b75a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b75e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b764:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b769:	eb 07                	jmp    c000b772 <secondsToDatetime(unsigned long long)+0x76>
c000b76b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b770:	89 d8                	mov    eax,ebx
c000b772:	bf b4 05 00 00       	mov    edi,0x5b4
c000b777:	99                   	cdq    
c000b778:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b77d:	f7 f9                	idiv   ecx
c000b77f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b784:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b788:	31 d2                	xor    edx,edx
c000b78a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b792:	01 c3                	add    ebx,eax
c000b794:	89 d8                	mov    eax,ebx
c000b796:	f7 f1                	div    ecx
c000b798:	31 d2                	xor    edx,edx
c000b79a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b79d:	89 d8                	mov    eax,ebx
c000b79f:	f7 f7                	div    edi
c000b7a1:	31 d2                	xor    edx,edx
c000b7a3:	29 c1                	sub    ecx,eax
c000b7a5:	89 d8                	mov    eax,ebx
c000b7a7:	f7 f5                	div    ebp
c000b7a9:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b7ae:	29 c1                	sub    ecx,eax
c000b7b0:	31 d2                	xor    edx,edx
c000b7b2:	89 c8                	mov    eax,ecx
c000b7b4:	f7 f5                	div    ebp
c000b7b6:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b7bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b7bf:	31 d2                	xor    edx,edx
c000b7c1:	89 c8                	mov    eax,ecx
c000b7c3:	f7 f5                	div    ebp
c000b7c5:	31 d2                	xor    edx,edx
c000b7c7:	01 c3                	add    ebx,eax
c000b7c9:	89 c8                	mov    eax,ecx
c000b7cb:	f7 f7                	div    edi
c000b7cd:	bf 99 00 00 00       	mov    edi,0x99
c000b7d2:	29 c3                	sub    ebx,eax
c000b7d4:	31 d2                	xor    edx,edx
c000b7d6:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b7de:	29 c3                	sub    ebx,eax
c000b7e0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b7e3:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b7e6:	bb 05 00 00 00       	mov    ebx,0x5
c000b7eb:	83 c1 02             	add    ecx,0x2
c000b7ee:	89 c8                	mov    eax,ecx
c000b7f0:	f7 f7                	div    edi
c000b7f2:	31 d2                	xor    edx,edx
c000b7f4:	89 c7                	mov    edi,eax
c000b7f6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b7fc:	83 c0 02             	add    eax,0x2
c000b7ff:	f7 f3                	div    ebx
c000b801:	89 eb                	mov    ebx,ebp
c000b803:	29 c3                	sub    ebx,eax
c000b805:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b80b:	88 1e                	mov    BYTE PTR [esi],bl
c000b80d:	19 c0                	sbb    eax,eax
c000b80f:	31 d2                	xor    edx,edx
c000b811:	83 e0 0c             	and    eax,0xc
c000b814:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b818:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b820:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b824:	83 f9 01             	cmp    ecx,0x1
c000b827:	0f 96 c2             	setbe  dl
c000b82a:	41                   	inc    ecx
c000b82b:	01 d0                	add    eax,edx
c000b82d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b830:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b834:	83 c4 1c             	add    esp,0x1c
c000b837:	89 f0                	mov    eax,esi
c000b839:	5b                   	pop    ebx
c000b83a:	5e                   	pop    esi
c000b83b:	5f                   	pop    edi
c000b83c:	5d                   	pop    ebp
c000b83d:	c2 04 00             	ret    0x4

c000b840 <Clock::timeInDatetimeLocal()>:
c000b840:	53                   	push   ebx
c000b841:	83 ec 14             	sub    esp,0x14
c000b844:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b848:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b84c:	e8 7d fc ff ff       	call   c000b4ce <Clock::timeInSecondsLocal()>
c000b851:	83 c4 0c             	add    esp,0xc
c000b854:	52                   	push   edx
c000b855:	50                   	push   eax
c000b856:	53                   	push   ebx
c000b857:	e8 a0 fe ff ff       	call   c000b6fc <secondsToDatetime(unsigned long long)>
c000b85c:	89 d8                	mov    eax,ebx
c000b85e:	83 c4 14             	add    esp,0x14
c000b861:	5b                   	pop    ebx
c000b862:	c2 04 00             	ret    0x4
c000b865:	90                   	nop

c000b866 <Device::hibernate()>:
c000b866:	c3                   	ret    
c000b867:	90                   	nop

c000b868 <Device::wake()>:
c000b868:	c3                   	ret    
c000b869:	90                   	nop

c000b86a <Device::detect()>:
c000b86a:	c3                   	ret    
c000b86b:	90                   	nop

c000b86c <Device::disableLegacy()>:
c000b86c:	c3                   	ret    
c000b86d:	90                   	nop

c000b86e <Device::powerSaving(PowerSavingLevel)>:
c000b86e:	c3                   	ret    
c000b86f:	90                   	nop

c000b870 <DriverlessDevice::close(int, int, void*)>:
c000b870:	31 c0                	xor    eax,eax
c000b872:	c3                   	ret    
c000b873:	90                   	nop

c000b874 <DriverlessDevice::detect()>:
c000b874:	c3                   	ret    
c000b875:	90                   	nop

c000b876 <DriverlessDevice::open(int, int, void*)>:
c000b876:	83 ec 18             	sub    esp,0x18
c000b879:	68 90 de 01 c0       	push   0xc001de90
c000b87e:	e8 48 49 00 00       	call   c00101cb <KePanic(char const*)>
c000b883:	83 c8 ff             	or     eax,0xffffffff
c000b886:	83 c4 1c             	add    esp,0x1c
c000b889:	c3                   	ret    

c000b88a <Device::~Device()>:
c000b88a:	ba f0 de 01 c0       	mov    edx,0xc001def0
c000b88f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b893:	89 10                	mov    DWORD PTR [eax],edx
c000b895:	90                   	nop
c000b896:	c3                   	ret    
c000b897:	90                   	nop

c000b898 <Device::~Device()>:
c000b898:	83 ec 0c             	sub    esp,0xc
c000b89b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b89f:	e8 e6 ff ff ff       	call   c000b88a <Device::~Device()>
c000b8a4:	83 c4 04             	add    esp,0x4
c000b8a7:	83 ec 08             	sub    esp,0x8
c000b8aa:	68 58 01 00 00       	push   0x158
c000b8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b3:	e8 9c eb ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c000b8b8:	83 c4 10             	add    esp,0x10
c000b8bb:	83 c4 0c             	add    esp,0xc
c000b8be:	c3                   	ret    
c000b8bf:	90                   	nop

c000b8c0 <Device::findAndLoadDriver()>:
c000b8c0:	c7 44 24 04 ae de 01 c0 	mov    DWORD PTR [esp+0x4],0xc001deae
c000b8c8:	e9 7d ec ff ff       	jmp    c000a54a <Dbg::kprintf(char const*, ...)>
c000b8cd:	90                   	nop

c000b8ce <Device::preOpenPCI(PCIDeviceInfo)>:
c000b8ce:	57                   	push   edi
c000b8cf:	b9 09 00 00 00       	mov    ecx,0x9
c000b8d4:	56                   	push   esi
c000b8d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b8d9:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b8dd:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b8e7:	81 c7 18 01 00 00    	add    edi,0x118
c000b8ed:	fc                   	cld    
c000b8ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b8f0:	5e                   	pop    esi
c000b8f1:	5f                   	pop    edi
c000b8f2:	c3                   	ret    
c000b8f3:	90                   	nop

c000b8f4 <Device::preOpenACPI(void*, char*, char*)>:
c000b8f4:	57                   	push   edi
c000b8f5:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b8fa:	56                   	push   esi
c000b8fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b8ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b903:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b90d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b913:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b919:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b91d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b91f:	b9 0e 00 00 00       	mov    ecx,0xe
c000b924:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b92a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b92e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b930:	5e                   	pop    esi
c000b931:	5f                   	pop    edi
c000b932:	c3                   	ret    
c000b933:	90                   	nop

c000b934 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b934:	53                   	push   ebx
c000b935:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b939:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b93d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b941:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b945:	0f b6 c0             	movzx  eax,al
c000b948:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b94c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b950:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b954:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b958:	5b                   	pop    ebx
c000b959:	e9 a6 05 00 00       	jmp    c000bf04 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b95e <Device::getParent()>:
c000b95e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b962:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b968:	c3                   	ret    
c000b969:	90                   	nop

c000b96a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b96a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b96e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b972:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b977:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b97b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b97f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b983:	e9 e8 06 00 00       	jmp    c000c070 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b988 <Device::addChild(Device*)>:
c000b988:	53                   	push   ebx
c000b989:	83 ec 08             	sub    esp,0x8
c000b98c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b990:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b994:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b99a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b9a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b9a2:	85 d2                	test   edx,edx
c000b9a4:	74 04                	je     c000b9aa <Device::addChild(Device*)+0x22>
c000b9a6:	89 d3                	mov    ebx,edx
c000b9a8:	eb f6                	jmp    c000b9a0 <Device::addChild(Device*)+0x18>
c000b9aa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b9ad:	83 ec 0c             	sub    esp,0xc
c000b9b0:	6a 08                	push   0x8
c000b9b2:	e8 02 be ff ff       	call   c00077b9 <malloc>
c000b9b7:	89 03                	mov    DWORD PTR [ebx],eax
c000b9b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b9bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9c6:	83 c4 18             	add    esp,0x18
c000b9c9:	5b                   	pop    ebx
c000b9ca:	c3                   	ret    
c000b9cb:	90                   	nop

c000b9cc <Device::removeAllChildren()>:
c000b9cc:	56                   	push   esi
c000b9cd:	53                   	push   ebx
c000b9ce:	52                   	push   edx
c000b9cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b9d3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b9d9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9dc:	74 17                	je     c000b9f5 <Device::removeAllChildren()+0x29>
c000b9de:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b9e1:	85 c0                	test   eax,eax
c000b9e3:	74 0c                	je     c000b9f1 <Device::removeAllChildren()+0x25>
c000b9e5:	83 ec 0c             	sub    esp,0xc
c000b9e8:	8b 10                	mov    edx,DWORD PTR [eax]
c000b9ea:	50                   	push   eax
c000b9eb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b9ee:	83 c4 10             	add    esp,0x10
c000b9f1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9f3:	eb e4                	jmp    c000b9d9 <Device::removeAllChildren()+0xd>
c000b9f5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b9fb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba01:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ba07:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba0e:	58                   	pop    eax
c000ba0f:	5b                   	pop    ebx
c000ba10:	5e                   	pop    esi
c000ba11:	c3                   	ret    

c000ba12 <Device::hibernateAll()>:
c000ba12:	53                   	push   ebx
c000ba13:	83 ec 14             	sub    esp,0x14
c000ba16:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba1c:	53                   	push   ebx
c000ba1d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ba20:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba2c:	74 0f                	je     c000ba3d <Device::hibernateAll()+0x2b>
c000ba2e:	83 ec 0c             	sub    esp,0xc
c000ba31:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba34:	e8 d9 ff ff ff       	call   c000ba12 <Device::hibernateAll()>
c000ba39:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba3b:	eb e9                	jmp    c000ba26 <Device::hibernateAll()+0x14>
c000ba3d:	83 c4 08             	add    esp,0x8
c000ba40:	5b                   	pop    ebx
c000ba41:	c3                   	ret    

c000ba42 <Device::wakeAll()>:
c000ba42:	53                   	push   ebx
c000ba43:	83 ec 14             	sub    esp,0x14
c000ba46:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba4c:	53                   	push   ebx
c000ba4d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ba50:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba56:	83 c4 10             	add    esp,0x10
c000ba59:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba5c:	74 0f                	je     c000ba6d <Device::wakeAll()+0x2b>
c000ba5e:	83 ec 0c             	sub    esp,0xc
c000ba61:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba64:	e8 d9 ff ff ff       	call   c000ba42 <Device::wakeAll()>
c000ba69:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba6b:	eb e9                	jmp    c000ba56 <Device::wakeAll()+0x14>
c000ba6d:	83 c4 08             	add    esp,0x8
c000ba70:	5b                   	pop    ebx
c000ba71:	c3                   	ret    

c000ba72 <Device::detectAll()>:
c000ba72:	53                   	push   ebx
c000ba73:	83 ec 14             	sub    esp,0x14
c000ba76:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba7c:	53                   	push   ebx
c000ba7d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ba80:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba86:	83 c4 10             	add    esp,0x10
c000ba89:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba8c:	74 0f                	je     c000ba9d <Device::detectAll()+0x2b>
c000ba8e:	83 ec 0c             	sub    esp,0xc
c000ba91:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba94:	e8 d9 ff ff ff       	call   c000ba72 <Device::detectAll()>
c000ba99:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba9b:	eb e9                	jmp    c000ba86 <Device::detectAll()+0x14>
c000ba9d:	83 c4 08             	add    esp,0x8
c000baa0:	5b                   	pop    ebx
c000baa1:	c3                   	ret    

c000baa2 <Device::disableLegacyAll()>:
c000baa2:	c3                   	ret    
c000baa3:	90                   	nop

c000baa4 <Device::loadDriversForAll()>:
c000baa4:	c3                   	ret    
c000baa5:	90                   	nop

c000baa6 <Device::closeAll()>:
c000baa6:	53                   	push   ebx
c000baa7:	83 ec 08             	sub    esp,0x8
c000baaa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000baae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bab0:	6a 00                	push   0x0
c000bab2:	6a 00                	push   0x0
c000bab4:	6a 00                	push   0x0
c000bab6:	53                   	push   ebx
c000bab7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000baba:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bac0:	83 c4 10             	add    esp,0x10
c000bac3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bac6:	74 0f                	je     c000bad7 <Device::closeAll()+0x31>
c000bac8:	83 ec 0c             	sub    esp,0xc
c000bacb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bace:	e8 d3 ff ff ff       	call   c000baa6 <Device::closeAll()>
c000bad3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bad5:	eb e9                	jmp    c000bac0 <Device::closeAll()+0x1a>
c000bad7:	83 c4 08             	add    esp,0x8
c000bada:	5b                   	pop    ebx
c000badb:	c3                   	ret    

c000badc <Device::powerSavingAll(PowerSavingLevel)>:
c000badc:	56                   	push   esi
c000badd:	53                   	push   ebx
c000bade:	83 ec 0c             	sub    esp,0xc
c000bae1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bae5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bae9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000baeb:	56                   	push   esi
c000baec:	53                   	push   ebx
c000baed:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000baf0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000baf6:	83 c4 10             	add    esp,0x10
c000baf9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bafc:	74 0f                	je     c000bb0d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bafe:	52                   	push   edx
c000baff:	52                   	push   edx
c000bb00:	56                   	push   esi
c000bb01:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb04:	e8 d3 ff ff ff       	call   c000badc <Device::powerSavingAll(PowerSavingLevel)>
c000bb09:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb0b:	eb e9                	jmp    c000baf6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bb0d:	58                   	pop    eax
c000bb0e:	5b                   	pop    ebx
c000bb0f:	5e                   	pop    esi
c000bb10:	c3                   	ret    
c000bb11:	90                   	nop

c000bb12 <Device::setName(char const*)>:
c000bb12:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bb1a:	e9 e1 4a ff ff       	jmp    c0000600 <strcpy>
c000bb1f:	90                   	nop

c000bb20 <Device::Device(char const*)>:
c000bb20:	83 ec 1c             	sub    esp,0x1c
c000bb23:	ba f0 de 01 c0       	mov    edx,0xc001def0
c000bb28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb2c:	89 10                	mov    DWORD PTR [eax],edx
c000bb2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb32:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bb3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb40:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bb4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb4e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb5c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb66:	83 ec 08             	sub    esp,0x8
c000bb69:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb6d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb71:	e8 9c ff ff ff       	call   c000bb12 <Device::setName(char const*)>
c000bb76:	83 c4 10             	add    esp,0x10
c000bb79:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bb81:	83 ec 0c             	sub    esp,0xc
c000bb84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb88:	e8 2c bc ff ff       	call   c00077b9 <malloc>
c000bb8d:	83 c4 10             	add    esp,0x10
c000bb90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb96:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bba1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbab:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bbb1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bbb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbbb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bbc1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bbc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbcc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bbd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbd7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bbde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbe2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bbec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bbfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbfe:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bc08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc0c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bc16:	90                   	nop
c000bc17:	83 c4 1c             	add    esp,0x1c
c000bc1a:	c3                   	ret    
c000bc1b:	90                   	nop

c000bc1c <Device::getName()>:
c000bc1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc20:	05 d0 00 00 00       	add    eax,0xd0
c000bc25:	c3                   	ret    

c000bc26 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bc26:	83 ec 0c             	sub    esp,0xc
c000bc29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc2d:	83 ec 08             	sub    esp,0x8
c000bc30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc34:	50                   	push   eax
c000bc35:	e8 e6 fe ff ff       	call   c000bb20 <Device::Device(char const*)>
c000bc3a:	83 c4 10             	add    esp,0x10
c000bc3d:	ba 1c df 01 c0       	mov    edx,0xc001df1c
c000bc42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc46:	89 10                	mov    DWORD PTR [eax],edx
c000bc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc4c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bc56:	90                   	nop
c000bc57:	83 c4 0c             	add    esp,0xc
c000bc5a:	c3                   	ret    
c000bc5b:	90                   	nop

c000bc5c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bc5c:	57                   	push   edi
c000bc5d:	56                   	push   esi
c000bc5e:	53                   	push   ebx
c000bc5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc63:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bc67:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc6b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bc71:	75 0c                	jne    c000bc7f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bc73:	52                   	push   edx
c000bc74:	52                   	push   edx
c000bc75:	53                   	push   ebx
c000bc76:	56                   	push   esi
c000bc77:	e8 36 09 01 00       	call   c001c5b2 <LinkedList<Device>::addElement(Device*)>
c000bc7c:	83 c4 10             	add    esp,0x10
c000bc7f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc85:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc88:	74 12                	je     c000bc9c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bc8a:	50                   	push   eax
c000bc8b:	57                   	push   edi
c000bc8c:	56                   	push   esi
c000bc8d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc90:	e8 c7 ff ff ff       	call   c000bc5c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc95:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	eb e9                	jmp    c000bc85 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bc9c:	5b                   	pop    ebx
c000bc9d:	5e                   	pop    esi
c000bc9e:	5f                   	pop    edi
c000bc9f:	c3                   	ret    

c000bca0 <getDevicesOfType(DeviceType)>:
c000bca0:	53                   	push   ebx
c000bca1:	83 ec 14             	sub    esp,0x14
c000bca4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bca8:	53                   	push   ebx
c000bca9:	e8 e0 09 01 00       	call   c001c68e <LinkedList<Device>::LinkedList()>
c000bcae:	83 c4 0c             	add    esp,0xc
c000bcb1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bcb5:	53                   	push   ebx
c000bcb6:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000bcbc:	e8 9b ff ff ff       	call   c000bc5c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bcc1:	89 d8                	mov    eax,ebx
c000bcc3:	83 c4 18             	add    esp,0x18
c000bcc6:	5b                   	pop    ebx
c000bcc7:	c2 04 00             	ret    0x4
c000bcca:	66 90                	xchg   ax,ax

c000bccc <HardDiskController::HardDiskController(char const*)>:
c000bccc:	83 ec 0c             	sub    esp,0xc
c000bccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd3:	83 ec 08             	sub    esp,0x8
c000bcd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcda:	50                   	push   eax
c000bcdb:	e8 40 fe ff ff       	call   c000bb20 <Device::Device(char const*)>
c000bce0:	83 c4 10             	add    esp,0x10
c000bce3:	ba 48 df 01 c0       	mov    edx,0xc001df48
c000bce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcec:	89 10                	mov    DWORD PTR [eax],edx
c000bcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bcfc:	90                   	nop
c000bcfd:	83 c4 0c             	add    esp,0xc
c000bd00:	c3                   	ret    
c000bd01:	90                   	nop
c000bd02:	66 90                	xchg   ax,ax

c000bd04 <HardDiskController::~HardDiskController()>:
c000bd04:	83 ec 0c             	sub    esp,0xc
c000bd07:	ba 48 df 01 c0       	mov    edx,0xc001df48
c000bd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd10:	89 10                	mov    DWORD PTR [eax],edx
c000bd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd16:	83 ec 0c             	sub    esp,0xc
c000bd19:	50                   	push   eax
c000bd1a:	e8 6b fb ff ff       	call   c000b88a <Device::~Device()>
c000bd1f:	83 c4 10             	add    esp,0x10
c000bd22:	90                   	nop
c000bd23:	83 c4 0c             	add    esp,0xc
c000bd26:	c3                   	ret    
c000bd27:	90                   	nop

c000bd28 <HardDiskController::~HardDiskController()>:
c000bd28:	83 ec 0c             	sub    esp,0xc
c000bd2b:	83 ec 0c             	sub    esp,0xc
c000bd2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd32:	e8 cd ff ff ff       	call   c000bd04 <HardDiskController::~HardDiskController()>
c000bd37:	83 c4 10             	add    esp,0x10
c000bd3a:	83 ec 08             	sub    esp,0x8
c000bd3d:	68 58 01 00 00       	push   0x158
c000bd42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd46:	e8 09 e7 ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c000bd4b:	83 c4 10             	add    esp,0x10
c000bd4e:	83 c4 0c             	add    esp,0xc
c000bd51:	c3                   	ret    

c000bd52 <PhysicalDisk::eject()>:
c000bd52:	83 c8 ff             	or     eax,0xffffffff
c000bd55:	c3                   	ret    

c000bd56 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bd56:	83 ec 0c             	sub    esp,0xc
c000bd59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd5d:	83 ec 08             	sub    esp,0x8
c000bd60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd64:	50                   	push   eax
c000bd65:	e8 b6 fd ff ff       	call   c000bb20 <Device::Device(char const*)>
c000bd6a:	83 c4 10             	add    esp,0x10
c000bd6d:	ba 74 df 01 c0       	mov    edx,0xc001df74
c000bd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd76:	89 10                	mov    DWORD PTR [eax],edx
c000bd78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd7c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bd83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd87:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bd8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd92:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bd9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bda0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bda4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bdaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdae:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bdb8:	90                   	nop
c000bdb9:	83 c4 0c             	add    esp,0xc
c000bdbc:	c3                   	ret    
c000bdbd:	90                   	nop

c000bdbe <PhysicalDisk::startCache()>:
c000bdbe:	56                   	push   esi
c000bdbf:	53                   	push   ebx
c000bdc0:	83 ec 10             	sub    esp,0x10
c000bdc3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bdc7:	6a 44                	push   0x44
c000bdc9:	e8 eb b9 ff ff       	call   c00077b9 <malloc>
c000bdce:	89 c6                	mov    esi,eax
c000bdd0:	58                   	pop    eax
c000bdd1:	5a                   	pop    edx
c000bdd2:	53                   	push   ebx
c000bdd3:	56                   	push   esi
c000bdd4:	e8 eb 15 00 00       	call   c000d3c4 <VCache::VCache(PhysicalDisk*)>
c000bdd9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bddf:	83 c4 14             	add    esp,0x14
c000bde2:	5b                   	pop    ebx
c000bde3:	5e                   	pop    esi
c000bde4:	c3                   	ret    
c000bde5:	90                   	nop

c000bde6 <PhysicalDisk::~PhysicalDisk()>:
c000bde6:	83 ec 0c             	sub    esp,0xc
c000bde9:	ba 74 df 01 c0       	mov    edx,0xc001df74
c000bdee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdf2:	89 10                	mov    DWORD PTR [eax],edx
c000bdf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdf8:	83 ec 0c             	sub    esp,0xc
c000bdfb:	50                   	push   eax
c000bdfc:	e8 89 fa ff ff       	call   c000b88a <Device::~Device()>
c000be01:	83 c4 10             	add    esp,0x10
c000be04:	90                   	nop
c000be05:	83 c4 0c             	add    esp,0xc
c000be08:	c3                   	ret    
c000be09:	90                   	nop

c000be0a <PhysicalDisk::~PhysicalDisk()>:
c000be0a:	83 ec 0c             	sub    esp,0xc
c000be0d:	83 ec 0c             	sub    esp,0xc
c000be10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be14:	e8 cd ff ff ff       	call   c000bde6 <PhysicalDisk::~PhysicalDisk()>
c000be19:	83 c4 10             	add    esp,0x10
c000be1c:	83 ec 08             	sub    esp,0x8
c000be1f:	68 6c 01 00 00       	push   0x16c
c000be24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be28:	e8 27 e6 ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c000be2d:	83 c4 10             	add    esp,0x10
c000be30:	83 c4 0c             	add    esp,0xc
c000be33:	c3                   	ret    

c000be34 <int_handler>:
c000be34:	55                   	push   ebp
c000be35:	57                   	push   edi
c000be36:	56                   	push   esi
c000be37:	53                   	push   ebx
c000be38:	83 ec 0c             	sub    esp,0xc
c000be3b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be3f:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000be46:	74 0b                	je     c000be53 <int_handler+0x1f>
c000be48:	fa                   	cli    
c000be49:	f4                   	hlt    
c000be4a:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000be51:	75 f5                	jne    c000be48 <int_handler+0x14>
c000be53:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000be56:	8d 46 e0             	lea    eax,[esi-0x20]
c000be59:	83 f8 17             	cmp    eax,0x17
c000be5c:	76 3e                	jbe    c000be9c <int_handler+0x68>
c000be5e:	c1 e6 04             	shl    esi,0x4
c000be61:	31 db                	xor    ebx,ebx
c000be63:	8d ae c0 2f 02 c0    	lea    ebp,[esi-0x3ffdd040]
c000be69:	81 c6 c0 1f 02 c0    	add    esi,0xc0021fc0
c000be6f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000be73:	85 c0                	test   eax,eax
c000be75:	74 13                	je     c000be8a <int_handler+0x56>
c000be77:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000be7a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000be7e:	74 2a                	je     c000beaa <int_handler+0x76>
c000be80:	83 ec 08             	sub    esp,0x8
c000be83:	52                   	push   edx
c000be84:	57                   	push   edi
c000be85:	ff d0                	call   eax
c000be87:	83 c4 10             	add    esp,0x10
c000be8a:	43                   	inc    ebx
c000be8b:	83 fb 04             	cmp    ebx,0x4
c000be8e:	75 df                	jne    c000be6f <int_handler+0x3b>
c000be90:	83 c4 0c             	add    esp,0xc
c000be93:	31 c0                	xor    eax,eax
c000be95:	5b                   	pop    ebx
c000be96:	31 d2                	xor    edx,edx
c000be98:	5e                   	pop    esi
c000be99:	5f                   	pop    edi
c000be9a:	5d                   	pop    ebp
c000be9b:	c3                   	ret    
c000be9c:	83 ec 0c             	sub    esp,0xc
c000be9f:	50                   	push   eax
c000bea0:	e8 ea 99 00 00       	call   c001588f <HalEndOfInterrupt(int)>
c000bea5:	83 c4 10             	add    esp,0x10
c000bea8:	eb b4                	jmp    c000be5e <int_handler+0x2a>
c000beaa:	83 ec 08             	sub    esp,0x8
c000bead:	52                   	push   edx
c000beae:	57                   	push   edi
c000beaf:	ff d0                	call   eax
c000beb1:	83 c4 10             	add    esp,0x10
c000beb4:	83 c4 0c             	add    esp,0xc
c000beb7:	5b                   	pop    ebx
c000beb8:	5e                   	pop    esi
c000beb9:	5f                   	pop    edi
c000beba:	5d                   	pop    ebp
c000bebb:	c3                   	ret    

c000bebc <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bebc:	56                   	push   esi
c000bebd:	31 c0                	xor    eax,eax
c000bebf:	53                   	push   ebx
c000bec0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bec4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bec8:	89 ca                	mov    edx,ecx
c000beca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bece:	c1 e2 04             	shl    edx,0x4
c000bed1:	83 bc 82 c0 2f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdd040],0x0
c000bed9:	74 15                	je     c000bef0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bedb:	40                   	inc    eax
c000bedc:	83 f8 04             	cmp    eax,0x4
c000bedf:	75 f0                	jne    c000bed1 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bee1:	c7 44 24 0c a4 df 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dfa4
c000bee9:	5b                   	pop    ebx
c000beea:	5e                   	pop    esi
c000beeb:	e9 db 42 00 00       	jmp    c00101cb <KePanic(char const*)>
c000bef0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bef3:	89 1c 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],ebx
c000befa:	89 34 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],esi
c000bf01:	5b                   	pop    ebx
c000bf02:	5e                   	pop    esi
c000bf03:	c3                   	ret    

c000bf04 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bf04:	57                   	push   edi
c000bf05:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000bf0b:	56                   	push   esi
c000bf0c:	53                   	push   ebx
c000bf0d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bf11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf15:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bf1c:	74 5b                	je     c000bf79 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf1e:	89 c7                	mov    edi,eax
c000bf20:	84 c0                	test   al,al
c000bf22:	74 24                	je     c000bf48 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bf24:	83 fe 0f             	cmp    esi,0xf
c000bf27:	0f 8f d9 00 00 00    	jg     c000c006 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bf2d:	8a 86 c0 f7 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0840]
c000bf33:	25 ff 00 00 00       	and    eax,0xff
c000bf38:	66 8b bc 00 60 47 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdb8a0]
c000bf40:	89 c6                	mov    esi,eax
c000bf42:	66 d1 ef             	shr    di,1
c000bf45:	83 e7 01             	and    edi,0x1
c000bf48:	83 ec 08             	sub    esp,0x8
c000bf4b:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000bf50:	31 db                	xor    ebx,ebx
c000bf52:	50                   	push   eax
c000bf53:	68 b1 df 01 c0       	push   0xc001dfb1
c000bf58:	e8 ed e5 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c000bf5d:	83 c4 10             	add    esp,0x10
c000bf60:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000bf65:	85 c0                	test   eax,eax
c000bf67:	7f 51                	jg     c000bfba <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bf69:	83 ec 0c             	sub    esp,0xc
c000bf6c:	68 c8 df 01 c0       	push   0xc001dfc8
c000bf71:	e8 55 42 00 00       	call   c00101cb <KePanic(char const*)>
c000bf76:	83 c4 10             	add    esp,0x10
c000bf79:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bf7c:	31 d2                	xor    edx,edx
c000bf7e:	89 c8                	mov    eax,ecx
c000bf80:	c1 e0 04             	shl    eax,0x4
c000bf83:	8b 9c 90 c0 2f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdd040]
c000bf8a:	85 db                	test   ebx,ebx
c000bf8c:	0f 84 8b 00 00 00    	je     c000c01d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bf92:	42                   	inc    edx
c000bf93:	83 fa 04             	cmp    edx,0x4
c000bf96:	75 eb                	jne    c000bf83 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bf98:	83 ec 0c             	sub    esp,0xc
c000bf9b:	68 1c e0 01 c0       	push   0xc001e01c
c000bfa0:	e8 26 42 00 00       	call   c00101cb <KePanic(char const*)>
c000bfa5:	83 c4 10             	add    esp,0x10
c000bfa8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bfad:	5b                   	pop    ebx
c000bfae:	5e                   	pop    esi
c000bfaf:	5f                   	pop    edi
c000bfb0:	c3                   	ret    
c000bfb1:	43                   	inc    ebx
c000bfb2:	39 1d 60 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b60,ebx
c000bfb8:	7e af                	jle    c000bf69 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bfba:	83 ec 08             	sub    esp,0x8
c000bfbd:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000bfc4:	56                   	push   esi
c000bfc5:	50                   	push   eax
c000bfc6:	e8 b1 f5 00 00       	call   c001b57c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bfcb:	83 c4 10             	add    esp,0x10
c000bfce:	84 c0                	test   al,al
c000bfd0:	74 df                	je     c000bfb1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bfd2:	81 e7 ff 00 00 00    	and    edi,0xff
c000bfd8:	50                   	push   eax
c000bfd9:	8d 46 20             	lea    eax,[esi+0x20]
c000bfdc:	57                   	push   edi
c000bfdd:	25 ff 00 00 00       	and    eax,0xff
c000bfe2:	6a 00                	push   0x0
c000bfe4:	50                   	push   eax
c000bfe5:	89 f0                	mov    eax,esi
c000bfe7:	6a 00                	push   0x0
c000bfe9:	25 ff 00 00 00       	and    eax,0xff
c000bfee:	6a 00                	push   0x0
c000bff0:	50                   	push   eax
c000bff1:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000bff8:	50                   	push   eax
c000bff9:	e8 f8 f6 00 00       	call   c001b6f6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bffe:	83 c4 20             	add    esp,0x20
c000c001:	e9 73 ff ff ff       	jmp    c000bf79 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c006:	83 ec 0c             	sub    esp,0xc
c000c009:	31 ff                	xor    edi,edi
c000c00b:	68 e4 df 01 c0       	push   0xc001dfe4
c000c010:	e8 b6 41 00 00       	call   c00101cb <KePanic(char const*)>
c000c015:	83 c4 10             	add    esp,0x10
c000c018:	e9 2b ff ff ff       	jmp    c000bf48 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c01d:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c020:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c024:	89 14 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],edx
c000c02b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c02f:	5b                   	pop    ebx
c000c030:	89 14 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],edx
c000c037:	89 f0                	mov    eax,esi
c000c039:	5e                   	pop    esi
c000c03a:	5f                   	pop    edi
c000c03b:	c3                   	ret    

c000c03c <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c03c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c040:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c044:	c1 e0 04             	shl    eax,0x4
c000c047:	8d 50 10             	lea    edx,[eax+0x10]
c000c04a:	39 88 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ecx
c000c050:	74 08                	je     c000c05a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c052:	83 c0 04             	add    eax,0x4
c000c055:	39 d0                	cmp    eax,edx
c000c057:	75 f1                	jne    c000c04a <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c059:	c3                   	ret    
c000c05a:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c064:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c06e:	eb e2                	jmp    c000c052 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c070 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c070:	53                   	push   ebx
c000c071:	83 ec 08             	sub    esp,0x8
c000c074:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c078:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c07d:	74 0e                	je     c000c08d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c07f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000c084:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c08b:	75 37                	jne    c000c0c4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c091:	83 c0 20             	add    eax,0x20
c000c094:	c1 e0 04             	shl    eax,0x4
c000c097:	8d 50 10             	lea    edx,[eax+0x10]
c000c09a:	39 98 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ebx
c000c0a0:	74 0c                	je     c000c0ae <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c0a2:	83 c0 04             	add    eax,0x4
c000c0a5:	39 d0                	cmp    eax,edx
c000c0a7:	75 f1                	jne    c000c09a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c0a9:	83 c4 08             	add    esp,0x8
c000c0ac:	5b                   	pop    ebx
c000c0ad:	c3                   	ret    
c000c0ae:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c0b8:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c0c2:	eb de                	jmp    c000c0a2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c0c4:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c0c9:	7f 12                	jg     c000c0dd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c0cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c0cf:	31 c0                	xor    eax,eax
c000c0d1:	8a 81 c0 f7 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0840]
c000c0d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0db:	eb b0                	jmp    c000c08d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c0dd:	83 ec 0c             	sub    esp,0xc
c000c0e0:	68 d5 df 01 c0       	push   0xc001dfd5
c000c0e5:	e8 e1 40 00 00       	call   c00101cb <KePanic(char const*)>
c000c0ea:	83 c4 10             	add    esp,0x10
c000c0ed:	eb 9e                	jmp    c000c08d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c0ef <setupINTS()>:
c000c0ef:	31 c0                	xor    eax,eax
c000c0f1:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c0fb:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c105:	c7 80 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd03c],0x0
c000c10f:	c7 80 c4 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde03c],0x0
c000c119:	c7 80 c8 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd038],0x0
c000c123:	c7 80 c8 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde038],0x0
c000c12d:	c7 80 cc 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd034],0x0
c000c137:	c7 80 cc 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde034],0x0
c000c141:	83 c0 10             	add    eax,0x10
c000c144:	3d 00 10 00 00       	cmp    eax,0x1000
c000c149:	75 a6                	jne    c000c0f1 <setupINTS()+0x2>
c000c14b:	c3                   	ret    

c000c14c <convertLegacyIRQNumber(int)>:
c000c14c:	83 ec 0c             	sub    esp,0xc
c000c14f:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000c155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c159:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c160:	74 0f                	je     c000c171 <convertLegacyIRQNumber(int)+0x25>
c000c162:	83 f8 0f             	cmp    eax,0xf
c000c165:	7f 0e                	jg     c000c175 <convertLegacyIRQNumber(int)+0x29>
c000c167:	31 c9                	xor    ecx,ecx
c000c169:	8a 88 c0 f7 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0840]
c000c16f:	89 c8                	mov    eax,ecx
c000c171:	83 c4 0c             	add    esp,0xc
c000c174:	c3                   	ret    
c000c175:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c179:	83 ec 0c             	sub    esp,0xc
c000c17c:	68 e4 df 01 c0       	push   0xc001dfe4
c000c181:	e8 45 40 00 00       	call   c00101cb <KePanic(char const*)>
c000c186:	83 c4 10             	add    esp,0x10
c000c189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c18d:	83 c4 0c             	add    esp,0xc
c000c190:	c3                   	ret    
c000c191:	90                   	nop

c000c192 <startGUI(void*)>:
c000c192:	55                   	push   ebp
c000c193:	89 e5                	mov    ebp,esp
c000c195:	53                   	push   ebx
c000c196:	83 ec 04             	sub    esp,0x4
c000c199:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c19e:	48                   	dec    eax
c000c19f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c1a4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c1a9:	85 c0                	test   eax,eax
c000c1ab:	75 01                	jne    c000c1ae <startGUI(void*)+0x1c>
c000c1ad:	fb                   	sti    
c000c1ae:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c1b4:	83 ec 08             	sub    esp,0x8
c000c1b7:	6a 01                	push   0x1
c000c1b9:	68 41 e0 01 c0       	push   0xc001e041
c000c1be:	e8 b0 6b 00 00       	call   c0012d73 <Thr::loadDLL(char const*, bool)>
c000c1c3:	83 c4 10             	add    esp,0x10
c000c1c6:	83 ec 08             	sub    esp,0x8
c000c1c9:	53                   	push   ebx
c000c1ca:	50                   	push   eax
c000c1cb:	e8 d4 6d 00 00       	call   c0012fa4 <Thr::executeDLL(unsigned long, void*)>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c1d9:	83 ec 08             	sub    esp,0x8
c000c1dc:	6a 01                	push   0x1
c000c1de:	68 5b e0 01 c0       	push   0xc001e05b
c000c1e3:	e8 8b 6b 00 00       	call   c0012d73 <Thr::loadDLL(char const*, bool)>
c000c1e8:	83 c4 10             	add    esp,0x10
c000c1eb:	83 ec 08             	sub    esp,0x8
c000c1ee:	53                   	push   ebx
c000c1ef:	50                   	push   eax
c000c1f0:	e8 af 6d 00 00       	call   c0012fa4 <Thr::executeDLL(unsigned long, void*)>
c000c1f5:	83 c4 10             	add    esp,0x10
c000c1f8:	90                   	nop
c000c1f9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c1fc:	c9                   	leave  
c000c1fd:	c3                   	ret    

c000c1fe <startGUIVESA(void*)>:
c000c1fe:	55                   	push   ebp
c000c1ff:	89 e5                	mov    ebp,esp
c000c201:	53                   	push   ebx
c000c202:	83 ec 04             	sub    esp,0x4
c000c205:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c20a:	48                   	dec    eax
c000c20b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c210:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c215:	85 c0                	test   eax,eax
c000c217:	75 01                	jne    c000c21a <startGUIVESA(void*)+0x1c>
c000c219:	fb                   	sti    
c000c21a:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c220:	83 ec 08             	sub    esp,0x8
c000c223:	6a 01                	push   0x1
c000c225:	68 79 e0 01 c0       	push   0xc001e079
c000c22a:	e8 44 6b 00 00       	call   c0012d73 <Thr::loadDLL(char const*, bool)>
c000c22f:	83 c4 10             	add    esp,0x10
c000c232:	83 ec 08             	sub    esp,0x8
c000c235:	53                   	push   ebx
c000c236:	50                   	push   eax
c000c237:	e8 68 6d 00 00       	call   c0012fa4 <Thr::executeDLL(unsigned long, void*)>
c000c23c:	83 c4 10             	add    esp,0x10
c000c23f:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c245:	83 ec 08             	sub    esp,0x8
c000c248:	6a 01                	push   0x1
c000c24a:	68 5b e0 01 c0       	push   0xc001e05b
c000c24f:	e8 1f 6b 00 00       	call   c0012d73 <Thr::loadDLL(char const*, bool)>
c000c254:	83 c4 10             	add    esp,0x10
c000c257:	83 ec 08             	sub    esp,0x8
c000c25a:	53                   	push   ebx
c000c25b:	50                   	push   eax
c000c25c:	e8 43 6d 00 00       	call   c0012fa4 <Thr::executeDLL(unsigned long, void*)>
c000c261:	83 c4 10             	add    esp,0x10
c000c264:	90                   	nop
c000c265:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c268:	c9                   	leave  
c000c269:	c3                   	ret    

c000c26a <sendKeyToTerminal(unsigned char)>:
c000c26a:	55                   	push   ebp
c000c26b:	89 e5                	mov    ebp,esp
c000c26d:	83 ec 28             	sub    esp,0x28
c000c270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c273:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c276:	8b 15 04 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f04
c000c27c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c27f:	25 ff 00 00 00       	and    eax,0xff
c000c284:	83 ec 08             	sub    esp,0x8
c000c287:	50                   	push   eax
c000c288:	52                   	push   edx
c000c289:	e8 b8 c7 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c28e:	83 c4 10             	add    esp,0x10
c000c291:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c295:	74 0a                	je     c000c2a1 <sendKeyToTerminal(unsigned char)+0x37>
c000c297:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c29b:	0f 85 8f 00 00 00    	jne    c000c330 <sendKeyToTerminal(unsigned char)+0xc6>
c000c2a1:	fa                   	cli    
c000c2a2:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c2a7:	40                   	inc    eax
c000c2a8:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c2ad:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c2b2:	40                   	inc    eax
c000c2b3:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c2b8:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c000c2bd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c2c0:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c000c2ca:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c2ce:	74 1f                	je     c000c2ef <sendKeyToTerminal(unsigned char)+0x85>
c000c2d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c2d3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c2d6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c2d9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c2dc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c2df:	83 ec 0c             	sub    esp,0xc
c000c2e2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c2e5:	e8 7a 79 00 00       	call   c0013c64 <unblockTask(ThreadControlBlock*)>
c000c2ea:	83 c4 10             	add    esp,0x10
c000c2ed:	eb db                	jmp    c000c2ca <sendKeyToTerminal(unsigned char)+0x60>
c000c2ef:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c2f4:	48                   	dec    eax
c000c2f5:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c2fa:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c2ff:	85 c0                	test   eax,eax
c000c301:	75 18                	jne    c000c31b <sendKeyToTerminal(unsigned char)+0xb1>
c000c303:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c000c308:	85 c0                	test   eax,eax
c000c30a:	74 0f                	je     c000c31b <sendKeyToTerminal(unsigned char)+0xb1>
c000c30c:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000c316:	e8 85 74 00 00       	call   c00137a0 <schedule()>
c000c31b:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c320:	48                   	dec    eax
c000c321:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c326:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c32b:	85 c0                	test   eax,eax
c000c32d:	75 01                	jne    c000c330 <sendKeyToTerminal(unsigned char)+0xc6>
c000c32f:	fb                   	sti    
c000c330:	90                   	nop
c000c331:	c9                   	leave  
c000c332:	c3                   	ret    

c000c333 <sendKeyboardToken(KeyboardToken)>:
c000c333:	55                   	push   ebp
c000c334:	89 e5                	mov    ebp,esp
c000c336:	83 ec 18             	sub    esp,0x18
c000c339:	e8 dd 3e 00 00       	call   c001021b <Krnl::userIOReceived()>
c000c33e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c344:	25 ff ff 00 00       	and    eax,0xffff
c000c349:	83 f2 01             	xor    edx,0x1
c000c34c:	88 90 e0 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc020],dl
c000c352:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c357:	85 c0                	test   eax,eax
c000c359:	74 24                	je     c000c37f <sendKeyboardToken(KeyboardToken)+0x4c>
c000c35b:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c361:	83 ec 04             	sub    esp,0x4
c000c364:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c369:	83 ec 08             	sub    esp,0x8
c000c36c:	89 e2                	mov    edx,esp
c000c36e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c371:	89 02                	mov    DWORD PTR [edx],eax
c000c373:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c376:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c37a:	ff d1                	call   ecx
c000c37c:	83 c4 10             	add    esp,0x10
c000c37f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c383:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c386:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c38b:	38 c2                	cmp    dl,al
c000c38d:	74 1e                	je     c000c3ad <sendKeyboardToken(KeyboardToken)+0x7a>
c000c38f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c392:	a2 e8 43 02 c0       	mov    ds:0xc00243e8,al
c000c397:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c39c:	25 ff 00 00 00       	and    eax,0xff
c000c3a1:	83 ec 0c             	sub    esp,0xc
c000c3a4:	50                   	push   eax
c000c3a5:	e8 ee bd ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c3aa:	83 c4 10             	add    esp,0x10
c000c3ad:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c3b0:	84 c0                	test   al,al
c000c3b2:	0f 84 ae 00 00 00    	je     c000c466 <sendKeyboardToken(KeyboardToken)+0x133>
c000c3b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3bb:	66 3d 10 03          	cmp    ax,0x310
c000c3bf:	75 06                	jne    c000c3c7 <sendKeyboardToken(KeyboardToken)+0x94>
c000c3c1:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c3c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ca:	66 3d 11 03          	cmp    ax,0x311
c000c3ce:	75 06                	jne    c000c3d6 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c3d0:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c3d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3d9:	66 3d 12 03          	cmp    ax,0x312
c000c3dd:	75 06                	jne    c000c3e5 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c3df:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c3e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3e8:	66 3d 13 03          	cmp    ax,0x313
c000c3ec:	75 06                	jne    c000c3f4 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c3ee:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c3f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f7:	66 3d 14 03          	cmp    ax,0x314
c000c3fb:	75 06                	jne    c000c403 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c3fd:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c406:	66 3d 15 03          	cmp    ax,0x315
c000c40a:	75 06                	jne    c000c412 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c40c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c415:	66 3d 16 03          	cmp    ax,0x316
c000c419:	75 06                	jne    c000c421 <sendKeyboardToken(KeyboardToken)+0xee>
c000c41b:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c424:	66 3d 17 03          	cmp    ax,0x317
c000c428:	75 06                	jne    c000c430 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c42a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c433:	66 3d 18 03          	cmp    ax,0x318
c000c437:	75 06                	jne    c000c43f <sendKeyboardToken(KeyboardToken)+0x10c>
c000c439:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c43f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c442:	66 3d 19 03          	cmp    ax,0x319
c000c446:	75 06                	jne    c000c44e <sendKeyboardToken(KeyboardToken)+0x11b>
c000c448:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c44e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c451:	66 3d 1a 03          	cmp    ax,0x31a
c000c455:	0f 85 c9 00 00 00    	jne    c000c524 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c45b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c461:	e9 be 00 00 00       	jmp    c000c524 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c466:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c469:	66 3d 10 03          	cmp    ax,0x310
c000c46d:	75 0a                	jne    c000c479 <sendKeyboardToken(KeyboardToken)+0x146>
c000c46f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c475:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c479:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c47c:	66 3d 11 03          	cmp    ax,0x311
c000c480:	75 0a                	jne    c000c48c <sendKeyboardToken(KeyboardToken)+0x159>
c000c482:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c488:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c48c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c48f:	66 3d 12 03          	cmp    ax,0x312
c000c493:	75 0a                	jne    c000c49f <sendKeyboardToken(KeyboardToken)+0x16c>
c000c495:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c49b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c49f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a2:	66 3d 13 03          	cmp    ax,0x313
c000c4a6:	75 0a                	jne    c000c4b2 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c4a8:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c4ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b5:	66 3d 14 03          	cmp    ax,0x314
c000c4b9:	75 0a                	jne    c000c4c5 <sendKeyboardToken(KeyboardToken)+0x192>
c000c4bb:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c4c1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c8:	66 3d 15 03          	cmp    ax,0x315
c000c4cc:	75 0a                	jne    c000c4d8 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c4ce:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c4d4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4db:	66 3d 16 03          	cmp    ax,0x316
c000c4df:	75 0a                	jne    c000c4eb <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c4e1:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c4e7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ee:	66 3d 17 03          	cmp    ax,0x317
c000c4f2:	75 0a                	jne    c000c4fe <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c4f4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c4fa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c501:	66 3d 18 03          	cmp    ax,0x318
c000c505:	75 0a                	jne    c000c511 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c507:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c50d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c514:	66 3d 19 03          	cmp    ax,0x319
c000c518:	75 0a                	jne    c000c524 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c51a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c520:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c524:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c527:	66 3d 00 02          	cmp    ax,0x200
c000c52b:	75 2c                	jne    c000c559 <sendKeyboardToken(KeyboardToken)+0x226>
c000c52d:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c532:	83 f0 01             	xor    eax,0x1
c000c535:	84 c0                	test   al,al
c000c537:	74 20                	je     c000c559 <sendKeyboardToken(KeyboardToken)+0x226>
c000c539:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c53e:	6a 01                	push   0x1
c000c540:	6a 00                	push   0x0
c000c542:	68 92 c1 00 c0       	push   0xc000c192
c000c547:	50                   	push   eax
c000c548:	e8 33 70 00 00       	call   c0013580 <Process::createThread(void (*)(void*), void*, int)>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c557:	eb 33                	jmp    c000c58c <sendKeyboardToken(KeyboardToken)+0x259>
c000c559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c55c:	66 3d 01 02          	cmp    ax,0x201
c000c560:	75 2a                	jne    c000c58c <sendKeyboardToken(KeyboardToken)+0x259>
c000c562:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c567:	83 f0 01             	xor    eax,0x1
c000c56a:	84 c0                	test   al,al
c000c56c:	74 1e                	je     c000c58c <sendKeyboardToken(KeyboardToken)+0x259>
c000c56e:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c573:	6a 01                	push   0x1
c000c575:	6a 00                	push   0x0
c000c577:	68 fe c1 00 c0       	push   0xc000c1fe
c000c57c:	50                   	push   eax
c000c57d:	e8 fe 6f 00 00       	call   c0013580 <Process::createThread(void (*)(void*), void*, int)>
c000c582:	83 c4 10             	add    esp,0x10
c000c585:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c58c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c58f:	66 3d 1d 03          	cmp    ax,0x31d
c000c593:	75 06                	jne    c000c59b <sendKeyboardToken(KeyboardToken)+0x268>
c000c595:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c59b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c59e:	66 3d 1c 03          	cmp    ax,0x31c
c000c5a2:	75 06                	jne    c000c5aa <sendKeyboardToken(KeyboardToken)+0x277>
c000c5a4:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c5aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ad:	66 3d 1b 03          	cmp    ax,0x31b
c000c5b1:	75 06                	jne    c000c5b9 <sendKeyboardToken(KeyboardToken)+0x286>
c000c5b3:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c5b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5bc:	66 3d 1e 03          	cmp    ax,0x31e
c000c5c0:	75 06                	jne    c000c5c8 <sendKeyboardToken(KeyboardToken)+0x295>
c000c5c2:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c5c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5cb:	66 3d 1f 03          	cmp    ax,0x31f
c000c5cf:	75 06                	jne    c000c5d7 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c5d1:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c5d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5da:	66 3d 1a 03          	cmp    ax,0x31a
c000c5de:	75 06                	jne    c000c5e6 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c5e0:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c5e6:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c5ea:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c5ed:	83 f0 01             	xor    eax,0x1
c000c5f0:	84 c0                	test   al,al
c000c5f2:	74 7b                	je     c000c66f <sendKeyboardToken(KeyboardToken)+0x33c>
c000c5f4:	a0 e1 40 02 c0       	mov    al,ds:0xc00240e1
c000c5f9:	84 c0                	test   al,al
c000c5fb:	74 43                	je     c000c640 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c5fd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c601:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c605:	74 2d                	je     c000c634 <sendKeyboardToken(KeyboardToken)+0x301>
c000c607:	8b 15 e4 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243e4
c000c60d:	89 d0                	mov    eax,edx
c000c60f:	c1 e0 02             	shl    eax,0x2
c000c612:	01 d0                	add    eax,edx
c000c614:	01 c0                	add    eax,eax
c000c616:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c61b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c61e:	25 ff ff 00 00       	and    eax,0xffff
c000c623:	8d 50 d0             	lea    edx,[eax-0x30]
c000c626:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c62b:	01 d0                	add    eax,edx
c000c62d:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c632:	eb 71                	jmp    c000c6a5 <sendKeyboardToken(KeyboardToken)+0x372>
c000c634:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c63e:	eb 65                	jmp    c000c6a5 <sendKeyboardToken(KeyboardToken)+0x372>
c000c640:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c645:	85 c0                	test   eax,eax
c000c647:	74 1a                	je     c000c663 <sendKeyboardToken(KeyboardToken)+0x330>
c000c649:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c64e:	25 ff 00 00 00       	and    eax,0xff
c000c653:	83 ec 0c             	sub    esp,0xc
c000c656:	50                   	push   eax
c000c657:	e8 0e fc ff ff       	call   c000c26a <sendKeyToTerminal(unsigned char)>
c000c65c:	83 c4 10             	add    esp,0x10
c000c65f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c663:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c66d:	eb 36                	jmp    c000c6a5 <sendKeyboardToken(KeyboardToken)+0x372>
c000c66f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c672:	66 3d 01 01          	cmp    ax,0x101
c000c676:	75 2d                	jne    c000c6a5 <sendKeyboardToken(KeyboardToken)+0x372>
c000c678:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c67d:	85 c0                	test   eax,eax
c000c67f:	74 1a                	je     c000c69b <sendKeyboardToken(KeyboardToken)+0x368>
c000c681:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c686:	25 ff 00 00 00       	and    eax,0xff
c000c68b:	83 ec 0c             	sub    esp,0xc
c000c68e:	50                   	push   eax
c000c68f:	e8 d6 fb ff ff       	call   c000c26a <sendKeyToTerminal(unsigned char)>
c000c694:	83 c4 10             	add    esp,0x10
c000c697:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c69b:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c6a5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c6a8:	83 f0 01             	xor    eax,0x1
c000c6ab:	84 c0                	test   al,al
c000c6ad:	74 4e                	je     c000c6fd <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6af:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6b2:	83 f0 01             	xor    eax,0x1
c000c6b5:	84 c0                	test   al,al
c000c6b7:	74 44                	je     c000c6fd <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6b9:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c6be:	83 f0 01             	xor    eax,0x1
c000c6c1:	84 c0                	test   al,al
c000c6c3:	74 38                	je     c000c6fd <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c8:	66 83 f8 1f          	cmp    ax,0x1f
c000c6cc:	76 09                	jbe    c000c6d7 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c6ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6d1:	66 83 f8 7e          	cmp    ax,0x7e
c000c6d5:	76 12                	jbe    c000c6e9 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c6d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6da:	66 83 f8 0a          	cmp    ax,0xa
c000c6de:	74 09                	je     c000c6e9 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c6e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6e3:	66 83 f8 08          	cmp    ax,0x8
c000c6e7:	75 14                	jne    c000c6fd <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c6e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ec:	25 ff 00 00 00       	and    eax,0xff
c000c6f1:	83 ec 0c             	sub    esp,0xc
c000c6f4:	50                   	push   eax
c000c6f5:	e8 70 fb ff ff       	call   c000c26a <sendKeyToTerminal(unsigned char)>
c000c6fa:	83 c4 10             	add    esp,0x10
c000c6fd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c700:	83 f0 01             	xor    eax,0x1
c000c703:	84 c0                	test   al,al
c000c705:	74 51                	je     c000c758 <sendKeyboardToken(KeyboardToken)+0x425>
c000c707:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c70a:	83 f0 01             	xor    eax,0x1
c000c70d:	84 c0                	test   al,al
c000c70f:	74 47                	je     c000c758 <sendKeyboardToken(KeyboardToken)+0x425>
c000c711:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c716:	84 c0                	test   al,al
c000c718:	74 3e                	je     c000c758 <sendKeyboardToken(KeyboardToken)+0x425>
c000c71a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c71d:	66 83 f8 3f          	cmp    ax,0x3f
c000c721:	76 35                	jbe    c000c758 <sendKeyboardToken(KeyboardToken)+0x425>
c000c723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c726:	66 83 f8 7f          	cmp    ax,0x7f
c000c72a:	77 2c                	ja     c000c758 <sendKeyboardToken(KeyboardToken)+0x425>
c000c72c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c72f:	88 c2                	mov    dl,al
c000c731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c734:	66 83 f8 5f          	cmp    ax,0x5f
c000c738:	76 04                	jbe    c000c73e <sendKeyboardToken(KeyboardToken)+0x40b>
c000c73a:	b0 20                	mov    al,0x20
c000c73c:	eb 02                	jmp    c000c740 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c73e:	b0 00                	mov    al,0x0
c000c740:	29 c2                	sub    edx,eax
c000c742:	88 d0                	mov    al,dl
c000c744:	83 e8 40             	sub    eax,0x40
c000c747:	25 ff 00 00 00       	and    eax,0xff
c000c74c:	83 ec 0c             	sub    esp,0xc
c000c74f:	50                   	push   eax
c000c750:	e8 15 fb ff ff       	call   c000c26a <sendKeyToTerminal(unsigned char)>
c000c755:	83 c4 10             	add    esp,0x10
c000c758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c75b:	66 3d 00 03          	cmp    ax,0x300
c000c75f:	75 0f                	jne    c000c770 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c761:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c764:	83 f0 01             	xor    eax,0x1
c000c767:	84 c0                	test   al,al
c000c769:	74 05                	je     c000c770 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c76b:	e8 29 ba ff ff       	call   c0008199 <doTerminalCycle()>
c000c770:	90                   	nop
c000c771:	c9                   	leave  
c000c772:	c3                   	ret    

c000c773 <clearInternalKeybuffer(VgaText*)>:
c000c773:	55                   	push   ebp
c000c774:	89 e5                	mov    ebp,esp
c000c776:	83 ec 08             	sub    esp,0x8
c000c779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c77c:	05 b2 00 00 00       	add    eax,0xb2
c000c781:	83 ec 0c             	sub    esp,0xc
c000c784:	50                   	push   eax
c000c785:	e8 b6 3d ff ff       	call   c0000540 <strlen>
c000c78a:	83 c4 10             	add    esp,0x10
c000c78d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c790:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c796:	83 ec 04             	sub    esp,0x4
c000c799:	50                   	push   eax
c000c79a:	6a 00                	push   0x0
c000c79c:	52                   	push   edx
c000c79d:	e8 2e 3d ff ff       	call   c00004d0 <memset>
c000c7a2:	83 c4 10             	add    esp,0x10
c000c7a5:	90                   	nop
c000c7a6:	c9                   	leave  
c000c7a7:	c3                   	ret    

c000c7a8 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c7a8:	55                   	push   ebp
c000c7a9:	89 e5                	mov    ebp,esp
c000c7ab:	83 ec 18             	sub    esp,0x18
c000c7ae:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c7b3:	85 c0                	test   eax,eax
c000c7b5:	74 2a                	je     c000c7e1 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c7b7:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c7bd:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c7c3:	83 ec 04             	sub    esp,0x4
c000c7c6:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c7cb:	83 ec 08             	sub    esp,0x8
c000c7ce:	89 e2                	mov    edx,esp
c000c7d0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c7d3:	89 02                	mov    DWORD PTR [edx],eax
c000c7d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c7d8:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c7dc:	ff d1                	call   ecx
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	fb                   	sti    
c000c7e2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c7e9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c7ed:	0f 84 db 00 00 00    	je     c000c8ce <readKeyboard(VgaText*, char*, unsigned long)+0x126>
c000c7f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f6:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c7fc:	84 c0                	test   al,al
c000c7fe:	75 28                	jne    c000c828 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c800:	fa                   	cli    
c000c801:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c806:	40                   	inc    eax
c000c807:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c80c:	e8 8f 6f 00 00       	call   c00137a0 <schedule()>
c000c811:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c816:	48                   	dec    eax
c000c817:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c81c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c821:	85 c0                	test   eax,eax
c000c823:	75 ce                	jne    c000c7f3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c825:	fb                   	sti    
c000c826:	eb cb                	jmp    c000c7f3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c828:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c82b:	8d 50 01             	lea    edx,[eax+0x1]
c000c82e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c831:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c834:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c83a:	88 10                	mov    BYTE PTR [eax],dl
c000c83c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c83f:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c845:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c848:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c84c:	75 2e                	jne    c000c87c <readKeyboard(VgaText*, char*, unsigned long)+0xd4>
c000c84e:	83 ec 0c             	sub    esp,0xc
c000c851:	68 94 e0 01 c0       	push   0xc001e094
c000c856:	e8 ef dc ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c000c85b:	83 c4 10             	add    esp,0x10
c000c85e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c863:	8b 00                	mov    eax,DWORD PTR [eax]
c000c865:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c868:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c86e:	83 ec 08             	sub    esp,0x8
c000c871:	6a 02                	push   0x2
c000c873:	50                   	push   eax
c000c874:	e8 3e 3d 00 00       	call   c00105b7 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c879:	83 c4 10             	add    esp,0x10
c000c87c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c87f:	05 b2 00 00 00       	add    eax,0xb2
c000c884:	83 ec 0c             	sub    esp,0xc
c000c887:	50                   	push   eax
c000c888:	e8 b3 3c ff ff       	call   c0000540 <strlen>
c000c88d:	83 c4 10             	add    esp,0x10
c000c890:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c893:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c899:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c89c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c89f:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c8a5:	83 ec 04             	sub    esp,0x4
c000c8a8:	50                   	push   eax
c000c8a9:	51                   	push   ecx
c000c8aa:	52                   	push   edx
c000c8ab:	e8 30 3b ff ff       	call   c00003e0 <memmove>
c000c8b0:	83 c4 10             	add    esp,0x10
c000c8b3:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c8b6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c8b9:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c8bd:	74 0a                	je     c000c8c9 <readKeyboard(VgaText*, char*, unsigned long)+0x121>
c000c8bf:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c8c3:	0f 85 20 ff ff ff    	jne    c000c7e9 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c8c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c8cc:	eb 03                	jmp    c000c8d1 <readKeyboard(VgaText*, char*, unsigned long)+0x129>
c000c8ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c8d1:	c9                   	leave  
c000c8d2:	c3                   	ret    
c000c8d3:	90                   	nop

c000c8d4 <Keyboard::Keyboard(char const*)>:
c000c8d4:	83 ec 0c             	sub    esp,0xc
c000c8d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8db:	83 ec 08             	sub    esp,0x8
c000c8de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8e2:	50                   	push   eax
c000c8e3:	e8 38 f2 ff ff       	call   c000bb20 <Device::Device(char const*)>
c000c8e8:	83 c4 10             	add    esp,0x10
c000c8eb:	ba ac e0 01 c0       	mov    edx,0xc001e0ac
c000c8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8f4:	89 10                	mov    DWORD PTR [eax],edx
c000c8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8fa:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c904:	c6 05 c4 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fc4,0x1
c000c90b:	90                   	nop
c000c90c:	83 c4 0c             	add    esp,0xc
c000c90f:	c3                   	ret    

c000c910 <Keyboard::~Keyboard()>:
c000c910:	83 ec 0c             	sub    esp,0xc
c000c913:	ba ac e0 01 c0       	mov    edx,0xc001e0ac
c000c918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c91c:	89 10                	mov    DWORD PTR [eax],edx
c000c91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c922:	83 ec 0c             	sub    esp,0xc
c000c925:	50                   	push   eax
c000c926:	e8 5f ef ff ff       	call   c000b88a <Device::~Device()>
c000c92b:	83 c4 10             	add    esp,0x10
c000c92e:	90                   	nop
c000c92f:	83 c4 0c             	add    esp,0xc
c000c932:	c3                   	ret    
c000c933:	90                   	nop

c000c934 <Keyboard::~Keyboard()>:
c000c934:	83 ec 0c             	sub    esp,0xc
c000c937:	83 ec 0c             	sub    esp,0xc
c000c93a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c93e:	e8 cd ff ff ff       	call   c000c910 <Keyboard::~Keyboard()>
c000c943:	83 c4 10             	add    esp,0x10
c000c946:	83 ec 08             	sub    esp,0x8
c000c949:	68 5c 01 00 00       	push   0x15c
c000c94e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c952:	e8 fd da ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c000c957:	83 c4 10             	add    esp,0x10
c000c95a:	83 c4 0c             	add    esp,0xc
c000c95d:	c3                   	ret    

c000c95e <LogicalDisk::close(int, int, void*)>:
c000c95e:	83 c8 ff             	or     eax,0xffffffff
c000c961:	c3                   	ret    

c000c962 <LogicalDisk::~LogicalDisk()>:
c000c962:	83 ec 0c             	sub    esp,0xc
c000c965:	ba 24 e1 01 c0       	mov    edx,0xc001e124
c000c96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c96e:	89 10                	mov    DWORD PTR [eax],edx
c000c970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c974:	83 ec 0c             	sub    esp,0xc
c000c977:	50                   	push   eax
c000c978:	e8 0d ef ff ff       	call   c000b88a <Device::~Device()>
c000c97d:	83 c4 10             	add    esp,0x10
c000c980:	90                   	nop
c000c981:	83 c4 0c             	add    esp,0xc
c000c984:	c3                   	ret    
c000c985:	90                   	nop

c000c986 <LogicalDisk::~LogicalDisk()>:
c000c986:	83 ec 0c             	sub    esp,0xc
c000c989:	83 ec 0c             	sub    esp,0xc
c000c98c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c990:	e8 cd ff ff ff       	call   c000c962 <LogicalDisk::~LogicalDisk()>
c000c995:	83 c4 10             	add    esp,0x10
c000c998:	83 ec 08             	sub    esp,0x8
c000c99b:	68 74 01 00 00       	push   0x174
c000c9a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9a4:	e8 ab da ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c000c9a9:	83 c4 10             	add    esp,0x10
c000c9ac:	83 c4 0c             	add    esp,0xc
c000c9af:	c3                   	ret    

c000c9b0 <LogicalDisk::open(int, int, void*)>:
c000c9b0:	83 ec 18             	sub    esp,0x18
c000c9b3:	68 d8 e0 01 c0       	push   0xc001e0d8
c000c9b8:	e8 0e 38 00 00       	call   c00101cb <KePanic(char const*)>
c000c9bd:	83 c8 ff             	or     eax,0xffffffff
c000c9c0:	83 c4 1c             	add    esp,0x1c
c000c9c3:	c3                   	ret    

c000c9c4 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c9c4:	53                   	push   ebx
c000c9c5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c9c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c9cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9d1:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c9d7:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c9dd:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c9e3:	77 10                	ja     c000c9f5 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c9e5:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c9eb:	89 d3                	mov    ebx,edx
c000c9ed:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c9f3:	72 05                	jb     c000c9fa <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c9f5:	83 c8 ff             	or     eax,0xffffffff
c000c9f8:	89 c2                	mov    edx,eax
c000c9fa:	5b                   	pop    ebx
c000c9fb:	c3                   	ret    

c000c9fc <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c9fc:	56                   	push   esi
c000c9fd:	83 c8 ff             	or     eax,0xffffffff
c000ca00:	53                   	push   ebx
c000ca01:	89 c2                	mov    edx,eax
c000ca03:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ca07:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ca0b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ca0f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ca15:	77 27                	ja     c000ca3e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ca17:	89 d8                	mov    eax,ebx
c000ca19:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ca1f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ca25:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ca2a:	89 c2                	mov    edx,eax
c000ca2c:	73 10                	jae    c000ca3e <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ca2e:	89 c8                	mov    eax,ecx
c000ca30:	89 da                	mov    edx,ebx
c000ca32:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ca38:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ca3e:	5b                   	pop    ebx
c000ca3f:	5e                   	pop    esi
c000ca40:	c3                   	ret    
c000ca41:	90                   	nop

c000ca42 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ca42:	83 ec 1c             	sub    esp,0x1c
c000ca45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ca49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ca55:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca59:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca5c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca68:	83 ec 08             	sub    esp,0x8
c000ca6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca6f:	50                   	push   eax
c000ca70:	e8 ab f0 ff ff       	call   c000bb20 <Device::Device(char const*)>
c000ca75:	83 c4 10             	add    esp,0x10
c000ca78:	ba 24 e1 01 c0       	mov    edx,0xc001e124
c000ca7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca81:	89 10                	mov    DWORD PTR [eax],edx
c000ca83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca87:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca92:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca9d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000caa7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000caab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caaf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cab3:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cab9:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cabf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cac3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cac6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000caca:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cad0:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cada:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cade:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cae4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cae8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000caf2:	90                   	nop
c000caf3:	83 c4 1c             	add    esp,0x1c
c000caf6:	c3                   	ret    
c000caf7:	90                   	nop

c000caf8 <LogicalDisk::assignDriveLetter()>:
c000caf8:	55                   	push   ebp
c000caf9:	57                   	push   edi
c000cafa:	56                   	push   esi
c000cafb:	53                   	push   ebx
c000cafc:	83 ec 14             	sub    esp,0x14
c000caff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cb03:	8b 3d 00 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024400
c000cb09:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cb0f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cb13:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cb19:	8b 3d 04 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024404
c000cb1f:	3c 01                	cmp    al,0x1
c000cb21:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cb25:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cb29:	19 c0                	sbb    eax,eax
c000cb2b:	83 e0 02             	and    eax,0x2
c000cb2e:	83 c0 41             	add    eax,0x41
c000cb31:	0f be e8             	movsx  ebp,al
c000cb34:	3c 43                	cmp    al,0x43
c000cb36:	75 10                	jne    c000cb48 <LogicalDisk::assignDriveLetter()+0x50>
c000cb38:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cb3f:	75 5d                	jne    c000cb9e <LogicalDisk::assignDriveLetter()+0xa6>
c000cb41:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cb46:	75 56                	jne    c000cb9e <LogicalDisk::assignDriveLetter()+0xa6>
c000cb48:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cb4b:	ba 01 00 00 00       	mov    edx,0x1
c000cb50:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cb54:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cb58:	d3 e2                	shl    edx,cl
c000cb5a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb5e:	89 d7                	mov    edi,edx
c000cb60:	89 d6                	mov    esi,edx
c000cb62:	c1 ff 1f             	sar    edi,0x1f
c000cb65:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cb69:	21 f9                	and    ecx,edi
c000cb6b:	09 d1                	or     ecx,edx
c000cb6d:	75 2f                	jne    c000cb9e <LogicalDisk::assignDriveLetter()+0xa6>
c000cb6f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cb73:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb77:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cb7d:	09 f2                	or     edx,esi
c000cb7f:	89 15 00 44 02 c0    	mov    DWORD PTR ds:0xc0024400,edx
c000cb85:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb89:	09 fa                	or     edx,edi
c000cb8b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cb8f:	89 15 04 44 02 c0    	mov    DWORD PTR ds:0xc0024404,edx
c000cb95:	89 1c bd 20 44 02 c0 	mov    DWORD PTR [edi*4-0x3ffdbbe0],ebx
c000cb9c:	eb 08                	jmp    c000cba6 <LogicalDisk::assignDriveLetter()+0xae>
c000cb9e:	45                   	inc    ebp
c000cb9f:	40                   	inc    eax
c000cba0:	3c 5b                	cmp    al,0x5b
c000cba2:	75 90                	jne    c000cb34 <LogicalDisk::assignDriveLetter()+0x3c>
c000cba4:	31 c0                	xor    eax,eax
c000cba6:	83 c4 14             	add    esp,0x14
c000cba9:	5b                   	pop    ebx
c000cbaa:	5e                   	pop    esi
c000cbab:	5f                   	pop    edi
c000cbac:	5d                   	pop    ebp
c000cbad:	c3                   	ret    

c000cbae <LogicalDisk::mount()>:
c000cbae:	56                   	push   esi
c000cbaf:	53                   	push   ebx
c000cbb0:	53                   	push   ebx
c000cbb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbb5:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c000cbbb:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cbc5:	85 db                	test   ebx,ebx
c000cbc7:	74 27                	je     c000cbf0 <LogicalDisk::mount()+0x42>
c000cbc9:	51                   	push   ecx
c000cbca:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cbd1:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cbd3:	83 e8 41             	sub    eax,0x41
c000cbd6:	50                   	push   eax
c000cbd7:	56                   	push   esi
c000cbd8:	53                   	push   ebx
c000cbd9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cbdc:	83 c4 10             	add    esp,0x10
c000cbdf:	84 c0                	test   al,al
c000cbe1:	74 08                	je     c000cbeb <LogicalDisk::mount()+0x3d>
c000cbe3:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cbe9:	eb 07                	jmp    c000cbf2 <LogicalDisk::mount()+0x44>
c000cbeb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cbee:	eb d5                	jmp    c000cbc5 <LogicalDisk::mount()+0x17>
c000cbf0:	31 c0                	xor    eax,eax
c000cbf2:	5a                   	pop    edx
c000cbf3:	5b                   	pop    ebx
c000cbf4:	5e                   	pop    esi
c000cbf5:	c3                   	ret    

c000cbf6 <LogicalDisk::unmount()>:
c000cbf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbfa:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cc04:	c3                   	ret    
c000cc05:	90                   	nop

c000cc06 <LogicalDisk::eject()>:
c000cc06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc0a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cc10:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc12:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cc16:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cc19:	90                   	nop

c000cc1a <LogicalDisk::unassignDriveLetter()>:
c000cc1a:	57                   	push   edi
c000cc1b:	56                   	push   esi
c000cc1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc20:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cc27:	84 c9                	test   cl,cl
c000cc29:	75 0f                	jne    c000cc3a <LogicalDisk::unassignDriveLetter()+0x20>
c000cc2b:	c7 44 24 0c fc e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e0fc
c000cc33:	5e                   	pop    esi
c000cc34:	5f                   	pop    edi
c000cc35:	e9 91 35 00 00       	jmp    c00101cb <KePanic(char const*)>
c000cc3a:	83 e9 41             	sub    ecx,0x41
c000cc3d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cc44:	b8 01 00 00 00       	mov    eax,0x1
c000cc49:	c7 04 8d 20 44 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdbbe0],0x0
c000cc54:	d3 e0                	shl    eax,cl
c000cc56:	89 c7                	mov    edi,eax
c000cc58:	f7 d0                	not    eax
c000cc5a:	c1 ff 1f             	sar    edi,0x1f
c000cc5d:	21 05 00 44 02 c0    	and    DWORD PTR ds:0xc0024400,eax
c000cc63:	89 fe                	mov    esi,edi
c000cc65:	f7 d6                	not    esi
c000cc67:	21 35 04 44 02 c0    	and    DWORD PTR ds:0xc0024404,esi
c000cc6d:	5e                   	pop    esi
c000cc6e:	5f                   	pop    edi
c000cc6f:	c3                   	ret    

c000cc70 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cc70:	57                   	push   edi
c000cc71:	56                   	push   esi
c000cc72:	53                   	push   ebx
c000cc73:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc7b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc83:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc89:	77 41                	ja     c000cccc <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cc8b:	99                   	cdq    
c000cc8c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc92:	01 c8                	add    eax,ecx
c000cc94:	11 da                	adc    edx,ebx
c000cc96:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc9c:	19 d7                	sbb    edi,edx
c000cc9e:	72 33                	jb     c000ccd3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cca0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cca6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ccac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ccb0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ccb4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ccba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ccc0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccc4:	5b                   	pop    ebx
c000ccc5:	5e                   	pop    esi
c000ccc6:	5f                   	pop    edi
c000ccc7:	e9 4e 0a 00 00       	jmp    c000d71a <VCache::read(unsigned long long, int, void*)>
c000cccc:	b8 05 00 00 00       	mov    eax,0x5
c000ccd1:	eb 05                	jmp    c000ccd8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ccd3:	b8 07 00 00 00       	mov    eax,0x7
c000ccd8:	5b                   	pop    ebx
c000ccd9:	5e                   	pop    esi
c000ccda:	5f                   	pop    edi
c000ccdb:	c3                   	ret    

c000ccdc <LogicalDisk::write(unsigned long long, int, void*)>:
c000ccdc:	57                   	push   edi
c000ccdd:	56                   	push   esi
c000ccde:	53                   	push   ebx
c000ccdf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cce3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cce7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cceb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ccef:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ccf5:	77 41                	ja     c000cd38 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ccf7:	99                   	cdq    
c000ccf8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ccfe:	01 c8                	add    eax,ecx
c000cd00:	11 da                	adc    edx,ebx
c000cd02:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd08:	19 d7                	sbb    edi,edx
c000cd0a:	72 33                	jb     c000cd3f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cd0c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd12:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd18:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd1c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd20:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd26:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd30:	5b                   	pop    ebx
c000cd31:	5e                   	pop    esi
c000cd32:	5f                   	pop    edi
c000cd33:	e9 cc 08 00 00       	jmp    c000d604 <VCache::write(unsigned long long, int, void*)>
c000cd38:	b8 05 00 00 00       	mov    eax,0x5
c000cd3d:	eb 05                	jmp    c000cd44 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cd3f:	b8 07 00 00 00       	mov    eax,0x7
c000cd44:	5b                   	pop    ebx
c000cd45:	5e                   	pop    esi
c000cd46:	5f                   	pop    edi
c000cd47:	c3                   	ret    

c000cd48 <Mouse::Mouse(char const*)>:
c000cd48:	83 ec 0c             	sub    esp,0xc
c000cd4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4f:	83 ec 08             	sub    esp,0x8
c000cd52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd56:	50                   	push   eax
c000cd57:	e8 c4 ed ff ff       	call   c000bb20 <Device::Device(char const*)>
c000cd5c:	83 c4 10             	add    esp,0x10
c000cd5f:	ba 50 e1 01 c0       	mov    edx,0xc001e150
c000cd64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd68:	89 10                	mov    DWORD PTR [eax],edx
c000cd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd6e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cd78:	90                   	nop
c000cd79:	83 c4 0c             	add    esp,0xc
c000cd7c:	c3                   	ret    
c000cd7d:	90                   	nop
c000cd7e:	66 90                	xchg   ax,ax

c000cd80 <Mouse::~Mouse()>:
c000cd80:	83 ec 0c             	sub    esp,0xc
c000cd83:	ba 50 e1 01 c0       	mov    edx,0xc001e150
c000cd88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd8c:	89 10                	mov    DWORD PTR [eax],edx
c000cd8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd92:	83 ec 0c             	sub    esp,0xc
c000cd95:	50                   	push   eax
c000cd96:	e8 ef ea ff ff       	call   c000b88a <Device::~Device()>
c000cd9b:	83 c4 10             	add    esp,0x10
c000cd9e:	90                   	nop
c000cd9f:	83 c4 0c             	add    esp,0xc
c000cda2:	c3                   	ret    
c000cda3:	90                   	nop

c000cda4 <Mouse::~Mouse()>:
c000cda4:	83 ec 0c             	sub    esp,0xc
c000cda7:	83 ec 0c             	sub    esp,0xc
c000cdaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdae:	e8 cd ff ff ff       	call   c000cd80 <Mouse::~Mouse()>
c000cdb3:	83 c4 10             	add    esp,0x10
c000cdb6:	83 ec 08             	sub    esp,0x8
c000cdb9:	68 58 01 00 00       	push   0x158
c000cdbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdc2:	e8 8d d6 ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c000cdc7:	83 c4 10             	add    esp,0x10
c000cdca:	83 c4 0c             	add    esp,0xc
c000cdcd:	c3                   	ret    

c000cdce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cdce:	55                   	push   ebp
c000cdcf:	57                   	push   edi
c000cdd0:	56                   	push   esi
c000cdd1:	53                   	push   ebx
c000cdd2:	81 ec 28 01 00 00    	sub    esp,0x128
c000cdd8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cddf:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cde6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cded:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cdf4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cdf8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cdfc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ce03:	e8 14 ee ff ff       	call   c000bc1c <Device::getName()>
c000ce08:	5a                   	pop    edx
c000ce09:	59                   	pop    ecx
c000ce0a:	50                   	push   eax
c000ce0b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ce0f:	55                   	push   ebp
c000ce10:	e8 eb 37 ff ff       	call   c0000600 <strcpy>
c000ce15:	5b                   	pop    ebx
c000ce16:	58                   	pop    eax
c000ce17:	68 74 e1 01 c0       	push   0xc001e174
c000ce1c:	55                   	push   ebp
c000ce1d:	e8 9e 39 ff ff       	call   c00007c0 <strcat>
c000ce22:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000ce29:	e8 8b a9 ff ff       	call   c00077b9 <malloc>
c000ce2e:	83 c4 0c             	add    esp,0xc
c000ce31:	89 c3                	mov    ebx,eax
c000ce33:	57                   	push   edi
c000ce34:	56                   	push   esi
c000ce35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce3d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000ce44:	55                   	push   ebp
c000ce45:	50                   	push   eax
c000ce46:	e8 f7 fb ff ff       	call   c000ca42 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000ce4b:	83 c4 14             	add    esp,0x14
c000ce4e:	53                   	push   ebx
c000ce4f:	e8 a4 fc ff ff       	call   c000caf8 <LogicalDisk::assignDriveLetter()>
c000ce54:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ce57:	e8 52 fd ff ff       	call   c000cbae <LogicalDisk::mount()>
c000ce5c:	58                   	pop    eax
c000ce5d:	5a                   	pop    edx
c000ce5e:	53                   	push   ebx
c000ce5f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ce66:	e8 1d eb ff ff       	call   c000b988 <Device::addChild(Device*)>
c000ce6b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ce71:	5b                   	pop    ebx
c000ce72:	5e                   	pop    esi
c000ce73:	5f                   	pop    edi
c000ce74:	5d                   	pop    ebp
c000ce75:	c3                   	ret    

c000ce76 <createPartitionsForDisk(PhysicalDisk*)>:
c000ce76:	55                   	push   ebp
c000ce77:	57                   	push   edi
c000ce78:	56                   	push   esi
c000ce79:	53                   	push   ebx
c000ce7a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ce80:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ce87:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ce8d:	3d 00 02 00 00       	cmp    eax,0x200
c000ce92:	74 27                	je     c000cebb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ce94:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ce9a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cea0:	83 ec 10             	sub    esp,0x10
c000cea3:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cea7:	99                   	cdq    
c000cea8:	c1 e6 0a             	shl    esi,0xa
c000ceab:	52                   	push   edx
c000ceac:	89 fd                	mov    ebp,edi
c000ceae:	50                   	push   eax
c000ceaf:	55                   	push   ebp
c000ceb0:	56                   	push   esi
c000ceb1:	e8 4a f2 00 00       	call   c001c100 <__udivdi3>
c000ceb6:	e9 b1 00 00 00       	jmp    c000cf6c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cebb:	83 ec 0c             	sub    esp,0xc
c000cebe:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cec0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cec4:	56                   	push   esi
c000cec5:	6a 01                	push   0x1
c000cec7:	6a 00                	push   0x0
c000cec9:	6a 00                	push   0x0
c000cecb:	53                   	push   ebx
c000cecc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cecf:	83 c4 20             	add    esp,0x20
c000ced2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ceda:	75 0a                	jne    c000cee6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cedc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cee4:	74 2c                	je     c000cf12 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cee6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ceec:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cef2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cef8:	83 ec 10             	sub    esp,0x10
c000cefb:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ceff:	89 f7                	mov    edi,esi
c000cf01:	c1 e0 0a             	shl    eax,0xa
c000cf04:	c1 ff 1f             	sar    edi,0x1f
c000cf07:	57                   	push   edi
c000cf08:	56                   	push   esi
c000cf09:	52                   	push   edx
c000cf0a:	50                   	push   eax
c000cf0b:	e8 f0 f1 00 00       	call   c001c100 <__udivdi3>
c000cf10:	eb 5a                	jmp    c000cf6c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cf12:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cf19:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cf20:	83 e1 7f             	and    ecx,0x7f
c000cf23:	83 e0 7f             	and    eax,0x7f
c000cf26:	01 c1                	add    ecx,eax
c000cf28:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cf2f:	83 e0 7f             	and    eax,0x7f
c000cf32:	01 c1                	add    ecx,eax
c000cf34:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000cf3b:	83 e0 7f             	and    eax,0x7f
c000cf3e:	00 c1                	add    cl,al
c000cf40:	74 41                	je     c000cf83 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000cf42:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf48:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf4e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cf54:	83 ec 10             	sub    esp,0x10
c000cf57:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cf5b:	89 f7                	mov    edi,esi
c000cf5d:	c1 e0 0a             	shl    eax,0xa
c000cf60:	c1 ff 1f             	sar    edi,0x1f
c000cf63:	57                   	push   edi
c000cf64:	56                   	push   esi
c000cf65:	52                   	push   edx
c000cf66:	50                   	push   eax
c000cf67:	e8 94 f1 00 00       	call   c001c100 <__udivdi3>
c000cf6c:	83 c4 14             	add    esp,0x14
c000cf6f:	52                   	push   edx
c000cf70:	50                   	push   eax
c000cf71:	6a 00                	push   0x0
c000cf73:	6a 00                	push   0x0
c000cf75:	53                   	push   ebx
c000cf76:	e8 53 fe ff ff       	call   c000cdce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cf7b:	83 c4 20             	add    esp,0x20
c000cf7e:	e9 79 01 00 00       	jmp    c000d0fc <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cf83:	89 f0                	mov    eax,esi
c000cf85:	31 f6                	xor    esi,esi
c000cf87:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cf8e:	75 02                	jne    c000cf92 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cf90:	89 f1                	mov    ecx,esi
c000cf92:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cf99:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cfa0:	c1 e2 08             	shl    edx,0x8
c000cfa3:	c1 e7 10             	shl    edi,0x10
c000cfa6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cfae:	09 fa                	or     edx,edi
c000cfb0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cfb8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cfbf:	83 c0 10             	add    eax,0x10
c000cfc2:	09 fa                	or     edx,edi
c000cfc4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cfcb:	c1 e7 18             	shl    edi,0x18
c000cfce:	09 fa                	or     edx,edi
c000cfd0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000cfd7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cfdb:	c1 e7 10             	shl    edi,0x10
c000cfde:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cfe5:	c1 e2 08             	shl    edx,0x8
c000cfe8:	09 fa                	or     edx,edi
c000cfea:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cff1:	09 fa                	or     edx,edi
c000cff3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cffa:	c1 e7 18             	shl    edi,0x18
c000cffd:	09 fa                	or     edx,edi
c000cfff:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d003:	46                   	inc    esi
c000d004:	83 fe 04             	cmp    esi,0x4
c000d007:	0f 85 7a ff ff ff    	jne    c000cf87 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d00d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d011:	83 f0 01             	xor    eax,0x1
c000d014:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d018:	75 57                	jne    c000d071 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d01a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d01e:	83 f0 01             	xor    eax,0x1
c000d021:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d025:	75 4a                	jne    c000d071 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d027:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d02b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d033:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d03b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d041:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d047:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d04d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d051:	89 f7                	mov    edi,esi
c000d053:	c1 e0 0a             	shl    eax,0xa
c000d056:	c1 ff 1f             	sar    edi,0x1f
c000d059:	57                   	push   edi
c000d05a:	56                   	push   esi
c000d05b:	52                   	push   edx
c000d05c:	50                   	push   eax
c000d05d:	e8 9e f0 00 00       	call   c001c100 <__udivdi3>
c000d062:	83 c4 10             	add    esp,0x10
c000d065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d069:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d06d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d071:	84 c9                	test   cl,cl
c000d073:	74 53                	je     c000d0c8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d075:	0f b6 c9             	movzx  ecx,cl
c000d078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d07c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d080:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d084:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d088:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d08c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d090:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d094:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d09c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d0a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d0a8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d0ac:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d0b0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d0b4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d0b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d0c0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d0c4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d0c8:	31 ed                	xor    ebp,ebp
c000d0ca:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d0ce:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d0d2:	89 f8                	mov    eax,edi
c000d0d4:	09 f0                	or     eax,esi
c000d0d6:	74 1e                	je     c000d0f6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d0d8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d0dc:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d0e0:	89 d1                	mov    ecx,edx
c000d0e2:	09 c1                	or     ecx,eax
c000d0e4:	74 10                	je     c000d0f6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d0e6:	83 ec 0c             	sub    esp,0xc
c000d0e9:	57                   	push   edi
c000d0ea:	56                   	push   esi
c000d0eb:	52                   	push   edx
c000d0ec:	50                   	push   eax
c000d0ed:	53                   	push   ebx
c000d0ee:	e8 db fc ff ff       	call   c000cdce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d0f3:	83 c4 20             	add    esp,0x20
c000d0f6:	45                   	inc    ebp
c000d0f7:	83 fd 04             	cmp    ebp,0x4
c000d0fa:	75 ce                	jne    c000d0ca <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d0fc:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d102:	5b                   	pop    ebx
c000d103:	5e                   	pop    esi
c000d104:	5f                   	pop    edi
c000d105:	5d                   	pop    ebp
c000d106:	c3                   	ret    
c000d107:	90                   	nop

c000d108 <Serial::Serial(char const*)>:
c000d108:	83 ec 0c             	sub    esp,0xc
c000d10b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d10f:	83 ec 08             	sub    esp,0x8
c000d112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d116:	50                   	push   eax
c000d117:	e8 04 ea ff ff       	call   c000bb20 <Device::Device(char const*)>
c000d11c:	83 c4 10             	add    esp,0x10
c000d11f:	ba 88 e1 01 c0       	mov    edx,0xc001e188
c000d124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d128:	89 10                	mov    DWORD PTR [eax],edx
c000d12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d12e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d138:	90                   	nop
c000d139:	83 c4 0c             	add    esp,0xc
c000d13c:	c3                   	ret    
c000d13d:	90                   	nop
c000d13e:	66 90                	xchg   ax,ax

c000d140 <Serial::~Serial()>:
c000d140:	83 ec 0c             	sub    esp,0xc
c000d143:	ba 88 e1 01 c0       	mov    edx,0xc001e188
c000d148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d14c:	89 10                	mov    DWORD PTR [eax],edx
c000d14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d152:	83 ec 0c             	sub    esp,0xc
c000d155:	50                   	push   eax
c000d156:	e8 2f e7 ff ff       	call   c000b88a <Device::~Device()>
c000d15b:	83 c4 10             	add    esp,0x10
c000d15e:	90                   	nop
c000d15f:	83 c4 0c             	add    esp,0xc
c000d162:	c3                   	ret    
c000d163:	90                   	nop

c000d164 <Serial::~Serial()>:
c000d164:	83 ec 0c             	sub    esp,0xc
c000d167:	83 ec 0c             	sub    esp,0xc
c000d16a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d16e:	e8 cd ff ff ff       	call   c000d140 <Serial::~Serial()>
c000d173:	83 c4 10             	add    esp,0x10
c000d176:	83 ec 08             	sub    esp,0x8
c000d179:	68 58 01 00 00       	push   0x158
c000d17e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d182:	e8 cd d2 ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c000d187:	83 c4 10             	add    esp,0x10
c000d18a:	83 c4 0c             	add    esp,0xc
c000d18d:	c3                   	ret    
c000d18e:	66 90                	xchg   ax,ax

c000d190 <Timer::Timer(char const*)>:
c000d190:	83 ec 0c             	sub    esp,0xc
c000d193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d197:	83 ec 08             	sub    esp,0x8
c000d19a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d19e:	50                   	push   eax
c000d19f:	e8 7c e9 ff ff       	call   c000bb20 <Device::Device(char const*)>
c000d1a4:	83 c4 10             	add    esp,0x10
c000d1a7:	ba cc e1 01 c0       	mov    edx,0xc001e1cc
c000d1ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1b0:	89 10                	mov    DWORD PTR [eax],edx
c000d1b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1b6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d1c0:	90                   	nop
c000d1c1:	83 c4 0c             	add    esp,0xc
c000d1c4:	c3                   	ret    
c000d1c5:	90                   	nop
c000d1c6:	66 90                	xchg   ax,ax

c000d1c8 <Timer::~Timer()>:
c000d1c8:	83 ec 0c             	sub    esp,0xc
c000d1cb:	ba cc e1 01 c0       	mov    edx,0xc001e1cc
c000d1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1d4:	89 10                	mov    DWORD PTR [eax],edx
c000d1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1da:	83 ec 0c             	sub    esp,0xc
c000d1dd:	50                   	push   eax
c000d1de:	e8 a7 e6 ff ff       	call   c000b88a <Device::~Device()>
c000d1e3:	83 c4 10             	add    esp,0x10
c000d1e6:	90                   	nop
c000d1e7:	83 c4 0c             	add    esp,0xc
c000d1ea:	c3                   	ret    
c000d1eb:	90                   	nop

c000d1ec <Timer::~Timer()>:
c000d1ec:	83 ec 0c             	sub    esp,0xc
c000d1ef:	83 ec 0c             	sub    esp,0xc
c000d1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1f6:	e8 cd ff ff ff       	call   c000d1c8 <Timer::~Timer()>
c000d1fb:	83 c4 10             	add    esp,0x10
c000d1fe:	83 ec 08             	sub    esp,0x8
c000d201:	68 5c 01 00 00       	push   0x15c
c000d206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d20a:	e8 45 d2 ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c000d20f:	83 c4 10             	add    esp,0x10
c000d212:	83 c4 0c             	add    esp,0xc
c000d215:	c3                   	ret    

c000d216 <Timer::read()>:
c000d216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d21a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d220:	c3                   	ret    

c000d221 <setupTimer(int)>:
c000d221:	53                   	push   ebx
c000d222:	83 ec 14             	sub    esp,0x14
c000d225:	68 5c 01 00 00       	push   0x15c
c000d22a:	e8 8a a5 ff ff       	call   c00077b9 <malloc>
c000d22f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d232:	89 c3                	mov    ebx,eax
c000d234:	e8 db e7 00 00       	call   c001ba14 <PIT::PIT()>
c000d239:	58                   	pop    eax
c000d23a:	5a                   	pop    edx
c000d23b:	53                   	push   ebx
c000d23c:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000d242:	e8 41 e7 ff ff       	call   c000b988 <Device::addChild(Device*)>
c000d247:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d249:	6a 00                	push   0x0
c000d24b:	6a 00                	push   0x0
c000d24d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d251:	53                   	push   ebx
c000d252:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d255:	89 d8                	mov    eax,ebx
c000d257:	83 c4 28             	add    esp,0x28
c000d25a:	5b                   	pop    ebx
c000d25b:	c3                   	ret    

c000d25c <timerHandler(unsigned int)>:
c000d25c:	56                   	push   esi
c000d25d:	53                   	push   ebx
c000d25e:	51                   	push   ecx
c000d25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d263:	01 05 8c 44 02 c0    	add    DWORD PTR ds:0xc002448c,eax
c000d269:	80 3d bd 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebd,0x0
c000d270:	0f 84 4a 01 00 00    	je     c000d3c0 <timerHandler(unsigned int)+0x164>
c000d276:	fa                   	cli    
c000d277:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d27d:	83 ec 0c             	sub    esp,0xc
c000d280:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c000d286:	68 78 51 02 c0       	push   0xc0025178
c000d28b:	e8 40 f4 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d290:	83 c4 10             	add    esp,0x10
c000d293:	84 c0                	test   al,al
c000d295:	0f 85 a1 00 00 00    	jne    c000d33c <timerHandler(unsigned int)+0xe0>
c000d29b:	83 ec 0c             	sub    esp,0xc
c000d29e:	68 78 51 02 c0       	push   0xc0025178
c000d2a3:	e8 44 f4 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2a8:	83 c4 10             	add    esp,0x10
c000d2ab:	89 c6                	mov    esi,eax
c000d2ad:	8d 76 00             	lea    esi,[esi+0x0]
c000d2b0:	83 ec 0c             	sub    esp,0xc
c000d2b3:	68 78 51 02 c0       	push   0xc0025178
c000d2b8:	e8 2f f4 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2bd:	c7 04 24 78 51 02 c0 	mov    DWORD PTR [esp],0xc0025178
c000d2c4:	89 c3                	mov    ebx,eax
c000d2c6:	e8 29 f4 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d2cb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d2ce:	83 c4 10             	add    esp,0x10
c000d2d1:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c000d2d7:	77 23                	ja     c000d2fc <timerHandler(unsigned int)+0xa0>
c000d2d9:	83 ec 0c             	sub    esp,0xc
c000d2dc:	53                   	push   ebx
c000d2dd:	e8 82 69 00 00       	call   c0013c64 <unblockTask(ThreadControlBlock*)>
c000d2e2:	83 c4 10             	add    esp,0x10
c000d2e5:	39 de                	cmp    esi,ebx
c000d2e7:	75 27                	jne    c000d310 <timerHandler(unsigned int)+0xb4>
c000d2e9:	83 ec 0c             	sub    esp,0xc
c000d2ec:	68 78 51 02 c0       	push   0xc0025178
c000d2f1:	e8 f6 f3 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2f6:	89 c6                	mov    esi,eax
c000d2f8:	eb 12                	jmp    c000d30c <timerHandler(unsigned int)+0xb0>
c000d2fa:	66 90                	xchg   ax,ax
c000d2fc:	52                   	push   edx
c000d2fd:	52                   	push   edx
c000d2fe:	53                   	push   ebx
c000d2ff:	68 78 51 02 c0       	push   0xc0025178
c000d304:	e8 a3 f4 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d309:	8d 76 00             	lea    esi,[esi+0x0]
c000d30c:	83 c4 10             	add    esp,0x10
c000d30f:	90                   	nop
c000d310:	83 ec 0c             	sub    esp,0xc
c000d313:	68 78 51 02 c0       	push   0xc0025178
c000d318:	e8 b3 f3 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d31d:	83 c4 10             	add    esp,0x10
c000d320:	84 c0                	test   al,al
c000d322:	75 18                	jne    c000d33c <timerHandler(unsigned int)+0xe0>
c000d324:	83 ec 0c             	sub    esp,0xc
c000d327:	68 78 51 02 c0       	push   0xc0025178
c000d32c:	e8 bb f3 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d331:	83 c4 10             	add    esp,0x10
c000d334:	39 f0                	cmp    eax,esi
c000d336:	0f 85 74 ff ff ff    	jne    c000d2b0 <timerHandler(unsigned int)+0x54>
c000d33c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d341:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d345:	74 41                	je     c000d388 <timerHandler(unsigned int)+0x12c>
c000d347:	80 3d bc 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebc,0x0
c000d34e:	74 38                	je     c000d388 <timerHandler(unsigned int)+0x12c>
c000d350:	fa                   	cli    
c000d351:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d357:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c000d35c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d362:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d365:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d36b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d36e:	72 08                	jb     c000d378 <timerHandler(unsigned int)+0x11c>
c000d370:	e8 2b 64 00 00       	call   c00137a0 <schedule()>
c000d375:	8d 76 00             	lea    esi,[esi+0x0]
c000d378:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d37d:	48                   	dec    eax
c000d37e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d383:	75 03                	jne    c000d388 <timerHandler(unsigned int)+0x12c>
c000d385:	fb                   	sti    
c000d386:	66 90                	xchg   ax,ax
c000d388:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000d38d:	48                   	dec    eax
c000d38e:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000d393:	75 1b                	jne    c000d3b0 <timerHandler(unsigned int)+0x154>
c000d395:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c000d39c:	74 12                	je     c000d3b0 <timerHandler(unsigned int)+0x154>
c000d39e:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000d3a8:	e8 f3 63 00 00       	call   c00137a0 <schedule()>
c000d3ad:	8d 76 00             	lea    esi,[esi+0x0]
c000d3b0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d3b5:	48                   	dec    eax
c000d3b6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d3bb:	75 03                	jne    c000d3c0 <timerHandler(unsigned int)+0x164>
c000d3bd:	fb                   	sti    
c000d3be:	66 90                	xchg   ax,ax
c000d3c0:	58                   	pop    eax
c000d3c1:	5b                   	pop    ebx
c000d3c2:	5e                   	pop    esi
c000d3c3:	c3                   	ret    

c000d3c4 <VCache::VCache(PhysicalDisk*)>:
c000d3c4:	53                   	push   ebx
c000d3c5:	83 ec 18             	sub    esp,0x18
c000d3c8:	ba fc e1 01 c0       	mov    edx,0xc001e1fc
c000d3cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3d1:	89 10                	mov    DWORD PTR [eax],edx
c000d3d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3d7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d3de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3e2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d3e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ed:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d3f4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d3fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ff:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d406:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d40d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d411:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d41c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d420:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d424:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d42b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d436:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d43a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d43e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d442:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d446:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d44a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d44e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d455:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d45d:	83 ec 0c             	sub    esp,0xc
c000d460:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d464:	e8 50 a3 ff ff       	call   c00077b9 <malloc>
c000d469:	83 c4 10             	add    esp,0x10
c000d46c:	89 c3                	mov    ebx,eax
c000d46e:	83 ec 0c             	sub    esp,0xc
c000d471:	53                   	push   ebx
c000d472:	e8 f5 60 00 00       	call   c001356c <Mutex::Mutex()>
c000d477:	83 c4 10             	add    esp,0x10
c000d47a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d47e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d481:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d485:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d489:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d48c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d490:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d497:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d49b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d4a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4a5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d4a8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4ac:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d4b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d4b8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d4bc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d4bf:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d4c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4c6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d4ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d4d4:	05 00 01 00 00       	add    eax,0x100
c000d4d9:	c1 e0 04             	shl    eax,0x4
c000d4dc:	83 ec 0c             	sub    esp,0xc
c000d4df:	50                   	push   eax
c000d4e0:	e8 d4 a2 ff ff       	call   c00077b9 <malloc>
c000d4e5:	83 c4 10             	add    esp,0x10
c000d4e8:	89 c2                	mov    edx,eax
c000d4ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d4f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4f5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d4fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d500:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d504:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d508:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d50e:	c1 e0 06             	shl    eax,0x6
c000d511:	83 ec 0c             	sub    esp,0xc
c000d514:	50                   	push   eax
c000d515:	e8 9f a2 ff ff       	call   c00077b9 <malloc>
c000d51a:	83 c4 10             	add    esp,0x10
c000d51d:	89 c2                	mov    edx,eax
c000d51f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d523:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d526:	90                   	nop
c000d527:	83 c4 18             	add    esp,0x18
c000d52a:	5b                   	pop    ebx
c000d52b:	c3                   	ret    

c000d52c <VCache::invalidateReadBuffer()>:
c000d52c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d530:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d536:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d53a:	c3                   	ret    
c000d53b:	90                   	nop

c000d53c <VCache::writeWriteBuffer()>:
c000d53c:	53                   	push   ebx
c000d53d:	83 ec 08             	sub    esp,0x8
c000d540:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d544:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d548:	74 1e                	je     c000d568 <VCache::writeWriteBuffer()+0x2c>
c000d54a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d54d:	83 ec 0c             	sub    esp,0xc
c000d550:	8b 10                	mov    edx,DWORD PTR [eax]
c000d552:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d555:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d558:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d55b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d55e:	50                   	push   eax
c000d55f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d562:	83 c4 20             	add    esp,0x20
c000d565:	8d 76 00             	lea    esi,[esi+0x0]
c000d568:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d56f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d576:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d57a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d581:	83 c4 08             	add    esp,0x8
c000d584:	5b                   	pop    ebx
c000d585:	c3                   	ret    
c000d586:	66 90                	xchg   ax,ax

c000d588 <VCache::~VCache()>:
c000d588:	83 ec 0c             	sub    esp,0xc
c000d58b:	ba fc e1 01 c0       	mov    edx,0xc001e1fc
c000d590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d594:	89 10                	mov    DWORD PTR [eax],edx
c000d596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d59a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d59d:	84 c0                	test   al,al
c000d59f:	74 0f                	je     c000d5b0 <VCache::~VCache()+0x28>
c000d5a1:	83 ec 0c             	sub    esp,0xc
c000d5a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a8:	e8 8f ff ff ff       	call   c000d53c <VCache::writeWriteBuffer()>
c000d5ad:	83 c4 10             	add    esp,0x10
c000d5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5b4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d5b7:	83 ec 0c             	sub    esp,0xc
c000d5ba:	50                   	push   eax
c000d5bb:	e8 09 a2 ff ff       	call   c00077c9 <free>
c000d5c0:	83 c4 10             	add    esp,0x10
c000d5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d5ca:	83 ec 0c             	sub    esp,0xc
c000d5cd:	50                   	push   eax
c000d5ce:	e8 f6 a1 ff ff       	call   c00077c9 <free>
c000d5d3:	83 c4 10             	add    esp,0x10
c000d5d6:	90                   	nop
c000d5d7:	83 c4 0c             	add    esp,0xc
c000d5da:	c3                   	ret    
c000d5db:	90                   	nop

c000d5dc <VCache::~VCache()>:
c000d5dc:	83 ec 0c             	sub    esp,0xc
c000d5df:	83 ec 0c             	sub    esp,0xc
c000d5e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e6:	e8 9d ff ff ff       	call   c000d588 <VCache::~VCache()>
c000d5eb:	83 c4 10             	add    esp,0x10
c000d5ee:	83 ec 08             	sub    esp,0x8
c000d5f1:	6a 44                	push   0x44
c000d5f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5f7:	e8 58 ce ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c000d5fc:	83 c4 10             	add    esp,0x10
c000d5ff:	83 c4 0c             	add    esp,0xc
c000d602:	c3                   	ret    
c000d603:	90                   	nop

c000d604 <VCache::write(unsigned long long, int, void*)>:
c000d604:	55                   	push   ebp
c000d605:	57                   	push   edi
c000d606:	56                   	push   esi
c000d607:	53                   	push   ebx
c000d608:	83 ec 1c             	sub    esp,0x1c
c000d60b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d60f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d613:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d617:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d61b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d61f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d623:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d627:	31 c0                	xor    eax,eax
c000d629:	8d 76 00             	lea    esi,[esi+0x0]
c000d62c:	39 e8                	cmp    eax,ebp
c000d62e:	7d 18                	jge    c000d648 <VCache::write(unsigned long long, int, void*)+0x44>
c000d630:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d633:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d639:	0f af c8             	imul   ecx,eax
c000d63c:	89 ca                	mov    edx,ecx
c000d63e:	01 f2                	add    edx,esi
c000d640:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d642:	40                   	inc    eax
c000d643:	eb e7                	jmp    c000d62c <VCache::write(unsigned long long, int, void*)+0x28>
c000d645:	8d 76 00             	lea    esi,[esi+0x0]
c000d648:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d64c:	74 0a                	je     c000d658 <VCache::write(unsigned long long, int, void*)+0x54>
c000d64e:	53                   	push   ebx
c000d64f:	e8 d8 fe ff ff       	call   c000d52c <VCache::invalidateReadBuffer()>
c000d654:	58                   	pop    eax
c000d655:	8d 76 00             	lea    esi,[esi+0x0]
c000d658:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d65c:	74 5a                	je     c000d6b8 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d65e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d661:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d665:	89 f8                	mov    eax,edi
c000d667:	99                   	cdq    
c000d668:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d66b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d66e:	31 c1                	xor    ecx,eax
c000d670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d674:	31 d0                	xor    eax,edx
c000d676:	09 c1                	or     ecx,eax
c000d678:	75 32                	jne    c000d6ac <VCache::write(unsigned long long, int, void*)+0xa8>
c000d67a:	83 fd 01             	cmp    ebp,0x1
c000d67d:	75 2d                	jne    c000d6ac <VCache::write(unsigned long long, int, void*)+0xa8>
c000d67f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d682:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d688:	0f af f9             	imul   edi,ecx
c000d68b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d68e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d690:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d693:	40                   	inc    eax
c000d694:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d697:	83 f8 40             	cmp    eax,0x40
c000d69a:	75 74                	jne    c000d710 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d69c:	83 ec 0c             	sub    esp,0xc
c000d69f:	53                   	push   ebx
c000d6a0:	e8 97 fe ff ff       	call   c000d53c <VCache::writeWriteBuffer()>
c000d6a5:	83 c4 10             	add    esp,0x10
c000d6a8:	eb 66                	jmp    c000d710 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d6aa:	66 90                	xchg   ax,ax
c000d6ac:	83 ec 0c             	sub    esp,0xc
c000d6af:	53                   	push   ebx
c000d6b0:	e8 87 fe ff ff       	call   c000d53c <VCache::writeWriteBuffer()>
c000d6b5:	83 c4 10             	add    esp,0x10
c000d6b8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6bb:	83 fd 3f             	cmp    ebp,0x3f
c000d6be:	7f 24                	jg     c000d6e4 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d6c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d6c4:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d6c7:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d6ca:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d6ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d6d2:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d6d5:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d6d8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d6de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6e0:	eb 2e                	jmp    c000d710 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d6e2:	66 90                	xchg   ax,ax
c000d6e4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6e6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d6ea:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d6ee:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d6f2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6f6:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d6fa:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d6fe:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d702:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d705:	83 c4 1c             	add    esp,0x1c
c000d708:	5b                   	pop    ebx
c000d709:	5e                   	pop    esi
c000d70a:	5f                   	pop    edi
c000d70b:	5d                   	pop    ebp
c000d70c:	ff e0                	jmp    eax
c000d70e:	66 90                	xchg   ax,ax
c000d710:	83 c4 1c             	add    esp,0x1c
c000d713:	31 c0                	xor    eax,eax
c000d715:	5b                   	pop    ebx
c000d716:	5e                   	pop    esi
c000d717:	5f                   	pop    edi
c000d718:	5d                   	pop    ebp
c000d719:	c3                   	ret    

c000d71a <VCache::read(unsigned long long, int, void*)>:
c000d71a:	55                   	push   ebp
c000d71b:	57                   	push   edi
c000d71c:	56                   	push   esi
c000d71d:	53                   	push   ebx
c000d71e:	83 ec 1c             	sub    esp,0x1c
c000d721:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d725:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d729:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d72d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d731:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d735:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d739:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d73d:	74 0d                	je     c000d74c <VCache::read(unsigned long long, int, void*)+0x32>
c000d73f:	83 ec 0c             	sub    esp,0xc
c000d742:	55                   	push   ebp
c000d743:	e8 f4 fd ff ff       	call   c000d53c <VCache::writeWriteBuffer()>
c000d748:	83 c4 10             	add    esp,0x10
c000d74b:	90                   	nop
c000d74c:	83 ec 0c             	sub    esp,0xc
c000d74f:	55                   	push   ebp
c000d750:	e8 d7 fd ff ff       	call   c000d52c <VCache::invalidateReadBuffer()>
c000d755:	83 c4 0c             	add    esp,0xc
c000d758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d75b:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d761:	6a 00                	push   0x0
c000d763:	53                   	push   ebx
c000d764:	e8 67 2d ff ff       	call   c00004d0 <memset>
c000d769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d76c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d770:	8b 10                	mov    edx,DWORD PTR [eax]
c000d772:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000d776:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c000d77a:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d77e:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d782:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d786:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d789:	83 c4 2c             	add    esp,0x2c
c000d78c:	5b                   	pop    ebx
c000d78d:	5e                   	pop    esi
c000d78e:	5f                   	pop    edi
c000d78f:	5d                   	pop    ebp
c000d790:	ff e0                	jmp    eax

c000d792 <Video::putrect(int, int, int, int, unsigned int)>:
c000d792:	55                   	push   ebp
c000d793:	57                   	push   edi
c000d794:	56                   	push   esi
c000d795:	53                   	push   ebx
c000d796:	83 ec 1c             	sub    esp,0x1c
c000d799:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d79d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d7a1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d7a5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d7a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d7ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7b1:	01 df                	add    edi,ebx
c000d7b3:	39 fb                	cmp    ebx,edi
c000d7b5:	7d 1f                	jge    c000d7d6 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d7b7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d7bb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d7bf:	7d 12                	jge    c000d7d3 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d7c1:	8b 16                	mov    edx,DWORD PTR [esi]
c000d7c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d7c7:	53                   	push   ebx
c000d7c8:	55                   	push   ebp
c000d7c9:	45                   	inc    ebp
c000d7ca:	56                   	push   esi
c000d7cb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d7ce:	83 c4 10             	add    esp,0x10
c000d7d1:	eb e8                	jmp    c000d7bb <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d7d3:	43                   	inc    ebx
c000d7d4:	eb dd                	jmp    c000d7b3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d7d6:	83 c4 1c             	add    esp,0x1c
c000d7d9:	5b                   	pop    ebx
c000d7da:	5e                   	pop    esi
c000d7db:	5f                   	pop    edi
c000d7dc:	5d                   	pop    ebp
c000d7dd:	c3                   	ret    

c000d7de <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d7de:	55                   	push   ebp
c000d7df:	57                   	push   edi
c000d7e0:	31 ff                	xor    edi,edi
c000d7e2:	56                   	push   esi
c000d7e3:	53                   	push   ebx
c000d7e4:	83 ec 1c             	sub    esp,0x1c
c000d7e7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d7eb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d7ef:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d7f6:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d7fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7ff:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d803:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d807:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d80a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d80e:	01 f9                	add    ecx,edi
c000d810:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d814:	7d 2f                	jge    c000d845 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d816:	31 f6                	xor    esi,esi
c000d818:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d81c:	01 f2                	add    edx,esi
c000d81e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d822:	7d 1a                	jge    c000d83e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d824:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d827:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d82a:	46                   	inc    esi
c000d82b:	51                   	push   ecx
c000d82c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d830:	52                   	push   edx
c000d831:	55                   	push   ebp
c000d832:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d83c:	eb da                	jmp    c000d818 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d83e:	47                   	inc    edi
c000d83f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d843:	eb c5                	jmp    c000d80a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d845:	83 c4 1c             	add    esp,0x1c
c000d848:	5b                   	pop    ebx
c000d849:	5e                   	pop    esi
c000d84a:	5f                   	pop    edi
c000d84b:	5d                   	pop    ebp
c000d84c:	c3                   	ret    
c000d84d:	90                   	nop

c000d84e <Video::blit(unsigned int*, int, int, int, int)>:
c000d84e:	55                   	push   ebp
c000d84f:	57                   	push   edi
c000d850:	56                   	push   esi
c000d851:	53                   	push   ebx
c000d852:	83 ec 1c             	sub    esp,0x1c
c000d855:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d859:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d85d:	85 c0                	test   eax,eax
c000d85f:	79 02                	jns    c000d863 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d861:	31 c0                	xor    eax,eax
c000d863:	c1 e0 02             	shl    eax,0x2
c000d866:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d86a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d86e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d872:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d876:	39 d8                	cmp    eax,ebx
c000d878:	7e 49                	jle    c000d8c3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d87a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d880:	7c 41                	jl     c000d8c3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d882:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d886:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d88a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d88e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d892:	39 f9                	cmp    ecx,edi
c000d894:	7e 22                	jle    c000d8b8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d896:	83 c5 04             	add    ebp,0x4
c000d899:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d89f:	7c 14                	jl     c000d8b5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d8a1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d8a3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d8a6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d8aa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d8ae:	56                   	push   esi
c000d8af:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d8b2:	83 c4 10             	add    esp,0x10
c000d8b5:	47                   	inc    edi
c000d8b6:	eb d2                	jmp    c000d88a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d8b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d8bc:	43                   	inc    ebx
c000d8bd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d8c1:	eb ab                	jmp    c000d86e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d8c3:	83 c4 1c             	add    esp,0x1c
c000d8c6:	5b                   	pop    ebx
c000d8c7:	5e                   	pop    esi
c000d8c8:	5f                   	pop    edi
c000d8c9:	5d                   	pop    ebp
c000d8ca:	c3                   	ret    
c000d8cb:	90                   	nop

c000d8cc <Video::clearScreen(unsigned int)>:
c000d8cc:	57                   	push   edi
c000d8cd:	56                   	push   esi
c000d8ce:	53                   	push   ebx
c000d8cf:	31 db                	xor    ebx,ebx
c000d8d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d8d5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d8db:	7e 1f                	jle    c000d8fc <Video::clearScreen(unsigned int)+0x30>
c000d8dd:	31 ff                	xor    edi,edi
c000d8df:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d8e5:	7e 12                	jle    c000d8f9 <Video::clearScreen(unsigned int)+0x2d>
c000d8e7:	8b 06                	mov    eax,DWORD PTR [esi]
c000d8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d8ed:	53                   	push   ebx
c000d8ee:	57                   	push   edi
c000d8ef:	47                   	inc    edi
c000d8f0:	56                   	push   esi
c000d8f1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d8f4:	83 c4 10             	add    esp,0x10
c000d8f7:	eb e6                	jmp    c000d8df <Video::clearScreen(unsigned int)+0x13>
c000d8f9:	43                   	inc    ebx
c000d8fa:	eb d9                	jmp    c000d8d5 <Video::clearScreen(unsigned int)+0x9>
c000d8fc:	5b                   	pop    ebx
c000d8fd:	5e                   	pop    esi
c000d8fe:	5f                   	pop    edi
c000d8ff:	c3                   	ret    

c000d900 <Video::putpixel(int, int, unsigned int)>:
c000d900:	c7 44 24 04 04 e2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e204
c000d908:	e9 be 28 00 00       	jmp    c00101cb <KePanic(char const*)>
c000d90d:	90                   	nop

c000d90e <Video::Video(char const*)>:
c000d90e:	83 ec 0c             	sub    esp,0xc
c000d911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d915:	83 ec 08             	sub    esp,0x8
c000d918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d91c:	50                   	push   eax
c000d91d:	e8 fe e1 ff ff       	call   c000bb20 <Device::Device(char const*)>
c000d922:	83 c4 10             	add    esp,0x10
c000d925:	ba 74 e2 01 c0       	mov    edx,0xc001e274
c000d92a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d92e:	89 10                	mov    DWORD PTR [eax],edx
c000d930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d934:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d93e:	90                   	nop
c000d93f:	83 c4 0c             	add    esp,0xc
c000d942:	c3                   	ret    
c000d943:	90                   	nop

c000d944 <Video::~Video()>:
c000d944:	83 ec 0c             	sub    esp,0xc
c000d947:	ba 74 e2 01 c0       	mov    edx,0xc001e274
c000d94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d950:	89 10                	mov    DWORD PTR [eax],edx
c000d952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d956:	83 ec 0c             	sub    esp,0xc
c000d959:	50                   	push   eax
c000d95a:	e8 2b df ff ff       	call   c000b88a <Device::~Device()>
c000d95f:	83 c4 10             	add    esp,0x10
c000d962:	90                   	nop
c000d963:	83 c4 0c             	add    esp,0xc
c000d966:	c3                   	ret    
c000d967:	90                   	nop

c000d968 <Video::~Video()>:
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	83 ec 0c             	sub    esp,0xc
c000d96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d972:	e8 cd ff ff ff       	call   c000d944 <Video::~Video()>
c000d977:	83 c4 10             	add    esp,0x10
c000d97a:	83 ec 08             	sub    esp,0x8
c000d97d:	68 64 01 00 00       	push   0x164
c000d982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d986:	e8 c9 ca ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c000d98b:	83 c4 10             	add    esp,0x10
c000d98e:	83 c4 0c             	add    esp,0xc
c000d991:	c3                   	ret    

c000d992 <Video::isMonochrome()>:
c000d992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d996:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d99c:	c3                   	ret    
c000d99d:	90                   	nop

c000d99e <Video::getWidth()>:
c000d99e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9a2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d9a8:	c3                   	ret    
c000d9a9:	90                   	nop

c000d9aa <Video::getHeight()>:
c000d9aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9ae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d9b4:	c3                   	ret    
c000d9b5:	90                   	nop

c000d9b6 <Video::drawCursor(int, int, unsigned char*, int)>:
c000d9b6:	55                   	push   ebp
c000d9b7:	57                   	push   edi
c000d9b8:	56                   	push   esi
c000d9b9:	53                   	push   ebx
c000d9ba:	83 ec 2c             	sub    esp,0x2c
c000d9bd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d9c1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d9c5:	83 f8 01             	cmp    eax,0x1
c000d9c8:	19 c9                	sbb    ecx,ecx
c000d9ca:	31 db                	xor    ebx,ebx
c000d9cc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d9d0:	89 cd                	mov    ebp,ecx
c000d9d2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d9da:	f7 d5                	not    ebp
c000d9dc:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d9e2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d9e6:	01 d8                	add    eax,ebx
c000d9e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9ec:	56                   	push   esi
c000d9ed:	e8 b8 ff ff ff       	call   c000d9aa <Video::getHeight()>
c000d9f2:	59                   	pop    ecx
c000d9f3:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d9f7:	7e 70                	jle    c000da69 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d9f9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d9fd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000da01:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000da04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da08:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000da0c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000da13:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da17:	89 f8                	mov    eax,edi
c000da19:	83 c0 20             	add    eax,0x20
c000da1c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000da20:	56                   	push   esi
c000da21:	e8 78 ff ff ff       	call   c000d99e <Video::getWidth()>
c000da26:	5a                   	pop    edx
c000da27:	39 c7                	cmp    edi,eax
c000da29:	7d 34                	jge    c000da5f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000da2b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000da30:	74 05                	je     c000da37 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000da32:	8b 06                	mov    eax,DWORD PTR [esi]
c000da34:	55                   	push   ebp
c000da35:	eb 0d                	jmp    c000da44 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000da37:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000da3c:	74 12                	je     c000da50 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000da3e:	8b 06                	mov    eax,DWORD PTR [esi]
c000da40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da44:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000da48:	57                   	push   edi
c000da49:	56                   	push   esi
c000da4a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da4d:	83 c4 10             	add    esp,0x10
c000da50:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000da54:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000da58:	47                   	inc    edi
c000da59:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000da5d:	75 c1                	jne    c000da20 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000da5f:	43                   	inc    ebx
c000da60:	83 fb 20             	cmp    ebx,0x20
c000da63:	0f 85 79 ff ff ff    	jne    c000d9e2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000da69:	83 c4 2c             	add    esp,0x2c
c000da6c:	5b                   	pop    ebx
c000da6d:	5e                   	pop    esi
c000da6e:	5f                   	pop    edi
c000da6f:	5d                   	pop    ebp
c000da70:	c3                   	ret    
c000da71:	90                   	nop

c000da72 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000da72:	55                   	push   ebp
c000da73:	57                   	push   edi
c000da74:	56                   	push   esi
c000da75:	53                   	push   ebx
c000da76:	83 ec 28             	sub    esp,0x28
c000da79:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000da7d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000da81:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000da85:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000da89:	c1 e6 08             	shl    esi,0x8
c000da8c:	01 c6                	add    esi,eax
c000da8e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000da92:	c1 e0 08             	shl    eax,0x8
c000da95:	01 d0                	add    eax,edx
c000da97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da9f:	0f af c6             	imul   eax,esi
c000daa2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000daa9:	50                   	push   eax
c000daaa:	e8 0a 9d ff ff       	call   c00077b9 <malloc>
c000daaf:	83 c4 10             	add    esp,0x10
c000dab2:	89 c7                	mov    edi,eax
c000dab4:	85 c0                	test   eax,eax
c000dab6:	75 10                	jne    c000dac8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000dab8:	83 ec 0c             	sub    esp,0xc
c000dabb:	68 25 e2 01 c0       	push   0xc001e225
c000dac0:	e8 06 27 00 00       	call   c00101cb <KePanic(char const*)>
c000dac5:	83 c4 10             	add    esp,0x10
c000dac8:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dacb:	ba 12 00 00 00       	mov    edx,0x12
c000dad0:	84 c0                	test   al,al
c000dad2:	74 11                	je     c000dae5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dad4:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dad8:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dadc:	c1 fa 03             	sar    edx,0x3
c000dadf:	0f af d1             	imul   edx,ecx
c000dae2:	83 c2 12             	add    edx,0x12
c000dae5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dae9:	74 04                	je     c000daef <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000daeb:	85 f6                	test   esi,esi
c000daed:	75 12                	jne    c000db01 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000daef:	83 ec 0c             	sub    esp,0xc
c000daf2:	68 35 e2 01 c0       	push   0xc001e235
c000daf7:	e8 4e ca ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c000dafc:	e9 b8 00 00 00       	jmp    c000dbb9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000db01:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000db05:	80 f9 02             	cmp    cl,0x2
c000db08:	0f 85 96 00 00 00    	jne    c000dba4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000db0e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000db13:	75 0e                	jne    c000db23 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000db15:	84 c0                	test   al,al
c000db17:	75 0a                	jne    c000db23 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000db19:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000db1c:	83 e8 18             	sub    eax,0x18
c000db1f:	a8 f7                	test   al,0xf7
c000db21:	74 0a                	je     c000db2d <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000db23:	83 ec 0c             	sub    esp,0xc
c000db26:	68 4a e2 01 c0       	push   0xc001e24a
c000db2b:	eb 7f                	jmp    c000dbac <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000db2d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000db35:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000db3d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000db41:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000db49:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000db4d:	75 0c                	jne    c000db5b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000db4f:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000db54:	c1 e0 18             	shl    eax,0x18
c000db57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db5b:	45                   	inc    ebp
c000db5c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000db61:	c1 e1 10             	shl    ecx,0x10
c000db64:	89 c8                	mov    eax,ecx
c000db66:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000db6b:	c1 e1 08             	shl    ecx,0x8
c000db6e:	09 c1                	or     ecx,eax
c000db70:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000db74:	09 c1                	or     ecx,eax
c000db76:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000db7a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000db7e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000db82:	c1 f8 03             	sar    eax,0x3
c000db85:	01 c2                	add    edx,eax
c000db87:	89 e8                	mov    eax,ebp
c000db89:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000db8d:	39 c6                	cmp    esi,eax
c000db8f:	7f b0                	jg     c000db41 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000db91:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000db95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db99:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000db9c:	7e 22                	jle    c000dbc0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000db9e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dba2:	eb 99                	jmp    c000db3d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dba4:	50                   	push   eax
c000dba5:	50                   	push   eax
c000dba6:	51                   	push   ecx
c000dba7:	68 58 e2 01 c0       	push   0xc001e258
c000dbac:	e8 99 c9 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c000dbb1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dbb4:	e8 10 9c ff ff       	call   c00077c9 <free>
c000dbb9:	83 c4 10             	add    esp,0x10
c000dbbc:	31 ff                	xor    edi,edi
c000dbbe:	eb 0f                	jmp    c000dbcf <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dbc0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dbc4:	89 30                	mov    DWORD PTR [eax],esi
c000dbc6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dbca:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dbcd:	89 30                	mov    DWORD PTR [eax],esi
c000dbcf:	83 c4 1c             	add    esp,0x1c
c000dbd2:	89 f8                	mov    eax,edi
c000dbd4:	5b                   	pop    ebx
c000dbd5:	5e                   	pop    esi
c000dbd6:	5f                   	pop    edi
c000dbd7:	5d                   	pop    ebp
c000dbd8:	c3                   	ret    
c000dbd9:	90                   	nop

c000dbda <Video::putTGA(int, int, unsigned char*, int)>:
c000dbda:	55                   	push   ebp
c000dbdb:	57                   	push   edi
c000dbdc:	56                   	push   esi
c000dbdd:	53                   	push   ebx
c000dbde:	83 ec 28             	sub    esp,0x28
c000dbe1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dbe5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dbe9:	50                   	push   eax
c000dbea:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dbee:	50                   	push   eax
c000dbef:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dbf3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dbf7:	56                   	push   esi
c000dbf8:	e8 75 fe ff ff       	call   c000da72 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dbfd:	83 c4 20             	add    esp,0x20
c000dc00:	85 c0                	test   eax,eax
c000dc02:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dc06:	74 35                	je     c000dc3d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dc08:	89 c7                	mov    edi,eax
c000dc0a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dc0e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dc12:	39 d8                	cmp    eax,ebx
c000dc14:	7e 27                	jle    c000dc3d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dc16:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dc1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dc1e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dc22:	39 e8                	cmp    eax,ebp
c000dc24:	7e 14                	jle    c000dc3a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dc26:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc28:	83 c7 04             	add    edi,0x4
c000dc2b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dc2e:	53                   	push   ebx
c000dc2f:	55                   	push   ebp
c000dc30:	45                   	inc    ebp
c000dc31:	56                   	push   esi
c000dc32:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc35:	83 c4 10             	add    esp,0x10
c000dc38:	eb e0                	jmp    c000dc1a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dc3a:	43                   	inc    ebx
c000dc3b:	eb cd                	jmp    c000dc0a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dc3d:	83 c4 1c             	add    esp,0x1c
c000dc40:	5b                   	pop    ebx
c000dc41:	5e                   	pop    esi
c000dc42:	5f                   	pop    edi
c000dc43:	5d                   	pop    ebp
c000dc44:	c3                   	ret    
c000dc45:	66 90                	xchg   ax,ax
c000dc47:	90                   	nop

c000dc48 <ACPI::close(int, int, void*)>:
c000dc48:	83 ec 1c             	sub    esp,0x1c
c000dc4b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dc53:	74 0b                	je     c000dc60 <ACPI::close(int, int, void*)+0x18>
c000dc55:	b8 00 00 00 00       	mov    eax,0x0
c000dc5a:	e9 9d 00 00 00       	jmp    c000dcfc <ACPI::close(int, int, void*)+0xb4>
c000dc5f:	90                   	nop
c000dc60:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dc65:	75 29                	jne    c000dc90 <ACPI::close(int, int, void*)+0x48>
c000dc67:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dc6c:	85 c0                	test   eax,eax
c000dc6e:	74 08                	je     c000dc78 <ACPI::close(int, int, void*)+0x30>
c000dc70:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dc75:	ff d0                	call   eax
c000dc77:	90                   	nop
c000dc78:	83 ec 0c             	sub    esp,0xc
c000dc7b:	68 b4 e2 01 c0       	push   0xc001e2b4
c000dc80:	e8 46 25 00 00       	call   c00101cb <KePanic(char const*)>
c000dc85:	83 c4 10             	add    esp,0x10
c000dc88:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc8d:	eb 6d                	jmp    c000dcfc <ACPI::close(int, int, void*)+0xb4>
c000dc8f:	90                   	nop
c000dc90:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dc95:	75 5d                	jne    c000dcf4 <ACPI::close(int, int, void*)+0xac>
c000dc97:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dc9c:	85 c0                	test   eax,eax
c000dc9e:	74 08                	je     c000dca8 <ACPI::close(int, int, void*)+0x60>
c000dca0:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dca5:	ff d0                	call   eax
c000dca7:	90                   	nop
c000dca8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dcad:	8d 76 00             	lea    esi,[esi+0x0]
c000dcb0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dcb4:	25 ff 00 00 00       	and    eax,0xff
c000dcb9:	83 e0 02             	and    eax,0x2
c000dcbc:	74 1e                	je     c000dcdc <ACPI::close(int, int, void*)+0x94>
c000dcbe:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dcc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcc9:	89 c2                	mov    edx,eax
c000dccb:	ec                   	in     al,dx
c000dccc:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dcd0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dcd4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dcd8:	eb d6                	jmp    c000dcb0 <ACPI::close(int, int, void*)+0x68>
c000dcda:	66 90                	xchg   ax,ax
c000dcdc:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dce3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dce8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dcec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcf0:	ee                   	out    dx,al
c000dcf1:	8d 76 00             	lea    esi,[esi+0x0]
c000dcf4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dcf9:	8d 76 00             	lea    esi,[esi+0x0]
c000dcfc:	83 c4 1c             	add    esp,0x1c
c000dcff:	c3                   	ret    

c000dd00 <findRSDP()>:
c000dd00:	83 ec 1c             	sub    esp,0x1c
c000dd03:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dd08:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dd0e:	83 e0 04             	and    eax,0x4
c000dd11:	84 c0                	test   al,al
c000dd13:	75 07                	jne    c000dd1c <findRSDP()+0x1c>
c000dd15:	b8 00 00 00 00       	mov    eax,0x0
c000dd1a:	eb 70                	jmp    c000dd8c <findRSDP()+0x8c>
c000dd1c:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c000dd21:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dd26:	7f 1c                	jg     c000dd44 <findRSDP()+0x44>
c000dd28:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dd2d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dd33:	83 e2 fb             	and    edx,0xfffffffb
c000dd36:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dd3c:	b8 00 00 00 00       	mov    eax,0x0
c000dd41:	eb 49                	jmp    c000dd8c <findRSDP()+0x8c>
c000dd43:	90                   	nop
c000dd44:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dd4c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dd54:	77 2e                	ja     c000dd84 <findRSDP()+0x84>
c000dd56:	83 ec 04             	sub    esp,0x4
c000dd59:	6a 08                	push   0x8
c000dd5b:	68 4f e3 01 c0       	push   0xc001e34f
c000dd60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd64:	e8 27 26 ff ff       	call   c0000390 <memcmp>
c000dd69:	83 c4 10             	add    esp,0x10
c000dd6c:	85 c0                	test   eax,eax
c000dd6e:	0f 94 c0             	sete   al
c000dd71:	84 c0                	test   al,al
c000dd73:	74 07                	je     c000dd7c <findRSDP()+0x7c>
c000dd75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd79:	eb 11                	jmp    c000dd8c <findRSDP()+0x8c>
c000dd7b:	90                   	nop
c000dd7c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dd81:	eb c9                	jmp    c000dd4c <findRSDP()+0x4c>
c000dd83:	90                   	nop
c000dd84:	b8 00 00 00 00       	mov    eax,0x0
c000dd89:	8d 76 00             	lea    esi,[esi+0x0]
c000dd8c:	83 c4 1c             	add    esp,0x1c
c000dd8f:	c3                   	ret    

c000dd90 <loadACPITables(unsigned char*)>:
c000dd90:	57                   	push   edi
c000dd91:	56                   	push   esi
c000dd92:	53                   	push   ebx
c000dd93:	83 ec 60             	sub    esp,0x60
c000dd96:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dd9b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dda1:	83 e0 04             	and    eax,0x4
c000dda4:	84 c0                	test   al,al
c000dda6:	0f 84 3c 02 00 00    	je     c000dfe8 <loadACPITables(unsigned char*)+0x258>
c000ddac:	a0 c0 46 02 c0       	mov    al,ds:0xc00246c0
c000ddb1:	84 c0                	test   al,al
c000ddb3:	74 77                	je     c000de2c <loadACPITables(unsigned char*)+0x9c>
c000ddb5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddb9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ddbd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ddc1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddc4:	83 e8 24             	sub    eax,0x24
c000ddc7:	c1 e8 03             	shr    eax,0x3
c000ddca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ddce:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ddd6:	66 90                	xchg   ax,ax
c000ddd8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dddc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dde0:	0f 8d b6 00 00 00    	jge    c000de9c <loadACPITables(unsigned char*)+0x10c>
c000dde6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddea:	83 c0 24             	add    eax,0x24
c000dded:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ddf1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ddf5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ddf9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ddfd:	c1 e0 03             	shl    eax,0x3
c000de00:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000de04:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000de08:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000de0b:	8b 00                	mov    eax,DWORD PTR [eax]
c000de0d:	89 c1                	mov    ecx,eax
c000de0f:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000de14:	8d 50 01             	lea    edx,[eax+0x1]
c000de17:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000de1d:	89 ca                	mov    edx,ecx
c000de1f:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000de26:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000de2a:	eb ac                	jmp    c000ddd8 <loadACPITables(unsigned char*)+0x48>
c000de2c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de30:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000de34:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de3b:	83 e8 24             	sub    eax,0x24
c000de3e:	c1 e8 02             	shr    eax,0x2
c000de41:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000de45:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000de4d:	8d 76 00             	lea    esi,[esi+0x0]
c000de50:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de54:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000de58:	7d 42                	jge    c000de9c <loadACPITables(unsigned char*)+0x10c>
c000de5a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de5e:	83 c0 24             	add    eax,0x24
c000de61:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000de65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000de69:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000de6d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de71:	c1 e0 02             	shl    eax,0x2
c000de74:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000de78:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de7c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de7e:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000de83:	8d 50 01             	lea    edx,[eax+0x1]
c000de86:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000de8c:	89 ca                	mov    edx,ecx
c000de8e:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000de95:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000de99:	eb b5                	jmp    c000de50 <loadACPITables(unsigned char*)+0xc0>
c000de9b:	90                   	nop
c000de9c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000dea4:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000dea9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000dead:	0f 8d 39 01 00 00    	jge    c000dfec <loadACPITables(unsigned char*)+0x25c>
c000deb3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000deb7:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000debe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dec2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dec6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000deca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dece:	25 ff 0f 00 00       	and    eax,0xfff
c000ded3:	89 c6                	mov    esi,eax
c000ded5:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000dedb:	83 ec 0c             	sub    esp,0xc
c000dede:	6a 01                	push   0x1
c000dee0:	e8 a8 b3 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c000dee5:	83 c4 10             	add    esp,0x10
c000dee8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000deec:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000def2:	83 ec 0c             	sub    esp,0xc
c000def5:	6a 01                	push   0x1
c000def7:	6a 01                	push   0x1
c000def9:	50                   	push   eax
c000defa:	52                   	push   edx
c000defb:	53                   	push   ebx
c000defc:	e8 49 bd ff ff       	call   c0009c4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df01:	83 c4 20             	add    esp,0x20
c000df04:	09 f0                	or     eax,esi
c000df06:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df0a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df0e:	c1 e0 03             	shl    eax,0x3
c000df11:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000df16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df1e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df22:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000df2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000df2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000df36:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000df3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000df3e:	89 c6                	mov    esi,eax
c000df40:	89 d7                	mov    edi,edx
c000df42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000df44:	89 c8                	mov    eax,ecx
c000df46:	89 fa                	mov    edx,edi
c000df48:	89 f3                	mov    ebx,esi
c000df4a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000df4e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000df52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000df56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000df65:	05 00 10 00 00       	add    eax,0x1000
c000df6a:	c1 e8 0c             	shr    eax,0xc
c000df6d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000df71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df75:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df7d:	25 ff 0f 00 00       	and    eax,0xfff
c000df82:	89 c6                	mov    esi,eax
c000df84:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000df8a:	83 ec 0c             	sub    esp,0xc
c000df8d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000df91:	e8 f7 b2 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c000df96:	83 c4 10             	add    esp,0x10
c000df99:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df9d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000dfa3:	83 ec 0c             	sub    esp,0xc
c000dfa6:	6a 01                	push   0x1
c000dfa8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dfac:	50                   	push   eax
c000dfad:	52                   	push   edx
c000dfae:	53                   	push   ebx
c000dfaf:	e8 96 bc ff ff       	call   c0009c4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dfb4:	83 c4 20             	add    esp,0x20
c000dfb7:	09 f0                	or     eax,esi
c000dfb9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dfc1:	83 ec 0c             	sub    esp,0xc
c000dfc4:	50                   	push   eax
c000dfc5:	e8 b7 b5 ff ff       	call   c0009581 <Virt::freeKernelVirtualPages(unsigned long)>
c000dfca:	83 c4 10             	add    esp,0x10
c000dfcd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dfd1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000dfd5:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000dfdc:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000dfe0:	e9 bf fe ff ff       	jmp    c000dea4 <loadACPITables(unsigned char*)+0x114>
c000dfe5:	8d 76 00             	lea    esi,[esi+0x0]
c000dfe8:	90                   	nop
c000dfe9:	8d 76 00             	lea    esi,[esi+0x0]
c000dfec:	83 c4 60             	add    esp,0x60
c000dfef:	5b                   	pop    ebx
c000dff0:	5e                   	pop    esi
c000dff1:	5f                   	pop    edi
c000dff2:	c3                   	ret    
c000dff3:	90                   	nop

c000dff4 <findRSDT(unsigned char*)>:
c000dff4:	57                   	push   edi
c000dff5:	56                   	push   esi
c000dff6:	53                   	push   ebx
c000dff7:	83 ec 50             	sub    esp,0x50
c000dffa:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000dfff:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e005:	83 e0 04             	and    eax,0x4
c000e008:	84 c0                	test   al,al
c000e00a:	75 0c                	jne    c000e018 <findRSDT(unsigned char*)+0x24>
c000e00c:	b8 00 00 00 00       	mov    eax,0x0
c000e011:	e9 26 01 00 00       	jmp    c000e13c <findRSDT(unsigned char*)+0x148>
c000e016:	66 90                	xchg   ax,ax
c000e018:	89 e0                	mov    eax,esp
c000e01a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e01e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e022:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e026:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e02e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e032:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e036:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e03a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e03e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e042:	89 c6                	mov    esi,eax
c000e044:	89 d7                	mov    edi,edx
c000e046:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e048:	89 c8                	mov    eax,ecx
c000e04a:	89 fa                	mov    edx,edi
c000e04c:	89 f3                	mov    ebx,esi
c000e04e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e052:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e056:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e05a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e05e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e062:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e06a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e06e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e072:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e07a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e07e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e082:	25 ff 0f 00 00       	and    eax,0xfff
c000e087:	89 c6                	mov    esi,eax
c000e089:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e08f:	83 ec 0c             	sub    esp,0xc
c000e092:	6a 02                	push   0x2
c000e094:	e8 f4 b1 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c000e099:	83 c4 10             	add    esp,0x10
c000e09c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e0a0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	6a 01                	push   0x1
c000e0ab:	6a 02                	push   0x2
c000e0ad:	50                   	push   eax
c000e0ae:	52                   	push   edx
c000e0af:	53                   	push   ebx
c000e0b0:	e8 95 bb ff ff       	call   c0009c4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e0b5:	83 c4 20             	add    esp,0x20
c000e0b8:	09 f0                	or     eax,esi
c000e0ba:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e0be:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e0c2:	25 ff 0f 00 00       	and    eax,0xfff
c000e0c7:	89 c6                	mov    esi,eax
c000e0c9:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e0cf:	83 ec 0c             	sub    esp,0xc
c000e0d2:	6a 02                	push   0x2
c000e0d4:	e8 b4 b1 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c000e0d9:	83 c4 10             	add    esp,0x10
c000e0dc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e0e0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0e6:	83 ec 0c             	sub    esp,0xc
c000e0e9:	6a 01                	push   0x1
c000e0eb:	6a 02                	push   0x2
c000e0ed:	50                   	push   eax
c000e0ee:	52                   	push   edx
c000e0ef:	53                   	push   ebx
c000e0f0:	e8 55 bb ff ff       	call   c0009c4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e0f5:	83 c4 20             	add    esp,0x20
c000e0f8:	09 f0                	or     eax,esi
c000e0fa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e0fe:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e103:	75 13                	jne    c000e118 <findRSDT(unsigned char*)+0x124>
c000e105:	c6 05 c0 46 02 c0 00 	mov    BYTE PTR ds:0xc00246c0,0x0
c000e10c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e110:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e114:	eb 22                	jmp    c000e138 <findRSDT(unsigned char*)+0x144>
c000e116:	66 90                	xchg   ax,ax
c000e118:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e11d:	75 11                	jne    c000e130 <findRSDT(unsigned char*)+0x13c>
c000e11f:	c6 05 c0 46 02 c0 01 	mov    BYTE PTR ds:0xc00246c0,0x1
c000e126:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e12a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e12e:	eb 08                	jmp    c000e138 <findRSDT(unsigned char*)+0x144>
c000e130:	b8 00 00 00 00       	mov    eax,0x0
c000e135:	eb 05                	jmp    c000e13c <findRSDT(unsigned char*)+0x148>
c000e137:	90                   	nop
c000e138:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e13c:	83 c4 50             	add    esp,0x50
c000e13f:	5b                   	pop    ebx
c000e140:	5e                   	pop    esi
c000e141:	5f                   	pop    edi
c000e142:	c3                   	ret    
c000e143:	90                   	nop

c000e144 <findDataTable(unsigned char*, char*)>:
c000e144:	83 ec 1c             	sub    esp,0x1c
c000e147:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e14c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e152:	83 e0 04             	and    eax,0x4
c000e155:	84 c0                	test   al,al
c000e157:	75 07                	jne    c000e160 <findDataTable(unsigned char*, char*)+0x1c>
c000e159:	b8 00 00 00 00       	mov    eax,0x0
c000e15e:	eb 58                	jmp    c000e1b8 <findDataTable(unsigned char*, char*)+0x74>
c000e160:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e168:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000e16d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e171:	7d 3d                	jge    c000e1b0 <findDataTable(unsigned char*, char*)+0x6c>
c000e173:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e177:	c1 e0 03             	shl    eax,0x3
c000e17a:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000e17f:	83 ec 04             	sub    esp,0x4
c000e182:	6a 04                	push   0x4
c000e184:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e188:	50                   	push   eax
c000e189:	e8 02 22 ff ff       	call   c0000390 <memcmp>
c000e18e:	83 c4 10             	add    esp,0x10
c000e191:	85 c0                	test   eax,eax
c000e193:	0f 94 c0             	sete   al
c000e196:	84 c0                	test   al,al
c000e198:	74 0e                	je     c000e1a8 <findDataTable(unsigned char*, char*)+0x64>
c000e19a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e19e:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000e1a5:	eb 11                	jmp    c000e1b8 <findDataTable(unsigned char*, char*)+0x74>
c000e1a7:	90                   	nop
c000e1a8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e1ac:	eb ba                	jmp    c000e168 <findDataTable(unsigned char*, char*)+0x24>
c000e1ae:	66 90                	xchg   ax,ax
c000e1b0:	b8 00 00 00 00       	mov    eax,0x0
c000e1b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1b8:	83 c4 1c             	add    esp,0x1c
c000e1bb:	c3                   	ret    

c000e1bc <scanMADT()>:
c000e1bc:	53                   	push   ebx
c000e1bd:	83 ec 38             	sub    esp,0x38
c000e1c0:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000e1c5:	25 00 04 00 00       	and    eax,0x400
c000e1ca:	74 14                	je     c000e1e0 <scanMADT()+0x24>
c000e1cc:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e1d1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1d7:	83 e2 fb             	and    edx,0xfffffffb
c000e1da:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1e0:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e1e5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e1eb:	83 e0 04             	and    eax,0x4
c000e1ee:	84 c0                	test   al,al
c000e1f0:	0f 84 8a 04 00 00    	je     c000e680 <scanMADT()+0x4c4>
c000e1f6:	e8 05 fb ff ff       	call   c000dd00 <findRSDP()>
c000e1fb:	a3 cc 46 02 c0       	mov    ds:0xc00246cc,eax
c000e200:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e205:	85 c0                	test   eax,eax
c000e207:	75 1b                	jne    c000e224 <scanMADT()+0x68>
c000e209:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e20e:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e214:	83 e2 fb             	and    edx,0xfffffffb
c000e217:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e21d:	e9 66 04 00 00       	jmp    c000e688 <scanMADT()+0x4cc>
c000e222:	66 90                	xchg   ax,ax
c000e224:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e229:	83 ec 0c             	sub    esp,0xc
c000e22c:	50                   	push   eax
c000e22d:	e8 c2 fd ff ff       	call   c000dff4 <findRSDT(unsigned char*)>
c000e232:	83 c4 10             	add    esp,0x10
c000e235:	a3 c8 46 02 c0       	mov    ds:0xc00246c8,eax
c000e23a:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e23f:	85 c0                	test   eax,eax
c000e241:	75 19                	jne    c000e25c <scanMADT()+0xa0>
c000e243:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e248:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e24e:	83 e2 fb             	and    edx,0xfffffffb
c000e251:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e257:	e9 2c 04 00 00       	jmp    c000e688 <scanMADT()+0x4cc>
c000e25c:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e261:	83 ec 0c             	sub    esp,0xc
c000e264:	50                   	push   eax
c000e265:	e8 26 fb ff ff       	call   c000dd90 <loadACPITables(unsigned char*)>
c000e26a:	83 c4 10             	add    esp,0x10
c000e26d:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e272:	83 ec 08             	sub    esp,0x8
c000e275:	68 58 e3 01 c0       	push   0xc001e358
c000e27a:	50                   	push   eax
c000e27b:	e8 c4 fe ff ff       	call   c000e144 <findDataTable(unsigned char*, char*)>
c000e280:	83 c4 10             	add    esp,0x10
c000e283:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e287:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e28c:	75 1a                	jne    c000e2a8 <scanMADT()+0xec>
c000e28e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e293:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e299:	83 e2 fe             	and    edx,0xfffffffe
c000e29c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2a2:	e9 e1 03 00 00       	jmp    c000e688 <scanMADT()+0x4cc>
c000e2a7:	90                   	nop
c000e2a8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e2b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e2b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e2b7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e2bb:	0f 87 c7 03 00 00    	ja     c000e688 <scanMADT()+0x4cc>
c000e2c1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e2c9:	0f 87 b9 03 00 00    	ja     c000e688 <scanMADT()+0x4cc>
c000e2cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2d3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e2d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2db:	8d 50 01             	lea    edx,[eax+0x1]
c000e2de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e2e6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e2ea:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e2ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2f2:	8d 50 01             	lea    edx,[eax+0x1]
c000e2f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e2fd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e301:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e305:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e30a:	0f 86 74 03 00 00    	jbe    c000e684 <scanMADT()+0x4c8>
c000e310:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e315:	75 5d                	jne    c000e374 <scanMADT()+0x1b8>
c000e317:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e31b:	8d 50 01             	lea    edx,[eax+0x1]
c000e31e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e322:	8a 15 c0 48 02 c0    	mov    dl,BYTE PTR ds:0xc00248c0
c000e328:	81 e2 ff 00 00 00    	and    edx,0xff
c000e32e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e332:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e336:	88 82 00 49 02 c0    	mov    BYTE PTR [edx-0x3ffdb700],al
c000e33c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e340:	8d 42 01             	lea    eax,[edx+0x1]
c000e343:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e347:	a0 c0 48 02 c0       	mov    al,ds:0xc00248c0
c000e34c:	8d 48 01             	lea    ecx,[eax+0x1]
c000e34f:	88 0d c0 48 02 c0    	mov    BYTE PTR ds:0xc00248c0,cl
c000e355:	25 ff 00 00 00       	and    eax,0xff
c000e35a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e35e:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e362:	88 90 e0 48 02 c0    	mov    BYTE PTR [eax-0x3ffdb720],dl
c000e368:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e36d:	e9 f6 02 00 00       	jmp    c000e668 <scanMADT()+0x4ac>
c000e372:	66 90                	xchg   ax,ax
c000e374:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e379:	0f 85 29 01 00 00    	jne    c000e4a8 <scanMADT()+0x2ec>
c000e37f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e383:	8d 50 01             	lea    edx,[eax+0x1]
c000e386:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e38a:	8a 15 80 47 02 c0    	mov    dl,BYTE PTR ds:0xc0024780
c000e390:	81 e2 ff 00 00 00    	and    edx,0xff
c000e396:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e39a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e39e:	88 82 a0 47 02 c0    	mov    BYTE PTR [edx-0x3ffdb860],al
c000e3a4:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e3a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3b0:	01 d0                	add    eax,edx
c000e3b2:	83 c0 2c             	add    eax,0x2c
c000e3b5:	8a 00                	mov    al,BYTE PTR [eax]
c000e3b7:	31 d2                	xor    edx,edx
c000e3b9:	88 c2                	mov    dl,al
c000e3bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3bf:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3c6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e3ca:	25 ff 00 00 00       	and    eax,0xff
c000e3cf:	c1 e0 08             	shl    eax,0x8
c000e3d2:	89 d1                	mov    ecx,edx
c000e3d4:	09 c1                	or     ecx,eax
c000e3d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3da:	8d 50 02             	lea    edx,[eax+0x2]
c000e3dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3e1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3e5:	25 ff 00 00 00       	and    eax,0xff
c000e3ea:	c1 e0 10             	shl    eax,0x10
c000e3ed:	09 c1                	or     ecx,eax
c000e3ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3f3:	8d 50 03             	lea    edx,[eax+0x3]
c000e3f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3fa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3fe:	25 ff 00 00 00       	and    eax,0xff
c000e403:	c1 e0 18             	shl    eax,0x18
c000e406:	09 c1                	or     ecx,eax
c000e408:	89 ca                	mov    edx,ecx
c000e40a:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e40f:	25 ff 00 00 00       	and    eax,0xff
c000e414:	89 14 85 c0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb840],edx
c000e41b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e420:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e424:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e428:	01 d0                	add    eax,edx
c000e42a:	83 c0 2c             	add    eax,0x2c
c000e42d:	8a 00                	mov    al,BYTE PTR [eax]
c000e42f:	31 d2                	xor    edx,edx
c000e431:	88 c2                	mov    dl,al
c000e433:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e437:	8d 48 01             	lea    ecx,[eax+0x1]
c000e43a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e43e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e442:	25 ff 00 00 00       	and    eax,0xff
c000e447:	c1 e0 08             	shl    eax,0x8
c000e44a:	89 d1                	mov    ecx,edx
c000e44c:	09 c1                	or     ecx,eax
c000e44e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e452:	8d 50 02             	lea    edx,[eax+0x2]
c000e455:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e459:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e45d:	25 ff 00 00 00       	and    eax,0xff
c000e462:	c1 e0 10             	shl    eax,0x10
c000e465:	09 c1                	or     ecx,eax
c000e467:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e46b:	8d 50 03             	lea    edx,[eax+0x3]
c000e46e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e472:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e476:	25 ff 00 00 00       	and    eax,0xff
c000e47b:	c1 e0 18             	shl    eax,0x18
c000e47e:	09 c1                	or     ecx,eax
c000e480:	89 ca                	mov    edx,ecx
c000e482:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e487:	25 ff 00 00 00       	and    eax,0xff
c000e48c:	89 14 85 40 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7c0],edx
c000e493:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e498:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e49d:	40                   	inc    eax
c000e49e:	a2 80 47 02 c0       	mov    ds:0xc0024780,al
c000e4a3:	e9 c0 01 00 00       	jmp    c000e668 <scanMADT()+0x4ac>
c000e4a8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e4ad:	0f 85 fd 00 00 00    	jne    c000e5b0 <scanMADT()+0x3f4>
c000e4b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e4ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4c2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4c6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e4ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4ce:	8d 50 01             	lea    edx,[eax+0x1]
c000e4d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4d9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4dd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e4e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4e9:	01 d0                	add    eax,edx
c000e4eb:	83 c0 2c             	add    eax,0x2c
c000e4ee:	8a 00                	mov    al,BYTE PTR [eax]
c000e4f0:	31 d2                	xor    edx,edx
c000e4f2:	88 c2                	mov    dl,al
c000e4f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4f8:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4ff:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e503:	25 ff 00 00 00       	and    eax,0xff
c000e508:	c1 e0 08             	shl    eax,0x8
c000e50b:	89 d1                	mov    ecx,edx
c000e50d:	09 c1                	or     ecx,eax
c000e50f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e513:	8d 50 02             	lea    edx,[eax+0x2]
c000e516:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e51a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e51e:	25 ff 00 00 00       	and    eax,0xff
c000e523:	c1 e0 10             	shl    eax,0x10
c000e526:	09 c1                	or     ecx,eax
c000e528:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e52c:	8d 50 03             	lea    edx,[eax+0x3]
c000e52f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e533:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e537:	25 ff 00 00 00       	and    eax,0xff
c000e53c:	c1 e0 18             	shl    eax,0x18
c000e53f:	09 c8                	or     eax,ecx
c000e541:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e545:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e54a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e54e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e552:	01 d0                	add    eax,edx
c000e554:	83 c0 2c             	add    eax,0x2c
c000e557:	8a 00                	mov    al,BYTE PTR [eax]
c000e559:	25 ff 00 00 00       	and    eax,0xff
c000e55e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e562:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e565:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e569:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e56d:	81 e2 ff 00 00 00    	and    edx,0xff
c000e573:	c1 e2 08             	shl    edx,0x8
c000e576:	09 d0                	or     eax,edx
c000e578:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e57d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e582:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e586:	25 ff 00 00 00       	and    eax,0xff
c000e58b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e58f:	88 90 c0 f7 01 c0    	mov    BYTE PTR [eax-0x3ffe0840],dl
c000e595:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e599:	31 d2                	xor    edx,edx
c000e59b:	88 c2                	mov    dl,al
c000e59d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e5a2:	66 89 84 12 60 47 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdb8a0],ax
c000e5aa:	e9 b9 00 00 00       	jmp    c000e668 <scanMADT()+0x4ac>
c000e5af:	90                   	nop
c000e5b0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e5b5:	0f 85 a1 00 00 00    	jne    c000e65c <scanMADT()+0x4a0>
c000e5bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5bf:	8d 50 01             	lea    edx,[eax+0x1]
c000e5c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5ca:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5ce:	25 ff 00 00 00       	and    eax,0xff
c000e5d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e5d7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5df:	01 d0                	add    eax,edx
c000e5e1:	83 c0 2c             	add    eax,0x2c
c000e5e4:	8a 00                	mov    al,BYTE PTR [eax]
c000e5e6:	31 d2                	xor    edx,edx
c000e5e8:	88 c2                	mov    dl,al
c000e5ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5ee:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5f5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e5f9:	25 ff 00 00 00       	and    eax,0xff
c000e5fe:	c1 e0 08             	shl    eax,0x8
c000e601:	09 d0                	or     eax,edx
c000e603:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e607:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e60c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e610:	8d 50 01             	lea    edx,[eax+0x1]
c000e613:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e617:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e61b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e61f:	25 ff 00 00 00       	and    eax,0xff
c000e624:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62c:	c1 e0 08             	shl    eax,0x8
c000e62f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e633:	89 c1                	mov    ecx,eax
c000e635:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e639:	c1 e0 18             	shl    eax,0x18
c000e63c:	89 c3                	mov    ebx,eax
c000e63e:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c000e643:	8d 50 01             	lea    edx,[eax+0x1]
c000e646:	89 15 d0 46 02 c0    	mov    DWORD PTR ds:0xc00246d0,edx
c000e64c:	09 d9                	or     ecx,ebx
c000e64e:	89 ca                	mov    edx,ecx
c000e650:	89 14 85 e0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb920],edx
c000e657:	eb 0f                	jmp    c000e668 <scanMADT()+0x4ac>
c000e659:	8d 76 00             	lea    esi,[esi+0x0]
c000e65c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e661:	75 05                	jne    c000e668 <scanMADT()+0x4ac>
c000e663:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e668:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e66c:	31 d2                	xor    edx,edx
c000e66e:	88 c2                	mov    dl,al
c000e670:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e674:	01 d0                	add    eax,edx
c000e676:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e67a:	e9 31 fc ff ff       	jmp    c000e2b0 <scanMADT()+0xf4>
c000e67f:	90                   	nop
c000e680:	90                   	nop
c000e681:	eb 05                	jmp    c000e688 <scanMADT()+0x4cc>
c000e683:	90                   	nop
c000e684:	90                   	nop
c000e685:	8d 76 00             	lea    esi,[esi+0x0]
c000e688:	83 c4 38             	add    esp,0x38
c000e68b:	5b                   	pop    ebx
c000e68c:	c3                   	ret    
c000e68d:	90                   	nop
c000e68e:	66 90                	xchg   ax,ax

c000e690 <ACPI::ACPI()>:
c000e690:	83 ec 0c             	sub    esp,0xc
c000e693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e697:	83 ec 08             	sub    esp,0x8
c000e69a:	68 5d e3 01 c0       	push   0xc001e35d
c000e69f:	50                   	push   eax
c000e6a0:	e8 7b d4 ff ff       	call   c000bb20 <Device::Device(char const*)>
c000e6a5:	83 c4 10             	add    esp,0x10
c000e6a8:	ba 94 e4 01 c0       	mov    edx,0xc001e494
c000e6ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6b1:	89 10                	mov    DWORD PTR [eax],edx
c000e6b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6b7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6c2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6d0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e6da:	e8 dd fa ff ff       	call   c000e1bc <scanMADT()>
c000e6df:	90                   	nop
c000e6e0:	83 c4 0c             	add    esp,0xc
c000e6e3:	c3                   	ret    

c000e6e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e6e4:	83 ec 2c             	sub    esp,0x2c
c000e6e7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e6eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6ef:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e6f3:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e6f7:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e6fc:	88 d0                	mov    al,dl
c000e6fe:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e702:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e707:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e70f:	90                   	nop
c000e710:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e714:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e71a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e71e:	0f 8d 9c 00 00 00    	jge    c000e7c0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e724:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e728:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e72c:	83 c2 2a             	add    edx,0x2a
c000e72f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e733:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e738:	75 7a                	jne    c000e7b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e73a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e73e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e742:	83 c2 2a             	add    edx,0x2a
c000e745:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e749:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e74d:	75 65                	jne    c000e7b4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e74f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e754:	74 3a                	je     c000e790 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e756:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e75a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e75e:	83 c2 2a             	add    edx,0x2a
c000e761:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e765:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e769:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e76c:	39 c2                	cmp    edx,eax
c000e76e:	74 10                	je     c000e780 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e770:	83 ec 0c             	sub    esp,0xc
c000e773:	68 d8 e2 01 c0       	push   0xc001e2d8
c000e778:	e8 4e 1a 00 00       	call   c00101cb <KePanic(char const*)>
c000e77d:	83 c4 10             	add    esp,0x10
c000e780:	83 ec 0c             	sub    esp,0xc
c000e783:	68 62 e3 01 c0       	push   0xc001e362
c000e788:	e8 3e 1a 00 00       	call   c00101cb <KePanic(char const*)>
c000e78d:	83 c4 10             	add    esp,0x10
c000e790:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e794:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e798:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e79c:	83 c2 2a             	add    edx,0x2a
c000e79f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e7a3:	8b 02                	mov    eax,DWORD PTR [edx]
c000e7a5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e7a8:	89 01                	mov    DWORD PTR [ecx],eax
c000e7aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e7ad:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e7b2:	66 90                	xchg   ax,ax
c000e7b4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e7b8:	e9 53 ff ff ff       	jmp    c000e710 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e7bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e7c0:	90                   	nop
c000e7c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7c5:	83 c4 2c             	add    esp,0x2c
c000e7c8:	c2 04 00             	ret    0x4
c000e7cb:	90                   	nop

c000e7cc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e7cc:	83 ec 1c             	sub    esp,0x1c
c000e7cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e7d3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e7d7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e7db:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e7e0:	88 c8                	mov    al,cl
c000e7e2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e7e6:	88 d0                	mov    al,dl
c000e7e8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e7ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7f0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7fa:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e7fd:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e801:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e805:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e809:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e80f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e813:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e81a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e81f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e823:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e829:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e82d:	8d 48 01             	lea    ecx,[eax+0x1]
c000e830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e834:	83 c2 2a             	add    edx,0x2a
c000e837:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e83b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e83f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e845:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e849:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e84c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e850:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e854:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e858:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e85e:	8d 50 01             	lea    edx,[eax+0x1]
c000e861:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e865:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e86b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e86f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e875:	3d 00 02 00 00       	cmp    eax,0x200
c000e87a:	75 10                	jne    c000e88c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e87c:	83 ec 0c             	sub    esp,0xc
c000e87f:	68 71 e3 01 c0       	push   0xc001e371
c000e884:	e8 42 19 00 00       	call   c00101cb <KePanic(char const*)>
c000e889:	83 c4 10             	add    esp,0x10
c000e88c:	90                   	nop
c000e88d:	83 c4 1c             	add    esp,0x1c
c000e890:	c3                   	ret    
c000e891:	90                   	nop
c000e892:	66 90                	xchg   ax,ax

c000e894 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e894:	b8 00 00 00 00       	mov    eax,0x0
c000e899:	c3                   	ret    
c000e89a:	66 90                	xchg   ax,ax

c000e89c <ACPI::detectPCI()>:
c000e89c:	53                   	push   ebx
c000e89d:	83 ec 28             	sub    esp,0x28
c000e8a0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e8a5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e8aa:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e8af:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e8b5:	83 e0 04             	and    eax,0x4
c000e8b8:	84 c0                	test   al,al
c000e8ba:	74 2c                	je     c000e8e8 <ACPI::detectPCI()+0x4c>
c000e8bc:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e8c1:	83 ec 08             	sub    esp,0x8
c000e8c4:	68 8e e3 01 c0       	push   0xc001e38e
c000e8c9:	50                   	push   eax
c000e8ca:	e8 75 f8 ff ff       	call   c000e144 <findDataTable(unsigned char*, char*)>
c000e8cf:	83 c4 10             	add    esp,0x10
c000e8d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8d6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e8db:	74 0b                	je     c000e8e8 <ACPI::detectPCI()+0x4c>
c000e8dd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8e2:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8e7:	90                   	nop
c000e8e8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e8f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8f4:	8a 00                	mov    al,BYTE PTR [eax]
c000e8f6:	3c 01                	cmp    al,0x1
c000e8f8:	75 0e                	jne    c000e908 <ACPI::detectPCI()+0x6c>
c000e8fa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8ff:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e904:	eb 2a                	jmp    c000e930 <ACPI::detectPCI()+0x94>
c000e906:	66 90                	xchg   ax,ax
c000e908:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e90c:	8a 00                	mov    al,BYTE PTR [eax]
c000e90e:	3c 02                	cmp    al,0x2
c000e910:	75 1e                	jne    c000e930 <ACPI::detectPCI()+0x94>
c000e912:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e917:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e91c:	74 12                	je     c000e930 <ACPI::detectPCI()+0x94>
c000e91e:	83 ec 0c             	sub    esp,0xc
c000e921:	68 08 e3 01 c0       	push   0xc001e308
c000e926:	e8 a0 18 00 00       	call   c00101cb <KePanic(char const*)>
c000e92b:	83 c4 10             	add    esp,0x10
c000e92e:	66 90                	xchg   ax,ax
c000e930:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e934:	83 f0 01             	xor    eax,0x1
c000e937:	84 c0                	test   al,al
c000e939:	74 41                	je     c000e97c <ACPI::detectPCI()+0xe0>
c000e93b:	e8 f0 17 ff ff       	call   c0000130 <manualPCIProbe>
c000e940:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e944:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e949:	75 0d                	jne    c000e958 <ACPI::detectPCI()+0xbc>
c000e94b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e950:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e955:	eb 25                	jmp    c000e97c <ACPI::detectPCI()+0xe0>
c000e957:	90                   	nop
c000e958:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e95d:	75 1d                	jne    c000e97c <ACPI::detectPCI()+0xe0>
c000e95f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e964:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e969:	74 11                	je     c000e97c <ACPI::detectPCI()+0xe0>
c000e96b:	83 ec 0c             	sub    esp,0xc
c000e96e:	68 08 e3 01 c0       	push   0xc001e308
c000e973:	e8 53 18 00 00       	call   c00101cb <KePanic(char const*)>
c000e978:	83 c4 10             	add    esp,0x10
c000e97b:	90                   	nop
c000e97c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e981:	0f 84 85 00 00 00    	je     c000ea0c <ACPI::detectPCI()+0x170>
c000e987:	83 ec 0c             	sub    esp,0xc
c000e98a:	68 93 e3 01 c0       	push   0xc001e393
c000e98f:	e8 bf 11 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c000e994:	83 c4 10             	add    esp,0x10
c000e997:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e99f:	83 ec 0c             	sub    esp,0xc
c000e9a2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9a6:	e8 0e 8e ff ff       	call   c00077b9 <malloc>
c000e9ab:	83 c4 10             	add    esp,0x10
c000e9ae:	89 c3                	mov    ebx,eax
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	53                   	push   ebx
c000e9b4:	e8 8d 9a 00 00       	call   c0018446 <PCI::PCI()>
c000e9b9:	83 c4 10             	add    esp,0x10
c000e9bc:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e9c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9c4:	83 ec 08             	sub    esp,0x8
c000e9c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e9cb:	50                   	push   eax
c000e9cc:	e8 b7 cf ff ff       	call   c000b988 <Device::addChild(Device*)>
c000e9d1:	83 c4 10             	add    esp,0x10
c000e9d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9da:	83 c0 08             	add    eax,0x8
c000e9dd:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9df:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e9e4:	74 0a                	je     c000e9f0 <ACPI::detectPCI()+0x154>
c000e9e6:	ba 01 00 00 00       	mov    edx,0x1
c000e9eb:	eb 0b                	jmp    c000e9f8 <ACPI::detectPCI()+0x15c>
c000e9ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e9f0:	ba 02 00 00 00       	mov    edx,0x2
c000e9f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e9f8:	6a 00                	push   0x0
c000e9fa:	6a 00                	push   0x0
c000e9fc:	52                   	push   edx
c000e9fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ea01:	ff d0                	call   eax
c000ea03:	83 c4 10             	add    esp,0x10
c000ea06:	e9 91 00 00 00       	jmp    c000ea9c <ACPI::detectPCI()+0x200>
c000ea0b:	90                   	nop
c000ea0c:	83 ec 0c             	sub    esp,0xc
c000ea0f:	68 ab e3 01 c0       	push   0xc001e3ab
c000ea14:	e8 3a 11 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c000ea19:	83 c4 10             	add    esp,0x10
c000ea1c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ea23:	83 ec 0c             	sub    esp,0xc
c000ea26:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ea2a:	e8 8a 8d ff ff       	call   c00077b9 <malloc>
c000ea2f:	83 c4 10             	add    esp,0x10
c000ea32:	89 c3                	mov    ebx,eax
c000ea34:	83 ec 0c             	sub    esp,0xc
c000ea37:	53                   	push   ebx
c000ea38:	e8 35 a5 00 00       	call   c0018f72 <IDE::IDE()>
c000ea3d:	83 c4 10             	add    esp,0x10
c000ea40:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ea44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea48:	83 ec 08             	sub    esp,0x8
c000ea4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea4f:	50                   	push   eax
c000ea50:	e8 33 cf ff ff       	call   c000b988 <Device::addChild(Device*)>
c000ea55:	83 c4 10             	add    esp,0x10
c000ea58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea5c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ea66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea6a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ea73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea77:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ea80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea84:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea86:	83 c0 08             	add    eax,0x8
c000ea89:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea8b:	6a 00                	push   0x0
c000ea8d:	6a 00                	push   0x0
c000ea8f:	6a 00                	push   0x0
c000ea91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea95:	ff d0                	call   eax
c000ea97:	83 c4 10             	add    esp,0x10
c000ea9a:	66 90                	xchg   ax,ax
c000ea9c:	90                   	nop
c000ea9d:	83 c4 28             	add    esp,0x28
c000eaa0:	5b                   	pop    ebx
c000eaa1:	c3                   	ret    
c000eaa2:	66 90                	xchg   ax,ax

c000eaa4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000eaa4:	83 ec 1c             	sub    esp,0x1c
c000eaa7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eaab:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eaae:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eab2:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000eab8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eabc:	25 ff 00 00 00       	and    eax,0xff
c000eac1:	83 ec 08             	sub    esp,0x8
c000eac4:	50                   	push   eax
c000eac5:	52                   	push   edx
c000eac6:	e8 db 83 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000eacb:	83 c4 10             	add    esp,0x10
c000eace:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ead2:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000ead8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eadc:	25 ff 00 00 00       	and    eax,0xff
c000eae1:	83 ec 04             	sub    esp,0x4
c000eae4:	6a 01                	push   0x1
c000eae6:	50                   	push   eax
c000eae7:	52                   	push   edx
c000eae8:	e8 cf 84 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000eaed:	83 c4 10             	add    esp,0x10
c000eaf0:	90                   	nop
c000eaf1:	83 c4 1c             	add    esp,0x1c
c000eaf4:	c3                   	ret    
c000eaf5:	90                   	nop
c000eaf6:	66 90                	xchg   ax,ax

c000eaf8 <ACPI::sleep()>:
c000eaf8:	83 ec 0c             	sub    esp,0xc
c000eafb:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000eb00:	85 c0                	test   eax,eax
c000eb02:	74 08                	je     c000eb0c <ACPI::sleep()+0x14>
c000eb04:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000eb09:	ff d0                	call   eax
c000eb0b:	90                   	nop
c000eb0c:	90                   	nop
c000eb0d:	83 c4 0c             	add    esp,0xc
c000eb10:	c3                   	ret    
c000eb11:	90                   	nop
c000eb12:	66 90                	xchg   ax,ax

c000eb14 <ACPI::open(int, int, void*)>:
c000eb14:	57                   	push   edi
c000eb15:	56                   	push   esi
c000eb16:	53                   	push   ebx
c000eb17:	81 ec 70 01 00 00    	sub    esp,0x170
c000eb1d:	83 ec 0c             	sub    esp,0xc
c000eb20:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eb27:	e8 70 fd ff ff       	call   c000e89c <ACPI::detectPCI()>
c000eb2c:	83 c4 10             	add    esp,0x10
c000eb2f:	83 ec 0c             	sub    esp,0xc
c000eb32:	68 30 e3 01 c0       	push   0xc001e330
c000eb37:	e8 17 10 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c000eb3c:	83 c4 10             	add    esp,0x10
c000eb3f:	83 ec 0c             	sub    esp,0xc
c000eb42:	68 c0 e3 01 c0       	push   0xc001e3c0
c000eb47:	e8 b0 37 00 00       	call   c00122fc <Thr::loadKernelSymbolTable(char const*)>
c000eb4c:	83 c4 10             	add    esp,0x10
c000eb4f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eb57:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eb62:	83 ec 0c             	sub    esp,0xc
c000eb65:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eb6c:	e8 48 8c ff ff       	call   c00077b9 <malloc>
c000eb71:	83 c4 10             	add    esp,0x10
c000eb74:	89 c3                	mov    ebx,eax
c000eb76:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000eb7b:	83 ec 04             	sub    esp,0x4
c000eb7e:	50                   	push   eax
c000eb7f:	68 de e3 01 c0       	push   0xc001e3de
c000eb84:	53                   	push   ebx
c000eb85:	e8 36 bf ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eb94:	83 ec 08             	sub    esp,0x8
c000eb97:	6a 01                	push   0x1
c000eb99:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eba0:	e8 db bf ff ff       	call   c000ab80 <File::open(FileOpenMode)>
c000eba5:	83 c4 10             	add    esp,0x10
c000eba8:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ebaf:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ebb7:	75 17                	jne    c000ebd0 <ACPI::open(int, int, void*)+0xbc>
c000ebb9:	83 ec 0c             	sub    esp,0xc
c000ebbc:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ebc3:	e8 16 c0 ff ff       	call   c000abde <File::close()>
c000ebc8:	83 c4 10             	add    esp,0x10
c000ebcb:	eb 0b                	jmp    c000ebd8 <ACPI::open(int, int, void*)+0xc4>
c000ebcd:	8d 76 00             	lea    esi,[esi+0x0]
c000ebd0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ebd8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ebe0:	74 1e                	je     c000ec00 <ACPI::open(int, int, void*)+0xec>
c000ebe2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ebe9:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebeb:	83 c0 08             	add    eax,0x8
c000ebee:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebf0:	83 ec 0c             	sub    esp,0xc
c000ebf3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ebfa:	ff d0                	call   eax
c000ebfc:	83 c4 10             	add    esp,0x10
c000ebff:	90                   	nop
c000ec00:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ec07:	83 f0 01             	xor    eax,0x1
c000ec0a:	84 c0                	test   al,al
c000ec0c:	74 42                	je     c000ec50 <ACPI::open(int, int, void*)+0x13c>
c000ec0e:	83 ec 0c             	sub    esp,0xc
c000ec11:	68 fc e3 01 c0       	push   0xc001e3fc
c000ec16:	e8 38 0f 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c000ec1b:	83 c4 10             	add    esp,0x10
c000ec1e:	83 ec 04             	sub    esp,0x4
c000ec21:	6a 0c                	push   0xc
c000ec23:	68 17 e4 01 c0       	push   0xc001e417
c000ec28:	68 28 e4 01 c0       	push   0xc001e428
c000ec2d:	e8 cc 2c 00 00       	call   c00118fe <Reg::readIntWithDefault(char*, char*, int)>
c000ec32:	83 c4 10             	add    esp,0x10
c000ec35:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ec3c:	83 ec 0c             	sub    esp,0xc
c000ec3f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ec46:	e8 4c a8 ff ff       	call   c0009497 <Virt::setupPageSwapping(int)>
c000ec4b:	83 c4 10             	add    esp,0x10
c000ec4e:	66 90                	xchg   ax,ax
c000ec50:	83 ec 0c             	sub    esp,0xc
c000ec53:	68 97 d4 01 c0       	push   0xc001d497
c000ec58:	e8 f6 0e 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c000ec5d:	83 c4 10             	add    esp,0x10
c000ec60:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ec67:	83 ec 08             	sub    esp,0x8
c000ec6a:	6a 12                	push   0x12
c000ec6c:	50                   	push   eax
c000ec6d:	e8 2e d0 ff ff       	call   c000bca0 <getDevicesOfType(DeviceType)>
c000ec72:	83 c4 0c             	add    esp,0xc
c000ec75:	8d 76 00             	lea    esi,[esi+0x0]
c000ec78:	83 ec 0c             	sub    esp,0xc
c000ec7b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec82:	50                   	push   eax
c000ec83:	e8 54 dc 00 00       	call   c001c8dc <LinkedList<Device>::isEmpty()>
c000ec88:	83 c4 10             	add    esp,0x10
c000ec8b:	83 f0 01             	xor    eax,0x1
c000ec8e:	84 c0                	test   al,al
c000ec90:	0f 84 46 01 00 00    	je     c000eddc <ACPI::open(int, int, void*)+0x2c8>
c000ec96:	83 ec 0c             	sub    esp,0xc
c000ec99:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eca0:	50                   	push   eax
c000eca1:	e8 52 dc 00 00       	call   c001c8f8 <LinkedList<Device>::getFirstElement()>
c000eca6:	83 c4 10             	add    esp,0x10
c000eca9:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ecba:	50                   	push   eax
c000ecbb:	e8 40 dc 00 00       	call   c001c900 <LinkedList<Device>::removeFirst()>
c000ecc0:	83 c4 10             	add    esp,0x10
c000ecc3:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ecca:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ecd1:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ecd8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ecdc:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ece2:	ba 09 00 00 00       	mov    edx,0x9
c000ece7:	fc                   	cld    
c000ece8:	89 c7                	mov    edi,eax
c000ecea:	89 de                	mov    esi,ebx
c000ecec:	89 d1                	mov    ecx,edx
c000ecee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ecf0:	83 ec 08             	sub    esp,0x8
c000ecf3:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ecf7:	50                   	push   eax
c000ecf8:	83 ec 24             	sub    esp,0x24
c000ecfb:	89 e0                	mov    eax,esp
c000ecfd:	89 c3                	mov    ebx,eax
c000ecff:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ed03:	ba 09 00 00 00       	mov    edx,0x9
c000ed08:	89 df                	mov    edi,ebx
c000ed0a:	89 c6                	mov    esi,eax
c000ed0c:	89 d1                	mov    ecx,edx
c000ed0e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ed10:	e8 13 9c 00 00       	call   c0018928 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ed15:	83 c4 30             	add    esp,0x30
c000ed18:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ed1f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ed27:	0f 84 4b ff ff ff    	je     c000ec78 <ACPI::open(int, int, void*)+0x164>
c000ed2d:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ed38:	83 ec 0c             	sub    esp,0xc
c000ed3b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ed42:	e8 72 8a ff ff       	call   c00077b9 <malloc>
c000ed47:	83 c4 10             	add    esp,0x10
c000ed4a:	89 c3                	mov    ebx,eax
c000ed4c:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ed51:	83 ec 04             	sub    esp,0x4
c000ed54:	50                   	push   eax
c000ed55:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed5c:	53                   	push   ebx
c000ed5d:	e8 5e bd ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c000ed62:	83 c4 10             	add    esp,0x10
c000ed65:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ed6c:	83 ec 0c             	sub    esp,0xc
c000ed6f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed76:	e8 73 c0 ff ff       	call   c000adee <File::exists()>
c000ed7b:	83 c4 10             	add    esp,0x10
c000ed7e:	84 c0                	test   al,al
c000ed80:	74 2a                	je     c000edac <ACPI::open(int, int, void*)+0x298>
c000ed82:	83 ec 08             	sub    esp,0x8
c000ed85:	6a 01                	push   0x1
c000ed87:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed8e:	e8 e0 3f 00 00       	call   c0012d73 <Thr::loadDLL(char const*, bool)>
c000ed93:	83 c4 10             	add    esp,0x10
c000ed96:	83 ec 08             	sub    esp,0x8
c000ed99:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000eda0:	50                   	push   eax
c000eda1:	e8 fe 41 00 00       	call   c0012fa4 <Thr::executeDLL(unsigned long, void*)>
c000eda6:	83 c4 10             	add    esp,0x10
c000eda9:	8d 76 00             	lea    esi,[esi+0x0]
c000edac:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000edb4:	0f 84 be fe ff ff    	je     c000ec78 <ACPI::open(int, int, void*)+0x164>
c000edba:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000edc1:	8b 00                	mov    eax,DWORD PTR [eax]
c000edc3:	83 c0 08             	add    eax,0x8
c000edc6:	8b 00                	mov    eax,DWORD PTR [eax]
c000edc8:	83 ec 0c             	sub    esp,0xc
c000edcb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000edd2:	ff d0                	call   eax
c000edd4:	83 c4 10             	add    esp,0x10
c000edd7:	e9 9c fe ff ff       	jmp    c000ec78 <ACPI::open(int, int, void*)+0x164>
c000eddc:	83 ec 0c             	sub    esp,0xc
c000eddf:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ede6:	50                   	push   eax
c000ede7:	e8 ec da 00 00       	call   c001c8d8 <LinkedList<Device>::~LinkedList()>
c000edec:	83 c4 10             	add    esp,0x10
c000edef:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000edf5:	83 ec 08             	sub    esp,0x8
c000edf8:	6a 01                	push   0x1
c000edfa:	68 2f e4 01 c0       	push   0xc001e42f
c000edff:	e8 6f 3f 00 00       	call   c0012d73 <Thr::loadDLL(char const*, bool)>
c000ee04:	83 c4 10             	add    esp,0x10
c000ee07:	83 ec 08             	sub    esp,0x8
c000ee0a:	53                   	push   ebx
c000ee0b:	50                   	push   eax
c000ee0c:	e8 93 41 00 00       	call   c0012fa4 <Thr::executeDLL(unsigned long, void*)>
c000ee11:	83 c4 10             	add    esp,0x10
c000ee14:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000ee19:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ee1f:	83 e0 04             	and    eax,0x4
c000ee22:	84 c0                	test   al,al
c000ee24:	0f 84 16 01 00 00    	je     c000ef40 <ACPI::open(int, int, void*)+0x42c>
c000ee2a:	83 ec 0c             	sub    esp,0xc
c000ee2d:	68 4c e4 01 c0       	push   0xc001e44c
c000ee32:	e8 1c 0d 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c000ee37:	83 c4 10             	add    esp,0x10
c000ee3a:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ee45:	83 ec 0c             	sub    esp,0xc
c000ee48:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ee4f:	e8 65 89 ff ff       	call   c00077b9 <malloc>
c000ee54:	83 c4 10             	add    esp,0x10
c000ee57:	89 c3                	mov    ebx,eax
c000ee59:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ee5e:	83 ec 04             	sub    esp,0x4
c000ee61:	50                   	push   eax
c000ee62:	68 69 e4 01 c0       	push   0xc001e469
c000ee67:	53                   	push   ebx
c000ee68:	e8 53 bc ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c000ee6d:	83 c4 10             	add    esp,0x10
c000ee70:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ee77:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee7f:	74 1b                	je     c000ee9c <ACPI::open(int, int, void*)+0x388>
c000ee81:	83 ec 0c             	sub    esp,0xc
c000ee84:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee8b:	e8 5e bf ff ff       	call   c000adee <File::exists()>
c000ee90:	83 c4 10             	add    esp,0x10
c000ee93:	84 c0                	test   al,al
c000ee95:	74 05                	je     c000ee9c <ACPI::open(int, int, void*)+0x388>
c000ee97:	b0 01                	mov    al,0x1
c000ee99:	eb 05                	jmp    c000eea0 <ACPI::open(int, int, void*)+0x38c>
c000ee9b:	90                   	nop
c000ee9c:	b0 00                	mov    al,0x0
c000ee9e:	66 90                	xchg   ax,ax
c000eea0:	84 c0                	test   al,al
c000eea2:	74 28                	je     c000eecc <ACPI::open(int, int, void*)+0x3b8>
c000eea4:	83 ec 08             	sub    esp,0x8
c000eea7:	6a 01                	push   0x1
c000eea9:	68 69 e4 01 c0       	push   0xc001e469
c000eeae:	e8 c0 3e 00 00       	call   c0012d73 <Thr::loadDLL(char const*, bool)>
c000eeb3:	83 c4 10             	add    esp,0x10
c000eeb6:	83 ec 08             	sub    esp,0x8
c000eeb9:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000eec0:	50                   	push   eax
c000eec1:	e8 de 40 00 00       	call   c0012fa4 <Thr::executeDLL(unsigned long, void*)>
c000eec6:	83 c4 10             	add    esp,0x10
c000eec9:	8d 76 00             	lea    esi,[esi+0x0]
c000eecc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000eed4:	74 2a                	je     c000ef00 <ACPI::open(int, int, void*)+0x3ec>
c000eed6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000eede:	74 20                	je     c000ef00 <ACPI::open(int, int, void*)+0x3ec>
c000eee0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000eee7:	8b 00                	mov    eax,DWORD PTR [eax]
c000eee9:	83 c0 08             	add    eax,0x8
c000eeec:	8b 00                	mov    eax,DWORD PTR [eax]
c000eeee:	83 ec 0c             	sub    esp,0xc
c000eef1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000eef8:	ff d0                	call   eax
c000eefa:	83 c4 10             	add    esp,0x10
c000eefd:	8d 76 00             	lea    esi,[esi+0x0]
c000ef00:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000ef05:	83 ec 08             	sub    esp,0x8
c000ef08:	68 86 e4 01 c0       	push   0xc001e486
c000ef0d:	50                   	push   eax
c000ef0e:	e8 31 f2 ff ff       	call   c000e144 <findDataTable(unsigned char*, char*)>
c000ef13:	83 c4 10             	add    esp,0x10
c000ef16:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000ef1d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000ef25:	74 19                	je     c000ef40 <ACPI::open(int, int, void*)+0x42c>
c000ef27:	83 ec 08             	sub    esp,0x8
c000ef2a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ef31:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ef38:	e8 67 fb ff ff       	call   c000eaa4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ef3d:	83 c4 10             	add    esp,0x10
c000ef40:	b8 00 00 00 00       	mov    eax,0x0
c000ef45:	81 c4 70 01 00 00    	add    esp,0x170
c000ef4b:	5b                   	pop    ebx
c000ef4c:	5e                   	pop    esi
c000ef4d:	5f                   	pop    edi
c000ef4e:	c3                   	ret    
c000ef4f:	90                   	nop

c000ef50 <CPU::close(int, int, void*)>:
c000ef50:	31 c0                	xor    eax,eax
c000ef52:	c3                   	ret    
c000ef53:	90                   	nop

c000ef54 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ef54:	60                   	pusha  
c000ef55:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef61:	9c                   	pushf  
c000ef62:	fa                   	cli    
c000ef63:	0f 09                	wbinvd 
c000ef65:	0f 30                	wrmsr  
c000ef67:	9d                   	popf   
c000ef68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ef6c:	89 02                	mov    DWORD PTR [edx],eax
c000ef6e:	61                   	popa   
c000ef6f:	c3                   	ret    

c000ef70 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ef70:	60                   	pusha  
c000ef71:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef75:	9c                   	pushf  
c000ef76:	fa                   	cli    
c000ef77:	0f 09                	wbinvd 
c000ef79:	31 c0                	xor    eax,eax
c000ef7b:	31 d2                	xor    edx,edx
c000ef7d:	0f 32                	rdmsr  
c000ef7f:	9d                   	popf   
c000ef80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef84:	89 02                	mov    DWORD PTR [edx],eax
c000ef86:	61                   	popa   
c000ef87:	c3                   	ret    

c000ef88 <CPU::AMD_K6_writeback(int, int, int)>:
c000ef88:	56                   	push   esi
c000ef89:	53                   	push   ebx
c000ef8a:	83 ec 10             	sub    esp,0x10
c000ef8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef91:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ef96:	75 5d                	jne    c000eff5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef98:	83 f8 08             	cmp    eax,0x8
c000ef9b:	75 09                	jne    c000efa6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ef9d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000efa2:	7e 13                	jle    c000efb7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000efa4:	eb 30                	jmp    c000efd6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000efa6:	83 f8 06             	cmp    eax,0x6
c000efa9:	7c 4a                	jl     c000eff5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000efab:	83 f8 07             	cmp    eax,0x7
c000efae:	7e 07                	jle    c000efb7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000efb0:	83 f8 09             	cmp    eax,0x9
c000efb3:	74 21                	je     c000efd6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000efb5:	eb 3e                	jmp    c000eff5 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000efb7:	89 e6                	mov    esi,esp
c000efb9:	8b 1d dc 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021edc
c000efbf:	56                   	push   esi
c000efc0:	c1 eb 15             	shr    ebx,0x15
c000efc3:	68 82 00 00 c0       	push   0xc0000082
c000efc8:	83 e3 7e             	and    ebx,0x7e
c000efcb:	e8 a0 ff ff ff       	call   c000ef70 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000efd0:	56                   	push   esi
c000efd1:	6a 00                	push   0x0
c000efd3:	53                   	push   ebx
c000efd4:	eb 12                	jmp    c000efe8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000efd6:	89 e3                	mov    ebx,esp
c000efd8:	53                   	push   ebx
c000efd9:	68 82 00 00 c0       	push   0xc0000082
c000efde:	e8 8d ff ff ff       	call   c000ef70 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000efe3:	53                   	push   ebx
c000efe4:	6a 00                	push   0x0
c000efe6:	6a 00                	push   0x0
c000efe8:	68 82 00 00 c0       	push   0xc0000082
c000efed:	e8 62 ff ff ff       	call   c000ef54 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000eff2:	83 c4 18             	add    esp,0x18
c000eff5:	83 c4 10             	add    esp,0x10
c000eff8:	5b                   	pop    ebx
c000eff9:	5e                   	pop    esi
c000effa:	c3                   	ret    
c000effb:	90                   	nop

c000effc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000effc:	55                   	push   ebp
c000effd:	57                   	push   edi
c000effe:	56                   	push   esi
c000efff:	53                   	push   ebx
c000f000:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f004:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f008:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f00c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f010:	39 05 d0 f7 01 c0    	cmp    DWORD PTR ds:0xc001f7d0,eax
c000f016:	75 23                	jne    c000f03b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f018:	a1 2c 49 02 c0       	mov    eax,ds:0xc002492c
c000f01d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f021:	89 06                	mov    DWORD PTR [esi],eax
c000f023:	a1 28 49 02 c0       	mov    eax,ds:0xc0024928
c000f028:	89 07                	mov    DWORD PTR [edi],eax
c000f02a:	a1 24 49 02 c0       	mov    eax,ds:0xc0024924
c000f02f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f032:	a1 20 49 02 c0       	mov    eax,ds:0xc0024920
c000f037:	89 02                	mov    DWORD PTR [edx],eax
c000f039:	eb 3f                	jmp    c000f07a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f03b:	31 c9                	xor    ecx,ecx
c000f03d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f041:	0f a2                	cpuid  
c000f043:	89 06                	mov    DWORD PTR [esi],eax
c000f045:	89 1f                	mov    DWORD PTR [edi],ebx
c000f047:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f04b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f04e:	89 10                	mov    DWORD PTR [eax],edx
c000f050:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f054:	a3 d0 f7 01 c0       	mov    ds:0xc001f7d0,eax
c000f059:	8b 06                	mov    eax,DWORD PTR [esi]
c000f05b:	a3 2c 49 02 c0       	mov    ds:0xc002492c,eax
c000f060:	8b 07                	mov    eax,DWORD PTR [edi]
c000f062:	a3 28 49 02 c0       	mov    ds:0xc0024928,eax
c000f067:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f06a:	a3 24 49 02 c0       	mov    ds:0xc0024924,eax
c000f06f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f073:	8b 00                	mov    eax,DWORD PTR [eax]
c000f075:	a3 20 49 02 c0       	mov    ds:0xc0024920,eax
c000f07a:	5b                   	pop    ebx
c000f07b:	5e                   	pop    esi
c000f07c:	5f                   	pop    edi
c000f07d:	5d                   	pop    ebp
c000f07e:	c3                   	ret    
c000f07f:	90                   	nop

c000f080 <CPU::cpuidCheckEDX(unsigned int)>:
c000f080:	83 ec 10             	sub    esp,0x10
c000f083:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f087:	50                   	push   eax
c000f088:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f08c:	50                   	push   eax
c000f08d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f091:	50                   	push   eax
c000f092:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f096:	50                   	push   eax
c000f097:	6a 01                	push   0x1
c000f099:	e8 5e ff ff ff       	call   c000effc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f09e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0a2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f0a6:	0f 95 c0             	setne  al
c000f0a9:	83 c4 24             	add    esp,0x24
c000f0ac:	c3                   	ret    
c000f0ad:	90                   	nop

c000f0ae <CPU::cpuidCheckECX(unsigned int)>:
c000f0ae:	83 ec 10             	sub    esp,0x10
c000f0b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0b5:	50                   	push   eax
c000f0b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0ba:	50                   	push   eax
c000f0bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0bf:	50                   	push   eax
c000f0c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0c4:	50                   	push   eax
c000f0c5:	6a 01                	push   0x1
c000f0c7:	e8 30 ff ff ff       	call   c000effc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0d0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f0d4:	0f 95 c0             	setne  al
c000f0d7:	83 c4 24             	add    esp,0x24
c000f0da:	c3                   	ret    
c000f0db:	90                   	nop

c000f0dc <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f0dc:	83 ec 10             	sub    esp,0x10
c000f0df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0e3:	50                   	push   eax
c000f0e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0e8:	50                   	push   eax
c000f0e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0ed:	50                   	push   eax
c000f0ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0f2:	50                   	push   eax
c000f0f3:	6a 07                	push   0x7
c000f0f5:	e8 02 ff ff ff       	call   c000effc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0fe:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f102:	0f 95 c0             	setne  al
c000f105:	83 c4 24             	add    esp,0x24
c000f108:	c3                   	ret    
c000f109:	90                   	nop

c000f10a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f10a:	83 ec 10             	sub    esp,0x10
c000f10d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f111:	50                   	push   eax
c000f112:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f116:	50                   	push   eax
c000f117:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f11b:	50                   	push   eax
c000f11c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f120:	50                   	push   eax
c000f121:	6a 07                	push   0x7
c000f123:	e8 d4 fe ff ff       	call   c000effc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f128:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f12c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f130:	0f 95 c0             	setne  al
c000f133:	83 c4 24             	add    esp,0x24
c000f136:	c3                   	ret    
c000f137:	90                   	nop

c000f138 <CPU::CPU()>:
c000f138:	83 ec 0c             	sub    esp,0xc
c000f13b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f13f:	83 ec 08             	sub    esp,0x8
c000f142:	68 a9 e5 01 c0       	push   0xc001e5a9
c000f147:	50                   	push   eax
c000f148:	e8 d3 c9 ff ff       	call   c000bb20 <Device::Device(char const*)>
c000f14d:	83 c4 10             	add    esp,0x10
c000f150:	ba 30 e6 01 c0       	mov    edx,0xc001e630
c000f155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f159:	89 10                	mov    DWORD PTR [eax],edx
c000f15b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f15f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f16d:	05 78 01 00 00       	add    eax,0x178
c000f172:	83 ec 0c             	sub    esp,0xc
c000f175:	50                   	push   eax
c000f176:	e8 ff 7e ff ff       	call   c000707a <GDT::GDT()>
c000f17b:	83 c4 10             	add    esp,0x10
c000f17e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f182:	05 7c 09 00 00       	add    eax,0x97c
c000f187:	83 ec 0c             	sub    esp,0xc
c000f18a:	50                   	push   eax
c000f18b:	e8 24 81 ff ff       	call   c00072b4 <IDT::IDT()>
c000f190:	83 c4 10             	add    esp,0x10
c000f193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f197:	05 7c 11 00 00       	add    eax,0x117c
c000f19c:	83 ec 0c             	sub    esp,0xc
c000f19f:	50                   	push   eax
c000f1a0:	e8 2b 9a ff ff       	call   c0008bd0 <TSS::TSS()>
c000f1a5:	83 c4 10             	add    esp,0x10
c000f1a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1ac:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f1b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1b7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f1c1:	90                   	nop
c000f1c2:	83 c4 0c             	add    esp,0xc
c000f1c5:	c3                   	ret    

c000f1c6 <CPU::displayFeatures()>:
c000f1c6:	c3                   	ret    
c000f1c7:	90                   	nop

c000f1c8 <CPU::detectFeatures()>:
c000f1c8:	55                   	push   ebp
c000f1c9:	57                   	push   edi
c000f1ca:	56                   	push   esi
c000f1cb:	53                   	push   ebx
c000f1cc:	83 ec 30             	sub    esp,0x30
c000f1cf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f1d3:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f1dd:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f1e4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f1ea:	6a 0d                	push   0xd
c000f1ec:	6a 00                	push   0x0
c000f1ee:	55                   	push   ebp
c000f1ef:	e8 dc 12 ff ff       	call   c00004d0 <memset>
c000f1f4:	83 c4 10             	add    esp,0x10
c000f1f7:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f1fc:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f203:	0f 84 d5 05 00 00    	je     c000f7de <CPU::detectFeatures()+0x616>
c000f209:	83 ec 0c             	sub    esp,0xc
c000f20c:	89 ef                	mov    edi,ebp
c000f20e:	6a 10                	push   0x10
c000f210:	e8 6b fe ff ff       	call   c000f080 <CPU::cpuidCheckEDX(unsigned int)>
c000f215:	83 e0 01             	and    eax,0x1
c000f218:	8d 14 00             	lea    edx,[eax+eax*1]
c000f21b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f221:	83 e0 fd             	and    eax,0xfffffffd
c000f224:	09 d0                	or     eax,edx
c000f226:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f22c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f233:	e8 48 fe ff ff       	call   c000f080 <CPU::cpuidCheckEDX(unsigned int)>
c000f238:	83 e0 01             	and    eax,0x1
c000f23b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f242:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f248:	83 e0 fb             	and    eax,0xfffffffb
c000f24b:	09 d0                	or     eax,edx
c000f24d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f253:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f25a:	e8 21 fe ff ff       	call   c000f080 <CPU::cpuidCheckEDX(unsigned int)>
c000f25f:	83 e0 01             	and    eax,0x1
c000f262:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f269:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f26f:	83 e0 f7             	and    eax,0xfffffff7
c000f272:	09 d0                	or     eax,edx
c000f274:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f27a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f281:	e8 fa fd ff ff       	call   c000f080 <CPU::cpuidCheckEDX(unsigned int)>
c000f286:	83 e0 01             	and    eax,0x1
c000f289:	c1 e0 04             	shl    eax,0x4
c000f28c:	88 c2                	mov    dl,al
c000f28e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f294:	83 e0 ef             	and    eax,0xffffffef
c000f297:	09 d0                	or     eax,edx
c000f299:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f29f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f2a6:	e8 d5 fd ff ff       	call   c000f080 <CPU::cpuidCheckEDX(unsigned int)>
c000f2ab:	83 e0 01             	and    eax,0x1
c000f2ae:	c1 e0 05             	shl    eax,0x5
c000f2b1:	88 c2                	mov    dl,al
c000f2b3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2b9:	83 e0 df             	and    eax,0xffffffdf
c000f2bc:	09 d0                	or     eax,edx
c000f2be:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f2c4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f2cb:	e8 b0 fd ff ff       	call   c000f080 <CPU::cpuidCheckEDX(unsigned int)>
c000f2d0:	83 e0 01             	and    eax,0x1
c000f2d3:	8d 14 00             	lea    edx,[eax+eax*1]
c000f2d6:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f2dc:	83 e0 fd             	and    eax,0xfffffffd
c000f2df:	09 d0                	or     eax,edx
c000f2e1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f2e7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f2ee:	e8 8d fd ff ff       	call   c000f080 <CPU::cpuidCheckEDX(unsigned int)>
c000f2f3:	83 e0 01             	and    eax,0x1
c000f2f6:	c1 e0 06             	shl    eax,0x6
c000f2f9:	88 c2                	mov    dl,al
c000f2fb:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f301:	83 e0 bf             	and    eax,0xffffffbf
c000f304:	09 d0                	or     eax,edx
c000f306:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f30c:	58                   	pop    eax
c000f30d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f311:	50                   	push   eax
c000f312:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f316:	50                   	push   eax
c000f317:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f31b:	56                   	push   esi
c000f31c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f320:	50                   	push   eax
c000f321:	6a 00                	push   0x0
c000f323:	e8 d4 fc ff ff       	call   c000effc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f328:	b8 04 00 00 00       	mov    eax,0x4
c000f32d:	89 c1                	mov    ecx,eax
c000f32f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f331:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f337:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f33b:	89 c1                	mov    ecx,eax
c000f33d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f33f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f345:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f349:	89 c1                	mov    ecx,eax
c000f34b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f34d:	83 c4 18             	add    esp,0x18
c000f350:	68 b8 e4 01 c0       	push   0xc001e4b8
c000f355:	55                   	push   ebp
c000f356:	e8 85 13 ff ff       	call   c00006e0 <strcmp>
c000f35b:	83 c4 10             	add    esp,0x10
c000f35e:	85 c0                	test   eax,eax
c000f360:	75 0f                	jne    c000f371 <CPU::detectFeatures()+0x1a9>
c000f362:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f36c:	e9 22 02 00 00       	jmp    c000f593 <CPU::detectFeatures()+0x3cb>
c000f371:	50                   	push   eax
c000f372:	50                   	push   eax
c000f373:	68 c5 e4 01 c0       	push   0xc001e4c5
c000f378:	55                   	push   ebp
c000f379:	e8 62 13 ff ff       	call   c00006e0 <strcmp>
c000f37e:	83 c4 10             	add    esp,0x10
c000f381:	85 c0                	test   eax,eax
c000f383:	74 dd                	je     c000f362 <CPU::detectFeatures()+0x19a>
c000f385:	50                   	push   eax
c000f386:	50                   	push   eax
c000f387:	68 d2 e4 01 c0       	push   0xc001e4d2
c000f38c:	55                   	push   ebp
c000f38d:	e8 4e 13 ff ff       	call   c00006e0 <strcmp>
c000f392:	83 c4 10             	add    esp,0x10
c000f395:	85 c0                	test   eax,eax
c000f397:	74 2a                	je     c000f3c3 <CPU::detectFeatures()+0x1fb>
c000f399:	50                   	push   eax
c000f39a:	50                   	push   eax
c000f39b:	68 df e4 01 c0       	push   0xc001e4df
c000f3a0:	55                   	push   ebp
c000f3a1:	e8 3a 13 ff ff       	call   c00006e0 <strcmp>
c000f3a6:	83 c4 10             	add    esp,0x10
c000f3a9:	85 c0                	test   eax,eax
c000f3ab:	74 16                	je     c000f3c3 <CPU::detectFeatures()+0x1fb>
c000f3ad:	50                   	push   eax
c000f3ae:	50                   	push   eax
c000f3af:	68 ec e4 01 c0       	push   0xc001e4ec
c000f3b4:	55                   	push   ebp
c000f3b5:	e8 26 13 ff ff       	call   c00006e0 <strcmp>
c000f3ba:	83 c4 10             	add    esp,0x10
c000f3bd:	85 c0                	test   eax,eax
c000f3bf:	74 48                	je     c000f409 <CPU::detectFeatures()+0x241>
c000f3c1:	eb 0f                	jmp    c000f3d2 <CPU::detectFeatures()+0x20a>
c000f3c3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f3cd:	e9 c1 01 00 00       	jmp    c000f593 <CPU::detectFeatures()+0x3cb>
c000f3d2:	50                   	push   eax
c000f3d3:	50                   	push   eax
c000f3d4:	68 f9 e4 01 c0       	push   0xc001e4f9
c000f3d9:	55                   	push   ebp
c000f3da:	e8 01 13 ff ff       	call   c00006e0 <strcmp>
c000f3df:	83 c4 10             	add    esp,0x10
c000f3e2:	85 c0                	test   eax,eax
c000f3e4:	74 23                	je     c000f409 <CPU::detectFeatures()+0x241>
c000f3e6:	57                   	push   edi
c000f3e7:	57                   	push   edi
c000f3e8:	68 06 e5 01 c0       	push   0xc001e506
c000f3ed:	55                   	push   ebp
c000f3ee:	e8 ed 12 ff ff       	call   c00006e0 <strcmp>
c000f3f3:	83 c4 10             	add    esp,0x10
c000f3f6:	85 c0                	test   eax,eax
c000f3f8:	75 1e                	jne    c000f418 <CPU::detectFeatures()+0x250>
c000f3fa:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f404:	e9 8a 01 00 00       	jmp    c000f593 <CPU::detectFeatures()+0x3cb>
c000f409:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f413:	e9 7b 01 00 00       	jmp    c000f593 <CPU::detectFeatures()+0x3cb>
c000f418:	56                   	push   esi
c000f419:	56                   	push   esi
c000f41a:	68 13 e5 01 c0       	push   0xc001e513
c000f41f:	55                   	push   ebp
c000f420:	e8 bb 12 ff ff       	call   c00006e0 <strcmp>
c000f425:	83 c4 10             	add    esp,0x10
c000f428:	85 c0                	test   eax,eax
c000f42a:	75 0f                	jne    c000f43b <CPU::detectFeatures()+0x273>
c000f42c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f436:	e9 58 01 00 00       	jmp    c000f593 <CPU::detectFeatures()+0x3cb>
c000f43b:	51                   	push   ecx
c000f43c:	51                   	push   ecx
c000f43d:	68 d2 e4 01 c0       	push   0xc001e4d2
c000f442:	55                   	push   ebp
c000f443:	e8 98 12 ff ff       	call   c00006e0 <strcmp>
c000f448:	83 c4 10             	add    esp,0x10
c000f44b:	85 c0                	test   eax,eax
c000f44d:	75 0f                	jne    c000f45e <CPU::detectFeatures()+0x296>
c000f44f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f459:	e9 35 01 00 00       	jmp    c000f593 <CPU::detectFeatures()+0x3cb>
c000f45e:	52                   	push   edx
c000f45f:	52                   	push   edx
c000f460:	68 20 e5 01 c0       	push   0xc001e520
c000f465:	55                   	push   ebp
c000f466:	e8 75 12 ff ff       	call   c00006e0 <strcmp>
c000f46b:	83 c4 10             	add    esp,0x10
c000f46e:	85 c0                	test   eax,eax
c000f470:	75 0f                	jne    c000f481 <CPU::detectFeatures()+0x2b9>
c000f472:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f47c:	e9 12 01 00 00       	jmp    c000f593 <CPU::detectFeatures()+0x3cb>
c000f481:	50                   	push   eax
c000f482:	50                   	push   eax
c000f483:	68 2d e5 01 c0       	push   0xc001e52d
c000f488:	55                   	push   ebp
c000f489:	e8 52 12 ff ff       	call   c00006e0 <strcmp>
c000f48e:	83 c4 10             	add    esp,0x10
c000f491:	85 c0                	test   eax,eax
c000f493:	75 0f                	jne    c000f4a4 <CPU::detectFeatures()+0x2dc>
c000f495:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f49f:	e9 ef 00 00 00       	jmp    c000f593 <CPU::detectFeatures()+0x3cb>
c000f4a4:	50                   	push   eax
c000f4a5:	50                   	push   eax
c000f4a6:	68 3a e5 01 c0       	push   0xc001e53a
c000f4ab:	55                   	push   ebp
c000f4ac:	e8 2f 12 ff ff       	call   c00006e0 <strcmp>
c000f4b1:	83 c4 10             	add    esp,0x10
c000f4b4:	85 c0                	test   eax,eax
c000f4b6:	75 0f                	jne    c000f4c7 <CPU::detectFeatures()+0x2ff>
c000f4b8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f4c2:	e9 cc 00 00 00       	jmp    c000f593 <CPU::detectFeatures()+0x3cb>
c000f4c7:	50                   	push   eax
c000f4c8:	50                   	push   eax
c000f4c9:	68 47 e5 01 c0       	push   0xc001e547
c000f4ce:	55                   	push   ebp
c000f4cf:	e8 0c 12 ff ff       	call   c00006e0 <strcmp>
c000f4d4:	83 c4 10             	add    esp,0x10
c000f4d7:	85 c0                	test   eax,eax
c000f4d9:	75 0f                	jne    c000f4ea <CPU::detectFeatures()+0x322>
c000f4db:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f4e5:	e9 a9 00 00 00       	jmp    c000f593 <CPU::detectFeatures()+0x3cb>
c000f4ea:	50                   	push   eax
c000f4eb:	50                   	push   eax
c000f4ec:	68 54 e5 01 c0       	push   0xc001e554
c000f4f1:	55                   	push   ebp
c000f4f2:	e8 e9 11 ff ff       	call   c00006e0 <strcmp>
c000f4f7:	83 c4 10             	add    esp,0x10
c000f4fa:	85 c0                	test   eax,eax
c000f4fc:	75 0f                	jne    c000f50d <CPU::detectFeatures()+0x345>
c000f4fe:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f508:	e9 86 00 00 00       	jmp    c000f593 <CPU::detectFeatures()+0x3cb>
c000f50d:	50                   	push   eax
c000f50e:	50                   	push   eax
c000f50f:	68 61 e5 01 c0       	push   0xc001e561
c000f514:	55                   	push   ebp
c000f515:	e8 c6 11 ff ff       	call   c00006e0 <strcmp>
c000f51a:	83 c4 10             	add    esp,0x10
c000f51d:	85 c0                	test   eax,eax
c000f51f:	75 0c                	jne    c000f52d <CPU::detectFeatures()+0x365>
c000f521:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f52b:	eb 66                	jmp    c000f593 <CPU::detectFeatures()+0x3cb>
c000f52d:	50                   	push   eax
c000f52e:	50                   	push   eax
c000f52f:	68 6e e5 01 c0       	push   0xc001e56e
c000f534:	55                   	push   ebp
c000f535:	e8 a6 11 ff ff       	call   c00006e0 <strcmp>
c000f53a:	83 c4 10             	add    esp,0x10
c000f53d:	85 c0                	test   eax,eax
c000f53f:	75 0c                	jne    c000f54d <CPU::detectFeatures()+0x385>
c000f541:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f54b:	eb 46                	jmp    c000f593 <CPU::detectFeatures()+0x3cb>
c000f54d:	57                   	push   edi
c000f54e:	57                   	push   edi
c000f54f:	68 7b e5 01 c0       	push   0xc001e57b
c000f554:	55                   	push   ebp
c000f555:	e8 86 11 ff ff       	call   c00006e0 <strcmp>
c000f55a:	83 c4 10             	add    esp,0x10
c000f55d:	85 c0                	test   eax,eax
c000f55f:	74 e0                	je     c000f541 <CPU::detectFeatures()+0x379>
c000f561:	56                   	push   esi
c000f562:	56                   	push   esi
c000f563:	68 88 e5 01 c0       	push   0xc001e588
c000f568:	55                   	push   ebp
c000f569:	e8 72 11 ff ff       	call   c00006e0 <strcmp>
c000f56e:	83 c4 10             	add    esp,0x10
c000f571:	85 c0                	test   eax,eax
c000f573:	74 cc                	je     c000f541 <CPU::detectFeatures()+0x379>
c000f575:	51                   	push   ecx
c000f576:	51                   	push   ecx
c000f577:	68 95 e5 01 c0       	push   0xc001e595
c000f57c:	55                   	push   ebp
c000f57d:	e8 5e 11 ff ff       	call   c00006e0 <strcmp>
c000f582:	83 c4 10             	add    esp,0x10
c000f585:	85 c0                	test   eax,eax
c000f587:	74 b8                	je     c000f541 <CPU::detectFeatures()+0x379>
c000f589:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f593:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f598:	0f 86 be 00 00 00    	jbe    c000f65c <CPU::detectFeatures()+0x494>
c000f59e:	83 ec 0c             	sub    esp,0xc
c000f5a1:	68 80 00 00 00       	push   0x80
c000f5a6:	e8 31 fb ff ff       	call   c000f0dc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f5ab:	83 e0 01             	and    eax,0x1
c000f5ae:	c1 e0 06             	shl    eax,0x6
c000f5b1:	88 c2                	mov    dl,al
c000f5b3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f5b9:	83 e0 bf             	and    eax,0xffffffbf
c000f5bc:	09 d0                	or     eax,edx
c000f5be:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f5c4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f5cb:	e8 0c fb ff ff       	call   c000f0dc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f5d0:	83 e0 01             	and    eax,0x1
c000f5d3:	c1 e0 04             	shl    eax,0x4
c000f5d6:	88 c2                	mov    dl,al
c000f5d8:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f5de:	83 e0 ef             	and    eax,0xffffffef
c000f5e1:	09 d0                	or     eax,edx
c000f5e3:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f5e9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f5f0:	e8 e7 fa ff ff       	call   c000f0dc <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f5f5:	c1 e0 07             	shl    eax,0x7
c000f5f8:	88 c2                	mov    dl,al
c000f5fa:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f600:	83 e0 7f             	and    eax,0x7f
c000f603:	09 d0                	or     eax,edx
c000f605:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f60b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f612:	e8 f3 fa ff ff       	call   c000f10a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f617:	83 e0 01             	and    eax,0x1
c000f61a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f621:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f627:	83 e0 f7             	and    eax,0xfffffff7
c000f62a:	09 d0                	or     eax,edx
c000f62c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f632:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f639:	e8 cc fa ff ff       	call   c000f10a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f63e:	83 c4 10             	add    esp,0x10
c000f641:	83 e0 01             	and    eax,0x1
c000f644:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f64b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f651:	83 e0 fb             	and    eax,0xfffffffb
c000f654:	09 d0                	or     eax,edx
c000f656:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f65c:	83 ec 0c             	sub    esp,0xc
c000f65f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f663:	50                   	push   eax
c000f664:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f668:	50                   	push   eax
c000f669:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f66d:	56                   	push   esi
c000f66e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f672:	50                   	push   eax
c000f673:	6a 01                	push   0x1
c000f675:	e8 82 f9 ff ff       	call   c000effc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f67a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f67e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f684:	88 ca                	mov    dl,cl
c000f686:	83 e0 f0             	and    eax,0xfffffff0
c000f689:	83 e2 0f             	and    edx,0xf
c000f68c:	09 d0                	or     eax,edx
c000f68e:	88 ca                	mov    dl,cl
c000f690:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f696:	c0 ea 04             	shr    dl,0x4
c000f699:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f69d:	0f b6 c2             	movzx  eax,dl
c000f6a0:	83 c4 20             	add    esp,0x20
c000f6a3:	c1 e0 06             	shl    eax,0x6
c000f6a6:	89 c7                	mov    edi,eax
c000f6a8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f6ae:	66 25 3f c0          	and    ax,0xc03f
c000f6b2:	09 f8                	or     eax,edi
c000f6b4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f6bb:	89 c8                	mov    eax,ecx
c000f6bd:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f6c4:	c1 e8 08             	shr    eax,0x8
c000f6c7:	83 e5 3f             	and    ebp,0x3f
c000f6ca:	83 e0 0f             	and    eax,0xf
c000f6cd:	89 c7                	mov    edi,eax
c000f6cf:	c1 e7 06             	shl    edi,0x6
c000f6d2:	09 ef                	or     edi,ebp
c000f6d4:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f6db:	89 fa                	mov    edx,edi
c000f6dd:	83 e5 c0             	and    ebp,0xffffffc0
c000f6e0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f6e6:	88 c2                	mov    dl,al
c000f6e8:	c0 ea 02             	shr    dl,0x2
c000f6eb:	89 d7                	mov    edi,edx
c000f6ed:	09 ef                	or     edi,ebp
c000f6ef:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f6f5:	89 fa                	mov    edx,edi
c000f6f7:	83 e5 cf             	and    ebp,0xffffffcf
c000f6fa:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f700:	89 cf                	mov    edi,ecx
c000f702:	c1 ef 0c             	shr    edi,0xc
c000f705:	83 e7 03             	and    edi,0x3
c000f708:	c1 e7 04             	shl    edi,0x4
c000f70b:	09 ef                	or     edi,ebp
c000f70d:	3c 06                	cmp    al,0x6
c000f70f:	89 fa                	mov    edx,edi
c000f711:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f717:	74 04                	je     c000f71d <CPU::detectFeatures()+0x555>
c000f719:	3c 0f                	cmp    al,0xf
c000f71b:	75 5c                	jne    c000f779 <CPU::detectFeatures()+0x5b1>
c000f71d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f721:	89 cf                	mov    edi,ecx
c000f723:	c1 ef 10             	shr    edi,0x10
c000f726:	c1 e7 04             	shl    edi,0x4
c000f729:	09 fa                	or     edx,edi
c000f72b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f731:	0f b6 d2             	movzx  edx,dl
c000f734:	66 81 e7 3f c0       	and    di,0xc03f
c000f739:	c1 e2 06             	shl    edx,0x6
c000f73c:	09 fa                	or     edx,edi
c000f73e:	3c 0f                	cmp    al,0xf
c000f740:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f747:	75 30                	jne    c000f779 <CPU::detectFeatures()+0x5b1>
c000f749:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f74f:	c1 e9 14             	shr    ecx,0x14
c000f752:	83 e0 3f             	and    eax,0x3f
c000f755:	83 c1 0f             	add    ecx,0xf
c000f758:	88 ca                	mov    dl,cl
c000f75a:	c0 e9 02             	shr    cl,0x2
c000f75d:	c1 e2 06             	shl    edx,0x6
c000f760:	09 d0                	or     eax,edx
c000f762:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f768:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f76e:	83 e0 c0             	and    eax,0xffffffc0
c000f771:	09 c1                	or     ecx,eax
c000f773:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f779:	83 ec 0c             	sub    esp,0xc
c000f77c:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f783:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f787:	50                   	push   eax
c000f788:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f78c:	55                   	push   ebp
c000f78d:	56                   	push   esi
c000f78e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f792:	57                   	push   edi
c000f793:	68 00 00 00 80       	push   0x80000000
c000f798:	e8 5f f8 ff ff       	call   c000effc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f79d:	83 c4 20             	add    esp,0x20
c000f7a0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f7a8:	76 22                	jbe    c000f7cc <CPU::detectFeatures()+0x604>
c000f7aa:	83 ec 0c             	sub    esp,0xc
c000f7ad:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f7b1:	50                   	push   eax
c000f7b2:	55                   	push   ebp
c000f7b3:	56                   	push   esi
c000f7b4:	57                   	push   edi
c000f7b5:	68 01 00 00 80       	push   0x80000001
c000f7ba:	e8 3d f8 ff ff       	call   c000effc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7bf:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f7c9:	83 c4 20             	add    esp,0x20
c000f7cc:	52                   	push   edx
c000f7cd:	52                   	push   edx
c000f7ce:	68 a1 e5 01 c0       	push   0xc001e5a1
c000f7d3:	53                   	push   ebx
c000f7d4:	e8 39 c3 ff ff       	call   c000bb12 <Device::setName(char const*)>
c000f7d9:	83 c4 10             	add    esp,0x10
c000f7dc:	eb 67                	jmp    c000f845 <CPU::detectFeatures()+0x67d>
c000f7de:	50                   	push   eax
c000f7df:	50                   	push   eax
c000f7e0:	68 06 e5 01 c0       	push   0xc001e506
c000f7e5:	55                   	push   ebp
c000f7e6:	e8 15 0e ff ff       	call   c0000600 <strcpy>
c000f7eb:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f7f5:	e8 c9 09 ff ff       	call   c00001c3 <is486>
c000f7fa:	83 c4 10             	add    esp,0x10
c000f7fd:	85 c0                	test   eax,eax
c000f7ff:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f805:	74 1d                	je     c000f824 <CPU::detectFeatures()+0x65c>
c000f807:	83 c8 07             	or     eax,0x7
c000f80a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f810:	0f 20 c0             	mov    eax,cr0
c000f813:	83 e0 14             	and    eax,0x14
c000f816:	83 f8 04             	cmp    eax,0x4
c000f819:	75 0e                	jne    c000f829 <CPU::detectFeatures()+0x661>
c000f81b:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f822:	eb 21                	jmp    c000f845 <CPU::detectFeatures()+0x67d>
c000f824:	83 e0 f8             	and    eax,0xfffffff8
c000f827:	eb e1                	jmp    c000f80a <CPU::detectFeatures()+0x642>
c000f829:	e8 70 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f82e:	83 e0 01             	and    eax,0x1
c000f831:	8d 14 00             	lea    edx,[eax+eax*1]
c000f834:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f83a:	83 e0 fd             	and    eax,0xfffffffd
c000f83d:	09 d0                	or     eax,edx
c000f83f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f845:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f84c:	74 0e                	je     c000f85c <CPU::detectFeatures()+0x694>
c000f84e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f853:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f85a:	eb 20                	jmp    c000f87c <CPU::detectFeatures()+0x6b4>
c000f85c:	e8 3d 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f861:	83 e0 01             	and    eax,0x1
c000f864:	8d 14 00             	lea    edx,[eax+eax*1]
c000f867:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f86d:	83 e0 fd             	and    eax,0xfffffffd
c000f870:	09 d0                	or     eax,edx
c000f872:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f878:	a8 02                	test   al,0x2
c000f87a:	75 d2                	jne    c000f84e <CPU::detectFeatures()+0x686>
c000f87c:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f883:	83 c4 2c             	add    esp,0x2c
c000f886:	5b                   	pop    ebx
c000f887:	5e                   	pop    esi
c000f888:	5f                   	pop    edi
c000f889:	5d                   	pop    ebp
c000f88a:	c3                   	ret    
c000f88b:	90                   	nop

c000f88c <CPU::setupSMEP()>:
c000f88c:	0f 20 e0             	mov    eax,cr4
c000f88f:	0d 00 00 10 00       	or     eax,0x100000
c000f894:	0f 22 e0             	mov    cr4,eax
c000f897:	c3                   	ret    

c000f898 <CPU::setupUMIP()>:
c000f898:	0f 20 e0             	mov    eax,cr4
c000f89b:	80 cc 08             	or     ah,0x8
c000f89e:	0f 22 e0             	mov    cr4,eax
c000f8a1:	c3                   	ret    

c000f8a2 <CPU::setupTSC()>:
c000f8a2:	0f 20 e0             	mov    eax,cr4
c000f8a5:	83 c8 04             	or     eax,0x4
c000f8a8:	0f 22 e0             	mov    cr4,eax
c000f8ab:	c3                   	ret    

c000f8ac <CPU::setupLargePages()>:
c000f8ac:	0f 20 e0             	mov    eax,cr4
c000f8af:	83 c8 10             	or     eax,0x10
c000f8b2:	0f 22 e0             	mov    cr4,eax
c000f8b5:	c3                   	ret    

c000f8b6 <CPU::setupPAT()>:
c000f8b6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f8bb:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f8c2:	74 2c                	je     c000f8f0 <CPU::setupPAT()+0x3a>
c000f8c4:	53                   	push   ebx
c000f8c5:	83 ec 10             	sub    esp,0x10
c000f8c8:	68 77 02 00 00       	push   0x277
c000f8cd:	50                   	push   eax
c000f8ce:	e8 1f 75 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f8d3:	83 e2 f8             	and    edx,0xfffffff8
c000f8d6:	83 ca 01             	or     edx,0x1
c000f8d9:	52                   	push   edx
c000f8da:	50                   	push   eax
c000f8db:	68 77 02 00 00       	push   0x277
c000f8e0:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000f8e6:	e8 33 75 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f8eb:	83 c4 28             	add    esp,0x28
c000f8ee:	5b                   	pop    ebx
c000f8ef:	c3                   	ret    
c000f8f0:	c3                   	ret    
c000f8f1:	90                   	nop

c000f8f2 <CPU::setupMTRR()>:
c000f8f2:	c3                   	ret    
c000f8f3:	90                   	nop

c000f8f4 <CPU::setupGlobalPages()>:
c000f8f4:	0f 20 e0             	mov    eax,cr4
c000f8f7:	0c 80                	or     al,0x80
c000f8f9:	0f 22 e0             	mov    cr4,eax
c000f8fc:	c3                   	ret    
c000f8fd:	90                   	nop

c000f8fe <CPU::allowUsermodeDataAccess()>:
c000f8fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f902:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f909:	74 03                	je     c000f90e <CPU::allowUsermodeDataAccess()+0x10>
c000f90b:	0f 01 cb             	stac   
c000f90e:	c3                   	ret    
c000f90f:	90                   	nop

c000f910 <CPU::prohibitUsermodeDataAccess()>:
c000f910:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f914:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f91b:	74 03                	je     c000f920 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f91d:	0f 01 ca             	clac   
c000f920:	c3                   	ret    
c000f921:	90                   	nop

c000f922 <CPU::setupSMAP()>:
c000f922:	0f 20 e0             	mov    eax,cr4
c000f925:	0d 00 00 20 00       	or     eax,0x200000
c000f92a:	0f 22 e0             	mov    cr4,eax
c000f92d:	eb e1                	jmp    c000f910 <CPU::prohibitUsermodeDataAccess()>
c000f92f:	90                   	nop

c000f930 <CPU::setupFeatures()>:
c000f930:	53                   	push   ebx
c000f931:	83 ec 08             	sub    esp,0x8
c000f934:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f938:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f93f:	74 18                	je     c000f959 <CPU::setupFeatures()+0x29>
c000f941:	83 ec 0c             	sub    esp,0xc
c000f944:	68 ad e5 01 c0       	push   0xc001e5ad
c000f949:	e8 fc ab ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c000f94e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f951:	e8 42 ff ff ff       	call   c000f898 <CPU::setupUMIP()>
c000f956:	83 c4 10             	add    esp,0x10
c000f959:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f960:	74 18                	je     c000f97a <CPU::setupFeatures()+0x4a>
c000f962:	83 ec 0c             	sub    esp,0xc
c000f965:	68 b7 e5 01 c0       	push   0xc001e5b7
c000f96a:	e8 db ab ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c000f96f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f972:	e8 2b ff ff ff       	call   c000f8a2 <CPU::setupTSC()>
c000f977:	83 c4 10             	add    esp,0x10
c000f97a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f981:	74 18                	je     c000f99b <CPU::setupFeatures()+0x6b>
c000f983:	83 ec 0c             	sub    esp,0xc
c000f986:	68 c0 e5 01 c0       	push   0xc001e5c0
c000f98b:	e8 ba ab ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c000f990:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f993:	e8 14 ff ff ff       	call   c000f8ac <CPU::setupLargePages()>
c000f998:	83 c4 10             	add    esp,0x10
c000f99b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f9a2:	74 18                	je     c000f9bc <CPU::setupFeatures()+0x8c>
c000f9a4:	83 ec 0c             	sub    esp,0xc
c000f9a7:	68 c9 e5 01 c0       	push   0xc001e5c9
c000f9ac:	e8 99 ab ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c000f9b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9b4:	e8 3b ff ff ff       	call   c000f8f4 <CPU::setupGlobalPages()>
c000f9b9:	83 c4 10             	add    esp,0x10
c000f9bc:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f9c3:	74 18                	je     c000f9dd <CPU::setupFeatures()+0xad>
c000f9c5:	83 ec 0c             	sub    esp,0xc
c000f9c8:	68 db e5 01 c0       	push   0xc001e5db
c000f9cd:	e8 78 ab ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c000f9d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9d5:	e8 dc fe ff ff       	call   c000f8b6 <CPU::setupPAT()>
c000f9da:	83 c4 10             	add    esp,0x10
c000f9dd:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f9e4:	74 11                	je     c000f9f7 <CPU::setupFeatures()+0xc7>
c000f9e6:	c7 44 24 10 e4 e5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e5e4
c000f9ee:	83 c4 08             	add    esp,0x8
c000f9f1:	5b                   	pop    ebx
c000f9f2:	e9 53 ab ff ff       	jmp    c000a54a <Dbg::kprintf(char const*, ...)>
c000f9f7:	83 c4 08             	add    esp,0x8
c000f9fa:	5b                   	pop    ebx
c000f9fb:	c3                   	ret    

c000f9fc <CPU::open(int, int, void*)>:
c000f9fc:	57                   	push   edi
c000f9fd:	56                   	push   esi
c000f9fe:	53                   	push   ebx
c000f9ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa03:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fa07:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fa0d:	83 ec 0c             	sub    esp,0xc
c000fa10:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fa16:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fa1c:	50                   	push   eax
c000fa1d:	e8 ba 76 ff ff       	call   c00070dc <GDT::setup()>
c000fa22:	83 c4 0c             	add    esp,0xc
c000fa25:	6a 00                	push   0x0
c000fa27:	68 ef be ad de       	push   0xdeadbeef
c000fa2c:	57                   	push   edi
c000fa2d:	e8 e2 91 ff ff       	call   c0008c14 <TSS::setup(unsigned long, unsigned long)>
c000fa32:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fa35:	e8 ba 91 ff ff       	call   c0008bf4 <TSS::flush()>
c000fa3a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fa40:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa43:	e8 e2 78 ff ff       	call   c000732a <IDT::setup()>
c000fa48:	b8 00 04 00 00       	mov    eax,0x400
c000fa4d:	0f 23 f8             	mov    db7,eax
c000fa50:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fa5a:	e8 36 80 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000fa5f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fa65:	89 30                	mov    DWORD PTR [eax],esi
c000fa67:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fa6d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fa70:	58                   	pop    eax
c000fa71:	5a                   	pop    edx
c000fa72:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fa78:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fa7c:	e8 ab a1 ff ff       	call   c0009c2c <VAS::setCPUSpecific(unsigned long)>
c000fa81:	c7 04 24 ee e5 01 c0 	mov    DWORD PTR [esp],0xc001e5ee
c000fa88:	e8 c6 00 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c000fa8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa90:	e8 33 f7 ff ff       	call   c000f1c8 <CPU::detectFeatures()>
c000fa95:	c7 04 24 11 e6 01 c0 	mov    DWORD PTR [esp],0xc001e611
c000fa9c:	e8 b2 00 00 00       	call   c000fb53 <KeSetBootMessage(char const*)>
c000faa1:	e8 06 5c 00 00       	call   c00156ac <HalInitialise()>
c000faa6:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000faab:	83 e0 10             	and    eax,0x10
c000faae:	83 f8 01             	cmp    eax,0x1
c000fab1:	19 c0                	sbb    eax,eax
c000fab3:	83 e0 46             	and    eax,0x46
c000fab6:	83 c0 1e             	add    eax,0x1e
c000fab9:	89 04 24             	mov    DWORD PTR [esp],eax
c000fabc:	e8 60 d7 ff ff       	call   c000d221 <setupTimer(int)>
c000fac1:	83 c4 10             	add    esp,0x10
c000fac4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000faca:	f6 05 d0 1e 02 c0 20 	test   BYTE PTR ds:0xc0021ed0,0x20
c000fad1:	74 0c                	je     c000fadf <CPU::open(int, int, void*)+0xe3>
c000fad3:	83 ec 0c             	sub    esp,0xc
c000fad6:	53                   	push   ebx
c000fad7:	e8 54 fe ff ff       	call   c000f930 <CPU::setupFeatures()>
c000fadc:	83 c4 10             	add    esp,0x10
c000fadf:	5b                   	pop    ebx
c000fae0:	31 c0                	xor    eax,eax
c000fae2:	5e                   	pop    esi
c000fae3:	5f                   	pop    edi
c000fae4:	c3                   	ret    

c000fae5 <KeDisplaySplashScreen()>:
c000fae5:	55                   	push   ebp
c000fae6:	bd 05 00 00 00       	mov    ebp,0x5
c000faeb:	57                   	push   edi
c000faec:	bf e0 f7 01 c0       	mov    edi,0xc001f7e0
c000faf1:	56                   	push   esi
c000faf2:	be 0a 00 00 00       	mov    esi,0xa
c000faf7:	53                   	push   ebx
c000faf8:	31 db                	xor    ebx,ebx
c000fafa:	83 ec 0c             	sub    esp,0xc
c000fafd:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fb00:	84 c0                	test   al,al
c000fb02:	74 47                	je     c000fb4b <KeDisplaySplashScreen()+0x66>
c000fb04:	80 bb 16 f8 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe07ea],0xdb
c000fb0b:	75 13                	jne    c000fb20 <KeDisplaySplashScreen()+0x3b>
c000fb0d:	0f b6 93 15 f8 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe07eb]
c000fb14:	83 e2 fe             	and    edx,0xfffffffe
c000fb17:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fb1d:	75 01                	jne    c000fb20 <KeDisplaySplashScreen()+0x3b>
c000fb1f:	46                   	inc    esi
c000fb20:	3c 0d                	cmp    al,0xd
c000fb22:	74 24                	je     c000fb48 <KeDisplaySplashScreen()+0x63>
c000fb24:	3c 0a                	cmp    al,0xa
c000fb26:	75 0a                	jne    c000fb32 <KeDisplaySplashScreen()+0x4d>
c000fb28:	45                   	inc    ebp
c000fb29:	be 0a 00 00 00       	mov    esi,0xa
c000fb2e:	31 db                	xor    ebx,ebx
c000fb30:	eb 16                	jmp    c000fb48 <KeDisplaySplashScreen()+0x63>
c000fb32:	83 ec 0c             	sub    esp,0xc
c000fb35:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fb38:	55                   	push   ebp
c000fb39:	43                   	inc    ebx
c000fb3a:	52                   	push   edx
c000fb3b:	6a 00                	push   0x0
c000fb3d:	6a 0e                	push   0xe
c000fb3f:	50                   	push   eax
c000fb40:	e8 cb 67 00 00       	call   c0016310 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fb45:	83 c4 20             	add    esp,0x20
c000fb48:	47                   	inc    edi
c000fb49:	eb b2                	jmp    c000fafd <KeDisplaySplashScreen()+0x18>
c000fb4b:	83 c4 0c             	add    esp,0xc
c000fb4e:	5b                   	pop    ebx
c000fb4f:	5e                   	pop    esi
c000fb50:	5f                   	pop    edi
c000fb51:	5d                   	pop    ebp
c000fb52:	c3                   	ret    

c000fb53 <KeSetBootMessage(char const*)>:
c000fb53:	57                   	push   edi
c000fb54:	56                   	push   esi
c000fb55:	53                   	push   ebx
c000fb56:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fb5c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fb63:	68 9e 00 00 00       	push   0x9e
c000fb68:	6a 00                	push   0x0
c000fb6a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fb6e:	56                   	push   esi
c000fb6f:	e8 5c 09 ff ff       	call   c00004d0 <memset>
c000fb74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb77:	e8 c4 09 ff ff       	call   c0000540 <strlen>
c000fb7c:	ba 50 00 00 00       	mov    edx,0x50
c000fb81:	83 c4 10             	add    esp,0x10
c000fb84:	29 c2                	sub    edx,eax
c000fb86:	31 c9                	xor    ecx,ecx
c000fb88:	83 e2 fe             	and    edx,0xfffffffe
c000fb8b:	01 f2                	add    edx,esi
c000fb8d:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fb92:	84 c0                	test   al,al
c000fb94:	74 0a                	je     c000fba0 <KeSetBootMessage(char const*)+0x4d>
c000fb96:	80 cc 0f             	or     ah,0xf
c000fb99:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fb9d:	41                   	inc    ecx
c000fb9e:	eb ed                	jmp    c000fb8d <KeSetBootMessage(char const*)+0x3a>
c000fba0:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fba5:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fbaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbac:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fbb2:	5b                   	pop    ebx
c000fbb3:	5e                   	pop    esi
c000fbb4:	5f                   	pop    edi
c000fbb5:	c3                   	ret    

c000fbb6 <EnvVarContainer::getEnv(char const*)>:
c000fbb6:	57                   	push   edi
c000fbb7:	56                   	push   esi
c000fbb8:	53                   	push   ebx
c000fbb9:	31 db                	xor    ebx,ebx
c000fbbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbbf:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fbc1:	7e 2b                	jle    c000fbee <EnvVarContainer::getEnv(char const*)+0x38>
c000fbc3:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fbca:	50                   	push   eax
c000fbcb:	50                   	push   eax
c000fbcc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fbcf:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fbd2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fbd6:	e8 05 0b ff ff       	call   c00006e0 <strcmp>
c000fbdb:	83 c4 10             	add    esp,0x10
c000fbde:	85 c0                	test   eax,eax
c000fbe0:	75 09                	jne    c000fbeb <EnvVarContainer::getEnv(char const*)+0x35>
c000fbe2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fbe5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fbe9:	eb 05                	jmp    c000fbf0 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fbeb:	43                   	inc    ebx
c000fbec:	eb d1                	jmp    c000fbbf <EnvVarContainer::getEnv(char const*)+0x9>
c000fbee:	31 c0                	xor    eax,eax
c000fbf0:	5b                   	pop    ebx
c000fbf1:	5e                   	pop    esi
c000fbf2:	5f                   	pop    edi
c000fbf3:	c3                   	ret    

c000fbf4 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fbf4:	55                   	push   ebp
c000fbf5:	57                   	push   edi
c000fbf6:	56                   	push   esi
c000fbf7:	53                   	push   ebx
c000fbf8:	83 ec 28             	sub    esp,0x28
c000fbfb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fbff:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fc03:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fc07:	56                   	push   esi
c000fc08:	e8 33 09 ff ff       	call   c0000540 <strlen>
c000fc0d:	40                   	inc    eax
c000fc0e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc11:	e8 a3 7b ff ff       	call   c00077b9 <malloc>
c000fc16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fc1d:	e8 1e 09 ff ff       	call   c0000540 <strlen>
c000fc22:	40                   	inc    eax
c000fc23:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc26:	e8 8e 7b ff ff       	call   c00077b9 <malloc>
c000fc2b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc2e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fc32:	e8 09 09 ff ff       	call   c0000540 <strlen>
c000fc37:	83 c4 0c             	add    esp,0xc
c000fc3a:	40                   	inc    eax
c000fc3b:	50                   	push   eax
c000fc3c:	6a 00                	push   0x0
c000fc3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc42:	e8 89 08 ff ff       	call   c00004d0 <memset>
c000fc47:	89 34 24             	mov    DWORD PTR [esp],esi
c000fc4a:	e8 f1 08 ff ff       	call   c0000540 <strlen>
c000fc4f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fc53:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc5b:	89 de                	mov    esi,ebx
c000fc5d:	e8 de 08 ff ff       	call   c0000540 <strlen>
c000fc62:	83 c4 0c             	add    esp,0xc
c000fc65:	40                   	inc    eax
c000fc66:	50                   	push   eax
c000fc67:	6a 00                	push   0x0
c000fc69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc6d:	e8 5e 08 ff ff       	call   c00004d0 <memset>
c000fc72:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc75:	e8 c6 08 ff ff       	call   c0000540 <strlen>
c000fc7a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fc7e:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc81:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fc86:	40                   	inc    eax
c000fc87:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fc8a:	c1 e0 03             	shl    eax,0x3
c000fc8d:	5a                   	pop    edx
c000fc8e:	59                   	pop    ecx
c000fc8f:	50                   	push   eax
c000fc90:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fc93:	e8 0d 7b ff ff       	call   c00077a5 <realloc>
c000fc98:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fc9c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fc9f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fca2:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fca6:	b9 08 00 00 00       	mov    ecx,0x8
c000fcab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fcad:	83 c4 2c             	add    esp,0x2c
c000fcb0:	5b                   	pop    ebx
c000fcb1:	5e                   	pop    esi
c000fcb2:	5f                   	pop    edi
c000fcb3:	5d                   	pop    ebp
c000fcb4:	c3                   	ret    
c000fcb5:	90                   	nop

c000fcb6 <EnvVarContainer::deleteEnv(char const*)>:
c000fcb6:	c3                   	ret    
c000fcb7:	90                   	nop

c000fcb8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fcb8:	55                   	push   ebp
c000fcb9:	57                   	push   edi
c000fcba:	56                   	push   esi
c000fcbb:	53                   	push   ebx
c000fcbc:	81 ec 38 01 00 00    	sub    esp,0x138
c000fcc2:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fcc9:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fcd0:	68 14 01 00 00       	push   0x114
c000fcd5:	e8 df 7a ff ff       	call   c00077b9 <malloc>
c000fcda:	83 c4 0c             	add    esp,0xc
c000fcdd:	89 c3                	mov    ebx,eax
c000fcdf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fce2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fce9:	50                   	push   eax
c000fcea:	e8 d1 ad ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c000fcef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcf2:	e8 f7 b0 ff ff       	call   c000adee <File::exists()>
c000fcf7:	83 c4 10             	add    esp,0x10
c000fcfa:	84 c0                	test   al,al
c000fcfc:	75 31                	jne    c000fd2f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fcfe:	50                   	push   eax
c000fcff:	50                   	push   eax
c000fd00:	6a 12                	push   0x12
c000fd02:	53                   	push   ebx
c000fd03:	e8 78 ae ff ff       	call   c000ab80 <File::open(FileOpenMode)>
c000fd08:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fd0a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fd0d:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd10:	e8 2b 08 ff ff       	call   c0000540 <strlen>
c000fd15:	5a                   	pop    edx
c000fd16:	31 d2                	xor    edx,edx
c000fd18:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fd1c:	51                   	push   ecx
c000fd1d:	56                   	push   esi
c000fd1e:	52                   	push   edx
c000fd1f:	50                   	push   eax
c000fd20:	53                   	push   ebx
c000fd21:	ff d7                	call   edi
c000fd23:	83 c4 14             	add    esp,0x14
c000fd26:	53                   	push   ebx
c000fd27:	e8 b2 ae ff ff       	call   c000abde <File::close()>
c000fd2c:	83 c4 10             	add    esp,0x10
c000fd2f:	56                   	push   esi
c000fd30:	31 f6                	xor    esi,esi
c000fd32:	68 00 01 00 00       	push   0x100
c000fd37:	6a 00                	push   0x0
c000fd39:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fd3d:	50                   	push   eax
c000fd3e:	e8 8d 07 ff ff       	call   c00004d0 <memset>
c000fd43:	5f                   	pop    edi
c000fd44:	58                   	pop    eax
c000fd45:	6a 01                	push   0x1
c000fd47:	53                   	push   ebx
c000fd48:	e8 33 ae ff ff       	call   c000ab80 <File::open(FileOpenMode)>
c000fd4d:	83 c4 10             	add    esp,0x10
c000fd50:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fd58:	83 ec 0c             	sub    esp,0xc
c000fd5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fd5d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fd61:	51                   	push   ecx
c000fd62:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fd66:	52                   	push   edx
c000fd67:	6a 00                	push   0x0
c000fd69:	6a 01                	push   0x1
c000fd6b:	53                   	push   ebx
c000fd6c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd6f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fd73:	83 c4 20             	add    esp,0x20
c000fd76:	3c 0d                	cmp    al,0xd
c000fd78:	0f 84 09 01 00 00    	je     c000fe87 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fd7e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd83:	0f 84 ef 00 00 00    	je     c000fe78 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd89:	3c 0a                	cmp    al,0xa
c000fd8b:	74 13                	je     c000fda0 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd8d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fd92:	74 0c                	je     c000fda0 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd94:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fd9a:	0f 8e d8 00 00 00    	jle    c000fe78 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fda0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fda4:	83 ec 0c             	sub    esp,0xc
c000fda7:	8d 78 01             	lea    edi,[eax+0x1]
c000fdaa:	57                   	push   edi
c000fdab:	e8 09 7a ff ff       	call   c00077b9 <malloc>
c000fdb0:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fdb4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fdb8:	8d 56 04             	lea    edx,[esi+0x4]
c000fdbb:	89 14 24             	mov    DWORD PTR [esp],edx
c000fdbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fdc2:	e8 f2 79 ff ff       	call   c00077b9 <malloc>
c000fdc7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fdcb:	83 c4 0c             	add    esp,0xc
c000fdce:	57                   	push   edi
c000fdcf:	6a 00                	push   0x0
c000fdd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fdd5:	e8 f6 06 ff ff       	call   c00004d0 <memset>
c000fdda:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fdde:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fde2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fde6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fde8:	83 c4 0c             	add    esp,0xc
c000fdeb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fdef:	52                   	push   edx
c000fdf0:	6a 00                	push   0x0
c000fdf2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fdf6:	e8 d5 06 ff ff       	call   c00004d0 <memset>
c000fdfb:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fdff:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fe03:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe06:	e8 35 07 ff ff       	call   c0000540 <strlen>
c000fe0b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fe0f:	89 c1                	mov    ecx,eax
c000fe11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe13:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fe16:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fe19:	40                   	inc    eax
c000fe1a:	83 c4 10             	add    esp,0x10
c000fe1d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fe20:	85 d2                	test   edx,edx
c000fe22:	75 0c                	jne    c000fe30 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fe24:	83 ec 0c             	sub    esp,0xc
c000fe27:	6a 08                	push   0x8
c000fe29:	e8 8b 79 ff ff       	call   c00077b9 <malloc>
c000fe2e:	eb 0c                	jmp    c000fe3c <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fe30:	c1 e0 03             	shl    eax,0x3
c000fe33:	51                   	push   ecx
c000fe34:	51                   	push   ecx
c000fe35:	50                   	push   eax
c000fe36:	52                   	push   edx
c000fe37:	e8 69 79 ff ff       	call   c00077a5 <realloc>
c000fe3c:	83 c4 10             	add    esp,0x10
c000fe3f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fe42:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fe45:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fe48:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fe4c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fe50:	b9 08 00 00 00       	mov    ecx,0x8
c000fe55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe57:	31 f6                	xor    esi,esi
c000fe59:	50                   	push   eax
c000fe5a:	68 00 01 00 00       	push   0x100
c000fe5f:	6a 00                	push   0x0
c000fe61:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fe65:	50                   	push   eax
c000fe66:	e8 65 06 ff ff       	call   c00004d0 <memset>
c000fe6b:	83 c4 10             	add    esp,0x10
c000fe6e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe76:	eb 0f                	jmp    c000fe87 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe78:	3c 3d                	cmp    al,0x3d
c000fe7a:	74 07                	je     c000fe83 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fe7c:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fe80:	46                   	inc    esi
c000fe81:	eb 04                	jmp    c000fe87 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe83:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fe87:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe8c:	0f 85 c6 fe ff ff    	jne    c000fd58 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fe92:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fe98:	5b                   	pop    ebx
c000fe99:	5e                   	pop    esi
c000fe9a:	5f                   	pop    edi
c000fe9b:	5d                   	pop    ebp
c000fe9c:	c3                   	ret    
c000fe9d:	90                   	nop

c000fe9e <EnvVarContainer::__loadSystem()>:
c000fe9e:	83 ec 10             	sub    esp,0x10
c000fea1:	68 40 f9 01 c0       	push   0xc001f940
c000fea6:	68 54 e6 01 c0       	push   0xc001e654
c000feab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feaf:	e8 04 fe ff ff       	call   c000fcb8 <EnvVarContainer::loadFrom(char const*, char const*)>
c000feb4:	83 c4 1c             	add    esp,0x1c
c000feb7:	c3                   	ret    

c000feb8 <EnvVarContainer::__loadUser()>:
c000feb8:	c3                   	ret    
c000feb9:	90                   	nop

c000feba <EnvVarContainer::EnvVarContainer(Process*)>:
c000feba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000febe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fec8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fecc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fecf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fed3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000feda:	90                   	nop
c000fedb:	c3                   	ret    

c000fedc <EnvVarContainer::~EnvVarContainer()>:
c000fedc:	83 ec 0c             	sub    esp,0xc
c000fedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fee6:	85 c0                	test   eax,eax
c000fee8:	74 1d                	je     c000ff07 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000feea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feee:	8b 00                	mov    eax,DWORD PTR [eax]
c000fef0:	85 c0                	test   eax,eax
c000fef2:	74 13                	je     c000ff07 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fef8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fefb:	83 ec 0c             	sub    esp,0xc
c000fefe:	50                   	push   eax
c000feff:	e8 c5 78 ff ff       	call   c00077c9 <free>
c000ff04:	83 c4 10             	add    esp,0x10
c000ff07:	90                   	nop
c000ff08:	83 c4 0c             	add    esp,0xc
c000ff0b:	c3                   	ret    

c000ff0c <Krnl::getEnv(Process*, char const*)>:
c000ff0c:	53                   	push   ebx
c000ff0d:	83 ec 08             	sub    esp,0x8
c000ff10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff14:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ff18:	39 05 90 51 02 c0    	cmp    DWORD PTR ds:0xc0025190,eax
c000ff1e:	74 04                	je     c000ff24 <Krnl::getEnv(Process*, char const*)+0x18>
c000ff20:	85 c0                	test   eax,eax
c000ff22:	75 0b                	jne    c000ff2f <Krnl::getEnv(Process*, char const*)+0x23>
c000ff24:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000ff29:	85 c0                	test   eax,eax
c000ff2b:	75 19                	jne    c000ff46 <Krnl::getEnv(Process*, char const*)+0x3a>
c000ff2d:	eb 27                	jmp    c000ff56 <Krnl::getEnv(Process*, char const*)+0x4a>
c000ff2f:	52                   	push   edx
c000ff30:	52                   	push   edx
c000ff31:	53                   	push   ebx
c000ff32:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000ff38:	e8 79 fc ff ff       	call   c000fbb6 <EnvVarContainer::getEnv(char const*)>
c000ff3d:	83 c4 10             	add    esp,0x10
c000ff40:	85 c0                	test   eax,eax
c000ff42:	75 28                	jne    c000ff6c <Krnl::getEnv(Process*, char const*)+0x60>
c000ff44:	eb de                	jmp    c000ff24 <Krnl::getEnv(Process*, char const*)+0x18>
c000ff46:	52                   	push   edx
c000ff47:	52                   	push   edx
c000ff48:	53                   	push   ebx
c000ff49:	50                   	push   eax
c000ff4a:	e8 67 fc ff ff       	call   c000fbb6 <EnvVarContainer::getEnv(char const*)>
c000ff4f:	83 c4 10             	add    esp,0x10
c000ff52:	85 c0                	test   eax,eax
c000ff54:	75 16                	jne    c000ff6c <Krnl::getEnv(Process*, char const*)+0x60>
c000ff56:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ff5a:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c000ff5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff63:	83 c4 08             	add    esp,0x8
c000ff66:	5b                   	pop    ebx
c000ff67:	e9 4a fc ff ff       	jmp    c000fbb6 <EnvVarContainer::getEnv(char const*)>
c000ff6c:	83 c4 08             	add    esp,0x8
c000ff6f:	5b                   	pop    ebx
c000ff70:	c3                   	ret    

c000ff71 <Krnl::setEnvSystem(char const*, char const*)>:
c000ff71:	83 ec 10             	sub    esp,0x10
c000ff74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff7c:	ff 35 34 49 02 c0    	push   DWORD PTR ds:0xc0024934
c000ff82:	e8 6d fc ff ff       	call   c000fbf4 <EnvVarContainer::setEnv(char const*, char const*)>
c000ff87:	83 c4 1c             	add    esp,0x1c
c000ff8a:	c3                   	ret    

c000ff8b <Krnl::setEnvUser(char const*, char const*)>:
c000ff8b:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000ff90:	85 c0                	test   eax,eax
c000ff92:	74 15                	je     c000ffa9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000ff94:	83 ec 10             	sub    esp,0x10
c000ff97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff9f:	50                   	push   eax
c000ffa0:	e8 4f fc ff ff       	call   c000fbf4 <EnvVarContainer::setEnv(char const*, char const*)>
c000ffa5:	83 c4 1c             	add    esp,0x1c
c000ffa8:	c3                   	ret    
c000ffa9:	c3                   	ret    

c000ffaa <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ffaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffae:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000ffb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ffb8:	e9 37 fc ff ff       	jmp    c000fbf4 <EnvVarContainer::setEnv(char const*, char const*)>

c000ffbd <Krnl::deleteEnvSystem(char const*)>:
c000ffbd:	c3                   	ret    

c000ffbe <Krnl::deleteEnvUser(char const*)>:
c000ffbe:	c3                   	ret    

c000ffbf <Krnl::deleteEnvProcess(Process*, char const*)>:
c000ffbf:	c3                   	ret    

c000ffc0 <Krnl::newProcessEnv(Process*)>:
c000ffc0:	83 ec 28             	sub    esp,0x28
c000ffc3:	6a 0c                	push   0xc
c000ffc5:	e8 ef 77 ff ff       	call   c00077b9 <malloc>
c000ffca:	5a                   	pop    edx
c000ffcb:	59                   	pop    ecx
c000ffcc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ffd0:	50                   	push   eax
c000ffd1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ffd5:	e8 e0 fe ff ff       	call   c000feba <EnvVarContainer::EnvVarContainer(Process*)>
c000ffda:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffde:	83 c4 2c             	add    esp,0x2c
c000ffe1:	c3                   	ret    

c000ffe2 <Krnl::copyProcessEnv(Process*, Process*)>:
c000ffe2:	57                   	push   edi
c000ffe3:	56                   	push   esi
c000ffe4:	53                   	push   ebx
c000ffe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffe9:	83 ec 0c             	sub    esp,0xc
c000ffec:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000fff2:	6a 0c                	push   0xc
c000fff4:	e8 c0 77 ff ff       	call   c00077b9 <malloc>
c000fff9:	89 c3                	mov    ebx,eax
c000fffb:	58                   	pop    eax
c000fffc:	5a                   	pop    edx
c000fffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010001:	53                   	push   ebx
c0010002:	e8 b3 fe ff ff       	call   c000feba <EnvVarContainer::EnvVarContainer(Process*)>
c0010007:	8b 07                	mov    eax,DWORD PTR [edi]
c0010009:	89 03                	mov    DWORD PTR [ebx],eax
c001000b:	c1 e0 03             	shl    eax,0x3
c001000e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010011:	e8 a3 77 ff ff       	call   c00077b9 <malloc>
c0010016:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010019:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001001b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001001e:	c1 e1 03             	shl    ecx,0x3
c0010021:	89 c7                	mov    edi,eax
c0010023:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010025:	83 c4 10             	add    esp,0x10
c0010028:	89 d8                	mov    eax,ebx
c001002a:	5b                   	pop    ebx
c001002b:	5e                   	pop    esi
c001002c:	5f                   	pop    edi
c001002d:	c3                   	ret    

c001002e <Krnl::loadSystemEnv()>:
c001002e:	53                   	push   ebx
c001002f:	83 ec 14             	sub    esp,0x14
c0010032:	6a 0c                	push   0xc
c0010034:	e8 80 77 ff ff       	call   c00077b9 <malloc>
c0010039:	89 c3                	mov    ebx,eax
c001003b:	58                   	pop    eax
c001003c:	5a                   	pop    edx
c001003d:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0010043:	53                   	push   ebx
c0010044:	e8 71 fe ff ff       	call   c000feba <EnvVarContainer::EnvVarContainer(Process*)>
c0010049:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001004c:	89 1d 34 49 02 c0    	mov    DWORD PTR ds:0xc0024934,ebx
c0010052:	e8 47 fe ff ff       	call   c000fe9e <EnvVarContainer::__loadSystem()>
c0010057:	83 c4 18             	add    esp,0x18
c001005a:	5b                   	pop    ebx
c001005b:	c3                   	ret    

c001005c <Krnl::loadUserEnv()>:
c001005c:	53                   	push   ebx
c001005d:	83 ec 14             	sub    esp,0x14
c0010060:	6a 0c                	push   0xc
c0010062:	e8 52 77 ff ff       	call   c00077b9 <malloc>
c0010067:	89 c3                	mov    ebx,eax
c0010069:	58                   	pop    eax
c001006a:	5a                   	pop    edx
c001006b:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0010071:	53                   	push   ebx
c0010072:	e8 43 fe ff ff       	call   c000feba <EnvVarContainer::EnvVarContainer(Process*)>
c0010077:	89 1d 30 49 02 c0    	mov    DWORD PTR ds:0xc0024930,ebx
c001007d:	83 c4 18             	add    esp,0x18
c0010080:	5b                   	pop    ebx
c0010081:	c3                   	ret    

c0010082 <Krnl::flushEnv()>:
c0010082:	c3                   	ret    

c0010083 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010083:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010087:	8b 15 30 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024930
c001008d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010093:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c0010098:	8b 00                	mov    eax,DWORD PTR [eax]
c001009a:	03 01                	add    eax,DWORD PTR [ecx]
c001009c:	85 d2                	test   edx,edx
c001009e:	74 02                	je     c00100a2 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00100a0:	03 02                	add    eax,DWORD PTR [edx]
c00100a2:	c3                   	ret    

c00100a3 <Krnl::getProcessEnvPair(Process*, int)>:
c00100a3:	57                   	push   edi
c00100a4:	56                   	push   esi
c00100a5:	8b 35 30 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024930
c00100ab:	53                   	push   ebx
c00100ac:	85 f6                	test   esi,esi
c00100ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100b6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00100bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00100c0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00100c2:	75 16                	jne    c00100da <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00100c4:	39 c2                	cmp    edx,eax
c00100c6:	7c 16                	jl     c00100de <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00100c8:	8b 0d 34 49 02 c0    	mov    ecx,DWORD PTR ds:0xc0024934
c00100ce:	8b 31                	mov    esi,DWORD PTR [ecx]
c00100d0:	01 c6                	add    esi,eax
c00100d2:	39 d6                	cmp    esi,edx
c00100d4:	7e 3c                	jle    c0010112 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00100d6:	29 c2                	sub    edx,eax
c00100d8:	eb 04                	jmp    c00100de <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00100da:	39 c2                	cmp    edx,eax
c00100dc:	7d 05                	jge    c00100e3 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00100de:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00100e1:	eb 20                	jmp    c0010103 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00100e3:	8b 3e                	mov    edi,DWORD PTR [esi]
c00100e5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00100e8:	39 d1                	cmp    ecx,edx
c00100ea:	7e 04                	jle    c00100f0 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00100ec:	29 c2                	sub    edx,eax
c00100ee:	eb 10                	jmp    c0010100 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00100f0:	8b 35 34 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024934
c00100f6:	03 0e                	add    ecx,DWORD PTR [esi]
c00100f8:	39 d1                	cmp    ecx,edx
c00100fa:	7e 16                	jle    c0010112 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00100fc:	29 c2                	sub    edx,eax
c00100fe:	29 fa                	sub    edx,edi
c0010100:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010103:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010106:	8b 02                	mov    eax,DWORD PTR [edx]
c0010108:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001010b:	89 03                	mov    DWORD PTR [ebx],eax
c001010d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010110:	eb 1d                	jmp    c001012f <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010112:	83 ec 0c             	sub    esp,0xc
c0010115:	68 76 e6 01 c0       	push   0xc001e676
c001011a:	e8 ac 00 00 00       	call   c00101cb <KePanic(char const*)>
c001011f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010125:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001012c:	83 c4 10             	add    esp,0x10
c001012f:	89 d8                	mov    eax,ebx
c0010131:	5b                   	pop    ebx
c0010132:	5e                   	pop    esi
c0010133:	5f                   	pop    edi
c0010134:	c2 04 00             	ret    0x4

c0010137 <CPU::current()>:
c0010137:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001013c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010142:	c3                   	ret    

c0010143 <operator new(unsigned long)>:
c0010143:	e9 71 76 ff ff       	jmp    c00077b9 <malloc>

c0010148 <operator delete(void*)>:
c0010148:	e9 8c 76 ff ff       	jmp    c00077d9 <rfree>

c001014d <disableIRQs()>:
c001014d:	fa                   	cli    
c001014e:	c3                   	ret    

c001014f <enableIRQs()>:
c001014f:	fb                   	sti    
c0010150:	c3                   	ret    

c0010151 <lockScheduler()>:
c0010151:	fa                   	cli    
c0010152:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0010158:	c3                   	ret    

c0010159 <unlockScheduler()>:
c0010159:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001015e:	48                   	dec    eax
c001015f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0010164:	75 01                	jne    c0010167 <unlockScheduler()+0xe>
c0010166:	fb                   	sti    
c0010167:	c3                   	ret    

c0010168 <lockStuff()>:
c0010168:	fa                   	cli    
c0010169:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001016f:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0010175:	c3                   	ret    

c0010176 <unlockStuff()>:
c0010176:	83 ec 0c             	sub    esp,0xc
c0010179:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001017e:	48                   	dec    eax
c001017f:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0010184:	75 18                	jne    c001019e <unlockStuff()+0x28>
c0010186:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c001018d:	74 0f                	je     c001019e <unlockStuff()+0x28>
c001018f:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0010199:	e8 02 36 00 00       	call   c00137a0 <schedule()>
c001019e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00101a3:	48                   	dec    eax
c00101a4:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00101a9:	75 01                	jne    c00101ac <unlockStuff()+0x36>
c00101ab:	fb                   	sti    
c00101ac:	83 c4 0c             	add    esp,0xc
c00101af:	c3                   	ret    

c00101b0 <Virt::getAKernelVAS()>:
c00101b0:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c00101b5:	c3                   	ret    

c00101b6 <__not_memcpy>:
c00101b6:	57                   	push   edi
c00101b7:	56                   	push   esi
c00101b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00101bc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00101c4:	89 c7                	mov    edi,eax
c00101c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101c8:	5e                   	pop    esi
c00101c9:	5f                   	pop    edi
c00101ca:	c3                   	ret    

c00101cb <KePanic(char const*)>:
c00101cb:	c6 05 38 49 02 c0 01 	mov    BYTE PTR ds:0xc0024938,0x1
c00101d2:	e9 c1 53 00 00       	jmp    c0015598 <HalPanic(char const*)>

c00101d7 <Krnl::powerThread(void*)>:
c00101d7:	83 ec 0c             	sub    esp,0xc
c00101da:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00101df:	48                   	dec    eax
c00101e0:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00101e5:	75 01                	jne    c00101e8 <Krnl::powerThread(void*)+0x11>
c00101e7:	fb                   	sti    
c00101e8:	83 ec 0c             	sub    esp,0xc
c00101eb:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c00101f2:	6a 0a                	push   0xa
c00101f4:	e8 b7 38 00 00       	call   c0013ab0 <sleep(unsigned int)>
c00101f9:	83 05 84 49 02 c0 0a 	add    DWORD PTR ds:0xc0024984,0xa
c0010200:	83 c4 10             	add    esp,0x10
c0010203:	eb e3                	jmp    c00101e8 <Krnl::powerThread(void*)+0x11>

c0010205 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010205:	57                   	push   edi
c0010206:	b9 09 00 00 00       	mov    ecx,0x9
c001020b:	56                   	push   esi
c001020c:	bf 60 49 02 c0       	mov    edi,0xc0024960
c0010211:	fc                   	cld    
c0010212:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010216:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010218:	5e                   	pop    esi
c0010219:	5f                   	pop    edi
c001021a:	c3                   	ret    

c001021b <Krnl::userIOReceived()>:
c001021b:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c0010225:	c3                   	ret    

c0010226 <Krnl::handlePowerButton()>:
c0010226:	83 ec 0c             	sub    esp,0xc
c0010229:	a1 60 49 02 c0       	mov    eax,ds:0xc0024960
c001022e:	83 f8 02             	cmp    eax,0x2
c0010231:	75 10                	jne    c0010243 <Krnl::handlePowerButton()+0x1d>
c0010233:	83 ec 0c             	sub    esp,0xc
c0010236:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001023c:	e8 15 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c0010241:	eb 11                	jmp    c0010254 <Krnl::handlePowerButton()+0x2e>
c0010243:	48                   	dec    eax
c0010244:	75 11                	jne    c0010257 <Krnl::handlePowerButton()+0x31>
c0010246:	83 ec 0c             	sub    esp,0xc
c0010249:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001024f:	e8 32 6c ff ff       	call   c0006e86 <Computer::sleep()>
c0010254:	83 c4 10             	add    esp,0x10
c0010257:	83 c4 0c             	add    esp,0xc
c001025a:	c3                   	ret    

c001025b <Krnl::handleSleepButton()>:
c001025b:	83 ec 0c             	sub    esp,0xc
c001025e:	a1 64 49 02 c0       	mov    eax,ds:0xc0024964
c0010263:	83 f8 02             	cmp    eax,0x2
c0010266:	75 10                	jne    c0010278 <Krnl::handleSleepButton()+0x1d>
c0010268:	83 ec 0c             	sub    esp,0xc
c001026b:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010271:	e8 e0 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c0010276:	eb 11                	jmp    c0010289 <Krnl::handleSleepButton()+0x2e>
c0010278:	48                   	dec    eax
c0010279:	75 11                	jne    c001028c <Krnl::handleSleepButton()+0x31>
c001027b:	83 ec 0c             	sub    esp,0xc
c001027e:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010284:	e8 fd 6b ff ff       	call   c0006e86 <Computer::sleep()>
c0010289:	83 c4 10             	add    esp,0x10
c001028c:	83 c4 0c             	add    esp,0xc
c001028f:	c3                   	ret    

c0010290 <Krnl::setupPowerManager()>:
c0010290:	83 ec 0c             	sub    esp,0xc
c0010293:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c001029d:	68 f0 00 00 00       	push   0xf0
c00102a2:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c00102a9:	6a 00                	push   0x0
c00102ab:	68 d7 01 01 c0       	push   0xc00101d7
c00102b0:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00102b6:	e8 c5 32 00 00       	call   c0013580 <Process::createThread(void (*)(void*), void*, int)>
c00102bb:	c7 05 60 49 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0024960,0x2
c00102c5:	c7 05 64 49 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024964,0x1
c00102cf:	c7 05 68 49 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0024968,0x3
c00102d9:	c7 05 6c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002496c,0x0
c00102e3:	c7 05 78 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024978,0x0
c00102ed:	c7 05 70 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024970,0x0
c00102f7:	c7 05 7c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002497c,0x0
c0010301:	c7 05 74 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024974,0x3c
c001030b:	c7 05 80 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024980,0x3c
c0010315:	83 c4 1c             	add    esp,0x1c
c0010318:	c3                   	ret    
c0010319:	66 90                	xchg   ax,ax
c001031b:	90                   	nop

c001031c <KeResolveCompatibilitySymbol(char*)>:
c001031c:	83 ec 0c             	sub    esp,0xc
c001031f:	83 ec 08             	sub    esp,0x8
c0010322:	68 90 e6 01 c0       	push   0xc001e690
c0010327:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001032b:	e8 b0 03 ff ff       	call   c00006e0 <strcmp>
c0010330:	83 c4 10             	add    esp,0x10
c0010333:	85 c0                	test   eax,eax
c0010335:	0f 94 c0             	sete   al
c0010338:	84 c0                	test   al,al
c001033a:	74 0c                	je     c0010348 <KeResolveCompatibilitySymbol(char*)+0x2c>
c001033c:	b8 b8 1e 02 c0       	mov    eax,0xc0021eb8
c0010341:	e9 62 01 00 00       	jmp    c00104a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010346:	66 90                	xchg   ax,ax
c0010348:	83 ec 08             	sub    esp,0x8
c001034b:	68 99 e6 01 c0       	push   0xc001e699
c0010350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010354:	e8 87 03 ff ff       	call   c00006e0 <strcmp>
c0010359:	83 c4 10             	add    esp,0x10
c001035c:	85 c0                	test   eax,eax
c001035e:	0f 94 c0             	sete   al
c0010361:	84 c0                	test   al,al
c0010363:	74 0b                	je     c0010370 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010365:	b8 00 c1 01 c0       	mov    eax,0xc001c100
c001036a:	e9 39 01 00 00       	jmp    c00104a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001036f:	90                   	nop
c0010370:	83 ec 08             	sub    esp,0x8
c0010373:	68 a3 e6 01 c0       	push   0xc001e6a3
c0010378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001037c:	e8 5f 03 ff ff       	call   c00006e0 <strcmp>
c0010381:	83 c4 10             	add    esp,0x10
c0010384:	85 c0                	test   eax,eax
c0010386:	0f 94 c0             	sete   al
c0010389:	84 c0                	test   al,al
c001038b:	74 0b                	je     c0010398 <KeResolveCompatibilitySymbol(char*)+0x7c>
c001038d:	b8 34 be 01 c0       	mov    eax,0xc001be34
c0010392:	e9 11 01 00 00       	jmp    c00104a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010397:	90                   	nop
c0010398:	83 ec 08             	sub    esp,0x8
c001039b:	68 ac e6 01 c0       	push   0xc001e6ac
c00103a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103a4:	e8 37 03 ff ff       	call   c00006e0 <strcmp>
c00103a9:	83 c4 10             	add    esp,0x10
c00103ac:	85 c0                	test   eax,eax
c00103ae:	0f 94 c0             	sete   al
c00103b1:	84 c0                	test   al,al
c00103b3:	74 0b                	je     c00103c0 <KeResolveCompatibilitySymbol(char*)+0xa4>
c00103b5:	b8 cb 01 01 c0       	mov    eax,0xc00101cb
c00103ba:	e9 e9 00 00 00       	jmp    c00104a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103bf:	90                   	nop
c00103c0:	83 ec 08             	sub    esp,0x8
c00103c3:	68 bf e6 01 c0       	push   0xc001e6bf
c00103c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103cc:	e8 0f 03 ff ff       	call   c00006e0 <strcmp>
c00103d1:	83 c4 10             	add    esp,0x10
c00103d4:	85 c0                	test   eax,eax
c00103d6:	0f 94 c0             	sete   al
c00103d9:	84 c0                	test   al,al
c00103db:	74 0b                	je     c00103e8 <KeResolveCompatibilitySymbol(char*)+0xcc>
c00103dd:	b8 53 fb 00 c0       	mov    eax,0xc000fb53
c00103e2:	e9 c1 00 00 00       	jmp    c00104a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103e7:	90                   	nop
c00103e8:	83 ec 08             	sub    esp,0x8
c00103eb:	68 dc e6 01 c0       	push   0xc001e6dc
c00103f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103f4:	e8 e7 02 ff ff       	call   c00006e0 <strcmp>
c00103f9:	83 c4 10             	add    esp,0x10
c00103fc:	85 c0                	test   eax,eax
c00103fe:	0f 94 c0             	sete   al
c0010401:	84 c0                	test   al,al
c0010403:	74 0b                	je     c0010410 <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010405:	b8 00 c2 01 c0       	mov    eax,0xc001c200
c001040a:	e9 99 00 00 00       	jmp    c00104a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001040f:	90                   	nop
c0010410:	83 ec 08             	sub    esp,0x8
c0010413:	68 e6 e6 01 c0       	push   0xc001e6e6
c0010418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001041c:	e8 bf 02 ff ff       	call   c00006e0 <strcmp>
c0010421:	83 c4 10             	add    esp,0x10
c0010424:	85 c0                	test   eax,eax
c0010426:	0f 94 c0             	sete   al
c0010429:	84 c0                	test   al,al
c001042b:	74 07                	je     c0010434 <KeResolveCompatibilitySymbol(char*)+0x118>
c001042d:	b8 80 bf 01 c0       	mov    eax,0xc001bf80
c0010432:	eb 74                	jmp    c00104a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010434:	83 ec 08             	sub    esp,0x8
c0010437:	68 ef e6 01 c0       	push   0xc001e6ef
c001043c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010440:	e8 9b 02 ff ff       	call   c00006e0 <strcmp>
c0010445:	83 c4 10             	add    esp,0x10
c0010448:	85 c0                	test   eax,eax
c001044a:	0f 94 c0             	sete   al
c001044d:	84 c0                	test   al,al
c001044f:	74 07                	je     c0010458 <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010451:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c0010456:	eb 50                	jmp    c00104a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010458:	83 ec 08             	sub    esp,0x8
c001045b:	68 07 e7 01 c0       	push   0xc001e707
c0010460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010464:	e8 77 02 ff ff       	call   c00006e0 <strcmp>
c0010469:	83 c4 10             	add    esp,0x10
c001046c:	85 c0                	test   eax,eax
c001046e:	0f 94 c0             	sete   al
c0010471:	84 c0                	test   al,al
c0010473:	74 07                	je     c001047c <KeResolveCompatibilitySymbol(char*)+0x160>
c0010475:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c001047a:	eb 2c                	jmp    c00104a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001047c:	83 ec 08             	sub    esp,0x8
c001047f:	68 14 e7 01 c0       	push   0xc001e714
c0010484:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010488:	e8 53 02 ff ff       	call   c00006e0 <strcmp>
c001048d:	83 c4 10             	add    esp,0x10
c0010490:	85 c0                	test   eax,eax
c0010492:	0f 94 c0             	sete   al
c0010495:	84 c0                	test   al,al
c0010497:	74 07                	je     c00104a0 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010499:	b8 bd 1e 02 c0       	mov    eax,0xc0021ebd
c001049e:	eb 08                	jmp    c00104a8 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104a0:	b8 00 00 00 00       	mov    eax,0x0
c00104a5:	8d 76 00             	lea    esi,[esi+0x0]
c00104a8:	83 c4 0c             	add    esp,0xc
c00104ab:	c3                   	ret    

c00104ac <KiSigKill(int)>:
c00104ac:	57                   	push   edi
c00104ad:	b9 0a 00 00 00       	mov    ecx,0xa
c00104b2:	56                   	push   esi
c00104b3:	be 5d e7 01 c0       	mov    esi,0xc001e75d
c00104b8:	83 ec 14             	sub    esp,0x14
c00104bb:	8d 7c 24 06          	lea    edi,[esp+0x6]
c00104bf:	fc                   	cld    
c00104c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104c2:	8d 44 24 06          	lea    eax,[esp+0x6]
c00104c6:	50                   	push   eax
c00104c7:	6a 00                	push   0x0
c00104c9:	6a 00                	push   0x0
c00104cb:	6a 27                	push   0x27
c00104cd:	e8 80 fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00104d2:	83 c4 24             	add    esp,0x24
c00104d5:	5e                   	pop    esi
c00104d6:	5f                   	pop    edi
c00104d7:	c3                   	ret    

c00104d8 <KiDefaultSignalHandlerIgnore(int)>:
c00104d8:	c3                   	ret    

c00104d9 <KiDefaultSignalHandlerPause(int)>:
c00104d9:	57                   	push   edi
c00104da:	b9 07 00 00 00       	mov    ecx,0x7
c00104df:	56                   	push   esi
c00104e0:	be 67 e7 01 c0       	mov    esi,0xc001e767
c00104e5:	83 ec 24             	sub    esp,0x24
c00104e8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00104ec:	fc                   	cld    
c00104ed:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00104ef:	8d 44 24 04          	lea    eax,[esp+0x4]
c00104f3:	50                   	push   eax
c00104f4:	6a 00                	push   0x0
c00104f6:	6a 00                	push   0x0
c00104f8:	6a 27                	push   0x27
c00104fa:	e8 53 fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00104ff:	83 c4 34             	add    esp,0x34
c0010502:	5e                   	pop    esi
c0010503:	5f                   	pop    edi
c0010504:	c3                   	ret    

c0010505 <KiDefaultSignalHandlerResume(int)>:
c0010505:	57                   	push   edi
c0010506:	b9 1d 00 00 00       	mov    ecx,0x1d
c001050b:	56                   	push   esi
c001050c:	be 83 e7 01 c0       	mov    esi,0xc001e783
c0010511:	83 ec 24             	sub    esp,0x24
c0010514:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010518:	fc                   	cld    
c0010519:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001051b:	8d 44 24 03          	lea    eax,[esp+0x3]
c001051f:	50                   	push   eax
c0010520:	6a 00                	push   0x0
c0010522:	6a 00                	push   0x0
c0010524:	6a 27                	push   0x27
c0010526:	e8 27 fb 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001052b:	83 c4 34             	add    esp,0x34
c001052e:	5e                   	pop    esi
c001052f:	5f                   	pop    edi
c0010530:	c3                   	ret    

c0010531 <KeDeinitSignals(SigHandlerBlock*)>:
c0010531:	e9 93 72 ff ff       	jmp    c00077c9 <free>

c0010536 <KeInitSignals()>:
c0010536:	53                   	push   ebx
c0010537:	83 ec 14             	sub    esp,0x14
c001053a:	68 c8 00 00 00       	push   0xc8
c001053f:	e8 75 72 ff ff       	call   c00077b9 <malloc>
c0010544:	83 c4 0c             	add    esp,0xc
c0010547:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010551:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001055b:	89 c3                	mov    ebx,eax
c001055d:	6a 20                	push   0x20
c001055f:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010565:	6a 00                	push   0x0
c0010567:	50                   	push   eax
c0010568:	e8 63 ff fe ff       	call   c00004d0 <memset>
c001056d:	83 c4 0c             	add    esp,0xc
c0010570:	6a 44                	push   0x44
c0010572:	6a 00                	push   0x0
c0010574:	53                   	push   ebx
c0010575:	e8 56 ff fe ff       	call   c00004d0 <memset>
c001057a:	89 d8                	mov    eax,ebx
c001057c:	83 c4 18             	add    esp,0x18
c001057f:	5b                   	pop    ebx
c0010580:	c3                   	ret    

c0010581 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010581:	53                   	push   ebx
c0010582:	b8 01 00 00 00       	mov    eax,0x1
c0010587:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001058b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001058f:	83 f9 10             	cmp    ecx,0x10
c0010592:	7f 21                	jg     c00105b5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010594:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001059b:	89 03                	mov    DWORD PTR [ebx],eax
c001059d:	b8 01 00 00 00       	mov    eax,0x1
c00105a2:	d3 e0                	shl    eax,cl
c00105a4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00105a8:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00105ab:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00105b3:	31 c0                	xor    eax,eax
c00105b5:	5b                   	pop    ebx
c00105b6:	c3                   	ret    

c00105b7 <KeRaiseSignal(SigHandlerBlock*, int)>:
c00105b7:	55                   	push   ebp
c00105b8:	57                   	push   edi
c00105b9:	bf 08 00 00 00       	mov    edi,0x8
c00105be:	56                   	push   esi
c00105bf:	53                   	push   ebx
c00105c0:	83 ec 18             	sub    esp,0x18
c00105c3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00105c7:	68 a0 e7 01 c0       	push   0xc001e7a0
c00105cc:	e8 79 9f ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c00105d1:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00105d8:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00105de:	83 c4 10             	add    esp,0x10
c00105e1:	31 c9                	xor    ecx,ecx
c00105e3:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00105e7:	99                   	cdq    
c00105e8:	f7 ff                	idiv   edi
c00105ea:	8d 42 24             	lea    eax,[edx+0x24]
c00105ed:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00105f1:	85 f6                	test   esi,esi
c00105f3:	75 1a                	jne    c001060f <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00105f5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00105f9:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00105fd:	50                   	push   eax
c00105fe:	50                   	push   eax
c00105ff:	52                   	push   edx
c0010600:	68 b1 e7 01 c0       	push   0xc001e7b1
c0010605:	e8 40 9f ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c001060a:	83 c4 10             	add    esp,0x10
c001060d:	eb 1b                	jmp    c001062a <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c001060f:	41                   	inc    ecx
c0010610:	83 f9 08             	cmp    ecx,0x8
c0010613:	75 ce                	jne    c00105e3 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010615:	83 ec 0c             	sub    esp,0xc
c0010618:	be 01 00 00 00       	mov    esi,0x1
c001061d:	68 d2 e7 01 c0       	push   0xc001e7d2
c0010622:	e8 23 9f ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0010627:	83 c4 10             	add    esp,0x10
c001062a:	83 c4 0c             	add    esp,0xc
c001062d:	89 f0                	mov    eax,esi
c001062f:	5b                   	pop    ebx
c0010630:	5e                   	pop    esi
c0010631:	5f                   	pop    edi
c0010632:	5d                   	pop    ebp
c0010633:	c3                   	ret    

c0010634 <KeCheckSignal(SigHandlerBlock*)>:
c0010634:	55                   	push   ebp
c0010635:	57                   	push   edi
c0010636:	56                   	push   esi
c0010637:	53                   	push   ebx
c0010638:	51                   	push   ecx
c0010639:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001063d:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010644:	75 07                	jne    c001064d <KeCheckSignal(SigHandlerBlock*)+0x19>
c0010646:	31 c0                	xor    eax,eax
c0010648:	e9 cc 00 00 00       	jmp    c0010719 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c001064d:	31 c9                	xor    ecx,ecx
c001064f:	bf 08 00 00 00       	mov    edi,0x8
c0010654:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001065a:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001065d:	99                   	cdq    
c001065e:	f7 ff                	idiv   edi
c0010660:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c0010667:	85 d2                	test   edx,edx
c0010669:	0f 84 94 00 00 00    	je     c0010703 <KeCheckSignal(SigHandlerBlock*)+0xcf>
c001066f:	88 d1                	mov    cl,dl
c0010671:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010677:	bf 01 00 00 00       	mov    edi,0x1
c001067c:	89 04 24             	mov    DWORD PTR [esp],eax
c001067f:	d3 e7                	shl    edi,cl
c0010681:	bd 01 00 00 00       	mov    ebp,0x1
c0010686:	31 c9                	xor    ecx,ecx
c0010688:	89 e8                	mov    eax,ebp
c001068a:	d3 e0                	shl    eax,cl
c001068c:	85 04 24             	test   DWORD PTR [esp],eax
c001068f:	74 06                	je     c0010697 <KeCheckSignal(SigHandlerBlock*)+0x63>
c0010691:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010695:	75 af                	jne    c0010646 <KeCheckSignal(SigHandlerBlock*)+0x12>
c0010697:	41                   	inc    ecx
c0010698:	83 f9 11             	cmp    ecx,0x11
c001069b:	75 eb                	jne    c0010688 <KeCheckSignal(SigHandlerBlock*)+0x54>
c001069d:	8d 4e 01             	lea    ecx,[esi+0x1]
c00106a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00106a3:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c00106a9:	09 f8                	or     eax,edi
c00106ab:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c00106b6:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00106bc:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00106c3:	31 c0                	xor    eax,eax
c00106c5:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00106cd:	74 09                	je     c00106d8 <KeCheckSignal(SigHandlerBlock*)+0xa4>
c00106cf:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00106d6:	eb 06                	jmp    c00106de <KeCheckSignal(SigHandlerBlock*)+0xaa>
c00106d8:	40                   	inc    eax
c00106d9:	83 f8 08             	cmp    eax,0x8
c00106dc:	75 e7                	jne    c00106c5 <KeCheckSignal(SigHandlerBlock*)+0x91>
c00106de:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c00106e1:	83 fa 09             	cmp    edx,0x9
c00106e4:	75 07                	jne    c00106ed <KeCheckSignal(SigHandlerBlock*)+0xb9>
c00106e6:	b8 ac 04 01 c0       	mov    eax,0xc00104ac
c00106eb:	eb 2c                	jmp    c0010719 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00106ed:	83 f8 01             	cmp    eax,0x1
c00106f0:	0f 84 50 ff ff ff    	je     c0010646 <KeCheckSignal(SigHandlerBlock*)+0x12>
c00106f6:	85 c0                	test   eax,eax
c00106f8:	75 1f                	jne    c0010719 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00106fa:	8b 04 95 a0 f9 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0660]
c0010701:	eb 16                	jmp    c0010719 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010703:	46                   	inc    esi
c0010704:	41                   	inc    ecx
c0010705:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001070b:	83 f9 08             	cmp    ecx,0x8
c001070e:	0f 85 40 ff ff ff    	jne    c0010654 <KeCheckSignal(SigHandlerBlock*)+0x20>
c0010714:	e9 2d ff ff ff       	jmp    c0010646 <KeCheckSignal(SigHandlerBlock*)+0x12>
c0010719:	5a                   	pop    edx
c001071a:	5b                   	pop    ebx
c001071b:	5e                   	pop    esi
c001071c:	5f                   	pop    edi
c001071d:	5d                   	pop    ebp
c001071e:	c3                   	ret    

c001071f <KiCheckSignalZ>:
c001071f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010724:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010727:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001072d:	e8 02 ff ff ff       	call   c0010634 <KeCheckSignal(SigHandlerBlock*)>
c0010732:	5a                   	pop    edx
c0010733:	c3                   	ret    

c0010734 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010734:	56                   	push   esi
c0010735:	53                   	push   ebx
c0010736:	bb 01 00 00 00       	mov    ebx,0x1
c001073b:	52                   	push   edx
c001073c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010740:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010744:	d3 e3                	shl    ebx,cl
c0010746:	83 f9 10             	cmp    ecx,0x10
c0010749:	7f 08                	jg     c0010753 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001074b:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010751:	75 10                	jne    c0010763 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010753:	83 ec 0c             	sub    esp,0xc
c0010756:	68 e3 e7 01 c0       	push   0xc001e7e3
c001075b:	e8 6b fa ff ff       	call   c00101cb <KePanic(char const*)>
c0010760:	83 c4 10             	add    esp,0x10
c0010763:	f7 d3                	not    ebx
c0010765:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001076b:	58                   	pop    eax
c001076c:	5b                   	pop    ebx
c001076d:	5e                   	pop    esi
c001076e:	c3                   	ret    

c001076f <SysSeekDir(regs*)>:
c001076f:	31 c0                	xor    eax,eax
c0010771:	31 d2                	xor    edx,edx
c0010773:	c3                   	ret    

c0010774 <SysTellDir(regs*)>:
c0010774:	31 c0                	xor    eax,eax
c0010776:	31 d2                	xor    edx,edx
c0010778:	c3                   	ret    

c0010779 <SysVerify(regs*)>:
c0010779:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001077d:	31 d2                	xor    edx,edx
c001077f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010782:	c3                   	ret    

c0010783 <SysGetArgc(regs*)>:
c0010783:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010788:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001078b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010791:	99                   	cdq    
c0010792:	c3                   	ret    

c0010793 <SysTTYName(regs*)>:
c0010793:	b8 01 00 00 00       	mov    eax,0x1
c0010798:	31 d2                	xor    edx,edx
c001079a:	c3                   	ret    

c001079b <SysFormatDisk(regs*)>:
c001079b:	56                   	push   esi
c001079c:	53                   	push   ebx
c001079d:	50                   	push   eax
c001079e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00107a2:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c00107a8:	eb 28                	jmp    c00107d2 <SysFormatDisk(regs*)+0x37>
c00107aa:	83 ec 0c             	sub    esp,0xc
c00107ad:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00107b0:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00107b3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00107b5:	51                   	push   ecx
c00107b6:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00107b9:	51                   	push   ecx
c00107ba:	50                   	push   eax
c00107bb:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c00107c2:	50                   	push   eax
c00107c3:	53                   	push   ebx
c00107c4:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00107c7:	83 c4 20             	add    esp,0x20
c00107ca:	83 f8 08             	cmp    eax,0x8
c00107cd:	75 12                	jne    c00107e1 <SysFormatDisk(regs*)+0x46>
c00107cf:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00107d2:	85 db                	test   ebx,ebx
c00107d4:	75 d4                	jne    c00107aa <SysFormatDisk(regs*)+0xf>
c00107d6:	59                   	pop    ecx
c00107d7:	b8 03 00 00 00       	mov    eax,0x3
c00107dc:	31 d2                	xor    edx,edx
c00107de:	5b                   	pop    ebx
c00107df:	5e                   	pop    esi
c00107e0:	c3                   	ret    
c00107e1:	85 c0                	test   eax,eax
c00107e3:	74 1b                	je     c0010800 <SysFormatDisk(regs*)+0x65>
c00107e5:	83 f8 09             	cmp    eax,0x9
c00107e8:	74 0b                	je     c00107f5 <SysFormatDisk(regs*)+0x5a>
c00107ea:	59                   	pop    ecx
c00107eb:	b8 02 00 00 00       	mov    eax,0x2
c00107f0:	31 d2                	xor    edx,edx
c00107f2:	5b                   	pop    ebx
c00107f3:	5e                   	pop    esi
c00107f4:	c3                   	ret    
c00107f5:	59                   	pop    ecx
c00107f6:	b8 01 00 00 00       	mov    eax,0x1
c00107fb:	31 d2                	xor    edx,edx
c00107fd:	5b                   	pop    ebx
c00107fe:	5e                   	pop    esi
c00107ff:	c3                   	ret    
c0010800:	59                   	pop    ecx
c0010801:	31 c0                	xor    eax,eax
c0010803:	31 d2                	xor    edx,edx
c0010805:	5b                   	pop    ebx
c0010806:	5e                   	pop    esi
c0010807:	c3                   	ret    

c0010808 <SysSetDiskVolumeLabel(regs*)>:
c0010808:	56                   	push   esi
c0010809:	53                   	push   ebx
c001080a:	53                   	push   ebx
c001080b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001080f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010812:	83 f8 19             	cmp    eax,0x19
c0010815:	77 2d                	ja     c0010844 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010817:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c001081e:	85 c9                	test   ecx,ecx
c0010820:	74 22                	je     c0010844 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010822:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010825:	85 db                	test   ebx,ebx
c0010827:	74 1b                	je     c0010844 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010829:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c001082f:	85 d2                	test   edx,edx
c0010831:	74 11                	je     c0010844 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010833:	8b 32                	mov    esi,DWORD PTR [edx]
c0010835:	53                   	push   ebx
c0010836:	50                   	push   eax
c0010837:	51                   	push   ecx
c0010838:	52                   	push   edx
c0010839:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001083c:	83 c4 10             	add    esp,0x10
c001083f:	99                   	cdq    
c0010840:	59                   	pop    ecx
c0010841:	5b                   	pop    ebx
c0010842:	5e                   	pop    esi
c0010843:	c3                   	ret    
c0010844:	59                   	pop    ecx
c0010845:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001084a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001084f:	5b                   	pop    ebx
c0010850:	5e                   	pop    esi
c0010851:	c3                   	ret    

c0010852 <SysGetDiskVolumeLabel(regs*)>:
c0010852:	57                   	push   edi
c0010853:	56                   	push   esi
c0010854:	53                   	push   ebx
c0010855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010859:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001085c:	83 fa 19             	cmp    edx,0x19
c001085f:	77 38                	ja     c0010899 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010861:	8b 0c 95 20 44 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdbbe0]
c0010868:	85 c9                	test   ecx,ecx
c001086a:	74 2d                	je     c0010899 <SysGetDiskVolumeLabel(regs*)+0x47>
c001086c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001086f:	85 db                	test   ebx,ebx
c0010871:	74 26                	je     c0010899 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010873:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010876:	85 f6                	test   esi,esi
c0010878:	74 1f                	je     c0010899 <SysGetDiskVolumeLabel(regs*)+0x47>
c001087a:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010880:	85 c0                	test   eax,eax
c0010882:	74 15                	je     c0010899 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010884:	83 ec 0c             	sub    esp,0xc
c0010887:	8b 38                	mov    edi,DWORD PTR [eax]
c0010889:	56                   	push   esi
c001088a:	53                   	push   ebx
c001088b:	52                   	push   edx
c001088c:	51                   	push   ecx
c001088d:	50                   	push   eax
c001088e:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010891:	83 c4 20             	add    esp,0x20
c0010894:	99                   	cdq    
c0010895:	5b                   	pop    ebx
c0010896:	5e                   	pop    esi
c0010897:	5f                   	pop    edi
c0010898:	c3                   	ret    
c0010899:	5b                   	pop    ebx
c001089a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001089f:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108a4:	5e                   	pop    esi
c00108a5:	5f                   	pop    edi
c00108a6:	c3                   	ret    

c00108a7 <SysShutdown(regs*)>:
c00108a7:	83 ec 0c             	sub    esp,0xc
c00108aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ae:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00108b1:	85 c0                	test   eax,eax
c00108b3:	74 18                	je     c00108cd <SysShutdown(regs*)+0x26>
c00108b5:	83 f8 01             	cmp    eax,0x1
c00108b8:	74 38                	je     c00108f2 <SysShutdown(regs*)+0x4b>
c00108ba:	83 f8 02             	cmp    eax,0x2
c00108bd:	74 24                	je     c00108e3 <SysShutdown(regs*)+0x3c>
c00108bf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108c4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108c9:	83 c4 0c             	add    esp,0xc
c00108cc:	c3                   	ret    
c00108cd:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00108d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00108d4:	6a 00                	push   0x0
c00108d6:	6a 00                	push   0x0
c00108d8:	6a 00                	push   0x0
c00108da:	50                   	push   eax
c00108db:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00108de:	83 c4 10             	add    esp,0x10
c00108e1:	eb dc                	jmp    c00108bf <SysShutdown(regs*)+0x18>
c00108e3:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00108e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00108ea:	6a 00                	push   0x0
c00108ec:	6a 00                	push   0x0
c00108ee:	6a 01                	push   0x1
c00108f0:	eb e8                	jmp    c00108da <SysShutdown(regs*)+0x33>
c00108f2:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c00108f7:	85 c0                	test   eax,eax
c00108f9:	74 02                	je     c00108fd <SysShutdown(regs*)+0x56>
c00108fb:	ff d0                	call   eax
c00108fd:	31 c0                	xor    eax,eax
c00108ff:	31 d2                	xor    edx,edx
c0010901:	83 c4 0c             	add    esp,0xc
c0010904:	c3                   	ret    

c0010905 <SysRealpath(regs*)>:
c0010905:	83 ec 0c             	sub    esp,0xc
c0010908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001090f:	85 d2                	test   edx,edx
c0010911:	74 07                	je     c001091a <SysRealpath(regs*)+0x15>
c0010913:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010916:	85 c0                	test   eax,eax
c0010918:	75 0b                	jne    c0010925 <SysRealpath(regs*)+0x20>
c001091a:	b8 01 00 00 00       	mov    eax,0x1
c001091f:	31 d2                	xor    edx,edx
c0010921:	83 c4 0c             	add    esp,0xc
c0010924:	c3                   	ret    
c0010925:	51                   	push   ecx
c0010926:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001092c:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001092f:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010935:	51                   	push   ecx
c0010936:	52                   	push   edx
c0010937:	50                   	push   eax
c0010938:	e8 d9 9f ff ff       	call   c000a916 <Fs::standardiseFiles(char*, char const*, char const*)>
c001093d:	83 c4 10             	add    esp,0x10
c0010940:	31 c0                	xor    eax,eax
c0010942:	31 d2                	xor    edx,edx
c0010944:	83 c4 0c             	add    esp,0xc
c0010947:	c3                   	ret    

c0010948 <SysReadDir(regs*)>:
c0010948:	53                   	push   ebx
c0010949:	83 ec 18             	sub    esp,0x18
c001094c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010950:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010953:	83 f8 02             	cmp    eax,0x2
c0010956:	76 61                	jbe    c00109b9 <SysReadDir(regs*)+0x71>
c0010958:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001095f:	77 49                	ja     c00109aa <SysReadDir(regs*)+0x62>
c0010961:	83 ec 0c             	sub    esp,0xc
c0010964:	50                   	push   eax
c0010965:	e8 cd 87 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c001096a:	83 c4 10             	add    esp,0x10
c001096d:	85 c0                	test   eax,eax
c001096f:	74 39                	je     c00109aa <SysReadDir(regs*)+0x62>
c0010971:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010979:	83 ec 0c             	sub    esp,0xc
c001097c:	8b 10                	mov    edx,DWORD PTR [eax]
c001097e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010982:	51                   	push   ecx
c0010983:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010986:	51                   	push   ecx
c0010987:	6a 00                	push   0x0
c0010989:	68 10 01 00 00       	push   0x110
c001098e:	50                   	push   eax
c001098f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010992:	83 c4 20             	add    esp,0x20
c0010995:	85 c0                	test   eax,eax
c0010997:	74 29                	je     c00109c2 <SysReadDir(regs*)+0x7a>
c0010999:	83 f8 07             	cmp    eax,0x7
c001099c:	74 1b                	je     c00109b9 <SysReadDir(regs*)+0x71>
c001099e:	b8 02 00 00 00       	mov    eax,0x2
c00109a3:	31 d2                	xor    edx,edx
c00109a5:	83 c4 18             	add    esp,0x18
c00109a8:	5b                   	pop    ebx
c00109a9:	c3                   	ret    
c00109aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109af:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109b4:	83 c4 18             	add    esp,0x18
c00109b7:	5b                   	pop    ebx
c00109b8:	c3                   	ret    
c00109b9:	b8 01 00 00 00       	mov    eax,0x1
c00109be:	31 d2                	xor    edx,edx
c00109c0:	eb e3                	jmp    c00109a5 <SysReadDir(regs*)+0x5d>
c00109c2:	31 c0                	xor    eax,eax
c00109c4:	31 d2                	xor    edx,edx
c00109c6:	eb dd                	jmp    c00109a5 <SysReadDir(regs*)+0x5d>

c00109c8 <SysIsATTY(regs*)>:
c00109c8:	83 ec 0c             	sub    esp,0xc
c00109cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109d2:	83 f8 02             	cmp    eax,0x2
c00109d5:	76 07                	jbe    c00109de <SysIsATTY(regs*)+0x16>
c00109d7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00109dc:	75 28                	jne    c0010a06 <SysIsATTY(regs*)+0x3e>
c00109de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109e6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00109ec:	85 c0                	test   eax,eax
c00109ee:	74 26                	je     c0010a16 <SysIsATTY(regs*)+0x4e>
c00109f0:	83 ec 0c             	sub    esp,0xc
c00109f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00109f5:	50                   	push   eax
c00109f6:	ff 12                	call   DWORD PTR [edx]
c00109f8:	31 d2                	xor    edx,edx
c00109fa:	25 ff 00 00 00       	and    eax,0xff
c00109ff:	83 c4 10             	add    esp,0x10
c0010a02:	83 c4 0c             	add    esp,0xc
c0010a05:	c3                   	ret    
c0010a06:	83 ec 0c             	sub    esp,0xc
c0010a09:	50                   	push   eax
c0010a0a:	e8 28 87 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c0010a0f:	83 c4 10             	add    esp,0x10
c0010a12:	85 c0                	test   eax,eax
c0010a14:	75 da                	jne    c00109f0 <SysIsATTY(regs*)+0x28>
c0010a16:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a1b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a20:	83 c4 0c             	add    esp,0xc
c0010a23:	c3                   	ret    

c0010a24 <SysSeek(regs*)>:
c0010a24:	53                   	push   ebx
c0010a25:	83 ec 08             	sub    esp,0x8
c0010a28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a2c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a2f:	8d 50 fd             	lea    edx,[eax-0x3]
c0010a32:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010a38:	77 34                	ja     c0010a6e <SysSeek(regs*)+0x4a>
c0010a3a:	83 ec 0c             	sub    esp,0xc
c0010a3d:	50                   	push   eax
c0010a3e:	e8 f4 86 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c0010a43:	83 c4 0c             	add    esp,0xc
c0010a46:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010a49:	31 db                	xor    ebx,ebx
c0010a4b:	53                   	push   ebx
c0010a4c:	51                   	push   ecx
c0010a4d:	50                   	push   eax
c0010a4e:	e8 eb a1 ff ff       	call   c000ac3e <File::seek(unsigned long long)>
c0010a53:	83 c4 10             	add    esp,0x10
c0010a56:	85 c0                	test   eax,eax
c0010a58:	0f 95 c0             	setne  al
c0010a5b:	31 d2                	xor    edx,edx
c0010a5d:	25 ff 00 00 00       	and    eax,0xff
c0010a62:	f7 d8                	neg    eax
c0010a64:	83 d2 00             	adc    edx,0x0
c0010a67:	83 c4 08             	add    esp,0x8
c0010a6a:	f7 da                	neg    edx
c0010a6c:	5b                   	pop    ebx
c0010a6d:	c3                   	ret    
c0010a6e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a73:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a78:	83 c4 08             	add    esp,0x8
c0010a7b:	5b                   	pop    ebx
c0010a7c:	c3                   	ret    

c0010a7d <SysTell(regs*)>:
c0010a7d:	53                   	push   ebx
c0010a7e:	83 ec 08             	sub    esp,0x8
c0010a81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a85:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a88:	83 f8 02             	cmp    eax,0x2
c0010a8b:	76 50                	jbe    c0010add <SysTell(regs*)+0x60>
c0010a8d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010a92:	76 19                	jbe    c0010aad <SysTell(regs*)+0x30>
c0010a94:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a97:	31 d2                	xor    edx,edx
c0010a99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010a9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010aa6:	31 c0                	xor    eax,eax
c0010aa8:	83 c4 08             	add    esp,0x8
c0010aab:	5b                   	pop    ebx
c0010aac:	c3                   	ret    
c0010aad:	83 ec 0c             	sub    esp,0xc
c0010ab0:	50                   	push   eax
c0010ab1:	e8 81 86 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c0010ab6:	5a                   	pop    edx
c0010ab7:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010aba:	59                   	pop    ecx
c0010abb:	53                   	push   ebx
c0010abc:	50                   	push   eax
c0010abd:	e8 d2 a1 ff ff       	call   c000ac94 <File::tell(unsigned long long*)>
c0010ac2:	83 c4 10             	add    esp,0x10
c0010ac5:	85 c0                	test   eax,eax
c0010ac7:	0f 95 c0             	setne  al
c0010aca:	31 d2                	xor    edx,edx
c0010acc:	25 ff 00 00 00       	and    eax,0xff
c0010ad1:	f7 d8                	neg    eax
c0010ad3:	83 d2 00             	adc    edx,0x0
c0010ad6:	83 c4 08             	add    esp,0x8
c0010ad9:	f7 da                	neg    edx
c0010adb:	5b                   	pop    ebx
c0010adc:	c3                   	ret    
c0010add:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ae2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ae7:	83 c4 08             	add    esp,0x8
c0010aea:	5b                   	pop    ebx
c0010aeb:	c3                   	ret    

c0010aec <SysSize(regs*)>:
c0010aec:	53                   	push   ebx
c0010aed:	83 ec 18             	sub    esp,0x18
c0010af0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010af4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010af7:	83 f8 02             	cmp    eax,0x2
c0010afa:	76 56                	jbe    c0010b52 <SysSize(regs*)+0x66>
c0010afc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010b01:	76 19                	jbe    c0010b1c <SysSize(regs*)+0x30>
c0010b03:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b06:	31 d2                	xor    edx,edx
c0010b08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b15:	31 c0                	xor    eax,eax
c0010b17:	83 c4 18             	add    esp,0x18
c0010b1a:	5b                   	pop    ebx
c0010b1b:	c3                   	ret    
c0010b1c:	83 ec 0c             	sub    esp,0xc
c0010b1f:	50                   	push   eax
c0010b20:	e8 12 86 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c0010b25:	83 c4 0c             	add    esp,0xc
c0010b28:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010b2c:	52                   	push   edx
c0010b2d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b30:	52                   	push   edx
c0010b31:	50                   	push   eax
c0010b32:	e8 f5 a2 ff ff       	call   c000ae2c <File::stat(unsigned long long*, bool*)>
c0010b37:	83 c4 10             	add    esp,0x10
c0010b3a:	85 c0                	test   eax,eax
c0010b3c:	0f 95 c0             	setne  al
c0010b3f:	31 d2                	xor    edx,edx
c0010b41:	25 ff 00 00 00       	and    eax,0xff
c0010b46:	f7 d8                	neg    eax
c0010b48:	83 d2 00             	adc    edx,0x0
c0010b4b:	83 c4 18             	add    esp,0x18
c0010b4e:	f7 da                	neg    edx
c0010b50:	5b                   	pop    ebx
c0010b51:	c3                   	ret    
c0010b52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b57:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b5c:	83 c4 18             	add    esp,0x18
c0010b5f:	5b                   	pop    ebx
c0010b60:	c3                   	ret    

c0010b61 <SysSizeFromFilename(regs*)>:
c0010b61:	57                   	push   edi
c0010b62:	56                   	push   esi
c0010b63:	53                   	push   ebx
c0010b64:	83 ec 20             	sub    esp,0x20
c0010b67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010b6b:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010b6e:	83 fb 02             	cmp    ebx,0x2
c0010b71:	0f 86 8c 00 00 00    	jbe    c0010c03 <SysSizeFromFilename(regs*)+0xa2>
c0010b77:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010b7d:	76 1b                	jbe    c0010b9a <SysSizeFromFilename(regs*)+0x39>
c0010b7f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010b82:	31 d2                	xor    edx,edx
c0010b84:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b8a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b91:	83 c4 20             	add    esp,0x20
c0010b94:	31 c0                	xor    eax,eax
c0010b96:	5b                   	pop    ebx
c0010b97:	5e                   	pop    esi
c0010b98:	5f                   	pop    edi
c0010b99:	c3                   	ret    
c0010b9a:	83 ec 0c             	sub    esp,0xc
c0010b9d:	68 14 01 00 00       	push   0x114
c0010ba2:	e8 12 6c ff ff       	call   c00077b9 <malloc>
c0010ba7:	83 c4 0c             	add    esp,0xc
c0010baa:	89 c7                	mov    edi,eax
c0010bac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bb1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bb4:	50                   	push   eax
c0010bb5:	53                   	push   ebx
c0010bb6:	57                   	push   edi
c0010bb7:	e8 04 9f ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c0010bbc:	83 c4 0c             	add    esp,0xc
c0010bbf:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010bc3:	50                   	push   eax
c0010bc4:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010bc7:	52                   	push   edx
c0010bc8:	57                   	push   edi
c0010bc9:	e8 5e a2 ff ff       	call   c000ae2c <File::stat(unsigned long long*, bool*)>
c0010bce:	83 c4 10             	add    esp,0x10
c0010bd1:	85 ff                	test   edi,edi
c0010bd3:	74 14                	je     c0010be9 <SysSizeFromFilename(regs*)+0x88>
c0010bd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bd9:	8b 17                	mov    edx,DWORD PTR [edi]
c0010bdb:	83 ec 0c             	sub    esp,0xc
c0010bde:	57                   	push   edi
c0010bdf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010be2:	83 c4 10             	add    esp,0x10
c0010be5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010be9:	85 c0                	test   eax,eax
c0010beb:	0f 95 c0             	setne  al
c0010bee:	31 d2                	xor    edx,edx
c0010bf0:	25 ff 00 00 00       	and    eax,0xff
c0010bf5:	f7 d8                	neg    eax
c0010bf7:	83 d2 00             	adc    edx,0x0
c0010bfa:	83 c4 20             	add    esp,0x20
c0010bfd:	f7 da                	neg    edx
c0010bff:	5b                   	pop    ebx
c0010c00:	5e                   	pop    esi
c0010c01:	5f                   	pop    edi
c0010c02:	c3                   	ret    
c0010c03:	83 c4 20             	add    esp,0x20
c0010c06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c0b:	5b                   	pop    ebx
c0010c0c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c11:	5e                   	pop    esi
c0010c12:	5f                   	pop    edi
c0010c13:	c3                   	ret    

c0010c14 <SysClose(regs*)>:
c0010c14:	53                   	push   ebx
c0010c15:	83 ec 08             	sub    esp,0x8
c0010c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c1c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010c1f:	83 f8 02             	cmp    eax,0x2
c0010c22:	76 41                	jbe    c0010c65 <SysClose(regs*)+0x51>
c0010c24:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010c2a:	83 fa 01             	cmp    edx,0x1
c0010c2d:	76 2d                	jbe    c0010c5c <SysClose(regs*)+0x48>
c0010c2f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c34:	77 2f                	ja     c0010c65 <SysClose(regs*)+0x51>
c0010c36:	83 ec 0c             	sub    esp,0xc
c0010c39:	50                   	push   eax
c0010c3a:	e8 f8 84 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c0010c3f:	89 c3                	mov    ebx,eax
c0010c41:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c44:	e8 95 9f ff ff       	call   c000abde <File::close()>
c0010c49:	83 c4 10             	add    esp,0x10
c0010c4c:	85 db                	test   ebx,ebx
c0010c4e:	74 0c                	je     c0010c5c <SysClose(regs*)+0x48>
c0010c50:	83 ec 0c             	sub    esp,0xc
c0010c53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c55:	53                   	push   ebx
c0010c56:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c59:	83 c4 10             	add    esp,0x10
c0010c5c:	31 c0                	xor    eax,eax
c0010c5e:	31 d2                	xor    edx,edx
c0010c60:	83 c4 08             	add    esp,0x8
c0010c63:	5b                   	pop    ebx
c0010c64:	c3                   	ret    
c0010c65:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c6a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c6f:	83 c4 08             	add    esp,0x8
c0010c72:	5b                   	pop    ebx
c0010c73:	c3                   	ret    

c0010c74 <SysOpenDir(regs*)>:
c0010c74:	57                   	push   edi
c0010c75:	56                   	push   esi
c0010c76:	53                   	push   ebx
c0010c77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c7b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c7e:	85 c0                	test   eax,eax
c0010c80:	0f 84 e7 00 00 00    	je     c0010d6d <SysOpenDir(regs*)+0xf9>
c0010c86:	83 ec 0c             	sub    esp,0xc
c0010c89:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010c8c:	56                   	push   esi
c0010c8d:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010c90:	57                   	push   edi
c0010c91:	50                   	push   eax
c0010c92:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010c95:	50                   	push   eax
c0010c96:	68 f4 e7 01 c0       	push   0xc001e7f4
c0010c9b:	e8 aa 98 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0010ca0:	83 c4 18             	add    esp,0x18
c0010ca3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ca6:	50                   	push   eax
c0010ca7:	68 1a e8 01 c0       	push   0xc001e81a
c0010cac:	e8 99 98 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0010cb1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010cb8:	e8 fc 6a ff ff       	call   c00077b9 <malloc>
c0010cbd:	83 c4 0c             	add    esp,0xc
c0010cc0:	89 c6                	mov    esi,eax
c0010cc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cc7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cca:	50                   	push   eax
c0010ccb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cce:	50                   	push   eax
c0010ccf:	56                   	push   esi
c0010cd0:	e8 15 a3 ff ff       	call   c000afea <Directory::Directory(char const*, Process*)>
c0010cd5:	c7 04 24 f2 f5 01 c0 	mov    DWORD PTR [esp],0xc001f5f2
c0010cdc:	e8 69 98 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0010ce1:	83 c4 10             	add    esp,0x10
c0010ce4:	85 f6                	test   esi,esi
c0010ce6:	0f 84 8f 00 00 00    	je     c0010d7b <SysOpenDir(regs*)+0x107>
c0010cec:	83 ec 0c             	sub    esp,0xc
c0010cef:	68 2f e8 01 c0       	push   0xc001e82f
c0010cf4:	e8 51 98 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0010cf9:	58                   	pop    eax
c0010cfa:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010cfd:	5a                   	pop    edx
c0010cfe:	51                   	push   ecx
c0010cff:	68 33 e8 01 c0       	push   0xc001e833
c0010d04:	e8 41 98 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0010d09:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d0c:	e8 99 a3 ff ff       	call   c000b0aa <Directory::open()>
c0010d11:	c7 04 24 6b d6 01 c0 	mov    DWORD PTR [esp],0xc001d66b
c0010d18:	89 c7                	mov    edi,eax
c0010d1a:	e8 2b 98 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0010d1f:	83 c4 10             	add    esp,0x10
c0010d22:	85 ff                	test   edi,edi
c0010d24:	75 37                	jne    c0010d5d <SysOpenDir(regs*)+0xe9>
c0010d26:	83 ec 0c             	sub    esp,0xc
c0010d29:	68 44 e8 01 c0       	push   0xc001e844
c0010d2e:	e8 17 98 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0010d33:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d36:	e8 07 81 ff ff       	call   c0008e42 <UnixFile::getFileDescriptor()>
c0010d3b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d3e:	89 02                	mov    DWORD PTR [edx],eax
c0010d40:	c1 f8 1f             	sar    eax,0x1f
c0010d43:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d46:	c7 04 24 48 e8 01 c0 	mov    DWORD PTR [esp],0xc001e848
c0010d4d:	e8 f8 97 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0010d52:	83 c4 10             	add    esp,0x10
c0010d55:	31 c0                	xor    eax,eax
c0010d57:	5b                   	pop    ebx
c0010d58:	31 d2                	xor    edx,edx
c0010d5a:	5e                   	pop    esi
c0010d5b:	5f                   	pop    edi
c0010d5c:	c3                   	ret    
c0010d5d:	83 ec 0c             	sub    esp,0xc
c0010d60:	68 40 e8 01 c0       	push   0xc001e840
c0010d65:	e8 e0 97 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0010d6a:	83 c4 10             	add    esp,0x10
c0010d6d:	5b                   	pop    ebx
c0010d6e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d73:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d78:	5e                   	pop    esi
c0010d79:	5f                   	pop    edi
c0010d7a:	c3                   	ret    
c0010d7b:	83 ec 0c             	sub    esp,0xc
c0010d7e:	68 2b e8 01 c0       	push   0xc001e82b
c0010d83:	eb e0                	jmp    c0010d65 <SysOpenDir(regs*)+0xf1>

c0010d85 <SysCloseDir(regs*)>:
c0010d85:	53                   	push   ebx
c0010d86:	83 ec 08             	sub    esp,0x8
c0010d89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d8d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d90:	8d 50 fd             	lea    edx,[eax-0x3]
c0010d93:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010d99:	77 2f                	ja     c0010dca <SysCloseDir(regs*)+0x45>
c0010d9b:	83 ec 0c             	sub    esp,0xc
c0010d9e:	50                   	push   eax
c0010d9f:	e8 93 83 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c0010da4:	89 c3                	mov    ebx,eax
c0010da6:	89 04 24             	mov    DWORD PTR [esp],eax
c0010da9:	e8 58 a3 ff ff       	call   c000b106 <Directory::close()>
c0010dae:	83 c4 10             	add    esp,0x10
c0010db1:	85 db                	test   ebx,ebx
c0010db3:	74 0c                	je     c0010dc1 <SysCloseDir(regs*)+0x3c>
c0010db5:	83 ec 0c             	sub    esp,0xc
c0010db8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dba:	53                   	push   ebx
c0010dbb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010dbe:	83 c4 10             	add    esp,0x10
c0010dc1:	31 c0                	xor    eax,eax
c0010dc3:	31 d2                	xor    edx,edx
c0010dc5:	83 c4 08             	add    esp,0x8
c0010dc8:	5b                   	pop    ebx
c0010dc9:	c3                   	ret    
c0010dca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010dcf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010dd4:	83 c4 08             	add    esp,0x8
c0010dd7:	5b                   	pop    ebx
c0010dd8:	c3                   	ret    

c0010dd9 <SysMakeDir(regs*)>:
c0010dd9:	56                   	push   esi
c0010dda:	53                   	push   ebx
c0010ddb:	83 ec 10             	sub    esp,0x10
c0010dde:	68 14 01 00 00       	push   0x114
c0010de3:	e8 d1 69 ff ff       	call   c00077b9 <malloc>
c0010de8:	83 c4 0c             	add    esp,0xc
c0010deb:	89 c3                	mov    ebx,eax
c0010ded:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010df2:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010df5:	56                   	push   esi
c0010df6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010dfa:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010dfd:	50                   	push   eax
c0010dfe:	53                   	push   ebx
c0010dff:	e8 e6 a1 ff ff       	call   c000afea <Directory::Directory(char const*, Process*)>
c0010e04:	83 c4 10             	add    esp,0x10
c0010e07:	85 db                	test   ebx,ebx
c0010e09:	74 32                	je     c0010e3d <SysMakeDir(regs*)+0x64>
c0010e0b:	83 ec 0c             	sub    esp,0xc
c0010e0e:	53                   	push   ebx
c0010e0f:	e8 76 a4 ff ff       	call   c000b28a <Directory::create()>
c0010e14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e17:	89 c6                	mov    esi,eax
c0010e19:	e8 e8 a2 ff ff       	call   c000b106 <Directory::close()>
c0010e1e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e23:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e26:	83 c4 10             	add    esp,0x10
c0010e29:	31 c0                	xor    eax,eax
c0010e2b:	59                   	pop    ecx
c0010e2c:	85 f6                	test   esi,esi
c0010e2e:	5b                   	pop    ebx
c0010e2f:	0f 95 c0             	setne  al
c0010e32:	5e                   	pop    esi
c0010e33:	31 d2                	xor    edx,edx
c0010e35:	f7 d8                	neg    eax
c0010e37:	83 d2 00             	adc    edx,0x0
c0010e3a:	f7 da                	neg    edx
c0010e3c:	c3                   	ret    
c0010e3d:	59                   	pop    ecx
c0010e3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e43:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e48:	5b                   	pop    ebx
c0010e49:	5e                   	pop    esi
c0010e4a:	c3                   	ret    

c0010e4b <SysWait(regs*)>:
c0010e4b:	83 ec 10             	sub    esp,0x10
c0010e4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e52:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e55:	52                   	push   edx
c0010e56:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e59:	51                   	push   ecx
c0010e5a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e5d:	50                   	push   eax
c0010e5e:	e8 69 2b 00 00       	call   c00139cc <waitTask(int, int*, int)>
c0010e63:	83 c4 1c             	add    esp,0x1c
c0010e66:	99                   	cdq    
c0010e67:	c3                   	ret    

c0010e68 <SysNotImpl(regs*)>:
c0010e68:	83 ec 18             	sub    esp,0x18
c0010e6b:	68 4c e8 01 c0       	push   0xc001e84c
c0010e70:	e8 56 f3 ff ff       	call   c00101cb <KePanic(char const*)>
c0010e75:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e7a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e7f:	83 c4 1c             	add    esp,0x1c
c0010e82:	c3                   	ret    

c0010e83 <SysPanic(regs*)>:
c0010e83:	83 ec 18             	sub    esp,0x18
c0010e86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e8a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e8d:	50                   	push   eax
c0010e8e:	e8 38 f3 ff ff       	call   c00101cb <KePanic(char const*)>
c0010e93:	b8 01 00 00 00       	mov    eax,0x1
c0010e98:	31 d2                	xor    edx,edx
c0010e9a:	83 c4 1c             	add    esp,0x1c
c0010e9d:	c3                   	ret    

c0010e9e <SysRmdir(regs*)>:
c0010e9e:	56                   	push   esi
c0010e9f:	53                   	push   ebx
c0010ea0:	83 ec 20             	sub    esp,0x20
c0010ea3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ea7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010eaa:	68 14 01 00 00       	push   0x114
c0010eaf:	e8 05 69 ff ff       	call   c00077b9 <malloc>
c0010eb4:	83 c4 0c             	add    esp,0xc
c0010eb7:	89 c3                	mov    ebx,eax
c0010eb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ebe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ec1:	50                   	push   eax
c0010ec2:	56                   	push   esi
c0010ec3:	53                   	push   ebx
c0010ec4:	e8 f7 9b ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c0010ec9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ecc:	e8 27 9e ff ff       	call   c000acf8 <File::unlink()>
c0010ed1:	83 c4 10             	add    esp,0x10
c0010ed4:	85 db                	test   ebx,ebx
c0010ed6:	74 14                	je     c0010eec <SysRmdir(regs*)+0x4e>
c0010ed8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010edc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ede:	83 ec 0c             	sub    esp,0xc
c0010ee1:	53                   	push   ebx
c0010ee2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010ee5:	83 c4 10             	add    esp,0x10
c0010ee8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010eec:	85 c0                	test   eax,eax
c0010eee:	0f 95 c0             	setne  al
c0010ef1:	31 d2                	xor    edx,edx
c0010ef3:	25 ff 00 00 00       	and    eax,0xff
c0010ef8:	f7 d8                	neg    eax
c0010efa:	83 d2 00             	adc    edx,0x0
c0010efd:	83 c4 14             	add    esp,0x14
c0010f00:	f7 da                	neg    edx
c0010f02:	5b                   	pop    ebx
c0010f03:	5e                   	pop    esi
c0010f04:	c3                   	ret    

c0010f05 <SysUnlink(regs*)>:
c0010f05:	56                   	push   esi
c0010f06:	53                   	push   ebx
c0010f07:	83 ec 20             	sub    esp,0x20
c0010f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f0e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f11:	68 14 01 00 00       	push   0x114
c0010f16:	e8 9e 68 ff ff       	call   c00077b9 <malloc>
c0010f1b:	83 c4 0c             	add    esp,0xc
c0010f1e:	89 c3                	mov    ebx,eax
c0010f20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f28:	50                   	push   eax
c0010f29:	56                   	push   esi
c0010f2a:	53                   	push   ebx
c0010f2b:	e8 90 9b ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c0010f30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f33:	e8 c0 9d ff ff       	call   c000acf8 <File::unlink()>
c0010f38:	83 c4 10             	add    esp,0x10
c0010f3b:	85 db                	test   ebx,ebx
c0010f3d:	74 14                	je     c0010f53 <SysUnlink(regs*)+0x4e>
c0010f3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f43:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f45:	83 ec 0c             	sub    esp,0xc
c0010f48:	53                   	push   ebx
c0010f49:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f4c:	83 c4 10             	add    esp,0x10
c0010f4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f53:	85 c0                	test   eax,eax
c0010f55:	0f 95 c0             	setne  al
c0010f58:	31 d2                	xor    edx,edx
c0010f5a:	25 ff 00 00 00       	and    eax,0xff
c0010f5f:	f7 d8                	neg    eax
c0010f61:	83 d2 00             	adc    edx,0x0
c0010f64:	83 c4 14             	add    esp,0x14
c0010f67:	f7 da                	neg    edx
c0010f69:	5b                   	pop    ebx
c0010f6a:	5e                   	pop    esi
c0010f6b:	c3                   	ret    

c0010f6c <SysGetArgv(regs*)>:
c0010f6c:	83 ec 0c             	sub    esp,0xc
c0010f6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f73:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f76:	85 c0                	test   eax,eax
c0010f78:	78 2c                	js     c0010fa6 <SysGetArgv(regs*)+0x3a>
c0010f7a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010f80:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010f83:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010f89:	7d 1b                	jge    c0010fa6 <SysGetArgv(regs*)+0x3a>
c0010f8b:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010f92:	85 c0                	test   eax,eax
c0010f94:	74 18                	je     c0010fae <SysGetArgv(regs*)+0x42>
c0010f96:	83 ec 08             	sub    esp,0x8
c0010f99:	50                   	push   eax
c0010f9a:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010f9d:	50                   	push   eax
c0010f9e:	e8 5d f6 fe ff       	call   c0000600 <strcpy>
c0010fa3:	83 c4 10             	add    esp,0x10
c0010fa6:	31 c0                	xor    eax,eax
c0010fa8:	31 d2                	xor    edx,edx
c0010faa:	83 c4 0c             	add    esp,0xc
c0010fad:	c3                   	ret    
c0010fae:	b8 01 00 00 00       	mov    eax,0x1
c0010fb3:	31 d2                	xor    edx,edx
c0010fb5:	83 c4 0c             	add    esp,0xc
c0010fb8:	c3                   	ret    

c0010fb9 <SysUSleep(regs*)>:
c0010fb9:	83 ec 1c             	sub    esp,0x1c
c0010fbc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010fc0:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010fc3:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010fc6:	6a 00                	push   0x0
c0010fc8:	6a 64                	push   0x64
c0010fca:	52                   	push   edx
c0010fcb:	50                   	push   eax
c0010fcc:	e8 2f b1 00 00       	call   c001c100 <__udivdi3>
c0010fd1:	83 c4 14             	add    esp,0x14
c0010fd4:	50                   	push   eax
c0010fd5:	e8 c6 2a 00 00       	call   c0013aa0 <milliTenthSleep(unsigned int)>
c0010fda:	31 c0                	xor    eax,eax
c0010fdc:	31 d2                	xor    edx,edx
c0010fde:	83 c4 1c             	add    esp,0x1c
c0010fe1:	c3                   	ret    

c0010fe2 <SysSpawn(regs*)>:
c0010fe2:	56                   	push   esi
c0010fe3:	53                   	push   ebx
c0010fe4:	50                   	push   eax
c0010fe5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fe9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010fec:	85 c0                	test   eax,eax
c0010fee:	75 08                	jne    c0010ff8 <SysSpawn(regs*)+0x16>
c0010ff0:	59                   	pop    ecx
c0010ff1:	31 c0                	xor    eax,eax
c0010ff3:	31 d2                	xor    edx,edx
c0010ff5:	5b                   	pop    ebx
c0010ff6:	5e                   	pop    esi
c0010ff7:	c3                   	ret    
c0010ff8:	83 ec 0c             	sub    esp,0xc
c0010ffb:	68 24 07 00 00       	push   0x724
c0011000:	e8 b4 67 ff ff       	call   c00077b9 <malloc>
c0011005:	83 c4 10             	add    esp,0x10
c0011008:	89 c6                	mov    esi,eax
c001100a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001100d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011010:	85 c0                	test   eax,eax
c0011012:	75 33                	jne    c0011047 <SysSpawn(regs*)+0x65>
c0011014:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011019:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001101c:	52                   	push   edx
c001101d:	50                   	push   eax
c001101e:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0011021:	53                   	push   ebx
c0011022:	56                   	push   esi
c0011023:	e8 24 21 00 00       	call   c001314c <Process::Process(char const*, Process*, char**)>
c0011028:	83 c4 10             	add    esp,0x10
c001102b:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011032:	75 bc                	jne    c0010ff0 <SysSpawn(regs*)+0xe>
c0011034:	83 ec 0c             	sub    esp,0xc
c0011037:	56                   	push   esi
c0011038:	e8 3b 26 00 00       	call   c0013678 <Process::createUserThread()>
c001103d:	8b 06                	mov    eax,DWORD PTR [esi]
c001103f:	83 c4 10             	add    esp,0x10
c0011042:	99                   	cdq    
c0011043:	59                   	pop    ecx
c0011044:	5b                   	pop    ebx
c0011045:	5e                   	pop    esi
c0011046:	c3                   	ret    
c0011047:	31 c0                	xor    eax,eax
c0011049:	eb d1                	jmp    c001101c <SysSpawn(regs*)+0x3a>

c001104b <SysGetEnv(regs*)>:
c001104b:	57                   	push   edi
c001104c:	56                   	push   esi
c001104d:	53                   	push   ebx
c001104e:	83 ec 1c             	sub    esp,0x1c
c0011051:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011055:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001105a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001105d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011060:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011063:	50                   	push   eax
c0011064:	e8 1a f0 ff ff       	call   c0010083 <Krnl::getProcessTotalEnvCount(Process*)>
c0011069:	83 c4 10             	add    esp,0x10
c001106c:	39 c7                	cmp    edi,eax
c001106e:	7c 14                	jl     c0011084 <SysGetEnv(regs*)+0x39>
c0011070:	85 f6                	test   esi,esi
c0011072:	75 0b                	jne    c001107f <SysGetEnv(regs*)+0x34>
c0011074:	83 c4 10             	add    esp,0x10
c0011077:	31 c0                	xor    eax,eax
c0011079:	5b                   	pop    ebx
c001107a:	31 d2                	xor    edx,edx
c001107c:	5e                   	pop    esi
c001107d:	5f                   	pop    edi
c001107e:	c3                   	ret    
c001107f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011082:	eb f0                	jmp    c0011074 <SysGetEnv(regs*)+0x29>
c0011084:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011088:	52                   	push   edx
c0011089:	57                   	push   edi
c001108a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011090:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011093:	51                   	push   ecx
c0011094:	50                   	push   eax
c0011095:	e8 09 f0 ff ff       	call   c00100a3 <Krnl::getProcessEnvPair(Process*, int)>
c001109a:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001109d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110a1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00110a5:	83 c4 0c             	add    esp,0xc
c00110a8:	85 db                	test   ebx,ebx
c00110aa:	75 23                	jne    c00110cf <SysGetEnv(regs*)+0x84>
c00110ac:	83 ec 0c             	sub    esp,0xc
c00110af:	50                   	push   eax
c00110b0:	e8 8b f4 fe ff       	call   c0000540 <strlen>
c00110b5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110b8:	89 c3                	mov    ebx,eax
c00110ba:	e8 81 f4 fe ff       	call   c0000540 <strlen>
c00110bf:	31 d2                	xor    edx,edx
c00110c1:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00110c5:	83 c4 10             	add    esp,0x10
c00110c8:	83 c4 10             	add    esp,0x10
c00110cb:	5b                   	pop    ebx
c00110cc:	5e                   	pop    esi
c00110cd:	5f                   	pop    edi
c00110ce:	c3                   	ret    
c00110cf:	83 ec 08             	sub    esp,0x8
c00110d2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110d5:	50                   	push   eax
c00110d6:	56                   	push   esi
c00110d7:	e8 24 f5 fe ff       	call   c0000600 <strcpy>
c00110dc:	58                   	pop    eax
c00110dd:	5a                   	pop    edx
c00110de:	68 66 e8 01 c0       	push   0xc001e866
c00110e3:	56                   	push   esi
c00110e4:	e8 d7 f6 fe ff       	call   c00007c0 <strcat>
c00110e9:	59                   	pop    ecx
c00110ea:	5b                   	pop    ebx
c00110eb:	57                   	push   edi
c00110ec:	56                   	push   esi
c00110ed:	e8 ce f6 fe ff       	call   c00007c0 <strcat>
c00110f2:	83 c4 10             	add    esp,0x10
c00110f5:	e9 7a ff ff ff       	jmp    c0011074 <SysGetEnv(regs*)+0x29>

c00110fa <SysSetFatAttrib(regs*)>:
c00110fa:	57                   	push   edi
c00110fb:	56                   	push   esi
c00110fc:	53                   	push   ebx
c00110fd:	83 ec 1c             	sub    esp,0x1c
c0011100:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011104:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011107:	68 14 01 00 00       	push   0x114
c001110c:	e8 a8 66 ff ff       	call   c00077b9 <malloc>
c0011111:	83 c4 0c             	add    esp,0xc
c0011114:	89 c3                	mov    ebx,eax
c0011116:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001111b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001111e:	50                   	push   eax
c001111f:	57                   	push   edi
c0011120:	53                   	push   ebx
c0011121:	e8 9a 99 ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c0011126:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011129:	83 c4 0c             	add    esp,0xc
c001112c:	0f b6 d4             	movzx  edx,ah
c001112f:	25 ff 00 00 00       	and    eax,0xff
c0011134:	52                   	push   edx
c0011135:	50                   	push   eax
c0011136:	53                   	push   ebx
c0011137:	e8 56 9c ff ff       	call   c000ad92 <File::chfatattr(unsigned char, unsigned char)>
c001113c:	83 c4 10             	add    esp,0x10
c001113f:	85 db                	test   ebx,ebx
c0011141:	74 14                	je     c0011157 <SysSetFatAttrib(regs*)+0x5d>
c0011143:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011147:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011149:	83 ec 0c             	sub    esp,0xc
c001114c:	53                   	push   ebx
c001114d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011150:	83 c4 10             	add    esp,0x10
c0011153:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011157:	85 c0                	test   eax,eax
c0011159:	0f 95 c0             	setne  al
c001115c:	31 d2                	xor    edx,edx
c001115e:	25 ff 00 00 00       	and    eax,0xff
c0011163:	f7 d8                	neg    eax
c0011165:	83 d2 00             	adc    edx,0x0
c0011168:	83 c4 10             	add    esp,0x10
c001116b:	f7 da                	neg    edx
c001116d:	5b                   	pop    ebx
c001116e:	5e                   	pop    esi
c001116f:	5f                   	pop    edi
c0011170:	c3                   	ret    

c0011171 <SysPipe(regs*)>:
c0011171:	57                   	push   edi
c0011172:	56                   	push   esi
c0011173:	53                   	push   ebx
c0011174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011178:	83 ec 0c             	sub    esp,0xc
c001117b:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001117e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011181:	6a 20                	push   0x20
c0011183:	e8 31 66 ff ff       	call   c00077b9 <malloc>
c0011188:	89 c3                	mov    ebx,eax
c001118a:	58                   	pop    eax
c001118b:	5a                   	pop    edx
c001118c:	68 00 50 00 00       	push   0x5000
c0011191:	53                   	push   ebx
c0011192:	e8 27 6f ff ff       	call   c00080be <Pipe::Pipe(int)>
c0011197:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001119a:	e8 a3 7c ff ff       	call   c0008e42 <UnixFile::getFileDescriptor()>
c001119f:	89 07                	mov    DWORD PTR [edi],eax
c00111a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111a4:	e8 99 7c ff ff       	call   c0008e42 <UnixFile::getFileDescriptor()>
c00111a9:	83 c4 10             	add    esp,0x10
c00111ac:	89 06                	mov    DWORD PTR [esi],eax
c00111ae:	31 d2                	xor    edx,edx
c00111b0:	5b                   	pop    ebx
c00111b1:	31 c0                	xor    eax,eax
c00111b3:	5e                   	pop    esi
c00111b4:	5f                   	pop    edi
c00111b5:	c3                   	ret    

c00111b6 <SysGetUnixTime(regs*)>:
c00111b6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00111bb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111c5:	e9 04 a3 ff ff       	jmp    c000b4ce <Clock::timeInSecondsLocal()>

c00111ca <string_ends_with(char const*, char const*)>:
c00111ca:	57                   	push   edi
c00111cb:	56                   	push   esi
c00111cc:	53                   	push   ebx
c00111cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111d1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00111d5:	83 ec 0c             	sub    esp,0xc
c00111d8:	53                   	push   ebx
c00111d9:	e8 62 f3 fe ff       	call   c0000540 <strlen>
c00111de:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111e1:	89 c6                	mov    esi,eax
c00111e3:	e8 58 f3 fe ff       	call   c0000540 <strlen>
c00111e8:	83 c4 10             	add    esp,0x10
c00111eb:	39 c6                	cmp    esi,eax
c00111ed:	7d 06                	jge    c00111f5 <string_ends_with(char const*, char const*)+0x2b>
c00111ef:	5b                   	pop    ebx
c00111f0:	31 c0                	xor    eax,eax
c00111f2:	5e                   	pop    esi
c00111f3:	5f                   	pop    edi
c00111f4:	c3                   	ret    
c00111f5:	83 ec 08             	sub    esp,0x8
c00111f8:	29 c6                	sub    esi,eax
c00111fa:	57                   	push   edi
c00111fb:	01 f3                	add    ebx,esi
c00111fd:	53                   	push   ebx
c00111fe:	e8 dd f4 fe ff       	call   c00006e0 <strcmp>
c0011203:	83 c4 10             	add    esp,0x10
c0011206:	85 c0                	test   eax,eax
c0011208:	5b                   	pop    ebx
c0011209:	0f 94 c0             	sete   al
c001120c:	5e                   	pop    esi
c001120d:	25 ff 00 00 00       	and    eax,0xff
c0011212:	5f                   	pop    edi
c0011213:	c3                   	ret    

c0011214 <SysOpen(regs*)>:
c0011214:	56                   	push   esi
c0011215:	53                   	push   ebx
c0011216:	81 ec 04 01 00 00    	sub    esp,0x104
c001121c:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011223:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011226:	85 d2                	test   edx,edx
c0011228:	0f 84 cc 01 00 00    	je     c00113fa <SysOpen(regs*)+0x1e6>
c001122e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011231:	85 c0                	test   eax,eax
c0011233:	0f 84 c1 01 00 00    	je     c00113fa <SysOpen(regs*)+0x1e6>
c0011239:	83 ec 08             	sub    esp,0x8
c001123c:	50                   	push   eax
c001123d:	68 68 e8 01 c0       	push   0xc001e868
c0011242:	e8 03 93 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0011247:	83 c4 0c             	add    esp,0xc
c001124a:	68 75 e8 01 c0       	push   0xc001e875
c001124f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011252:	50                   	push   eax
c0011253:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011257:	56                   	push   esi
c0011258:	e8 b9 96 ff ff       	call   c000a916 <Fs::standardiseFiles(char*, char const*, char const*)>
c001125d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011260:	e8 db f2 fe ff       	call   c0000540 <strlen>
c0011265:	83 c4 10             	add    esp,0x10
c0011268:	48                   	dec    eax
c0011269:	74 1d                	je     c0011288 <SysOpen(regs*)+0x74>
c001126b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001126e:	eb 0f                	jmp    c001127f <SysOpen(regs*)+0x6b>
c0011270:	80 fa 3a             	cmp    dl,0x3a
c0011273:	74 0f                	je     c0011284 <SysOpen(regs*)+0x70>
c0011275:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011279:	48                   	dec    eax
c001127a:	74 0c                	je     c0011288 <SysOpen(regs*)+0x74>
c001127c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001127f:	80 fa 2e             	cmp    dl,0x2e
c0011282:	75 ec                	jne    c0011270 <SysOpen(regs*)+0x5c>
c0011284:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011288:	83 ec 08             	sub    esp,0x8
c001128b:	68 79 e8 01 c0       	push   0xc001e879
c0011290:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011293:	50                   	push   eax
c0011294:	e8 31 ff ff ff       	call   c00111ca <string_ends_with(char const*, char const*)>
c0011299:	83 c4 10             	add    esp,0x10
c001129c:	85 c0                	test   eax,eax
c001129e:	74 1d                	je     c00112bd <SysOpen(regs*)+0xa9>
c00112a0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112a3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00112a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112b0:	81 c4 04 01 00 00    	add    esp,0x104
c00112b6:	31 c0                	xor    eax,eax
c00112b8:	31 d2                	xor    edx,edx
c00112ba:	5b                   	pop    ebx
c00112bb:	5e                   	pop    esi
c00112bc:	c3                   	ret    
c00112bd:	83 ec 08             	sub    esp,0x8
c00112c0:	68 7e e8 01 c0       	push   0xc001e87e
c00112c5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112c8:	50                   	push   eax
c00112c9:	e8 fc fe ff ff       	call   c00111ca <string_ends_with(char const*, char const*)>
c00112ce:	83 c4 10             	add    esp,0x10
c00112d1:	85 c0                	test   eax,eax
c00112d3:	75 cb                	jne    c00112a0 <SysOpen(regs*)+0x8c>
c00112d5:	83 ec 08             	sub    esp,0x8
c00112d8:	68 7a e8 01 c0       	push   0xc001e87a
c00112dd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112e0:	50                   	push   eax
c00112e1:	e8 fa f3 fe ff       	call   c00006e0 <strcmp>
c00112e6:	83 c4 10             	add    esp,0x10
c00112e9:	85 c0                	test   eax,eax
c00112eb:	74 b3                	je     c00112a0 <SysOpen(regs*)+0x8c>
c00112ed:	83 ec 08             	sub    esp,0x8
c00112f0:	68 79 e8 01 c0       	push   0xc001e879
c00112f5:	56                   	push   esi
c00112f6:	e8 cf fe ff ff       	call   c00111ca <string_ends_with(char const*, char const*)>
c00112fb:	83 c4 10             	add    esp,0x10
c00112fe:	85 c0                	test   eax,eax
c0011300:	75 9e                	jne    c00112a0 <SysOpen(regs*)+0x8c>
c0011302:	83 ec 08             	sub    esp,0x8
c0011305:	68 83 e8 01 c0       	push   0xc001e883
c001130a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001130d:	50                   	push   eax
c001130e:	e8 b7 fe ff ff       	call   c00111ca <string_ends_with(char const*, char const*)>
c0011313:	83 c4 10             	add    esp,0x10
c0011316:	85 c0                	test   eax,eax
c0011318:	0f 85 ef 00 00 00    	jne    c001140d <SysOpen(regs*)+0x1f9>
c001131e:	83 ec 08             	sub    esp,0x8
c0011321:	68 88 e8 01 c0       	push   0xc001e888
c0011326:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011329:	50                   	push   eax
c001132a:	e8 9b fe ff ff       	call   c00111ca <string_ends_with(char const*, char const*)>
c001132f:	83 c4 10             	add    esp,0x10
c0011332:	85 c0                	test   eax,eax
c0011334:	0f 85 d3 00 00 00    	jne    c001140d <SysOpen(regs*)+0x1f9>
c001133a:	83 ec 08             	sub    esp,0x8
c001133d:	68 84 e8 01 c0       	push   0xc001e884
c0011342:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011345:	51                   	push   ecx
c0011346:	e8 95 f3 fe ff       	call   c00006e0 <strcmp>
c001134b:	83 c4 10             	add    esp,0x10
c001134e:	85 c0                	test   eax,eax
c0011350:	0f 84 b7 00 00 00    	je     c001140d <SysOpen(regs*)+0x1f9>
c0011356:	83 ec 08             	sub    esp,0x8
c0011359:	68 83 e8 01 c0       	push   0xc001e883
c001135e:	56                   	push   esi
c001135f:	e8 66 fe ff ff       	call   c00111ca <string_ends_with(char const*, char const*)>
c0011364:	83 c4 10             	add    esp,0x10
c0011367:	85 c0                	test   eax,eax
c0011369:	0f 85 9e 00 00 00    	jne    c001140d <SysOpen(regs*)+0x1f9>
c001136f:	83 ec 0c             	sub    esp,0xc
c0011372:	68 14 01 00 00       	push   0x114
c0011377:	e8 3d 64 ff ff       	call   c00077b9 <malloc>
c001137c:	83 c4 0c             	add    esp,0xc
c001137f:	89 c6                	mov    esi,eax
c0011381:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011386:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011389:	50                   	push   eax
c001138a:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001138d:	52                   	push   edx
c001138e:	56                   	push   esi
c001138f:	e8 2c 97 ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c0011394:	83 c4 10             	add    esp,0x10
c0011397:	85 f6                	test   esi,esi
c0011399:	74 5f                	je     c00113fa <SysOpen(regs*)+0x1e6>
c001139b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001139e:	89 d0                	mov    eax,edx
c00113a0:	25 ff 00 00 00       	and    eax,0xff
c00113a5:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00113a8:	89 d0                	mov    eax,edx
c00113aa:	83 e0 01             	and    eax,0x1
c00113ad:	f6 c2 02             	test   dl,0x2
c00113b0:	74 03                	je     c00113b5 <SysOpen(regs*)+0x1a1>
c00113b2:	83 c8 02             	or     eax,0x2
c00113b5:	f6 c2 04             	test   dl,0x4
c00113b8:	74 03                	je     c00113bd <SysOpen(regs*)+0x1a9>
c00113ba:	83 c8 04             	or     eax,0x4
c00113bd:	f6 c2 08             	test   dl,0x8
c00113c0:	74 03                	je     c00113c5 <SysOpen(regs*)+0x1b1>
c00113c2:	83 c8 0a             	or     eax,0xa
c00113c5:	83 e2 10             	and    edx,0x10
c00113c8:	74 03                	je     c00113cd <SysOpen(regs*)+0x1b9>
c00113ca:	83 c8 12             	or     eax,0x12
c00113cd:	83 ec 08             	sub    esp,0x8
c00113d0:	50                   	push   eax
c00113d1:	56                   	push   esi
c00113d2:	e8 a9 97 ff ff       	call   c000ab80 <File::open(FileOpenMode)>
c00113d7:	83 c4 10             	add    esp,0x10
c00113da:	85 c0                	test   eax,eax
c00113dc:	75 1c                	jne    c00113fa <SysOpen(regs*)+0x1e6>
c00113de:	83 ec 0c             	sub    esp,0xc
c00113e1:	56                   	push   esi
c00113e2:	e8 5b 7a ff ff       	call   c0008e42 <UnixFile::getFileDescriptor()>
c00113e7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00113ea:	83 c4 10             	add    esp,0x10
c00113ed:	89 02                	mov    DWORD PTR [edx],eax
c00113ef:	c1 f8 1f             	sar    eax,0x1f
c00113f2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00113f5:	e9 b6 fe ff ff       	jmp    c00112b0 <SysOpen(regs*)+0x9c>
c00113fa:	81 c4 04 01 00 00    	add    esp,0x104
c0011400:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011405:	ba ff ff ff ff       	mov    edx,0xffffffff
c001140a:	5b                   	pop    ebx
c001140b:	5e                   	pop    esi
c001140c:	c3                   	ret    
c001140d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011410:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011416:	e9 8e fe ff ff       	jmp    c00112a9 <SysOpen(regs*)+0x95>

c001141b <KeSystemCall(regs*, void*)>:
c001141b:	53                   	push   ebx
c001141c:	83 ec 08             	sub    esp,0x8
c001141f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011423:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011426:	83 f8 32             	cmp    eax,0x32
c0011429:	77 16                	ja     c0011441 <KeSystemCall(regs*, void*)+0x26>
c001142b:	8b 14 85 00 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0600]
c0011432:	85 d2                	test   edx,edx
c0011434:	74 0b                	je     c0011441 <KeSystemCall(regs*, void*)+0x26>
c0011436:	83 ec 0c             	sub    esp,0xc
c0011439:	53                   	push   ebx
c001143a:	ff d2                	call   edx
c001143c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001143f:	eb 0d                	jmp    c001144e <KeSystemCall(regs*, void*)+0x33>
c0011441:	52                   	push   edx
c0011442:	52                   	push   edx
c0011443:	50                   	push   eax
c0011444:	68 8d e8 01 c0       	push   0xc001e88d
c0011449:	e8 fc 90 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c001144e:	83 c4 10             	add    esp,0x10
c0011451:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011456:	31 d2                	xor    edx,edx
c0011458:	83 c4 08             	add    esp,0x8
c001145b:	5b                   	pop    ebx
c001145c:	c3                   	ret    

c001145d <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001145d:	55                   	push   ebp
c001145e:	57                   	push   edi
c001145f:	56                   	push   esi
c0011460:	53                   	push   ebx
c0011461:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011467:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001146e:	8a 1e                	mov    bl,BYTE PTR [esi]
c0011470:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011473:	80 fb 40             	cmp    bl,0x40
c0011476:	75 1b                	jne    c0011493 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0011478:	8a 16                	mov    dl,BYTE PTR [esi]
c001147a:	84 d2                	test   dl,dl
c001147c:	0f 84 f1 00 00 00    	je     c0011573 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011482:	8d 46 01             	lea    eax,[esi+0x1]
c0011485:	80 fa 3a             	cmp    dl,0x3a
c0011488:	74 04                	je     c001148e <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001148a:	89 c6                	mov    esi,eax
c001148c:	eb ea                	jmp    c0011478 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001148e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011491:	89 c6                	mov    esi,eax
c0011493:	50                   	push   eax
c0011494:	6a 40                	push   0x40
c0011496:	6a 00                	push   0x0
c0011498:	8d 44 24 24          	lea    eax,[esp+0x24]
c001149c:	50                   	push   eax
c001149d:	e8 2e f0 fe ff       	call   c00004d0 <memset>
c00114a2:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00114a9:	31 c0                	xor    eax,eax
c00114ab:	83 c4 10             	add    esp,0x10
c00114ae:	8a 0f                	mov    cl,BYTE PTR [edi]
c00114b0:	84 c9                	test   cl,cl
c00114b2:	0f 84 bb 00 00 00    	je     c0011573 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114b8:	3d c7 00 00 00       	cmp    eax,0xc7
c00114bd:	0f 8f b0 00 00 00    	jg     c0011573 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114c3:	80 f9 0a             	cmp    cl,0xa
c00114c6:	0f 85 98 00 00 00    	jne    c0011564 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00114cc:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00114d1:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00114d5:	a8 df                	test   al,0xdf
c00114d7:	0f 94 c1             	sete   cl
c00114da:	3c 23                	cmp    al,0x23
c00114dc:	0f 94 c2             	sete   dl
c00114df:	08 d1                	or     cl,dl
c00114e1:	75 4a                	jne    c001152d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114e3:	8d 50 f7             	lea    edx,[eax-0x9]
c00114e6:	80 fa 01             	cmp    dl,0x1
c00114e9:	76 42                	jbe    c001152d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114eb:	3c 5b                	cmp    al,0x5b
c00114ed:	75 42                	jne    c0011531 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00114ef:	80 fb 40             	cmp    bl,0x40
c00114f2:	75 39                	jne    c001152d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114f4:	83 ec 0c             	sub    esp,0xc
c00114f7:	8d 54 24 65          	lea    edx,[esp+0x65]
c00114fb:	52                   	push   edx
c00114fc:	e8 3f f0 fe ff       	call   c0000540 <strlen>
c0011501:	83 c4 10             	add    esp,0x10
c0011504:	83 f8 3f             	cmp    eax,0x3f
c0011507:	77 6a                	ja     c0011573 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011509:	50                   	push   eax
c001150a:	50                   	push   eax
c001150b:	8d 54 24 61          	lea    edx,[esp+0x61]
c001150f:	52                   	push   edx
c0011510:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011514:	52                   	push   edx
c0011515:	e8 e6 f0 fe ff       	call   c0000600 <strcpy>
c001151a:	58                   	pop    eax
c001151b:	8d 54 24 24          	lea    edx,[esp+0x24]
c001151f:	52                   	push   edx
c0011520:	e8 1b f0 fe ff       	call   c0000540 <strlen>
c0011525:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001152a:	83 c4 10             	add    esp,0x10
c001152d:	31 d2                	xor    edx,edx
c001152f:	eb 3a                	jmp    c001156b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011531:	80 fb 40             	cmp    bl,0x40
c0011534:	74 06                	je     c001153c <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0011536:	8d 44 24 58          	lea    eax,[esp+0x58]
c001153a:	eb 20                	jmp    c001155c <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001153c:	50                   	push   eax
c001153d:	50                   	push   eax
c001153e:	55                   	push   ebp
c001153f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011543:	50                   	push   eax
c0011544:	e8 97 f1 fe ff       	call   c00006e0 <strcmp>
c0011549:	83 c4 10             	add    esp,0x10
c001154c:	85 c0                	test   eax,eax
c001154e:	75 dd                	jne    c001152d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011550:	eb e4                	jmp    c0011536 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011552:	8d 50 01             	lea    edx,[eax+0x1]
c0011555:	80 f9 3d             	cmp    cl,0x3d
c0011558:	74 1d                	je     c0011577 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001155a:	89 d0                	mov    eax,edx
c001155c:	8a 08                	mov    cl,BYTE PTR [eax]
c001155e:	84 c9                	test   cl,cl
c0011560:	75 f0                	jne    c0011552 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011562:	eb 0f                	jmp    c0011573 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011564:	8d 50 01             	lea    edx,[eax+0x1]
c0011567:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001156b:	47                   	inc    edi
c001156c:	89 d0                	mov    eax,edx
c001156e:	e9 3b ff ff ff       	jmp    c00114ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0011573:	31 c0                	xor    eax,eax
c0011575:	eb 33                	jmp    c00115aa <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0011577:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001157b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001157e:	50                   	push   eax
c001157f:	50                   	push   eax
c0011580:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011584:	50                   	push   eax
c0011585:	56                   	push   esi
c0011586:	e8 55 f1 fe ff       	call   c00006e0 <strcmp>
c001158b:	83 c4 10             	add    esp,0x10
c001158e:	85 c0                	test   eax,eax
c0011590:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011594:	75 97                	jne    c001152d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011596:	51                   	push   ecx
c0011597:	51                   	push   ecx
c0011598:	52                   	push   edx
c0011599:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00115a0:	e8 5b f0 fe ff       	call   c0000600 <strcpy>
c00115a5:	83 c4 10             	add    esp,0x10
c00115a8:	b0 01                	mov    al,0x1
c00115aa:	81 c4 2c 01 00 00    	add    esp,0x12c
c00115b0:	5b                   	pop    ebx
c00115b1:	5e                   	pop    esi
c00115b2:	5f                   	pop    edi
c00115b3:	5d                   	pop    ebp
c00115b4:	c3                   	ret    

c00115b5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00115b5:	57                   	push   edi
c00115b6:	56                   	push   esi
c00115b7:	53                   	push   ebx
c00115b8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00115be:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00115c5:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00115cc:	53                   	push   ebx
c00115cd:	e8 6e ef fe ff       	call   c0000540 <strlen>
c00115d2:	89 34 24             	mov    DWORD PTR [esp],esi
c00115d5:	89 c7                	mov    edi,eax
c00115d7:	e8 64 ef fe ff       	call   c0000540 <strlen>
c00115dc:	83 c4 10             	add    esp,0x10
c00115df:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00115e3:	3d ff 00 00 00       	cmp    eax,0xff
c00115e8:	0f 87 d3 00 00 00    	ja     c00116c1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00115ee:	57                   	push   edi
c00115ef:	57                   	push   edi
c00115f0:	56                   	push   esi
c00115f1:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00115f5:	56                   	push   esi
c00115f6:	e8 05 f0 fe ff       	call   c0000600 <strcpy>
c00115fb:	58                   	pop    eax
c00115fc:	5a                   	pop    edx
c00115fd:	68 3e eb 01 c0       	push   0xc001eb3e
c0011602:	56                   	push   esi
c0011603:	e8 b8 f1 fe ff       	call   c00007c0 <strcat>
c0011608:	59                   	pop    ecx
c0011609:	5f                   	pop    edi
c001160a:	53                   	push   ebx
c001160b:	56                   	push   esi
c001160c:	e8 af f1 fe ff       	call   c00007c0 <strcat>
c0011611:	58                   	pop    eax
c0011612:	5a                   	pop    edx
c0011613:	68 a1 e8 01 c0       	push   0xc001e8a1
c0011618:	56                   	push   esi
c0011619:	e8 a2 f1 fe ff       	call   c00007c0 <strcat>
c001161e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011625:	e8 8f 61 ff ff       	call   c00077b9 <malloc>
c001162a:	83 c4 0c             	add    esp,0xc
c001162d:	89 c3                	mov    ebx,eax
c001162f:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0011635:	56                   	push   esi
c0011636:	50                   	push   eax
c0011637:	e8 84 94 ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c001163c:	83 c4 10             	add    esp,0x10
c001163f:	85 db                	test   ebx,ebx
c0011641:	74 7e                	je     c00116c1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011643:	51                   	push   ecx
c0011644:	51                   	push   ecx
c0011645:	6a 01                	push   0x1
c0011647:	53                   	push   ebx
c0011648:	e8 33 95 ff ff       	call   c000ab80 <File::open(FileOpenMode)>
c001164d:	83 c4 10             	add    esp,0x10
c0011650:	85 c0                	test   eax,eax
c0011652:	74 08                	je     c001165c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011654:	83 ec 0c             	sub    esp,0xc
c0011657:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011659:	53                   	push   ebx
c001165a:	eb 5f                	jmp    c00116bb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001165c:	52                   	push   edx
c001165d:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011661:	50                   	push   eax
c0011662:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011666:	50                   	push   eax
c0011667:	53                   	push   ebx
c0011668:	e8 bf 97 ff ff       	call   c000ae2c <File::stat(unsigned long long*, bool*)>
c001166d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011671:	83 c4 10             	add    esp,0x10
c0011674:	89 c1                	mov    ecx,eax
c0011676:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001167a:	74 31                	je     c00116ad <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001167c:	83 ec 0c             	sub    esp,0xc
c001167f:	50                   	push   eax
c0011680:	e8 34 61 ff ff       	call   c00077b9 <malloc>
c0011685:	89 c6                	mov    esi,eax
c0011687:	58                   	pop    eax
c0011688:	8b 03                	mov    eax,DWORD PTR [ebx]
c001168a:	8d 54 24 20          	lea    edx,[esp+0x20]
c001168e:	52                   	push   edx
c001168f:	56                   	push   esi
c0011690:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011694:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011698:	53                   	push   ebx
c0011699:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001169c:	83 c4 20             	add    esp,0x20
c001169f:	85 c0                	test   eax,eax
c00116a1:	75 0a                	jne    c00116ad <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00116a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116a7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00116ab:	74 18                	je     c00116c5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00116ad:	83 ec 0c             	sub    esp,0xc
c00116b0:	53                   	push   ebx
c00116b1:	e8 28 95 ff ff       	call   c000abde <File::close()>
c00116b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116be:	83 c4 10             	add    esp,0x10
c00116c1:	31 c0                	xor    eax,eax
c00116c3:	eb 3b                	jmp    c0011700 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00116c5:	83 ec 0c             	sub    esp,0xc
c00116c8:	53                   	push   ebx
c00116c9:	e8 10 95 ff ff       	call   c000abde <File::close()>
c00116ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116d6:	83 c4 0c             	add    esp,0xc
c00116d9:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116e0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116e7:	56                   	push   esi
c00116e8:	e8 70 fd ff ff       	call   c001145d <Reg::findLineFromLoadedData(char*, char*, char*)>
c00116ed:	89 34 24             	mov    DWORD PTR [esp],esi
c00116f0:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00116f4:	e8 d0 60 ff ff       	call   c00077c9 <free>
c00116f9:	83 c4 10             	add    esp,0x10
c00116fc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011700:	81 c4 20 01 00 00    	add    esp,0x120
c0011706:	5b                   	pop    ebx
c0011707:	5e                   	pop    esi
c0011708:	5f                   	pop    edi
c0011709:	c3                   	ret    

c001170a <Reg::getLine(char*, char*, char*)>:
c001170a:	57                   	push   edi
c001170b:	56                   	push   esi
c001170c:	53                   	push   ebx
c001170d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011711:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011715:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011719:	57                   	push   edi
c001171a:	56                   	push   esi
c001171b:	53                   	push   ebx
c001171c:	68 a6 e8 01 c0       	push   0xc001e8a6
c0011721:	e8 8f fe ff ff       	call   c00115b5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011726:	83 c4 10             	add    esp,0x10
c0011729:	84 c0                	test   al,al
c001172b:	75 10                	jne    c001173d <Reg::getLine(char*, char*, char*)+0x33>
c001172d:	57                   	push   edi
c001172e:	56                   	push   esi
c001172f:	53                   	push   ebx
c0011730:	68 cb e8 01 c0       	push   0xc001e8cb
c0011735:	e8 7b fe ff ff       	call   c00115b5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001173a:	83 c4 10             	add    esp,0x10
c001173d:	5b                   	pop    ebx
c001173e:	5e                   	pop    esi
c001173f:	5f                   	pop    edi
c0011740:	c3                   	ret    

c0011741 <Reg::readInt(char*, char*, int*)>:
c0011741:	55                   	push   ebp
c0011742:	57                   	push   edi
c0011743:	56                   	push   esi
c0011744:	53                   	push   ebx
c0011745:	81 ec f0 00 00 00    	sub    esp,0xf0
c001174b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001174f:	57                   	push   edi
c0011750:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011757:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001175e:	e8 a7 ff ff ff       	call   c001170a <Reg::getLine(char*, char*, char*)>
c0011763:	83 c4 10             	add    esp,0x10
c0011766:	84 c0                	test   al,al
c0011768:	0f 84 b3 00 00 00    	je     c0011821 <Reg::readInt(char*, char*, int*)+0xe0>
c001176e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0011772:	80 fa 2b             	cmp    dl,0x2b
c0011775:	74 0c                	je     c0011783 <Reg::readInt(char*, char*, int*)+0x42>
c0011777:	80 fa 2d             	cmp    dl,0x2d
c001177a:	75 0e                	jne    c001178a <Reg::readInt(char*, char*, int*)+0x49>
c001177c:	ba 01 00 00 00       	mov    edx,0x1
c0011781:	eb 0b                	jmp    c001178e <Reg::readInt(char*, char*, int*)+0x4d>
c0011783:	ba 01 00 00 00       	mov    edx,0x1
c0011788:	eb 02                	jmp    c001178c <Reg::readInt(char*, char*, int*)+0x4b>
c001178a:	31 d2                	xor    edx,edx
c001178c:	31 c0                	xor    eax,eax
c001178e:	be 0a 00 00 00       	mov    esi,0xa
c0011793:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0011798:	75 20                	jne    c00117ba <Reg::readInt(char*, char*, int*)+0x79>
c001179a:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001179e:	80 f9 78             	cmp    cl,0x78
c00117a1:	75 0a                	jne    c00117ad <Reg::readInt(char*, char*, int*)+0x6c>
c00117a3:	83 c2 02             	add    edx,0x2
c00117a6:	be 10 00 00 00       	mov    esi,0x10
c00117ab:	eb 0d                	jmp    c00117ba <Reg::readInt(char*, char*, int*)+0x79>
c00117ad:	80 f9 62             	cmp    cl,0x62
c00117b0:	75 08                	jne    c00117ba <Reg::readInt(char*, char*, int*)+0x79>
c00117b2:	83 c2 02             	add    edx,0x2
c00117b5:	be 02 00 00 00       	mov    esi,0x2
c00117ba:	01 d7                	add    edi,edx
c00117bc:	31 d2                	xor    edx,edx
c00117be:	8a 1f                	mov    bl,BYTE PTR [edi]
c00117c0:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00117c4:	80 fb 0d             	cmp    bl,0xd
c00117c7:	0f 94 c3             	sete   bl
c00117ca:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117cf:	0f 94 c1             	sete   cl
c00117d2:	08 cb                	or     bl,cl
c00117d4:	75 3a                	jne    c0011810 <Reg::readInt(char*, char*, int*)+0xcf>
c00117d6:	0f af d6             	imul   edx,esi
c00117d9:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00117de:	83 fe 10             	cmp    esi,0x10
c00117e1:	75 26                	jne    c0011809 <Reg::readInt(char*, char*, int*)+0xc8>
c00117e3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117e7:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00117ea:	89 e9                	mov    ecx,ebp
c00117ec:	80 f9 05             	cmp    cl,0x5
c00117ef:	77 06                	ja     c00117f7 <Reg::readInt(char*, char*, int*)+0xb6>
c00117f1:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00117f5:	eb 16                	jmp    c001180d <Reg::readInt(char*, char*, int*)+0xcc>
c00117f7:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117fb:	83 e9 61             	sub    ecx,0x61
c00117fe:	80 f9 05             	cmp    cl,0x5
c0011801:	77 06                	ja     c0011809 <Reg::readInt(char*, char*, int*)+0xc8>
c0011803:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0011807:	eb 04                	jmp    c001180d <Reg::readInt(char*, char*, int*)+0xcc>
c0011809:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001180d:	47                   	inc    edi
c001180e:	eb ae                	jmp    c00117be <Reg::readInt(char*, char*, int*)+0x7d>
c0011810:	84 c0                	test   al,al
c0011812:	74 02                	je     c0011816 <Reg::readInt(char*, char*, int*)+0xd5>
c0011814:	f7 da                	neg    edx
c0011816:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001181d:	89 10                	mov    DWORD PTR [eax],edx
c001181f:	88 d8                	mov    al,bl
c0011821:	81 c4 ec 00 00 00    	add    esp,0xec
c0011827:	5b                   	pop    ebx
c0011828:	5e                   	pop    esi
c0011829:	5f                   	pop    edi
c001182a:	5d                   	pop    ebp
c001182b:	c3                   	ret    

c001182c <Reg::readString(char*, char*, char*, int)>:
c001182c:	57                   	push   edi
c001182d:	56                   	push   esi
c001182e:	53                   	push   ebx
c001182f:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011835:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001183c:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011840:	57                   	push   edi
c0011841:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011848:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001184f:	e8 b6 fe ff ff       	call   c001170a <Reg::getLine(char*, char*, char*)>
c0011854:	83 c4 10             	add    esp,0x10
c0011857:	89 c6                	mov    esi,eax
c0011859:	84 c0                	test   al,al
c001185b:	74 44                	je     c00118a1 <Reg::readString(char*, char*, char*, int)+0x75>
c001185d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011864:	31 c0                	xor    eax,eax
c0011866:	4a                   	dec    edx
c0011867:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001186a:	84 c9                	test   cl,cl
c001186c:	74 0f                	je     c001187d <Reg::readString(char*, char*, char*, int)+0x51>
c001186e:	39 c2                	cmp    edx,eax
c0011870:	7e 0b                	jle    c001187d <Reg::readString(char*, char*, char*, int)+0x51>
c0011872:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011875:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001187a:	40                   	inc    eax
c001187b:	eb ea                	jmp    c0011867 <Reg::readString(char*, char*, char*, int)+0x3b>
c001187d:	83 ec 0c             	sub    esp,0xc
c0011880:	53                   	push   ebx
c0011881:	e8 ba ec fe ff       	call   c0000540 <strlen>
c0011886:	83 c4 10             	add    esp,0x10
c0011889:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001188e:	75 11                	jne    c00118a1 <Reg::readString(char*, char*, char*, int)+0x75>
c0011890:	83 ec 0c             	sub    esp,0xc
c0011893:	53                   	push   ebx
c0011894:	e8 a7 ec fe ff       	call   c0000540 <strlen>
c0011899:	83 c4 10             	add    esp,0x10
c001189c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00118a1:	81 c4 d0 00 00 00    	add    esp,0xd0
c00118a7:	89 f0                	mov    eax,esi
c00118a9:	5b                   	pop    ebx
c00118aa:	5e                   	pop    esi
c00118ab:	5f                   	pop    edi
c00118ac:	c3                   	ret    

c00118ad <Reg::readBool(char*, char*, bool*)>:
c00118ad:	83 ec 20             	sub    esp,0x20
c00118b0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00118b4:	50                   	push   eax
c00118b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118bd:	e8 7f fe ff ff       	call   c0011741 <Reg::readInt(char*, char*, int*)>
c00118c2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00118c7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00118cb:	0f 95 02             	setne  BYTE PTR [edx]
c00118ce:	83 c4 2c             	add    esp,0x2c
c00118d1:	c3                   	ret    

c00118d2 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00118d2:	53                   	push   ebx
c00118d3:	83 ec 1c             	sub    esp,0x1c
c00118d6:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00118da:	8d 44 24 13          	lea    eax,[esp+0x13]
c00118de:	50                   	push   eax
c00118df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118e7:	e8 c1 ff ff ff       	call   c00118ad <Reg::readBool(char*, char*, bool*)>
c00118ec:	83 c4 10             	add    esp,0x10
c00118ef:	84 c0                	test   al,al
c00118f1:	74 04                	je     c00118f7 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00118f3:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00118f7:	88 d8                	mov    al,bl
c00118f9:	83 c4 18             	add    esp,0x18
c00118fc:	5b                   	pop    ebx
c00118fd:	c3                   	ret    

c00118fe <Reg::readIntWithDefault(char*, char*, int)>:
c00118fe:	53                   	push   ebx
c00118ff:	83 ec 1c             	sub    esp,0x1c
c0011902:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011906:	8d 44 24 10          	lea    eax,[esp+0x10]
c001190a:	50                   	push   eax
c001190b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001190f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011913:	e8 29 fe ff ff       	call   c0011741 <Reg::readInt(char*, char*, int*)>
c0011918:	83 c4 10             	add    esp,0x10
c001191b:	84 c0                	test   al,al
c001191d:	74 04                	je     c0011923 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001191f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011923:	89 d8                	mov    eax,ebx
c0011925:	83 c4 18             	add    esp,0x18
c0011928:	5b                   	pop    ebx
c0011929:	c3                   	ret    

c001192a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001192a:	57                   	push   edi
c001192b:	56                   	push   esi
c001192c:	56                   	push   esi
c001192d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011931:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011935:	56                   	push   esi
c0011936:	57                   	push   edi
c0011937:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001193b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001193f:	e8 e8 fe ff ff       	call   c001182c <Reg::readString(char*, char*, char*, int)>
c0011944:	83 c4 10             	add    esp,0x10
c0011947:	84 c0                	test   al,al
c0011949:	75 1a                	jne    c0011965 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001194b:	51                   	push   ecx
c001194c:	56                   	push   esi
c001194d:	6a 00                	push   0x0
c001194f:	57                   	push   edi
c0011950:	e8 7b eb fe ff       	call   c00004d0 <memset>
c0011955:	8d 4e ff             	lea    ecx,[esi-0x1]
c0011958:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001195c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001195e:	83 c4 10             	add    esp,0x10
c0011961:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011965:	89 f8                	mov    eax,edi
c0011967:	5a                   	pop    edx
c0011968:	5e                   	pop    esi
c0011969:	5f                   	pop    edi
c001196a:	c3                   	ret    

c001196b <SysEject(regs*)>:
c001196b:	83 ec 0c             	sub    esp,0xc
c001196e:	83 ca ff             	or     edx,0xffffffff
c0011971:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011975:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011978:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001197d:	83 e9 41             	sub    ecx,0x41
c0011980:	83 f9 19             	cmp    ecx,0x19
c0011983:	77 18                	ja     c001199d <SysEject(regs*)+0x32>
c0011985:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c001198c:	85 c9                	test   ecx,ecx
c001198e:	74 0d                	je     c001199d <SysEject(regs*)+0x32>
c0011990:	83 ec 0c             	sub    esp,0xc
c0011993:	51                   	push   ecx
c0011994:	e8 6d b2 ff ff       	call   c000cc06 <LogicalDisk::eject()>
c0011999:	83 c4 10             	add    esp,0x10
c001199c:	99                   	cdq    
c001199d:	83 c4 0c             	add    esp,0xc
c00119a0:	c3                   	ret    

c00119a1 <SysExit(regs*)>:
c00119a1:	83 ec 18             	sub    esp,0x18
c00119a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119a8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119ab:	e8 14 27 00 00       	call   c00140c4 <terminateTask(int)>
c00119b0:	83 c8 ff             	or     eax,0xffffffff
c00119b3:	83 c4 1c             	add    esp,0x1c
c00119b6:	89 c2                	mov    edx,eax
c00119b8:	c3                   	ret    

c00119b9 <SysGetCwd(regs*)>:
c00119b9:	83 ec 10             	sub    esp,0x10
c00119bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00119c0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00119c3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119cb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00119ce:	e8 ef 8e ff ff       	call   c000a8c2 <Fs::getcwd(Process*, char*, int)>
c00119d3:	83 c4 1c             	add    esp,0x1c
c00119d6:	99                   	cdq    
c00119d7:	c3                   	ret    

c00119d8 <SysGetPID(regs*)>:
c00119d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119dd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00119e2:	99                   	cdq    
c00119e3:	c3                   	ret    

c00119e4 <SysGetRAMData(regs*)>:
c00119e4:	8b 0d e8 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021ee8
c00119ea:	69 05 e4 1e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0021ee4,0xc8
c00119f4:	99                   	cdq    
c00119f5:	f7 f9                	idiv   ecx
c00119f7:	c1 e0 18             	shl    eax,0x18
c00119fa:	09 c8                	or     eax,ecx
c00119fc:	99                   	cdq    
c00119fd:	c3                   	ret    

c00119fe <SysGetVGAPtr(regs*)>:
c00119fe:	55                   	push   ebp
c00119ff:	57                   	push   edi
c0011a00:	56                   	push   esi
c0011a01:	53                   	push   ebx
c0011a02:	83 ec 18             	sub    esp,0x18
c0011a05:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a09:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011a0c:	e8 b3 21 00 00       	call   c0013bc4 <Thr::processFromPID(int)>
c0011a11:	83 c4 10             	add    esp,0x10
c0011a14:	89 c1                	mov    ecx,eax
c0011a16:	b8 01 00 00 00       	mov    eax,0x1
c0011a1b:	85 c9                	test   ecx,ecx
c0011a1d:	74 57                	je     c0011a76 <SysGetVGAPtr(regs*)+0x78>
c0011a1f:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011a25:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011a29:	74 0c                	je     c0011a37 <SysGetVGAPtr(regs*)+0x39>
c0011a2b:	83 ec 0c             	sub    esp,0xc
c0011a2e:	55                   	push   ebp
c0011a2f:	e8 c3 69 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011a34:	83 c4 10             	add    esp,0x10
c0011a37:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011a3a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a3d:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011a42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a44:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011a47:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a4a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011a50:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a53:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011a56:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011a5c:	50                   	push   eax
c0011a5d:	50                   	push   eax
c0011a5e:	68 e6 e8 01 c0       	push   0xc001e8e6
c0011a63:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a66:	05 a8 0f 00 00       	add    eax,0xfa8
c0011a6b:	50                   	push   eax
c0011a6c:	e8 8f eb fe ff       	call   c0000600 <strcpy>
c0011a71:	83 c4 10             	add    esp,0x10
c0011a74:	31 c0                	xor    eax,eax
c0011a76:	83 c4 0c             	add    esp,0xc
c0011a79:	31 d2                	xor    edx,edx
c0011a7b:	5b                   	pop    ebx
c0011a7c:	5e                   	pop    esi
c0011a7d:	5f                   	pop    edi
c0011a7e:	5d                   	pop    ebp
c0011a7f:	c3                   	ret    

c0011a80 <SysLoadDLL(regs*)>:
c0011a80:	56                   	push   esi
c0011a81:	53                   	push   ebx
c0011a82:	31 d2                	xor    edx,edx
c0011a84:	51                   	push   ecx
c0011a85:	b8 01 00 00 00       	mov    eax,0x1
c0011a8a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a8e:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011a92:	0f 84 8c 00 00 00    	je     c0011b24 <SysLoadDLL(regs*)+0xa4>
c0011a98:	83 ec 0c             	sub    esp,0xc
c0011a9b:	68 14 01 00 00       	push   0x114
c0011aa0:	e8 14 5d ff ff       	call   c00077b9 <malloc>
c0011aa5:	83 c4 0c             	add    esp,0xc
c0011aa8:	89 c3                	mov    ebx,eax
c0011aaa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aaf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011ab2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011ab5:	53                   	push   ebx
c0011ab6:	e8 05 90 ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c0011abb:	83 c4 10             	add    esp,0x10
c0011abe:	31 d2                	xor    edx,edx
c0011ac0:	b8 02 00 00 00       	mov    eax,0x2
c0011ac5:	85 db                	test   ebx,ebx
c0011ac7:	74 5b                	je     c0011b24 <SysLoadDLL(regs*)+0xa4>
c0011ac9:	83 ec 0c             	sub    esp,0xc
c0011acc:	53                   	push   ebx
c0011acd:	e8 1c 93 ff ff       	call   c000adee <File::exists()>
c0011ad2:	83 c4 10             	add    esp,0x10
c0011ad5:	84 c0                	test   al,al
c0011ad7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ad9:	75 11                	jne    c0011aec <SysLoadDLL(regs*)+0x6c>
c0011adb:	83 ec 0c             	sub    esp,0xc
c0011ade:	53                   	push   ebx
c0011adf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ae2:	83 c4 10             	add    esp,0x10
c0011ae5:	b8 03 00 00 00       	mov    eax,0x3
c0011aea:	eb 36                	jmp    c0011b22 <SysLoadDLL(regs*)+0xa2>
c0011aec:	83 ec 0c             	sub    esp,0xc
c0011aef:	53                   	push   ebx
c0011af0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011af3:	58                   	pop    eax
c0011af4:	5a                   	pop    edx
c0011af5:	6a 00                	push   0x0
c0011af7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011afa:	e8 74 12 00 00       	call   c0012d73 <Thr::loadDLL(char const*, bool)>
c0011aff:	83 c4 10             	add    esp,0x10
c0011b02:	89 c1                	mov    ecx,eax
c0011b04:	31 d2                	xor    edx,edx
c0011b06:	b8 04 00 00 00       	mov    eax,0x4
c0011b0b:	85 c9                	test   ecx,ecx
c0011b0d:	74 15                	je     c0011b24 <SysLoadDLL(regs*)+0xa4>
c0011b0f:	53                   	push   ebx
c0011b10:	53                   	push   ebx
c0011b11:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0011b17:	51                   	push   ecx
c0011b18:	e8 87 14 00 00       	call   c0012fa4 <Thr::executeDLL(unsigned long, void*)>
c0011b1d:	83 c4 10             	add    esp,0x10
c0011b20:	31 c0                	xor    eax,eax
c0011b22:	31 d2                	xor    edx,edx
c0011b24:	59                   	pop    ecx
c0011b25:	5b                   	pop    ebx
c0011b26:	5e                   	pop    esi
c0011b27:	c3                   	ret    

c0011b28 <SysRead(regs*)>:
c0011b28:	57                   	push   edi
c0011b29:	56                   	push   esi
c0011b2a:	53                   	push   ebx
c0011b2b:	83 ec 10             	sub    esp,0x10
c0011b2e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b32:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b35:	83 f8 02             	cmp    eax,0x2
c0011b38:	77 10                	ja     c0011b4a <SysRead(regs*)+0x22>
c0011b3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b3f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b42:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011b48:	eb 0e                	jmp    c0011b58 <SysRead(regs*)+0x30>
c0011b4a:	83 ec 0c             	sub    esp,0xc
c0011b4d:	50                   	push   eax
c0011b4e:	e8 e4 75 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c0011b53:	83 c4 10             	add    esp,0x10
c0011b56:	89 c1                	mov    ecx,eax
c0011b58:	83 c8 ff             	or     eax,0xffffffff
c0011b5b:	85 c9                	test   ecx,ecx
c0011b5d:	89 c2                	mov    edx,eax
c0011b5f:	74 28                	je     c0011b89 <SysRead(regs*)+0x61>
c0011b61:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b69:	31 ff                	xor    edi,edi
c0011b6b:	83 ec 0c             	sub    esp,0xc
c0011b6e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011b70:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b74:	52                   	push   edx
c0011b75:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011b78:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011b7b:	57                   	push   edi
c0011b7c:	56                   	push   esi
c0011b7d:	51                   	push   ecx
c0011b7e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011b81:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b85:	83 c4 20             	add    esp,0x20
c0011b88:	99                   	cdq    
c0011b89:	83 c4 10             	add    esp,0x10
c0011b8c:	5b                   	pop    ebx
c0011b8d:	5e                   	pop    esi
c0011b8e:	5f                   	pop    edi
c0011b8f:	c3                   	ret    

c0011b90 <SysRegisterSignal(regs*)>:
c0011b90:	83 ec 18             	sub    esp,0x18
c0011b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b97:	6a 00                	push   0x0
c0011b99:	6a 00                	push   0x0
c0011b9b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011b9e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011ba1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ba6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ba9:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011baf:	e8 cd e9 ff ff       	call   c0010581 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011bb4:	83 c4 2c             	add    esp,0x2c
c0011bb7:	99                   	cdq    
c0011bb8:	c3                   	ret    

c0011bb9 <SysSbrk(regs*)>:
c0011bb9:	56                   	push   esi
c0011bba:	53                   	push   ebx
c0011bbb:	50                   	push   eax
c0011bbc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bc1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011bc5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bc8:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0011bcb:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011bd1:	85 db                	test   ebx,ebx
c0011bd3:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011bd6:	74 02                	je     c0011bda <SysSbrk(regs*)+0x21>
c0011bd8:	79 06                	jns    c0011be0 <SysSbrk(regs*)+0x27>
c0011bda:	89 f0                	mov    eax,esi
c0011bdc:	31 d2                	xor    edx,edx
c0011bde:	eb 2a                	jmp    c0011c0a <SysSbrk(regs*)+0x51>
c0011be0:	83 c8 ff             	or     eax,0xffffffff
c0011be3:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011be9:	89 c2                	mov    edx,eax
c0011beb:	77 1d                	ja     c0011c0a <SysSbrk(regs*)+0x51>
c0011bed:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011bf3:	50                   	push   eax
c0011bf4:	c1 ea 0c             	shr    edx,0xc
c0011bf7:	68 07 0c 00 00       	push   0xc07
c0011bfc:	52                   	push   edx
c0011bfd:	51                   	push   ecx
c0011bfe:	e8 51 7e ff ff       	call   c0009a54 <VAS::allocatePages(int, int)>
c0011c03:	89 f0                	mov    eax,esi
c0011c05:	31 d2                	xor    edx,edx
c0011c07:	83 c4 10             	add    esp,0x10
c0011c0a:	59                   	pop    ecx
c0011c0b:	5b                   	pop    ebx
c0011c0c:	5e                   	pop    esi
c0011c0d:	c3                   	ret    

c0011c0e <SysSetCwd(regs*)>:
c0011c0e:	83 ec 14             	sub    esp,0x14
c0011c11:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c15:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c1d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011c20:	e8 68 92 ff ff       	call   c000ae8d <Fs::setcwd(Process*, char*)>
c0011c25:	83 c4 1c             	add    esp,0x1c
c0011c28:	99                   	cdq    
c0011c29:	c3                   	ret    

c0011c2a <SysSetTime(regs*)>:
c0011c2a:	55                   	push   ebp
c0011c2b:	31 c9                	xor    ecx,ecx
c0011c2d:	57                   	push   edi
c0011c2e:	bd 0c 00 00 00       	mov    ebp,0xc
c0011c33:	56                   	push   esi
c0011c34:	53                   	push   ebx
c0011c35:	31 db                	xor    ebx,ebx
c0011c37:	83 ec 10             	sub    esp,0x10
c0011c3a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c3e:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011c41:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011c44:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011c47:	89 c2                	mov    edx,eax
c0011c49:	66 81 ef 6c 07       	sub    di,0x76c
c0011c4e:	83 e2 1f             	and    edx,0x1f
c0011c51:	c1 e7 10             	shl    edi,0x10
c0011c54:	42                   	inc    edx
c0011c55:	c1 e8 05             	shr    eax,0x5
c0011c58:	88 d1                	mov    cl,dl
c0011c5a:	31 d2                	xor    edx,edx
c0011c5c:	f7 f5                	div    ebp
c0011c5e:	89 dd                	mov    ebp,ebx
c0011c60:	88 d5                	mov    ch,dl
c0011c62:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011c68:	0f b7 c1             	movzx  eax,cx
c0011c6b:	31 d2                	xor    edx,edx
c0011c6d:	09 f8                	or     eax,edi
c0011c6f:	bf 3c 00 00 00       	mov    edi,0x3c
c0011c74:	89 c1                	mov    ecx,eax
c0011c76:	89 f0                	mov    eax,esi
c0011c78:	f7 f7                	div    edi
c0011c7a:	c1 e2 10             	shl    edx,0x10
c0011c7d:	09 d5                	or     ebp,edx
c0011c7f:	31 d2                	xor    edx,edx
c0011c81:	89 eb                	mov    ebx,ebp
c0011c83:	f7 f7                	div    edi
c0011c85:	bf 10 0e 00 00       	mov    edi,0xe10
c0011c8a:	88 d7                	mov    bh,dl
c0011c8c:	89 f0                	mov    eax,esi
c0011c8e:	31 d2                	xor    edx,edx
c0011c90:	f7 f7                	div    edi
c0011c92:	bf 18 00 00 00       	mov    edi,0x18
c0011c97:	31 d2                	xor    edx,edx
c0011c99:	f7 f7                	div    edi
c0011c9b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0011ca0:	88 d3                	mov    bl,dl
c0011ca2:	53                   	push   ebx
c0011ca3:	51                   	push   ecx
c0011ca4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011caa:	e8 ed 99 ff ff       	call   c000b69c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011caf:	83 c4 1c             	add    esp,0x1c
c0011cb2:	83 f0 01             	xor    eax,0x1
c0011cb5:	5b                   	pop    ebx
c0011cb6:	0f b6 c0             	movzx  eax,al
c0011cb9:	5e                   	pop    esi
c0011cba:	31 d2                	xor    edx,edx
c0011cbc:	5f                   	pop    edi
c0011cbd:	5d                   	pop    ebp
c0011cbe:	c3                   	ret    

c0011cbf <SysTimezone(regs*)>:
c0011cbf:	53                   	push   ebx
c0011cc0:	83 ec 08             	sub    esp,0x8
c0011cc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cc7:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011ccb:	75 17                	jne    c0011ce4 <SysTimezone(regs*)+0x25>
c0011ccd:	83 ec 0c             	sub    esp,0xc
c0011cd0:	68 f0 e8 01 c0       	push   0xc001e8f0
c0011cd5:	e8 70 88 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0011cda:	83 c8 ff             	or     eax,0xffffffff
c0011cdd:	83 c4 10             	add    esp,0x10
c0011ce0:	89 c2                	mov    edx,eax
c0011ce2:	eb 20                	jmp    c0011d04 <SysTimezone(regs*)+0x45>
c0011ce4:	83 ec 0c             	sub    esp,0xc
c0011ce7:	68 05 e9 01 c0       	push   0xc001e905
c0011cec:	e8 59 88 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0011cf1:	58                   	pop    eax
c0011cf2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011cf5:	e8 fe 96 ff ff       	call   c000b3f8 <User::loadClockSettings(int)>
c0011cfa:	83 c4 10             	add    esp,0x10
c0011cfd:	b8 01 00 00 00       	mov    eax,0x1
c0011d02:	31 d2                	xor    edx,edx
c0011d04:	83 c4 08             	add    esp,0x8
c0011d07:	5b                   	pop    ebx
c0011d08:	c3                   	ret    

c0011d09 <SysWrite(regs*)>:
c0011d09:	57                   	push   edi
c0011d0a:	56                   	push   esi
c0011d0b:	53                   	push   ebx
c0011d0c:	83 ec 10             	sub    esp,0x10
c0011d0f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d13:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d16:	83 f8 02             	cmp    eax,0x2
c0011d19:	77 10                	ja     c0011d2b <SysWrite(regs*)+0x22>
c0011d1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d20:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d23:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d29:	eb 0e                	jmp    c0011d39 <SysWrite(regs*)+0x30>
c0011d2b:	83 ec 0c             	sub    esp,0xc
c0011d2e:	50                   	push   eax
c0011d2f:	e8 03 74 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c0011d34:	83 c4 10             	add    esp,0x10
c0011d37:	89 c1                	mov    ecx,eax
c0011d39:	83 c8 ff             	or     eax,0xffffffff
c0011d3c:	85 c9                	test   ecx,ecx
c0011d3e:	89 c2                	mov    edx,eax
c0011d40:	74 28                	je     c0011d6a <SysWrite(regs*)+0x61>
c0011d42:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d4a:	31 ff                	xor    edi,edi
c0011d4c:	83 ec 0c             	sub    esp,0xc
c0011d4f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011d51:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d55:	52                   	push   edx
c0011d56:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011d59:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011d5c:	57                   	push   edi
c0011d5d:	56                   	push   esi
c0011d5e:	51                   	push   ecx
c0011d5f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d62:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d66:	83 c4 20             	add    esp,0x20
c0011d69:	99                   	cdq    
c0011d6a:	83 c4 10             	add    esp,0x10
c0011d6d:	5b                   	pop    ebx
c0011d6e:	5e                   	pop    esi
c0011d6f:	5f                   	pop    edi
c0011d70:	c3                   	ret    

c0011d71 <SysWsbe(regs*)>:
c0011d71:	57                   	push   edi
c0011d72:	b9 0b 00 00 00       	mov    ecx,0xb
c0011d77:	56                   	push   esi
c0011d78:	be 44 e9 01 c0       	mov    esi,0xc001e944
c0011d7d:	53                   	push   ebx
c0011d7e:	83 ec 30             	sub    esp,0x30
c0011d81:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011d85:	fc                   	cld    
c0011d86:	83 ec 0c             	sub    esp,0xc
c0011d89:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011d8b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011d8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d97:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011d9d:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d9f:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011da2:	57                   	push   edi
c0011da3:	e8 98 e7 fe ff       	call   c0000540 <strlen>
c0011da8:	5a                   	pop    edx
c0011da9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011dad:	52                   	push   edx
c0011dae:	31 d2                	xor    edx,edx
c0011db0:	57                   	push   edi
c0011db1:	52                   	push   edx
c0011db2:	50                   	push   eax
c0011db3:	56                   	push   esi
c0011db4:	ff d3                	call   ebx
c0011db6:	83 c4 14             	add    esp,0x14
c0011db9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011dbd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011dc0:	e8 ff 22 00 00       	call   c00140c4 <terminateTask(int)>
c0011dc5:	83 c4 40             	add    esp,0x40
c0011dc8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011dcd:	5b                   	pop    ebx
c0011dce:	31 d2                	xor    edx,edx
c0011dd0:	5e                   	pop    esi
c0011dd1:	5f                   	pop    edi
c0011dd2:	c3                   	ret    

c0011dd3 <SysYield(regs*)>:
c0011dd3:	83 ec 0c             	sub    esp,0xc
c0011dd6:	fa                   	cli    
c0011dd7:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011ddd:	e8 be 19 00 00       	call   c00137a0 <schedule()>
c0011de2:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011de7:	48                   	dec    eax
c0011de8:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011ded:	75 01                	jne    c0011df0 <SysYield(regs*)+0x1d>
c0011def:	fb                   	sti    
c0011df0:	31 c0                	xor    eax,eax
c0011df2:	31 d2                	xor    edx,edx
c0011df4:	83 c4 0c             	add    esp,0xc
c0011df7:	c3                   	ret    

c0011df8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011df8:	55                   	push   ebp
c0011df9:	57                   	push   edi
c0011dfa:	56                   	push   esi
c0011dfb:	53                   	push   ebx
c0011dfc:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011e02:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011e0a:	0f 95 c2             	setne  dl
c0011e0d:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011e15:	0f 94 c0             	sete   al
c0011e18:	84 c2                	test   dl,al
c0011e1a:	74 34                	je     c0011e50 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e1c:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011e27:	74 27                	je     c0011e50 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e29:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011e30:	05 00 10 00 00       	add    eax,0x1000
c0011e35:	89 c1                	mov    ecx,eax
c0011e37:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e3c:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011e42:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011e49:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011e50:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011e57:	83 ec 0c             	sub    esp,0xc
c0011e5a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011e60:	6a 01                	push   0x1
c0011e62:	e8 26 74 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c0011e67:	83 c4 10             	add    esp,0x10
c0011e6a:	89 c3                	mov    ebx,eax
c0011e6c:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011e72:	0f 86 25 01 00 00    	jbe    c0011f9d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011e78:	c1 ee 0c             	shr    esi,0xc
c0011e7b:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011e82:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011e86:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011e8e:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011e95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e99:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011ea0:	29 ef                	sub    edi,ebp
c0011ea2:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011ea6:	0f 83 f8 00 00 00    	jae    c0011fa4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011eac:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011eb2:	76 05                	jbe    c0011eb9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011eb4:	bf 00 10 00 00       	mov    edi,0x1000
c0011eb9:	83 ec 0c             	sub    esp,0xc
c0011ebc:	31 d2                	xor    edx,edx
c0011ebe:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011ec5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011ec7:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011ecb:	50                   	push   eax
c0011ecc:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011ed0:	56                   	push   esi
c0011ed1:	52                   	push   edx
c0011ed2:	57                   	push   edi
c0011ed3:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011eda:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011edd:	83 c4 20             	add    esp,0x20
c0011ee0:	85 c0                	test   eax,eax
c0011ee2:	75 06                	jne    c0011eea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011ee4:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011ee8:	74 13                	je     c0011efd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011eea:	83 ec 0c             	sub    esp,0xc
c0011eed:	53                   	push   ebx
c0011eee:	e8 8e 76 ff ff       	call   c0009581 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ef3:	83 c4 10             	add    esp,0x10
c0011ef6:	31 c0                	xor    eax,eax
c0011ef8:	e9 7c 01 00 00       	jmp    c0012079 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011efd:	fa                   	cli    
c0011efe:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011f04:	e8 8c 5b ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011f09:	6a 07                	push   0x7
c0011f0b:	89 c7                	mov    edi,eax
c0011f0d:	53                   	push   ebx
c0011f0e:	50                   	push   eax
c0011f0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f14:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f17:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f1d:	e8 2e 7a ff ff       	call   c0009950 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f22:	83 c4 0c             	add    esp,0xc
c0011f25:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011f2c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f32:	6a 00                	push   0x0
c0011f34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f39:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f3c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f42:	e8 7b 78 ff ff       	call   c00097c2 <VAS::mapOtherVASIn(bool, VAS*)>
c0011f47:	58                   	pop    eax
c0011f48:	5a                   	pop    edx
c0011f49:	68 07 0c 00 00       	push   0xc07
c0011f4e:	55                   	push   ebp
c0011f4f:	57                   	push   edi
c0011f50:	89 df                	mov    edi,ebx
c0011f52:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011f59:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f5f:	6a 00                	push   0x0
c0011f61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f66:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f69:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f6f:	e8 9c 7d ff ff       	call   c0009d10 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011f74:	b9 00 10 00 00       	mov    ecx,0x1000
c0011f79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f7b:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011f80:	83 c4 20             	add    esp,0x20
c0011f83:	48                   	dec    eax
c0011f84:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011f89:	85 c0                	test   eax,eax
c0011f8b:	75 01                	jne    c0011f8e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011f8d:	fb                   	sti    
c0011f8e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011f94:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011f98:	e9 f1 fe ff ff       	jmp    c0011e8e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011f9d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011fa4:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011fab:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011fb1:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011fb7:	0f 86 ae 00 00 00    	jbe    c001206b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011fbd:	fa                   	cli    
c0011fbe:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011fc4:	c1 ee 0c             	shr    esi,0xc
c0011fc7:	51                   	push   ecx
c0011fc8:	31 ff                	xor    edi,edi
c0011fca:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011fd1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fd7:	6a 00                	push   0x0
c0011fd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fde:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fe1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011fe7:	e8 d6 77 ff ff       	call   c00097c2 <VAS::mapOtherVASIn(bool, VAS*)>
c0011fec:	83 c4 10             	add    esp,0x10
c0011fef:	e8 a1 5a ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011ff4:	47                   	inc    edi
c0011ff5:	6a 07                	push   0x7
c0011ff7:	53                   	push   ebx
c0011ff8:	50                   	push   eax
c0011ff9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011ffd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012003:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0012006:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001200c:	e8 3f 79 ff ff       	call   c0009950 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012011:	58                   	pop    eax
c0012012:	5a                   	pop    edx
c0012013:	68 07 0c 00 00       	push   0xc07
c0012018:	55                   	push   ebp
c0012019:	81 c5 00 10 00 00    	add    ebp,0x1000
c001201f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012023:	50                   	push   eax
c0012024:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001202b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012031:	6a 00                	push   0x0
c0012033:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012038:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001203b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012041:	e8 ca 7c ff ff       	call   c0009d10 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012046:	83 c4 1c             	add    esp,0x1c
c0012049:	68 00 10 00 00       	push   0x1000
c001204e:	6a 00                	push   0x0
c0012050:	53                   	push   ebx
c0012051:	e8 7a e4 fe ff       	call   c00004d0 <memset>
c0012056:	83 c4 10             	add    esp,0x10
c0012059:	39 fe                	cmp    esi,edi
c001205b:	77 92                	ja     c0011fef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c001205d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0012062:	48                   	dec    eax
c0012063:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0012068:	75 01                	jne    c001206b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c001206a:	fb                   	sti    
c001206b:	83 ec 0c             	sub    esp,0xc
c001206e:	53                   	push   ebx
c001206f:	e8 0d 75 ff ff       	call   c0009581 <Virt::freeKernelVirtualPages(unsigned long)>
c0012074:	83 c4 10             	add    esp,0x10
c0012077:	b0 01                	mov    al,0x1
c0012079:	81 c4 2c 10 00 00    	add    esp,0x102c
c001207f:	5b                   	pop    ebx
c0012080:	5e                   	pop    esi
c0012081:	5f                   	pop    edi
c0012082:	5d                   	pop    ebp
c0012083:	c3                   	ret    

c0012084 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0012084:	55                   	push   ebp
c0012085:	57                   	push   edi
c0012086:	56                   	push   esi
c0012087:	53                   	push   ebx
c0012088:	83 ec 48             	sub    esp,0x48
c001208b:	68 14 01 00 00       	push   0x114
c0012090:	e8 24 57 ff ff       	call   c00077b9 <malloc>
c0012095:	83 c4 0c             	add    esp,0xc
c0012098:	89 c6                	mov    esi,eax
c001209a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001209e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00120a2:	50                   	push   eax
c00120a3:	e8 18 8a ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c00120a8:	58                   	pop    eax
c00120a9:	5a                   	pop    edx
c00120aa:	6a 01                	push   0x1
c00120ac:	56                   	push   esi
c00120ad:	e8 ce 8a ff ff       	call   c000ab80 <File::open(FileOpenMode)>
c00120b2:	83 c4 10             	add    esp,0x10
c00120b5:	85 c0                	test   eax,eax
c00120b7:	0f 85 47 01 00 00    	jne    c0012204 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120bd:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00120c5:	83 ec 0c             	sub    esp,0xc
c00120c8:	6a 34                	push   0x34
c00120ca:	e8 ea 56 ff ff       	call   c00077b9 <malloc>
c00120cf:	89 c3                	mov    ebx,eax
c00120d1:	58                   	pop    eax
c00120d2:	8b 06                	mov    eax,DWORD PTR [esi]
c00120d4:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00120d8:	57                   	push   edi
c00120d9:	53                   	push   ebx
c00120da:	6a 00                	push   0x0
c00120dc:	6a 34                	push   0x34
c00120de:	56                   	push   esi
c00120df:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00120e2:	83 c4 20             	add    esp,0x20
c00120e5:	85 c0                	test   eax,eax
c00120e7:	0f 85 17 01 00 00    	jne    c0012204 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120ed:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00120f3:	0f 85 0b 01 00 00    	jne    c0012204 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120f9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120fc:	85 c0                	test   eax,eax
c00120fe:	0f 84 00 01 00 00    	je     c0012204 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012104:	31 d2                	xor    edx,edx
c0012106:	55                   	push   ebp
c0012107:	52                   	push   edx
c0012108:	50                   	push   eax
c0012109:	56                   	push   esi
c001210a:	e8 2f 8b ff ff       	call   c000ac3e <File::seek(unsigned long long)>
c001210f:	83 c4 10             	add    esp,0x10
c0012112:	85 c0                	test   eax,eax
c0012114:	0f 85 ea 00 00 00    	jne    c0012204 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001211a:	83 ec 0c             	sub    esp,0xc
c001211d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0012120:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012124:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012128:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001212c:	0f af c2             	imul   eax,edx
c001212f:	50                   	push   eax
c0012130:	e8 84 56 ff ff       	call   c00077b9 <malloc>
c0012135:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012137:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001213b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001213e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012142:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012146:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001214a:	0f af c2             	imul   eax,edx
c001214d:	99                   	cdq    
c001214e:	52                   	push   edx
c001214f:	50                   	push   eax
c0012150:	56                   	push   esi
c0012151:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012154:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0012157:	83 c4 20             	add    esp,0x20
c001215a:	85 c0                	test   eax,eax
c001215c:	0f 84 a2 00 00 00    	je     c0012204 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012162:	31 d2                	xor    edx,edx
c0012164:	51                   	push   ecx
c0012165:	52                   	push   edx
c0012166:	50                   	push   eax
c0012167:	56                   	push   esi
c0012168:	e8 d1 8a ff ff       	call   c000ac3e <File::seek(unsigned long long)>
c001216d:	83 c4 10             	add    esp,0x10
c0012170:	85 c0                	test   eax,eax
c0012172:	0f 85 8c 00 00 00    	jne    c0012204 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012178:	83 ec 0c             	sub    esp,0xc
c001217b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001217f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012183:	31 ed                	xor    ebp,ebp
c0012185:	0f af c2             	imul   eax,edx
c0012188:	50                   	push   eax
c0012189:	e8 2b 56 ff ff       	call   c00077b9 <malloc>
c001218e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012190:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012194:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001219b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001219f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121a3:	0f af c2             	imul   eax,edx
c00121a6:	99                   	cdq    
c00121a7:	52                   	push   edx
c00121a8:	50                   	push   eax
c00121a9:	56                   	push   esi
c00121aa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121ad:	83 c4 20             	add    esp,0x20
c00121b0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00121b8:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00121bc:	0f 86 80 00 00 00    	jbe    c0012242 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00121c2:	0f b7 fd             	movzx  edi,bp
c00121c5:	c1 e7 05             	shl    edi,0x5
c00121c8:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00121cc:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00121cf:	75 6b                	jne    c001223c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00121d1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00121d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121d8:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00121db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121df:	52                   	push   edx
c00121e0:	31 d2                	xor    edx,edx
c00121e2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00121e5:	52                   	push   edx
c00121e6:	50                   	push   eax
c00121e7:	56                   	push   esi
c00121e8:	e8 51 8a ff ff       	call   c000ac3e <File::seek(unsigned long long)>
c00121ed:	83 c4 10             	add    esp,0x10
c00121f0:	85 c0                	test   eax,eax
c00121f2:	74 17                	je     c001220b <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00121f4:	83 ec 0c             	sub    esp,0xc
c00121f7:	68 70 e9 01 c0       	push   0xc001e970
c00121fc:	e8 49 83 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0012201:	83 c4 10             	add    esp,0x10
c0012204:	31 c0                	xor    eax,eax
c0012206:	e9 87 00 00 00       	jmp    c0012292 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001220b:	83 ec 0c             	sub    esp,0xc
c001220e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012211:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0012214:	50                   	push   eax
c0012215:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012219:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001221d:	56                   	push   esi
c001221e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012222:	e8 d1 fb ff ff       	call   c0011df8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0012227:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001222b:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001222f:	83 c4 20             	add    esp,0x20
c0012232:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0012236:	73 04                	jae    c001223c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012238:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001223c:	45                   	inc    ebp
c001223d:	e9 76 ff ff ff       	jmp    c00121b8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012242:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0012246:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001224a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001224e:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0012254:	83 ec 0c             	sub    esp,0xc
c0012257:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c001225d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012262:	05 00 10 00 00       	add    eax,0x1000
c0012267:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001226a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001226e:	e8 56 55 ff ff       	call   c00077c9 <free>
c0012273:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012276:	e8 4e 55 ff ff       	call   c00077c9 <free>
c001227b:	58                   	pop    eax
c001227c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012280:	e8 44 55 ff ff       	call   c00077c9 <free>
c0012285:	89 34 24             	mov    DWORD PTR [esp],esi
c0012288:	e8 51 89 ff ff       	call   c000abde <File::close()>
c001228d:	83 c4 10             	add    esp,0x10
c0012290:	b0 01                	mov    al,0x1
c0012292:	83 c4 3c             	add    esp,0x3c
c0012295:	5b                   	pop    ebx
c0012296:	5e                   	pop    esi
c0012297:	5f                   	pop    edi
c0012298:	5d                   	pop    ebp
c0012299:	c3                   	ret    

c001229a <Thr::runtimeReferenceHelper()>:
c001229a:	83 ec 18             	sub    esp,0x18
c001229d:	68 78 e9 01 c0       	push   0xc001e978
c00122a2:	e8 a3 82 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c00122a7:	fa                   	cli    
c00122a8:	83 c4 10             	add    esp,0x10
c00122ab:	eb fe                	jmp    c00122ab <Thr::runtimeReferenceHelper()+0x11>

c00122ad <Thr::getAddressOfKernelSymbol(char const*)>:
c00122ad:	57                   	push   edi
c00122ae:	56                   	push   esi
c00122af:	53                   	push   ebx
c00122b0:	31 db                	xor    ebx,ebx
c00122b2:	39 1d 40 51 02 c0    	cmp    DWORD PTR ds:0xc0025140,ebx
c00122b8:	7e 3c                	jle    c00122f6 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00122ba:	8b 34 9d c0 50 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdaf40]
c00122c1:	31 ff                	xor    edi,edi
c00122c3:	39 3c 9d c0 4f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb040],edi
c00122ca:	7e 27                	jle    c00122f3 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00122cc:	50                   	push   eax
c00122cd:	50                   	push   eax
c00122ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122d2:	8b 06                	mov    eax,DWORD PTR [esi]
c00122d4:	03 04 9d 40 50 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdafc0]
c00122db:	50                   	push   eax
c00122dc:	e8 ff e3 fe ff       	call   c00006e0 <strcmp>
c00122e1:	83 c4 10             	add    esp,0x10
c00122e4:	85 c0                	test   eax,eax
c00122e6:	75 05                	jne    c00122ed <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00122e8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00122eb:	eb 0b                	jmp    c00122f8 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00122ed:	83 c6 10             	add    esi,0x10
c00122f0:	47                   	inc    edi
c00122f1:	eb d0                	jmp    c00122c3 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00122f3:	43                   	inc    ebx
c00122f4:	eb bc                	jmp    c00122b2 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00122f6:	31 c0                	xor    eax,eax
c00122f8:	5b                   	pop    ebx
c00122f9:	5e                   	pop    esi
c00122fa:	5f                   	pop    edi
c00122fb:	c3                   	ret    

c00122fc <Thr::loadKernelSymbolTable(char const*)>:
c00122fc:	55                   	push   ebp
c00122fd:	57                   	push   edi
c00122fe:	56                   	push   esi
c00122ff:	53                   	push   ebx
c0012300:	83 ec 68             	sub    esp,0x68
c0012303:	8b 35 90 51 02 c0    	mov    esi,DWORD PTR ds:0xc0025190
c0012309:	68 14 01 00 00       	push   0x114
c001230e:	e8 a6 54 ff ff       	call   c00077b9 <malloc>
c0012313:	83 c4 0c             	add    esp,0xc
c0012316:	89 c3                	mov    ebx,eax
c0012318:	56                   	push   esi
c0012319:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001231d:	50                   	push   eax
c001231e:	e8 9d 87 ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c0012323:	5e                   	pop    esi
c0012324:	5f                   	pop    edi
c0012325:	6a 01                	push   0x1
c0012327:	53                   	push   ebx
c0012328:	e8 53 88 ff ff       	call   c000ab80 <File::open(FileOpenMode)>
c001232d:	83 c4 10             	add    esp,0x10
c0012330:	85 c0                	test   eax,eax
c0012332:	74 0a                	je     c001233e <Thr::loadKernelSymbolTable(char const*)+0x42>
c0012334:	83 ec 0c             	sub    esp,0xc
c0012337:	68 9a e9 01 c0       	push   0xc001e99a
c001233c:	eb 34                	jmp    c0012372 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001233e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0012346:	83 ec 0c             	sub    esp,0xc
c0012349:	6a 34                	push   0x34
c001234b:	e8 69 54 ff ff       	call   c00077b9 <malloc>
c0012350:	59                   	pop    ecx
c0012351:	89 c7                	mov    edi,eax
c0012353:	8d 74 24 34          	lea    esi,[esp+0x34]
c0012357:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012359:	56                   	push   esi
c001235a:	57                   	push   edi
c001235b:	6a 00                	push   0x0
c001235d:	6a 34                	push   0x34
c001235f:	53                   	push   ebx
c0012360:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012363:	83 c4 20             	add    esp,0x20
c0012366:	85 c0                	test   eax,eax
c0012368:	74 17                	je     c0012381 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001236a:	83 ec 0c             	sub    esp,0xc
c001236d:	68 b1 e9 01 c0       	push   0xc001e9b1
c0012372:	e8 54 de ff ff       	call   c00101cb <KePanic(char const*)>
c0012377:	83 c4 10             	add    esp,0x10
c001237a:	31 c0                	xor    eax,eax
c001237c:	e9 31 02 00 00       	jmp    c00125b2 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0012381:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012387:	75 e1                	jne    c001236a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012389:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001238c:	85 c0                	test   eax,eax
c001238e:	74 da                	je     c001236a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012390:	52                   	push   edx
c0012391:	31 d2                	xor    edx,edx
c0012393:	52                   	push   edx
c0012394:	50                   	push   eax
c0012395:	53                   	push   ebx
c0012396:	e8 a3 88 ff ff       	call   c000ac3e <File::seek(unsigned long long)>
c001239b:	83 c4 10             	add    esp,0x10
c001239e:	85 c0                	test   eax,eax
c00123a0:	75 c8                	jne    c001236a <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123a2:	83 ec 0c             	sub    esp,0xc
c00123a5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123a9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123ad:	31 ed                	xor    ebp,ebp
c00123af:	0f af c2             	imul   eax,edx
c00123b2:	50                   	push   eax
c00123b3:	e8 01 54 ff ff       	call   c00077b9 <malloc>
c00123b8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00123ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123be:	89 34 24             	mov    DWORD PTR [esp],esi
c00123c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123c5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123c9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123cd:	0f af c2             	imul   eax,edx
c00123d0:	99                   	cdq    
c00123d1:	52                   	push   edx
c00123d2:	50                   	push   eax
c00123d3:	53                   	push   ebx
c00123d4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00123d7:	83 c4 20             	add    esp,0x20
c00123da:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00123e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00123ea:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00123f2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00123fa:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00123fe:	0f 86 aa 00 00 00    	jbe    c00124ae <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0012404:	0f b7 f5             	movzx  esi,bp
c0012407:	6b f6 28             	imul   esi,esi,0x28
c001240a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001240e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012411:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012415:	50                   	push   eax
c0012416:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001241a:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001241e:	8b 16                	mov    edx,DWORD PTR [esi]
c0012420:	6b c0 28             	imul   eax,eax,0x28
c0012423:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0012427:	89 d0                	mov    eax,edx
c0012429:	31 d2                	xor    edx,edx
c001242b:	52                   	push   edx
c001242c:	50                   	push   eax
c001242d:	53                   	push   ebx
c001242e:	e8 0b 88 ff ff       	call   c000ac3e <File::seek(unsigned long long)>
c0012433:	83 c4 0c             	add    esp,0xc
c0012436:	6a 20                	push   0x20
c0012438:	6a 00                	push   0x0
c001243a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001243e:	52                   	push   edx
c001243f:	e8 8c e0 fe ff       	call   c00004d0 <memset>
c0012444:	58                   	pop    eax
c0012445:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012447:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001244b:	51                   	push   ecx
c001244c:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012450:	52                   	push   edx
c0012451:	6a 00                	push   0x0
c0012453:	6a 1f                	push   0x1f
c0012455:	53                   	push   ebx
c0012456:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012459:	83 c4 18             	add    esp,0x18
c001245c:	68 c8 e9 01 c0       	push   0xc001e9c8
c0012461:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012465:	52                   	push   edx
c0012466:	e8 75 e2 fe ff       	call   c00006e0 <strcmp>
c001246b:	83 c4 10             	add    esp,0x10
c001246e:	85 c0                	test   eax,eax
c0012470:	75 0f                	jne    c0012481 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012472:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012475:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012479:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001247d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012481:	50                   	push   eax
c0012482:	50                   	push   eax
c0012483:	68 d0 e9 01 c0       	push   0xc001e9d0
c0012488:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001248c:	50                   	push   eax
c001248d:	e8 4e e2 fe ff       	call   c00006e0 <strcmp>
c0012492:	83 c4 10             	add    esp,0x10
c0012495:	85 c0                	test   eax,eax
c0012497:	75 0f                	jne    c00124a8 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012499:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001249c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00124a8:	45                   	inc    ebp
c00124a9:	e9 4c ff ff ff       	jmp    c00123fa <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00124ae:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00124b3:	75 10                	jne    c00124c5 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00124b5:	83 ec 0c             	sub    esp,0xc
c00124b8:	68 d8 e9 01 c0       	push   0xc001e9d8
c00124bd:	e8 09 dd ff ff       	call   c00101cb <KePanic(char const*)>
c00124c2:	83 c4 10             	add    esp,0x10
c00124c5:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00124ca:	75 10                	jne    c00124dc <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00124cc:	83 ec 0c             	sub    esp,0xc
c00124cf:	68 d8 e9 01 c0       	push   0xc001e9d8
c00124d4:	e8 f2 dc ff ff       	call   c00101cb <KePanic(char const*)>
c00124d9:	83 c4 10             	add    esp,0x10
c00124dc:	31 d2                	xor    edx,edx
c00124de:	50                   	push   eax
c00124df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124e3:	52                   	push   edx
c00124e4:	50                   	push   eax
c00124e5:	53                   	push   ebx
c00124e6:	e8 53 87 ff ff       	call   c000ac3e <File::seek(unsigned long long)>
c00124eb:	5a                   	pop    edx
c00124ec:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00124f0:	e8 c4 52 ff ff       	call   c00077b9 <malloc>
c00124f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00124f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124fd:	31 c9                	xor    ecx,ecx
c00124ff:	5e                   	pop    esi
c0012500:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012502:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0012506:	55                   	push   ebp
c0012507:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001250b:	51                   	push   ecx
c001250c:	52                   	push   edx
c001250d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012511:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0012515:	53                   	push   ebx
c0012516:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012519:	83 c4 14             	add    esp,0x14
c001251c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012520:	e8 94 52 ff ff       	call   c00077b9 <malloc>
c0012525:	89 c6                	mov    esi,eax
c0012527:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012529:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001252c:	56                   	push   esi
c001252d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012531:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012535:	51                   	push   ecx
c0012536:	52                   	push   edx
c0012537:	53                   	push   ebx
c0012538:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001253b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001253f:	8b 15 40 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025140
c0012545:	83 c4 1c             	add    esp,0x1c
c0012548:	c1 e8 04             	shr    eax,0x4
c001254b:	89 04 95 c0 4f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb040],eax
c0012552:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012556:	31 d2                	xor    edx,edx
c0012558:	52                   	push   edx
c0012559:	50                   	push   eax
c001255a:	53                   	push   ebx
c001255b:	e8 de 86 ff ff       	call   c000ac3e <File::seek(unsigned long long)>
c0012560:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012562:	31 d2                	xor    edx,edx
c0012564:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012567:	56                   	push   esi
c0012568:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001256c:	52                   	push   edx
c001256d:	50                   	push   eax
c001256e:	53                   	push   ebx
c001256f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012572:	83 c4 14             	add    esp,0x14
c0012575:	53                   	push   ebx
c0012576:	e8 63 86 ff ff       	call   c000abde <File::close()>
c001257b:	5d                   	pop    ebp
c001257c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012580:	e8 44 52 ff ff       	call   c00077c9 <free>
c0012585:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012588:	e8 3c 52 ff ff       	call   c00077c9 <free>
c001258d:	a1 40 51 02 c0       	mov    eax,ds:0xc0025140
c0012592:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012596:	8d 50 01             	lea    edx,[eax+0x1]
c0012599:	89 0c 85 c0 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf40],ecx
c00125a0:	89 34 85 40 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdafc0],esi
c00125a7:	89 15 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edx
c00125ad:	83 c4 10             	add    esp,0x10
c00125b0:	b0 01                	mov    al,0x1
c00125b2:	83 c4 5c             	add    esp,0x5c
c00125b5:	5b                   	pop    ebx
c00125b6:	5e                   	pop    esi
c00125b7:	5f                   	pop    edi
c00125b8:	5d                   	pop    ebp
c00125b9:	c3                   	ret    

c00125ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00125ba:	55                   	push   ebp
c00125bb:	57                   	push   edi
c00125bc:	56                   	push   esi
c00125bd:	53                   	push   ebx
c00125be:	81 ec 68 03 00 00    	sub    esp,0x368
c00125c4:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00125cb:	8b 1d 90 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025190
c00125d1:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00125d5:	68 14 01 00 00       	push   0x114
c00125da:	e8 da 51 ff ff       	call   c00077b9 <malloc>
c00125df:	83 c4 0c             	add    esp,0xc
c00125e2:	89 c5                	mov    ebp,eax
c00125e4:	53                   	push   ebx
c00125e5:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00125ec:	50                   	push   eax
c00125ed:	e8 ce 84 ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c00125f2:	5e                   	pop    esi
c00125f3:	5f                   	pop    edi
c00125f4:	6a 01                	push   0x1
c00125f6:	55                   	push   ebp
c00125f7:	e8 84 85 ff ff       	call   c000ab80 <File::open(FileOpenMode)>
c00125fc:	83 c4 10             	add    esp,0x10
c00125ff:	85 c0                	test   eax,eax
c0012601:	0f 85 a7 06 00 00    	jne    c0012cae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012607:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001260f:	83 ec 0c             	sub    esp,0xc
c0012612:	6a 34                	push   0x34
c0012614:	e8 a0 51 ff ff       	call   c00077b9 <malloc>
c0012619:	5b                   	pop    ebx
c001261a:	89 c7                	mov    edi,eax
c001261c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012620:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012623:	53                   	push   ebx
c0012624:	57                   	push   edi
c0012625:	6a 00                	push   0x0
c0012627:	6a 34                	push   0x34
c0012629:	55                   	push   ebp
c001262a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001262d:	83 c4 20             	add    esp,0x20
c0012630:	85 c0                	test   eax,eax
c0012632:	0f 85 76 06 00 00    	jne    c0012cae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012638:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001263e:	0f 85 6a 06 00 00    	jne    c0012cae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012644:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012647:	85 c0                	test   eax,eax
c0012649:	0f 84 5f 06 00 00    	je     c0012cae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001264f:	31 d2                	xor    edx,edx
c0012651:	51                   	push   ecx
c0012652:	52                   	push   edx
c0012653:	50                   	push   eax
c0012654:	55                   	push   ebp
c0012655:	e8 e4 85 ff ff       	call   c000ac3e <File::seek(unsigned long long)>
c001265a:	83 c4 10             	add    esp,0x10
c001265d:	85 c0                	test   eax,eax
c001265f:	0f 85 49 06 00 00    	jne    c0012cae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012665:	83 ec 0c             	sub    esp,0xc
c0012668:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001266b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001266f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012673:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012677:	0f af c2             	imul   eax,edx
c001267a:	50                   	push   eax
c001267b:	e8 39 51 ff ff       	call   c00077b9 <malloc>
c0012680:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012683:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012687:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001268a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001268e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012692:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012696:	0f af c2             	imul   eax,edx
c0012699:	99                   	cdq    
c001269a:	52                   	push   edx
c001269b:	50                   	push   eax
c001269c:	55                   	push   ebp
c001269d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126a0:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00126a3:	83 c4 20             	add    esp,0x20
c00126a6:	85 c0                	test   eax,eax
c00126a8:	0f 84 00 06 00 00    	je     c0012cae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126ae:	52                   	push   edx
c00126af:	31 d2                	xor    edx,edx
c00126b1:	52                   	push   edx
c00126b2:	50                   	push   eax
c00126b3:	55                   	push   ebp
c00126b4:	e8 85 85 ff ff       	call   c000ac3e <File::seek(unsigned long long)>
c00126b9:	83 c4 10             	add    esp,0x10
c00126bc:	85 c0                	test   eax,eax
c00126be:	0f 85 ea 05 00 00    	jne    c0012cae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126c4:	83 ec 0c             	sub    esp,0xc
c00126c7:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126cb:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126cf:	31 f6                	xor    esi,esi
c00126d1:	0f af c2             	imul   eax,edx
c00126d4:	50                   	push   eax
c00126d5:	e8 df 50 ff ff       	call   c00077b9 <malloc>
c00126da:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126dd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00126e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126e8:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126ec:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126f0:	0f af c2             	imul   eax,edx
c00126f3:	99                   	cdq    
c00126f4:	52                   	push   edx
c00126f5:	50                   	push   eax
c00126f6:	55                   	push   ebp
c00126f7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126fa:	83 c4 20             	add    esp,0x20
c00126fd:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012701:	0f 86 8a 00 00 00    	jbe    c0012791 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0012707:	0f b7 de             	movzx  ebx,si
c001270a:	c1 e3 05             	shl    ebx,0x5
c001270d:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012711:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0012714:	75 75                	jne    c001278b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0012716:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012719:	31 d2                	xor    edx,edx
c001271b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001271f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012726:	50                   	push   eax
c0012727:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001272a:	52                   	push   edx
c001272b:	50                   	push   eax
c001272c:	55                   	push   ebp
c001272d:	e8 0c 85 ff ff       	call   c000ac3e <File::seek(unsigned long long)>
c0012732:	83 c4 10             	add    esp,0x10
c0012735:	85 c0                	test   eax,eax
c0012737:	0f 85 71 05 00 00    	jne    c0012cae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001273d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012744:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012747:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001274b:	31 d2                	xor    edx,edx
c001274d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012751:	83 ec 0c             	sub    esp,0xc
c0012754:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012758:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001275f:	50                   	push   eax
c0012760:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012764:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012768:	52                   	push   edx
c0012769:	50                   	push   eax
c001276a:	55                   	push   ebp
c001276b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001276e:	83 c4 1c             	add    esp,0x1c
c0012771:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012774:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012777:	50                   	push   eax
c0012778:	6a 00                	push   0x0
c001277a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001277e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012782:	50                   	push   eax
c0012783:	e8 48 dd fe ff       	call   c00004d0 <memset>
c0012788:	83 c4 10             	add    esp,0x10
c001278b:	46                   	inc    esi
c001278c:	e9 6c ff ff ff       	jmp    c00126fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012791:	53                   	push   ebx
c0012792:	31 db                	xor    ebx,ebx
c0012794:	68 00 01 00 00       	push   0x100
c0012799:	6a 00                	push   0x0
c001279b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001279f:	50                   	push   eax
c00127a0:	e8 2b dd fe ff       	call   c00004d0 <memset>
c00127a5:	83 c4 0c             	add    esp,0xc
c00127a8:	68 00 01 00 00       	push   0x100
c00127ad:	6a 00                	push   0x0
c00127af:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00127b6:	50                   	push   eax
c00127b7:	e8 14 dd fe ff       	call   c00004d0 <memset>
c00127bc:	83 c4 10             	add    esp,0x10
c00127bf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00127c7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00127cf:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00127d7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00127df:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00127e7:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00127eb:	0f 86 30 01 00 00    	jbe    c0012921 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00127f1:	0f b7 f3             	movzx  esi,bx
c00127f4:	6b f6 28             	imul   esi,esi,0x28
c00127f7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00127fb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00127fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012802:	52                   	push   edx
c0012803:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012807:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001280b:	8b 06                	mov    eax,DWORD PTR [esi]
c001280d:	6b d2 28             	imul   edx,edx,0x28
c0012810:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0012814:	31 d2                	xor    edx,edx
c0012816:	52                   	push   edx
c0012817:	50                   	push   eax
c0012818:	55                   	push   ebp
c0012819:	e8 20 84 ff ff       	call   c000ac3e <File::seek(unsigned long long)>
c001281e:	83 c4 0c             	add    esp,0xc
c0012821:	6a 20                	push   0x20
c0012823:	6a 00                	push   0x0
c0012825:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001282c:	51                   	push   ecx
c001282d:	e8 9e dc fe ff       	call   c00004d0 <memset>
c0012832:	59                   	pop    ecx
c0012833:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012836:	8d 54 24 58          	lea    edx,[esp+0x58]
c001283a:	52                   	push   edx
c001283b:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012842:	51                   	push   ecx
c0012843:	6a 00                	push   0x0
c0012845:	6a 1f                	push   0x1f
c0012847:	55                   	push   ebp
c0012848:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001284b:	83 c4 1c             	add    esp,0x1c
c001284e:	6a 09                	push   0x9
c0012850:	68 f2 e9 01 c0       	push   0xc001e9f2
c0012855:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001285c:	51                   	push   ecx
c001285d:	e8 2e db fe ff       	call   c0000390 <memcmp>
c0012862:	83 c4 10             	add    esp,0x10
c0012865:	85 c0                	test   eax,eax
c0012867:	75 21                	jne    c001288a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012869:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001286d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012871:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012875:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012879:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001287c:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012883:	89 d0                	mov    eax,edx
c0012885:	40                   	inc    eax
c0012886:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001288a:	50                   	push   eax
c001288b:	6a 09                	push   0x9
c001288d:	68 fc e9 01 c0       	push   0xc001e9fc
c0012892:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012899:	50                   	push   eax
c001289a:	e8 f1 da fe ff       	call   c0000390 <memcmp>
c001289f:	83 c4 10             	add    esp,0x10
c00128a2:	85 c0                	test   eax,eax
c00128a4:	75 21                	jne    c00128c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00128a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128ae:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00128b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128b6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128b9:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128c0:	89 d0                	mov    eax,edx
c00128c2:	40                   	inc    eax
c00128c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128c7:	50                   	push   eax
c00128c8:	50                   	push   eax
c00128c9:	68 c8 e9 01 c0       	push   0xc001e9c8
c00128ce:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128d5:	50                   	push   eax
c00128d6:	e8 05 de fe ff       	call   c00006e0 <strcmp>
c00128db:	83 c4 10             	add    esp,0x10
c00128de:	85 c0                	test   eax,eax
c00128e0:	75 0f                	jne    c00128f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00128e2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00128e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00128f1:	50                   	push   eax
c00128f2:	50                   	push   eax
c00128f3:	68 d0 e9 01 c0       	push   0xc001e9d0
c00128f8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128ff:	50                   	push   eax
c0012900:	e8 db dd fe ff       	call   c00006e0 <strcmp>
c0012905:	83 c4 10             	add    esp,0x10
c0012908:	85 c0                	test   eax,eax
c001290a:	75 0f                	jne    c001291b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001290c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001290f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012913:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012917:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001291b:	43                   	inc    ebx
c001291c:	e9 c6 fe ff ff       	jmp    c00127e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012921:	31 d2                	xor    edx,edx
c0012923:	50                   	push   eax
c0012924:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012928:	52                   	push   edx
c0012929:	50                   	push   eax
c001292a:	55                   	push   ebp
c001292b:	e8 0e 83 ff ff       	call   c000ac3e <File::seek(unsigned long long)>
c0012930:	58                   	pop    eax
c0012931:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012935:	e8 7f 4e ff ff       	call   c00077b9 <malloc>
c001293a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001293d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012941:	31 d2                	xor    edx,edx
c0012943:	58                   	pop    eax
c0012944:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012948:	53                   	push   ebx
c0012949:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001294d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012951:	52                   	push   edx
c0012952:	50                   	push   eax
c0012953:	55                   	push   ebp
c0012954:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012957:	83 c4 14             	add    esp,0x14
c001295a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001295e:	e8 56 4e ff ff       	call   c00077b9 <malloc>
c0012963:	31 d2                	xor    edx,edx
c0012965:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012969:	83 c4 0c             	add    esp,0xc
c001296c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012970:	52                   	push   edx
c0012971:	50                   	push   eax
c0012972:	55                   	push   ebp
c0012973:	e8 c6 82 ff ff       	call   c000ac3e <File::seek(unsigned long long)>
c0012978:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001297b:	31 d2                	xor    edx,edx
c001297d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012980:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012984:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012988:	52                   	push   edx
c0012989:	50                   	push   eax
c001298a:	55                   	push   ebp
c001298b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001298e:	83 c4 20             	add    esp,0x20
c0012991:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012999:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001299d:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00129a1:	0f 84 0b 03 00 00    	je     c0012cb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00129a7:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00129ae:	31 d2                	xor    edx,edx
c00129b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129b4:	c1 e8 03             	shr    eax,0x3
c00129b7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00129bb:	51                   	push   ecx
c00129bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00129c0:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00129c4:	52                   	push   edx
c00129c5:	50                   	push   eax
c00129c6:	55                   	push   ebp
c00129c7:	e8 72 82 ff ff       	call   c000ac3e <File::seek(unsigned long long)>
c00129cc:	5b                   	pop    ebx
c00129cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129d1:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00129d8:	e8 dc 4d ff ff       	call   c00077b9 <malloc>
c00129dd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00129e4:	31 d2                	xor    edx,edx
c00129e6:	5e                   	pop    esi
c00129e7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00129eb:	50                   	push   eax
c00129ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00129f4:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00129fb:	52                   	push   edx
c00129fc:	50                   	push   eax
c00129fd:	55                   	push   ebp
c00129fe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a01:	83 c4 20             	add    esp,0x20
c0012a04:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012a0c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012a10:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012a14:	0f 8d 7c 02 00 00    	jge    c0012c96 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012a1a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a22:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012a27:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012a2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012a2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a32:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012a36:	89 d8                	mov    eax,ebx
c0012a38:	c1 e8 08             	shr    eax,0x8
c0012a3b:	89 c6                	mov    esi,eax
c0012a3d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012a41:	c1 e6 04             	shl    esi,0x4
c0012a44:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012a48:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012a4b:	85 d2                	test   edx,edx
c0012a4d:	0f 85 bf 00 00 00    	jne    c0012b12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a53:	83 ec 0c             	sub    esp,0xc
c0012a56:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a5a:	03 06                	add    eax,DWORD PTR [esi]
c0012a5c:	50                   	push   eax
c0012a5d:	e8 4b f8 ff ff       	call   c00122ad <Thr::getAddressOfKernelSymbol(char const*)>
c0012a62:	83 c4 10             	add    esp,0x10
c0012a65:	89 c2                	mov    edx,eax
c0012a67:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012a6c:	85 c0                	test   eax,eax
c0012a6e:	0f 85 9e 00 00 00    	jne    c0012b12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a74:	83 ec 0c             	sub    esp,0xc
c0012a77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a7b:	03 06                	add    eax,DWORD PTR [esi]
c0012a7d:	50                   	push   eax
c0012a7e:	e8 99 d8 ff ff       	call   c001031c <KeResolveCompatibilitySymbol(char*)>
c0012a83:	83 c4 10             	add    esp,0x10
c0012a86:	89 c2                	mov    edx,eax
c0012a88:	85 c0                	test   eax,eax
c0012a8a:	0f 85 82 00 00 00    	jne    c0012b12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a90:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012a94:	50                   	push   eax
c0012a95:	50                   	push   eax
c0012a96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a9a:	03 06                	add    eax,DWORD PTR [esi]
c0012a9c:	50                   	push   eax
c0012a9d:	68 06 ea 01 c0       	push   0xc001ea06
c0012aa2:	e8 a3 7a ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0012aa7:	58                   	pop    eax
c0012aa8:	5a                   	pop    edx
c0012aa9:	68 20 ea 01 c0       	push   0xc001ea20
c0012aae:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ab5:	50                   	push   eax
c0012ab6:	e8 45 db fe ff       	call   c0000600 <strcpy>
c0012abb:	59                   	pop    ecx
c0012abc:	58                   	pop    eax
c0012abd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ac1:	03 06                	add    eax,DWORD PTR [esi]
c0012ac3:	50                   	push   eax
c0012ac4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012acb:	50                   	push   eax
c0012acc:	e8 ef dc fe ff       	call   c00007c0 <strcat>
c0012ad1:	58                   	pop    eax
c0012ad2:	5a                   	pop    edx
c0012ad3:	68 b6 ea 01 c0       	push   0xc001eab6
c0012ad8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012adf:	50                   	push   eax
c0012ae0:	e8 db dc fe ff       	call   c00007c0 <strcat>
c0012ae5:	83 c4 10             	add    esp,0x10
c0012ae8:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012aed:	0f 84 5d 01 00 00    	je     c0012c50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012af3:	83 ec 0c             	sub    esp,0xc
c0012af6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012afd:	50                   	push   eax
c0012afe:	e8 c8 d6 ff ff       	call   c00101cb <KePanic(char const*)>
c0012b03:	83 c4 10             	add    esp,0x10
c0012b06:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012b0a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012b0e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012b12:	80 fb 01             	cmp    bl,0x1
c0012b15:	0f 85 88 00 00 00    	jne    c0012ba3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012b1b:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012b22:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012b26:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012b2a:	01 ce                	add    esi,ecx
c0012b2c:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012b32:	0f 94 c0             	sete   al
c0012b35:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012b3b:	0f 94 c3             	sete   bl
c0012b3e:	09 c3                	or     ebx,eax
c0012b40:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b42:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012b47:	74 41                	je     c0012b8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012b49:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b4c:	84 db                	test   bl,bl
c0012b4e:	75 15                	jne    c0012b65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012b50:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b54:	66 83 f8 0c          	cmp    ax,0xc
c0012b58:	76 05                	jbe    c0012b5f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012b5a:	b8 0c 00 00 00       	mov    eax,0xc
c0012b5f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b63:	76 37                	jbe    c0012b9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b65:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012b69:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b6e:	0f 84 dc 00 00 00    	je     c0012c50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b74:	83 ec 0c             	sub    esp,0xc
c0012b77:	68 37 ea 01 c0       	push   0xc001ea37
c0012b7c:	e8 4a d6 ff ff       	call   c00101cb <KePanic(char const*)>
c0012b81:	83 c4 10             	add    esp,0x10
c0012b84:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012b88:	eb 12                	jmp    c0012b9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b8a:	01 c1                	add    ecx,eax
c0012b8c:	84 db                	test   bl,bl
c0012b8e:	75 0c                	jne    c0012b9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b90:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b94:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b98:	77 02                	ja     c0012b9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b9a:	01 d1                	add    ecx,edx
c0012b9c:	89 0e                	mov    DWORD PTR [esi],ecx
c0012b9e:	e9 ea 00 00 00       	jmp    c0012c8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012ba3:	80 fb 02             	cmp    bl,0x2
c0012ba6:	75 7c                	jne    c0012c24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012ba8:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012baf:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012bb3:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012bb7:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012bbd:	74 20                	je     c0012bdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bbf:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012bc5:	74 18                	je     c0012bdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bc7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bcb:	b9 0a 00 00 00       	mov    ecx,0xa
c0012bd0:	66 83 f8 0e          	cmp    ax,0xe
c0012bd4:	77 03                	ja     c0012bd9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012bd6:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012bd9:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012bdd:	76 1f                	jbe    c0012bfe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012bdf:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012be3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012be8:	74 66                	je     c0012c50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012bea:	83 ec 0c             	sub    esp,0xc
c0012bed:	68 53 ea 01 c0       	push   0xc001ea53
c0012bf2:	e8 d4 d5 ff ff       	call   c00101cb <KePanic(char const*)>
c0012bf7:	83 c4 10             	add    esp,0x10
c0012bfa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012bfe:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c00:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012c05:	74 13                	je     c0012c1a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012c07:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012c0b:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012c12:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012c16:	01 c8                	add    eax,ecx
c0012c18:	eb 04                	jmp    c0012c1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012c1a:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012c1e:	01 c2                	add    edx,eax
c0012c20:	89 16                	mov    DWORD PTR [esi],edx
c0012c22:	eb 69                	jmp    c0012c8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c24:	0f b6 db             	movzx  ebx,bl
c0012c27:	50                   	push   eax
c0012c28:	50                   	push   eax
c0012c29:	53                   	push   ebx
c0012c2a:	68 6f ea 01 c0       	push   0xc001ea6f
c0012c2f:	e8 16 79 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0012c34:	83 c4 10             	add    esp,0x10
c0012c37:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c3c:	74 12                	je     c0012c50 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c3e:	83 ec 0c             	sub    esp,0xc
c0012c41:	68 7a ea 01 c0       	push   0xc001ea7a
c0012c46:	e8 80 d5 ff ff       	call   c00101cb <KePanic(char const*)>
c0012c4b:	83 c4 10             	add    esp,0x10
c0012c4e:	eb 3d                	jmp    c0012c8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c50:	83 ec 0c             	sub    esp,0xc
c0012c53:	55                   	push   ebp
c0012c54:	e8 85 7f ff ff       	call   c000abde <File::close()>
c0012c59:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c5c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c5f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c62:	59                   	pop    ecx
c0012c63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c67:	e8 5d 4b ff ff       	call   c00077c9 <free>
c0012c6c:	5b                   	pop    ebx
c0012c6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c71:	e8 53 4b ff ff       	call   c00077c9 <free>
c0012c76:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c79:	e8 4b 4b ff ff       	call   c00077c9 <free>
c0012c7e:	5e                   	pop    esi
c0012c7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c83:	e8 41 4b ff ff       	call   c00077c9 <free>
c0012c88:	83 c4 10             	add    esp,0x10
c0012c8b:	eb 21                	jmp    c0012cae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012c8d:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012c91:	e9 76 fd ff ff       	jmp    c0012a0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012c96:	83 ec 0c             	sub    esp,0xc
c0012c99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c9d:	e8 27 4b ff ff       	call   c00077c9 <free>
c0012ca2:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012ca6:	83 c4 10             	add    esp,0x10
c0012ca9:	e9 eb fc ff ff       	jmp    c0012999 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012cae:	31 c0                	xor    eax,eax
c0012cb0:	eb 33                	jmp    c0012ce5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012cb2:	83 ec 0c             	sub    esp,0xc
c0012cb5:	55                   	push   ebp
c0012cb6:	e8 23 7f ff ff       	call   c000abde <File::close()>
c0012cbb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cbe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012cc1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cc4:	58                   	pop    eax
c0012cc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cc9:	e8 fb 4a ff ff       	call   c00077c9 <free>
c0012cce:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012cd1:	e8 f3 4a ff ff       	call   c00077c9 <free>
c0012cd6:	5a                   	pop    edx
c0012cd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cdb:	e8 e9 4a ff ff       	call   c00077c9 <free>
c0012ce0:	83 c4 10             	add    esp,0x10
c0012ce3:	b0 01                	mov    al,0x1
c0012ce5:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012ceb:	5b                   	pop    ebx
c0012cec:	5e                   	pop    esi
c0012ced:	5f                   	pop    edi
c0012cee:	5d                   	pop    ebp
c0012cef:	c3                   	ret    

c0012cf0 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012cf0:	56                   	push   esi
c0012cf1:	31 d2                	xor    edx,edx
c0012cf3:	53                   	push   ebx
c0012cf4:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012cfa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012cfe:	39 d3                	cmp    ebx,edx
c0012d00:	7e 1b                	jle    c0012d1d <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012d02:	8b 04 95 c0 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb440]
c0012d09:	39 c8                	cmp    eax,ecx
c0012d0b:	77 0d                	ja     c0012d1a <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012d0d:	8b 34 95 c0 49 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb640]
c0012d14:	01 c6                	add    esi,eax
c0012d16:	39 ce                	cmp    esi,ecx
c0012d18:	77 05                	ja     c0012d1f <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012d1a:	42                   	inc    edx
c0012d1b:	eb e1                	jmp    c0012cfe <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012d1d:	31 c0                	xor    eax,eax
c0012d1f:	5b                   	pop    ebx
c0012d20:	5e                   	pop    esi
c0012d21:	c3                   	ret    

c0012d22 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012d22:	53                   	push   ebx
c0012d23:	31 c0                	xor    eax,eax
c0012d25:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d29:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012d2f:	39 c3                	cmp    ebx,eax
c0012d31:	7e 22                	jle    c0012d55 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012d33:	8b 14 85 c0 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb440]
c0012d3a:	39 ca                	cmp    edx,ecx
c0012d3c:	77 14                	ja     c0012d52 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d3e:	03 14 85 c0 49 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb640]
c0012d45:	39 ca                	cmp    edx,ecx
c0012d47:	76 09                	jbe    c0012d52 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d49:	8b 04 85 c0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb240]
c0012d50:	eb 05                	jmp    c0012d57 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012d52:	40                   	inc    eax
c0012d53:	eb da                	jmp    c0012d2f <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012d55:	31 c0                	xor    eax,eax
c0012d57:	5b                   	pop    ebx
c0012d58:	c3                   	ret    

c0012d59 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012d59:	53                   	push   ebx
c0012d5a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d5e:	53                   	push   ebx
c0012d5f:	e8 8c ff ff ff       	call   c0012cf0 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012d64:	5a                   	pop    edx
c0012d65:	31 d2                	xor    edx,edx
c0012d67:	85 c0                	test   eax,eax
c0012d69:	74 04                	je     c0012d6f <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012d6b:	89 da                	mov    edx,ebx
c0012d6d:	29 c2                	sub    edx,eax
c0012d6f:	89 d0                	mov    eax,edx
c0012d71:	5b                   	pop    ebx
c0012d72:	c3                   	ret    

c0012d73 <Thr::loadDLL(char const*, bool)>:
c0012d73:	55                   	push   ebp
c0012d74:	57                   	push   edi
c0012d75:	56                   	push   esi
c0012d76:	53                   	push   ebx
c0012d77:	81 ec 34 01 00 00    	sub    esp,0x134
c0012d7d:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012d84:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012d8b:	56                   	push   esi
c0012d8c:	68 92 ea 01 c0       	push   0xc001ea92
c0012d91:	e8 b4 77 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0012d96:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012d9d:	e8 17 4a ff ff       	call   c00077b9 <malloc>
c0012da2:	83 c4 0c             	add    esp,0xc
c0012da5:	89 c3                	mov    ebx,eax
c0012da7:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0012dad:	56                   	push   esi
c0012dae:	50                   	push   eax
c0012daf:	e8 0c 7d ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c0012db4:	83 c4 10             	add    esp,0x10
c0012db7:	85 db                	test   ebx,ebx
c0012db9:	75 3c                	jne    c0012df7 <Thr::loadDLL(char const*, bool)+0x84>
c0012dbb:	89 f8                	mov    eax,edi
c0012dbd:	84 c0                	test   al,al
c0012dbf:	0f 84 d2 01 00 00    	je     c0012f97 <Thr::loadDLL(char const*, bool)+0x224>
c0012dc5:	55                   	push   ebp
c0012dc6:	55                   	push   ebp
c0012dc7:	68 a3 ea 01 c0       	push   0xc001eaa3
c0012dcc:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012dd0:	55                   	push   ebp
c0012dd1:	e8 2a d8 fe ff       	call   c0000600 <strcpy>
c0012dd6:	58                   	pop    eax
c0012dd7:	5a                   	pop    edx
c0012dd8:	56                   	push   esi
c0012dd9:	55                   	push   ebp
c0012dda:	e8 e1 d9 fe ff       	call   c00007c0 <strcat>
c0012ddf:	59                   	pop    ecx
c0012de0:	58                   	pop    eax
c0012de1:	68 b6 ea 01 c0       	push   0xc001eab6
c0012de6:	55                   	push   ebp
c0012de7:	e8 d4 d9 fe ff       	call   c00007c0 <strcat>
c0012dec:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012def:	e8 d7 d3 ff ff       	call   c00101cb <KePanic(char const*)>
c0012df4:	83 c4 10             	add    esp,0x10
c0012df7:	51                   	push   ecx
c0012df8:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012dfc:	50                   	push   eax
c0012dfd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012e01:	50                   	push   eax
c0012e02:	53                   	push   ebx
c0012e03:	e8 24 80 ff ff       	call   c000ae2c <File::stat(unsigned long long*, bool*)>
c0012e08:	83 c4 10             	add    esp,0x10
c0012e0b:	85 db                	test   ebx,ebx
c0012e0d:	74 0c                	je     c0012e1b <Thr::loadDLL(char const*, bool)+0xa8>
c0012e0f:	83 ec 0c             	sub    esp,0xc
c0012e12:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e14:	53                   	push   ebx
c0012e15:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e18:	83 c4 10             	add    esp,0x10
c0012e1b:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012e20:	75 0a                	jne    c0012e2c <Thr::loadDLL(char const*, bool)+0xb9>
c0012e22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e26:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012e2a:	75 3c                	jne    c0012e68 <Thr::loadDLL(char const*, bool)+0xf5>
c0012e2c:	89 f8                	mov    eax,edi
c0012e2e:	84 c0                	test   al,al
c0012e30:	0f 84 49 01 00 00    	je     c0012f7f <Thr::loadDLL(char const*, bool)+0x20c>
c0012e36:	51                   	push   ecx
c0012e37:	51                   	push   ecx
c0012e38:	68 a3 ea 01 c0       	push   0xc001eaa3
c0012e3d:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012e41:	53                   	push   ebx
c0012e42:	e8 b9 d7 fe ff       	call   c0000600 <strcpy>
c0012e47:	5d                   	pop    ebp
c0012e48:	58                   	pop    eax
c0012e49:	56                   	push   esi
c0012e4a:	53                   	push   ebx
c0012e4b:	e8 70 d9 fe ff       	call   c00007c0 <strcat>
c0012e50:	58                   	pop    eax
c0012e51:	5a                   	pop    edx
c0012e52:	68 b6 ea 01 c0       	push   0xc001eab6
c0012e57:	53                   	push   ebx
c0012e58:	e8 63 d9 fe ff       	call   c00007c0 <strcat>
c0012e5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e60:	e8 66 d3 ff ff       	call   c00101cb <KePanic(char const*)>
c0012e65:	83 c4 10             	add    esp,0x10
c0012e68:	52                   	push   edx
c0012e69:	6a 03                	push   0x3
c0012e6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e6f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012e73:	05 ff 0f 00 00       	add    eax,0xfff
c0012e78:	83 d2 00             	adc    edx,0x0
c0012e7b:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012e7f:	50                   	push   eax
c0012e80:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012e86:	e8 c9 6b ff ff       	call   c0009a54 <VAS::allocatePages(int, int)>
c0012e8b:	59                   	pop    ecx
c0012e8c:	89 c3                	mov    ebx,eax
c0012e8e:	5d                   	pop    ebp
c0012e8f:	50                   	push   eax
c0012e90:	68 36 d7 01 c0       	push   0xc001d736
c0012e95:	e8 b0 76 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0012e9a:	89 34 24             	mov    DWORD PTR [esp],esi
c0012e9d:	e8 9e d6 fe ff       	call   c0000540 <strlen>
c0012ea2:	8b 2d a0 49 02 c0    	mov    ebp,DWORD PTR ds:0xc00249a0
c0012ea8:	40                   	inc    eax
c0012ea9:	89 04 24             	mov    DWORD PTR [esp],eax
c0012eac:	e8 08 49 ff ff       	call   c00077b9 <malloc>
c0012eb1:	89 04 ad c0 4d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb240],eax
c0012eb8:	58                   	pop    eax
c0012eb9:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012ebe:	5a                   	pop    edx
c0012ebf:	56                   	push   esi
c0012ec0:	ff 34 85 c0 4d 02 c0 	push   DWORD PTR [eax*4-0x3ffdb240]
c0012ec7:	e8 34 d7 fe ff       	call   c0000600 <strcpy>
c0012ecc:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012ed1:	8d 50 01             	lea    edx,[eax+0x1]
c0012ed4:	89 1c 85 c0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb440],ebx
c0012edb:	89 15 a0 49 02 c0    	mov    DWORD PTR ds:0xc00249a0,edx
c0012ee1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012ee5:	83 c4 0c             	add    esp,0xc
c0012ee8:	89 14 85 c0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb640],edx
c0012eef:	6a 01                	push   0x1
c0012ef1:	53                   	push   ebx
c0012ef2:	56                   	push   esi
c0012ef3:	e8 c2 f6 ff ff       	call   c00125ba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012ef8:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012efc:	83 c4 10             	add    esp,0x10
c0012eff:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f04:	0f 85 89 00 00 00    	jne    c0012f93 <Thr::loadDLL(char const*, bool)+0x220>
c0012f0a:	89 f8                	mov    eax,edi
c0012f0c:	84 c0                	test   al,al
c0012f0e:	74 73                	je     c0012f83 <Thr::loadDLL(char const*, bool)+0x210>
c0012f10:	83 ec 0c             	sub    esp,0xc
c0012f13:	68 b8 ea 01 c0       	push   0xc001eab8
c0012f18:	e8 ae d2 ff ff       	call   c00101cb <KePanic(char const*)>
c0012f1d:	83 c4 10             	add    esp,0x10
c0012f20:	eb 61                	jmp    c0012f83 <Thr::loadDLL(char const*, bool)+0x210>
c0012f22:	50                   	push   eax
c0012f23:	50                   	push   eax
c0012f24:	89 e8                	mov    eax,ebp
c0012f26:	c1 e0 0c             	shl    eax,0xc
c0012f29:	01 d8                	add    eax,ebx
c0012f2b:	50                   	push   eax
c0012f2c:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012f32:	e8 2b 66 ff ff       	call   c0009562 <VAS::getPageTableEntry(unsigned long)>
c0012f37:	83 c4 10             	add    esp,0x10
c0012f3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f3c:	a8 60                	test   al,0x60
c0012f3e:	75 11                	jne    c0012f51 <Thr::loadDLL(char const*, bool)+0x1de>
c0012f40:	83 ec 0c             	sub    esp,0xc
c0012f43:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f48:	50                   	push   eax
c0012f49:	e8 e5 4a ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012f4e:	83 c4 10             	add    esp,0x10
c0012f51:	45                   	inc    ebp
c0012f52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f5a:	05 ff 0f 00 00       	add    eax,0xfff
c0012f5f:	bf 00 00 00 00       	mov    edi,0x0
c0012f64:	83 d2 00             	adc    edx,0x0
c0012f67:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012f6b:	c1 ea 0c             	shr    edx,0xc
c0012f6e:	39 c5                	cmp    ebp,eax
c0012f70:	89 d1                	mov    ecx,edx
c0012f72:	89 f8                	mov    eax,edi
c0012f74:	19 c8                	sbb    eax,ecx
c0012f76:	72 aa                	jb     c0012f22 <Thr::loadDLL(char const*, bool)+0x1af>
c0012f78:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f7d:	75 18                	jne    c0012f97 <Thr::loadDLL(char const*, bool)+0x224>
c0012f7f:	31 db                	xor    ebx,ebx
c0012f81:	eb 14                	jmp    c0012f97 <Thr::loadDLL(char const*, bool)+0x224>
c0012f83:	83 ec 0c             	sub    esp,0xc
c0012f86:	68 d7 ea 01 c0       	push   0xc001ead7
c0012f8b:	e8 3b d2 ff ff       	call   c00101cb <KePanic(char const*)>
c0012f90:	83 c4 10             	add    esp,0x10
c0012f93:	31 ed                	xor    ebp,ebp
c0012f95:	eb bb                	jmp    c0012f52 <Thr::loadDLL(char const*, bool)+0x1df>
c0012f97:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012f9d:	89 d8                	mov    eax,ebx
c0012f9f:	5b                   	pop    ebx
c0012fa0:	5e                   	pop    esi
c0012fa1:	5f                   	pop    edi
c0012fa2:	5d                   	pop    ebp
c0012fa3:	c3                   	ret    

c0012fa4 <Thr::executeDLL(unsigned long, void*)>:
c0012fa4:	56                   	push   esi
c0012fa5:	53                   	push   ebx
c0012fa6:	52                   	push   edx
c0012fa7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012faf:	85 db                	test   ebx,ebx
c0012fb1:	75 10                	jne    c0012fc3 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012fb3:	83 ec 0c             	sub    esp,0xc
c0012fb6:	68 f3 ea 01 c0       	push   0xc001eaf3
c0012fbb:	e8 0b d2 ff ff       	call   c00101cb <KePanic(char const*)>
c0012fc0:	83 c4 10             	add    esp,0x10
c0012fc3:	50                   	push   eax
c0012fc4:	50                   	push   eax
c0012fc5:	53                   	push   ebx
c0012fc6:	68 1d eb 01 c0       	push   0xc001eb1d
c0012fcb:	e8 7a 75 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0012fd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012fd4:	89 d8                	mov    eax,ebx
c0012fd6:	83 c4 14             	add    esp,0x14
c0012fd9:	5b                   	pop    ebx
c0012fda:	5e                   	pop    esi
c0012fdb:	ff e0                	jmp    eax
c0012fdd:	66 90                	xchg   ax,ax
c0012fdf:	90                   	nop

c0012fe0 <userModeEntryPoint(void*)>:
c0012fe0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0012fe5:	48                   	dec    eax
c0012fe6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0012feb:	75 03                	jne    c0012ff0 <userModeEntryPoint(void*)+0x10>
c0012fed:	fb                   	sti    
c0012fee:	66 90                	xchg   ax,ax
c0012ff0:	fb                   	sti    
c0012ff1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ff6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012ff9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012fff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013003:	e9 37 d2 fe ff       	jmp    c000023f <goToUsermode>

c0013008 <changeTSS>:
c0013008:	83 ec 14             	sub    esp,0x14
c001300b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013010:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0013013:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0013018:	c1 e2 15             	shl    edx,0x15
c001301b:	29 d0                	sub    eax,edx
c001301d:	50                   	push   eax
c001301e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0013023:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013029:	05 7c 11 00 00       	add    eax,0x117c
c001302e:	50                   	push   eax
c001302f:	e8 ac 5b ff ff       	call   c0008be0 <TSS::setESP(unsigned long)>
c0013034:	83 c4 1c             	add    esp,0x1c
c0013037:	c3                   	ret    

c0013038 <switchToThread(ThreadControlBlock*)>:
c0013038:	57                   	push   edi
c0013039:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001303e:	56                   	push   esi
c001303f:	85 c0                	test   eax,eax
c0013041:	53                   	push   ebx
c0013042:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013046:	0f 85 90 00 00 00    	jne    c00130dc <switchToThread(ThreadControlBlock*)+0xa4>
c001304c:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c001304f:	80 fa ff             	cmp    dl,0xff
c0013052:	0f 84 80 00 00 00    	je     c00130d8 <switchToThread(ThreadControlBlock*)+0xa0>
c0013058:	81 e2 ff 00 00 00    	and    edx,0xff
c001305e:	b8 00 04 00 00       	mov    eax,0x400
c0013063:	29 d0                	sub    eax,edx
c0013065:	d1 f8                	sar    eax,1
c0013067:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001306a:	66 90                	xchg   ax,ax
c001306c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001306f:	e8 1d 26 00 00       	call   c0015691 <HalQueryPerformanceCounter()>
c0013074:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0013079:	89 15 ac 51 02 c0    	mov    DWORD PTR ds:0xc00251ac,edx
c001307f:	89 c6                	mov    esi,eax
c0013081:	89 d7                	mov    edi,edx
c0013083:	2b 35 98 51 02 c0    	sub    esi,DWORD PTR ds:0xc0025198
c0013089:	a3 98 51 02 c0       	mov    ds:0xc0025198,eax
c001308e:	1b 3d 9c 51 02 c0    	sbb    edi,DWORD PTR ds:0xc002519c
c0013094:	89 35 a0 51 02 c0    	mov    DWORD PTR ds:0xc00251a0,esi
c001309a:	89 3d a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,edi
c00130a0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00130a6:	89 15 9c 51 02 c0    	mov    DWORD PTR ds:0xc002519c,edx
c00130ac:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00130af:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00130b2:	01 c6                	add    esi,eax
c00130b4:	11 d7                	adc    edi,edx
c00130b6:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00130b9:	83 ec 0c             	sub    esp,0xc
c00130bc:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00130bf:	53                   	push   ebx
c00130c0:	e8 b2 d1 fe ff       	call   c0000277 <switchToThreadASM>
c00130c5:	0f 20 c0             	mov    eax,cr0
c00130c8:	83 c8 08             	or     eax,0x8
c00130cb:	0f 22 c0             	mov    cr0,eax
c00130ce:	83 c4 10             	add    esp,0x10
c00130d1:	5b                   	pop    ebx
c00130d2:	5e                   	pop    esi
c00130d3:	5f                   	pop    edi
c00130d4:	c3                   	ret    
c00130d5:	8d 76 00             	lea    esi,[esi+0x0]
c00130d8:	31 c0                	xor    eax,eax
c00130da:	eb 90                	jmp    c001306c <switchToThread(ThreadControlBlock*)+0x34>
c00130dc:	5b                   	pop    ebx
c00130dd:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c00130e7:	5e                   	pop    esi
c00130e8:	5f                   	pop    edi
c00130e9:	c3                   	ret    
c00130ea:	66 90                	xchg   ax,ax

c00130ec <Process::addArgs(char**)>:
c00130ec:	57                   	push   edi
c00130ed:	56                   	push   esi
c00130ee:	53                   	push   ebx
c00130ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00130f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00130f7:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0013101:	85 ff                	test   edi,edi
c0013103:	74 43                	je     c0013148 <Process::addArgs(char**)+0x5c>
c0013105:	8b 07                	mov    eax,DWORD PTR [edi]
c0013107:	85 c0                	test   eax,eax
c0013109:	74 3d                	je     c0013148 <Process::addArgs(char**)+0x5c>
c001310b:	31 db                	xor    ebx,ebx
c001310d:	8d 76 00             	lea    esi,[esi+0x0]
c0013110:	83 ec 0c             	sub    esp,0xc
c0013113:	50                   	push   eax
c0013114:	e8 27 d4 fe ff       	call   c0000540 <strlen>
c0013119:	40                   	inc    eax
c001311a:	89 04 24             	mov    DWORD PTR [esp],eax
c001311d:	e8 97 46 ff ff       	call   c00077b9 <malloc>
c0013122:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0013129:	5a                   	pop    edx
c001312a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001312d:	59                   	pop    ecx
c001312e:	43                   	inc    ebx
c001312f:	52                   	push   edx
c0013130:	50                   	push   eax
c0013131:	e8 ca d4 fe ff       	call   c0000600 <strcpy>
c0013136:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c001313c:	83 c4 10             	add    esp,0x10
c001313f:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0013142:	85 c0                	test   eax,eax
c0013144:	75 ca                	jne    c0013110 <Process::addArgs(char**)+0x24>
c0013146:	66 90                	xchg   ax,ax
c0013148:	5b                   	pop    ebx
c0013149:	5e                   	pop    esi
c001314a:	5f                   	pop    edi
c001314b:	c3                   	ret    

c001314c <Process::Process(char const*, Process*, char**)>:
c001314c:	56                   	push   esi
c001314d:	53                   	push   ebx
c001314e:	83 ec 14             	sub    esp,0x14
c0013151:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013155:	05 0c 02 00 00       	add    eax,0x20c
c001315a:	bb 07 00 00 00       	mov    ebx,0x7
c001315f:	89 c6                	mov    esi,eax
c0013161:	8d 76 00             	lea    esi,[esi+0x0]
c0013164:	85 db                	test   ebx,ebx
c0013166:	78 14                	js     c001317c <Process::Process(char const*, Process*, char**)+0x30>
c0013168:	83 ec 0c             	sub    esp,0xc
c001316b:	56                   	push   esi
c001316c:	e8 9b 98 00 00       	call   c001ca0c <ThreadControlBlock::ThreadControlBlock()>
c0013171:	83 c4 10             	add    esp,0x10
c0013174:	83 c6 5f             	add    esi,0x5f
c0013177:	4b                   	dec    ebx
c0013178:	eb ea                	jmp    c0013164 <Process::Process(char const*, Process*, char**)+0x18>
c001317a:	66 90                	xchg   ax,ax
c001317c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013180:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001318b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0013192:	83 ec 0c             	sub    esp,0xc
c0013195:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013199:	e8 22 ce ff ff       	call   c000ffc0 <Krnl::newProcessEnv(Process*)>
c001319e:	83 c4 10             	add    esp,0x10
c00131a1:	89 c2                	mov    edx,eax
c00131a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131a7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00131ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131b1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00131ba:	a1 cc fa 01 c0       	mov    eax,ds:0xc001facc
c00131bf:	8d 50 01             	lea    edx,[eax+0x1]
c00131c2:	89 15 cc fa 01 c0    	mov    DWORD PTR ds:0xc001facc,edx
c00131c8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00131cc:	89 02                	mov    DWORD PTR [edx],eax
c00131ce:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00131d6:	83 ec 0c             	sub    esp,0xc
c00131d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00131dd:	e8 d7 45 ff ff       	call   c00077b9 <malloc>
c00131e2:	83 c4 10             	add    esp,0x10
c00131e5:	89 c3                	mov    ebx,eax
c00131e7:	83 ec 08             	sub    esp,0x8
c00131ea:	6a 00                	push   0x0
c00131ec:	53                   	push   ebx
c00131ed:	e8 0c 6c ff ff       	call   c0009dfe <VAS::VAS(bool)>
c00131f2:	83 c4 10             	add    esp,0x10
c00131f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131f9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00131ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013203:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001320d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013211:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013215:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001321b:	e8 16 d3 ff ff       	call   c0010536 <KeInitSignals()>
c0013220:	89 c2                	mov    edx,eax
c0013222:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013226:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001322c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013230:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013236:	85 c0                	test   eax,eax
c0013238:	74 42                	je     c001327c <Process::Process(char const*, Process*, char**)+0x130>
c001323a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001323e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013244:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001324a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001324e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013254:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013258:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001325e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013264:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013268:	05 0c 01 00 00       	add    eax,0x10c
c001326d:	83 ec 08             	sub    esp,0x8
c0013270:	52                   	push   edx
c0013271:	50                   	push   eax
c0013272:	e8 89 d3 fe ff       	call   c0000600 <strcpy>
c0013277:	83 c4 10             	add    esp,0x10
c001327a:	eb 64                	jmp    c00132e0 <Process::Process(char const*, Process*, char**)+0x194>
c001327c:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0013284:	83 ec 0c             	sub    esp,0xc
c0013287:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001328b:	e8 29 45 ff ff       	call   c00077b9 <malloc>
c0013290:	83 c4 10             	add    esp,0x10
c0013293:	89 c3                	mov    ebx,eax
c0013295:	83 ec 08             	sub    esp,0x8
c0013298:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001329c:	53                   	push   ebx
c001329d:	e8 58 56 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00132a2:	83 c4 10             	add    esp,0x10
c00132a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132a9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00132af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00132b9:	83 ec 0c             	sub    esp,0xc
c00132bc:	50                   	push   eax
c00132bd:	e8 d8 4e ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00132c2:	83 c4 10             	add    esp,0x10
c00132c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132c9:	05 0c 01 00 00       	add    eax,0x10c
c00132ce:	83 ec 08             	sub    esp,0x8
c00132d1:	68 3c eb 01 c0       	push   0xc001eb3c
c00132d6:	50                   	push   eax
c00132d7:	e8 24 d3 fe ff       	call   c0000600 <strcpy>
c00132dc:	83 c4 10             	add    esp,0x10
c00132df:	90                   	nop
c00132e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132e4:	83 c0 0c             	add    eax,0xc
c00132e7:	83 ec 08             	sub    esp,0x8
c00132ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132ee:	50                   	push   eax
c00132ef:	e8 0c d3 fe ff       	call   c0000600 <strcpy>
c00132f4:	83 c4 10             	add    esp,0x10
c00132f7:	83 ec 08             	sub    esp,0x8
c00132fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00132fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013302:	e8 e5 fd ff ff       	call   c00130ec <Process::addArgs(char**)>
c0013307:	83 c4 10             	add    esp,0x10
c001330a:	83 ec 08             	sub    esp,0x8
c001330d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013311:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013315:	e8 6a ed ff ff       	call   c0012084 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001331a:	83 c4 10             	add    esp,0x10
c001331d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013321:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013325:	83 f0 01             	xor    eax,0x1
c0013328:	88 c2                	mov    dl,al
c001332a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001332e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0013334:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013338:	25 ff 00 00 00       	and    eax,0xff
c001333d:	83 ec 08             	sub    esp,0x8
c0013340:	50                   	push   eax
c0013341:	68 94 eb 01 c0       	push   0xc001eb94
c0013346:	e8 ff 71 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c001334b:	83 c4 10             	add    esp,0x10
c001334e:	90                   	nop
c001334f:	83 c4 14             	add    esp,0x14
c0013352:	5b                   	pop    ebx
c0013353:	5e                   	pop    esi
c0013354:	c3                   	ret    
c0013355:	90                   	nop
c0013356:	66 90                	xchg   ax,ax

c0013358 <Process::Process(bool, char const*, Process*, char**)>:
c0013358:	56                   	push   esi
c0013359:	53                   	push   ebx
c001335a:	83 ec 24             	sub    esp,0x24
c001335d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013361:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013365:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013369:	05 0c 02 00 00       	add    eax,0x20c
c001336e:	bb 07 00 00 00       	mov    ebx,0x7
c0013373:	89 c6                	mov    esi,eax
c0013375:	8d 76 00             	lea    esi,[esi+0x0]
c0013378:	85 db                	test   ebx,ebx
c001337a:	78 14                	js     c0013390 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001337c:	83 ec 0c             	sub    esp,0xc
c001337f:	56                   	push   esi
c0013380:	e8 87 96 00 00       	call   c001ca0c <ThreadControlBlock::ThreadControlBlock()>
c0013385:	83 c4 10             	add    esp,0x10
c0013388:	83 c6 5f             	add    esi,0x5f
c001338b:	4b                   	dec    ebx
c001338c:	eb ea                	jmp    c0013378 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001338e:	66 90                	xchg   ax,ax
c0013390:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013394:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001339b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001339f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00133a6:	83 ec 0c             	sub    esp,0xc
c00133a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00133ad:	e8 0e cc ff ff       	call   c000ffc0 <Krnl::newProcessEnv(Process*)>
c00133b2:	83 c4 10             	add    esp,0x10
c00133b5:	89 c2                	mov    edx,eax
c00133b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133bb:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00133c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133c5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00133ce:	a1 cc fa 01 c0       	mov    eax,ds:0xc001facc
c00133d3:	8d 50 01             	lea    edx,[eax+0x1]
c00133d6:	89 15 cc fa 01 c0    	mov    DWORD PTR ds:0xc001facc,edx
c00133dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00133e0:	89 02                	mov    DWORD PTR [edx],eax
c00133e2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00133ea:	83 ec 0c             	sub    esp,0xc
c00133ed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00133f1:	e8 c3 43 ff ff       	call   c00077b9 <malloc>
c00133f6:	83 c4 10             	add    esp,0x10
c00133f9:	89 c3                	mov    ebx,eax
c00133fb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00133ff:	25 ff 00 00 00       	and    eax,0xff
c0013404:	83 ec 08             	sub    esp,0x8
c0013407:	50                   	push   eax
c0013408:	53                   	push   ebx
c0013409:	e8 f0 69 ff ff       	call   c0009dfe <VAS::VAS(bool)>
c001340e:	83 c4 10             	add    esp,0x10
c0013411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013415:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001341b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001341f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013429:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001342d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013431:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013437:	e8 fa d0 ff ff       	call   c0010536 <KeInitSignals()>
c001343c:	89 c2                	mov    edx,eax
c001343e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013442:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013448:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001344c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013452:	85 c0                	test   eax,eax
c0013454:	74 42                	je     c0013498 <Process::Process(bool, char const*, Process*, char**)+0x140>
c0013456:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001345a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013460:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013466:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001346a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013470:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013474:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001347a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013480:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013484:	05 0c 01 00 00       	add    eax,0x10c
c0013489:	83 ec 08             	sub    esp,0x8
c001348c:	52                   	push   edx
c001348d:	50                   	push   eax
c001348e:	e8 6d d1 fe ff       	call   c0000600 <strcpy>
c0013493:	83 c4 10             	add    esp,0x10
c0013496:	eb 64                	jmp    c00134fc <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c0013498:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c00134a0:	83 ec 0c             	sub    esp,0xc
c00134a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00134a7:	e8 0d 43 ff ff       	call   c00077b9 <malloc>
c00134ac:	83 c4 10             	add    esp,0x10
c00134af:	89 c3                	mov    ebx,eax
c00134b1:	83 ec 08             	sub    esp,0x8
c00134b4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00134b8:	53                   	push   ebx
c00134b9:	e8 3c 54 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00134be:	83 c4 10             	add    esp,0x10
c00134c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134c5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00134cb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134cf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00134d5:	83 ec 0c             	sub    esp,0xc
c00134d8:	50                   	push   eax
c00134d9:	e8 bc 4c ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00134de:	83 c4 10             	add    esp,0x10
c00134e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134e5:	05 0c 01 00 00       	add    eax,0x10c
c00134ea:	83 ec 08             	sub    esp,0x8
c00134ed:	68 3c eb 01 c0       	push   0xc001eb3c
c00134f2:	50                   	push   eax
c00134f3:	e8 08 d1 fe ff       	call   c0000600 <strcpy>
c00134f8:	83 c4 10             	add    esp,0x10
c00134fb:	90                   	nop
c00134fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013500:	83 c0 0c             	add    eax,0xc
c0013503:	83 ec 08             	sub    esp,0x8
c0013506:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001350a:	50                   	push   eax
c001350b:	e8 f0 d0 fe ff       	call   c0000600 <strcpy>
c0013510:	83 c4 10             	add    esp,0x10
c0013513:	83 ec 08             	sub    esp,0x8
c0013516:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001351a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001351e:	e8 c9 fb ff ff       	call   c00130ec <Process::addArgs(char**)>
c0013523:	83 c4 10             	add    esp,0x10
c0013526:	90                   	nop
c0013527:	83 c4 24             	add    esp,0x24
c001352a:	5b                   	pop    ebx
c001352b:	5e                   	pop    esi
c001352c:	c3                   	ret    
c001352d:	8d 76 00             	lea    esi,[esi+0x0]

c0013530 <taskStartupFunction>:
c0013530:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013535:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013538:	c3                   	ret    
c0013539:	90                   	nop
c001353a:	66 90                	xchg   ax,ax

c001353c <Semaphore::Semaphore(int)>:
c001353c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013540:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013544:	89 10                	mov    DWORD PTR [eax],edx
c0013546:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001354a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013555:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001355c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013560:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013567:	90                   	nop
c0013568:	c3                   	ret    
c0013569:	90                   	nop
c001356a:	66 90                	xchg   ax,ax

c001356c <Mutex::Mutex()>:
c001356c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013570:	6a 01                	push   0x1
c0013572:	50                   	push   eax
c0013573:	e8 c4 ff ff ff       	call   c001353c <Semaphore::Semaphore(int)>
c0013578:	83 c4 08             	add    esp,0x8
c001357b:	90                   	nop
c001357c:	c3                   	ret    
c001357d:	90                   	nop
c001357e:	66 90                	xchg   ax,ax

c0013580 <Process::createThread(void (*)(void*), void*, int)>:
c0013580:	57                   	push   edi
c0013581:	31 c9                	xor    ecx,ecx
c0013583:	56                   	push   esi
c0013584:	53                   	push   ebx
c0013585:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013589:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013590:	89 f2                	mov    edx,esi
c0013592:	66 90                	xchg   ax,ax
c0013594:	31 c0                	xor    eax,eax
c0013596:	66 89 d0             	mov    ax,dx
c0013599:	83 e2 01             	and    edx,0x1
c001359c:	74 12                	je     c00135b0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001359e:	d1 f8                	sar    eax,1
c00135a0:	41                   	inc    ecx
c00135a1:	89 c2                	mov    edx,eax
c00135a3:	83 f9 10             	cmp    ecx,0x10
c00135a6:	75 ec                	jne    c0013594 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00135a8:	31 db                	xor    ebx,ebx
c00135aa:	89 d8                	mov    eax,ebx
c00135ac:	5b                   	pop    ebx
c00135ad:	5e                   	pop    esi
c00135ae:	5f                   	pop    edi
c00135af:	c3                   	ret    
c00135b0:	b8 01 00 00 00       	mov    eax,0x1
c00135b5:	d3 e0                	shl    eax,cl
c00135b7:	09 c6                	or     esi,eax
c00135b9:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00135bc:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00135c3:	01 c0                	add    eax,eax
c00135c5:	01 c8                	add    eax,ecx
c00135c7:	8d 04 80             	lea    eax,[eax+eax*4]
c00135ca:	01 d8                	add    eax,ebx
c00135cc:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00135d3:	75 0b                	jne    c00135e0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00135d5:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00135df:	90                   	nop
c00135e0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00135e6:	83 ec 08             	sub    esp,0x8
c00135e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00135ec:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00135ef:	01 c0                	add    eax,eax
c00135f1:	01 c8                	add    eax,ecx
c00135f3:	8d 3c 80             	lea    edi,[eax+eax*4]
c00135f6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00135f9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00135ff:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013605:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013609:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001360f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013615:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c001361c:	89 ca                	mov    edx,ecx
c001361e:	f7 da                	neg    edx
c0013620:	c1 e2 15             	shl    edx,0x15
c0013623:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013629:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001362f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013633:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001363d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0013643:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013647:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001364d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0013657:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013661:	53                   	push   ebx
c0013662:	68 84 51 02 c0       	push   0xc0025184
c0013667:	e8 40 91 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001366c:	83 c4 10             	add    esp,0x10
c001366f:	89 d8                	mov    eax,ebx
c0013671:	5b                   	pop    ebx
c0013672:	5e                   	pop    esi
c0013673:	5f                   	pop    edi
c0013674:	c3                   	ret    
c0013675:	90                   	nop
c0013676:	66 90                	xchg   ax,ax

c0013678 <Process::createUserThread()>:
c0013678:	83 ec 0c             	sub    esp,0xc
c001367b:	68 80 00 00 00       	push   0x80
c0013680:	6a 00                	push   0x0
c0013682:	68 e0 2f 01 c0       	push   0xc0012fe0
c0013687:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001368b:	50                   	push   eax
c001368c:	e8 ef fe ff ff       	call   c0013580 <Process::createThread(void (*)(void*), void*, int)>
c0013691:	83 c4 1c             	add    esp,0x1c
c0013694:	c3                   	ret    
c0013695:	8d 76 00             	lea    esi,[esi+0x0]

c0013698 <setupMultitasking(void (*)())>:
c0013698:	56                   	push   esi
c0013699:	53                   	push   ebx
c001369a:	53                   	push   ebx
c001369b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001369f:	eb 13                	jmp    c00136b4 <setupMultitasking(void (*)())+0x1c>
c00136a1:	8d 76 00             	lea    esi,[esi+0x0]
c00136a4:	83 ec 0c             	sub    esp,0xc
c00136a7:	68 84 51 02 c0       	push   0xc0025184
c00136ac:	e8 43 90 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00136b1:	83 c4 10             	add    esp,0x10
c00136b4:	83 ec 0c             	sub    esp,0xc
c00136b7:	68 84 51 02 c0       	push   0xc0025184
c00136bc:	e8 0f 90 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00136c1:	83 c4 10             	add    esp,0x10
c00136c4:	84 c0                	test   al,al
c00136c6:	74 dc                	je     c00136a4 <setupMultitasking(void (*)())+0xc>
c00136c8:	83 ec 0c             	sub    esp,0xc
c00136cb:	68 24 07 00 00       	push   0x724
c00136d0:	e8 e4 40 ff ff       	call   c00077b9 <malloc>
c00136d5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00136dc:	89 c3                	mov    ebx,eax
c00136de:	6a 00                	push   0x0
c00136e0:	68 40 eb 01 c0       	push   0xc001eb40
c00136e5:	6a 01                	push   0x1
c00136e7:	50                   	push   eax
c00136e8:	e8 6b fc ff ff       	call   c0013358 <Process::Process(bool, char const*, Process*, char**)>
c00136ed:	83 c4 14             	add    esp,0x14
c00136f0:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00136f6:	89 1d 90 51 02 c0    	mov    DWORD PTR ds:0xc0025190,ebx
c00136fc:	50                   	push   eax
c00136fd:	e8 f5 4c ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0013702:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c001370a:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013714:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001371a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001371d:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013727:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001372d:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013733:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001373d:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0013747:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013751:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0013757:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001375d:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0013767:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001376d:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0013777:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001377d:	5a                   	pop    edx
c001377e:	59                   	pop    ecx
c001377f:	68 3c eb 01 c0       	push   0xc001eb3c
c0013784:	50                   	push   eax
c0013785:	e8 76 ce fe ff       	call   c0000600 <strcpy>
c001378a:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013791:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013795:	83 c4 14             	add    esp,0x14
c0013798:	5b                   	pop    ebx
c0013799:	5e                   	pop    esi
c001379a:	e9 ca ca fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001379f:	90                   	nop

c00137a0 <schedule()>:
c00137a0:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c00137a6:	85 d2                	test   edx,edx
c00137a8:	74 0e                	je     c00137b8 <schedule()+0x18>
c00137aa:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c00137b4:	c3                   	ret    
c00137b5:	8d 76 00             	lea    esi,[esi+0x0]
c00137b8:	53                   	push   ebx
c00137b9:	83 ec 14             	sub    esp,0x14
c00137bc:	68 84 51 02 c0       	push   0xc0025184
c00137c1:	e8 0a 8f 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00137c6:	83 c4 10             	add    esp,0x10
c00137c9:	84 c0                	test   al,al
c00137cb:	75 3b                	jne    c0013808 <schedule()+0x68>
c00137cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137d2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00137d5:	4a                   	dec    edx
c00137d6:	74 38                	je     c0013810 <schedule()+0x70>
c00137d8:	83 ec 0c             	sub    esp,0xc
c00137db:	68 84 51 02 c0       	push   0xc0025184
c00137e0:	e8 07 8f 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137e5:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c00137ec:	89 c3                	mov    ebx,eax
c00137ee:	e8 01 8f 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00137f3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00137fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00137fd:	e8 36 f8 ff ff       	call   c0013038 <switchToThread(ThreadControlBlock*)>
c0013802:	83 c4 10             	add    esp,0x10
c0013805:	8d 76 00             	lea    esi,[esi+0x0]
c0013808:	83 c4 08             	add    esp,0x8
c001380b:	5b                   	pop    ebx
c001380c:	c3                   	ret    
c001380d:	8d 76 00             	lea    esi,[esi+0x0]
c0013810:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013817:	83 ec 08             	sub    esp,0x8
c001381a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001381f:	50                   	push   eax
c0013820:	68 84 51 02 c0       	push   0xc0025184
c0013825:	e8 82 8f 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001382a:	83 c4 10             	add    esp,0x10
c001382d:	eb a9                	jmp    c00137d8 <schedule()+0x38>
c001382f:	90                   	nop

c0013830 <Semaphore::tryAcquire()>:
c0013830:	53                   	push   ebx
c0013831:	83 ec 08             	sub    esp,0x8
c0013834:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013838:	fa                   	cli    
c0013839:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001383e:	8d 50 01             	lea    edx,[eax+0x1]
c0013841:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c0013847:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c001384d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013850:	89 1d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ebx
c0013856:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013859:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001385b:	7c 33                	jl     c0013890 <Semaphore::tryAcquire()+0x60>
c001385d:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c0013863:	85 d2                	test   edx,edx
c0013865:	75 0d                	jne    c0013874 <Semaphore::tryAcquire()+0x44>
c0013867:	8b 15 60 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025160
c001386d:	85 d2                	test   edx,edx
c001386f:	75 6b                	jne    c00138dc <Semaphore::tryAcquire()+0xac>
c0013871:	8d 76 00             	lea    esi,[esi+0x0]
c0013874:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013879:	85 c0                	test   eax,eax
c001387b:	74 0b                	je     c0013888 <Semaphore::tryAcquire()+0x58>
c001387d:	8d 76 00             	lea    esi,[esi+0x0]
c0013880:	31 c0                	xor    eax,eax
c0013882:	83 c4 08             	add    esp,0x8
c0013885:	5b                   	pop    ebx
c0013886:	c3                   	ret    
c0013887:	90                   	nop
c0013888:	fb                   	sti    
c0013889:	83 c4 08             	add    esp,0x8
c001388c:	5b                   	pop    ebx
c001388d:	c3                   	ret    
c001388e:	66 90                	xchg   ax,ax
c0013890:	43                   	inc    ebx
c0013891:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c0013897:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001389a:	85 d2                	test   edx,edx
c001389c:	75 22                	jne    c00138c0 <Semaphore::tryAcquire()+0x90>
c001389e:	8b 0d 60 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025160
c00138a4:	85 c9                	test   ecx,ecx
c00138a6:	74 18                	je     c00138c0 <Semaphore::tryAcquire()+0x90>
c00138a8:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00138b2:	e8 e9 fe ff ff       	call   c00137a0 <schedule()>
c00138b7:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00138bc:	48                   	dec    eax
c00138bd:	8d 76 00             	lea    esi,[esi+0x0]
c00138c0:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00138c5:	85 c0                	test   eax,eax
c00138c7:	75 0b                	jne    c00138d4 <Semaphore::tryAcquire()+0xa4>
c00138c9:	fb                   	sti    
c00138ca:	b0 01                	mov    al,0x1
c00138cc:	83 c4 08             	add    esp,0x8
c00138cf:	5b                   	pop    ebx
c00138d0:	c3                   	ret    
c00138d1:	8d 76 00             	lea    esi,[esi+0x0]
c00138d4:	b0 01                	mov    al,0x1
c00138d6:	83 c4 08             	add    esp,0x8
c00138d9:	5b                   	pop    ebx
c00138da:	c3                   	ret    
c00138db:	90                   	nop
c00138dc:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00138e6:	e8 b5 fe ff ff       	call   c00137a0 <schedule()>
c00138eb:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00138f0:	48                   	dec    eax
c00138f1:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00138f6:	85 c0                	test   eax,eax
c00138f8:	75 86                	jne    c0013880 <Semaphore::tryAcquire()+0x50>
c00138fa:	eb 8c                	jmp    c0013888 <Semaphore::tryAcquire()+0x58>

c00138fc <Semaphore::assertLocked(char const*)>:
c00138fc:	83 ec 0c             	sub    esp,0xc
c00138ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013903:	fa                   	cli    
c0013904:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001390a:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001390f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013912:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013918:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001391a:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001391d:	7c 29                	jl     c0013948 <Semaphore::assertLocked(char const*)+0x4c>
c001391f:	90                   	nop
c0013920:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013925:	85 c0                	test   eax,eax
c0013927:	75 0b                	jne    c0013934 <Semaphore::assertLocked(char const*)+0x38>
c0013929:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c001392e:	85 c0                	test   eax,eax
c0013930:	75 2e                	jne    c0013960 <Semaphore::assertLocked(char const*)+0x64>
c0013932:	66 90                	xchg   ax,ax
c0013934:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013939:	48                   	dec    eax
c001393a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001393f:	75 03                	jne    c0013944 <Semaphore::assertLocked(char const*)+0x48>
c0013941:	fb                   	sti    
c0013942:	66 90                	xchg   ax,ax
c0013944:	83 c4 0c             	add    esp,0xc
c0013947:	c3                   	ret    
c0013948:	83 ec 0c             	sub    esp,0xc
c001394b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001394f:	52                   	push   edx
c0013950:	e8 76 c8 ff ff       	call   c00101cb <KePanic(char const*)>
c0013955:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001395a:	83 c4 10             	add    esp,0x10
c001395d:	48                   	dec    eax
c001395e:	eb c0                	jmp    c0013920 <Semaphore::assertLocked(char const*)+0x24>
c0013960:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001396a:	e8 31 fe ff ff       	call   c00137a0 <schedule()>
c001396f:	eb c3                	jmp    c0013934 <Semaphore::assertLocked(char const*)+0x38>
c0013971:	8d 76 00             	lea    esi,[esi+0x0]

c0013974 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013974:	83 ec 0c             	sub    esp,0xc
c0013977:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001397c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013980:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013983:	e8 18 fe ff ff       	call   c00137a0 <schedule()>
c0013988:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001398d:	48                   	dec    eax
c001398e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013993:	75 03                	jne    c0013998 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013995:	fb                   	sti    
c0013996:	66 90                	xchg   ax,ax
c0013998:	83 c4 0c             	add    esp,0xc
c001399b:	c3                   	ret    

c001399c <blockTask(TaskState)>:
c001399c:	83 ec 0c             	sub    esp,0xc
c001399f:	fa                   	cli    
c00139a0:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00139a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139af:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00139b2:	e8 e9 fd ff ff       	call   c00137a0 <schedule()>
c00139b7:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00139bc:	48                   	dec    eax
c00139bd:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00139c2:	75 04                	jne    c00139c8 <blockTask(TaskState)+0x2c>
c00139c4:	fb                   	sti    
c00139c5:	8d 76 00             	lea    esi,[esi+0x0]
c00139c8:	83 c4 0c             	add    esp,0xc
c00139cb:	c3                   	ret    

c00139cc <waitTask(int, int*, int)>:
c00139cc:	83 ec 18             	sub    esp,0x18
c00139cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00139d8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00139db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00139df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139e4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00139e7:	6a 07                	push   0x7
c00139e9:	e8 ae ff ff ff       	call   c001399c <blockTask(TaskState)>
c00139ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139f3:	83 c4 10             	add    esp,0x10
c00139f6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00139f9:	85 d2                	test   edx,edx
c00139fb:	74 0b                	je     c0013a08 <waitTask(int, int*, int)+0x3c>
c00139fd:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013a00:	89 02                	mov    DWORD PTR [edx],eax
c0013a02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a07:	90                   	nop
c0013a08:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013a0b:	83 c4 0c             	add    esp,0xc
c0013a0e:	c3                   	ret    
c0013a0f:	90                   	nop

c0013a10 <milliTenthSleepUntil(unsigned int)>:
c0013a10:	83 ec 0c             	sub    esp,0xc
c0013a13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a17:	39 05 8c 44 02 c0    	cmp    DWORD PTR ds:0xc002448c,eax
c0013a1d:	76 05                	jbe    c0013a24 <milliTenthSleepUntil(unsigned int)+0x14>
c0013a1f:	90                   	nop
c0013a20:	83 c4 0c             	add    esp,0xc
c0013a23:	c3                   	ret    
c0013a24:	fa                   	cli    
c0013a25:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013a2b:	83 ec 08             	sub    esp,0x8
c0013a2e:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0013a34:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a3a:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013a3d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a43:	52                   	push   edx
c0013a44:	68 78 51 02 c0       	push   0xc0025178
c0013a49:	e8 5e 8d 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013a4e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013a55:	e8 42 ff ff ff       	call   c001399c <blockTask(TaskState)>
c0013a5a:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013a5f:	83 c4 10             	add    esp,0x10
c0013a62:	48                   	dec    eax
c0013a63:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013a68:	85 c0                	test   eax,eax
c0013a6a:	75 0c                	jne    c0013a78 <milliTenthSleepUntil(unsigned int)+0x68>
c0013a6c:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013a71:	85 c0                	test   eax,eax
c0013a73:	75 17                	jne    c0013a8c <milliTenthSleepUntil(unsigned int)+0x7c>
c0013a75:	8d 76 00             	lea    esi,[esi+0x0]
c0013a78:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a7d:	48                   	dec    eax
c0013a7e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a83:	75 9b                	jne    c0013a20 <milliTenthSleepUntil(unsigned int)+0x10>
c0013a85:	fb                   	sti    
c0013a86:	83 c4 0c             	add    esp,0xc
c0013a89:	c3                   	ret    
c0013a8a:	66 90                	xchg   ax,ax
c0013a8c:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013a96:	e8 05 fd ff ff       	call   c00137a0 <schedule()>
c0013a9b:	eb db                	jmp    c0013a78 <milliTenthSleepUntil(unsigned int)+0x68>
c0013a9d:	8d 76 00             	lea    esi,[esi+0x0]

c0013aa0 <milliTenthSleep(unsigned int)>:
c0013aa0:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c0013aa5:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013aa9:	e9 62 ff ff ff       	jmp    c0013a10 <milliTenthSleepUntil(unsigned int)>
c0013aae:	66 90                	xchg   ax,ax

c0013ab0 <sleep(unsigned int)>:
c0013ab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ab4:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ab7:	8d 04 80             	lea    eax,[eax+eax*4]
c0013aba:	8d 04 80             	lea    eax,[eax+eax*4]
c0013abd:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ac0:	c1 e0 04             	shl    eax,0x4
c0013ac3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ac7:	eb d7                	jmp    c0013aa0 <milliTenthSleep(unsigned int)>
c0013ac9:	90                   	nop
c0013aca:	66 90                	xchg   ax,ax

c0013acc <Semaphore::acquire()>:
c0013acc:	83 ec 0c             	sub    esp,0xc
c0013acf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ad3:	fa                   	cli    
c0013ad4:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013ad9:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013adf:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ae2:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013ae8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013aeb:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013aed:	7d 2d                	jge    c0013b1c <Semaphore::acquire()+0x50>
c0013aef:	41                   	inc    ecx
c0013af0:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013af3:	90                   	nop
c0013af4:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013af9:	85 c0                	test   eax,eax
c0013afb:	75 0b                	jne    c0013b08 <Semaphore::acquire()+0x3c>
c0013afd:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013b02:	85 c0                	test   eax,eax
c0013b04:	75 62                	jne    c0013b68 <Semaphore::acquire()+0x9c>
c0013b06:	66 90                	xchg   ax,ax
c0013b08:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013b0d:	48                   	dec    eax
c0013b0e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013b13:	75 03                	jne    c0013b18 <Semaphore::acquire()+0x4c>
c0013b15:	fb                   	sti    
c0013b16:	66 90                	xchg   ax,ax
c0013b18:	83 c4 0c             	add    esp,0xc
c0013b1b:	c3                   	ret    
c0013b1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b21:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013b28:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013b2b:	85 c9                	test   ecx,ecx
c0013b2d:	74 4d                	je     c0013b7c <Semaphore::acquire()+0xb0>
c0013b2f:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013b32:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b38:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013b3b:	90                   	nop
c0013b3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b41:	83 ec 0c             	sub    esp,0xc
c0013b44:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013b47:	68 bc eb 01 c0       	push   0xc001ebbc
c0013b4c:	e8 f9 69 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0013b51:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013b58:	e8 3f fe ff ff       	call   c001399c <blockTask(TaskState)>
c0013b5d:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013b62:	83 c4 10             	add    esp,0x10
c0013b65:	48                   	dec    eax
c0013b66:	eb 8c                	jmp    c0013af4 <Semaphore::acquire()+0x28>
c0013b68:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013b72:	e8 29 fc ff ff       	call   c00137a0 <schedule()>
c0013b77:	eb 8f                	jmp    c0013b08 <Semaphore::acquire()+0x3c>
c0013b79:	8d 76 00             	lea    esi,[esi+0x0]
c0013b7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b81:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013b84:	eb b6                	jmp    c0013b3c <Semaphore::acquire()+0x70>
c0013b86:	66 90                	xchg   ax,ax

c0013b88 <taskReturned>:
c0013b88:	83 ec 18             	sub    esp,0x18
c0013b8b:	68 dc eb 01 c0       	push   0xc001ebdc
c0013b90:	e8 36 c6 ff ff       	call   c00101cb <KePanic(char const*)>
c0013b95:	83 c4 10             	add    esp,0x10
c0013b98:	83 ec 0c             	sub    esp,0xc
c0013b9b:	6a 02                	push   0x2
c0013b9d:	e8 fa fd ff ff       	call   c001399c <blockTask(TaskState)>
c0013ba2:	fa                   	cli    
c0013ba3:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013ba9:	e8 f2 fb ff ff       	call   c00137a0 <schedule()>
c0013bae:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013bb3:	83 c4 10             	add    esp,0x10
c0013bb6:	48                   	dec    eax
c0013bb7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013bbc:	85 c0                	test   eax,eax
c0013bbe:	75 d8                	jne    c0013b98 <taskReturned+0x10>
c0013bc0:	fb                   	sti    
c0013bc1:	eb d5                	jmp    c0013b98 <taskReturned+0x10>
c0013bc3:	90                   	nop

c0013bc4 <Thr::processFromPID(int)>:
c0013bc4:	57                   	push   edi
c0013bc5:	56                   	push   esi
c0013bc6:	53                   	push   ebx
c0013bc7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bcb:	fa                   	cli    
c0013bcc:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013bd2:	83 ec 0c             	sub    esp,0xc
c0013bd5:	68 84 51 02 c0       	push   0xc0025184
c0013bda:	e8 0d 8b 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013bdf:	83 c4 10             	add    esp,0x10
c0013be2:	89 c7                	mov    edi,eax
c0013be4:	eb 16                	jmp    c0013bfc <Thr::processFromPID(int)+0x38>
c0013be6:	66 90                	xchg   ax,ax
c0013be8:	83 ec 0c             	sub    esp,0xc
c0013beb:	68 84 51 02 c0       	push   0xc0025184
c0013bf0:	e8 f7 8a 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013bf5:	83 c4 10             	add    esp,0x10
c0013bf8:	39 f8                	cmp    eax,edi
c0013bfa:	74 4c                	je     c0013c48 <Thr::processFromPID(int)+0x84>
c0013bfc:	83 ec 0c             	sub    esp,0xc
c0013bff:	68 84 51 02 c0       	push   0xc0025184
c0013c04:	e8 e3 8a 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c09:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013c10:	89 c3                	mov    ebx,eax
c0013c12:	e8 dd 8a 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013c17:	58                   	pop    eax
c0013c18:	5a                   	pop    edx
c0013c19:	53                   	push   ebx
c0013c1a:	68 84 51 02 c0       	push   0xc0025184
c0013c1f:	e8 88 8b 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013c24:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c27:	83 c4 10             	add    esp,0x10
c0013c2a:	39 30                	cmp    DWORD PTR [eax],esi
c0013c2c:	75 ba                	jne    c0013be8 <Thr::processFromPID(int)+0x24>
c0013c2e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c33:	48                   	dec    eax
c0013c34:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c39:	74 09                	je     c0013c44 <Thr::processFromPID(int)+0x80>
c0013c3b:	90                   	nop
c0013c3c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c3f:	5b                   	pop    ebx
c0013c40:	5e                   	pop    esi
c0013c41:	5f                   	pop    edi
c0013c42:	c3                   	ret    
c0013c43:	90                   	nop
c0013c44:	fb                   	sti    
c0013c45:	eb f5                	jmp    c0013c3c <Thr::processFromPID(int)+0x78>
c0013c47:	90                   	nop
c0013c48:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c4d:	48                   	dec    eax
c0013c4e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c53:	75 07                	jne    c0013c5c <Thr::processFromPID(int)+0x98>
c0013c55:	fb                   	sti    
c0013c56:	5b                   	pop    ebx
c0013c57:	5e                   	pop    esi
c0013c58:	5f                   	pop    edi
c0013c59:	c3                   	ret    
c0013c5a:	66 90                	xchg   ax,ax
c0013c5c:	5b                   	pop    ebx
c0013c5d:	31 c0                	xor    eax,eax
c0013c5f:	5e                   	pop    esi
c0013c60:	5f                   	pop    edi
c0013c61:	c3                   	ret    
c0013c62:	66 90                	xchg   ax,ax

c0013c64 <unblockTask(ThreadControlBlock*)>:
c0013c64:	53                   	push   ebx
c0013c65:	83 ec 08             	sub    esp,0x8
c0013c68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c6c:	fa                   	cli    
c0013c6d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013c73:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c76:	85 c0                	test   eax,eax
c0013c78:	74 66                	je     c0013ce0 <unblockTask(ThreadControlBlock*)+0x7c>
c0013c7a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c7d:	48                   	dec    eax
c0013c7e:	74 38                	je     c0013cb8 <unblockTask(ThreadControlBlock*)+0x54>
c0013c80:	83 ec 0c             	sub    esp,0xc
c0013c83:	68 84 51 02 c0       	push   0xc0025184
c0013c88:	e8 5f 8a 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c8d:	83 c4 10             	add    esp,0x10
c0013c90:	85 c0                	test   eax,eax
c0013c92:	75 1c                	jne    c0013cb0 <unblockTask(ThreadControlBlock*)+0x4c>
c0013c94:	eb 5e                	jmp    c0013cf4 <unblockTask(ThreadControlBlock*)+0x90>
c0013c96:	66 90                	xchg   ax,ax
c0013c98:	83 ec 08             	sub    esp,0x8
c0013c9b:	50                   	push   eax
c0013c9c:	68 84 51 02 c0       	push   0xc0025184
c0013ca1:	e8 f6 8d 00 00       	call   c001ca9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013ca6:	83 c4 10             	add    esp,0x10
c0013ca9:	85 c0                	test   eax,eax
c0013cab:	74 47                	je     c0013cf4 <unblockTask(ThreadControlBlock*)+0x90>
c0013cad:	8d 76 00             	lea    esi,[esi+0x0]
c0013cb0:	39 c3                	cmp    ebx,eax
c0013cb2:	75 e4                	jne    c0013c98 <unblockTask(ThreadControlBlock*)+0x34>
c0013cb4:	eb 12                	jmp    c0013cc8 <unblockTask(ThreadControlBlock*)+0x64>
c0013cb6:	66 90                	xchg   ax,ax
c0013cb8:	83 ec 0c             	sub    esp,0xc
c0013cbb:	68 5e eb 01 c0       	push   0xc001eb5e
c0013cc0:	e8 85 68 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0013cc5:	83 c4 10             	add    esp,0x10
c0013cc8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013ccd:	48                   	dec    eax
c0013cce:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013cd3:	75 03                	jne    c0013cd8 <unblockTask(ThreadControlBlock*)+0x74>
c0013cd5:	fb                   	sti    
c0013cd6:	66 90                	xchg   ax,ax
c0013cd8:	83 c4 08             	add    esp,0x8
c0013cdb:	5b                   	pop    ebx
c0013cdc:	c3                   	ret    
c0013cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0013ce0:	83 ec 0c             	sub    esp,0xc
c0013ce3:	68 47 eb 01 c0       	push   0xc001eb47
c0013ce8:	e8 5d 68 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0013ced:	83 c4 10             	add    esp,0x10
c0013cf0:	eb d6                	jmp    c0013cc8 <unblockTask(ThreadControlBlock*)+0x64>
c0013cf2:	66 90                	xchg   ax,ax
c0013cf4:	83 ec 08             	sub    esp,0x8
c0013cf7:	53                   	push   ebx
c0013cf8:	68 84 51 02 c0       	push   0xc0025184
c0013cfd:	e8 aa 8a 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d02:	83 c4 10             	add    esp,0x10
c0013d05:	eb c1                	jmp    c0013cc8 <unblockTask(ThreadControlBlock*)+0x64>
c0013d07:	90                   	nop

c0013d08 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013d08:	55                   	push   ebp
c0013d09:	57                   	push   edi
c0013d0a:	56                   	push   esi
c0013d0b:	53                   	push   ebx
c0013d0c:	83 ec 1c             	sub    esp,0x1c
c0013d0f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013d13:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d16:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013d1c:	85 ed                	test   ebp,ebp
c0013d1e:	7e 24                	jle    c0013d44 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013d20:	31 f6                	xor    esi,esi
c0013d22:	66 90                	xchg   ax,ax
c0013d24:	83 ec 0c             	sub    esp,0xc
c0013d27:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013d2e:	46                   	inc    esi
c0013d2f:	57                   	push   edi
c0013d30:	e8 94 3a ff ff       	call   c00077c9 <free>
c0013d35:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d38:	83 c4 10             	add    esp,0x10
c0013d3b:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013d41:	7f e1                	jg     c0013d24 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013d43:	90                   	nop
c0013d44:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013d4e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013d53:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013d56:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013d59:	d3 c0                	rol    eax,cl
c0013d5b:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013d62:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013d65:	89 f7                	mov    edi,esi
c0013d67:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013d6f:	0f 85 77 01 00 00    	jne    c0013eec <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013d75:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013d7b:	85 ed                	test   ebp,ebp
c0013d7d:	74 1d                	je     c0013d9c <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013d7f:	83 ec 0c             	sub    esp,0xc
c0013d82:	55                   	push   ebp
c0013d83:	e8 54 c1 ff ff       	call   c000fedc <EnvVarContainer::~EnvVarContainer()>
c0013d88:	59                   	pop    ecx
c0013d89:	5e                   	pop    esi
c0013d8a:	6a 0c                	push   0xc
c0013d8c:	55                   	push   ebp
c0013d8d:	e8 c2 66 ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c0013d92:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013d95:	83 c4 10             	add    esp,0x10
c0013d98:	89 f7                	mov    edi,esi
c0013d9a:	66 90                	xchg   ax,ax
c0013d9c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013da2:	85 c0                	test   eax,eax
c0013da4:	0f 84 b6 00 00 00    	je     c0013e60 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013daa:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013dad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013db1:	31 c9                	xor    ecx,ecx
c0013db3:	eb 17                	jmp    c0013dcc <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013db5:	8d 76 00             	lea    esi,[esi+0x0]
c0013db8:	41                   	inc    ecx
c0013db9:	83 f9 10             	cmp    ecx,0x10
c0013dbc:	0f 84 9e 00 00 00    	je     c0013e60 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013dc2:	66 90                	xchg   ax,ax
c0013dc4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013dca:	66 90                	xchg   ax,ax
c0013dcc:	31 d2                	xor    edx,edx
c0013dce:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013dd5:	d3 fa                	sar    edx,cl
c0013dd7:	83 e2 01             	and    edx,0x1
c0013dda:	74 dc                	je     c0013db8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013ddc:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013ddf:	01 d2                	add    edx,edx
c0013de1:	01 ca                	add    edx,ecx
c0013de3:	8d 14 92             	lea    edx,[edx+edx*4]
c0013de6:	01 d0                	add    eax,edx
c0013de8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013dee:	83 fd 07             	cmp    ebp,0x7
c0013df1:	75 c5                	jne    c0013db8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013df3:	05 40 02 00 00       	add    eax,0x240
c0013df8:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013dfb:	83 fd ff             	cmp    ebp,0xffffffff
c0013dfe:	0f 8c f0 00 00 00    	jl     c0013ef4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013e04:	0f 84 ae 01 00 00    	je     c0013fb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013e0a:	85 ed                	test   ebp,ebp
c0013e0c:	0f 84 92 01 00 00    	je     c0013fa4 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013e12:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013e14:	75 a2                	jne    c0013db8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e16:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e1c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e20:	01 d0                	add    eax,edx
c0013e22:	66 90                	xchg   ax,ax
c0013e24:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013e28:	83 ec 0c             	sub    esp,0xc
c0013e2b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013e31:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e34:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013e3a:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013e41:	50                   	push   eax
c0013e42:	e8 1d fe ff ff       	call   c0013c64 <unblockTask(ThreadControlBlock*)>
c0013e47:	83 c4 10             	add    esp,0x10
c0013e4a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013e51:	89 f7                	mov    edi,esi
c0013e53:	41                   	inc    ecx
c0013e54:	83 f9 10             	cmp    ecx,0x10
c0013e57:	0f 85 67 ff ff ff    	jne    c0013dc4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0013e60:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013e66:	85 c0                	test   eax,eax
c0013e68:	74 62                	je     c0013ecc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013e6a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013e70:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013e76:	74 54                	je     c0013ecc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013e78:	83 ec 0c             	sub    esp,0xc
c0013e7b:	68 84 51 02 c0       	push   0xc0025184
c0013e80:	e8 67 88 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e85:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013e8c:	89 c7                	mov    edi,eax
c0013e8e:	e8 3d 88 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013e93:	83 c4 10             	add    esp,0x10
c0013e96:	84 c0                	test   al,al
c0013e98:	0f 84 ce 00 00 00    	je     c0013f6c <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013e9e:	66 90                	xchg   ax,ax
c0013ea0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ea3:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013ea9:	85 d2                	test   edx,edx
c0013eab:	74 0f                	je     c0013ebc <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013ead:	83 ec 0c             	sub    esp,0xc
c0013eb0:	8b 02                	mov    eax,DWORD PTR [edx]
c0013eb2:	52                   	push   edx
c0013eb3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013eb6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013eb9:	83 c4 10             	add    esp,0x10
c0013ebc:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013ec6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013ec9:	8d 76 00             	lea    esi,[esi+0x0]
c0013ecc:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013ed2:	85 db                	test   ebx,ebx
c0013ed4:	74 16                	je     c0013eec <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013ed6:	83 ec 0c             	sub    esp,0xc
c0013ed9:	53                   	push   ebx
c0013eda:	e8 0d 59 ff ff       	call   c00097ec <VAS::~VAS()>
c0013edf:	58                   	pop    eax
c0013ee0:	5a                   	pop    edx
c0013ee1:	6a 14                	push   0x14
c0013ee3:	53                   	push   ebx
c0013ee4:	e8 6b 65 ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c0013ee9:	83 c4 10             	add    esp,0x10
c0013eec:	83 c4 1c             	add    esp,0x1c
c0013eef:	5b                   	pop    ebx
c0013ef0:	5e                   	pop    esi
c0013ef1:	5f                   	pop    edi
c0013ef2:	5d                   	pop    ebp
c0013ef3:	c3                   	ret    
c0013ef4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ef8:	83 ec 0c             	sub    esp,0xc
c0013efb:	68 10 ec 01 c0       	push   0xc001ec10
c0013f00:	e8 c6 c2 ff ff       	call   c00101cb <KePanic(char const*)>
c0013f05:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f08:	83 c4 10             	add    esp,0x10
c0013f0b:	89 f7                	mov    edi,esi
c0013f0d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f11:	e9 a2 fe ff ff       	jmp    c0013db8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f16:	66 90                	xchg   ax,ax
c0013f18:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f1e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013f24:	75 1e                	jne    c0013f44 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f26:	83 ec 0c             	sub    esp,0xc
c0013f29:	68 78 ec 01 c0       	push   0xc001ec78
c0013f2e:	e8 17 66 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0013f33:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013f3a:	e8 5d fa ff ff       	call   c001399c <blockTask(TaskState)>
c0013f3f:	83 c4 10             	add    esp,0x10
c0013f42:	66 90                	xchg   ax,ax
c0013f44:	83 ec 08             	sub    esp,0x8
c0013f47:	56                   	push   esi
c0013f48:	68 84 51 02 c0       	push   0xc0025184
c0013f4d:	e8 5a 88 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f52:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013f59:	e8 8e 87 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f5e:	83 c4 10             	add    esp,0x10
c0013f61:	39 f8                	cmp    eax,edi
c0013f63:	0f 84 37 ff ff ff    	je     c0013ea0 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013f69:	8d 76 00             	lea    esi,[esi+0x0]
c0013f6c:	83 ec 0c             	sub    esp,0xc
c0013f6f:	68 84 51 02 c0       	push   0xc0025184
c0013f74:	e8 73 87 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f79:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013f80:	89 c6                	mov    esi,eax
c0013f82:	e8 6d 87 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013f87:	83 c4 10             	add    esp,0x10
c0013f8a:	39 f3                	cmp    ebx,esi
c0013f8c:	74 b6                	je     c0013f44 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f8e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013f91:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f94:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013f9a:	75 a8                	jne    c0013f44 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f9c:	e9 77 ff ff ff       	jmp    c0013f18 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fa4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fa8:	83 ec 0c             	sub    esp,0xc
c0013fab:	68 44 ec 01 c0       	push   0xc001ec44
c0013fb0:	e9 4b ff ff ff       	jmp    c0013f00 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0013fb8:	8b 36                	mov    esi,DWORD PTR [esi]
c0013fba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fbe:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013fc1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fc4:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013fca:	01 d7                	add    edi,edx
c0013fcc:	89 f8                	mov    eax,edi
c0013fce:	e9 51 fe ff ff       	jmp    c0013e24 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013fd3:	90                   	nop

c0013fd4 <cleanerTaskFunction(void*)>:
c0013fd4:	53                   	push   ebx
c0013fd5:	83 ec 08             	sub    esp,0x8
c0013fd8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013fdd:	48                   	dec    eax
c0013fde:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013fe3:	75 03                	jne    c0013fe8 <cleanerTaskFunction(void*)+0x14>
c0013fe5:	fb                   	sti    
c0013fe6:	66 90                	xchg   ax,ax
c0013fe8:	fa                   	cli    
c0013fe9:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013fee:	80 3d 4c 51 02 c0 00 	cmp    BYTE PTR ds:0xc002514c,0x0
c0013ff5:	8d 50 01             	lea    edx,[eax+0x1]
c0013ff8:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c0013ffe:	0f 84 ac 00 00 00    	je     c00140b0 <cleanerTaskFunction(void*)+0xdc>
c0014004:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014009:	85 c0                	test   eax,eax
c001400b:	75 03                	jne    c0014010 <cleanerTaskFunction(void*)+0x3c>
c001400d:	fb                   	sti    
c001400e:	66 90                	xchg   ax,ax
c0014010:	c6 05 4c 51 02 c0 00 	mov    BYTE PTR ds:0xc002514c,0x0
c0014017:	fa                   	cli    
c0014018:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001401e:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0014024:	fa                   	cli    
c0014025:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001402b:	eb 2b                	jmp    c0014058 <cleanerTaskFunction(void*)+0x84>
c001402d:	8d 76 00             	lea    esi,[esi+0x0]
c0014030:	83 ec 0c             	sub    esp,0xc
c0014033:	68 6c 51 02 c0       	push   0xc002516c
c0014038:	e8 af 86 00 00       	call   c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001403d:	c7 04 24 6c 51 02 c0 	mov    DWORD PTR [esp],0xc002516c
c0014044:	89 c3                	mov    ebx,eax
c0014046:	e8 a9 86 00 00       	call   c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001404b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001404e:	e8 b5 fc ff ff       	call   c0013d08 <cleanupTerminatedTask(ThreadControlBlock*)>
c0014053:	83 c4 10             	add    esp,0x10
c0014056:	66 90                	xchg   ax,ax
c0014058:	83 ec 0c             	sub    esp,0xc
c001405b:	68 6c 51 02 c0       	push   0xc002516c
c0014060:	e8 6b 86 00 00       	call   c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014065:	83 c4 10             	add    esp,0x10
c0014068:	84 c0                	test   al,al
c001406a:	74 c4                	je     c0014030 <cleanerTaskFunction(void*)+0x5c>
c001406c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014071:	48                   	dec    eax
c0014072:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014077:	75 03                	jne    c001407c <cleanerTaskFunction(void*)+0xa8>
c0014079:	fb                   	sti    
c001407a:	66 90                	xchg   ax,ax
c001407c:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014081:	48                   	dec    eax
c0014082:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0014087:	0f 85 4b ff ff ff    	jne    c0013fd8 <cleanerTaskFunction(void*)+0x4>
c001408d:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0014092:	85 c0                	test   eax,eax
c0014094:	0f 84 3e ff ff ff    	je     c0013fd8 <cleanerTaskFunction(void*)+0x4>
c001409a:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00140a4:	e8 f7 f6 ff ff       	call   c00137a0 <schedule()>
c00140a9:	e9 2a ff ff ff       	jmp    c0013fd8 <cleanerTaskFunction(void*)+0x4>
c00140ae:	66 90                	xchg   ax,ax
c00140b0:	83 ec 0c             	sub    esp,0xc
c00140b3:	6a 02                	push   0x2
c00140b5:	e8 ba f8 ff ff       	call   c0013974 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00140ba:	83 c4 10             	add    esp,0x10
c00140bd:	e9 4e ff ff ff       	jmp    c0014010 <cleanerTaskFunction(void*)+0x3c>
c00140c2:	66 90                	xchg   ax,ax

c00140c4 <terminateTask(int)>:
c00140c4:	83 ec 14             	sub    esp,0x14
c00140c7:	fa                   	cli    
c00140c8:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00140ce:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c00140d4:	fa                   	cli    
c00140d5:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00140db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00140df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140e4:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00140e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140ec:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00140ef:	50                   	push   eax
c00140f0:	68 6c 51 02 c0       	push   0xc002516c
c00140f5:	e8 b2 86 00 00       	call   c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00140fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140ff:	83 c4 10             	add    esp,0x10
c0014102:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0014109:	a1 48 51 02 c0       	mov    eax,ds:0xc0025148
c001410e:	85 c0                	test   eax,eax
c0014110:	74 5e                	je     c0014170 <terminateTask(int)+0xac>
c0014112:	83 ec 0c             	sub    esp,0xc
c0014115:	c6 05 4c 51 02 c0 01 	mov    BYTE PTR ds:0xc002514c,0x1
c001411c:	50                   	push   eax
c001411d:	e8 42 fb ff ff       	call   c0013c64 <unblockTask(ThreadControlBlock*)>
c0014122:	83 c4 10             	add    esp,0x10
c0014125:	8d 76 00             	lea    esi,[esi+0x0]
c0014128:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001412d:	48                   	dec    eax
c001412e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014133:	75 03                	jne    c0014138 <terminateTask(int)+0x74>
c0014135:	fb                   	sti    
c0014136:	66 90                	xchg   ax,ax
c0014138:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001413d:	48                   	dec    eax
c001413e:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0014143:	75 0b                	jne    c0014150 <terminateTask(int)+0x8c>
c0014145:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c001414c:	75 36                	jne    c0014184 <terminateTask(int)+0xc0>
c001414e:	66 90                	xchg   ax,ax
c0014150:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014155:	48                   	dec    eax
c0014156:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001415b:	75 03                	jne    c0014160 <terminateTask(int)+0x9c>
c001415d:	fb                   	sti    
c001415e:	66 90                	xchg   ax,ax
c0014160:	fa                   	cli    
c0014161:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014167:	90                   	nop
c0014168:	e8 33 f6 ff ff       	call   c00137a0 <schedule()>
c001416d:	eb e1                	jmp    c0014150 <terminateTask(int)+0x8c>
c001416f:	90                   	nop
c0014170:	83 ec 0c             	sub    esp,0xc
c0014173:	68 75 eb 01 c0       	push   0xc001eb75
c0014178:	e8 cd 63 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c001417d:	83 c4 10             	add    esp,0x10
c0014180:	eb a6                	jmp    c0014128 <terminateTask(int)+0x64>
c0014182:	66 90                	xchg   ax,ax
c0014184:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001418e:	eb d8                	jmp    c0014168 <terminateTask(int)+0xa4>

c0014190 <Thr::terminateFromIRQ(int)>:
c0014190:	83 ec 18             	sub    esp,0x18
c0014193:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014197:	50                   	push   eax
c0014198:	e8 27 ff ff ff       	call   c00140c4 <terminateTask(int)>
c001419d:	90                   	nop
c001419e:	66 90                	xchg   ax,ax

c00141a0 <Semaphore::release()>:
c00141a0:	83 ec 0c             	sub    esp,0xc
c00141a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141a7:	fa                   	cli    
c00141a8:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00141ad:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00141b3:	8d 48 01             	lea    ecx,[eax+0x1]
c00141b6:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c00141bc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00141bf:	85 c9                	test   ecx,ecx
c00141c1:	74 41                	je     c0014204 <Semaphore::release()+0x64>
c00141c3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00141c6:	83 ec 0c             	sub    esp,0xc
c00141c9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00141cc:	51                   	push   ecx
c00141cd:	e8 92 fa ff ff       	call   c0013c64 <unblockTask(ThreadControlBlock*)>
c00141d2:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00141d7:	83 c4 10             	add    esp,0x10
c00141da:	48                   	dec    eax
c00141db:	90                   	nop
c00141dc:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00141e1:	85 c0                	test   eax,eax
c00141e3:	75 0b                	jne    c00141f0 <Semaphore::release()+0x50>
c00141e5:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c00141ea:	85 c0                	test   eax,eax
c00141ec:	75 1e                	jne    c001420c <Semaphore::release()+0x6c>
c00141ee:	66 90                	xchg   ax,ax
c00141f0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00141f5:	48                   	dec    eax
c00141f6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00141fb:	75 03                	jne    c0014200 <Semaphore::release()+0x60>
c00141fd:	fb                   	sti    
c00141fe:	66 90                	xchg   ax,ax
c0014200:	83 c4 0c             	add    esp,0xc
c0014203:	c3                   	ret    
c0014204:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0014207:	eb d3                	jmp    c00141dc <Semaphore::release()+0x3c>
c0014209:	8d 76 00             	lea    esi,[esi+0x0]
c001420c:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0014216:	e8 85 f5 ff ff       	call   c00137a0 <schedule()>
c001421b:	eb d3                	jmp    c00141f0 <Semaphore::release()+0x50>
c001421d:	8d 76 00             	lea    esi,[esi+0x0]

c0014220 <__static_initialization_and_destruction_0(int, int)>:
c0014220:	83 ec 0c             	sub    esp,0xc
c0014223:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014228:	0f 85 8e 00 00 00    	jne    c00142bc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001422e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0014236:	0f 85 80 00 00 00    	jne    c00142bc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001423c:	83 ec 0c             	sub    esp,0xc
c001423f:	68 84 51 02 c0       	push   0xc0025184
c0014244:	e8 0f 88 00 00       	call   c001ca58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014249:	83 c4 10             	add    esp,0x10
c001424c:	83 ec 04             	sub    esp,0x4
c001424f:	68 28 f7 01 c0       	push   0xc001f728
c0014254:	68 84 51 02 c0       	push   0xc0025184
c0014259:	68 08 ca 01 c0       	push   0xc001ca08
c001425e:	e8 a1 61 ff ff       	call   c000a404 <__cxa_atexit>
c0014263:	83 c4 10             	add    esp,0x10
c0014266:	83 ec 0c             	sub    esp,0xc
c0014269:	68 78 51 02 c0       	push   0xc0025178
c001426e:	e8 e5 87 00 00       	call   c001ca58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014273:	83 c4 10             	add    esp,0x10
c0014276:	83 ec 04             	sub    esp,0x4
c0014279:	68 28 f7 01 c0       	push   0xc001f728
c001427e:	68 78 51 02 c0       	push   0xc0025178
c0014283:	68 08 ca 01 c0       	push   0xc001ca08
c0014288:	e8 77 61 ff ff       	call   c000a404 <__cxa_atexit>
c001428d:	83 c4 10             	add    esp,0x10
c0014290:	83 ec 0c             	sub    esp,0xc
c0014293:	68 6c 51 02 c0       	push   0xc002516c
c0014298:	e8 bb 87 00 00       	call   c001ca58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001429d:	83 c4 10             	add    esp,0x10
c00142a0:	83 ec 04             	sub    esp,0x4
c00142a3:	68 28 f7 01 c0       	push   0xc001f728
c00142a8:	68 6c 51 02 c0       	push   0xc002516c
c00142ad:	68 08 ca 01 c0       	push   0xc001ca08
c00142b2:	e8 4d 61 ff ff       	call   c000a404 <__cxa_atexit>
c00142b7:	83 c4 10             	add    esp,0x10
c00142ba:	66 90                	xchg   ax,ax
c00142bc:	90                   	nop
c00142bd:	83 c4 0c             	add    esp,0xc
c00142c0:	c3                   	ret    
c00142c1:	8d 76 00             	lea    esi,[esi+0x0]

c00142c4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00142c4:	83 ec 0c             	sub    esp,0xc
c00142c7:	83 ec 08             	sub    esp,0x8
c00142ca:	68 ff ff 00 00       	push   0xffff
c00142cf:	6a 01                	push   0x1
c00142d1:	e8 4a ff ff ff       	call   c0014220 <__static_initialization_and_destruction_0(int, int)>
c00142d6:	83 c4 10             	add    esp,0x10
c00142d9:	83 c4 0c             	add    esp,0xc
c00142dc:	c3                   	ret    

c00142dd <Vm::inbv(unsigned short)>:
c00142dd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00142e1:	66 81 fa fe fe       	cmp    dx,0xfefe
c00142e6:	75 06                	jne    c00142ee <Vm::inbv(unsigned short)+0x11>
c00142e8:	a0 cc 51 02 c0       	mov    al,ds:0xc00251cc
c00142ed:	c3                   	ret    
c00142ee:	ec                   	in     al,dx
c00142ef:	c3                   	ret    

c00142f0 <Vm::outbv(unsigned short, unsigned char)>:
c00142f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00142f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00142f8:	66 81 fa fe fe       	cmp    dx,0xfefe
c00142fd:	75 25                	jne    c0014324 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00142ff:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c0014305:	8d 51 01             	lea    edx,[ecx+0x1]
c0014308:	88 81 e0 51 02 c0    	mov    BYTE PTR [ecx-0x3ffdae20],al
c001430e:	89 15 cc 51 02 c0    	mov    DWORD PTR ds:0xc00251cc,edx
c0014314:	83 fa 20             	cmp    edx,0x20
c0014317:	75 0c                	jne    c0014325 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014319:	c7 05 cc 51 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x1f
c0014323:	c3                   	ret    
c0014324:	ee                   	out    dx,al
c0014325:	c3                   	ret    

c0014326 <Vm::realToLinear(unsigned short, unsigned short)>:
c0014326:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001432b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014330:	c1 e0 04             	shl    eax,0x4
c0014333:	01 d0                	add    eax,edx
c0014335:	c3                   	ret    

c0014336 <Vm::getSegment(unsigned int)>:
c0014336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001433a:	c1 e8 10             	shr    eax,0x10
c001433d:	c3                   	ret    

c001433e <Vm::getOffset(unsigned int)>:
c001433e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014342:	c3                   	ret    

c0014343 <Vm::mainloop2()>:
c0014343:	83 ec 18             	sub    esp,0x18
c0014346:	fa                   	cli    
c0014347:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001434d:	6a 02                	push   0x2
c001434f:	c6 05 c5 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c5,0x1
c0014356:	e8 19 f6 ff ff       	call   c0013974 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001435b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014360:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014364:	52                   	push   edx
c0014365:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0014369:	52                   	push   edx
c001436a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001436e:	52                   	push   edx
c001436f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0014373:	50                   	push   eax
c0014374:	e8 96 be fe ff       	call   c000020f <goToVM86>
c0014379:	83 c4 2c             	add    esp,0x2c
c001437c:	c3                   	ret    

c001437d <Vm::mainVm8086Loop(void*)>:
c001437d:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014382:	48                   	dec    eax
c0014383:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014388:	75 01                	jne    c001438b <Vm::mainVm8086Loop(void*)+0xe>
c001438a:	fb                   	sti    
c001438b:	eb b6                	jmp    c0014343 <Vm::mainloop2()>

c001438d <Vm::mainloop3(unsigned long)>:
c001438d:	83 ec 18             	sub    esp,0x18
c0014390:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014394:	fa                   	cli    
c0014395:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001439b:	6a 02                	push   0x2
c001439d:	c6 05 c4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c4,0x1
c00143a4:	a3 c0 51 02 c0       	mov    ds:0xc00251c0,eax
c00143a9:	e8 c6 f5 ff ff       	call   c0013974 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143ae:	83 c4 1c             	add    esp,0x1c
c00143b1:	eb 90                	jmp    c0014343 <Vm::mainloop2()>

c00143b3 <Vm::initialise8086()>:
c00143b3:	83 ec 0c             	sub    esp,0xc
c00143b6:	68 80 00 00 00       	push   0x80
c00143bb:	6a 00                	push   0x0
c00143bd:	68 7d 43 01 c0       	push   0xc001437d
c00143c2:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00143c8:	e8 b3 f1 ff ff       	call   c0013580 <Process::createThread(void (*)(void*), void*, int)>
c00143cd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00143d4:	a3 c8 51 02 c0       	mov    ds:0xc00251c8,eax
c00143d9:	68 00 01 00 00       	push   0x100
c00143de:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00143e3:	6a 00                	push   0x0
c00143e5:	6a 00                	push   0x0
c00143e7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143ed:	e8 58 58 ff ff       	call   c0009c4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00143f2:	83 c4 2c             	add    esp,0x2c
c00143f5:	c3                   	ret    

c00143f6 <Vm::finish8086()>:
c00143f6:	53                   	push   ebx
c00143f7:	83 ec 08             	sub    esp,0x8
c00143fa:	fa                   	cli    
c00143fb:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014401:	80 3d c4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c4,0x0
c0014408:	75 15                	jne    c001441f <Vm::finish8086()+0x29>
c001440a:	e8 91 f3 ff ff       	call   c00137a0 <schedule()>
c001440f:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014414:	48                   	dec    eax
c0014415:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001441a:	75 de                	jne    c00143fa <Vm::finish8086()+0x4>
c001441c:	fb                   	sti    
c001441d:	eb db                	jmp    c00143fa <Vm::finish8086()+0x4>
c001441f:	83 ec 0c             	sub    esp,0xc
c0014422:	8b 1d c0 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251c0
c0014428:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c001442e:	c6 05 c4 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c4,0x0
c0014435:	e8 2a f8 ff ff       	call   c0013c64 <unblockTask(ThreadControlBlock*)>
c001443a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001443f:	83 c4 10             	add    esp,0x10
c0014442:	8d 50 ff             	lea    edx,[eax-0x1]
c0014445:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c001444b:	85 d2                	test   edx,edx
c001444d:	75 01                	jne    c0014450 <Vm::finish8086()+0x5a>
c001444f:	fb                   	sti    
c0014450:	89 d8                	mov    eax,ebx
c0014452:	83 c4 08             	add    esp,0x8
c0014455:	5b                   	pop    ebx
c0014456:	c3                   	ret    

c0014457 <Vm::getOutput8086(unsigned char*)>:
c0014457:	57                   	push   edi
c0014458:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c001445e:	56                   	push   esi
c001445f:	be e0 51 02 c0       	mov    esi,0xc00251e0
c0014464:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014468:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001446a:	a1 cc 51 02 c0       	mov    eax,ds:0xc00251cc
c001446f:	5e                   	pop    esi
c0014470:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c001447a:	5f                   	pop    edi
c001447b:	c3                   	ret    

c001447c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001447c:	55                   	push   ebp
c001447d:	57                   	push   edi
c001447e:	56                   	push   esi
c001447f:	53                   	push   ebx
c0014480:	83 ec 0c             	sub    esp,0xc
c0014483:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014487:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001448b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001448f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0014493:	fa                   	cli    
c0014494:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001449a:	80 3d c5 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c5,0x0
c00144a1:	75 15                	jne    c00144b8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00144a3:	e8 f8 f2 ff ff       	call   c00137a0 <schedule()>
c00144a8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00144ad:	48                   	dec    eax
c00144ae:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00144b3:	75 de                	jne    c0014493 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00144b5:	fb                   	sti    
c00144b6:	eb db                	jmp    c0014493 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00144b8:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c00144bd:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c00144c7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00144cb:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00144cf:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00144d3:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00144d7:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00144db:	0f b7 ff             	movzx  edi,di
c00144de:	0f b7 f6             	movzx  esi,si
c00144e1:	50                   	push   eax
c00144e2:	6a 20                	push   0x20
c00144e4:	6a 00                	push   0x0
c00144e6:	68 e0 51 02 c0       	push   0xc00251e0
c00144eb:	e8 e0 bf fe ff       	call   c00004d0 <memset>
c00144f0:	5a                   	pop    edx
c00144f1:	59                   	pop    ecx
c00144f2:	57                   	push   edi
c00144f3:	56                   	push   esi
c00144f4:	e8 2d fe ff ff       	call   c0014326 <Vm::realToLinear(unsigned short, unsigned short)>
c00144f9:	83 c4 10             	add    esp,0x10
c00144fc:	89 c7                	mov    edi,eax
c00144fe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014502:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014506:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014508:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001450d:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c0014514:	48                   	dec    eax
c0014515:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001451a:	75 01                	jne    c001451d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c001451c:	fb                   	sti    
c001451d:	83 ec 0c             	sub    esp,0xc
c0014520:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c0014526:	e8 39 f7 ff ff       	call   c0013c64 <unblockTask(ThreadControlBlock*)>
c001452b:	83 c4 1c             	add    esp,0x1c
c001452e:	b0 01                	mov    al,0x1
c0014530:	5b                   	pop    ebx
c0014531:	5e                   	pop    esi
c0014532:	5f                   	pop    edi
c0014533:	5d                   	pop    ebp
c0014534:	c3                   	ret    

c0014535 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014535:	55                   	push   ebp
c0014536:	57                   	push   edi
c0014537:	56                   	push   esi
c0014538:	53                   	push   ebx
c0014539:	83 ec 2c             	sub    esp,0x2c
c001453c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014540:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014544:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014548:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001454c:	fa                   	cli    
c001454d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014553:	0f b6 35 c5 51 02 c0 	movzx  esi,BYTE PTR ds:0xc00251c5
c001455a:	89 f0                	mov    eax,esi
c001455c:	84 c0                	test   al,al
c001455e:	75 1d                	jne    c001457d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014560:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014564:	e8 37 f2 ff ff       	call   c00137a0 <schedule()>
c0014569:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001456e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014572:	48                   	dec    eax
c0014573:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014578:	75 d2                	jne    c001454c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001457a:	fb                   	sti    
c001457b:	eb cf                	jmp    c001454c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001457d:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c0014582:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c001458c:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014590:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014594:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014598:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c001459c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00145a0:	50                   	push   eax
c00145a1:	6a 20                	push   0x20
c00145a3:	6a 00                	push   0x0
c00145a5:	68 e0 51 02 c0       	push   0xc00251e0
c00145aa:	e8 21 bf fe ff       	call   c00004d0 <memset>
c00145af:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00145b6:	e8 fe 31 ff ff       	call   c00077b9 <malloc>
c00145bb:	83 c4 0c             	add    esp,0xc
c00145be:	89 c3                	mov    ebx,eax
c00145c0:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00145c6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00145ca:	50                   	push   eax
c00145cb:	e8 f0 64 ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c00145d0:	83 c4 10             	add    esp,0x10
c00145d3:	85 db                	test   ebx,ebx
c00145d5:	75 0a                	jne    c00145e1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00145d7:	83 ec 0c             	sub    esp,0xc
c00145da:	68 a0 ec 01 c0       	push   0xc001eca0
c00145df:	eb 3e                	jmp    c001461f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00145e1:	50                   	push   eax
c00145e2:	8d 44 24 17          	lea    eax,[esp+0x17]
c00145e6:	50                   	push   eax
c00145e7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00145eb:	50                   	push   eax
c00145ec:	53                   	push   ebx
c00145ed:	e8 3a 68 ff ff       	call   c000ae2c <File::stat(unsigned long long*, bool*)>
c00145f2:	83 c4 10             	add    esp,0x10
c00145f5:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00145fa:	74 0a                	je     c0014606 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00145fc:	83 ec 0c             	sub    esp,0xc
c00145ff:	68 b4 ec 01 c0       	push   0xc001ecb4
c0014604:	eb 19                	jmp    c001461f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014606:	51                   	push   ecx
c0014607:	51                   	push   ecx
c0014608:	6a 01                	push   0x1
c001460a:	53                   	push   ebx
c001460b:	e8 70 65 ff ff       	call   c000ab80 <File::open(FileOpenMode)>
c0014610:	83 c4 10             	add    esp,0x10
c0014613:	85 c0                	test   eax,eax
c0014615:	74 24                	je     c001463b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014617:	83 ec 0c             	sub    esp,0xc
c001461a:	68 cd ec 01 c0       	push   0xc001eccd
c001461f:	e8 a7 bb ff ff       	call   c00101cb <KePanic(char const*)>
c0014624:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014629:	83 c4 10             	add    esp,0x10
c001462c:	48                   	dec    eax
c001462d:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014632:	85 c0                	test   eax,eax
c0014634:	75 01                	jne    c0014637 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0014636:	fb                   	sti    
c0014637:	31 f6                	xor    esi,esi
c0014639:	eb 58                	jmp    c0014693 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001463b:	0f b7 ed             	movzx  ebp,bp
c001463e:	50                   	push   eax
c001463f:	0f b7 ff             	movzx  edi,di
c0014642:	50                   	push   eax
c0014643:	55                   	push   ebp
c0014644:	57                   	push   edi
c0014645:	e8 dc fc ff ff       	call   c0014326 <Vm::realToLinear(unsigned short, unsigned short)>
c001464a:	5a                   	pop    edx
c001464b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001464d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014651:	51                   	push   ecx
c0014652:	50                   	push   eax
c0014653:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014657:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001465b:	53                   	push   ebx
c001465c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001465f:	83 c4 14             	add    esp,0x14
c0014662:	53                   	push   ebx
c0014663:	e8 76 65 ff ff       	call   c000abde <File::close()>
c0014668:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001466d:	83 c4 10             	add    esp,0x10
c0014670:	48                   	dec    eax
c0014671:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c0014678:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001467d:	85 c0                	test   eax,eax
c001467f:	75 01                	jne    c0014682 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014681:	fb                   	sti    
c0014682:	83 ec 0c             	sub    esp,0xc
c0014685:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c001468b:	e8 d4 f5 ff ff       	call   c0013c64 <unblockTask(ThreadControlBlock*)>
c0014690:	83 c4 10             	add    esp,0x10
c0014693:	83 c4 2c             	add    esp,0x2c
c0014696:	89 f0                	mov    eax,esi
c0014698:	5b                   	pop    ebx
c0014699:	5e                   	pop    esi
c001469a:	5f                   	pop    edi
c001469b:	5d                   	pop    ebp
c001469c:	c3                   	ret    

c001469d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001469d:	57                   	push   edi
c001469e:	56                   	push   esi
c001469f:	53                   	push   ebx
c00146a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00146a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146a8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00146ac:	83 e8 06             	sub    eax,0x6
c00146af:	0f b7 c0             	movzx  eax,ax
c00146b2:	50                   	push   eax
c00146b3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00146b8:	50                   	push   eax
c00146b9:	e8 68 fc ff ff       	call   c0014326 <Vm::realToLinear(unsigned short, unsigned short)>
c00146be:	5a                   	pop    edx
c00146bf:	5e                   	pop    esi
c00146c0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00146c3:	8d 56 fa             	lea    edx,[esi-0x6]
c00146c6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00146cc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00146cf:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00146d2:	83 c2 02             	add    edx,0x2
c00146d5:	66 89 10             	mov    WORD PTR [eax],dx
c00146d8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00146db:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00146df:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00146e2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00146e6:	89 d6                	mov    esi,edx
c00146e8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00146ee:	66 81 e6 ff fd       	and    si,0xfdff
c00146f3:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00146f7:	74 07                	je     c0014700 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00146f9:	89 d6                	mov    esi,edx
c00146fb:	66 81 ce 00 02       	or     si,0x200
c0014700:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014704:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014709:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001470d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014715:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014718:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014720:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014723:	5b                   	pop    ebx
c0014724:	5e                   	pop    esi
c0014725:	5f                   	pop    edi
c0014726:	c3                   	ret    

c0014727 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014727:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001472c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014731:	c1 e0 04             	shl    eax,0x4
c0014734:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014737:	c3                   	ret    

c0014738 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014738:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001473d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014742:	c1 e0 04             	shl    eax,0x4
c0014745:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014749:	c3                   	ret    

c001474a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001474a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001474f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014754:	c1 e0 04             	shl    eax,0x4
c0014757:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001475a:	c3                   	ret    

c001475b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001475b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014760:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014765:	c1 e0 04             	shl    eax,0x4
c0014768:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001476c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001476f:	c3                   	ret    

c0014770 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014770:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014775:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001477a:	c1 e0 04             	shl    eax,0x4
c001477d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014781:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014785:	c3                   	ret    

c0014786 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014786:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001478b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014790:	c1 e0 04             	shl    eax,0x4
c0014793:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014797:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001479a:	c3                   	ret    

c001479b <Vm::faultHandler(regs*)>:
c001479b:	55                   	push   ebp
c001479c:	57                   	push   edi
c001479d:	56                   	push   esi
c001479e:	53                   	push   ebx
c001479f:	83 ec 1c             	sub    esp,0x1c
c00147a2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00147a6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00147a9:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00147ad:	0f b7 f8             	movzx  edi,ax
c00147b0:	52                   	push   edx
c00147b1:	0f b7 c0             	movzx  eax,ax
c00147b4:	50                   	push   eax
c00147b5:	e8 6c fb ff ff       	call   c0014326 <Vm::realToLinear(unsigned short, unsigned short)>
c00147ba:	5a                   	pop    edx
c00147bb:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00147be:	59                   	pop    ecx
c00147bf:	89 c1                	mov    ecx,eax
c00147c1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00147c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147c8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147d1:	0f b7 c5             	movzx  eax,bp
c00147d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147d8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00147dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147e0:	e8 41 fb ff ff       	call   c0014326 <Vm::realToLinear(unsigned short, unsigned short)>
c00147e5:	5e                   	pop    esi
c00147e6:	be 06 00 00 00       	mov    esi,0x6
c00147eb:	5a                   	pop    edx
c00147ec:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00147f1:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00147f6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00147f9:	80 fa 9d             	cmp    dl,0x9d
c00147fc:	0f 84 2c 02 00 00    	je     c0014a2e <Vm::faultHandler(regs*)+0x293>
c0014802:	0f 87 91 00 00 00    	ja     c0014899 <Vm::faultHandler(regs*)+0xfe>
c0014808:	80 fa 66             	cmp    dl,0x66
c001480b:	0f 84 98 01 00 00    	je     c00149a9 <Vm::faultHandler(regs*)+0x20e>
c0014811:	77 47                	ja     c001485a <Vm::faultHandler(regs*)+0xbf>
c0014813:	80 fa 36             	cmp    dl,0x36
c0014816:	0f 84 80 01 00 00    	je     c001499c <Vm::faultHandler(regs*)+0x201>
c001481c:	77 1a                	ja     c0014838 <Vm::faultHandler(regs*)+0x9d>
c001481e:	80 fa 26             	cmp    dl,0x26
c0014821:	0f 84 4e 01 00 00    	je     c0014975 <Vm::faultHandler(regs*)+0x1da>
c0014827:	80 fa 2e             	cmp    dl,0x2e
c001482a:	0f 85 e2 05 00 00    	jne    c0014e12 <Vm::faultHandler(regs*)+0x677>
c0014830:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014833:	31 f6                	xor    esi,esi
c0014835:	41                   	inc    ecx
c0014836:	eb be                	jmp    c00147f6 <Vm::faultHandler(regs*)+0x5b>
c0014838:	80 fa 64             	cmp    dl,0x64
c001483b:	0f 84 41 01 00 00    	je     c0014982 <Vm::faultHandler(regs*)+0x1e7>
c0014841:	0f 87 48 01 00 00    	ja     c001498f <Vm::faultHandler(regs*)+0x1f4>
c0014847:	80 fa 3e             	cmp    dl,0x3e
c001484a:	0f 85 c2 05 00 00    	jne    c0014e12 <Vm::faultHandler(regs*)+0x677>
c0014850:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014853:	be 01 00 00 00       	mov    esi,0x1
c0014858:	eb db                	jmp    c0014835 <Vm::faultHandler(regs*)+0x9a>
c001485a:	80 fa 6d             	cmp    dl,0x6d
c001485d:	0f 84 ec 02 00 00    	je     c0014b4f <Vm::faultHandler(regs*)+0x3b4>
c0014863:	77 17                	ja     c001487c <Vm::faultHandler(regs*)+0xe1>
c0014865:	80 fa 67             	cmp    dl,0x67
c0014868:	0f 84 48 01 00 00    	je     c00149b6 <Vm::faultHandler(regs*)+0x21b>
c001486e:	80 fa 6c             	cmp    dl,0x6c
c0014871:	0f 84 69 02 00 00    	je     c0014ae0 <Vm::faultHandler(regs*)+0x345>
c0014877:	e9 96 05 00 00       	jmp    c0014e12 <Vm::faultHandler(regs*)+0x677>
c001487c:	80 fa 6f             	cmp    dl,0x6f
c001487f:	0f 84 f4 03 00 00    	je     c0014c79 <Vm::faultHandler(regs*)+0x4de>
c0014885:	0f 82 59 03 00 00    	jb     c0014be4 <Vm::faultHandler(regs*)+0x449>
c001488b:	80 fa 9c             	cmp    dl,0x9c
c001488e:	0f 84 2f 01 00 00    	je     c00149c3 <Vm::faultHandler(regs*)+0x228>
c0014894:	e9 79 05 00 00       	jmp    c0014e12 <Vm::faultHandler(regs*)+0x677>
c0014899:	80 fa ec             	cmp    dl,0xec
c001489c:	0f 84 14 05 00 00    	je     c0014db6 <Vm::faultHandler(regs*)+0x61b>
c00148a2:	77 7b                	ja     c001491f <Vm::faultHandler(regs*)+0x184>
c00148a4:	80 fa e4             	cmp    dl,0xe4
c00148a7:	0f 84 93 04 00 00    	je     c0014d40 <Vm::faultHandler(regs*)+0x5a5>
c00148ad:	77 53                	ja     c0014902 <Vm::faultHandler(regs*)+0x167>
c00148af:	80 fa cd             	cmp    dl,0xcd
c00148b2:	0f 84 d9 01 00 00    	je     c0014a91 <Vm::faultHandler(regs*)+0x2f6>
c00148b8:	80 fa cf             	cmp    dl,0xcf
c00148bb:	0f 85 51 05 00 00    	jne    c0014e12 <Vm::faultHandler(regs*)+0x677>
c00148c1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00148c4:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00148c7:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00148cb:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00148ce:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00148d2:	81 ca 00 02 02 00    	or     edx,0x20200
c00148d8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00148db:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00148df:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148e5:	66 c1 e8 09          	shr    ax,0x9
c00148e9:	83 e0 01             	and    eax,0x1
c00148ec:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00148ef:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00148f2:	83 c0 06             	add    eax,0x6
c00148f5:	25 ff ff 00 00       	and    eax,0xffff
c00148fa:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00148fd:	e9 0c 05 00 00       	jmp    c0014e0e <Vm::faultHandler(regs*)+0x673>
c0014902:	80 fa e6             	cmp    dl,0xe6
c0014905:	0f 84 7f 04 00 00    	je     c0014d8a <Vm::faultHandler(regs*)+0x5ef>
c001490b:	0f 82 4b 04 00 00    	jb     c0014d5c <Vm::faultHandler(regs*)+0x5c1>
c0014911:	80 fa e7             	cmp    dl,0xe7
c0014914:	0f 84 87 04 00 00    	je     c0014da1 <Vm::faultHandler(regs*)+0x606>
c001491a:	e9 f3 04 00 00       	jmp    c0014e12 <Vm::faultHandler(regs*)+0x677>
c001491f:	80 fa ef             	cmp    dl,0xef
c0014922:	0f 84 d1 04 00 00    	je     c0014df9 <Vm::faultHandler(regs*)+0x65e>
c0014928:	77 28                	ja     c0014952 <Vm::faultHandler(regs*)+0x1b7>
c001492a:	80 fa ed             	cmp    dl,0xed
c001492d:	0f 84 9f 04 00 00    	je     c0014dd2 <Vm::faultHandler(regs*)+0x637>
c0014933:	80 fa ee             	cmp    dl,0xee
c0014936:	0f 85 d6 04 00 00    	jne    c0014e12 <Vm::faultHandler(regs*)+0x677>
c001493c:	50                   	push   eax
c001493d:	50                   	push   eax
c001493e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014942:	50                   	push   eax
c0014943:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014947:	50                   	push   eax
c0014948:	e8 a3 f9 ff ff       	call   c00142f0 <Vm::outbv(unsigned short, unsigned char)>
c001494d:	e9 9f 04 00 00       	jmp    c0014df1 <Vm::faultHandler(regs*)+0x656>
c0014952:	80 fa fa             	cmp    dl,0xfa
c0014955:	0f 84 69 01 00 00    	je     c0014ac4 <Vm::faultHandler(regs*)+0x329>
c001495b:	80 fa fb             	cmp    dl,0xfb
c001495e:	0f 84 6e 01 00 00    	je     c0014ad2 <Vm::faultHandler(regs*)+0x337>
c0014964:	80 fa f3             	cmp    dl,0xf3
c0014967:	0f 85 a5 04 00 00    	jne    c0014e12 <Vm::faultHandler(regs*)+0x677>
c001496d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014970:	e9 c0 fe ff ff       	jmp    c0014835 <Vm::faultHandler(regs*)+0x9a>
c0014975:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014978:	be 02 00 00 00       	mov    esi,0x2
c001497d:	e9 b3 fe ff ff       	jmp    c0014835 <Vm::faultHandler(regs*)+0x9a>
c0014982:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014985:	be 03 00 00 00       	mov    esi,0x3
c001498a:	e9 a6 fe ff ff       	jmp    c0014835 <Vm::faultHandler(regs*)+0x9a>
c001498f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014992:	be 04 00 00 00       	mov    esi,0x4
c0014997:	e9 99 fe ff ff       	jmp    c0014835 <Vm::faultHandler(regs*)+0x9a>
c001499c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001499f:	be 05 00 00 00       	mov    esi,0x5
c00149a4:	e9 8c fe ff ff       	jmp    c0014835 <Vm::faultHandler(regs*)+0x9a>
c00149a9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149ac:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00149b1:	e9 7f fe ff ff       	jmp    c0014835 <Vm::faultHandler(regs*)+0x9a>
c00149b6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149b9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00149be:	e9 72 fe ff ff       	jmp    c0014835 <Vm::faultHandler(regs*)+0x9a>
c00149c3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00149c6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00149ca:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149cf:	74 30                	je     c0014a01 <Vm::faultHandler(regs*)+0x266>
c00149d1:	83 e9 04             	sub    ecx,0x4
c00149d4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00149da:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00149e0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00149e3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00149e6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00149ec:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00149f0:	0f 84 15 04 00 00    	je     c0014e0b <Vm::faultHandler(regs*)+0x670>
c00149f6:	80 ce 02             	or     dh,0x2
c00149f9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00149fc:	e9 0a 04 00 00       	jmp    c0014e0b <Vm::faultHandler(regs*)+0x670>
c0014a01:	83 e9 02             	sub    ecx,0x2
c0014a04:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a0a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a0d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a11:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a17:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a1b:	74 05                	je     c0014a22 <Vm::faultHandler(regs*)+0x287>
c0014a1d:	80 ce 02             	or     dh,0x2
c0014a20:	eb 03                	jmp    c0014a25 <Vm::faultHandler(regs*)+0x28a>
c0014a22:	80 e6 fd             	and    dh,0xfd
c0014a25:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a29:	e9 dd 03 00 00       	jmp    c0014e0b <Vm::faultHandler(regs*)+0x670>
c0014a2e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a33:	74 2a                	je     c0014a5f <Vm::faultHandler(regs*)+0x2c4>
c0014a35:	8b 10                	mov    edx,DWORD PTR [eax]
c0014a37:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a3d:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a43:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a46:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a48:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a4e:	c1 e8 09             	shr    eax,0x9
c0014a51:	83 e0 01             	and    eax,0x1
c0014a54:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a57:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a5a:	83 c0 04             	add    eax,0x4
c0014a5d:	eb 25                	jmp    c0014a84 <Vm::faultHandler(regs*)+0x2e9>
c0014a5f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014a62:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a68:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a6b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014a6e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a74:	66 c1 e8 09          	shr    ax,0x9
c0014a78:	83 e0 01             	and    eax,0x1
c0014a7b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a7e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a81:	83 c0 02             	add    eax,0x2
c0014a84:	25 ff ff 00 00       	and    eax,0xffff
c0014a89:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014a8c:	e9 7a 03 00 00       	jmp    c0014e0b <Vm::faultHandler(regs*)+0x670>
c0014a91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014a95:	3c ee                	cmp    al,0xee
c0014a97:	75 10                	jne    c0014aa9 <Vm::faultHandler(regs*)+0x30e>
c0014a99:	83 ec 0c             	sub    esp,0xc
c0014a9c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014a9f:	e8 e9 f8 ff ff       	call   c001438d <Vm::mainloop3(unsigned long)>
c0014aa4:	e9 4b 03 00 00       	jmp    c0014df4 <Vm::faultHandler(regs*)+0x659>
c0014aa9:	83 ec 0c             	sub    esp,0xc
c0014aac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ab4:	51                   	push   ecx
c0014ab5:	50                   	push   eax
c0014ab6:	53                   	push   ebx
c0014ab7:	e8 e1 fb ff ff       	call   c001469d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014abc:	83 c4 20             	add    esp,0x20
c0014abf:	e9 4a 03 00 00       	jmp    c0014e0e <Vm::faultHandler(regs*)+0x673>
c0014ac4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ac9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014acd:	e9 39 03 00 00       	jmp    c0014e0b <Vm::faultHandler(regs*)+0x670>
c0014ad2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ad7:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014adb:	e9 2b 03 00 00       	jmp    c0014e0b <Vm::faultHandler(regs*)+0x670>
c0014ae0:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014ae3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014ae8:	74 2b                	je     c0014b15 <Vm::faultHandler(regs*)+0x37a>
c0014aea:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014af1:	76 22                	jbe    c0014b15 <Vm::faultHandler(regs*)+0x37a>
c0014af3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014af7:	50                   	push   eax
c0014af8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014afc:	50                   	push   eax
c0014afd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b01:	50                   	push   eax
c0014b02:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b06:	50                   	push   eax
c0014b07:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b0b:	50                   	push   eax
c0014b0c:	6a 6c                	push   0x6c
c0014b0e:	6a 6c                	push   0x6c
c0014b10:	e9 b9 01 00 00       	jmp    c0014cce <Vm::faultHandler(regs*)+0x533>
c0014b15:	83 ec 0c             	sub    esp,0xc
c0014b18:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014b1c:	0f b7 f6             	movzx  esi,si
c0014b1f:	50                   	push   eax
c0014b20:	e8 b8 f7 ff ff       	call   c00142dd <Vm::inbv(unsigned short)>
c0014b25:	83 c4 0c             	add    esp,0xc
c0014b28:	0f b6 c0             	movzx  eax,al
c0014b2b:	50                   	push   eax
c0014b2c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014b30:	50                   	push   eax
c0014b31:	56                   	push   esi
c0014b32:	e8 24 fc ff ff       	call   c001475b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014b37:	83 c4 10             	add    esp,0x10
c0014b3a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b3d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014b41:	74 03                	je     c0014b46 <Vm::faultHandler(regs*)+0x3ab>
c0014b43:	48                   	dec    eax
c0014b44:	eb 01                	jmp    c0014b47 <Vm::faultHandler(regs*)+0x3ac>
c0014b46:	40                   	inc    eax
c0014b47:	0f b7 c0             	movzx  eax,ax
c0014b4a:	e9 8d 00 00 00       	jmp    c0014bdc <Vm::faultHandler(regs*)+0x441>
c0014b4f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014b52:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b55:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b5a:	74 29                	je     c0014b85 <Vm::faultHandler(regs*)+0x3ea>
c0014b5c:	3d ff ff 00 00       	cmp    eax,0xffff
c0014b61:	76 22                	jbe    c0014b85 <Vm::faultHandler(regs*)+0x3ea>
c0014b63:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b67:	50                   	push   eax
c0014b68:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b6c:	50                   	push   eax
c0014b6d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b71:	50                   	push   eax
c0014b72:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b76:	50                   	push   eax
c0014b77:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b7b:	50                   	push   eax
c0014b7c:	6a 6d                	push   0x6d
c0014b7e:	6a 6d                	push   0x6d
c0014b80:	e9 49 01 00 00       	jmp    c0014cce <Vm::faultHandler(regs*)+0x533>
c0014b85:	0f b7 c8             	movzx  ecx,ax
c0014b88:	0f b7 f6             	movzx  esi,si
c0014b8b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014b8e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b93:	74 20                	je     c0014bb5 <Vm::faultHandler(regs*)+0x41a>
c0014b95:	ed                   	in     eax,dx
c0014b96:	55                   	push   ebp
c0014b97:	50                   	push   eax
c0014b98:	51                   	push   ecx
c0014b99:	56                   	push   esi
c0014b9a:	e8 e7 fb ff ff       	call   c0014786 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014b9f:	83 c4 10             	add    esp,0x10
c0014ba2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014ba5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014ba9:	74 05                	je     c0014bb0 <Vm::faultHandler(regs*)+0x415>
c0014bab:	83 e8 04             	sub    eax,0x4
c0014bae:	eb 27                	jmp    c0014bd7 <Vm::faultHandler(regs*)+0x43c>
c0014bb0:	83 c0 04             	add    eax,0x4
c0014bb3:	eb 22                	jmp    c0014bd7 <Vm::faultHandler(regs*)+0x43c>
c0014bb5:	66 ed                	in     ax,dx
c0014bb7:	0f b7 c0             	movzx  eax,ax
c0014bba:	57                   	push   edi
c0014bbb:	50                   	push   eax
c0014bbc:	51                   	push   ecx
c0014bbd:	56                   	push   esi
c0014bbe:	e8 ad fb ff ff       	call   c0014770 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014bc3:	83 c4 10             	add    esp,0x10
c0014bc6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bc9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014bcd:	74 05                	je     c0014bd4 <Vm::faultHandler(regs*)+0x439>
c0014bcf:	83 e8 02             	sub    eax,0x2
c0014bd2:	eb 03                	jmp    c0014bd7 <Vm::faultHandler(regs*)+0x43c>
c0014bd4:	83 c0 02             	add    eax,0x2
c0014bd7:	25 ff ff 00 00       	and    eax,0xffff
c0014bdc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014bdf:	e9 27 02 00 00       	jmp    c0014e0b <Vm::faultHandler(regs*)+0x670>
c0014be4:	8d 46 ff             	lea    eax,[esi-0x1]
c0014be7:	3c 05                	cmp    al,0x5
c0014be9:	77 24                	ja     c0014c0f <Vm::faultHandler(regs*)+0x474>
c0014beb:	0f b6 c0             	movzx  eax,al
c0014bee:	ff 24 85 40 ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe12c0]
c0014bf5:	0f b7 fd             	movzx  edi,bp
c0014bf8:	eb 15                	jmp    c0014c0f <Vm::faultHandler(regs*)+0x474>
c0014bfa:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014bfe:	eb 0f                	jmp    c0014c0f <Vm::faultHandler(regs*)+0x474>
c0014c00:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014c04:	eb 09                	jmp    c0014c0f <Vm::faultHandler(regs*)+0x474>
c0014c06:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014c0a:	eb 03                	jmp    c0014c0f <Vm::faultHandler(regs*)+0x474>
c0014c0c:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014c0f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c12:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c17:	74 29                	je     c0014c42 <Vm::faultHandler(regs*)+0x4a7>
c0014c19:	3d ff ff 00 00       	cmp    eax,0xffff
c0014c1e:	76 22                	jbe    c0014c42 <Vm::faultHandler(regs*)+0x4a7>
c0014c20:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c24:	50                   	push   eax
c0014c25:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c29:	50                   	push   eax
c0014c2a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c2e:	50                   	push   eax
c0014c2f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c33:	50                   	push   eax
c0014c34:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c38:	50                   	push   eax
c0014c39:	6a 6e                	push   0x6e
c0014c3b:	6a 6e                	push   0x6e
c0014c3d:	e9 8c 00 00 00       	jmp    c0014cce <Vm::faultHandler(regs*)+0x533>
c0014c42:	0f b7 c0             	movzx  eax,ax
c0014c45:	52                   	push   edx
c0014c46:	52                   	push   edx
c0014c47:	50                   	push   eax
c0014c48:	57                   	push   edi
c0014c49:	e8 d9 fa ff ff       	call   c0014727 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014c4e:	59                   	pop    ecx
c0014c4f:	0f b6 c0             	movzx  eax,al
c0014c52:	5e                   	pop    esi
c0014c53:	50                   	push   eax
c0014c54:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c58:	50                   	push   eax
c0014c59:	e8 92 f6 ff ff       	call   c00142f0 <Vm::outbv(unsigned short, unsigned char)>
c0014c5e:	83 c4 10             	add    esp,0x10
c0014c61:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c64:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c68:	74 03                	je     c0014c6d <Vm::faultHandler(regs*)+0x4d2>
c0014c6a:	48                   	dec    eax
c0014c6b:	eb 01                	jmp    c0014c6e <Vm::faultHandler(regs*)+0x4d3>
c0014c6d:	40                   	inc    eax
c0014c6e:	0f b7 c0             	movzx  eax,ax
c0014c71:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014c74:	e9 92 01 00 00       	jmp    c0014e0b <Vm::faultHandler(regs*)+0x670>
c0014c79:	8d 46 ff             	lea    eax,[esi-0x1]
c0014c7c:	3c 05                	cmp    al,0x5
c0014c7e:	77 1f                	ja     c0014c9f <Vm::faultHandler(regs*)+0x504>
c0014c80:	0f b6 c0             	movzx  eax,al
c0014c83:	ff 24 85 58 ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe12a8]
c0014c8a:	89 ef                	mov    edi,ebp
c0014c8c:	eb 11                	jmp    c0014c9f <Vm::faultHandler(regs*)+0x504>
c0014c8e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014c91:	eb 0c                	jmp    c0014c9f <Vm::faultHandler(regs*)+0x504>
c0014c93:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014c96:	eb 07                	jmp    c0014c9f <Vm::faultHandler(regs*)+0x504>
c0014c98:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014c9b:	eb 02                	jmp    c0014c9f <Vm::faultHandler(regs*)+0x504>
c0014c9d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014c9f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014ca2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014ca7:	74 37                	je     c0014ce0 <Vm::faultHandler(regs*)+0x545>
c0014ca9:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014caf:	76 2f                	jbe    c0014ce0 <Vm::faultHandler(regs*)+0x545>
c0014cb1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014cb5:	50                   	push   eax
c0014cb6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014cba:	50                   	push   eax
c0014cbb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014cbf:	50                   	push   eax
c0014cc0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014cc4:	50                   	push   eax
c0014cc5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014cc9:	50                   	push   eax
c0014cca:	6a 6f                	push   0x6f
c0014ccc:	6a 6f                	push   0x6f
c0014cce:	68 e6 ec 01 c0       	push   0xc001ece6
c0014cd3:	e8 72 58 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0014cd8:	83 c4 20             	add    esp,0x20
c0014cdb:	e9 86 01 00 00       	jmp    c0014e66 <Vm::faultHandler(regs*)+0x6cb>
c0014ce0:	0f b7 d7             	movzx  edx,di
c0014ce3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014ce6:	0f b7 c6             	movzx  eax,si
c0014ce9:	81 e1 00 04 00 00    	and    ecx,0x400
c0014cef:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014cf2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014cf7:	74 1d                	je     c0014d16 <Vm::faultHandler(regs*)+0x57b>
c0014cf9:	55                   	push   ebp
c0014cfa:	55                   	push   ebp
c0014cfb:	50                   	push   eax
c0014cfc:	52                   	push   edx
c0014cfd:	e8 48 fa ff ff       	call   c001474a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014d02:	83 c4 10             	add    esp,0x10
c0014d05:	89 fa                	mov    edx,edi
c0014d07:	ef                   	out    dx,eax
c0014d08:	85 c9                	test   ecx,ecx
c0014d0a:	74 05                	je     c0014d11 <Vm::faultHandler(regs*)+0x576>
c0014d0c:	83 ee 04             	sub    esi,0x4
c0014d0f:	eb 21                	jmp    c0014d32 <Vm::faultHandler(regs*)+0x597>
c0014d11:	83 c6 04             	add    esi,0x4
c0014d14:	eb 1c                	jmp    c0014d32 <Vm::faultHandler(regs*)+0x597>
c0014d16:	55                   	push   ebp
c0014d17:	55                   	push   ebp
c0014d18:	50                   	push   eax
c0014d19:	52                   	push   edx
c0014d1a:	e8 19 fa ff ff       	call   c0014738 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014d1f:	83 c4 10             	add    esp,0x10
c0014d22:	89 fa                	mov    edx,edi
c0014d24:	66 ef                	out    dx,ax
c0014d26:	85 c9                	test   ecx,ecx
c0014d28:	74 05                	je     c0014d2f <Vm::faultHandler(regs*)+0x594>
c0014d2a:	83 ee 02             	sub    esi,0x2
c0014d2d:	eb 03                	jmp    c0014d32 <Vm::faultHandler(regs*)+0x597>
c0014d2f:	83 c6 02             	add    esi,0x2
c0014d32:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014d38:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014d3b:	e9 cb 00 00 00       	jmp    c0014e0b <Vm::faultHandler(regs*)+0x670>
c0014d40:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014d47:	83 ec 0c             	sub    esp,0xc
c0014d4a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d4e:	50                   	push   eax
c0014d4f:	e8 89 f5 ff ff       	call   c00142dd <Vm::inbv(unsigned short)>
c0014d54:	0f b6 c0             	movzx  eax,al
c0014d57:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014d5a:	eb 3f                	jmp    c0014d9b <Vm::faultHandler(regs*)+0x600>
c0014d5c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d61:	74 07                	je     c0014d6a <Vm::faultHandler(regs*)+0x5cf>
c0014d63:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d67:	ed                   	in     eax,dx
c0014d68:	eb 14                	jmp    c0014d7e <Vm::faultHandler(regs*)+0x5e3>
c0014d6a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014d6d:	66 31 f6             	xor    si,si
c0014d70:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014d73:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d77:	66 ed                	in     ax,dx
c0014d79:	0f b7 c0             	movzx  eax,ax
c0014d7c:	09 f0                	or     eax,esi
c0014d7e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014d81:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014d85:	e9 84 00 00 00       	jmp    c0014e0e <Vm::faultHandler(regs*)+0x673>
c0014d8a:	52                   	push   edx
c0014d8b:	52                   	push   edx
c0014d8c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014d90:	50                   	push   eax
c0014d91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d95:	50                   	push   eax
c0014d96:	e8 55 f5 ff ff       	call   c00142f0 <Vm::outbv(unsigned short, unsigned char)>
c0014d9b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014d9f:	eb 53                	jmp    c0014df4 <Vm::faultHandler(regs*)+0x659>
c0014da1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014da4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014da8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014dad:	74 03                	je     c0014db2 <Vm::faultHandler(regs*)+0x617>
c0014daf:	ef                   	out    dx,eax
c0014db0:	eb cf                	jmp    c0014d81 <Vm::faultHandler(regs*)+0x5e6>
c0014db2:	66 ef                	out    dx,ax
c0014db4:	eb cb                	jmp    c0014d81 <Vm::faultHandler(regs*)+0x5e6>
c0014db6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014dbd:	83 ec 0c             	sub    esp,0xc
c0014dc0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014dc4:	50                   	push   eax
c0014dc5:	e8 13 f5 ff ff       	call   c00142dd <Vm::inbv(unsigned short)>
c0014dca:	0f b6 c0             	movzx  eax,al
c0014dcd:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014dd0:	eb 1f                	jmp    c0014df1 <Vm::faultHandler(regs*)+0x656>
c0014dd2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014dd5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014dda:	74 03                	je     c0014ddf <Vm::faultHandler(regs*)+0x644>
c0014ddc:	ed                   	in     eax,dx
c0014ddd:	eb 0d                	jmp    c0014dec <Vm::faultHandler(regs*)+0x651>
c0014ddf:	66 ed                	in     ax,dx
c0014de1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014de4:	0f b7 c0             	movzx  eax,ax
c0014de7:	66 31 d2             	xor    dx,dx
c0014dea:	09 d0                	or     eax,edx
c0014dec:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014def:	eb 1a                	jmp    c0014e0b <Vm::faultHandler(regs*)+0x670>
c0014df1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014df4:	83 c4 10             	add    esp,0x10
c0014df7:	eb 15                	jmp    c0014e0e <Vm::faultHandler(regs*)+0x673>
c0014df9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014dfc:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014dff:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e04:	74 03                	je     c0014e09 <Vm::faultHandler(regs*)+0x66e>
c0014e06:	ef                   	out    dx,eax
c0014e07:	eb 02                	jmp    c0014e0b <Vm::faultHandler(regs*)+0x670>
c0014e09:	66 ef                	out    dx,ax
c0014e0b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e0e:	b0 01                	mov    al,0x1
c0014e10:	eb 56                	jmp    c0014e68 <Vm::faultHandler(regs*)+0x6cd>
c0014e12:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e16:	50                   	push   eax
c0014e17:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e1b:	50                   	push   eax
c0014e1c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e20:	50                   	push   eax
c0014e21:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e25:	50                   	push   eax
c0014e26:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e2a:	50                   	push   eax
c0014e2b:	52                   	push   edx
c0014e2c:	52                   	push   edx
c0014e2d:	68 13 ed 01 c0       	push   0xc001ed13
c0014e32:	e8 13 57 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0014e37:	83 c4 20             	add    esp,0x20
c0014e3a:	83 ec 0c             	sub    esp,0xc
c0014e3d:	6a 60                	push   0x60
c0014e3f:	e8 99 f4 ff ff       	call   c00142dd <Vm::inbv(unsigned short)>
c0014e44:	83 c4 10             	add    esp,0x10
c0014e47:	3c 1c                	cmp    al,0x1c
c0014e49:	74 04                	je     c0014e4f <Vm::faultHandler(regs*)+0x6b4>
c0014e4b:	3c 5a                	cmp    al,0x5a
c0014e4d:	75 eb                	jne    c0014e3a <Vm::faultHandler(regs*)+0x69f>
c0014e4f:	3c 5a                	cmp    al,0x5a
c0014e51:	74 04                	je     c0014e57 <Vm::faultHandler(regs*)+0x6bc>
c0014e53:	3c 1c                	cmp    al,0x1c
c0014e55:	75 0f                	jne    c0014e66 <Vm::faultHandler(regs*)+0x6cb>
c0014e57:	83 ec 0c             	sub    esp,0xc
c0014e5a:	6a 60                	push   0x60
c0014e5c:	e8 7c f4 ff ff       	call   c00142dd <Vm::inbv(unsigned short)>
c0014e61:	83 c4 10             	add    esp,0x10
c0014e64:	eb e9                	jmp    c0014e4f <Vm::faultHandler(regs*)+0x6b4>
c0014e66:	31 c0                	xor    eax,eax
c0014e68:	83 c4 1c             	add    esp,0x1c
c0014e6b:	5b                   	pop    ebx
c0014e6c:	5e                   	pop    esi
c0014e6d:	5f                   	pop    edi
c0014e6e:	5d                   	pop    ebp
c0014e6f:	c3                   	ret    

c0014e70 <noCopro(unsigned long)>:
c0014e70:	c3                   	ret    

c0014e71 <nmiHandler(regs*, void*)>:
c0014e71:	83 ec 0c             	sub    esp,0xc
c0014e74:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0014e79:	83 ec 0c             	sub    esp,0xc
c0014e7c:	50                   	push   eax
c0014e7d:	e8 58 21 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014e82:	83 c4 10             	add    esp,0x10
c0014e85:	90                   	nop
c0014e86:	83 c4 0c             	add    esp,0xc
c0014e89:	c3                   	ret    

c0014e8a <doubleFault(regs*, void*)>:
c0014e8a:	55                   	push   ebp
c0014e8b:	89 e5                	mov    ebp,esp
c0014e8d:	83 ec 08             	sub    esp,0x8
c0014e90:	83 ec 0c             	sub    esp,0xc
c0014e93:	68 70 ed 01 c0       	push   0xc001ed70
c0014e98:	e8 2e b3 ff ff       	call   c00101cb <KePanic(char const*)>
c0014e9d:	83 c4 10             	add    esp,0x10
c0014ea0:	90                   	nop
c0014ea1:	c9                   	leave  
c0014ea2:	c3                   	ret    

c0014ea3 <displayDebugInfo(regs*)>:
c0014ea3:	83 ec 1c             	sub    esp,0x1c
c0014ea6:	0f 20 c0             	mov    eax,cr0
c0014ea9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ead:	0f 20 d0             	mov    eax,cr2
c0014eb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014eb4:	0f 20 d8             	mov    eax,cr3
c0014eb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ebb:	0f 20 e0             	mov    eax,cr4
c0014ebe:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014ec8:	83 ec 08             	sub    esp,0x8
c0014ecb:	50                   	push   eax
c0014ecc:	68 8c ed 01 c0       	push   0xc001ed8c
c0014ed1:	e8 74 56 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0014ed6:	83 c4 10             	add    esp,0x10
c0014ed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014edd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014ee0:	83 ec 08             	sub    esp,0x8
c0014ee3:	50                   	push   eax
c0014ee4:	68 7d ed 01 c0       	push   0xc001ed7d
c0014ee9:	e8 5c 56 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0014eee:	83 c4 10             	add    esp,0x10
c0014ef1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ef5:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014ef8:	83 ec 08             	sub    esp,0x8
c0014efb:	50                   	push   eax
c0014efc:	68 88 ed 01 c0       	push   0xc001ed88
c0014f01:	e8 44 56 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0014f06:	83 c4 10             	add    esp,0x10
c0014f09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f0d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f10:	83 ec 08             	sub    esp,0x8
c0014f13:	50                   	push   eax
c0014f14:	68 97 ed 01 c0       	push   0xc001ed97
c0014f19:	e8 2c 56 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0014f1e:	83 c4 10             	add    esp,0x10
c0014f21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f25:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014f28:	83 ec 08             	sub    esp,0x8
c0014f2b:	50                   	push   eax
c0014f2c:	68 a2 ed 01 c0       	push   0xc001eda2
c0014f31:	e8 14 56 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0014f36:	83 c4 10             	add    esp,0x10
c0014f39:	83 ec 08             	sub    esp,0x8
c0014f3c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f40:	68 ad ed 01 c0       	push   0xc001edad
c0014f45:	e8 00 56 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0014f4a:	83 c4 10             	add    esp,0x10
c0014f4d:	83 ec 08             	sub    esp,0x8
c0014f50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014f54:	68 b8 ed 01 c0       	push   0xc001edb8
c0014f59:	e8 ec 55 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0014f5e:	83 c4 10             	add    esp,0x10
c0014f61:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014f66:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f6c:	83 ec 0c             	sub    esp,0xc
c0014f6f:	50                   	push   eax
c0014f70:	e8 82 34 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014f75:	83 c4 10             	add    esp,0x10
c0014f78:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014f7d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f83:	83 ec 08             	sub    esp,0x8
c0014f86:	68 c3 ed 01 c0       	push   0xc001edc3
c0014f8b:	50                   	push   eax
c0014f8c:	e8 a5 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014f91:	83 c4 10             	add    esp,0x10
c0014f94:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014f99:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f9f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014fa4:	8b 12                	mov    edx,DWORD PTR [edx]
c0014fa6:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014fa9:	83 c2 0c             	add    edx,0xc
c0014fac:	83 ec 08             	sub    esp,0x8
c0014faf:	52                   	push   edx
c0014fb0:	50                   	push   eax
c0014fb1:	e8 80 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014fb6:	83 c4 10             	add    esp,0x10
c0014fb9:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fbe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fc4:	83 ec 08             	sub    esp,0x8
c0014fc7:	68 cc ed 01 c0       	push   0xc001edcc
c0014fcc:	50                   	push   eax
c0014fcd:	e8 64 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014fd2:	83 c4 10             	add    esp,0x10
c0014fd5:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014fda:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fe0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014fe4:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014fe7:	83 ec 08             	sub    esp,0x8
c0014fea:	52                   	push   edx
c0014feb:	50                   	push   eax
c0014fec:	e8 ff 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014ff1:	83 c4 10             	add    esp,0x10
c0014ff4:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0014ff9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fff:	83 ec 08             	sub    esp,0x8
c0015002:	68 d4 ed 01 c0       	push   0xc001edd4
c0015007:	50                   	push   eax
c0015008:	e8 29 37 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001500d:	83 c4 10             	add    esp,0x10
c0015010:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015015:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001501b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001501f:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0015022:	83 ec 08             	sub    esp,0x8
c0015025:	52                   	push   edx
c0015026:	50                   	push   eax
c0015027:	e8 c4 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001502c:	83 c4 10             	add    esp,0x10
c001502f:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015034:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001503a:	83 ec 08             	sub    esp,0x8
c001503d:	68 dc ed 01 c0       	push   0xc001eddc
c0015042:	50                   	push   eax
c0015043:	e8 ee 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015048:	83 c4 10             	add    esp,0x10
c001504b:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015050:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015056:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001505a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001505d:	83 ec 08             	sub    esp,0x8
c0015060:	52                   	push   edx
c0015061:	50                   	push   eax
c0015062:	e8 89 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015067:	83 c4 10             	add    esp,0x10
c001506a:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001506f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015075:	83 ec 08             	sub    esp,0x8
c0015078:	68 e4 ed 01 c0       	push   0xc001ede4
c001507d:	50                   	push   eax
c001507e:	e8 b3 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015083:	83 c4 10             	add    esp,0x10
c0015086:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001508b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015091:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015095:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015098:	83 ec 08             	sub    esp,0x8
c001509b:	52                   	push   edx
c001509c:	50                   	push   eax
c001509d:	e8 4e 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150a2:	83 c4 10             	add    esp,0x10
c00150a5:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150b0:	83 ec 08             	sub    esp,0x8
c00150b3:	68 ec ed 01 c0       	push   0xc001edec
c00150b8:	50                   	push   eax
c00150b9:	e8 78 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150be:	83 c4 10             	add    esp,0x10
c00150c1:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150c6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150d0:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00150d3:	83 ec 08             	sub    esp,0x8
c00150d6:	52                   	push   edx
c00150d7:	50                   	push   eax
c00150d8:	e8 13 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150dd:	83 c4 10             	add    esp,0x10
c00150e0:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150e5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150eb:	83 ec 08             	sub    esp,0x8
c00150ee:	68 f4 ed 01 c0       	push   0xc001edf4
c00150f3:	50                   	push   eax
c00150f4:	e8 3d 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150f9:	83 c4 10             	add    esp,0x10
c00150fc:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015101:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015107:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001510b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001510e:	83 ec 08             	sub    esp,0x8
c0015111:	52                   	push   edx
c0015112:	50                   	push   eax
c0015113:	e8 d8 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015118:	83 c4 10             	add    esp,0x10
c001511b:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015120:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015126:	83 ec 08             	sub    esp,0x8
c0015129:	68 fc ed 01 c0       	push   0xc001edfc
c001512e:	50                   	push   eax
c001512f:	e8 02 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015134:	83 c4 10             	add    esp,0x10
c0015137:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001513c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015142:	83 ec 08             	sub    esp,0x8
c0015145:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015149:	50                   	push   eax
c001514a:	e8 a1 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001514f:	83 c4 10             	add    esp,0x10
c0015152:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015157:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001515d:	83 ec 08             	sub    esp,0x8
c0015160:	68 05 ee 01 c0       	push   0xc001ee05
c0015165:	50                   	push   eax
c0015166:	e8 cb 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001516b:	83 c4 10             	add    esp,0x10
c001516e:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015173:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015179:	83 ec 08             	sub    esp,0x8
c001517c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015180:	50                   	push   eax
c0015181:	e8 6a 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015186:	83 c4 10             	add    esp,0x10
c0015189:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001518e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015194:	83 ec 08             	sub    esp,0x8
c0015197:	68 0d ee 01 c0       	push   0xc001ee0d
c001519c:	50                   	push   eax
c001519d:	e8 94 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151a2:	83 c4 10             	add    esp,0x10
c00151a5:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151b0:	83 ec 08             	sub    esp,0x8
c00151b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00151b7:	50                   	push   eax
c00151b8:	e8 33 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151bd:	83 c4 10             	add    esp,0x10
c00151c0:	fa                   	cli    
c00151c1:	f4                   	hlt    
c00151c2:	eb fe                	jmp    c00151c2 <displayDebugInfo(regs*)+0x31f>

c00151c4 <HalSystemIdle()>:
c00151c4:	56                   	push   esi
c00151c5:	53                   	push   ebx
c00151c6:	83 ec 14             	sub    esp,0x14
c00151c9:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00151ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00151d4:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00151da:	83 e0 04             	and    eax,0x4
c00151dd:	84 c0                	test   al,al
c00151df:	0f 95 c0             	setne  al
c00151e2:	84 c0                	test   al,al
c00151e4:	74 4c                	je     c0015232 <HalSystemIdle()+0x6e>
c00151e6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00151eb:	83 ec 08             	sub    esp,0x8
c00151ee:	68 e1 00 00 00       	push   0xe1
c00151f3:	50                   	push   eax
c00151f4:	e8 f9 1b ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00151f9:	83 c4 10             	add    esp,0x10
c00151fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015200:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015204:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015209:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001520d:	83 e2 02             	and    edx,0x2
c0015210:	89 d3                	mov    ebx,edx
c0015212:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015216:	83 e2 00             	and    edx,0x0
c0015219:	89 d6                	mov    esi,edx
c001521b:	56                   	push   esi
c001521c:	53                   	push   ebx
c001521d:	68 e1 00 00 00       	push   0xe1
c0015222:	50                   	push   eax
c0015223:	e8 f6 1b ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c0015228:	83 c4 10             	add    esp,0x10
c001522b:	e8 64 af fe ff       	call   c0000194 <doTPAUSE>
c0015230:	eb 01                	jmp    c0015233 <HalSystemIdle()+0x6f>
c0015232:	f4                   	hlt    
c0015233:	90                   	nop
c0015234:	83 c4 14             	add    esp,0x14
c0015237:	5b                   	pop    ebx
c0015238:	5e                   	pop    esi
c0015239:	c3                   	ret    

c001523a <displayProgramFault(char const*)>:
c001523a:	83 ec 0c             	sub    esp,0xc
c001523d:	83 ec 0c             	sub    esp,0xc
c0015240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015244:	e8 01 53 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c0015249:	83 c4 10             	add    esp,0x10
c001524c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015251:	8b 00                	mov    eax,DWORD PTR [eax]
c0015253:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015256:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001525c:	85 c0                	test   eax,eax
c001525e:	74 21                	je     c0015281 <displayProgramFault(char const*)+0x47>
c0015260:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015265:	8b 00                	mov    eax,DWORD PTR [eax]
c0015267:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001526a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015270:	6a 04                	push   0x4
c0015272:	6a 0f                	push   0xf
c0015274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015278:	50                   	push   eax
c0015279:	e8 2a 35 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001527e:	83 c4 10             	add    esp,0x10
c0015281:	90                   	nop
c0015282:	83 c4 0c             	add    esp,0xc
c0015285:	c3                   	ret    

c0015286 <gpFault(regs*, void*)>:
c0015286:	83 ec 1c             	sub    esp,0x1c
c0015289:	c7 05 10 52 02 c0 9b 47 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc001479b
c0015293:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c0015298:	85 c0                	test   eax,eax
c001529a:	74 1c                	je     c00152b8 <gpFault(regs*, void*)+0x32>
c001529c:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c00152a1:	83 ec 0c             	sub    esp,0xc
c00152a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152a8:	ff d0                	call   eax
c00152aa:	83 c4 10             	add    esp,0x10
c00152ad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00152b1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00152b6:	75 2e                	jne    c00152e6 <gpFault(regs*, void*)+0x60>
c00152b8:	83 ec 0c             	sub    esp,0xc
c00152bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152bf:	e8 df fb ff ff       	call   c0014ea3 <displayDebugInfo(regs*)>
c00152c4:	83 c4 10             	add    esp,0x10
c00152c7:	83 ec 0c             	sub    esp,0xc
c00152ca:	68 15 ee 01 c0       	push   0xc001ee15
c00152cf:	e8 66 ff ff ff       	call   c001523a <displayProgramFault(char const*)>
c00152d4:	83 c4 10             	add    esp,0x10
c00152d7:	83 ec 0c             	sub    esp,0xc
c00152da:	6a 00                	push   0x0
c00152dc:	e8 af ee ff ff       	call   c0014190 <Thr::terminateFromIRQ(int)>
c00152e1:	83 c4 10             	add    esp,0x10
c00152e4:	eb 01                	jmp    c00152e7 <gpFault(regs*, void*)+0x61>
c00152e6:	90                   	nop
c00152e7:	83 c4 1c             	add    esp,0x1c
c00152ea:	c3                   	ret    

c00152eb <pgFault(regs*, void*)>:
c00152eb:	83 ec 1c             	sub    esp,0x1c
c00152ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00152f2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00152f5:	0f 20 d0             	mov    eax,cr2
c00152f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00152fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015300:	83 ec 04             	sub    esp,0x4
c0015303:	52                   	push   edx
c0015304:	50                   	push   eax
c0015305:	68 f4 ee 01 c0       	push   0xc001eef4
c001530a:	e8 3b 52 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c001530f:	83 c4 10             	add    esp,0x10
c0015312:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015317:	8b 00                	mov    eax,DWORD PTR [eax]
c0015319:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001531c:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0015322:	0f 20 d2             	mov    edx,cr2
c0015325:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015329:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001532d:	83 ec 08             	sub    esp,0x8
c0015330:	52                   	push   edx
c0015331:	50                   	push   eax
c0015332:	e8 09 4e ff ff       	call   c000a140 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015337:	83 c4 10             	add    esp,0x10
c001533a:	84 c0                	test   al,al
c001533c:	75 2e                	jne    c001536c <pgFault(regs*, void*)+0x81>
c001533e:	83 ec 0c             	sub    esp,0xc
c0015341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015345:	e8 59 fb ff ff       	call   c0014ea3 <displayDebugInfo(regs*)>
c001534a:	83 c4 10             	add    esp,0x10
c001534d:	83 ec 0c             	sub    esp,0xc
c0015350:	68 2e ee 01 c0       	push   0xc001ee2e
c0015355:	e8 e0 fe ff ff       	call   c001523a <displayProgramFault(char const*)>
c001535a:	83 c4 10             	add    esp,0x10
c001535d:	83 ec 0c             	sub    esp,0xc
c0015360:	6a 00                	push   0x0
c0015362:	e8 29 ee ff ff       	call   c0014190 <Thr::terminateFromIRQ(int)>
c0015367:	83 c4 10             	add    esp,0x10
c001536a:	eb 01                	jmp    c001536d <pgFault(regs*, void*)+0x82>
c001536c:	90                   	nop
c001536d:	83 c4 1c             	add    esp,0x1c
c0015370:	c3                   	ret    

c0015371 <otherISRHandler(regs*, void*)>:
c0015371:	83 ec 0c             	sub    esp,0xc
c0015374:	83 ec 0c             	sub    esp,0xc
c0015377:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001537b:	e8 23 fb ff ff       	call   c0014ea3 <displayDebugInfo(regs*)>
c0015380:	83 c4 10             	add    esp,0x10
c0015383:	83 ec 0c             	sub    esp,0xc
c0015386:	68 1c ef 01 c0       	push   0xc001ef1c
c001538b:	e8 aa fe ff ff       	call   c001523a <displayProgramFault(char const*)>
c0015390:	83 c4 10             	add    esp,0x10
c0015393:	83 ec 0c             	sub    esp,0xc
c0015396:	6a 00                	push   0x0
c0015398:	e8 f3 ed ff ff       	call   c0014190 <Thr::terminateFromIRQ(int)>
c001539d:	83 c4 10             	add    esp,0x10
c00153a0:	90                   	nop
c00153a1:	83 c4 0c             	add    esp,0xc
c00153a4:	c3                   	ret    

c00153a5 <opcodeFault(regs*, void*)>:
c00153a5:	55                   	push   ebp
c00153a6:	89 e5                	mov    ebp,esp
c00153a8:	83 ec 08             	sub    esp,0x8
c00153ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ae:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153b1:	83 ec 08             	sub    esp,0x8
c00153b4:	50                   	push   eax
c00153b5:	68 39 ee 01 c0       	push   0xc001ee39
c00153ba:	e8 8b 51 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c00153bf:	83 c4 10             	add    esp,0x10
c00153c2:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00153c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00153cd:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00153d3:	84 c0                	test   al,al
c00153d5:	74 21                	je     c00153f8 <opcodeFault(regs*, void*)+0x53>
c00153d7:	83 ec 0c             	sub    esp,0xc
c00153da:	68 44 ef 01 c0       	push   0xc001ef44
c00153df:	e8 66 51 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c00153e4:	83 c4 10             	add    esp,0x10
c00153e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153ed:	8d 50 19             	lea    edx,[eax+0x19]
c00153f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153f6:	eb 2b                	jmp    c0015423 <opcodeFault(regs*, void*)+0x7e>
c00153f8:	83 ec 0c             	sub    esp,0xc
c00153fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00153fe:	e8 a0 fa ff ff       	call   c0014ea3 <displayDebugInfo(regs*)>
c0015403:	83 c4 10             	add    esp,0x10
c0015406:	83 ec 0c             	sub    esp,0xc
c0015409:	68 47 ee 01 c0       	push   0xc001ee47
c001540e:	e8 27 fe ff ff       	call   c001523a <displayProgramFault(char const*)>
c0015413:	83 c4 10             	add    esp,0x10
c0015416:	83 ec 0c             	sub    esp,0xc
c0015419:	6a 00                	push   0x0
c001541b:	e8 70 ed ff ff       	call   c0014190 <Thr::terminateFromIRQ(int)>
c0015420:	83 c4 10             	add    esp,0x10
c0015423:	c9                   	leave  
c0015424:	c3                   	ret    

c0015425 <i386SaveCoprocessor(void*)>:
c0015425:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015429:	83 c0 3f             	add    eax,0x3f
c001542c:	83 e0 c0             	and    eax,0xffffffc0
c001542f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015433:	ff 25 0c 52 02 c0    	jmp    DWORD PTR ds:0xc002520c

c0015439 <i386LoadCoprocessor(void*)>:
c0015439:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001543d:	83 c0 3f             	add    eax,0x3f
c0015440:	83 e0 c0             	and    eax,0xffffffc0
c0015443:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015447:	ff 25 08 52 02 c0    	jmp    DWORD PTR ds:0xc0025208

c001544d <x87EmulHandler(regs*, void*)>:
c001544d:	53                   	push   ebx
c001544e:	83 ec 08             	sub    esp,0x8
c0015451:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015456:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001545a:	74 10                	je     c001546c <x87EmulHandler(regs*, void*)+0x1f>
c001545c:	83 ec 0c             	sub    esp,0xc
c001545f:	68 54 ee 01 c0       	push   0xc001ee54
c0015464:	e8 62 ad ff ff       	call   c00101cb <KePanic(char const*)>
c0015469:	83 c4 10             	add    esp,0x10
c001546c:	0f 20 c0             	mov    eax,cr0
c001546f:	a8 08                	test   al,0x8
c0015471:	74 59                	je     c00154cc <x87EmulHandler(regs*, void*)+0x7f>
c0015473:	0f 06                	clts   
c0015475:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c001547a:	85 c0                	test   eax,eax
c001547c:	74 0e                	je     c001548c <x87EmulHandler(regs*, void*)+0x3f>
c001547e:	83 ec 0c             	sub    esp,0xc
c0015481:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015484:	e8 9c ff ff ff       	call   c0015425 <i386SaveCoprocessor(void*)>
c0015489:	83 c4 10             	add    esp,0x10
c001548c:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015492:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0015496:	75 12                	jne    c00154aa <x87EmulHandler(regs*, void*)+0x5d>
c0015498:	83 ec 0c             	sub    esp,0xc
c001549b:	68 40 02 00 00       	push   0x240
c00154a0:	e8 14 23 ff ff       	call   c00077b9 <malloc>
c00154a5:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00154a8:	eb 10                	jmp    c00154ba <x87EmulHandler(regs*, void*)+0x6d>
c00154aa:	83 ec 0c             	sub    esp,0xc
c00154ad:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c00154b2:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00154b5:	e8 7f ff ff ff       	call   c0015439 <i386LoadCoprocessor(void*)>
c00154ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154bf:	83 c4 10             	add    esp,0x10
c00154c2:	a3 04 52 02 c0       	mov    ds:0xc0025204,eax
c00154c7:	83 c4 08             	add    esp,0x8
c00154ca:	5b                   	pop    ebx
c00154cb:	c3                   	ret    
c00154cc:	83 ec 0c             	sub    esp,0xc
c00154cf:	68 68 ee 01 c0       	push   0xc001ee68
c00154d4:	e8 71 50 ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c00154d9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00154e1:	83 c4 18             	add    esp,0x18
c00154e4:	5b                   	pop    ebx
c00154e5:	e9 a6 ec ff ff       	jmp    c0014190 <Thr::terminateFromIRQ(int)>

c00154ea <HalInitialiseCoprocessor()>:
c00154ea:	83 ec 10             	sub    esp,0x10
c00154ed:	c7 05 04 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025204,0x0
c00154f7:	6a 00                	push   0x0
c00154f9:	68 4d 54 01 c0       	push   0xc001544d
c00154fe:	6a 07                	push   0x7
c0015500:	e8 b7 69 ff ff       	call   c000bebc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015505:	e8 96 65 00 00       	call   c001baa0 <avxDetect>
c001550a:	83 c4 10             	add    esp,0x10
c001550d:	85 c0                	test   eax,eax
c001550f:	74 1c                	je     c001552d <HalInitialiseCoprocessor()+0x43>
c0015511:	c7 05 0c 52 02 c0 ca ba 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001baca
c001551b:	c7 05 08 52 02 c0 db ba 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001badb
c0015525:	83 c4 0c             	add    esp,0xc
c0015528:	e9 bf 65 00 00       	jmp    c001baec <avxInit>
c001552d:	e8 4e 68 00 00       	call   c001bd80 <absolutelyNoChanceInHell>
c0015532:	85 c0                	test   eax,eax
c0015534:	74 1c                	je     c0015552 <HalInitialiseCoprocessor()+0x68>
c0015536:	c7 05 0c 52 02 c0 98 bd 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bd98
c0015540:	c7 05 08 52 02 c0 a0 bd 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bda0
c001554a:	83 c4 0c             	add    esp,0xc
c001554d:	e9 56 68 00 00       	jmp    c001bda8 <sseInit>
c0015552:	e8 6f 68 00 00       	call   c001bdc6 <x87Detect>
c0015557:	85 c0                	test   eax,eax
c0015559:	74 1c                	je     c0015577 <HalInitialiseCoprocessor()+0x8d>
c001555b:	c7 05 0c 52 02 c0 e1 bd 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bde1
c0015565:	c7 05 08 52 02 c0 e8 bd 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bde8
c001556f:	83 c4 0c             	add    esp,0xc
c0015572:	e9 78 68 00 00       	jmp    c001bdef <x87Init>
c0015577:	c7 05 0c 52 02 c0 70 4e 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc0014e70
c0015581:	c7 05 08 52 02 c0 70 4e 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc0014e70
c001558b:	0f 20 c0             	mov    eax,cr0
c001558e:	83 c8 04             	or     eax,0x4
c0015591:	0f 22 c0             	mov    cr0,eax
c0015594:	83 c4 0c             	add    esp,0xc
c0015597:	c3                   	ret    

c0015598 <HalPanic(char const*)>:
c0015598:	53                   	push   ebx
c0015599:	83 ec 10             	sub    esp,0x10
c001559c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00155a0:	fa                   	cli    
c00155a1:	53                   	push   ebx
c00155a2:	68 7e ee 01 c0       	push   0xc001ee7e
c00155a7:	e8 9e 4f ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c00155ac:	83 c4 0c             	add    esp,0xc
c00155af:	6a 01                	push   0x1
c00155b1:	6a 0f                	push   0xf
c00155b3:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155b9:	e8 8c 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00155be:	58                   	pop    eax
c00155bf:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155c5:	e8 78 2e ff ff       	call   c0008442 <VgaText::clearScreen()>
c00155ca:	5a                   	pop    edx
c00155cb:	59                   	pop    ecx
c00155cc:	68 e8 d7 01 c0       	push   0xc001d7e8
c00155d1:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155d7:	e8 a6 2c ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c00155dc:	83 c4 0c             	add    esp,0xc
c00155df:	6a 01                	push   0x1
c00155e1:	6a 0f                	push   0xf
c00155e3:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155e9:	e8 5c 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00155ee:	58                   	pop    eax
c00155ef:	5a                   	pop    edx
c00155f0:	68 97 ee 01 c0       	push   0xc001ee97
c00155f5:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00155fb:	e8 36 31 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015600:	83 c4 0c             	add    esp,0xc
c0015603:	6a 0f                	push   0xf
c0015605:	6a 01                	push   0x1
c0015607:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001560d:	e8 38 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015612:	59                   	pop    ecx
c0015613:	58                   	pop    eax
c0015614:	68 a0 ee 01 c0       	push   0xc001eea0
c0015619:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001561f:	e8 12 31 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015624:	83 c4 0c             	add    esp,0xc
c0015627:	6a 01                	push   0x1
c0015629:	6a 0f                	push   0xf
c001562b:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015631:	e8 14 2c ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015636:	58                   	pop    eax
c0015637:	5a                   	pop    edx
c0015638:	68 e4 ee 01 c0       	push   0xc001eee4
c001563d:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015643:	e8 ee 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015648:	59                   	pop    ecx
c0015649:	58                   	pop    eax
c001564a:	68 ad ee 01 c0       	push   0xc001eead
c001564f:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015655:	e8 dc 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001565a:	58                   	pop    eax
c001565b:	5a                   	pop    edx
c001565c:	68 e7 ee 01 c0       	push   0xc001eee7
c0015661:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015667:	e8 ca 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001566c:	59                   	pop    ecx
c001566d:	58                   	pop    eax
c001566e:	53                   	push   ebx
c001566f:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015675:	e8 bc 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001567a:	58                   	pop    eax
c001567b:	5a                   	pop    edx
c001567c:	68 e4 ee 01 c0       	push   0xc001eee4
c0015681:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015687:	e8 aa 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001568c:	83 c4 10             	add    esp,0x10
c001568f:	eb fe                	jmp    c001568f <HalPanic(char const*)+0xf7>

c0015691 <HalQueryPerformanceCounter()>:
c0015691:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015696:	31 d2                	xor    edx,edx
c0015698:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001569e:	31 c0                	xor    eax,eax
c00156a0:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00156a7:	74 02                	je     c00156ab <HalQueryPerformanceCounter()+0x1a>
c00156a9:	0f 31                	rdtsc  
c00156ab:	c3                   	ret    

c00156ac <HalInitialise()>:
c00156ac:	53                   	push   ebx
c00156ad:	83 ec 08             	sub    esp,0x8
c00156b0:	e8 3a 6a ff ff       	call   c000c0ef <setupINTS()>
c00156b5:	80 3d 80 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024780,0x0
c00156bc:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00156c1:	75 07                	jne    c00156ca <HalInitialise()+0x1e>
c00156c3:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00156ca:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00156d0:	83 e0 01             	and    eax,0x1
c00156d3:	a2 00 52 02 c0       	mov    ds:0xc0025200,al
c00156d8:	e8 a7 02 00 00       	call   c0015984 <picOpen()>
c00156dd:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c00156e4:	74 0a                	je     c00156f0 <HalInitialise()+0x44>
c00156e6:	e8 e1 01 00 00       	call   c00158cc <picDisable()>
c00156eb:	e8 26 5d 00 00       	call   c001b416 <apicOpen()>
c00156f0:	bb 0f 00 00 00       	mov    ebx,0xf
c00156f5:	50                   	push   eax
c00156f6:	6a 00                	push   0x0
c00156f8:	68 71 53 01 c0       	push   0xc0015371
c00156fd:	6a 00                	push   0x0
c00156ff:	e8 b8 67 ff ff       	call   c000bebc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015704:	83 c4 0c             	add    esp,0xc
c0015707:	6a 00                	push   0x0
c0015709:	68 71 53 01 c0       	push   0xc0015371
c001570e:	6a 01                	push   0x1
c0015710:	e8 a7 67 ff ff       	call   c000bebc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015715:	83 c4 0c             	add    esp,0xc
c0015718:	6a 00                	push   0x0
c001571a:	68 71 4e 01 c0       	push   0xc0014e71
c001571f:	6a 02                	push   0x2
c0015721:	e8 96 67 ff ff       	call   c000bebc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015726:	83 c4 0c             	add    esp,0xc
c0015729:	6a 00                	push   0x0
c001572b:	68 71 53 01 c0       	push   0xc0015371
c0015730:	6a 03                	push   0x3
c0015732:	e8 85 67 ff ff       	call   c000bebc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015737:	83 c4 0c             	add    esp,0xc
c001573a:	6a 00                	push   0x0
c001573c:	68 71 53 01 c0       	push   0xc0015371
c0015741:	6a 04                	push   0x4
c0015743:	e8 74 67 ff ff       	call   c000bebc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015748:	83 c4 0c             	add    esp,0xc
c001574b:	6a 00                	push   0x0
c001574d:	68 71 53 01 c0       	push   0xc0015371
c0015752:	6a 05                	push   0x5
c0015754:	e8 63 67 ff ff       	call   c000bebc <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015759:	83 c4 0c             	add    esp,0xc
c001575c:	6a 00                	push   0x0
c001575e:	68 a5 53 01 c0       	push   0xc00153a5
c0015763:	6a 06                	push   0x6
c0015765:	e8 52 67 ff ff       	call   c000bebc <installISRHandler(int, void (*)(regs*, void*), void*)>
c001576a:	83 c4 0c             	add    esp,0xc
c001576d:	6a 00                	push   0x0
c001576f:	68 8a 4e 01 c0       	push   0xc0014e8a
c0015774:	6a 08                	push   0x8
c0015776:	e8 41 67 ff ff       	call   c000bebc <installISRHandler(int, void (*)(regs*, void*), void*)>
c001577b:	83 c4 0c             	add    esp,0xc
c001577e:	6a 00                	push   0x0
c0015780:	68 71 53 01 c0       	push   0xc0015371
c0015785:	6a 09                	push   0x9
c0015787:	e8 30 67 ff ff       	call   c000bebc <installISRHandler(int, void (*)(regs*, void*), void*)>
c001578c:	83 c4 0c             	add    esp,0xc
c001578f:	6a 00                	push   0x0
c0015791:	68 71 53 01 c0       	push   0xc0015371
c0015796:	6a 0a                	push   0xa
c0015798:	e8 1f 67 ff ff       	call   c000bebc <installISRHandler(int, void (*)(regs*, void*), void*)>
c001579d:	83 c4 0c             	add    esp,0xc
c00157a0:	6a 00                	push   0x0
c00157a2:	68 71 53 01 c0       	push   0xc0015371
c00157a7:	6a 0b                	push   0xb
c00157a9:	e8 0e 67 ff ff       	call   c000bebc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157ae:	83 c4 0c             	add    esp,0xc
c00157b1:	6a 00                	push   0x0
c00157b3:	68 86 52 01 c0       	push   0xc0015286
c00157b8:	6a 0d                	push   0xd
c00157ba:	e8 fd 66 ff ff       	call   c000bebc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157bf:	83 c4 0c             	add    esp,0xc
c00157c2:	6a 00                	push   0x0
c00157c4:	68 eb 52 01 c0       	push   0xc00152eb
c00157c9:	6a 0e                	push   0xe
c00157cb:	e8 ec 66 ff ff       	call   c000bebc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157d0:	83 c4 10             	add    esp,0x10
c00157d3:	50                   	push   eax
c00157d4:	6a 00                	push   0x0
c00157d6:	68 71 53 01 c0       	push   0xc0015371
c00157db:	53                   	push   ebx
c00157dc:	43                   	inc    ebx
c00157dd:	e8 da 66 ff ff       	call   c000bebc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157e2:	83 c4 10             	add    esp,0x10
c00157e5:	83 fb 1e             	cmp    ebx,0x1e
c00157e8:	75 e9                	jne    c00157d3 <HalInitialise()+0x127>
c00157ea:	50                   	push   eax
c00157eb:	6a 00                	push   0x0
c00157ed:	68 1b 14 01 c0       	push   0xc001141b
c00157f2:	6a 60                	push   0x60
c00157f4:	e8 c3 66 ff ff       	call   c000bebc <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157f9:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00157fe:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015808:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001580f:	e8 a5 1f ff ff       	call   c00077b9 <malloc>
c0015814:	89 04 24             	mov    DWORD PTR [esp],eax
c0015817:	89 c3                	mov    ebx,eax
c0015819:	e8 2e 09 00 00       	call   c001614c <RTC::RTC()>
c001581e:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015828:	5a                   	pop    edx
c0015829:	59                   	pop    ecx
c001582a:	53                   	push   ebx
c001582b:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015831:	e8 52 61 ff ff       	call   c000b988 <Device::addChild(Device*)>
c0015836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015838:	6a 00                	push   0x0
c001583a:	6a 00                	push   0x0
c001583c:	6a 00                	push   0x0
c001583e:	53                   	push   ebx
c001583f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015842:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015847:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001584d:	83 c4 28             	add    esp,0x28
c0015850:	5b                   	pop    ebx
c0015851:	c3                   	ret    

c0015852 <HalMakeBeep(int)>:
c0015852:	53                   	push   ebx
c0015853:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015857:	85 db                	test   ebx,ebx
c0015859:	75 07                	jne    c0015862 <HalMakeBeep(int)+0x10>
c001585b:	e4 61                	in     al,0x61
c001585d:	83 e0 fc             	and    eax,0xfffffffc
c0015860:	eb 26                	jmp    c0015888 <HalMakeBeep(int)+0x36>
c0015862:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0015867:	99                   	cdq    
c0015868:	f7 fb                	idiv   ebx
c001586a:	89 c1                	mov    ecx,eax
c001586c:	b0 b6                	mov    al,0xb6
c001586e:	e6 43                	out    0x43,al
c0015870:	88 c8                	mov    al,cl
c0015872:	e6 42                	out    0x42,al
c0015874:	89 c8                	mov    eax,ecx
c0015876:	c1 e8 08             	shr    eax,0x8
c0015879:	e6 42                	out    0x42,al
c001587b:	e4 61                	in     al,0x61
c001587d:	88 c2                	mov    dl,al
c001587f:	83 ca 03             	or     edx,0x3
c0015882:	38 c2                	cmp    dl,al
c0015884:	74 04                	je     c001588a <HalMakeBeep(int)+0x38>
c0015886:	88 d0                	mov    al,dl
c0015888:	e6 61                	out    0x61,al
c001588a:	5b                   	pop    ebx
c001588b:	c3                   	ret    

c001588c <HalGetRand()>:
c001588c:	31 c0                	xor    eax,eax
c001588e:	c3                   	ret    

c001588f <HalEndOfInterrupt(int)>:
c001588f:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c0015896:	74 23                	je     c00158bb <HalEndOfInterrupt(int)+0x2c>
c0015898:	83 ec 14             	sub    esp,0x14
c001589b:	6a 1b                	push   0x1b
c001589d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00158a3:	e8 4a 15 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00158a8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158ad:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00158b7:	83 c4 1c             	add    esp,0x1c
c00158ba:	c3                   	ret    
c00158bb:	e9 54 02 00 00       	jmp    c0015b14 <picEOI(int)>

c00158c0 <HalRestart()>:
c00158c0:	c3                   	ret    

c00158c1 <HalShutdown()>:
c00158c1:	c3                   	ret    

c00158c2 <HalSleep()>:
c00158c2:	c3                   	ret    
c00158c3:	90                   	nop

c00158c4 <picIoWait()>:
c00158c4:	eb 00                	jmp    c00158c6 <picIoWait()+0x2>
c00158c6:	eb 00                	jmp    c00158c8 <picIoWait()+0x4>
c00158c8:	90                   	nop
c00158c9:	c3                   	ret    
c00158ca:	66 90                	xchg   ax,ax

c00158cc <picDisable()>:
c00158cc:	83 ec 10             	sub    esp,0x10
c00158cf:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00158d6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00158db:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00158df:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00158e4:	ee                   	out    dx,al
c00158e5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00158ec:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00158f1:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00158f5:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00158fa:	ee                   	out    dx,al
c00158fb:	90                   	nop
c00158fc:	83 c4 10             	add    esp,0x10
c00158ff:	c3                   	ret    

c0015900 <picGetIRQReg(int)>:
c0015900:	83 ec 10             	sub    esp,0x10
c0015903:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015907:	25 ff 00 00 00       	and    eax,0xff
c001590c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015913:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015917:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001591b:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015920:	ee                   	out    dx,al
c0015921:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015925:	25 ff 00 00 00       	and    eax,0xff
c001592a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015931:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015935:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015939:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001593e:	ee                   	out    dx,al
c001593f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015946:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001594b:	89 c2                	mov    edx,eax
c001594d:	ec                   	in     al,dx
c001594e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015952:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015956:	25 ff 00 00 00       	and    eax,0xff
c001595b:	c1 e0 08             	shl    eax,0x8
c001595e:	89 c1                	mov    ecx,eax
c0015960:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015967:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001596c:	89 c2                	mov    edx,eax
c001596e:	ec                   	in     al,dx
c001596f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015973:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015977:	25 ff 00 00 00       	and    eax,0xff
c001597c:	09 c8                	or     eax,ecx
c001597e:	83 c4 10             	add    esp,0x10
c0015981:	c3                   	ret    
c0015982:	66 90                	xchg   ax,ax

c0015984 <picOpen()>:
c0015984:	83 ec 50             	sub    esp,0x50
c0015987:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001598e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015993:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015997:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001599b:	ee                   	out    dx,al
c001599c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00159a3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00159a8:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00159ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00159b0:	ee                   	out    dx,al
c00159b1:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00159b9:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00159c1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00159c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00159cc:	89 c2                	mov    edx,eax
c00159ce:	ec                   	in     al,dx
c00159cf:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00159d3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00159d7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00159db:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00159e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00159e6:	89 c2                	mov    edx,eax
c00159e8:	ec                   	in     al,dx
c00159e9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00159ed:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00159f1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00159f5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00159fc:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015a01:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015a05:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a09:	ee                   	out    dx,al
c0015a0a:	e8 b5 fe ff ff       	call   c00158c4 <picIoWait()>
c0015a0f:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015a16:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015a1b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015a1f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a23:	ee                   	out    dx,al
c0015a24:	e8 9b fe ff ff       	call   c00158c4 <picIoWait()>
c0015a29:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a2d:	25 ff 00 00 00       	and    eax,0xff
c0015a32:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015a39:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015a3d:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015a41:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a45:	ee                   	out    dx,al
c0015a46:	e8 79 fe ff ff       	call   c00158c4 <picIoWait()>
c0015a4b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015a4f:	25 ff 00 00 00       	and    eax,0xff
c0015a54:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015a5b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015a5f:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015a63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015a67:	ee                   	out    dx,al
c0015a68:	e8 57 fe ff ff       	call   c00158c4 <picIoWait()>
c0015a6d:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015a74:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015a79:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015a7d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015a81:	ee                   	out    dx,al
c0015a82:	e8 3d fe ff ff       	call   c00158c4 <picIoWait()>
c0015a87:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015a8e:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015a93:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015a97:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015a9b:	ee                   	out    dx,al
c0015a9c:	e8 23 fe ff ff       	call   c00158c4 <picIoWait()>
c0015aa1:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015aa8:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015aad:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015ab1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015ab5:	ee                   	out    dx,al
c0015ab6:	e8 09 fe ff ff       	call   c00158c4 <picIoWait()>
c0015abb:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015ac2:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015ac7:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015acb:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015acf:	ee                   	out    dx,al
c0015ad0:	e8 ef fd ff ff       	call   c00158c4 <picIoWait()>
c0015ad5:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015ad9:	25 ff 00 00 00       	and    eax,0xff
c0015ade:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015ae5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015ae9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015aed:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015af1:	ee                   	out    dx,al
c0015af2:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015af6:	25 ff 00 00 00       	and    eax,0xff
c0015afb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015b02:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015b06:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015b0a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015b0e:	ee                   	out    dx,al
c0015b0f:	90                   	nop
c0015b10:	83 c4 50             	add    esp,0x50
c0015b13:	c3                   	ret    

c0015b14 <picEOI(int)>:
c0015b14:	83 ec 10             	sub    esp,0x10
c0015b17:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b1c:	75 22                	jne    c0015b40 <picEOI(int)+0x2c>
c0015b1e:	6a 0b                	push   0xb
c0015b20:	e8 db fd ff ff       	call   c0015900 <picGetIRQReg(int)>
c0015b25:	83 c4 04             	add    esp,0x4
c0015b28:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015b2d:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015b32:	25 ff ff 00 00       	and    eax,0xffff
c0015b37:	25 80 00 00 00       	and    eax,0x80
c0015b3c:	74 72                	je     c0015bb0 <picEOI(int)+0x9c>
c0015b3e:	66 90                	xchg   ax,ax
c0015b40:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015b45:	75 31                	jne    c0015b78 <picEOI(int)+0x64>
c0015b47:	6a 0b                	push   0xb
c0015b49:	e8 b2 fd ff ff       	call   c0015900 <picGetIRQReg(int)>
c0015b4e:	83 c4 04             	add    esp,0x4
c0015b51:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015b56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b5a:	66 85 c0             	test   ax,ax
c0015b5d:	78 19                	js     c0015b78 <picEOI(int)+0x64>
c0015b5f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015b66:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015b6b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015b6f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015b74:	ee                   	out    dx,al
c0015b75:	eb 3d                	jmp    c0015bb4 <picEOI(int)+0xa0>
c0015b77:	90                   	nop
c0015b78:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b7d:	7e 19                	jle    c0015b98 <picEOI(int)+0x84>
c0015b7f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015b86:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015b8b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015b8f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015b94:	ee                   	out    dx,al
c0015b95:	8d 76 00             	lea    esi,[esi+0x0]
c0015b98:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015b9f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015ba4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015ba8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015bad:	ee                   	out    dx,al
c0015bae:	eb 04                	jmp    c0015bb4 <picEOI(int)+0xa0>
c0015bb0:	90                   	nop
c0015bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0015bb4:	83 c4 10             	add    esp,0x10
c0015bb7:	c3                   	ret    

c0015bb8 <RTC::open(int, int, void*)>:
c0015bb8:	31 c0                	xor    eax,eax
c0015bba:	c3                   	ret    
c0015bbb:	90                   	nop

c0015bbc <RTC::close(int, int, void*)>:
c0015bbc:	31 c0                	xor    eax,eax
c0015bbe:	c3                   	ret    
c0015bbf:	90                   	nop

c0015bc0 <RTC::timeInSecondsUTC()>:
c0015bc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bc4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015bca:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015bd0:	c3                   	ret    
c0015bd1:	90                   	nop

c0015bd2 <RTC::timeInDatetimeUTC()>:
c0015bd2:	53                   	push   ebx
c0015bd3:	83 ec 14             	sub    esp,0x14
c0015bd6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015bda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bde:	8b 10                	mov    edx,DWORD PTR [eax]
c0015be0:	50                   	push   eax
c0015be1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015be4:	83 c4 0c             	add    esp,0xc
c0015be7:	52                   	push   edx
c0015be8:	50                   	push   eax
c0015be9:	53                   	push   ebx
c0015bea:	e8 0d 5b ff ff       	call   c000b6fc <secondsToDatetime(unsigned long long)>
c0015bef:	89 d8                	mov    eax,ebx
c0015bf1:	83 c4 14             	add    esp,0x14
c0015bf4:	5b                   	pop    ebx
c0015bf5:	c2 04 00             	ret    0x4

c0015bf8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015bf8:	56                   	push   esi
c0015bf9:	53                   	push   ebx
c0015bfa:	83 ec 14             	sub    esp,0x14
c0015bfd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015c01:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c03:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015c06:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015c0a:	52                   	push   edx
c0015c0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c13:	50                   	push   eax
c0015c14:	e8 e3 5a ff ff       	call   c000b6fc <secondsToDatetime(unsigned long long)>
c0015c19:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c1d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c21:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c25:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015c29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c2d:	89 f0                	mov    eax,esi
c0015c2f:	83 c4 20             	add    esp,0x20
c0015c32:	5b                   	pop    ebx
c0015c33:	5e                   	pop    esi
c0015c34:	ff e0                	jmp    eax

c0015c36 <RTC::~RTC()>:
c0015c36:	83 ec 0c             	sub    esp,0xc
c0015c39:	ba 84 ef 01 c0       	mov    edx,0xc001ef84
c0015c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c42:	89 10                	mov    DWORD PTR [eax],edx
c0015c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c48:	83 ec 0c             	sub    esp,0xc
c0015c4b:	50                   	push   eax
c0015c4c:	e8 2f 58 ff ff       	call   c000b480 <Clock::~Clock()>
c0015c51:	83 c4 10             	add    esp,0x10
c0015c54:	90                   	nop
c0015c55:	83 c4 0c             	add    esp,0xc
c0015c58:	c3                   	ret    
c0015c59:	90                   	nop

c0015c5a <RTC::~RTC()>:
c0015c5a:	83 ec 0c             	sub    esp,0xc
c0015c5d:	83 ec 0c             	sub    esp,0xc
c0015c60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c64:	e8 cd ff ff ff       	call   c0015c36 <RTC::~RTC()>
c0015c69:	83 c4 10             	add    esp,0x10
c0015c6c:	83 ec 08             	sub    esp,0x8
c0015c6f:	68 60 01 00 00       	push   0x160
c0015c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c78:	e8 d7 47 ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c0015c7d:	83 c4 10             	add    esp,0x10
c0015c80:	83 c4 0c             	add    esp,0xc
c0015c83:	c3                   	ret    

c0015c84 <RTC::get_update_in_progress_flag()>:
c0015c84:	83 ec 14             	sub    esp,0x14
c0015c87:	6a 0a                	push   0xa
c0015c89:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015c8f:	e8 12 12 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015c94:	83 c4 1c             	add    esp,0x1c
c0015c97:	c0 e8 07             	shr    al,0x7
c0015c9a:	c3                   	ret    
c0015c9b:	90                   	nop

c0015c9c <RTC::completeRTCRefresh()>:
c0015c9c:	55                   	push   ebp
c0015c9d:	57                   	push   edi
c0015c9e:	56                   	push   esi
c0015c9f:	53                   	push   ebx
c0015ca0:	83 ec 2c             	sub    esp,0x2c
c0015ca3:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015ca9:	83 ec 0c             	sub    esp,0xc
c0015cac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015cb0:	e8 cf ff ff ff       	call   c0015c84 <RTC::get_update_in_progress_flag()>
c0015cb5:	83 c4 10             	add    esp,0x10
c0015cb8:	84 c0                	test   al,al
c0015cba:	74 0e                	je     c0015cca <RTC::completeRTCRefresh()+0x2e>
c0015cbc:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015cc2:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015cc8:	73 df                	jae    c0015ca9 <RTC::completeRTCRefresh()+0xd>
c0015cca:	55                   	push   ebp
c0015ccb:	55                   	push   ebp
c0015ccc:	6a 00                	push   0x0
c0015cce:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015cd4:	e8 cd 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cd9:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015cdd:	58                   	pop    eax
c0015cde:	5a                   	pop    edx
c0015cdf:	6a 02                	push   0x2
c0015ce1:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015ce7:	e8 ba 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cec:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015cf0:	59                   	pop    ecx
c0015cf1:	5b                   	pop    ebx
c0015cf2:	6a 04                	push   0x4
c0015cf4:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015cfa:	e8 a7 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015cff:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015d03:	5e                   	pop    esi
c0015d04:	5f                   	pop    edi
c0015d05:	6a 07                	push   0x7
c0015d07:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d0d:	e8 94 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d12:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d16:	5d                   	pop    ebp
c0015d17:	58                   	pop    eax
c0015d18:	6a 08                	push   0x8
c0015d1a:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d20:	e8 81 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d25:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015d29:	58                   	pop    eax
c0015d2a:	5a                   	pop    edx
c0015d2b:	6a 09                	push   0x9
c0015d2d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d33:	e8 6e 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d38:	83 c4 10             	add    esp,0x10
c0015d3b:	0f b6 e8             	movzx  ebp,al
c0015d3e:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015d44:	83 ec 0c             	sub    esp,0xc
c0015d47:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d4b:	e8 34 ff ff ff       	call   c0015c84 <RTC::get_update_in_progress_flag()>
c0015d50:	83 c4 10             	add    esp,0x10
c0015d53:	84 c0                	test   al,al
c0015d55:	74 0e                	je     c0015d65 <RTC::completeRTCRefresh()+0xc9>
c0015d57:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d5d:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015d63:	73 df                	jae    c0015d44 <RTC::completeRTCRefresh()+0xa8>
c0015d65:	50                   	push   eax
c0015d66:	50                   	push   eax
c0015d67:	6a 00                	push   0x0
c0015d69:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d6f:	e8 32 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d74:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015d78:	58                   	pop    eax
c0015d79:	5a                   	pop    edx
c0015d7a:	6a 02                	push   0x2
c0015d7c:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d82:	e8 1f 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d87:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015d8b:	59                   	pop    ecx
c0015d8c:	5b                   	pop    ebx
c0015d8d:	6a 04                	push   0x4
c0015d8f:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d95:	e8 0c 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d9a:	5e                   	pop    esi
c0015d9b:	88 c3                	mov    bl,al
c0015d9d:	5f                   	pop    edi
c0015d9e:	6a 07                	push   0x7
c0015da0:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015da6:	e8 fb 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dab:	89 c6                	mov    esi,eax
c0015dad:	58                   	pop    eax
c0015dae:	5a                   	pop    edx
c0015daf:	6a 08                	push   0x8
c0015db1:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015db7:	e8 ea 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dbc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015dc0:	59                   	pop    ecx
c0015dc1:	5f                   	pop    edi
c0015dc2:	6a 09                	push   0x9
c0015dc4:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dca:	e8 d7 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dcf:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015dd3:	0f b6 f8             	movzx  edi,al
c0015dd6:	83 c4 10             	add    esp,0x10
c0015dd9:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015ddd:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015de1:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015de5:	89 f1                	mov    ecx,esi
c0015de7:	0f 94 c0             	sete   al
c0015dea:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015dee:	0f 94 c2             	sete   dl
c0015df1:	21 d0                	and    eax,edx
c0015df3:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015df7:	0f 94 c2             	sete   dl
c0015dfa:	21 c2                	and    edx,eax
c0015dfc:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015e00:	0f 94 c0             	sete   al
c0015e03:	21 d0                	and    eax,edx
c0015e05:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015e09:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015e0d:	0f 94 c1             	sete   cl
c0015e10:	84 c8                	test   al,cl
c0015e12:	75 29                	jne    c0015e3d <RTC::completeRTCRefresh()+0x1a1>
c0015e14:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015e18:	89 fd                	mov    ebp,edi
c0015e1a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015e1e:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015e22:	89 f0                	mov    eax,esi
c0015e24:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015e28:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e2c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e30:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e34:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015e38:	e9 01 ff ff ff       	jmp    c0015d3e <RTC::completeRTCRefresh()+0xa2>
c0015e3d:	39 fd                	cmp    ebp,edi
c0015e3f:	75 d3                	jne    c0015e14 <RTC::completeRTCRefresh()+0x178>
c0015e41:	55                   	push   ebp
c0015e42:	55                   	push   ebp
c0015e43:	6a 0b                	push   0xb
c0015e45:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e4b:	e8 56 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e50:	83 c4 10             	add    esp,0x10
c0015e53:	89 c5                	mov    ebp,eax
c0015e55:	a8 04                	test   al,0x4
c0015e57:	75 78                	jne    c0015ed1 <RTC::completeRTCRefresh()+0x235>
c0015e59:	b1 0a                	mov    cl,0xa
c0015e5b:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015e5f:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e63:	83 e2 0f             	and    edx,0xf
c0015e66:	c0 e8 04             	shr    al,0x4
c0015e69:	c1 ef 04             	shr    edi,0x4
c0015e6c:	f6 e1                	mul    cl
c0015e6e:	6b ff 0a             	imul   edi,edi,0xa
c0015e71:	01 d0                	add    eax,edx
c0015e73:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015e77:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015e7b:	83 e2 0f             	and    edx,0xf
c0015e7e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e82:	c0 e8 04             	shr    al,0x4
c0015e85:	f6 e1                	mul    cl
c0015e87:	01 d0                	add    eax,edx
c0015e89:	88 da                	mov    dl,bl
c0015e8b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015e8f:	83 e2 0f             	and    edx,0xf
c0015e92:	88 d8                	mov    al,bl
c0015e94:	83 e3 80             	and    ebx,0xffffff80
c0015e97:	c0 e8 04             	shr    al,0x4
c0015e9a:	83 e0 07             	and    eax,0x7
c0015e9d:	f6 e1                	mul    cl
c0015e9f:	01 d0                	add    eax,edx
c0015ea1:	89 f2                	mov    edx,esi
c0015ea3:	09 c3                	or     ebx,eax
c0015ea5:	83 e2 0f             	and    edx,0xf
c0015ea8:	89 f0                	mov    eax,esi
c0015eaa:	c0 e8 04             	shr    al,0x4
c0015ead:	f6 e1                	mul    cl
c0015eaf:	8d 34 02             	lea    esi,[edx+eax*1]
c0015eb2:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015eb6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015eba:	83 e2 0f             	and    edx,0xf
c0015ebd:	c0 e8 04             	shr    al,0x4
c0015ec0:	f6 e1                	mul    cl
c0015ec2:	01 d0                	add    eax,edx
c0015ec4:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015ec8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ecc:	83 e0 0f             	and    eax,0xf
c0015ecf:	01 c7                	add    edi,eax
c0015ed1:	83 e5 02             	and    ebp,0x2
c0015ed4:	75 14                	jne    c0015eea <RTC::completeRTCRefresh()+0x24e>
c0015ed6:	84 db                	test   bl,bl
c0015ed8:	79 10                	jns    c0015eea <RTC::completeRTCRefresh()+0x24e>
c0015eda:	83 e3 7f             	and    ebx,0x7f
c0015edd:	b9 18 00 00 00       	mov    ecx,0x18
c0015ee2:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015ee5:	99                   	cdq    
c0015ee6:	f7 f9                	idiv   ecx
c0015ee8:	88 d3                	mov    bl,dl
c0015eea:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015ef0:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015ef6:	77 06                	ja     c0015efe <RTC::completeRTCRefresh()+0x262>
c0015ef8:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015efe:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015f03:	31 d2                	xor    edx,edx
c0015f05:	c1 e1 10             	shl    ecx,0x10
c0015f08:	89 d7                	mov    edi,edx
c0015f0a:	c1 e5 10             	shl    ebp,0x10
c0015f0d:	31 c0                	xor    eax,eax
c0015f0f:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015f15:	09 cf                	or     edi,ecx
c0015f17:	89 fa                	mov    edx,edi
c0015f19:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015f1d:	88 da                	mov    dl,bl
c0015f1f:	89 f3                	mov    ebx,esi
c0015f21:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015f25:	88 d8                	mov    al,bl
c0015f27:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015f2b:	0f b7 c8             	movzx  ecx,ax
c0015f2e:	09 e9                	or     ecx,ebp
c0015f30:	89 c8                	mov    eax,ecx
c0015f32:	51                   	push   ecx
c0015f33:	51                   	push   ecx
c0015f34:	52                   	push   edx
c0015f35:	50                   	push   eax
c0015f36:	e8 34 56 ff ff       	call   c000b56f <datetimeToSeconds(datetime_t)>
c0015f3b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015f3f:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015f45:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015f4b:	83 c4 3c             	add    esp,0x3c
c0015f4e:	5b                   	pop    ebx
c0015f4f:	5e                   	pop    esi
c0015f50:	5f                   	pop    edi
c0015f51:	5d                   	pop    ebp
c0015f52:	c3                   	ret    
c0015f53:	90                   	nop

c0015f54 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015f54:	55                   	push   ebp
c0015f55:	57                   	push   edi
c0015f56:	56                   	push   esi
c0015f57:	53                   	push   ebx
c0015f58:	83 ec 30             	sub    esp,0x30
c0015f5b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015f5f:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015f63:	6a 00                	push   0x0
c0015f65:	6a 00                	push   0x0
c0015f67:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015f6d:	e8 4a 10 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f72:	83 c4 0c             	add    esp,0xc
c0015f75:	6a 00                	push   0x0
c0015f77:	6a 02                	push   0x2
c0015f79:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015f7f:	e8 38 10 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f84:	31 d2                	xor    edx,edx
c0015f86:	89 f9                	mov    ecx,edi
c0015f88:	89 f8                	mov    eax,edi
c0015f8a:	c1 e9 10             	shr    ecx,0x10
c0015f8d:	0f b6 c4             	movzx  eax,ah
c0015f90:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015f94:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015f98:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015f9c:	b9 64 00 00 00       	mov    ecx,0x64
c0015fa1:	89 f0                	mov    eax,esi
c0015fa3:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015fa7:	89 f0                	mov    eax,esi
c0015fa9:	0f b6 c4             	movzx  eax,ah
c0015fac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015fb0:	89 f0                	mov    eax,esi
c0015fb2:	c1 e8 10             	shr    eax,0x10
c0015fb5:	66 f7 f1             	div    cx
c0015fb8:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015fbd:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015fc2:	59                   	pop    ecx
c0015fc3:	5b                   	pop    ebx
c0015fc4:	89 fb                	mov    ebx,edi
c0015fc6:	6a 0b                	push   0xb
c0015fc8:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015fce:	e8 d3 0e ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015fd3:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015fd7:	83 c4 10             	add    esp,0x10
c0015fda:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015fdf:	75 74                	jne    c0016055 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015fe1:	b2 0a                	mov    dl,0xa
c0015fe3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015fe7:	0f b6 c1             	movzx  eax,cl
c0015fea:	f6 f2                	div    dl
c0015fec:	88 c3                	mov    bl,al
c0015fee:	88 e0                	mov    al,ah
c0015ff0:	c1 e3 04             	shl    ebx,0x4
c0015ff3:	09 c3                	or     ebx,eax
c0015ff5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015ffa:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015ffe:	f6 f2                	div    dl
c0016000:	88 c1                	mov    cl,al
c0016002:	88 e0                	mov    al,ah
c0016004:	c1 e1 04             	shl    ecx,0x4
c0016007:	09 c1                	or     ecx,eax
c0016009:	89 f8                	mov    eax,edi
c001600b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001600f:	0f b6 c0             	movzx  eax,al
c0016012:	f6 f2                	div    dl
c0016014:	88 c3                	mov    bl,al
c0016016:	88 e0                	mov    al,ah
c0016018:	c1 e3 04             	shl    ebx,0x4
c001601b:	09 c3                	or     ebx,eax
c001601d:	89 f0                	mov    eax,esi
c001601f:	0f b6 c0             	movzx  eax,al
c0016022:	f6 f2                	div    dl
c0016024:	88 c1                	mov    cl,al
c0016026:	88 e0                	mov    al,ah
c0016028:	c1 e1 04             	shl    ecx,0x4
c001602b:	09 c1                	or     ecx,eax
c001602d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016032:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0016036:	f6 f2                	div    dl
c0016038:	88 c1                	mov    cl,al
c001603a:	88 e0                	mov    al,ah
c001603c:	c1 e1 04             	shl    ecx,0x4
c001603f:	09 c1                	or     ecx,eax
c0016041:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0016046:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001604a:	f6 f2                	div    dl
c001604c:	89 c5                	mov    ebp,eax
c001604e:	88 e0                	mov    al,ah
c0016050:	c1 e5 04             	shl    ebp,0x4
c0016053:	09 c5                	or     ebp,eax
c0016055:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c001605a:	75 17                	jne    c0016073 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c001605c:	80 fb 0b             	cmp    bl,0xb
c001605f:	76 0c                	jbe    c001606d <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0016061:	80 eb 0c             	sub    bl,0xc
c0016064:	75 02                	jne    c0016068 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0016066:	b3 0c                	mov    bl,0xc
c0016068:	83 cb 80             	or     ebx,0xffffff80
c001606b:	eb 06                	jmp    c0016073 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c001606d:	84 db                	test   bl,bl
c001606f:	75 02                	jne    c0016073 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016071:	b3 0c                	mov    bl,0xc
c0016073:	0f b6 db             	movzx  ebx,bl
c0016076:	50                   	push   eax
c0016077:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001607c:	50                   	push   eax
c001607d:	6a 00                	push   0x0
c001607f:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016085:	e8 32 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001608a:	83 c4 0c             	add    esp,0xc
c001608d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016092:	50                   	push   eax
c0016093:	6a 02                	push   0x2
c0016095:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001609b:	e8 1c 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160a0:	83 c4 0c             	add    esp,0xc
c00160a3:	53                   	push   ebx
c00160a4:	6a 04                	push   0x4
c00160a6:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160ac:	e8 0b 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160b1:	83 c4 0c             	add    esp,0xc
c00160b4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00160b9:	50                   	push   eax
c00160ba:	6a 07                	push   0x7
c00160bc:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160c2:	e8 f5 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160c7:	83 c4 0c             	add    esp,0xc
c00160ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00160cf:	50                   	push   eax
c00160d0:	6a 08                	push   0x8
c00160d2:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160d8:	e8 df 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160dd:	83 c4 0c             	add    esp,0xc
c00160e0:	89 e8                	mov    eax,ebp
c00160e2:	0f b6 e8             	movzx  ebp,al
c00160e5:	55                   	push   ebp
c00160e6:	6a 09                	push   0x9
c00160e8:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00160ee:	e8 c9 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160f3:	5a                   	pop    edx
c00160f4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00160f8:	e8 9f fb ff ff       	call   c0015c9c <RTC::completeRTCRefresh()>
c00160fd:	83 c4 3c             	add    esp,0x3c
c0016100:	b0 01                	mov    al,0x1
c0016102:	5b                   	pop    ebx
c0016103:	5e                   	pop    esi
c0016104:	5f                   	pop    edi
c0016105:	5d                   	pop    ebp
c0016106:	c3                   	ret    

c0016107 <rtcIRQHandler(regs*, void*)>:
c0016107:	53                   	push   ebx
c0016108:	83 ec 10             	sub    esp,0x10
c001610b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001610f:	6a 0c                	push   0xc
c0016111:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016117:	e8 8a 0d ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001611c:	83 c4 10             	add    esp,0x10
c001611f:	84 c0                	test   al,al
c0016121:	79 24                	jns    c0016147 <rtcIRQHandler(regs*, void*)+0x40>
c0016123:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001612a:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0016131:	66 ff 05 14 52 02 c0 	inc    WORD PTR ds:0xc0025214
c0016138:	75 0d                	jne    c0016147 <rtcIRQHandler(regs*, void*)+0x40>
c001613a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001613e:	83 c4 08             	add    esp,0x8
c0016141:	5b                   	pop    ebx
c0016142:	e9 55 fb ff ff       	jmp    c0015c9c <RTC::completeRTCRefresh()>
c0016147:	83 c4 08             	add    esp,0x8
c001614a:	5b                   	pop    ebx
c001614b:	c3                   	ret    

c001614c <RTC::RTC()>:
c001614c:	83 ec 1c             	sub    esp,0x1c
c001614f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016153:	83 ec 08             	sub    esp,0x8
c0016156:	68 67 ef 01 c0       	push   0xc001ef67
c001615b:	50                   	push   eax
c001615c:	e8 e9 52 ff ff       	call   c000b44a <Clock::Clock(char const*)>
c0016161:	83 c4 10             	add    esp,0x10
c0016164:	ba 84 ef 01 c0       	mov    edx,0xc001ef84
c0016169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001616d:	89 10                	mov    DWORD PTR [eax],edx
c001616f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016173:	83 ec 0c             	sub    esp,0xc
c0016176:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001617a:	6a 01                	push   0x1
c001617c:	68 07 61 01 c0       	push   0xc0016107
c0016181:	6a 08                	push   0x8
c0016183:	50                   	push   eax
c0016184:	e8 ab 57 ff ff       	call   c000b934 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0016189:	83 c4 20             	add    esp,0x20
c001618c:	89 c2                	mov    edx,eax
c001618e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016192:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0016198:	fa                   	cli    
c0016199:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001619e:	40                   	inc    eax
c001619f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00161a4:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00161a9:	83 ec 08             	sub    esp,0x8
c00161ac:	6a 0b                	push   0xb
c00161ae:	50                   	push   eax
c00161af:	e8 f2 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00161b4:	83 c4 10             	add    esp,0x10
c00161b7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00161bb:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00161c0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00161c4:	83 ca 10             	or     edx,0x10
c00161c7:	81 e2 ff 00 00 00    	and    edx,0xff
c00161cd:	83 ec 04             	sub    esp,0x4
c00161d0:	52                   	push   edx
c00161d1:	6a 0b                	push   0xb
c00161d3:	50                   	push   eax
c00161d4:	e8 e3 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161d9:	83 c4 10             	add    esp,0x10
c00161dc:	83 ec 0c             	sub    esp,0xc
c00161df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161e3:	e8 b4 fa ff ff       	call   c0015c9c <RTC::completeRTCRefresh()>
c00161e8:	83 c4 10             	add    esp,0x10
c00161eb:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00161f0:	48                   	dec    eax
c00161f1:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00161f6:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00161fb:	85 c0                	test   eax,eax
c00161fd:	75 01                	jne    c0016200 <RTC::RTC()+0xb4>
c00161ff:	fb                   	sti    
c0016200:	90                   	nop
c0016201:	83 c4 1c             	add    esp,0x1c
c0016204:	c3                   	ret    
c0016205:	66 90                	xchg   ax,ax
c0016207:	90                   	nop

c0016208 <HalConsoleScroll(int, int)>:
c0016208:	83 ec 10             	sub    esp,0x10
c001620b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0016213:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001621b:	90                   	nop
c001621c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016221:	0f 8f e1 00 00 00    	jg     c0016308 <HalConsoleScroll(int, int)+0x100>
c0016227:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001622f:	90                   	nop
c0016230:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0016238:	0f 8f be 00 00 00    	jg     c00162fc <HalConsoleScroll(int, int)+0xf4>
c001623e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016242:	89 d0                	mov    eax,edx
c0016244:	c1 e0 02             	shl    eax,0x2
c0016247:	01 d0                	add    eax,edx
c0016249:	c1 e0 05             	shl    eax,0x5
c001624c:	89 c2                	mov    edx,eax
c001624e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016252:	01 d0                	add    eax,edx
c0016254:	89 c2                	mov    edx,eax
c0016256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001625a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001625d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016261:	89 d0                	mov    eax,edx
c0016263:	c1 e0 02             	shl    eax,0x2
c0016266:	01 d0                	add    eax,edx
c0016268:	c1 e0 05             	shl    eax,0x5
c001626b:	89 c2                	mov    edx,eax
c001626d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016271:	01 d0                	add    eax,edx
c0016273:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0016279:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001627d:	01 c2                	add    edx,eax
c001627f:	8a 01                	mov    al,BYTE PTR [ecx]
c0016281:	88 02                	mov    BYTE PTR [edx],al
c0016283:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016288:	75 66                	jne    c00162f0 <HalConsoleScroll(int, int)+0xe8>
c001628a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001628e:	83 e0 01             	and    eax,0x1
c0016291:	74 39                	je     c00162cc <HalConsoleScroll(int, int)+0xc4>
c0016293:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016297:	83 e0 0f             	and    eax,0xf
c001629a:	88 c2                	mov    dl,al
c001629c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00162a0:	c1 e0 04             	shl    eax,0x4
c00162a3:	88 d1                	mov    cl,dl
c00162a5:	09 c1                	or     ecx,eax
c00162a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162ab:	89 d0                	mov    eax,edx
c00162ad:	c1 e0 02             	shl    eax,0x2
c00162b0:	01 d0                	add    eax,edx
c00162b2:	c1 e0 05             	shl    eax,0x5
c00162b5:	89 c2                	mov    edx,eax
c00162b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162bb:	01 d0                	add    eax,edx
c00162bd:	89 c2                	mov    edx,eax
c00162bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162c3:	01 d0                	add    eax,edx
c00162c5:	88 ca                	mov    dl,cl
c00162c7:	88 10                	mov    BYTE PTR [eax],dl
c00162c9:	eb 25                	jmp    c00162f0 <HalConsoleScroll(int, int)+0xe8>
c00162cb:	90                   	nop
c00162cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162d0:	89 d0                	mov    eax,edx
c00162d2:	c1 e0 02             	shl    eax,0x2
c00162d5:	01 d0                	add    eax,edx
c00162d7:	c1 e0 05             	shl    eax,0x5
c00162da:	89 c2                	mov    edx,eax
c00162dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162e0:	01 d0                	add    eax,edx
c00162e2:	89 c2                	mov    edx,eax
c00162e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162e8:	01 d0                	add    eax,edx
c00162ea:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00162ed:	8d 76 00             	lea    esi,[esi+0x0]
c00162f0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00162f4:	e9 37 ff ff ff       	jmp    c0016230 <HalConsoleScroll(int, int)+0x28>
c00162f9:	8d 76 00             	lea    esi,[esi+0x0]
c00162fc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016300:	e9 17 ff ff ff       	jmp    c001621c <HalConsoleScroll(int, int)+0x14>
c0016305:	8d 76 00             	lea    esi,[esi+0x0]
c0016308:	90                   	nop
c0016309:	83 c4 10             	add    esp,0x10
c001630c:	c3                   	ret    
c001630d:	8d 76 00             	lea    esi,[esi+0x0]

c0016310 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0016310:	83 ec 14             	sub    esp,0x14
c0016313:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016317:	88 04 24             	mov    BYTE PTR [esp],al
c001631a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001631d:	25 ff 00 00 00       	and    eax,0xff
c0016322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016326:	89 d1                	mov    ecx,edx
c0016328:	83 e1 0f             	and    ecx,0xf
c001632b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001632f:	c1 e2 04             	shl    edx,0x4
c0016332:	81 e2 ff 00 00 00    	and    edx,0xff
c0016338:	09 ca                	or     edx,ecx
c001633a:	c1 e2 08             	shl    edx,0x8
c001633d:	09 d0                	or     eax,edx
c001633f:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016344:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001634c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016350:	89 d0                	mov    eax,edx
c0016352:	c1 e0 02             	shl    eax,0x2
c0016355:	01 d0                	add    eax,edx
c0016357:	c1 e0 04             	shl    eax,0x4
c001635a:	89 c2                	mov    edx,eax
c001635c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016360:	01 d0                	add    eax,edx
c0016362:	01 c0                	add    eax,eax
c0016364:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0016368:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001636c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016371:	66 89 02             	mov    WORD PTR [edx],ax
c0016374:	90                   	nop
c0016375:	83 c4 14             	add    esp,0x14
c0016378:	c3                   	ret    
c0016379:	8d 76 00             	lea    esi,[esi+0x0]

c001637c <HalConsoleCursorUpdate(int, int)>:
c001637c:	83 ec 20             	sub    esp,0x20
c001637f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016383:	89 c2                	mov    edx,eax
c0016385:	89 d0                	mov    eax,edx
c0016387:	c1 e0 02             	shl    eax,0x2
c001638a:	01 d0                	add    eax,edx
c001638c:	c1 e0 04             	shl    eax,0x4
c001638f:	89 c2                	mov    edx,eax
c0016391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016395:	01 d0                	add    eax,edx
c0016397:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001639c:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00163a3:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00163a8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00163ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163b0:	ee                   	out    dx,al
c00163b1:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00163b6:	25 ff 00 00 00       	and    eax,0xff
c00163bb:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00163c2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00163c6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00163ca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00163ce:	ee                   	out    dx,al
c00163cf:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00163d6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00163db:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00163df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00163e3:	ee                   	out    dx,al
c00163e4:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00163e9:	66 c1 e8 08          	shr    ax,0x8
c00163ed:	25 ff 00 00 00       	and    eax,0xff
c00163f2:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00163f9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00163fd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016401:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016405:	ee                   	out    dx,al
c0016406:	90                   	nop
c0016407:	83 c4 20             	add    esp,0x20
c001640a:	c3                   	ret    
c001640b:	90                   	nop

c001640c <FAT::getName()>:
c001640c:	b8 b8 ef 01 c0       	mov    eax,0xc001efb8
c0016411:	c3                   	ret    
c0016412:	66 90                	xchg   ax,ax

c0016414 <FAT::tell(void*, unsigned long long*)>:
c0016414:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016419:	75 09                	jne    c0016424 <FAT::tell(void*, unsigned long long*)+0x10>
c001641b:	b8 04 00 00 00       	mov    eax,0x4
c0016420:	c3                   	ret    
c0016421:	8d 76 00             	lea    esi,[esi+0x0]
c0016424:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016429:	75 09                	jne    c0016434 <FAT::tell(void*, unsigned long long*)+0x20>
c001642b:	b8 04 00 00 00       	mov    eax,0x4
c0016430:	c3                   	ret    
c0016431:	8d 76 00             	lea    esi,[esi+0x0]
c0016434:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016438:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001643b:	ba 00 00 00 00       	mov    edx,0x0
c0016440:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016444:	89 01                	mov    DWORD PTR [ecx],eax
c0016446:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016449:	b8 00 00 00 00       	mov    eax,0x0
c001644e:	c3                   	ret    
c001644f:	90                   	nop

c0016450 <FAT::stat(void*, unsigned long long*)>:
c0016450:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016455:	75 09                	jne    c0016460 <FAT::stat(void*, unsigned long long*)+0x10>
c0016457:	b8 04 00 00 00       	mov    eax,0x4
c001645c:	c3                   	ret    
c001645d:	8d 76 00             	lea    esi,[esi+0x0]
c0016460:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016465:	75 09                	jne    c0016470 <FAT::stat(void*, unsigned long long*)+0x20>
c0016467:	b8 04 00 00 00       	mov    eax,0x4
c001646c:	c3                   	ret    
c001646d:	8d 76 00             	lea    esi,[esi+0x0]
c0016470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016474:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0016477:	ba 00 00 00 00       	mov    edx,0x0
c001647c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016480:	89 01                	mov    DWORD PTR [ecx],eax
c0016482:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016485:	b8 00 00 00 00       	mov    eax,0x0
c001648a:	c3                   	ret    
c001648b:	90                   	nop

c001648c <FAT::~FAT()>:
c001648c:	83 ec 0c             	sub    esp,0xc
c001648f:	ba 04 f0 01 c0       	mov    edx,0xc001f004
c0016494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016498:	89 10                	mov    DWORD PTR [eax],edx
c001649a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001649e:	83 ec 0c             	sub    esp,0xc
c00164a1:	50                   	push   eax
c00164a2:	e8 e9 43 ff ff       	call   c000a890 <Filesystem::~Filesystem()>
c00164a7:	83 c4 10             	add    esp,0x10
c00164aa:	90                   	nop
c00164ab:	83 c4 0c             	add    esp,0xc
c00164ae:	c3                   	ret    
c00164af:	90                   	nop

c00164b0 <FAT::~FAT()>:
c00164b0:	83 ec 0c             	sub    esp,0xc
c00164b3:	83 ec 0c             	sub    esp,0xc
c00164b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ba:	e8 cd ff ff ff       	call   c001648c <FAT::~FAT()>
c00164bf:	83 c4 10             	add    esp,0x10
c00164c2:	83 ec 08             	sub    esp,0x8
c00164c5:	6a 08                	push   0x8
c00164c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164cb:	e8 84 3f ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c00164d0:	83 c4 10             	add    esp,0x10
c00164d3:	83 c4 0c             	add    esp,0xc
c00164d6:	c3                   	ret    
c00164d7:	90                   	nop

c00164d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00164d8:	83 ec 1c             	sub    esp,0x1c
c00164db:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00164e2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00164e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00164eb:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00164f2:	83 f8 ff             	cmp    eax,0xffffffff
c00164f5:	75 35                	jne    c001652c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00164f7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00164fb:	88 c2                	mov    dl,al
c00164fd:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016502:	01 d0                	add    eax,edx
c0016504:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016508:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c001650e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016512:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016519:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001651e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016522:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c0016529:	eb 19                	jmp    c0016544 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001652b:	90                   	nop
c001652c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016530:	88 c2                	mov    dl,al
c0016532:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016536:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001653d:	01 d0                	add    eax,edx
c001653f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016543:	90                   	nop
c0016544:	83 ec 04             	sub    esp,0x4
c0016547:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001654b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001654f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0016553:	50                   	push   eax
c0016554:	e8 fb e8 fe ff       	call   c0004e54 <f_getlabel>
c0016559:	83 c4 10             	add    esp,0x10
c001655c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016560:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016565:	75 09                	jne    c0016570 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0016567:	b8 00 00 00 00       	mov    eax,0x0
c001656c:	eb 0a                	jmp    c0016578 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001656e:	66 90                	xchg   ax,ax
c0016570:	b8 01 00 00 00       	mov    eax,0x1
c0016575:	8d 76 00             	lea    esi,[esi+0x0]
c0016578:	83 c4 1c             	add    esp,0x1c
c001657b:	c3                   	ret    

c001657c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001657c:	57                   	push   edi
c001657d:	83 ec 58             	sub    esp,0x58
c0016580:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016588:	8d 54 24 10          	lea    edx,[esp+0x10]
c001658c:	b8 00 00 00 00       	mov    eax,0x0
c0016591:	b9 0f 00 00 00       	mov    ecx,0xf
c0016596:	fc                   	cld    
c0016597:	89 d7                	mov    edi,edx
c0016599:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001659b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001659f:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00165a6:	83 f8 ff             	cmp    eax,0xffffffff
c00165a9:	75 35                	jne    c00165e0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00165ab:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00165af:	88 c2                	mov    dl,al
c00165b1:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00165b6:	01 d0                	add    eax,edx
c00165b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00165bc:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00165c2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165c6:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00165cd:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00165d2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00165d6:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00165dd:	eb 19                	jmp    c00165f8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00165df:	90                   	nop
c00165e0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00165e4:	88 c2                	mov    dl,al
c00165e6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165ea:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00165f1:	01 d0                	add    eax,edx
c00165f3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00165f7:	90                   	nop
c00165f8:	83 ec 08             	sub    esp,0x8
c00165fb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00165ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016603:	50                   	push   eax
c0016604:	e8 b7 a1 fe ff       	call   c00007c0 <strcat>
c0016609:	83 c4 10             	add    esp,0x10
c001660c:	83 ec 0c             	sub    esp,0xc
c001660f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016613:	50                   	push   eax
c0016614:	e8 8c e9 fe ff       	call   c0004fa5 <f_setlabel>
c0016619:	83 c4 10             	add    esp,0x10
c001661c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016620:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016625:	75 09                	jne    c0016630 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0016627:	b8 00 00 00 00       	mov    eax,0x0
c001662c:	eb 0a                	jmp    c0016638 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001662e:	66 90                	xchg   ax,ax
c0016630:	b8 01 00 00 00       	mov    eax,0x1
c0016635:	8d 76 00             	lea    esi,[esi+0x0]
c0016638:	83 c4 58             	add    esp,0x58
c001663b:	5f                   	pop    edi
c001663c:	c3                   	ret    
c001663d:	90                   	nop
c001663e:	66 90                	xchg   ax,ax

c0016640 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016640:	83 ec 2c             	sub    esp,0x2c
c0016643:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001664b:	83 ec 08             	sub    esp,0x8
c001664e:	68 dc ef 01 c0       	push   0xc001efdc
c0016653:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016657:	e8 84 a0 fe ff       	call   c00006e0 <strcmp>
c001665c:	83 c4 10             	add    esp,0x10
c001665f:	85 c0                	test   eax,eax
c0016661:	0f 94 c0             	sete   al
c0016664:	84 c0                	test   al,al
c0016666:	74 10                	je     c0016678 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0016668:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016670:	e9 b3 00 00 00       	jmp    c0016728 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016675:	8d 76 00             	lea    esi,[esi+0x0]
c0016678:	83 ec 08             	sub    esp,0x8
c001667b:	68 ce ef 01 c0       	push   0xc001efce
c0016680:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016684:	e8 57 a0 fe ff       	call   c00006e0 <strcmp>
c0016689:	83 c4 10             	add    esp,0x10
c001668c:	85 c0                	test   eax,eax
c001668e:	0f 94 c0             	sete   al
c0016691:	84 c0                	test   al,al
c0016693:	74 0f                	je     c00166a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016695:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001669d:	e9 86 00 00 00       	jmp    c0016728 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166a2:	66 90                	xchg   ax,ax
c00166a4:	83 ec 08             	sub    esp,0x8
c00166a7:	68 d4 ef 01 c0       	push   0xc001efd4
c00166ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166b0:	e8 2b a0 fe ff       	call   c00006e0 <strcmp>
c00166b5:	83 c4 10             	add    esp,0x10
c00166b8:	85 c0                	test   eax,eax
c00166ba:	0f 94 c0             	sete   al
c00166bd:	84 c0                	test   al,al
c00166bf:	74 0b                	je     c00166cc <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00166c1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166c9:	eb 5d                	jmp    c0016728 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166cb:	90                   	nop
c00166cc:	83 ec 08             	sub    esp,0x8
c00166cf:	68 fc ce 01 c0       	push   0xc001cefc
c00166d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166d8:	e8 03 a0 fe ff       	call   c00006e0 <strcmp>
c00166dd:	83 c4 10             	add    esp,0x10
c00166e0:	85 c0                	test   eax,eax
c00166e2:	0f 94 c0             	sete   al
c00166e5:	84 c0                	test   al,al
c00166e7:	74 0b                	je     c00166f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00166e9:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00166f1:	eb 35                	jmp    c0016728 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166f3:	90                   	nop
c00166f4:	83 ec 08             	sub    esp,0x8
c00166f7:	68 da ef 01 c0       	push   0xc001efda
c00166fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016700:	e8 db 9f fe ff       	call   c00006e0 <strcmp>
c0016705:	83 c4 10             	add    esp,0x10
c0016708:	85 c0                	test   eax,eax
c001670a:	0f 94 c0             	sete   al
c001670d:	84 c0                	test   al,al
c001670f:	74 0b                	je     c001671c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0016711:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016719:	eb 0d                	jmp    c0016728 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001671b:	90                   	nop
c001671c:	b8 08 00 00 00       	mov    eax,0x8
c0016721:	e9 ea 00 00 00       	jmp    c0016810 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016726:	66 90                	xchg   ax,ax
c0016728:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001672f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016734:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016738:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001673f:	83 f8 ff             	cmp    eax,0xffffffff
c0016742:	75 34                	jne    c0016778 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016744:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016748:	88 c2                	mov    dl,al
c001674a:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001674f:	01 d0                	add    eax,edx
c0016751:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016755:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c001675b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001675f:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016766:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001676b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001676f:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c0016776:	eb 18                	jmp    c0016790 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016778:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001677c:	88 c2                	mov    dl,al
c001677e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016782:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016789:	01 d0                	add    eax,edx
c001678b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001678f:	90                   	nop
c0016790:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016794:	88 04 24             	mov    BYTE PTR [esp],al
c0016797:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001679b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001679f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00167a7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00167ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00167b4:	83 ec 0c             	sub    esp,0xc
c00167b7:	68 00 20 00 00       	push   0x2000
c00167bc:	e8 f8 0f ff ff       	call   c00077b9 <malloc>
c00167c1:	83 c4 10             	add    esp,0x10
c00167c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167c8:	68 00 20 00 00       	push   0x2000
c00167cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167d1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00167d5:	50                   	push   eax
c00167d6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00167da:	50                   	push   eax
c00167db:	e8 b5 ea fe ff       	call   c0005295 <f_mkfs>
c00167e0:	83 c4 10             	add    esp,0x10
c00167e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00167e7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00167ec:	75 0a                	jne    c00167f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00167ee:	b8 00 00 00 00       	mov    eax,0x0
c00167f3:	eb 1b                	jmp    c0016810 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00167f5:	8d 76 00             	lea    esi,[esi+0x0]
c00167f8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00167fd:	75 09                	jne    c0016808 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00167ff:	b8 09 00 00 00       	mov    eax,0x9
c0016804:	eb 0a                	jmp    c0016810 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016806:	66 90                	xchg   ax,ax
c0016808:	b8 01 00 00 00       	mov    eax,0x1
c001680d:	8d 76 00             	lea    esi,[esi+0x0]
c0016810:	83 c4 2c             	add    esp,0x2c
c0016813:	c3                   	ret    

c0016814 <FAT::tryMount(LogicalDisk*, int)>:
c0016814:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001681a:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001681f:	83 f8 14             	cmp    eax,0x14
c0016822:	75 18                	jne    c001683c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016824:	83 ec 0c             	sub    esp,0xc
c0016827:	68 e0 ef 01 c0       	push   0xc001efe0
c001682c:	e8 9a 99 ff ff       	call   c00101cb <KePanic(char const*)>
c0016831:	83 c4 10             	add    esp,0x10
c0016834:	b0 00                	mov    al,0x0
c0016836:	e9 e9 01 00 00       	jmp    c0016a24 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001683b:	90                   	nop
c001683c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016843:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016849:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001684f:	3d 00 02 00 00       	cmp    eax,0x200
c0016854:	74 0a                	je     c0016860 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0016856:	b0 00                	mov    al,0x0
c0016858:	e9 c7 01 00 00       	jmp    c0016a24 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001685d:	8d 76 00             	lea    esi,[esi+0x0]
c0016860:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016868:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001686f:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016876:	83 f8 ff             	cmp    eax,0xffffffff
c0016879:	74 09                	je     c0016884 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001687b:	b0 01                	mov    al,0x1
c001687d:	e9 a2 01 00 00       	jmp    c0016a24 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016882:	66 90                	xchg   ax,ax
c0016884:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001688e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0016896:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001689d:	88 c2                	mov    dl,al
c001689f:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00168a4:	01 d0                	add    eax,edx
c00168a6:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00168ad:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00168b3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00168ba:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00168c1:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00168c6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00168cd:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00168d4:	83 ec 0c             	sub    esp,0xc
c00168d7:	68 34 02 00 00       	push   0x234
c00168dc:	e8 d8 0e ff ff       	call   c00077b9 <malloc>
c00168e1:	83 c4 10             	add    esp,0x10
c00168e4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00168eb:	83 ec 04             	sub    esp,0x4
c00168ee:	6a 00                	push   0x0
c00168f0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00168f7:	50                   	push   eax
c00168f8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00168ff:	e8 b7 d1 fe ff       	call   c0003abb <f_mount>
c0016904:	83 c4 10             	add    esp,0x10
c0016907:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001690e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016916:	74 1c                	je     c0016934 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016918:	83 ec 0c             	sub    esp,0xc
c001691b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016922:	e8 b2 0e ff ff       	call   c00077d9 <rfree>
c0016927:	83 c4 10             	add    esp,0x10
c001692a:	b0 00                	mov    al,0x0
c001692c:	e9 f3 00 00 00       	jmp    c0016a24 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016931:	8d 76 00             	lea    esi,[esi+0x0]
c0016934:	83 ec 04             	sub    esp,0x4
c0016937:	68 00 01 00 00       	push   0x100
c001693c:	6a 00                	push   0x0
c001693e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016945:	50                   	push   eax
c0016946:	e8 85 9b fe ff       	call   c00004d0 <memset>
c001694b:	83 c4 10             	add    esp,0x10
c001694e:	83 ec 08             	sub    esp,0x8
c0016951:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016958:	50                   	push   eax
c0016959:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016960:	50                   	push   eax
c0016961:	e8 5a 9e fe ff       	call   c00007c0 <strcat>
c0016966:	83 c4 10             	add    esp,0x10
c0016969:	83 ec 08             	sub    esp,0x8
c001696c:	68 ee ef 01 c0       	push   0xc001efee
c0016971:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016978:	50                   	push   eax
c0016979:	e8 42 9e fe ff       	call   c00007c0 <strcat>
c001697e:	83 c4 10             	add    esp,0x10
c0016981:	83 ec 04             	sub    esp,0x4
c0016984:	6a 01                	push   0x1
c0016986:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001698d:	50                   	push   eax
c001698e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016992:	50                   	push   eax
c0016993:	e8 85 d1 fe ff       	call   c0003b1d <f_open>
c0016998:	83 c4 10             	add    esp,0x10
c001699b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00169a2:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00169a9:	85 c0                	test   eax,eax
c00169ab:	74 0b                	je     c00169b8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00169ad:	78 31                	js     c00169e0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00169af:	83 e8 04             	sub    eax,0x4
c00169b2:	83 f8 01             	cmp    eax,0x1
c00169b5:	77 29                	ja     c00169e0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00169b7:	90                   	nop
c00169b8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00169c0:	83 ec 0c             	sub    esp,0xc
c00169c3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00169c7:	50                   	push   eax
c00169c8:	e8 03 d9 fe ff       	call   c00042d0 <f_close>
c00169cd:	83 c4 10             	add    esp,0x10
c00169d0:	90                   	nop
c00169d1:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c00169d9:	74 41                	je     c0016a1c <FAT::tryMount(LogicalDisk*, int)+0x208>
c00169db:	eb 33                	jmp    c0016a10 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00169dd:	8d 76 00             	lea    esi,[esi+0x0]
c00169e0:	83 ec 0c             	sub    esp,0xc
c00169e3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00169ea:	e8 ea 0d ff ff       	call   c00077d9 <rfree>
c00169ef:	83 c4 10             	add    esp,0x10
c00169f2:	83 ec 04             	sub    esp,0x4
c00169f5:	6a 00                	push   0x0
c00169f7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00169fe:	50                   	push   eax
c00169ff:	6a 00                	push   0x0
c0016a01:	e8 b5 d0 fe ff       	call   c0003abb <f_mount>
c0016a06:	83 c4 10             	add    esp,0x10
c0016a09:	b0 00                	mov    al,0x0
c0016a0b:	eb 17                	jmp    c0016a24 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a10:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016a15:	40                   	inc    eax
c0016a16:	a3 20 52 02 c0       	mov    ds:0xc0025220,eax
c0016a1b:	90                   	nop
c0016a1c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016a23:	90                   	nop
c0016a24:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016a2a:	c3                   	ret    
c0016a2b:	90                   	nop

c0016a2c <FAT::allocateSwapfile(char const*, int)>:
c0016a2c:	55                   	push   ebp
c0016a2d:	57                   	push   edi
c0016a2e:	56                   	push   esi
c0016a2f:	53                   	push   ebx
c0016a30:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016a36:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016a41:	83 ec 0c             	sub    esp,0xc
c0016a44:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016a4b:	e8 69 0d ff ff       	call   c00077b9 <malloc>
c0016a50:	83 c4 10             	add    esp,0x10
c0016a53:	89 c7                	mov    edi,eax
c0016a55:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0016a5a:	83 ec 04             	sub    esp,0x4
c0016a5d:	50                   	push   eax
c0016a5e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016a65:	57                   	push   edi
c0016a66:	e8 55 40 ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c0016a6b:	83 c4 10             	add    esp,0x10
c0016a6e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016a75:	83 ec 04             	sub    esp,0x4
c0016a78:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016a7c:	50                   	push   eax
c0016a7d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016a81:	50                   	push   eax
c0016a82:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016a89:	e8 9e 43 ff ff       	call   c000ae2c <File::stat(unsigned long long*, bool*)>
c0016a8e:	83 c4 10             	add    esp,0x10
c0016a91:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016a98:	c1 e0 14             	shl    eax,0x14
c0016a9b:	89 c7                	mov    edi,eax
c0016a9d:	89 c5                	mov    ebp,eax
c0016a9f:	c1 fd 1f             	sar    ebp,0x1f
c0016aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016aa6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016aaa:	89 f9                	mov    ecx,edi
c0016aac:	31 c1                	xor    ecx,eax
c0016aae:	89 cb                	mov    ebx,ecx
c0016ab0:	89 e9                	mov    ecx,ebp
c0016ab2:	31 d1                	xor    ecx,edx
c0016ab4:	89 ce                	mov    esi,ecx
c0016ab6:	89 f0                	mov    eax,esi
c0016ab8:	09 d8                	or     eax,ebx
c0016aba:	0f 84 9c 00 00 00    	je     c0016b5c <FAT::allocateSwapfile(char const*, int)+0x130>
c0016ac0:	83 ec 0c             	sub    esp,0xc
c0016ac3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016aca:	e8 29 42 ff ff       	call   c000acf8 <File::unlink()>
c0016acf:	83 c4 10             	add    esp,0x10
c0016ad2:	83 ec 08             	sub    esp,0x8
c0016ad5:	6a 12                	push   0x12
c0016ad7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ade:	e8 9d 40 ff ff       	call   c000ab80 <File::open(FileOpenMode)>
c0016ae3:	83 c4 10             	add    esp,0x10
c0016ae6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016aed:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016af3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016afa:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016b01:	c1 e0 14             	shl    eax,0x14
c0016b04:	83 ec 04             	sub    esp,0x4
c0016b07:	6a 01                	push   0x1
c0016b09:	50                   	push   eax
c0016b0a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016b11:	e8 1f e6 fe ff       	call   c0005135 <f_expand>
c0016b16:	83 c4 10             	add    esp,0x10
c0016b19:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b20:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b22:	83 c0 10             	add    eax,0x10
c0016b25:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b27:	83 ec 0c             	sub    esp,0xc
c0016b2a:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b2e:	52                   	push   edx
c0016b2f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016b33:	52                   	push   edx
c0016b34:	6a 00                	push   0x0
c0016b36:	68 00 04 00 00       	push   0x400
c0016b3b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b42:	ff d0                	call   eax
c0016b44:	83 c4 20             	add    esp,0x20
c0016b47:	83 ec 0c             	sub    esp,0xc
c0016b4a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b51:	e8 88 40 ff ff       	call   c000abde <File::close()>
c0016b56:	83 c4 10             	add    esp,0x10
c0016b59:	8d 76 00             	lea    esi,[esi+0x0]
c0016b5c:	83 ec 08             	sub    esp,0x8
c0016b5f:	6a 01                	push   0x1
c0016b61:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b68:	e8 13 40 ff ff       	call   c000ab80 <File::open(FileOpenMode)>
c0016b6d:	83 c4 10             	add    esp,0x10
c0016b70:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b77:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b79:	83 c0 0c             	add    eax,0xc
c0016b7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b7e:	83 ec 0c             	sub    esp,0xc
c0016b81:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b85:	52                   	push   edx
c0016b86:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016b8a:	52                   	push   edx
c0016b8b:	6a 00                	push   0x0
c0016b8d:	6a 04                	push   0x4
c0016b8f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b96:	ff d0                	call   eax
c0016b98:	83 c4 20             	add    esp,0x20
c0016b9b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016ba2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016ba8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016baf:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016bb6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016bb9:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016bc0:	83 ec 0c             	sub    esp,0xc
c0016bc3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016bca:	e8 0f 40 ff ff       	call   c000abde <File::close()>
c0016bcf:	83 c4 10             	add    esp,0x10
c0016bd2:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016bd9:	ba 00 00 00 00       	mov    edx,0x0
c0016bde:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016be4:	5b                   	pop    ebx
c0016be5:	5e                   	pop    esi
c0016be6:	5f                   	pop    edi
c0016be7:	5d                   	pop    ebp
c0016be8:	c3                   	ret    
c0016be9:	90                   	nop
c0016bea:	66 90                	xchg   ax,ax

c0016bec <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016bec:	57                   	push   edi
c0016bed:	56                   	push   esi
c0016bee:	53                   	push   ebx
c0016bef:	81 ec 50 02 00 00    	sub    esp,0x250
c0016bf5:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016bfd:	74 0d                	je     c0016c0c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016bff:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016c07:	75 0f                	jne    c0016c18 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016c09:	8d 76 00             	lea    esi,[esi+0x0]
c0016c0c:	b8 04 00 00 00       	mov    eax,0x4
c0016c11:	e9 36 01 00 00       	jmp    c0016d4c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016c16:	66 90                	xchg   ax,ax
c0016c18:	83 ec 08             	sub    esp,0x8
c0016c1b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c22:	50                   	push   eax
c0016c23:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016c2a:	e8 64 d9 fe ff       	call   c0004593 <f_readdir>
c0016c2f:	83 c4 10             	add    esp,0x10
c0016c32:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016c39:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016c40:	83 ec 0c             	sub    esp,0xc
c0016c43:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016c4a:	83 c0 16             	add    eax,0x16
c0016c4d:	50                   	push   eax
c0016c4e:	e8 ed 98 fe ff       	call   c0000540 <strlen>
c0016c53:	83 c4 10             	add    esp,0x10
c0016c56:	ba 00 00 00 00       	mov    edx,0x0
c0016c5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c5f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016c63:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016c6a:	25 ff 00 00 00       	and    eax,0xff
c0016c6f:	83 e0 10             	and    eax,0x10
c0016c72:	74 08                	je     c0016c7c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016c74:	b8 02 00 00 00       	mov    eax,0x2
c0016c79:	eb 09                	jmp    c0016c84 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016c7b:	90                   	nop
c0016c7c:	b8 01 00 00 00       	mov    eax,0x1
c0016c81:	8d 76 00             	lea    esi,[esi+0x0]
c0016c84:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c88:	83 ec 08             	sub    esp,0x8
c0016c8b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c92:	83 c0 16             	add    eax,0x16
c0016c95:	50                   	push   eax
c0016c96:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016c9a:	83 c0 10             	add    eax,0x10
c0016c9d:	50                   	push   eax
c0016c9e:	e8 5d 99 fe ff       	call   c0000600 <strcpy>
c0016ca3:	83 c4 10             	add    esp,0x10
c0016ca6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016cad:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016cb4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cb8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016cbf:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016cc6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016ccd:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016cd4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016cdb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016ce2:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016ce9:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016cf0:	89 c6                	mov    esi,eax
c0016cf2:	89 d7                	mov    edi,edx
c0016cf4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cf6:	89 c8                	mov    eax,ecx
c0016cf8:	89 fa                	mov    edx,edi
c0016cfa:	89 f3                	mov    ebx,esi
c0016cfc:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016d03:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016d0a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016d11:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016d18:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016d1e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016d25:	84 c0                	test   al,al
c0016d27:	75 07                	jne    c0016d30 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016d29:	b8 07 00 00 00       	mov    eax,0x7
c0016d2e:	eb 1c                	jmp    c0016d4c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d30:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016d37:	85 c0                	test   eax,eax
c0016d39:	75 09                	jne    c0016d44 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016d3b:	b8 00 00 00 00       	mov    eax,0x0
c0016d40:	eb 0a                	jmp    c0016d4c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d42:	66 90                	xchg   ax,ax
c0016d44:	b8 01 00 00 00       	mov    eax,0x1
c0016d49:	8d 76 00             	lea    esi,[esi+0x0]
c0016d4c:	81 c4 50 02 00 00    	add    esp,0x250
c0016d52:	5b                   	pop    ebx
c0016d53:	5e                   	pop    esi
c0016d54:	5f                   	pop    edi
c0016d55:	c3                   	ret    
c0016d56:	66 90                	xchg   ax,ax

c0016d58 <FAT::read(void*, unsigned long, void*, int*)>:
c0016d58:	83 ec 1c             	sub    esp,0x1c
c0016d5b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016d60:	74 0a                	je     c0016d6c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016d62:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016d67:	75 0b                	jne    c0016d74 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016d69:	8d 76 00             	lea    esi,[esi+0x0]
c0016d6c:	b8 04 00 00 00       	mov    eax,0x4
c0016d71:	eb 41                	jmp    c0016db4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016d73:	90                   	nop
c0016d74:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d78:	50                   	push   eax
c0016d79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016d81:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016d85:	e8 5e d0 fe ff       	call   c0003de8 <f_read>
c0016d8a:	83 c4 10             	add    esp,0x10
c0016d8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d95:	89 c2                	mov    edx,eax
c0016d97:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016d9b:	89 10                	mov    DWORD PTR [eax],edx
c0016d9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016da1:	85 c0                	test   eax,eax
c0016da3:	75 07                	jne    c0016dac <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016da5:	b8 00 00 00 00       	mov    eax,0x0
c0016daa:	eb 08                	jmp    c0016db4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016dac:	b8 01 00 00 00       	mov    eax,0x1
c0016db1:	8d 76 00             	lea    esi,[esi+0x0]
c0016db4:	83 c4 1c             	add    esp,0x1c
c0016db7:	c3                   	ret    

c0016db8 <FAT::write(void*, unsigned long, void*, int*)>:
c0016db8:	83 ec 1c             	sub    esp,0x1c
c0016dbb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016dc0:	74 0a                	je     c0016dcc <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016dc2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016dc7:	75 0b                	jne    c0016dd4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0016dcc:	b8 04 00 00 00       	mov    eax,0x4
c0016dd1:	eb 41                	jmp    c0016e14 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016dd3:	90                   	nop
c0016dd4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016dd8:	50                   	push   eax
c0016dd9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ddd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016de1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016de5:	e8 fd d1 fe ff       	call   c0003fe7 <f_write>
c0016dea:	83 c4 10             	add    esp,0x10
c0016ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016df1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016df5:	89 c2                	mov    edx,eax
c0016df7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016dfb:	89 10                	mov    DWORD PTR [eax],edx
c0016dfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e01:	85 c0                	test   eax,eax
c0016e03:	75 07                	jne    c0016e0c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016e05:	b8 00 00 00 00       	mov    eax,0x0
c0016e0a:	eb 08                	jmp    c0016e14 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e0c:	b8 01 00 00 00       	mov    eax,0x1
c0016e11:	8d 76 00             	lea    esi,[esi+0x0]
c0016e14:	83 c4 1c             	add    esp,0x1c
c0016e17:	c3                   	ret    

c0016e18 <FAT::close(void*)>:
c0016e18:	83 ec 1c             	sub    esp,0x1c
c0016e1b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e20:	75 0a                	jne    c0016e2c <FAT::close(void*)+0x14>
c0016e22:	b8 04 00 00 00       	mov    eax,0x4
c0016e27:	eb 3f                	jmp    c0016e68 <FAT::close(void*)+0x50>
c0016e29:	8d 76 00             	lea    esi,[esi+0x0]
c0016e2c:	83 ec 0c             	sub    esp,0xc
c0016e2f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e33:	e8 98 d4 fe ff       	call   c00042d0 <f_close>
c0016e38:	83 c4 10             	add    esp,0x10
c0016e3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e3f:	83 ec 0c             	sub    esp,0xc
c0016e42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e46:	e8 7e 09 ff ff       	call   c00077c9 <free>
c0016e4b:	83 c4 10             	add    esp,0x10
c0016e4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e52:	85 c0                	test   eax,eax
c0016e54:	75 0a                	jne    c0016e60 <FAT::close(void*)+0x48>
c0016e56:	b8 00 00 00 00       	mov    eax,0x0
c0016e5b:	eb 0b                	jmp    c0016e68 <FAT::close(void*)+0x50>
c0016e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e60:	b8 01 00 00 00       	mov    eax,0x1
c0016e65:	8d 76 00             	lea    esi,[esi+0x0]
c0016e68:	83 c4 1c             	add    esp,0x1c
c0016e6b:	c3                   	ret    

c0016e6c <FAT::closeDir(void*)>:
c0016e6c:	83 ec 1c             	sub    esp,0x1c
c0016e6f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e74:	75 0a                	jne    c0016e80 <FAT::closeDir(void*)+0x14>
c0016e76:	b8 04 00 00 00       	mov    eax,0x4
c0016e7b:	eb 3f                	jmp    c0016ebc <FAT::closeDir(void*)+0x50>
c0016e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e80:	83 ec 0c             	sub    esp,0xc
c0016e83:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e87:	e8 e5 d6 fe ff       	call   c0004571 <f_closedir>
c0016e8c:	83 c4 10             	add    esp,0x10
c0016e8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e93:	83 ec 0c             	sub    esp,0xc
c0016e96:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e9a:	e8 2a 09 ff ff       	call   c00077c9 <free>
c0016e9f:	83 c4 10             	add    esp,0x10
c0016ea2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ea6:	85 c0                	test   eax,eax
c0016ea8:	75 0a                	jne    c0016eb4 <FAT::closeDir(void*)+0x48>
c0016eaa:	b8 00 00 00 00       	mov    eax,0x0
c0016eaf:	eb 0b                	jmp    c0016ebc <FAT::closeDir(void*)+0x50>
c0016eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0016eb4:	b8 01 00 00 00       	mov    eax,0x1
c0016eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0016ebc:	83 c4 1c             	add    esp,0x1c
c0016ebf:	c3                   	ret    

c0016ec0 <FAT::seek(void*, unsigned long long)>:
c0016ec0:	83 ec 2c             	sub    esp,0x2c
c0016ec3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ec7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ecb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ecf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ed3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016ed8:	75 0a                	jne    c0016ee4 <FAT::seek(void*, unsigned long long)+0x24>
c0016eda:	b8 04 00 00 00       	mov    eax,0x4
c0016edf:	eb 33                	jmp    c0016f14 <FAT::seek(void*, unsigned long long)+0x54>
c0016ee1:	8d 76 00             	lea    esi,[esi+0x0]
c0016ee4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ee8:	83 ec 08             	sub    esp,0x8
c0016eeb:	50                   	push   eax
c0016eec:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ef0:	e8 0a d4 fe ff       	call   c00042ff <f_lseek>
c0016ef5:	83 c4 10             	add    esp,0x10
c0016ef8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016efc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f00:	85 c0                	test   eax,eax
c0016f02:	75 08                	jne    c0016f0c <FAT::seek(void*, unsigned long long)+0x4c>
c0016f04:	b8 00 00 00 00       	mov    eax,0x0
c0016f09:	eb 09                	jmp    c0016f14 <FAT::seek(void*, unsigned long long)+0x54>
c0016f0b:	90                   	nop
c0016f0c:	b8 01 00 00 00       	mov    eax,0x1
c0016f11:	8d 76 00             	lea    esi,[esi+0x0]
c0016f14:	83 c4 2c             	add    esp,0x2c
c0016f17:	c3                   	ret    

c0016f18 <fatWrapperReadDisk>:
c0016f18:	53                   	push   ebx
c0016f19:	83 ec 18             	sub    esp,0x18
c0016f1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f20:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f24:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f28:	25 ff 00 00 00       	and    eax,0xff
c0016f2d:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0016f34:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f3c:	ba 00 00 00 00       	mov    edx,0x0
c0016f41:	83 ec 0c             	sub    esp,0xc
c0016f44:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f48:	53                   	push   ebx
c0016f49:	52                   	push   edx
c0016f4a:	50                   	push   eax
c0016f4b:	51                   	push   ecx
c0016f4c:	e8 1f 5d ff ff       	call   c000cc70 <LogicalDisk::read(unsigned long long, int, void*)>
c0016f51:	83 c4 20             	add    esp,0x20
c0016f54:	83 c4 18             	add    esp,0x18
c0016f57:	5b                   	pop    ebx
c0016f58:	c3                   	ret    
c0016f59:	8d 76 00             	lea    esi,[esi+0x0]

c0016f5c <fatWrapperWriteDisk>:
c0016f5c:	53                   	push   ebx
c0016f5d:	83 ec 18             	sub    esp,0x18
c0016f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f64:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f68:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f6c:	25 ff 00 00 00       	and    eax,0xff
c0016f71:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0016f78:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f80:	ba 00 00 00 00       	mov    edx,0x0
c0016f85:	83 ec 0c             	sub    esp,0xc
c0016f88:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f8c:	53                   	push   ebx
c0016f8d:	52                   	push   edx
c0016f8e:	50                   	push   eax
c0016f8f:	51                   	push   ecx
c0016f90:	e8 47 5d ff ff       	call   c000ccdc <LogicalDisk::write(unsigned long long, int, void*)>
c0016f95:	83 c4 20             	add    esp,0x20
c0016f98:	83 c4 18             	add    esp,0x18
c0016f9b:	5b                   	pop    ebx
c0016f9c:	c3                   	ret    
c0016f9d:	8d 76 00             	lea    esi,[esi+0x0]

c0016fa0 <fatWrapperIoctl>:
c0016fa0:	53                   	push   ebx
c0016fa1:	83 ec 28             	sub    esp,0x28
c0016fa4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016fa8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fac:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016fb0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016fb4:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016fb9:	75 35                	jne    c0016ff0 <fatWrapperIoctl+0x50>
c0016fbb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fbf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fc3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016fc7:	25 ff 00 00 00       	and    eax,0xff
c0016fcc:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c0016fd3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016fd9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016fdf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016fe3:	66 89 02             	mov    WORD PTR [edx],ax
c0016fe6:	b8 00 00 00 00       	mov    eax,0x0
c0016feb:	e9 c4 00 00 00       	jmp    c00170b4 <fatWrapperIoctl+0x114>
c0016ff0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016ff5:	75 75                	jne    c001706c <fatWrapperIoctl+0xcc>
c0016ff7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ffb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016fff:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017003:	25 ff 00 00 00       	and    eax,0xff
c0017008:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c001700f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017015:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001701b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0017021:	89 c8                	mov    eax,ecx
c0017023:	89 da                	mov    edx,ebx
c0017025:	0f a4 c2 0a          	shld   edx,eax,0xa
c0017029:	c1 e0 0a             	shl    eax,0xa
c001702c:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0017030:	81 e1 ff 00 00 00    	and    ecx,0xff
c0017036:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c001703d:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0017043:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0017049:	89 cb                	mov    ebx,ecx
c001704b:	c1 fb 1f             	sar    ebx,0x1f
c001704e:	53                   	push   ebx
c001704f:	51                   	push   ecx
c0017050:	52                   	push   edx
c0017051:	50                   	push   eax
c0017052:	e8 a9 50 00 00       	call   c001c100 <__udivdi3>
c0017057:	83 c4 10             	add    esp,0x10
c001705a:	89 c2                	mov    edx,eax
c001705c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017060:	89 10                	mov    DWORD PTR [eax],edx
c0017062:	b8 00 00 00 00       	mov    eax,0x0
c0017067:	eb 4b                	jmp    c00170b4 <fatWrapperIoctl+0x114>
c0017069:	8d 76 00             	lea    esi,[esi+0x0]
c001706c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0017071:	75 09                	jne    c001707c <fatWrapperIoctl+0xdc>
c0017073:	b8 00 00 00 00       	mov    eax,0x0
c0017078:	eb 3a                	jmp    c00170b4 <fatWrapperIoctl+0x114>
c001707a:	66 90                	xchg   ax,ax
c001707c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0017081:	75 19                	jne    c001709c <fatWrapperIoctl+0xfc>
c0017083:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017087:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001708b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001708f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017095:	b8 00 00 00 00       	mov    eax,0x0
c001709a:	eb 18                	jmp    c00170b4 <fatWrapperIoctl+0x114>
c001709c:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00170a1:	75 09                	jne    c00170ac <fatWrapperIoctl+0x10c>
c00170a3:	b8 00 00 00 00       	mov    eax,0x0
c00170a8:	eb 0a                	jmp    c00170b4 <fatWrapperIoctl+0x114>
c00170aa:	66 90                	xchg   ax,ax
c00170ac:	b8 04 00 00 00       	mov    eax,0x4
c00170b1:	8d 76 00             	lea    esi,[esi+0x0]
c00170b4:	83 c4 28             	add    esp,0x28
c00170b7:	5b                   	pop    ebx
c00170b8:	c3                   	ret    
c00170b9:	90                   	nop
c00170ba:	66 90                	xchg   ax,ax

c00170bc <FAT::FAT()>:
c00170bc:	83 ec 1c             	sub    esp,0x1c
c00170bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c3:	83 ec 0c             	sub    esp,0xc
c00170c6:	50                   	push   eax
c00170c7:	e8 a0 37 ff ff       	call   c000a86c <Filesystem::Filesystem()>
c00170cc:	83 c4 10             	add    esp,0x10
c00170cf:	ba 04 f0 01 c0       	mov    edx,0xc001f004
c00170d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d8:	89 10                	mov    DWORD PTR [eax],edx
c00170da:	c7 05 20 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025220,0x0
c00170e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00170ec:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00170f1:	7f 15                	jg     c0017108 <FAT::FAT()+0x4c>
c00170f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170f7:	c7 04 85 40 52 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdadc0],0xffffffff
c0017102:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017106:	eb e4                	jmp    c00170ec <FAT::FAT()+0x30>
c0017108:	90                   	nop
c0017109:	83 c4 1c             	add    esp,0x1c
c001710c:	c3                   	ret    
c001710d:	90                   	nop
c001710e:	66 90                	xchg   ax,ax

c0017110 <FAT::fixFilepath(char*)>:
c0017110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017114:	8a 00                	mov    al,BYTE PTR [eax]
c0017116:	3c 40                	cmp    al,0x40
c0017118:	7e 2e                	jle    c0017148 <FAT::fixFilepath(char*)+0x38>
c001711a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001711e:	8a 00                	mov    al,BYTE PTR [eax]
c0017120:	83 e8 41             	sub    eax,0x41
c0017123:	88 c2                	mov    dl,al
c0017125:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017129:	88 10                	mov    BYTE PTR [eax],dl
c001712b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001712f:	8a 00                	mov    al,BYTE PTR [eax]
c0017131:	0f be c0             	movsx  eax,al
c0017134:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001713b:	83 c0 30             	add    eax,0x30
c001713e:	88 c2                	mov    dl,al
c0017140:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017144:	88 10                	mov    BYTE PTR [eax],dl
c0017146:	66 90                	xchg   ax,ax
c0017148:	90                   	nop
c0017149:	c3                   	ret    
c001714a:	66 90                	xchg   ax,ax

c001714c <FAT::open(char const*, void**, FileOpenMode)>:
c001714c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017152:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001715a:	74 0c                	je     c0017168 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001715c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017164:	75 0e                	jne    c0017174 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0017166:	66 90                	xchg   ax,ax
c0017168:	b8 04 00 00 00       	mov    eax,0x4
c001716d:	e9 0a 01 00 00       	jmp    c001727c <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017172:	66 90                	xchg   ax,ax
c0017174:	83 ec 08             	sub    esp,0x8
c0017177:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001717e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017182:	50                   	push   eax
c0017183:	e8 78 94 fe ff       	call   c0000600 <strcpy>
c0017188:	83 c4 10             	add    esp,0x10
c001718b:	83 ec 08             	sub    esp,0x8
c001718e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017192:	50                   	push   eax
c0017193:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001719a:	e8 71 ff ff ff       	call   c0017110 <FAT::fixFilepath(char*)>
c001719f:	83 c4 10             	add    esp,0x10
c00171a2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00171aa:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171b1:	83 e0 01             	and    eax,0x1
c00171b4:	74 0a                	je     c00171c0 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00171b6:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00171be:	66 90                	xchg   ax,ax
c00171c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171c7:	83 e0 04             	and    eax,0x4
c00171ca:	74 10                	je     c00171dc <FAT::open(char const*, void**, FileOpenMode)+0x90>
c00171cc:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00171d4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00171dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171e3:	83 e0 02             	and    eax,0x2
c00171e6:	74 08                	je     c00171f0 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c00171e8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00171f0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171f7:	83 e0 08             	and    eax,0x8
c00171fa:	74 08                	je     c0017204 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c00171fc:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017204:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001720b:	83 e0 10             	and    eax,0x10
c001720e:	74 08                	je     c0017218 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0017210:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0017218:	83 ec 0c             	sub    esp,0xc
c001721b:	68 28 02 00 00       	push   0x228
c0017220:	e8 94 05 ff ff       	call   c00077b9 <malloc>
c0017225:	83 c4 10             	add    esp,0x10
c0017228:	89 c2                	mov    edx,eax
c001722a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017231:	89 10                	mov    DWORD PTR [eax],edx
c0017233:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001723a:	31 d2                	xor    edx,edx
c001723c:	88 c2                	mov    dl,al
c001723e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017245:	8b 00                	mov    eax,DWORD PTR [eax]
c0017247:	83 ec 04             	sub    esp,0x4
c001724a:	52                   	push   edx
c001724b:	8d 54 24 10          	lea    edx,[esp+0x10]
c001724f:	52                   	push   edx
c0017250:	50                   	push   eax
c0017251:	e8 c7 c8 fe ff       	call   c0003b1d <f_open>
c0017256:	83 c4 10             	add    esp,0x10
c0017259:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0017260:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0017268:	74 0a                	je     c0017274 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c001726a:	b8 01 00 00 00       	mov    eax,0x1
c001726f:	eb 0b                	jmp    c001727c <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0017271:	8d 76 00             	lea    esi,[esi+0x0]
c0017274:	b8 00 00 00 00       	mov    eax,0x0
c0017279:	8d 76 00             	lea    esi,[esi+0x0]
c001727c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017282:	c3                   	ret    
c0017283:	90                   	nop

c0017284 <FAT::openDir(char const*, void**)>:
c0017284:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001728a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017292:	74 0c                	je     c00172a0 <FAT::openDir(char const*, void**)+0x1c>
c0017294:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001729c:	75 0e                	jne    c00172ac <FAT::openDir(char const*, void**)+0x28>
c001729e:	66 90                	xchg   ax,ax
c00172a0:	b8 04 00 00 00       	mov    eax,0x4
c00172a5:	e9 82 00 00 00       	jmp    c001732c <FAT::openDir(char const*, void**)+0xa8>
c00172aa:	66 90                	xchg   ax,ax
c00172ac:	83 ec 08             	sub    esp,0x8
c00172af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172b6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172ba:	50                   	push   eax
c00172bb:	e8 40 93 fe ff       	call   c0000600 <strcpy>
c00172c0:	83 c4 10             	add    esp,0x10
c00172c3:	83 ec 08             	sub    esp,0x8
c00172c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172ca:	50                   	push   eax
c00172cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172d2:	e8 39 fe ff ff       	call   c0017110 <FAT::fixFilepath(char*)>
c00172d7:	83 c4 10             	add    esp,0x10
c00172da:	83 ec 0c             	sub    esp,0xc
c00172dd:	6a 30                	push   0x30
c00172df:	e8 d5 04 ff ff       	call   c00077b9 <malloc>
c00172e4:	83 c4 10             	add    esp,0x10
c00172e7:	89 c2                	mov    edx,eax
c00172e9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172f0:	89 10                	mov    DWORD PTR [eax],edx
c00172f2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00172fb:	83 ec 08             	sub    esp,0x8
c00172fe:	8d 54 24 14          	lea    edx,[esp+0x14]
c0017302:	52                   	push   edx
c0017303:	50                   	push   eax
c0017304:	e8 9d d1 fe ff       	call   c00044a6 <f_opendir>
c0017309:	83 c4 10             	add    esp,0x10
c001730c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017313:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001731b:	74 07                	je     c0017324 <FAT::openDir(char const*, void**)+0xa0>
c001731d:	b8 01 00 00 00       	mov    eax,0x1
c0017322:	eb 08                	jmp    c001732c <FAT::openDir(char const*, void**)+0xa8>
c0017324:	b8 00 00 00 00       	mov    eax,0x0
c0017329:	8d 76 00             	lea    esi,[esi+0x0]
c001732c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017332:	c3                   	ret    
c0017333:	90                   	nop

c0017334 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017334:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001733a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0017342:	75 0c                	jne    c0017350 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017344:	b8 04 00 00 00       	mov    eax,0x4
c0017349:	e9 d6 00 00 00       	jmp    c0017424 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001734e:	66 90                	xchg   ax,ax
c0017350:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0017358:	75 0a                	jne    c0017364 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001735a:	b8 04 00 00 00       	mov    eax,0x4
c001735f:	e9 c0 00 00 00       	jmp    c0017424 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017364:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001736c:	75 0a                	jne    c0017378 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001736e:	b8 04 00 00 00       	mov    eax,0x4
c0017373:	e9 ac 00 00 00       	jmp    c0017424 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017378:	83 ec 08             	sub    esp,0x8
c001737b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017382:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017389:	50                   	push   eax
c001738a:	e8 71 92 fe ff       	call   c0000600 <strcpy>
c001738f:	83 c4 10             	add    esp,0x10
c0017392:	83 ec 08             	sub    esp,0x8
c0017395:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001739c:	50                   	push   eax
c001739d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00173a4:	e8 67 fd ff ff       	call   c0017110 <FAT::fixFilepath(char*)>
c00173a9:	83 c4 10             	add    esp,0x10
c00173ac:	83 ec 08             	sub    esp,0x8
c00173af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00173b3:	50                   	push   eax
c00173b4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00173bb:	50                   	push   eax
c00173bc:	e8 64 d2 fe ff       	call   c0004625 <f_stat>
c00173c1:	83 c4 10             	add    esp,0x10
c00173c4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00173cb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00173d2:	85 c0                	test   eax,eax
c00173d4:	74 0a                	je     c00173e0 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00173d6:	83 f8 04             	cmp    eax,0x4
c00173d9:	74 39                	je     c0017414 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00173db:	eb 3f                	jmp    c001741c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00173dd:	8d 76 00             	lea    esi,[esi+0x0]
c00173e0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00173e4:	25 ff 00 00 00       	and    eax,0xff
c00173e9:	83 e0 10             	and    eax,0x10
c00173ec:	0f 95 c2             	setne  dl
c00173ef:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00173f6:	88 10                	mov    BYTE PTR [eax],dl
c00173f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00173fc:	ba 00 00 00 00       	mov    edx,0x0
c0017401:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017408:	89 01                	mov    DWORD PTR [ecx],eax
c001740a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001740d:	b8 00 00 00 00       	mov    eax,0x0
c0017412:	eb 10                	jmp    c0017424 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017414:	b8 02 00 00 00       	mov    eax,0x2
c0017419:	eb 09                	jmp    c0017424 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001741b:	90                   	nop
c001741c:	b8 01 00 00 00       	mov    eax,0x1
c0017421:	8d 76 00             	lea    esi,[esi+0x0]
c0017424:	81 c4 2c 02 00 00    	add    esp,0x22c
c001742a:	c3                   	ret    
c001742b:	90                   	nop

c001742c <FAT::unlink(char const*)>:
c001742c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017432:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001743a:	75 08                	jne    c0017444 <FAT::unlink(char const*)+0x18>
c001743c:	b8 04 00 00 00       	mov    eax,0x4
c0017441:	eb 61                	jmp    c00174a4 <FAT::unlink(char const*)+0x78>
c0017443:	90                   	nop
c0017444:	83 ec 08             	sub    esp,0x8
c0017447:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001744e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017452:	50                   	push   eax
c0017453:	e8 a8 91 fe ff       	call   c0000600 <strcpy>
c0017458:	83 c4 10             	add    esp,0x10
c001745b:	83 ec 08             	sub    esp,0x8
c001745e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017462:	50                   	push   eax
c0017463:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001746a:	e8 a1 fc ff ff       	call   c0017110 <FAT::fixFilepath(char*)>
c001746f:	83 c4 10             	add    esp,0x10
c0017472:	83 ec 0c             	sub    esp,0xc
c0017475:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017479:	50                   	push   eax
c001747a:	e8 0b d4 fe ff       	call   c000488a <f_unlink>
c001747f:	83 c4 10             	add    esp,0x10
c0017482:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017489:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017490:	85 c0                	test   eax,eax
c0017492:	75 08                	jne    c001749c <FAT::unlink(char const*)+0x70>
c0017494:	b8 00 00 00 00       	mov    eax,0x0
c0017499:	eb 09                	jmp    c00174a4 <FAT::unlink(char const*)+0x78>
c001749b:	90                   	nop
c001749c:	b8 01 00 00 00       	mov    eax,0x1
c00174a1:	8d 76 00             	lea    esi,[esi+0x0]
c00174a4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174aa:	c3                   	ret    
c00174ab:	90                   	nop

c00174ac <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00174ac:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00174b2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00174b9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00174c0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00174c4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00174c8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00174d0:	75 0a                	jne    c00174dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00174d2:	b8 04 00 00 00       	mov    eax,0x4
c00174d7:	e9 54 01 00 00       	jmp    c0017630 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00174dc:	83 ec 08             	sub    esp,0x8
c00174df:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00174e6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00174ea:	50                   	push   eax
c00174eb:	e8 10 91 fe ff       	call   c0000600 <strcpy>
c00174f0:	83 c4 10             	add    esp,0x10
c00174f3:	83 ec 08             	sub    esp,0x8
c00174f6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00174fa:	50                   	push   eax
c00174fb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017502:	e8 09 fc ff ff       	call   c0017110 <FAT::fixFilepath(char*)>
c0017507:	83 c4 10             	add    esp,0x10
c001750a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0017512:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001751a:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001751e:	25 ff 00 00 00       	and    eax,0xff
c0017523:	83 e0 01             	and    eax,0x1
c0017526:	74 08                	je     c0017530 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0017528:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017530:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017534:	25 ff 00 00 00       	and    eax,0xff
c0017539:	83 e0 02             	and    eax,0x2
c001753c:	74 0a                	je     c0017548 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c001753e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0017546:	66 90                	xchg   ax,ax
c0017548:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001754c:	25 ff 00 00 00       	and    eax,0xff
c0017551:	83 e0 04             	and    eax,0x4
c0017554:	74 0a                	je     c0017560 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c0017556:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001755e:	66 90                	xchg   ax,ax
c0017560:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017564:	25 ff 00 00 00       	and    eax,0xff
c0017569:	83 e0 08             	and    eax,0x8
c001756c:	74 0a                	je     c0017578 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c001756e:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0017576:	66 90                	xchg   ax,ax
c0017578:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001757c:	25 ff 00 00 00       	and    eax,0xff
c0017581:	83 e0 01             	and    eax,0x1
c0017584:	74 0a                	je     c0017590 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0017586:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001758e:	66 90                	xchg   ax,ax
c0017590:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017594:	25 ff 00 00 00       	and    eax,0xff
c0017599:	83 e0 02             	and    eax,0x2
c001759c:	74 0a                	je     c00175a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001759e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00175a6:	66 90                	xchg   ax,ax
c00175a8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175ac:	25 ff 00 00 00       	and    eax,0xff
c00175b1:	83 e0 04             	and    eax,0x4
c00175b4:	74 0a                	je     c00175c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00175b6:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00175be:	66 90                	xchg   ax,ax
c00175c0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175c4:	25 ff 00 00 00       	and    eax,0xff
c00175c9:	83 e0 08             	and    eax,0x8
c00175cc:	74 0a                	je     c00175d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00175ce:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00175d6:	66 90                	xchg   ax,ax
c00175d8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00175df:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00175e6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00175ed:	31 d2                	xor    edx,edx
c00175ef:	88 c2                	mov    dl,al
c00175f1:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00175f8:	25 ff 00 00 00       	and    eax,0xff
c00175fd:	83 ec 04             	sub    esp,0x4
c0017600:	52                   	push   edx
c0017601:	50                   	push   eax
c0017602:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017606:	50                   	push   eax
c0017607:	e8 f1 d6 fe ff       	call   c0004cfd <f_chmod>
c001760c:	83 c4 10             	add    esp,0x10
c001760f:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0017616:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001761d:	85 c0                	test   eax,eax
c001761f:	75 07                	jne    c0017628 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017621:	b8 00 00 00 00       	mov    eax,0x0
c0017626:	eb 08                	jmp    c0017630 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017628:	b8 01 00 00 00       	mov    eax,0x1
c001762d:	8d 76 00             	lea    esi,[esi+0x0]
c0017630:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017636:	c3                   	ret    
c0017637:	90                   	nop

c0017638 <FAT::rename(char const*, char const*)>:
c0017638:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001763e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0017646:	74 0c                	je     c0017654 <FAT::rename(char const*, char const*)+0x1c>
c0017648:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017650:	75 0e                	jne    c0017660 <FAT::rename(char const*, char const*)+0x28>
c0017652:	66 90                	xchg   ax,ax
c0017654:	b8 04 00 00 00       	mov    eax,0x4
c0017659:	e9 9e 00 00 00       	jmp    c00176fc <FAT::rename(char const*, char const*)+0xc4>
c001765e:	66 90                	xchg   ax,ax
c0017660:	83 ec 08             	sub    esp,0x8
c0017663:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001766a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017671:	50                   	push   eax
c0017672:	e8 89 8f fe ff       	call   c0000600 <strcpy>
c0017677:	83 c4 10             	add    esp,0x10
c001767a:	83 ec 08             	sub    esp,0x8
c001767d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017684:	50                   	push   eax
c0017685:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001768c:	e8 7f fa ff ff       	call   c0017110 <FAT::fixFilepath(char*)>
c0017691:	83 c4 10             	add    esp,0x10
c0017694:	83 ec 08             	sub    esp,0x8
c0017697:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001769e:	8d 44 24 18          	lea    eax,[esp+0x18]
c00176a2:	50                   	push   eax
c00176a3:	e8 58 8f fe ff       	call   c0000600 <strcpy>
c00176a8:	83 c4 10             	add    esp,0x10
c00176ab:	83 ec 08             	sub    esp,0x8
c00176ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176b2:	50                   	push   eax
c00176b3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176ba:	e8 51 fa ff ff       	call   c0017110 <FAT::fixFilepath(char*)>
c00176bf:	83 c4 10             	add    esp,0x10
c00176c2:	83 ec 08             	sub    esp,0x8
c00176c5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176c9:	50                   	push   eax
c00176ca:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00176d1:	50                   	push   eax
c00176d2:	e8 70 d4 fe ff       	call   c0004b47 <f_rename>
c00176d7:	83 c4 10             	add    esp,0x10
c00176da:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00176e1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00176e8:	85 c0                	test   eax,eax
c00176ea:	75 08                	jne    c00176f4 <FAT::rename(char const*, char const*)+0xbc>
c00176ec:	b8 00 00 00 00       	mov    eax,0x0
c00176f1:	eb 09                	jmp    c00176fc <FAT::rename(char const*, char const*)+0xc4>
c00176f3:	90                   	nop
c00176f4:	b8 01 00 00 00       	mov    eax,0x1
c00176f9:	8d 76 00             	lea    esi,[esi+0x0]
c00176fc:	81 c4 1c 02 00 00    	add    esp,0x21c
c0017702:	c3                   	ret    
c0017703:	90                   	nop

c0017704 <FAT::mkdir(char const*)>:
c0017704:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001770a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017712:	75 08                	jne    c001771c <FAT::mkdir(char const*)+0x18>
c0017714:	b8 04 00 00 00       	mov    eax,0x4
c0017719:	eb 61                	jmp    c001777c <FAT::mkdir(char const*)+0x78>
c001771b:	90                   	nop
c001771c:	83 ec 08             	sub    esp,0x8
c001771f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017726:	8d 44 24 18          	lea    eax,[esp+0x18]
c001772a:	50                   	push   eax
c001772b:	e8 d0 8e fe ff       	call   c0000600 <strcpy>
c0017730:	83 c4 10             	add    esp,0x10
c0017733:	83 ec 08             	sub    esp,0x8
c0017736:	8d 44 24 14          	lea    eax,[esp+0x14]
c001773a:	50                   	push   eax
c001773b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017742:	e8 c9 f9 ff ff       	call   c0017110 <FAT::fixFilepath(char*)>
c0017747:	83 c4 10             	add    esp,0x10
c001774a:	83 ec 0c             	sub    esp,0xc
c001774d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017751:	50                   	push   eax
c0017752:	e8 55 d2 fe ff       	call   c00049ac <f_mkdir>
c0017757:	83 c4 10             	add    esp,0x10
c001775a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017761:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017768:	85 c0                	test   eax,eax
c001776a:	75 08                	jne    c0017774 <FAT::mkdir(char const*)+0x70>
c001776c:	b8 00 00 00 00       	mov    eax,0x0
c0017771:	eb 09                	jmp    c001777c <FAT::mkdir(char const*)+0x78>
c0017773:	90                   	nop
c0017774:	b8 01 00 00 00       	mov    eax,0x1
c0017779:	8d 76 00             	lea    esi,[esi+0x0]
c001777c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017782:	c3                   	ret    
c0017783:	90                   	nop

c0017784 <FAT::exists(char const*)>:
c0017784:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001778a:	83 ec 08             	sub    esp,0x8
c001778d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017794:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017798:	50                   	push   eax
c0017799:	e8 62 8e fe ff       	call   c0000600 <strcpy>
c001779e:	83 c4 10             	add    esp,0x10
c00177a1:	83 ec 08             	sub    esp,0x8
c00177a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177a8:	50                   	push   eax
c00177a9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00177b0:	e8 5b f9 ff ff       	call   c0017110 <FAT::fixFilepath(char*)>
c00177b5:	83 c4 10             	add    esp,0x10
c00177b8:	83 ec 08             	sub    esp,0x8
c00177bb:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00177c2:	50                   	push   eax
c00177c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00177c7:	50                   	push   eax
c00177c8:	e8 58 ce fe ff       	call   c0004625 <f_stat>
c00177cd:	83 c4 10             	add    esp,0x10
c00177d0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00177d7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00177de:	85 c0                	test   eax,eax
c00177e0:	75 06                	jne    c00177e8 <FAT::exists(char const*)+0x64>
c00177e2:	b0 01                	mov    al,0x1
c00177e4:	eb 06                	jmp    c00177ec <FAT::exists(char const*)+0x68>
c00177e6:	66 90                	xchg   ax,ax
c00177e8:	b0 00                	mov    al,0x0
c00177ea:	66 90                	xchg   ax,ax
c00177ec:	81 c4 2c 02 00 00    	add    esp,0x22c
c00177f2:	c3                   	ret    
c00177f3:	90                   	nop

c00177f4 <isoReadDiscSectorHelper>:
c00177f4:	83 ec 2c             	sub    esp,0x2c
c00177f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177fb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00177ff:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017804:	83 e8 41             	sub    eax,0x41
c0017807:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c001780e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017812:	ba 00 00 00 00       	mov    edx,0x0
c0017817:	83 ec 0c             	sub    esp,0xc
c001781a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001781e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017822:	52                   	push   edx
c0017823:	50                   	push   eax
c0017824:	51                   	push   ecx
c0017825:	e8 46 54 ff ff       	call   c000cc70 <LogicalDisk::read(unsigned long long, int, void*)>
c001782a:	83 c4 20             	add    esp,0x20
c001782d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017831:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017836:	74 0c                	je     c0017844 <isoReadDiscSectorHelper+0x50>
c0017838:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001783c:	c1 e0 0b             	shl    eax,0xb
c001783f:	eb 0b                	jmp    c001784c <isoReadDiscSectorHelper+0x58>
c0017841:	8d 76 00             	lea    esi,[esi+0x0]
c0017844:	b8 00 00 00 00       	mov    eax,0x0
c0017849:	8d 76 00             	lea    esi,[esi+0x0]
c001784c:	83 c4 2c             	add    esp,0x2c
c001784f:	c3                   	ret    

c0017850 <iso_kprintf>:
c0017850:	83 ec 0c             	sub    esp,0xc
c0017853:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017858:	83 ec 08             	sub    esp,0x8
c001785b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001785f:	50                   	push   eax
c0017860:	e8 d1 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017865:	83 c4 10             	add    esp,0x10
c0017868:	90                   	nop
c0017869:	83 c4 0c             	add    esp,0xc
c001786c:	c3                   	ret    
c001786d:	8d 76 00             	lea    esi,[esi+0x0]

c0017870 <iso_kprintfd>:
c0017870:	83 ec 0c             	sub    esp,0xc
c0017873:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017878:	83 ec 08             	sub    esp,0x8
c001787b:	68 64 f0 01 c0       	push   0xc001f064
c0017880:	50                   	push   eax
c0017881:	e8 b0 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017886:	83 c4 10             	add    esp,0x10
c0017889:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c001788e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017892:	83 ec 08             	sub    esp,0x8
c0017895:	52                   	push   edx
c0017896:	50                   	push   eax
c0017897:	e8 54 0e ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001789c:	83 c4 10             	add    esp,0x10
c001789f:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c00178a4:	83 ec 08             	sub    esp,0x8
c00178a7:	68 e5 ee 01 c0       	push   0xc001eee5
c00178ac:	50                   	push   eax
c00178ad:	e8 84 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00178b2:	83 c4 10             	add    esp,0x10
c00178b5:	90                   	nop
c00178b6:	83 c4 0c             	add    esp,0xc
c00178b9:	c3                   	ret    

c00178ba <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00178ba:	b8 08 00 00 00       	mov    eax,0x8
c00178bf:	c3                   	ret    

c00178c0 <ISO9660::getName()>:
c00178c0:	b8 67 f0 01 c0       	mov    eax,0xc001f067
c00178c5:	c3                   	ret    

c00178c6 <ISO9660::closeDir(void*)>:
c00178c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00178cc:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00178cf:	90                   	nop

c00178d0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00178d0:	b8 01 00 00 00       	mov    eax,0x1
c00178d5:	c3                   	ret    

c00178d6 <ISO9660::unlink(char const*)>:
c00178d6:	b8 01 00 00 00       	mov    eax,0x1
c00178db:	c3                   	ret    

c00178dc <ISO9660::write(void*, unsigned long, void*, int*)>:
c00178dc:	b8 03 00 00 00       	mov    eax,0x3
c00178e1:	c3                   	ret    

c00178e2 <ISO9660::rename(char const*, char const*)>:
c00178e2:	b8 01 00 00 00       	mov    eax,0x1
c00178e7:	c3                   	ret    

c00178e8 <ISO9660::mkdir(char const*)>:
c00178e8:	b8 01 00 00 00       	mov    eax,0x1
c00178ed:	c3                   	ret    

c00178ee <ISO9660::~ISO9660()>:
c00178ee:	83 ec 0c             	sub    esp,0xc
c00178f1:	ba b8 f0 01 c0       	mov    edx,0xc001f0b8
c00178f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178fa:	89 10                	mov    DWORD PTR [eax],edx
c00178fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017900:	83 ec 0c             	sub    esp,0xc
c0017903:	50                   	push   eax
c0017904:	e8 87 2f ff ff       	call   c000a890 <Filesystem::~Filesystem()>
c0017909:	83 c4 10             	add    esp,0x10
c001790c:	90                   	nop
c001790d:	83 c4 0c             	add    esp,0xc
c0017910:	c3                   	ret    
c0017911:	90                   	nop

c0017912 <ISO9660::~ISO9660()>:
c0017912:	83 ec 0c             	sub    esp,0xc
c0017915:	83 ec 0c             	sub    esp,0xc
c0017918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001791c:	e8 cd ff ff ff       	call   c00178ee <ISO9660::~ISO9660()>
c0017921:	83 c4 10             	add    esp,0x10
c0017924:	83 ec 08             	sub    esp,0x8
c0017927:	6a 08                	push   0x8
c0017929:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001792d:	e8 22 2b ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c0017932:	83 c4 10             	add    esp,0x10
c0017935:	83 c4 0c             	add    esp,0xc
c0017938:	c3                   	ret    
c0017939:	90                   	nop

c001793a <ISO9660::exists(char const*)>:
c001793a:	83 ec 18             	sub    esp,0x18
c001793d:	68 82 f0 01 c0       	push   0xc001f082
c0017942:	e8 84 88 ff ff       	call   c00101cb <KePanic(char const*)>
c0017947:	31 c0                	xor    eax,eax
c0017949:	83 c4 1c             	add    esp,0x1c
c001794c:	c3                   	ret    
c001794d:	90                   	nop

c001794e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001794e:	56                   	push   esi
c001794f:	53                   	push   ebx
c0017950:	50                   	push   eax
c0017951:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017955:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017959:	85 db                	test   ebx,ebx
c001795b:	0f 84 82 00 00 00    	je     c00179e3 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017961:	85 f6                	test   esi,esi
c0017963:	74 7e                	je     c00179e3 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017965:	ba 03 00 00 00       	mov    edx,0x3
c001796a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001796f:	75 77                	jne    c00179e8 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017971:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017974:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c001797a:	74 34                	je     c00179b0 <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c001797c:	83 ec 0c             	sub    esp,0xc
c001797f:	50                   	push   eax
c0017980:	e8 3a ee fe ff       	call   c00067bf <init_percd>
c0017985:	83 c4 10             	add    esp,0x10
c0017988:	ba 0b 00 00 00       	mov    edx,0xb
c001798d:	40                   	inc    eax
c001798e:	74 58                	je     c00179e8 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017990:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017997:	74 10                	je     c00179a9 <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c0017999:	83 ec 0c             	sub    esp,0xc
c001799c:	68 a0 f0 01 c0       	push   0xc001f0a0
c00179a1:	e8 25 88 ff ff       	call   c00101cb <KePanic(char const*)>
c00179a6:	83 c4 10             	add    esp,0x10
c00179a9:	8a 03                	mov    al,BYTE PTR [ebx]
c00179ab:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c00179b0:	83 ec 0c             	sub    esp,0xc
c00179b3:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c00179ba:	83 c3 03             	add    ebx,0x3
c00179bd:	50                   	push   eax
c00179be:	e8 fc ed fe ff       	call   c00067bf <init_percd>
c00179c3:	59                   	pop    ecx
c00179c4:	58                   	pop    eax
c00179c5:	6a 00                	push   0x0
c00179c7:	53                   	push   ebx
c00179c8:	e8 30 e9 fe ff       	call   c00062fd <iso_open>
c00179cd:	83 c4 10             	add    esp,0x10
c00179d0:	ba 01 00 00 00       	mov    edx,0x1
c00179d5:	83 f8 ff             	cmp    eax,0xffffffff
c00179d8:	74 0e                	je     c00179e8 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179da:	83 c0 64             	add    eax,0x64
c00179dd:	31 d2                	xor    edx,edx
c00179df:	89 06                	mov    DWORD PTR [esi],eax
c00179e1:	eb 05                	jmp    c00179e8 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179e3:	ba 04 00 00 00       	mov    edx,0x4
c00179e8:	89 d0                	mov    eax,edx
c00179ea:	5a                   	pop    edx
c00179eb:	5b                   	pop    ebx
c00179ec:	5e                   	pop    esi
c00179ed:	c3                   	ret    

c00179ee <ISO9660::openDir(char const*, void**)>:
c00179ee:	56                   	push   esi
c00179ef:	53                   	push   ebx
c00179f0:	50                   	push   eax
c00179f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00179f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00179f9:	85 db                	test   ebx,ebx
c00179fb:	74 76                	je     c0017a73 <ISO9660::openDir(char const*, void**)+0x85>
c00179fd:	85 f6                	test   esi,esi
c00179ff:	74 72                	je     c0017a73 <ISO9660::openDir(char const*, void**)+0x85>
c0017a01:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017a04:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017a0a:	74 34                	je     c0017a40 <ISO9660::openDir(char const*, void**)+0x52>
c0017a0c:	83 ec 0c             	sub    esp,0xc
c0017a0f:	50                   	push   eax
c0017a10:	e8 aa ed fe ff       	call   c00067bf <init_percd>
c0017a15:	83 c4 10             	add    esp,0x10
c0017a18:	ba 0b 00 00 00       	mov    edx,0xb
c0017a1d:	40                   	inc    eax
c0017a1e:	74 58                	je     c0017a78 <ISO9660::openDir(char const*, void**)+0x8a>
c0017a20:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017a27:	74 10                	je     c0017a39 <ISO9660::openDir(char const*, void**)+0x4b>
c0017a29:	83 ec 0c             	sub    esp,0xc
c0017a2c:	68 a0 f0 01 c0       	push   0xc001f0a0
c0017a31:	e8 95 87 ff ff       	call   c00101cb <KePanic(char const*)>
c0017a36:	83 c4 10             	add    esp,0x10
c0017a39:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a3b:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017a40:	83 ec 0c             	sub    esp,0xc
c0017a43:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017a4a:	83 c3 03             	add    ebx,0x3
c0017a4d:	50                   	push   eax
c0017a4e:	e8 6c ed fe ff       	call   c00067bf <init_percd>
c0017a53:	59                   	pop    ecx
c0017a54:	58                   	pop    eax
c0017a55:	6a 01                	push   0x1
c0017a57:	53                   	push   ebx
c0017a58:	e8 a0 e8 fe ff       	call   c00062fd <iso_open>
c0017a5d:	83 c4 10             	add    esp,0x10
c0017a60:	ba 01 00 00 00       	mov    edx,0x1
c0017a65:	83 f8 ff             	cmp    eax,0xffffffff
c0017a68:	74 0e                	je     c0017a78 <ISO9660::openDir(char const*, void**)+0x8a>
c0017a6a:	83 c0 64             	add    eax,0x64
c0017a6d:	31 d2                	xor    edx,edx
c0017a6f:	89 06                	mov    DWORD PTR [esi],eax
c0017a71:	eb 05                	jmp    c0017a78 <ISO9660::openDir(char const*, void**)+0x8a>
c0017a73:	ba 04 00 00 00       	mov    edx,0x4
c0017a78:	89 d0                	mov    eax,edx
c0017a7a:	5a                   	pop    edx
c0017a7b:	5b                   	pop    ebx
c0017a7c:	5e                   	pop    esi
c0017a7d:	c3                   	ret    

c0017a7e <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017a7e:	53                   	push   ebx
c0017a7f:	83 ec 08             	sub    esp,0x8
c0017a82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a86:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017a8a:	85 c0                	test   eax,eax
c0017a8c:	74 25                	je     c0017ab3 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017a8e:	85 db                	test   ebx,ebx
c0017a90:	74 21                	je     c0017ab3 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017a92:	83 e8 64             	sub    eax,0x64
c0017a95:	52                   	push   edx
c0017a96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a9a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a9e:	50                   	push   eax
c0017a9f:	e8 01 e9 fe ff       	call   c00063a5 <iso_read>
c0017aa4:	83 c4 10             	add    esp,0x10
c0017aa7:	89 03                	mov    DWORD PTR [ebx],eax
c0017aa9:	09 d0                	or     eax,edx
c0017aab:	0f 94 c0             	sete   al
c0017aae:	0f b6 c0             	movzx  eax,al
c0017ab1:	eb 05                	jmp    c0017ab8 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017ab3:	b8 04 00 00 00       	mov    eax,0x4
c0017ab8:	83 c4 08             	add    esp,0x8
c0017abb:	5b                   	pop    ebx
c0017abc:	c3                   	ret    
c0017abd:	90                   	nop

c0017abe <ISO9660::seek(void*, unsigned long long)>:
c0017abe:	57                   	push   edi
c0017abf:	56                   	push   esi
c0017ac0:	b8 04 00 00 00       	mov    eax,0x4
c0017ac5:	51                   	push   ecx
c0017ac6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017aca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017ace:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017ad2:	85 d2                	test   edx,edx
c0017ad4:	74 1c                	je     c0017af2 <ISO9660::seek(void*, unsigned long long)+0x34>
c0017ad6:	6a 00                	push   0x0
c0017ad8:	83 ea 64             	sub    edx,0x64
c0017adb:	57                   	push   edi
c0017adc:	56                   	push   esi
c0017add:	52                   	push   edx
c0017ade:	e8 d8 e9 fe ff       	call   c00064bb <iso_seek>
c0017ae3:	83 c4 10             	add    esp,0x10
c0017ae6:	31 f0                	xor    eax,esi
c0017ae8:	31 fa                	xor    edx,edi
c0017aea:	09 d0                	or     eax,edx
c0017aec:	0f 95 c0             	setne  al
c0017aef:	0f b6 c0             	movzx  eax,al
c0017af2:	5a                   	pop    edx
c0017af3:	5e                   	pop    esi
c0017af4:	5f                   	pop    edi
c0017af5:	c3                   	ret    

c0017af6 <ISO9660::tell(void*, unsigned long long*)>:
c0017af6:	53                   	push   ebx
c0017af7:	83 ec 08             	sub    esp,0x8
c0017afa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017afe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b02:	85 c0                	test   eax,eax
c0017b04:	74 1c                	je     c0017b22 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b06:	85 db                	test   ebx,ebx
c0017b08:	74 18                	je     c0017b22 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b0a:	83 ec 0c             	sub    esp,0xc
c0017b0d:	83 e8 64             	sub    eax,0x64
c0017b10:	50                   	push   eax
c0017b11:	e8 29 ea fe ff       	call   c000653f <iso_tell>
c0017b16:	83 c4 10             	add    esp,0x10
c0017b19:	89 03                	mov    DWORD PTR [ebx],eax
c0017b1b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017b1e:	31 c0                	xor    eax,eax
c0017b20:	eb 05                	jmp    c0017b27 <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017b22:	b8 04 00 00 00       	mov    eax,0x4
c0017b27:	83 c4 08             	add    esp,0x8
c0017b2a:	5b                   	pop    ebx
c0017b2b:	c3                   	ret    

c0017b2c <ISO9660::stat(void*, unsigned long long*)>:
c0017b2c:	53                   	push   ebx
c0017b2d:	83 ec 08             	sub    esp,0x8
c0017b30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b34:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b38:	85 c0                	test   eax,eax
c0017b3a:	74 20                	je     c0017b5c <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b3c:	85 db                	test   ebx,ebx
c0017b3e:	74 1c                	je     c0017b5c <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b40:	83 ec 0c             	sub    esp,0xc
c0017b43:	83 e8 64             	sub    eax,0x64
c0017b46:	50                   	push   eax
c0017b47:	e8 24 ea fe ff       	call   c0006570 <iso_total>
c0017b4c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017b53:	89 03                	mov    DWORD PTR [ebx],eax
c0017b55:	83 c4 10             	add    esp,0x10
c0017b58:	31 c0                	xor    eax,eax
c0017b5a:	eb 05                	jmp    c0017b61 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017b5c:	b8 04 00 00 00       	mov    eax,0x4
c0017b61:	83 c4 08             	add    esp,0x8
c0017b64:	5b                   	pop    ebx
c0017b65:	c3                   	ret    

c0017b66 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017b66:	55                   	push   ebp
c0017b67:	57                   	push   edi
c0017b68:	56                   	push   esi
c0017b69:	53                   	push   ebx
c0017b6a:	83 ec 0c             	sub    esp,0xc
c0017b6d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017b71:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017b75:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017b79:	85 ff                	test   edi,edi
c0017b7b:	0f 94 c2             	sete   dl
c0017b7e:	85 f6                	test   esi,esi
c0017b80:	0f 94 c0             	sete   al
c0017b83:	08 c2                	or     dl,al
c0017b85:	0f 85 9e 00 00 00    	jne    c0017c29 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017b8b:	85 db                	test   ebx,ebx
c0017b8d:	0f 84 96 00 00 00    	je     c0017c29 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017b93:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017b96:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017b9c:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017ba3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017ba6:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017bac:	74 34                	je     c0017be2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017bae:	83 ec 0c             	sub    esp,0xc
c0017bb1:	50                   	push   eax
c0017bb2:	e8 08 ec fe ff       	call   c00067bf <init_percd>
c0017bb7:	83 c4 10             	add    esp,0x10
c0017bba:	ba 0b 00 00 00       	mov    edx,0xb
c0017bbf:	40                   	inc    eax
c0017bc0:	74 6c                	je     c0017c2e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017bc2:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017bc9:	74 10                	je     c0017bdb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017bcb:	83 ec 0c             	sub    esp,0xc
c0017bce:	68 a0 f0 01 c0       	push   0xc001f0a0
c0017bd3:	e8 f3 85 ff ff       	call   c00101cb <KePanic(char const*)>
c0017bd8:	83 c4 10             	add    esp,0x10
c0017bdb:	8a 03                	mov    al,BYTE PTR [ebx]
c0017bdd:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017be2:	83 c3 03             	add    ebx,0x3
c0017be5:	52                   	push   edx
c0017be6:	52                   	push   edx
c0017be7:	6a 00                	push   0x0
c0017be9:	53                   	push   ebx
c0017bea:	e8 0e e7 fe ff       	call   c00062fd <iso_open>
c0017bef:	83 c4 10             	add    esp,0x10
c0017bf2:	89 c5                	mov    ebp,eax
c0017bf4:	83 f8 ff             	cmp    eax,0xffffffff
c0017bf7:	75 0f                	jne    c0017c08 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017bf9:	50                   	push   eax
c0017bfa:	50                   	push   eax
c0017bfb:	6a 01                	push   0x1
c0017bfd:	53                   	push   ebx
c0017bfe:	e8 fa e6 fe ff       	call   c00062fd <iso_open>
c0017c03:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017c06:	eb 1a                	jmp    c0017c22 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017c08:	83 ec 0c             	sub    esp,0xc
c0017c0b:	50                   	push   eax
c0017c0c:	e8 5f e9 fe ff       	call   c0006570 <iso_total>
c0017c11:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c18:	89 06                	mov    DWORD PTR [esi],eax
c0017c1a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c1d:	e8 65 e7 fe ff       	call   c0006387 <iso_close>
c0017c22:	83 c4 10             	add    esp,0x10
c0017c25:	31 d2                	xor    edx,edx
c0017c27:	eb 05                	jmp    c0017c2e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017c29:	ba 04 00 00 00       	mov    edx,0x4
c0017c2e:	83 c4 0c             	add    esp,0xc
c0017c31:	89 d0                	mov    eax,edx
c0017c33:	5b                   	pop    ebx
c0017c34:	5e                   	pop    esi
c0017c35:	5f                   	pop    edi
c0017c36:	5d                   	pop    ebp
c0017c37:	c3                   	ret    

c0017c38 <ISO9660::close(void*)>:
c0017c38:	83 ec 0c             	sub    esp,0xc
c0017c3b:	b8 04 00 00 00       	mov    eax,0x4
c0017c40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c44:	85 d2                	test   edx,edx
c0017c46:	74 11                	je     c0017c59 <ISO9660::close(void*)+0x21>
c0017c48:	83 ec 0c             	sub    esp,0xc
c0017c4b:	83 ea 64             	sub    edx,0x64
c0017c4e:	52                   	push   edx
c0017c4f:	e8 33 e7 fe ff       	call   c0006387 <iso_close>
c0017c54:	83 c4 10             	add    esp,0x10
c0017c57:	31 c0                	xor    eax,eax
c0017c59:	83 c4 0c             	add    esp,0xc
c0017c5c:	c3                   	ret    
c0017c5d:	90                   	nop

c0017c5e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017c5e:	55                   	push   ebp
c0017c5f:	57                   	push   edi
c0017c60:	56                   	push   esi
c0017c61:	53                   	push   ebx
c0017c62:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017c68:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017c6f:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017c76:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017c7d:	85 c0                	test   eax,eax
c0017c7f:	0f 84 96 00 00 00    	je     c0017d1b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017c85:	85 db                	test   ebx,ebx
c0017c87:	0f 84 8e 00 00 00    	je     c0017d1b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017c8d:	83 ec 0c             	sub    esp,0xc
c0017c90:	83 e8 64             	sub    eax,0x64
c0017c93:	50                   	push   eax
c0017c94:	e8 28 e9 fe ff       	call   c00065c1 <iso_readdir>
c0017c99:	83 c4 10             	add    esp,0x10
c0017c9c:	89 c6                	mov    esi,eax
c0017c9e:	85 c0                	test   eax,eax
c0017ca0:	75 18                	jne    c0017cba <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017ca2:	52                   	push   edx
c0017ca3:	68 10 01 00 00       	push   0x110
c0017ca8:	6a 00                	push   0x0
c0017caa:	57                   	push   edi
c0017cab:	e8 20 88 fe ff       	call   c00004d0 <memset>
c0017cb0:	83 c4 10             	add    esp,0x10
c0017cb3:	b8 01 00 00 00       	mov    eax,0x1
c0017cb8:	eb 66                	jmp    c0017d20 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017cba:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017cc0:	8d 68 08             	lea    ebp,[eax+0x8]
c0017cc3:	83 ec 0c             	sub    esp,0xc
c0017cc6:	55                   	push   ebp
c0017cc7:	e8 74 88 fe ff       	call   c0000540 <strlen>
c0017ccc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017cd4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017cd8:	83 c4 10             	add    esp,0x10
c0017cdb:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017cdf:	75 0a                	jne    c0017ceb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017ce1:	b8 02 00 00 00       	mov    eax,0x2
c0017ce6:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017ce9:	74 05                	je     c0017cf0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017ceb:	b8 01 00 00 00       	mov    eax,0x1
c0017cf0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cf4:	50                   	push   eax
c0017cf5:	50                   	push   eax
c0017cf6:	55                   	push   ebp
c0017cf7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017cfb:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017cff:	50                   	push   eax
c0017d00:	e8 fb 88 fe ff       	call   c0000600 <strcpy>
c0017d05:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017d0c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d0e:	31 c0                	xor    eax,eax
c0017d10:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017d16:	83 c4 10             	add    esp,0x10
c0017d19:	eb 05                	jmp    c0017d20 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d1b:	b8 04 00 00 00       	mov    eax,0x4
c0017d20:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017d26:	5b                   	pop    ebx
c0017d27:	5e                   	pop    esi
c0017d28:	5f                   	pop    edi
c0017d29:	5d                   	pop    ebp
c0017d2a:	c3                   	ret    

c0017d2b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017d2b:	57                   	push   edi
c0017d2c:	56                   	push   esi
c0017d2d:	53                   	push   ebx
c0017d2e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017d32:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017d36:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017d3a:	39 35 24 53 02 c0    	cmp    DWORD PTR ds:0xc0025324,esi
c0017d40:	75 08                	jne    c0017d4a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017d42:	38 1d d0 fa 01 c0    	cmp    BYTE PTR ds:0xc001fad0,bl
c0017d48:	74 4a                	je     c0017d94 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017d4a:	83 ec 0c             	sub    esp,0xc
c0017d4d:	31 d2                	xor    edx,edx
c0017d4f:	68 40 53 02 c0       	push   0xc0025340
c0017d54:	0f be c3             	movsx  eax,bl
c0017d57:	6a 01                	push   0x1
c0017d59:	52                   	push   edx
c0017d5a:	56                   	push   esi
c0017d5b:	ff 34 85 1c 43 02 c0 	push   DWORD PTR [eax*4-0x3ffdbce4]
c0017d62:	e8 09 4f ff ff       	call   c000cc70 <LogicalDisk::read(unsigned long long, int, void*)>
c0017d67:	83 c4 20             	add    esp,0x20
c0017d6a:	85 c0                	test   eax,eax
c0017d6c:	75 0e                	jne    c0017d7c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017d6e:	89 35 24 53 02 c0    	mov    DWORD PTR ds:0xc0025324,esi
c0017d74:	88 1d d0 fa 01 c0    	mov    BYTE PTR ds:0xc001fad0,bl
c0017d7a:	eb 18                	jmp    c0017d94 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017d7c:	50                   	push   eax
c0017d7d:	68 00 08 00 00       	push   0x800
c0017d82:	6a 00                	push   0x0
c0017d84:	57                   	push   edi
c0017d85:	e8 46 87 fe ff       	call   c00004d0 <memset>
c0017d8a:	83 c4 10             	add    esp,0x10
c0017d8d:	b8 01 00 00 00       	mov    eax,0x1
c0017d92:	eb 0e                	jmp    c0017da2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017d94:	be 40 53 02 c0       	mov    esi,0xc0025340
c0017d99:	b9 00 08 00 00       	mov    ecx,0x800
c0017d9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017da0:	31 c0                	xor    eax,eax
c0017da2:	5b                   	pop    ebx
c0017da3:	5e                   	pop    esi
c0017da4:	5f                   	pop    edi
c0017da5:	c3                   	ret    

c0017da6 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017da6:	53                   	push   ebx
c0017da7:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017dad:	c7 05 24 53 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0025324,0xdeadbeef
c0017db7:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017dbe:	8d 58 41             	lea    ebx,[eax+0x41]
c0017dc1:	0f be db             	movsx  ebx,bl
c0017dc4:	53                   	push   ebx
c0017dc5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017dc9:	50                   	push   eax
c0017dca:	6a 10                	push   0x10
c0017dcc:	e8 5a ff ff ff       	call   c0017d2b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017dd1:	83 c4 10             	add    esp,0x10
c0017dd4:	31 d2                	xor    edx,edx
c0017dd6:	85 c0                	test   eax,eax
c0017dd8:	75 33                	jne    c0017e0d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dda:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017ddf:	75 2c                	jne    c0017e0d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017de1:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017de6:	75 25                	jne    c0017e0d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017de8:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017ded:	75 1e                	jne    c0017e0d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017def:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017df4:	75 17                	jne    c0017e0d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017df6:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017dfb:	75 10                	jne    c0017e0d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dfd:	83 ec 0c             	sub    esp,0xc
c0017e00:	53                   	push   ebx
c0017e01:	e8 b9 e9 fe ff       	call   c00067bf <init_percd>
c0017e06:	83 c4 10             	add    esp,0x10
c0017e09:	40                   	inc    eax
c0017e0a:	0f 95 c2             	setne  dl
c0017e0d:	88 d0                	mov    al,dl
c0017e0f:	81 c4 08 08 00 00    	add    esp,0x808
c0017e15:	5b                   	pop    ebx
c0017e16:	c3                   	ret    
c0017e17:	90                   	nop

c0017e18 <ISO9660::ISO9660()>:
c0017e18:	83 ec 0c             	sub    esp,0xc
c0017e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e1f:	83 ec 0c             	sub    esp,0xc
c0017e22:	50                   	push   eax
c0017e23:	e8 44 2a ff ff       	call   c000a86c <Filesystem::Filesystem()>
c0017e28:	83 c4 10             	add    esp,0x10
c0017e2b:	ba b8 f0 01 c0       	mov    edx,0xc001f0b8
c0017e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e34:	89 10                	mov    DWORD PTR [eax],edx
c0017e36:	e8 86 ea fe ff       	call   c00068c1 <fs_iso9660_init>
c0017e3b:	90                   	nop
c0017e3c:	83 c4 0c             	add    esp,0xc
c0017e3f:	c3                   	ret    

c0017e40 <SoundCard::beginPlayback()>:
c0017e40:	c7 44 24 04 18 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f118
c0017e48:	e9 7e 83 ff ff       	jmp    c00101cb <KePanic(char const*)>
c0017e4d:	90                   	nop

c0017e4e <SoundCard::stopPlayback()>:
c0017e4e:	c7 44 24 04 18 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f118
c0017e56:	e9 70 83 ff ff       	jmp    c00101cb <KePanic(char const*)>
c0017e5b:	90                   	nop

c0017e5c <SoundCard::SoundCard(char const*)>:
c0017e5c:	83 ec 1c             	sub    esp,0x1c
c0017e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e63:	83 ec 08             	sub    esp,0x8
c0017e66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e6a:	50                   	push   eax
c0017e6b:	e8 b0 3c ff ff       	call   c000bb20 <Device::Device(char const*)>
c0017e70:	83 c4 10             	add    esp,0x10
c0017e73:	ba 64 f1 01 c0       	mov    edx,0xc001f164
c0017e78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e7c:	89 10                	mov    DWORD PTR [eax],edx
c0017e7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e82:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e8d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017e97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e9b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017ea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ea9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017eb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017ec1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ec9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017ece:	7f 19                	jg     c0017ee9 <SoundCard::SoundCard(char const*)+0x8d>
c0017ed0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ed8:	83 c2 54             	add    edx,0x54
c0017edb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017ee3:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017ee7:	eb e0                	jmp    c0017ec9 <SoundCard::SoundCard(char const*)+0x6d>
c0017ee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eed:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017ef4:	90                   	nop
c0017ef5:	83 c4 1c             	add    esp,0x1c
c0017ef8:	c3                   	ret    
c0017ef9:	90                   	nop

c0017efa <SoundCard::~SoundCard()>:
c0017efa:	83 ec 0c             	sub    esp,0xc
c0017efd:	ba 64 f1 01 c0       	mov    edx,0xc001f164
c0017f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f06:	89 10                	mov    DWORD PTR [eax],edx
c0017f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f0c:	83 ec 0c             	sub    esp,0xc
c0017f0f:	50                   	push   eax
c0017f10:	e8 75 39 ff ff       	call   c000b88a <Device::~Device()>
c0017f15:	83 c4 10             	add    esp,0x10
c0017f18:	90                   	nop
c0017f19:	83 c4 0c             	add    esp,0xc
c0017f1c:	c3                   	ret    
c0017f1d:	90                   	nop

c0017f1e <SoundCard::~SoundCard()>:
c0017f1e:	83 ec 0c             	sub    esp,0xc
c0017f21:	83 ec 0c             	sub    esp,0xc
c0017f24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f28:	e8 cd ff ff ff       	call   c0017efa <SoundCard::~SoundCard()>
c0017f2d:	83 c4 10             	add    esp,0x10
c0017f30:	83 ec 08             	sub    esp,0x8
c0017f33:	68 e8 01 00 00       	push   0x1e8
c0017f38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f3c:	e8 13 25 ff ff       	call   c000a454 <operator delete(void*, unsigned long)>
c0017f41:	83 c4 10             	add    esp,0x10
c0017f44:	83 c4 0c             	add    esp,0xc
c0017f47:	c3                   	ret    

c0017f48 <SoundCard::configureRates(int, int, int)>:
c0017f48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017f4c:	31 c0                	xor    eax,eax
c0017f4e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017f55:	75 20                	jne    c0017f77 <SoundCard::configureRates(int, int, int)+0x2f>
c0017f57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f5b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017f61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f65:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f6f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017f75:	b0 01                	mov    al,0x1
c0017f77:	c3                   	ret    

c0017f78 <SoundCard::getSamples16(int, short*)>:
c0017f78:	55                   	push   ebp
c0017f79:	57                   	push   edi
c0017f7a:	31 ff                	xor    edi,edi
c0017f7c:	56                   	push   esi
c0017f7d:	53                   	push   ebx
c0017f7e:	31 db                	xor    ebx,ebx
c0017f80:	83 ec 10             	sub    esp,0x10
c0017f83:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017f87:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017f8b:	8d 04 36             	lea    eax,[esi+esi*1]
c0017f8e:	50                   	push   eax
c0017f8f:	6a 00                	push   0x0
c0017f91:	55                   	push   ebp
c0017f92:	e8 39 85 fe ff       	call   c00004d0 <memset>
c0017f97:	83 c4 10             	add    esp,0x10
c0017f9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f9e:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017fa5:	85 c0                	test   eax,eax
c0017fa7:	74 1b                	je     c0017fc4 <SoundCard::getSamples16(int, short*)+0x4c>
c0017fa9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017fad:	75 15                	jne    c0017fc4 <SoundCard::getSamples16(int, short*)+0x4c>
c0017faf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017fb3:	55                   	push   ebp
c0017fb4:	56                   	push   esi
c0017fb5:	50                   	push   eax
c0017fb6:	e8 ed 02 00 00       	call   c00182a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017fbb:	83 c4 10             	add    esp,0x10
c0017fbe:	39 c7                	cmp    edi,eax
c0017fc0:	7d 02                	jge    c0017fc4 <SoundCard::getSamples16(int, short*)+0x4c>
c0017fc2:	89 c7                	mov    edi,eax
c0017fc4:	43                   	inc    ebx
c0017fc5:	83 fb 20             	cmp    ebx,0x20
c0017fc8:	75 d0                	jne    c0017f9a <SoundCard::getSamples16(int, short*)+0x22>
c0017fca:	83 c4 0c             	add    esp,0xc
c0017fcd:	89 f8                	mov    eax,edi
c0017fcf:	5b                   	pop    ebx
c0017fd0:	5e                   	pop    esi
c0017fd1:	5f                   	pop    edi
c0017fd2:	5d                   	pop    ebp
c0017fd3:	c3                   	ret    

c0017fd4 <SoundCard::getSamples32(int, int*)>:
c0017fd4:	55                   	push   ebp
c0017fd5:	57                   	push   edi
c0017fd6:	31 ff                	xor    edi,edi
c0017fd8:	56                   	push   esi
c0017fd9:	31 f6                	xor    esi,esi
c0017fdb:	53                   	push   ebx
c0017fdc:	83 ec 10             	sub    esp,0x10
c0017fdf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fe3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017fe7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017feb:	c1 e0 02             	shl    eax,0x2
c0017fee:	50                   	push   eax
c0017fef:	6a 00                	push   0x0
c0017ff1:	55                   	push   ebp
c0017ff2:	e8 d9 84 fe ff       	call   c00004d0 <memset>
c0017ff7:	83 c4 10             	add    esp,0x10
c0017ffa:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0018001:	85 c0                	test   eax,eax
c0018003:	74 1b                	je     c0018020 <SoundCard::getSamples32(int, int*)+0x4c>
c0018005:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018009:	75 15                	jne    c0018020 <SoundCard::getSamples32(int, int*)+0x4c>
c001800b:	53                   	push   ebx
c001800c:	55                   	push   ebp
c001800d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018011:	50                   	push   eax
c0018012:	e8 55 03 00 00       	call   c001836c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0018017:	83 c4 10             	add    esp,0x10
c001801a:	39 c6                	cmp    esi,eax
c001801c:	7d 02                	jge    c0018020 <SoundCard::getSamples32(int, int*)+0x4c>
c001801e:	89 c6                	mov    esi,eax
c0018020:	47                   	inc    edi
c0018021:	83 ff 20             	cmp    edi,0x20
c0018024:	75 d4                	jne    c0017ffa <SoundCard::getSamples32(int, int*)+0x26>
c0018026:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001802c:	85 f6                	test   esi,esi
c001802e:	75 0f                	jne    c001803f <SoundCard::getSamples32(int, int*)+0x6b>
c0018030:	84 c0                	test   al,al
c0018032:	74 1b                	je     c001804f <SoundCard::getSamples32(int, int*)+0x7b>
c0018034:	83 ec 0c             	sub    esp,0xc
c0018037:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018039:	53                   	push   ebx
c001803a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001803d:	eb 0d                	jmp    c001804c <SoundCard::getSamples32(int, int*)+0x78>
c001803f:	84 c0                	test   al,al
c0018041:	75 0c                	jne    c001804f <SoundCard::getSamples32(int, int*)+0x7b>
c0018043:	83 ec 0c             	sub    esp,0xc
c0018046:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018048:	53                   	push   ebx
c0018049:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001804c:	83 c4 10             	add    esp,0x10
c001804f:	83 c4 0c             	add    esp,0xc
c0018052:	89 f0                	mov    eax,esi
c0018054:	5b                   	pop    ebx
c0018055:	5e                   	pop    esi
c0018056:	5f                   	pop    edi
c0018057:	5d                   	pop    ebp
c0018058:	c3                   	ret    
c0018059:	90                   	nop

c001805a <SoundCard::addChannel(SoundPort*)>:
c001805a:	83 ec 0c             	sub    esp,0xc
c001805d:	31 c0                	xor    eax,eax
c001805f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018063:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001806b:	74 1b                	je     c0018088 <SoundCard::addChannel(SoundPort*)+0x2e>
c001806d:	40                   	inc    eax
c001806e:	83 f8 20             	cmp    eax,0x20
c0018071:	75 f0                	jne    c0018063 <SoundCard::addChannel(SoundPort*)+0x9>
c0018073:	83 ec 0c             	sub    esp,0xc
c0018076:	68 3d f1 01 c0       	push   0xc001f13d
c001807b:	e8 4b 81 ff ff       	call   c00101cb <KePanic(char const*)>
c0018080:	83 c4 10             	add    esp,0x10
c0018083:	83 c8 ff             	or     eax,0xffffffff
c0018086:	eb 0b                	jmp    c0018093 <SoundCard::addChannel(SoundPort*)+0x39>
c0018088:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001808c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0018093:	83 c4 0c             	add    esp,0xc
c0018096:	c3                   	ret    
c0018097:	90                   	nop

c0018098 <SoundCard::removeChannel(int)>:
c0018098:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001809c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180a0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00180ab:	c3                   	ret    

c00180ac <SoundPort::SoundPort(int, int, int, int)>:
c00180ac:	83 ec 0c             	sub    esp,0xc
c00180af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00180ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180be:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00180c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00180ca:	89 10                	mov    DWORD PTR [eax],edx
c00180cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00180d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180df:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00180e2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00180e7:	75 13                	jne    c00180fc <SoundPort::SoundPort(int, int, int, int)+0x50>
c00180e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00180ef:	05 a0 0f 00 00       	add    eax,0xfa0
c00180f4:	01 c0                	add    eax,eax
c00180f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00180fa:	66 90                	xchg   ax,ax
c00180fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018100:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018104:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001810b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0018112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018116:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018119:	c1 e0 02             	shl    eax,0x2
c001811c:	83 ec 0c             	sub    esp,0xc
c001811f:	50                   	push   eax
c0018120:	e8 94 f6 fe ff       	call   c00077b9 <malloc>
c0018125:	83 c4 10             	add    esp,0x10
c0018128:	89 c2                	mov    edx,eax
c001812a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001812e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018131:	90                   	nop
c0018132:	83 c4 0c             	add    esp,0xc
c0018135:	c3                   	ret    
c0018136:	66 90                	xchg   ax,ax

c0018138 <SoundPort::~SoundPort()>:
c0018138:	83 ec 0c             	sub    esp,0xc
c001813b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001813f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018142:	85 c0                	test   eax,eax
c0018144:	74 1e                	je     c0018164 <SoundPort::~SoundPort()+0x2c>
c0018146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001814a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001814d:	83 ec 0c             	sub    esp,0xc
c0018150:	50                   	push   eax
c0018151:	e8 73 f6 fe ff       	call   c00077c9 <free>
c0018156:	83 c4 10             	add    esp,0x10
c0018159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001815d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018164:	90                   	nop
c0018165:	83 c4 0c             	add    esp,0xc
c0018168:	c3                   	ret    
c0018169:	90                   	nop
c001816a:	66 90                	xchg   ax,ax

c001816c <SoundPort::unpause()>:
c001816c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018170:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0018174:	c3                   	ret    
c0018175:	90                   	nop
c0018176:	66 90                	xchg   ax,ax

c0018178 <SoundPort::pause()>:
c0018178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001817c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0018180:	c3                   	ret    
c0018181:	90                   	nop
c0018182:	66 90                	xchg   ax,ax

c0018184 <SoundPort::getBufferUsed()>:
c0018184:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018188:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001818b:	c3                   	ret    

c001818c <SoundPort::getBufferSize()>:
c001818c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018190:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018193:	c3                   	ret    

c0018194 <SoundPort::buffer16(short*, int)>:
c0018194:	55                   	push   ebp
c0018195:	57                   	push   edi
c0018196:	56                   	push   esi
c0018197:	53                   	push   ebx
c0018198:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001819c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00181a0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00181a3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00181a6:	74 68                	je     c0018210 <SoundPort::buffer16(short*, int)+0x7c>
c00181a8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00181ac:	85 c9                	test   ecx,ecx
c00181ae:	7e 60                	jle    c0018210 <SoundPort::buffer16(short*, int)+0x7c>
c00181b0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00181b4:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00181b7:	c1 e1 0f             	shl    ecx,0xf
c00181ba:	8d 70 01             	lea    esi,[eax+0x1]
c00181bd:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00181c0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00181c3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00181c6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00181c9:	74 4d                	je     c0018218 <SoundPort::buffer16(short*, int)+0x84>
c00181cb:	31 f6                	xor    esi,esi
c00181cd:	eb 21                	jmp    c00181f0 <SoundPort::buffer16(short*, int)+0x5c>
c00181cf:	90                   	nop
c00181d0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00181d5:	8d 79 01             	lea    edi,[ecx+0x1]
c00181d8:	c1 e3 0f             	shl    ebx,0xf
c00181db:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00181de:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00181e1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00181e4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00181e7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00181ea:	74 1c                	je     c0018208 <SoundPort::buffer16(short*, int)+0x74>
c00181ec:	89 c6                	mov    esi,eax
c00181ee:	66 90                	xchg   ax,ax
c00181f0:	8d 46 01             	lea    eax,[esi+0x1]
c00181f3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00181f7:	75 d7                	jne    c00181d0 <SoundPort::buffer16(short*, int)+0x3c>
c00181f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00181fd:	8d 76 00             	lea    esi,[esi+0x0]
c0018200:	5b                   	pop    ebx
c0018201:	5e                   	pop    esi
c0018202:	5f                   	pop    edi
c0018203:	5d                   	pop    ebp
c0018204:	c3                   	ret    
c0018205:	8d 76 00             	lea    esi,[esi+0x0]
c0018208:	5b                   	pop    ebx
c0018209:	8d 46 02             	lea    eax,[esi+0x2]
c001820c:	5e                   	pop    esi
c001820d:	5f                   	pop    edi
c001820e:	5d                   	pop    ebp
c001820f:	c3                   	ret    
c0018210:	5b                   	pop    ebx
c0018211:	31 c0                	xor    eax,eax
c0018213:	5e                   	pop    esi
c0018214:	5f                   	pop    edi
c0018215:	5d                   	pop    ebp
c0018216:	c3                   	ret    
c0018217:	90                   	nop
c0018218:	b8 01 00 00 00       	mov    eax,0x1
c001821d:	eb e1                	jmp    c0018200 <SoundPort::buffer16(short*, int)+0x6c>
c001821f:	90                   	nop

c0018220 <SoundPort::buffer32(int*, int)>:
c0018220:	55                   	push   ebp
c0018221:	57                   	push   edi
c0018222:	56                   	push   esi
c0018223:	53                   	push   ebx
c0018224:	51                   	push   ecx
c0018225:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018229:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001822d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018230:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018234:	89 04 24             	mov    DWORD PTR [esp],eax
c0018237:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001823a:	74 5c                	je     c0018298 <SoundPort::buffer32(int*, int)+0x78>
c001823c:	85 c0                	test   eax,eax
c001823e:	7e 58                	jle    c0018298 <SoundPort::buffer32(int*, int)+0x78>
c0018240:	8d 71 01             	lea    esi,[ecx+0x1]
c0018243:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018246:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018249:	8b 37                	mov    esi,DWORD PTR [edi]
c001824b:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001824e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018251:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018254:	74 4a                	je     c00182a0 <SoundPort::buffer32(int*, int)+0x80>
c0018256:	31 f6                	xor    esi,esi
c0018258:	eb 1e                	jmp    c0018278 <SoundPort::buffer32(int*, int)+0x58>
c001825a:	66 90                	xchg   ax,ax
c001825c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001825f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0018262:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0018265:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018268:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001826c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001826f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018272:	74 18                	je     c001828c <SoundPort::buffer32(int*, int)+0x6c>
c0018274:	89 de                	mov    esi,ebx
c0018276:	66 90                	xchg   ax,ax
c0018278:	8d 5e 01             	lea    ebx,[esi+0x1]
c001827b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001827e:	75 dc                	jne    c001825c <SoundPort::buffer32(int*, int)+0x3c>
c0018280:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0018283:	90                   	nop
c0018284:	5a                   	pop    edx
c0018285:	5b                   	pop    ebx
c0018286:	5e                   	pop    esi
c0018287:	5f                   	pop    edi
c0018288:	5d                   	pop    ebp
c0018289:	c3                   	ret    
c001828a:	66 90                	xchg   ax,ax
c001828c:	5a                   	pop    edx
c001828d:	8d 46 02             	lea    eax,[esi+0x2]
c0018290:	5b                   	pop    ebx
c0018291:	5e                   	pop    esi
c0018292:	5f                   	pop    edi
c0018293:	5d                   	pop    ebp
c0018294:	c3                   	ret    
c0018295:	8d 76 00             	lea    esi,[esi+0x0]
c0018298:	5a                   	pop    edx
c0018299:	31 c0                	xor    eax,eax
c001829b:	5b                   	pop    ebx
c001829c:	5e                   	pop    esi
c001829d:	5f                   	pop    edi
c001829e:	5d                   	pop    ebp
c001829f:	c3                   	ret    
c00182a0:	b8 01 00 00 00       	mov    eax,0x1
c00182a5:	eb dd                	jmp    c0018284 <SoundPort::buffer32(int*, int)+0x64>
c00182a7:	90                   	nop

c00182a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00182a8:	57                   	push   edi
c00182a9:	56                   	push   esi
c00182aa:	53                   	push   ebx
c00182ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00182af:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00182b3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00182b9:	39 03                	cmp    DWORD PTR [ebx],eax
c00182bb:	74 13                	je     c00182d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00182bd:	83 ec 0c             	sub    esp,0xc
c00182c0:	68 90 f1 01 c0       	push   0xc001f190
c00182c5:	e8 01 7f ff ff       	call   c00101cb <KePanic(char const*)>
c00182ca:	83 c4 10             	add    esp,0x10
c00182cd:	8d 76 00             	lea    esi,[esi+0x0]
c00182d0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00182d6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00182d9:	74 11                	je     c00182ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00182db:	83 ec 0c             	sub    esp,0xc
c00182de:	68 cf f1 01 c0       	push   0xc001f1cf
c00182e3:	e8 e3 7e ff ff       	call   c00101cb <KePanic(char const*)>
c00182e8:	83 c4 10             	add    esp,0x10
c00182eb:	90                   	nop
c00182ec:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00182f2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00182f5:	74 11                	je     c0018308 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00182f7:	83 ec 0c             	sub    esp,0xc
c00182fa:	68 cf f1 01 c0       	push   0xc001f1cf
c00182ff:	e8 c7 7e ff ff       	call   c00101cb <KePanic(char const*)>
c0018304:	83 c4 10             	add    esp,0x10
c0018307:	90                   	nop
c0018308:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001830b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001830f:	7e 07                	jle    c0018318 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0018311:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018315:	8d 76 00             	lea    esi,[esi+0x0]
c0018318:	85 f6                	test   esi,esi
c001831a:	7e 2c                	jle    c0018348 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001831c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018320:	8d 3c 36             	lea    edi,[esi+esi*1]
c0018323:	31 c9                	xor    ecx,ecx
c0018325:	01 d7                	add    edi,edx
c0018327:	90                   	nop
c0018328:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001832b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001832e:	85 c0                	test   eax,eax
c0018330:	79 06                	jns    c0018338 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0018332:	05 ff 7f 00 00       	add    eax,0x7fff
c0018337:	90                   	nop
c0018338:	c1 f8 0f             	sar    eax,0xf
c001833b:	83 c1 04             	add    ecx,0x4
c001833e:	66 01 02             	add    WORD PTR [edx],ax
c0018341:	83 c2 02             	add    edx,0x2
c0018344:	39 d7                	cmp    edi,edx
c0018346:	75 e0                	jne    c0018328 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018348:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001834b:	50                   	push   eax
c001834c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001834f:	29 f0                	sub    eax,esi
c0018351:	c1 e0 02             	shl    eax,0x2
c0018354:	50                   	push   eax
c0018355:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018358:	50                   	push   eax
c0018359:	52                   	push   edx
c001835a:	e8 81 80 fe ff       	call   c00003e0 <memmove>
c001835f:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0018362:	83 c4 10             	add    esp,0x10
c0018365:	89 f0                	mov    eax,esi
c0018367:	5b                   	pop    ebx
c0018368:	5e                   	pop    esi
c0018369:	5f                   	pop    edi
c001836a:	c3                   	ret    
c001836b:	90                   	nop

c001836c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001836c:	57                   	push   edi
c001836d:	56                   	push   esi
c001836e:	53                   	push   ebx
c001836f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018373:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018377:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001837b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0018381:	39 06                	cmp    DWORD PTR [esi],eax
c0018383:	74 13                	je     c0018398 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0018385:	83 ec 0c             	sub    esp,0xc
c0018388:	68 b0 f1 01 c0       	push   0xc001f1b0
c001838d:	e8 39 7e ff ff       	call   c00101cb <KePanic(char const*)>
c0018392:	83 c4 10             	add    esp,0x10
c0018395:	8d 76 00             	lea    esi,[esi+0x0]
c0018398:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001839e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00183a1:	74 11                	je     c00183b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00183a3:	83 ec 0c             	sub    esp,0xc
c00183a6:	68 eb f1 01 c0       	push   0xc001f1eb
c00183ab:	e8 1b 7e ff ff       	call   c00101cb <KePanic(char const*)>
c00183b0:	83 c4 10             	add    esp,0x10
c00183b3:	90                   	nop
c00183b4:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00183ba:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00183bd:	74 11                	je     c00183d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00183bf:	83 ec 0c             	sub    esp,0xc
c00183c2:	68 eb f1 01 c0       	push   0xc001f1eb
c00183c7:	e8 ff 7d ff ff       	call   c00101cb <KePanic(char const*)>
c00183cc:	83 c4 10             	add    esp,0x10
c00183cf:	90                   	nop
c00183d0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00183d3:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00183d7:	7e 07                	jle    c00183e0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00183d9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00183dd:	8d 76 00             	lea    esi,[esi+0x0]
c00183e0:	85 ff                	test   edi,edi
c00183e2:	7e 1c                	jle    c0018400 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00183e4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00183eb:	31 c0                	xor    eax,eax
c00183ed:	8d 76 00             	lea    esi,[esi+0x0]
c00183f0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00183f3:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00183f6:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00183f9:	83 c0 04             	add    eax,0x4
c00183fc:	39 c1                	cmp    ecx,eax
c00183fe:	75 f0                	jne    c00183f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0018400:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0018403:	50                   	push   eax
c0018404:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018407:	29 f8                	sub    eax,edi
c0018409:	c1 e0 02             	shl    eax,0x2
c001840c:	50                   	push   eax
c001840d:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018410:	50                   	push   eax
c0018411:	52                   	push   edx
c0018412:	e8 c9 7f fe ff       	call   c00003e0 <memmove>
c0018417:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001841a:	83 c4 10             	add    esp,0x10
c001841d:	89 f8                	mov    eax,edi
c001841f:	5b                   	pop    ebx
c0018420:	5e                   	pop    esi
c0018421:	5f                   	pop    edi
c0018422:	c3                   	ret    
c0018423:	90                   	nop

c0018424 <PCI::open(int, int, void*)>:
c0018424:	83 ec 18             	sub    esp,0x18
c0018427:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001842b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001842f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018435:	8b 10                	mov    edx,DWORD PTR [eax]
c0018437:	50                   	push   eax
c0018438:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001843b:	31 c0                	xor    eax,eax
c001843d:	83 c4 1c             	add    esp,0x1c
c0018440:	c3                   	ret    
c0018441:	90                   	nop

c0018442 <PCI::close(int, int, void*)>:
c0018442:	31 c0                	xor    eax,eax
c0018444:	c3                   	ret    
c0018445:	90                   	nop

c0018446 <PCI::PCI()>:
c0018446:	83 ec 0c             	sub    esp,0xc
c0018449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001844d:	83 ec 08             	sub    esp,0x8
c0018450:	68 07 f2 01 c0       	push   0xc001f207
c0018455:	50                   	push   eax
c0018456:	e8 81 2e ff ff       	call   c000b2dc <Bus::Bus(char const*)>
c001845b:	83 c4 10             	add    esp,0x10
c001845e:	ba b0 f2 01 c0       	mov    edx,0xc001f2b0
c0018463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018467:	89 10                	mov    DWORD PTR [eax],edx
c0018469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001846d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0018477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001847b:	a3 40 5b 02 c0       	mov    ds:0xc0025b40,eax
c0018480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018484:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001848a:	31 d2                	xor    edx,edx
c001848c:	88 c2                	mov    dl,al
c001848e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018492:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018499:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001849d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00184a3:	31 d2                	xor    edx,edx
c00184a5:	88 c2                	mov    dl,al
c00184a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184ab:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00184b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184b4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00184ba:	8d 50 01             	lea    edx,[eax+0x1]
c00184bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00184c1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00184c7:	31 d2                	xor    edx,edx
c00184c9:	88 c2                	mov    dl,al
c00184cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184cf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00184d3:	83 c9 c0             	or     ecx,0xffffffc0
c00184d6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00184da:	90                   	nop
c00184db:	83 c4 0c             	add    esp,0xc
c00184de:	c3                   	ret    
c00184df:	90                   	nop

c00184e0 <PCI::readBAR8(unsigned int, int)>:
c00184e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184e8:	f6 c2 01             	test   dl,0x1
c00184eb:	74 07                	je     c00184f4 <PCI::readBAR8(unsigned int, int)+0x14>
c00184ed:	83 e2 fc             	and    edx,0xfffffffc
c00184f0:	01 c2                	add    edx,eax
c00184f2:	ec                   	in     al,dx
c00184f3:	c3                   	ret    
c00184f4:	83 e2 f0             	and    edx,0xfffffff0
c00184f7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00184fa:	c3                   	ret    
c00184fb:	90                   	nop

c00184fc <PCI::readBAR16(unsigned int, int)>:
c00184fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018500:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018504:	f6 c2 01             	test   dl,0x1
c0018507:	74 08                	je     c0018511 <PCI::readBAR16(unsigned int, int)+0x15>
c0018509:	83 e2 fc             	and    edx,0xfffffffc
c001850c:	01 c2                	add    edx,eax
c001850e:	66 ed                	in     ax,dx
c0018510:	c3                   	ret    
c0018511:	83 e2 f0             	and    edx,0xfffffff0
c0018514:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018518:	c3                   	ret    
c0018519:	90                   	nop

c001851a <PCI::readBAR32(unsigned int, int)>:
c001851a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001851e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018522:	f6 c2 01             	test   dl,0x1
c0018525:	74 07                	je     c001852e <PCI::readBAR32(unsigned int, int)+0x14>
c0018527:	83 e2 fc             	and    edx,0xfffffffc
c001852a:	01 c2                	add    edx,eax
c001852c:	ed                   	in     eax,dx
c001852d:	c3                   	ret    
c001852e:	83 e2 f0             	and    edx,0xfffffff0
c0018531:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018534:	c3                   	ret    
c0018535:	90                   	nop

c0018536 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0018536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001853a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001853e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018542:	f6 c2 01             	test   dl,0x1
c0018545:	74 07                	je     c001854e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0018547:	83 e2 fc             	and    edx,0xfffffffc
c001854a:	01 ca                	add    edx,ecx
c001854c:	ee                   	out    dx,al
c001854d:	c3                   	ret    
c001854e:	83 e2 f0             	and    edx,0xfffffff0
c0018551:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018554:	c3                   	ret    
c0018555:	90                   	nop

c0018556 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0018556:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001855a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001855e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018562:	f6 c2 01             	test   dl,0x1
c0018565:	74 08                	je     c001856f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0018567:	83 e2 fc             	and    edx,0xfffffffc
c001856a:	01 ca                	add    edx,ecx
c001856c:	66 ef                	out    dx,ax
c001856e:	c3                   	ret    
c001856f:	83 e2 f0             	and    edx,0xfffffff0
c0018572:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0018576:	c3                   	ret    
c0018577:	90                   	nop

c0018578 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018578:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001857c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018580:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018584:	f6 c2 01             	test   dl,0x1
c0018587:	74 07                	je     c0018590 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018589:	83 e2 fc             	and    edx,0xfffffffc
c001858c:	01 ca                	add    edx,ecx
c001858e:	ef                   	out    dx,eax
c001858f:	c3                   	ret    
c0018590:	83 e2 f0             	and    edx,0xfffffff0
c0018593:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0018596:	c3                   	ret    
c0018597:	90                   	nop

c0018598 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018598:	55                   	push   ebp
c0018599:	57                   	push   edi
c001859a:	56                   	push   esi
c001859b:	53                   	push   ebx
c001859c:	83 ec 0c             	sub    esp,0xc
c001859f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00185a3:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00185a7:	89 f0                	mov    eax,esi
c00185a9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00185ad:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00185b1:	3c 07                	cmp    al,0x7
c00185b3:	76 10                	jbe    c00185c5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00185b5:	83 ec 0c             	sub    esp,0xc
c00185b8:	68 0f f2 01 c0       	push   0xc001f20f
c00185bd:	e8 09 7c ff ff       	call   c00101cb <KePanic(char const*)>
c00185c2:	83 c4 10             	add    esp,0x10
c00185c5:	80 fb 0f             	cmp    bl,0xf
c00185c8:	76 10                	jbe    c00185da <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00185ca:	83 ec 0c             	sub    esp,0xc
c00185cd:	68 3f f2 01 c0       	push   0xc001f23f
c00185d2:	e8 f4 7b ff ff       	call   c00101cb <KePanic(char const*)>
c00185d7:	83 c4 10             	add    esp,0x10
c00185da:	8d 04 36             	lea    eax,[esi+esi*1]
c00185dd:	ba f8 0c 00 00       	mov    edx,0xcf8
c00185e2:	83 c8 f0             	or     eax,0xfffffff0
c00185e5:	ee                   	out    dx,al
c00185e6:	ba fa 0c 00 00       	mov    edx,0xcfa
c00185eb:	89 e8                	mov    eax,ebp
c00185ed:	ee                   	out    dx,al
c00185ee:	83 c4 0c             	add    esp,0xc
c00185f1:	89 d8                	mov    eax,ebx
c00185f3:	66 81 e7 fc 00       	and    di,0xfc
c00185f8:	5b                   	pop    ebx
c00185f9:	c1 e0 08             	shl    eax,0x8
c00185fc:	5e                   	pop    esi
c00185fd:	09 f8                	or     eax,edi
c00185ff:	5f                   	pop    edi
c0018600:	66 0d 00 c0          	or     ax,0xc000
c0018604:	5d                   	pop    ebp
c0018605:	c3                   	ret    

c0018606 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018606:	57                   	push   edi
c0018607:	56                   	push   esi
c0018608:	53                   	push   ebx
c0018609:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001860d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018611:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0018617:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001861b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001861f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018623:	83 ff 01             	cmp    edi,0x1
c0018626:	75 3e                	jne    c0018666 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018628:	89 de                	mov    esi,ebx
c001862a:	0f b6 c0             	movzx  eax,al
c001862d:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018633:	c1 e0 10             	shl    eax,0x10
c0018636:	0f b6 c9             	movzx  ecx,cl
c0018639:	09 f0                	or     eax,esi
c001863b:	c1 e1 08             	shl    ecx,0x8
c001863e:	0f b6 d2             	movzx  edx,dl
c0018641:	09 c8                	or     eax,ecx
c0018643:	c1 e2 0b             	shl    edx,0xb
c0018646:	09 d0                	or     eax,edx
c0018648:	ba f8 0c 00 00       	mov    edx,0xcf8
c001864d:	0d 00 00 00 80       	or     eax,0x80000000
c0018652:	ef                   	out    dx,eax
c0018653:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018658:	ed                   	in     eax,dx
c0018659:	83 e3 02             	and    ebx,0x2
c001865c:	0f b6 cb             	movzx  ecx,bl
c001865f:	c1 e1 03             	shl    ecx,0x3
c0018662:	d3 e8                	shr    eax,cl
c0018664:	eb 43                	jmp    c00186a9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018666:	83 ff 02             	cmp    edi,0x2
c0018669:	75 2c                	jne    c0018697 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001866b:	83 ec 0c             	sub    esp,0xc
c001866e:	0f b6 c9             	movzx  ecx,cl
c0018671:	0f b6 d2             	movzx  edx,dl
c0018674:	0f b6 fb             	movzx  edi,bl
c0018677:	0f b6 c0             	movzx  eax,al
c001867a:	57                   	push   edi
c001867b:	51                   	push   ecx
c001867c:	52                   	push   edx
c001867d:	50                   	push   eax
c001867e:	56                   	push   esi
c001867f:	e8 14 ff ff ff       	call   c0018598 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018684:	89 c2                	mov    edx,eax
c0018686:	ed                   	in     eax,dx
c0018687:	83 e3 02             	and    ebx,0x2
c001868a:	83 c4 20             	add    esp,0x20
c001868d:	0f b6 cb             	movzx  ecx,bl
c0018690:	c1 e1 03             	shl    ecx,0x3
c0018693:	d3 e8                	shr    eax,cl
c0018695:	eb 12                	jmp    c00186a9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018697:	83 ec 0c             	sub    esp,0xc
c001869a:	68 6f f2 01 c0       	push   0xc001f26f
c001869f:	e8 27 7b ff ff       	call   c00101cb <KePanic(char const*)>
c00186a4:	83 c4 10             	add    esp,0x10
c00186a7:	31 c0                	xor    eax,eax
c00186a9:	5b                   	pop    ebx
c00186aa:	5e                   	pop    esi
c00186ab:	5f                   	pop    edi
c00186ac:	c3                   	ret    
c00186ad:	90                   	nop

c00186ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00186ae:	83 ec 18             	sub    esp,0x18
c00186b1:	6a 00                	push   0x0
c00186b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186b8:	50                   	push   eax
c00186b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186be:	50                   	push   eax
c00186bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186c4:	50                   	push   eax
c00186c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186c9:	e8 38 ff ff ff       	call   c0018606 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186ce:	83 c4 2c             	add    esp,0x2c
c00186d1:	c3                   	ret    

c00186d2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00186d2:	83 ec 18             	sub    esp,0x18
c00186d5:	6a 0e                	push   0xe
c00186d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186dc:	50                   	push   eax
c00186dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186e2:	50                   	push   eax
c00186e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186e8:	50                   	push   eax
c00186e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186ed:	e8 14 ff ff ff       	call   c0018606 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186f2:	83 c4 2c             	add    esp,0x2c
c00186f5:	0f b6 c0             	movzx  eax,al
c00186f8:	c3                   	ret    
c00186f9:	90                   	nop

c00186fa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00186fa:	55                   	push   ebp
c00186fb:	57                   	push   edi
c00186fc:	56                   	push   esi
c00186fd:	53                   	push   ebx
c00186fe:	83 ec 18             	sub    esp,0x18
c0018701:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0018706:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001870b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018710:	6a 0a                	push   0xa
c0018712:	56                   	push   esi
c0018713:	55                   	push   ebp
c0018714:	57                   	push   edi
c0018715:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018719:	e8 e8 fe ff ff       	call   c0018606 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001871e:	83 c4 14             	add    esp,0x14
c0018721:	89 c3                	mov    ebx,eax
c0018723:	6a 0a                	push   0xa
c0018725:	0f b6 db             	movzx  ebx,bl
c0018728:	56                   	push   esi
c0018729:	55                   	push   ebp
c001872a:	57                   	push   edi
c001872b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001872f:	e8 d2 fe ff ff       	call   c0018606 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018734:	83 c4 2c             	add    esp,0x2c
c0018737:	25 00 ff 00 00       	and    eax,0xff00
c001873c:	09 d8                	or     eax,ebx
c001873e:	5b                   	pop    ebx
c001873f:	5e                   	pop    esi
c0018740:	5f                   	pop    edi
c0018741:	5d                   	pop    ebp
c0018742:	c3                   	ret    
c0018743:	90                   	nop

c0018744 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018744:	83 ec 18             	sub    esp,0x18
c0018747:	6a 08                	push   0x8
c0018749:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001874e:	50                   	push   eax
c001874f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018754:	50                   	push   eax
c0018755:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001875a:	50                   	push   eax
c001875b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001875f:	e8 a2 fe ff ff       	call   c0018606 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018764:	83 c4 2c             	add    esp,0x2c
c0018767:	0f b6 c4             	movzx  eax,ah
c001876a:	c3                   	ret    
c001876b:	90                   	nop

c001876c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001876c:	83 ec 18             	sub    esp,0x18
c001876f:	6a 08                	push   0x8
c0018771:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018776:	50                   	push   eax
c0018777:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001877c:	50                   	push   eax
c001877d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018782:	50                   	push   eax
c0018783:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018787:	e8 7a fe ff ff       	call   c0018606 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001878c:	83 c4 2c             	add    esp,0x2c
c001878f:	c3                   	ret    

c0018790 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018790:	83 ec 18             	sub    esp,0x18
c0018793:	6a 3c                	push   0x3c
c0018795:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001879a:	50                   	push   eax
c001879b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a0:	50                   	push   eax
c00187a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a6:	50                   	push   eax
c00187a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187ab:	e8 56 fe ff ff       	call   c0018606 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187b0:	83 c4 2c             	add    esp,0x2c
c00187b3:	c3                   	ret    

c00187b4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00187b4:	83 ec 18             	sub    esp,0x18
c00187b7:	6a 18                	push   0x18
c00187b9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187be:	50                   	push   eax
c00187bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187c4:	50                   	push   eax
c00187c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ca:	50                   	push   eax
c00187cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187cf:	e8 32 fe ff ff       	call   c0018606 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187d4:	83 c4 2c             	add    esp,0x2c
c00187d7:	0f b6 c4             	movzx  eax,ah
c00187da:	c3                   	ret    
c00187db:	90                   	nop

c00187dc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00187dc:	55                   	push   ebp
c00187dd:	57                   	push   edi
c00187de:	56                   	push   esi
c00187df:	53                   	push   ebx
c00187e0:	83 ec 28             	sub    esp,0x28
c00187e3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00187e7:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00187ec:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00187f1:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00187f6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00187fd:	8d 43 12             	lea    eax,[ebx+0x12]
c0018800:	83 c3 10             	add    ebx,0x10
c0018803:	0f b6 c0             	movzx  eax,al
c0018806:	0f b6 db             	movzx  ebx,bl
c0018809:	50                   	push   eax
c001880a:	51                   	push   ecx
c001880b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001880f:	57                   	push   edi
c0018810:	55                   	push   ebp
c0018811:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018815:	e8 ec fd ff ff       	call   c0018606 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001881a:	83 c4 14             	add    esp,0x14
c001881d:	89 c6                	mov    esi,eax
c001881f:	53                   	push   ebx
c0018820:	c1 e6 10             	shl    esi,0x10
c0018823:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018827:	51                   	push   ecx
c0018828:	57                   	push   edi
c0018829:	55                   	push   ebp
c001882a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001882e:	e8 d3 fd ff ff       	call   c0018606 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018833:	83 c4 3c             	add    esp,0x3c
c0018836:	0f b7 c0             	movzx  eax,ax
c0018839:	5b                   	pop    ebx
c001883a:	09 f0                	or     eax,esi
c001883c:	5e                   	pop    esi
c001883d:	5f                   	pop    edi
c001883e:	5d                   	pop    ebp
c001883f:	c3                   	ret    

c0018840 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018840:	55                   	push   ebp
c0018841:	57                   	push   edi
c0018842:	56                   	push   esi
c0018843:	53                   	push   ebx
c0018844:	83 ec 0c             	sub    esp,0xc
c0018847:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001884b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001884f:	89 f5                	mov    ebp,esi
c0018851:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0018857:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001885b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001885f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018863:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018867:	83 f9 01             	cmp    ecx,0x1
c001886a:	75 5d                	jne    c00188c9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001886c:	0f b6 c8             	movzx  ecx,al
c001886f:	0f b6 d2             	movzx  edx,dl
c0018872:	c1 e1 10             	shl    ecx,0x10
c0018875:	c1 e2 0b             	shl    edx,0xb
c0018878:	89 f0                	mov    eax,esi
c001887a:	25 fc 00 00 00       	and    eax,0xfc
c001887f:	09 c1                	or     ecx,eax
c0018881:	89 e8                	mov    eax,ebp
c0018883:	0f b6 c0             	movzx  eax,al
c0018886:	c1 e0 08             	shl    eax,0x8
c0018889:	09 c1                	or     ecx,eax
c001888b:	09 d1                	or     ecx,edx
c001888d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018892:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018898:	89 c8                	mov    eax,ecx
c001889a:	ef                   	out    dx,eax
c001889b:	ba fc 0c 00 00       	mov    edx,0xcfc
c00188a0:	ed                   	in     eax,dx
c00188a1:	0f b7 db             	movzx  ebx,bx
c00188a4:	83 e6 02             	and    esi,0x2
c00188a7:	74 0a                	je     c00188b3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00188a9:	0f b7 d0             	movzx  edx,ax
c00188ac:	c1 e3 10             	shl    ebx,0x10
c00188af:	09 d3                	or     ebx,edx
c00188b1:	eb 05                	jmp    c00188b8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00188b3:	66 31 c0             	xor    ax,ax
c00188b6:	09 c3                	or     ebx,eax
c00188b8:	ba f8 0c 00 00       	mov    edx,0xcf8
c00188bd:	89 c8                	mov    eax,ecx
c00188bf:	ef                   	out    dx,eax
c00188c0:	ba fc 0c 00 00       	mov    edx,0xcfc
c00188c5:	89 d8                	mov    eax,ebx
c00188c7:	eb 41                	jmp    c001890a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00188c9:	83 f9 02             	cmp    ecx,0x2
c00188cc:	75 45                	jne    c0018913 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00188ce:	83 ec 0c             	sub    esp,0xc
c00188d1:	0f b6 d2             	movzx  edx,dl
c00188d4:	89 f1                	mov    ecx,esi
c00188d6:	0f b6 c0             	movzx  eax,al
c00188d9:	0f b6 f1             	movzx  esi,cl
c00188dc:	89 e9                	mov    ecx,ebp
c00188de:	56                   	push   esi
c00188df:	0f b6 c9             	movzx  ecx,cl
c00188e2:	51                   	push   ecx
c00188e3:	52                   	push   edx
c00188e4:	50                   	push   eax
c00188e5:	57                   	push   edi
c00188e6:	e8 ad fc ff ff       	call   c0018598 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188eb:	89 c2                	mov    edx,eax
c00188ed:	ed                   	in     eax,dx
c00188ee:	83 c4 20             	add    esp,0x20
c00188f1:	0f b7 db             	movzx  ebx,bx
c00188f4:	f6 c2 02             	test   dl,0x2
c00188f7:	74 0c                	je     c0018905 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00188f9:	0f b7 c8             	movzx  ecx,ax
c00188fc:	89 d8                	mov    eax,ebx
c00188fe:	c1 e0 10             	shl    eax,0x10
c0018901:	09 c8                	or     eax,ecx
c0018903:	eb 05                	jmp    c001890a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018905:	66 31 c0             	xor    ax,ax
c0018908:	09 d8                	or     eax,ebx
c001890a:	ef                   	out    dx,eax
c001890b:	83 c4 0c             	add    esp,0xc
c001890e:	5b                   	pop    ebx
c001890f:	5e                   	pop    esi
c0018910:	5f                   	pop    edi
c0018911:	5d                   	pop    ebp
c0018912:	c3                   	ret    
c0018913:	c7 44 24 20 6f f2 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f26f
c001891b:	83 c4 0c             	add    esp,0xc
c001891e:	5b                   	pop    ebx
c001891f:	5e                   	pop    esi
c0018920:	5f                   	pop    edi
c0018921:	5d                   	pop    ebp
c0018922:	e9 a4 78 ff ff       	jmp    c00101cb <KePanic(char const*)>
c0018927:	90                   	nop

c0018928 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018928:	55                   	push   ebp
c0018929:	57                   	push   edi
c001892a:	56                   	push   esi
c001892b:	53                   	push   ebx
c001892c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018932:	80 3d 4c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b4c,0x0
c0018939:	0f 85 84 00 00 00    	jne    c00189c3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001893f:	83 ec 0c             	sub    esp,0xc
c0018942:	68 14 01 00 00       	push   0x114
c0018947:	e8 6d ee fe ff       	call   c00077b9 <malloc>
c001894c:	83 c4 0c             	add    esp,0xc
c001894f:	89 c3                	mov    ebx,eax
c0018951:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0018957:	68 75 f2 01 c0       	push   0xc001f275
c001895c:	50                   	push   eax
c001895d:	e8 5e 21 ff ff       	call   c000aac0 <File::File(char const*, Process*)>
c0018962:	5a                   	pop    edx
c0018963:	59                   	pop    ecx
c0018964:	6a 01                	push   0x1
c0018966:	53                   	push   ebx
c0018967:	e8 14 22 ff ff       	call   c000ab80 <File::open(FileOpenMode)>
c001896c:	83 c4 0c             	add    esp,0xc
c001896f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018973:	50                   	push   eax
c0018974:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018978:	50                   	push   eax
c0018979:	53                   	push   ebx
c001897a:	e8 ad 24 ff ff       	call   c000ae2c <File::stat(unsigned long long*, bool*)>
c001897f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018983:	40                   	inc    eax
c0018984:	89 04 24             	mov    DWORD PTR [esp],eax
c0018987:	e8 2d ee fe ff       	call   c00077b9 <malloc>
c001898c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018990:	a3 48 5b 02 c0       	mov    ds:0xc0025b48,eax
c0018995:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018999:	5e                   	pop    esi
c001899a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001899c:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00189a0:	51                   	push   ecx
c00189a1:	50                   	push   eax
c00189a2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00189a6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00189aa:	53                   	push   ebx
c00189ab:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00189ae:	83 c4 14             	add    esp,0x14
c00189b1:	53                   	push   ebx
c00189b2:	e8 27 22 ff ff       	call   c000abde <File::close()>
c00189b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189bb:	83 c4 10             	add    esp,0x10
c00189be:	a3 44 5b 02 c0       	mov    ds:0xc0025b44,eax
c00189c3:	a1 44 5b 02 c0       	mov    eax,ds:0xc0025b44
c00189c8:	8b 15 48 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b48
c00189ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00189d1:	31 ff                	xor    edi,edi
c00189d3:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00189db:	31 f6                	xor    esi,esi
c00189dd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00189e2:	31 db                	xor    ebx,ebx
c00189e4:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00189ec:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00189f1:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00189f8:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00189fc:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018a03:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018a07:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018a0a:	0f 8e 6b 01 00 00    	jle    c0018b7b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018a10:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018a13:	d4 40                	aam    0x40
c0018a15:	d5 39                	aad    0x39
c0018a17:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a1b:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018a1f:	d4 40                	aam    0x40
c0018a21:	d5 39                	aad    0x39
c0018a23:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018a27:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018a2b:	d4 40                	aam    0x40
c0018a2d:	d5 39                	aad    0x39
c0018a2f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018a33:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018a37:	d4 40                	aam    0x40
c0018a39:	d5 39                	aad    0x39
c0018a3b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018a3f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018a43:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018a47:	3c 56                	cmp    al,0x56
c0018a49:	74 45                	je     c0018a90 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018a4b:	d4 40                	aam    0x40
c0018a4d:	d5 39                	aad    0x39
c0018a4f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018a52:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018a56:	0f b6 c9             	movzx  ecx,cl
c0018a59:	c1 e1 04             	shl    ecx,0x4
c0018a5c:	d4 40                	aam    0x40
c0018a5e:	d5 39                	aad    0x39
c0018a60:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018a63:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018a67:	0f b6 db             	movzx  ebx,bl
c0018a6a:	09 cb                	or     ebx,ecx
c0018a6c:	c1 e3 04             	shl    ebx,0x4
c0018a6f:	d4 40                	aam    0x40
c0018a71:	d5 39                	aad    0x39
c0018a73:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018a76:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018a7a:	0f b6 c9             	movzx  ecx,cl
c0018a7d:	09 cb                	or     ebx,ecx
c0018a7f:	c1 e3 04             	shl    ebx,0x4
c0018a82:	89 d9                	mov    ecx,ebx
c0018a84:	d4 40                	aam    0x40
c0018a86:	d5 39                	aad    0x39
c0018a88:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018a8b:	0f b6 db             	movzx  ebx,bl
c0018a8e:	09 cb                	or     ebx,ecx
c0018a90:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018a94:	80 f9 44             	cmp    cl,0x44
c0018a97:	74 47                	je     c0018ae0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018a99:	88 c8                	mov    al,cl
c0018a9b:	d4 40                	aam    0x40
c0018a9d:	d5 39                	aad    0x39
c0018a9f:	83 e8 30             	sub    eax,0x30
c0018aa2:	0f b6 e8             	movzx  ebp,al
c0018aa5:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018aa9:	c1 e5 04             	shl    ebp,0x4
c0018aac:	d4 40                	aam    0x40
c0018aae:	d5 39                	aad    0x39
c0018ab0:	83 e8 30             	sub    eax,0x30
c0018ab3:	0f b6 f0             	movzx  esi,al
c0018ab6:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018aba:	09 ee                	or     esi,ebp
c0018abc:	c1 e6 04             	shl    esi,0x4
c0018abf:	d4 40                	aam    0x40
c0018ac1:	d5 39                	aad    0x39
c0018ac3:	83 e8 30             	sub    eax,0x30
c0018ac6:	0f b6 e8             	movzx  ebp,al
c0018ac9:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018acd:	09 ee                	or     esi,ebp
c0018acf:	c1 e6 04             	shl    esi,0x4
c0018ad2:	89 f5                	mov    ebp,esi
c0018ad4:	d4 40                	aam    0x40
c0018ad6:	d5 39                	aad    0x39
c0018ad8:	83 e8 30             	sub    eax,0x30
c0018adb:	0f b6 f0             	movzx  esi,al
c0018ade:	09 ee                	or     esi,ebp
c0018ae0:	83 c7 10             	add    edi,0x10
c0018ae3:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018ae7:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018aea:	3c 0a                	cmp    al,0xa
c0018aec:	74 09                	je     c0018af7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018aee:	45                   	inc    ebp
c0018aef:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018af2:	75 16                	jne    c0018b0a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018af4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018af7:	3c 0a                	cmp    al,0xa
c0018af9:	0f 94 c0             	sete   al
c0018afc:	0f b6 c0             	movzx  eax,al
c0018aff:	01 c7                	add    edi,eax
c0018b01:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018b06:	75 0c                	jne    c0018b14 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018b08:	eb 15                	jmp    c0018b1f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018b0a:	47                   	inc    edi
c0018b0b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018b0e:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018b12:	eb d3                	jmp    c0018ae7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018b14:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018b19:	0f 85 e8 fe ff ff    	jne    c0018a07 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b1f:	80 f9 44             	cmp    cl,0x44
c0018b22:	74 0b                	je     c0018b2f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018b24:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018b29:	0f 85 d8 fe ff ff    	jne    c0018a07 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b2f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018b33:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018b37:	c1 e1 04             	shl    ecx,0x4
c0018b3a:	83 e8 30             	sub    eax,0x30
c0018b3d:	09 c8                	or     eax,ecx
c0018b3f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018b43:	0f 85 be fe ff ff    	jne    c0018a07 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b49:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018b4d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018b51:	c1 e1 04             	shl    ecx,0x4
c0018b54:	83 e8 30             	sub    eax,0x30
c0018b57:	09 c8                	or     eax,ecx
c0018b59:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018b5d:	0f 85 a4 fe ff ff    	jne    c0018a07 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b63:	50                   	push   eax
c0018b64:	50                   	push   eax
c0018b65:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b69:	50                   	push   eax
c0018b6a:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018b71:	e8 8a 7a fe ff       	call   c0000600 <strcpy>
c0018b76:	83 c4 10             	add    esp,0x10
c0018b79:	eb 15                	jmp    c0018b90 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018b7b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018b82:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018b8d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018b90:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018b97:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018b9d:	5b                   	pop    ebx
c0018b9e:	5e                   	pop    esi
c0018b9f:	5f                   	pop    edi
c0018ba0:	5d                   	pop    ebp
c0018ba1:	c3                   	ret    

c0018ba2 <PCI::checkBus(unsigned char)>:
c0018ba2:	56                   	push   esi
c0018ba3:	53                   	push   ebx
c0018ba4:	31 f6                	xor    esi,esi
c0018ba6:	51                   	push   ecx
c0018ba7:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018bab:	0f b6 c3             	movzx  eax,bl
c0018bae:	52                   	push   edx
c0018baf:	56                   	push   esi
c0018bb0:	46                   	inc    esi
c0018bb1:	50                   	push   eax
c0018bb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018bb6:	e8 f3 02 00 00       	call   c0018eae <PCI::checkDevice(unsigned char, unsigned char)>
c0018bbb:	83 c4 10             	add    esp,0x10
c0018bbe:	83 fe 20             	cmp    esi,0x20
c0018bc1:	75 e8                	jne    c0018bab <PCI::checkBus(unsigned char)+0x9>
c0018bc3:	58                   	pop    eax
c0018bc4:	5b                   	pop    ebx
c0018bc5:	5e                   	pop    esi
c0018bc6:	c3                   	ret    
c0018bc7:	90                   	nop

c0018bc8 <PCI::foundDevice(PCIDeviceInfo)>:
c0018bc8:	55                   	push   ebp
c0018bc9:	57                   	push   edi
c0018bca:	56                   	push   esi
c0018bcb:	53                   	push   ebx
c0018bcc:	83 ec 1c             	sub    esp,0x1c
c0018bcf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018bd3:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018bd9:	0f 84 52 01 00 00    	je     c0018d31 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018bdf:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018be3:	66 81 f9 06 04       	cmp    cx,0x406
c0018be8:	75 2c                	jne    c0018c16 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018bea:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018bef:	50                   	push   eax
c0018bf0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018bf5:	50                   	push   eax
c0018bf6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018bfb:	50                   	push   eax
c0018bfc:	56                   	push   esi
c0018bfd:	e8 b2 fb ff ff       	call   c00187b4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018c02:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018c06:	0f b6 c0             	movzx  eax,al
c0018c09:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018c0d:	83 c4 2c             	add    esp,0x2c
c0018c10:	5b                   	pop    ebx
c0018c11:	5e                   	pop    esi
c0018c12:	5f                   	pop    edi
c0018c13:	5d                   	pop    ebp
c0018c14:	eb 8c                	jmp    c0018ba2 <PCI::checkBus(unsigned char)>
c0018c16:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c1a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018c20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c24:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018c28:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018c2c:	88 d3                	mov    bl,dl
c0018c2e:	85 c0                	test   eax,eax
c0018c30:	74 33                	je     c0018c65 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018c32:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018c35:	85 d2                	test   edx,edx
c0018c37:	74 28                	je     c0018c61 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c39:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018c3f:	31 ef                	xor    edi,ebp
c0018c41:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018c47:	75 18                	jne    c0018c61 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c49:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018c4d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018c53:	75 0c                	jne    c0018c61 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c55:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018c5b:	0f 84 d0 00 00 00    	je     c0018d31 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018c61:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c63:	eb c9                	jmp    c0018c2e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018c65:	66 81 f9 01 06       	cmp    cx,0x601
c0018c6a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018c6e:	75 19                	jne    c0018c89 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018c70:	83 ec 0c             	sub    esp,0xc
c0018c73:	68 64 01 00 00       	push   0x164
c0018c78:	e8 3c eb fe ff       	call   c00077b9 <malloc>
c0018c7d:	89 c5                	mov    ebp,eax
c0018c7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c82:	e8 47 0e 00 00       	call   c0019ace <SATABus::SATABus()>
c0018c87:	eb 1e                	jmp    c0018ca7 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018c89:	66 81 f9 01 01       	cmp    cx,0x101
c0018c8e:	75 60                	jne    c0018cf0 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018c90:	83 ec 0c             	sub    esp,0xc
c0018c93:	68 70 02 00 00       	push   0x270
c0018c98:	e8 1c eb fe ff       	call   c00077b9 <malloc>
c0018c9d:	89 c5                	mov    ebp,eax
c0018c9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018ca2:	e8 cb 02 00 00       	call   c0018f72 <IDE::IDE()>
c0018ca7:	58                   	pop    eax
c0018ca8:	5a                   	pop    edx
c0018ca9:	55                   	push   ebp
c0018caa:	56                   	push   esi
c0018cab:	e8 d8 2c ff ff       	call   c000b988 <Device::addChild(Device*)>
c0018cb0:	83 ec 1c             	sub    esp,0x1c
c0018cb3:	b9 09 00 00 00       	mov    ecx,0x9
c0018cb8:	fc                   	cld    
c0018cb9:	89 e7                	mov    edi,esp
c0018cbb:	89 de                	mov    esi,ebx
c0018cbd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018cbf:	55                   	push   ebp
c0018cc0:	e8 09 2c ff ff       	call   c000b8ce <Device::preOpenPCI(PCIDeviceInfo)>
c0018cc5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018cc8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018ccc:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018cd4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018cdc:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018ce4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018ce7:	83 c4 4c             	add    esp,0x4c
c0018cea:	5b                   	pop    ebx
c0018ceb:	5e                   	pop    esi
c0018cec:	5f                   	pop    edi
c0018ced:	5d                   	pop    ebp
c0018cee:	ff e0                	jmp    eax
c0018cf0:	83 ec 0c             	sub    esp,0xc
c0018cf3:	68 58 01 00 00       	push   0x158
c0018cf8:	e8 bc ea fe ff       	call   c00077b9 <malloc>
c0018cfd:	89 c5                	mov    ebp,eax
c0018cff:	58                   	pop    eax
c0018d00:	5a                   	pop    edx
c0018d01:	68 8e f2 01 c0       	push   0xc001f28e
c0018d06:	55                   	push   ebp
c0018d07:	e8 1a 2f ff ff       	call   c000bc26 <DriverlessDevice::DriverlessDevice(char const*)>
c0018d0c:	59                   	pop    ecx
c0018d0d:	5f                   	pop    edi
c0018d0e:	55                   	push   ebp
c0018d0f:	56                   	push   esi
c0018d10:	e8 73 2c ff ff       	call   c000b988 <Device::addChild(Device*)>
c0018d15:	b9 09 00 00 00       	mov    ecx,0x9
c0018d1a:	fc                   	cld    
c0018d1b:	89 df                	mov    edi,ebx
c0018d1d:	89 de                	mov    esi,ebx
c0018d1f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d21:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018d25:	83 c4 2c             	add    esp,0x2c
c0018d28:	5b                   	pop    ebx
c0018d29:	5e                   	pop    esi
c0018d2a:	5f                   	pop    edi
c0018d2b:	5d                   	pop    ebp
c0018d2c:	e9 9d 2b ff ff       	jmp    c000b8ce <Device::preOpenPCI(PCIDeviceInfo)>
c0018d31:	83 c4 1c             	add    esp,0x1c
c0018d34:	5b                   	pop    ebx
c0018d35:	5e                   	pop    esi
c0018d36:	5f                   	pop    edi
c0018d37:	5d                   	pop    ebp
c0018d38:	c3                   	ret    
c0018d39:	90                   	nop

c0018d3a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018d3a:	55                   	push   ebp
c0018d3b:	57                   	push   edi
c0018d3c:	56                   	push   esi
c0018d3d:	53                   	push   ebx
c0018d3e:	83 ec 68             	sub    esp,0x68
c0018d41:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018d45:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018d4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018d50:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018d57:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018d5c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018d60:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018d67:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018d6c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018d70:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018d75:	6a 0c                	push   0xc
c0018d77:	57                   	push   edi
c0018d78:	53                   	push   ebx
c0018d79:	56                   	push   esi
c0018d7a:	55                   	push   ebp
c0018d7b:	e8 86 f8 ff ff       	call   c0018606 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018d80:	83 c4 20             	add    esp,0x20
c0018d83:	57                   	push   edi
c0018d84:	53                   	push   ebx
c0018d85:	56                   	push   esi
c0018d86:	55                   	push   ebp
c0018d87:	e8 6e f9 ff ff       	call   c00186fa <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018d8c:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018d91:	57                   	push   edi
c0018d92:	53                   	push   ebx
c0018d93:	56                   	push   esi
c0018d94:	55                   	push   ebp
c0018d95:	e8 f6 f9 ff ff       	call   c0018790 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018d9a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018d9e:	83 c4 14             	add    esp,0x14
c0018da1:	6a 3c                	push   0x3c
c0018da3:	57                   	push   edi
c0018da4:	53                   	push   ebx
c0018da5:	56                   	push   esi
c0018da6:	55                   	push   ebp
c0018da7:	e8 5a f8 ff ff       	call   c0018606 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018dac:	0f b6 c4             	movzx  eax,ah
c0018daf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018db3:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018db7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018dbb:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0018dc0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018dc6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018dcc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018dd0:	83 c4 20             	add    esp,0x20
c0018dd3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018dd8:	74 30                	je     c0018e0a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018dda:	31 c0                	xor    eax,eax
c0018ddc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018de0:	7e 28                	jle    c0018e0a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018de2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018dea:	39 cb                	cmp    ebx,ecx
c0018dec:	75 19                	jne    c0018e07 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018dee:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018df6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018dfa:	75 0b                	jne    c0018e07 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018dfc:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018e03:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018e07:	40                   	inc    eax
c0018e08:	eb d2                	jmp    c0018ddc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018e0a:	31 d2                	xor    edx,edx
c0018e0c:	83 ec 0c             	sub    esp,0xc
c0018e0f:	57                   	push   edi
c0018e10:	53                   	push   ebx
c0018e11:	56                   	push   esi
c0018e12:	52                   	push   edx
c0018e13:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018e17:	55                   	push   ebp
c0018e18:	e8 bf f9 ff ff       	call   c00187dc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e1d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e21:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018e25:	42                   	inc    edx
c0018e26:	83 c4 20             	add    esp,0x20
c0018e29:	83 fa 06             	cmp    edx,0x6
c0018e2c:	75 de                	jne    c0018e0c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018e2e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018e33:	83 ec 0c             	sub    esp,0xc
c0018e36:	86 e0                	xchg   al,ah
c0018e38:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018e3d:	6a 02                	push   0x2
c0018e3f:	57                   	push   edi
c0018e40:	53                   	push   ebx
c0018e41:	56                   	push   esi
c0018e42:	55                   	push   ebp
c0018e43:	e8 be f7 ff ff       	call   c0018606 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e48:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018e4d:	83 c4 20             	add    esp,0x20
c0018e50:	57                   	push   edi
c0018e51:	53                   	push   ebx
c0018e52:	56                   	push   esi
c0018e53:	55                   	push   ebp
c0018e54:	e8 eb f8 ff ff       	call   c0018744 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018e59:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018e5d:	57                   	push   edi
c0018e5e:	53                   	push   ebx
c0018e5f:	56                   	push   esi
c0018e60:	55                   	push   ebp
c0018e61:	e8 48 f8 ff ff       	call   c00186ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018e66:	b9 09 00 00 00       	mov    ecx,0x9
c0018e6b:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018e70:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018e74:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018e78:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018e7c:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018e80:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018e84:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018e88:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018e8c:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018e90:	83 ec 0c             	sub    esp,0xc
c0018e93:	fc                   	cld    
c0018e94:	89 e7                	mov    edi,esp
c0018e96:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018e9a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018e9c:	55                   	push   ebp
c0018e9d:	e8 26 fd ff ff       	call   c0018bc8 <PCI::foundDevice(PCIDeviceInfo)>
c0018ea2:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018ea8:	5b                   	pop    ebx
c0018ea9:	5e                   	pop    esi
c0018eaa:	5f                   	pop    edi
c0018eab:	5d                   	pop    ebp
c0018eac:	c3                   	ret    
c0018ead:	90                   	nop

c0018eae <PCI::checkDevice(unsigned char, unsigned char)>:
c0018eae:	55                   	push   ebp
c0018eaf:	57                   	push   edi
c0018eb0:	56                   	push   esi
c0018eb1:	53                   	push   ebx
c0018eb2:	83 ec 0c             	sub    esp,0xc
c0018eb5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018eb9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018ebe:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018ec3:	6a 00                	push   0x0
c0018ec5:	56                   	push   esi
c0018ec6:	57                   	push   edi
c0018ec7:	55                   	push   ebp
c0018ec8:	e8 e1 f7 ff ff       	call   c00186ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018ecd:	6a 00                	push   0x0
c0018ecf:	56                   	push   esi
c0018ed0:	57                   	push   edi
c0018ed1:	55                   	push   ebp
c0018ed2:	e8 63 fe ff ff       	call   c0018d3a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018ed7:	83 c4 20             	add    esp,0x20
c0018eda:	6a 00                	push   0x0
c0018edc:	56                   	push   esi
c0018edd:	57                   	push   edi
c0018ede:	55                   	push   ebp
c0018edf:	e8 ee f7 ff ff       	call   c00186d2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018ee4:	83 c4 10             	add    esp,0x10
c0018ee7:	84 c0                	test   al,al
c0018ee9:	79 27                	jns    c0018f12 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018eeb:	bb 01 00 00 00       	mov    ebx,0x1
c0018ef0:	53                   	push   ebx
c0018ef1:	56                   	push   esi
c0018ef2:	57                   	push   edi
c0018ef3:	55                   	push   ebp
c0018ef4:	e8 b5 f7 ff ff       	call   c00186ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018ef9:	83 c4 10             	add    esp,0x10
c0018efc:	66 40                	inc    ax
c0018efe:	74 0c                	je     c0018f0c <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018f00:	53                   	push   ebx
c0018f01:	56                   	push   esi
c0018f02:	57                   	push   edi
c0018f03:	55                   	push   ebp
c0018f04:	e8 31 fe ff ff       	call   c0018d3a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018f09:	83 c4 10             	add    esp,0x10
c0018f0c:	43                   	inc    ebx
c0018f0d:	83 fb 08             	cmp    ebx,0x8
c0018f10:	75 de                	jne    c0018ef0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018f12:	83 c4 0c             	add    esp,0xc
c0018f15:	5b                   	pop    ebx
c0018f16:	5e                   	pop    esi
c0018f17:	5f                   	pop    edi
c0018f18:	5d                   	pop    ebp
c0018f19:	c3                   	ret    

c0018f1a <PCI::detect()>:
c0018f1a:	56                   	push   esi
c0018f1b:	53                   	push   ebx
c0018f1c:	53                   	push   ebx
c0018f1d:	31 db                	xor    ebx,ebx
c0018f1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018f23:	6a 00                	push   0x0
c0018f25:	6a 00                	push   0x0
c0018f27:	6a 00                	push   0x0
c0018f29:	56                   	push   esi
c0018f2a:	e8 a3 f7 ff ff       	call   c00186d2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018f2f:	83 c4 10             	add    esp,0x10
c0018f32:	a8 80                	test   al,0x80
c0018f34:	75 21                	jne    c0018f57 <PCI::detect()+0x3d>
c0018f36:	51                   	push   ecx
c0018f37:	51                   	push   ecx
c0018f38:	6a 00                	push   0x0
c0018f3a:	56                   	push   esi
c0018f3b:	e8 62 fc ff ff       	call   c0018ba2 <PCI::checkBus(unsigned char)>
c0018f40:	83 c4 10             	add    esp,0x10
c0018f43:	eb 24                	jmp    c0018f69 <PCI::detect()+0x4f>
c0018f45:	52                   	push   edx
c0018f46:	52                   	push   edx
c0018f47:	53                   	push   ebx
c0018f48:	43                   	inc    ebx
c0018f49:	56                   	push   esi
c0018f4a:	e8 53 fc ff ff       	call   c0018ba2 <PCI::checkBus(unsigned char)>
c0018f4f:	83 c4 10             	add    esp,0x10
c0018f52:	83 fb 08             	cmp    ebx,0x8
c0018f55:	74 12                	je     c0018f69 <PCI::detect()+0x4f>
c0018f57:	53                   	push   ebx
c0018f58:	6a 00                	push   0x0
c0018f5a:	6a 00                	push   0x0
c0018f5c:	56                   	push   esi
c0018f5d:	e8 4c f7 ff ff       	call   c00186ae <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f62:	83 c4 10             	add    esp,0x10
c0018f65:	66 40                	inc    ax
c0018f67:	74 dc                	je     c0018f45 <PCI::detect()+0x2b>
c0018f69:	58                   	pop    eax
c0018f6a:	5b                   	pop    ebx
c0018f6b:	5e                   	pop    esi
c0018f6c:	c3                   	ret    
c0018f6d:	90                   	nop

c0018f6e <IDE::close(int, int, void*)>:
c0018f6e:	83 c8 ff             	or     eax,0xffffffff
c0018f71:	c3                   	ret    

c0018f72 <IDE::IDE()>:
c0018f72:	83 ec 0c             	sub    esp,0xc
c0018f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f79:	83 ec 08             	sub    esp,0x8
c0018f7c:	68 d4 f2 01 c0       	push   0xc001f2d4
c0018f81:	50                   	push   eax
c0018f82:	e8 45 2d ff ff       	call   c000bccc <HardDiskController::HardDiskController(char const*)>
c0018f87:	83 c4 10             	add    esp,0x10
c0018f8a:	ba 64 f3 01 c0       	mov    edx,0xc001f364
c0018f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f93:	89 10                	mov    DWORD PTR [eax],edx
c0018f95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f99:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018fa0:	90                   	nop
c0018fa1:	83 c4 0c             	add    esp,0xc
c0018fa4:	c3                   	ret    
c0018fa5:	90                   	nop

c0018fa6 <IDE::prepareInterrupt(unsigned char)>:
c0018fa6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018faf:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018fb7:	c3                   	ret    

c0018fb8 <selectDrive(unsigned char, unsigned char)>:
c0018fb8:	c3                   	ret    
c0018fb9:	90                   	nop

c0018fba <IDE::getBase(unsigned char)>:
c0018fba:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018fbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018fc3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018fcb:	c3                   	ret    

c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018fcc:	55                   	push   ebp
c0018fcd:	57                   	push   edi
c0018fce:	56                   	push   esi
c0018fcf:	53                   	push   ebx
c0018fd0:	83 ec 1c             	sub    esp,0x1c
c0018fd3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018fd7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018fdb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018fde:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018fe2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018fe6:	80 f9 03             	cmp    cl,0x3
c0018fe9:	77 51                	ja     c001903c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018feb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018fef:	0f b6 f2             	movzx  esi,dl
c0018ff2:	0f b6 db             	movzx  ebx,bl
c0018ff5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018ff8:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018ffc:	83 ca 80             	or     edx,0xffffff80
c0018fff:	0f b6 d2             	movzx  edx,dl
c0019002:	52                   	push   edx
c0019003:	6a 0c                	push   0xc
c0019005:	56                   	push   esi
c0019006:	57                   	push   edi
c0019007:	e8 c0 ff ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001900c:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0019011:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019015:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0019019:	ee                   	out    dx,al
c001901a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001901f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0019023:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0019027:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001902b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019033:	83 c4 2c             	add    esp,0x2c
c0019036:	5b                   	pop    ebx
c0019037:	5e                   	pop    esi
c0019038:	5f                   	pop    edi
c0019039:	5d                   	pop    ebp
c001903a:	eb 90                	jmp    c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001903c:	80 fb 07             	cmp    bl,0x7
c001903f:	77 12                	ja     c0019053 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0019041:	0f b6 d2             	movzx  edx,dl
c0019044:	0f b6 db             	movzx  ebx,bl
c0019047:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001904f:	89 da                	mov    edx,ebx
c0019051:	eb 2f                	jmp    c0019082 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019053:	80 fb 0d             	cmp    bl,0xd
c0019056:	77 13                	ja     c001906b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019058:	0f b6 d2             	movzx  edx,dl
c001905b:	0f b6 db             	movzx  ebx,bl
c001905e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0019065:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019069:	eb 17                	jmp    c0019082 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001906b:	80 fb 15             	cmp    bl,0x15
c001906e:	77 13                	ja     c0019083 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0019070:	0f b6 d2             	movzx  edx,dl
c0019073:	0f b6 db             	movzx  ebx,bl
c0019076:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001907e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0019082:	ee                   	out    dx,al
c0019083:	83 c4 1c             	add    esp,0x1c
c0019086:	5b                   	pop    ebx
c0019087:	5e                   	pop    esi
c0019088:	5f                   	pop    edi
c0019089:	5d                   	pop    ebp
c001908a:	c3                   	ret    
c001908b:	90                   	nop

c001908c <IDE::read(unsigned char, unsigned char)>:
c001908c:	55                   	push   ebp
c001908d:	57                   	push   edi
c001908e:	56                   	push   esi
c001908f:	53                   	push   ebx
c0019090:	83 ec 1c             	sub    esp,0x1c
c0019093:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019097:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001909b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001909e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190a2:	3c 03                	cmp    al,0x3
c00190a4:	77 43                	ja     c00190e9 <IDE::read(unsigned char, unsigned char)+0x5d>
c00190a6:	0f b6 f2             	movzx  esi,dl
c00190a9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00190ac:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00190b0:	83 c8 80             	or     eax,0xffffff80
c00190b3:	0f b6 c0             	movzx  eax,al
c00190b6:	50                   	push   eax
c00190b7:	6a 0c                	push   0xc
c00190b9:	56                   	push   esi
c00190ba:	57                   	push   edi
c00190bb:	e8 0c ff ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190c0:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00190c5:	0f b6 c3             	movzx  eax,bl
c00190c8:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00190cc:	ec                   	in     al,dx
c00190cd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00190d1:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00190d6:	52                   	push   edx
c00190d7:	6a 0c                	push   0xc
c00190d9:	56                   	push   esi
c00190da:	57                   	push   edi
c00190db:	e8 ec fe ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190e0:	83 c4 20             	add    esp,0x20
c00190e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00190e7:	eb 49                	jmp    c0019132 <IDE::read(unsigned char, unsigned char)+0xa6>
c00190e9:	80 fb 07             	cmp    bl,0x7
c00190ec:	77 12                	ja     c0019100 <IDE::read(unsigned char, unsigned char)+0x74>
c00190ee:	0f b6 d2             	movzx  edx,dl
c00190f1:	0f b6 c3             	movzx  eax,bl
c00190f4:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00190fc:	89 c2                	mov    edx,eax
c00190fe:	eb 31                	jmp    c0019131 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019100:	80 fb 0d             	cmp    bl,0xd
c0019103:	77 13                	ja     c0019118 <IDE::read(unsigned char, unsigned char)+0x8c>
c0019105:	0f b6 d2             	movzx  edx,dl
c0019108:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001910f:	0f b6 d3             	movzx  edx,bl
c0019112:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0019116:	eb 19                	jmp    c0019131 <IDE::read(unsigned char, unsigned char)+0xa5>
c0019118:	31 c0                	xor    eax,eax
c001911a:	80 fb 15             	cmp    bl,0x15
c001911d:	77 13                	ja     c0019132 <IDE::read(unsigned char, unsigned char)+0xa6>
c001911f:	0f b6 d2             	movzx  edx,dl
c0019122:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001912a:	0f b6 d3             	movzx  edx,bl
c001912d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0019131:	ec                   	in     al,dx
c0019132:	83 c4 1c             	add    esp,0x1c
c0019135:	5b                   	pop    ebx
c0019136:	5e                   	pop    esi
c0019137:	5f                   	pop    edi
c0019138:	5d                   	pop    ebp
c0019139:	c3                   	ret    

c001913a <IDE::waitInterrupt(unsigned char)>:
c001913a:	57                   	push   edi
c001913b:	56                   	push   esi
c001913c:	31 f6                	xor    esi,esi
c001913e:	53                   	push   ebx
c001913f:	83 ec 10             	sub    esp,0x10
c0019142:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0019146:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001914a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001914e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019153:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001915a:	84 db                	test   bl,bl
c001915c:	75 33                	jne    c0019191 <IDE::waitInterrupt(unsigned char)+0x57>
c001915e:	52                   	push   edx
c001915f:	6a 0c                	push   0xc
c0019161:	50                   	push   eax
c0019162:	57                   	push   edi
c0019163:	e8 24 ff ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c0019168:	83 c4 10             	add    esp,0x10
c001916b:	a8 01                	test   al,0x1
c001916d:	75 2a                	jne    c0019199 <IDE::waitInterrupt(unsigned char)+0x5f>
c001916f:	f7 c6 04 00 00 00    	test   esi,0x4
c0019175:	75 12                	jne    c0019189 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019177:	83 fe 32             	cmp    esi,0x32
c001917a:	7e 0d                	jle    c0019189 <IDE::waitInterrupt(unsigned char)+0x4f>
c001917c:	83 ec 0c             	sub    esp,0xc
c001917f:	6a 64                	push   0x64
c0019181:	e8 1a a9 ff ff       	call   c0013aa0 <milliTenthSleep(unsigned int)>
c0019186:	83 c4 10             	add    esp,0x10
c0019189:	83 fe 3c             	cmp    esi,0x3c
c001918c:	74 0b                	je     c0019199 <IDE::waitInterrupt(unsigned char)+0x5f>
c001918e:	46                   	inc    esi
c001918f:	eb bd                	jmp    c001914e <IDE::waitInterrupt(unsigned char)+0x14>
c0019191:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0019199:	83 c4 10             	add    esp,0x10
c001919c:	88 d8                	mov    al,bl
c001919e:	5b                   	pop    ebx
c001919f:	5e                   	pop    esi
c00191a0:	5f                   	pop    edi
c00191a1:	c3                   	ret    

c00191a2 <ideChannel0IRQHandler(regs*, void*)>:
c00191a2:	83 ec 10             	sub    esp,0x10
c00191a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191a9:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00191b0:	6a 07                	push   0x7
c00191b2:	6a 00                	push   0x0
c00191b4:	50                   	push   eax
c00191b5:	e8 d2 fe ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c00191ba:	83 c4 1c             	add    esp,0x1c
c00191bd:	c3                   	ret    

c00191be <ideChannel1IRQHandler(regs*, void*)>:
c00191be:	83 ec 10             	sub    esp,0x10
c00191c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191c5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00191cc:	6a 07                	push   0x7
c00191ce:	6a 01                	push   0x1
c00191d0:	50                   	push   eax
c00191d1:	e8 b6 fe ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c00191d6:	83 c4 1c             	add    esp,0x1c
c00191d9:	c3                   	ret    

c00191da <IDE::enableIRQs(unsigned char, bool)>:
c00191da:	57                   	push   edi
c00191db:	56                   	push   esi
c00191dc:	be 04 00 00 00       	mov    esi,0x4
c00191e1:	53                   	push   ebx
c00191e2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00191e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00191eb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00191f0:	0f 94 c0             	sete   al
c00191f3:	01 c0                	add    eax,eax
c00191f5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00191fc:	0f b6 c0             	movzx  eax,al
c00191ff:	50                   	push   eax
c0019200:	6a 0c                	push   0xc
c0019202:	57                   	push   edi
c0019203:	53                   	push   ebx
c0019204:	e8 c3 fd ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019209:	83 c4 10             	add    esp,0x10
c001920c:	50                   	push   eax
c001920d:	6a 0c                	push   0xc
c001920f:	57                   	push   edi
c0019210:	53                   	push   ebx
c0019211:	e8 76 fe ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c0019216:	83 c4 10             	add    esp,0x10
c0019219:	4e                   	dec    esi
c001921a:	75 f0                	jne    c001920c <IDE::enableIRQs(unsigned char, bool)+0x32>
c001921c:	5b                   	pop    ebx
c001921d:	5e                   	pop    esi
c001921e:	5f                   	pop    edi
c001921f:	c3                   	ret    

c0019220 <IDE::open(int, int, void*)>:
c0019220:	55                   	push   ebp
c0019221:	57                   	push   edi
c0019222:	56                   	push   esi
c0019223:	53                   	push   ebx
c0019224:	83 ec 1c             	sub    esp,0x1c
c0019227:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001922b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019234:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001923d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019244:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001924b:	0f 85 b0 02 00 00    	jne    c0019501 <IDE::open(int, int, void*)+0x2e1>
c0019251:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0019257:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001925b:	83 e0 7f             	and    eax,0x7f
c001925e:	3c 05                	cmp    al,0x5
c0019260:	74 04                	je     c0019266 <IDE::open(int, int, void*)+0x46>
c0019262:	3c 0f                	cmp    al,0xf
c0019264:	75 32                	jne    c0019298 <IDE::open(int, int, void*)+0x78>
c0019266:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001926c:	83 e0 fc             	and    eax,0xfffffffc
c001926f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019276:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001927c:	83 e0 fc             	and    eax,0xfffffffc
c001927f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019286:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001928c:	83 e0 fc             	and    eax,0xfffffffc
c001928f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019296:	eb 14                	jmp    c00192ac <IDE::open(int, int, void*)+0x8c>
c0019298:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00192a2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00192ac:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00192b3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00192ba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192be:	89 c6                	mov    esi,eax
c00192c0:	bf f8 0c 00 00       	mov    edi,0xcf8
c00192c5:	c1 e6 10             	shl    esi,0x10
c00192c8:	89 e8                	mov    eax,ebp
c00192ca:	89 fa                	mov    edx,edi
c00192cc:	c1 e0 0b             	shl    eax,0xb
c00192cf:	09 f0                	or     eax,esi
c00192d1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00192d8:	c1 e6 08             	shl    esi,0x8
c00192db:	09 c6                	or     esi,eax
c00192dd:	89 f0                	mov    eax,esi
c00192df:	0d 08 00 00 80       	or     eax,0x80000008
c00192e4:	ef                   	out    dx,eax
c00192e5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00192ea:	89 ca                	mov    edx,ecx
c00192ec:	ed                   	in     eax,dx
c00192ed:	c1 e8 10             	shr    eax,0x10
c00192f0:	3d ff ff 00 00       	cmp    eax,0xffff
c00192f5:	0f 84 f5 00 00 00    	je     c00193f0 <IDE::open(int, int, void*)+0x1d0>
c00192fb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0019301:	89 fa                	mov    edx,edi
c0019303:	89 f0                	mov    eax,esi
c0019305:	ef                   	out    dx,eax
c0019306:	b0 fe                	mov    al,0xfe
c0019308:	89 ca                	mov    edx,ecx
c001930a:	ee                   	out    dx,al
c001930b:	89 f0                	mov    eax,esi
c001930d:	89 fa                	mov    edx,edi
c001930f:	ef                   	out    dx,eax
c0019310:	89 ca                	mov    edx,ecx
c0019312:	ed                   	in     eax,dx
c0019313:	3c fe                	cmp    al,0xfe
c0019315:	0f 85 a9 00 00 00    	jne    c00193c4 <IDE::open(int, int, void*)+0x1a4>
c001931b:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c0019321:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019328:	74 33                	je     c001935d <IDE::open(int, int, void*)+0x13d>
c001932a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0019330:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019334:	40                   	inc    eax
c0019335:	83 ec 0c             	sub    esp,0xc
c0019338:	0f b6 c0             	movzx  eax,al
c001933b:	50                   	push   eax
c001933c:	55                   	push   ebp
c001933d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019341:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0019347:	51                   	push   ecx
c0019348:	e8 97 53 ff ff       	call   c000e6e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001934d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0019352:	83 c4 1c             	add    esp,0x1c
c0019355:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001935b:	eb 0a                	jmp    c0019367 <IDE::open(int, int, void*)+0x147>
c001935d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0019367:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001936e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0019375:	c1 e1 10             	shl    ecx,0x10
c0019378:	c1 e0 08             	shl    eax,0x8
c001937b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019380:	09 c1                	or     ecx,eax
c0019382:	89 fa                	mov    edx,edi
c0019384:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001938b:	c1 e0 0b             	shl    eax,0xb
c001938e:	09 c1                	or     ecx,eax
c0019390:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0019396:	89 c8                	mov    eax,ecx
c0019398:	ef                   	out    dx,eax
c0019399:	be fc 0c 00 00       	mov    esi,0xcfc
c001939e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00193a4:	89 f2                	mov    edx,esi
c00193a6:	ee                   	out    dx,al
c00193a7:	89 c8                	mov    eax,ecx
c00193a9:	89 fa                	mov    edx,edi
c00193ab:	ef                   	out    dx,eax
c00193ac:	89 f2                	mov    edx,esi
c00193ae:	ed                   	in     eax,dx
c00193af:	0f b6 c0             	movzx  eax,al
c00193b2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00193b8:	74 46                	je     c0019400 <IDE::open(int, int, void*)+0x1e0>
c00193ba:	83 ec 0c             	sub    esp,0xc
c00193bd:	68 ec f2 01 c0       	push   0xc001f2ec
c00193c2:	eb 34                	jmp    c00193f8 <IDE::open(int, int, void*)+0x1d8>
c00193c4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00193cd:	75 17                	jne    c00193e6 <IDE::open(int, int, void*)+0x1c6>
c00193cf:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00193d4:	74 07                	je     c00193dd <IDE::open(int, int, void*)+0x1bd>
c00193d6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00193db:	75 09                	jne    c00193e6 <IDE::open(int, int, void*)+0x1c6>
c00193dd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00193e4:	eb 1a                	jmp    c0019400 <IDE::open(int, int, void*)+0x1e0>
c00193e6:	83 ec 0c             	sub    esp,0xc
c00193e9:	68 f4 f2 01 c0       	push   0xc001f2f4
c00193ee:	eb 08                	jmp    c00193f8 <IDE::open(int, int, void*)+0x1d8>
c00193f0:	83 ec 0c             	sub    esp,0xc
c00193f3:	68 25 f3 01 c0       	push   0xc001f325
c00193f8:	e8 ce 6d ff ff       	call   c00101cb <KePanic(char const*)>
c00193fd:	83 c4 10             	add    esp,0x10
c0019400:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0019407:	79 1a                	jns    c0019423 <IDE::open(int, int, void*)+0x203>
c0019409:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001940f:	83 e0 fc             	and    eax,0xfffffffc
c0019412:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019419:	83 c0 08             	add    eax,0x8
c001941c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0019423:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019429:	89 c2                	mov    edx,eax
c001942b:	83 e2 0f             	and    edx,0xf
c001942e:	66 83 fa 08          	cmp    dx,0x8
c0019432:	75 0a                	jne    c001943e <IDE::open(int, int, void*)+0x21e>
c0019434:	83 e8 02             	sub    eax,0x2
c0019437:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001943e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019444:	89 c2                	mov    edx,eax
c0019446:	83 e2 0f             	and    edx,0xf
c0019449:	66 83 fa 08          	cmp    dx,0x8
c001944d:	75 0a                	jne    c0019459 <IDE::open(int, int, void*)+0x239>
c001944f:	83 e8 02             	sub    eax,0x2
c0019452:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019459:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019460:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0019467:	89 d0                	mov    eax,edx
c0019469:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001946c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019470:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019474:	8d 4a 01             	lea    ecx,[edx+0x1]
c0019477:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001947c:	0f b6 c9             	movzx  ecx,cl
c001947f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0019486:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019489:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001948d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019491:	8d 50 02             	lea    edx,[eax+0x2]
c0019494:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019499:	0f b6 d2             	movzx  edx,dl
c001949c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00194a2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194a5:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00194a9:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00194ad:	8d 48 03             	lea    ecx,[eax+0x3]
c00194b0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194b5:	0f b6 c9             	movzx  ecx,cl
c00194b8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00194be:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00194c1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00194c5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00194c9:	8d 50 04             	lea    edx,[eax+0x4]
c00194cc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00194d2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00194d7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00194de:	66 85 f6             	test   si,si
c00194e1:	74 5b                	je     c001953e <IDE::open(int, int, void*)+0x31e>
c00194e3:	0f b6 d2             	movzx  edx,dl
c00194e6:	83 c0 05             	add    eax,0x5
c00194e9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194ec:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00194f0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00194f4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00194fa:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194ff:	eb 3d                	jmp    c001953e <IDE::open(int, int, void*)+0x31e>
c0019501:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0019507:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001950e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019515:	66 05 06 02          	add    ax,0x206
c0019519:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019520:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0019527:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001952e:	66 05 06 02          	add    ax,0x206
c0019532:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019539:	e9 e5 fe ff ff       	jmp    c0019423 <IDE::open(int, int, void*)+0x203>
c001953e:	50                   	push   eax
c001953f:	50                   	push   eax
c0019540:	6a 00                	push   0x0
c0019542:	53                   	push   ebx
c0019543:	e8 5e fa ff ff       	call   c0018fa6 <IDE::prepareInterrupt(unsigned char)>
c0019548:	5a                   	pop    edx
c0019549:	59                   	pop    ecx
c001954a:	6a 01                	push   0x1
c001954c:	53                   	push   ebx
c001954d:	e8 54 fa ff ff       	call   c0018fa6 <IDE::prepareInterrupt(unsigned char)>
c0019552:	83 c4 0c             	add    esp,0xc
c0019555:	6a 00                	push   0x0
c0019557:	6a 00                	push   0x0
c0019559:	53                   	push   ebx
c001955a:	e8 7b fc ff ff       	call   c00191da <IDE::enableIRQs(unsigned char, bool)>
c001955f:	83 c4 0c             	add    esp,0xc
c0019562:	6a 00                	push   0x0
c0019564:	6a 01                	push   0x1
c0019566:	53                   	push   ebx
c0019567:	e8 6e fc ff ff       	call   c00191da <IDE::enableIRQs(unsigned char, bool)>
c001956c:	83 c4 10             	add    esp,0x10
c001956f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0019576:	74 34                	je     c00195ac <IDE::open(int, int, void*)+0x38c>
c0019578:	83 ec 0c             	sub    esp,0xc
c001957b:	53                   	push   ebx
c001957c:	6a 01                	push   0x1
c001957e:	68 a2 91 01 c0       	push   0xc00191a2
c0019583:	6a 0e                	push   0xe
c0019585:	53                   	push   ebx
c0019586:	e8 a9 23 ff ff       	call   c000b934 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001958b:	83 c4 14             	add    esp,0x14
c001958e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019594:	53                   	push   ebx
c0019595:	6a 01                	push   0x1
c0019597:	68 be 91 01 c0       	push   0xc00191be
c001959c:	6a 0f                	push   0xf
c001959e:	53                   	push   ebx
c001959f:	e8 90 23 ff ff       	call   c000b934 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195a4:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00195aa:	eb 38                	jmp    c00195e4 <IDE::open(int, int, void*)+0x3c4>
c00195ac:	83 ec 0c             	sub    esp,0xc
c00195af:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00195b9:	53                   	push   ebx
c00195ba:	6a 00                	push   0x0
c00195bc:	68 a2 91 01 c0       	push   0xc00191a2
c00195c1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00195c7:	53                   	push   ebx
c00195c8:	e8 67 23 ff ff       	call   c000b934 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195cd:	83 c4 14             	add    esp,0x14
c00195d0:	53                   	push   ebx
c00195d1:	6a 00                	push   0x0
c00195d3:	68 be 91 01 c0       	push   0xc00191be
c00195d8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00195de:	53                   	push   ebx
c00195df:	e8 50 23 ff ff       	call   c000b934 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00195e6:	83 c4 20             	add    esp,0x20
c00195e9:	83 ec 0c             	sub    esp,0xc
c00195ec:	53                   	push   ebx
c00195ed:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00195f0:	83 c4 0c             	add    esp,0xc
c00195f3:	6a 07                	push   0x7
c00195f5:	6a 00                	push   0x0
c00195f7:	53                   	push   ebx
c00195f8:	e8 8f fa ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c00195fd:	83 c4 0c             	add    esp,0xc
c0019600:	6a 07                	push   0x7
c0019602:	6a 01                	push   0x1
c0019604:	53                   	push   ebx
c0019605:	e8 82 fa ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c001960a:	83 c4 0c             	add    esp,0xc
c001960d:	6a 01                	push   0x1
c001960f:	6a 00                	push   0x0
c0019611:	53                   	push   ebx
c0019612:	e8 c3 fb ff ff       	call   c00191da <IDE::enableIRQs(unsigned char, bool)>
c0019617:	83 c4 0c             	add    esp,0xc
c001961a:	6a 01                	push   0x1
c001961c:	6a 01                	push   0x1
c001961e:	53                   	push   ebx
c001961f:	e8 b6 fb ff ff       	call   c00191da <IDE::enableIRQs(unsigned char, bool)>
c0019624:	83 c4 2c             	add    esp,0x2c
c0019627:	31 c0                	xor    eax,eax
c0019629:	5b                   	pop    ebx
c001962a:	5e                   	pop    esi
c001962b:	5f                   	pop    edi
c001962c:	5d                   	pop    ebp
c001962d:	c3                   	ret    

c001962e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001962e:	55                   	push   ebp
c001962f:	57                   	push   edi
c0019630:	56                   	push   esi
c0019631:	53                   	push   ebx
c0019632:	83 ec 1c             	sub    esp,0x1c
c0019635:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019639:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001963d:	8d 50 f8             	lea    edx,[eax-0x8]
c0019640:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019644:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019648:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001964c:	80 fa 03             	cmp    dl,0x3
c001964f:	77 5d                	ja     c00196ae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019651:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019655:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019659:	0f b6 db             	movzx  ebx,bl
c001965c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001965f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0019663:	83 ca 80             	or     edx,0xffffff80
c0019666:	0f b6 d2             	movzx  edx,dl
c0019669:	52                   	push   edx
c001966a:	6a 0c                	push   0xc
c001966c:	53                   	push   ebx
c001966d:	56                   	push   esi
c001966e:	e8 59 f9 ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019673:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019678:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001967c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019680:	0f b6 c0             	movzx  eax,al
c0019683:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0019687:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019689:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001968e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0019692:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019696:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001969a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00196a2:	83 c4 2c             	add    esp,0x2c
c00196a5:	5b                   	pop    ebx
c00196a6:	5e                   	pop    esi
c00196a7:	5f                   	pop    edi
c00196a8:	5d                   	pop    ebp
c00196a9:	e9 1e f9 ff ff       	jmp    c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196ae:	3c 07                	cmp    al,0x7
c00196b0:	77 10                	ja     c00196c2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00196b2:	0f b6 db             	movzx  ebx,bl
c00196b5:	0f b6 d0             	movzx  edx,al
c00196b8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00196c0:	eb 2d                	jmp    c00196ef <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00196c2:	3c 0d                	cmp    al,0xd
c00196c4:	77 13                	ja     c00196d9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00196c6:	0f b6 db             	movzx  ebx,bl
c00196c9:	0f b6 c0             	movzx  eax,al
c00196cc:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00196d3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00196d7:	eb 16                	jmp    c00196ef <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00196d9:	3c 15                	cmp    al,0x15
c00196db:	77 14                	ja     c00196f1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00196dd:	0f b6 db             	movzx  ebx,bl
c00196e0:	0f b6 c0             	movzx  eax,al
c00196e3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00196eb:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00196ef:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00196f1:	83 c4 1c             	add    esp,0x1c
c00196f4:	5b                   	pop    ebx
c00196f5:	5e                   	pop    esi
c00196f6:	5f                   	pop    edi
c00196f7:	5d                   	pop    ebp
c00196f8:	c3                   	ret    
c00196f9:	90                   	nop

c00196fa <IDE::detect()>:
c00196fa:	55                   	push   ebp
c00196fb:	57                   	push   edi
c00196fc:	56                   	push   esi
c00196fd:	53                   	push   ebx
c00196fe:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019704:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001970b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019712:	0f 85 97 02 00 00    	jne    c00199af <IDE::detect()+0x2b5>
c0019718:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001971f:	31 f6                	xor    esi,esi
c0019721:	31 ed                	xor    ebp,ebp
c0019723:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001972b:	89 e8                	mov    eax,ebp
c001972d:	c1 e0 06             	shl    eax,0x6
c0019730:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019738:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001973c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019740:	c1 e0 04             	shl    eax,0x4
c0019743:	83 c8 a0             	or     eax,0xffffffa0
c0019746:	0f b6 c0             	movzx  eax,al
c0019749:	50                   	push   eax
c001974a:	6a 06                	push   0x6
c001974c:	56                   	push   esi
c001974d:	53                   	push   ebx
c001974e:	e8 79 f8 ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019753:	83 c4 0c             	add    esp,0xc
c0019756:	6a 0c                	push   0xc
c0019758:	56                   	push   esi
c0019759:	53                   	push   ebx
c001975a:	e8 2d f9 ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c001975f:	83 c4 0c             	add    esp,0xc
c0019762:	6a 0c                	push   0xc
c0019764:	56                   	push   esi
c0019765:	53                   	push   ebx
c0019766:	e8 21 f9 ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c001976b:	83 c4 0c             	add    esp,0xc
c001976e:	6a 0c                	push   0xc
c0019770:	56                   	push   esi
c0019771:	53                   	push   ebx
c0019772:	e8 15 f9 ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c0019777:	83 c4 0c             	add    esp,0xc
c001977a:	6a 0c                	push   0xc
c001977c:	56                   	push   esi
c001977d:	53                   	push   ebx
c001977e:	e8 09 f9 ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c0019783:	68 ec 00 00 00       	push   0xec
c0019788:	6a 07                	push   0x7
c001978a:	56                   	push   esi
c001978b:	53                   	push   ebx
c001978c:	e8 3b f8 ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019791:	83 c4 1c             	add    esp,0x1c
c0019794:	6a 0c                	push   0xc
c0019796:	56                   	push   esi
c0019797:	53                   	push   ebx
c0019798:	e8 ef f8 ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c001979d:	83 c4 0c             	add    esp,0xc
c00197a0:	6a 0c                	push   0xc
c00197a2:	56                   	push   esi
c00197a3:	53                   	push   ebx
c00197a4:	e8 e3 f8 ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c00197a9:	83 c4 0c             	add    esp,0xc
c00197ac:	6a 0c                	push   0xc
c00197ae:	56                   	push   esi
c00197af:	53                   	push   ebx
c00197b0:	e8 d7 f8 ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c00197b5:	83 c4 0c             	add    esp,0xc
c00197b8:	6a 0c                	push   0xc
c00197ba:	56                   	push   esi
c00197bb:	53                   	push   ebx
c00197bc:	e8 cb f8 ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c00197c1:	83 c4 0c             	add    esp,0xc
c00197c4:	6a 0c                	push   0xc
c00197c6:	56                   	push   esi
c00197c7:	53                   	push   ebx
c00197c8:	e8 bf f8 ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c00197cd:	83 c4 10             	add    esp,0x10
c00197d0:	84 c0                	test   al,al
c00197d2:	0f 84 5f 01 00 00    	je     c0019937 <IDE::detect()+0x23d>
c00197d8:	31 ff                	xor    edi,edi
c00197da:	50                   	push   eax
c00197db:	6a 0c                	push   0xc
c00197dd:	56                   	push   esi
c00197de:	53                   	push   ebx
c00197df:	e8 a8 f8 ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c00197e4:	83 c4 10             	add    esp,0x10
c00197e7:	a8 01                	test   al,0x1
c00197e9:	0f 85 69 01 00 00    	jne    c0019958 <IDE::detect()+0x25e>
c00197ef:	84 c0                	test   al,al
c00197f1:	78 04                	js     c00197f7 <IDE::detect()+0xfd>
c00197f3:	a8 08                	test   al,0x8
c00197f5:	75 23                	jne    c001981a <IDE::detect()+0x120>
c00197f7:	47                   	inc    edi
c00197f8:	81 ff 17 01 00 00    	cmp    edi,0x117
c00197fe:	7e da                	jle    c00197da <IDE::detect()+0xe0>
c0019800:	83 ec 0c             	sub    esp,0xc
c0019803:	6a 32                	push   0x32
c0019805:	e8 96 a2 ff ff       	call   c0013aa0 <milliTenthSleep(unsigned int)>
c001980a:	83 c4 10             	add    esp,0x10
c001980d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019813:	75 c5                	jne    c00197da <IDE::detect()+0xe0>
c0019815:	e9 3e 01 00 00       	jmp    c0019958 <IDE::detect()+0x25e>
c001981a:	31 c9                	xor    ecx,ecx
c001981c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019820:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019824:	83 ec 0c             	sub    esp,0xc
c0019827:	68 80 00 00 00       	push   0x80
c001982c:	57                   	push   edi
c001982d:	6a 00                	push   0x0
c001982f:	56                   	push   esi
c0019830:	53                   	push   ebx
c0019831:	e8 f8 fd ff ff       	call   c001962e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0019836:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001983b:	89 e8                	mov    eax,ebp
c001983d:	89 d1                	mov    ecx,edx
c001983f:	c1 e0 06             	shl    eax,0x6
c0019842:	01 d8                	add    eax,ebx
c0019844:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001984b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019852:	89 f2                	mov    edx,esi
c0019854:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001985a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001985e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019864:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019868:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001986f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0019877:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001987e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0019886:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001988c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019893:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019899:	8d 54 24 58          	lea    edx,[esp+0x58]
c001989d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00198a1:	83 c4 20             	add    esp,0x20
c00198a4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00198a7:	83 c0 02             	add    eax,0x2
c00198aa:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00198b0:	83 c7 02             	add    edi,0x2
c00198b3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00198b6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00198bc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00198c0:	75 e2                	jne    c00198a4 <IDE::detect()+0x1aa>
c00198c2:	89 e8                	mov    eax,ebp
c00198c4:	c1 e0 06             	shl    eax,0x6
c00198c7:	01 d8                	add    eax,ebx
c00198c9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00198cf:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00198d6:	66 c1 ea 09          	shr    dx,0x9
c00198da:	83 e2 01             	and    edx,0x1
c00198dd:	84 c9                	test   cl,cl
c00198df:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00198e5:	75 22                	jne    c0019909 <IDE::detect()+0x20f>
c00198e7:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00198ee:	74 46                	je     c0019936 <IDE::detect()+0x23c>
c00198f0:	83 ec 0c             	sub    esp,0xc
c00198f3:	68 7c 01 00 00       	push   0x17c
c00198f8:	e8 bc de fe ff       	call   c00077b9 <malloc>
c00198fd:	89 c7                	mov    edi,eax
c00198ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0019902:	e8 11 05 00 00       	call   c0019e18 <ATA::ATA()>
c0019907:	eb 17                	jmp    c0019920 <IDE::detect()+0x226>
c0019909:	83 ec 0c             	sub    esp,0xc
c001990c:	68 84 01 00 00       	push   0x184
c0019911:	e8 a3 de fe ff       	call   c00077b9 <malloc>
c0019916:	89 c7                	mov    edi,eax
c0019918:	89 04 24             	mov    DWORD PTR [esp],eax
c001991b:	e8 f0 0a 00 00       	call   c001a410 <ATAPI::ATAPI()>
c0019920:	5a                   	pop    edx
c0019921:	59                   	pop    ecx
c0019922:	57                   	push   edi
c0019923:	53                   	push   ebx
c0019924:	e8 5f 20 ff ff       	call   c000b988 <Device::addChild(Device*)>
c0019929:	8b 07                	mov    eax,DWORD PTR [edi]
c001992b:	53                   	push   ebx
c001992c:	55                   	push   ebp
c001992d:	6a 00                	push   0x0
c001992f:	57                   	push   edi
c0019930:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019933:	83 c4 20             	add    esp,0x20
c0019936:	45                   	inc    ebp
c0019937:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001993c:	74 0d                	je     c001994b <IDE::detect()+0x251>
c001993e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019946:	e9 e0 fd ff ff       	jmp    c001972b <IDE::detect()+0x31>
c001994b:	4e                   	dec    esi
c001994c:	74 61                	je     c00199af <IDE::detect()+0x2b5>
c001994e:	be 01 00 00 00       	mov    esi,0x1
c0019953:	e9 cb fd ff ff       	jmp    c0019723 <IDE::detect()+0x29>
c0019958:	50                   	push   eax
c0019959:	6a 04                	push   0x4
c001995b:	56                   	push   esi
c001995c:	53                   	push   ebx
c001995d:	e8 2a f7 ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c0019962:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019966:	83 c4 0c             	add    esp,0xc
c0019969:	6a 05                	push   0x5
c001996b:	56                   	push   esi
c001996c:	53                   	push   ebx
c001996d:	e8 1a f7 ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c0019972:	83 c4 10             	add    esp,0x10
c0019975:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019979:	80 fa 14             	cmp    dl,0x14
c001997c:	75 04                	jne    c0019982 <IDE::detect()+0x288>
c001997e:	3c eb                	cmp    al,0xeb
c0019980:	eb 07                	jmp    c0019989 <IDE::detect()+0x28f>
c0019982:	3c 96                	cmp    al,0x96
c0019984:	75 b1                	jne    c0019937 <IDE::detect()+0x23d>
c0019986:	80 fa 69             	cmp    dl,0x69
c0019989:	75 ac                	jne    c0019937 <IDE::detect()+0x23d>
c001998b:	68 a1 00 00 00       	push   0xa1
c0019990:	6a 07                	push   0x7
c0019992:	56                   	push   esi
c0019993:	53                   	push   ebx
c0019994:	e8 33 f6 ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019999:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c00199a0:	e8 fb a0 ff ff       	call   c0013aa0 <milliTenthSleep(unsigned int)>
c00199a5:	83 c4 10             	add    esp,0x10
c00199a8:	b1 01                	mov    cl,0x1
c00199aa:	e9 6d fe ff ff       	jmp    c001981c <IDE::detect()+0x122>
c00199af:	81 c4 1c 02 00 00    	add    esp,0x21c
c00199b5:	5b                   	pop    ebx
c00199b6:	5e                   	pop    esi
c00199b7:	5f                   	pop    edi
c00199b8:	5d                   	pop    ebp
c00199b9:	c3                   	ret    

c00199ba <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00199ba:	55                   	push   ebp
c00199bb:	57                   	push   edi
c00199bc:	56                   	push   esi
c00199bd:	53                   	push   ebx
c00199be:	83 ec 1c             	sub    esp,0x1c
c00199c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00199c5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00199c9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00199cd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00199d1:	88 c3                	mov    bl,al
c00199d3:	84 c0                	test   al,al
c00199d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199d9:	0f 84 81 00 00 00    	je     c0019a60 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00199df:	83 ec 0c             	sub    esp,0xc
c00199e2:	68 4f f3 01 c0       	push   0xc001f34f
c00199e7:	e8 5e 0b ff ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c00199ec:	83 c4 10             	add    esp,0x10
c00199ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199f3:	3c 01                	cmp    al,0x1
c00199f5:	74 63                	je     c0019a5a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c00199f7:	3c 02                	cmp    al,0x2
c00199f9:	75 53                	jne    c0019a4e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00199fb:	01 f6                	add    esi,esi
c00199fd:	09 ee                	or     esi,ebp
c00199ff:	50                   	push   eax
c0019a00:	89 f0                	mov    eax,esi
c0019a02:	6a 01                	push   0x1
c0019a04:	0f b6 f0             	movzx  esi,al
c0019a07:	c1 e6 06             	shl    esi,0x6
c0019a0a:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019a12:	50                   	push   eax
c0019a13:	57                   	push   edi
c0019a14:	e8 73 f6 ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c0019a19:	83 c4 10             	add    esp,0x10
c0019a1c:	a8 01                	test   al,0x1
c0019a1e:	74 02                	je     c0019a22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019a20:	b3 07                	mov    bl,0x7
c0019a22:	a8 02                	test   al,0x2
c0019a24:	74 02                	je     c0019a28 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019a26:	b3 03                	mov    bl,0x3
c0019a28:	a8 04                	test   al,0x4
c0019a2a:	74 02                	je     c0019a2e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019a2c:	b3 14                	mov    bl,0x14
c0019a2e:	a8 08                	test   al,0x8
c0019a30:	74 02                	je     c0019a34 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019a32:	b3 03                	mov    bl,0x3
c0019a34:	a8 10                	test   al,0x10
c0019a36:	74 02                	je     c0019a3a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019a38:	b3 15                	mov    bl,0x15
c0019a3a:	a8 20                	test   al,0x20
c0019a3c:	74 02                	je     c0019a40 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019a3e:	b3 03                	mov    bl,0x3
c0019a40:	a8 40                	test   al,0x40
c0019a42:	74 02                	je     c0019a46 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019a44:	b3 16                	mov    bl,0x16
c0019a46:	84 c0                	test   al,al
c0019a48:	79 16                	jns    c0019a60 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a4a:	b3 0d                	mov    bl,0xd
c0019a4c:	eb 12                	jmp    c0019a60 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a4e:	3c 03                	cmp    al,0x3
c0019a50:	74 0c                	je     c0019a5e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019a52:	3c 04                	cmp    al,0x4
c0019a54:	75 0a                	jne    c0019a60 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a56:	b3 08                	mov    bl,0x8
c0019a58:	eb 06                	jmp    c0019a60 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a5a:	b3 13                	mov    bl,0x13
c0019a5c:	eb 02                	jmp    c0019a60 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a5e:	b3 17                	mov    bl,0x17
c0019a60:	83 c4 1c             	add    esp,0x1c
c0019a63:	88 d8                	mov    al,bl
c0019a65:	5b                   	pop    ebx
c0019a66:	5e                   	pop    esi
c0019a67:	5f                   	pop    edi
c0019a68:	5d                   	pop    ebp
c0019a69:	c3                   	ret    

c0019a6a <IDE::polling(unsigned char, unsigned int)>:
c0019a6a:	55                   	push   ebp
c0019a6b:	bd 04 00 00 00       	mov    ebp,0x4
c0019a70:	57                   	push   edi
c0019a71:	56                   	push   esi
c0019a72:	53                   	push   ebx
c0019a73:	83 ec 0c             	sub    esp,0xc
c0019a76:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019a7a:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019a7e:	0f b6 f3             	movzx  esi,bl
c0019a81:	52                   	push   edx
c0019a82:	6a 0c                	push   0xc
c0019a84:	56                   	push   esi
c0019a85:	57                   	push   edi
c0019a86:	e8 01 f6 ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c0019a8b:	83 c4 10             	add    esp,0x10
c0019a8e:	4d                   	dec    ebp
c0019a8f:	75 ed                	jne    c0019a7e <IDE::polling(unsigned char, unsigned int)+0x14>
c0019a91:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019a96:	50                   	push   eax
c0019a97:	6a 0c                	push   0xc
c0019a99:	56                   	push   esi
c0019a9a:	57                   	push   edi
c0019a9b:	e8 ec f5 ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c0019aa0:	83 c4 10             	add    esp,0x10
c0019aa3:	a8 01                	test   al,0x1
c0019aa5:	75 17                	jne    c0019abe <IDE::polling(unsigned char, unsigned int)+0x54>
c0019aa7:	a8 20                	test   al,0x20
c0019aa9:	75 0f                	jne    c0019aba <IDE::polling(unsigned char, unsigned int)+0x50>
c0019aab:	4b                   	dec    ebx
c0019aac:	74 10                	je     c0019abe <IDE::polling(unsigned char, unsigned int)+0x54>
c0019aae:	84 c0                	test   al,al
c0019ab0:	78 e4                	js     c0019a96 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019ab2:	a8 08                	test   al,0x8
c0019ab4:	74 e0                	je     c0019a96 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019ab6:	31 c0                	xor    eax,eax
c0019ab8:	eb 06                	jmp    c0019ac0 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019aba:	b0 01                	mov    al,0x1
c0019abc:	eb 02                	jmp    c0019ac0 <IDE::polling(unsigned char, unsigned int)+0x56>
c0019abe:	b0 02                	mov    al,0x2
c0019ac0:	83 c4 0c             	add    esp,0xc
c0019ac3:	5b                   	pop    ebx
c0019ac4:	5e                   	pop    esi
c0019ac5:	5f                   	pop    edi
c0019ac6:	5d                   	pop    ebp
c0019ac7:	c3                   	ret    

c0019ac8 <SATABus::close(int, int, void*)>:
c0019ac8:	31 c0                	xor    eax,eax
c0019aca:	c3                   	ret    
c0019acb:	90                   	nop

c0019acc <SATABus::detect()>:
c0019acc:	c3                   	ret    
c0019acd:	90                   	nop

c0019ace <SATABus::SATABus()>:
c0019ace:	83 ec 0c             	sub    esp,0xc
c0019ad1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ad5:	83 ec 08             	sub    esp,0x8
c0019ad8:	68 88 f3 01 c0       	push   0xc001f388
c0019add:	50                   	push   eax
c0019ade:	e8 e9 21 ff ff       	call   c000bccc <HardDiskController::HardDiskController(char const*)>
c0019ae3:	83 c4 10             	add    esp,0x10
c0019ae6:	ba b4 f3 01 c0       	mov    edx,0xc001f3b4
c0019aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019aef:	89 10                	mov    DWORD PTR [eax],edx
c0019af1:	83 ec 0c             	sub    esp,0xc
c0019af4:	6a 50                	push   0x50
c0019af6:	e8 58 e0 fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019afb:	83 c4 10             	add    esp,0x10
c0019afe:	89 c2                	mov    edx,eax
c0019b00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b04:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019b0a:	83 ec 0c             	sub    esp,0xc
c0019b0d:	6a 50                	push   0x50
c0019b0f:	e8 79 f7 fe ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c0019b14:	83 c4 10             	add    esp,0x10
c0019b17:	89 c2                	mov    edx,eax
c0019b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b1d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019b23:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0019b28:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b2c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019b32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b36:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019b3c:	83 ec 0c             	sub    esp,0xc
c0019b3f:	6a 03                	push   0x3
c0019b41:	6a 50                	push   0x50
c0019b43:	51                   	push   ecx
c0019b44:	52                   	push   edx
c0019b45:	50                   	push   eax
c0019b46:	e8 ff 00 ff ff       	call   c0009c4a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019b4b:	83 c4 20             	add    esp,0x20
c0019b4e:	90                   	nop
c0019b4f:	83 c4 0c             	add    esp,0xc
c0019b52:	c3                   	ret    
c0019b53:	90                   	nop

c0019b54 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019b54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b58:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019b5b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019b5e:	09 c2                	or     edx,eax
c0019b60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b64:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019b6a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019b6c:	31 c0                	xor    eax,eax
c0019b6e:	c1 e9 08             	shr    ecx,0x8
c0019b71:	83 e1 0f             	and    ecx,0xf
c0019b74:	39 c8                	cmp    eax,ecx
c0019b76:	74 0a                	je     c0019b82 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019b78:	f6 c2 01             	test   dl,0x1
c0019b7b:	74 08                	je     c0019b85 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019b7d:	d1 ea                	shr    edx,1
c0019b7f:	40                   	inc    eax
c0019b80:	eb f2                	jmp    c0019b74 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019b82:	83 c8 ff             	or     eax,0xffffffff
c0019b85:	c3                   	ret    

c0019b86 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019b86:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019b8a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019b8d:	89 c2                	mov    edx,eax
c0019b8f:	c1 ea 08             	shr    edx,0x8
c0019b92:	83 e2 0f             	and    edx,0xf
c0019b95:	fe ca                	dec    dl
c0019b97:	75 31                	jne    c0019bca <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019b99:	83 e0 0f             	and    eax,0xf
c0019b9c:	3c 03                	cmp    al,0x3
c0019b9e:	75 2a                	jne    c0019bca <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019ba0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019ba3:	b8 02 00 00 00       	mov    eax,0x2
c0019ba8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019bae:	74 1c                	je     c0019bcc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019bb0:	b8 04 00 00 00       	mov    eax,0x4
c0019bb5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019bbb:	74 0f                	je     c0019bcc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019bbd:	31 c0                	xor    eax,eax
c0019bbf:	83 fa 03             	cmp    edx,0x3
c0019bc2:	0f 94 c0             	sete   al
c0019bc5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019bc9:	c3                   	ret    
c0019bca:	31 c0                	xor    eax,eax
c0019bcc:	c3                   	ret    
c0019bcd:	90                   	nop

c0019bce <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019bce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bd2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bd5:	0f ba e2 0f          	bt     edx,0xf
c0019bd9:	72 f7                	jb     c0019bd2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019bdb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bde:	83 ca 10             	or     edx,0x10
c0019be1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019be4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019be7:	83 ca 01             	or     edx,0x1
c0019bea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019bed:	c3                   	ret    

c0019bee <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019bee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bf2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bf5:	83 e2 fe             	and    edx,0xfffffffe
c0019bf8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019bfb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bfe:	83 e2 ef             	and    edx,0xffffffef
c0019c01:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c04:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c07:	0f ba e2 0e          	bt     edx,0xe
c0019c0b:	72 f7                	jb     c0019c04 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c0d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c10:	0f ba e2 0f          	bt     edx,0xf
c0019c14:	72 ee                	jb     c0019c04 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c16:	c3                   	ret    
c0019c17:	90                   	nop

c0019c18 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019c18:	55                   	push   ebp
c0019c19:	57                   	push   edi
c0019c1a:	56                   	push   esi
c0019c1b:	53                   	push   ebx
c0019c1c:	83 ec 1c             	sub    esp,0x1c
c0019c1f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019c23:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019c27:	53                   	push   ebx
c0019c28:	56                   	push   esi
c0019c29:	e8 c0 ff ff ff       	call   c0019bee <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019c2e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019c32:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c38:	83 ec 0c             	sub    esp,0xc
c0019c3b:	c1 e5 0a             	shl    ebp,0xa
c0019c3e:	01 e8                	add    eax,ebp
c0019c40:	89 03                	mov    DWORD PTR [ebx],eax
c0019c42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c44:	68 00 04 00 00       	push   0x400
c0019c49:	6a 00                	push   0x0
c0019c4b:	50                   	push   eax
c0019c4c:	e8 7f 68 fe ff       	call   c00004d0 <memset>
c0019c51:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019c57:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019c5b:	01 e8                	add    eax,ebp
c0019c5d:	83 c4 1c             	add    esp,0x1c
c0019c60:	89 03                	mov    DWORD PTR [ebx],eax
c0019c62:	c1 e2 08             	shl    edx,0x8
c0019c65:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019c6c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019c72:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c78:	01 f8                	add    eax,edi
c0019c7a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019c7d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019c80:	68 00 01 00 00       	push   0x100
c0019c85:	6a 00                	push   0x0
c0019c87:	50                   	push   eax
c0019c88:	e8 43 68 fe ff       	call   c00004d0 <memset>
c0019c8d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019c93:	01 fa                	add    edx,edi
c0019c95:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019c99:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019c9c:	c1 e7 0d             	shl    edi,0xd
c0019c9f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019ca6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019cac:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019cb2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cb6:	31 ff                	xor    edi,edi
c0019cb8:	83 c4 10             	add    esp,0x10
c0019cbb:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019cc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cc5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019ccb:	83 c5 20             	add    ebp,0x20
c0019cce:	01 f8                	add    eax,edi
c0019cd0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019cd3:	52                   	push   edx
c0019cd4:	68 00 01 00 00       	push   0x100
c0019cd9:	6a 00                	push   0x0
c0019cdb:	50                   	push   eax
c0019cdc:	e8 ef 67 fe ff       	call   c00004d0 <memset>
c0019ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ce5:	83 c4 10             	add    esp,0x10
c0019ce8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019cee:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019cf5:	01 f8                	add    eax,edi
c0019cf7:	81 c7 00 01 00 00    	add    edi,0x100
c0019cfd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d00:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019d06:	75 b3                	jne    c0019cbb <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019d08:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d0f:	50                   	push   eax
c0019d10:	50                   	push   eax
c0019d11:	53                   	push   ebx
c0019d12:	56                   	push   esi
c0019d13:	e8 b6 fe ff ff       	call   c0019bce <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019d18:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d1f:	83 c4 2c             	add    esp,0x2c
c0019d22:	5b                   	pop    ebx
c0019d23:	5e                   	pop    esi
c0019d24:	5f                   	pop    edi
c0019d25:	5d                   	pop    ebp
c0019d26:	c3                   	ret    
c0019d27:	90                   	nop

c0019d28 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019d28:	55                   	push   ebp
c0019d29:	57                   	push   edi
c0019d2a:	56                   	push   esi
c0019d2b:	53                   	push   ebx
c0019d2c:	31 db                	xor    ebx,ebx
c0019d2e:	83 ec 0c             	sub    esp,0xc
c0019d31:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d35:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019d39:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019d3c:	f7 c7 01 00 00 00    	test   edi,0x1
c0019d42:	74 7a                	je     c0019dbe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019d44:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019d48:	89 d8                	mov    eax,ebx
c0019d4a:	c1 e0 07             	shl    eax,0x7
c0019d4d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019d54:	55                   	push   ebp
c0019d55:	56                   	push   esi
c0019d56:	e8 2b fe ff ff       	call   c0019b86 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019d5b:	5a                   	pop    edx
c0019d5c:	83 f8 01             	cmp    eax,0x1
c0019d5f:	59                   	pop    ecx
c0019d60:	75 21                	jne    c0019d83 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019d62:	50                   	push   eax
c0019d63:	53                   	push   ebx
c0019d64:	55                   	push   ebp
c0019d65:	56                   	push   esi
c0019d66:	e8 ad fe ff ff       	call   c0019c18 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019d6b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019d72:	e8 42 da fe ff       	call   c00077b9 <malloc>
c0019d77:	89 c5                	mov    ebp,eax
c0019d79:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d7c:	e8 43 0d 00 00       	call   c001aac4 <SATA::SATA()>
c0019d81:	eb 24                	jmp    c0019da7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019d83:	83 f8 04             	cmp    eax,0x4
c0019d86:	75 36                	jne    c0019dbe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019d88:	51                   	push   ecx
c0019d89:	53                   	push   ebx
c0019d8a:	55                   	push   ebp
c0019d8b:	56                   	push   esi
c0019d8c:	e8 87 fe ff ff       	call   c0019c18 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019d91:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019d98:	e8 1c da fe ff       	call   c00077b9 <malloc>
c0019d9d:	89 c5                	mov    ebp,eax
c0019d9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019da2:	e8 79 10 00 00       	call   c001ae20 <SATAPI::SATAPI()>
c0019da7:	58                   	pop    eax
c0019da8:	5a                   	pop    edx
c0019da9:	55                   	push   ebp
c0019daa:	56                   	push   esi
c0019dab:	e8 d8 1b ff ff       	call   c000b988 <Device::addChild(Device*)>
c0019db0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019db3:	56                   	push   esi
c0019db4:	6a 00                	push   0x0
c0019db6:	53                   	push   ebx
c0019db7:	55                   	push   ebp
c0019db8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019dbb:	83 c4 20             	add    esp,0x20
c0019dbe:	d1 ef                	shr    edi,1
c0019dc0:	43                   	inc    ebx
c0019dc1:	83 fb 20             	cmp    ebx,0x20
c0019dc4:	0f 85 72 ff ff ff    	jne    c0019d3c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019dca:	83 c4 0c             	add    esp,0xc
c0019dcd:	5b                   	pop    ebx
c0019dce:	5e                   	pop    esi
c0019dcf:	5f                   	pop    edi
c0019dd0:	5d                   	pop    ebp
c0019dd1:	c3                   	ret    

c0019dd2 <SATABus::open(int, int, void*)>:
c0019dd2:	83 ec 14             	sub    esp,0x14
c0019dd5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019dd9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019ddf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019de5:	52                   	push   edx
c0019de6:	50                   	push   eax
c0019de7:	e8 3c ff ff ff       	call   c0019d28 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019dec:	31 c0                	xor    eax,eax
c0019dee:	83 c4 1c             	add    esp,0x1c
c0019df1:	c3                   	ret    

c0019df2 <ATA::close(int, int, void*)>:
c0019df2:	83 ec 0c             	sub    esp,0xc
c0019df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019df9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019dff:	85 c0                	test   eax,eax
c0019e01:	74 0c                	je     c0019e0f <ATA::close(int, int, void*)+0x1d>
c0019e03:	83 ec 0c             	sub    esp,0xc
c0019e06:	8b 10                	mov    edx,DWORD PTR [eax]
c0019e08:	50                   	push   eax
c0019e09:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019e0c:	83 c4 10             	add    esp,0x10
c0019e0f:	31 c0                	xor    eax,eax
c0019e11:	83 c4 0c             	add    esp,0xc
c0019e14:	c3                   	ret    
c0019e15:	90                   	nop

c0019e16 <ATA::powerSaving(PowerSavingLevel)>:
c0019e16:	c3                   	ret    
c0019e17:	90                   	nop

c0019e18 <ATA::ATA()>:
c0019e18:	83 ec 0c             	sub    esp,0xc
c0019e1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e1f:	83 ec 04             	sub    esp,0x4
c0019e22:	68 00 02 00 00       	push   0x200
c0019e27:	68 81 f4 01 c0       	push   0xc001f481
c0019e2c:	50                   	push   eax
c0019e2d:	e8 24 1f ff ff       	call   c000bd56 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019e32:	83 c4 10             	add    esp,0x10
c0019e35:	ba f4 f3 01 c0       	mov    edx,0xc001f3f4
c0019e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e3e:	89 10                	mov    DWORD PTR [eax],edx
c0019e40:	90                   	nop
c0019e41:	83 c4 0c             	add    esp,0xc
c0019e44:	c3                   	ret    
c0019e45:	90                   	nop

c0019e46 <ATA::flush(bool)>:
c0019e46:	53                   	push   ebx
c0019e47:	83 ec 08             	sub    esp,0x8
c0019e4a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019e4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e53:	19 c0                	sbb    eax,eax
c0019e55:	83 e0 fd             	and    eax,0xfffffffd
c0019e58:	05 ea 00 00 00       	add    eax,0xea
c0019e5d:	50                   	push   eax
c0019e5e:	6a 07                	push   0x7
c0019e60:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e67:	50                   	push   eax
c0019e68:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e6e:	e8 59 f1 ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e73:	83 c4 0c             	add    esp,0xc
c0019e76:	6a 00                	push   0x0
c0019e78:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e7f:	50                   	push   eax
c0019e80:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e86:	e8 df fb ff ff       	call   c0019a6a <IDE::polling(unsigned char, unsigned int)>
c0019e8b:	83 c4 18             	add    esp,0x18
c0019e8e:	5b                   	pop    ebx
c0019e8f:	c3                   	ret    

c0019e90 <ATA::readyForCommand()>:
c0019e90:	56                   	push   esi
c0019e91:	53                   	push   ebx
c0019e92:	53                   	push   ebx
c0019e93:	31 db                	xor    ebx,ebx
c0019e95:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e99:	51                   	push   ecx
c0019e9a:	6a 0c                	push   0xc
c0019e9c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019ea3:	50                   	push   eax
c0019ea4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019eaa:	e8 dd f1 ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c0019eaf:	83 c4 10             	add    esp,0x10
c0019eb2:	a8 88                	test   al,0x88
c0019eb4:	74 1f                	je     c0019ed5 <ATA::readyForCommand()+0x45>
c0019eb6:	43                   	inc    ebx
c0019eb7:	83 fb 63             	cmp    ebx,0x63
c0019eba:	7e dd                	jle    c0019e99 <ATA::readyForCommand()+0x9>
c0019ebc:	83 ec 0c             	sub    esp,0xc
c0019ebf:	6a 0a                	push   0xa
c0019ec1:	e8 da 9b ff ff       	call   c0013aa0 <milliTenthSleep(unsigned int)>
c0019ec6:	83 c4 10             	add    esp,0x10
c0019ec9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019ecf:	75 c8                	jne    c0019e99 <ATA::readyForCommand()+0x9>
c0019ed1:	31 c0                	xor    eax,eax
c0019ed3:	eb 02                	jmp    c0019ed7 <ATA::readyForCommand()+0x47>
c0019ed5:	b0 01                	mov    al,0x1
c0019ed7:	5a                   	pop    edx
c0019ed8:	5b                   	pop    ebx
c0019ed9:	5e                   	pop    esi
c0019eda:	c3                   	ret    
c0019edb:	90                   	nop

c0019edc <ATA::access(unsigned long long, int, void*, bool)>:
c0019edc:	55                   	push   ebp
c0019edd:	57                   	push   edi
c0019ede:	56                   	push   esi
c0019edf:	53                   	push   ebx
c0019ee0:	83 ec 2c             	sub    esp,0x2c
c0019ee3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019ee7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019eeb:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019eef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ef3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019ef7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019efb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019eff:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019f05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f09:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019f0f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019f13:	c1 e0 06             	shl    eax,0x6
c0019f16:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019f1e:	74 5d                	je     c0019f7d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019f20:	89 fa                	mov    edx,edi
c0019f22:	89 f0                	mov    eax,esi
c0019f24:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019f28:	c1 ea 1c             	shr    edx,0x1c
c0019f2b:	89 d1                	mov    ecx,edx
c0019f2d:	09 c1                	or     ecx,eax
c0019f2f:	74 25                	je     c0019f56 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019f31:	31 ed                	xor    ebp,ebp
c0019f33:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019f3a:	89 fa                	mov    edx,edi
c0019f3c:	89 f0                	mov    eax,esi
c0019f3e:	0f ad d0             	shrd   eax,edx,cl
c0019f41:	d3 ea                	shr    edx,cl
c0019f43:	f6 c1 20             	test   cl,0x20
c0019f46:	74 02                	je     c0019f4a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019f48:	89 d0                	mov    eax,edx
c0019f4a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019f4e:	45                   	inc    ebp
c0019f4f:	83 fd 06             	cmp    ebp,0x6
c0019f52:	75 df                	jne    c0019f33 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019f54:	eb 76                	jmp    c0019fcc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019f56:	89 f0                	mov    eax,esi
c0019f58:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019f5d:	89 fa                	mov    edx,edi
c0019f5f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019f66:	0f ac d0 10          	shrd   eax,edx,0x10
c0019f6a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019f6f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019f73:	c1 ee 18             	shr    esi,0x18
c0019f76:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019f7b:	eb 56                	jmp    c0019fd3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019f7d:	6a 00                	push   0x0
c0019f7f:	6a 3f                	push   0x3f
c0019f81:	57                   	push   edi
c0019f82:	56                   	push   esi
c0019f83:	e8 78 22 00 00       	call   c001c200 <__umoddi3>
c0019f88:	83 c4 10             	add    esp,0x10
c0019f8b:	40                   	inc    eax
c0019f8c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019f90:	6a 00                	push   0x0
c0019f92:	68 f0 03 00 00       	push   0x3f0
c0019f97:	57                   	push   edi
c0019f98:	56                   	push   esi
c0019f99:	e8 62 21 00 00       	call   c001c100 <__udivdi3>
c0019f9e:	83 c4 10             	add    esp,0x10
c0019fa1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019fa6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019fad:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019fb2:	6a 00                	push   0x0
c0019fb4:	6a 3f                	push   0x3f
c0019fb6:	57                   	push   edi
c0019fb7:	56                   	push   esi
c0019fb8:	e8 43 21 00 00       	call   c001c100 <__udivdi3>
c0019fbd:	83 c4 10             	add    esp,0x10
c0019fc0:	89 c6                	mov    esi,eax
c0019fc2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019fc7:	83 e6 0f             	and    esi,0xf
c0019fca:	eb 07                	jmp    c0019fd3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019fcc:	31 f6                	xor    esi,esi
c0019fce:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019fd3:	bf 01 00 00 00       	mov    edi,0x1
c0019fd8:	50                   	push   eax
c0019fd9:	6a 00                	push   0x0
c0019fdb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fe2:	50                   	push   eax
c0019fe3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019fe7:	e8 ee f1 ff ff       	call   c00191da <IDE::enableIRQs(unsigned char, bool)>
c0019fec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fef:	e8 9c fe ff ff       	call   c0019e90 <ATA::readyForCommand()>
c0019ff4:	83 c4 10             	add    esp,0x10
c0019ff7:	84 c0                	test   al,al
c0019ff9:	0f 84 4e 02 00 00    	je     c001a24d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019fff:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a005:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a00b:	c1 e0 04             	shl    eax,0x4
c001a00e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a015:	09 c6                	or     esi,eax
c001a017:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a01c:	75 05                	jne    c001a023 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a01e:	83 ce a0             	or     esi,0xffffffa0
c001a021:	eb 03                	jmp    c001a026 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a023:	83 ce e0             	or     esi,0xffffffe0
c001a026:	89 f0                	mov    eax,esi
c001a028:	0f b6 f0             	movzx  esi,al
c001a02b:	56                   	push   esi
c001a02c:	6a 06                	push   0x6
c001a02e:	51                   	push   ecx
c001a02f:	52                   	push   edx
c001a030:	e8 97 ef ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a035:	83 c4 10             	add    esp,0x10
c001a038:	6a 00                	push   0x0
c001a03a:	6a 01                	push   0x1
c001a03c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a043:	50                   	push   eax
c001a044:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a04a:	e8 7d ef ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a04f:	83 c4 10             	add    esp,0x10
c001a052:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a057:	75 6e                	jne    c001a0c7 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a059:	6a 00                	push   0x0
c001a05b:	6a 08                	push   0x8
c001a05d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a064:	50                   	push   eax
c001a065:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a06b:	e8 5c ef ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a070:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a075:	50                   	push   eax
c001a076:	6a 09                	push   0x9
c001a078:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a07f:	50                   	push   eax
c001a080:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a086:	e8 41 ef ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a08b:	83 c4 20             	add    esp,0x20
c001a08e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a093:	50                   	push   eax
c001a094:	6a 0a                	push   0xa
c001a096:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a09d:	50                   	push   eax
c001a09e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0a4:	e8 23 ef ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0a9:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a0ae:	50                   	push   eax
c001a0af:	6a 0b                	push   0xb
c001a0b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0b8:	50                   	push   eax
c001a0b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0bf:	e8 08 ef ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0c4:	83 c4 20             	add    esp,0x20
c001a0c7:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a0cc:	50                   	push   eax
c001a0cd:	6a 02                	push   0x2
c001a0cf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0d6:	50                   	push   eax
c001a0d7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0dd:	e8 ea ee ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0e2:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a0e7:	50                   	push   eax
c001a0e8:	6a 03                	push   0x3
c001a0ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0f1:	50                   	push   eax
c001a0f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0f8:	e8 cf ee ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0fd:	83 c4 20             	add    esp,0x20
c001a100:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a105:	50                   	push   eax
c001a106:	6a 04                	push   0x4
c001a108:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a10f:	50                   	push   eax
c001a110:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a116:	e8 b1 ee ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a11b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a120:	50                   	push   eax
c001a121:	6a 05                	push   0x5
c001a123:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a12a:	50                   	push   eax
c001a12b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a131:	e8 96 ee ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a136:	83 c4 20             	add    esp,0x20
c001a139:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a13e:	0f 94 c0             	sete   al
c001a141:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a146:	74 09                	je     c001a151 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a148:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a14f:	eb 07                	jmp    c001a158 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a151:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a158:	0f b6 c0             	movzx  eax,al
c001a15b:	50                   	push   eax
c001a15c:	6a 07                	push   0x7
c001a15e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a165:	50                   	push   eax
c001a166:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a16c:	e8 5b ee ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a171:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a175:	83 c4 10             	add    esp,0x10
c001a178:	85 f6                	test   esi,esi
c001a17a:	0f 84 ae 00 00 00    	je     c001a22e <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a180:	50                   	push   eax
c001a181:	6a 01                	push   0x1
c001a183:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a18a:	50                   	push   eax
c001a18b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a191:	e8 d4 f8 ff ff       	call   c0019a6a <IDE::polling(unsigned char, unsigned int)>
c001a196:	83 c4 10             	add    esp,0x10
c001a199:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a19f:	84 c0                	test   al,al
c001a1a1:	74 20                	je     c001a1c3 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a1a3:	0f b6 f8             	movzx  edi,al
c001a1a6:	0f b6 d2             	movzx  edx,dl
c001a1a9:	57                   	push   edi
c001a1aa:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a1b1:	50                   	push   eax
c001a1b2:	52                   	push   edx
c001a1b3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1b9:	e8 fc f7 ff ff       	call   c00199ba <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a1be:	e9 87 00 00 00       	jmp    c001a24a <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a1c3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a1c8:	74 33                	je     c001a1fd <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a1ca:	31 ed                	xor    ebp,ebp
c001a1cc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a1d0:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a1d4:	50                   	push   eax
c001a1d5:	50                   	push   eax
c001a1d6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1dd:	50                   	push   eax
c001a1de:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1e4:	e8 d1 ed ff ff       	call   c0018fba <IDE::getBase(unsigned char)>
c001a1e9:	89 c2                	mov    edx,eax
c001a1eb:	89 f8                	mov    eax,edi
c001a1ed:	66 ef                	out    dx,ax
c001a1ef:	45                   	inc    ebp
c001a1f0:	83 c4 10             	add    esp,0x10
c001a1f3:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a1f9:	75 d1                	jne    c001a1cc <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a1fb:	eb 23                	jmp    c001a220 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a1fd:	0f b6 d2             	movzx  edx,dl
c001a200:	51                   	push   ecx
c001a201:	51                   	push   ecx
c001a202:	52                   	push   edx
c001a203:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a209:	e8 ac ed ff ff       	call   c0018fba <IDE::getBase(unsigned char)>
c001a20e:	b9 00 01 00 00       	mov    ecx,0x100
c001a213:	89 c2                	mov    edx,eax
c001a215:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a219:	fc                   	cld    
c001a21a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a21d:	83 c4 10             	add    esp,0x10
c001a220:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a228:	4e                   	dec    esi
c001a229:	e9 4a ff ff ff       	jmp    c001a178 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a22e:	31 ff                	xor    edi,edi
c001a230:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a235:	74 16                	je     c001a24d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a237:	50                   	push   eax
c001a238:	50                   	push   eax
c001a239:	31 c0                	xor    eax,eax
c001a23b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a240:	0f 94 c0             	sete   al
c001a243:	50                   	push   eax
c001a244:	53                   	push   ebx
c001a245:	e8 fc fb ff ff       	call   c0019e46 <ATA::flush(bool)>
c001a24a:	83 c4 10             	add    esp,0x10
c001a24d:	83 c4 2c             	add    esp,0x2c
c001a250:	89 f8                	mov    eax,edi
c001a252:	5b                   	pop    ebx
c001a253:	5e                   	pop    esi
c001a254:	5f                   	pop    edi
c001a255:	5d                   	pop    ebp
c001a256:	c3                   	ret    
c001a257:	90                   	nop

c001a258 <ATA::read(unsigned long long, int, void*)>:
c001a258:	57                   	push   edi
c001a259:	b8 04 00 00 00       	mov    eax,0x4
c001a25e:	56                   	push   esi
c001a25f:	53                   	push   ebx
c001a260:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a264:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a268:	8d 7a ff             	lea    edi,[edx-0x1]
c001a26b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a26f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a273:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a279:	77 25                	ja     c001a2a0 <ATA::read(unsigned long long, int, void*)+0x48>
c001a27b:	b8 06 00 00 00       	mov    eax,0x6
c001a280:	85 f6                	test   esi,esi
c001a282:	74 1c                	je     c001a2a0 <ATA::read(unsigned long long, int, void*)+0x48>
c001a284:	50                   	push   eax
c001a285:	50                   	push   eax
c001a286:	6a 00                	push   0x0
c001a288:	56                   	push   esi
c001a289:	52                   	push   edx
c001a28a:	53                   	push   ebx
c001a28b:	51                   	push   ecx
c001a28c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a290:	e8 47 fc ff ff       	call   c0019edc <ATA::access(unsigned long long, int, void*, bool)>
c001a295:	83 c4 20             	add    esp,0x20
c001a298:	85 c0                	test   eax,eax
c001a29a:	0f 95 c0             	setne  al
c001a29d:	0f b6 c0             	movzx  eax,al
c001a2a0:	5b                   	pop    ebx
c001a2a1:	5e                   	pop    esi
c001a2a2:	5f                   	pop    edi
c001a2a3:	c3                   	ret    

c001a2a4 <ATA::write(unsigned long long, int, void*)>:
c001a2a4:	57                   	push   edi
c001a2a5:	b8 04 00 00 00       	mov    eax,0x4
c001a2aa:	56                   	push   esi
c001a2ab:	53                   	push   ebx
c001a2ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a2b4:	8d 7a ff             	lea    edi,[edx-0x1]
c001a2b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a2bb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a2bf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a2c5:	77 25                	ja     c001a2ec <ATA::write(unsigned long long, int, void*)+0x48>
c001a2c7:	b8 06 00 00 00       	mov    eax,0x6
c001a2cc:	85 f6                	test   esi,esi
c001a2ce:	74 1c                	je     c001a2ec <ATA::write(unsigned long long, int, void*)+0x48>
c001a2d0:	50                   	push   eax
c001a2d1:	50                   	push   eax
c001a2d2:	6a 01                	push   0x1
c001a2d4:	56                   	push   esi
c001a2d5:	52                   	push   edx
c001a2d6:	53                   	push   ebx
c001a2d7:	51                   	push   ecx
c001a2d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2dc:	e8 fb fb ff ff       	call   c0019edc <ATA::access(unsigned long long, int, void*, bool)>
c001a2e1:	83 c4 20             	add    esp,0x20
c001a2e4:	85 c0                	test   eax,eax
c001a2e6:	0f 95 c0             	setne  al
c001a2e9:	0f b6 c0             	movzx  eax,al
c001a2ec:	5b                   	pop    ebx
c001a2ed:	5e                   	pop    esi
c001a2ee:	5f                   	pop    edi
c001a2ef:	c3                   	ret    

c001a2f0 <ATA::detectCHS()>:
c001a2f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a2f4:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a2fa:	c1 e0 06             	shl    eax,0x6
c001a2fd:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a303:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a30d:	c7 44 24 04 d8 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f3d8
c001a315:	e9 b1 5e ff ff       	jmp    c00101cb <KePanic(char const*)>

c001a31a <ATA::open(int, int, void*)>:
c001a31a:	53                   	push   ebx
c001a31b:	83 ec 08             	sub    esp,0x8
c001a31e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a326:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a32a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a330:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a336:	c1 e0 06             	shl    eax,0x6
c001a339:	01 d0                	add    eax,edx
c001a33b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a342:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a348:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a34f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a359:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a35f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a366:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a36d:	75 0c                	jne    c001a37b <ATA::open(int, int, void*)+0x61>
c001a36f:	83 ec 0c             	sub    esp,0xc
c001a372:	53                   	push   ebx
c001a373:	e8 78 ff ff ff       	call   c001a2f0 <ATA::detectCHS()>
c001a378:	83 c4 10             	add    esp,0x10
c001a37b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a381:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a387:	c1 e0 06             	shl    eax,0x6
c001a38a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a391:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a39b:	d1 e8                	shr    eax,1
c001a39d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a3a3:	6a 04                	push   0x4
c001a3a5:	6a 0c                	push   0xc
c001a3a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3ae:	50                   	push   eax
c001a3af:	52                   	push   edx
c001a3b0:	e8 17 ec ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3b5:	90                   	nop
c001a3b6:	90                   	nop
c001a3b7:	6a 00                	push   0x0
c001a3b9:	6a 0c                	push   0xc
c001a3bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3c2:	50                   	push   eax
c001a3c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a3c9:	e8 fe eb ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3ce:	83 c4 14             	add    esp,0x14
c001a3d1:	53                   	push   ebx
c001a3d2:	e8 e7 19 ff ff       	call   c000bdbe <PhysicalDisk::startCache()>
c001a3d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3da:	e8 97 2a ff ff       	call   c000ce76 <createPartitionsForDisk(PhysicalDisk*)>
c001a3df:	31 c0                	xor    eax,eax
c001a3e1:	83 c4 18             	add    esp,0x18
c001a3e4:	5b                   	pop    ebx
c001a3e5:	c3                   	ret    

c001a3e6 <ATAPI::write(unsigned long long, int, void*)>:
c001a3e6:	b8 03 00 00 00       	mov    eax,0x3
c001a3eb:	c3                   	ret    

c001a3ec <ATAPI::close(int, int, void*)>:
c001a3ec:	83 ec 0c             	sub    esp,0xc
c001a3ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a3f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a3f9:	85 c0                	test   eax,eax
c001a3fb:	74 0c                	je     c001a409 <ATAPI::close(int, int, void*)+0x1d>
c001a3fd:	83 ec 0c             	sub    esp,0xc
c001a400:	8b 10                	mov    edx,DWORD PTR [eax]
c001a402:	50                   	push   eax
c001a403:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a406:	83 c4 10             	add    esp,0x10
c001a409:	31 c0                	xor    eax,eax
c001a40b:	83 c4 0c             	add    esp,0xc
c001a40e:	c3                   	ret    
c001a40f:	90                   	nop

c001a410 <ATAPI::ATAPI()>:
c001a410:	83 ec 0c             	sub    esp,0xc
c001a413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a417:	83 ec 04             	sub    esp,0x4
c001a41a:	68 00 08 00 00       	push   0x800
c001a41f:	68 21 f5 01 c0       	push   0xc001f521
c001a424:	50                   	push   eax
c001a425:	e8 2c 19 ff ff       	call   c000bd56 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a42a:	83 c4 10             	add    esp,0x10
c001a42d:	ba 3c f4 01 c0       	mov    edx,0xc001f43c
c001a432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a436:	89 10                	mov    DWORD PTR [eax],edx
c001a438:	90                   	nop
c001a439:	83 c4 0c             	add    esp,0xc
c001a43c:	c3                   	ret    
c001a43d:	90                   	nop

c001a43e <ATAPI::readyForCommand()>:
c001a43e:	56                   	push   esi
c001a43f:	53                   	push   ebx
c001a440:	53                   	push   ebx
c001a441:	31 db                	xor    ebx,ebx
c001a443:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a447:	51                   	push   ecx
c001a448:	6a 0c                	push   0xc
c001a44a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a451:	50                   	push   eax
c001a452:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a458:	e8 2f ec ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c001a45d:	83 c4 10             	add    esp,0x10
c001a460:	a8 88                	test   al,0x88
c001a462:	74 25                	je     c001a489 <ATAPI::readyForCommand()+0x4b>
c001a464:	43                   	inc    ebx
c001a465:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a46b:	7e da                	jle    c001a447 <ATAPI::readyForCommand()+0x9>
c001a46d:	83 ec 0c             	sub    esp,0xc
c001a470:	68 5e 01 00 00       	push   0x15e
c001a475:	e8 26 96 ff ff       	call   c0013aa0 <milliTenthSleep(unsigned int)>
c001a47a:	83 c4 10             	add    esp,0x10
c001a47d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a483:	75 c2                	jne    c001a447 <ATAPI::readyForCommand()+0x9>
c001a485:	31 c0                	xor    eax,eax
c001a487:	eb 02                	jmp    c001a48b <ATAPI::readyForCommand()+0x4d>
c001a489:	b0 01                	mov    al,0x1
c001a48b:	5a                   	pop    edx
c001a48c:	5b                   	pop    ebx
c001a48d:	5e                   	pop    esi
c001a48e:	c3                   	ret    
c001a48f:	90                   	nop

c001a490 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a490:	55                   	push   ebp
c001a491:	57                   	push   edi
c001a492:	56                   	push   esi
c001a493:	53                   	push   ebx
c001a494:	83 ec 20             	sub    esp,0x20
c001a497:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a49b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a49f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a4a3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a4a7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a4ab:	6a 01                	push   0x1
c001a4ad:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4b4:	50                   	push   eax
c001a4b5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4bb:	e8 1a ed ff ff       	call   c00191da <IDE::enableIRQs(unsigned char, bool)>
c001a4c0:	5e                   	pop    esi
c001a4c1:	58                   	pop    eax
c001a4c2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4c9:	50                   	push   eax
c001a4ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4d0:	e8 d1 ea ff ff       	call   c0018fa6 <IDE::prepareInterrupt(unsigned char)>
c001a4d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a4d8:	e8 61 ff ff ff       	call   c001a43e <ATAPI::readyForCommand()>
c001a4dd:	83 c4 10             	add    esp,0x10
c001a4e0:	84 c0                	test   al,al
c001a4e2:	75 0a                	jne    c001a4ee <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a4e4:	bb 01 00 00 00       	mov    ebx,0x1
c001a4e9:	e9 57 02 00 00       	jmp    c001a745 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a4ee:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a4f4:	c1 e0 04             	shl    eax,0x4
c001a4f7:	0f b6 c0             	movzx  eax,al
c001a4fa:	50                   	push   eax
c001a4fb:	6a 06                	push   0x6
c001a4fd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a504:	50                   	push   eax
c001a505:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a50b:	e8 bc ea ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a510:	6a 00                	push   0x0
c001a512:	6a 01                	push   0x1
c001a514:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a51b:	50                   	push   eax
c001a51c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a522:	e8 a5 ea ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a527:	83 c4 20             	add    esp,0x20
c001a52a:	0f b6 c3             	movzx  eax,bl
c001a52d:	0f b6 df             	movzx  ebx,bh
c001a530:	50                   	push   eax
c001a531:	6a 04                	push   0x4
c001a533:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a53a:	50                   	push   eax
c001a53b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a541:	e8 86 ea ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a546:	53                   	push   ebx
c001a547:	6a 05                	push   0x5
c001a549:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a550:	50                   	push   eax
c001a551:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a557:	e8 70 ea ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a55c:	83 c4 20             	add    esp,0x20
c001a55f:	68 a0 00 00 00       	push   0xa0
c001a564:	6a 07                	push   0x7
c001a566:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a56d:	50                   	push   eax
c001a56e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a574:	e8 53 ea ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a579:	83 c4 0c             	add    esp,0xc
c001a57c:	6a 01                	push   0x1
c001a57e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a585:	50                   	push   eax
c001a586:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a58c:	e8 d9 f4 ff ff       	call   c0019a6a <IDE::polling(unsigned char, unsigned int)>
c001a591:	83 c4 10             	add    esp,0x10
c001a594:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a59a:	84 c0                	test   al,al
c001a59c:	74 23                	je     c001a5c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a59e:	0f b6 d8             	movzx  ebx,al
c001a5a1:	0f b6 d2             	movzx  edx,dl
c001a5a4:	53                   	push   ebx
c001a5a5:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a5ac:	50                   	push   eax
c001a5ad:	52                   	push   edx
c001a5ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5b4:	e8 01 f4 ff ff       	call   c00199ba <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a5b9:	83 c4 10             	add    esp,0x10
c001a5bc:	e9 84 01 00 00       	jmp    c001a745 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a5c1:	0f b6 d2             	movzx  edx,dl
c001a5c4:	53                   	push   ebx
c001a5c5:	53                   	push   ebx
c001a5c6:	52                   	push   edx
c001a5c7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5cd:	e8 e8 e9 ff ff       	call   c0018fba <IDE::getBase(unsigned char)>
c001a5d2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a5d6:	b9 06 00 00 00       	mov    ecx,0x6
c001a5db:	89 c2                	mov    edx,eax
c001a5dd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a5e0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a5e4:	83 c4 10             	add    esp,0x10
c001a5e7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a5ed:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a5f4:	85 db                	test   ebx,ebx
c001a5f6:	0f 84 ec 00 00 00    	je     c001a6e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a5fc:	51                   	push   ecx
c001a5fd:	51                   	push   ecx
c001a5fe:	52                   	push   edx
c001a5ff:	50                   	push   eax
c001a600:	e8 35 eb ff ff       	call   c001913a <IDE::waitInterrupt(unsigned char)>
c001a605:	83 c4 10             	add    esp,0x10
c001a608:	84 c0                	test   al,al
c001a60a:	0f 84 d4 fe ff ff    	je     c001a4e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a610:	56                   	push   esi
c001a611:	56                   	push   esi
c001a612:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a619:	50                   	push   eax
c001a61a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a620:	e8 81 e9 ff ff       	call   c0018fa6 <IDE::prepareInterrupt(unsigned char)>
c001a625:	83 c4 0c             	add    esp,0xc
c001a628:	6a 04                	push   0x4
c001a62a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a631:	50                   	push   eax
c001a632:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a638:	e8 4f ea ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c001a63d:	83 c4 0c             	add    esp,0xc
c001a640:	89 c6                	mov    esi,eax
c001a642:	6a 05                	push   0x5
c001a644:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a64b:	50                   	push   eax
c001a64c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a652:	e8 35 ea ff ff       	call   c001908c <IDE::read(unsigned char, unsigned char)>
c001a657:	89 f1                	mov    ecx,esi
c001a659:	0f b6 c0             	movzx  eax,al
c001a65c:	0f b6 f1             	movzx  esi,cl
c001a65f:	c1 e0 08             	shl    eax,0x8
c001a662:	09 c6                	or     esi,eax
c001a664:	d1 fe                	sar    esi,1
c001a666:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a66a:	83 c4 10             	add    esp,0x10
c001a66d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a672:	74 41                	je     c001a6b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a674:	31 c9                	xor    ecx,ecx
c001a676:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a67c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a683:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a687:	75 0a                	jne    c001a693 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a689:	01 c9                	add    ecx,ecx
c001a68b:	01 cd                	add    ebp,ecx
c001a68d:	4b                   	dec    ebx
c001a68e:	e9 54 ff ff ff       	jmp    c001a5e7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a693:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a698:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a69c:	51                   	push   ecx
c001a69d:	51                   	push   ecx
c001a69e:	52                   	push   edx
c001a69f:	50                   	push   eax
c001a6a0:	e8 15 e9 ff ff       	call   c0018fba <IDE::getBase(unsigned char)>
c001a6a5:	89 c2                	mov    edx,eax
c001a6a7:	89 f0                	mov    eax,esi
c001a6a9:	66 ef                	out    dx,ax
c001a6ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a6af:	83 c4 10             	add    esp,0x10
c001a6b2:	41                   	inc    ecx
c001a6b3:	eb c1                	jmp    c001a676 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a6b5:	31 f6                	xor    esi,esi
c001a6b7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a6bd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a6c4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a6c8:	75 06                	jne    c001a6d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a6ca:	01 f6                	add    esi,esi
c001a6cc:	01 f5                	add    ebp,esi
c001a6ce:	eb bd                	jmp    c001a68d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a6d0:	51                   	push   ecx
c001a6d1:	51                   	push   ecx
c001a6d2:	52                   	push   edx
c001a6d3:	50                   	push   eax
c001a6d4:	e8 e1 e8 ff ff       	call   c0018fba <IDE::getBase(unsigned char)>
c001a6d9:	89 c2                	mov    edx,eax
c001a6db:	66 ed                	in     ax,dx
c001a6dd:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a6e2:	83 c4 10             	add    esp,0x10
c001a6e5:	46                   	inc    esi
c001a6e6:	eb cf                	jmp    c001a6b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a6e8:	51                   	push   ecx
c001a6e9:	51                   	push   ecx
c001a6ea:	52                   	push   edx
c001a6eb:	50                   	push   eax
c001a6ec:	e8 49 ea ff ff       	call   c001913a <IDE::waitInterrupt(unsigned char)>
c001a6f1:	83 c4 10             	add    esp,0x10
c001a6f4:	84 c0                	test   al,al
c001a6f6:	0f 84 e8 fd ff ff    	je     c001a4e4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a6fc:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a701:	52                   	push   edx
c001a702:	52                   	push   edx
c001a703:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a70a:	50                   	push   eax
c001a70b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a711:	e8 90 e8 ff ff       	call   c0018fa6 <IDE::prepareInterrupt(unsigned char)>
c001a716:	83 c4 10             	add    esp,0x10
c001a719:	50                   	push   eax
c001a71a:	50                   	push   eax
c001a71b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a722:	50                   	push   eax
c001a723:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a729:	e8 8c e8 ff ff       	call   c0018fba <IDE::getBase(unsigned char)>
c001a72e:	8d 50 07             	lea    edx,[eax+0x7]
c001a731:	ec                   	in     al,dx
c001a732:	83 c4 10             	add    esp,0x10
c001a735:	a8 88                	test   al,0x88
c001a737:	74 0a                	je     c001a743 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a739:	4b                   	dec    ebx
c001a73a:	75 dd                	jne    c001a719 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a73c:	bb 02 00 00 00       	mov    ebx,0x2
c001a741:	eb 02                	jmp    c001a745 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a743:	31 db                	xor    ebx,ebx
c001a745:	83 c4 1c             	add    esp,0x1c
c001a748:	89 d8                	mov    eax,ebx
c001a74a:	5b                   	pop    ebx
c001a74b:	5e                   	pop    esi
c001a74c:	5f                   	pop    edi
c001a74d:	5d                   	pop    ebp
c001a74e:	c3                   	ret    
c001a74f:	90                   	nop

c001a750 <ATAPI::diskRemoved()>:
c001a750:	53                   	push   ebx
c001a751:	83 ec 14             	sub    esp,0x14
c001a754:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a758:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a75f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a765:	e8 8c 24 ff ff       	call   c000cbf6 <LogicalDisk::unmount()>
c001a76a:	58                   	pop    eax
c001a76b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a771:	e8 c6 2d ff ff       	call   c000d53c <VCache::writeWriteBuffer()>
c001a776:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a77c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a780:	83 c4 18             	add    esp,0x18
c001a783:	5b                   	pop    ebx
c001a784:	e9 a3 2d ff ff       	jmp    c000d52c <VCache::invalidateReadBuffer()>
c001a789:	90                   	nop

c001a78a <ATAPI::eject()>:
c001a78a:	57                   	push   edi
c001a78b:	b9 03 00 00 00       	mov    ecx,0x3
c001a790:	53                   	push   ebx
c001a791:	83 ec 14             	sub    esp,0x14
c001a794:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a798:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a79c:	fc                   	cld    
c001a79d:	31 c0                	xor    eax,eax
c001a79f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a7a1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a7a6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a7ab:	50                   	push   eax
c001a7ac:	50                   	push   eax
c001a7ad:	6a 00                	push   0x0
c001a7af:	6a 00                	push   0x0
c001a7b1:	6a 00                	push   0x0
c001a7b3:	6a 02                	push   0x2
c001a7b5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a7b9:	50                   	push   eax
c001a7ba:	53                   	push   ebx
c001a7bb:	e8 d0 fc ff ff       	call   c001a490 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a7c0:	83 c4 14             	add    esp,0x14
c001a7c3:	53                   	push   ebx
c001a7c4:	e8 87 ff ff ff       	call   c001a750 <ATAPI::diskRemoved()>
c001a7c9:	83 c4 24             	add    esp,0x24
c001a7cc:	31 c0                	xor    eax,eax
c001a7ce:	5b                   	pop    ebx
c001a7cf:	5f                   	pop    edi
c001a7d0:	c3                   	ret    
c001a7d1:	90                   	nop

c001a7d2 <ATAPI::diskInserted()>:
c001a7d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7d6:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a7dd:	c3                   	ret    

c001a7de <ATAPI::detectMedia()>:
c001a7de:	56                   	push   esi
c001a7df:	53                   	push   ebx
c001a7e0:	83 ec 28             	sub    esp,0x28
c001a7e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a7e7:	6a 0c                	push   0xc
c001a7e9:	6a 00                	push   0x0
c001a7eb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a7ef:	56                   	push   esi
c001a7f0:	e8 db 5c fe ff       	call   c00004d0 <memset>
c001a7f5:	58                   	pop    eax
c001a7f6:	5a                   	pop    edx
c001a7f7:	6a 00                	push   0x0
c001a7f9:	6a 00                	push   0x0
c001a7fb:	6a 00                	push   0x0
c001a7fd:	6a 00                	push   0x0
c001a7ff:	56                   	push   esi
c001a800:	53                   	push   ebx
c001a801:	e8 8a fc ff ff       	call   c001a490 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a806:	83 c4 1c             	add    esp,0x1c
c001a809:	6a 0c                	push   0xc
c001a80b:	6a 00                	push   0x0
c001a80d:	56                   	push   esi
c001a80e:	e8 bd 5c fe ff       	call   c00004d0 <memset>
c001a813:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a818:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a81d:	59                   	pop    ecx
c001a81e:	58                   	pop    eax
c001a81f:	6a 01                	push   0x1
c001a821:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a825:	50                   	push   eax
c001a826:	6a 00                	push   0x0
c001a828:	6a 12                	push   0x12
c001a82a:	56                   	push   esi
c001a82b:	53                   	push   ebx
c001a82c:	e8 5f fc ff ff       	call   c001a490 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a831:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a835:	83 c4 20             	add    esp,0x20
c001a838:	83 e0 7f             	and    eax,0x7f
c001a83b:	3c 70                	cmp    al,0x70
c001a83d:	74 15                	je     c001a854 <ATAPI::detectMedia()+0x76>
c001a83f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a846:	75 0c                	jne    c001a854 <ATAPI::detectMedia()+0x76>
c001a848:	83 ec 0c             	sub    esp,0xc
c001a84b:	53                   	push   ebx
c001a84c:	e8 81 ff ff ff       	call   c001a7d2 <ATAPI::diskInserted()>
c001a851:	83 c4 10             	add    esp,0x10
c001a854:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a858:	83 e0 0f             	and    eax,0xf
c001a85b:	3c 02                	cmp    al,0x2
c001a85d:	75 1b                	jne    c001a87a <ATAPI::detectMedia()+0x9c>
c001a85f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a864:	75 2d                	jne    c001a893 <ATAPI::detectMedia()+0xb5>
c001a866:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a86d:	74 24                	je     c001a893 <ATAPI::detectMedia()+0xb5>
c001a86f:	83 ec 0c             	sub    esp,0xc
c001a872:	53                   	push   ebx
c001a873:	e8 d8 fe ff ff       	call   c001a750 <ATAPI::diskRemoved()>
c001a878:	eb 16                	jmp    c001a890 <ATAPI::detectMedia()+0xb2>
c001a87a:	84 c0                	test   al,al
c001a87c:	75 15                	jne    c001a893 <ATAPI::detectMedia()+0xb5>
c001a87e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a885:	75 0c                	jne    c001a893 <ATAPI::detectMedia()+0xb5>
c001a887:	83 ec 0c             	sub    esp,0xc
c001a88a:	53                   	push   ebx
c001a88b:	e8 42 ff ff ff       	call   c001a7d2 <ATAPI::diskInserted()>
c001a890:	83 c4 10             	add    esp,0x10
c001a893:	83 c4 24             	add    esp,0x24
c001a896:	5b                   	pop    ebx
c001a897:	5e                   	pop    esi
c001a898:	c3                   	ret    
c001a899:	90                   	nop

c001a89a <ATAPI::open(int, int, void*)>:
c001a89a:	56                   	push   esi
c001a89b:	53                   	push   ebx
c001a89c:	50                   	push   eax
c001a89d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a8a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a8a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a8a9:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a8af:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a8b5:	c1 e0 06             	shl    eax,0x6
c001a8b8:	01 d0                	add    eax,edx
c001a8ba:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a8c1:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a8c7:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a8ce:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a8d8:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a8de:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a8e5:	6a 04                	push   0x4
c001a8e7:	6a 0c                	push   0xc
c001a8e9:	51                   	push   ecx
c001a8ea:	52                   	push   edx
c001a8eb:	e8 dc e6 ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a8f0:	90                   	nop
c001a8f1:	90                   	nop
c001a8f2:	6a 00                	push   0x0
c001a8f4:	6a 0c                	push   0xc
c001a8f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a8fd:	50                   	push   eax
c001a8fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a904:	e8 c3 e6 ff ff       	call   c0018fcc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a909:	83 c4 14             	add    esp,0x14
c001a90c:	68 74 01 00 00       	push   0x174
c001a911:	e8 a3 ce fe ff       	call   c00077b9 <malloc>
c001a916:	83 c4 0c             	add    esp,0xc
c001a919:	89 c6                	mov    esi,eax
c001a91b:	6a 00                	push   0x0
c001a91d:	68 ff ff ff 7f       	push   0x7fffffff
c001a922:	6a 00                	push   0x0
c001a924:	6a 00                	push   0x0
c001a926:	53                   	push   ebx
c001a927:	68 d8 f5 01 c0       	push   0xc001f5d8
c001a92c:	50                   	push   eax
c001a92d:	e8 10 21 ff ff       	call   c000ca42 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a932:	83 c4 14             	add    esp,0x14
c001a935:	56                   	push   esi
c001a936:	e8 bd 21 ff ff       	call   c000caf8 <LogicalDisk::assignDriveLetter()>
c001a93b:	5a                   	pop    edx
c001a93c:	0f be c0             	movsx  eax,al
c001a93f:	59                   	pop    ecx
c001a940:	50                   	push   eax
c001a941:	68 24 f4 01 c0       	push   0xc001f424
c001a946:	e8 ff fb fe ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c001a94b:	58                   	pop    eax
c001a94c:	5a                   	pop    edx
c001a94d:	56                   	push   esi
c001a94e:	53                   	push   ebx
c001a94f:	e8 34 10 ff ff       	call   c000b988 <Device::addChild(Device*)>
c001a954:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a95a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a95d:	e8 5c 14 ff ff       	call   c000bdbe <PhysicalDisk::startCache()>
c001a962:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a969:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a96c:	e8 6d fe ff ff       	call   c001a7de <ATAPI::detectMedia()>
c001a971:	83 c4 14             	add    esp,0x14
c001a974:	31 c0                	xor    eax,eax
c001a976:	5b                   	pop    ebx
c001a977:	5e                   	pop    esi
c001a978:	c3                   	ret    
c001a979:	90                   	nop

c001a97a <ATAPI::read(unsigned long long, int, void*)>:
c001a97a:	55                   	push   ebp
c001a97b:	57                   	push   edi
c001a97c:	56                   	push   esi
c001a97d:	53                   	push   ebx
c001a97e:	83 ec 1c             	sub    esp,0x1c
c001a981:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a985:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a989:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a98d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a994:	74 3c                	je     c001a9d2 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a996:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a99a:	b9 03 00 00 00       	mov    ecx,0x3
c001a99f:	fc                   	cld    
c001a9a0:	31 c0                	xor    eax,eax
c001a9a2:	0f ce                	bswap  esi
c001a9a4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a9a6:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a9ab:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a9af:	89 e8                	mov    eax,ebp
c001a9b1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a9b5:	50                   	push   eax
c001a9b6:	50                   	push   eax
c001a9b7:	55                   	push   ebp
c001a9b8:	c1 e5 0b             	shl    ebp,0xb
c001a9bb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a9bf:	6a 00                	push   0x0
c001a9c1:	55                   	push   ebp
c001a9c2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a9c6:	50                   	push   eax
c001a9c7:	53                   	push   ebx
c001a9c8:	e8 c3 fa ff ff       	call   c001a490 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a9cd:	83 c4 20             	add    esp,0x20
c001a9d0:	eb 1a                	jmp    c001a9ec <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a9d2:	83 ec 0c             	sub    esp,0xc
c001a9d5:	53                   	push   ebx
c001a9d6:	e8 03 fe ff ff       	call   c001a7de <ATAPI::detectMedia()>
c001a9db:	83 c4 10             	add    esp,0x10
c001a9de:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9e5:	75 af                	jne    c001a996 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a9e7:	b8 02 00 00 00       	mov    eax,0x2
c001a9ec:	83 c4 1c             	add    esp,0x1c
c001a9ef:	5b                   	pop    ebx
c001a9f0:	5e                   	pop    esi
c001a9f1:	5f                   	pop    edi
c001a9f2:	5d                   	pop    ebp
c001a9f3:	c3                   	ret    

c001a9f4 <SATA::close(int, int, void*)>:
c001a9f4:	83 ec 0c             	sub    esp,0xc
c001a9f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9fb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aa01:	85 c0                	test   eax,eax
c001aa03:	74 0c                	je     c001aa11 <SATA::close(int, int, void*)+0x1d>
c001aa05:	83 ec 0c             	sub    esp,0xc
c001aa08:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa0a:	50                   	push   eax
c001aa0b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aa0e:	83 c4 10             	add    esp,0x10
c001aa11:	31 c0                	xor    eax,eax
c001aa13:	83 c4 0c             	add    esp,0xc
c001aa16:	c3                   	ret    
c001aa17:	90                   	nop

c001aa18 <SATA::powerSaving(PowerSavingLevel)>:
c001aa18:	c3                   	ret    
c001aa19:	90                   	nop

c001aa1a <SATA::open(int, int, void*)>:
c001aa1a:	56                   	push   esi
c001aa1b:	53                   	push   ebx
c001aa1c:	50                   	push   eax
c001aa1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa25:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001aa2f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aa35:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aa3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa43:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001aa4d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001aa53:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001aa5a:	e8 36 d0 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aa5f:	89 c6                	mov    esi,eax
c001aa61:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aa67:	81 c6 00 10 00 00    	add    esi,0x1000
c001aa6d:	e8 23 d0 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001aa72:	39 c6                	cmp    esi,eax
c001aa74:	74 10                	je     c001aa86 <SATA::open(int, int, void*)+0x6c>
c001aa76:	83 ec 0c             	sub    esp,0xc
c001aa79:	68 6c f4 01 c0       	push   0xc001f46c
c001aa7e:	e8 48 57 ff ff       	call   c00101cb <KePanic(char const*)>
c001aa83:	83 c4 10             	add    esp,0x10
c001aa86:	83 ec 0c             	sub    esp,0xc
c001aa89:	6a 02                	push   0x2
c001aa8b:	e8 fd e7 fe ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c001aa90:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aa96:	6a 03                	push   0x3
c001aa98:	50                   	push   eax
c001aa99:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001aa9f:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001aaa5:	e8 a6 ee fe ff       	call   c0009950 <VAS::mapPage(unsigned long, unsigned long, int)>
c001aaaa:	83 c4 14             	add    esp,0x14
c001aaad:	53                   	push   ebx
c001aaae:	e8 0b 13 ff ff       	call   c000bdbe <PhysicalDisk::startCache()>
c001aab3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aab6:	e8 bb 23 ff ff       	call   c000ce76 <createPartitionsForDisk(PhysicalDisk*)>
c001aabb:	83 c4 14             	add    esp,0x14
c001aabe:	31 c0                	xor    eax,eax
c001aac0:	5b                   	pop    ebx
c001aac1:	5e                   	pop    esi
c001aac2:	c3                   	ret    
c001aac3:	90                   	nop

c001aac4 <SATA::SATA()>:
c001aac4:	83 ec 0c             	sub    esp,0xc
c001aac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aacb:	83 ec 04             	sub    esp,0x4
c001aace:	68 00 02 00 00       	push   0x200
c001aad3:	68 80 f4 01 c0       	push   0xc001f480
c001aad8:	50                   	push   eax
c001aad9:	e8 78 12 ff ff       	call   c000bd56 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aade:	83 c4 10             	add    esp,0x10
c001aae1:	ba f0 f4 01 c0       	mov    edx,0xc001f4f0
c001aae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaea:	89 10                	mov    DWORD PTR [eax],edx
c001aaec:	90                   	nop
c001aaed:	83 c4 0c             	add    esp,0xc
c001aaf0:	c3                   	ret    
c001aaf1:	90                   	nop

c001aaf2 <SATA::access(unsigned long long, int, void*, bool)>:
c001aaf2:	55                   	push   ebp
c001aaf3:	57                   	push   edi
c001aaf4:	56                   	push   esi
c001aaf5:	53                   	push   ebx
c001aaf6:	83 ec 2c             	sub    esp,0x2c
c001aaf9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001aafd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ab01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab05:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ab09:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ab0d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ab12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab16:	7e 10                	jle    c001ab28 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ab18:	83 ec 0c             	sub    esp,0xc
c001ab1b:	68 90 f4 01 c0       	push   0xc001f490
c001ab20:	e8 a6 56 ff ff       	call   c00101cb <KePanic(char const*)>
c001ab25:	83 c4 10             	add    esp,0x10
c001ab28:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ab2e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ab34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ab3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab3e:	89 d0                	mov    eax,edx
c001ab40:	c1 e0 07             	shl    eax,0x7
c001ab43:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ab47:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ab51:	51                   	push   ecx
c001ab52:	8d 42 02             	lea    eax,[edx+0x2]
c001ab55:	51                   	push   ecx
c001ab56:	c1 e0 07             	shl    eax,0x7
c001ab59:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ab5d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ab61:	50                   	push   eax
c001ab62:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ab68:	e8 e7 ef ff ff       	call   c0019b54 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ab6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab71:	83 c4 10             	add    esp,0x10
c001ab74:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ab79:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab7d:	0f 84 4f 01 00 00    	je     c001acd2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ab83:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ab87:	c1 e0 09             	shl    eax,0x9
c001ab8a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ab8f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ab93:	74 0e                	je     c001aba3 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ab95:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ab9b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ab9f:	89 c1                	mov    ecx,eax
c001aba1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aba3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001aba7:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001abad:	8d 42 02             	lea    eax,[edx+0x2]
c001abb0:	c1 e0 07             	shl    eax,0x7
c001abb3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001abb7:	8b 00                	mov    eax,DWORD PTR [eax]
c001abb9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001abbf:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001abc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001abc9:	c1 e1 05             	shl    ecx,0x5
c001abcc:	01 c8                	add    eax,ecx
c001abce:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001abd2:	83 e1 01             	and    ecx,0x1
c001abd5:	89 ce                	mov    esi,ecx
c001abd7:	8a 08                	mov    cl,BYTE PTR [eax]
c001abd9:	c1 e6 06             	shl    esi,0x6
c001abdc:	83 e1 bf             	and    ecx,0xffffffbf
c001abdf:	09 f1                	or     ecx,esi
c001abe1:	88 08                	mov    BYTE PTR [eax],cl
c001abe3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001abe5:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001abeb:	81 c9 05 00 01 00    	or     ecx,0x10005
c001abf1:	89 08                	mov    DWORD PTR [eax],ecx
c001abf3:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001abf9:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001abff:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ac05:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ac08:	50                   	push   eax
c001ac09:	68 90 00 00 00       	push   0x90
c001ac0e:	6a 00                	push   0x0
c001ac10:	56                   	push   esi
c001ac11:	e8 ba 58 fe ff       	call   c00004d0 <memset>
c001ac16:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ac1c:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ac20:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ac26:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ac2a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac2e:	83 c4 10             	add    esp,0x10
c001ac31:	48                   	dec    eax
c001ac32:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ac37:	89 c1                	mov    ecx,eax
c001ac39:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ac3f:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ac44:	09 c8                	or     eax,ecx
c001ac46:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ac4c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ac4f:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ac56:	66 25 00 7f          	and    ax,0x7f00
c001ac5a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac5e:	66 0d 27 80          	or     ax,0x8027
c001ac62:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ac67:	66 89 06             	mov    WORD PTR [esi],ax
c001ac6a:	19 c0                	sbb    eax,eax
c001ac6c:	83 e0 f0             	and    eax,0xfffffff0
c001ac6f:	83 c0 35             	add    eax,0x35
c001ac72:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ac75:	89 e8                	mov    eax,ebp
c001ac77:	c1 e8 10             	shr    eax,0x10
c001ac7a:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ac7d:	89 e8                	mov    eax,ebp
c001ac7f:	c1 e8 18             	shr    eax,0x18
c001ac82:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ac85:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ac89:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ac8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac90:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ac93:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac97:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ac9b:	89 d6                	mov    esi,edx
c001ac9d:	31 c0                	xor    eax,eax
c001ac9f:	c1 e6 07             	shl    esi,0x7
c001aca2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001aca6:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001acac:	80 e1 88             	and    cl,0x88
c001acaf:	74 0a                	je     c001acbb <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001acb1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001acb6:	74 0a                	je     c001acc2 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001acb8:	40                   	inc    eax
c001acb9:	eb eb                	jmp    c001aca6 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001acbb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001acc0:	75 17                	jne    c001acd9 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001acc2:	83 ec 0c             	sub    esp,0xc
c001acc5:	68 c9 f4 01 c0       	push   0xc001f4c9
c001acca:	e8 7b f8 fe ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c001accf:	83 c4 10             	add    esp,0x10
c001acd2:	b8 01 00 00 00       	mov    eax,0x1
c001acd7:	eb 5d                	jmp    c001ad36 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001acd9:	b8 01 00 00 00       	mov    eax,0x1
c001acde:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ace2:	c1 e2 07             	shl    edx,0x7
c001ace5:	d3 e0                	shl    eax,cl
c001ace7:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001aceb:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001acf1:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001acf7:	85 c8                	test   eax,ecx
c001acf9:	74 16                	je     c001ad11 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001acfb:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ad01:	0f ba e1 1e          	bt     ecx,0x1e
c001ad05:	73 ea                	jae    c001acf1 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ad07:	83 ec 0c             	sub    esp,0xc
c001ad0a:	68 d7 f4 01 c0       	push   0xc001f4d7
c001ad0f:	eb b9                	jmp    c001acca <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ad11:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ad17:	0f ba e0 1e          	bt     eax,0x1e
c001ad1b:	72 b5                	jb     c001acd2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ad1d:	31 c0                	xor    eax,eax
c001ad1f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ad24:	75 10                	jne    c001ad36 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ad26:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ad2c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ad30:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad34:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad36:	83 c4 2c             	add    esp,0x2c
c001ad39:	5b                   	pop    ebx
c001ad3a:	5e                   	pop    esi
c001ad3b:	5f                   	pop    edi
c001ad3c:	5d                   	pop    ebp
c001ad3d:	c3                   	ret    

c001ad3e <SATA::read(unsigned long long, int, void*)>:
c001ad3e:	57                   	push   edi
c001ad3f:	b8 04 00 00 00       	mov    eax,0x4
c001ad44:	56                   	push   esi
c001ad45:	53                   	push   ebx
c001ad46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad4a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad4e:	8d 7a ff             	lea    edi,[edx-0x1]
c001ad51:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ad55:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ad59:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ad5f:	77 25                	ja     c001ad86 <SATA::read(unsigned long long, int, void*)+0x48>
c001ad61:	b8 06 00 00 00       	mov    eax,0x6
c001ad66:	85 f6                	test   esi,esi
c001ad68:	74 1c                	je     c001ad86 <SATA::read(unsigned long long, int, void*)+0x48>
c001ad6a:	50                   	push   eax
c001ad6b:	50                   	push   eax
c001ad6c:	6a 00                	push   0x0
c001ad6e:	56                   	push   esi
c001ad6f:	52                   	push   edx
c001ad70:	53                   	push   ebx
c001ad71:	51                   	push   ecx
c001ad72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad76:	e8 77 fd ff ff       	call   c001aaf2 <SATA::access(unsigned long long, int, void*, bool)>
c001ad7b:	83 c4 20             	add    esp,0x20
c001ad7e:	85 c0                	test   eax,eax
c001ad80:	0f 95 c0             	setne  al
c001ad83:	0f b6 c0             	movzx  eax,al
c001ad86:	5b                   	pop    ebx
c001ad87:	5e                   	pop    esi
c001ad88:	5f                   	pop    edi
c001ad89:	c3                   	ret    

c001ad8a <SATA::write(unsigned long long, int, void*)>:
c001ad8a:	55                   	push   ebp
c001ad8b:	b8 04 00 00 00       	mov    eax,0x4
c001ad90:	57                   	push   edi
c001ad91:	56                   	push   esi
c001ad92:	53                   	push   ebx
c001ad93:	83 ec 0c             	sub    esp,0xc
c001ad96:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ad9a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ad9e:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ada1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ada5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ada9:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001adaf:	77 3d                	ja     c001adee <SATA::write(unsigned long long, int, void*)+0x64>
c001adb1:	b8 06 00 00 00       	mov    eax,0x6
c001adb6:	85 ed                	test   ebp,ebp
c001adb8:	74 34                	je     c001adee <SATA::write(unsigned long long, int, void*)+0x64>
c001adba:	c1 e3 09             	shl    ebx,0x9
c001adbd:	01 eb                	add    ebx,ebp
c001adbf:	89 d6                	mov    esi,edx
c001adc1:	89 cf                	mov    edi,ecx
c001adc3:	83 c6 01             	add    esi,0x1
c001adc6:	83 d7 00             	adc    edi,0x0
c001adc9:	50                   	push   eax
c001adca:	50                   	push   eax
c001adcb:	6a 01                	push   0x1
c001adcd:	55                   	push   ebp
c001adce:	81 c5 00 02 00 00    	add    ebp,0x200
c001add4:	6a 01                	push   0x1
c001add6:	51                   	push   ecx
c001add7:	52                   	push   edx
c001add8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001addc:	e8 11 fd ff ff       	call   c001aaf2 <SATA::access(unsigned long long, int, void*, bool)>
c001ade1:	83 c4 20             	add    esp,0x20
c001ade4:	89 f2                	mov    edx,esi
c001ade6:	89 f9                	mov    ecx,edi
c001ade8:	39 dd                	cmp    ebp,ebx
c001adea:	75 d3                	jne    c001adbf <SATA::write(unsigned long long, int, void*)+0x35>
c001adec:	31 c0                	xor    eax,eax
c001adee:	83 c4 0c             	add    esp,0xc
c001adf1:	5b                   	pop    ebx
c001adf2:	5e                   	pop    esi
c001adf3:	5f                   	pop    edi
c001adf4:	5d                   	pop    ebp
c001adf5:	c3                   	ret    

c001adf6 <SATAPI::write(unsigned long long, int, void*)>:
c001adf6:	b8 03 00 00 00       	mov    eax,0x3
c001adfb:	c3                   	ret    

c001adfc <SATAPI::close(int, int, void*)>:
c001adfc:	83 ec 0c             	sub    esp,0xc
c001adff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae03:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ae09:	85 c0                	test   eax,eax
c001ae0b:	74 0c                	je     c001ae19 <SATAPI::close(int, int, void*)+0x1d>
c001ae0d:	83 ec 0c             	sub    esp,0xc
c001ae10:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae12:	50                   	push   eax
c001ae13:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ae16:	83 c4 10             	add    esp,0x10
c001ae19:	31 c0                	xor    eax,eax
c001ae1b:	83 c4 0c             	add    esp,0xc
c001ae1e:	c3                   	ret    
c001ae1f:	90                   	nop

c001ae20 <SATAPI::SATAPI()>:
c001ae20:	83 ec 0c             	sub    esp,0xc
c001ae23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae27:	83 ec 04             	sub    esp,0x4
c001ae2a:	68 00 08 00 00       	push   0x800
c001ae2f:	68 20 f5 01 c0       	push   0xc001f520
c001ae34:	50                   	push   eax
c001ae35:	e8 1c 0f ff ff       	call   c000bd56 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ae3a:	83 c4 10             	add    esp,0x10
c001ae3d:	ba 28 f6 01 c0       	mov    edx,0xc001f628
c001ae42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae46:	89 10                	mov    DWORD PTR [eax],edx
c001ae48:	90                   	nop
c001ae49:	83 c4 0c             	add    esp,0xc
c001ae4c:	c3                   	ret    
c001ae4d:	90                   	nop

c001ae4e <SATAPI::diskRemoved()>:
c001ae4e:	c3                   	ret    
c001ae4f:	90                   	nop

c001ae50 <SATAPI::diskInserted()>:
c001ae50:	83 ec 18             	sub    esp,0x18
c001ae53:	68 2c f5 01 c0       	push   0xc001f52c
c001ae58:	e8 ed f6 fe ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c001ae5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae61:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ae68:	83 c4 1c             	add    esp,0x1c
c001ae6b:	c3                   	ret    

c001ae6c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ae6c:	55                   	push   ebp
c001ae6d:	57                   	push   edi
c001ae6e:	56                   	push   esi
c001ae6f:	53                   	push   ebx
c001ae70:	83 ec 38             	sub    esp,0x38
c001ae73:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ae77:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001ae7b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ae7f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ae83:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ae87:	68 44 f5 01 c0       	push   0xc001f544
c001ae8c:	e8 b9 f6 fe ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c001ae91:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001ae97:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ae9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aea1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001aea7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aeab:	83 c0 02             	add    eax,0x2
c001aeae:	c1 e0 07             	shl    eax,0x7
c001aeb1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aeb5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aeb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aebd:	c1 e0 07             	shl    eax,0x7
c001aec0:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aec4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aec8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aed2:	58                   	pop    eax
c001aed3:	5a                   	pop    edx
c001aed4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001aed8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001aede:	e8 71 ec ff ff       	call   c0019b54 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001aee3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aee7:	83 c4 10             	add    esp,0x10
c001aeea:	b8 01 00 00 00       	mov    eax,0x1
c001aeef:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001aef4:	0f 84 49 02 00 00    	je     c001b143 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001aefa:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af04:	8b 00                	mov    eax,DWORD PTR [eax]
c001af06:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001af0c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001af12:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af16:	c1 e1 05             	shl    ecx,0x5
c001af19:	01 c8                	add    eax,ecx
c001af1b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001af1d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001af23:	81 c9 25 00 01 00    	or     ecx,0x10025
c001af29:	89 08                	mov    DWORD PTR [eax],ecx
c001af2b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af31:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001af37:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001af3d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001af40:	8d 7b 40             	lea    edi,[ebx+0x40]
c001af43:	50                   	push   eax
c001af44:	68 90 00 00 00       	push   0x90
c001af49:	6a 00                	push   0x0
c001af4b:	53                   	push   ebx
c001af4c:	e8 7f 55 fe ff       	call   c00004d0 <memset>
c001af51:	b9 0c 00 00 00       	mov    ecx,0xc
c001af56:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001af5a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af5c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001af62:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001af66:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001af6c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001af70:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001af74:	48                   	dec    eax
c001af75:	25 ff ff 3f 00       	and    eax,0x3fffff
c001af7a:	89 c1                	mov    ecx,eax
c001af7c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001af82:	25 00 00 c0 ff       	and    eax,0xffc00000
c001af87:	09 c8                	or     eax,ecx
c001af89:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001af8f:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001af92:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001af99:	66 25 00 7f          	and    ax,0x7f00
c001af9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001afa1:	66 0d 27 80          	or     ax,0x8027
c001afa5:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001afa9:	66 89 03             	mov    WORD PTR [ebx],ax
c001afac:	89 d0                	mov    eax,edx
c001afae:	c1 ea 18             	shr    edx,0x18
c001afb1:	c1 e8 10             	shr    eax,0x10
c001afb4:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001afb7:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001afba:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001afbe:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001afc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afc5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001afc8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001afcc:	83 c4 10             	add    esp,0x10
c001afcf:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001afd3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afd7:	31 c0                	xor    eax,eax
c001afd9:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001afdf:	80 e1 88             	and    cl,0x88
c001afe2:	74 0a                	je     c001afee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001afe4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001afe9:	74 0a                	je     c001aff5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001afeb:	40                   	inc    eax
c001afec:	eb eb                	jmp    c001afd9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001afee:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001aff3:	75 43                	jne    c001b038 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001aff5:	83 ec 0c             	sub    esp,0xc
c001aff8:	68 5e f5 01 c0       	push   0xc001f55e
c001affd:	e8 48 f5 fe ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c001b002:	58                   	pop    eax
c001b003:	5a                   	pop    edx
c001b004:	68 73 f5 01 c0       	push   0xc001f573
c001b009:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001b00f:	e8 22 d7 fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001b014:	59                   	pop    ecx
c001b015:	5b                   	pop    ebx
c001b016:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b01a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b020:	e8 c9 eb ff ff       	call   c0019bee <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b025:	5e                   	pop    esi
c001b026:	5f                   	pop    edi
c001b027:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b02b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b031:	e8 98 eb ff ff       	call   c0019bce <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b036:	eb 48                	jmp    c001b080 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001b038:	be 01 00 00 00       	mov    esi,0x1
c001b03d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b041:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b045:	d3 e6                	shl    esi,cl
c001b047:	c1 e7 07             	shl    edi,0x7
c001b04a:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b050:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b055:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b059:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b05f:	85 c6                	test   esi,eax
c001b061:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b067:	0f 84 a3 00 00 00    	je     c001b110 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001b06d:	0f ba e0 1e          	bt     eax,0x1e
c001b071:	73 1a                	jae    c001b08d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001b073:	83 ec 0c             	sub    esp,0xc
c001b076:	68 85 f5 01 c0       	push   0xc001f585
c001b07b:	e8 ca f4 fe ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c001b080:	83 c4 10             	add    esp,0x10
c001b083:	b8 01 00 00 00       	mov    eax,0x1
c001b088:	e9 b6 00 00 00       	jmp    c001b143 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b08d:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b093:	83 f8 0d             	cmp    eax,0xd
c001b096:	77 0a                	ja     c001b0a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001b098:	83 ec 0c             	sub    esp,0xc
c001b09b:	68 c8 00 00 00       	push   0xc8
c001b0a0:	eb 28                	jmp    c001b0ca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b0a2:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b0a8:	83 f8 0d             	cmp    eax,0xd
c001b0ab:	77 0a                	ja     c001b0b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001b0ad:	83 ec 0c             	sub    esp,0xc
c001b0b0:	68 58 02 00 00       	push   0x258
c001b0b5:	eb 13                	jmp    c001b0ca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b0b7:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b0bd:	83 f8 06             	cmp    eax,0x6
c001b0c0:	77 10                	ja     c001b0d2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b0c2:	83 ec 0c             	sub    esp,0xc
c001b0c5:	68 dc 05 00 00       	push   0x5dc
c001b0ca:	e8 d1 89 ff ff       	call   c0013aa0 <milliTenthSleep(unsigned int)>
c001b0cf:	83 c4 10             	add    esp,0x10
c001b0d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b0d6:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b0d9:	75 06                	jne    c001b0e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001b0db:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b0df:	74 15                	je     c001b0f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b0e1:	83 fb 06             	cmp    ebx,0x6
c001b0e4:	77 10                	ja     c001b0f6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b0e6:	83 ec 0c             	sub    esp,0xc
c001b0e9:	68 c4 09 00 00       	push   0x9c4
c001b0ee:	e8 ad 89 ff ff       	call   c0013aa0 <milliTenthSleep(unsigned int)>
c001b0f3:	83 c4 10             	add    esp,0x10
c001b0f6:	43                   	inc    ebx
c001b0f7:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b0fd:	0f 85 56 ff ff ff    	jne    c001b059 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001b103:	83 ec 0c             	sub    esp,0xc
c001b106:	68 98 f5 01 c0       	push   0xc001f598
c001b10b:	e9 6b ff ff ff       	jmp    c001b07b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b110:	0f ba e0 1e          	bt     eax,0x1e
c001b114:	73 0d                	jae    c001b123 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001b116:	83 ec 0c             	sub    esp,0xc
c001b119:	68 ac f5 01 c0       	push   0xc001f5ac
c001b11e:	e9 58 ff ff ff       	jmp    c001b07b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b123:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b128:	74 17                	je     c001b141 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b12a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b12f:	74 10                	je     c001b141 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b131:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b137:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b13b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b13f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b141:	31 c0                	xor    eax,eax
c001b143:	83 c4 2c             	add    esp,0x2c
c001b146:	5b                   	pop    ebx
c001b147:	5e                   	pop    esi
c001b148:	5f                   	pop    edi
c001b149:	5d                   	pop    ebp
c001b14a:	c3                   	ret    
c001b14b:	90                   	nop

c001b14c <SATAPI::eject()>:
c001b14c:	57                   	push   edi
c001b14d:	b9 03 00 00 00       	mov    ecx,0x3
c001b152:	83 ec 18             	sub    esp,0x18
c001b155:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b159:	fc                   	cld    
c001b15a:	31 c0                	xor    eax,eax
c001b15c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b15e:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b163:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b168:	50                   	push   eax
c001b169:	6a 00                	push   0x0
c001b16b:	6a 00                	push   0x0
c001b16d:	6a 00                	push   0x0
c001b16f:	6a 00                	push   0x0
c001b171:	6a 02                	push   0x2
c001b173:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b177:	50                   	push   eax
c001b178:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b17c:	e8 eb fc ff ff       	call   c001ae6c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b181:	31 c0                	xor    eax,eax
c001b183:	83 c4 38             	add    esp,0x38
c001b186:	5f                   	pop    edi
c001b187:	c3                   	ret    

c001b188 <SATAPI::detectMedia()>:
c001b188:	53                   	push   ebx
c001b189:	83 ec 14             	sub    esp,0x14
c001b18c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b190:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b196:	e8 a1 23 ff ff       	call   c000d53c <VCache::writeWriteBuffer()>
c001b19b:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b1a1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b1a5:	83 c4 18             	add    esp,0x18
c001b1a8:	5b                   	pop    ebx
c001b1a9:	e9 7e 23 ff ff       	jmp    c000d52c <VCache::invalidateReadBuffer()>

c001b1ae <SATAPI::open(int, int, void*)>:
c001b1ae:	56                   	push   esi
c001b1af:	53                   	push   ebx
c001b1b0:	51                   	push   ecx
c001b1b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1b9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b1c3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b1c9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b1d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1d7:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b1e1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b1e7:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b1ee:	e8 a2 c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b1f3:	89 c6                	mov    esi,eax
c001b1f5:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b1fb:	81 c6 00 10 00 00    	add    esi,0x1000
c001b201:	e8 8f c8 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b206:	39 c6                	cmp    esi,eax
c001b208:	74 10                	je     c001b21a <SATAPI::open(int, int, void*)+0x6c>
c001b20a:	83 ec 0c             	sub    esp,0xc
c001b20d:	68 c1 f5 01 c0       	push   0xc001f5c1
c001b212:	e8 b4 4f ff ff       	call   c00101cb <KePanic(char const*)>
c001b217:	83 c4 10             	add    esp,0x10
c001b21a:	83 ec 0c             	sub    esp,0xc
c001b21d:	6a 02                	push   0x2
c001b21f:	e8 69 e0 fe ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c001b224:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b22a:	6a 03                	push   0x3
c001b22c:	50                   	push   eax
c001b22d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b233:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001b239:	e8 12 e7 fe ff       	call   c0009950 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b23e:	83 c4 14             	add    esp,0x14
c001b241:	68 74 01 00 00       	push   0x174
c001b246:	e8 6e c5 fe ff       	call   c00077b9 <malloc>
c001b24b:	83 c4 0c             	add    esp,0xc
c001b24e:	89 c6                	mov    esi,eax
c001b250:	6a 00                	push   0x0
c001b252:	68 ff ff ff 7f       	push   0x7fffffff
c001b257:	6a 00                	push   0x0
c001b259:	6a 00                	push   0x0
c001b25b:	53                   	push   ebx
c001b25c:	68 d7 f5 01 c0       	push   0xc001f5d7
c001b261:	50                   	push   eax
c001b262:	e8 db 17 ff ff       	call   c000ca42 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b267:	83 c4 14             	add    esp,0x14
c001b26a:	56                   	push   esi
c001b26b:	e8 88 18 ff ff       	call   c000caf8 <LogicalDisk::assignDriveLetter()>
c001b270:	5a                   	pop    edx
c001b271:	0f be c0             	movsx  eax,al
c001b274:	59                   	pop    ecx
c001b275:	50                   	push   eax
c001b276:	68 24 f4 01 c0       	push   0xc001f424
c001b27b:	e8 ca f2 fe ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c001b280:	58                   	pop    eax
c001b281:	5a                   	pop    edx
c001b282:	56                   	push   esi
c001b283:	53                   	push   ebx
c001b284:	e8 ff 06 ff ff       	call   c000b988 <Device::addChild(Device*)>
c001b289:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b28f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b292:	e8 27 0b ff ff       	call   c000bdbe <PhysicalDisk::startCache()>
c001b297:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b29e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2a1:	e8 e2 fe ff ff       	call   c001b188 <SATAPI::detectMedia()>
c001b2a6:	83 c4 14             	add    esp,0x14
c001b2a9:	31 c0                	xor    eax,eax
c001b2ab:	5b                   	pop    ebx
c001b2ac:	5e                   	pop    esi
c001b2ad:	c3                   	ret    

c001b2ae <SATAPI::read(unsigned long long, int, void*)>:
c001b2ae:	57                   	push   edi
c001b2af:	56                   	push   esi
c001b2b0:	53                   	push   ebx
c001b2b1:	83 ec 3c             	sub    esp,0x3c
c001b2b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b2b8:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b2bc:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b2c0:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b2c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b2c8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b2cc:	68 e5 f5 01 c0       	push   0xc001f5e5
c001b2d1:	e8 74 f2 fe ff       	call   c000a54a <Dbg::kprintf(char const*, ...)>
c001b2d6:	83 c4 10             	add    esp,0x10
c001b2d9:	83 fe 04             	cmp    esi,0x4
c001b2dc:	7e 10                	jle    c001b2ee <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b2de:	83 ec 0c             	sub    esp,0xc
c001b2e1:	68 f6 f5 01 c0       	push   0xc001f5f6
c001b2e6:	e8 e0 4e ff ff       	call   c00101cb <KePanic(char const*)>
c001b2eb:	83 c4 10             	add    esp,0x10
c001b2ee:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b2f4:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b2fa:	51                   	push   ecx
c001b2fb:	50                   	push   eax
c001b2fc:	83 c0 02             	add    eax,0x2
c001b2ff:	c1 e0 07             	shl    eax,0x7
c001b302:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b308:	50                   	push   eax
c001b309:	52                   	push   edx
c001b30a:	e8 09 e9 ff ff       	call   c0019c18 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b30f:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b313:	b9 03 00 00 00       	mov    ecx,0x3
c001b318:	fc                   	cld    
c001b319:	31 c0                	xor    eax,eax
c001b31b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b31d:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b322:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b327:	83 c4 0c             	add    esp,0xc
c001b32a:	6a 00                	push   0x0
c001b32c:	6a 00                	push   0x0
c001b32e:	6a 00                	push   0x0
c001b330:	6a 00                	push   0x0
c001b332:	6a 02                	push   0x2
c001b334:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b338:	50                   	push   eax
c001b339:	53                   	push   ebx
c001b33a:	e8 2d fb ff ff       	call   c001ae6c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b33f:	83 c4 20             	add    esp,0x20
c001b342:	85 c0                	test   eax,eax
c001b344:	75 44                	jne    c001b38a <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001b346:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b34a:	b9 03 00 00 00       	mov    ecx,0x3
c001b34f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b351:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b355:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b35a:	0f c8                	bswap  eax
c001b35c:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b360:	89 f0                	mov    eax,esi
c001b362:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b366:	50                   	push   eax
c001b367:	56                   	push   esi
c001b368:	c1 e6 0b             	shl    esi,0xb
c001b36b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b36f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b373:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b377:	56                   	push   esi
c001b378:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b37c:	50                   	push   eax
c001b37d:	53                   	push   ebx
c001b37e:	e8 e9 fa ff ff       	call   c001ae6c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b383:	83 c4 20             	add    esp,0x20
c001b386:	85 c0                	test   eax,eax
c001b388:	74 14                	je     c001b39e <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001b38a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b38e:	83 ec 0c             	sub    esp,0xc
c001b391:	53                   	push   ebx
c001b392:	e8 f1 fd ff ff       	call   c001b188 <SATAPI::detectMedia()>
c001b397:	83 c4 10             	add    esp,0x10
c001b39a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b39e:	83 c4 30             	add    esp,0x30
c001b3a1:	5b                   	pop    ebx
c001b3a2:	5e                   	pop    esi
c001b3a3:	5f                   	pop    edi
c001b3a4:	c3                   	ret    
c001b3a5:	90                   	nop

c001b3a6 <IOAPIC::close(int, int, void*)>:
c001b3a6:	b8 00 00 00 00       	mov    eax,0x0
c001b3ab:	c3                   	ret    

c001b3ac <apicGetBase()>:
c001b3ac:	55                   	push   ebp
c001b3ad:	89 e5                	mov    ebp,esp
c001b3af:	83 ec 18             	sub    esp,0x18
c001b3b2:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b3b7:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b3bd:	83 e0 08             	and    eax,0x8
c001b3c0:	84 c0                	test   al,al
c001b3c2:	75 07                	jne    c001b3cb <apicGetBase()+0x1f>
c001b3c4:	b8 00 00 00 00       	mov    eax,0x0
c001b3c9:	eb 21                	jmp    c001b3ec <apicGetBase()+0x40>
c001b3cb:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b3d0:	83 ec 08             	sub    esp,0x8
c001b3d3:	6a 1b                	push   0x1b
c001b3d5:	50                   	push   eax
c001b3d6:	e8 17 ba fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001b3db:	83 c4 10             	add    esp,0x10
c001b3de:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b3e1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b3e4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b3e7:	25 00 00 ff ff       	and    eax,0xffff0000
c001b3ec:	c9                   	leave  
c001b3ed:	c3                   	ret    

c001b3ee <IOAPIC::IOAPIC()>:
c001b3ee:	83 ec 0c             	sub    esp,0xc
c001b3f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3f5:	83 ec 08             	sub    esp,0x8
c001b3f8:	68 58 f6 01 c0       	push   0xc001f658
c001b3fd:	50                   	push   eax
c001b3fe:	e8 1d 07 ff ff       	call   c000bb20 <Device::Device(char const*)>
c001b403:	83 c4 10             	add    esp,0x10
c001b406:	ba 68 f6 01 c0       	mov    edx,0xc001f668
c001b40b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b40f:	89 10                	mov    DWORD PTR [eax],edx
c001b411:	90                   	nop
c001b412:	83 c4 0c             	add    esp,0xc
c001b415:	c3                   	ret    

c001b416 <apicOpen()>:
c001b416:	55                   	push   ebp
c001b417:	89 e5                	mov    ebp,esp
c001b419:	53                   	push   ebx
c001b41a:	83 ec 34             	sub    esp,0x34
c001b41d:	a0 a0 5b 02 c0       	mov    al,ds:0xc0025ba0
c001b422:	83 f0 01             	xor    eax,0x1
c001b425:	84 c0                	test   al,al
c001b427:	0f 84 9d 00 00 00    	je     c001b4ca <apicOpen()+0xb4>
c001b42d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b431:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c001b436:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b439:	0f 83 84 00 00 00    	jae    c001b4c3 <apicOpen()+0xad>
c001b43f:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b446:	83 ec 0c             	sub    esp,0xc
c001b449:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b44c:	e8 68 c3 fe ff       	call   c00077b9 <malloc>
c001b451:	83 c4 10             	add    esp,0x10
c001b454:	89 c3                	mov    ebx,eax
c001b456:	83 ec 0c             	sub    esp,0xc
c001b459:	53                   	push   ebx
c001b45a:	e8 8f ff ff ff       	call   c001b3ee <IOAPIC::IOAPIC()>
c001b45f:	83 c4 10             	add    esp,0x10
c001b462:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b465:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b468:	25 ff 00 00 00       	and    eax,0xff
c001b46d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b470:	89 14 85 80 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda480],edx
c001b477:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c001b47c:	40                   	inc    eax
c001b47d:	a3 60 5b 02 c0       	mov    ds:0xc0025b60,eax
c001b482:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b487:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b48d:	83 ec 08             	sub    esp,0x8
c001b490:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b493:	50                   	push   eax
c001b494:	e8 ef 04 ff ff       	call   c000b988 <Device::addChild(Device*)>
c001b499:	83 c4 10             	add    esp,0x10
c001b49c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b49f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4a1:	83 c0 08             	add    eax,0x8
c001b4a4:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4a6:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b4a9:	25 ff 00 00 00       	and    eax,0xff
c001b4ae:	6a 00                	push   0x0
c001b4b0:	6a 00                	push   0x0
c001b4b2:	50                   	push   eax
c001b4b3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b4b6:	ff d2                	call   edx
c001b4b8:	83 c4 10             	add    esp,0x10
c001b4bb:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b4be:	e9 6e ff ff ff       	jmp    c001b431 <apicOpen()+0x1b>
c001b4c3:	c6 05 a0 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025ba0,0x1
c001b4ca:	e8 dd fe ff ff       	call   c001b3ac <apicGetBase()>
c001b4cf:	05 f0 00 00 00       	add    eax,0xf0
c001b4d4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b4d7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b4da:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4dc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b4df:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b4e6:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b4ed:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b4f0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b4f3:	89 10                	mov    DWORD PTR [eax],edx
c001b4f5:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b4fc:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c001b501:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b504:	7d 70                	jge    c001b576 <apicOpen()+0x160>
c001b506:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b509:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b510:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b516:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b51d:	c1 e8 08             	shr    eax,0x8
c001b520:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b524:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b527:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b52e:	c1 e8 18             	shr    eax,0x18
c001b531:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b534:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b538:	75 37                	jne    c001b571 <apicOpen()+0x15b>
c001b53a:	e8 6d fe ff ff       	call   c001b3ac <apicGetBase()>
c001b53f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b543:	75 07                	jne    c001b54c <apicOpen()+0x136>
c001b545:	ba 60 03 00 00       	mov    edx,0x360
c001b54a:	eb 05                	jmp    c001b551 <apicOpen()+0x13b>
c001b54c:	ba 50 03 00 00       	mov    edx,0x350
c001b551:	01 d0                	add    eax,edx
c001b553:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b556:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b559:	8b 00                	mov    eax,DWORD PTR [eax]
c001b55b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b55e:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b565:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b569:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b56c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b56f:	89 10                	mov    DWORD PTR [eax],edx
c001b571:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b574:	eb 86                	jmp    c001b4fc <apicOpen()+0xe6>
c001b576:	90                   	nop
c001b577:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b57a:	c9                   	leave  
c001b57b:	c3                   	ret    

c001b57c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b57c:	55                   	push   ebp
c001b57d:	89 e5                	mov    ebp,esp
c001b57f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b582:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b588:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b58b:	72 1d                	jb     c001b5aa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b58d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b590:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b599:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b59f:	01 d0                	add    eax,edx
c001b5a1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b5a4:	73 04                	jae    c001b5aa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b5a6:	b0 01                	mov    al,0x1
c001b5a8:	eb 02                	jmp    c001b5ac <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b5aa:	b0 00                	mov    al,0x0
c001b5ac:	5d                   	pop    ebp
c001b5ad:	c3                   	ret    

c001b5ae <IOAPIC::read(int)>:
c001b5ae:	55                   	push   ebp
c001b5af:	89 e5                	mov    ebp,esp
c001b5b1:	83 ec 10             	sub    esp,0x10
c001b5b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5b7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b5bd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b5c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b5c3:	31 d2                	xor    edx,edx
c001b5c5:	88 c2                	mov    dl,al
c001b5c7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b5ca:	89 10                	mov    DWORD PTR [eax],edx
c001b5cc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b5cf:	83 c0 10             	add    eax,0x10
c001b5d2:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5d4:	c9                   	leave  
c001b5d5:	c3                   	ret    

c001b5d6 <IOAPIC::open(int, int, void*)>:
c001b5d6:	55                   	push   ebp
c001b5d7:	89 e5                	mov    ebp,esp
c001b5d9:	57                   	push   edi
c001b5da:	56                   	push   esi
c001b5db:	53                   	push   ebx
c001b5dc:	83 ec 04             	sub    esp,0x4
c001b5df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5e2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b5e5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b5eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5ee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b5f4:	8b 14 85 c0 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb840]
c001b5fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5fe:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b604:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b607:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b60d:	8b 14 85 40 48 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb7c0]
c001b614:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b617:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b61d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b620:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b629:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b62f:	89 c6                	mov    esi,eax
c001b631:	81 e6 ff 00 00 00    	and    esi,0xff
c001b637:	89 d0                	mov    eax,edx
c001b639:	ba 00 00 00 00       	mov    edx,0x0
c001b63e:	89 c7                	mov    edi,eax
c001b640:	83 e7 ff             	and    edi,0xffffffff
c001b643:	89 f9                	mov    ecx,edi
c001b645:	89 d0                	mov    eax,edx
c001b647:	25 ff 00 00 00       	and    eax,0xff
c001b64c:	89 c3                	mov    ebx,eax
c001b64e:	89 c8                	mov    eax,ecx
c001b650:	89 da                	mov    edx,ebx
c001b652:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b655:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b658:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b65c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b660:	83 e0 00             	and    eax,0x0
c001b663:	09 d0                	or     eax,edx
c001b665:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b66c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b672:	8d 50 01             	lea    edx,[eax+0x1]
c001b675:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b678:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b67e:	31 d2                	xor    edx,edx
c001b680:	88 c2                	mov    dl,al
c001b682:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b685:	83 c2 08             	add    edx,0x8
c001b688:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b68c:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b692:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b698:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b69c:	6a 01                	push   0x1
c001b69e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b6a1:	e8 08 ff ff ff       	call   c001b5ae <IOAPIC::read(int)>
c001b6a6:	83 c4 08             	add    esp,0x8
c001b6a9:	c1 f8 10             	sar    eax,0x10
c001b6ac:	25 ff 00 00 00       	and    eax,0xff
c001b6b1:	8d 50 01             	lea    edx,[eax+0x1]
c001b6b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6b7:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b6bd:	b8 00 00 00 00       	mov    eax,0x0
c001b6c2:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b6c5:	5b                   	pop    ebx
c001b6c6:	5e                   	pop    esi
c001b6c7:	5f                   	pop    edi
c001b6c8:	5d                   	pop    ebp
c001b6c9:	c3                   	ret    

c001b6ca <IOAPIC::write(int, int)>:
c001b6ca:	55                   	push   ebp
c001b6cb:	89 e5                	mov    ebp,esp
c001b6cd:	83 ec 10             	sub    esp,0x10
c001b6d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6d3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b6d9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b6dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b6df:	31 d2                	xor    edx,edx
c001b6e1:	88 c2                	mov    dl,al
c001b6e3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6e6:	89 10                	mov    DWORD PTR [eax],edx
c001b6e8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b6eb:	8d 50 10             	lea    edx,[eax+0x10]
c001b6ee:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b6f1:	89 02                	mov    DWORD PTR [edx],eax
c001b6f3:	90                   	nop
c001b6f4:	c9                   	leave  
c001b6f5:	c3                   	ret    

c001b6f6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b6f6:	55                   	push   ebp
c001b6f7:	89 e5                	mov    ebp,esp
c001b6f9:	53                   	push   ebx
c001b6fa:	83 ec 2c             	sub    esp,0x2c
c001b6fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b700:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b703:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b706:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b709:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b70c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b70f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b712:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b715:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b718:	88 d8                	mov    al,bl
c001b71a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b71d:	88 c8                	mov    al,cl
c001b71f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b722:	88 d0                	mov    al,dl
c001b724:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b727:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b72a:	25 ff 00 00 00       	and    eax,0xff
c001b72f:	83 c0 08             	add    eax,0x8
c001b732:	01 c0                	add    eax,eax
c001b734:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b737:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b73a:	25 ff 00 00 00       	and    eax,0xff
c001b73f:	83 c0 08             	add    eax,0x8
c001b742:	01 c0                	add    eax,eax
c001b744:	40                   	inc    eax
c001b745:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b748:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b74b:	50                   	push   eax
c001b74c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b74f:	e8 5a fe ff ff       	call   c001b5ae <IOAPIC::read(int)>
c001b754:	83 c4 08             	add    esp,0x8
c001b757:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b75a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b761:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b764:	c1 e0 18             	shl    eax,0x18
c001b767:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b76a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b76d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b770:	52                   	push   edx
c001b771:	50                   	push   eax
c001b772:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b775:	e8 50 ff ff ff       	call   c001b6ca <IOAPIC::write(int, int)>
c001b77a:	83 c4 0c             	add    esp,0xc
c001b77d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b780:	50                   	push   eax
c001b781:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b784:	e8 25 fe ff ff       	call   c001b5ae <IOAPIC::read(int)>
c001b789:	83 c4 08             	add    esp,0x8
c001b78c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b78f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b796:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b79d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b7a4:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b7a8:	74 09                	je     c001b7b3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b7aa:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b7b1:	eb 07                	jmp    c001b7ba <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b7b3:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b7ba:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b7be:	74 09                	je     c001b7c9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b7c0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b7c7:	eb 07                	jmp    c001b7d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b7c9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b7d0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b7d7:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b7da:	25 ff 00 00 00       	and    eax,0xff
c001b7df:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b7e2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b7e5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b7e8:	52                   	push   edx
c001b7e9:	50                   	push   eax
c001b7ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7ed:	e8 d8 fe ff ff       	call   c001b6ca <IOAPIC::write(int, int)>
c001b7f2:	83 c4 0c             	add    esp,0xc
c001b7f5:	90                   	nop
c001b7f6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b7f9:	c9                   	leave  
c001b7fa:	c3                   	ret    
c001b7fb:	90                   	nop

c001b7fc <APICTimer::close(int, int, void*)>:
c001b7fc:	b8 00 00 00 00       	mov    eax,0x0
c001b801:	c3                   	ret    
c001b802:	66 90                	xchg   ax,ax

c001b804 <apicTimerHandler(regs*, void*)>:
c001b804:	83 ec 0c             	sub    esp,0xc
c001b807:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b80b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b80d:	b8 10 27 00 00       	mov    eax,0x2710
c001b812:	ba 00 00 00 00       	mov    edx,0x0
c001b817:	f7 f1                	div    ecx
c001b819:	83 ec 0c             	sub    esp,0xc
c001b81c:	50                   	push   eax
c001b81d:	e8 3a 1a ff ff       	call   c000d25c <timerHandler(unsigned int)>
c001b822:	83 c4 10             	add    esp,0x10
c001b825:	90                   	nop
c001b826:	83 c4 0c             	add    esp,0xc
c001b829:	c3                   	ret    
c001b82a:	66 90                	xchg   ax,ax

c001b82c <APICTimer::open(int, int, void*)>:
c001b82c:	83 ec 0c             	sub    esp,0xc
c001b82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b833:	8b 00                	mov    eax,DWORD PTR [eax]
c001b835:	83 c0 24             	add    eax,0x24
c001b838:	8b 00                	mov    eax,DWORD PTR [eax]
c001b83a:	83 ec 08             	sub    esp,0x8
c001b83d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b841:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b845:	ff d0                	call   eax
c001b847:	83 c4 10             	add    esp,0x10
c001b84a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b84e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b852:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b85c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b860:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b866:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b86a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b870:	83 ec 0c             	sub    esp,0xc
c001b873:	51                   	push   ecx
c001b874:	6a 01                	push   0x1
c001b876:	68 04 b8 01 c0       	push   0xc001b804
c001b87b:	52                   	push   edx
c001b87c:	50                   	push   eax
c001b87d:	e8 b2 00 ff ff       	call   c000b934 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b882:	83 c4 20             	add    esp,0x20
c001b885:	89 c2                	mov    edx,eax
c001b887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b88b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b891:	b8 00 00 00 00       	mov    eax,0x0
c001b896:	83 c4 0c             	add    esp,0xc
c001b899:	c3                   	ret    
c001b89a:	66 90                	xchg   ax,ax

c001b89c <APICTimer::write(int)>:
c001b89c:	83 ec 0c             	sub    esp,0xc
c001b89f:	83 ec 0c             	sub    esp,0xc
c001b8a2:	68 8c f6 01 c0       	push   0xc001f68c
c001b8a7:	e8 1f 49 ff ff       	call   c00101cb <KePanic(char const*)>
c001b8ac:	83 c4 10             	add    esp,0x10
c001b8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b8b7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b8bd:	90                   	nop
c001b8be:	83 c4 0c             	add    esp,0xc
c001b8c1:	c3                   	ret    
c001b8c2:	66 90                	xchg   ax,ax

c001b8c4 <APICTimer::APICTimer()>:
c001b8c4:	83 ec 0c             	sub    esp,0xc
c001b8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8cb:	83 ec 08             	sub    esp,0x8
c001b8ce:	68 9c f6 01 c0       	push   0xc001f69c
c001b8d3:	50                   	push   eax
c001b8d4:	e8 b7 18 ff ff       	call   c000d190 <Timer::Timer(char const*)>
c001b8d9:	83 c4 10             	add    esp,0x10
c001b8dc:	ba b0 f6 01 c0       	mov    edx,0xc001f6b0
c001b8e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e5:	89 10                	mov    DWORD PTR [eax],edx
c001b8e7:	90                   	nop
c001b8e8:	83 c4 0c             	add    esp,0xc
c001b8eb:	c3                   	ret    

c001b8ec <PIT::write(int)>:
c001b8ec:	83 ec 10             	sub    esp,0x10
c001b8ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8f7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b8fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b901:	a3 a4 5b 02 c0       	mov    ds:0xc0025ba4,eax
c001b906:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b90b:	99                   	cdq    
c001b90c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b910:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b914:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b91b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b920:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b924:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b929:	ee                   	out    dx,al
c001b92a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b92e:	25 ff 00 00 00       	and    eax,0xff
c001b933:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b93a:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b93e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b942:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b947:	ee                   	out    dx,al
c001b948:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b94c:	c1 f8 08             	sar    eax,0x8
c001b94f:	25 ff 00 00 00       	and    eax,0xff
c001b954:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b95b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b95f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b963:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b968:	ee                   	out    dx,al
c001b969:	90                   	nop
c001b96a:	83 c4 10             	add    esp,0x10
c001b96d:	c3                   	ret    
c001b96e:	66 90                	xchg   ax,ax

c001b970 <pitHandler(regs*, void*)>:
c001b970:	83 ec 0c             	sub    esp,0xc
c001b973:	8b 0d a4 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba4
c001b979:	b8 10 27 00 00       	mov    eax,0x2710
c001b97e:	99                   	cdq    
c001b97f:	f7 f9                	idiv   ecx
c001b981:	83 ec 0c             	sub    esp,0xc
c001b984:	50                   	push   eax
c001b985:	e8 d2 18 ff ff       	call   c000d25c <timerHandler(unsigned int)>
c001b98a:	83 c4 10             	add    esp,0x10
c001b98d:	90                   	nop
c001b98e:	83 c4 0c             	add    esp,0xc
c001b991:	c3                   	ret    
c001b992:	66 90                	xchg   ax,ax

c001b994 <PIT::open(int, int, void*)>:
c001b994:	83 ec 0c             	sub    esp,0xc
c001b997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b99b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b99d:	83 c0 24             	add    eax,0x24
c001b9a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9a2:	83 ec 08             	sub    esp,0x8
c001b9a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9ad:	ff d0                	call   eax
c001b9af:	83 c4 10             	add    esp,0x10
c001b9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b6:	83 ec 0c             	sub    esp,0xc
c001b9b9:	6a 00                	push   0x0
c001b9bb:	6a 01                	push   0x1
c001b9bd:	68 70 b9 01 c0       	push   0xc001b970
c001b9c2:	6a 00                	push   0x0
c001b9c4:	50                   	push   eax
c001b9c5:	e8 6a ff fe ff       	call   c000b934 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b9ca:	83 c4 20             	add    esp,0x20
c001b9cd:	89 c2                	mov    edx,eax
c001b9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b9d9:	b8 00 00 00 00       	mov    eax,0x0
c001b9de:	83 c4 0c             	add    esp,0xc
c001b9e1:	c3                   	ret    
c001b9e2:	66 90                	xchg   ax,ax

c001b9e4 <PIT::close(int, int, void*)>:
c001b9e4:	83 ec 0c             	sub    esp,0xc
c001b9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9eb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f9:	6a 01                	push   0x1
c001b9fb:	68 70 b9 01 c0       	push   0xc001b970
c001ba00:	6a 00                	push   0x0
c001ba02:	50                   	push   eax
c001ba03:	e8 62 ff fe ff       	call   c000b96a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ba08:	83 c4 10             	add    esp,0x10
c001ba0b:	b8 00 00 00 00       	mov    eax,0x0
c001ba10:	83 c4 0c             	add    esp,0xc
c001ba13:	c3                   	ret    

c001ba14 <PIT::PIT()>:
c001ba14:	83 ec 0c             	sub    esp,0xc
c001ba17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba1b:	83 ec 08             	sub    esp,0x8
c001ba1e:	68 d8 f6 01 c0       	push   0xc001f6d8
c001ba23:	50                   	push   eax
c001ba24:	e8 67 17 ff ff       	call   c000d190 <Timer::Timer(char const*)>
c001ba29:	83 c4 10             	add    esp,0x10
c001ba2c:	ba 00 f7 01 c0       	mov    edx,0xc001f700
c001ba31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba35:	89 10                	mov    DWORD PTR [eax],edx
c001ba37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba3b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba41:	31 d2                	xor    edx,edx
c001ba43:	88 c2                	mov    dl,al
c001ba45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba49:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ba50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba5a:	31 d2                	xor    edx,edx
c001ba5c:	88 c2                	mov    dl,al
c001ba5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba62:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ba67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba6b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba71:	8d 50 01             	lea    edx,[eax+0x1]
c001ba74:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba78:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ba7e:	31 d2                	xor    edx,edx
c001ba80:	88 c2                	mov    dl,al
c001ba82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ba8a:	83 e1 3f             	and    ecx,0x3f
c001ba8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ba91:	90                   	nop
c001ba92:	83 c4 0c             	add    esp,0xc
c001ba95:	c3                   	ret    
c001ba96:	66 90                	xchg   ax,ax
c001ba98:	66 90                	xchg   ax,ax
c001ba9a:	66 90                	xchg   ax,ax
c001ba9c:	66 90                	xchg   ax,ax
c001ba9e:	66 90                	xchg   ax,ax

c001baa0 <avxDetect>:
c001baa0:	b8 01 00 00 00       	mov    eax,0x1
c001baa5:	0f a2                	cpuid  
c001baa7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001baad:	74 15                	je     c001bac4 <avxDetect.noAVX>
c001baaf:	b8 01 00 00 00       	mov    eax,0x1
c001bab4:	0f a2                	cpuid  
c001bab6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001babc:	74 06                	je     c001bac4 <avxDetect.noAVX>
c001babe:	b8 01 00 00 00       	mov    eax,0x1
c001bac3:	c3                   	ret    

c001bac4 <avxDetect.noAVX>:
c001bac4:	b8 00 00 00 00       	mov    eax,0x0
c001bac9:	c3                   	ret    

c001baca <avxSave>:
c001baca:	53                   	push   ebx
c001bacb:	52                   	push   edx
c001bacc:	31 c0                	xor    eax,eax
c001bace:	48                   	dec    eax
c001bacf:	89 c2                	mov    edx,eax
c001bad1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bad5:	0f ae 23             	xsave  [ebx]
c001bad8:	5a                   	pop    edx
c001bad9:	5b                   	pop    ebx
c001bada:	c3                   	ret    

c001badb <avxLoad>:
c001badb:	53                   	push   ebx
c001badc:	52                   	push   edx
c001badd:	31 c0                	xor    eax,eax
c001badf:	48                   	dec    eax
c001bae0:	89 c2                	mov    edx,eax
c001bae2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bae6:	0f ae 2b             	xrstor [ebx]
c001bae9:	5a                   	pop    edx
c001baea:	5b                   	pop    ebx
c001baeb:	c3                   	ret    

c001baec <avxInit>:
c001baec:	e8 b7 02 00 00       	call   c001bda8 <sseInit>
c001baf1:	50                   	push   eax
c001baf2:	51                   	push   ecx
c001baf3:	0f 20 e0             	mov    eax,cr4
c001baf6:	0d 00 00 04 00       	or     eax,0x40000
c001bafb:	0f 22 e0             	mov    cr4,eax
c001bafe:	31 c9                	xor    ecx,ecx
c001bb00:	0f 01 d0             	xgetbv 
c001bb03:	0d 07 00 00 00       	or     eax,0x7
c001bb08:	0f 01 d1             	xsetbv 
c001bb0b:	59                   	pop    ecx
c001bb0c:	58                   	pop    eax
c001bb0d:	c3                   	ret    

c001bb0e <avxClose>:
c001bb0e:	c3                   	ret    

c001bb0f <wouldSheSayYes>:
c001bb0f:	c3                   	ret    
c001bb10:	49                   	dec    ecx
c001bb11:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bb15:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bb19:	75 20                	jne    c001bb3b <isr0+0xb>
c001bb1b:	4e                   	dec    esi
c001bb1c:	79 61                	jns    c001bb7f <isr7+0x3>
c001bb1e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bb23:	66 90                	xchg   ax,ax
c001bb25:	66 90                	xchg   ax,ax
c001bb27:	66 90                	xchg   ax,ax
c001bb29:	66 90                	xchg   ax,ax
c001bb2b:	66 90                	xchg   ax,ax
c001bb2d:	66 90                	xchg   ax,ax
c001bb2f:	90                   	nop

c001bb30 <isr0>:
c001bb30:	fa                   	cli    
c001bb31:	68 00 00 00 00       	push   0x0
c001bb36:	68 00 00 00 00       	push   0x0
c001bb3b:	e9 44 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb40 <isr1>:
c001bb40:	fa                   	cli    
c001bb41:	6a 00                	push   0x0
c001bb43:	6a 01                	push   0x1
c001bb45:	e9 3a 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb4a <isr2>:
c001bb4a:	fa                   	cli    
c001bb4b:	6a 00                	push   0x0
c001bb4d:	6a 02                	push   0x2
c001bb4f:	e9 30 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb54 <isr3>:
c001bb54:	fa                   	cli    
c001bb55:	6a 00                	push   0x0
c001bb57:	6a 03                	push   0x3
c001bb59:	e9 26 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb5e <isr4>:
c001bb5e:	fa                   	cli    
c001bb5f:	6a 00                	push   0x0
c001bb61:	6a 04                	push   0x4
c001bb63:	e9 1c 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb68 <isr5>:
c001bb68:	fa                   	cli    
c001bb69:	6a 00                	push   0x0
c001bb6b:	6a 05                	push   0x5
c001bb6d:	e9 12 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb72 <isr6>:
c001bb72:	fa                   	cli    
c001bb73:	6a 00                	push   0x0
c001bb75:	6a 06                	push   0x6
c001bb77:	e9 08 01 00 00       	jmp    c001bc84 <int_common_stub>

c001bb7c <isr7>:
c001bb7c:	fa                   	cli    
c001bb7d:	6a 00                	push   0x0
c001bb7f:	6a 07                	push   0x7
c001bb81:	e9 fe 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bb86 <isr8>:
c001bb86:	fa                   	cli    
c001bb87:	6a 08                	push   0x8
c001bb89:	e9 f6 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bb8e <isr9>:
c001bb8e:	fa                   	cli    
c001bb8f:	6a 00                	push   0x0
c001bb91:	6a 09                	push   0x9
c001bb93:	e9 ec 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bb98 <isr10>:
c001bb98:	fa                   	cli    
c001bb99:	6a 0a                	push   0xa
c001bb9b:	e9 e4 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bba0 <isr11>:
c001bba0:	fa                   	cli    
c001bba1:	6a 0b                	push   0xb
c001bba3:	e9 dc 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bba8 <isr12>:
c001bba8:	fa                   	cli    
c001bba9:	6a 0c                	push   0xc
c001bbab:	e9 d4 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbb0 <isr13>:
c001bbb0:	fa                   	cli    
c001bbb1:	6a 0d                	push   0xd
c001bbb3:	e9 cc 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbb8 <isr14>:
c001bbb8:	fa                   	cli    
c001bbb9:	6a 0e                	push   0xe
c001bbbb:	e9 c4 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbc0 <isr15>:
c001bbc0:	fa                   	cli    
c001bbc1:	6a 00                	push   0x0
c001bbc3:	6a 0f                	push   0xf
c001bbc5:	e9 ba 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbca <isr16>:
c001bbca:	fa                   	cli    
c001bbcb:	6a 00                	push   0x0
c001bbcd:	6a 10                	push   0x10
c001bbcf:	e9 b0 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbd4 <isr17>:
c001bbd4:	fa                   	cli    
c001bbd5:	6a 00                	push   0x0
c001bbd7:	6a 11                	push   0x11
c001bbd9:	e9 a6 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbde <isr18>:
c001bbde:	fa                   	cli    
c001bbdf:	6a 00                	push   0x0
c001bbe1:	6a 12                	push   0x12
c001bbe3:	e9 9c 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbe8 <irq3>:
c001bbe8:	fa                   	cli    
c001bbe9:	6a 00                	push   0x0
c001bbeb:	6a 23                	push   0x23
c001bbed:	e9 92 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbf2 <irq4>:
c001bbf2:	fa                   	cli    
c001bbf3:	6a 00                	push   0x0
c001bbf5:	6a 24                	push   0x24
c001bbf7:	e9 88 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bbfc <irq5>:
c001bbfc:	fa                   	cli    
c001bbfd:	6a 00                	push   0x0
c001bbff:	6a 25                	push   0x25
c001bc01:	e9 7e 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc06 <irq6>:
c001bc06:	fa                   	cli    
c001bc07:	6a 00                	push   0x0
c001bc09:	6a 26                	push   0x26
c001bc0b:	e9 74 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc10 <irq7>:
c001bc10:	fa                   	cli    
c001bc11:	6a 00                	push   0x0
c001bc13:	6a 27                	push   0x27
c001bc15:	e9 6a 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc1a <irq8>:
c001bc1a:	fa                   	cli    
c001bc1b:	6a 00                	push   0x0
c001bc1d:	6a 28                	push   0x28
c001bc1f:	e9 60 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc24 <irq9>:
c001bc24:	fa                   	cli    
c001bc25:	6a 00                	push   0x0
c001bc27:	6a 29                	push   0x29
c001bc29:	e9 56 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc2e <irq10>:
c001bc2e:	fa                   	cli    
c001bc2f:	6a 00                	push   0x0
c001bc31:	6a 2a                	push   0x2a
c001bc33:	e9 4c 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc38 <irq11>:
c001bc38:	fa                   	cli    
c001bc39:	6a 00                	push   0x0
c001bc3b:	6a 2b                	push   0x2b
c001bc3d:	e9 42 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc42 <irq12>:
c001bc42:	fa                   	cli    
c001bc43:	6a 00                	push   0x0
c001bc45:	6a 2c                	push   0x2c
c001bc47:	e9 38 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc4c <irq13>:
c001bc4c:	fa                   	cli    
c001bc4d:	6a 00                	push   0x0
c001bc4f:	6a 2d                	push   0x2d
c001bc51:	e9 2e 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc56 <irq14>:
c001bc56:	fa                   	cli    
c001bc57:	6a 00                	push   0x0
c001bc59:	6a 2e                	push   0x2e
c001bc5b:	e9 24 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc60 <irq15>:
c001bc60:	fa                   	cli    
c001bc61:	6a 00                	push   0x0
c001bc63:	6a 2f                	push   0x2f
c001bc65:	e9 1a 00 00 00       	jmp    c001bc84 <int_common_stub>

c001bc6a <irq1>:
c001bc6a:	fa                   	cli    
c001bc6b:	6a 00                	push   0x0
c001bc6d:	6a 21                	push   0x21
c001bc6f:	eb 13                	jmp    c001bc84 <int_common_stub>

c001bc71 <irq2>:
c001bc71:	fa                   	cli    
c001bc72:	6a 00                	push   0x0
c001bc74:	6a 22                	push   0x22
c001bc76:	eb 0c                	jmp    c001bc84 <int_common_stub>

c001bc78 <isr96>:
c001bc78:	6a 00                	push   0x0
c001bc7a:	6a 60                	push   0x60
c001bc7c:	fb                   	sti    
c001bc7d:	eb 37                	jmp    c001bcb6 <syscall_common_stub>

c001bc7f <irq0>:
c001bc7f:	fa                   	cli    
c001bc80:	6a 00                	push   0x0
c001bc82:	6a 20                	push   0x20

c001bc84 <int_common_stub>:
c001bc84:	60                   	pusha  
c001bc85:	1e                   	push   ds
c001bc86:	06                   	push   es
c001bc87:	0f a0                	push   fs
c001bc89:	0f a8                	push   gs
c001bc8b:	66 b8 10 00          	mov    ax,0x10
c001bc8f:	66 8e d8             	mov    ds,ax
c001bc92:	66 8e c0             	mov    es,ax
c001bc95:	66 8e e0             	mov    fs,ax
c001bc98:	66 8e e8             	mov    gs,ax
c001bc9b:	54                   	push   esp
c001bc9c:	fc                   	cld    
c001bc9d:	e8 92 01 ff ff       	call   c000be34 <int_handler>
c001bca2:	81 c4 04 00 00 00    	add    esp,0x4
c001bca8:	0f a9                	pop    gs
c001bcaa:	0f a1                	pop    fs
c001bcac:	07                   	pop    es
c001bcad:	1f                   	pop    ds
c001bcae:	61                   	popa   
c001bcaf:	81 c4 08 00 00 00    	add    esp,0x8
c001bcb5:	cf                   	iret   

c001bcb6 <syscall_common_stub>:
c001bcb6:	60                   	pusha  
c001bcb7:	1e                   	push   ds
c001bcb8:	06                   	push   es
c001bcb9:	0f a0                	push   fs
c001bcbb:	0f a8                	push   gs
c001bcbd:	66 b8 10 00          	mov    ax,0x10
c001bcc1:	66 8e d8             	mov    ds,ax
c001bcc4:	66 8e c0             	mov    es,ax
c001bcc7:	66 8e e0             	mov    fs,ax
c001bcca:	66 8e e8             	mov    gs,ax
c001bccd:	54                   	push   esp
c001bcce:	fc                   	cld    
c001bccf:	e8 60 01 ff ff       	call   c000be34 <int_handler>
c001bcd4:	81 c4 04 00 00 00    	add    esp,0x4
c001bcda:	0f a9                	pop    gs
c001bcdc:	0f a1                	pop    fs
c001bcde:	07                   	pop    es
c001bcdf:	1f                   	pop    ds
c001bce0:	e8 3a 4a ff ff       	call   c001071f <KiCheckSignalZ>
c001bce5:	3d 00 00 00 00       	cmp    eax,0x0
c001bcea:	74 1d                	je     c001bd09 <syscall_common_stub.skipSignals>
c001bcec:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001bcf0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bcf4:	89 e3                	mov    ebx,esp
c001bcf6:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001bcf9:	51                   	push   ecx
c001bcfa:	68 11 bd 01 c0       	push   0xc001bd11
c001bcff:	89 dc                	mov    esp,ebx
c001bd01:	61                   	popa   
c001bd02:	81 c4 08 00 00 00    	add    esp,0x8
c001bd08:	cf                   	iret   

c001bd09 <syscall_common_stub.skipSignals>:
c001bd09:	61                   	popa   
c001bd0a:	81 c4 08 00 00 00    	add    esp,0x8
c001bd10:	cf                   	iret   

c001bd11 <irq16>:
c001bd11:	fa                   	cli    
c001bd12:	6a 00                	push   0x0
c001bd14:	6a 30                	push   0x30
c001bd16:	e9 69 ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd1b <irq17>:
c001bd1b:	fa                   	cli    
c001bd1c:	6a 00                	push   0x0
c001bd1e:	6a 31                	push   0x31
c001bd20:	e9 5f ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd25 <irq18>:
c001bd25:	fa                   	cli    
c001bd26:	6a 00                	push   0x0
c001bd28:	6a 32                	push   0x32
c001bd2a:	e9 55 ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd2f <irq19>:
c001bd2f:	fa                   	cli    
c001bd30:	6a 00                	push   0x0
c001bd32:	6a 33                	push   0x33
c001bd34:	e9 4b ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd39 <irq20>:
c001bd39:	fa                   	cli    
c001bd3a:	6a 00                	push   0x0
c001bd3c:	6a 34                	push   0x34
c001bd3e:	e9 41 ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd43 <irq21>:
c001bd43:	fa                   	cli    
c001bd44:	6a 00                	push   0x0
c001bd46:	6a 35                	push   0x35
c001bd48:	e9 37 ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd4d <irq22>:
c001bd4d:	fa                   	cli    
c001bd4e:	6a 00                	push   0x0
c001bd50:	6a 36                	push   0x36
c001bd52:	e9 2d ff ff ff       	jmp    c001bc84 <int_common_stub>

c001bd57 <irq23>:
c001bd57:	fa                   	cli    
c001bd58:	6a 00                	push   0x0
c001bd5a:	6a 37                	push   0x37
c001bd5c:	e9 23 ff ff ff       	jmp    c001bc84 <int_common_stub>
c001bd61:	66 90                	xchg   ax,ax
c001bd63:	66 90                	xchg   ax,ax
c001bd65:	66 90                	xchg   ax,ax
c001bd67:	66 90                	xchg   ax,ax
c001bd69:	66 90                	xchg   ax,ax
c001bd6b:	66 90                	xchg   ax,ax
c001bd6d:	66 90                	xchg   ax,ax
c001bd6f:	90                   	nop

c001bd70 <i386GetRDRAND>:
c001bd70:	b9 64 00 00 00       	mov    ecx,0x64

c001bd75 <retry>:
c001bd75:	0f c7 f0             	rdrand eax
c001bd78:	72 05                	jb     c001bd7f <retry.done>
c001bd7a:	e2 f9                	loop   c001bd75 <retry>

c001bd7c <retry.fail>:
c001bd7c:	31 c0                	xor    eax,eax
c001bd7e:	c3                   	ret    

c001bd7f <retry.done>:
c001bd7f:	c3                   	ret    

c001bd80 <absolutelyNoChanceInHell>:
c001bd80:	b8 01 00 00 00       	mov    eax,0x1
c001bd85:	0f a2                	cpuid  
c001bd87:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bd8d:	74 06                	je     c001bd95 <sseDetect.noSSE>
c001bd8f:	b8 01 00 00 00       	mov    eax,0x1
c001bd94:	c3                   	ret    

c001bd95 <sseDetect.noSSE>:
c001bd95:	31 c0                	xor    eax,eax
c001bd97:	c3                   	ret    

c001bd98 <sseSave>:
c001bd98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd9c:	0f ae 00             	fxsave [eax]
c001bd9f:	c3                   	ret    

c001bda0 <sseLoad>:
c001bda0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bda4:	0f ae 08             	fxrstor [eax]
c001bda7:	c3                   	ret    

c001bda8 <sseInit>:
c001bda8:	e8 42 00 00 00       	call   c001bdef <x87Init>
c001bdad:	0f 20 e0             	mov    eax,cr4
c001bdb0:	66 0d 00 06          	or     ax,0x600
c001bdb4:	0f 22 e0             	mov    cr4,eax
c001bdb7:	c3                   	ret    

c001bdb8 <sseClose>:
c001bdb8:	c3                   	ret    
c001bdb9:	66 90                	xchg   ax,ax
c001bdbb:	66 90                	xchg   ax,ax
c001bdbd:	66 90                	xchg   ax,ax
c001bdbf:	90                   	nop

c001bdc0 <value_37F>:
c001bdc0:	7f 03                	jg     c001bdc5 <value_37A+0x1>

c001bdc2 <value_37E>:
c001bdc2:	7e 03                	jle    c001bdc7 <x87Detect+0x1>

c001bdc4 <value_37A>:
c001bdc4:	7a 03                	jp     c001bdc9 <x87Detect+0x3>

c001bdc6 <x87Detect>:
c001bdc6:	b8 01 00 00 00       	mov    eax,0x1
c001bdcb:	0f a2                	cpuid  
c001bdcd:	f7 c2 01 00 00 00    	test   edx,0x1
c001bdd3:	74 06                	je     c001bddb <x87Detect.nox87>
c001bdd5:	b8 01 00 00 00       	mov    eax,0x1
c001bdda:	c3                   	ret    

c001bddb <x87Detect.nox87>:
c001bddb:	b8 00 00 00 00       	mov    eax,0x0
c001bde0:	c3                   	ret    

c001bde1 <x87Save>:
c001bde1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bde5:	dd 30                	fnsave [eax]
c001bde7:	c3                   	ret    

c001bde8 <x87Load>:
c001bde8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdec:	dd 20                	frstor [eax]
c001bdee:	c3                   	ret    

c001bdef <x87Init>:
c001bdef:	0f 20 c0             	mov    eax,cr0
c001bdf2:	66 25 fb ff          	and    ax,0xfffb
c001bdf6:	66 0d 22 00          	or     ax,0x22
c001bdfa:	0f 22 c0             	mov    cr0,eax
c001bdfd:	db e3                	fninit 
c001bdff:	0f 06                	clts   
c001be01:	d9 2d c4 bd 01 c0    	fldcw  WORD PTR ds:0xc001bdc4
c001be07:	c3                   	ret    

c001be08 <x87Close>:
c001be08:	c3                   	ret    
c001be09:	66 90                	xchg   ax,ax
c001be0b:	90                   	nop

c001be0c <__do_global_ctors_aux>:
c001be0c:	a1 bc cd 01 c0       	mov    eax,ds:0xc001cdbc
c001be11:	83 f8 ff             	cmp    eax,0xffffffff
c001be14:	74 1a                	je     c001be30 <__do_global_ctors_aux+0x24>
c001be16:	55                   	push   ebp
c001be17:	89 e5                	mov    ebp,esp
c001be19:	53                   	push   ebx
c001be1a:	52                   	push   edx
c001be1b:	bb bc cd 01 c0       	mov    ebx,0xc001cdbc
c001be20:	ff d0                	call   eax
c001be22:	83 eb 04             	sub    ebx,0x4
c001be25:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be27:	83 f8 ff             	cmp    eax,0xffffffff
c001be2a:	75 f4                	jne    c001be20 <__do_global_ctors_aux+0x14>
c001be2c:	58                   	pop    eax
c001be2d:	5b                   	pop    ebx
c001be2e:	5d                   	pop    ebp
c001be2f:	c3                   	ret    
c001be30:	c3                   	ret    
c001be31:	66 90                	xchg   ax,ax
c001be33:	90                   	nop

c001be34 <__divdi3>:
c001be34:	55                   	push   ebp
c001be35:	57                   	push   edi
c001be36:	56                   	push   esi
c001be37:	53                   	push   ebx
c001be38:	83 ec 1c             	sub    esp,0x1c
c001be3b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001be3f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be43:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001be46:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001be4a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be4e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001be52:	85 db                	test   ebx,ebx
c001be54:	0f 88 8e 00 00 00    	js     c001bee8 <__divdi3+0xb4>
c001be5a:	89 dd                	mov    ebp,ebx
c001be5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001be64:	89 d3                	mov    ebx,edx
c001be66:	85 d2                	test   edx,edx
c001be68:	79 0d                	jns    c001be77 <__divdi3+0x43>
c001be6a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001be6e:	f7 d8                	neg    eax
c001be70:	83 d2 00             	adc    edx,0x0
c001be73:	f7 da                	neg    edx
c001be75:	89 d3                	mov    ebx,edx
c001be77:	89 c7                	mov    edi,eax
c001be79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001be7c:	85 db                	test   ebx,ebx
c001be7e:	75 48                	jne    c001bec8 <__divdi3+0x94>
c001be80:	39 ef                	cmp    edi,ebp
c001be82:	76 24                	jbe    c001bea8 <__divdi3+0x74>
c001be84:	89 ea                	mov    edx,ebp
c001be86:	f7 f7                	div    edi
c001be88:	89 c1                	mov    ecx,eax
c001be8a:	31 f6                	xor    esi,esi
c001be8c:	89 c8                	mov    eax,ecx
c001be8e:	89 f2                	mov    edx,esi
c001be90:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001be94:	85 c9                	test   ecx,ecx
c001be96:	74 07                	je     c001be9f <__divdi3+0x6b>
c001be98:	f7 d8                	neg    eax
c001be9a:	83 d2 00             	adc    edx,0x0
c001be9d:	f7 da                	neg    edx
c001be9f:	83 c4 1c             	add    esp,0x1c
c001bea2:	5b                   	pop    ebx
c001bea3:	5e                   	pop    esi
c001bea4:	5f                   	pop    edi
c001bea5:	5d                   	pop    ebp
c001bea6:	c3                   	ret    
c001bea7:	90                   	nop
c001bea8:	85 ff                	test   edi,edi
c001beaa:	75 0b                	jne    c001beb7 <__divdi3+0x83>
c001beac:	b8 01 00 00 00       	mov    eax,0x1
c001beb1:	31 d2                	xor    edx,edx
c001beb3:	f7 f3                	div    ebx
c001beb5:	89 c7                	mov    edi,eax
c001beb7:	31 d2                	xor    edx,edx
c001beb9:	89 e8                	mov    eax,ebp
c001bebb:	f7 f7                	div    edi
c001bebd:	89 c6                	mov    esi,eax
c001bebf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bec2:	f7 f7                	div    edi
c001bec4:	89 c1                	mov    ecx,eax
c001bec6:	eb c4                	jmp    c001be8c <__divdi3+0x58>
c001bec8:	39 eb                	cmp    ebx,ebp
c001beca:	77 3c                	ja     c001bf08 <__divdi3+0xd4>
c001becc:	0f bd f3             	bsr    esi,ebx
c001becf:	83 f6 1f             	xor    esi,0x1f
c001bed2:	75 40                	jne    c001bf14 <__divdi3+0xe0>
c001bed4:	39 eb                	cmp    ebx,ebp
c001bed6:	72 09                	jb     c001bee1 <__divdi3+0xad>
c001bed8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bedb:	0f 87 97 00 00 00    	ja     c001bf78 <__divdi3+0x144>
c001bee1:	b9 01 00 00 00       	mov    ecx,0x1
c001bee6:	eb a4                	jmp    c001be8c <__divdi3+0x58>
c001bee8:	f7 d9                	neg    ecx
c001beea:	83 d3 00             	adc    ebx,0x0
c001beed:	f7 db                	neg    ebx
c001beef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bef2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bef6:	89 dd                	mov    ebp,ebx
c001bef8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bf00:	e9 5f ff ff ff       	jmp    c001be64 <__divdi3+0x30>
c001bf05:	8d 76 00             	lea    esi,[esi+0x0]
c001bf08:	31 f6                	xor    esi,esi
c001bf0a:	31 c9                	xor    ecx,ecx
c001bf0c:	e9 7b ff ff ff       	jmp    c001be8c <__divdi3+0x58>
c001bf11:	8d 76 00             	lea    esi,[esi+0x0]
c001bf14:	b8 20 00 00 00       	mov    eax,0x20
c001bf19:	29 f0                	sub    eax,esi
c001bf1b:	89 f1                	mov    ecx,esi
c001bf1d:	d3 e3                	shl    ebx,cl
c001bf1f:	89 fa                	mov    edx,edi
c001bf21:	88 c1                	mov    cl,al
c001bf23:	d3 ea                	shr    edx,cl
c001bf25:	09 da                	or     edx,ebx
c001bf27:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bf2b:	89 f1                	mov    ecx,esi
c001bf2d:	d3 e7                	shl    edi,cl
c001bf2f:	89 eb                	mov    ebx,ebp
c001bf31:	88 c1                	mov    cl,al
c001bf33:	d3 eb                	shr    ebx,cl
c001bf35:	89 f1                	mov    ecx,esi
c001bf37:	d3 e5                	shl    ebp,cl
c001bf39:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001bf3c:	88 c1                	mov    cl,al
c001bf3e:	d3 ea                	shr    edx,cl
c001bf40:	09 d5                	or     ebp,edx
c001bf42:	89 e8                	mov    eax,ebp
c001bf44:	89 da                	mov    edx,ebx
c001bf46:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bf4a:	89 d3                	mov    ebx,edx
c001bf4c:	89 c5                	mov    ebp,eax
c001bf4e:	f7 e7                	mul    edi
c001bf50:	39 d3                	cmp    ebx,edx
c001bf52:	72 18                	jb     c001bf6c <__divdi3+0x138>
c001bf54:	74 0a                	je     c001bf60 <__divdi3+0x12c>
c001bf56:	89 e9                	mov    ecx,ebp
c001bf58:	31 f6                	xor    esi,esi
c001bf5a:	e9 2d ff ff ff       	jmp    c001be8c <__divdi3+0x58>
c001bf5f:	90                   	nop
c001bf60:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bf63:	89 f1                	mov    ecx,esi
c001bf65:	d3 e7                	shl    edi,cl
c001bf67:	39 c7                	cmp    edi,eax
c001bf69:	73 eb                	jae    c001bf56 <__divdi3+0x122>
c001bf6b:	90                   	nop
c001bf6c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001bf6f:	31 f6                	xor    esi,esi
c001bf71:	e9 16 ff ff ff       	jmp    c001be8c <__divdi3+0x58>
c001bf76:	66 90                	xchg   ax,ax
c001bf78:	31 c9                	xor    ecx,ecx
c001bf7a:	e9 0d ff ff ff       	jmp    c001be8c <__divdi3+0x58>
c001bf7f:	90                   	nop

c001bf80 <__moddi3>:
c001bf80:	55                   	push   ebp
c001bf81:	57                   	push   edi
c001bf82:	56                   	push   esi
c001bf83:	53                   	push   ebx
c001bf84:	83 ec 2c             	sub    esp,0x2c
c001bf87:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bf8b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001bf8f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bf93:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bf97:	85 db                	test   ebx,ebx
c001bf99:	0f 88 85 00 00 00    	js     c001c024 <__moddi3+0xa4>
c001bf9f:	89 de                	mov    esi,ebx
c001bfa1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bfa9:	89 d7                	mov    edi,edx
c001bfab:	85 d2                	test   edx,edx
c001bfad:	79 09                	jns    c001bfb8 <__moddi3+0x38>
c001bfaf:	f7 d8                	neg    eax
c001bfb1:	83 d2 00             	adc    edx,0x0
c001bfb4:	f7 da                	neg    edx
c001bfb6:	89 d7                	mov    edi,edx
c001bfb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfbc:	89 cd                	mov    ebp,ecx
c001bfbe:	85 ff                	test   edi,edi
c001bfc0:	75 52                	jne    c001c014 <__moddi3+0x94>
c001bfc2:	89 c3                	mov    ebx,eax
c001bfc4:	39 f0                	cmp    eax,esi
c001bfc6:	76 24                	jbe    c001bfec <__moddi3+0x6c>
c001bfc8:	89 c8                	mov    eax,ecx
c001bfca:	89 f2                	mov    edx,esi
c001bfcc:	f7 f3                	div    ebx
c001bfce:	89 d6                	mov    esi,edx
c001bfd0:	89 f0                	mov    eax,esi
c001bfd2:	31 d2                	xor    edx,edx
c001bfd4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bfd8:	85 c9                	test   ecx,ecx
c001bfda:	74 07                	je     c001bfe3 <__moddi3+0x63>
c001bfdc:	f7 d8                	neg    eax
c001bfde:	83 d2 00             	adc    edx,0x0
c001bfe1:	f7 da                	neg    edx
c001bfe3:	83 c4 2c             	add    esp,0x2c
c001bfe6:	5b                   	pop    ebx
c001bfe7:	5e                   	pop    esi
c001bfe8:	5f                   	pop    edi
c001bfe9:	5d                   	pop    ebp
c001bfea:	c3                   	ret    
c001bfeb:	90                   	nop
c001bfec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bff0:	85 db                	test   ebx,ebx
c001bff2:	75 0d                	jne    c001c001 <__moddi3+0x81>
c001bff4:	b8 01 00 00 00       	mov    eax,0x1
c001bff9:	31 d2                	xor    edx,edx
c001bffb:	f7 f7                	div    edi
c001bffd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c001:	89 f0                	mov    eax,esi
c001c003:	31 d2                	xor    edx,edx
c001c005:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c009:	f7 f7                	div    edi
c001c00b:	89 e8                	mov    eax,ebp
c001c00d:	f7 f7                	div    edi
c001c00f:	89 d6                	mov    esi,edx
c001c011:	eb bd                	jmp    c001bfd0 <__moddi3+0x50>
c001c013:	90                   	nop
c001c014:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c018:	39 f7                	cmp    edi,esi
c001c01a:	76 20                	jbe    c001c03c <__moddi3+0xbc>
c001c01c:	89 c8                	mov    eax,ecx
c001c01e:	89 f2                	mov    edx,esi
c001c020:	eb b2                	jmp    c001bfd4 <__moddi3+0x54>
c001c022:	66 90                	xchg   ax,ax
c001c024:	f7 d9                	neg    ecx
c001c026:	83 d3 00             	adc    ebx,0x0
c001c029:	f7 db                	neg    ebx
c001c02b:	89 de                	mov    esi,ebx
c001c02d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c035:	e9 6f ff ff ff       	jmp    c001bfa9 <__moddi3+0x29>
c001c03a:	66 90                	xchg   ax,ax
c001c03c:	0f bd c7             	bsr    eax,edi
c001c03f:	83 f0 1f             	xor    eax,0x1f
c001c042:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c046:	75 24                	jne    c001c06c <__moddi3+0xec>
c001c048:	39 f7                	cmp    edi,esi
c001c04a:	72 06                	jb     c001c052 <__moddi3+0xd2>
c001c04c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c050:	77 0c                	ja     c001c05e <__moddi3+0xde>
c001c052:	89 e9                	mov    ecx,ebp
c001c054:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c058:	19 fe                	sbb    esi,edi
c001c05a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c062:	89 f2                	mov    edx,esi
c001c064:	e9 6b ff ff ff       	jmp    c001bfd4 <__moddi3+0x54>
c001c069:	8d 76 00             	lea    esi,[esi+0x0]
c001c06c:	b8 20 00 00 00       	mov    eax,0x20
c001c071:	89 c2                	mov    edx,eax
c001c073:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c077:	29 da                	sub    edx,ebx
c001c079:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c07d:	88 d9                	mov    cl,bl
c001c07f:	d3 e7                	shl    edi,cl
c001c081:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c085:	88 d1                	mov    cl,dl
c001c087:	d3 e8                	shr    eax,cl
c001c089:	09 c7                	or     edi,eax
c001c08b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c08f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c093:	89 d8                	mov    eax,ebx
c001c095:	88 d9                	mov    cl,bl
c001c097:	d3 e7                	shl    edi,cl
c001c099:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c09d:	89 f3                	mov    ebx,esi
c001c09f:	88 d1                	mov    cl,dl
c001c0a1:	d3 eb                	shr    ebx,cl
c001c0a3:	89 c7                	mov    edi,eax
c001c0a5:	88 c1                	mov    cl,al
c001c0a7:	d3 e6                	shl    esi,cl
c001c0a9:	89 e8                	mov    eax,ebp
c001c0ab:	88 d1                	mov    cl,dl
c001c0ad:	d3 e8                	shr    eax,cl
c001c0af:	09 f0                	or     eax,esi
c001c0b1:	89 f9                	mov    ecx,edi
c001c0b3:	d3 e5                	shl    ebp,cl
c001c0b5:	89 da                	mov    edx,ebx
c001c0b7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c0bb:	89 d3                	mov    ebx,edx
c001c0bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c0c1:	89 c6                	mov    esi,eax
c001c0c3:	89 d1                	mov    ecx,edx
c001c0c5:	39 d3                	cmp    ebx,edx
c001c0c7:	72 27                	jb     c001c0f0 <__moddi3+0x170>
c001c0c9:	74 21                	je     c001c0ec <__moddi3+0x16c>
c001c0cb:	29 f5                	sub    ebp,esi
c001c0cd:	19 cb                	sbb    ebx,ecx
c001c0cf:	89 de                	mov    esi,ebx
c001c0d1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c0d5:	d3 e6                	shl    esi,cl
c001c0d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c0db:	89 f9                	mov    ecx,edi
c001c0dd:	d3 ed                	shr    ebp,cl
c001c0df:	09 ee                	or     esi,ebp
c001c0e1:	89 f0                	mov    eax,esi
c001c0e3:	d3 eb                	shr    ebx,cl
c001c0e5:	89 da                	mov    edx,ebx
c001c0e7:	e9 e8 fe ff ff       	jmp    c001bfd4 <__moddi3+0x54>
c001c0ec:	39 c5                	cmp    ebp,eax
c001c0ee:	73 db                	jae    c001c0cb <__moddi3+0x14b>
c001c0f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c0f4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c0f8:	89 d1                	mov    ecx,edx
c001c0fa:	89 c6                	mov    esi,eax
c001c0fc:	eb cd                	jmp    c001c0cb <__moddi3+0x14b>
c001c0fe:	66 90                	xchg   ax,ax

c001c100 <__udivdi3>:
c001c100:	55                   	push   ebp
c001c101:	57                   	push   edi
c001c102:	56                   	push   esi
c001c103:	53                   	push   ebx
c001c104:	83 ec 1c             	sub    esp,0x1c
c001c107:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c10b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c10f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c113:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c117:	85 d2                	test   edx,edx
c001c119:	75 41                	jne    c001c15c <__udivdi3+0x5c>
c001c11b:	39 f7                	cmp    edi,esi
c001c11d:	76 15                	jbe    c001c134 <__udivdi3+0x34>
c001c11f:	89 e8                	mov    eax,ebp
c001c121:	89 f2                	mov    edx,esi
c001c123:	f7 f7                	div    edi
c001c125:	31 db                	xor    ebx,ebx
c001c127:	89 da                	mov    edx,ebx
c001c129:	83 c4 1c             	add    esp,0x1c
c001c12c:	5b                   	pop    ebx
c001c12d:	5e                   	pop    esi
c001c12e:	5f                   	pop    edi
c001c12f:	5d                   	pop    ebp
c001c130:	c3                   	ret    
c001c131:	8d 76 00             	lea    esi,[esi+0x0]
c001c134:	89 f9                	mov    ecx,edi
c001c136:	85 ff                	test   edi,edi
c001c138:	75 0b                	jne    c001c145 <__udivdi3+0x45>
c001c13a:	b8 01 00 00 00       	mov    eax,0x1
c001c13f:	31 d2                	xor    edx,edx
c001c141:	f7 f7                	div    edi
c001c143:	89 c1                	mov    ecx,eax
c001c145:	31 d2                	xor    edx,edx
c001c147:	89 f0                	mov    eax,esi
c001c149:	f7 f1                	div    ecx
c001c14b:	89 c3                	mov    ebx,eax
c001c14d:	89 e8                	mov    eax,ebp
c001c14f:	f7 f1                	div    ecx
c001c151:	89 da                	mov    edx,ebx
c001c153:	83 c4 1c             	add    esp,0x1c
c001c156:	5b                   	pop    ebx
c001c157:	5e                   	pop    esi
c001c158:	5f                   	pop    edi
c001c159:	5d                   	pop    ebp
c001c15a:	c3                   	ret    
c001c15b:	90                   	nop
c001c15c:	39 f2                	cmp    edx,esi
c001c15e:	77 1c                	ja     c001c17c <__udivdi3+0x7c>
c001c160:	0f bd da             	bsr    ebx,edx
c001c163:	83 f3 1f             	xor    ebx,0x1f
c001c166:	75 24                	jne    c001c18c <__udivdi3+0x8c>
c001c168:	39 f2                	cmp    edx,esi
c001c16a:	72 08                	jb     c001c174 <__udivdi3+0x74>
c001c16c:	39 ef                	cmp    edi,ebp
c001c16e:	0f 87 84 00 00 00    	ja     c001c1f8 <__udivdi3+0xf8>
c001c174:	b8 01 00 00 00       	mov    eax,0x1
c001c179:	eb ac                	jmp    c001c127 <__udivdi3+0x27>
c001c17b:	90                   	nop
c001c17c:	31 db                	xor    ebx,ebx
c001c17e:	31 c0                	xor    eax,eax
c001c180:	89 da                	mov    edx,ebx
c001c182:	83 c4 1c             	add    esp,0x1c
c001c185:	5b                   	pop    ebx
c001c186:	5e                   	pop    esi
c001c187:	5f                   	pop    edi
c001c188:	5d                   	pop    ebp
c001c189:	c3                   	ret    
c001c18a:	66 90                	xchg   ax,ax
c001c18c:	b8 20 00 00 00       	mov    eax,0x20
c001c191:	29 d8                	sub    eax,ebx
c001c193:	88 d9                	mov    cl,bl
c001c195:	d3 e2                	shl    edx,cl
c001c197:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c19b:	89 fa                	mov    edx,edi
c001c19d:	88 c1                	mov    cl,al
c001c19f:	d3 ea                	shr    edx,cl
c001c1a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c1a5:	09 d1                	or     ecx,edx
c001c1a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c1ab:	88 d9                	mov    cl,bl
c001c1ad:	d3 e7                	shl    edi,cl
c001c1af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c1b3:	89 f7                	mov    edi,esi
c001c1b5:	88 c1                	mov    cl,al
c001c1b7:	d3 ef                	shr    edi,cl
c001c1b9:	88 d9                	mov    cl,bl
c001c1bb:	d3 e6                	shl    esi,cl
c001c1bd:	89 ea                	mov    edx,ebp
c001c1bf:	88 c1                	mov    cl,al
c001c1c1:	d3 ea                	shr    edx,cl
c001c1c3:	09 d6                	or     esi,edx
c001c1c5:	89 f0                	mov    eax,esi
c001c1c7:	89 fa                	mov    edx,edi
c001c1c9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c1cd:	89 d7                	mov    edi,edx
c001c1cf:	89 c6                	mov    esi,eax
c001c1d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c1d5:	39 d7                	cmp    edi,edx
c001c1d7:	72 13                	jb     c001c1ec <__udivdi3+0xec>
c001c1d9:	74 09                	je     c001c1e4 <__udivdi3+0xe4>
c001c1db:	89 f0                	mov    eax,esi
c001c1dd:	31 db                	xor    ebx,ebx
c001c1df:	e9 43 ff ff ff       	jmp    c001c127 <__udivdi3+0x27>
c001c1e4:	88 d9                	mov    cl,bl
c001c1e6:	d3 e5                	shl    ebp,cl
c001c1e8:	39 c5                	cmp    ebp,eax
c001c1ea:	73 ef                	jae    c001c1db <__udivdi3+0xdb>
c001c1ec:	8d 46 ff             	lea    eax,[esi-0x1]
c001c1ef:	31 db                	xor    ebx,ebx
c001c1f1:	e9 31 ff ff ff       	jmp    c001c127 <__udivdi3+0x27>
c001c1f6:	66 90                	xchg   ax,ax
c001c1f8:	31 c0                	xor    eax,eax
c001c1fa:	e9 28 ff ff ff       	jmp    c001c127 <__udivdi3+0x27>
c001c1ff:	90                   	nop

c001c200 <__umoddi3>:
c001c200:	55                   	push   ebp
c001c201:	57                   	push   edi
c001c202:	56                   	push   esi
c001c203:	53                   	push   ebx
c001c204:	83 ec 1c             	sub    esp,0x1c
c001c207:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c20b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c20f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c213:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c217:	89 da                	mov    edx,ebx
c001c219:	85 c0                	test   eax,eax
c001c21b:	75 37                	jne    c001c254 <__umoddi3+0x54>
c001c21d:	39 df                	cmp    edi,ebx
c001c21f:	76 13                	jbe    c001c234 <__umoddi3+0x34>
c001c221:	89 f0                	mov    eax,esi
c001c223:	f7 f7                	div    edi
c001c225:	89 d0                	mov    eax,edx
c001c227:	31 d2                	xor    edx,edx
c001c229:	83 c4 1c             	add    esp,0x1c
c001c22c:	5b                   	pop    ebx
c001c22d:	5e                   	pop    esi
c001c22e:	5f                   	pop    edi
c001c22f:	5d                   	pop    ebp
c001c230:	c3                   	ret    
c001c231:	8d 76 00             	lea    esi,[esi+0x0]
c001c234:	89 fd                	mov    ebp,edi
c001c236:	85 ff                	test   edi,edi
c001c238:	75 0b                	jne    c001c245 <__umoddi3+0x45>
c001c23a:	b8 01 00 00 00       	mov    eax,0x1
c001c23f:	31 d2                	xor    edx,edx
c001c241:	f7 f7                	div    edi
c001c243:	89 c5                	mov    ebp,eax
c001c245:	89 d8                	mov    eax,ebx
c001c247:	31 d2                	xor    edx,edx
c001c249:	f7 f5                	div    ebp
c001c24b:	89 f0                	mov    eax,esi
c001c24d:	f7 f5                	div    ebp
c001c24f:	89 d0                	mov    eax,edx
c001c251:	eb d4                	jmp    c001c227 <__umoddi3+0x27>
c001c253:	90                   	nop
c001c254:	89 f1                	mov    ecx,esi
c001c256:	39 d8                	cmp    eax,ebx
c001c258:	76 0a                	jbe    c001c264 <__umoddi3+0x64>
c001c25a:	89 f0                	mov    eax,esi
c001c25c:	83 c4 1c             	add    esp,0x1c
c001c25f:	5b                   	pop    ebx
c001c260:	5e                   	pop    esi
c001c261:	5f                   	pop    edi
c001c262:	5d                   	pop    ebp
c001c263:	c3                   	ret    
c001c264:	0f bd e8             	bsr    ebp,eax
c001c267:	83 f5 1f             	xor    ebp,0x1f
c001c26a:	75 1c                	jne    c001c288 <__umoddi3+0x88>
c001c26c:	39 d8                	cmp    eax,ebx
c001c26e:	72 04                	jb     c001c274 <__umoddi3+0x74>
c001c270:	39 f7                	cmp    edi,esi
c001c272:	77 08                	ja     c001c27c <__umoddi3+0x7c>
c001c274:	89 da                	mov    edx,ebx
c001c276:	29 fe                	sub    esi,edi
c001c278:	19 c2                	sbb    edx,eax
c001c27a:	89 f1                	mov    ecx,esi
c001c27c:	89 c8                	mov    eax,ecx
c001c27e:	83 c4 1c             	add    esp,0x1c
c001c281:	5b                   	pop    ebx
c001c282:	5e                   	pop    esi
c001c283:	5f                   	pop    edi
c001c284:	5d                   	pop    ebp
c001c285:	c3                   	ret    
c001c286:	66 90                	xchg   ax,ax
c001c288:	ba 20 00 00 00       	mov    edx,0x20
c001c28d:	29 ea                	sub    edx,ebp
c001c28f:	89 e9                	mov    ecx,ebp
c001c291:	d3 e0                	shl    eax,cl
c001c293:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c297:	89 f8                	mov    eax,edi
c001c299:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c29d:	88 d1                	mov    cl,dl
c001c29f:	d3 e8                	shr    eax,cl
c001c2a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c2a5:	09 c1                	or     ecx,eax
c001c2a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c2ab:	89 e9                	mov    ecx,ebp
c001c2ad:	d3 e7                	shl    edi,cl
c001c2af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c2b3:	89 d8                	mov    eax,ebx
c001c2b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c2b9:	88 d1                	mov    cl,dl
c001c2bb:	d3 e8                	shr    eax,cl
c001c2bd:	89 c7                	mov    edi,eax
c001c2bf:	89 e9                	mov    ecx,ebp
c001c2c1:	d3 e3                	shl    ebx,cl
c001c2c3:	89 f0                	mov    eax,esi
c001c2c5:	88 d1                	mov    cl,dl
c001c2c7:	d3 e8                	shr    eax,cl
c001c2c9:	09 d8                	or     eax,ebx
c001c2cb:	89 e9                	mov    ecx,ebp
c001c2cd:	d3 e6                	shl    esi,cl
c001c2cf:	89 f3                	mov    ebx,esi
c001c2d1:	89 fa                	mov    edx,edi
c001c2d3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c2d7:	89 d1                	mov    ecx,edx
c001c2d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c2dd:	89 c6                	mov    esi,eax
c001c2df:	89 d7                	mov    edi,edx
c001c2e1:	39 d1                	cmp    ecx,edx
c001c2e3:	72 27                	jb     c001c30c <__umoddi3+0x10c>
c001c2e5:	74 21                	je     c001c308 <__umoddi3+0x108>
c001c2e7:	89 ca                	mov    edx,ecx
c001c2e9:	29 f3                	sub    ebx,esi
c001c2eb:	19 fa                	sbb    edx,edi
c001c2ed:	89 d0                	mov    eax,edx
c001c2ef:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c2f3:	d3 e0                	shl    eax,cl
c001c2f5:	89 e9                	mov    ecx,ebp
c001c2f7:	d3 eb                	shr    ebx,cl
c001c2f9:	09 d8                	or     eax,ebx
c001c2fb:	d3 ea                	shr    edx,cl
c001c2fd:	83 c4 1c             	add    esp,0x1c
c001c300:	5b                   	pop    ebx
c001c301:	5e                   	pop    esi
c001c302:	5f                   	pop    edi
c001c303:	5d                   	pop    ebp
c001c304:	c3                   	ret    
c001c305:	8d 76 00             	lea    esi,[esi+0x0]
c001c308:	39 c3                	cmp    ebx,eax
c001c30a:	73 db                	jae    c001c2e7 <__umoddi3+0xe7>
c001c30c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c310:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c314:	89 d7                	mov    edi,edx
c001c316:	89 c6                	mov    esi,eax
c001c318:	eb cd                	jmp    c001c2e7 <__umoddi3+0xe7>

Disassembly of section .init:

c001c31a <_init>:
c001c31a:	55                   	push   ebp
c001c31b:	89 e5                	mov    ebp,esp
c001c31d:	e8 d2 3d fe ff       	call   c00000f4 <frame_dummy>
c001c322:	e8 e5 fa ff ff       	call   c001be0c <__do_global_ctors_aux>
c001c327:	5d                   	pop    ebp
c001c328:	c3                   	ret    

Disassembly of section .fini:

c001c329 <_fini>:
c001c329:	55                   	push   ebp
c001c32a:	89 e5                	mov    ebp,esp
c001c32c:	e8 53 3d fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c331:	5d                   	pop    ebp
c001c332:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c334 <Computer::~Computer()>:
c001c334:	83 ec 0c             	sub    esp,0xc
c001c337:	ba f8 d5 01 c0       	mov    edx,0xc001d5f8
c001c33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c340:	89 10                	mov    DWORD PTR [eax],edx
c001c342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c346:	83 ec 0c             	sub    esp,0xc
c001c349:	50                   	push   eax
c001c34a:	e8 3b f5 fe ff       	call   c000b88a <Device::~Device()>
c001c34f:	83 c4 10             	add    esp,0x10
c001c352:	90                   	nop
c001c353:	83 c4 0c             	add    esp,0xc
c001c356:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c358 <Computer::~Computer()>:
c001c358:	83 ec 0c             	sub    esp,0xc
c001c35b:	83 ec 0c             	sub    esp,0xc
c001c35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c362:	e8 cd ff ff ff       	call   c001c334 <Computer::~Computer()>
c001c367:	83 c4 10             	add    esp,0x10
c001c36a:	83 ec 08             	sub    esp,0x8
c001c36d:	68 70 01 00 00       	push   0x170
c001c372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c376:	e8 d9 e0 fe ff       	call   c000a454 <operator delete(void*, unsigned long)>
c001c37b:	83 c4 10             	add    esp,0x10
c001c37e:	83 c4 0c             	add    esp,0xc
c001c381:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c382 <idleCommon()>:
c001c382:	83 ec 0c             	sub    esp,0xc
c001c385:	fa                   	cli    
c001c386:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001c38c:	e8 0f 74 ff ff       	call   c00137a0 <schedule()>
c001c391:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001c396:	48                   	dec    eax
c001c397:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001c39c:	75 01                	jne    c001c39f <idleCommon()+0x1d>
c001c39e:	fb                   	sti    
c001c39f:	83 c4 0c             	add    esp,0xc
c001c3a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c3a4 <LinkedList<UnixFile>::~LinkedList()>:
c001c3a4:	90                   	nop
c001c3a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c3a6 <LinkedList<UnixFile>::LinkedList()>:
c001c3a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c3c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c3d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c3db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c3e6:	90                   	nop
c001c3e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c3e8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c3e8:	83 ec 0c             	sub    esp,0xc
c001c3eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c3f0:	75 10                	jne    c001c402 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c3f2:	83 ec 0c             	sub    esp,0xc
c001c3f5:	68 58 d8 01 c0       	push   0xc001d858
c001c3fa:	e8 cc 3d ff ff       	call   c00101cb <KePanic(char const*)>
c001c3ff:	83 c4 10             	add    esp,0x10
c001c402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c406:	8b 00                	mov    eax,DWORD PTR [eax]
c001c408:	85 c0                	test   eax,eax
c001c40a:	74 34                	je     c001c440 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c410:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c413:	85 c0                	test   eax,eax
c001c415:	74 29                	je     c001c440 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c41b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c41e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c422:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c429:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c42d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c434:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c437:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c43e:	eb 65                	jmp    c001c4a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c444:	8b 00                	mov    eax,DWORD PTR [eax]
c001c446:	85 c0                	test   eax,eax
c001c448:	75 4b                	jne    c001c495 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c44e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c451:	85 c0                	test   eax,eax
c001c453:	75 40                	jne    c001c495 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c459:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c45d:	89 10                	mov    DWORD PTR [eax],edx
c001c45f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c463:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c467:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c46e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c471:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c47c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c47f:	85 c0                	test   eax,eax
c001c481:	74 22                	je     c001c4a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c483:	83 ec 0c             	sub    esp,0xc
c001c486:	68 7a d8 01 c0       	push   0xc001d87a
c001c48b:	e8 3b 3d ff ff       	call   c00101cb <KePanic(char const*)>
c001c490:	83 c4 10             	add    esp,0x10
c001c493:	eb 10                	jmp    c001c4a5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c495:	83 ec 0c             	sub    esp,0xc
c001c498:	68 84 d8 01 c0       	push   0xc001d884
c001c49d:	e8 29 3d ff ff       	call   c00101cb <KePanic(char const*)>
c001c4a2:	83 c4 10             	add    esp,0x10
c001c4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4ac:	8d 50 01             	lea    edx,[eax+0x1]
c001c4af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4b6:	90                   	nop
c001c4b7:	83 c4 0c             	add    esp,0xc
c001c4ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c4bc <LinkedList<UnixFile>::getFirstElement()>:
c001c4bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c4c4 <LinkedList<UnixFile>::removeFirst()>:
c001c4c4:	83 ec 0c             	sub    esp,0xc
c001c4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4cd:	85 c0                	test   eax,eax
c001c4cf:	75 12                	jne    c001c4e3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c4d1:	83 ec 0c             	sub    esp,0xc
c001c4d4:	68 90 d8 01 c0       	push   0xc001d890
c001c4d9:	e8 ed 3c ff ff       	call   c00101cb <KePanic(char const*)>
c001c4de:	83 c4 10             	add    esp,0x10
c001c4e1:	eb 7e                	jmp    c001c561 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4ed:	85 c0                	test   eax,eax
c001c4ef:	74 10                	je     c001c501 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c4f1:	83 ec 0c             	sub    esp,0xc
c001c4f4:	68 db d8 01 c0       	push   0xc001d8db
c001c4f9:	e8 cd 3c ff ff       	call   c00101cb <KePanic(char const*)>
c001c4fe:	83 c4 10             	add    esp,0x10
c001c501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c505:	8b 00                	mov    eax,DWORD PTR [eax]
c001c507:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c50a:	85 c0                	test   eax,eax
c001c50c:	75 33                	jne    c001c541 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c50e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c512:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c527:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c52a:	83 f8 01             	cmp    eax,0x1
c001c52d:	74 21                	je     c001c550 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c52f:	83 ec 0c             	sub    esp,0xc
c001c532:	68 b4 d8 01 c0       	push   0xc001d8b4
c001c537:	e8 8f 3c ff ff       	call   c00101cb <KePanic(char const*)>
c001c53c:	83 c4 10             	add    esp,0x10
c001c53f:	eb 0f                	jmp    c001c550 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c545:	8b 00                	mov    eax,DWORD PTR [eax]
c001c547:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c54e:	89 10                	mov    DWORD PTR [eax],edx
c001c550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c554:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c557:	8d 50 ff             	lea    edx,[eax-0x1]
c001c55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c55e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c561:	83 c4 0c             	add    esp,0xc
c001c564:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c566 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c566:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c56a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c56d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c56e <DriverlessDevice::~DriverlessDevice()>:
c001c56e:	ba 1c df 01 c0       	mov    edx,0xc001df1c
c001c573:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c577:	89 10                	mov    DWORD PTR [eax],edx
c001c579:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c57d:	50                   	push   eax
c001c57e:	e8 07 f3 fe ff       	call   c000b88a <Device::~Device()>
c001c583:	83 c4 04             	add    esp,0x4
c001c586:	90                   	nop
c001c587:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c588 <DriverlessDevice::~DriverlessDevice()>:
c001c588:	83 ec 0c             	sub    esp,0xc
c001c58b:	83 ec 0c             	sub    esp,0xc
c001c58e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c592:	e8 d7 ff ff ff       	call   c001c56e <DriverlessDevice::~DriverlessDevice()>
c001c597:	83 c4 10             	add    esp,0x10
c001c59a:	83 ec 08             	sub    esp,0x8
c001c59d:	68 58 01 00 00       	push   0x158
c001c5a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5a6:	e8 a9 de fe ff       	call   c000a454 <operator delete(void*, unsigned long)>
c001c5ab:	83 c4 10             	add    esp,0x10
c001c5ae:	83 c4 0c             	add    esp,0xc
c001c5b1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c5b2 <LinkedList<Device>::addElement(Device*)>:
c001c5b2:	83 ec 0c             	sub    esp,0xc
c001c5b5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c5ba:	75 10                	jne    c001c5cc <LinkedList<Device>::addElement(Device*)+0x1a>
c001c5bc:	83 ec 0c             	sub    esp,0xc
c001c5bf:	68 58 d8 01 c0       	push   0xc001d858
c001c5c4:	e8 02 3c ff ff       	call   c00101cb <KePanic(char const*)>
c001c5c9:	83 c4 10             	add    esp,0x10
c001c5cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5d2:	85 c0                	test   eax,eax
c001c5d4:	74 3a                	je     c001c610 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c5d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5dd:	85 c0                	test   eax,eax
c001c5df:	74 2f                	je     c001c610 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c5e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5ec:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c5f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5fa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c5fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c601:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c604:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c60e:	eb 68                	jmp    c001c678 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c614:	8b 00                	mov    eax,DWORD PTR [eax]
c001c616:	85 c0                	test   eax,eax
c001c618:	75 4e                	jne    c001c668 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c61a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c61e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c621:	85 c0                	test   eax,eax
c001c623:	75 43                	jne    c001c668 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c625:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c629:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c62d:	89 10                	mov    DWORD PTR [eax],edx
c001c62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c633:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c637:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c641:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c64b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c64f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c652:	85 c0                	test   eax,eax
c001c654:	74 22                	je     c001c678 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c656:	83 ec 0c             	sub    esp,0xc
c001c659:	68 7a d8 01 c0       	push   0xc001d87a
c001c65e:	e8 68 3b ff ff       	call   c00101cb <KePanic(char const*)>
c001c663:	83 c4 10             	add    esp,0x10
c001c666:	eb 10                	jmp    c001c678 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c668:	83 ec 0c             	sub    esp,0xc
c001c66b:	68 84 d8 01 c0       	push   0xc001d884
c001c670:	e8 56 3b ff ff       	call   c00101cb <KePanic(char const*)>
c001c675:	83 c4 10             	add    esp,0x10
c001c678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c67f:	8d 50 01             	lea    edx,[eax+0x1]
c001c682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c686:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c689:	90                   	nop
c001c68a:	83 c4 0c             	add    esp,0xc
c001c68d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c68e <LinkedList<Device>::LinkedList()>:
c001c68e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c692:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c69c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c6ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c6b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c6c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c6ce:	90                   	nop
c001c6cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c6d0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c6d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6d6:	85 c0                	test   eax,eax
c001c6d8:	75 0e                	jne    c001c6e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c6da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6e1:	85 c0                	test   eax,eax
c001c6e3:	75 03                	jne    c001c6e8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c6e5:	b0 01                	mov    al,0x1
c001c6e7:	c3                   	ret    
c001c6e8:	b0 00                	mov    al,0x0
c001c6ea:	90                   	nop
c001c6eb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c6ec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c6ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6f2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c6f4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c6f4:	83 ec 0c             	sub    esp,0xc
c001c6f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6fd:	85 c0                	test   eax,eax
c001c6ff:	75 17                	jne    c001c718 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c701:	83 ec 0c             	sub    esp,0xc
c001c704:	68 90 d8 01 c0       	push   0xc001d890
c001c709:	e8 bd 3a ff ff       	call   c00101cb <KePanic(char const*)>
c001c70e:	83 c4 10             	add    esp,0x10
c001c711:	e9 92 00 00 00       	jmp    c001c7a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c716:	66 90                	xchg   ax,ax
c001c718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c71f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c722:	85 c0                	test   eax,eax
c001c724:	0f 95 c0             	setne  al
c001c727:	84 c0                	test   al,al
c001c729:	74 11                	je     c001c73c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c72b:	83 ec 0c             	sub    esp,0xc
c001c72e:	68 db d8 01 c0       	push   0xc001d8db
c001c733:	e8 93 3a ff ff       	call   c00101cb <KePanic(char const*)>
c001c738:	83 c4 10             	add    esp,0x10
c001c73b:	90                   	nop
c001c73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c740:	8b 00                	mov    eax,DWORD PTR [eax]
c001c742:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c745:	85 c0                	test   eax,eax
c001c747:	0f 94 c0             	sete   al
c001c74a:	84 c0                	test   al,al
c001c74c:	74 36                	je     c001c784 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c74e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c752:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c75c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c767:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c76a:	83 f8 01             	cmp    eax,0x1
c001c76d:	74 25                	je     c001c794 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c76f:	83 ec 0c             	sub    esp,0xc
c001c772:	68 b4 d8 01 c0       	push   0xc001d8b4
c001c777:	e8 4f 3a ff ff       	call   c00101cb <KePanic(char const*)>
c001c77c:	83 c4 10             	add    esp,0x10
c001c77f:	eb 13                	jmp    c001c794 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c781:	8d 76 00             	lea    esi,[esi+0x0]
c001c784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c788:	8b 00                	mov    eax,DWORD PTR [eax]
c001c78a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c78d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c791:	89 10                	mov    DWORD PTR [eax],edx
c001c793:	90                   	nop
c001c794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c798:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c79b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c79e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c7a5:	8d 76 00             	lea    esi,[esi+0x0]
c001c7a8:	83 c4 0c             	add    esp,0xc
c001c7ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c7ac <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c7ac:	83 ec 0c             	sub    esp,0xc
c001c7af:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c7b4:	75 12                	jne    c001c7c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c7b6:	83 ec 0c             	sub    esp,0xc
c001c7b9:	68 58 d8 01 c0       	push   0xc001d858
c001c7be:	e8 08 3a ff ff       	call   c00101cb <KePanic(char const*)>
c001c7c3:	83 c4 10             	add    esp,0x10
c001c7c6:	66 90                	xchg   ax,ax
c001c7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7ce:	85 c0                	test   eax,eax
c001c7d0:	74 36                	je     c001c808 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7d9:	85 c0                	test   eax,eax
c001c7db:	74 2b                	je     c001c808 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7e8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7fd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c804:	eb 6a                	jmp    c001c870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c806:	66 90                	xchg   ax,ax
c001c808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c80e:	85 c0                	test   eax,eax
c001c810:	75 4e                	jne    c001c860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c816:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c819:	85 c0                	test   eax,eax
c001c81b:	75 43                	jne    c001c860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c81d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c821:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c825:	89 10                	mov    DWORD PTR [eax],edx
c001c827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c82f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c836:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c839:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c844:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c847:	85 c0                	test   eax,eax
c001c849:	74 25                	je     c001c870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c84b:	83 ec 0c             	sub    esp,0xc
c001c84e:	68 7a d8 01 c0       	push   0xc001d87a
c001c853:	e8 73 39 ff ff       	call   c00101cb <KePanic(char const*)>
c001c858:	83 c4 10             	add    esp,0x10
c001c85b:	eb 13                	jmp    c001c870 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c85d:	8d 76 00             	lea    esi,[esi+0x0]
c001c860:	83 ec 0c             	sub    esp,0xc
c001c863:	68 84 d8 01 c0       	push   0xc001d884
c001c868:	e8 5e 39 ff ff       	call   c00101cb <KePanic(char const*)>
c001c86d:	83 c4 10             	add    esp,0x10
c001c870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c874:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c877:	8d 50 01             	lea    edx,[eax+0x1]
c001c87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c87e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c881:	90                   	nop
c001c882:	83 c4 0c             	add    esp,0xc
c001c885:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c888 <ACPI::~ACPI()>:
c001c888:	83 ec 0c             	sub    esp,0xc
c001c88b:	ba 94 e4 01 c0       	mov    edx,0xc001e494
c001c890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c894:	89 10                	mov    DWORD PTR [eax],edx
c001c896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89a:	83 ec 0c             	sub    esp,0xc
c001c89d:	50                   	push   eax
c001c89e:	e8 e7 ef fe ff       	call   c000b88a <Device::~Device()>
c001c8a3:	83 c4 10             	add    esp,0x10
c001c8a6:	90                   	nop
c001c8a7:	83 c4 0c             	add    esp,0xc
c001c8aa:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c8ac <ACPI::~ACPI()>:
c001c8ac:	83 ec 0c             	sub    esp,0xc
c001c8af:	83 ec 0c             	sub    esp,0xc
c001c8b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8b6:	e8 cd ff ff ff       	call   c001c888 <ACPI::~ACPI()>
c001c8bb:	83 c4 10             	add    esp,0x10
c001c8be:	83 ec 08             	sub    esp,0x8
c001c8c1:	68 64 12 00 00       	push   0x1264
c001c8c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8ca:	e8 85 db fe ff       	call   c000a454 <operator delete(void*, unsigned long)>
c001c8cf:	83 c4 10             	add    esp,0x10
c001c8d2:	83 c4 0c             	add    esp,0xc
c001c8d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c8d8 <LinkedList<Device>::~LinkedList()>:
c001c8d8:	90                   	nop
c001c8d9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c8dc <LinkedList<Device>::isEmpty()>:
c001c8dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8e2:	85 c0                	test   eax,eax
c001c8e4:	75 0e                	jne    c001c8f4 <LinkedList<Device>::isEmpty()+0x18>
c001c8e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8ed:	85 c0                	test   eax,eax
c001c8ef:	75 03                	jne    c001c8f4 <LinkedList<Device>::isEmpty()+0x18>
c001c8f1:	b0 01                	mov    al,0x1
c001c8f3:	c3                   	ret    
c001c8f4:	b0 00                	mov    al,0x0
c001c8f6:	90                   	nop
c001c8f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c8f8 <LinkedList<Device>::getFirstElement()>:
c001c8f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8fe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c900 <LinkedList<Device>::removeFirst()>:
c001c900:	83 ec 0c             	sub    esp,0xc
c001c903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c907:	8b 00                	mov    eax,DWORD PTR [eax]
c001c909:	85 c0                	test   eax,eax
c001c90b:	75 17                	jne    c001c924 <LinkedList<Device>::removeFirst()+0x24>
c001c90d:	83 ec 0c             	sub    esp,0xc
c001c910:	68 90 d8 01 c0       	push   0xc001d890
c001c915:	e8 b1 38 ff ff       	call   c00101cb <KePanic(char const*)>
c001c91a:	83 c4 10             	add    esp,0x10
c001c91d:	e9 92 00 00 00       	jmp    c001c9b4 <LinkedList<Device>::removeFirst()+0xb4>
c001c922:	66 90                	xchg   ax,ax
c001c924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c928:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c92b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c931:	85 c0                	test   eax,eax
c001c933:	74 13                	je     c001c948 <LinkedList<Device>::removeFirst()+0x48>
c001c935:	83 ec 0c             	sub    esp,0xc
c001c938:	68 db d8 01 c0       	push   0xc001d8db
c001c93d:	e8 89 38 ff ff       	call   c00101cb <KePanic(char const*)>
c001c942:	83 c4 10             	add    esp,0x10
c001c945:	8d 76 00             	lea    esi,[esi+0x0]
c001c948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c94c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c94e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c954:	85 c0                	test   eax,eax
c001c956:	75 34                	jne    c001c98c <LinkedList<Device>::removeFirst()+0x8c>
c001c958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c95c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c966:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c96d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c971:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c974:	83 f8 01             	cmp    eax,0x1
c001c977:	74 27                	je     c001c9a0 <LinkedList<Device>::removeFirst()+0xa0>
c001c979:	83 ec 0c             	sub    esp,0xc
c001c97c:	68 b4 d8 01 c0       	push   0xc001d8b4
c001c981:	e8 45 38 ff ff       	call   c00101cb <KePanic(char const*)>
c001c986:	83 c4 10             	add    esp,0x10
c001c989:	eb 15                	jmp    c001c9a0 <LinkedList<Device>::removeFirst()+0xa0>
c001c98b:	90                   	nop
c001c98c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c990:	8b 00                	mov    eax,DWORD PTR [eax]
c001c992:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c99c:	89 10                	mov    DWORD PTR [eax],edx
c001c99e:	66 90                	xchg   ax,ax
c001c9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9a4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c9a7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c9aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c9b1:	8d 76 00             	lea    esi,[esi+0x0]
c001c9b4:	83 c4 0c             	add    esp,0xc
c001c9b7:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c9b8 <CPU::~CPU()>:
c001c9b8:	83 ec 0c             	sub    esp,0xc
c001c9bb:	ba 30 e6 01 c0       	mov    edx,0xc001e630
c001c9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9c4:	89 10                	mov    DWORD PTR [eax],edx
c001c9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9ca:	83 ec 0c             	sub    esp,0xc
c001c9cd:	50                   	push   eax
c001c9ce:	e8 b7 ee fe ff       	call   c000b88a <Device::~Device()>
c001c9d3:	83 c4 10             	add    esp,0x10
c001c9d6:	90                   	nop
c001c9d7:	83 c4 0c             	add    esp,0xc
c001c9da:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c9dc <CPU::~CPU()>:
c001c9dc:	83 ec 0c             	sub    esp,0xc
c001c9df:	83 ec 0c             	sub    esp,0xc
c001c9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9e6:	e8 cd ff ff ff       	call   c001c9b8 <CPU::~CPU()>
c001c9eb:	83 c4 10             	add    esp,0x10
c001c9ee:	83 ec 08             	sub    esp,0x8
c001c9f1:	68 94 11 00 00       	push   0x1194
c001c9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9fa:	e8 55 da fe ff       	call   c000a454 <operator delete(void*, unsigned long)>
c001c9ff:	83 c4 10             	add    esp,0x10
c001ca02:	83 c4 0c             	add    esp,0xc
c001ca05:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ca08 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ca08:	90                   	nop
c001ca09:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ca0c <ThreadControlBlock::ThreadControlBlock()>:
c001ca0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca10:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ca17:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca1b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ca22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca26:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ca2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca31:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001ca38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca3c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ca43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca47:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ca4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca4f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ca53:	90                   	nop
c001ca54:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ca58 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ca58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca5c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca6d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca71:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ca78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca86:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca91:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ca98:	90                   	nop
c001ca99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ca9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ca9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001caa0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001caa3:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001caa4 <PCI::~PCI()>:
c001caa4:	83 ec 0c             	sub    esp,0xc
c001caa7:	ba b0 f2 01 c0       	mov    edx,0xc001f2b0
c001caac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab0:	89 10                	mov    DWORD PTR [eax],edx
c001cab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cab6:	83 ec 0c             	sub    esp,0xc
c001cab9:	50                   	push   eax
c001caba:	e8 55 e8 fe ff       	call   c000b314 <Bus::~Bus()>
c001cabf:	83 c4 10             	add    esp,0x10
c001cac2:	90                   	nop
c001cac3:	83 c4 0c             	add    esp,0xc
c001cac6:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cac8 <PCI::~PCI()>:
c001cac8:	83 ec 0c             	sub    esp,0xc
c001cacb:	83 ec 0c             	sub    esp,0xc
c001cace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cad2:	e8 cd ff ff ff       	call   c001caa4 <PCI::~PCI()>
c001cad7:	83 c4 10             	add    esp,0x10
c001cada:	83 ec 08             	sub    esp,0x8
c001cadd:	68 5c 01 00 00       	push   0x15c
c001cae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cae6:	e8 69 d9 fe ff       	call   c000a454 <operator delete(void*, unsigned long)>
c001caeb:	83 c4 10             	add    esp,0x10
c001caee:	83 c4 0c             	add    esp,0xc
c001caf1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001caf2 <IDE::~IDE()>:
c001caf2:	83 ec 0c             	sub    esp,0xc
c001caf5:	ba 64 f3 01 c0       	mov    edx,0xc001f364
c001cafa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cafe:	89 10                	mov    DWORD PTR [eax],edx
c001cb00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb04:	83 ec 0c             	sub    esp,0xc
c001cb07:	50                   	push   eax
c001cb08:	e8 f7 f1 fe ff       	call   c000bd04 <HardDiskController::~HardDiskController()>
c001cb0d:	83 c4 10             	add    esp,0x10
c001cb10:	90                   	nop
c001cb11:	83 c4 0c             	add    esp,0xc
c001cb14:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cb16 <IDE::~IDE()>:
c001cb16:	83 ec 0c             	sub    esp,0xc
c001cb19:	83 ec 0c             	sub    esp,0xc
c001cb1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb20:	e8 cd ff ff ff       	call   c001caf2 <IDE::~IDE()>
c001cb25:	83 c4 10             	add    esp,0x10
c001cb28:	83 ec 08             	sub    esp,0x8
c001cb2b:	68 70 02 00 00       	push   0x270
c001cb30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb34:	e8 1b d9 fe ff       	call   c000a454 <operator delete(void*, unsigned long)>
c001cb39:	83 c4 10             	add    esp,0x10
c001cb3c:	83 c4 0c             	add    esp,0xc
c001cb3f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cb40 <SATABus::~SATABus()>:
c001cb40:	83 ec 0c             	sub    esp,0xc
c001cb43:	ba b4 f3 01 c0       	mov    edx,0xc001f3b4
c001cb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb4c:	89 10                	mov    DWORD PTR [eax],edx
c001cb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb52:	83 ec 0c             	sub    esp,0xc
c001cb55:	50                   	push   eax
c001cb56:	e8 a9 f1 fe ff       	call   c000bd04 <HardDiskController::~HardDiskController()>
c001cb5b:	83 c4 10             	add    esp,0x10
c001cb5e:	90                   	nop
c001cb5f:	83 c4 0c             	add    esp,0xc
c001cb62:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cb64 <SATABus::~SATABus()>:
c001cb64:	83 ec 0c             	sub    esp,0xc
c001cb67:	83 ec 0c             	sub    esp,0xc
c001cb6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb6e:	e8 cd ff ff ff       	call   c001cb40 <SATABus::~SATABus()>
c001cb73:	83 c4 10             	add    esp,0x10
c001cb76:	83 ec 08             	sub    esp,0x8
c001cb79:	68 64 01 00 00       	push   0x164
c001cb7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb82:	e8 cd d8 fe ff       	call   c000a454 <operator delete(void*, unsigned long)>
c001cb87:	83 c4 10             	add    esp,0x10
c001cb8a:	83 c4 0c             	add    esp,0xc
c001cb8d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cb8e <ATA::~ATA()>:
c001cb8e:	83 ec 0c             	sub    esp,0xc
c001cb91:	ba f4 f3 01 c0       	mov    edx,0xc001f3f4
c001cb96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb9a:	89 10                	mov    DWORD PTR [eax],edx
c001cb9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba0:	83 ec 0c             	sub    esp,0xc
c001cba3:	50                   	push   eax
c001cba4:	e8 3d f2 fe ff       	call   c000bde6 <PhysicalDisk::~PhysicalDisk()>
c001cba9:	83 c4 10             	add    esp,0x10
c001cbac:	90                   	nop
c001cbad:	83 c4 0c             	add    esp,0xc
c001cbb0:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cbb2 <ATA::~ATA()>:
c001cbb2:	83 ec 0c             	sub    esp,0xc
c001cbb5:	83 ec 0c             	sub    esp,0xc
c001cbb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbbc:	e8 cd ff ff ff       	call   c001cb8e <ATA::~ATA()>
c001cbc1:	83 c4 10             	add    esp,0x10
c001cbc4:	83 ec 08             	sub    esp,0x8
c001cbc7:	68 7c 01 00 00       	push   0x17c
c001cbcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd0:	e8 7f d8 fe ff       	call   c000a454 <operator delete(void*, unsigned long)>
c001cbd5:	83 c4 10             	add    esp,0x10
c001cbd8:	83 c4 0c             	add    esp,0xc
c001cbdb:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cbdc <ATAPI::~ATAPI()>:
c001cbdc:	83 ec 0c             	sub    esp,0xc
c001cbdf:	ba 3c f4 01 c0       	mov    edx,0xc001f43c
c001cbe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbe8:	89 10                	mov    DWORD PTR [eax],edx
c001cbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbee:	83 ec 0c             	sub    esp,0xc
c001cbf1:	50                   	push   eax
c001cbf2:	e8 ef f1 fe ff       	call   c000bde6 <PhysicalDisk::~PhysicalDisk()>
c001cbf7:	83 c4 10             	add    esp,0x10
c001cbfa:	90                   	nop
c001cbfb:	83 c4 0c             	add    esp,0xc
c001cbfe:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cc00 <ATAPI::~ATAPI()>:
c001cc00:	83 ec 0c             	sub    esp,0xc
c001cc03:	83 ec 0c             	sub    esp,0xc
c001cc06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc0a:	e8 cd ff ff ff       	call   c001cbdc <ATAPI::~ATAPI()>
c001cc0f:	83 c4 10             	add    esp,0x10
c001cc12:	83 ec 08             	sub    esp,0x8
c001cc15:	68 84 01 00 00       	push   0x184
c001cc1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc1e:	e8 31 d8 fe ff       	call   c000a454 <operator delete(void*, unsigned long)>
c001cc23:	83 c4 10             	add    esp,0x10
c001cc26:	83 c4 0c             	add    esp,0xc
c001cc29:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cc2a <SATA::~SATA()>:
c001cc2a:	83 ec 0c             	sub    esp,0xc
c001cc2d:	ba f0 f4 01 c0       	mov    edx,0xc001f4f0
c001cc32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc36:	89 10                	mov    DWORD PTR [eax],edx
c001cc38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc3c:	83 ec 0c             	sub    esp,0xc
c001cc3f:	50                   	push   eax
c001cc40:	e8 a1 f1 fe ff       	call   c000bde6 <PhysicalDisk::~PhysicalDisk()>
c001cc45:	83 c4 10             	add    esp,0x10
c001cc48:	90                   	nop
c001cc49:	83 c4 0c             	add    esp,0xc
c001cc4c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cc4e <SATA::~SATA()>:
c001cc4e:	83 ec 0c             	sub    esp,0xc
c001cc51:	83 ec 0c             	sub    esp,0xc
c001cc54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc58:	e8 cd ff ff ff       	call   c001cc2a <SATA::~SATA()>
c001cc5d:	83 c4 10             	add    esp,0x10
c001cc60:	83 ec 08             	sub    esp,0x8
c001cc63:	68 7c 01 00 00       	push   0x17c
c001cc68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc6c:	e8 e3 d7 fe ff       	call   c000a454 <operator delete(void*, unsigned long)>
c001cc71:	83 c4 10             	add    esp,0x10
c001cc74:	83 c4 0c             	add    esp,0xc
c001cc77:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cc78 <SATAPI::~SATAPI()>:
c001cc78:	83 ec 0c             	sub    esp,0xc
c001cc7b:	ba 28 f6 01 c0       	mov    edx,0xc001f628
c001cc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc84:	89 10                	mov    DWORD PTR [eax],edx
c001cc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc8a:	83 ec 0c             	sub    esp,0xc
c001cc8d:	50                   	push   eax
c001cc8e:	e8 53 f1 fe ff       	call   c000bde6 <PhysicalDisk::~PhysicalDisk()>
c001cc93:	83 c4 10             	add    esp,0x10
c001cc96:	90                   	nop
c001cc97:	83 c4 0c             	add    esp,0xc
c001cc9a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cc9c <SATAPI::~SATAPI()>:
c001cc9c:	83 ec 0c             	sub    esp,0xc
c001cc9f:	83 ec 0c             	sub    esp,0xc
c001cca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cca6:	e8 cd ff ff ff       	call   c001cc78 <SATAPI::~SATAPI()>
c001ccab:	83 c4 10             	add    esp,0x10
c001ccae:	83 ec 08             	sub    esp,0x8
c001ccb1:	68 84 01 00 00       	push   0x184
c001ccb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccba:	e8 95 d7 fe ff       	call   c000a454 <operator delete(void*, unsigned long)>
c001ccbf:	83 c4 10             	add    esp,0x10
c001ccc2:	83 c4 0c             	add    esp,0xc
c001ccc5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001ccc6 <IOAPIC::~IOAPIC()>:
c001ccc6:	83 ec 0c             	sub    esp,0xc
c001ccc9:	ba 68 f6 01 c0       	mov    edx,0xc001f668
c001ccce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd2:	89 10                	mov    DWORD PTR [eax],edx
c001ccd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccd8:	83 ec 0c             	sub    esp,0xc
c001ccdb:	50                   	push   eax
c001ccdc:	e8 a9 eb fe ff       	call   c000b88a <Device::~Device()>
c001cce1:	83 c4 10             	add    esp,0x10
c001cce4:	90                   	nop
c001cce5:	83 c4 0c             	add    esp,0xc
c001cce8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ccea <IOAPIC::~IOAPIC()>:
c001ccea:	83 ec 0c             	sub    esp,0xc
c001cced:	83 ec 0c             	sub    esp,0xc
c001ccf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccf4:	e8 cd ff ff ff       	call   c001ccc6 <IOAPIC::~IOAPIC()>
c001ccf9:	83 c4 10             	add    esp,0x10
c001ccfc:	83 ec 08             	sub    esp,0x8
c001ccff:	68 68 01 00 00       	push   0x168
c001cd04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd08:	e8 47 d7 fe ff       	call   c000a454 <operator delete(void*, unsigned long)>
c001cd0d:	83 c4 10             	add    esp,0x10
c001cd10:	83 c4 0c             	add    esp,0xc
c001cd13:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cd14 <APICTimer::~APICTimer()>:
c001cd14:	83 ec 0c             	sub    esp,0xc
c001cd17:	ba b0 f6 01 c0       	mov    edx,0xc001f6b0
c001cd1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd20:	89 10                	mov    DWORD PTR [eax],edx
c001cd22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd26:	83 ec 0c             	sub    esp,0xc
c001cd29:	50                   	push   eax
c001cd2a:	e8 99 04 ff ff       	call   c000d1c8 <Timer::~Timer()>
c001cd2f:	83 c4 10             	add    esp,0x10
c001cd32:	90                   	nop
c001cd33:	83 c4 0c             	add    esp,0xc
c001cd36:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001cd38 <APICTimer::~APICTimer()>:
c001cd38:	83 ec 0c             	sub    esp,0xc
c001cd3b:	83 ec 0c             	sub    esp,0xc
c001cd3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd42:	e8 cd ff ff ff       	call   c001cd14 <APICTimer::~APICTimer()>
c001cd47:	83 c4 10             	add    esp,0x10
c001cd4a:	83 ec 08             	sub    esp,0x8
c001cd4d:	68 60 01 00 00       	push   0x160
c001cd52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd56:	e8 f9 d6 fe ff       	call   c000a454 <operator delete(void*, unsigned long)>
c001cd5b:	83 c4 10             	add    esp,0x10
c001cd5e:	83 c4 0c             	add    esp,0xc
c001cd61:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001cd64 <PIT::~PIT()>:
c001cd64:	83 ec 0c             	sub    esp,0xc
c001cd67:	ba 00 f7 01 c0       	mov    edx,0xc001f700
c001cd6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd70:	89 10                	mov    DWORD PTR [eax],edx
c001cd72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd76:	83 ec 0c             	sub    esp,0xc
c001cd79:	50                   	push   eax
c001cd7a:	e8 49 04 ff ff       	call   c000d1c8 <Timer::~Timer()>
c001cd7f:	83 c4 10             	add    esp,0x10
c001cd82:	90                   	nop
c001cd83:	83 c4 0c             	add    esp,0xc
c001cd86:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cd88 <PIT::~PIT()>:
c001cd88:	83 ec 0c             	sub    esp,0xc
c001cd8b:	83 ec 0c             	sub    esp,0xc
c001cd8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd92:	e8 cd ff ff ff       	call   c001cd64 <PIT::~PIT()>
c001cd97:	83 c4 10             	add    esp,0x10
c001cd9a:	83 ec 08             	sub    esp,0x8
c001cd9d:	68 5c 01 00 00       	push   0x15c
c001cda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cda6:	e8 a9 d6 fe ff       	call   c000a454 <operator delete(void*, unsigned long)>
c001cdab:	83 c4 10             	add    esp,0x10
c001cdae:	83 c4 0c             	add    esp,0xc
c001cdb1:	c3                   	ret    

Disassembly of section userkernel:

c0020000 <KiDefaultSignalHandlerAbort(int)>:
c0020000:	57                   	push   edi
c0020001:	b9 07 00 00 00       	mov    ecx,0x7
c0020006:	56                   	push   esi
c0020007:	be 21 e7 01 c0       	mov    esi,0xc001e721
c002000c:	83 ec 24             	sub    esp,0x24
c002000f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020013:	fc                   	cld    
c0020014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002001a:	50                   	push   eax
c002001b:	6a 00                	push   0x0
c002001d:	6a 38                	push   0x38
c002001f:	6a 01                	push   0x1
c0020021:	e8 2c 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020026:	83 c4 34             	add    esp,0x34
c0020029:	5e                   	pop    esi
c002002a:	5f                   	pop    edi
c002002b:	c3                   	ret    

c002002c <KiDefaultSignalHandlerTerminate(int)>:
c002002c:	57                   	push   edi
c002002d:	b9 08 00 00 00       	mov    ecx,0x8
c0020032:	56                   	push   esi
c0020033:	be 3d e7 01 c0       	mov    esi,0xc001e73d
c0020038:	83 ec 24             	sub    esp,0x24
c002003b:	89 e7                	mov    edi,esp
c002003d:	fc                   	cld    
c002003e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020040:	54                   	push   esp
c0020041:	6a 00                	push   0x0
c0020043:	6a 37                	push   0x37
c0020045:	6a 01                	push   0x1
c0020047:	e8 06 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002004c:	83 c4 34             	add    esp,0x34
c002004f:	5e                   	pop    esi
c0020050:	5f                   	pop    edi
c0020051:	c3                   	ret    

c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0020052:	53                   	push   ebx
c0020053:	83 ec 10             	sub    esp,0x10
c0020056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002005a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002005e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020066:	cd 60                	int    0x60
c0020068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002006c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020078:	83 c4 10             	add    esp,0x10
c002007b:	5b                   	pop    ebx
c002007c:	c3                   	ret    

Disassembly of section align_previous:

c0021000 <DO_NOT_DELETE()>:
c0021000:	c3                   	ret    
