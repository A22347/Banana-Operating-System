
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 d0 f4 01 c0       	mov    eax,0xc001f4d0
c0000025:	3d d0 f4 01 c0       	cmp    eax,0xc001f4d0
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 d0 f4 01 c0       	push   0xc001f4d0
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 d0 f4 01 c0       	mov    eax,0xc001f4d0
c0000051:	2d d0 f4 01 c0       	sub    eax,0xc001f4d0
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 d0 f4 01 c0       	push   0xc001f4d0
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d 00 f7 01 c0 00 	cmp    BYTE PTR ds:0xc001f700,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 78 c9 01 c0       	mov    ebx,0xc001c978
c0000097:	81 eb 74 c9 01 c0    	sub    ebx,0xc001c974
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 74 c9 01 c0       	mov    esi,0xc001c974
c00000a6:	a1 04 f7 01 c0       	mov    eax,ds:0xc001f704
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 04 f7 01 c0       	mov    ds:0xc001f704,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 04 f7 01 c0       	mov    eax,ds:0xc001f704
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 d0 f4 01 c0       	push   0xc001f4d0
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 00 f7 01 c0 01 	mov    BYTE PTR ds:0xc001f700,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 08 f7 01 c0       	push   0xc001f708
c0000108:	68 d0 f4 01 c0       	push   0xc001f4d0
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 84 29 01 00       	call   c0012c34 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 18 a0 00 00       	call   c000a2e0 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 62 29 01 00       	call   c0012c34 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 4b 2e 01 00       	call   c001313c <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 9a 34 01 00       	call   c0013794 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 00 05 02 c0 	lgdtd  ds:0xc0020500
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 c8 fd 00 00       	jmp    c001014a <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 20 f7 01 c0       	mov    ds:0xc001f720,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 20 f7 01 c0    	mov    DWORD PTR ds:0xc001f720,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d 20 f7 01 c0    	mov    ebx,DWORD PTR ds:0xc001f720
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 80 c9 01 c0 02 	test   BYTE PTR [edx-0x3ffe3680],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 80 c9 01 c0 01 	test   BYTE PTR [edx-0x3ffe3680],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 80 c9 01 c0 08 	test   BYTE PTR [edx-0x3ffe3680],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 80 c9 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3680],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 80 c9 01 c0 01 	test   BYTE PTR [edx-0x3ffe3680],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 40 f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f740
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 40 f7 01 c0    	mov    DWORD PTR ds:0xc001f740,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 44 f7 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe08bc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 44 f7 01 c0 	mov    DWORD PTR [eax*4-0x3ffe08bc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 40 f7 01 c0    	mov    DWORD PTR ds:0xc001f740,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 6c f7 01 c0    	cmp    DWORD PTR ds:0xc001f76c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 7c f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f77c
c0000d3d:	c7 42 0c 74 f7 01 c0 	mov    DWORD PTR [edx+0xc],0xc001f774
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 7c f7 01 c0    	mov    DWORD PTR ds:0xc001f77c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 6c f7 01 c0    	mov    DWORD PTR ds:0xc001f76c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 40 f7 01 c0 02 	test   BYTE PTR ds:0xc001f740,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 40 f7 01 c0       	mov    eax,0xc001f740
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 40 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f740
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 40 f7 01 c0       	mov    eax,0xc001f740
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 44 f7 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe08bc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 44 f7 01 c0 	mov    DWORD PTR [edx*4-0x3ffe08bc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 74 f7 01 c0 	lea    edx,[eax*8-0x3ffe088c]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 40 f7 01 c0       	mov    eax,0xc001f740
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 80 f7 01 c0    	mov    ebx,DWORD PTR ds:0xc001f780
c00010bf:	81 fb 74 f7 01 c0    	cmp    ebx,0xc001f774
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 74 f7 01 c0       	cmp    eax,0xc001f774
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 70 f7 01 c0    	cmp    DWORD PTR ds:0xc001f770,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 7c f7 01 c0       	mov    ds:0xc001f77c,eax
c00010fb:	a3 80 f7 01 c0       	mov    ds:0xc001f780,eax
c0001100:	a3 70 f7 01 c0       	mov    ds:0xc001f770,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 74 f7 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f774
c000110e:	c7 40 0c 74 f7 01 c0 	mov    DWORD PTR [eax+0xc],0xc001f774
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 80 f7 01 c0       	mov    ds:0xc001f780,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 74 f7 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f774
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 38 f7 01 c0 	lea    ebp,[edx*4-0x3ffe08c8]
c000115f:	8b 14 95 40 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe08c0]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 40 f7 01 c0 	lea    ecx,[edx*4-0x3ffe08c0]
c000117a:	8b 14 95 40 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe08c0]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 74 fa 01 c0 	or     DWORD PTR [edi*4-0x3ffe058c],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 74 f7 01 c0 	lea    eax,[eax*8-0x3ffe088c]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 7c f7 01 c0    	mov    DWORD PTR ds:0xc001f77c,ecx
c0001234:	89 0d 80 f7 01 c0    	mov    DWORD PTR ds:0xc001f780,ecx
c000123a:	c7 41 08 74 f7 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001f774
c0001241:	c7 41 0c 74 f7 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001f774
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 6c f7 01 c0 	lea    edx,[ecx*8-0x3ffe0894]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 74 fa 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe058c]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 74 fa 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe058c]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 6c f7 01 c0 	lea    edx,[eax*4-0x3ffe0894]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 74 fa 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe058c],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 7c f7 01 c0    	mov    DWORD PTR ds:0xc001f77c,edi
c0001307:	89 3d 80 f7 01 c0    	mov    DWORD PTR ds:0xc001f780,edi
c000130d:	c7 47 08 74 f7 01 c0 	mov    DWORD PTR [edi+0x8],0xc001f774
c0001314:	c7 47 0c 74 f7 01 c0 	mov    DWORD PTR [edi+0xc],0xc001f774
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 70 f7 01 c0    	mov    DWORD PTR ds:0xc001f770,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 6c f7 01 c0       	mov    eax,ds:0xc001f76c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 6c f7 01 c0    	mov    DWORD PTR ds:0xc001f76c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 40 f7 01 c0       	mov    edx,0xc001f740
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 40 f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f740,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 40 f7 01 c0       	mov    eax,0xc001f740
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 94 fa 01 c0    	mov    ebx,DWORD PTR ds:0xc001fa94
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 94 fa 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fa94,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 94 fa 01 c0    	mov    DWORD PTR ds:0xc001fa94,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 6c f7 01 c0    	cmp    DWORD PTR ds:0xc001f76c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 6c f7 01 c0    	mov    DWORD PTR ds:0xc001f76c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 40 f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f740,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 40 f7 01 c0       	mov    eax,0xc001f740
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 9c fa 01 c0    	push   DWORD PTR ds:0xc001fa9c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 40 f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f740,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 40 f7 01 c0       	mov    eax,0xc001f740
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 9c fa 01 c0       	mov    eax,ds:0xc001fa9c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 40 f7 01 c0       	mov    eax,0xc001f740
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 6c f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f76c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 40 f7 01 c0       	mov    eax,0xc001f740
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 6c f7 01 c0       	mov    eax,ds:0xc001f76c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 44 f7 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe08bc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 74 f7 01 c0       	mov    eax,0xc001f774
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 6c fa 01 c0       	cmp    eax,0xc001fa6c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 a8 fa 01 c0       	mov    eax,ds:0xc001faa8
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 90 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fa90
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 a4 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001faa4
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 b4 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fab4
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 40 f7 01 c0       	mov    eax,0xc001f740
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 84 ca 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe357c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 40 f7 01 c0       	mov    eax,ds:0xc001f740
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 40 f7 01 c0       	mov    ds:0xc001f740,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 84 fa 01 c0    	mov    DWORD PTR ds:0xc001fa84,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 88 fa 01 c0    	mov    DWORD PTR ds:0xc001fa88,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 8c fa 01 c0    	mov    DWORD PTR ds:0xc001fa8c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 94 fa 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fa94,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 00 39 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc700]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 3a 4e 01 00       	jmp    c0016b24 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 00 39 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc700]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 68 4e 01 00       	jmp    c0016b68 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 00 39 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc700]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 8d 4e 01 00       	jmp    c0016bac <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 e0 cb 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe3420]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 e0 cb 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe3420]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 44 ea 01 c0       	mov    edx,0xc001ea44
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba 9c ca 01 c0       	mov    edx,0xc001ca9c
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 e0 fa 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0520]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 c0 fa 01 c0    	mov    ax,ds:0xc001fac0
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 c0 fa 01 c0    	mov    ds:0xc001fac0,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 a2 ca 01 c0       	mov    eax,0xc001caa2
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad 60 cb 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe34a0]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 ab ca 01 c0       	mov    eax,0xc001caab
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 e0 cb 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe3420]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 e0 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0520]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 e0 fa 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0520],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 30 cb 01 c0       	mov    eax,0xc001cb30
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 e0 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0520]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 20 cb 01 c0       	mov    ebx,0xc001cb20
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 00 cb 01 c0       	mov    edx,0xc001cb00
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 10 cb 01 c0       	mov    edx,0xc001cb10
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba b2 ca 01 c0       	mov    edx,0xc001cab2
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba be ca 01 c0       	mov    edx,0xc001cabe
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba d2 ca 01 c0       	mov    edx,0xc001cad2
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 00 cf 01 c0 	mov    DWORD PTR [esp+0xc],0xc001cf00
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 00 cf 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cf00
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 00 cd 01 c0       	mov    eax,0xc001cd00
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 40 cc 01 c0       	mov    eax,0xc001cc40
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 00 cc 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe3400]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 60 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe09a0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 c0 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0940]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 10 fc 01 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffe03f0],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 a0 f6 01 c0 	movsx  eax,BYTE PTR ds:0xc001f6a0
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 81 14 01 00       	call   c0017400 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 c0 f6 01 c0       	mov    eax,0xc001f6c0
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 60 f6 01 c0       	mov    eax,0xc001f660
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d f4 04 02 c0 00 	cmp    DWORD PTR ds:0xc00204f4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 c0 f6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0940]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 f4 04 02 c0    	mov    esi,DWORD PTR ds:0xc00204f4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 00 d0 01 c0       	push   0xc001d000
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 c0 04 02 c0       	mov    ecx,0xc00204c0
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 80 fb 01 c0 00 	cmp    DWORD PTR [edi-0x3ffe0480],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 80 fb 01 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffe0480],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 84 fb 01 c0    	mov    DWORD PTR [edi-0x3ffe047c],esi
c000634e:	89 87 80 fb 01 c0    	mov    DWORD PTR [edi-0x3ffe0480],eax
c0006354:	c7 87 88 fb 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe0478],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 10 fc 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe03f0],0x0
c0006370:	89 87 8c fb 01 c0    	mov    DWORD PTR [edi-0x3ffe0474],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 80 fb 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0480],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 80 fb 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe0480],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 10 fc 01 c0    	mov    edx,DWORD PTR [ebp-0x3ffe03f0]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 88 fb 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe0478]
c00063e9:	8b 8d 8c fb 01 c0    	mov    ecx,DWORD PTR [ebp-0x3ffe0474]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 80 fb 01 c0    	add    eax,DWORD PTR [ebp-0x3ffe0480]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 60 f6 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe09a0]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 88 fb 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe0478]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 88 fb 01 c0    	add    DWORD PTR [ebp-0x3ffe0478],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 80 fb 01 c0    	lea    ecx,[ebp-0x3ffe0480]
c00064e1:	83 bd 80 fb 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe0480],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 8c fb 01 c0    	mov    ecx,DWORD PTR [eax-0x3ffe0474]
c000651f:	05 80 fb 01 c0       	add    eax,0xc001fb80
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 88 fb 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe0478]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 80 fb 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe0480],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb 10 fc 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe03f0],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 88 fb 01 c0    	mov    eax,DWORD PTR [ebx-0x3ffe0478]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 80 fb 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe0480],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba 10 fc 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe03f0],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 8c fb 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe0474]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 80 fb 01 c0    	lea    esi,[eax-0x3ffe0480]
c00065e4:	83 b8 80 fb 01 c0 00 	cmp    DWORD PTR [eax-0x3ffe0480],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 c0 f6 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe0940]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 88 fb 01 c0    	mov    esi,DWORD PTR [edx-0x3ffe0478]
c0006653:	81 c2 80 fb 01 c0    	add    edx,0xc001fb80
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 c0 f6 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe0940]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 98 fb 01 c0    	lea    ebp,[eax-0x3ffe0468]
c00066b9:	83 3d f4 04 02 c0 00 	cmp    DWORD PTR ds:0xc00204f4,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 98 fb 01 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffe0468],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 00 d0 01 c0       	push   0xc001d000
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 93 fb 01 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffe046d],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 90 fb 01 c0    	mov    DWORD PTR [ecx-0x3ffe0470],eax
c000678f:	89 91 94 fb 01 c0    	mov    DWORD PTR [ecx-0x3ffe046c],edx
c0006795:	81 c1 80 fb 01 c0    	add    ecx,0xc001fb80
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 90 fb 01 c0       	add    eax,0xc001fb90
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 a0 f6 01 c0       	mov    ds:0xc001f6a0,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 f4 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00204f4,0x0
c00067df:	a1 ec 04 02 c0       	mov    eax,ds:0xc00204ec
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 c0 f6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0940]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 03 d0 01 c0       	push   0xc001d003
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 c0 f6 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0940]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 f4 04 02 c0       	mov    ds:0xc00204f4,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d f4 04 02 c0 00 	cmp    DWORD PTR ds:0xc00204f4,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 ec 04 02 c0       	mov    eax,ds:0xc00204ec
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 c0 f6 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0940]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 0a d0 01 c0       	push   0xc001d00a
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 c0 f6 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0940]
c000687d:	bf c0 04 02 c0       	mov    edi,0xc00204c0
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 c2 04 02 c0       	mov    eax,0xc00204c2
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 e8 04 02 c0       	mov    ds:0xc00204e8,eax
c00068a0:	b8 ca 04 02 c0       	mov    eax,0xc00204ca
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 e4 04 02 c0       	mov    ds:0xc00204e4,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 80 fb 01 c0       	push   0xc001fb80
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 80 fb 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001fb80,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 f0 04 02 c0       	mov    ds:0xc00204f0,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 60 fb 01 c0       	mov    ds:0xc001fb60,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d c0 f6 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0940],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 60 f6 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe09a0],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d c0 f6 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0940]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 60 f6 01 c0 	push   DWORD PTR [ebx*4-0x3ffe09a0]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 f0 04 02 c0       	mov    eax,ds:0xc00204f0
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 60 fb 01 c0       	mov    eax,ds:0xc001fb60
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 60 fb 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fb60,0x0
c00069a9:	c7 05 f0 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00204f0,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 66 50 00 00       	call   c000ba3e <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 11 d0 01 c0       	push   0xc001d011
c0006a09:	e8 d9 90 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 20 07 00 00 	mov    DWORD PTR [esp],0x720
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0006a28:	50                   	push   eax
c0006a29:	68 2a d0 01 c0       	push   0xc001d02a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 3e c5 00 00       	call   c0012f74 <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 41 c7 00 00       	call   c001318c <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 d0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237d0
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 e0 3b 01 c0       	push   0xc0013be0
c0006a5a:	52                   	push   edx
c0006a5b:	e8 2c c7 00 00       	call   c001318c <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0006a68:	68 28 d1 01 c0       	push   0xc001d128
c0006a6d:	c6 05 fd 04 02 c0 01 	mov    BYTE PTR ds:0xc00204fd,0x1
c0006a74:	e8 6e 90 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c0006a79:	e8 41 d5 00 00       	call   c0013fbf <Vm::initialise8086()>
c0006a7e:	e8 ff 3d 00 00       	call   c000a882 <Fs::initVFS()>
c0006a83:	c7 04 24 37 d0 01 c0 	mov    DWORD PTR [esp],0xc001d037
c0006a8a:	e8 58 90 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c0006a8f:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 28 d1 01 c0       	push   0xc001d128
c0006aae:	e8 34 90 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c0006ab3:	e8 0a 95 00 00       	call   c000ffc2 <Krnl::loadSystemEnv()>
c0006ab8:	e8 67 97 00 00       	call   c0010224 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 51 d0 01 c0       	push   0xc001d051
c0006ac7:	68 5a d0 01 c0       	push   0xc001d05a
c0006acc:	e8 82 aa 00 00       	call   c0011553 <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 b7 48 00 00       	call   c000b390 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 4c d1 01 c0 	mov    DWORD PTR [esp],0xc001d14c
c0006ae0:	e8 02 90 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 45 4f 00 00       	call   c000ba3c <Device::loadDriversForAll()>
c0006af7:	c7 04 24 62 d0 01 c0 	mov    DWORD PTR [esp],0xc001d062
c0006afe:	e8 e4 8f 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d f8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204f8
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 73 d0 01 c0       	push   0xc001d073
c0006b12:	e8 88 be 00 00       	call   c001299f <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 b0 c0 00 00       	call   c0012bd0 <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 7b ca 00 00       	call   c00135a8 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 8f d0 01 c0       	push   0xc001d08f
c0006b41:	50                   	push   eax
c0006b42:	e8 71 4f 00 00       	call   c000bab8 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba 98 d1 01 c0       	mov    edx,0xc001d198
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 11 05 02 c0 04 	test   BYTE PTR ds:0xc0020511,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 45 4d 01 00       	call   c001b976 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 a8 83 00 00       	call   c000f014 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 81 83 00 00       	call   c000f014 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 5f 83 00 00       	call   c000f014 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 3d 83 00 00       	call   c000f014 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 10 05 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020510,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 4b 82 00 00       	call   c000ef90 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 26 82 00 00       	call   c000ef90 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 af 4b 01 00       	call   c001b930 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 0c 49 01 00       	call   c001b6b0 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 42 82 00 00       	call   c000f014 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 98 d0 01 c0       	push   0xc001d098
c0006e14:	e8 46 93 00 00       	call   c001015f <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 9e d0 01 c0       	push   0xc001d09e
c0006e4c:	e8 0e 93 00 00       	call   c001015f <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 f3 7b 00 00       	jmp    c000ea8c <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 10 05 02 c0 04 	test   BYTE PTR ds:0xc0020510,0x4
c0006ee8:	68 a4 d0 01 c0       	push   0xc001d0a4
c0006eed:	0f 94 05 a0 f1 01 c0 	sete   BYTE PTR ds:0xc001f1a0
c0006ef4:	e8 ee 8b 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 15 77 00 00       	call   c000e624 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 02 4a 00 00       	call   c000b920 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 bc d0 01 c0 	mov    DWORD PTR [esp],0xc001d0bc
c0006f37:	e8 ab 8b 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 7a 81 00 00       	call   c000f0cc <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 bf 49 00 00       	call   c000b920 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 6c d1 01 c0       	push   0xc001d16c
c0006f7e:	e8 64 8b 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c0006f83:	e8 6e e1 00 00       	call   c00150f6 <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 d6 d0 01 c0 	mov    DWORD PTR [esp],0xc001d0d6
c0006f8f:	e8 53 8b 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 04 c3 00 00       	call   c00132a4 <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 f1 d0 01 c0       	push   0xc001d0f1
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 ef 34 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 02 d1 01 c0       	push   0xc001d102
c000700e:	e8 4c 91 00 00       	call   c001015f <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 0f d1 01 c0       	push   0xc001d10f
c0007023:	e8 37 91 00 00       	call   c001015f <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 19 d1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d119
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 20 91 00 00       	jmp    c001015f <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 02 05 02 c0       	mov    ds:0xc0020502,eax
c00070cf:	66 89 15 00 05 02 c0 	mov    WORD PTR ds:0xc0020500,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0007217:	48                   	dec    eax
c0007218:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 ab db 00 00       	call   c0014dd0 <HalSystemIdle()>
c0007225:	e8 08 4d 01 00       	call   c001bf32 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 08 05 02 c0 ff 07 	mov    WORD PTR ds:0xc0020508,0x7ff
c000731d:	a3 0a 05 02 c0       	mov    ds:0xc002050a,eax
c0007322:	0f 01 1d 08 05 02 c0 	lidtd  ds:0xc0020508
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 40 b7 01 c0       	push   0xc001b740
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 50 b7 01 c0       	push   0xc001b750
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 5a b7 01 c0       	push   0xc001b75a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 64 b7 01 c0       	push   0xc001b764
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 6e b7 01 c0       	push   0xc001b76e
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 78 b7 01 c0       	push   0xc001b778
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 82 b7 01 c0       	push   0xc001b782
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 8c b7 01 c0       	push   0xc001b78c
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 96 b7 01 c0       	push   0xc001b796
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 9e b7 01 c0       	push   0xc001b79e
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 a8 b7 01 c0       	push   0xc001b7a8
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 b0 b7 01 c0       	push   0xc001b7b0
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 b8 b7 01 c0       	push   0xc001b7b8
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 c0 b7 01 c0       	push   0xc001b7c0
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 c8 b7 01 c0       	push   0xc001b7c8
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 d0 b7 01 c0       	push   0xc001b7d0
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 da b7 01 c0       	push   0xc001b7da
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 e4 b7 01 c0       	push   0xc001b7e4
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 ee b7 01 c0       	push   0xc001b7ee
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 88 b8 01 c0       	push   0xc001b888
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 8f b8 01 c0       	push   0xc001b88f
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 7a b8 01 c0       	push   0xc001b87a
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 81 b8 01 c0       	push   0xc001b881
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 f8 b7 01 c0       	push   0xc001b7f8
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 02 b8 01 c0       	push   0xc001b802
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 0c b8 01 c0       	push   0xc001b80c
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 16 b8 01 c0       	push   0xc001b816
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 20 b8 01 c0       	push   0xc001b820
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 2a b8 01 c0       	push   0xc001b82a
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 34 b8 01 c0       	push   0xc001b834
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 3e b8 01 c0       	push   0xc001b83e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 48 b8 01 c0       	push   0xc001b848
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 52 b8 01 c0       	push   0xc001b852
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 5c b8 01 c0       	push   0xc001b85c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 66 b8 01 c0       	push   0xc001b866
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 70 b8 01 c0       	push   0xc001b870
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 c6 b8 01 c0       	push   0xc001b8c6
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 d0 b8 01 c0       	push   0xc001b8d0
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 da b8 01 c0       	push   0xc001b8da
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 e4 b8 01 c0       	push   0xc001b8e4
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 ee b8 01 c0       	push   0xc001b8ee
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 f8 b8 01 c0       	push   0xc001b8f8
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 02 b9 01 c0       	push   0xc001b902
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 0c b9 01 c0       	push   0xc001b90c
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 f0 05 02 c0    	push   DWORD PTR ds:0xc00205f0
c0007614:	e8 0d 24 00 00       	call   c0009a26 <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 99 15 00 00       	call   c0008bd0 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 96 b7 01 c0       	push   0xc001b796
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 ce 15 00 00       	call   c0008c14 <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 94 f1 01 c0    	mov    edx,DWORD PTR ds:0xc001f194
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 f0 05 02 c0    	mov    esi,DWORD PTR ds:0xc00205f0
c00076c2:	8b 3d 94 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f194
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 48 22 00 00       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 94 f1 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f194,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 94 f1 01 c0       	mov    eax,ds:0xc001f194
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 bc d1 01 c0       	push   0xc001d1bc
c000770e:	e8 cd 2d 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 ec d1 01 c0       	push   0xc001d1ec
c000772d:	e8 2d 8a 00 00       	call   c001015f <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 f1 d1 01 c0       	push   0xc001d1f1
c0007743:	e8 17 8a 00 00       	call   c001015f <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0007763:	48                   	dec    eax
c0007764:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 f0 05 02 c0    	push   DWORD PTR ds:0xc00205f0
c0007781:	e8 a0 22 00 00       	call   c0009a26 <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 f0 05 02 c0    	push   DWORD PTR ds:0xc00205f0
c0007797:	e8 46 1f 00 00       	call   c00096e2 <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 10 05 02 c0       	mov    ds:0xc0020510,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 f8 d1 01 c0       	push   0xc001d1f8
c0007862:	e8 79 2c 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 0d 82 00 00       	call   c000fa79 <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 c4 1b 00 00       	call   c000944c <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 75 1c 00 00       	call   c0009508 <VAS::VAS()>
c0007893:	89 1d f0 05 02 c0    	mov    DWORD PTR ds:0xc00205f0,ebx
c0007899:	e8 2c 46 01 00       	call   c001beca <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 f8 04 02 c0    	mov    DWORD PTR ds:0xc00204f8,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 ef 1e 00 00       	call   c00097be <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb 2c 05 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdfad4],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 10 d2 01 c0       	push   0xc001d210
c000792c:	e8 2e 88 00 00       	call   c001015f <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 2c 05 02 c0    	lea    edx,[ebp-0x3ffdfad4]
c000796e:	8d 84 05 2d 05 02 c0 	lea    eax,[ebp+eax*1-0x3ffdfad3]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d 24 05 02 c0    	add    DWORD PTR ds:0xc0020524,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 10 d2 01 c0       	push   0xc001d210
c0007993:	e8 c7 87 00 00       	call   c001015f <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 24 05 02 c0    	sub    DWORD PTR ds:0xc0020524,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 2c 05 02 c0       	add    eax,0xc002052c
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 98 f1 01 c0    	mov    esi,DWORD PTR ds:0xc001f198
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 98 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f198
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 98 f1 01 c0    	mov    edx,DWORD PTR ds:0xc001f198
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d 24 05 02 c0    	dec    DWORD PTR ds:0xc0020524
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 b5 d2 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d2b5
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 dc 86 00 00       	jmp    c001015f <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 18 05 02 c0    	mov    esi,DWORD PTR ds:0xc0020518
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d 18 05 02 c0    	mov    DWORD PTR ds:0xc0020518,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 18 05 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020518,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 3c 05 02 c0 01 	xor    BYTE PTR ds:0xc002053c,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 10 27 00 00       	call   c000a200 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 38 d2 01 c0       	push   0xc001d238
c0007aff:	e8 5b 86 00 00       	call   c001015f <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d 18 05 02 c0    	mov    ebx,DWORD PTR ds:0xc0020518
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 18 05 02 c0       	mov    eax,ds:0xc0020518
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 24 05 02 c0    	inc    DWORD PTR ds:0xc0020524
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0007b99:	48                   	dec    eax
c0007b9a:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d 1c 05 02 c0    	cmp    DWORD PTR ds:0xc002051c,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d 1c 05 02 c0    	mov    DWORD PTR ds:0xc002051c,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 2c 05 02 c0       	push   0xc002052c
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 cb d2 01 c0       	push   0xc001d2cb
c0007c18:	e8 c3 28 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 68 d2 01 c0       	push   0xc001d268
c0007ca4:	e8 37 28 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 8c d2 01 c0       	push   0xc001d28c
c0007d40:	e8 9b 27 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 28 05 02 c0    	add    eax,DWORD PTR ds:0xc0020528
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 28 05 02 c0       	mov    ds:0xc0020528,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 f1 d2 01 c0       	push   0xc001d2f1
c0007d76:	e8 65 27 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 e3 d2 01 c0       	push   0xc001d2e3
c0007de5:	e8 75 83 00 00       	call   c001015f <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 28 05 02 c0 02 	add    DWORD PTR ds:0xc0020528,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 28 05 02 c0       	mov    eax,ds:0xc0020528
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 28 05 02 c0       	mov    ds:0xc0020528,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 28 05 02 c0       	mov    eax,ds:0xc0020528
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 28 05 02 c0       	mov    ds:0xc0020528,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 28 05 02 c0       	mov    eax,ds:0xc0020528
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 28 05 02 c0       	mov    ds:0xc0020528,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba 50 d3 01 c0       	mov    edx,0xc001d350
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 5b 11 00 00       	call   c000902c <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 f0 24 00 00       	call   c000a3ea <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 0d d3 01 c0       	push   0xc001d30d
c0007fa7:	e8 b3 81 00 00       	call   c001015f <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c0007ff0:	e8 b7 b3 00 00       	call   c00133ac <schedule()>
c0007ff5:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 23 3d 01 00       	call   c001bdb0 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 2a d3 01 c0       	push   0xc001d32a
c00080a2:	e8 b8 80 00 00       	call   c001015f <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 7a 0d 00 00       	call   c0008e4a <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba 50 d3 01 c0       	mov    edx,0xc001d350
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba e4 d3 01 c0       	mov    edx,0xc001d3e4
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 e7 0e 00 00       	call   c000902c <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 79 22 00 00       	call   c000a3ea <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 c9 45 00 00       	call   c000c755 <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 d6 dd 00 00       	call   c0015f88 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d c0 f1 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0e40]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d c0 f1 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0e40]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 78 f0 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0f88]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 50 f0 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0fb0]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 44 05 02 c0    	cmp    DWORD PTR ds:0xc0020544,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 59 00          	cmp    BYTE PTR [ebx+0x59],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 f9 da 00 00       	call   c0015e14 <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 44 05 02 c0    	cmp    DWORD PTR ds:0xc0020544,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 54 db 00 00       	jmp    c0015f1c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 64 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d364
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 4b 7d 00 00       	jmp    c001015f <KePanic(char const*)>
c0008414:	a1 44 05 02 c0       	mov    eax,ds:0xc0020544
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 44 05 02 c0    	mov    DWORD PTR ds:0xc0020544,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 c8 2d 00 00       	jmp    c000b337 <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be 72 d3 01 c0       	mov    esi,0xc001d372
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 44 05 02 c0    	cmp    DWORD PTR ds:0xc0020544,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 66 d6 00 00       	call   c0015f1c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 3c 05 00 00       	call   c0008e4a <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba e4 d3 01 c0       	mov    edx,0xc001d3e4
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008959:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008964:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000896b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896f:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000897a:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008981:	83 ec 0c             	sub    esp,0xc
c0008984:	6a 01                	push   0x1
c0008986:	e8 02 09 00 00       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c000898b:	83 c4 10             	add    esp,0x10
c000898e:	89 c2                	mov    edx,eax
c0008990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008994:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008997:	8b 1d f0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205f0
c000899d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089a4:	89 c6                	mov    esi,eax
c00089a6:	e8 ea f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089ab:	68 05 0c 00 00       	push   0xc05
c00089b0:	56                   	push   esi
c00089b1:	50                   	push   eax
c00089b2:	53                   	push   ebx
c00089b3:	e8 6a 0f 00 00       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089c2:	83 ec 04             	sub    esp,0x4
c00089c5:	68 a0 0f 00 00       	push   0xfa0
c00089ca:	6a 00                	push   0x0
c00089cc:	50                   	push   eax
c00089cd:	e8 fe 7a ff ff       	call   c00004d0 <memset>
c00089d2:	83 c4 10             	add    esp,0x10
c00089d5:	83 ec 04             	sub    esp,0x4
c00089d8:	6a 00                	push   0x0
c00089da:	6a 07                	push   0x7
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 65 f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	83 ec 04             	sub    esp,0x4
c00089eb:	6a 00                	push   0x0
c00089ed:	6a 00                	push   0x0
c00089ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089f3:	e8 e8 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f8:	83 c4 10             	add    esp,0x10
c00089fb:	83 ec 0c             	sub    esp,0xc
c00089fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a02:	e8 3b fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c0008a07:	83 c4 10             	add    esp,0x10
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	c6 40 59 00          	mov    BYTE PTR [eax+0x59],0x0
c0008a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a16:	05 82 00 00 00       	add    eax,0x82
c0008a1b:	83 ec 04             	sub    esp,0x4
c0008a1e:	6a 30                	push   0x30
c0008a20:	6a 00                	push   0x0
c0008a22:	50                   	push   eax
c0008a23:	e8 a8 7a ff ff       	call   c00004d0 <memset>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a2f:	05 b2 00 00 00       	add    eax,0xb2
c0008a34:	83 ec 04             	sub    esp,0x4
c0008a37:	68 80 00 00 00       	push   0x80
c0008a3c:	6a 00                	push   0x0
c0008a3e:	50                   	push   eax
c0008a3f:	e8 8c 7a ff ff       	call   c00004d0 <memset>
c0008a44:	83 c4 10             	add    esp,0x10
c0008a47:	90                   	nop
c0008a48:	83 c4 04             	add    esp,0x4
c0008a4b:	5b                   	pop    ebx
c0008a4c:	5e                   	pop    esi
c0008a4d:	c3                   	ret    

c0008a4e <VgaText::receiveKey(unsigned char)>:
c0008a4e:	57                   	push   edi
c0008a4f:	56                   	push   esi
c0008a50:	53                   	push   ebx
c0008a51:	83 ec 10             	sub    esp,0x10
c0008a54:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a58:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a5c:	89 f0                	mov    eax,esi
c0008a5e:	84 c0                	test   al,al
c0008a60:	0f 84 3b 01 00 00    	je     c0008ba1 <VgaText::receiveKey(unsigned char)+0x153>
c0008a66:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a6c:	3c 08                	cmp    al,0x8
c0008a6e:	75 68                	jne    c0008ad8 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a70:	83 ec 0c             	sub    esp,0xc
c0008a73:	57                   	push   edi
c0008a74:	e8 c7 7a ff ff       	call   c0000540 <strlen>
c0008a79:	83 c4 10             	add    esp,0x10
c0008a7c:	85 c0                	test   eax,eax
c0008a7e:	0f 84 be 00 00 00    	je     c0008b42 <VgaText::receiveKey(unsigned char)+0xf4>
c0008a84:	50                   	push   eax
c0008a85:	50                   	push   eax
c0008a86:	6a 08                	push   0x8
c0008a88:	53                   	push   ebx
c0008a89:	e8 76 fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a8e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a91:	e8 aa 7a ff ff       	call   c0000540 <strlen>
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008aa0:	3c 0d                	cmp    al,0xd
c0008aa2:	0f 95 c1             	setne  cl
c0008aa5:	3c 18                	cmp    al,0x18
c0008aa7:	0f 9e c2             	setle  dl
c0008aaa:	84 d1                	test   cl,dl
c0008aac:	74 17                	je     c0008ac5 <VgaText::receiveKey(unsigned char)+0x77>
c0008aae:	83 e8 08             	sub    eax,0x8
c0008ab1:	3c 02                	cmp    al,0x2
c0008ab3:	76 10                	jbe    c0008ac5 <VgaText::receiveKey(unsigned char)+0x77>
c0008ab5:	50                   	push   eax
c0008ab6:	50                   	push   eax
c0008ab7:	68 83 d3 01 c0       	push   0xc001d383
c0008abc:	53                   	push   ebx
c0008abd:	e8 74 fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	83 ec 0c             	sub    esp,0xc
c0008ac8:	57                   	push   edi
c0008ac9:	e8 72 7a ff ff       	call   c0000540 <strlen>
c0008ace:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ad6:	eb 67                	jmp    c0008b3f <VgaText::receiveKey(unsigned char)+0xf1>
c0008ad8:	3c 18                	cmp    al,0x18
c0008ada:	0f 96 c2             	setbe  dl
c0008add:	3c 0d                	cmp    al,0xd
c0008adf:	0f 95 c0             	setne  al
c0008ae2:	84 c2                	test   dl,al
c0008ae4:	74 30                	je     c0008b16 <VgaText::receiveKey(unsigned char)+0xc8>
c0008ae6:	8d 46 f7             	lea    eax,[esi-0x9]
c0008ae9:	3c 01                	cmp    al,0x1
c0008aeb:	76 29                	jbe    c0008b16 <VgaText::receiveKey(unsigned char)+0xc8>
c0008aed:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008af3:	68 89 d3 01 c0       	push   0xc001d389
c0008af8:	53                   	push   ebx
c0008af9:	e8 aa fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008afe:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b01:	8d 46 40             	lea    eax,[esi+0x40]
c0008b04:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b07:	0f b6 c0             	movzx  eax,al
c0008b0a:	50                   	push   eax
c0008b0b:	53                   	push   ebx
c0008b0c:	e8 25 fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b11:	83 c4 20             	add    esp,0x20
c0008b14:	eb 11                	jmp    c0008b27 <VgaText::receiveKey(unsigned char)+0xd9>
c0008b16:	89 f0                	mov    eax,esi
c0008b18:	51                   	push   ecx
c0008b19:	0f be c0             	movsx  eax,al
c0008b1c:	51                   	push   ecx
c0008b1d:	50                   	push   eax
c0008b1e:	53                   	push   ebx
c0008b1f:	e8 e0 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b24:	83 c4 10             	add    esp,0x10
c0008b27:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b2c:	89 f0                	mov    eax,esi
c0008b2e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b32:	52                   	push   edx
c0008b33:	52                   	push   edx
c0008b34:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b38:	50                   	push   eax
c0008b39:	57                   	push   edi
c0008b3a:	e8 81 7c ff ff       	call   c00007c0 <strcat>
c0008b3f:	83 c4 10             	add    esp,0x10
c0008b42:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b49:	75 06                	jne    c0008b51 <VgaText::receiveKey(unsigned char)+0x103>
c0008b4b:	89 f0                	mov    eax,esi
c0008b4d:	3c 0a                	cmp    al,0xa
c0008b4f:	75 50                	jne    c0008ba1 <VgaText::receiveKey(unsigned char)+0x153>
c0008b51:	83 ec 0c             	sub    esp,0xc
c0008b54:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b5a:	53                   	push   ebx
c0008b5b:	e8 e0 79 ff ff       	call   c0000540 <strlen>
c0008b60:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b63:	89 c6                	mov    esi,eax
c0008b65:	e8 d6 79 ff ff       	call   c0000540 <strlen>
c0008b6a:	83 c4 10             	add    esp,0x10
c0008b6d:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b71:	3d 80 00 00 00       	cmp    eax,0x80
c0008b76:	76 10                	jbe    c0008b88 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b78:	83 ec 0c             	sub    esp,0xc
c0008b7b:	68 8f d3 01 c0       	push   0xc001d38f
c0008b80:	e8 da 75 00 00       	call   c001015f <KePanic(char const*)>
c0008b85:	83 c4 10             	add    esp,0x10
c0008b88:	50                   	push   eax
c0008b89:	50                   	push   eax
c0008b8a:	57                   	push   edi
c0008b8b:	53                   	push   ebx
c0008b8c:	e8 2f 7c ff ff       	call   c00007c0 <strcat>
c0008b91:	83 c4 0c             	add    esp,0xc
c0008b94:	6a 30                	push   0x30
c0008b96:	6a 00                	push   0x0
c0008b98:	57                   	push   edi
c0008b99:	e8 32 79 ff ff       	call   c00004d0 <memset>
c0008b9e:	83 c4 10             	add    esp,0x10
c0008ba1:	83 c4 10             	add    esp,0x10
c0008ba4:	5b                   	pop    ebx
c0008ba5:	5e                   	pop    esi
c0008ba6:	5f                   	pop    edi
c0008ba7:	c3                   	ret    

c0008ba8 <VgaText::doUpdate()>:
c0008ba8:	c3                   	ret    

c0008ba9 <newTerminal(char*)>:
c0008ba9:	83 ec 28             	sub    esp,0x28
c0008bac:	68 34 01 00 00       	push   0x134
c0008bb1:	e8 03 ec ff ff       	call   c00077b9 <malloc>
c0008bb6:	5a                   	pop    edx
c0008bb7:	59                   	pop    ecx
c0008bb8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bbc:	50                   	push   eax
c0008bbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bc1:	e8 34 fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bca:	83 c4 2c             	add    esp,0x2c
c0008bcd:	c3                   	ret    
c0008bce:	66 90                	xchg   ax,ax

c0008bd0 <TSS::TSS()>:
c0008bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bd4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bdb:	90                   	nop
c0008bdc:	c3                   	ret    
c0008bdd:	90                   	nop
c0008bde:	66 90                	xchg   ax,ax

c0008be0 <TSS::setESP(unsigned long)>:
c0008be0:	55                   	push   ebp
c0008be1:	89 e5                	mov    ebp,esp
c0008be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008be6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008bec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008bef:	90                   	nop
c0008bf0:	5d                   	pop    ebp
c0008bf1:	c3                   	ret    
c0008bf2:	66 90                	xchg   ax,ax

c0008bf4 <TSS::flush()>:
c0008bf4:	55                   	push   ebp
c0008bf5:	89 e5                	mov    ebp,esp
c0008bf7:	83 ec 10             	sub    esp,0x10
c0008bfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bff:	83 c8 03             	or     eax,0x3
c0008c02:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008c06:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c0a:	66 89 d0             	mov    ax,dx
c0008c0d:	0f 00 d8             	ltr    ax
c0008c10:	90                   	nop
c0008c11:	c9                   	leave  
c0008c12:	c3                   	ret    
c0008c13:	90                   	nop

c0008c14 <TSS::setup(unsigned long, unsigned long)>:
c0008c14:	55                   	push   ebp
c0008c15:	89 e5                	mov    ebp,esp
c0008c17:	83 ec 18             	sub    esp,0x18
c0008c1a:	83 ec 0c             	sub    esp,0xc
c0008c1d:	6a 68                	push   0x68
c0008c1f:	e8 95 eb ff ff       	call   c00077b9 <malloc>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 c2                	mov    edx,eax
c0008c29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c35:	83 ec 04             	sub    esp,0x4
c0008c38:	6a 68                	push   0x68
c0008c3a:	6a 00                	push   0x0
c0008c3c:	50                   	push   eax
c0008c3d:	e8 8e 78 ff ff       	call   c00004d0 <memset>
c0008c42:	83 c4 10             	add    esp,0x10
c0008c45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c57:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c63:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c66:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c6f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c87:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c93:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c9f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008ca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cab:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cb7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cc6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ccc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ccf:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cdc:	0f 20 da             	mov    edx,cr3
c0008cdf:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008ce2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008ce5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ceb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cee:	83 ec 08             	sub    esp,0x8
c0008cf1:	50                   	push   eax
c0008cf2:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cf5:	50                   	push   eax
c0008cf6:	e8 45 e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008cfb:	83 c4 10             	add    esp,0x10
c0008cfe:	83 ec 08             	sub    esp,0x8
c0008d01:	6a 68                	push   0x68
c0008d03:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008d06:	50                   	push   eax
c0008d07:	e8 50 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d0c:	83 c4 10             	add    esp,0x10
c0008d0f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d13:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d16:	83 e0 0f             	and    eax,0xf
c0008d19:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d1c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d1f:	83 c8 40             	or     eax,0x40
c0008d22:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d25:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0008d2a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d30:	05 78 01 00 00       	add    eax,0x178
c0008d35:	83 ec 04             	sub    esp,0x4
c0008d38:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d3b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d3e:	50                   	push   eax
c0008d3f:	e8 4c e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d44:	83 c4 10             	add    esp,0x10
c0008d47:	89 c2                	mov    edx,eax
c0008d49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d4c:	89 10                	mov    DWORD PTR [eax],edx
c0008d4e:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0008d53:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d59:	05 78 01 00 00       	add    eax,0x178
c0008d5e:	83 ec 0c             	sub    esp,0xc
c0008d61:	50                   	push   eax
c0008d62:	e8 53 e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d67:	83 c4 10             	add    esp,0x10
c0008d6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d6f:	c9                   	leave  
c0008d70:	c3                   	ret    
c0008d71:	90                   	nop

c0008d72 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d7d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d82:	75 08                	jne    c0008d8c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d84:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d8a:	eb 38                	jmp    c0008dc4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d8c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d91:	75 17                	jne    c0008daa <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d98:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d9b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008da1:	8b 10                	mov    edx,DWORD PTR [eax]
c0008da3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008da7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008daa:	89 c1                	mov    ecx,eax
c0008dac:	83 e1 fd             	and    ecx,0xfffffffd
c0008daf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008db5:	74 cd                	je     c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008db7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008dbc:	83 e0 ef             	and    eax,0xffffffef
c0008dbf:	83 f8 08             	cmp    eax,0x8
c0008dc2:	76 c0                	jbe    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dc4:	31 c0                	xor    eax,eax
c0008dc6:	c3                   	ret    
c0008dc7:	90                   	nop

c0008dc8 <ReservedFilename::isAtty()>:
c0008dc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dcc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dcf:	31 c0                	xor    eax,eax
c0008dd1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dd7:	74 09                	je     c0008de2 <ReservedFilename::isAtty()+0x1a>
c0008dd9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008ddf:	0f 94 c0             	sete   al
c0008de2:	c3                   	ret    
c0008de3:	90                   	nop

c0008de4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008dec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008def:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008df3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df8:	75 08                	jne    c0008e02 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008dfa:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e00:	eb 3d                	jmp    c0008e3f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e02:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e07:	75 17                	jne    c0008e20 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e11:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e17:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e1d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e20:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e25:	75 04                	jne    c0008e2b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e27:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e29:	eb 14                	jmp    c0008e3f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e2b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e30:	74 c8                	je     c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e32:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e37:	83 e0 ef             	and    eax,0xffffffef
c0008e3a:	83 f8 08             	cmp    eax,0x8
c0008e3d:	76 bb                	jbe    c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e3f:	31 c0                	xor    eax,eax
c0008e41:	c3                   	ret    

c0008e42 <UnixFile::getFileDescriptor()>:
c0008e42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e49:	c3                   	ret    

c0008e4a <UnixFile::UnixFile(int)>:
c0008e4a:	53                   	push   ebx
c0008e4b:	83 ec 28             	sub    esp,0x28
c0008e4e:	ba ac d4 01 c0       	mov    edx,0xc001d4ac
c0008e53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e57:	89 10                	mov    DWORD PTR [eax],edx
c0008e59:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e61:	0f 8f 8c 01 00 00    	jg     c0008ff3 <UnixFile::UnixFile(int)+0x1a9>
c0008e67:	a1 00 f2 01 c0       	mov    eax,ds:0xc001f200
c0008e6c:	8d 50 01             	lea    edx,[eax+0x1]
c0008e6f:	89 15 00 f2 01 c0    	mov    DWORD PTR ds:0xc001f200,edx
c0008e75:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e79:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e7c:	83 ec 08             	sub    esp,0x8
c0008e7f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e83:	68 d8 05 02 c0       	push   0xc00205d8
c0008e88:	e8 0b 31 01 00       	call   c001bf98 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e8d:	83 c4 10             	add    esp,0x10
c0008e90:	a0 d4 05 02 c0       	mov    al,ds:0xc00205d4
c0008e95:	83 f0 01             	xor    eax,0x1
c0008e98:	84 c0                	test   al,al
c0008e9a:	0f 84 54 01 00 00    	je     c0008ff4 <UnixFile::UnixFile(int)+0x1aa>
c0008ea0:	c6 05 d4 05 02 c0 01 	mov    BYTE PTR ds:0xc00205d4,0x1
c0008ea7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008eaf:	83 ec 0c             	sub    esp,0xc
c0008eb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008eb6:	e8 fe e8 ff ff       	call   c00077b9 <malloc>
c0008ebb:	83 c4 10             	add    esp,0x10
c0008ebe:	89 c3                	mov    ebx,eax
c0008ec0:	83 ec 08             	sub    esp,0x8
c0008ec3:	68 03 ff ff 0f       	push   0xfffff03
c0008ec8:	53                   	push   ebx
c0008ec9:	e8 2c 01 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008ece:	83 c4 10             	add    esp,0x10
c0008ed1:	89 1d cc 05 02 c0    	mov    DWORD PTR ds:0xc00205cc,ebx
c0008ed7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008edf:	83 ec 0c             	sub    esp,0xc
c0008ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ee6:	e8 ce e8 ff ff       	call   c00077b9 <malloc>
c0008eeb:	83 c4 10             	add    esp,0x10
c0008eee:	89 c3                	mov    ebx,eax
c0008ef0:	83 ec 08             	sub    esp,0x8
c0008ef3:	68 01 ff ff 0f       	push   0xfffff01
c0008ef8:	53                   	push   ebx
c0008ef9:	e8 fc 00 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008efe:	83 c4 10             	add    esp,0x10
c0008f01:	89 1d d0 05 02 c0    	mov    DWORD PTR ds:0xc00205d0,ebx
c0008f07:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f0f:	83 ec 0c             	sub    esp,0xc
c0008f12:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f16:	e8 9e e8 ff ff       	call   c00077b9 <malloc>
c0008f1b:	83 c4 10             	add    esp,0x10
c0008f1e:	89 c3                	mov    ebx,eax
c0008f20:	83 ec 08             	sub    esp,0x8
c0008f23:	68 00 ff ff 0f       	push   0xfffff00
c0008f28:	53                   	push   ebx
c0008f29:	e8 cc 00 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008f2e:	83 c4 10             	add    esp,0x10
c0008f31:	89 1d c4 05 02 c0    	mov    DWORD PTR ds:0xc00205c4,ebx
c0008f37:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f3f:	83 ec 0c             	sub    esp,0xc
c0008f42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f46:	e8 6e e8 ff ff       	call   c00077b9 <malloc>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	89 c3                	mov    ebx,eax
c0008f50:	83 ec 08             	sub    esp,0x8
c0008f53:	68 02 ff ff 0f       	push   0xfffff02
c0008f58:	53                   	push   ebx
c0008f59:	e8 9c 00 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008f5e:	83 c4 10             	add    esp,0x10
c0008f61:	89 1d c8 05 02 c0    	mov    DWORD PTR ds:0xc00205c8,ebx
c0008f67:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f6f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f74:	7f 7e                	jg     c0008ff4 <UnixFile::UnixFile(int)+0x1aa>
c0008f76:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f7e:	83 ec 0c             	sub    esp,0xc
c0008f81:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f85:	e8 2f e8 ff ff       	call   c00077b9 <malloc>
c0008f8a:	83 c4 10             	add    esp,0x10
c0008f8d:	89 c3                	mov    ebx,eax
c0008f8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f93:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f98:	83 ec 08             	sub    esp,0x8
c0008f9b:	50                   	push   eax
c0008f9c:	53                   	push   ebx
c0008f9d:	e8 58 00 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa9:	89 1c 85 a0 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa60],ebx
c0008fb0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fb8:	83 ec 0c             	sub    esp,0xc
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 f5 e7 ff ff       	call   c00077b9 <malloc>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 c3                	mov    ebx,eax
c0008fc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fcd:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fd2:	83 ec 08             	sub    esp,0x8
c0008fd5:	50                   	push   eax
c0008fd6:	53                   	push   ebx
c0008fd7:	e8 1e 00 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fe3:	89 1c 85 60 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfaa0],ebx
c0008fea:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fee:	e9 7c ff ff ff       	jmp    c0008f6f <UnixFile::UnixFile(int)+0x125>
c0008ff3:	90                   	nop
c0008ff4:	83 c4 28             	add    esp,0x28
c0008ff7:	5b                   	pop    ebx
c0008ff8:	c3                   	ret    
c0008ff9:	90                   	nop

c0008ffa <ReservedFilename::ReservedFilename(int)>:
c0008ffa:	83 ec 0c             	sub    esp,0xc
c0008ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009001:	83 ec 08             	sub    esp,0x8
c0009004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009008:	50                   	push   eax
c0009009:	e8 3c fe ff ff       	call   c0008e4a <UnixFile::UnixFile(int)>
c000900e:	83 c4 10             	add    esp,0x10
c0009011:	ba c8 d4 01 c0       	mov    edx,0xc001d4c8
c0009016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000901a:	89 10                	mov    DWORD PTR [eax],edx
c000901c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009020:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009024:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009027:	90                   	nop
c0009028:	83 c4 0c             	add    esp,0xc
c000902b:	c3                   	ret    

c000902c <UnixFile::~UnixFile()>:
c000902c:	83 ec 1c             	sub    esp,0x1c
c000902f:	ba ac d4 01 c0       	mov    edx,0xc001d4ac
c0009034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009038:	89 10                	mov    DWORD PTR [eax],edx
c000903a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000903e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009041:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009046:	7f 73                	jg     c00090bb <UnixFile::~UnixFile()+0x8f>
c0009048:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009050:	83 ec 0c             	sub    esp,0xc
c0009053:	68 d8 05 02 c0       	push   0xc00205d8
c0009058:	e8 0f 30 01 00       	call   c001c06c <LinkedList<UnixFile>::getFirstElement()>
c000905d:	83 c4 10             	add    esp,0x10
c0009060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009064:	83 ec 0c             	sub    esp,0xc
c0009067:	68 d8 05 02 c0       	push   0xc00205d8
c000906c:	e8 03 30 01 00       	call   c001c074 <LinkedList<UnixFile>::removeFirst()>
c0009071:	83 c4 10             	add    esp,0x10
c0009074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009078:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000907c:	74 40                	je     c00090be <UnixFile::~UnixFile()+0x92>
c000907e:	83 ec 08             	sub    esp,0x8
c0009081:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009085:	68 d8 05 02 c0       	push   0xc00205d8
c000908a:	e8 09 2f 01 00       	call   c001bf98 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000908f:	83 c4 10             	add    esp,0x10
c0009092:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009096:	8d 50 01             	lea    edx,[eax+0x1]
c0009099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000909d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00090a2:	0f 94 c0             	sete   al
c00090a5:	84 c0                	test   al,al
c00090a7:	74 a7                	je     c0009050 <UnixFile::~UnixFile()+0x24>
c00090a9:	83 ec 0c             	sub    esp,0xc
c00090ac:	68 84 d4 01 c0       	push   0xc001d484
c00090b1:	e8 a9 70 00 00       	call   c001015f <KePanic(char const*)>
c00090b6:	83 c4 10             	add    esp,0x10
c00090b9:	eb 95                	jmp    c0009050 <UnixFile::~UnixFile()+0x24>
c00090bb:	90                   	nop
c00090bc:	eb 01                	jmp    c00090bf <UnixFile::~UnixFile()+0x93>
c00090be:	90                   	nop
c00090bf:	90                   	nop
c00090c0:	83 c4 1c             	add    esp,0x1c
c00090c3:	c3                   	ret    

c00090c4 <UnixFile::~UnixFile()>:
c00090c4:	83 ec 0c             	sub    esp,0xc
c00090c7:	83 ec 0c             	sub    esp,0xc
c00090ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ce:	e8 59 ff ff ff       	call   c000902c <UnixFile::~UnixFile()>
c00090d3:	83 c4 10             	add    esp,0x10
c00090d6:	83 ec 08             	sub    esp,0x8
c00090d9:	6a 0c                	push   0xc
c00090db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090df:	e8 06 13 00 00       	call   c000a3ea <operator delete(void*, unsigned long)>
c00090e4:	83 c4 10             	add    esp,0x10
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <ReservedFilename::~ReservedFilename()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ba c8 d4 01 c0       	mov    edx,0xc001d4c8
c00090f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	50                   	push   eax
c0009102:	e8 25 ff ff ff       	call   c000902c <UnixFile::~UnixFile()>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	90                   	nop
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <ReservedFilename::~ReservedFilename()>:
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000911a:	e8 cd ff ff ff       	call   c00090ec <ReservedFilename::~ReservedFilename()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	83 ec 08             	sub    esp,0x8
c0009125:	6a 0c                	push   0xc
c0009127:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912b:	e8 ba 12 00 00       	call   c000a3ea <operator delete(void*, unsigned long)>
c0009130:	83 c4 10             	add    esp,0x10
c0009133:	83 c4 0c             	add    esp,0xc
c0009136:	c3                   	ret    

c0009137 <getFromFileDescriptor(int)>:
c0009137:	53                   	push   ebx
c0009138:	83 ec 08             	sub    esp,0x8
c000913b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000913f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009145:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000914b:	7f 2c                	jg     c0009179 <getFromFileDescriptor(int)+0x42>
c000914d:	83 ec 0c             	sub    esp,0xc
c0009150:	68 d8 05 02 c0       	push   0xc00205d8
c0009155:	e8 12 2f 01 00       	call   c001c06c <LinkedList<UnixFile>::getFirstElement()>
c000915a:	83 c4 10             	add    esp,0x10
c000915d:	85 c0                	test   eax,eax
c000915f:	75 04                	jne    c0009165 <getFromFileDescriptor(int)+0x2e>
c0009161:	31 c0                	xor    eax,eax
c0009163:	eb 6e                	jmp    c00091d3 <getFromFileDescriptor(int)+0x9c>
c0009165:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009168:	74 69                	je     c00091d3 <getFromFileDescriptor(int)+0x9c>
c000916a:	52                   	push   edx
c000916b:	52                   	push   edx
c000916c:	50                   	push   eax
c000916d:	68 d8 05 02 c0       	push   0xc00205d8
c0009172:	e8 9f 2f 01 00       	call   c001c116 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009177:	eb e1                	jmp    c000915a <getFromFileDescriptor(int)+0x23>
c0009179:	a1 cc 05 02 c0       	mov    eax,ds:0xc00205cc
c000917e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009184:	74 4d                	je     c00091d3 <getFromFileDescriptor(int)+0x9c>
c0009186:	a1 d0 05 02 c0       	mov    eax,ds:0xc00205d0
c000918b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009191:	74 40                	je     c00091d3 <getFromFileDescriptor(int)+0x9c>
c0009193:	a1 c8 05 02 c0       	mov    eax,ds:0xc00205c8
c0009198:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000919e:	74 33                	je     c00091d3 <getFromFileDescriptor(int)+0x9c>
c00091a0:	a1 c4 05 02 c0       	mov    eax,ds:0xc00205c4
c00091a5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091ab:	74 26                	je     c00091d3 <getFromFileDescriptor(int)+0x9c>
c00091ad:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091b3:	83 f8 08             	cmp    eax,0x8
c00091b6:	77 09                	ja     c00091c1 <getFromFileDescriptor(int)+0x8a>
c00091b8:	8b 04 85 a0 05 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfa60]
c00091bf:	eb 12                	jmp    c00091d3 <getFromFileDescriptor(int)+0x9c>
c00091c1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091c7:	83 fb 08             	cmp    ebx,0x8
c00091ca:	77 95                	ja     c0009161 <getFromFileDescriptor(int)+0x2a>
c00091cc:	8b 04 9d 60 05 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdfaa0]
c00091d3:	83 c4 08             	add    esp,0x8
c00091d6:	5b                   	pop    ebx
c00091d7:	c3                   	ret    

c00091d8 <__static_initialization_and_destruction_0(int, int)>:
c00091d8:	83 ec 0c             	sub    esp,0xc
c00091db:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091e0:	75 34                	jne    c0009216 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091e2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091ea:	75 2a                	jne    c0009216 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091ec:	83 ec 0c             	sub    esp,0xc
c00091ef:	68 d8 05 02 c0       	push   0xc00205d8
c00091f4:	e8 5d 2d 01 00       	call   c001bf56 <LinkedList<UnixFile>::LinkedList()>
c00091f9:	83 c4 10             	add    esp,0x10
c00091fc:	83 ec 04             	sub    esp,0x4
c00091ff:	68 90 f1 01 c0       	push   0xc001f190
c0009204:	68 d8 05 02 c0       	push   0xc00205d8
c0009209:	68 54 bf 01 c0       	push   0xc001bf54
c000920e:	e8 87 11 00 00       	call   c000a39a <__cxa_atexit>
c0009213:	83 c4 10             	add    esp,0x10
c0009216:	90                   	nop
c0009217:	83 c4 0c             	add    esp,0xc
c000921a:	c3                   	ret    

c000921b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000921b:	83 ec 0c             	sub    esp,0xc
c000921e:	83 ec 08             	sub    esp,0x8
c0009221:	68 ff ff 00 00       	push   0xffff
c0009226:	6a 01                	push   0x1
c0009228:	e8 ab ff ff ff       	call   c00091d8 <__static_initialization_and_destruction_0(int, int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	83 c4 0c             	add    esp,0xc
c0009233:	c3                   	ret    

c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009234:	53                   	push   ebx
c0009235:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009239:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000923d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0009243:	89 c8                	mov    eax,ecx
c0009245:	d1 e8                	shr    eax,1
c0009247:	03 05 08 f2 01 c0    	add    eax,DWORD PTR ds:0xc001f208
c000924d:	83 e1 01             	and    ecx,0x1
c0009250:	8a 10                	mov    dl,BYTE PTR [eax]
c0009252:	75 09                	jne    c000925d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009254:	83 e2 f0             	and    edx,0xfffffff0
c0009257:	09 da                	or     edx,ebx
c0009259:	88 10                	mov    BYTE PTR [eax],dl
c000925b:	5b                   	pop    ebx
c000925c:	c3                   	ret    
c000925d:	c1 e3 04             	shl    ebx,0x4
c0009260:	83 e2 0f             	and    edx,0xf
c0009263:	09 da                	or     edx,ebx
c0009265:	88 10                	mov    BYTE PTR [eax],dl
c0009267:	5b                   	pop    ebx
c0009268:	c3                   	ret    

c0009269 <Virt::getPageState(unsigned long)>:
c0009269:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000926d:	8b 0d 08 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f208
c0009273:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009279:	89 d0                	mov    eax,edx
c000927b:	d1 e8                	shr    eax,1
c000927d:	83 e2 01             	and    edx,0x1
c0009280:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009283:	75 04                	jne    c0009289 <Virt::getPageState(unsigned long)+0x20>
c0009285:	83 e0 0f             	and    eax,0xf
c0009288:	c3                   	ret    
c0009289:	c0 e8 04             	shr    al,0x4
c000928c:	c3                   	ret    

c000928d <Virt::allocateKernelVirtualPages(int)>:
c000928d:	55                   	push   ebp
c000928e:	31 ed                	xor    ebp,ebp
c0009290:	57                   	push   edi
c0009291:	56                   	push   esi
c0009292:	53                   	push   ebx
c0009293:	31 db                	xor    ebx,ebx
c0009295:	83 ec 1c             	sub    esp,0x1c
c0009298:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000929c:	8b 3d 04 f2 01 c0    	mov    edi,DWORD PTR ds:0xc001f204
c00092a2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00092a7:	57                   	push   edi
c00092a8:	e8 bc ff ff ff       	call   c0009269 <Virt::getPageState(unsigned long)>
c00092ad:	5a                   	pop    edx
c00092ae:	84 c0                	test   al,al
c00092b0:	75 3a                	jne    c00092ec <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092b2:	85 db                	test   ebx,ebx
c00092b4:	75 02                	jne    c00092b8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092b6:	89 fd                	mov    ebp,edi
c00092b8:	43                   	inc    ebx
c00092b9:	39 f3                	cmp    ebx,esi
c00092bb:	74 5a                	je     c0009317 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092bd:	47                   	inc    edi
c00092be:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092c4:	76 31                	jbe    c00092f7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092c6:	c7 05 04 f2 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f204,0xc8000
c00092d0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092d5:	75 28                	jne    c00092ff <Virt::allocateKernelVirtualPages(int)+0x72>
c00092d7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092dc:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092e1:	57                   	push   edi
c00092e2:	e8 82 ff ff ff       	call   c0009269 <Virt::getPageState(unsigned long)>
c00092e7:	5a                   	pop    edx
c00092e8:	84 c0                	test   al,al
c00092ea:	74 c6                	je     c00092b2 <Virt::allocateKernelVirtualPages(int)+0x25>
c00092ec:	31 db                	xor    ebx,ebx
c00092ee:	47                   	inc    edi
c00092ef:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092f5:	77 cf                	ja     c00092c6 <Virt::allocateKernelVirtualPages(int)+0x39>
c00092f7:	89 3d 04 f2 01 c0    	mov    DWORD PTR ds:0xc001f204,edi
c00092fd:	eb a8                	jmp    c00092a7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092ff:	83 ec 0c             	sub    esp,0xc
c0009302:	68 dc d4 01 c0       	push   0xc001d4dc
c0009307:	e8 53 6e 00 00       	call   c001015f <KePanic(char const*)>
c000930c:	8b 3d 04 f2 01 c0    	mov    edi,DWORD PTR ds:0xc001f204
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	eb 90                	jmp    c00092a7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009317:	89 2d 04 f2 01 c0    	mov    DWORD PTR ds:0xc001f204,ebp
c000931d:	4b                   	dec    ebx
c000931e:	74 5f                	je     c000937f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009320:	85 f6                	test   esi,esi
c0009322:	74 3d                	je     c0009361 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009324:	89 e8                	mov    eax,ebp
c0009326:	31 db                	xor    ebx,ebx
c0009328:	8d 7e ff             	lea    edi,[esi-0x1]
c000932b:	eb 14                	jmp    c0009341 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000932d:	6a 01                	push   0x1
c000932f:	43                   	inc    ebx
c0009330:	50                   	push   eax
c0009331:	e8 fe fe ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009336:	58                   	pop    eax
c0009337:	39 f3                	cmp    ebx,esi
c0009339:	5a                   	pop    edx
c000933a:	74 25                	je     c0009361 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000933c:	a1 04 f2 01 c0       	mov    eax,ds:0xc001f204
c0009341:	8d 50 01             	lea    edx,[eax+0x1]
c0009344:	85 db                	test   ebx,ebx
c0009346:	89 15 04 f2 01 c0    	mov    DWORD PTR ds:0xc001f204,edx
c000934c:	74 20                	je     c000936e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000934e:	39 df                	cmp    edi,ebx
c0009350:	75 db                	jne    c000932d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009352:	6a 03                	push   0x3
c0009354:	43                   	inc    ebx
c0009355:	50                   	push   eax
c0009356:	e8 d9 fe ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000935b:	59                   	pop    ecx
c000935c:	39 f3                	cmp    ebx,esi
c000935e:	58                   	pop    eax
c000935f:	75 db                	jne    c000933c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009361:	83 c4 1c             	add    esp,0x1c
c0009364:	89 e8                	mov    eax,ebp
c0009366:	5b                   	pop    ebx
c0009367:	c1 e0 0c             	shl    eax,0xc
c000936a:	5e                   	pop    esi
c000936b:	5f                   	pop    edi
c000936c:	5d                   	pop    ebp
c000936d:	c3                   	ret    
c000936e:	6a 02                	push   0x2
c0009370:	bb 01 00 00 00       	mov    ebx,0x1
c0009375:	50                   	push   eax
c0009376:	e8 b9 fe ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000937b:	58                   	pop    eax
c000937c:	5a                   	pop    edx
c000937d:	eb bd                	jmp    c000933c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000937f:	6a 04                	push   0x4
c0009381:	8d 45 01             	lea    eax,[ebp+0x1]
c0009384:	55                   	push   ebp
c0009385:	a3 04 f2 01 c0       	mov    ds:0xc001f204,eax
c000938a:	e8 a5 fe ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000938f:	59                   	pop    ecx
c0009390:	89 e8                	mov    eax,ebp
c0009392:	5b                   	pop    ebx
c0009393:	c1 e0 0c             	shl    eax,0xc
c0009396:	83 c4 1c             	add    esp,0x1c
c0009399:	5b                   	pop    ebx
c000939a:	5e                   	pop    esi
c000939b:	5f                   	pop    edi
c000939c:	5d                   	pop    ebp
c000939d:	c3                   	ret    

c000939e <Virt::freeSwapfilePage(unsigned long)>:
c000939e:	53                   	push   ebx
c000939f:	8b 15 ec 05 02 c0    	mov    edx,DWORD PTR ds:0xc00205ec
c00093a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093a9:	b8 01 00 00 00       	mov    eax,0x1
c00093ae:	89 cb                	mov    ebx,ecx
c00093b0:	d3 e0                	shl    eax,cl
c00093b2:	c1 eb 05             	shr    ebx,0x5
c00093b5:	f7 d0                	not    eax
c00093b7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093ba:	5b                   	pop    ebx
c00093bb:	c3                   	ret    

c00093bc <Virt::swapIDToSector(unsigned long)>:
c00093bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093c0:	0f af 05 0c f2 01 c0 	imul   eax,DWORD PTR ds:0xc001f20c
c00093c7:	03 05 14 f2 01 c0    	add    eax,DWORD PTR ds:0xc001f214
c00093cd:	c3                   	ret    

c00093ce <Virt::allocateSwapfilePage()>:
c00093ce:	55                   	push   ebp
c00093cf:	31 d2                	xor    edx,edx
c00093d1:	57                   	push   edi
c00093d2:	56                   	push   esi
c00093d3:	53                   	push   ebx
c00093d4:	83 ec 0c             	sub    esp,0xc
c00093d7:	8b 0d 0c f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f20c
c00093dd:	a1 10 f2 01 c0       	mov    eax,ds:0xc001f210
c00093e2:	f7 f1                	div    ecx
c00093e4:	39 0d 10 f2 01 c0    	cmp    DWORD PTR ds:0xc001f210,ecx
c00093ea:	72 2d                	jb     c0009419 <Virt::allocateSwapfilePage()+0x4b>
c00093ec:	8b 35 ec 05 02 c0    	mov    esi,DWORD PTR ds:0xc00205ec
c00093f2:	8b 16                	mov    edx,DWORD PTR [esi]
c00093f4:	f6 c2 01             	test   dl,0x1
c00093f7:	74 3c                	je     c0009435 <Virt::allocateSwapfilePage()+0x67>
c00093f9:	31 c9                	xor    ecx,ecx
c00093fb:	bf 01 00 00 00       	mov    edi,0x1
c0009400:	eb 12                	jmp    c0009414 <Virt::allocateSwapfilePage()+0x46>
c0009402:	89 fd                	mov    ebp,edi
c0009404:	89 ca                	mov    edx,ecx
c0009406:	d3 e5                	shl    ebp,cl
c0009408:	c1 ea 05             	shr    edx,0x5
c000940b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000940e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009410:	85 ea                	test   edx,ebp
c0009412:	74 2a                	je     c000943e <Virt::allocateSwapfilePage()+0x70>
c0009414:	41                   	inc    ecx
c0009415:	39 c8                	cmp    eax,ecx
c0009417:	77 e9                	ja     c0009402 <Virt::allocateSwapfilePage()+0x34>
c0009419:	83 ec 0c             	sub    esp,0xc
c000941c:	68 43 d6 01 c0       	push   0xc001d643
c0009421:	e8 39 6d 00 00       	call   c001015f <KePanic(char const*)>
c0009426:	83 c4 10             	add    esp,0x10
c0009429:	31 c9                	xor    ecx,ecx
c000942b:	83 c4 0c             	add    esp,0xc
c000942e:	89 c8                	mov    eax,ecx
c0009430:	5b                   	pop    ebx
c0009431:	5e                   	pop    esi
c0009432:	5f                   	pop    edi
c0009433:	5d                   	pop    ebp
c0009434:	c3                   	ret    
c0009435:	89 f3                	mov    ebx,esi
c0009437:	bd 01 00 00 00       	mov    ebp,0x1
c000943c:	31 c9                	xor    ecx,ecx
c000943e:	09 ea                	or     edx,ebp
c0009440:	89 c8                	mov    eax,ecx
c0009442:	89 13                	mov    DWORD PTR [ebx],edx
c0009444:	83 c4 0c             	add    esp,0xc
c0009447:	5b                   	pop    ebx
c0009448:	5e                   	pop    esi
c0009449:	5f                   	pop    edi
c000944a:	5d                   	pop    ebp
c000944b:	c3                   	ret    

c000944c <Virt::virtualMemorySetup()>:
c000944c:	53                   	push   ebx
c000944d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009452:	6a 0f                	push   0xf
c0009454:	53                   	push   ebx
c0009455:	43                   	inc    ebx
c0009456:	e8 d9 fd ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000945b:	58                   	pop    eax
c000945c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009462:	5a                   	pop    edx
c0009463:	75 ed                	jne    c0009452 <Virt::virtualMemorySetup()+0x6>
c0009465:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000946a:	6a 00                	push   0x0
c000946c:	53                   	push   ebx
c000946d:	43                   	inc    ebx
c000946e:	e8 c1 fd ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009473:	59                   	pop    ecx
c0009474:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000947a:	58                   	pop    eax
c000947b:	75 ed                	jne    c000946a <Virt::virtualMemorySetup()+0x1e>
c000947d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009482:	6a 0f                	push   0xf
c0009484:	53                   	push   ebx
c0009485:	43                   	inc    ebx
c0009486:	e8 a9 fd ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000948b:	58                   	pop    eax
c000948c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009492:	5a                   	pop    edx
c0009493:	75 ed                	jne    c0009482 <Virt::virtualMemorySetup()+0x36>
c0009495:	5b                   	pop    ebx
c0009496:	c3                   	ret    

c0009497 <Virt::setupPageSwapping(int)>:
c0009497:	53                   	push   ebx
c0009498:	83 ec 0c             	sub    esp,0xc
c000949b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000949f:	a1 68 2a 02 c0       	mov    eax,ds:0xc0022a68
c00094a4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00094ac:	53                   	push   ebx
c00094ad:	c1 e3 0b             	shl    ebx,0xb
c00094b0:	68 5a d6 01 c0       	push   0xc001d65a
c00094b5:	50                   	push   eax
c00094b6:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094b9:	89 1d 10 f2 01 c0    	mov    DWORD PTR ds:0xc001f210,ebx
c00094bf:	c6 05 18 f2 01 c0 43 	mov    BYTE PTR ds:0xc001f218,0x43
c00094c6:	c1 eb 08             	shr    ebx,0x8
c00094c9:	a3 14 f2 01 c0       	mov    ds:0xc001f214,eax
c00094ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094d1:	c7 05 0c f2 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f20c,0x8
c00094db:	e8 d9 e2 ff ff       	call   c00077b9 <malloc>
c00094e0:	83 c4 0c             	add    esp,0xc
c00094e3:	89 c1                	mov    ecx,eax
c00094e5:	a3 ec 05 02 c0       	mov    ds:0xc00205ec,eax
c00094ea:	31 d2                	xor    edx,edx
c00094ec:	a1 10 f2 01 c0       	mov    eax,ds:0xc001f210
c00094f1:	f7 35 0c f2 01 c0    	div    DWORD PTR ds:0xc001f20c
c00094f7:	c1 e8 05             	shr    eax,0x5
c00094fa:	50                   	push   eax
c00094fb:	6a 00                	push   0x0
c00094fd:	51                   	push   ecx
c00094fe:	e8 cd 6f ff ff       	call   c00004d0 <memset>
c0009503:	83 c4 18             	add    esp,0x18
c0009506:	5b                   	pop    ebx
c0009507:	c3                   	ret    

c0009508 <VAS::VAS()>:
c0009508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000950c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009513:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009517:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000951e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009522:	a3 f0 05 02 c0       	mov    ds:0xc00205f0,eax
c0009527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000952b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000952f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009533:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000953a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009541:	90                   	nop
c0009542:	c3                   	ret    
c0009543:	90                   	nop

c0009544 <VAS::VAS(VAS*)>:
c0009544:	83 ec 0c             	sub    esp,0xc
c0009547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000954b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009556:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000955d:	83 ec 0c             	sub    esp,0xc
c0009560:	68 fc d4 01 c0       	push   0xc001d4fc
c0009565:	e8 f5 6b 00 00       	call   c001015f <KePanic(char const*)>
c000956a:	83 c4 10             	add    esp,0x10
c000956d:	90                   	nop
c000956e:	83 c4 0c             	add    esp,0xc
c0009571:	c3                   	ret    

c0009572 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009572:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009576:	89 c2                	mov    edx,eax
c0009578:	c1 e8 0a             	shr    eax,0xa
c000957b:	c1 ea 16             	shr    edx,0x16
c000957e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009583:	19 c9                	sbb    ecx,ecx
c0009585:	c1 e2 0c             	shl    edx,0xc
c0009588:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000958e:	25 fc 0f 00 00       	and    eax,0xffc
c0009593:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000959a:	01 d0                	add    eax,edx
c000959c:	c3                   	ret    
c000959d:	90                   	nop

c000959e <VAS::getPageTableEntry(unsigned long)>:
c000959e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00095a2:	89 ca                	mov    edx,ecx
c00095a4:	c1 e9 0a             	shr    ecx,0xa
c00095a7:	c1 ea 16             	shr    edx,0x16
c00095aa:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00095b0:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00095b6:	c1 e0 0c             	shl    eax,0xc
c00095b9:	8d 04 08             	lea    eax,[eax+ecx*1]
c00095bc:	c3                   	ret    

c00095bd <Virt::freeKernelVirtualPages(unsigned long)>:
c00095bd:	57                   	push   edi
c00095be:	56                   	push   esi
c00095bf:	be 01 00 00 00       	mov    esi,0x1
c00095c4:	53                   	push   ebx
c00095c5:	83 ec 10             	sub    esp,0x10
c00095c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00095cc:	c1 eb 0c             	shr    ebx,0xc
c00095cf:	eb 3f                	jmp    c0009610 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00095d1:	83 ec 08             	sub    esp,0x8
c00095d4:	a1 f0 05 02 c0       	mov    eax,ds:0xc00205f0
c00095d9:	57                   	push   edi
c00095da:	50                   	push   eax
c00095db:	e8 be ff ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c00095e0:	83 c4 10             	add    esp,0x10
c00095e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00095e5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095e9:	f6 c4 04             	test   ah,0x4
c00095ec:	75 60                	jne    c000964e <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095ee:	80 fa 04             	cmp    dl,0x4
c00095f1:	74 79                	je     c000966c <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095f3:	80 fa 02             	cmp    dl,0x2
c00095f6:	0f 84 89 00 00 00    	je     c0009685 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095fc:	80 fa 03             	cmp    dl,0x3
c00095ff:	0f 84 ae 00 00 00    	je     c00096b3 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009605:	fe ca                	dec    dl
c0009607:	0f 84 93 00 00 00    	je     c00096a0 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c000960d:	43                   	inc    ebx
c000960e:	31 f6                	xor    esi,esi
c0009610:	53                   	push   ebx
c0009611:	89 df                	mov    edi,ebx
c0009613:	e8 51 fc ff ff       	call   c0009269 <Virt::getPageState(unsigned long)>
c0009618:	c1 e7 0c             	shl    edi,0xc
c000961b:	5a                   	pop    edx
c000961c:	84 c0                	test   al,al
c000961e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009622:	75 ad                	jne    c00095d1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009624:	83 ec 0c             	sub    esp,0xc
c0009627:	68 71 d6 01 c0       	push   0xc001d671
c000962c:	e8 2e 6b 00 00       	call   c001015f <KePanic(char const*)>
c0009631:	5a                   	pop    edx
c0009632:	59                   	pop    ecx
c0009633:	57                   	push   edi
c0009634:	8b 3d f0 05 02 c0    	mov    edi,DWORD PTR ds:0xc00205f0
c000963a:	57                   	push   edi
c000963b:	e8 5e ff ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 00                	mov    eax,DWORD PTR [eax]
c0009645:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009649:	f6 c4 04             	test   ah,0x4
c000964c:	74 bf                	je     c000960d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000964e:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009652:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009657:	83 ec 0c             	sub    esp,0xc
c000965a:	50                   	push   eax
c000965b:	e8 d3 e3 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009660:	83 c4 10             	add    esp,0x10
c0009663:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009667:	80 fa 04             	cmp    dl,0x4
c000966a:	75 87                	jne    c00095f3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000966c:	89 f0                	mov    eax,esi
c000966e:	84 c0                	test   al,al
c0009670:	75 47                	jne    c00096b9 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0009672:	c7 44 24 20 20 d5 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d520
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	5b                   	pop    ebx
c000967e:	5e                   	pop    esi
c000967f:	5f                   	pop    edi
c0009680:	e9 da 6a 00 00       	jmp    c001015f <KePanic(char const*)>
c0009685:	89 f0                	mov    eax,esi
c0009687:	84 c0                	test   al,al
c0009689:	75 15                	jne    c00096a0 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c000968b:	83 ec 0c             	sub    esp,0xc
c000968e:	68 8d d6 01 c0       	push   0xc001d68d
c0009693:	e8 c7 6a 00 00       	call   c001015f <KePanic(char const*)>
c0009698:	83 c4 10             	add    esp,0x10
c000969b:	e9 6d ff ff ff       	jmp    c000960d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096a0:	83 ec 08             	sub    esp,0x8
c00096a3:	6a 00                	push   0x0
c00096a5:	53                   	push   ebx
c00096a6:	e8 89 fb ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ab:	83 c4 10             	add    esp,0x10
c00096ae:	e9 5a ff ff ff       	jmp    c000960d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096b3:	89 f0                	mov    eax,esi
c00096b5:	84 c0                	test   al,al
c00096b7:	75 15                	jne    c00096ce <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c00096b9:	83 ec 08             	sub    esp,0x8
c00096bc:	6a 00                	push   0x0
c00096be:	53                   	push   ebx
c00096bf:	e8 70 fb ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	83 c4 10             	add    esp,0x10
c00096c7:	83 c4 10             	add    esp,0x10
c00096ca:	5b                   	pop    ebx
c00096cb:	5e                   	pop    esi
c00096cc:	5f                   	pop    edi
c00096cd:	c3                   	ret    
c00096ce:	c7 44 24 20 a9 d6 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d6a9
c00096d6:	83 c4 10             	add    esp,0x10
c00096d9:	5b                   	pop    ebx
c00096da:	5e                   	pop    esi
c00096db:	5f                   	pop    edi
c00096dc:	e9 7e 6a 00 00       	jmp    c001015f <KePanic(char const*)>
c00096e1:	90                   	nop

c00096e2 <VAS::freeAllocatedPages(unsigned long)>:
c00096e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096ea:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096ee:	74 09                	je     c00096f9 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096f0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096f4:	e9 c4 fe ff ff       	jmp    c00095bd <Virt::freeKernelVirtualPages(unsigned long)>
c00096f9:	c7 44 24 04 44 d5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d544
c0009701:	e9 da 0d 00 00       	jmp    c000a4e0 <Dbg::kprintf(char const*, ...)>

c0009706 <VAS::virtualToPhysical(unsigned long)>:
c0009706:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000970a:	50                   	push   eax
c000970b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000970f:	52                   	push   edx
c0009710:	e8 89 fe ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c0009715:	59                   	pop    ecx
c0009716:	8b 00                	mov    eax,DWORD PTR [eax]
c0009718:	5a                   	pop    edx
c0009719:	25 00 f0 ff ff       	and    eax,0xfffff000
c000971e:	c3                   	ret    
c000971f:	90                   	nop

c0009720 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009720:	55                   	push   ebp
c0009721:	57                   	push   edi
c0009722:	56                   	push   esi
c0009723:	53                   	push   ebx
c0009724:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009728:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000972c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009730:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009734:	85 db                	test   ebx,ebx
c0009736:	7e 22                	jle    c000975a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009738:	c1 e3 0c             	shl    ebx,0xc
c000973b:	01 f3                	add    ebx,esi
c000973d:	56                   	push   esi
c000973e:	81 c6 00 10 00 00    	add    esi,0x1000
c0009744:	55                   	push   ebp
c0009745:	e8 54 fe ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c000974a:	5a                   	pop    edx
c000974b:	59                   	pop    ecx
c000974c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000974e:	21 f9                	and    ecx,edi
c0009750:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009754:	39 f3                	cmp    ebx,esi
c0009756:	89 08                	mov    DWORD PTR [eax],ecx
c0009758:	75 e3                	jne    c000973d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000975a:	5b                   	pop    ebx
c000975b:	5e                   	pop    esi
c000975c:	5f                   	pop    edi
c000975d:	5d                   	pop    ebp
c000975e:	c3                   	ret    
c000975f:	90                   	nop

c0009760 <VAS::setToWriteCombining(unsigned long, int)>:
c0009760:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0009765:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000976b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009772:	75 01                	jne    c0009775 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009774:	c3                   	ret    
c0009775:	68 80 00 00 00       	push   0x80
c000977a:	6a ff                	push   0xffffffff
c000977c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009780:	50                   	push   eax
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	52                   	push   edx
c0009786:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000978a:	51                   	push   ecx
c000978b:	e8 90 ff ff ff       	call   c0009720 <VAS::reflagRange(unsigned long, int, int, int)>
c0009790:	83 c4 14             	add    esp,0x14
c0009793:	c3                   	ret    

c0009794 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009794:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009799:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000979d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00097a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00097a7:	19 c0                	sbb    eax,eax
c00097a9:	83 ca 03             	or     edx,0x3
c00097ac:	83 e0 fc             	and    eax,0xfffffffc
c00097af:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00097b6:	0f 20 d8             	mov    eax,cr3
c00097b9:	0f 22 d8             	mov    cr3,eax
c00097bc:	c3                   	ret    
c00097bd:	90                   	nop

c00097be <VAS::~VAS()>:
c00097be:	83 ec 2c             	sub    esp,0x2c
c00097c1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00097c9:	fa                   	cli    
c00097ca:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c00097cf:	40                   	inc    eax
c00097d0:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c00097d5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097da:	8b 00                	mov    eax,DWORD PTR [eax]
c00097dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097df:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097e9:	6a 01                	push   0x1
c00097eb:	50                   	push   eax
c00097ec:	e8 a3 ff ff ff       	call   c0009794 <VAS::mapOtherVASIn(bool, VAS*)>
c00097f1:	83 c4 0c             	add    esp,0xc
c00097f4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00097fc:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009804:	0f 8f d4 00 00 00    	jg     c00098de <VAS::~VAS()+0x120>
c000980a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000980e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009811:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009815:	c1 e2 02             	shl    edx,0x2
c0009818:	01 d0                	add    eax,edx
c000981a:	8b 00                	mov    eax,DWORD PTR [eax]
c000981c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009824:	83 e0 01             	and    eax,0x1
c0009827:	0f 84 a8 00 00 00    	je     c00098d5 <VAS::~VAS()+0x117>
c000982d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009835:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000983d:	7f 72                	jg     c00098b1 <VAS::~VAS()+0xf3>
c000983f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009843:	c1 e0 0a             	shl    eax,0xa
c0009846:	89 c2                	mov    edx,eax
c0009848:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000984c:	01 d0                	add    eax,edx
c000984e:	c1 e0 0c             	shl    eax,0xc
c0009851:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009855:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000985a:	8b 00                	mov    eax,DWORD PTR [eax]
c000985c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000985f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009865:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009869:	6a 01                	push   0x1
c000986b:	50                   	push   eax
c000986c:	e8 01 fd ff ff       	call   c0009572 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009871:	83 c4 0c             	add    esp,0xc
c0009874:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000987c:	8b 00                	mov    eax,DWORD PTR [eax]
c000987e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009882:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009886:	25 01 04 00 00       	and    eax,0x401
c000988b:	3d 01 04 00 00       	cmp    eax,0x401
c0009890:	75 19                	jne    c00098ab <VAS::~VAS()+0xed>
c0009892:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009896:	25 00 f0 ff ff       	and    eax,0xfffff000
c000989b:	83 ec 0c             	sub    esp,0xc
c000989e:	50                   	push   eax
c000989f:	e8 8f e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098a4:	83 c4 10             	add    esp,0x10
c00098a7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098ab:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00098af:	eb 84                	jmp    c0009835 <VAS::~VAS()+0x77>
c00098b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b5:	25 00 04 00 00       	and    eax,0x400
c00098ba:	74 19                	je     c00098d5 <VAS::~VAS()+0x117>
c00098bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098c5:	83 ec 0c             	sub    esp,0xc
c00098c8:	50                   	push   eax
c00098c9:	e8 65 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098ce:	83 c4 10             	add    esp,0x10
c00098d1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098d5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098d9:	e9 1e ff ff ff       	jmp    c00097fc <VAS::~VAS()+0x3e>
c00098de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098e2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098e5:	83 ec 0c             	sub    esp,0xc
c00098e8:	50                   	push   eax
c00098e9:	e8 cf fc ff ff       	call   c00095bd <Virt::freeKernelVirtualPages(unsigned long)>
c00098ee:	83 c4 10             	add    esp,0x10
c00098f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00098f8:	83 ec 0c             	sub    esp,0xc
c00098fb:	50                   	push   eax
c00098fc:	e8 32 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009901:	83 c4 10             	add    esp,0x10
c0009904:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009908:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000990d:	48                   	dec    eax
c000990e:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0009913:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0009918:	85 c0                	test   eax,eax
c000991a:	75 01                	jne    c000991d <VAS::~VAS()+0x15f>
c000991c:	fb                   	sti    
c000991d:	90                   	nop
c000991e:	83 c4 2c             	add    esp,0x2c
c0009921:	c3                   	ret    

c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009922:	55                   	push   ebp
c0009923:	57                   	push   edi
c0009924:	56                   	push   esi
c0009925:	53                   	push   ebx
c0009926:	83 ec 1c             	sub    esp,0x1c
c0009929:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000992d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009931:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009937:	77 0b                	ja     c0009944 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009939:	0f 20 d8             	mov    eax,cr3
c000993c:	0f 20 d8             	mov    eax,cr3
c000993f:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009942:	75 47                	jne    c000998b <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009944:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009948:	09 d8                	or     eax,ebx
c000994a:	a9 ff 0f 00 00       	test   eax,0xfff
c000994f:	75 57                	jne    c00099a8 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009951:	89 de                	mov    esi,ebx
c0009953:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009956:	c1 ee 16             	shr    esi,0x16
c0009959:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009960:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009964:	74 54                	je     c00099ba <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009966:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000996a:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009970:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009974:	c1 e6 0c             	shl    esi,0xc
c0009977:	c1 eb 0a             	shr    ebx,0xa
c000997a:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009980:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009983:	83 c4 1c             	add    esp,0x1c
c0009986:	5b                   	pop    ebx
c0009987:	5e                   	pop    esi
c0009988:	5f                   	pop    edi
c0009989:	5d                   	pop    ebp
c000998a:	c3                   	ret    
c000998b:	83 ec 0c             	sub    esp,0xc
c000998e:	68 68 d5 01 c0       	push   0xc001d568
c0009993:	e8 48 0b 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0009998:	83 c4 10             	add    esp,0x10
c000999b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000999f:	09 d8                	or     eax,ebx
c00099a1:	a9 ff 0f 00 00       	test   eax,0xfff
c00099a6:	74 a9                	je     c0009951 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099a8:	83 ec 0c             	sub    esp,0xc
c00099ab:	68 d0 d5 01 c0       	push   0xc001d5d0
c00099b0:	e8 aa 67 00 00       	call   c001015f <KePanic(char const*)>
c00099b5:	83 c4 10             	add    esp,0x10
c00099b8:	eb 97                	jmp    c0009951 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099be:	e8 d2 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00099c3:	83 ec 0c             	sub    esp,0xc
c00099c6:	89 c5                	mov    ebp,eax
c00099c8:	8b 0d f0 05 02 c0    	mov    ecx,DWORD PTR ds:0xc00205f0
c00099ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099d2:	6a 01                	push   0x1
c00099d4:	e8 b4 f8 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c00099d9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099e0:	6a 01                	push   0x1
c00099e2:	50                   	push   eax
c00099e3:	55                   	push   ebp
c00099e4:	81 cd 07 04 00 00    	or     ebp,0x407
c00099ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00099ee:	51                   	push   ecx
c00099ef:	e8 28 02 00 00       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099f4:	83 c4 1c             	add    esp,0x1c
c00099f7:	68 00 10 00 00       	push   0x1000
c00099fc:	6a 00                	push   0x0
c00099fe:	50                   	push   eax
c00099ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a03:	e8 c8 6a ff ff       	call   c00004d0 <memset>
c0009a08:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009a0c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a0f:	e8 a9 fb ff ff       	call   c00095bd <Virt::freeKernelVirtualPages(unsigned long)>
c0009a14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a18:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a1b:	83 c4 10             	add    esp,0x10
c0009a1e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009a21:	e9 40 ff ff ff       	jmp    c0009966 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009a26 <VAS::allocatePages(int, int)>:
c0009a26:	55                   	push   ebp
c0009a27:	57                   	push   edi
c0009a28:	56                   	push   esi
c0009a29:	53                   	push   ebx
c0009a2a:	83 ec 1c             	sub    esp,0x1c
c0009a2d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a31:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0009a36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a3c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a42:	83 e0 01             	and    eax,0x1
c0009a45:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a49:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a4d:	0f 85 cc 00 00 00    	jne    c0009b1f <VAS::allocatePages(int, int)+0xf9>
c0009a53:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a5a:	85 c0                	test   eax,eax
c0009a5c:	0f 84 a1 00 00 00    	je     c0009b03 <VAS::allocatePages(int, int)+0xdd>
c0009a62:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a66:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a6a:	c1 e6 0c             	shl    esi,0xc
c0009a6d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a71:	85 c0                	test   eax,eax
c0009a73:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a76:	7e 33                	jle    c0009aab <VAS::allocatePages(int, int)+0x85>
c0009a78:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a7c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a80:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a86:	e8 0a e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009a8b:	55                   	push   ebp
c0009a8c:	53                   	push   ebx
c0009a8d:	50                   	push   eax
c0009a8e:	57                   	push   edi
c0009a8f:	e8 8e fe ff ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a94:	83 c4 10             	add    esp,0x10
c0009a97:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a9c:	74 03                	je     c0009aa1 <VAS::allocatePages(int, int)+0x7b>
c0009a9e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009aa1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009aa7:	39 de                	cmp    esi,ebx
c0009aa9:	75 db                	jne    c0009a86 <VAS::allocatePages(int, int)+0x60>
c0009aab:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ab0:	75 12                	jne    c0009ac4 <VAS::allocatePages(int, int)+0x9e>
c0009ab2:	0f 20 d8             	mov    eax,cr3
c0009ab5:	0f 22 d8             	mov    cr3,eax
c0009ab8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009abc:	83 c4 1c             	add    esp,0x1c
c0009abf:	5b                   	pop    ebx
c0009ac0:	5e                   	pop    esi
c0009ac1:	5f                   	pop    edi
c0009ac2:	5d                   	pop    ebp
c0009ac3:	c3                   	ret    
c0009ac4:	c1 ee 0a             	shr    esi,0xa
c0009ac7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009acb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ad1:	c1 eb 0a             	shr    ebx,0xa
c0009ad4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ada:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ae0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ae6:	39 c3                	cmp    ebx,eax
c0009ae8:	77 ce                	ja     c0009ab8 <VAS::allocatePages(int, int)+0x92>
c0009aea:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009aed:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009af3:	39 d8                	cmp    eax,ebx
c0009af5:	73 f3                	jae    c0009aea <VAS::allocatePages(int, int)+0xc4>
c0009af7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009afb:	83 c4 1c             	add    esp,0x1c
c0009afe:	5b                   	pop    ebx
c0009aff:	5e                   	pop    esi
c0009b00:	5f                   	pop    edi
c0009b01:	5d                   	pop    ebp
c0009b02:	c3                   	ret    
c0009b03:	83 ec 0c             	sub    esp,0xc
c0009b06:	68 f4 d5 01 c0       	push   0xc001d5f4
c0009b0b:	e8 4f 66 00 00       	call   c001015f <KePanic(char const*)>
c0009b10:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b17:	83 c4 10             	add    esp,0x10
c0009b1a:	e9 43 ff ff ff       	jmp    c0009a62 <VAS::allocatePages(int, int)+0x3c>
c0009b1f:	83 ec 0c             	sub    esp,0xc
c0009b22:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009b26:	51                   	push   ecx
c0009b27:	e8 61 f7 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c0009b2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b30:	83 c4 10             	add    esp,0x10
c0009b33:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b38:	0f 87 9b 00 00 00    	ja     c0009bd9 <VAS::allocatePages(int, int)+0x1b3>
c0009b3e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b42:	85 d2                	test   edx,edx
c0009b44:	7e 3c                	jle    c0009b82 <VAS::allocatePages(int, int)+0x15c>
c0009b46:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b4a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b4e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b52:	c1 e5 0c             	shl    ebp,0xc
c0009b55:	81 ce 00 04 00 00    	or     esi,0x400
c0009b5b:	01 dd                	add    ebp,ebx
c0009b5d:	e8 33 df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b62:	56                   	push   esi
c0009b63:	53                   	push   ebx
c0009b64:	50                   	push   eax
c0009b65:	57                   	push   edi
c0009b66:	e8 b7 fd ff ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b6b:	83 c4 10             	add    esp,0x10
c0009b6e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b73:	74 03                	je     c0009b78 <VAS::allocatePages(int, int)+0x152>
c0009b75:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b78:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b7e:	39 dd                	cmp    ebp,ebx
c0009b80:	75 db                	jne    c0009b5d <VAS::allocatePages(int, int)+0x137>
c0009b82:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b87:	0f 84 25 ff ff ff    	je     c0009ab2 <VAS::allocatePages(int, int)+0x8c>
c0009b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b95:	89 d3                	mov    ebx,edx
c0009b97:	c1 e0 0c             	shl    eax,0xc
c0009b9a:	c1 eb 0a             	shr    ebx,0xa
c0009b9d:	01 d0                	add    eax,edx
c0009b9f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ba5:	c1 e8 0a             	shr    eax,0xa
c0009ba8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bae:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bb3:	2d 00 00 40 00       	sub    eax,0x400000
c0009bb8:	39 c3                	cmp    ebx,eax
c0009bba:	0f 87 f8 fe ff ff    	ja     c0009ab8 <VAS::allocatePages(int, int)+0x92>
c0009bc0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bc3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bc9:	39 d8                	cmp    eax,ebx
c0009bcb:	73 f3                	jae    c0009bc0 <VAS::allocatePages(int, int)+0x19a>
c0009bcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bd1:	83 c4 1c             	add    esp,0x1c
c0009bd4:	5b                   	pop    ebx
c0009bd5:	5e                   	pop    esi
c0009bd6:	5f                   	pop    edi
c0009bd7:	5d                   	pop    ebp
c0009bd8:	c3                   	ret    
c0009bd9:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0009bde:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009be4:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009beb:	0f 84 4d ff ff ff    	je     c0009b3e <VAS::allocatePages(int, int)+0x118>
c0009bf1:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009bf9:	e9 40 ff ff ff       	jmp    c0009b3e <VAS::allocatePages(int, int)+0x118>

c0009bfe <VAS::setCPUSpecific(unsigned long)>:
c0009bfe:	83 ec 0c             	sub    esp,0xc
c0009c01:	6a 05                	push   0x5
c0009c03:	68 00 00 40 c2       	push   0xc2400000
c0009c08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c0c:	50                   	push   eax
c0009c0d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c11:	52                   	push   edx
c0009c12:	e8 0b fd ff ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c17:	83 c4 1c             	add    esp,0x1c
c0009c1a:	c3                   	ret    
c0009c1b:	90                   	nop

c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009c1c:	55                   	push   ebp
c0009c1d:	57                   	push   edi
c0009c1e:	56                   	push   esi
c0009c1f:	53                   	push   ebx
c0009c20:	83 ec 1c             	sub    esp,0x1c
c0009c23:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0009c28:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c2c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c32:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c36:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c3c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c40:	83 e0 01             	and    eax,0x1
c0009c43:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c4b:	85 c0                	test   eax,eax
c0009c4d:	7e 39                	jle    c0009c88 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c53:	89 f3                	mov    ebx,esi
c0009c55:	c1 e0 0c             	shl    eax,0xc
c0009c58:	01 f0                	add    eax,esi
c0009c5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c5e:	55                   	push   ebp
c0009c5f:	53                   	push   ebx
c0009c60:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c64:	29 f0                	sub    eax,esi
c0009c66:	01 d8                	add    eax,ebx
c0009c68:	50                   	push   eax
c0009c69:	57                   	push   edi
c0009c6a:	e8 b3 fc ff ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c6f:	83 c4 10             	add    esp,0x10
c0009c72:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c77:	74 03                	je     c0009c7c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c79:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c7c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c82:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c86:	75 d6                	jne    c0009c5e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c88:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c8d:	75 10                	jne    c0009c9f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c8f:	0f 20 d8             	mov    eax,cr3
c0009c92:	0f 22 d8             	mov    cr3,eax
c0009c95:	83 c4 1c             	add    esp,0x1c
c0009c98:	89 f0                	mov    eax,esi
c0009c9a:	5b                   	pop    ebx
c0009c9b:	5e                   	pop    esi
c0009c9c:	5f                   	pop    edi
c0009c9d:	5d                   	pop    ebp
c0009c9e:	c3                   	ret    
c0009c9f:	89 f3                	mov    ebx,esi
c0009ca1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009ca5:	c1 eb 0a             	shr    ebx,0xa
c0009ca8:	c1 e0 0c             	shl    eax,0xc
c0009cab:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009cb1:	01 f0                	add    eax,esi
c0009cb3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009cb9:	c1 e8 0a             	shr    eax,0xa
c0009cbc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cc1:	2d 00 00 40 00       	sub    eax,0x400000
c0009cc6:	39 c3                	cmp    ebx,eax
c0009cc8:	77 cb                	ja     c0009c95 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009cca:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ccd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cd3:	39 d8                	cmp    eax,ebx
c0009cd5:	73 f3                	jae    c0009cca <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009cd7:	83 c4 1c             	add    esp,0x1c
c0009cda:	89 f0                	mov    eax,esi
c0009cdc:	5b                   	pop    ebx
c0009cdd:	5e                   	pop    esi
c0009cde:	5f                   	pop    edi
c0009cdf:	5d                   	pop    ebp
c0009ce0:	c3                   	ret    
c0009ce1:	90                   	nop

c0009ce2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009ce2:	55                   	push   ebp
c0009ce3:	57                   	push   edi
c0009ce4:	56                   	push   esi
c0009ce5:	53                   	push   ebx
c0009ce6:	83 ec 1c             	sub    esp,0x1c
c0009ce9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009ced:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009cf1:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009cf5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009cf9:	a9 ff 0f 00 00       	test   eax,0xfff
c0009cfe:	75 4a                	jne    c0009d4a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d00:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d04:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d07:	c1 eb 16             	shr    ebx,0x16
c0009d0a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d11:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d15:	74 4d                	je     c0009d64 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d17:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d1b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d1f:	c1 e8 0a             	shr    eax,0xa
c0009d22:	80 fa 01             	cmp    dl,0x1
c0009d25:	19 d2                	sbb    edx,edx
c0009d27:	c1 e3 0c             	shl    ebx,0xc
c0009d2a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d2e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d34:	25 fc 0f 00 00       	and    eax,0xffc
c0009d39:	01 d8                	add    eax,ebx
c0009d3b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d42:	83 c4 1c             	add    esp,0x1c
c0009d45:	5b                   	pop    ebx
c0009d46:	5e                   	pop    esi
c0009d47:	5f                   	pop    edi
c0009d48:	5d                   	pop    ebp
c0009d49:	c3                   	ret    
c0009d4a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d4e:	83 ec 0c             	sub    esp,0xc
c0009d51:	68 20 d6 01 c0       	push   0xc001d620
c0009d56:	e8 04 64 00 00       	call   c001015f <KePanic(char const*)>
c0009d5b:	83 c4 10             	add    esp,0x10
c0009d5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d62:	eb 9c                	jmp    c0009d00 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d68:	e8 28 dd ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009d6d:	83 ec 0c             	sub    esp,0xc
c0009d70:	89 c5                	mov    ebp,eax
c0009d72:	8b 0d f0 05 02 c0    	mov    ecx,DWORD PTR ds:0xc00205f0
c0009d78:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d7c:	6a 01                	push   0x1
c0009d7e:	e8 0a f5 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c0009d83:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d8a:	6a 01                	push   0x1
c0009d8c:	50                   	push   eax
c0009d8d:	55                   	push   ebp
c0009d8e:	81 cd 07 04 00 00    	or     ebp,0x407
c0009d94:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009d98:	51                   	push   ecx
c0009d99:	e8 7e fe ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d9e:	83 c4 1c             	add    esp,0x1c
c0009da1:	68 00 10 00 00       	push   0x1000
c0009da6:	6a 00                	push   0x0
c0009da8:	50                   	push   eax
c0009da9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dad:	e8 1e 67 ff ff       	call   c00004d0 <memset>
c0009db2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009db6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009db9:	e8 ff f7 ff ff       	call   c00095bd <Virt::freeKernelVirtualPages(unsigned long)>
c0009dbe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009dc1:	83 c4 10             	add    esp,0x10
c0009dc4:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009dc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009dcb:	e9 47 ff ff ff       	jmp    c0009d17 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009dd0 <VAS::VAS(bool)>:
c0009dd0:	53                   	push   ebx
c0009dd1:	83 ec 28             	sub    esp,0x28
c0009dd4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009dd8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009ddc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009de0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009de7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009deb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009df2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009df6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009dfa:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009dfd:	e8 93 dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009e02:	89 c2                	mov    edx,eax
c0009e04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e08:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e0b:	8b 1d f0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205f0
c0009e11:	83 ec 0c             	sub    esp,0xc
c0009e14:	6a 01                	push   0x1
c0009e16:	e8 72 f4 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c0009e1b:	83 c4 10             	add    esp,0x10
c0009e1e:	89 c2                	mov    edx,eax
c0009e20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e24:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e27:	83 ec 0c             	sub    esp,0xc
c0009e2a:	6a 03                	push   0x3
c0009e2c:	6a 01                	push   0x1
c0009e2e:	52                   	push   edx
c0009e2f:	50                   	push   eax
c0009e30:	53                   	push   ebx
c0009e31:	e8 e6 fd ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e36:	83 c4 20             	add    esp,0x20
c0009e39:	89 c2                	mov    edx,eax
c0009e3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e3f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e42:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e4a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e52:	7f 1c                	jg     c0009e70 <VAS::VAS(bool)+0xa0>
c0009e54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e58:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e5b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e5f:	c1 e2 02             	shl    edx,0x2
c0009e62:	01 d0                	add    eax,edx
c0009e64:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e6a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009e6e:	eb da                	jmp    c0009e4a <VAS::VAS(bool)+0x7a>
c0009e70:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009e78:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009e80:	7f 7a                	jg     c0009efc <VAS::VAS(bool)+0x12c>
c0009e82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e86:	2d 00 02 00 00       	sub    eax,0x200
c0009e8b:	c1 e0 0c             	shl    eax,0xc
c0009e8e:	83 c8 03             	or     eax,0x3
c0009e91:	89 c2                	mov    edx,eax
c0009e93:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0009e98:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e9e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ea4:	83 e0 10             	and    eax,0x10
c0009ea7:	84 c0                	test   al,al
c0009ea9:	74 07                	je     c0009eb2 <VAS::VAS(bool)+0xe2>
c0009eab:	b8 00 01 00 00       	mov    eax,0x100
c0009eb0:	eb 05                	jmp    c0009eb7 <VAS::VAS(bool)+0xe7>
c0009eb2:	b8 00 00 00 00       	mov    eax,0x0
c0009eb7:	09 d0                	or     eax,edx
c0009eb9:	89 c1                	mov    ecx,eax
c0009ebb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ebf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ec2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ec6:	c1 e2 02             	shl    edx,0x2
c0009ec9:	01 d0                	add    eax,edx
c0009ecb:	89 ca                	mov    edx,ecx
c0009ecd:	89 10                	mov    DWORD PTR [eax],edx
c0009ecf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ed3:	2d 40 03 00 00       	sub    eax,0x340
c0009ed8:	83 f8 7f             	cmp    eax,0x7f
c0009edb:	77 16                	ja     c0009ef3 <VAS::VAS(bool)+0x123>
c0009edd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ee1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ee4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ee8:	c1 e2 02             	shl    edx,0x2
c0009eeb:	01 d0                	add    eax,edx
c0009eed:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009ef3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009ef7:	e9 7c ff ff ff       	jmp    c0009e78 <VAS::VAS(bool)+0xa8>
c0009efc:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0009f01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f07:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f0d:	83 e0 10             	and    eax,0x10
c0009f10:	84 c0                	test   al,al
c0009f12:	74 07                	je     c0009f1b <VAS::VAS(bool)+0x14b>
c0009f14:	b8 03 41 00 00       	mov    eax,0x4103
c0009f19:	eb 05                	jmp    c0009f20 <VAS::VAS(bool)+0x150>
c0009f1b:	b8 03 40 00 00       	mov    eax,0x4003
c0009f20:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f24:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f27:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f2d:	89 02                	mov    DWORD PTR [edx],eax
c0009f2f:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0009f34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f3a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f40:	83 ec 08             	sub    esp,0x8
c0009f43:	50                   	push   eax
c0009f44:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f48:	e8 b1 fc ff ff       	call   c0009bfe <VAS::setCPUSpecific(unsigned long)>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f54:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f57:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0009f5c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f62:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f68:	83 e0 10             	and    eax,0x10
c0009f6b:	84 c0                	test   al,al
c0009f6d:	74 07                	je     c0009f76 <VAS::VAS(bool)+0x1a6>
c0009f6f:	b8 00 01 00 00       	mov    eax,0x100
c0009f74:	eb 05                	jmp    c0009f7b <VAS::VAS(bool)+0x1ab>
c0009f76:	b8 00 00 00 00       	mov    eax,0x0
c0009f7b:	09 c2                	or     edx,eax
c0009f7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f81:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f84:	05 fc 0f 00 00       	add    eax,0xffc
c0009f89:	83 ca 03             	or     edx,0x3
c0009f8c:	89 10                	mov    DWORD PTR [eax],edx
c0009f8e:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0009f93:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f99:	83 ec 0c             	sub    esp,0xc
c0009f9c:	50                   	push   eax
c0009f9d:	e8 12 1c 00 00       	call   c000bbb4 <Device::getName()>
c0009fa2:	83 c4 10             	add    esp,0x10
c0009fa5:	83 ec 08             	sub    esp,0x8
c0009fa8:	68 c3 d6 01 c0       	push   0xc001d6c3
c0009fad:	50                   	push   eax
c0009fae:	e8 2d 67 ff ff       	call   c00006e0 <strcmp>
c0009fb3:	83 c4 10             	add    esp,0x10
c0009fb6:	85 c0                	test   eax,eax
c0009fb8:	0f 94 c0             	sete   al
c0009fbb:	84 c0                	test   al,al
c0009fbd:	0f 84 87 00 00 00    	je     c000a04a <VAS::VAS(bool)+0x27a>
c0009fc3:	fa                   	cli    
c0009fc4:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0009fc9:	40                   	inc    eax
c0009fca:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0009fcf:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0009fd4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fda:	05 7c 09 00 00       	add    eax,0x97c
c0009fdf:	83 ec 0c             	sub    esp,0xc
c0009fe2:	50                   	push   eax
c0009fe3:	e8 ce d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ff0:	89 c3                	mov    ebx,eax
c0009ff2:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0009ff7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ffd:	05 7c 09 00 00       	add    eax,0x97c
c000a002:	83 ec 0c             	sub    esp,0xc
c000a005:	50                   	push   eax
c000a006:	e8 ab d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a00b:	83 c4 10             	add    esp,0x10
c000a00e:	83 ec 08             	sub    esp,0x8
c000a011:	50                   	push   eax
c000a012:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a016:	e8 83 f5 ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c000a01b:	83 c4 10             	add    esp,0x10
c000a01e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a020:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a025:	6a 11                	push   0x11
c000a027:	53                   	push   ebx
c000a028:	50                   	push   eax
c000a029:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a02d:	e8 f0 f8 ff ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a032:	83 c4 10             	add    esp,0x10
c000a035:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000a03a:	48                   	dec    eax
c000a03b:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c000a040:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000a045:	85 c0                	test   eax,eax
c000a047:	75 01                	jne    c000a04a <VAS::VAS(bool)+0x27a>
c000a049:	fb                   	sti    
c000a04a:	90                   	nop
c000a04b:	83 c4 28             	add    esp,0x28
c000a04e:	5b                   	pop    ebx
c000a04f:	c3                   	ret    

c000a050 <VAS::evict(unsigned long)>:
c000a050:	55                   	push   ebp
c000a051:	57                   	push   edi
c000a052:	56                   	push   esi
c000a053:	53                   	push   ebx
c000a054:	83 ec 1c             	sub    esp,0x1c
c000a057:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a05b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a05f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a063:	e8 66 f3 ff ff       	call   c00093ce <Virt::allocateSwapfilePage()>
c000a068:	8b 0d 0c f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f20c
c000a06e:	89 c7                	mov    edi,eax
c000a070:	85 c9                	test   ecx,ecx
c000a072:	7e 3e                	jle    c000a0b2 <VAS::evict(unsigned long)+0x62>
c000a074:	89 ee                	mov    esi,ebp
c000a076:	31 db                	xor    ebx,ebx
c000a078:	83 ec 0c             	sub    esp,0xc
c000a07b:	57                   	push   edi
c000a07c:	e8 3b f3 ff ff       	call   c00093bc <Virt::swapIDToSector(unsigned long)>
c000a081:	89 34 24             	mov    DWORD PTR [esp],esi
c000a084:	01 d8                	add    eax,ebx
c000a086:	6a 01                	push   0x1
c000a088:	31 d2                	xor    edx,edx
c000a08a:	43                   	inc    ebx
c000a08b:	52                   	push   edx
c000a08c:	81 c6 00 02 00 00    	add    esi,0x200
c000a092:	50                   	push   eax
c000a093:	0f be 05 18 f2 01 c0 	movsx  eax,BYTE PTR ds:0xc001f218
c000a09a:	8b 14 85 5c 29 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd6a4]
c000a0a1:	52                   	push   edx
c000a0a2:	e8 a7 2b 00 00       	call   c000cc4e <LogicalDisk::write(unsigned long long, int, void*)>
c000a0a7:	83 c4 20             	add    esp,0x20
c000a0aa:	39 1d 0c f2 01 c0    	cmp    DWORD PTR ds:0xc001f20c,ebx
c000a0b0:	7f c6                	jg     c000a078 <VAS::evict(unsigned long)+0x28>
c000a0b2:	83 ec 08             	sub    esp,0x8
c000a0b5:	c1 e7 0b             	shl    edi,0xb
c000a0b8:	55                   	push   ebp
c000a0b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0bd:	50                   	push   eax
c000a0be:	e8 db f4 ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c000a0c3:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0c5:	89 d1                	mov    ecx,edx
c000a0c7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a0cd:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a0d3:	09 cf                	or     edi,ecx
c000a0d5:	89 38                	mov    DWORD PTR [eax],edi
c000a0d7:	89 14 24             	mov    DWORD PTR [esp],edx
c000a0da:	ff 05 e8 05 02 c0    	inc    DWORD PTR ds:0xc00205e8
c000a0e0:	e8 4e d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a0e5:	0f 20 d8             	mov    eax,cr3
c000a0e8:	0f 22 d8             	mov    cr3,eax
c000a0eb:	a1 e4 05 02 c0       	mov    eax,ds:0xc00205e4
c000a0f0:	c7 44 24 40 d1 d6 01 c0 	mov    DWORD PTR [esp+0x40],0xc001d6d1
c000a0f8:	8d 50 01             	lea    edx,[eax+0x1]
c000a0fb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0ff:	89 15 e4 05 02 c0    	mov    DWORD PTR ds:0xc00205e4,edx
c000a105:	83 c4 2c             	add    esp,0x2c
c000a108:	5b                   	pop    ebx
c000a109:	5e                   	pop    esi
c000a10a:	5f                   	pop    edi
c000a10b:	5d                   	pop    ebp
c000a10c:	e9 cf 03 00 00       	jmp    c000a4e0 <Dbg::kprintf(char const*, ...)>
c000a111:	90                   	nop

c000a112 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a112:	55                   	push   ebp
c000a113:	57                   	push   edi
c000a114:	56                   	push   esi
c000a115:	53                   	push   ebx
c000a116:	83 ec 14             	sub    esp,0x14
c000a119:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a11d:	53                   	push   ebx
c000a11e:	68 e2 d6 01 c0       	push   0xc001d6e2
c000a123:	e8 b8 03 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000a128:	83 c4 10             	add    esp,0x10
c000a12b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a131:	74 21                	je     c000a154 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a133:	83 ec 08             	sub    esp,0x8
c000a136:	53                   	push   ebx
c000a137:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a13b:	57                   	push   edi
c000a13c:	e8 5d f4 ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c000a141:	83 c4 10             	add    esp,0x10
c000a144:	89 c6                	mov    esi,eax
c000a146:	85 c0                	test   eax,eax
c000a148:	74 0a                	je     c000a154 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a14a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a14c:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a152:	74 0a                	je     c000a15e <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a154:	31 c0                	xor    eax,eax
c000a156:	83 c4 0c             	add    esp,0xc
c000a159:	5b                   	pop    ebx
c000a15a:	5e                   	pop    esi
c000a15b:	5f                   	pop    edi
c000a15c:	5d                   	pop    ebp
c000a15d:	c3                   	ret    
c000a15e:	e8 32 d9 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a163:	c1 ed 0b             	shr    ebp,0xb
c000a166:	8b 16                	mov    edx,DWORD PTR [esi]
c000a168:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a16e:	09 c2                	or     edx,eax
c000a170:	81 ca 01 08 00 00    	or     edx,0x801
c000a176:	89 16                	mov    DWORD PTR [esi],edx
c000a178:	8b 35 0c f2 01 c0    	mov    esi,DWORD PTR ds:0xc001f20c
c000a17e:	85 f6                	test   esi,esi
c000a180:	7e 3e                	jle    c000a1c0 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a182:	89 df                	mov    edi,ebx
c000a184:	31 f6                	xor    esi,esi
c000a186:	83 ec 0c             	sub    esp,0xc
c000a189:	55                   	push   ebp
c000a18a:	e8 2d f2 ff ff       	call   c00093bc <Virt::swapIDToSector(unsigned long)>
c000a18f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a192:	01 f0                	add    eax,esi
c000a194:	6a 01                	push   0x1
c000a196:	31 d2                	xor    edx,edx
c000a198:	46                   	inc    esi
c000a199:	52                   	push   edx
c000a19a:	81 c7 00 02 00 00    	add    edi,0x200
c000a1a0:	50                   	push   eax
c000a1a1:	0f be 05 18 f2 01 c0 	movsx  eax,BYTE PTR ds:0xc001f218
c000a1a8:	8b 0c 85 5c 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd6a4]
c000a1af:	51                   	push   ecx
c000a1b0:	e8 2d 2a 00 00       	call   c000cbe2 <LogicalDisk::read(unsigned long long, int, void*)>
c000a1b5:	83 c4 20             	add    esp,0x20
c000a1b8:	39 35 0c f2 01 c0    	cmp    DWORD PTR ds:0xc001f20c,esi
c000a1be:	7f c6                	jg     c000a186 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a1c0:	a1 e8 05 02 c0       	mov    eax,ds:0xc00205e8
c000a1c5:	48                   	dec    eax
c000a1c6:	52                   	push   edx
c000a1c7:	a3 e8 05 02 c0       	mov    ds:0xc00205e8,eax
c000a1cc:	50                   	push   eax
c000a1cd:	53                   	push   ebx
c000a1ce:	68 f5 d6 01 c0       	push   0xc001d6f5
c000a1d3:	e8 08 03 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000a1d8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a1db:	e8 be f1 ff ff       	call   c000939e <Virt::freeSwapfilePage(unsigned long)>
c000a1e0:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000a1e5:	83 c4 10             	add    esp,0x10
c000a1e8:	48                   	dec    eax
c000a1e9:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c000a1ee:	85 c0                	test   eax,eax
c000a1f0:	75 01                	jne    c000a1f3 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a1f2:	fb                   	sti    
c000a1f3:	0f 20 d8             	mov    eax,cr3
c000a1f6:	0f 22 d8             	mov    cr3,eax
c000a1f9:	b0 01                	mov    al,0x1
c000a1fb:	e9 56 ff ff ff       	jmp    c000a156 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a200 <VAS::scanForEviction()>:
c000a200:	57                   	push   edi
c000a201:	31 ff                	xor    edi,edi
c000a203:	56                   	push   esi
c000a204:	53                   	push   ebx
c000a205:	83 ec 10             	sub    esp,0x10
c000a208:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a20c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a20f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a215:	75 0e                	jne    c000a225 <VAS::scanForEviction()+0x25>
c000a217:	89 da                	mov    edx,ebx
c000a219:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a21c:	c1 ea 16             	shr    edx,0x16
c000a21f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a223:	74 4e                	je     c000a273 <VAS::scanForEviction()+0x73>
c000a225:	53                   	push   ebx
c000a226:	56                   	push   esi
c000a227:	e8 72 f3 ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c000a22c:	5a                   	pop    edx
c000a22d:	8b 10                	mov    edx,DWORD PTR [eax]
c000a22f:	59                   	pop    ecx
c000a230:	89 d1                	mov    ecx,edx
c000a232:	81 e1 01 08 00 00    	and    ecx,0x801
c000a238:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a23e:	74 3e                	je     c000a27e <VAS::scanForEviction()+0x7e>
c000a240:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a246:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a24c:	76 2b                	jbe    c000a279 <VAS::scanForEviction()+0x79>
c000a24e:	47                   	inc    edi
c000a24f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a256:	83 ff 03             	cmp    edi,0x3
c000a259:	74 32                	je     c000a28d <VAS::scanForEviction()+0x8d>
c000a25b:	31 db                	xor    ebx,ebx
c000a25d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a263:	75 c0                	jne    c000a225 <VAS::scanForEviction()+0x25>
c000a265:	89 da                	mov    edx,ebx
c000a267:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a26a:	c1 ea 16             	shr    edx,0x16
c000a26d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a271:	75 b2                	jne    c000a225 <VAS::scanForEviction()+0x25>
c000a273:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a279:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a27c:	eb 91                	jmp    c000a20f <VAS::scanForEviction()+0xf>
c000a27e:	f6 c2 20             	test   dl,0x20
c000a281:	74 13                	je     c000a296 <VAS::scanForEviction()+0x96>
c000a283:	83 e2 df             	and    edx,0xffffffdf
c000a286:	89 10                	mov    DWORD PTR [eax],edx
c000a288:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a28b:	eb b3                	jmp    c000a240 <VAS::scanForEviction()+0x40>
c000a28d:	83 c4 10             	add    esp,0x10
c000a290:	31 c0                	xor    eax,eax
c000a292:	5b                   	pop    ebx
c000a293:	5e                   	pop    esi
c000a294:	5f                   	pop    edi
c000a295:	c3                   	ret    
c000a296:	83 ec 08             	sub    esp,0x8
c000a299:	89 d0                	mov    eax,edx
c000a29b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2a4:	53                   	push   ebx
c000a2a5:	68 0a d7 01 c0       	push   0xc001d70a
c000a2aa:	e8 31 02 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000a2af:	58                   	pop    eax
c000a2b0:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a2b3:	5a                   	pop    edx
c000a2b4:	51                   	push   ecx
c000a2b5:	56                   	push   esi
c000a2b6:	e8 95 fd ff ff       	call   c000a050 <VAS::evict(unsigned long)>
c000a2bb:	5b                   	pop    ebx
c000a2bc:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a2bf:	5f                   	pop    edi
c000a2c0:	50                   	push   eax
c000a2c1:	68 1e d7 01 c0       	push   0xc001d71e
c000a2c6:	e8 15 02 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000a2cb:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a2d2:	83 c4 10             	add    esp,0x10
c000a2d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2d9:	83 c4 10             	add    esp,0x10
c000a2dc:	5b                   	pop    ebx
c000a2dd:	5e                   	pop    esi
c000a2de:	5f                   	pop    edi
c000a2df:	c3                   	ret    

c000a2e0 <mapVASFirstTime>:
c000a2e0:	55                   	push   ebp
c000a2e1:	57                   	push   edi
c000a2e2:	56                   	push   esi
c000a2e3:	53                   	push   ebx
c000a2e4:	83 ec 0c             	sub    esp,0xc
c000a2e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a2ec:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a2ef:	4a                   	dec    edx
c000a2f0:	0f 84 8c 00 00 00    	je     c000a382 <mapVASFirstTime+0xa2>
c000a2f6:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a2f9:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a2fc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a301:	c1 e5 15             	shl    ebp,0x15
c000a304:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a309:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a30f:	29 eb                	sub    ebx,ebp
c000a311:	29 ef                	sub    edi,ebp
c000a313:	e8 7d d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a318:	83 ec 0c             	sub    esp,0xc
c000a31b:	68 03 04 00 00       	push   0x403
c000a320:	6a 01                	push   0x1
c000a322:	53                   	push   ebx
c000a323:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a329:	50                   	push   eax
c000a32a:	56                   	push   esi
c000a32b:	e8 ec f8 ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a330:	83 c4 20             	add    esp,0x20
c000a333:	39 fb                	cmp    ebx,edi
c000a335:	75 dc                	jne    c000a313 <mapVASFirstTime+0x33>
c000a337:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a33c:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a341:	29 eb                	sub    ebx,ebp
c000a343:	29 ef                	sub    edi,ebp
c000a345:	e8 4b d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a34a:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a34e:	19 d2                	sbb    edx,edx
c000a350:	83 ec 0c             	sub    esp,0xc
c000a353:	83 e2 04             	and    edx,0x4
c000a356:	81 c2 03 04 00 00    	add    edx,0x403
c000a35c:	52                   	push   edx
c000a35d:	6a 01                	push   0x1
c000a35f:	53                   	push   ebx
c000a360:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a366:	50                   	push   eax
c000a367:	56                   	push   esi
c000a368:	e8 af f8 ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a36d:	83 c4 20             	add    esp,0x20
c000a370:	39 df                	cmp    edi,ebx
c000a372:	75 d1                	jne    c000a345 <mapVASFirstTime+0x65>
c000a374:	0f 20 d8             	mov    eax,cr3
c000a377:	0f 22 d8             	mov    cr3,eax
c000a37a:	83 c4 0c             	add    esp,0xc
c000a37d:	5b                   	pop    ebx
c000a37e:	5e                   	pop    esi
c000a37f:	5f                   	pop    edi
c000a380:	5d                   	pop    ebp
c000a381:	c3                   	ret    
c000a382:	83 ec 0c             	sub    esp,0xc
c000a385:	68 31 d7 01 c0       	push   0xc001d731
c000a38a:	e8 51 01 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000a38f:	83 c4 10             	add    esp,0x10
c000a392:	83 c4 0c             	add    esp,0xc
c000a395:	5b                   	pop    ebx
c000a396:	5e                   	pop    esi
c000a397:	5f                   	pop    edi
c000a398:	5d                   	pop    ebp
c000a399:	c3                   	ret    

c000a39a <__cxa_atexit>:
c000a39a:	31 c0                	xor    eax,eax
c000a39c:	c3                   	ret    

c000a39d <__cxa_finalize>:
c000a39d:	c3                   	ret    

c000a39e <__stack_chk_fail>:
c000a39e:	55                   	push   ebp
c000a39f:	89 e5                	mov    ebp,esp
c000a3a1:	83 ec 10             	sub    esp,0x10
c000a3a4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a3a7:	68 4a d7 01 c0       	push   0xc001d74a
c000a3ac:	e8 2f 01 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000a3b1:	58                   	pop    eax
c000a3b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3b5:	5a                   	pop    edx
c000a3b6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a3b9:	68 4a d7 01 c0       	push   0xc001d74a
c000a3be:	e8 1d 01 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000a3c3:	c7 04 24 52 d7 01 c0 	mov    DWORD PTR [esp],0xc001d752
c000a3ca:	e8 90 5d 00 00       	call   c001015f <KePanic(char const*)>
c000a3cf:	83 c4 10             	add    esp,0x10
c000a3d2:	c9                   	leave  
c000a3d3:	c3                   	ret    

c000a3d4 <__cxa_pure_virtual>:
c000a3d4:	83 ec 18             	sub    esp,0x18
c000a3d7:	68 6a d7 01 c0       	push   0xc001d76a
c000a3dc:	e8 7e 5d 00 00       	call   c001015f <KePanic(char const*)>
c000a3e1:	83 c4 1c             	add    esp,0x1c
c000a3e4:	c3                   	ret    

c000a3e5 <operator new[](unsigned long)>:
c000a3e5:	e9 cf d3 ff ff       	jmp    c00077b9 <malloc>

c000a3ea <operator delete(void*, unsigned long)>:
c000a3ea:	e9 ea d3 ff ff       	jmp    c00077d9 <rfree>

c000a3ef <operator delete[](void*)>:
c000a3ef:	e9 e5 d3 ff ff       	jmp    c00077d9 <rfree>

c000a3f4 <operator delete[](void*, unsigned long)>:
c000a3f4:	e9 e0 d3 ff ff       	jmp    c00077d9 <rfree>

c000a3f9 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a3f9:	55                   	push   ebp
c000a3fa:	b9 04 00 00 00       	mov    ecx,0x4
c000a3ff:	57                   	push   edi
c000a400:	56                   	push   esi
c000a401:	be 73 d3 01 c0       	mov    esi,0xc001d373
c000a406:	53                   	push   ebx
c000a407:	83 ec 20             	sub    esp,0x20
c000a40a:	a1 72 d3 01 c0       	mov    eax,ds:0xc001d372
c000a40f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a413:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a417:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a41b:	a1 7f d3 01 c0       	mov    eax,ds:0xc001d37f
c000a420:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a424:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a428:	fc                   	cld    
c000a429:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a42b:	89 ee                	mov    esi,ebp
c000a42d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a431:	eb 02                	jmp    c000a435 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a433:	89 c6                	mov    esi,eax
c000a435:	31 d2                	xor    edx,edx
c000a437:	41                   	inc    ecx
c000a438:	89 f0                	mov    eax,esi
c000a43a:	f7 f3                	div    ebx
c000a43c:	39 de                	cmp    esi,ebx
c000a43e:	73 f3                	jae    c000a433 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a440:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a443:	eb 02                	jmp    c000a447 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a445:	89 c5                	mov    ebp,eax
c000a447:	31 d2                	xor    edx,edx
c000a449:	49                   	dec    ecx
c000a44a:	89 e8                	mov    eax,ebp
c000a44c:	f7 f3                	div    ebx
c000a44e:	39 dd                	cmp    ebp,ebx
c000a450:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a454:	88 11                	mov    BYTE PTR [ecx],dl
c000a456:	73 ed                	jae    c000a445 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a45c:	83 c4 20             	add    esp,0x20
c000a45f:	5b                   	pop    ebx
c000a460:	5e                   	pop    esi
c000a461:	5f                   	pop    edi
c000a462:	5d                   	pop    ebp
c000a463:	c3                   	ret    

c000a464 <Dbg::logc(char)>:
c000a464:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a468:	f6 05 10 05 02 c0 10 	test   BYTE PTR ds:0xc0020510,0x10
c000a46f:	75 12                	jne    c000a483 <Dbg::logc(char)+0x1f>
c000a471:	ba fd 03 00 00       	mov    edx,0x3fd
c000a476:	ec                   	in     al,dx
c000a477:	a8 20                	test   al,0x20
c000a479:	74 fb                	je     c000a476 <Dbg::logc(char)+0x12>
c000a47b:	ba f8 03 00 00       	mov    edx,0x3f8
c000a480:	88 c8                	mov    al,cl
c000a482:	ee                   	out    dx,al
c000a483:	c3                   	ret    

c000a484 <Dbg::logs(char*)>:
c000a484:	53                   	push   ebx
c000a485:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a489:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a48c:	84 c0                	test   al,al
c000a48e:	74 0f                	je     c000a49f <Dbg::logs(char*)+0x1b>
c000a490:	50                   	push   eax
c000a491:	43                   	inc    ebx
c000a492:	e8 cd ff ff ff       	call   c000a464 <Dbg::logc(char)>
c000a497:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a49a:	5a                   	pop    edx
c000a49b:	84 c0                	test   al,al
c000a49d:	75 f1                	jne    c000a490 <Dbg::logs(char*)+0xc>
c000a49f:	5b                   	pop    ebx
c000a4a0:	c3                   	ret    

c000a4a1 <Dbg::logWriteInt(unsigned int)>:
c000a4a1:	83 ec 10             	sub    esp,0x10
c000a4a4:	6a 0a                	push   0xa
c000a4a6:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4aa:	50                   	push   eax
c000a4ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4af:	50                   	push   eax
c000a4b0:	e8 44 ff ff ff       	call   c000a3f9 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4b5:	50                   	push   eax
c000a4b6:	e8 c9 ff ff ff       	call   c000a484 <Dbg::logs(char*)>
c000a4bb:	83 c4 20             	add    esp,0x20
c000a4be:	c3                   	ret    

c000a4bf <Dbg::logWriteIntBase(unsigned int, int)>:
c000a4bf:	83 ec 10             	sub    esp,0x10
c000a4c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4c6:	50                   	push   eax
c000a4c7:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4cb:	50                   	push   eax
c000a4cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4d0:	52                   	push   edx
c000a4d1:	e8 23 ff ff ff       	call   c000a3f9 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4d6:	50                   	push   eax
c000a4d7:	e8 a8 ff ff ff       	call   c000a484 <Dbg::logs(char*)>
c000a4dc:	83 c4 20             	add    esp,0x20
c000a4df:	c3                   	ret    

c000a4e0 <Dbg::kprintf(char const*, ...)>:
c000a4e0:	55                   	push   ebp
c000a4e1:	57                   	push   edi
c000a4e2:	56                   	push   esi
c000a4e3:	53                   	push   ebx
c000a4e4:	83 ec 0c             	sub    esp,0xc
c000a4e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a4eb:	f6 05 10 05 02 c0 10 	test   BYTE PTR ds:0xc0020510,0x10
c000a4f2:	74 08                	je     c000a4fc <Dbg::kprintf(char const*, ...)+0x1c>
c000a4f4:	83 c4 0c             	add    esp,0xc
c000a4f7:	5b                   	pop    ebx
c000a4f8:	5e                   	pop    esi
c000a4f9:	5f                   	pop    edi
c000a4fa:	5d                   	pop    ebp
c000a4fb:	c3                   	ret    
c000a4fc:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a500:	31 ff                	xor    edi,edi
c000a502:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a506:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a509:	84 c0                	test   al,al
c000a50b:	74 e7                	je     c000a4f4 <Dbg::kprintf(char const*, ...)+0x14>
c000a50d:	8d 77 01             	lea    esi,[edi+0x1]
c000a510:	3c 25                	cmp    al,0x25
c000a512:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a515:	75 47                	jne    c000a55e <Dbg::kprintf(char const*, ...)+0x7e>
c000a517:	83 c7 02             	add    edi,0x2
c000a51a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a51d:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a520:	83 e8 25             	sub    eax,0x25
c000a523:	3c 53                	cmp    al,0x53
c000a525:	0f 87 d2 00 00 00    	ja     c000a5fd <Dbg::kprintf(char const*, ...)+0x11d>
c000a52b:	25 ff 00 00 00       	and    eax,0xff
c000a530:	ff 24 85 80 d7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2880]
c000a537:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a53b:	89 c8                	mov    eax,ecx
c000a53d:	83 c1 04             	add    ecx,0x4
c000a540:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a544:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a546:	55                   	push   ebp
c000a547:	e8 55 ff ff ff       	call   c000a4a1 <Dbg::logWriteInt(unsigned int)>
c000a54c:	58                   	pop    eax
c000a54d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a550:	84 c0                	test   al,al
c000a552:	74 a0                	je     c000a4f4 <Dbg::kprintf(char const*, ...)+0x14>
c000a554:	8d 77 01             	lea    esi,[edi+0x1]
c000a557:	3c 25                	cmp    al,0x25
c000a559:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a55c:	74 b9                	je     c000a517 <Dbg::kprintf(char const*, ...)+0x37>
c000a55e:	50                   	push   eax
c000a55f:	89 f7                	mov    edi,esi
c000a561:	e8 fe fe ff ff       	call   c000a464 <Dbg::logc(char)>
c000a566:	89 ee                	mov    esi,ebp
c000a568:	58                   	pop    eax
c000a569:	eb e2                	jmp    c000a54d <Dbg::kprintf(char const*, ...)+0x6d>
c000a56b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a56f:	89 c8                	mov    eax,ecx
c000a571:	83 c1 04             	add    ecx,0x4
c000a574:	8b 00                	mov    eax,DWORD PTR [eax]
c000a576:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a57a:	50                   	push   eax
c000a57b:	e8 04 ff ff ff       	call   c000a484 <Dbg::logs(char*)>
c000a580:	58                   	pop    eax
c000a581:	eb ca                	jmp    c000a54d <Dbg::kprintf(char const*, ...)+0x6d>
c000a583:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a587:	89 d0                	mov    eax,edx
c000a589:	83 c2 04             	add    edx,0x4
c000a58c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a590:	8b 00                	mov    eax,DWORD PTR [eax]
c000a592:	50                   	push   eax
c000a593:	e8 09 ff ff ff       	call   c000a4a1 <Dbg::logWriteInt(unsigned int)>
c000a598:	58                   	pop    eax
c000a599:	eb b2                	jmp    c000a54d <Dbg::kprintf(char const*, ...)+0x6d>
c000a59b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a59f:	89 d0                	mov    eax,edx
c000a5a1:	83 c2 04             	add    edx,0x4
c000a5a4:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a5a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5ab:	50                   	push   eax
c000a5ac:	e8 b3 fe ff ff       	call   c000a464 <Dbg::logc(char)>
c000a5b1:	58                   	pop    eax
c000a5b2:	eb 99                	jmp    c000a54d <Dbg::kprintf(char const*, ...)+0x6d>
c000a5b4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5b8:	89 c8                	mov    eax,ecx
c000a5ba:	83 c1 04             	add    ecx,0x4
c000a5bd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5c1:	6a 10                	push   0x10
c000a5c3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a5c5:	51                   	push   ecx
c000a5c6:	e8 f4 fe ff ff       	call   c000a4bf <Dbg::logWriteIntBase(unsigned int, int)>
c000a5cb:	5d                   	pop    ebp
c000a5cc:	58                   	pop    eax
c000a5cd:	e9 7b ff ff ff       	jmp    c000a54d <Dbg::kprintf(char const*, ...)+0x6d>
c000a5d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5d6:	89 d0                	mov    eax,edx
c000a5d8:	83 c2 08             	add    edx,0x8
c000a5db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5df:	6a 10                	push   0x10
c000a5e1:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5e3:	50                   	push   eax
c000a5e4:	e8 d6 fe ff ff       	call   c000a4bf <Dbg::logWriteIntBase(unsigned int, int)>
c000a5e9:	58                   	pop    eax
c000a5ea:	5a                   	pop    edx
c000a5eb:	e9 5d ff ff ff       	jmp    c000a54d <Dbg::kprintf(char const*, ...)+0x6d>
c000a5f0:	6a 25                	push   0x25
c000a5f2:	e8 6d fe ff ff       	call   c000a464 <Dbg::logc(char)>
c000a5f7:	5a                   	pop    edx
c000a5f8:	e9 50 ff ff ff       	jmp    c000a54d <Dbg::kprintf(char const*, ...)+0x6d>
c000a5fd:	6a 25                	push   0x25
c000a5ff:	e8 60 fe ff ff       	call   c000a464 <Dbg::logc(char)>
c000a604:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a608:	50                   	push   eax
c000a609:	e8 56 fe ff ff       	call   c000a464 <Dbg::logc(char)>
c000a60e:	5a                   	pop    edx
c000a60f:	59                   	pop    ecx
c000a610:	e9 38 ff ff ff       	jmp    c000a54d <Dbg::kprintf(char const*, ...)+0x6d>
c000a615:	90                   	nop

c000a616 <File::read(unsigned long long, void*, int*)>:
c000a616:	53                   	push   ebx
c000a617:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a61b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a61f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a626:	3c 19                	cmp    al,0x19
c000a628:	77 35                	ja     c000a65f <File::read(unsigned long long, void*, int*)+0x49>
c000a62a:	8b 04 85 60 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5a0]
c000a631:	85 c0                	test   eax,eax
c000a633:	74 2a                	je     c000a65f <File::read(unsigned long long, void*, int*)+0x49>
c000a635:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a63b:	85 c0                	test   eax,eax
c000a63d:	74 20                	je     c000a65f <File::read(unsigned long long, void*, int*)+0x49>
c000a63f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a643:	74 21                	je     c000a666 <File::read(unsigned long long, void*, int*)+0x50>
c000a645:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a647:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a64b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a651:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a655:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a659:	5b                   	pop    ebx
c000a65a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a65d:	ff e0                	jmp    eax
c000a65f:	b8 0b 00 00 00       	mov    eax,0xb
c000a664:	eb 05                	jmp    c000a66b <File::read(unsigned long long, void*, int*)+0x55>
c000a666:	b8 05 00 00 00       	mov    eax,0x5
c000a66b:	5b                   	pop    ebx
c000a66c:	c3                   	ret    
c000a66d:	90                   	nop

c000a66e <File::write(unsigned long long, void*, int*)>:
c000a66e:	53                   	push   ebx
c000a66f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a673:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a677:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a67e:	3c 19                	cmp    al,0x19
c000a680:	77 35                	ja     c000a6b7 <File::write(unsigned long long, void*, int*)+0x49>
c000a682:	8b 04 85 60 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5a0]
c000a689:	85 c0                	test   eax,eax
c000a68b:	74 2a                	je     c000a6b7 <File::write(unsigned long long, void*, int*)+0x49>
c000a68d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a693:	85 c0                	test   eax,eax
c000a695:	74 20                	je     c000a6b7 <File::write(unsigned long long, void*, int*)+0x49>
c000a697:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a69b:	74 21                	je     c000a6be <File::write(unsigned long long, void*, int*)+0x50>
c000a69d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a69f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6a3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6b1:	5b                   	pop    ebx
c000a6b2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a6b5:	ff e0                	jmp    eax
c000a6b7:	b8 0b 00 00 00       	mov    eax,0xb
c000a6bc:	eb 05                	jmp    c000a6c3 <File::write(unsigned long long, void*, int*)+0x55>
c000a6be:	b8 05 00 00 00       	mov    eax,0x5
c000a6c3:	5b                   	pop    ebx
c000a6c4:	c3                   	ret    
c000a6c5:	90                   	nop

c000a6c6 <Directory::read(unsigned long long, void*, int*)>:
c000a6c6:	53                   	push   ebx
c000a6c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6cf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6d6:	3c 19                	cmp    al,0x19
c000a6d8:	77 35                	ja     c000a70f <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6da:	8b 04 85 60 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5a0]
c000a6e1:	85 c0                	test   eax,eax
c000a6e3:	74 2a                	je     c000a70f <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6e5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6eb:	85 c0                	test   eax,eax
c000a6ed:	74 20                	je     c000a70f <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6ef:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6f3:	74 21                	je     c000a716 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a6f5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6fb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a701:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a705:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a709:	5b                   	pop    ebx
c000a70a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a70d:	ff e0                	jmp    eax
c000a70f:	b8 0b 00 00 00       	mov    eax,0xb
c000a714:	eb 05                	jmp    c000a71b <Directory::read(unsigned long long, void*, int*)+0x55>
c000a716:	b8 05 00 00 00       	mov    eax,0x5
c000a71b:	5b                   	pop    ebx
c000a71c:	c3                   	ret    
c000a71d:	90                   	nop

c000a71e <Directory::write(unsigned long long, void*, int*)>:
c000a71e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a722:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a729:	b8 0b 00 00 00       	mov    eax,0xb
c000a72e:	80 fa 19             	cmp    dl,0x19
c000a731:	77 18                	ja     c000a74b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a733:	8b 14 95 60 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5a0]
c000a73a:	85 d2                	test   edx,edx
c000a73c:	74 0d                	je     c000a74b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a73e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a745:	19 c0                	sbb    eax,eax
c000a747:	83 e0 0a             	and    eax,0xa
c000a74a:	40                   	inc    eax
c000a74b:	c3                   	ret    

c000a74c <File::isAtty()>:
c000a74c:	31 c0                	xor    eax,eax
c000a74e:	c3                   	ret    
c000a74f:	90                   	nop

c000a750 <Directory::isAtty()>:
c000a750:	31 c0                	xor    eax,eax
c000a752:	c3                   	ret    
c000a753:	90                   	nop

c000a754 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a754:	b8 0a 00 00 00       	mov    eax,0xa
c000a759:	c3                   	ret    

c000a75a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a75a:	b8 0a 00 00 00       	mov    eax,0xa
c000a75f:	c3                   	ret    

c000a760 <Filesystem::allocateSwapfile(char const*, int)>:
c000a760:	31 c0                	xor    eax,eax
c000a762:	31 d2                	xor    edx,edx
c000a764:	c3                   	ret    
c000a765:	90                   	nop

c000a766 <File::~File()>:
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	ba 40 d9 01 c0       	mov    edx,0xc001d940
c000a76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a772:	89 10                	mov    DWORD PTR [eax],edx
c000a774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a778:	83 ec 0c             	sub    esp,0xc
c000a77b:	50                   	push   eax
c000a77c:	e8 ab e8 ff ff       	call   c000902c <UnixFile::~UnixFile()>
c000a781:	83 c4 10             	add    esp,0x10
c000a784:	90                   	nop
c000a785:	83 c4 0c             	add    esp,0xc
c000a788:	c3                   	ret    
c000a789:	90                   	nop

c000a78a <File::~File()>:
c000a78a:	83 ec 0c             	sub    esp,0xc
c000a78d:	83 ec 0c             	sub    esp,0xc
c000a790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a794:	e8 cd ff ff ff       	call   c000a766 <File::~File()>
c000a799:	83 c4 10             	add    esp,0x10
c000a79c:	83 ec 08             	sub    esp,0x8
c000a79f:	68 14 01 00 00       	push   0x114
c000a7a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7a8:	e8 3d fc ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000a7ad:	83 c4 10             	add    esp,0x10
c000a7b0:	83 c4 0c             	add    esp,0xc
c000a7b3:	c3                   	ret    

c000a7b4 <Directory::~Directory()>:
c000a7b4:	83 ec 0c             	sub    esp,0xc
c000a7b7:	ba 5c d9 01 c0       	mov    edx,0xc001d95c
c000a7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c0:	89 10                	mov    DWORD PTR [eax],edx
c000a7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c6:	83 ec 0c             	sub    esp,0xc
c000a7c9:	50                   	push   eax
c000a7ca:	e8 5d e8 ff ff       	call   c000902c <UnixFile::~UnixFile()>
c000a7cf:	83 c4 10             	add    esp,0x10
c000a7d2:	90                   	nop
c000a7d3:	83 c4 0c             	add    esp,0xc
c000a7d6:	c3                   	ret    
c000a7d7:	90                   	nop

c000a7d8 <Directory::~Directory()>:
c000a7d8:	83 ec 0c             	sub    esp,0xc
c000a7db:	83 ec 0c             	sub    esp,0xc
c000a7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e2:	e8 cd ff ff ff       	call   c000a7b4 <Directory::~Directory()>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	83 ec 08             	sub    esp,0x8
c000a7ed:	68 14 01 00 00       	push   0x114
c000a7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7f6:	e8 ef fb ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000a7fb:	83 c4 10             	add    esp,0x10
c000a7fe:	83 c4 0c             	add    esp,0xc
c000a801:	c3                   	ret    

c000a802 <Filesystem::Filesystem()>:
c000a802:	ba d8 d8 01 c0       	mov    edx,0xc001d8d8
c000a807:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a80b:	89 10                	mov    DWORD PTR [eax],edx
c000a80d:	8b 15 f4 05 02 c0    	mov    edx,DWORD PTR ds:0xc00205f4
c000a813:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a817:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a81a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a81e:	a3 f4 05 02 c0       	mov    ds:0xc00205f4,eax
c000a823:	90                   	nop
c000a824:	c3                   	ret    
c000a825:	90                   	nop

c000a826 <Filesystem::~Filesystem()>:
c000a826:	ba d8 d8 01 c0       	mov    edx,0xc001d8d8
c000a82b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a82f:	89 10                	mov    DWORD PTR [eax],edx
c000a831:	90                   	nop
c000a832:	c3                   	ret    
c000a833:	90                   	nop

c000a834 <Filesystem::~Filesystem()>:
c000a834:	83 ec 0c             	sub    esp,0xc
c000a837:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a83b:	e8 e6 ff ff ff       	call   c000a826 <Filesystem::~Filesystem()>
c000a840:	83 c4 04             	add    esp,0x4
c000a843:	83 ec 08             	sub    esp,0x8
c000a846:	6a 08                	push   0x8
c000a848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a84c:	e8 99 fb ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000a851:	83 c4 10             	add    esp,0x10
c000a854:	83 c4 0c             	add    esp,0xc
c000a857:	c3                   	ret    

c000a858 <Fs::getcwd(Process*, char*, int)>:
c000a858:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a85c:	31 c0                	xor    eax,eax
c000a85e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a861:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a865:	7d 15                	jge    c000a87c <Fs::getcwd(Process*, char*, int)+0x24>
c000a867:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a86b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a872:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a875:	84 c9                	test   cl,cl
c000a877:	74 06                	je     c000a87f <Fs::getcwd(Process*, char*, int)+0x27>
c000a879:	40                   	inc    eax
c000a87a:	eb e2                	jmp    c000a85e <Fs::getcwd(Process*, char*, int)+0x6>
c000a87c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a87f:	31 c0                	xor    eax,eax
c000a881:	c3                   	ret    

c000a882 <Fs::initVFS()>:
c000a882:	83 ec 18             	sub    esp,0x18
c000a885:	6a 08                	push   0x8
c000a887:	e8 2d cf ff ff       	call   c00077b9 <malloc>
c000a88c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a88f:	e8 34 c4 00 00       	call   c0016cc8 <FAT::FAT()>
c000a894:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a89b:	e8 19 cf ff ff       	call   c00077b9 <malloc>
c000a8a0:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8a3:	e8 7c d1 00 00       	call   c0017a24 <ISO9660::ISO9660()>
c000a8a8:	83 c4 1c             	add    esp,0x1c
c000a8ab:	c3                   	ret    

c000a8ac <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a8ac:	55                   	push   ebp
c000a8ad:	57                   	push   edi
c000a8ae:	56                   	push   esi
c000a8af:	53                   	push   ebx
c000a8b0:	81 ec 10 04 00 00    	sub    esp,0x410
c000a8b6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a8bd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a8c4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a8cb:	68 00 04 00 00       	push   0x400
c000a8d0:	6a 00                	push   0x0
c000a8d2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a8d6:	56                   	push   esi
c000a8d7:	e8 f4 5b ff ff       	call   c00004d0 <memset>
c000a8dc:	83 c4 10             	add    esp,0x10
c000a8df:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a8e3:	75 0b                	jne    c000a8f0 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a8e5:	50                   	push   eax
c000a8e6:	50                   	push   eax
c000a8e7:	57                   	push   edi
c000a8e8:	56                   	push   esi
c000a8e9:	e8 12 5d ff ff       	call   c0000600 <strcpy>
c000a8ee:	eb 41                	jmp    c000a931 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a8f0:	8a 07                	mov    al,BYTE PTR [edi]
c000a8f2:	3c 5c                	cmp    al,0x5c
c000a8f4:	74 04                	je     c000a8fa <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a8f6:	3c 2f                	cmp    al,0x2f
c000a8f8:	75 18                	jne    c000a912 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a8fa:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a8fd:	3c 60                	cmp    al,0x60
c000a8ff:	7e 03                	jle    c000a904 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a901:	83 e8 20             	sub    eax,0x20
c000a904:	88 04 24             	mov    BYTE PTR [esp],al
c000a907:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a90e:	50                   	push   eax
c000a90f:	50                   	push   eax
c000a910:	eb 18                	jmp    c000a92a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a912:	50                   	push   eax
c000a913:	50                   	push   eax
c000a914:	55                   	push   ebp
c000a915:	56                   	push   esi
c000a916:	e8 e5 5c ff ff       	call   c0000600 <strcpy>
c000a91b:	5a                   	pop    edx
c000a91c:	59                   	pop    ecx
c000a91d:	68 a6 e5 01 c0       	push   0xc001e5a6
c000a922:	56                   	push   esi
c000a923:	e8 98 5e ff ff       	call   c00007c0 <strcat>
c000a928:	5d                   	pop    ebp
c000a929:	58                   	pop    eax
c000a92a:	57                   	push   edi
c000a92b:	56                   	push   esi
c000a92c:	e8 8f 5e ff ff       	call   c00007c0 <strcat>
c000a931:	83 c4 10             	add    esp,0x10
c000a934:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a937:	3c 60                	cmp    al,0x60
c000a939:	7e 03                	jle    c000a93e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a93b:	83 e8 20             	sub    eax,0x20
c000a93e:	88 04 24             	mov    BYTE PTR [esp],al
c000a941:	88 03                	mov    BYTE PTR [ebx],al
c000a943:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a94a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a950:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a954:	bf 03 00 00 00       	mov    edi,0x3
c000a959:	b8 03 00 00 00       	mov    eax,0x3
c000a95e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a961:	84 d2                	test   dl,dl
c000a963:	0f 84 91 00 00 00    	je     c000a9fa <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a969:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a96c:	80 fa 5c             	cmp    dl,0x5c
c000a96f:	74 05                	je     c000a976 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a971:	80 fa 2f             	cmp    dl,0x2f
c000a974:	75 12                	jne    c000a988 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a976:	89 c5                	mov    ebp,eax
c000a978:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a97d:	74 09                	je     c000a988 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a97f:	40                   	inc    eax
c000a980:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a984:	89 cf                	mov    edi,ecx
c000a986:	eb d6                	jmp    c000a95e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a988:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a98d:	75 5b                	jne    c000a9ea <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a98f:	80 fa 2e             	cmp    dl,0x2e
c000a992:	75 56                	jne    c000a9ea <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a994:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a998:	74 19                	je     c000a9b3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a99a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a99f:	74 53                	je     c000a9f4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9a1:	89 f9                	mov    ecx,edi
c000a9a3:	41                   	inc    ecx
c000a9a4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9a7:	80 fa 2f             	cmp    dl,0x2f
c000a9aa:	74 f7                	je     c000a9a3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9ac:	80 fa 5c             	cmp    dl,0x5c
c000a9af:	74 f2                	je     c000a9a3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9b1:	eb d1                	jmp    c000a984 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9b3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9b8:	74 3a                	je     c000a9f4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9ba:	83 f8 03             	cmp    eax,0x3
c000a9bd:	74 c5                	je     c000a984 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9bf:	41                   	inc    ecx
c000a9c0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9c3:	80 fa 2f             	cmp    dl,0x2f
c000a9c6:	74 f7                	je     c000a9bf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9c8:	80 fa 5c             	cmp    dl,0x5c
c000a9cb:	74 f2                	je     c000a9bf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9cd:	48                   	dec    eax
c000a9ce:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9d2:	75 06                	jne    c000a9da <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9d4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9d8:	eb f3                	jmp    c000a9cd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000a9da:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9de:	74 07                	je     c000a9e7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000a9e0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9e4:	48                   	dec    eax
c000a9e5:	eb f3                	jmp    c000a9da <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9e7:	40                   	inc    eax
c000a9e8:	eb 9a                	jmp    c000a984 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9ea:	80 fa 2f             	cmp    dl,0x2f
c000a9ed:	74 95                	je     c000a984 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9ef:	80 fa 5c             	cmp    dl,0x5c
c000a9f2:	74 90                	je     c000a984 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9f4:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000a9f7:	40                   	inc    eax
c000a9f8:	eb 8a                	jmp    c000a984 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9fa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9fe:	83 ec 0c             	sub    esp,0xc
c000aa01:	53                   	push   ebx
c000aa02:	e8 39 5b ff ff       	call   c0000540 <strlen>
c000aa07:	83 c4 10             	add    esp,0x10
c000aa0a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aa0f:	75 26                	jne    c000aa37 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aa11:	83 ec 0c             	sub    esp,0xc
c000aa14:	53                   	push   ebx
c000aa15:	e8 26 5b ff ff       	call   c0000540 <strlen>
c000aa1a:	83 c4 10             	add    esp,0x10
c000aa1d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aa22:	74 26                	je     c000aa4a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aa24:	83 ec 0c             	sub    esp,0xc
c000aa27:	53                   	push   ebx
c000aa28:	e8 13 5b ff ff       	call   c0000540 <strlen>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aa35:	eb c7                	jmp    c000a9fe <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aa37:	83 ec 0c             	sub    esp,0xc
c000aa3a:	53                   	push   ebx
c000aa3b:	e8 00 5b ff ff       	call   c0000540 <strlen>
c000aa40:	83 c4 10             	add    esp,0x10
c000aa43:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa48:	74 c7                	je     c000aa11 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aa4a:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aa50:	5b                   	pop    ebx
c000aa51:	5e                   	pop    esi
c000aa52:	5f                   	pop    edi
c000aa53:	5d                   	pop    ebp
c000aa54:	c3                   	ret    
c000aa55:	90                   	nop

c000aa56 <File::File(char const*, Process*)>:
c000aa56:	83 ec 0c             	sub    esp,0xc
c000aa59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa5d:	83 ec 08             	sub    esp,0x8
c000aa60:	6a 00                	push   0x0
c000aa62:	50                   	push   eax
c000aa63:	e8 e2 e3 ff ff       	call   c0008e4a <UnixFile::UnixFile(int)>
c000aa68:	83 c4 10             	add    esp,0x10
c000aa6b:	ba 40 d9 01 c0       	mov    edx,0xc001d940
c000aa70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa74:	89 10                	mov    DWORD PTR [eax],edx
c000aa76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aa7a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aa80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa84:	83 c0 0d             	add    eax,0xd
c000aa87:	83 ec 04             	sub    esp,0x4
c000aa8a:	52                   	push   edx
c000aa8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa8f:	50                   	push   eax
c000aa90:	e8 17 fe ff ff       	call   c000a8ac <Fs::standardiseFiles(char*, char const*, char const*)>
c000aa95:	83 c4 10             	add    esp,0x10
c000aa98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aa9f:	8d 50 bf             	lea    edx,[eax-0x41]
c000aaa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aaac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aabe:	25 ff 00 00 00       	and    eax,0xff
c000aac3:	8b 04 85 60 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5a0]
c000aaca:	85 c0                	test   eax,eax
c000aacc:	74 42                	je     c000ab10 <File::File(char const*, Process*)+0xba>
c000aace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aad2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aad8:	25 ff 00 00 00       	and    eax,0xff
c000aadd:	8b 04 85 60 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5a0]
c000aae4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aaea:	85 c0                	test   eax,eax
c000aaec:	75 22                	jne    c000ab10 <File::File(char const*, Process*)+0xba>
c000aaee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aaf8:	25 ff 00 00 00       	and    eax,0xff
c000aafd:	8b 04 85 60 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5a0]
c000ab04:	83 ec 0c             	sub    esp,0xc
c000ab07:	50                   	push   eax
c000ab08:	e8 13 20 00 00       	call   c000cb20 <LogicalDisk::mount()>
c000ab0d:	83 c4 10             	add    esp,0x10
c000ab10:	90                   	nop
c000ab11:	83 c4 0c             	add    esp,0xc
c000ab14:	c3                   	ret    
c000ab15:	90                   	nop

c000ab16 <File::open(FileOpenMode)>:
c000ab16:	53                   	push   ebx
c000ab17:	b8 0b 00 00 00       	mov    eax,0xb
c000ab1c:	83 ec 08             	sub    esp,0x8
c000ab1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab23:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ab2a:	80 fa 19             	cmp    dl,0x19
c000ab2d:	77 40                	ja     c000ab6f <File::open(FileOpenMode)+0x59>
c000ab2f:	8b 14 95 60 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5a0]
c000ab36:	85 d2                	test   edx,edx
c000ab38:	74 35                	je     c000ab6f <File::open(FileOpenMode)+0x59>
c000ab3a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ab40:	85 d2                	test   edx,edx
c000ab42:	74 2b                	je     c000ab6f <File::open(FileOpenMode)+0x59>
c000ab44:	b8 06 00 00 00       	mov    eax,0x6
c000ab49:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ab4d:	75 20                	jne    c000ab6f <File::open(FileOpenMode)+0x59>
c000ab4f:	8b 02                	mov    eax,DWORD PTR [edx]
c000ab51:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ab57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab5b:	51                   	push   ecx
c000ab5c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ab5f:	51                   	push   ecx
c000ab60:	52                   	push   edx
c000ab61:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ab64:	83 c4 10             	add    esp,0x10
c000ab67:	85 c0                	test   eax,eax
c000ab69:	75 04                	jne    c000ab6f <File::open(FileOpenMode)+0x59>
c000ab6b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ab6f:	83 c4 08             	add    esp,0x8
c000ab72:	5b                   	pop    ebx
c000ab73:	c3                   	ret    

c000ab74 <File::close()>:
c000ab74:	53                   	push   ebx
c000ab75:	b8 0b 00 00 00       	mov    eax,0xb
c000ab7a:	83 ec 08             	sub    esp,0x8
c000ab7d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ab81:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ab88:	80 fa 19             	cmp    dl,0x19
c000ab8b:	77 41                	ja     c000abce <File::close()+0x5a>
c000ab8d:	8b 1c 95 60 2a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd5a0]
c000ab94:	85 db                	test   ebx,ebx
c000ab96:	74 36                	je     c000abce <File::close()+0x5a>
c000ab98:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ab9f:	74 2d                	je     c000abce <File::close()+0x5a>
c000aba1:	b8 05 00 00 00       	mov    eax,0x5
c000aba6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000abaa:	74 22                	je     c000abce <File::close()+0x5a>
c000abac:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000abb0:	8b 04 95 60 2a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd5a0]
c000abb7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000abbd:	53                   	push   ebx
c000abbe:	53                   	push   ebx
c000abbf:	8b 10                	mov    edx,DWORD PTR [eax]
c000abc1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000abc7:	50                   	push   eax
c000abc8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000abcb:	83 c4 10             	add    esp,0x10
c000abce:	83 c4 08             	add    esp,0x8
c000abd1:	5b                   	pop    ebx
c000abd2:	c3                   	ret    
c000abd3:	90                   	nop

c000abd4 <File::seek(unsigned long long)>:
c000abd4:	56                   	push   esi
c000abd5:	53                   	push   ebx
c000abd6:	b8 0b 00 00 00       	mov    eax,0xb
c000abdb:	51                   	push   ecx
c000abdc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000abe0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000abe4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000abeb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000abef:	80 fa 19             	cmp    dl,0x19
c000abf2:	77 31                	ja     c000ac25 <File::seek(unsigned long long)+0x51>
c000abf4:	8b 14 95 60 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5a0]
c000abfb:	85 d2                	test   edx,edx
c000abfd:	74 26                	je     c000ac25 <File::seek(unsigned long long)+0x51>
c000abff:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac05:	85 d2                	test   edx,edx
c000ac07:	74 1c                	je     c000ac25 <File::seek(unsigned long long)+0x51>
c000ac09:	b8 05 00 00 00       	mov    eax,0x5
c000ac0e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ac12:	74 11                	je     c000ac25 <File::seek(unsigned long long)+0x51>
c000ac14:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac16:	53                   	push   ebx
c000ac17:	51                   	push   ecx
c000ac18:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ac1e:	52                   	push   edx
c000ac1f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ac22:	83 c4 10             	add    esp,0x10
c000ac25:	5a                   	pop    edx
c000ac26:	5b                   	pop    ebx
c000ac27:	5e                   	pop    esi
c000ac28:	c3                   	ret    
c000ac29:	90                   	nop

c000ac2a <File::tell(unsigned long long*)>:
c000ac2a:	83 ec 0c             	sub    esp,0xc
c000ac2d:	b8 0b 00 00 00       	mov    eax,0xb
c000ac32:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac36:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac3d:	80 fa 19             	cmp    dl,0x19
c000ac40:	77 34                	ja     c000ac76 <File::tell(unsigned long long*)+0x4c>
c000ac42:	8b 14 95 60 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5a0]
c000ac49:	85 d2                	test   edx,edx
c000ac4b:	74 29                	je     c000ac76 <File::tell(unsigned long long*)+0x4c>
c000ac4d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac53:	85 d2                	test   edx,edx
c000ac55:	74 1f                	je     c000ac76 <File::tell(unsigned long long*)+0x4c>
c000ac57:	b8 05 00 00 00       	mov    eax,0x5
c000ac5c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac60:	74 14                	je     c000ac76 <File::tell(unsigned long long*)+0x4c>
c000ac62:	50                   	push   eax
c000ac63:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac69:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac6f:	52                   	push   edx
c000ac70:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ac73:	83 c4 10             	add    esp,0x10
c000ac76:	83 c4 0c             	add    esp,0xc
c000ac79:	c3                   	ret    

c000ac7a <File::rewind()>:
c000ac7a:	83 ec 10             	sub    esp,0x10
c000ac7d:	6a 00                	push   0x0
c000ac7f:	6a 00                	push   0x0
c000ac81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac85:	e8 4a ff ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c000ac8a:	83 c4 1c             	add    esp,0x1c
c000ac8d:	c3                   	ret    

c000ac8e <File::unlink()>:
c000ac8e:	83 ec 0c             	sub    esp,0xc
c000ac91:	b8 0b 00 00 00       	mov    eax,0xb
c000ac96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac9a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aca1:	80 f9 19             	cmp    cl,0x19
c000aca4:	77 2f                	ja     c000acd5 <File::unlink()+0x47>
c000aca6:	8b 0c 8d 60 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5a0]
c000acad:	85 c9                	test   ecx,ecx
c000acaf:	74 24                	je     c000acd5 <File::unlink()+0x47>
c000acb1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000acb7:	85 c9                	test   ecx,ecx
c000acb9:	74 1a                	je     c000acd5 <File::unlink()+0x47>
c000acbb:	b8 06 00 00 00       	mov    eax,0x6
c000acc0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000acc4:	75 0f                	jne    c000acd5 <File::unlink()+0x47>
c000acc6:	83 c2 0d             	add    edx,0xd
c000acc9:	50                   	push   eax
c000acca:	50                   	push   eax
c000accb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000accd:	52                   	push   edx
c000acce:	51                   	push   ecx
c000accf:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000acd2:	83 c4 10             	add    esp,0x10
c000acd5:	83 c4 0c             	add    esp,0xc
c000acd8:	c3                   	ret    
c000acd9:	90                   	nop

c000acda <File::rename(char const*)>:
c000acda:	83 ec 0c             	sub    esp,0xc
c000acdd:	b8 0b 00 00 00       	mov    eax,0xb
c000ace2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ace6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aced:	80 f9 19             	cmp    cl,0x19
c000acf0:	77 32                	ja     c000ad24 <File::rename(char const*)+0x4a>
c000acf2:	8b 0c 8d 60 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5a0]
c000acf9:	85 c9                	test   ecx,ecx
c000acfb:	74 27                	je     c000ad24 <File::rename(char const*)+0x4a>
c000acfd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad03:	85 c9                	test   ecx,ecx
c000ad05:	74 1d                	je     c000ad24 <File::rename(char const*)+0x4a>
c000ad07:	b8 06 00 00 00       	mov    eax,0x6
c000ad0c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad10:	75 12                	jne    c000ad24 <File::rename(char const*)+0x4a>
c000ad12:	83 c2 0d             	add    edx,0xd
c000ad15:	50                   	push   eax
c000ad16:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad1c:	52                   	push   edx
c000ad1d:	51                   	push   ecx
c000ad1e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ad21:	83 c4 10             	add    esp,0x10
c000ad24:	83 c4 0c             	add    esp,0xc
c000ad27:	c3                   	ret    

c000ad28 <File::chfatattr(unsigned char, unsigned char)>:
c000ad28:	57                   	push   edi
c000ad29:	b8 0b 00 00 00       	mov    eax,0xb
c000ad2e:	56                   	push   esi
c000ad2f:	53                   	push   ebx
c000ad30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad34:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad38:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad3f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ad43:	80 f9 19             	cmp    cl,0x19
c000ad46:	77 37                	ja     c000ad7f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad48:	8b 0c 8d 60 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5a0]
c000ad4f:	85 c9                	test   ecx,ecx
c000ad51:	74 2c                	je     c000ad7f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad53:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad59:	85 c9                	test   ecx,ecx
c000ad5b:	74 22                	je     c000ad7f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad5d:	b8 06 00 00 00       	mov    eax,0x6
c000ad62:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad66:	75 17                	jne    c000ad7f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad68:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ad6a:	89 f0                	mov    eax,esi
c000ad6c:	83 c2 0d             	add    edx,0xd
c000ad6f:	0f b6 f0             	movzx  esi,al
c000ad72:	0f b6 db             	movzx  ebx,bl
c000ad75:	56                   	push   esi
c000ad76:	53                   	push   ebx
c000ad77:	52                   	push   edx
c000ad78:	51                   	push   ecx
c000ad79:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ad7c:	83 c4 10             	add    esp,0x10
c000ad7f:	5b                   	pop    ebx
c000ad80:	5e                   	pop    esi
c000ad81:	5f                   	pop    edi
c000ad82:	c3                   	ret    
c000ad83:	90                   	nop

c000ad84 <File::exists()>:
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	31 c0                	xor    eax,eax
c000ad89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad8d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad94:	80 f9 19             	cmp    cl,0x19
c000ad97:	77 24                	ja     c000adbd <File::exists()+0x39>
c000ad99:	8b 0c 8d 60 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5a0]
c000ada0:	85 c9                	test   ecx,ecx
c000ada2:	74 19                	je     c000adbd <File::exists()+0x39>
c000ada4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adaa:	85 c9                	test   ecx,ecx
c000adac:	74 0f                	je     c000adbd <File::exists()+0x39>
c000adae:	83 c2 0d             	add    edx,0xd
c000adb1:	50                   	push   eax
c000adb2:	50                   	push   eax
c000adb3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adb5:	52                   	push   edx
c000adb6:	51                   	push   ecx
c000adb7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000adba:	83 c4 10             	add    esp,0x10
c000adbd:	83 c4 0c             	add    esp,0xc
c000adc0:	c3                   	ret    
c000adc1:	90                   	nop

c000adc2 <File::stat(unsigned long long*, bool*)>:
c000adc2:	56                   	push   esi
c000adc3:	53                   	push   ebx
c000adc4:	50                   	push   eax
c000adc5:	b8 0b 00 00 00       	mov    eax,0xb
c000adca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000add2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000add9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000addd:	80 f9 19             	cmp    cl,0x19
c000ade0:	77 3d                	ja     c000ae1f <File::stat(unsigned long long*, bool*)+0x5d>
c000ade2:	8b 0c 8d 60 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5a0]
c000ade9:	85 c9                	test   ecx,ecx
c000adeb:	74 32                	je     c000ae1f <File::stat(unsigned long long*, bool*)+0x5d>
c000aded:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adf3:	85 c9                	test   ecx,ecx
c000adf5:	74 28                	je     c000ae1f <File::stat(unsigned long long*, bool*)+0x5d>
c000adf7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adf9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adfd:	74 13                	je     c000ae12 <File::stat(unsigned long long*, bool*)+0x50>
c000adff:	83 ec 04             	sub    esp,0x4
c000ae02:	56                   	push   esi
c000ae03:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ae09:	51                   	push   ecx
c000ae0a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ae0d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ae10:	eb 0a                	jmp    c000ae1c <File::stat(unsigned long long*, bool*)+0x5a>
c000ae12:	53                   	push   ebx
c000ae13:	83 c2 0d             	add    edx,0xd
c000ae16:	56                   	push   esi
c000ae17:	52                   	push   edx
c000ae18:	51                   	push   ecx
c000ae19:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ae1c:	83 c4 10             	add    esp,0x10
c000ae1f:	5a                   	pop    edx
c000ae20:	5b                   	pop    ebx
c000ae21:	5e                   	pop    esi
c000ae22:	c3                   	ret    

c000ae23 <Fs::setcwd(Process*, char*)>:
c000ae23:	55                   	push   ebp
c000ae24:	57                   	push   edi
c000ae25:	56                   	push   esi
c000ae26:	53                   	push   ebx
c000ae27:	81 ec 20 02 00 00    	sub    esp,0x220
c000ae2d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ae34:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000ae3a:	57                   	push   edi
c000ae3b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000ae42:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ae46:	56                   	push   esi
c000ae47:	e8 60 fa ff ff       	call   c000a8ac <Fs::standardiseFiles(char*, char const*, char const*)>
c000ae4c:	89 34 24             	mov    DWORD PTR [esp],esi
c000ae4f:	e8 ec 56 ff ff       	call   c0000540 <strlen>
c000ae54:	83 c4 10             	add    esp,0x10
c000ae57:	83 f8 02             	cmp    eax,0x2
c000ae5a:	77 15                	ja     c000ae71 <Fs::setcwd(Process*, char*)+0x4e>
c000ae5c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000ae61:	83 eb 41             	sub    ebx,0x41
c000ae64:	8b 04 9d 60 2a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd5a0]
c000ae6b:	85 c0                	test   eax,eax
c000ae6d:	75 1c                	jne    c000ae8b <Fs::setcwd(Process*, char*)+0x68>
c000ae6f:	eb 2f                	jmp    c000aea0 <Fs::setcwd(Process*, char*)+0x7d>
c000ae71:	83 ec 0c             	sub    esp,0xc
c000ae74:	56                   	push   esi
c000ae75:	e8 c6 56 ff ff       	call   c0000540 <strlen>
c000ae7a:	83 c4 10             	add    esp,0x10
c000ae7d:	83 f8 03             	cmp    eax,0x3
c000ae80:	75 57                	jne    c000aed9 <Fs::setcwd(Process*, char*)+0xb6>
c000ae82:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000ae87:	75 50                	jne    c000aed9 <Fs::setcwd(Process*, char*)+0xb6>
c000ae89:	eb d1                	jmp    c000ae5c <Fs::setcwd(Process*, char*)+0x39>
c000ae8b:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000ae92:	75 0c                	jne    c000aea0 <Fs::setcwd(Process*, char*)+0x7d>
c000ae94:	83 ec 0c             	sub    esp,0xc
c000ae97:	50                   	push   eax
c000ae98:	e8 83 1c 00 00       	call   c000cb20 <LogicalDisk::mount()>
c000ae9d:	83 c4 10             	add    esp,0x10
c000aea0:	b8 03 00 00 00       	mov    eax,0x3
c000aea5:	83 fb 19             	cmp    ebx,0x19
c000aea8:	0f 87 c6 00 00 00    	ja     c000af74 <Fs::setcwd(Process*, char*)+0x151>
c000aeae:	8b 14 9d 60 2a 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd5a0]
c000aeb5:	b8 05 00 00 00       	mov    eax,0x5
c000aeba:	85 d2                	test   edx,edx
c000aebc:	0f 84 b2 00 00 00    	je     c000af74 <Fs::setcwd(Process*, char*)+0x151>
c000aec2:	b8 06 00 00 00       	mov    eax,0x6
c000aec7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000aece:	0f 85 92 00 00 00    	jne    c000af66 <Fs::setcwd(Process*, char*)+0x143>
c000aed4:	e9 9b 00 00 00       	jmp    c000af74 <Fs::setcwd(Process*, char*)+0x151>
c000aed9:	83 ec 0c             	sub    esp,0xc
c000aedc:	68 14 01 00 00       	push   0x114
c000aee1:	e8 d3 c8 ff ff       	call   c00077b9 <malloc>
c000aee6:	83 c4 0c             	add    esp,0xc
c000aee9:	89 c3                	mov    ebx,eax
c000aeeb:	55                   	push   ebp
c000aeec:	56                   	push   esi
c000aeed:	50                   	push   eax
c000aeee:	e8 63 fb ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c000aef3:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000aef8:	83 c4 0c             	add    esp,0xc
c000aefb:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000aeff:	50                   	push   eax
c000af00:	8d 44 24 10          	lea    eax,[esp+0x10]
c000af04:	50                   	push   eax
c000af05:	53                   	push   ebx
c000af06:	e8 b7 fe ff ff       	call   c000adc2 <File::stat(unsigned long long*, bool*)>
c000af0b:	83 c4 10             	add    esp,0x10
c000af0e:	83 f8 02             	cmp    eax,0x2
c000af11:	74 04                	je     c000af17 <Fs::setcwd(Process*, char*)+0xf4>
c000af13:	85 c0                	test   eax,eax
c000af15:	74 1c                	je     c000af33 <Fs::setcwd(Process*, char*)+0x110>
c000af17:	b8 01 00 00 00       	mov    eax,0x1
c000af1c:	85 db                	test   ebx,ebx
c000af1e:	74 54                	je     c000af74 <Fs::setcwd(Process*, char*)+0x151>
c000af20:	83 ec 0c             	sub    esp,0xc
c000af23:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af25:	53                   	push   ebx
c000af26:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af29:	83 c4 10             	add    esp,0x10
c000af2c:	b8 01 00 00 00       	mov    eax,0x1
c000af31:	eb 41                	jmp    c000af74 <Fs::setcwd(Process*, char*)+0x151>
c000af33:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000af38:	75 1c                	jne    c000af56 <Fs::setcwd(Process*, char*)+0x133>
c000af3a:	b8 02 00 00 00       	mov    eax,0x2
c000af3f:	85 db                	test   ebx,ebx
c000af41:	74 31                	je     c000af74 <Fs::setcwd(Process*, char*)+0x151>
c000af43:	83 ec 0c             	sub    esp,0xc
c000af46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af48:	53                   	push   ebx
c000af49:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af4c:	83 c4 10             	add    esp,0x10
c000af4f:	b8 02 00 00 00       	mov    eax,0x2
c000af54:	eb 1e                	jmp    c000af74 <Fs::setcwd(Process*, char*)+0x151>
c000af56:	85 db                	test   ebx,ebx
c000af58:	74 0c                	je     c000af66 <Fs::setcwd(Process*, char*)+0x143>
c000af5a:	83 ec 0c             	sub    esp,0xc
c000af5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af5f:	53                   	push   ebx
c000af60:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af63:	83 c4 10             	add    esp,0x10
c000af66:	50                   	push   eax
c000af67:	50                   	push   eax
c000af68:	56                   	push   esi
c000af69:	57                   	push   edi
c000af6a:	e8 91 56 ff ff       	call   c0000600 <strcpy>
c000af6f:	83 c4 10             	add    esp,0x10
c000af72:	31 c0                	xor    eax,eax
c000af74:	81 c4 1c 02 00 00    	add    esp,0x21c
c000af7a:	5b                   	pop    ebx
c000af7b:	5e                   	pop    esi
c000af7c:	5f                   	pop    edi
c000af7d:	5d                   	pop    ebp
c000af7e:	c3                   	ret    
c000af7f:	90                   	nop

c000af80 <Directory::Directory(char const*, Process*)>:
c000af80:	83 ec 0c             	sub    esp,0xc
c000af83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af87:	83 ec 08             	sub    esp,0x8
c000af8a:	6a 00                	push   0x0
c000af8c:	50                   	push   eax
c000af8d:	e8 b8 de ff ff       	call   c0008e4a <UnixFile::UnixFile(int)>
c000af92:	83 c4 10             	add    esp,0x10
c000af95:	ba 5c d9 01 c0       	mov    edx,0xc001d95c
c000af9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9e:	89 10                	mov    DWORD PTR [eax],edx
c000afa0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000afa4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000afaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afae:	83 c0 0d             	add    eax,0xd
c000afb1:	83 ec 04             	sub    esp,0x4
c000afb4:	52                   	push   edx
c000afb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afb9:	50                   	push   eax
c000afba:	e8 ed f8 ff ff       	call   c000a8ac <Fs::standardiseFiles(char*, char const*, char const*)>
c000afbf:	83 c4 10             	add    esp,0x10
c000afc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000afc9:	8d 50 bf             	lea    edx,[eax-0x41]
c000afcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000afd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afda:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000afde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afe8:	25 ff 00 00 00       	and    eax,0xff
c000afed:	8b 04 85 60 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5a0]
c000aff4:	85 c0                	test   eax,eax
c000aff6:	74 42                	je     c000b03a <Directory::Directory(char const*, Process*)+0xba>
c000aff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000affc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b002:	25 ff 00 00 00       	and    eax,0xff
c000b007:	8b 04 85 60 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5a0]
c000b00e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b014:	85 c0                	test   eax,eax
c000b016:	75 22                	jne    c000b03a <Directory::Directory(char const*, Process*)+0xba>
c000b018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b01c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b022:	25 ff 00 00 00       	and    eax,0xff
c000b027:	8b 04 85 60 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5a0]
c000b02e:	83 ec 0c             	sub    esp,0xc
c000b031:	50                   	push   eax
c000b032:	e8 e9 1a 00 00       	call   c000cb20 <LogicalDisk::mount()>
c000b037:	83 c4 10             	add    esp,0x10
c000b03a:	90                   	nop
c000b03b:	83 c4 0c             	add    esp,0xc
c000b03e:	c3                   	ret    
c000b03f:	90                   	nop

c000b040 <Directory::open()>:
c000b040:	53                   	push   ebx
c000b041:	b8 0b 00 00 00       	mov    eax,0xb
c000b046:	83 ec 08             	sub    esp,0x8
c000b049:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b04d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b054:	80 fa 19             	cmp    dl,0x19
c000b057:	77 3d                	ja     c000b096 <Directory::open()+0x56>
c000b059:	8b 14 95 60 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5a0]
c000b060:	85 d2                	test   edx,edx
c000b062:	74 32                	je     c000b096 <Directory::open()+0x56>
c000b064:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b06a:	85 d2                	test   edx,edx
c000b06c:	74 28                	je     c000b096 <Directory::open()+0x56>
c000b06e:	b8 06 00 00 00       	mov    eax,0x6
c000b073:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b077:	75 1d                	jne    c000b096 <Directory::open()+0x56>
c000b079:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b07f:	50                   	push   eax
c000b080:	8b 02                	mov    eax,DWORD PTR [edx]
c000b082:	51                   	push   ecx
c000b083:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b086:	51                   	push   ecx
c000b087:	52                   	push   edx
c000b088:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b08b:	83 c4 10             	add    esp,0x10
c000b08e:	85 c0                	test   eax,eax
c000b090:	75 04                	jne    c000b096 <Directory::open()+0x56>
c000b092:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b096:	83 c4 08             	add    esp,0x8
c000b099:	5b                   	pop    ebx
c000b09a:	c3                   	ret    
c000b09b:	90                   	nop

c000b09c <Directory::close()>:
c000b09c:	53                   	push   ebx
c000b09d:	b8 0b 00 00 00       	mov    eax,0xb
c000b0a2:	83 ec 08             	sub    esp,0x8
c000b0a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0a9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0b0:	80 fa 19             	cmp    dl,0x19
c000b0b3:	77 41                	ja     c000b0f6 <Directory::close()+0x5a>
c000b0b5:	8b 1c 95 60 2a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd5a0]
c000b0bc:	85 db                	test   ebx,ebx
c000b0be:	74 36                	je     c000b0f6 <Directory::close()+0x5a>
c000b0c0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b0c7:	74 2d                	je     c000b0f6 <Directory::close()+0x5a>
c000b0c9:	b8 05 00 00 00       	mov    eax,0x5
c000b0ce:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0d2:	74 22                	je     c000b0f6 <Directory::close()+0x5a>
c000b0d4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b0d8:	8b 04 95 60 2a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd5a0]
c000b0df:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b0e5:	53                   	push   ebx
c000b0e6:	53                   	push   ebx
c000b0e7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b0e9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b0ef:	50                   	push   eax
c000b0f0:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b0f3:	83 c4 10             	add    esp,0x10
c000b0f6:	83 c4 08             	add    esp,0x8
c000b0f9:	5b                   	pop    ebx
c000b0fa:	c3                   	ret    
c000b0fb:	90                   	nop

c000b0fc <Directory::unlink()>:
c000b0fc:	83 ec 0c             	sub    esp,0xc
c000b0ff:	b8 0b 00 00 00       	mov    eax,0xb
c000b104:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b108:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b10f:	80 f9 19             	cmp    cl,0x19
c000b112:	77 2f                	ja     c000b143 <Directory::unlink()+0x47>
c000b114:	8b 0c 8d 60 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5a0]
c000b11b:	85 c9                	test   ecx,ecx
c000b11d:	74 24                	je     c000b143 <Directory::unlink()+0x47>
c000b11f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b125:	85 c9                	test   ecx,ecx
c000b127:	74 1a                	je     c000b143 <Directory::unlink()+0x47>
c000b129:	b8 06 00 00 00       	mov    eax,0x6
c000b12e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b132:	75 0f                	jne    c000b143 <Directory::unlink()+0x47>
c000b134:	83 c2 0d             	add    edx,0xd
c000b137:	50                   	push   eax
c000b138:	50                   	push   eax
c000b139:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b13b:	52                   	push   edx
c000b13c:	51                   	push   ecx
c000b13d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b140:	83 c4 10             	add    esp,0x10
c000b143:	83 c4 0c             	add    esp,0xc
c000b146:	c3                   	ret    
c000b147:	90                   	nop

c000b148 <Directory::rename(char const*)>:
c000b148:	83 ec 0c             	sub    esp,0xc
c000b14b:	b8 0b 00 00 00       	mov    eax,0xb
c000b150:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b154:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b15b:	80 f9 19             	cmp    cl,0x19
c000b15e:	77 32                	ja     c000b192 <Directory::rename(char const*)+0x4a>
c000b160:	8b 0c 8d 60 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5a0]
c000b167:	85 c9                	test   ecx,ecx
c000b169:	74 27                	je     c000b192 <Directory::rename(char const*)+0x4a>
c000b16b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b171:	85 c9                	test   ecx,ecx
c000b173:	74 1d                	je     c000b192 <Directory::rename(char const*)+0x4a>
c000b175:	b8 06 00 00 00       	mov    eax,0x6
c000b17a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b17e:	75 12                	jne    c000b192 <Directory::rename(char const*)+0x4a>
c000b180:	83 c2 0d             	add    edx,0xd
c000b183:	50                   	push   eax
c000b184:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b186:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b18a:	52                   	push   edx
c000b18b:	51                   	push   ecx
c000b18c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b18f:	83 c4 10             	add    esp,0x10
c000b192:	83 c4 0c             	add    esp,0xc
c000b195:	c3                   	ret    

c000b196 <Directory::exists()>:
c000b196:	83 ec 0c             	sub    esp,0xc
c000b199:	31 c0                	xor    eax,eax
c000b19b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b19f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1a6:	80 f9 19             	cmp    cl,0x19
c000b1a9:	77 24                	ja     c000b1cf <Directory::exists()+0x39>
c000b1ab:	8b 0c 8d 60 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5a0]
c000b1b2:	85 c9                	test   ecx,ecx
c000b1b4:	74 19                	je     c000b1cf <Directory::exists()+0x39>
c000b1b6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1bc:	85 c9                	test   ecx,ecx
c000b1be:	74 0f                	je     c000b1cf <Directory::exists()+0x39>
c000b1c0:	83 c2 0d             	add    edx,0xd
c000b1c3:	50                   	push   eax
c000b1c4:	50                   	push   eax
c000b1c5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1c7:	52                   	push   edx
c000b1c8:	51                   	push   ecx
c000b1c9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b1cc:	83 c4 10             	add    esp,0x10
c000b1cf:	83 c4 0c             	add    esp,0xc
c000b1d2:	c3                   	ret    
c000b1d3:	90                   	nop

c000b1d4 <Directory::read(dirent*)>:
c000b1d4:	83 ec 1c             	sub    esp,0x1c
c000b1d7:	b8 0b 00 00 00       	mov    eax,0xb
c000b1dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1e0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1e7:	80 fa 19             	cmp    dl,0x19
c000b1ea:	77 30                	ja     c000b21c <Directory::read(dirent*)+0x48>
c000b1ec:	8b 14 95 60 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5a0]
c000b1f3:	85 d2                	test   edx,edx
c000b1f5:	74 25                	je     c000b21c <Directory::read(dirent*)+0x48>
c000b1f7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b1fe:	74 1c                	je     c000b21c <Directory::read(dirent*)+0x48>
c000b200:	83 ec 0c             	sub    esp,0xc
c000b203:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b205:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b209:	52                   	push   edx
c000b20a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20e:	6a 00                	push   0x0
c000b210:	68 10 01 00 00       	push   0x110
c000b215:	51                   	push   ecx
c000b216:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b219:	83 c4 20             	add    esp,0x20
c000b21c:	83 c4 1c             	add    esp,0x1c
c000b21f:	c3                   	ret    

c000b220 <Directory::create()>:
c000b220:	83 ec 0c             	sub    esp,0xc
c000b223:	b8 0b 00 00 00       	mov    eax,0xb
c000b228:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b22c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b233:	80 f9 19             	cmp    cl,0x19
c000b236:	77 2f                	ja     c000b267 <Directory::create()+0x47>
c000b238:	8b 0c 8d 60 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5a0]
c000b23f:	85 c9                	test   ecx,ecx
c000b241:	74 24                	je     c000b267 <Directory::create()+0x47>
c000b243:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b249:	85 c9                	test   ecx,ecx
c000b24b:	74 1a                	je     c000b267 <Directory::create()+0x47>
c000b24d:	b8 06 00 00 00       	mov    eax,0x6
c000b252:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b256:	75 0f                	jne    c000b267 <Directory::create()+0x47>
c000b258:	83 c2 0d             	add    edx,0xd
c000b25b:	50                   	push   eax
c000b25c:	50                   	push   eax
c000b25d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b25f:	52                   	push   edx
c000b260:	51                   	push   ecx
c000b261:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b264:	83 c4 10             	add    esp,0x10
c000b267:	83 c4 0c             	add    esp,0xc
c000b26a:	c3                   	ret    
c000b26b:	90                   	nop

c000b26c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b26c:	b8 0a 00 00 00       	mov    eax,0xa
c000b271:	c3                   	ret    
c000b272:	66 90                	xchg   ax,ax

c000b274 <Bus::Bus(char const*)>:
c000b274:	83 ec 0c             	sub    esp,0xc
c000b277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b27b:	83 ec 08             	sub    esp,0x8
c000b27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b282:	50                   	push   eax
c000b283:	e8 30 08 00 00       	call   c000bab8 <Device::Device(char const*)>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	ba 78 d9 01 c0       	mov    edx,0xc001d978
c000b290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b294:	89 10                	mov    DWORD PTR [eax],edx
c000b296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b29a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b2a4:	90                   	nop
c000b2a5:	83 c4 0c             	add    esp,0xc
c000b2a8:	c3                   	ret    
c000b2a9:	90                   	nop
c000b2aa:	66 90                	xchg   ax,ax

c000b2ac <Bus::~Bus()>:
c000b2ac:	83 ec 0c             	sub    esp,0xc
c000b2af:	ba 78 d9 01 c0       	mov    edx,0xc001d978
c000b2b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2b8:	89 10                	mov    DWORD PTR [eax],edx
c000b2ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2be:	83 ec 0c             	sub    esp,0xc
c000b2c1:	50                   	push   eax
c000b2c2:	e8 5b 05 00 00       	call   c000b822 <Device::~Device()>
c000b2c7:	83 c4 10             	add    esp,0x10
c000b2ca:	90                   	nop
c000b2cb:	83 c4 0c             	add    esp,0xc
c000b2ce:	c3                   	ret    
c000b2cf:	90                   	nop

c000b2d0 <Bus::~Bus()>:
c000b2d0:	83 ec 0c             	sub    esp,0xc
c000b2d3:	83 ec 0c             	sub    esp,0xc
c000b2d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2da:	e8 cd ff ff ff       	call   c000b2ac <Bus::~Bus()>
c000b2df:	83 c4 10             	add    esp,0x10
c000b2e2:	83 ec 08             	sub    esp,0x8
c000b2e5:	68 58 01 00 00       	push   0x158
c000b2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2ee:	e8 f7 f0 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000b2f3:	83 c4 10             	add    esp,0x10
c000b2f6:	83 c4 0c             	add    esp,0xc
c000b2f9:	c3                   	ret    

c000b2fa <beepThread(void*)>:
c000b2fa:	83 ec 0c             	sub    esp,0xc
c000b2fd:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000b302:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b306:	48                   	dec    eax
c000b307:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c000b30c:	75 01                	jne    c000b30f <beepThread(void*)+0x15>
c000b30e:	fb                   	sti    
c000b30f:	83 ec 0c             	sub    esp,0xc
c000b312:	6b c2 0a             	imul   eax,edx,0xa
c000b315:	50                   	push   eax
c000b316:	e8 91 83 00 00       	call   c00136ac <milliTenthSleep(unsigned int)>
c000b31b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b322:	e8 37 a1 00 00       	call   c001545e <HalMakeBeep(int)>
c000b327:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b32f:	83 c4 1c             	add    esp,0x1c
c000b332:	e9 71 82 00 00       	jmp    c00135a8 <blockTask(TaskState)>

c000b337 <Krnl::beep(int, int, bool)>:
c000b337:	56                   	push   esi
c000b338:	53                   	push   ebx
c000b339:	83 ec 10             	sub    esp,0x10
c000b33c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b340:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b348:	e8 11 a1 00 00       	call   c001545e <HalMakeBeep(int)>
c000b34d:	83 c4 10             	add    esp,0x10
c000b350:	89 f0                	mov    eax,esi
c000b352:	84 c0                	test   al,al
c000b354:	74 1e                	je     c000b374 <Krnl::beep(int, int, bool)+0x3d>
c000b356:	83 ec 0c             	sub    esp,0xc
c000b359:	6b db 0a             	imul   ebx,ebx,0xa
c000b35c:	53                   	push   ebx
c000b35d:	e8 4a 83 00 00       	call   c00136ac <milliTenthSleep(unsigned int)>
c000b362:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b36a:	83 c4 14             	add    esp,0x14
c000b36d:	5b                   	pop    ebx
c000b36e:	5e                   	pop    esi
c000b36f:	e9 ea a0 00 00       	jmp    c001545e <HalMakeBeep(int)>
c000b374:	68 e6 00 00 00       	push   0xe6
c000b379:	53                   	push   ebx
c000b37a:	68 fa b2 00 c0       	push   0xc000b2fa
c000b37f:	ff 35 d0 37 02 c0    	push   DWORD PTR ds:0xc00237d0
c000b385:	e8 02 7e 00 00       	call   c001318c <Process::createThread(void (*)(void*), void*, int)>
c000b38a:	83 c4 14             	add    esp,0x14
c000b38d:	5b                   	pop    ebx
c000b38e:	5e                   	pop    esi
c000b38f:	c3                   	ret    

c000b390 <User::loadClockSettings(int)>:
c000b390:	53                   	push   ebx
c000b391:	83 ec 14             	sub    esp,0x14
c000b394:	68 14 01 00 00       	push   0x114
c000b399:	e8 1b c4 ff ff       	call   c00077b9 <malloc>
c000b39e:	83 c4 0c             	add    esp,0xc
c000b3a1:	89 c3                	mov    ebx,eax
c000b3a3:	ff 35 d0 37 02 c0    	push   DWORD PTR ds:0xc00237d0
c000b3a9:	68 9c d9 01 c0       	push   0xc001d99c
c000b3ae:	50                   	push   eax
c000b3af:	e8 a2 f6 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c000b3b4:	58                   	pop    eax
c000b3b5:	5a                   	pop    edx
c000b3b6:	6a 01                	push   0x1
c000b3b8:	53                   	push   ebx
c000b3b9:	e8 58 f7 ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c000b3be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3c1:	e8 ae f7 ff ff       	call   c000ab74 <File::close()>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	85 db                	test   ebx,ebx
c000b3cb:	74 0f                	je     c000b3dc <User::loadClockSettings(int)+0x4c>
c000b3cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3cf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3d3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b3d6:	83 c4 08             	add    esp,0x8
c000b3d9:	5b                   	pop    ebx
c000b3da:	ff e0                	jmp    eax
c000b3dc:	83 c4 08             	add    esp,0x8
c000b3df:	5b                   	pop    ebx
c000b3e0:	c3                   	ret    
c000b3e1:	90                   	nop

c000b3e2 <Clock::Clock(char const*)>:
c000b3e2:	83 ec 0c             	sub    esp,0xc
c000b3e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e9:	83 ec 08             	sub    esp,0x8
c000b3ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f0:	50                   	push   eax
c000b3f1:	e8 c2 06 00 00       	call   c000bab8 <Device::Device(char const*)>
c000b3f6:	83 c4 10             	add    esp,0x10
c000b3f9:	ba c4 d9 01 c0       	mov    edx,0xc001d9c4
c000b3fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b402:	89 10                	mov    DWORD PTR [eax],edx
c000b404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b408:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b412:	90                   	nop
c000b413:	83 c4 0c             	add    esp,0xc
c000b416:	c3                   	ret    
c000b417:	90                   	nop

c000b418 <Clock::~Clock()>:
c000b418:	83 ec 0c             	sub    esp,0xc
c000b41b:	ba c4 d9 01 c0       	mov    edx,0xc001d9c4
c000b420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b424:	89 10                	mov    DWORD PTR [eax],edx
c000b426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42a:	83 ec 0c             	sub    esp,0xc
c000b42d:	50                   	push   eax
c000b42e:	e8 ef 03 00 00       	call   c000b822 <Device::~Device()>
c000b433:	83 c4 10             	add    esp,0x10
c000b436:	90                   	nop
c000b437:	83 c4 0c             	add    esp,0xc
c000b43a:	c3                   	ret    
c000b43b:	90                   	nop

c000b43c <Clock::~Clock()>:
c000b43c:	83 ec 0c             	sub    esp,0xc
c000b43f:	83 ec 0c             	sub    esp,0xc
c000b442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b446:	e8 cd ff ff ff       	call   c000b418 <Clock::~Clock()>
c000b44b:	83 c4 10             	add    esp,0x10
c000b44e:	83 ec 08             	sub    esp,0x8
c000b451:	68 58 01 00 00       	push   0x158
c000b456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45a:	e8 8b ef ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000b45f:	83 c4 10             	add    esp,0x10
c000b462:	83 c4 0c             	add    esp,0xc
c000b465:	c3                   	ret    

c000b466 <Clock::timeInSecondsLocal()>:
c000b466:	53                   	push   ebx
c000b467:	83 ec 14             	sub    esp,0x14
c000b46a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b46e:	8b 10                	mov    edx,DWORD PTR [eax]
c000b470:	50                   	push   eax
c000b471:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b474:	0f b6 0d f8 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc00205f8
c000b47b:	03 0d fc 05 02 c0    	add    ecx,DWORD PTR ds:0xc00205fc
c000b481:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b487:	89 cb                	mov    ebx,ecx
c000b489:	c1 fb 1f             	sar    ebx,0x1f
c000b48c:	01 c8                	add    eax,ecx
c000b48e:	11 da                	adc    edx,ebx
c000b490:	83 c4 10             	add    esp,0x10
c000b493:	31 c9                	xor    ecx,ecx
c000b495:	80 3d f9 05 02 c0 00 	cmp    BYTE PTR ds:0xc00205f9,0x0
c000b49c:	74 05                	je     c000b4a3 <Clock::timeInSecondsLocal()+0x3d>
c000b49e:	b9 08 07 00 00       	mov    ecx,0x708
c000b4a3:	31 db                	xor    ebx,ebx
c000b4a5:	01 c8                	add    eax,ecx
c000b4a7:	11 da                	adc    edx,ebx
c000b4a9:	83 c4 08             	add    esp,0x8
c000b4ac:	5b                   	pop    ebx
c000b4ad:	c3                   	ret    

c000b4ae <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b4ae:	57                   	push   edi
c000b4af:	56                   	push   esi
c000b4b0:	53                   	push   ebx
c000b4b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b4b5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b4bf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b4c2:	0f b6 05 f8 05 02 c0 	movzx  eax,BYTE PTR ds:0xc00205f8
c000b4c9:	03 05 fc 05 02 c0    	add    eax,DWORD PTR ds:0xc00205fc
c000b4cf:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b4d5:	99                   	cdq    
c000b4d6:	29 c6                	sub    esi,eax
c000b4d8:	19 d7                	sbb    edi,edx
c000b4da:	89 f0                	mov    eax,esi
c000b4dc:	89 fa                	mov    edx,edi
c000b4de:	31 f6                	xor    esi,esi
c000b4e0:	80 3d f9 05 02 c0 00 	cmp    BYTE PTR ds:0xc00205f9,0x0
c000b4e7:	74 05                	je     c000b4ee <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b4e9:	be 08 07 00 00       	mov    esi,0x708
c000b4ee:	31 ff                	xor    edi,edi
c000b4f0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b4f4:	29 f0                	sub    eax,esi
c000b4f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4fa:	19 fa                	sbb    edx,edi
c000b4fc:	89 d8                	mov    eax,ebx
c000b4fe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b502:	5b                   	pop    ebx
c000b503:	5e                   	pop    esi
c000b504:	5f                   	pop    edi
c000b505:	ff e0                	jmp    eax

c000b507 <datetimeToSeconds(datetime_t)>:
c000b507:	55                   	push   ebp
c000b508:	57                   	push   edi
c000b509:	56                   	push   esi
c000b50a:	53                   	push   ebx
c000b50b:	83 ec 14             	sub    esp,0x14
c000b50e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b512:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b516:	89 d3                	mov    ebx,edx
c000b518:	0f b6 c6             	movzx  eax,dh
c000b51b:	c1 eb 10             	shr    ebx,0x10
c000b51e:	48                   	dec    eax
c000b51f:	66 81 eb 6c 07       	sub    bx,0x76c
c000b524:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b528:	0f b6 f5             	movzx  esi,ch
c000b52b:	89 cf                	mov    edi,ecx
c000b52d:	6b f6 3c             	imul   esi,esi,0x3c
c000b530:	c1 ef 10             	shr    edi,0x10
c000b533:	0f b6 c9             	movzx  ecx,cl
c000b536:	89 f8                	mov    eax,edi
c000b538:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b53e:	0f b6 f8             	movzx  edi,al
c000b541:	0f b6 d2             	movzx  edx,dl
c000b544:	01 fe                	add    esi,edi
c000b546:	01 f1                	add    ecx,esi
c000b548:	0f b7 f3             	movzx  esi,bx
c000b54b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b54f:	c1 f9 1f             	sar    ecx,0x1f
c000b552:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b557:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b55b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b560:	8b 0c 8d 00 da 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2600]
c000b567:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b56b:	76 29                	jbe    c000b596 <datetimeToSeconds(datetime_t)+0x8f>
c000b56d:	f6 c3 03             	test   bl,0x3
c000b570:	75 24                	jne    c000b596 <datetimeToSeconds(datetime_t)+0x8f>
c000b572:	31 d2                	xor    edx,edx
c000b574:	bf 64 00 00 00       	mov    edi,0x64
c000b579:	89 d8                	mov    eax,ebx
c000b57b:	66 f7 f7             	div    di
c000b57e:	66 85 d2             	test   dx,dx
c000b581:	75 12                	jne    c000b595 <datetimeToSeconds(datetime_t)+0x8e>
c000b583:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b589:	bf 90 01 00 00       	mov    edi,0x190
c000b58e:	99                   	cdq    
c000b58f:	f7 ff                	idiv   edi
c000b591:	85 d2                	test   edx,edx
c000b593:	75 01                	jne    c000b596 <datetimeToSeconds(datetime_t)+0x8f>
c000b595:	41                   	inc    ecx
c000b596:	66 83 fb 46          	cmp    bx,0x46
c000b59a:	76 45                	jbe    c000b5e1 <datetimeToSeconds(datetime_t)+0xda>
c000b59c:	bb 46 00 00 00       	mov    ebx,0x46
c000b5a1:	bf 64 00 00 00       	mov    edi,0x64
c000b5a6:	bd 90 01 00 00       	mov    ebp,0x190
c000b5ab:	b8 6d 01 00 00       	mov    eax,0x16d
c000b5b0:	f6 c3 03             	test   bl,0x3
c000b5b3:	75 23                	jne    c000b5d8 <datetimeToSeconds(datetime_t)+0xd1>
c000b5b5:	89 d8                	mov    eax,ebx
c000b5b7:	99                   	cdq    
c000b5b8:	f7 ff                	idiv   edi
c000b5ba:	b8 6e 01 00 00       	mov    eax,0x16e
c000b5bf:	85 d2                	test   edx,edx
c000b5c1:	75 15                	jne    c000b5d8 <datetimeToSeconds(datetime_t)+0xd1>
c000b5c3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b5c9:	99                   	cdq    
c000b5ca:	f7 fd                	idiv   ebp
c000b5cc:	31 c0                	xor    eax,eax
c000b5ce:	85 d2                	test   edx,edx
c000b5d0:	0f 94 c0             	sete   al
c000b5d3:	05 6d 01 00 00       	add    eax,0x16d
c000b5d8:	01 c1                	add    ecx,eax
c000b5da:	43                   	inc    ebx
c000b5db:	39 f3                	cmp    ebx,esi
c000b5dd:	7c cc                	jl     c000b5ab <datetimeToSeconds(datetime_t)+0xa4>
c000b5df:	eb 3b                	jmp    c000b61c <datetimeToSeconds(datetime_t)+0x115>
c000b5e1:	74 39                	je     c000b61c <datetimeToSeconds(datetime_t)+0x115>
c000b5e3:	b8 45 00 00 00       	mov    eax,0x45
c000b5e8:	89 c2                	mov    edx,eax
c000b5ea:	83 e2 03             	and    edx,0x3
c000b5ed:	39 f0                	cmp    eax,esi
c000b5ef:	7e 13                	jle    c000b604 <datetimeToSeconds(datetime_t)+0xfd>
c000b5f1:	85 d2                	test   edx,edx
c000b5f3:	0f 94 c2             	sete   dl
c000b5f6:	48                   	dec    eax
c000b5f7:	0f b6 d2             	movzx  edx,dl
c000b5fa:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b600:	29 d1                	sub    ecx,edx
c000b602:	eb e4                	jmp    c000b5e8 <datetimeToSeconds(datetime_t)+0xe1>
c000b604:	b8 6d 01 00 00       	mov    eax,0x16d
c000b609:	85 d2                	test   edx,edx
c000b60b:	75 0d                	jne    c000b61a <datetimeToSeconds(datetime_t)+0x113>
c000b60d:	31 c0                	xor    eax,eax
c000b60f:	66 85 db             	test   bx,bx
c000b612:	0f 95 c0             	setne  al
c000b615:	05 6d 01 00 00       	add    eax,0x16d
c000b61a:	29 c1                	sub    ecx,eax
c000b61c:	b8 80 51 01 00       	mov    eax,0x15180
c000b621:	f7 e9                	imul   ecx
c000b623:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b627:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b62b:	83 c4 14             	add    esp,0x14
c000b62e:	5b                   	pop    ebx
c000b62f:	5e                   	pop    esi
c000b630:	5f                   	pop    edi
c000b631:	5d                   	pop    ebp
c000b632:	c3                   	ret    
c000b633:	90                   	nop

c000b634 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b634:	57                   	push   edi
c000b635:	56                   	push   esi
c000b636:	53                   	push   ebx
c000b637:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b63b:	8b 06                	mov    eax,DWORD PTR [esi]
c000b63d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b640:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b644:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b648:	e8 ba fe ff ff       	call   c000b507 <datetimeToSeconds(datetime_t)>
c000b64d:	59                   	pop    ecx
c000b64e:	0f b6 0d f8 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc00205f8
c000b655:	5b                   	pop    ebx
c000b656:	03 0d fc 05 02 c0    	add    ecx,DWORD PTR ds:0xc00205fc
c000b65c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b662:	89 cb                	mov    ebx,ecx
c000b664:	c1 fb 1f             	sar    ebx,0x1f
c000b667:	29 c8                	sub    eax,ecx
c000b669:	19 da                	sbb    edx,ebx
c000b66b:	31 c9                	xor    ecx,ecx
c000b66d:	80 3d f9 05 02 c0 00 	cmp    BYTE PTR ds:0xc00205f9,0x0
c000b674:	74 05                	je     c000b67b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b676:	b9 08 07 00 00       	mov    ecx,0x708
c000b67b:	31 db                	xor    ebx,ebx
c000b67d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b681:	29 c8                	sub    eax,ecx
c000b683:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b687:	19 da                	sbb    edx,ebx
c000b689:	89 f8                	mov    eax,edi
c000b68b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b68f:	5b                   	pop    ebx
c000b690:	5e                   	pop    esi
c000b691:	5f                   	pop    edi
c000b692:	ff e0                	jmp    eax

c000b694 <secondsToDatetime(unsigned long long)>:
c000b694:	55                   	push   ebp
c000b695:	57                   	push   edi
c000b696:	56                   	push   esi
c000b697:	53                   	push   ebx
c000b698:	83 ec 1c             	sub    esp,0x1c
c000b69b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b69f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b6a3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b6a7:	6a 00                	push   0x0
c000b6a9:	68 80 51 01 00       	push   0x15180
c000b6ae:	55                   	push   ebp
c000b6af:	57                   	push   edi
c000b6b0:	e8 fb 05 01 00       	call   c001bcb0 <__udivdi3>
c000b6b5:	83 c4 10             	add    esp,0x10
c000b6b8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b6be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6c2:	6a 00                	push   0x0
c000b6c4:	68 80 51 01 00       	push   0x15180
c000b6c9:	55                   	push   ebp
c000b6ca:	57                   	push   edi
c000b6cb:	bf 10 0e 00 00       	mov    edi,0xe10
c000b6d0:	e8 db 06 01 00       	call   c001bdb0 <__umoddi3>
c000b6d5:	83 c4 10             	add    esp,0x10
c000b6d8:	99                   	cdq    
c000b6d9:	f7 ff                	idiv   edi
c000b6db:	bf 3c 00 00 00       	mov    edi,0x3c
c000b6e0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b6e3:	89 d0                	mov    eax,edx
c000b6e5:	99                   	cdq    
c000b6e6:	f7 ff                	idiv   edi
c000b6e8:	85 db                	test   ebx,ebx
c000b6ea:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b6ed:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b6f0:	79 11                	jns    c000b703 <secondsToDatetime(unsigned long long)+0x6f>
c000b6f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b6f6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b6fc:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b701:	eb 07                	jmp    c000b70a <secondsToDatetime(unsigned long long)+0x76>
c000b703:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b708:	89 d8                	mov    eax,ebx
c000b70a:	bf b4 05 00 00       	mov    edi,0x5b4
c000b70f:	99                   	cdq    
c000b710:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b715:	f7 f9                	idiv   ecx
c000b717:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b71c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b720:	31 d2                	xor    edx,edx
c000b722:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b72a:	01 c3                	add    ebx,eax
c000b72c:	89 d8                	mov    eax,ebx
c000b72e:	f7 f1                	div    ecx
c000b730:	31 d2                	xor    edx,edx
c000b732:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b735:	89 d8                	mov    eax,ebx
c000b737:	f7 f7                	div    edi
c000b739:	31 d2                	xor    edx,edx
c000b73b:	29 c1                	sub    ecx,eax
c000b73d:	89 d8                	mov    eax,ebx
c000b73f:	f7 f5                	div    ebp
c000b741:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b746:	29 c1                	sub    ecx,eax
c000b748:	31 d2                	xor    edx,edx
c000b74a:	89 c8                	mov    eax,ecx
c000b74c:	f7 f5                	div    ebp
c000b74e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b753:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b757:	31 d2                	xor    edx,edx
c000b759:	89 c8                	mov    eax,ecx
c000b75b:	f7 f5                	div    ebp
c000b75d:	31 d2                	xor    edx,edx
c000b75f:	01 c3                	add    ebx,eax
c000b761:	89 c8                	mov    eax,ecx
c000b763:	f7 f7                	div    edi
c000b765:	bf 99 00 00 00       	mov    edi,0x99
c000b76a:	29 c3                	sub    ebx,eax
c000b76c:	31 d2                	xor    edx,edx
c000b76e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b776:	29 c3                	sub    ebx,eax
c000b778:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b77b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b77e:	bb 05 00 00 00       	mov    ebx,0x5
c000b783:	83 c1 02             	add    ecx,0x2
c000b786:	89 c8                	mov    eax,ecx
c000b788:	f7 f7                	div    edi
c000b78a:	31 d2                	xor    edx,edx
c000b78c:	89 c7                	mov    edi,eax
c000b78e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b794:	83 c0 02             	add    eax,0x2
c000b797:	f7 f3                	div    ebx
c000b799:	89 eb                	mov    ebx,ebp
c000b79b:	29 c3                	sub    ebx,eax
c000b79d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b7a3:	88 1e                	mov    BYTE PTR [esi],bl
c000b7a5:	19 c0                	sbb    eax,eax
c000b7a7:	31 d2                	xor    edx,edx
c000b7a9:	83 e0 0c             	and    eax,0xc
c000b7ac:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b7b0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b7b8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b7bc:	83 f9 01             	cmp    ecx,0x1
c000b7bf:	0f 96 c2             	setbe  dl
c000b7c2:	41                   	inc    ecx
c000b7c3:	01 d0                	add    eax,edx
c000b7c5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b7c8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b7cc:	83 c4 1c             	add    esp,0x1c
c000b7cf:	89 f0                	mov    eax,esi
c000b7d1:	5b                   	pop    ebx
c000b7d2:	5e                   	pop    esi
c000b7d3:	5f                   	pop    edi
c000b7d4:	5d                   	pop    ebp
c000b7d5:	c2 04 00             	ret    0x4

c000b7d8 <Clock::timeInDatetimeLocal()>:
c000b7d8:	53                   	push   ebx
c000b7d9:	83 ec 14             	sub    esp,0x14
c000b7dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b7e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7e4:	e8 7d fc ff ff       	call   c000b466 <Clock::timeInSecondsLocal()>
c000b7e9:	83 c4 0c             	add    esp,0xc
c000b7ec:	52                   	push   edx
c000b7ed:	50                   	push   eax
c000b7ee:	53                   	push   ebx
c000b7ef:	e8 a0 fe ff ff       	call   c000b694 <secondsToDatetime(unsigned long long)>
c000b7f4:	89 d8                	mov    eax,ebx
c000b7f6:	83 c4 14             	add    esp,0x14
c000b7f9:	5b                   	pop    ebx
c000b7fa:	c2 04 00             	ret    0x4
c000b7fd:	90                   	nop

c000b7fe <Device::hibernate()>:
c000b7fe:	c3                   	ret    
c000b7ff:	90                   	nop

c000b800 <Device::wake()>:
c000b800:	c3                   	ret    
c000b801:	90                   	nop

c000b802 <Device::detect()>:
c000b802:	c3                   	ret    
c000b803:	90                   	nop

c000b804 <Device::disableLegacy()>:
c000b804:	c3                   	ret    
c000b805:	90                   	nop

c000b806 <Device::powerSaving(PowerSavingLevel)>:
c000b806:	c3                   	ret    
c000b807:	90                   	nop

c000b808 <DriverlessDevice::close(int, int, void*)>:
c000b808:	31 c0                	xor    eax,eax
c000b80a:	c3                   	ret    
c000b80b:	90                   	nop

c000b80c <DriverlessDevice::detect()>:
c000b80c:	c3                   	ret    
c000b80d:	90                   	nop

c000b80e <DriverlessDevice::open(int, int, void*)>:
c000b80e:	83 ec 18             	sub    esp,0x18
c000b811:	68 30 da 01 c0       	push   0xc001da30
c000b816:	e8 44 49 00 00       	call   c001015f <KePanic(char const*)>
c000b81b:	83 c8 ff             	or     eax,0xffffffff
c000b81e:	83 c4 1c             	add    esp,0x1c
c000b821:	c3                   	ret    

c000b822 <Device::~Device()>:
c000b822:	ba 90 da 01 c0       	mov    edx,0xc001da90
c000b827:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82b:	89 10                	mov    DWORD PTR [eax],edx
c000b82d:	90                   	nop
c000b82e:	c3                   	ret    
c000b82f:	90                   	nop

c000b830 <Device::~Device()>:
c000b830:	83 ec 0c             	sub    esp,0xc
c000b833:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b837:	e8 e6 ff ff ff       	call   c000b822 <Device::~Device()>
c000b83c:	83 c4 04             	add    esp,0x4
c000b83f:	83 ec 08             	sub    esp,0x8
c000b842:	68 58 01 00 00       	push   0x158
c000b847:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b84b:	e8 9a eb ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000b850:	83 c4 10             	add    esp,0x10
c000b853:	83 c4 0c             	add    esp,0xc
c000b856:	c3                   	ret    
c000b857:	90                   	nop

c000b858 <Device::findAndLoadDriver()>:
c000b858:	c7 44 24 04 4e da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001da4e
c000b860:	e9 7b ec ff ff       	jmp    c000a4e0 <Dbg::kprintf(char const*, ...)>
c000b865:	90                   	nop

c000b866 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b866:	57                   	push   edi
c000b867:	b9 09 00 00 00       	mov    ecx,0x9
c000b86c:	56                   	push   esi
c000b86d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b871:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b875:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b87f:	81 c7 18 01 00 00    	add    edi,0x118
c000b885:	fc                   	cld    
c000b886:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b888:	5e                   	pop    esi
c000b889:	5f                   	pop    edi
c000b88a:	c3                   	ret    
c000b88b:	90                   	nop

c000b88c <Device::preOpenACPI(void*, char*, char*)>:
c000b88c:	57                   	push   edi
c000b88d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b892:	56                   	push   esi
c000b893:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b897:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b89b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b8a5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b8ab:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b8b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b8b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8b7:	b9 0e 00 00 00       	mov    ecx,0xe
c000b8bc:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b8c2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b8c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8c8:	5e                   	pop    esi
c000b8c9:	5f                   	pop    edi
c000b8ca:	c3                   	ret    
c000b8cb:	90                   	nop

c000b8cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b8cc:	53                   	push   ebx
c000b8cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b8d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8dd:	0f b6 c0             	movzx  eax,al
c000b8e0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b8e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b8ec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b8f0:	5b                   	pop    ebx
c000b8f1:	e9 a6 05 00 00       	jmp    c000be9c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b8f6 <Device::getParent()>:
c000b8f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8fa:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b900:	c3                   	ret    
c000b901:	90                   	nop

c000b902 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b902:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b906:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b90a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b90f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b913:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b917:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b91b:	e9 e8 06 00 00       	jmp    c000c008 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b920 <Device::addChild(Device*)>:
c000b920:	53                   	push   ebx
c000b921:	83 ec 08             	sub    esp,0x8
c000b924:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b928:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b92c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b932:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b938:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b93a:	85 d2                	test   edx,edx
c000b93c:	74 04                	je     c000b942 <Device::addChild(Device*)+0x22>
c000b93e:	89 d3                	mov    ebx,edx
c000b940:	eb f6                	jmp    c000b938 <Device::addChild(Device*)+0x18>
c000b942:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b945:	83 ec 0c             	sub    esp,0xc
c000b948:	6a 08                	push   0x8
c000b94a:	e8 6a be ff ff       	call   c00077b9 <malloc>
c000b94f:	89 03                	mov    DWORD PTR [ebx],eax
c000b951:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b957:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b95e:	83 c4 18             	add    esp,0x18
c000b961:	5b                   	pop    ebx
c000b962:	c3                   	ret    
c000b963:	90                   	nop

c000b964 <Device::removeAllChildren()>:
c000b964:	56                   	push   esi
c000b965:	53                   	push   ebx
c000b966:	52                   	push   edx
c000b967:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b96b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b971:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b974:	74 17                	je     c000b98d <Device::removeAllChildren()+0x29>
c000b976:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b979:	85 c0                	test   eax,eax
c000b97b:	74 0c                	je     c000b989 <Device::removeAllChildren()+0x25>
c000b97d:	83 ec 0c             	sub    esp,0xc
c000b980:	8b 10                	mov    edx,DWORD PTR [eax]
c000b982:	50                   	push   eax
c000b983:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b986:	83 c4 10             	add    esp,0x10
c000b989:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b98b:	eb e4                	jmp    c000b971 <Device::removeAllChildren()+0xd>
c000b98d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b993:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b999:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b99f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9a6:	58                   	pop    eax
c000b9a7:	5b                   	pop    ebx
c000b9a8:	5e                   	pop    esi
c000b9a9:	c3                   	ret    

c000b9aa <Device::hibernateAll()>:
c000b9aa:	53                   	push   ebx
c000b9ab:	83 ec 14             	sub    esp,0x14
c000b9ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9b4:	53                   	push   ebx
c000b9b5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b9b8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9be:	83 c4 10             	add    esp,0x10
c000b9c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9c4:	74 0f                	je     c000b9d5 <Device::hibernateAll()+0x2b>
c000b9c6:	83 ec 0c             	sub    esp,0xc
c000b9c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9cc:	e8 d9 ff ff ff       	call   c000b9aa <Device::hibernateAll()>
c000b9d1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9d3:	eb e9                	jmp    c000b9be <Device::hibernateAll()+0x14>
c000b9d5:	83 c4 08             	add    esp,0x8
c000b9d8:	5b                   	pop    ebx
c000b9d9:	c3                   	ret    

c000b9da <Device::wakeAll()>:
c000b9da:	53                   	push   ebx
c000b9db:	83 ec 14             	sub    esp,0x14
c000b9de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9e4:	53                   	push   ebx
c000b9e5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000b9e8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9ee:	83 c4 10             	add    esp,0x10
c000b9f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9f4:	74 0f                	je     c000ba05 <Device::wakeAll()+0x2b>
c000b9f6:	83 ec 0c             	sub    esp,0xc
c000b9f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9fc:	e8 d9 ff ff ff       	call   c000b9da <Device::wakeAll()>
c000ba01:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba03:	eb e9                	jmp    c000b9ee <Device::wakeAll()+0x14>
c000ba05:	83 c4 08             	add    esp,0x8
c000ba08:	5b                   	pop    ebx
c000ba09:	c3                   	ret    

c000ba0a <Device::detectAll()>:
c000ba0a:	53                   	push   ebx
c000ba0b:	83 ec 14             	sub    esp,0x14
c000ba0e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba12:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba14:	53                   	push   ebx
c000ba15:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ba18:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba1e:	83 c4 10             	add    esp,0x10
c000ba21:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba24:	74 0f                	je     c000ba35 <Device::detectAll()+0x2b>
c000ba26:	83 ec 0c             	sub    esp,0xc
c000ba29:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba2c:	e8 d9 ff ff ff       	call   c000ba0a <Device::detectAll()>
c000ba31:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba33:	eb e9                	jmp    c000ba1e <Device::detectAll()+0x14>
c000ba35:	83 c4 08             	add    esp,0x8
c000ba38:	5b                   	pop    ebx
c000ba39:	c3                   	ret    

c000ba3a <Device::disableLegacyAll()>:
c000ba3a:	c3                   	ret    
c000ba3b:	90                   	nop

c000ba3c <Device::loadDriversForAll()>:
c000ba3c:	c3                   	ret    
c000ba3d:	90                   	nop

c000ba3e <Device::closeAll()>:
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 08             	sub    esp,0x8
c000ba42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba48:	6a 00                	push   0x0
c000ba4a:	6a 00                	push   0x0
c000ba4c:	6a 00                	push   0x0
c000ba4e:	53                   	push   ebx
c000ba4f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba52:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba58:	83 c4 10             	add    esp,0x10
c000ba5b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba5e:	74 0f                	je     c000ba6f <Device::closeAll()+0x31>
c000ba60:	83 ec 0c             	sub    esp,0xc
c000ba63:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba66:	e8 d3 ff ff ff       	call   c000ba3e <Device::closeAll()>
c000ba6b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba6d:	eb e9                	jmp    c000ba58 <Device::closeAll()+0x1a>
c000ba6f:	83 c4 08             	add    esp,0x8
c000ba72:	5b                   	pop    ebx
c000ba73:	c3                   	ret    

c000ba74 <Device::powerSavingAll(PowerSavingLevel)>:
c000ba74:	56                   	push   esi
c000ba75:	53                   	push   ebx
c000ba76:	83 ec 0c             	sub    esp,0xc
c000ba79:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba7d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ba81:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba83:	56                   	push   esi
c000ba84:	53                   	push   ebx
c000ba85:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000ba88:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba8e:	83 c4 10             	add    esp,0x10
c000ba91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba94:	74 0f                	je     c000baa5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000ba96:	52                   	push   edx
c000ba97:	52                   	push   edx
c000ba98:	56                   	push   esi
c000ba99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba9c:	e8 d3 ff ff ff       	call   c000ba74 <Device::powerSavingAll(PowerSavingLevel)>
c000baa1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baa3:	eb e9                	jmp    c000ba8e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000baa5:	58                   	pop    eax
c000baa6:	5b                   	pop    ebx
c000baa7:	5e                   	pop    esi
c000baa8:	c3                   	ret    
c000baa9:	90                   	nop

c000baaa <Device::setName(char const*)>:
c000baaa:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bab2:	e9 49 4b ff ff       	jmp    c0000600 <strcpy>
c000bab7:	90                   	nop

c000bab8 <Device::Device(char const*)>:
c000bab8:	83 ec 1c             	sub    esp,0x1c
c000babb:	ba 90 da 01 c0       	mov    edx,0xc001da90
c000bac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac4:	89 10                	mov    DWORD PTR [eax],edx
c000bac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baca:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000baf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bafe:	83 ec 08             	sub    esp,0x8
c000bb01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb09:	e8 9c ff ff ff       	call   c000baaa <Device::setName(char const*)>
c000bb0e:	83 c4 10             	add    esp,0x10
c000bb11:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bb19:	83 ec 0c             	sub    esp,0xc
c000bb1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb20:	e8 94 bc ff ff       	call   c00077b9 <malloc>
c000bb25:	83 c4 10             	add    esp,0x10
c000bb28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb35:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb39:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bb3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb43:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb53:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb64:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bb6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb6f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bb76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb7a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb88:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb96:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bba0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bba4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bbae:	90                   	nop
c000bbaf:	83 c4 1c             	add    esp,0x1c
c000bbb2:	c3                   	ret    
c000bbb3:	90                   	nop

c000bbb4 <Device::getName()>:
c000bbb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbb8:	05 d0 00 00 00       	add    eax,0xd0
c000bbbd:	c3                   	ret    

c000bbbe <DriverlessDevice::DriverlessDevice(char const*)>:
c000bbbe:	83 ec 0c             	sub    esp,0xc
c000bbc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbc5:	83 ec 08             	sub    esp,0x8
c000bbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbcc:	50                   	push   eax
c000bbcd:	e8 e6 fe ff ff       	call   c000bab8 <Device::Device(char const*)>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	ba bc da 01 c0       	mov    edx,0xc001dabc
c000bbda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbde:	89 10                	mov    DWORD PTR [eax],edx
c000bbe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbe4:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bbee:	90                   	nop
c000bbef:	83 c4 0c             	add    esp,0xc
c000bbf2:	c3                   	ret    
c000bbf3:	90                   	nop

c000bbf4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bbf4:	57                   	push   edi
c000bbf5:	56                   	push   esi
c000bbf6:	53                   	push   ebx
c000bbf7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbfb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc03:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bc09:	75 0c                	jne    c000bc17 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bc0b:	52                   	push   edx
c000bc0c:	52                   	push   edx
c000bc0d:	53                   	push   ebx
c000bc0e:	56                   	push   esi
c000bc0f:	e8 4e 05 01 00       	call   c001c162 <LinkedList<Device>::addElement(Device*)>
c000bc14:	83 c4 10             	add    esp,0x10
c000bc17:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc1d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc20:	74 12                	je     c000bc34 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bc22:	50                   	push   eax
c000bc23:	57                   	push   edi
c000bc24:	56                   	push   esi
c000bc25:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc28:	e8 c7 ff ff ff       	call   c000bbf4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc2d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc2f:	83 c4 10             	add    esp,0x10
c000bc32:	eb e9                	jmp    c000bc1d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bc34:	5b                   	pop    ebx
c000bc35:	5e                   	pop    esi
c000bc36:	5f                   	pop    edi
c000bc37:	c3                   	ret    

c000bc38 <getDevicesOfType(DeviceType)>:
c000bc38:	53                   	push   ebx
c000bc39:	83 ec 14             	sub    esp,0x14
c000bc3c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc40:	53                   	push   ebx
c000bc41:	e8 f8 05 01 00       	call   c001c23e <LinkedList<Device>::LinkedList()>
c000bc46:	83 c4 0c             	add    esp,0xc
c000bc49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc4d:	53                   	push   ebx
c000bc4e:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c000bc54:	e8 9b ff ff ff       	call   c000bbf4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc59:	89 d8                	mov    eax,ebx
c000bc5b:	83 c4 18             	add    esp,0x18
c000bc5e:	5b                   	pop    ebx
c000bc5f:	c2 04 00             	ret    0x4
c000bc62:	66 90                	xchg   ax,ax

c000bc64 <HardDiskController::HardDiskController(char const*)>:
c000bc64:	83 ec 0c             	sub    esp,0xc
c000bc67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc6b:	83 ec 08             	sub    esp,0x8
c000bc6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc72:	50                   	push   eax
c000bc73:	e8 40 fe ff ff       	call   c000bab8 <Device::Device(char const*)>
c000bc78:	83 c4 10             	add    esp,0x10
c000bc7b:	ba e8 da 01 c0       	mov    edx,0xc001dae8
c000bc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc84:	89 10                	mov    DWORD PTR [eax],edx
c000bc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc8a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bc94:	90                   	nop
c000bc95:	83 c4 0c             	add    esp,0xc
c000bc98:	c3                   	ret    
c000bc99:	90                   	nop
c000bc9a:	66 90                	xchg   ax,ax

c000bc9c <HardDiskController::~HardDiskController()>:
c000bc9c:	83 ec 0c             	sub    esp,0xc
c000bc9f:	ba e8 da 01 c0       	mov    edx,0xc001dae8
c000bca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca8:	89 10                	mov    DWORD PTR [eax],edx
c000bcaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcae:	83 ec 0c             	sub    esp,0xc
c000bcb1:	50                   	push   eax
c000bcb2:	e8 6b fb ff ff       	call   c000b822 <Device::~Device()>
c000bcb7:	83 c4 10             	add    esp,0x10
c000bcba:	90                   	nop
c000bcbb:	83 c4 0c             	add    esp,0xc
c000bcbe:	c3                   	ret    
c000bcbf:	90                   	nop

c000bcc0 <HardDiskController::~HardDiskController()>:
c000bcc0:	83 ec 0c             	sub    esp,0xc
c000bcc3:	83 ec 0c             	sub    esp,0xc
c000bcc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcca:	e8 cd ff ff ff       	call   c000bc9c <HardDiskController::~HardDiskController()>
c000bccf:	83 c4 10             	add    esp,0x10
c000bcd2:	83 ec 08             	sub    esp,0x8
c000bcd5:	68 58 01 00 00       	push   0x158
c000bcda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcde:	e8 07 e7 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000bce3:	83 c4 10             	add    esp,0x10
c000bce6:	83 c4 0c             	add    esp,0xc
c000bce9:	c3                   	ret    

c000bcea <PhysicalDisk::eject()>:
c000bcea:	83 c8 ff             	or     eax,0xffffffff
c000bced:	c3                   	ret    

c000bcee <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bcee:	83 ec 0c             	sub    esp,0xc
c000bcf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf5:	83 ec 08             	sub    esp,0x8
c000bcf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfc:	50                   	push   eax
c000bcfd:	e8 b6 fd ff ff       	call   c000bab8 <Device::Device(char const*)>
c000bd02:	83 c4 10             	add    esp,0x10
c000bd05:	ba 14 db 01 c0       	mov    edx,0xc001db14
c000bd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd0e:	89 10                	mov    DWORD PTR [eax],edx
c000bd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd14:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bd1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd1f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bd26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd2a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bd34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd3c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd46:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bd50:	90                   	nop
c000bd51:	83 c4 0c             	add    esp,0xc
c000bd54:	c3                   	ret    
c000bd55:	90                   	nop

c000bd56 <PhysicalDisk::startCache()>:
c000bd56:	56                   	push   esi
c000bd57:	53                   	push   ebx
c000bd58:	83 ec 10             	sub    esp,0x10
c000bd5b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd5f:	6a 44                	push   0x44
c000bd61:	e8 53 ba ff ff       	call   c00077b9 <malloc>
c000bd66:	89 c6                	mov    esi,eax
c000bd68:	58                   	pop    eax
c000bd69:	5a                   	pop    edx
c000bd6a:	53                   	push   ebx
c000bd6b:	56                   	push   esi
c000bd6c:	e8 c7 15 00 00       	call   c000d338 <VCache::VCache(PhysicalDisk*)>
c000bd71:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bd77:	83 c4 14             	add    esp,0x14
c000bd7a:	5b                   	pop    ebx
c000bd7b:	5e                   	pop    esi
c000bd7c:	c3                   	ret    
c000bd7d:	90                   	nop

c000bd7e <PhysicalDisk::~PhysicalDisk()>:
c000bd7e:	83 ec 0c             	sub    esp,0xc
c000bd81:	ba 14 db 01 c0       	mov    edx,0xc001db14
c000bd86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd8a:	89 10                	mov    DWORD PTR [eax],edx
c000bd8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd90:	83 ec 0c             	sub    esp,0xc
c000bd93:	50                   	push   eax
c000bd94:	e8 89 fa ff ff       	call   c000b822 <Device::~Device()>
c000bd99:	83 c4 10             	add    esp,0x10
c000bd9c:	90                   	nop
c000bd9d:	83 c4 0c             	add    esp,0xc
c000bda0:	c3                   	ret    
c000bda1:	90                   	nop

c000bda2 <PhysicalDisk::~PhysicalDisk()>:
c000bda2:	83 ec 0c             	sub    esp,0xc
c000bda5:	83 ec 0c             	sub    esp,0xc
c000bda8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdac:	e8 cd ff ff ff       	call   c000bd7e <PhysicalDisk::~PhysicalDisk()>
c000bdb1:	83 c4 10             	add    esp,0x10
c000bdb4:	83 ec 08             	sub    esp,0x8
c000bdb7:	68 6c 01 00 00       	push   0x16c
c000bdbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdc0:	e8 25 e6 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000bdc5:	83 c4 10             	add    esp,0x10
c000bdc8:	83 c4 0c             	add    esp,0xc
c000bdcb:	c3                   	ret    

c000bdcc <int_handler>:
c000bdcc:	55                   	push   ebp
c000bdcd:	57                   	push   edi
c000bdce:	56                   	push   esi
c000bdcf:	53                   	push   ebx
c000bdd0:	83 ec 0c             	sub    esp,0xc
c000bdd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bdd7:	80 3d 78 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022f78,0x0
c000bdde:	74 0b                	je     c000bdeb <int_handler+0x1f>
c000bde0:	fa                   	cli    
c000bde1:	f4                   	hlt    
c000bde2:	80 3d 78 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022f78,0x0
c000bde9:	75 f5                	jne    c000bde0 <int_handler+0x14>
c000bdeb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bdee:	8d 46 e0             	lea    eax,[esi-0x20]
c000bdf1:	83 f8 17             	cmp    eax,0x17
c000bdf4:	76 3e                	jbe    c000be34 <int_handler+0x68>
c000bdf6:	c1 e6 04             	shl    esi,0x4
c000bdf9:	31 db                	xor    ebx,ebx
c000bdfb:	8d ae 00 16 02 c0    	lea    ebp,[esi-0x3ffdea00]
c000be01:	81 c6 00 06 02 c0    	add    esi,0xc0020600
c000be07:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000be0b:	85 c0                	test   eax,eax
c000be0d:	74 13                	je     c000be22 <int_handler+0x56>
c000be0f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000be12:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000be16:	74 2a                	je     c000be42 <int_handler+0x76>
c000be18:	83 ec 08             	sub    esp,0x8
c000be1b:	52                   	push   edx
c000be1c:	57                   	push   edi
c000be1d:	ff d0                	call   eax
c000be1f:	83 c4 10             	add    esp,0x10
c000be22:	43                   	inc    ebx
c000be23:	83 fb 04             	cmp    ebx,0x4
c000be26:	75 df                	jne    c000be07 <int_handler+0x3b>
c000be28:	83 c4 0c             	add    esp,0xc
c000be2b:	31 c0                	xor    eax,eax
c000be2d:	5b                   	pop    ebx
c000be2e:	31 d2                	xor    edx,edx
c000be30:	5e                   	pop    esi
c000be31:	5f                   	pop    edi
c000be32:	5d                   	pop    ebp
c000be33:	c3                   	ret    
c000be34:	83 ec 0c             	sub    esp,0xc
c000be37:	50                   	push   eax
c000be38:	e8 5e 96 00 00       	call   c001549b <HalEndOfInterrupt(int)>
c000be3d:	83 c4 10             	add    esp,0x10
c000be40:	eb b4                	jmp    c000bdf6 <int_handler+0x2a>
c000be42:	83 ec 08             	sub    esp,0x8
c000be45:	52                   	push   edx
c000be46:	57                   	push   edi
c000be47:	ff d0                	call   eax
c000be49:	83 c4 10             	add    esp,0x10
c000be4c:	83 c4 0c             	add    esp,0xc
c000be4f:	5b                   	pop    ebx
c000be50:	5e                   	pop    esi
c000be51:	5f                   	pop    edi
c000be52:	5d                   	pop    ebp
c000be53:	c3                   	ret    

c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000be54:	56                   	push   esi
c000be55:	31 c0                	xor    eax,eax
c000be57:	53                   	push   ebx
c000be58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000be5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be60:	89 ca                	mov    edx,ecx
c000be62:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be66:	c1 e2 04             	shl    edx,0x4
c000be69:	83 bc 82 00 16 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdea00],0x0
c000be71:	74 15                	je     c000be88 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000be73:	40                   	inc    eax
c000be74:	83 f8 04             	cmp    eax,0x4
c000be77:	75 f0                	jne    c000be69 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000be79:	c7 44 24 0c 44 db 01 c0 	mov    DWORD PTR [esp+0xc],0xc001db44
c000be81:	5b                   	pop    ebx
c000be82:	5e                   	pop    esi
c000be83:	e9 d7 42 00 00       	jmp    c001015f <KePanic(char const*)>
c000be88:	8d 04 88             	lea    eax,[eax+ecx*4]
c000be8b:	89 1c 85 00 16 02 c0 	mov    DWORD PTR [eax*4-0x3ffdea00],ebx
c000be92:	89 34 85 00 06 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa00],esi
c000be99:	5b                   	pop    ebx
c000be9a:	5e                   	pop    esi
c000be9b:	c3                   	ret    

c000be9c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000be9c:	57                   	push   edi
c000be9d:	8b 15 f8 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204f8
c000bea3:	56                   	push   esi
c000bea4:	53                   	push   ebx
c000bea5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bea9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bead:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000beb4:	74 5b                	je     c000bf11 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000beb6:	89 c7                	mov    edi,eax
c000beb8:	84 c0                	test   al,al
c000beba:	74 24                	je     c000bee0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bebc:	83 fe 0f             	cmp    esi,0xf
c000bebf:	0f 8f d9 00 00 00    	jg     c000bf9e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bec5:	8a 86 20 f2 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0de0]
c000becb:	25 ff 00 00 00       	and    eax,0xff
c000bed0:	66 8b bc 00 a0 2d 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdd260]
c000bed8:	89 c6                	mov    esi,eax
c000beda:	66 d1 ef             	shr    di,1
c000bedd:	83 e7 01             	and    edi,0x1
c000bee0:	83 ec 08             	sub    esp,0x8
c000bee3:	a1 a0 41 02 c0       	mov    eax,ds:0xc00241a0
c000bee8:	31 db                	xor    ebx,ebx
c000beea:	50                   	push   eax
c000beeb:	68 51 db 01 c0       	push   0xc001db51
c000bef0:	e8 eb e5 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000bef5:	83 c4 10             	add    esp,0x10
c000bef8:	a1 a0 41 02 c0       	mov    eax,ds:0xc00241a0
c000befd:	85 c0                	test   eax,eax
c000beff:	7f 51                	jg     c000bf52 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bf01:	83 ec 0c             	sub    esp,0xc
c000bf04:	68 68 db 01 c0       	push   0xc001db68
c000bf09:	e8 51 42 00 00       	call   c001015f <KePanic(char const*)>
c000bf0e:	83 c4 10             	add    esp,0x10
c000bf11:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bf14:	31 d2                	xor    edx,edx
c000bf16:	89 c8                	mov    eax,ecx
c000bf18:	c1 e0 04             	shl    eax,0x4
c000bf1b:	8b 9c 90 00 16 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdea00]
c000bf22:	85 db                	test   ebx,ebx
c000bf24:	0f 84 8b 00 00 00    	je     c000bfb5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bf2a:	42                   	inc    edx
c000bf2b:	83 fa 04             	cmp    edx,0x4
c000bf2e:	75 eb                	jne    c000bf1b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bf30:	83 ec 0c             	sub    esp,0xc
c000bf33:	68 bc db 01 c0       	push   0xc001dbbc
c000bf38:	e8 22 42 00 00       	call   c001015f <KePanic(char const*)>
c000bf3d:	83 c4 10             	add    esp,0x10
c000bf40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf45:	5b                   	pop    ebx
c000bf46:	5e                   	pop    esi
c000bf47:	5f                   	pop    edi
c000bf48:	c3                   	ret    
c000bf49:	43                   	inc    ebx
c000bf4a:	39 1d a0 41 02 c0    	cmp    DWORD PTR ds:0xc00241a0,ebx
c000bf50:	7e af                	jle    c000bf01 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bf52:	83 ec 08             	sub    esp,0x8
c000bf55:	8b 04 9d c0 41 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbe40]
c000bf5c:	56                   	push   esi
c000bf5d:	50                   	push   eax
c000bf5e:	e8 25 f2 00 00       	call   c001b188 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bf63:	83 c4 10             	add    esp,0x10
c000bf66:	84 c0                	test   al,al
c000bf68:	74 df                	je     c000bf49 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bf6a:	81 e7 ff 00 00 00    	and    edi,0xff
c000bf70:	50                   	push   eax
c000bf71:	8d 46 20             	lea    eax,[esi+0x20]
c000bf74:	57                   	push   edi
c000bf75:	25 ff 00 00 00       	and    eax,0xff
c000bf7a:	6a 00                	push   0x0
c000bf7c:	50                   	push   eax
c000bf7d:	89 f0                	mov    eax,esi
c000bf7f:	6a 00                	push   0x0
c000bf81:	25 ff 00 00 00       	and    eax,0xff
c000bf86:	6a 00                	push   0x0
c000bf88:	50                   	push   eax
c000bf89:	8b 04 9d c0 41 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbe40]
c000bf90:	50                   	push   eax
c000bf91:	e8 6c f3 00 00       	call   c001b302 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bf96:	83 c4 20             	add    esp,0x20
c000bf99:	e9 73 ff ff ff       	jmp    c000bf11 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf9e:	83 ec 0c             	sub    esp,0xc
c000bfa1:	31 ff                	xor    edi,edi
c000bfa3:	68 84 db 01 c0       	push   0xc001db84
c000bfa8:	e8 b2 41 00 00       	call   c001015f <KePanic(char const*)>
c000bfad:	83 c4 10             	add    esp,0x10
c000bfb0:	e9 2b ff ff ff       	jmp    c000bee0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfb5:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bfb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bfbc:	89 14 85 00 16 02 c0 	mov    DWORD PTR [eax*4-0x3ffdea00],edx
c000bfc3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bfc7:	5b                   	pop    ebx
c000bfc8:	89 14 85 00 06 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa00],edx
c000bfcf:	89 f0                	mov    eax,esi
c000bfd1:	5e                   	pop    esi
c000bfd2:	5f                   	pop    edi
c000bfd3:	c3                   	ret    

c000bfd4 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000bfd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfd8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bfdc:	c1 e0 04             	shl    eax,0x4
c000bfdf:	8d 50 10             	lea    edx,[eax+0x10]
c000bfe2:	39 88 00 16 02 c0    	cmp    DWORD PTR [eax-0x3ffdea00],ecx
c000bfe8:	74 08                	je     c000bff2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000bfea:	83 c0 04             	add    eax,0x4
c000bfed:	39 d0                	cmp    eax,edx
c000bfef:	75 f1                	jne    c000bfe2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000bff1:	c3                   	ret    
c000bff2:	c7 80 00 16 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea00],0x0
c000bffc:	c7 80 00 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa00],0x0
c000c006:	eb e2                	jmp    c000bfea <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c008 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c008:	53                   	push   ebx
c000c009:	83 ec 08             	sub    esp,0x8
c000c00c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c010:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c015:	74 0e                	je     c000c025 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c017:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c000c01c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c023:	75 37                	jne    c000c05c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c029:	83 c0 20             	add    eax,0x20
c000c02c:	c1 e0 04             	shl    eax,0x4
c000c02f:	8d 50 10             	lea    edx,[eax+0x10]
c000c032:	39 98 00 16 02 c0    	cmp    DWORD PTR [eax-0x3ffdea00],ebx
c000c038:	74 0c                	je     c000c046 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c03a:	83 c0 04             	add    eax,0x4
c000c03d:	39 d0                	cmp    eax,edx
c000c03f:	75 f1                	jne    c000c032 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c041:	83 c4 08             	add    esp,0x8
c000c044:	5b                   	pop    ebx
c000c045:	c3                   	ret    
c000c046:	c7 80 00 16 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea00],0x0
c000c050:	c7 80 00 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa00],0x0
c000c05a:	eb de                	jmp    c000c03a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c05c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c061:	7f 12                	jg     c000c075 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c063:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c067:	31 c0                	xor    eax,eax
c000c069:	8a 81 20 f2 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0de0]
c000c06f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c073:	eb b0                	jmp    c000c025 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c075:	83 ec 0c             	sub    esp,0xc
c000c078:	68 75 db 01 c0       	push   0xc001db75
c000c07d:	e8 dd 40 00 00       	call   c001015f <KePanic(char const*)>
c000c082:	83 c4 10             	add    esp,0x10
c000c085:	eb 9e                	jmp    c000c025 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c087 <setupINTS()>:
c000c087:	31 c0                	xor    eax,eax
c000c089:	c7 80 00 16 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea00],0x0
c000c093:	c7 80 00 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa00],0x0
c000c09d:	c7 80 04 16 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde9fc],0x0
c000c0a7:	c7 80 04 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf9fc],0x0
c000c0b1:	c7 80 08 16 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde9f8],0x0
c000c0bb:	c7 80 08 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf9f8],0x0
c000c0c5:	c7 80 0c 16 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde9f4],0x0
c000c0cf:	c7 80 0c 06 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf9f4],0x0
c000c0d9:	83 c0 10             	add    eax,0x10
c000c0dc:	3d 00 10 00 00       	cmp    eax,0x1000
c000c0e1:	75 a6                	jne    c000c089 <setupINTS()+0x2>
c000c0e3:	c3                   	ret    

c000c0e4 <convertLegacyIRQNumber(int)>:
c000c0e4:	83 ec 0c             	sub    esp,0xc
c000c0e7:	8b 15 f8 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204f8
c000c0ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c0f8:	74 0f                	je     c000c109 <convertLegacyIRQNumber(int)+0x25>
c000c0fa:	83 f8 0f             	cmp    eax,0xf
c000c0fd:	7f 0e                	jg     c000c10d <convertLegacyIRQNumber(int)+0x29>
c000c0ff:	31 c9                	xor    ecx,ecx
c000c101:	8a 88 20 f2 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0de0]
c000c107:	89 c8                	mov    eax,ecx
c000c109:	83 c4 0c             	add    esp,0xc
c000c10c:	c3                   	ret    
c000c10d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c111:	83 ec 0c             	sub    esp,0xc
c000c114:	68 84 db 01 c0       	push   0xc001db84
c000c119:	e8 41 40 00 00       	call   c001015f <KePanic(char const*)>
c000c11e:	83 c4 10             	add    esp,0x10
c000c121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c125:	83 c4 0c             	add    esp,0xc
c000c128:	c3                   	ret    
c000c129:	90                   	nop

c000c12a <startGUI(void*)>:
c000c12a:	55                   	push   ebp
c000c12b:	89 e5                	mov    ebp,esp
c000c12d:	53                   	push   ebx
c000c12e:	83 ec 04             	sub    esp,0x4
c000c131:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000c136:	48                   	dec    eax
c000c137:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c000c13c:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000c141:	85 c0                	test   eax,eax
c000c143:	75 01                	jne    c000c146 <startGUI(void*)+0x1c>
c000c145:	fb                   	sti    
c000c146:	8b 1d f8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204f8
c000c14c:	83 ec 08             	sub    esp,0x8
c000c14f:	6a 01                	push   0x1
c000c151:	68 e1 db 01 c0       	push   0xc001dbe1
c000c156:	e8 44 68 00 00       	call   c001299f <Thr::loadDLL(char const*, bool)>
c000c15b:	83 c4 10             	add    esp,0x10
c000c15e:	83 ec 08             	sub    esp,0x8
c000c161:	53                   	push   ebx
c000c162:	50                   	push   eax
c000c163:	e8 68 6a 00 00       	call   c0012bd0 <Thr::executeDLL(unsigned long, void*)>
c000c168:	83 c4 10             	add    esp,0x10
c000c16b:	8b 1d f8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204f8
c000c171:	83 ec 08             	sub    esp,0x8
c000c174:	6a 01                	push   0x1
c000c176:	68 fb db 01 c0       	push   0xc001dbfb
c000c17b:	e8 1f 68 00 00       	call   c001299f <Thr::loadDLL(char const*, bool)>
c000c180:	83 c4 10             	add    esp,0x10
c000c183:	83 ec 08             	sub    esp,0x8
c000c186:	53                   	push   ebx
c000c187:	50                   	push   eax
c000c188:	e8 43 6a 00 00       	call   c0012bd0 <Thr::executeDLL(unsigned long, void*)>
c000c18d:	83 c4 10             	add    esp,0x10
c000c190:	90                   	nop
c000c191:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c194:	c9                   	leave  
c000c195:	c3                   	ret    

c000c196 <startGUIVESA(void*)>:
c000c196:	55                   	push   ebp
c000c197:	89 e5                	mov    ebp,esp
c000c199:	53                   	push   ebx
c000c19a:	83 ec 04             	sub    esp,0x4
c000c19d:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000c1a2:	48                   	dec    eax
c000c1a3:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c000c1a8:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000c1ad:	85 c0                	test   eax,eax
c000c1af:	75 01                	jne    c000c1b2 <startGUIVESA(void*)+0x1c>
c000c1b1:	fb                   	sti    
c000c1b2:	8b 1d f8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204f8
c000c1b8:	83 ec 08             	sub    esp,0x8
c000c1bb:	6a 01                	push   0x1
c000c1bd:	68 19 dc 01 c0       	push   0xc001dc19
c000c1c2:	e8 d8 67 00 00       	call   c001299f <Thr::loadDLL(char const*, bool)>
c000c1c7:	83 c4 10             	add    esp,0x10
c000c1ca:	83 ec 08             	sub    esp,0x8
c000c1cd:	53                   	push   ebx
c000c1ce:	50                   	push   eax
c000c1cf:	e8 fc 69 00 00       	call   c0012bd0 <Thr::executeDLL(unsigned long, void*)>
c000c1d4:	83 c4 10             	add    esp,0x10
c000c1d7:	8b 1d f8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204f8
c000c1dd:	83 ec 08             	sub    esp,0x8
c000c1e0:	6a 01                	push   0x1
c000c1e2:	68 fb db 01 c0       	push   0xc001dbfb
c000c1e7:	e8 b3 67 00 00       	call   c001299f <Thr::loadDLL(char const*, bool)>
c000c1ec:	83 c4 10             	add    esp,0x10
c000c1ef:	83 ec 08             	sub    esp,0x8
c000c1f2:	53                   	push   ebx
c000c1f3:	50                   	push   eax
c000c1f4:	e8 d7 69 00 00       	call   c0012bd0 <Thr::executeDLL(unsigned long, void*)>
c000c1f9:	83 c4 10             	add    esp,0x10
c000c1fc:	90                   	nop
c000c1fd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c200:	c9                   	leave  
c000c201:	c3                   	ret    

c000c202 <sendKeyToTerminal(unsigned char)>:
c000c202:	55                   	push   ebp
c000c203:	89 e5                	mov    ebp,esp
c000c205:	83 ec 28             	sub    esp,0x28
c000c208:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c20b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c20e:	8b 15 44 05 02 c0    	mov    edx,DWORD PTR ds:0xc0020544
c000c214:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c217:	25 ff 00 00 00       	and    eax,0xff
c000c21c:	83 ec 08             	sub    esp,0x8
c000c21f:	50                   	push   eax
c000c220:	52                   	push   edx
c000c221:	e8 28 c8 ff ff       	call   c0008a4e <VgaText::receiveKey(unsigned char)>
c000c226:	83 c4 10             	add    esp,0x10
c000c229:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c22d:	0f 85 8f 00 00 00    	jne    c000c2c2 <sendKeyToTerminal(unsigned char)+0xc0>
c000c233:	fa                   	cli    
c000c234:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000c239:	40                   	inc    eax
c000c23a:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c000c23f:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c000c244:	40                   	inc    eax
c000c245:	a3 a4 37 02 c0       	mov    ds:0xc00237a4,eax
c000c24a:	a1 00 26 02 c0       	mov    eax,ds:0xc0022600
c000c24f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c252:	c7 05 00 26 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022600,0x0
c000c25c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c260:	74 1f                	je     c000c281 <sendKeyToTerminal(unsigned char)+0x7f>
c000c262:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c265:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c268:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c26b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c26e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c271:	83 ec 0c             	sub    esp,0xc
c000c274:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c277:	e8 f4 75 00 00       	call   c0013870 <unblockTask(ThreadControlBlock*)>
c000c27c:	83 c4 10             	add    esp,0x10
c000c27f:	eb db                	jmp    c000c25c <sendKeyToTerminal(unsigned char)+0x5a>
c000c281:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c000c286:	48                   	dec    eax
c000c287:	a3 a4 37 02 c0       	mov    ds:0xc00237a4,eax
c000c28c:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c000c291:	85 c0                	test   eax,eax
c000c293:	75 18                	jne    c000c2ad <sendKeyToTerminal(unsigned char)+0xab>
c000c295:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c000c29a:	85 c0                	test   eax,eax
c000c29c:	74 0f                	je     c000c2ad <sendKeyToTerminal(unsigned char)+0xab>
c000c29e:	c7 05 a0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237a0,0x0
c000c2a8:	e8 ff 70 00 00       	call   c00133ac <schedule()>
c000c2ad:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000c2b2:	48                   	dec    eax
c000c2b3:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c000c2b8:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000c2bd:	85 c0                	test   eax,eax
c000c2bf:	75 01                	jne    c000c2c2 <sendKeyToTerminal(unsigned char)+0xc0>
c000c2c1:	fb                   	sti    
c000c2c2:	90                   	nop
c000c2c3:	c9                   	leave  
c000c2c4:	c3                   	ret    

c000c2c5 <sendKeyboardToken(KeyboardToken)>:
c000c2c5:	55                   	push   ebp
c000c2c6:	89 e5                	mov    ebp,esp
c000c2c8:	83 ec 18             	sub    esp,0x18
c000c2cb:	e8 df 3e 00 00       	call   c00101af <Krnl::userIOReceived()>
c000c2d0:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c2d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2d6:	25 ff ff 00 00       	and    eax,0xffff
c000c2db:	83 f2 01             	xor    edx,0x1
c000c2de:	88 90 20 26 02 c0    	mov    BYTE PTR [eax-0x3ffdd9e0],dl
c000c2e4:	a1 08 26 02 c0       	mov    eax,ds:0xc0022608
c000c2e9:	85 c0                	test   eax,eax
c000c2eb:	74 24                	je     c000c311 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c2ed:	8b 0d 08 26 02 c0    	mov    ecx,DWORD PTR ds:0xc0022608
c000c2f3:	83 ec 04             	sub    esp,0x4
c000c2f6:	68 20 26 02 c0       	push   0xc0022620
c000c2fb:	83 ec 08             	sub    esp,0x8
c000c2fe:	89 e2                	mov    edx,esp
c000c300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c303:	89 02                	mov    DWORD PTR [edx],eax
c000c305:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c308:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c30c:	ff d1                	call   ecx
c000c30e:	83 c4 10             	add    esp,0x10
c000c311:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c315:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c318:	a0 28 2a 02 c0       	mov    al,ds:0xc0022a28
c000c31d:	38 c2                	cmp    dl,al
c000c31f:	74 1e                	je     c000c33f <sendKeyboardToken(KeyboardToken)+0x7a>
c000c321:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c324:	a2 28 2a 02 c0       	mov    ds:0xc0022a28,al
c000c329:	a0 28 2a 02 c0       	mov    al,ds:0xc0022a28
c000c32e:	25 ff 00 00 00       	and    eax,0xff
c000c333:	83 ec 0c             	sub    esp,0xc
c000c336:	50                   	push   eax
c000c337:	e8 5c be ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c33c:	83 c4 10             	add    esp,0x10
c000c33f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c342:	84 c0                	test   al,al
c000c344:	0f 84 ae 00 00 00    	je     c000c3f8 <sendKeyboardToken(KeyboardToken)+0x133>
c000c34a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c34d:	66 3d 10 03          	cmp    ax,0x310
c000c351:	75 06                	jne    c000c359 <sendKeyboardToken(KeyboardToken)+0x94>
c000c353:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c359:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c35c:	66 3d 11 03          	cmp    ax,0x311
c000c360:	75 06                	jne    c000c368 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c362:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c368:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c36b:	66 3d 12 03          	cmp    ax,0x312
c000c36f:	75 06                	jne    c000c377 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c371:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c37a:	66 3d 13 03          	cmp    ax,0x313
c000c37e:	75 06                	jne    c000c386 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c380:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c386:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c389:	66 3d 14 03          	cmp    ax,0x314
c000c38d:	75 06                	jne    c000c395 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c38f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c398:	66 3d 15 03          	cmp    ax,0x315
c000c39c:	75 06                	jne    c000c3a4 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c39e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c3a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3a7:	66 3d 16 03          	cmp    ax,0x316
c000c3ab:	75 06                	jne    c000c3b3 <sendKeyboardToken(KeyboardToken)+0xee>
c000c3ad:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c3b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3b6:	66 3d 17 03          	cmp    ax,0x317
c000c3ba:	75 06                	jne    c000c3c2 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c3bc:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c3c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3c5:	66 3d 18 03          	cmp    ax,0x318
c000c3c9:	75 06                	jne    c000c3d1 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c3cb:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c3d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3d4:	66 3d 19 03          	cmp    ax,0x319
c000c3d8:	75 06                	jne    c000c3e0 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c3da:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c3e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3e3:	66 3d 1a 03          	cmp    ax,0x31a
c000c3e7:	0f 85 c9 00 00 00    	jne    c000c4b6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3ed:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c3f3:	e9 be 00 00 00       	jmp    c000c4b6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3fb:	66 3d 10 03          	cmp    ax,0x310
c000c3ff:	75 0a                	jne    c000c40b <sendKeyboardToken(KeyboardToken)+0x146>
c000c401:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c407:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c40b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c40e:	66 3d 11 03          	cmp    ax,0x311
c000c412:	75 0a                	jne    c000c41e <sendKeyboardToken(KeyboardToken)+0x159>
c000c414:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c41a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c41e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c421:	66 3d 12 03          	cmp    ax,0x312
c000c425:	75 0a                	jne    c000c431 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c427:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c42d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c434:	66 3d 13 03          	cmp    ax,0x313
c000c438:	75 0a                	jne    c000c444 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c43a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c440:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c444:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c447:	66 3d 14 03          	cmp    ax,0x314
c000c44b:	75 0a                	jne    c000c457 <sendKeyboardToken(KeyboardToken)+0x192>
c000c44d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c453:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c45a:	66 3d 15 03          	cmp    ax,0x315
c000c45e:	75 0a                	jne    c000c46a <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c460:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c466:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c46a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c46d:	66 3d 16 03          	cmp    ax,0x316
c000c471:	75 0a                	jne    c000c47d <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c473:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c479:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c47d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c480:	66 3d 17 03          	cmp    ax,0x317
c000c484:	75 0a                	jne    c000c490 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c486:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c48c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c490:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c493:	66 3d 18 03          	cmp    ax,0x318
c000c497:	75 0a                	jne    c000c4a3 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c499:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c49f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a6:	66 3d 19 03          	cmp    ax,0x319
c000c4aa:	75 0a                	jne    c000c4b6 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c4ac:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c4b2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b9:	66 3d 00 02          	cmp    ax,0x200
c000c4bd:	75 2c                	jne    c000c4eb <sendKeyboardToken(KeyboardToken)+0x226>
c000c4bf:	a0 20 2a 02 c0       	mov    al,ds:0xc0022a20
c000c4c4:	83 f0 01             	xor    eax,0x1
c000c4c7:	84 c0                	test   al,al
c000c4c9:	74 20                	je     c000c4eb <sendKeyboardToken(KeyboardToken)+0x226>
c000c4cb:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c000c4d0:	6a 01                	push   0x1
c000c4d2:	6a 00                	push   0x0
c000c4d4:	68 2a c1 00 c0       	push   0xc000c12a
c000c4d9:	50                   	push   eax
c000c4da:	e8 ad 6c 00 00       	call   c001318c <Process::createThread(void (*)(void*), void*, int)>
c000c4df:	83 c4 10             	add    esp,0x10
c000c4e2:	c6 05 20 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022a20,0x1
c000c4e9:	eb 33                	jmp    c000c51e <sendKeyboardToken(KeyboardToken)+0x259>
c000c4eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ee:	66 3d 01 02          	cmp    ax,0x201
c000c4f2:	75 2a                	jne    c000c51e <sendKeyboardToken(KeyboardToken)+0x259>
c000c4f4:	a0 20 2a 02 c0       	mov    al,ds:0xc0022a20
c000c4f9:	83 f0 01             	xor    eax,0x1
c000c4fc:	84 c0                	test   al,al
c000c4fe:	74 1e                	je     c000c51e <sendKeyboardToken(KeyboardToken)+0x259>
c000c500:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c000c505:	6a 01                	push   0x1
c000c507:	6a 00                	push   0x0
c000c509:	68 96 c1 00 c0       	push   0xc000c196
c000c50e:	50                   	push   eax
c000c50f:	e8 78 6c 00 00       	call   c001318c <Process::createThread(void (*)(void*), void*, int)>
c000c514:	83 c4 10             	add    esp,0x10
c000c517:	c6 05 20 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022a20,0x1
c000c51e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c521:	66 3d 1d 03          	cmp    ax,0x31d
c000c525:	75 06                	jne    c000c52d <sendKeyboardToken(KeyboardToken)+0x268>
c000c527:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c52d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c530:	66 3d 1c 03          	cmp    ax,0x31c
c000c534:	75 06                	jne    c000c53c <sendKeyboardToken(KeyboardToken)+0x277>
c000c536:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c53c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c53f:	66 3d 1b 03          	cmp    ax,0x31b
c000c543:	75 06                	jne    c000c54b <sendKeyboardToken(KeyboardToken)+0x286>
c000c545:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c54b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c54e:	66 3d 1e 03          	cmp    ax,0x31e
c000c552:	75 06                	jne    c000c55a <sendKeyboardToken(KeyboardToken)+0x295>
c000c554:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c55a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c55d:	66 3d 1f 03          	cmp    ax,0x31f
c000c561:	75 06                	jne    c000c569 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c563:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c56c:	66 3d 1a 03          	cmp    ax,0x31a
c000c570:	75 06                	jne    c000c578 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c572:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c578:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c57c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c57f:	83 f0 01             	xor    eax,0x1
c000c582:	84 c0                	test   al,al
c000c584:	74 7b                	je     c000c601 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c586:	a0 21 27 02 c0       	mov    al,ds:0xc0022721
c000c58b:	84 c0                	test   al,al
c000c58d:	74 43                	je     c000c5d2 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c58f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c593:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c597:	74 2d                	je     c000c5c6 <sendKeyboardToken(KeyboardToken)+0x301>
c000c599:	8b 15 24 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022a24
c000c59f:	89 d0                	mov    eax,edx
c000c5a1:	c1 e0 02             	shl    eax,0x2
c000c5a4:	01 d0                	add    eax,edx
c000c5a6:	01 c0                	add    eax,eax
c000c5a8:	a3 24 2a 02 c0       	mov    ds:0xc0022a24,eax
c000c5ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5b0:	25 ff ff 00 00       	and    eax,0xffff
c000c5b5:	8d 50 d0             	lea    edx,[eax-0x30]
c000c5b8:	a1 24 2a 02 c0       	mov    eax,ds:0xc0022a24
c000c5bd:	01 d0                	add    eax,edx
c000c5bf:	a3 24 2a 02 c0       	mov    ds:0xc0022a24,eax
c000c5c4:	eb 71                	jmp    c000c637 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5c6:	c7 05 24 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a24,0x0
c000c5d0:	eb 65                	jmp    c000c637 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5d2:	a1 24 2a 02 c0       	mov    eax,ds:0xc0022a24
c000c5d7:	85 c0                	test   eax,eax
c000c5d9:	74 1a                	je     c000c5f5 <sendKeyboardToken(KeyboardToken)+0x330>
c000c5db:	a1 24 2a 02 c0       	mov    eax,ds:0xc0022a24
c000c5e0:	25 ff 00 00 00       	and    eax,0xff
c000c5e5:	83 ec 0c             	sub    esp,0xc
c000c5e8:	50                   	push   eax
c000c5e9:	e8 14 fc ff ff       	call   c000c202 <sendKeyToTerminal(unsigned char)>
c000c5ee:	83 c4 10             	add    esp,0x10
c000c5f1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5f5:	c7 05 24 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a24,0x0
c000c5ff:	eb 36                	jmp    c000c637 <sendKeyboardToken(KeyboardToken)+0x372>
c000c601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c604:	66 3d 01 01          	cmp    ax,0x101
c000c608:	75 2d                	jne    c000c637 <sendKeyboardToken(KeyboardToken)+0x372>
c000c60a:	a1 24 2a 02 c0       	mov    eax,ds:0xc0022a24
c000c60f:	85 c0                	test   eax,eax
c000c611:	74 1a                	je     c000c62d <sendKeyboardToken(KeyboardToken)+0x368>
c000c613:	a1 24 2a 02 c0       	mov    eax,ds:0xc0022a24
c000c618:	25 ff 00 00 00       	and    eax,0xff
c000c61d:	83 ec 0c             	sub    esp,0xc
c000c620:	50                   	push   eax
c000c621:	e8 dc fb ff ff       	call   c000c202 <sendKeyToTerminal(unsigned char)>
c000c626:	83 c4 10             	add    esp,0x10
c000c629:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c62d:	c7 05 24 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a24,0x0
c000c637:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c63a:	83 f0 01             	xor    eax,0x1
c000c63d:	84 c0                	test   al,al
c000c63f:	74 4e                	je     c000c68f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c641:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c644:	83 f0 01             	xor    eax,0x1
c000c647:	84 c0                	test   al,al
c000c649:	74 44                	je     c000c68f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c64b:	a0 20 27 02 c0       	mov    al,ds:0xc0022720
c000c650:	83 f0 01             	xor    eax,0x1
c000c653:	84 c0                	test   al,al
c000c655:	74 38                	je     c000c68f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c65a:	66 83 f8 1f          	cmp    ax,0x1f
c000c65e:	76 09                	jbe    c000c669 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c663:	66 83 f8 7e          	cmp    ax,0x7e
c000c667:	76 12                	jbe    c000c67b <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c66c:	66 83 f8 0a          	cmp    ax,0xa
c000c670:	74 09                	je     c000c67b <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c675:	66 83 f8 08          	cmp    ax,0x8
c000c679:	75 14                	jne    c000c68f <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c67b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c67e:	25 ff 00 00 00       	and    eax,0xff
c000c683:	83 ec 0c             	sub    esp,0xc
c000c686:	50                   	push   eax
c000c687:	e8 76 fb ff ff       	call   c000c202 <sendKeyToTerminal(unsigned char)>
c000c68c:	83 c4 10             	add    esp,0x10
c000c68f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c692:	83 f0 01             	xor    eax,0x1
c000c695:	84 c0                	test   al,al
c000c697:	74 6c                	je     c000c705 <sendKeyboardToken(KeyboardToken)+0x440>
c000c699:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c69c:	83 f0 01             	xor    eax,0x1
c000c69f:	84 c0                	test   al,al
c000c6a1:	74 62                	je     c000c705 <sendKeyboardToken(KeyboardToken)+0x440>
c000c6a3:	a0 20 27 02 c0       	mov    al,ds:0xc0022720
c000c6a8:	84 c0                	test   al,al
c000c6aa:	74 59                	je     c000c705 <sendKeyboardToken(KeyboardToken)+0x440>
c000c6ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6af:	66 83 f8 3f          	cmp    ax,0x3f
c000c6b3:	76 50                	jbe    c000c705 <sendKeyboardToken(KeyboardToken)+0x440>
c000c6b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b8:	66 83 f8 7f          	cmp    ax,0x7f
c000c6bc:	77 47                	ja     c000c705 <sendKeyboardToken(KeyboardToken)+0x440>
c000c6be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c1:	88 c2                	mov    dl,al
c000c6c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c6:	66 83 f8 5f          	cmp    ax,0x5f
c000c6ca:	76 04                	jbe    c000c6d0 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c6cc:	b0 20                	mov    al,0x20
c000c6ce:	eb 02                	jmp    c000c6d2 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c6d0:	b0 00                	mov    al,0x0
c000c6d2:	29 c2                	sub    edx,eax
c000c6d4:	88 d0                	mov    al,dl
c000c6d6:	83 e8 40             	sub    eax,0x40
c000c6d9:	25 ff 00 00 00       	and    eax,0xff
c000c6de:	83 ec 0c             	sub    esp,0xc
c000c6e1:	50                   	push   eax
c000c6e2:	e8 1b fb ff ff       	call   c000c202 <sendKeyToTerminal(unsigned char)>
c000c6e7:	83 c4 10             	add    esp,0x10
c000c6ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ed:	66 83 f8 43          	cmp    ax,0x43
c000c6f1:	74 09                	je     c000c6fc <sendKeyboardToken(KeyboardToken)+0x437>
c000c6f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6f6:	66 83 f8 63          	cmp    ax,0x63
c000c6fa:	75 09                	jne    c000c705 <sendKeyboardToken(KeyboardToken)+0x440>
c000c6fc:	a1 44 05 02 c0       	mov    eax,ds:0xc0020544
c000c701:	c6 40 58 01          	mov    BYTE PTR [eax+0x58],0x1
c000c705:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c708:	66 3d 00 03          	cmp    ax,0x300
c000c70c:	75 0f                	jne    c000c71d <sendKeyboardToken(KeyboardToken)+0x458>
c000c70e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c711:	83 f0 01             	xor    eax,0x1
c000c714:	84 c0                	test   al,al
c000c716:	74 05                	je     c000c71d <sendKeyboardToken(KeyboardToken)+0x458>
c000c718:	e8 7c ba ff ff       	call   c0008199 <doTerminalCycle()>
c000c71d:	90                   	nop
c000c71e:	c9                   	leave  
c000c71f:	c3                   	ret    

c000c720 <clearInternalKeybuffer(VgaText*)>:
c000c720:	55                   	push   ebp
c000c721:	89 e5                	mov    ebp,esp
c000c723:	83 ec 08             	sub    esp,0x8
c000c726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c729:	05 b2 00 00 00       	add    eax,0xb2
c000c72e:	83 ec 0c             	sub    esp,0xc
c000c731:	50                   	push   eax
c000c732:	e8 09 3e ff ff       	call   c0000540 <strlen>
c000c737:	83 c4 10             	add    esp,0x10
c000c73a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c73d:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c743:	83 ec 04             	sub    esp,0x4
c000c746:	50                   	push   eax
c000c747:	6a 00                	push   0x0
c000c749:	52                   	push   edx
c000c74a:	e8 81 3d ff ff       	call   c00004d0 <memset>
c000c74f:	83 c4 10             	add    esp,0x10
c000c752:	90                   	nop
c000c753:	c9                   	leave  
c000c754:	c3                   	ret    

c000c755 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c755:	55                   	push   ebp
c000c756:	89 e5                	mov    ebp,esp
c000c758:	83 ec 18             	sub    esp,0x18
c000c75b:	a1 08 26 02 c0       	mov    eax,ds:0xc0022608
c000c760:	85 c0                	test   eax,eax
c000c762:	74 2a                	je     c000c78e <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c764:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c76a:	8b 0d 08 26 02 c0    	mov    ecx,DWORD PTR ds:0xc0022608
c000c770:	83 ec 04             	sub    esp,0x4
c000c773:	68 20 26 02 c0       	push   0xc0022620
c000c778:	83 ec 08             	sub    esp,0x8
c000c77b:	89 e2                	mov    edx,esp
c000c77d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c780:	89 02                	mov    DWORD PTR [edx],eax
c000c782:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c785:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c789:	ff d1                	call   ecx
c000c78b:	83 c4 10             	add    esp,0x10
c000c78e:	fb                   	sti    
c000c78f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c796:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c79a:	0f 84 a1 00 00 00    	je     c000c841 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000c7a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a3:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c7a9:	84 c0                	test   al,al
c000c7ab:	75 28                	jne    c000c7d5 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c7ad:	fa                   	cli    
c000c7ae:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000c7b3:	40                   	inc    eax
c000c7b4:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c000c7b9:	e8 ee 6b 00 00       	call   c00133ac <schedule()>
c000c7be:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000c7c3:	48                   	dec    eax
c000c7c4:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c000c7c9:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000c7ce:	85 c0                	test   eax,eax
c000c7d0:	75 ce                	jne    c000c7a0 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7d2:	fb                   	sti    
c000c7d3:	eb cb                	jmp    c000c7a0 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c7d8:	8d 50 01             	lea    edx,[eax+0x1]
c000c7db:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c7de:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7e1:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c7e7:	88 10                	mov    BYTE PTR [eax],dl
c000c7e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ec:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c7f2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c7f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f8:	05 b2 00 00 00       	add    eax,0xb2
c000c7fd:	83 ec 0c             	sub    esp,0xc
c000c800:	50                   	push   eax
c000c801:	e8 3a 3d ff ff       	call   c0000540 <strlen>
c000c806:	83 c4 10             	add    esp,0x10
c000c809:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c80c:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c812:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c815:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c818:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c81e:	83 ec 04             	sub    esp,0x4
c000c821:	50                   	push   eax
c000c822:	51                   	push   ecx
c000c823:	52                   	push   edx
c000c824:	e8 b7 3b ff ff       	call   c00003e0 <memmove>
c000c829:	83 c4 10             	add    esp,0x10
c000c82c:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c82f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c832:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c836:	0f 85 5a ff ff ff    	jne    c000c796 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c83c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c83f:	eb 03                	jmp    c000c844 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000c841:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c844:	c9                   	leave  
c000c845:	c3                   	ret    

c000c846 <Keyboard::Keyboard(char const*)>:
c000c846:	83 ec 0c             	sub    esp,0xc
c000c849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c84d:	83 ec 08             	sub    esp,0x8
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	50                   	push   eax
c000c855:	e8 5e f2 ff ff       	call   c000bab8 <Device::Device(char const*)>
c000c85a:	83 c4 10             	add    esp,0x10
c000c85d:	ba 3c dc 01 c0       	mov    edx,0xc001dc3c
c000c862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c866:	89 10                	mov    DWORD PTR [eax],edx
c000c868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c86c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c876:	c6 05 04 26 02 c0 01 	mov    BYTE PTR ds:0xc0022604,0x1
c000c87d:	90                   	nop
c000c87e:	83 c4 0c             	add    esp,0xc
c000c881:	c3                   	ret    

c000c882 <Keyboard::~Keyboard()>:
c000c882:	83 ec 0c             	sub    esp,0xc
c000c885:	ba 3c dc 01 c0       	mov    edx,0xc001dc3c
c000c88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c88e:	89 10                	mov    DWORD PTR [eax],edx
c000c890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c894:	83 ec 0c             	sub    esp,0xc
c000c897:	50                   	push   eax
c000c898:	e8 85 ef ff ff       	call   c000b822 <Device::~Device()>
c000c89d:	83 c4 10             	add    esp,0x10
c000c8a0:	90                   	nop
c000c8a1:	83 c4 0c             	add    esp,0xc
c000c8a4:	c3                   	ret    
c000c8a5:	90                   	nop

c000c8a6 <Keyboard::~Keyboard()>:
c000c8a6:	83 ec 0c             	sub    esp,0xc
c000c8a9:	83 ec 0c             	sub    esp,0xc
c000c8ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8b0:	e8 cd ff ff ff       	call   c000c882 <Keyboard::~Keyboard()>
c000c8b5:	83 c4 10             	add    esp,0x10
c000c8b8:	83 ec 08             	sub    esp,0x8
c000c8bb:	68 5c 01 00 00       	push   0x15c
c000c8c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8c4:	e8 21 db ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000c8c9:	83 c4 10             	add    esp,0x10
c000c8cc:	83 c4 0c             	add    esp,0xc
c000c8cf:	c3                   	ret    

c000c8d0 <LogicalDisk::close(int, int, void*)>:
c000c8d0:	83 c8 ff             	or     eax,0xffffffff
c000c8d3:	c3                   	ret    

c000c8d4 <LogicalDisk::~LogicalDisk()>:
c000c8d4:	83 ec 0c             	sub    esp,0xc
c000c8d7:	ba b4 dc 01 c0       	mov    edx,0xc001dcb4
c000c8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8e0:	89 10                	mov    DWORD PTR [eax],edx
c000c8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8e6:	83 ec 0c             	sub    esp,0xc
c000c8e9:	50                   	push   eax
c000c8ea:	e8 33 ef ff ff       	call   c000b822 <Device::~Device()>
c000c8ef:	83 c4 10             	add    esp,0x10
c000c8f2:	90                   	nop
c000c8f3:	83 c4 0c             	add    esp,0xc
c000c8f6:	c3                   	ret    
c000c8f7:	90                   	nop

c000c8f8 <LogicalDisk::~LogicalDisk()>:
c000c8f8:	83 ec 0c             	sub    esp,0xc
c000c8fb:	83 ec 0c             	sub    esp,0xc
c000c8fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c902:	e8 cd ff ff ff       	call   c000c8d4 <LogicalDisk::~LogicalDisk()>
c000c907:	83 c4 10             	add    esp,0x10
c000c90a:	83 ec 08             	sub    esp,0x8
c000c90d:	68 74 01 00 00       	push   0x174
c000c912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c916:	e8 cf da ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	83 c4 0c             	add    esp,0xc
c000c921:	c3                   	ret    

c000c922 <LogicalDisk::open(int, int, void*)>:
c000c922:	83 ec 18             	sub    esp,0x18
c000c925:	68 68 dc 01 c0       	push   0xc001dc68
c000c92a:	e8 30 38 00 00       	call   c001015f <KePanic(char const*)>
c000c92f:	83 c8 ff             	or     eax,0xffffffff
c000c932:	83 c4 1c             	add    esp,0x1c
c000c935:	c3                   	ret    

c000c936 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c936:	53                   	push   ebx
c000c937:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c93b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c93f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c943:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c949:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c94f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c955:	77 10                	ja     c000c967 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c957:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c95d:	89 d3                	mov    ebx,edx
c000c95f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c965:	72 05                	jb     c000c96c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c967:	83 c8 ff             	or     eax,0xffffffff
c000c96a:	89 c2                	mov    edx,eax
c000c96c:	5b                   	pop    ebx
c000c96d:	c3                   	ret    

c000c96e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c96e:	56                   	push   esi
c000c96f:	83 c8 ff             	or     eax,0xffffffff
c000c972:	53                   	push   ebx
c000c973:	89 c2                	mov    edx,eax
c000c975:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c979:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c97d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c981:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c987:	77 27                	ja     c000c9b0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c989:	89 d8                	mov    eax,ebx
c000c98b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000c991:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000c997:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c99c:	89 c2                	mov    edx,eax
c000c99e:	73 10                	jae    c000c9b0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c9a0:	89 c8                	mov    eax,ecx
c000c9a2:	89 da                	mov    edx,ebx
c000c9a4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000c9aa:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000c9b0:	5b                   	pop    ebx
c000c9b1:	5e                   	pop    esi
c000c9b2:	c3                   	ret    
c000c9b3:	90                   	nop

c000c9b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c9b4:	83 ec 1c             	sub    esp,0x1c
c000c9b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c9c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c9cb:	89 04 24             	mov    DWORD PTR [esp],eax
c000c9ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9da:	83 ec 08             	sub    esp,0x8
c000c9dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9e1:	50                   	push   eax
c000c9e2:	e8 d1 f0 ff ff       	call   c000bab8 <Device::Device(char const*)>
c000c9e7:	83 c4 10             	add    esp,0x10
c000c9ea:	ba b4 dc 01 c0       	mov    edx,0xc001dcb4
c000c9ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f3:	89 10                	mov    DWORD PTR [eax],edx
c000c9f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca04:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca0f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ca19:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca1d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca25:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ca2b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ca31:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca35:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ca38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ca3c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ca42:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ca48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca4c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ca50:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ca56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca5a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ca64:	90                   	nop
c000ca65:	83 c4 1c             	add    esp,0x1c
c000ca68:	c3                   	ret    
c000ca69:	90                   	nop

c000ca6a <LogicalDisk::assignDriveLetter()>:
c000ca6a:	55                   	push   ebp
c000ca6b:	57                   	push   edi
c000ca6c:	56                   	push   esi
c000ca6d:	53                   	push   ebx
c000ca6e:	83 ec 14             	sub    esp,0x14
c000ca71:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca75:	8b 3d 40 2a 02 c0    	mov    edi,DWORD PTR ds:0xc0022a40
c000ca7b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ca81:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ca85:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000ca8b:	8b 3d 44 2a 02 c0    	mov    edi,DWORD PTR ds:0xc0022a44
c000ca91:	3c 01                	cmp    al,0x1
c000ca93:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ca97:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ca9b:	19 c0                	sbb    eax,eax
c000ca9d:	83 e0 02             	and    eax,0x2
c000caa0:	83 c0 41             	add    eax,0x41
c000caa3:	0f be e8             	movsx  ebp,al
c000caa6:	3c 43                	cmp    al,0x43
c000caa8:	75 10                	jne    c000caba <LogicalDisk::assignDriveLetter()+0x50>
c000caaa:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cab1:	75 5d                	jne    c000cb10 <LogicalDisk::assignDriveLetter()+0xa6>
c000cab3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cab8:	75 56                	jne    c000cb10 <LogicalDisk::assignDriveLetter()+0xa6>
c000caba:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cabd:	ba 01 00 00 00       	mov    edx,0x1
c000cac2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cac6:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000caca:	d3 e2                	shl    edx,cl
c000cacc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cad0:	89 d7                	mov    edi,edx
c000cad2:	89 d6                	mov    esi,edx
c000cad4:	c1 ff 1f             	sar    edi,0x1f
c000cad7:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cadb:	21 f9                	and    ecx,edi
c000cadd:	09 d1                	or     ecx,edx
c000cadf:	75 2f                	jne    c000cb10 <LogicalDisk::assignDriveLetter()+0xa6>
c000cae1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cae5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cae9:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000caef:	09 f2                	or     edx,esi
c000caf1:	89 15 40 2a 02 c0    	mov    DWORD PTR ds:0xc0022a40,edx
c000caf7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cafb:	09 fa                	or     edx,edi
c000cafd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cb01:	89 15 44 2a 02 c0    	mov    DWORD PTR ds:0xc0022a44,edx
c000cb07:	89 1c bd 60 2a 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd5a0],ebx
c000cb0e:	eb 08                	jmp    c000cb18 <LogicalDisk::assignDriveLetter()+0xae>
c000cb10:	45                   	inc    ebp
c000cb11:	40                   	inc    eax
c000cb12:	3c 5b                	cmp    al,0x5b
c000cb14:	75 90                	jne    c000caa6 <LogicalDisk::assignDriveLetter()+0x3c>
c000cb16:	31 c0                	xor    eax,eax
c000cb18:	83 c4 14             	add    esp,0x14
c000cb1b:	5b                   	pop    ebx
c000cb1c:	5e                   	pop    esi
c000cb1d:	5f                   	pop    edi
c000cb1e:	5d                   	pop    ebp
c000cb1f:	c3                   	ret    

c000cb20 <LogicalDisk::mount()>:
c000cb20:	56                   	push   esi
c000cb21:	53                   	push   ebx
c000cb22:	53                   	push   ebx
c000cb23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb27:	8b 1d f4 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205f4
c000cb2d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cb37:	85 db                	test   ebx,ebx
c000cb39:	74 27                	je     c000cb62 <LogicalDisk::mount()+0x42>
c000cb3b:	51                   	push   ecx
c000cb3c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cb43:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cb45:	83 e8 41             	sub    eax,0x41
c000cb48:	50                   	push   eax
c000cb49:	56                   	push   esi
c000cb4a:	53                   	push   ebx
c000cb4b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cb4e:	83 c4 10             	add    esp,0x10
c000cb51:	84 c0                	test   al,al
c000cb53:	74 08                	je     c000cb5d <LogicalDisk::mount()+0x3d>
c000cb55:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cb5b:	eb 07                	jmp    c000cb64 <LogicalDisk::mount()+0x44>
c000cb5d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cb60:	eb d5                	jmp    c000cb37 <LogicalDisk::mount()+0x17>
c000cb62:	31 c0                	xor    eax,eax
c000cb64:	5a                   	pop    edx
c000cb65:	5b                   	pop    ebx
c000cb66:	5e                   	pop    esi
c000cb67:	c3                   	ret    

c000cb68 <LogicalDisk::unmount()>:
c000cb68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb6c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb76:	c3                   	ret    
c000cb77:	90                   	nop

c000cb78 <LogicalDisk::eject()>:
c000cb78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb7c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cb82:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb88:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cb8b:	90                   	nop

c000cb8c <LogicalDisk::unassignDriveLetter()>:
c000cb8c:	57                   	push   edi
c000cb8d:	56                   	push   esi
c000cb8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb92:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cb99:	84 c9                	test   cl,cl
c000cb9b:	75 0f                	jne    c000cbac <LogicalDisk::unassignDriveLetter()+0x20>
c000cb9d:	c7 44 24 0c 8c dc 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dc8c
c000cba5:	5e                   	pop    esi
c000cba6:	5f                   	pop    edi
c000cba7:	e9 b3 35 00 00       	jmp    c001015f <KePanic(char const*)>
c000cbac:	83 e9 41             	sub    ecx,0x41
c000cbaf:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cbb6:	b8 01 00 00 00       	mov    eax,0x1
c000cbbb:	c7 04 8d 60 2a 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd5a0],0x0
c000cbc6:	d3 e0                	shl    eax,cl
c000cbc8:	89 c7                	mov    edi,eax
c000cbca:	f7 d0                	not    eax
c000cbcc:	c1 ff 1f             	sar    edi,0x1f
c000cbcf:	21 05 40 2a 02 c0    	and    DWORD PTR ds:0xc0022a40,eax
c000cbd5:	89 fe                	mov    esi,edi
c000cbd7:	f7 d6                	not    esi
c000cbd9:	21 35 44 2a 02 c0    	and    DWORD PTR ds:0xc0022a44,esi
c000cbdf:	5e                   	pop    esi
c000cbe0:	5f                   	pop    edi
c000cbe1:	c3                   	ret    

c000cbe2 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cbe2:	57                   	push   edi
c000cbe3:	56                   	push   esi
c000cbe4:	53                   	push   ebx
c000cbe5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cbe9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbed:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cbf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cbf5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cbfb:	77 41                	ja     c000cc3e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cbfd:	99                   	cdq    
c000cbfe:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc04:	01 c8                	add    eax,ecx
c000cc06:	11 da                	adc    edx,ebx
c000cc08:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc0e:	19 d7                	sbb    edi,edx
c000cc10:	72 33                	jb     c000cc45 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cc12:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc18:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc1e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc22:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc26:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc2c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc32:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc36:	5b                   	pop    ebx
c000cc37:	5e                   	pop    esi
c000cc38:	5f                   	pop    edi
c000cc39:	e9 50 0a 00 00       	jmp    c000d68e <VCache::read(unsigned long long, int, void*)>
c000cc3e:	b8 05 00 00 00       	mov    eax,0x5
c000cc43:	eb 05                	jmp    c000cc4a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cc45:	b8 07 00 00 00       	mov    eax,0x7
c000cc4a:	5b                   	pop    ebx
c000cc4b:	5e                   	pop    esi
c000cc4c:	5f                   	pop    edi
c000cc4d:	c3                   	ret    

c000cc4e <LogicalDisk::write(unsigned long long, int, void*)>:
c000cc4e:	57                   	push   edi
c000cc4f:	56                   	push   esi
c000cc50:	53                   	push   ebx
c000cc51:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc59:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc61:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc67:	77 41                	ja     c000ccaa <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cc69:	99                   	cdq    
c000cc6a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc70:	01 c8                	add    eax,ecx
c000cc72:	11 da                	adc    edx,ebx
c000cc74:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc7a:	19 d7                	sbb    edi,edx
c000cc7c:	72 33                	jb     c000ccb1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cc7e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc84:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc8a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc8e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc92:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc98:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cca2:	5b                   	pop    ebx
c000cca3:	5e                   	pop    esi
c000cca4:	5f                   	pop    edi
c000cca5:	e9 ce 08 00 00       	jmp    c000d578 <VCache::write(unsigned long long, int, void*)>
c000ccaa:	b8 05 00 00 00       	mov    eax,0x5
c000ccaf:	eb 05                	jmp    c000ccb6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ccb1:	b8 07 00 00 00       	mov    eax,0x7
c000ccb6:	5b                   	pop    ebx
c000ccb7:	5e                   	pop    esi
c000ccb8:	5f                   	pop    edi
c000ccb9:	c3                   	ret    
c000ccba:	66 90                	xchg   ax,ax

c000ccbc <Mouse::Mouse(char const*)>:
c000ccbc:	83 ec 0c             	sub    esp,0xc
c000ccbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccc3:	83 ec 08             	sub    esp,0x8
c000ccc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccca:	50                   	push   eax
c000cccb:	e8 e8 ed ff ff       	call   c000bab8 <Device::Device(char const*)>
c000ccd0:	83 c4 10             	add    esp,0x10
c000ccd3:	ba e0 dc 01 c0       	mov    edx,0xc001dce0
c000ccd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccdc:	89 10                	mov    DWORD PTR [eax],edx
c000ccde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cce2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ccec:	90                   	nop
c000cced:	83 c4 0c             	add    esp,0xc
c000ccf0:	c3                   	ret    
c000ccf1:	90                   	nop
c000ccf2:	66 90                	xchg   ax,ax

c000ccf4 <Mouse::~Mouse()>:
c000ccf4:	83 ec 0c             	sub    esp,0xc
c000ccf7:	ba e0 dc 01 c0       	mov    edx,0xc001dce0
c000ccfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd00:	89 10                	mov    DWORD PTR [eax],edx
c000cd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	50                   	push   eax
c000cd0a:	e8 13 eb ff ff       	call   c000b822 <Device::~Device()>
c000cd0f:	83 c4 10             	add    esp,0x10
c000cd12:	90                   	nop
c000cd13:	83 c4 0c             	add    esp,0xc
c000cd16:	c3                   	ret    
c000cd17:	90                   	nop

c000cd18 <Mouse::~Mouse()>:
c000cd18:	83 ec 0c             	sub    esp,0xc
c000cd1b:	83 ec 0c             	sub    esp,0xc
c000cd1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd22:	e8 cd ff ff ff       	call   c000ccf4 <Mouse::~Mouse()>
c000cd27:	83 c4 10             	add    esp,0x10
c000cd2a:	83 ec 08             	sub    esp,0x8
c000cd2d:	68 58 01 00 00       	push   0x158
c000cd32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd36:	e8 af d6 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000cd3b:	83 c4 10             	add    esp,0x10
c000cd3e:	83 c4 0c             	add    esp,0xc
c000cd41:	c3                   	ret    

c000cd42 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cd42:	55                   	push   ebp
c000cd43:	57                   	push   edi
c000cd44:	56                   	push   esi
c000cd45:	53                   	push   ebx
c000cd46:	81 ec 28 01 00 00    	sub    esp,0x128
c000cd4c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cd53:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cd5a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cd61:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cd68:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd6c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd70:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd77:	e8 38 ee ff ff       	call   c000bbb4 <Device::getName()>
c000cd7c:	5a                   	pop    edx
c000cd7d:	59                   	pop    ecx
c000cd7e:	50                   	push   eax
c000cd7f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cd83:	55                   	push   ebp
c000cd84:	e8 77 38 ff ff       	call   c0000600 <strcpy>
c000cd89:	5b                   	pop    ebx
c000cd8a:	58                   	pop    eax
c000cd8b:	68 04 dd 01 c0       	push   0xc001dd04
c000cd90:	55                   	push   ebp
c000cd91:	e8 2a 3a ff ff       	call   c00007c0 <strcat>
c000cd96:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cd9d:	e8 17 aa ff ff       	call   c00077b9 <malloc>
c000cda2:	83 c4 0c             	add    esp,0xc
c000cda5:	89 c3                	mov    ebx,eax
c000cda7:	57                   	push   edi
c000cda8:	56                   	push   esi
c000cda9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cdad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cdb1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cdb8:	55                   	push   ebp
c000cdb9:	50                   	push   eax
c000cdba:	e8 f5 fb ff ff       	call   c000c9b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cdbf:	83 c4 14             	add    esp,0x14
c000cdc2:	53                   	push   ebx
c000cdc3:	e8 a2 fc ff ff       	call   c000ca6a <LogicalDisk::assignDriveLetter()>
c000cdc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cdcb:	e8 50 fd ff ff       	call   c000cb20 <LogicalDisk::mount()>
c000cdd0:	58                   	pop    eax
c000cdd1:	5a                   	pop    edx
c000cdd2:	53                   	push   ebx
c000cdd3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cdda:	e8 41 eb ff ff       	call   c000b920 <Device::addChild(Device*)>
c000cddf:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cde5:	5b                   	pop    ebx
c000cde6:	5e                   	pop    esi
c000cde7:	5f                   	pop    edi
c000cde8:	5d                   	pop    ebp
c000cde9:	c3                   	ret    

c000cdea <createPartitionsForDisk(PhysicalDisk*)>:
c000cdea:	55                   	push   ebp
c000cdeb:	57                   	push   edi
c000cdec:	56                   	push   esi
c000cded:	53                   	push   ebx
c000cdee:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cdf4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cdfb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ce01:	3d 00 02 00 00       	cmp    eax,0x200
c000ce06:	74 27                	je     c000ce2f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ce08:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ce0e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ce14:	83 ec 10             	sub    esp,0x10
c000ce17:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ce1b:	99                   	cdq    
c000ce1c:	c1 e6 0a             	shl    esi,0xa
c000ce1f:	52                   	push   edx
c000ce20:	89 fd                	mov    ebp,edi
c000ce22:	50                   	push   eax
c000ce23:	55                   	push   ebp
c000ce24:	56                   	push   esi
c000ce25:	e8 86 ee 00 00       	call   c001bcb0 <__udivdi3>
c000ce2a:	e9 b1 00 00 00       	jmp    c000cee0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce2f:	83 ec 0c             	sub    esp,0xc
c000ce32:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ce34:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ce38:	56                   	push   esi
c000ce39:	6a 01                	push   0x1
c000ce3b:	6a 00                	push   0x0
c000ce3d:	6a 00                	push   0x0
c000ce3f:	53                   	push   ebx
c000ce40:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ce43:	83 c4 20             	add    esp,0x20
c000ce46:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ce4e:	75 0a                	jne    c000ce5a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ce50:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ce58:	74 2c                	je     c000ce86 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ce5a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce60:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce66:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce6c:	83 ec 10             	sub    esp,0x10
c000ce6f:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce73:	89 f7                	mov    edi,esi
c000ce75:	c1 e0 0a             	shl    eax,0xa
c000ce78:	c1 ff 1f             	sar    edi,0x1f
c000ce7b:	57                   	push   edi
c000ce7c:	56                   	push   esi
c000ce7d:	52                   	push   edx
c000ce7e:	50                   	push   eax
c000ce7f:	e8 2c ee 00 00       	call   c001bcb0 <__udivdi3>
c000ce84:	eb 5a                	jmp    c000cee0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce86:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ce8d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000ce94:	83 e1 7f             	and    ecx,0x7f
c000ce97:	83 e0 7f             	and    eax,0x7f
c000ce9a:	01 c1                	add    ecx,eax
c000ce9c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cea3:	83 e0 7f             	and    eax,0x7f
c000cea6:	01 c1                	add    ecx,eax
c000cea8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ceaf:	83 e0 7f             	and    eax,0x7f
c000ceb2:	00 c1                	add    cl,al
c000ceb4:	74 41                	je     c000cef7 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000ceb6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cebc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cec2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cec8:	83 ec 10             	sub    esp,0x10
c000cecb:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cecf:	89 f7                	mov    edi,esi
c000ced1:	c1 e0 0a             	shl    eax,0xa
c000ced4:	c1 ff 1f             	sar    edi,0x1f
c000ced7:	57                   	push   edi
c000ced8:	56                   	push   esi
c000ced9:	52                   	push   edx
c000ceda:	50                   	push   eax
c000cedb:	e8 d0 ed 00 00       	call   c001bcb0 <__udivdi3>
c000cee0:	83 c4 14             	add    esp,0x14
c000cee3:	52                   	push   edx
c000cee4:	50                   	push   eax
c000cee5:	6a 00                	push   0x0
c000cee7:	6a 00                	push   0x0
c000cee9:	53                   	push   ebx
c000ceea:	e8 53 fe ff ff       	call   c000cd42 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ceef:	83 c4 20             	add    esp,0x20
c000cef2:	e9 79 01 00 00       	jmp    c000d070 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cef7:	89 f0                	mov    eax,esi
c000cef9:	31 f6                	xor    esi,esi
c000cefb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cf02:	75 02                	jne    c000cf06 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cf04:	89 f1                	mov    ecx,esi
c000cf06:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cf0d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cf14:	c1 e2 08             	shl    edx,0x8
c000cf17:	c1 e7 10             	shl    edi,0x10
c000cf1a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cf22:	09 fa                	or     edx,edi
c000cf24:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cf2c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cf33:	83 c0 10             	add    eax,0x10
c000cf36:	09 fa                	or     edx,edi
c000cf38:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cf3f:	c1 e7 18             	shl    edi,0x18
c000cf42:	09 fa                	or     edx,edi
c000cf44:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000cf4b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cf4f:	c1 e7 10             	shl    edi,0x10
c000cf52:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cf59:	c1 e2 08             	shl    edx,0x8
c000cf5c:	09 fa                	or     edx,edi
c000cf5e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cf65:	09 fa                	or     edx,edi
c000cf67:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cf6e:	c1 e7 18             	shl    edi,0x18
c000cf71:	09 fa                	or     edx,edi
c000cf73:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cf77:	46                   	inc    esi
c000cf78:	83 fe 04             	cmp    esi,0x4
c000cf7b:	0f 85 7a ff ff ff    	jne    c000cefb <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000cf81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf85:	83 f0 01             	xor    eax,0x1
c000cf88:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cf8c:	75 57                	jne    c000cfe5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf92:	83 f0 01             	xor    eax,0x1
c000cf95:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000cf99:	75 4a                	jne    c000cfe5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf9b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000cf9f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cfa7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cfaf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cfb5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cfbb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cfc1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cfc5:	89 f7                	mov    edi,esi
c000cfc7:	c1 e0 0a             	shl    eax,0xa
c000cfca:	c1 ff 1f             	sar    edi,0x1f
c000cfcd:	57                   	push   edi
c000cfce:	56                   	push   esi
c000cfcf:	52                   	push   edx
c000cfd0:	50                   	push   eax
c000cfd1:	e8 da ec 00 00       	call   c001bcb0 <__udivdi3>
c000cfd6:	83 c4 10             	add    esp,0x10
c000cfd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfdd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfe1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000cfe5:	84 c9                	test   cl,cl
c000cfe7:	74 53                	je     c000d03c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000cfe9:	0f b6 c9             	movzx  ecx,cl
c000cfec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cff4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cff8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000cffc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d000:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d004:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d008:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d00c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d010:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d014:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d018:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d01c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d020:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d024:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d028:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d02c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d030:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d034:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d038:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d03c:	31 ed                	xor    ebp,ebp
c000d03e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d042:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d046:	89 f8                	mov    eax,edi
c000d048:	09 f0                	or     eax,esi
c000d04a:	74 1e                	je     c000d06a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d04c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d050:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d054:	89 d1                	mov    ecx,edx
c000d056:	09 c1                	or     ecx,eax
c000d058:	74 10                	je     c000d06a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d05a:	83 ec 0c             	sub    esp,0xc
c000d05d:	57                   	push   edi
c000d05e:	56                   	push   esi
c000d05f:	52                   	push   edx
c000d060:	50                   	push   eax
c000d061:	53                   	push   ebx
c000d062:	e8 db fc ff ff       	call   c000cd42 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d067:	83 c4 20             	add    esp,0x20
c000d06a:	45                   	inc    ebp
c000d06b:	83 fd 04             	cmp    ebp,0x4
c000d06e:	75 ce                	jne    c000d03e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d070:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d076:	5b                   	pop    ebx
c000d077:	5e                   	pop    esi
c000d078:	5f                   	pop    edi
c000d079:	5d                   	pop    ebp
c000d07a:	c3                   	ret    
c000d07b:	90                   	nop

c000d07c <Serial::Serial(char const*)>:
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d083:	83 ec 08             	sub    esp,0x8
c000d086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d08a:	50                   	push   eax
c000d08b:	e8 28 ea ff ff       	call   c000bab8 <Device::Device(char const*)>
c000d090:	83 c4 10             	add    esp,0x10
c000d093:	ba 18 dd 01 c0       	mov    edx,0xc001dd18
c000d098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d09c:	89 10                	mov    DWORD PTR [eax],edx
c000d09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0a2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d0ac:	90                   	nop
c000d0ad:	83 c4 0c             	add    esp,0xc
c000d0b0:	c3                   	ret    
c000d0b1:	90                   	nop
c000d0b2:	66 90                	xchg   ax,ax

c000d0b4 <Serial::~Serial()>:
c000d0b4:	83 ec 0c             	sub    esp,0xc
c000d0b7:	ba 18 dd 01 c0       	mov    edx,0xc001dd18
c000d0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c0:	89 10                	mov    DWORD PTR [eax],edx
c000d0c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c6:	83 ec 0c             	sub    esp,0xc
c000d0c9:	50                   	push   eax
c000d0ca:	e8 53 e7 ff ff       	call   c000b822 <Device::~Device()>
c000d0cf:	83 c4 10             	add    esp,0x10
c000d0d2:	90                   	nop
c000d0d3:	83 c4 0c             	add    esp,0xc
c000d0d6:	c3                   	ret    
c000d0d7:	90                   	nop

c000d0d8 <Serial::~Serial()>:
c000d0d8:	83 ec 0c             	sub    esp,0xc
c000d0db:	83 ec 0c             	sub    esp,0xc
c000d0de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0e2:	e8 cd ff ff ff       	call   c000d0b4 <Serial::~Serial()>
c000d0e7:	83 c4 10             	add    esp,0x10
c000d0ea:	83 ec 08             	sub    esp,0x8
c000d0ed:	68 58 01 00 00       	push   0x158
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	e8 ef d2 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000d0fb:	83 c4 10             	add    esp,0x10
c000d0fe:	83 c4 0c             	add    esp,0xc
c000d101:	c3                   	ret    
c000d102:	66 90                	xchg   ax,ax

c000d104 <Timer::Timer(char const*)>:
c000d104:	83 ec 0c             	sub    esp,0xc
c000d107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d10b:	83 ec 08             	sub    esp,0x8
c000d10e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d112:	50                   	push   eax
c000d113:	e8 a0 e9 ff ff       	call   c000bab8 <Device::Device(char const*)>
c000d118:	83 c4 10             	add    esp,0x10
c000d11b:	ba 5c dd 01 c0       	mov    edx,0xc001dd5c
c000d120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d124:	89 10                	mov    DWORD PTR [eax],edx
c000d126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d12a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d134:	90                   	nop
c000d135:	83 c4 0c             	add    esp,0xc
c000d138:	c3                   	ret    
c000d139:	90                   	nop
c000d13a:	66 90                	xchg   ax,ax

c000d13c <Timer::~Timer()>:
c000d13c:	83 ec 0c             	sub    esp,0xc
c000d13f:	ba 5c dd 01 c0       	mov    edx,0xc001dd5c
c000d144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d148:	89 10                	mov    DWORD PTR [eax],edx
c000d14a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d14e:	83 ec 0c             	sub    esp,0xc
c000d151:	50                   	push   eax
c000d152:	e8 cb e6 ff ff       	call   c000b822 <Device::~Device()>
c000d157:	83 c4 10             	add    esp,0x10
c000d15a:	90                   	nop
c000d15b:	83 c4 0c             	add    esp,0xc
c000d15e:	c3                   	ret    
c000d15f:	90                   	nop

c000d160 <Timer::~Timer()>:
c000d160:	83 ec 0c             	sub    esp,0xc
c000d163:	83 ec 0c             	sub    esp,0xc
c000d166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d16a:	e8 cd ff ff ff       	call   c000d13c <Timer::~Timer()>
c000d16f:	83 c4 10             	add    esp,0x10
c000d172:	83 ec 08             	sub    esp,0x8
c000d175:	68 5c 01 00 00       	push   0x15c
c000d17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d17e:	e8 67 d2 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000d183:	83 c4 10             	add    esp,0x10
c000d186:	83 c4 0c             	add    esp,0xc
c000d189:	c3                   	ret    

c000d18a <Timer::read()>:
c000d18a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d18e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d194:	c3                   	ret    

c000d195 <setupTimer(int)>:
c000d195:	53                   	push   ebx
c000d196:	83 ec 14             	sub    esp,0x14
c000d199:	68 5c 01 00 00       	push   0x15c
c000d19e:	e8 16 a6 ff ff       	call   c00077b9 <malloc>
c000d1a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1a6:	89 c3                	mov    ebx,eax
c000d1a8:	e8 73 e4 00 00       	call   c001b620 <PIT::PIT()>
c000d1ad:	58                   	pop    eax
c000d1ae:	5a                   	pop    edx
c000d1af:	53                   	push   ebx
c000d1b0:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c000d1b6:	e8 65 e7 ff ff       	call   c000b920 <Device::addChild(Device*)>
c000d1bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d1bd:	6a 00                	push   0x0
c000d1bf:	6a 00                	push   0x0
c000d1c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d1c5:	53                   	push   ebx
c000d1c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d1c9:	89 d8                	mov    eax,ebx
c000d1cb:	83 c4 28             	add    esp,0x28
c000d1ce:	5b                   	pop    ebx
c000d1cf:	c3                   	ret    

c000d1d0 <timerHandler(unsigned int)>:
c000d1d0:	56                   	push   esi
c000d1d1:	53                   	push   ebx
c000d1d2:	51                   	push   ecx
c000d1d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1d7:	01 05 cc 2a 02 c0    	add    DWORD PTR ds:0xc0022acc,eax
c000d1dd:	80 3d fd 04 02 c0 00 	cmp    BYTE PTR ds:0xc00204fd,0x0
c000d1e4:	0f 84 4a 01 00 00    	je     c000d334 <timerHandler(unsigned int)+0x164>
c000d1ea:	fa                   	cli    
c000d1eb:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c000d1f1:	83 ec 0c             	sub    esp,0xc
c000d1f4:	ff 05 a4 37 02 c0    	inc    DWORD PTR ds:0xc00237a4
c000d1fa:	68 b8 37 02 c0       	push   0xc00237b8
c000d1ff:	e8 7c f0 00 00       	call   c001c280 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d204:	83 c4 10             	add    esp,0x10
c000d207:	84 c0                	test   al,al
c000d209:	0f 85 a1 00 00 00    	jne    c000d2b0 <timerHandler(unsigned int)+0xe0>
c000d20f:	83 ec 0c             	sub    esp,0xc
c000d212:	68 b8 37 02 c0       	push   0xc00237b8
c000d217:	e8 80 f0 00 00       	call   c001c29c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d21c:	83 c4 10             	add    esp,0x10
c000d21f:	89 c6                	mov    esi,eax
c000d221:	8d 76 00             	lea    esi,[esi+0x0]
c000d224:	83 ec 0c             	sub    esp,0xc
c000d227:	68 b8 37 02 c0       	push   0xc00237b8
c000d22c:	e8 6b f0 00 00       	call   c001c29c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d231:	c7 04 24 b8 37 02 c0 	mov    DWORD PTR [esp],0xc00237b8
c000d238:	89 c3                	mov    ebx,eax
c000d23a:	e8 65 f0 00 00       	call   c001c2a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d23f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d242:	83 c4 10             	add    esp,0x10
c000d245:	3b 05 cc 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022acc
c000d24b:	77 23                	ja     c000d270 <timerHandler(unsigned int)+0xa0>
c000d24d:	83 ec 0c             	sub    esp,0xc
c000d250:	53                   	push   ebx
c000d251:	e8 1a 66 00 00       	call   c0013870 <unblockTask(ThreadControlBlock*)>
c000d256:	83 c4 10             	add    esp,0x10
c000d259:	39 de                	cmp    esi,ebx
c000d25b:	75 27                	jne    c000d284 <timerHandler(unsigned int)+0xb4>
c000d25d:	83 ec 0c             	sub    esp,0xc
c000d260:	68 b8 37 02 c0       	push   0xc00237b8
c000d265:	e8 32 f0 00 00       	call   c001c29c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d26a:	89 c6                	mov    esi,eax
c000d26c:	eb 12                	jmp    c000d280 <timerHandler(unsigned int)+0xb0>
c000d26e:	66 90                	xchg   ax,ax
c000d270:	52                   	push   edx
c000d271:	52                   	push   edx
c000d272:	53                   	push   ebx
c000d273:	68 b8 37 02 c0       	push   0xc00237b8
c000d278:	e8 df f0 00 00       	call   c001c35c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d27d:	8d 76 00             	lea    esi,[esi+0x0]
c000d280:	83 c4 10             	add    esp,0x10
c000d283:	90                   	nop
c000d284:	83 ec 0c             	sub    esp,0xc
c000d287:	68 b8 37 02 c0       	push   0xc00237b8
c000d28c:	e8 ef ef 00 00       	call   c001c280 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d291:	83 c4 10             	add    esp,0x10
c000d294:	84 c0                	test   al,al
c000d296:	75 18                	jne    c000d2b0 <timerHandler(unsigned int)+0xe0>
c000d298:	83 ec 0c             	sub    esp,0xc
c000d29b:	68 b8 37 02 c0       	push   0xc00237b8
c000d2a0:	e8 f7 ef 00 00       	call   c001c29c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2a5:	83 c4 10             	add    esp,0x10
c000d2a8:	39 f0                	cmp    eax,esi
c000d2aa:	0f 85 74 ff ff ff    	jne    c000d224 <timerHandler(unsigned int)+0x54>
c000d2b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d2b5:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d2b9:	74 41                	je     c000d2fc <timerHandler(unsigned int)+0x12c>
c000d2bb:	80 3d fc 04 02 c0 00 	cmp    BYTE PTR ds:0xc00204fc,0x0
c000d2c2:	74 38                	je     c000d2fc <timerHandler(unsigned int)+0x12c>
c000d2c4:	fa                   	cli    
c000d2c5:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c000d2cb:	a1 cc 2a 02 c0       	mov    eax,ds:0xc0022acc
c000d2d0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2d6:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d2d9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2df:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d2e2:	72 08                	jb     c000d2ec <timerHandler(unsigned int)+0x11c>
c000d2e4:	e8 c3 60 00 00       	call   c00133ac <schedule()>
c000d2e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d2ec:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000d2f1:	48                   	dec    eax
c000d2f2:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c000d2f7:	75 03                	jne    c000d2fc <timerHandler(unsigned int)+0x12c>
c000d2f9:	fb                   	sti    
c000d2fa:	66 90                	xchg   ax,ax
c000d2fc:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c000d301:	48                   	dec    eax
c000d302:	a3 a4 37 02 c0       	mov    ds:0xc00237a4,eax
c000d307:	75 1b                	jne    c000d324 <timerHandler(unsigned int)+0x154>
c000d309:	83 3d a0 37 02 c0 00 	cmp    DWORD PTR ds:0xc00237a0,0x0
c000d310:	74 12                	je     c000d324 <timerHandler(unsigned int)+0x154>
c000d312:	c7 05 a0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237a0,0x0
c000d31c:	e8 8b 60 00 00       	call   c00133ac <schedule()>
c000d321:	8d 76 00             	lea    esi,[esi+0x0]
c000d324:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c000d329:	48                   	dec    eax
c000d32a:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c000d32f:	75 03                	jne    c000d334 <timerHandler(unsigned int)+0x164>
c000d331:	fb                   	sti    
c000d332:	66 90                	xchg   ax,ax
c000d334:	58                   	pop    eax
c000d335:	5b                   	pop    ebx
c000d336:	5e                   	pop    esi
c000d337:	c3                   	ret    

c000d338 <VCache::VCache(PhysicalDisk*)>:
c000d338:	53                   	push   ebx
c000d339:	83 ec 18             	sub    esp,0x18
c000d33c:	ba 8c dd 01 c0       	mov    edx,0xc001dd8c
c000d341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d345:	89 10                	mov    DWORD PTR [eax],edx
c000d347:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d34b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d352:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d356:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d35d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d361:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d368:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d36f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d373:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d37a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d385:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d38c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d390:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d398:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d39f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d3a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3aa:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d3ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3b2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d3b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ba:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d3be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3c2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d3c9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d3d1:	83 ec 0c             	sub    esp,0xc
c000d3d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3d8:	e8 dc a3 ff ff       	call   c00077b9 <malloc>
c000d3dd:	83 c4 10             	add    esp,0x10
c000d3e0:	89 c3                	mov    ebx,eax
c000d3e2:	83 ec 0c             	sub    esp,0xc
c000d3e5:	53                   	push   ebx
c000d3e6:	e8 8d 5d 00 00       	call   c0013178 <Mutex::Mutex()>
c000d3eb:	83 c4 10             	add    esp,0x10
c000d3ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3f2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d3f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3f9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d3fd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d400:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d404:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d40b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d40f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d415:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d419:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d41c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d420:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d426:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d42c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d430:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d433:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d436:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d43a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d43e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d442:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d448:	05 00 01 00 00       	add    eax,0x100
c000d44d:	c1 e0 04             	shl    eax,0x4
c000d450:	83 ec 0c             	sub    esp,0xc
c000d453:	50                   	push   eax
c000d454:	e8 60 a3 ff ff       	call   c00077b9 <malloc>
c000d459:	83 c4 10             	add    esp,0x10
c000d45c:	89 c2                	mov    edx,eax
c000d45e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d462:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d465:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d469:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d470:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d474:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d478:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d47c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d482:	c1 e0 06             	shl    eax,0x6
c000d485:	83 ec 0c             	sub    esp,0xc
c000d488:	50                   	push   eax
c000d489:	e8 2b a3 ff ff       	call   c00077b9 <malloc>
c000d48e:	83 c4 10             	add    esp,0x10
c000d491:	89 c2                	mov    edx,eax
c000d493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d497:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d49a:	90                   	nop
c000d49b:	83 c4 18             	add    esp,0x18
c000d49e:	5b                   	pop    ebx
c000d49f:	c3                   	ret    

c000d4a0 <VCache::invalidateReadBuffer()>:
c000d4a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d4a4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d4aa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d4ae:	c3                   	ret    
c000d4af:	90                   	nop

c000d4b0 <VCache::writeWriteBuffer()>:
c000d4b0:	53                   	push   ebx
c000d4b1:	83 ec 08             	sub    esp,0x8
c000d4b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4b8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d4bc:	74 1e                	je     c000d4dc <VCache::writeWriteBuffer()+0x2c>
c000d4be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d4c1:	83 ec 0c             	sub    esp,0xc
c000d4c4:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4c6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d4c9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d4cc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d4cf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4d2:	50                   	push   eax
c000d4d3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d4d6:	83 c4 20             	add    esp,0x20
c000d4d9:	8d 76 00             	lea    esi,[esi+0x0]
c000d4dc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d4e3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d4ea:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d4ee:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d4f5:	83 c4 08             	add    esp,0x8
c000d4f8:	5b                   	pop    ebx
c000d4f9:	c3                   	ret    
c000d4fa:	66 90                	xchg   ax,ax

c000d4fc <VCache::~VCache()>:
c000d4fc:	83 ec 0c             	sub    esp,0xc
c000d4ff:	ba 8c dd 01 c0       	mov    edx,0xc001dd8c
c000d504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d508:	89 10                	mov    DWORD PTR [eax],edx
c000d50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d50e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d511:	84 c0                	test   al,al
c000d513:	74 0f                	je     c000d524 <VCache::~VCache()+0x28>
c000d515:	83 ec 0c             	sub    esp,0xc
c000d518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d51c:	e8 8f ff ff ff       	call   c000d4b0 <VCache::writeWriteBuffer()>
c000d521:	83 c4 10             	add    esp,0x10
c000d524:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d528:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d52b:	83 ec 0c             	sub    esp,0xc
c000d52e:	50                   	push   eax
c000d52f:	e8 95 a2 ff ff       	call   c00077c9 <free>
c000d534:	83 c4 10             	add    esp,0x10
c000d537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d53b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d53e:	83 ec 0c             	sub    esp,0xc
c000d541:	50                   	push   eax
c000d542:	e8 82 a2 ff ff       	call   c00077c9 <free>
c000d547:	83 c4 10             	add    esp,0x10
c000d54a:	90                   	nop
c000d54b:	83 c4 0c             	add    esp,0xc
c000d54e:	c3                   	ret    
c000d54f:	90                   	nop

c000d550 <VCache::~VCache()>:
c000d550:	83 ec 0c             	sub    esp,0xc
c000d553:	83 ec 0c             	sub    esp,0xc
c000d556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d55a:	e8 9d ff ff ff       	call   c000d4fc <VCache::~VCache()>
c000d55f:	83 c4 10             	add    esp,0x10
c000d562:	83 ec 08             	sub    esp,0x8
c000d565:	6a 44                	push   0x44
c000d567:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56b:	e8 7a ce ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	83 c4 0c             	add    esp,0xc
c000d576:	c3                   	ret    
c000d577:	90                   	nop

c000d578 <VCache::write(unsigned long long, int, void*)>:
c000d578:	55                   	push   ebp
c000d579:	57                   	push   edi
c000d57a:	56                   	push   esi
c000d57b:	53                   	push   ebx
c000d57c:	83 ec 1c             	sub    esp,0x1c
c000d57f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d583:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d587:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d58b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d58f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d593:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d597:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d59b:	31 c0                	xor    eax,eax
c000d59d:	8d 76 00             	lea    esi,[esi+0x0]
c000d5a0:	39 e8                	cmp    eax,ebp
c000d5a2:	7d 18                	jge    c000d5bc <VCache::write(unsigned long long, int, void*)+0x44>
c000d5a4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d5a7:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d5ad:	0f af c8             	imul   ecx,eax
c000d5b0:	89 ca                	mov    edx,ecx
c000d5b2:	01 f2                	add    edx,esi
c000d5b4:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d5b6:	40                   	inc    eax
c000d5b7:	eb e7                	jmp    c000d5a0 <VCache::write(unsigned long long, int, void*)+0x28>
c000d5b9:	8d 76 00             	lea    esi,[esi+0x0]
c000d5bc:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d5c0:	74 0a                	je     c000d5cc <VCache::write(unsigned long long, int, void*)+0x54>
c000d5c2:	53                   	push   ebx
c000d5c3:	e8 d8 fe ff ff       	call   c000d4a0 <VCache::invalidateReadBuffer()>
c000d5c8:	58                   	pop    eax
c000d5c9:	8d 76 00             	lea    esi,[esi+0x0]
c000d5cc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d5d0:	74 5a                	je     c000d62c <VCache::write(unsigned long long, int, void*)+0xb4>
c000d5d2:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d5d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d5d9:	89 f8                	mov    eax,edi
c000d5db:	99                   	cdq    
c000d5dc:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d5df:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d5e2:	31 c1                	xor    ecx,eax
c000d5e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5e8:	31 d0                	xor    eax,edx
c000d5ea:	09 c1                	or     ecx,eax
c000d5ec:	75 32                	jne    c000d620 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d5ee:	83 fd 01             	cmp    ebp,0x1
c000d5f1:	75 2d                	jne    c000d620 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d5f3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d5f6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d5fc:	0f af f9             	imul   edi,ecx
c000d5ff:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d602:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d604:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d607:	40                   	inc    eax
c000d608:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d60b:	83 f8 40             	cmp    eax,0x40
c000d60e:	75 74                	jne    c000d684 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d610:	83 ec 0c             	sub    esp,0xc
c000d613:	53                   	push   ebx
c000d614:	e8 97 fe ff ff       	call   c000d4b0 <VCache::writeWriteBuffer()>
c000d619:	83 c4 10             	add    esp,0x10
c000d61c:	eb 66                	jmp    c000d684 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d61e:	66 90                	xchg   ax,ax
c000d620:	83 ec 0c             	sub    esp,0xc
c000d623:	53                   	push   ebx
c000d624:	e8 87 fe ff ff       	call   c000d4b0 <VCache::writeWriteBuffer()>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d62f:	83 fd 3f             	cmp    ebp,0x3f
c000d632:	7f 24                	jg     c000d658 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d634:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d638:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d63b:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d63e:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d642:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d646:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d649:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d64c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d652:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d654:	eb 2e                	jmp    c000d684 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d656:	66 90                	xchg   ax,ax
c000d658:	8b 10                	mov    edx,DWORD PTR [eax]
c000d65a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d65e:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d662:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d666:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d66a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d66e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d672:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d676:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d679:	83 c4 1c             	add    esp,0x1c
c000d67c:	5b                   	pop    ebx
c000d67d:	5e                   	pop    esi
c000d67e:	5f                   	pop    edi
c000d67f:	5d                   	pop    ebp
c000d680:	ff e0                	jmp    eax
c000d682:	66 90                	xchg   ax,ax
c000d684:	83 c4 1c             	add    esp,0x1c
c000d687:	31 c0                	xor    eax,eax
c000d689:	5b                   	pop    ebx
c000d68a:	5e                   	pop    esi
c000d68b:	5f                   	pop    edi
c000d68c:	5d                   	pop    ebp
c000d68d:	c3                   	ret    

c000d68e <VCache::read(unsigned long long, int, void*)>:
c000d68e:	55                   	push   ebp
c000d68f:	57                   	push   edi
c000d690:	56                   	push   esi
c000d691:	53                   	push   ebx
c000d692:	83 ec 1c             	sub    esp,0x1c
c000d695:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d699:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d69d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d6a1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d6a5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d6a9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d6ad:	31 c0                	xor    eax,eax
c000d6af:	90                   	nop
c000d6b0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d6b4:	7d 16                	jge    c000d6cc <VCache::read(unsigned long long, int, void*)+0x3e>
c000d6b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d6b9:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d6bf:	0f af c8             	imul   ecx,eax
c000d6c2:	89 ca                	mov    edx,ecx
c000d6c4:	01 f2                	add    edx,esi
c000d6c6:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000d6c8:	40                   	inc    eax
c000d6c9:	eb e5                	jmp    c000d6b0 <VCache::read(unsigned long long, int, void*)+0x22>
c000d6cb:	90                   	nop
c000d6cc:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d6d0:	74 0e                	je     c000d6e0 <VCache::read(unsigned long long, int, void*)+0x52>
c000d6d2:	83 ec 0c             	sub    esp,0xc
c000d6d5:	53                   	push   ebx
c000d6d6:	e8 d5 fd ff ff       	call   c000d4b0 <VCache::writeWriteBuffer()>
c000d6db:	83 c4 10             	add    esp,0x10
c000d6de:	66 90                	xchg   ax,ax
c000d6e0:	83 ec 0c             	sub    esp,0xc
c000d6e3:	53                   	push   ebx
c000d6e4:	e8 b7 fd ff ff       	call   c000d4a0 <VCache::invalidateReadBuffer()>
c000d6e9:	83 c4 0c             	add    esp,0xc
c000d6ec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6ef:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d6f5:	6a 00                	push   0x0
c000d6f7:	56                   	push   esi
c000d6f8:	e8 d3 2d ff ff       	call   c00004d0 <memset>
c000d6fd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d700:	8b 10                	mov    edx,DWORD PTR [eax]
c000d702:	89 74 24 50          	mov    DWORD PTR [esp+0x50],esi
c000d706:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000d70a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d70e:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000d712:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000d716:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d71a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d71d:	83 c4 2c             	add    esp,0x2c
c000d720:	5b                   	pop    ebx
c000d721:	5e                   	pop    esi
c000d722:	5f                   	pop    edi
c000d723:	5d                   	pop    ebp
c000d724:	ff e0                	jmp    eax

c000d726 <Video::putrect(int, int, int, int, unsigned int)>:
c000d726:	55                   	push   ebp
c000d727:	57                   	push   edi
c000d728:	56                   	push   esi
c000d729:	53                   	push   ebx
c000d72a:	83 ec 1c             	sub    esp,0x1c
c000d72d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d731:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d735:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d739:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d73d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d741:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d745:	01 df                	add    edi,ebx
c000d747:	39 fb                	cmp    ebx,edi
c000d749:	7d 1f                	jge    c000d76a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d74b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d74f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d753:	7d 12                	jge    c000d767 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d755:	8b 16                	mov    edx,DWORD PTR [esi]
c000d757:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d75b:	53                   	push   ebx
c000d75c:	55                   	push   ebp
c000d75d:	45                   	inc    ebp
c000d75e:	56                   	push   esi
c000d75f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d762:	83 c4 10             	add    esp,0x10
c000d765:	eb e8                	jmp    c000d74f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d767:	43                   	inc    ebx
c000d768:	eb dd                	jmp    c000d747 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d76a:	83 c4 1c             	add    esp,0x1c
c000d76d:	5b                   	pop    ebx
c000d76e:	5e                   	pop    esi
c000d76f:	5f                   	pop    edi
c000d770:	5d                   	pop    ebp
c000d771:	c3                   	ret    

c000d772 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d772:	55                   	push   ebp
c000d773:	57                   	push   edi
c000d774:	31 ff                	xor    edi,edi
c000d776:	56                   	push   esi
c000d777:	53                   	push   ebx
c000d778:	83 ec 1c             	sub    esp,0x1c
c000d77b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d77f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d783:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d78a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d78f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d793:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d797:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d79b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d79e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d7a2:	01 f9                	add    ecx,edi
c000d7a4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d7a8:	7d 2f                	jge    c000d7d9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d7aa:	31 f6                	xor    esi,esi
c000d7ac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d7b0:	01 f2                	add    edx,esi
c000d7b2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d7b6:	7d 1a                	jge    c000d7d2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d7b8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d7bb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d7be:	46                   	inc    esi
c000d7bf:	51                   	push   ecx
c000d7c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d7c4:	52                   	push   edx
c000d7c5:	55                   	push   ebp
c000d7c6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d7c9:	83 c4 10             	add    esp,0x10
c000d7cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7d0:	eb da                	jmp    c000d7ac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d7d2:	47                   	inc    edi
c000d7d3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d7d7:	eb c5                	jmp    c000d79e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d7d9:	83 c4 1c             	add    esp,0x1c
c000d7dc:	5b                   	pop    ebx
c000d7dd:	5e                   	pop    esi
c000d7de:	5f                   	pop    edi
c000d7df:	5d                   	pop    ebp
c000d7e0:	c3                   	ret    
c000d7e1:	90                   	nop

c000d7e2 <Video::blit(unsigned int*, int, int, int, int)>:
c000d7e2:	55                   	push   ebp
c000d7e3:	57                   	push   edi
c000d7e4:	56                   	push   esi
c000d7e5:	53                   	push   ebx
c000d7e6:	83 ec 1c             	sub    esp,0x1c
c000d7e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d7ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d7f1:	85 c0                	test   eax,eax
c000d7f3:	79 02                	jns    c000d7f7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d7f5:	31 c0                	xor    eax,eax
c000d7f7:	c1 e0 02             	shl    eax,0x2
c000d7fa:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d7fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d802:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d806:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d80a:	39 d8                	cmp    eax,ebx
c000d80c:	7e 49                	jle    c000d857 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d80e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d814:	7c 41                	jl     c000d857 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d816:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d81a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d81e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d822:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d826:	39 f9                	cmp    ecx,edi
c000d828:	7e 22                	jle    c000d84c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d82a:	83 c5 04             	add    ebp,0x4
c000d82d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d833:	7c 14                	jl     c000d849 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d835:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d837:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d83a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d83e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d842:	56                   	push   esi
c000d843:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d846:	83 c4 10             	add    esp,0x10
c000d849:	47                   	inc    edi
c000d84a:	eb d2                	jmp    c000d81e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d84c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d850:	43                   	inc    ebx
c000d851:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d855:	eb ab                	jmp    c000d802 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d857:	83 c4 1c             	add    esp,0x1c
c000d85a:	5b                   	pop    ebx
c000d85b:	5e                   	pop    esi
c000d85c:	5f                   	pop    edi
c000d85d:	5d                   	pop    ebp
c000d85e:	c3                   	ret    
c000d85f:	90                   	nop

c000d860 <Video::clearScreen(unsigned int)>:
c000d860:	57                   	push   edi
c000d861:	56                   	push   esi
c000d862:	53                   	push   ebx
c000d863:	31 db                	xor    ebx,ebx
c000d865:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d869:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d86f:	7e 1f                	jle    c000d890 <Video::clearScreen(unsigned int)+0x30>
c000d871:	31 ff                	xor    edi,edi
c000d873:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d879:	7e 12                	jle    c000d88d <Video::clearScreen(unsigned int)+0x2d>
c000d87b:	8b 06                	mov    eax,DWORD PTR [esi]
c000d87d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d881:	53                   	push   ebx
c000d882:	57                   	push   edi
c000d883:	47                   	inc    edi
c000d884:	56                   	push   esi
c000d885:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d888:	83 c4 10             	add    esp,0x10
c000d88b:	eb e6                	jmp    c000d873 <Video::clearScreen(unsigned int)+0x13>
c000d88d:	43                   	inc    ebx
c000d88e:	eb d9                	jmp    c000d869 <Video::clearScreen(unsigned int)+0x9>
c000d890:	5b                   	pop    ebx
c000d891:	5e                   	pop    esi
c000d892:	5f                   	pop    edi
c000d893:	c3                   	ret    

c000d894 <Video::putpixel(int, int, unsigned int)>:
c000d894:	c7 44 24 04 94 dd 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dd94
c000d89c:	e9 be 28 00 00       	jmp    c001015f <KePanic(char const*)>
c000d8a1:	90                   	nop

c000d8a2 <Video::Video(char const*)>:
c000d8a2:	83 ec 0c             	sub    esp,0xc
c000d8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a9:	83 ec 08             	sub    esp,0x8
c000d8ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8b0:	50                   	push   eax
c000d8b1:	e8 02 e2 ff ff       	call   c000bab8 <Device::Device(char const*)>
c000d8b6:	83 c4 10             	add    esp,0x10
c000d8b9:	ba 04 de 01 c0       	mov    edx,0xc001de04
c000d8be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c2:	89 10                	mov    DWORD PTR [eax],edx
c000d8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d8d2:	90                   	nop
c000d8d3:	83 c4 0c             	add    esp,0xc
c000d8d6:	c3                   	ret    
c000d8d7:	90                   	nop

c000d8d8 <Video::~Video()>:
c000d8d8:	83 ec 0c             	sub    esp,0xc
c000d8db:	ba 04 de 01 c0       	mov    edx,0xc001de04
c000d8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8e4:	89 10                	mov    DWORD PTR [eax],edx
c000d8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8ea:	83 ec 0c             	sub    esp,0xc
c000d8ed:	50                   	push   eax
c000d8ee:	e8 2f df ff ff       	call   c000b822 <Device::~Device()>
c000d8f3:	83 c4 10             	add    esp,0x10
c000d8f6:	90                   	nop
c000d8f7:	83 c4 0c             	add    esp,0xc
c000d8fa:	c3                   	ret    
c000d8fb:	90                   	nop

c000d8fc <Video::~Video()>:
c000d8fc:	83 ec 0c             	sub    esp,0xc
c000d8ff:	83 ec 0c             	sub    esp,0xc
c000d902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d906:	e8 cd ff ff ff       	call   c000d8d8 <Video::~Video()>
c000d90b:	83 c4 10             	add    esp,0x10
c000d90e:	83 ec 08             	sub    esp,0x8
c000d911:	68 64 01 00 00       	push   0x164
c000d916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d91a:	e8 cb ca ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000d91f:	83 c4 10             	add    esp,0x10
c000d922:	83 c4 0c             	add    esp,0xc
c000d925:	c3                   	ret    

c000d926 <Video::isMonochrome()>:
c000d926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d92a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d930:	c3                   	ret    
c000d931:	90                   	nop

c000d932 <Video::getWidth()>:
c000d932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d936:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d93c:	c3                   	ret    
c000d93d:	90                   	nop

c000d93e <Video::getHeight()>:
c000d93e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d942:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d948:	c3                   	ret    
c000d949:	90                   	nop

c000d94a <Video::drawCursor(int, int, unsigned char*, int)>:
c000d94a:	55                   	push   ebp
c000d94b:	57                   	push   edi
c000d94c:	56                   	push   esi
c000d94d:	53                   	push   ebx
c000d94e:	83 ec 2c             	sub    esp,0x2c
c000d951:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d955:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d959:	83 f8 01             	cmp    eax,0x1
c000d95c:	19 c9                	sbb    ecx,ecx
c000d95e:	31 db                	xor    ebx,ebx
c000d960:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d964:	89 cd                	mov    ebp,ecx
c000d966:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d96e:	f7 d5                	not    ebp
c000d970:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d976:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d97a:	01 d8                	add    eax,ebx
c000d97c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d980:	56                   	push   esi
c000d981:	e8 b8 ff ff ff       	call   c000d93e <Video::getHeight()>
c000d986:	59                   	pop    ecx
c000d987:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d98b:	7e 70                	jle    c000d9fd <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d98d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d991:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d995:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d998:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d99c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d9a0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d9a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9ab:	89 f8                	mov    eax,edi
c000d9ad:	83 c0 20             	add    eax,0x20
c000d9b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d9b4:	56                   	push   esi
c000d9b5:	e8 78 ff ff ff       	call   c000d932 <Video::getWidth()>
c000d9ba:	5a                   	pop    edx
c000d9bb:	39 c7                	cmp    edi,eax
c000d9bd:	7d 34                	jge    c000d9f3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000d9bf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000d9c4:	74 05                	je     c000d9cb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000d9c6:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9c8:	55                   	push   ebp
c000d9c9:	eb 0d                	jmp    c000d9d8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000d9cb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000d9d0:	74 12                	je     c000d9e4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000d9d2:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9d8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d9dc:	57                   	push   edi
c000d9dd:	56                   	push   esi
c000d9de:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d9e1:	83 c4 10             	add    esp,0x10
c000d9e4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000d9e8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000d9ec:	47                   	inc    edi
c000d9ed:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000d9f1:	75 c1                	jne    c000d9b4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000d9f3:	43                   	inc    ebx
c000d9f4:	83 fb 20             	cmp    ebx,0x20
c000d9f7:	0f 85 79 ff ff ff    	jne    c000d976 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000d9fd:	83 c4 2c             	add    esp,0x2c
c000da00:	5b                   	pop    ebx
c000da01:	5e                   	pop    esi
c000da02:	5f                   	pop    edi
c000da03:	5d                   	pop    ebp
c000da04:	c3                   	ret    
c000da05:	90                   	nop

c000da06 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000da06:	55                   	push   ebp
c000da07:	57                   	push   edi
c000da08:	56                   	push   esi
c000da09:	53                   	push   ebx
c000da0a:	83 ec 28             	sub    esp,0x28
c000da0d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000da11:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000da15:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000da19:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000da1d:	c1 e6 08             	shl    esi,0x8
c000da20:	01 c6                	add    esi,eax
c000da22:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000da26:	c1 e0 08             	shl    eax,0x8
c000da29:	01 d0                	add    eax,edx
c000da2b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da33:	0f af c6             	imul   eax,esi
c000da36:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000da3d:	50                   	push   eax
c000da3e:	e8 76 9d ff ff       	call   c00077b9 <malloc>
c000da43:	83 c4 10             	add    esp,0x10
c000da46:	89 c7                	mov    edi,eax
c000da48:	85 c0                	test   eax,eax
c000da4a:	75 10                	jne    c000da5c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000da4c:	83 ec 0c             	sub    esp,0xc
c000da4f:	68 b5 dd 01 c0       	push   0xc001ddb5
c000da54:	e8 06 27 00 00       	call   c001015f <KePanic(char const*)>
c000da59:	83 c4 10             	add    esp,0x10
c000da5c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000da5f:	ba 12 00 00 00       	mov    edx,0x12
c000da64:	84 c0                	test   al,al
c000da66:	74 11                	je     c000da79 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000da68:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000da6c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000da70:	c1 fa 03             	sar    edx,0x3
c000da73:	0f af d1             	imul   edx,ecx
c000da76:	83 c2 12             	add    edx,0x12
c000da79:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000da7d:	74 04                	je     c000da83 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000da7f:	85 f6                	test   esi,esi
c000da81:	75 12                	jne    c000da95 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000da83:	83 ec 0c             	sub    esp,0xc
c000da86:	68 c5 dd 01 c0       	push   0xc001ddc5
c000da8b:	e8 50 ca ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000da90:	e9 b8 00 00 00       	jmp    c000db4d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000da95:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000da99:	80 f9 02             	cmp    cl,0x2
c000da9c:	0f 85 96 00 00 00    	jne    c000db38 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000daa2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000daa7:	75 0e                	jne    c000dab7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000daa9:	84 c0                	test   al,al
c000daab:	75 0a                	jne    c000dab7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000daad:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dab0:	83 e8 18             	sub    eax,0x18
c000dab3:	a8 f7                	test   al,0xf7
c000dab5:	74 0a                	je     c000dac1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	68 da dd 01 c0       	push   0xc001ddda
c000dabf:	eb 7f                	jmp    c000db40 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dac1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dac9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dad1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dad5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dadd:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dae1:	75 0c                	jne    c000daef <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dae3:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dae8:	c1 e0 18             	shl    eax,0x18
c000daeb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000daef:	45                   	inc    ebp
c000daf0:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000daf5:	c1 e1 10             	shl    ecx,0x10
c000daf8:	89 c8                	mov    eax,ecx
c000dafa:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000daff:	c1 e1 08             	shl    ecx,0x8
c000db02:	09 c1                	or     ecx,eax
c000db04:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000db08:	09 c1                	or     ecx,eax
c000db0a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000db0e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000db12:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000db16:	c1 f8 03             	sar    eax,0x3
c000db19:	01 c2                	add    edx,eax
c000db1b:	89 e8                	mov    eax,ebp
c000db1d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000db21:	39 c6                	cmp    esi,eax
c000db23:	7f b0                	jg     c000dad5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000db25:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000db29:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db2d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000db30:	7e 22                	jle    c000db54 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000db32:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000db36:	eb 99                	jmp    c000dad1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000db38:	50                   	push   eax
c000db39:	50                   	push   eax
c000db3a:	51                   	push   ecx
c000db3b:	68 e8 dd 01 c0       	push   0xc001dde8
c000db40:	e8 9b c9 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000db45:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db48:	e8 7c 9c ff ff       	call   c00077c9 <free>
c000db4d:	83 c4 10             	add    esp,0x10
c000db50:	31 ff                	xor    edi,edi
c000db52:	eb 0f                	jmp    c000db63 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000db54:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000db58:	89 30                	mov    DWORD PTR [eax],esi
c000db5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db5e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000db61:	89 30                	mov    DWORD PTR [eax],esi
c000db63:	83 c4 1c             	add    esp,0x1c
c000db66:	89 f8                	mov    eax,edi
c000db68:	5b                   	pop    ebx
c000db69:	5e                   	pop    esi
c000db6a:	5f                   	pop    edi
c000db6b:	5d                   	pop    ebp
c000db6c:	c3                   	ret    
c000db6d:	90                   	nop

c000db6e <Video::putTGA(int, int, unsigned char*, int)>:
c000db6e:	55                   	push   ebp
c000db6f:	57                   	push   edi
c000db70:	56                   	push   esi
c000db71:	53                   	push   ebx
c000db72:	83 ec 28             	sub    esp,0x28
c000db75:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000db79:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db7d:	50                   	push   eax
c000db7e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db82:	50                   	push   eax
c000db83:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db87:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db8b:	56                   	push   esi
c000db8c:	e8 75 fe ff ff       	call   c000da06 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000db91:	83 c4 20             	add    esp,0x20
c000db94:	85 c0                	test   eax,eax
c000db96:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000db9a:	74 35                	je     c000dbd1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db9c:	89 c7                	mov    edi,eax
c000db9e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dba2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dba6:	39 d8                	cmp    eax,ebx
c000dba8:	7e 27                	jle    c000dbd1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dbaa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dbae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbb2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dbb6:	39 e8                	cmp    eax,ebp
c000dbb8:	7e 14                	jle    c000dbce <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dbba:	8b 06                	mov    eax,DWORD PTR [esi]
c000dbbc:	83 c7 04             	add    edi,0x4
c000dbbf:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dbc2:	53                   	push   ebx
c000dbc3:	55                   	push   ebp
c000dbc4:	45                   	inc    ebp
c000dbc5:	56                   	push   esi
c000dbc6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dbc9:	83 c4 10             	add    esp,0x10
c000dbcc:	eb e0                	jmp    c000dbae <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dbce:	43                   	inc    ebx
c000dbcf:	eb cd                	jmp    c000db9e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dbd1:	83 c4 1c             	add    esp,0x1c
c000dbd4:	5b                   	pop    ebx
c000dbd5:	5e                   	pop    esi
c000dbd6:	5f                   	pop    edi
c000dbd7:	5d                   	pop    ebp
c000dbd8:	c3                   	ret    
c000dbd9:	66 90                	xchg   ax,ax
c000dbdb:	90                   	nop

c000dbdc <ACPI::close(int, int, void*)>:
c000dbdc:	83 ec 1c             	sub    esp,0x1c
c000dbdf:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dbe7:	74 0b                	je     c000dbf4 <ACPI::close(int, int, void*)+0x18>
c000dbe9:	b8 00 00 00 00       	mov    eax,0x0
c000dbee:	e9 9d 00 00 00       	jmp    c000dc90 <ACPI::close(int, int, void*)+0xb4>
c000dbf3:	90                   	nop
c000dbf4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dbf9:	75 29                	jne    c000dc24 <ACPI::close(int, int, void*)+0x48>
c000dbfb:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000dc00:	85 c0                	test   eax,eax
c000dc02:	74 08                	je     c000dc0c <ACPI::close(int, int, void*)+0x30>
c000dc04:	a1 e8 2a 02 c0       	mov    eax,ds:0xc0022ae8
c000dc09:	ff d0                	call   eax
c000dc0b:	90                   	nop
c000dc0c:	83 ec 0c             	sub    esp,0xc
c000dc0f:	68 44 de 01 c0       	push   0xc001de44
c000dc14:	e8 46 25 00 00       	call   c001015f <KePanic(char const*)>
c000dc19:	83 c4 10             	add    esp,0x10
c000dc1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc21:	eb 6d                	jmp    c000dc90 <ACPI::close(int, int, void*)+0xb4>
c000dc23:	90                   	nop
c000dc24:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dc29:	75 5d                	jne    c000dc88 <ACPI::close(int, int, void*)+0xac>
c000dc2b:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c000dc30:	85 c0                	test   eax,eax
c000dc32:	74 08                	je     c000dc3c <ACPI::close(int, int, void*)+0x60>
c000dc34:	a1 e4 2a 02 c0       	mov    eax,ds:0xc0022ae4
c000dc39:	ff d0                	call   eax
c000dc3b:	90                   	nop
c000dc3c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dc41:	8d 76 00             	lea    esi,[esi+0x0]
c000dc44:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dc48:	25 ff 00 00 00       	and    eax,0xff
c000dc4d:	83 e0 02             	and    eax,0x2
c000dc50:	74 1e                	je     c000dc70 <ACPI::close(int, int, void*)+0x94>
c000dc52:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dc59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc5d:	89 c2                	mov    edx,eax
c000dc5f:	ec                   	in     al,dx
c000dc60:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dc64:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dc68:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dc6c:	eb d6                	jmp    c000dc44 <ACPI::close(int, int, void*)+0x68>
c000dc6e:	66 90                	xchg   ax,ax
c000dc70:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dc77:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dc7c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dc80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc84:	ee                   	out    dx,al
c000dc85:	8d 76 00             	lea    esi,[esi+0x0]
c000dc88:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc8d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc90:	83 c4 1c             	add    esp,0x1c
c000dc93:	c3                   	ret    

c000dc94 <findRSDP()>:
c000dc94:	83 ec 1c             	sub    esp,0x1c
c000dc97:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c000dc9c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dca2:	83 e0 04             	and    eax,0x4
c000dca5:	84 c0                	test   al,al
c000dca7:	75 07                	jne    c000dcb0 <findRSDP()+0x1c>
c000dca9:	b8 00 00 00 00       	mov    eax,0x0
c000dcae:	eb 70                	jmp    c000dd20 <findRSDP()+0x8c>
c000dcb0:	a1 28 05 02 c0       	mov    eax,ds:0xc0020528
c000dcb5:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dcba:	7f 1c                	jg     c000dcd8 <findRSDP()+0x44>
c000dcbc:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c000dcc1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dcc7:	83 e2 fb             	and    edx,0xfffffffb
c000dcca:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dcd0:	b8 00 00 00 00       	mov    eax,0x0
c000dcd5:	eb 49                	jmp    c000dd20 <findRSDP()+0x8c>
c000dcd7:	90                   	nop
c000dcd8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dce0:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dce8:	77 2e                	ja     c000dd18 <findRSDP()+0x84>
c000dcea:	83 ec 04             	sub    esp,0x4
c000dced:	6a 08                	push   0x8
c000dcef:	68 df de 01 c0       	push   0xc001dedf
c000dcf4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcf8:	e8 93 26 ff ff       	call   c0000390 <memcmp>
c000dcfd:	83 c4 10             	add    esp,0x10
c000dd00:	85 c0                	test   eax,eax
c000dd02:	0f 94 c0             	sete   al
c000dd05:	84 c0                	test   al,al
c000dd07:	74 07                	je     c000dd10 <findRSDP()+0x7c>
c000dd09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd0d:	eb 11                	jmp    c000dd20 <findRSDP()+0x8c>
c000dd0f:	90                   	nop
c000dd10:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dd15:	eb c9                	jmp    c000dce0 <findRSDP()+0x4c>
c000dd17:	90                   	nop
c000dd18:	b8 00 00 00 00       	mov    eax,0x0
c000dd1d:	8d 76 00             	lea    esi,[esi+0x0]
c000dd20:	83 c4 1c             	add    esp,0x1c
c000dd23:	c3                   	ret    

c000dd24 <loadACPITables(unsigned char*)>:
c000dd24:	57                   	push   edi
c000dd25:	56                   	push   esi
c000dd26:	53                   	push   ebx
c000dd27:	83 ec 60             	sub    esp,0x60
c000dd2a:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c000dd2f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dd35:	83 e0 04             	and    eax,0x4
c000dd38:	84 c0                	test   al,al
c000dd3a:	0f 84 3c 02 00 00    	je     c000df7c <loadACPITables(unsigned char*)+0x258>
c000dd40:	a0 00 2d 02 c0       	mov    al,ds:0xc0022d00
c000dd45:	84 c0                	test   al,al
c000dd47:	74 77                	je     c000ddc0 <loadACPITables(unsigned char*)+0x9c>
c000dd49:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd4d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dd51:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dd55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd58:	83 e8 24             	sub    eax,0x24
c000dd5b:	c1 e8 03             	shr    eax,0x3
c000dd5e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dd62:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dd6a:	66 90                	xchg   ax,ax
c000dd6c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd70:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dd74:	0f 8d b6 00 00 00    	jge    c000de30 <loadACPITables(unsigned char*)+0x10c>
c000dd7a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd7e:	83 c0 24             	add    eax,0x24
c000dd81:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dd85:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dd89:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dd8d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd91:	c1 e0 03             	shl    eax,0x3
c000dd94:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dd98:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dd9c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dd9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000dda1:	89 c1                	mov    ecx,eax
c000dda3:	a1 ec 2a 02 c0       	mov    eax,ds:0xc0022aec
c000dda8:	8d 50 01             	lea    edx,[eax+0x1]
c000ddab:	89 15 ec 2a 02 c0    	mov    DWORD PTR ds:0xc0022aec,edx
c000ddb1:	89 ca                	mov    edx,ecx
c000ddb3:	89 14 c5 04 2b 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd4fc],edx
c000ddba:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000ddbe:	eb ac                	jmp    c000dd6c <loadACPITables(unsigned char*)+0x48>
c000ddc0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddc4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddc8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ddcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddcf:	83 e8 24             	sub    eax,0x24
c000ddd2:	c1 e8 02             	shr    eax,0x2
c000ddd5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ddd9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000dde1:	8d 76 00             	lea    esi,[esi+0x0]
c000dde4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dde8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ddec:	7d 42                	jge    c000de30 <loadACPITables(unsigned char*)+0x10c>
c000ddee:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddf2:	83 c0 24             	add    eax,0x24
c000ddf5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ddf9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ddfd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000de01:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de05:	c1 e0 02             	shl    eax,0x2
c000de08:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000de0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de10:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de12:	a1 ec 2a 02 c0       	mov    eax,ds:0xc0022aec
c000de17:	8d 50 01             	lea    edx,[eax+0x1]
c000de1a:	89 15 ec 2a 02 c0    	mov    DWORD PTR ds:0xc0022aec,edx
c000de20:	89 ca                	mov    edx,ecx
c000de22:	89 14 c5 04 2b 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd4fc],edx
c000de29:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000de2d:	eb b5                	jmp    c000dde4 <loadACPITables(unsigned char*)+0xc0>
c000de2f:	90                   	nop
c000de30:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000de38:	a1 ec 2a 02 c0       	mov    eax,ds:0xc0022aec
c000de3d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000de41:	0f 8d 39 01 00 00    	jge    c000df80 <loadACPITables(unsigned char*)+0x25c>
c000de47:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de4b:	8b 04 c5 04 2b 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd4fc]
c000de52:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de5a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000de5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de62:	25 ff 0f 00 00       	and    eax,0xfff
c000de67:	89 c6                	mov    esi,eax
c000de69:	8b 1d f0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205f0
c000de6f:	83 ec 0c             	sub    esp,0xc
c000de72:	6a 01                	push   0x1
c000de74:	e8 14 b4 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c000de79:	83 c4 10             	add    esp,0x10
c000de7c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000de80:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000de86:	83 ec 0c             	sub    esp,0xc
c000de89:	6a 01                	push   0x1
c000de8b:	6a 01                	push   0x1
c000de8d:	50                   	push   eax
c000de8e:	52                   	push   edx
c000de8f:	53                   	push   ebx
c000de90:	e8 87 bd ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000de95:	83 c4 20             	add    esp,0x20
c000de98:	09 f0                	or     eax,esi
c000de9a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de9e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dea2:	c1 e0 03             	shl    eax,0x3
c000dea5:	05 00 2b 02 c0       	add    eax,0xc0022b00
c000deaa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000deae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deb2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000deb6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000debe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dec2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dec6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000deca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dece:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ded2:	89 c6                	mov    esi,eax
c000ded4:	89 d7                	mov    edi,edx
c000ded6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ded8:	89 c8                	mov    eax,ecx
c000deda:	89 fa                	mov    edx,edi
c000dedc:	89 f3                	mov    ebx,esi
c000dede:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000dee2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000dee6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000deea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000def1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000def5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000def9:	05 00 10 00 00       	add    eax,0x1000
c000defe:	c1 e8 0c             	shr    eax,0xc
c000df01:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000df05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df09:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df0d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df11:	25 ff 0f 00 00       	and    eax,0xfff
c000df16:	89 c6                	mov    esi,eax
c000df18:	8b 1d f0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205f0
c000df1e:	83 ec 0c             	sub    esp,0xc
c000df21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000df25:	e8 63 b3 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c000df2a:	83 c4 10             	add    esp,0x10
c000df2d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df31:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df37:	83 ec 0c             	sub    esp,0xc
c000df3a:	6a 01                	push   0x1
c000df3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000df40:	50                   	push   eax
c000df41:	52                   	push   edx
c000df42:	53                   	push   ebx
c000df43:	e8 d4 bc ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df48:	83 c4 20             	add    esp,0x20
c000df4b:	09 f0                	or     eax,esi
c000df4d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df55:	83 ec 0c             	sub    esp,0xc
c000df58:	50                   	push   eax
c000df59:	e8 5f b6 ff ff       	call   c00095bd <Virt::freeKernelVirtualPages(unsigned long)>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df65:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000df69:	89 14 c5 04 2b 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd4fc],edx
c000df70:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000df74:	e9 bf fe ff ff       	jmp    c000de38 <loadACPITables(unsigned char*)+0x114>
c000df79:	8d 76 00             	lea    esi,[esi+0x0]
c000df7c:	90                   	nop
c000df7d:	8d 76 00             	lea    esi,[esi+0x0]
c000df80:	83 c4 60             	add    esp,0x60
c000df83:	5b                   	pop    ebx
c000df84:	5e                   	pop    esi
c000df85:	5f                   	pop    edi
c000df86:	c3                   	ret    
c000df87:	90                   	nop

c000df88 <findRSDT(unsigned char*)>:
c000df88:	57                   	push   edi
c000df89:	56                   	push   esi
c000df8a:	53                   	push   ebx
c000df8b:	83 ec 50             	sub    esp,0x50
c000df8e:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c000df93:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df99:	83 e0 04             	and    eax,0x4
c000df9c:	84 c0                	test   al,al
c000df9e:	75 0c                	jne    c000dfac <findRSDT(unsigned char*)+0x24>
c000dfa0:	b8 00 00 00 00       	mov    eax,0x0
c000dfa5:	e9 26 01 00 00       	jmp    c000e0d0 <findRSDT(unsigned char*)+0x148>
c000dfaa:	66 90                	xchg   ax,ax
c000dfac:	89 e0                	mov    eax,esp
c000dfae:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000dfb2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dfb6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dfba:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000dfc2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dfc6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dfce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000dfd2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dfd6:	89 c6                	mov    esi,eax
c000dfd8:	89 d7                	mov    edi,edx
c000dfda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dfdc:	89 c8                	mov    eax,ecx
c000dfde:	89 fa                	mov    edx,edi
c000dfe0:	89 f3                	mov    ebx,esi
c000dfe2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000dfe6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dfea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dfee:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dff2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000dff6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000dffe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e002:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e006:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e00a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e00e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e012:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e016:	25 ff 0f 00 00       	and    eax,0xfff
c000e01b:	89 c6                	mov    esi,eax
c000e01d:	8b 1d f0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205f0
c000e023:	83 ec 0c             	sub    esp,0xc
c000e026:	6a 02                	push   0x2
c000e028:	e8 60 b2 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c000e02d:	83 c4 10             	add    esp,0x10
c000e030:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e034:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e03a:	83 ec 0c             	sub    esp,0xc
c000e03d:	6a 01                	push   0x1
c000e03f:	6a 02                	push   0x2
c000e041:	50                   	push   eax
c000e042:	52                   	push   edx
c000e043:	53                   	push   ebx
c000e044:	e8 d3 bb ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e049:	83 c4 20             	add    esp,0x20
c000e04c:	09 f0                	or     eax,esi
c000e04e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e052:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e056:	25 ff 0f 00 00       	and    eax,0xfff
c000e05b:	89 c6                	mov    esi,eax
c000e05d:	8b 1d f0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205f0
c000e063:	83 ec 0c             	sub    esp,0xc
c000e066:	6a 02                	push   0x2
c000e068:	e8 20 b2 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c000e06d:	83 c4 10             	add    esp,0x10
c000e070:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e074:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e07a:	83 ec 0c             	sub    esp,0xc
c000e07d:	6a 01                	push   0x1
c000e07f:	6a 02                	push   0x2
c000e081:	50                   	push   eax
c000e082:	52                   	push   edx
c000e083:	53                   	push   ebx
c000e084:	e8 93 bb ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e089:	83 c4 20             	add    esp,0x20
c000e08c:	09 f0                	or     eax,esi
c000e08e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e092:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e097:	75 13                	jne    c000e0ac <findRSDT(unsigned char*)+0x124>
c000e099:	c6 05 00 2d 02 c0 00 	mov    BYTE PTR ds:0xc0022d00,0x0
c000e0a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e0a4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0a8:	eb 22                	jmp    c000e0cc <findRSDT(unsigned char*)+0x144>
c000e0aa:	66 90                	xchg   ax,ax
c000e0ac:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e0b1:	75 11                	jne    c000e0c4 <findRSDT(unsigned char*)+0x13c>
c000e0b3:	c6 05 00 2d 02 c0 01 	mov    BYTE PTR ds:0xc0022d00,0x1
c000e0ba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e0be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0c2:	eb 08                	jmp    c000e0cc <findRSDT(unsigned char*)+0x144>
c000e0c4:	b8 00 00 00 00       	mov    eax,0x0
c000e0c9:	eb 05                	jmp    c000e0d0 <findRSDT(unsigned char*)+0x148>
c000e0cb:	90                   	nop
c000e0cc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0d0:	83 c4 50             	add    esp,0x50
c000e0d3:	5b                   	pop    ebx
c000e0d4:	5e                   	pop    esi
c000e0d5:	5f                   	pop    edi
c000e0d6:	c3                   	ret    
c000e0d7:	90                   	nop

c000e0d8 <findDataTable(unsigned char*, char*)>:
c000e0d8:	83 ec 1c             	sub    esp,0x1c
c000e0db:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c000e0e0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0e6:	83 e0 04             	and    eax,0x4
c000e0e9:	84 c0                	test   al,al
c000e0eb:	75 07                	jne    c000e0f4 <findDataTable(unsigned char*, char*)+0x1c>
c000e0ed:	b8 00 00 00 00       	mov    eax,0x0
c000e0f2:	eb 58                	jmp    c000e14c <findDataTable(unsigned char*, char*)+0x74>
c000e0f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e0fc:	a1 ec 2a 02 c0       	mov    eax,ds:0xc0022aec
c000e101:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e105:	7d 3d                	jge    c000e144 <findDataTable(unsigned char*, char*)+0x6c>
c000e107:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e10b:	c1 e0 03             	shl    eax,0x3
c000e10e:	05 00 2b 02 c0       	add    eax,0xc0022b00
c000e113:	83 ec 04             	sub    esp,0x4
c000e116:	6a 04                	push   0x4
c000e118:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e11c:	50                   	push   eax
c000e11d:	e8 6e 22 ff ff       	call   c0000390 <memcmp>
c000e122:	83 c4 10             	add    esp,0x10
c000e125:	85 c0                	test   eax,eax
c000e127:	0f 94 c0             	sete   al
c000e12a:	84 c0                	test   al,al
c000e12c:	74 0e                	je     c000e13c <findDataTable(unsigned char*, char*)+0x64>
c000e12e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e132:	8b 04 c5 04 2b 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd4fc]
c000e139:	eb 11                	jmp    c000e14c <findDataTable(unsigned char*, char*)+0x74>
c000e13b:	90                   	nop
c000e13c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e140:	eb ba                	jmp    c000e0fc <findDataTable(unsigned char*, char*)+0x24>
c000e142:	66 90                	xchg   ax,ax
c000e144:	b8 00 00 00 00       	mov    eax,0x0
c000e149:	8d 76 00             	lea    esi,[esi+0x0]
c000e14c:	83 c4 1c             	add    esp,0x1c
c000e14f:	c3                   	ret    

c000e150 <scanMADT()>:
c000e150:	53                   	push   ebx
c000e151:	83 ec 38             	sub    esp,0x38
c000e154:	a1 10 05 02 c0       	mov    eax,ds:0xc0020510
c000e159:	25 00 04 00 00       	and    eax,0x400
c000e15e:	74 14                	je     c000e174 <scanMADT()+0x24>
c000e160:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c000e165:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e16b:	83 e2 fb             	and    edx,0xfffffffb
c000e16e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e174:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c000e179:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e17f:	83 e0 04             	and    eax,0x4
c000e182:	84 c0                	test   al,al
c000e184:	0f 84 8a 04 00 00    	je     c000e614 <scanMADT()+0x4c4>
c000e18a:	e8 05 fb ff ff       	call   c000dc94 <findRSDP()>
c000e18f:	a3 0c 2d 02 c0       	mov    ds:0xc0022d0c,eax
c000e194:	a1 0c 2d 02 c0       	mov    eax,ds:0xc0022d0c
c000e199:	85 c0                	test   eax,eax
c000e19b:	75 1b                	jne    c000e1b8 <scanMADT()+0x68>
c000e19d:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c000e1a2:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1a8:	83 e2 fb             	and    edx,0xfffffffb
c000e1ab:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1b1:	e9 66 04 00 00       	jmp    c000e61c <scanMADT()+0x4cc>
c000e1b6:	66 90                	xchg   ax,ax
c000e1b8:	a1 0c 2d 02 c0       	mov    eax,ds:0xc0022d0c
c000e1bd:	83 ec 0c             	sub    esp,0xc
c000e1c0:	50                   	push   eax
c000e1c1:	e8 c2 fd ff ff       	call   c000df88 <findRSDT(unsigned char*)>
c000e1c6:	83 c4 10             	add    esp,0x10
c000e1c9:	a3 08 2d 02 c0       	mov    ds:0xc0022d08,eax
c000e1ce:	a1 08 2d 02 c0       	mov    eax,ds:0xc0022d08
c000e1d3:	85 c0                	test   eax,eax
c000e1d5:	75 19                	jne    c000e1f0 <scanMADT()+0xa0>
c000e1d7:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c000e1dc:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1e2:	83 e2 fb             	and    edx,0xfffffffb
c000e1e5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1eb:	e9 2c 04 00 00       	jmp    c000e61c <scanMADT()+0x4cc>
c000e1f0:	a1 08 2d 02 c0       	mov    eax,ds:0xc0022d08
c000e1f5:	83 ec 0c             	sub    esp,0xc
c000e1f8:	50                   	push   eax
c000e1f9:	e8 26 fb ff ff       	call   c000dd24 <loadACPITables(unsigned char*)>
c000e1fe:	83 c4 10             	add    esp,0x10
c000e201:	a1 08 2d 02 c0       	mov    eax,ds:0xc0022d08
c000e206:	83 ec 08             	sub    esp,0x8
c000e209:	68 e8 de 01 c0       	push   0xc001dee8
c000e20e:	50                   	push   eax
c000e20f:	e8 c4 fe ff ff       	call   c000e0d8 <findDataTable(unsigned char*, char*)>
c000e214:	83 c4 10             	add    esp,0x10
c000e217:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e21b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e220:	75 1a                	jne    c000e23c <scanMADT()+0xec>
c000e222:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c000e227:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e22d:	83 e2 fe             	and    edx,0xfffffffe
c000e230:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e236:	e9 e1 03 00 00       	jmp    c000e61c <scanMADT()+0x4cc>
c000e23b:	90                   	nop
c000e23c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e244:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e248:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e24b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e24f:	0f 87 c7 03 00 00    	ja     c000e61c <scanMADT()+0x4cc>
c000e255:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e25d:	0f 87 b9 03 00 00    	ja     c000e61c <scanMADT()+0x4cc>
c000e263:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e267:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e26b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e26f:	8d 50 01             	lea    edx,[eax+0x1]
c000e272:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e276:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e27a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e27e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e282:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e286:	8d 50 01             	lea    edx,[eax+0x1]
c000e289:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e28d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e291:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e295:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e299:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e29e:	0f 86 74 03 00 00    	jbe    c000e618 <scanMADT()+0x4c8>
c000e2a4:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e2a9:	75 5d                	jne    c000e308 <scanMADT()+0x1b8>
c000e2ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2af:	8d 50 01             	lea    edx,[eax+0x1]
c000e2b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2b6:	8a 15 00 2f 02 c0    	mov    dl,BYTE PTR ds:0xc0022f00
c000e2bc:	81 e2 ff 00 00 00    	and    edx,0xff
c000e2c2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2c6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e2ca:	88 82 40 2f 02 c0    	mov    BYTE PTR [edx-0x3ffdd0c0],al
c000e2d0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e2d4:	8d 42 01             	lea    eax,[edx+0x1]
c000e2d7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e2db:	a0 00 2f 02 c0       	mov    al,ds:0xc0022f00
c000e2e0:	8d 48 01             	lea    ecx,[eax+0x1]
c000e2e3:	88 0d 00 2f 02 c0    	mov    BYTE PTR ds:0xc0022f00,cl
c000e2e9:	25 ff 00 00 00       	and    eax,0xff
c000e2ee:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2f2:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e2f6:	88 90 20 2f 02 c0    	mov    BYTE PTR [eax-0x3ffdd0e0],dl
c000e2fc:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e301:	e9 f6 02 00 00       	jmp    c000e5fc <scanMADT()+0x4ac>
c000e306:	66 90                	xchg   ax,ax
c000e308:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e30d:	0f 85 29 01 00 00    	jne    c000e43c <scanMADT()+0x2ec>
c000e313:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e317:	8d 50 01             	lea    edx,[eax+0x1]
c000e31a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e31e:	8a 15 c0 2d 02 c0    	mov    dl,BYTE PTR ds:0xc0022dc0
c000e324:	81 e2 ff 00 00 00    	and    edx,0xff
c000e32a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e32e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e332:	88 82 e0 2d 02 c0    	mov    BYTE PTR [edx-0x3ffdd220],al
c000e338:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e33c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e340:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e344:	01 d0                	add    eax,edx
c000e346:	83 c0 2c             	add    eax,0x2c
c000e349:	8a 00                	mov    al,BYTE PTR [eax]
c000e34b:	31 d2                	xor    edx,edx
c000e34d:	88 c2                	mov    dl,al
c000e34f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e353:	8d 48 01             	lea    ecx,[eax+0x1]
c000e356:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e35a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e35e:	25 ff 00 00 00       	and    eax,0xff
c000e363:	c1 e0 08             	shl    eax,0x8
c000e366:	89 d1                	mov    ecx,edx
c000e368:	09 c1                	or     ecx,eax
c000e36a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e36e:	8d 50 02             	lea    edx,[eax+0x2]
c000e371:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e375:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e379:	25 ff 00 00 00       	and    eax,0xff
c000e37e:	c1 e0 10             	shl    eax,0x10
c000e381:	09 c1                	or     ecx,eax
c000e383:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e387:	8d 50 03             	lea    edx,[eax+0x3]
c000e38a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e38e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e392:	25 ff 00 00 00       	and    eax,0xff
c000e397:	c1 e0 18             	shl    eax,0x18
c000e39a:	09 c1                	or     ecx,eax
c000e39c:	89 ca                	mov    edx,ecx
c000e39e:	a0 c0 2d 02 c0       	mov    al,ds:0xc0022dc0
c000e3a3:	25 ff 00 00 00       	and    eax,0xff
c000e3a8:	89 14 85 00 2e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd200],edx
c000e3af:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e3b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3bc:	01 d0                	add    eax,edx
c000e3be:	83 c0 2c             	add    eax,0x2c
c000e3c1:	8a 00                	mov    al,BYTE PTR [eax]
c000e3c3:	31 d2                	xor    edx,edx
c000e3c5:	88 c2                	mov    dl,al
c000e3c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3cb:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3d2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e3d6:	25 ff 00 00 00       	and    eax,0xff
c000e3db:	c1 e0 08             	shl    eax,0x8
c000e3de:	89 d1                	mov    ecx,edx
c000e3e0:	09 c1                	or     ecx,eax
c000e3e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3e6:	8d 50 02             	lea    edx,[eax+0x2]
c000e3e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3ed:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3f1:	25 ff 00 00 00       	and    eax,0xff
c000e3f6:	c1 e0 10             	shl    eax,0x10
c000e3f9:	09 c1                	or     ecx,eax
c000e3fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3ff:	8d 50 03             	lea    edx,[eax+0x3]
c000e402:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e406:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e40a:	25 ff 00 00 00       	and    eax,0xff
c000e40f:	c1 e0 18             	shl    eax,0x18
c000e412:	09 c1                	or     ecx,eax
c000e414:	89 ca                	mov    edx,ecx
c000e416:	a0 c0 2d 02 c0       	mov    al,ds:0xc0022dc0
c000e41b:	25 ff 00 00 00       	and    eax,0xff
c000e420:	89 14 85 80 2e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd180],edx
c000e427:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e42c:	a0 c0 2d 02 c0       	mov    al,ds:0xc0022dc0
c000e431:	40                   	inc    eax
c000e432:	a2 c0 2d 02 c0       	mov    ds:0xc0022dc0,al
c000e437:	e9 c0 01 00 00       	jmp    c000e5fc <scanMADT()+0x4ac>
c000e43c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e441:	0f 85 fd 00 00 00    	jne    c000e544 <scanMADT()+0x3f4>
c000e447:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e44b:	8d 50 01             	lea    edx,[eax+0x1]
c000e44e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e452:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e456:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e45a:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e45e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e462:	8d 50 01             	lea    edx,[eax+0x1]
c000e465:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e469:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e46d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e471:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e475:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e479:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e47d:	01 d0                	add    eax,edx
c000e47f:	83 c0 2c             	add    eax,0x2c
c000e482:	8a 00                	mov    al,BYTE PTR [eax]
c000e484:	31 d2                	xor    edx,edx
c000e486:	88 c2                	mov    dl,al
c000e488:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e48c:	8d 48 01             	lea    ecx,[eax+0x1]
c000e48f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e493:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e497:	25 ff 00 00 00       	and    eax,0xff
c000e49c:	c1 e0 08             	shl    eax,0x8
c000e49f:	89 d1                	mov    ecx,edx
c000e4a1:	09 c1                	or     ecx,eax
c000e4a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4a7:	8d 50 02             	lea    edx,[eax+0x2]
c000e4aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4ae:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4b2:	25 ff 00 00 00       	and    eax,0xff
c000e4b7:	c1 e0 10             	shl    eax,0x10
c000e4ba:	09 c1                	or     ecx,eax
c000e4bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4c0:	8d 50 03             	lea    edx,[eax+0x3]
c000e4c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4c7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4cb:	25 ff 00 00 00       	and    eax,0xff
c000e4d0:	c1 e0 18             	shl    eax,0x18
c000e4d3:	09 c8                	or     eax,ecx
c000e4d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4d9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4e6:	01 d0                	add    eax,edx
c000e4e8:	83 c0 2c             	add    eax,0x2c
c000e4eb:	8a 00                	mov    al,BYTE PTR [eax]
c000e4ed:	25 ff 00 00 00       	and    eax,0xff
c000e4f2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e4f6:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e4f9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4fd:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e501:	81 e2 ff 00 00 00    	and    edx,0xff
c000e507:	c1 e2 08             	shl    edx,0x8
c000e50a:	09 d0                	or     eax,edx
c000e50c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e511:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e516:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e51a:	25 ff 00 00 00       	and    eax,0xff
c000e51f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e523:	88 90 20 f2 01 c0    	mov    BYTE PTR [eax-0x3ffe0de0],dl
c000e529:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e52d:	31 d2                	xor    edx,edx
c000e52f:	88 c2                	mov    dl,al
c000e531:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e536:	66 89 84 12 a0 2d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdd260],ax
c000e53e:	e9 b9 00 00 00       	jmp    c000e5fc <scanMADT()+0x4ac>
c000e543:	90                   	nop
c000e544:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e549:	0f 85 a1 00 00 00    	jne    c000e5f0 <scanMADT()+0x4a0>
c000e54f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e553:	8d 50 01             	lea    edx,[eax+0x1]
c000e556:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e55a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e55e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e562:	25 ff 00 00 00       	and    eax,0xff
c000e567:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e56b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e56f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e573:	01 d0                	add    eax,edx
c000e575:	83 c0 2c             	add    eax,0x2c
c000e578:	8a 00                	mov    al,BYTE PTR [eax]
c000e57a:	31 d2                	xor    edx,edx
c000e57c:	88 c2                	mov    dl,al
c000e57e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e582:	8d 48 01             	lea    ecx,[eax+0x1]
c000e585:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e589:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e58d:	25 ff 00 00 00       	and    eax,0xff
c000e592:	c1 e0 08             	shl    eax,0x8
c000e595:	09 d0                	or     eax,edx
c000e597:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e59b:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e5a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5a4:	8d 50 01             	lea    edx,[eax+0x1]
c000e5a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5ab:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5af:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5b3:	25 ff 00 00 00       	and    eax,0xff
c000e5b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5c0:	c1 e0 08             	shl    eax,0x8
c000e5c3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e5c7:	89 c1                	mov    ecx,eax
c000e5c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5cd:	c1 e0 18             	shl    eax,0x18
c000e5d0:	89 c3                	mov    ebx,eax
c000e5d2:	a1 10 2d 02 c0       	mov    eax,ds:0xc0022d10
c000e5d7:	8d 50 01             	lea    edx,[eax+0x1]
c000e5da:	89 15 10 2d 02 c0    	mov    DWORD PTR ds:0xc0022d10,edx
c000e5e0:	09 d9                	or     ecx,ebx
c000e5e2:	89 ca                	mov    edx,ecx
c000e5e4:	89 14 85 20 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd2e0],edx
c000e5eb:	eb 0f                	jmp    c000e5fc <scanMADT()+0x4ac>
c000e5ed:	8d 76 00             	lea    esi,[esi+0x0]
c000e5f0:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e5f5:	75 05                	jne    c000e5fc <scanMADT()+0x4ac>
c000e5f7:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e5fc:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e600:	31 d2                	xor    edx,edx
c000e602:	88 c2                	mov    dl,al
c000e604:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e608:	01 d0                	add    eax,edx
c000e60a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e60e:	e9 31 fc ff ff       	jmp    c000e244 <scanMADT()+0xf4>
c000e613:	90                   	nop
c000e614:	90                   	nop
c000e615:	eb 05                	jmp    c000e61c <scanMADT()+0x4cc>
c000e617:	90                   	nop
c000e618:	90                   	nop
c000e619:	8d 76 00             	lea    esi,[esi+0x0]
c000e61c:	83 c4 38             	add    esp,0x38
c000e61f:	5b                   	pop    ebx
c000e620:	c3                   	ret    
c000e621:	90                   	nop
c000e622:	66 90                	xchg   ax,ax

c000e624 <ACPI::ACPI()>:
c000e624:	83 ec 0c             	sub    esp,0xc
c000e627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e62b:	83 ec 08             	sub    esp,0x8
c000e62e:	68 ed de 01 c0       	push   0xc001deed
c000e633:	50                   	push   eax
c000e634:	e8 7f d4 ff ff       	call   c000bab8 <Device::Device(char const*)>
c000e639:	83 c4 10             	add    esp,0x10
c000e63c:	ba 24 e0 01 c0       	mov    edx,0xc001e024
c000e641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e645:	89 10                	mov    DWORD PTR [eax],edx
c000e647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e64b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e656:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e664:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e66e:	e8 dd fa ff ff       	call   c000e150 <scanMADT()>
c000e673:	90                   	nop
c000e674:	83 c4 0c             	add    esp,0xc
c000e677:	c3                   	ret    

c000e678 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e678:	83 ec 2c             	sub    esp,0x2c
c000e67b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e67f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e683:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e687:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e68b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e690:	88 d0                	mov    al,dl
c000e692:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e696:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e69b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6a3:	90                   	nop
c000e6a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6a8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e6ae:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e6b2:	0f 8d 9c 00 00 00    	jge    c000e754 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e6b8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6bc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6c0:	83 c2 2a             	add    edx,0x2a
c000e6c3:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e6c7:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e6cc:	75 7a                	jne    c000e748 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6d2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6d6:	83 c2 2a             	add    edx,0x2a
c000e6d9:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e6dd:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e6e1:	75 65                	jne    c000e748 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6e3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e6e8:	74 3a                	je     c000e724 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e6ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6ee:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6f2:	83 c2 2a             	add    edx,0x2a
c000e6f5:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e6f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e700:	39 c2                	cmp    edx,eax
c000e702:	74 10                	je     c000e714 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e704:	83 ec 0c             	sub    esp,0xc
c000e707:	68 68 de 01 c0       	push   0xc001de68
c000e70c:	e8 4e 1a 00 00       	call   c001015f <KePanic(char const*)>
c000e711:	83 c4 10             	add    esp,0x10
c000e714:	83 ec 0c             	sub    esp,0xc
c000e717:	68 f2 de 01 c0       	push   0xc001def2
c000e71c:	e8 3e 1a 00 00       	call   c001015f <KePanic(char const*)>
c000e721:	83 c4 10             	add    esp,0x10
c000e724:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e728:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e72c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e730:	83 c2 2a             	add    edx,0x2a
c000e733:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e737:	8b 02                	mov    eax,DWORD PTR [edx]
c000e739:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e73c:	89 01                	mov    DWORD PTR [ecx],eax
c000e73e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e741:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e746:	66 90                	xchg   ax,ax
c000e748:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e74c:	e9 53 ff ff ff       	jmp    c000e6a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e751:	8d 76 00             	lea    esi,[esi+0x0]
c000e754:	90                   	nop
c000e755:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e759:	83 c4 2c             	add    esp,0x2c
c000e75c:	c2 04 00             	ret    0x4
c000e75f:	90                   	nop

c000e760 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e760:	83 ec 1c             	sub    esp,0x1c
c000e763:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e767:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e76b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e76f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e774:	88 c8                	mov    al,cl
c000e776:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e77a:	88 d0                	mov    al,dl
c000e77c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e780:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e784:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e78a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e78e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e791:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e795:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e799:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e79d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e7a7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e7aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7ae:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e7b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7b7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7bd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e7c1:	8d 48 01             	lea    ecx,[eax+0x1]
c000e7c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7c8:	83 c2 2a             	add    edx,0x2a
c000e7cb:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e7cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7dd:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e7e0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e7e4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e7e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ec:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7f2:	8d 50 01             	lea    edx,[eax+0x1]
c000e7f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7f9:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e7ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e803:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e809:	3d 00 02 00 00       	cmp    eax,0x200
c000e80e:	75 10                	jne    c000e820 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e810:	83 ec 0c             	sub    esp,0xc
c000e813:	68 01 df 01 c0       	push   0xc001df01
c000e818:	e8 42 19 00 00       	call   c001015f <KePanic(char const*)>
c000e81d:	83 c4 10             	add    esp,0x10
c000e820:	90                   	nop
c000e821:	83 c4 1c             	add    esp,0x1c
c000e824:	c3                   	ret    
c000e825:	90                   	nop
c000e826:	66 90                	xchg   ax,ax

c000e828 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e828:	b8 00 00 00 00       	mov    eax,0x0
c000e82d:	c3                   	ret    
c000e82e:	66 90                	xchg   ax,ax

c000e830 <ACPI::detectPCI()>:
c000e830:	53                   	push   ebx
c000e831:	83 ec 28             	sub    esp,0x28
c000e834:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e839:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e83e:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c000e843:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e849:	83 e0 04             	and    eax,0x4
c000e84c:	84 c0                	test   al,al
c000e84e:	74 2c                	je     c000e87c <ACPI::detectPCI()+0x4c>
c000e850:	a1 08 2d 02 c0       	mov    eax,ds:0xc0022d08
c000e855:	83 ec 08             	sub    esp,0x8
c000e858:	68 1e df 01 c0       	push   0xc001df1e
c000e85d:	50                   	push   eax
c000e85e:	e8 75 f8 ff ff       	call   c000e0d8 <findDataTable(unsigned char*, char*)>
c000e863:	83 c4 10             	add    esp,0x10
c000e866:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e86a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e86f:	74 0b                	je     c000e87c <ACPI::detectPCI()+0x4c>
c000e871:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e876:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e87b:	90                   	nop
c000e87c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e884:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e888:	8a 00                	mov    al,BYTE PTR [eax]
c000e88a:	3c 01                	cmp    al,0x1
c000e88c:	75 0e                	jne    c000e89c <ACPI::detectPCI()+0x6c>
c000e88e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e893:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e898:	eb 2a                	jmp    c000e8c4 <ACPI::detectPCI()+0x94>
c000e89a:	66 90                	xchg   ax,ax
c000e89c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8a0:	8a 00                	mov    al,BYTE PTR [eax]
c000e8a2:	3c 02                	cmp    al,0x2
c000e8a4:	75 1e                	jne    c000e8c4 <ACPI::detectPCI()+0x94>
c000e8a6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8ab:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8b0:	74 12                	je     c000e8c4 <ACPI::detectPCI()+0x94>
c000e8b2:	83 ec 0c             	sub    esp,0xc
c000e8b5:	68 98 de 01 c0       	push   0xc001de98
c000e8ba:	e8 a0 18 00 00       	call   c001015f <KePanic(char const*)>
c000e8bf:	83 c4 10             	add    esp,0x10
c000e8c2:	66 90                	xchg   ax,ax
c000e8c4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e8c8:	83 f0 01             	xor    eax,0x1
c000e8cb:	84 c0                	test   al,al
c000e8cd:	74 41                	je     c000e910 <ACPI::detectPCI()+0xe0>
c000e8cf:	e8 5c 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e8d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8d8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e8dd:	75 0d                	jne    c000e8ec <ACPI::detectPCI()+0xbc>
c000e8df:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8e4:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8e9:	eb 25                	jmp    c000e910 <ACPI::detectPCI()+0xe0>
c000e8eb:	90                   	nop
c000e8ec:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e8f1:	75 1d                	jne    c000e910 <ACPI::detectPCI()+0xe0>
c000e8f3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8f8:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8fd:	74 11                	je     c000e910 <ACPI::detectPCI()+0xe0>
c000e8ff:	83 ec 0c             	sub    esp,0xc
c000e902:	68 98 de 01 c0       	push   0xc001de98
c000e907:	e8 53 18 00 00       	call   c001015f <KePanic(char const*)>
c000e90c:	83 c4 10             	add    esp,0x10
c000e90f:	90                   	nop
c000e910:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e915:	0f 84 85 00 00 00    	je     c000e9a0 <ACPI::detectPCI()+0x170>
c000e91b:	83 ec 0c             	sub    esp,0xc
c000e91e:	68 23 df 01 c0       	push   0xc001df23
c000e923:	e8 bf 11 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c000e928:	83 c4 10             	add    esp,0x10
c000e92b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e933:	83 ec 0c             	sub    esp,0xc
c000e936:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e93a:	e8 7a 8e ff ff       	call   c00077b9 <malloc>
c000e93f:	83 c4 10             	add    esp,0x10
c000e942:	89 c3                	mov    ebx,eax
c000e944:	83 ec 0c             	sub    esp,0xc
c000e947:	53                   	push   ebx
c000e948:	e8 05 97 00 00       	call   c0018052 <PCI::PCI()>
c000e94d:	83 c4 10             	add    esp,0x10
c000e950:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e954:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e958:	83 ec 08             	sub    esp,0x8
c000e95b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e95f:	50                   	push   eax
c000e960:	e8 bb cf ff ff       	call   c000b920 <Device::addChild(Device*)>
c000e965:	83 c4 10             	add    esp,0x10
c000e968:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e96c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e96e:	83 c0 08             	add    eax,0x8
c000e971:	8b 00                	mov    eax,DWORD PTR [eax]
c000e973:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e978:	74 0a                	je     c000e984 <ACPI::detectPCI()+0x154>
c000e97a:	ba 01 00 00 00       	mov    edx,0x1
c000e97f:	eb 0b                	jmp    c000e98c <ACPI::detectPCI()+0x15c>
c000e981:	8d 76 00             	lea    esi,[esi+0x0]
c000e984:	ba 02 00 00 00       	mov    edx,0x2
c000e989:	8d 76 00             	lea    esi,[esi+0x0]
c000e98c:	6a 00                	push   0x0
c000e98e:	6a 00                	push   0x0
c000e990:	52                   	push   edx
c000e991:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e995:	ff d0                	call   eax
c000e997:	83 c4 10             	add    esp,0x10
c000e99a:	e9 91 00 00 00       	jmp    c000ea30 <ACPI::detectPCI()+0x200>
c000e99f:	90                   	nop
c000e9a0:	83 ec 0c             	sub    esp,0xc
c000e9a3:	68 3b df 01 c0       	push   0xc001df3b
c000e9a8:	e8 3a 11 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c000e9ad:	83 c4 10             	add    esp,0x10
c000e9b0:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000e9b7:	83 ec 0c             	sub    esp,0xc
c000e9ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e9be:	e8 f6 8d ff ff       	call   c00077b9 <malloc>
c000e9c3:	83 c4 10             	add    esp,0x10
c000e9c6:	89 c3                	mov    ebx,eax
c000e9c8:	83 ec 0c             	sub    esp,0xc
c000e9cb:	53                   	push   ebx
c000e9cc:	e8 ad a1 00 00       	call   c0018b7e <IDE::IDE()>
c000e9d1:	83 c4 10             	add    esp,0x10
c000e9d4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e9d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9dc:	83 ec 08             	sub    esp,0x8
c000e9df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9e3:	50                   	push   eax
c000e9e4:	e8 37 cf ff ff       	call   c000b920 <Device::addChild(Device*)>
c000e9e9:	83 c4 10             	add    esp,0x10
c000e9ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9f0:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000e9fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9fe:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ea07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea0b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ea14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea18:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea1a:	83 c0 08             	add    eax,0x8
c000ea1d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea1f:	6a 00                	push   0x0
c000ea21:	6a 00                	push   0x0
c000ea23:	6a 00                	push   0x0
c000ea25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea29:	ff d0                	call   eax
c000ea2b:	83 c4 10             	add    esp,0x10
c000ea2e:	66 90                	xchg   ax,ax
c000ea30:	90                   	nop
c000ea31:	83 c4 28             	add    esp,0x28
c000ea34:	5b                   	pop    ebx
c000ea35:	c3                   	ret    
c000ea36:	66 90                	xchg   ax,ax

c000ea38 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ea38:	83 ec 1c             	sub    esp,0x1c
c000ea3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ea3f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ea42:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea46:	8b 15 f8 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204f8
c000ea4c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea50:	25 ff 00 00 00       	and    eax,0xff
c000ea55:	83 ec 08             	sub    esp,0x8
c000ea58:	50                   	push   eax
c000ea59:	52                   	push   edx
c000ea5a:	e8 47 84 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000ea5f:	83 c4 10             	add    esp,0x10
c000ea62:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ea66:	8b 15 f8 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204f8
c000ea6c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea70:	25 ff 00 00 00       	and    eax,0xff
c000ea75:	83 ec 04             	sub    esp,0x4
c000ea78:	6a 01                	push   0x1
c000ea7a:	50                   	push   eax
c000ea7b:	52                   	push   edx
c000ea7c:	e8 3b 85 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000ea81:	83 c4 10             	add    esp,0x10
c000ea84:	90                   	nop
c000ea85:	83 c4 1c             	add    esp,0x1c
c000ea88:	c3                   	ret    
c000ea89:	90                   	nop
c000ea8a:	66 90                	xchg   ax,ax

c000ea8c <ACPI::sleep()>:
c000ea8c:	83 ec 0c             	sub    esp,0xc
c000ea8f:	a1 e0 2a 02 c0       	mov    eax,ds:0xc0022ae0
c000ea94:	85 c0                	test   eax,eax
c000ea96:	74 08                	je     c000eaa0 <ACPI::sleep()+0x14>
c000ea98:	a1 e0 2a 02 c0       	mov    eax,ds:0xc0022ae0
c000ea9d:	ff d0                	call   eax
c000ea9f:	90                   	nop
c000eaa0:	90                   	nop
c000eaa1:	83 c4 0c             	add    esp,0xc
c000eaa4:	c3                   	ret    
c000eaa5:	90                   	nop
c000eaa6:	66 90                	xchg   ax,ax

c000eaa8 <ACPI::open(int, int, void*)>:
c000eaa8:	57                   	push   edi
c000eaa9:	56                   	push   esi
c000eaaa:	53                   	push   ebx
c000eaab:	81 ec 70 01 00 00    	sub    esp,0x170
c000eab1:	83 ec 0c             	sub    esp,0xc
c000eab4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eabb:	e8 70 fd ff ff       	call   c000e830 <ACPI::detectPCI()>
c000eac0:	83 c4 10             	add    esp,0x10
c000eac3:	83 ec 0c             	sub    esp,0xc
c000eac6:	68 c0 de 01 c0       	push   0xc001dec0
c000eacb:	e8 17 10 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c000ead0:	83 c4 10             	add    esp,0x10
c000ead3:	83 ec 0c             	sub    esp,0xc
c000ead6:	68 50 df 01 c0       	push   0xc001df50
c000eadb:	e8 48 34 00 00       	call   c0011f28 <Thr::loadKernelSymbolTable(char const*)>
c000eae0:	83 c4 10             	add    esp,0x10
c000eae3:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eaeb:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eaf6:	83 ec 0c             	sub    esp,0xc
c000eaf9:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eb00:	e8 b4 8c ff ff       	call   c00077b9 <malloc>
c000eb05:	83 c4 10             	add    esp,0x10
c000eb08:	89 c3                	mov    ebx,eax
c000eb0a:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c000eb0f:	83 ec 04             	sub    esp,0x4
c000eb12:	50                   	push   eax
c000eb13:	68 6e df 01 c0       	push   0xc001df6e
c000eb18:	53                   	push   ebx
c000eb19:	e8 38 bf ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c000eb1e:	83 c4 10             	add    esp,0x10
c000eb21:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eb28:	83 ec 08             	sub    esp,0x8
c000eb2b:	6a 01                	push   0x1
c000eb2d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb34:	e8 dd bf ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c000eb39:	83 c4 10             	add    esp,0x10
c000eb3c:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eb43:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eb4b:	75 17                	jne    c000eb64 <ACPI::open(int, int, void*)+0xbc>
c000eb4d:	83 ec 0c             	sub    esp,0xc
c000eb50:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb57:	e8 18 c0 ff ff       	call   c000ab74 <File::close()>
c000eb5c:	83 c4 10             	add    esp,0x10
c000eb5f:	eb 0b                	jmp    c000eb6c <ACPI::open(int, int, void*)+0xc4>
c000eb61:	8d 76 00             	lea    esi,[esi+0x0]
c000eb64:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eb6c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eb74:	74 1e                	je     c000eb94 <ACPI::open(int, int, void*)+0xec>
c000eb76:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000eb7d:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb7f:	83 c0 08             	add    eax,0x8
c000eb82:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb84:	83 ec 0c             	sub    esp,0xc
c000eb87:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb8e:	ff d0                	call   eax
c000eb90:	83 c4 10             	add    esp,0x10
c000eb93:	90                   	nop
c000eb94:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000eb9b:	83 f0 01             	xor    eax,0x1
c000eb9e:	84 c0                	test   al,al
c000eba0:	74 42                	je     c000ebe4 <ACPI::open(int, int, void*)+0x13c>
c000eba2:	83 ec 0c             	sub    esp,0xc
c000eba5:	68 8c df 01 c0       	push   0xc001df8c
c000ebaa:	e8 38 0f 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c000ebaf:	83 c4 10             	add    esp,0x10
c000ebb2:	83 ec 04             	sub    esp,0x4
c000ebb5:	6a 0c                	push   0xc
c000ebb7:	68 a7 df 01 c0       	push   0xc001dfa7
c000ebbc:	68 b8 df 01 c0       	push   0xc001dfb8
c000ebc1:	e8 8d 29 00 00       	call   c0011553 <Reg::readIntWithDefault(char*, char*, int)>
c000ebc6:	83 c4 10             	add    esp,0x10
c000ebc9:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ebd0:	83 ec 0c             	sub    esp,0xc
c000ebd3:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ebda:	e8 b8 a8 ff ff       	call   c0009497 <Virt::setupPageSwapping(int)>
c000ebdf:	83 c4 10             	add    esp,0x10
c000ebe2:	66 90                	xchg   ax,ax
c000ebe4:	83 ec 0c             	sub    esp,0xc
c000ebe7:	68 37 d0 01 c0       	push   0xc001d037
c000ebec:	e8 f6 0e 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c000ebf1:	83 c4 10             	add    esp,0x10
c000ebf4:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ebfb:	83 ec 08             	sub    esp,0x8
c000ebfe:	6a 12                	push   0x12
c000ec00:	50                   	push   eax
c000ec01:	e8 32 d0 ff ff       	call   c000bc38 <getDevicesOfType(DeviceType)>
c000ec06:	83 c4 0c             	add    esp,0xc
c000ec09:	8d 76 00             	lea    esi,[esi+0x0]
c000ec0c:	83 ec 0c             	sub    esp,0xc
c000ec0f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec16:	50                   	push   eax
c000ec17:	e8 70 d8 00 00       	call   c001c48c <LinkedList<Device>::isEmpty()>
c000ec1c:	83 c4 10             	add    esp,0x10
c000ec1f:	83 f0 01             	xor    eax,0x1
c000ec22:	84 c0                	test   al,al
c000ec24:	0f 84 46 01 00 00    	je     c000ed70 <ACPI::open(int, int, void*)+0x2c8>
c000ec2a:	83 ec 0c             	sub    esp,0xc
c000ec2d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec34:	50                   	push   eax
c000ec35:	e8 6e d8 00 00       	call   c001c4a8 <LinkedList<Device>::getFirstElement()>
c000ec3a:	83 c4 10             	add    esp,0x10
c000ec3d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ec44:	83 ec 0c             	sub    esp,0xc
c000ec47:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec4e:	50                   	push   eax
c000ec4f:	e8 5c d8 00 00       	call   c001c4b0 <LinkedList<Device>::removeFirst()>
c000ec54:	83 c4 10             	add    esp,0x10
c000ec57:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ec5e:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ec65:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ec6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ec70:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ec76:	ba 09 00 00 00       	mov    edx,0x9
c000ec7b:	fc                   	cld    
c000ec7c:	89 c7                	mov    edi,eax
c000ec7e:	89 de                	mov    esi,ebx
c000ec80:	89 d1                	mov    ecx,edx
c000ec82:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec84:	83 ec 08             	sub    esp,0x8
c000ec87:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ec8b:	50                   	push   eax
c000ec8c:	83 ec 24             	sub    esp,0x24
c000ec8f:	89 e0                	mov    eax,esp
c000ec91:	89 c3                	mov    ebx,eax
c000ec93:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ec97:	ba 09 00 00 00       	mov    edx,0x9
c000ec9c:	89 df                	mov    edi,ebx
c000ec9e:	89 c6                	mov    esi,eax
c000eca0:	89 d1                	mov    ecx,edx
c000eca2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000eca4:	e8 8b 98 00 00       	call   c0018534 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000eca9:	83 c4 30             	add    esp,0x30
c000ecac:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ecb3:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ecbb:	0f 84 4b ff ff ff    	je     c000ec0c <ACPI::open(int, int, void*)+0x164>
c000ecc1:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000eccc:	83 ec 0c             	sub    esp,0xc
c000eccf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ecd6:	e8 de 8a ff ff       	call   c00077b9 <malloc>
c000ecdb:	83 c4 10             	add    esp,0x10
c000ecde:	89 c3                	mov    ebx,eax
c000ece0:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c000ece5:	83 ec 04             	sub    esp,0x4
c000ece8:	50                   	push   eax
c000ece9:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ecf0:	53                   	push   ebx
c000ecf1:	e8 60 bd ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c000ecf6:	83 c4 10             	add    esp,0x10
c000ecf9:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ed00:	83 ec 0c             	sub    esp,0xc
c000ed03:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed0a:	e8 75 c0 ff ff       	call   c000ad84 <File::exists()>
c000ed0f:	83 c4 10             	add    esp,0x10
c000ed12:	84 c0                	test   al,al
c000ed14:	74 2a                	je     c000ed40 <ACPI::open(int, int, void*)+0x298>
c000ed16:	83 ec 08             	sub    esp,0x8
c000ed19:	6a 01                	push   0x1
c000ed1b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed22:	e8 78 3c 00 00       	call   c001299f <Thr::loadDLL(char const*, bool)>
c000ed27:	83 c4 10             	add    esp,0x10
c000ed2a:	83 ec 08             	sub    esp,0x8
c000ed2d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed34:	50                   	push   eax
c000ed35:	e8 96 3e 00 00       	call   c0012bd0 <Thr::executeDLL(unsigned long, void*)>
c000ed3a:	83 c4 10             	add    esp,0x10
c000ed3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed40:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ed48:	0f 84 be fe ff ff    	je     c000ec0c <ACPI::open(int, int, void*)+0x164>
c000ed4e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ed55:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed57:	83 c0 08             	add    eax,0x8
c000ed5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed5c:	83 ec 0c             	sub    esp,0xc
c000ed5f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed66:	ff d0                	call   eax
c000ed68:	83 c4 10             	add    esp,0x10
c000ed6b:	e9 9c fe ff ff       	jmp    c000ec0c <ACPI::open(int, int, void*)+0x164>
c000ed70:	83 ec 0c             	sub    esp,0xc
c000ed73:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed7a:	50                   	push   eax
c000ed7b:	e8 08 d7 00 00       	call   c001c488 <LinkedList<Device>::~LinkedList()>
c000ed80:	83 c4 10             	add    esp,0x10
c000ed83:	8b 1d f8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204f8
c000ed89:	83 ec 08             	sub    esp,0x8
c000ed8c:	6a 01                	push   0x1
c000ed8e:	68 bf df 01 c0       	push   0xc001dfbf
c000ed93:	e8 07 3c 00 00       	call   c001299f <Thr::loadDLL(char const*, bool)>
c000ed98:	83 c4 10             	add    esp,0x10
c000ed9b:	83 ec 08             	sub    esp,0x8
c000ed9e:	53                   	push   ebx
c000ed9f:	50                   	push   eax
c000eda0:	e8 2b 3e 00 00       	call   c0012bd0 <Thr::executeDLL(unsigned long, void*)>
c000eda5:	83 c4 10             	add    esp,0x10
c000eda8:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c000edad:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000edb3:	83 e0 04             	and    eax,0x4
c000edb6:	84 c0                	test   al,al
c000edb8:	0f 84 16 01 00 00    	je     c000eed4 <ACPI::open(int, int, void*)+0x42c>
c000edbe:	83 ec 0c             	sub    esp,0xc
c000edc1:	68 dc df 01 c0       	push   0xc001dfdc
c000edc6:	e8 1c 0d 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c000edcb:	83 c4 10             	add    esp,0x10
c000edce:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000edd9:	83 ec 0c             	sub    esp,0xc
c000eddc:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000ede3:	e8 d1 89 ff ff       	call   c00077b9 <malloc>
c000ede8:	83 c4 10             	add    esp,0x10
c000edeb:	89 c3                	mov    ebx,eax
c000eded:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c000edf2:	83 ec 04             	sub    esp,0x4
c000edf5:	50                   	push   eax
c000edf6:	68 f9 df 01 c0       	push   0xc001dff9
c000edfb:	53                   	push   ebx
c000edfc:	e8 55 bc ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c000ee01:	83 c4 10             	add    esp,0x10
c000ee04:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ee0b:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee13:	74 1b                	je     c000ee30 <ACPI::open(int, int, void*)+0x388>
c000ee15:	83 ec 0c             	sub    esp,0xc
c000ee18:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee1f:	e8 60 bf ff ff       	call   c000ad84 <File::exists()>
c000ee24:	83 c4 10             	add    esp,0x10
c000ee27:	84 c0                	test   al,al
c000ee29:	74 05                	je     c000ee30 <ACPI::open(int, int, void*)+0x388>
c000ee2b:	b0 01                	mov    al,0x1
c000ee2d:	eb 05                	jmp    c000ee34 <ACPI::open(int, int, void*)+0x38c>
c000ee2f:	90                   	nop
c000ee30:	b0 00                	mov    al,0x0
c000ee32:	66 90                	xchg   ax,ax
c000ee34:	84 c0                	test   al,al
c000ee36:	74 28                	je     c000ee60 <ACPI::open(int, int, void*)+0x3b8>
c000ee38:	83 ec 08             	sub    esp,0x8
c000ee3b:	6a 01                	push   0x1
c000ee3d:	68 f9 df 01 c0       	push   0xc001dff9
c000ee42:	e8 58 3b 00 00       	call   c001299f <Thr::loadDLL(char const*, bool)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	83 ec 08             	sub    esp,0x8
c000ee4d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ee54:	50                   	push   eax
c000ee55:	e8 76 3d 00 00       	call   c0012bd0 <Thr::executeDLL(unsigned long, void*)>
c000ee5a:	83 c4 10             	add    esp,0x10
c000ee5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee60:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee68:	74 2a                	je     c000ee94 <ACPI::open(int, int, void*)+0x3ec>
c000ee6a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee72:	74 20                	je     c000ee94 <ACPI::open(int, int, void*)+0x3ec>
c000ee74:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ee7b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee7d:	83 c0 08             	add    eax,0x8
c000ee80:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee82:	83 ec 0c             	sub    esp,0xc
c000ee85:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee8c:	ff d0                	call   eax
c000ee8e:	83 c4 10             	add    esp,0x10
c000ee91:	8d 76 00             	lea    esi,[esi+0x0]
c000ee94:	a1 08 2d 02 c0       	mov    eax,ds:0xc0022d08
c000ee99:	83 ec 08             	sub    esp,0x8
c000ee9c:	68 16 e0 01 c0       	push   0xc001e016
c000eea1:	50                   	push   eax
c000eea2:	e8 31 f2 ff ff       	call   c000e0d8 <findDataTable(unsigned char*, char*)>
c000eea7:	83 c4 10             	add    esp,0x10
c000eeaa:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000eeb1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000eeb9:	74 19                	je     c000eed4 <ACPI::open(int, int, void*)+0x42c>
c000eebb:	83 ec 08             	sub    esp,0x8
c000eebe:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eec5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eecc:	e8 67 fb ff ff       	call   c000ea38 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000eed1:	83 c4 10             	add    esp,0x10
c000eed4:	b8 00 00 00 00       	mov    eax,0x0
c000eed9:	81 c4 70 01 00 00    	add    esp,0x170
c000eedf:	5b                   	pop    ebx
c000eee0:	5e                   	pop    esi
c000eee1:	5f                   	pop    edi
c000eee2:	c3                   	ret    
c000eee3:	90                   	nop

c000eee4 <CPU::close(int, int, void*)>:
c000eee4:	31 c0                	xor    eax,eax
c000eee6:	c3                   	ret    
c000eee7:	90                   	nop

c000eee8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000eee8:	60                   	pusha  
c000eee9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eeed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eef1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eef5:	9c                   	pushf  
c000eef6:	fa                   	cli    
c000eef7:	0f 09                	wbinvd 
c000eef9:	0f 30                	wrmsr  
c000eefb:	9d                   	popf   
c000eefc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ef00:	89 02                	mov    DWORD PTR [edx],eax
c000ef02:	61                   	popa   
c000ef03:	c3                   	ret    

c000ef04 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ef04:	60                   	pusha  
c000ef05:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef09:	9c                   	pushf  
c000ef0a:	fa                   	cli    
c000ef0b:	0f 09                	wbinvd 
c000ef0d:	31 c0                	xor    eax,eax
c000ef0f:	31 d2                	xor    edx,edx
c000ef11:	0f 32                	rdmsr  
c000ef13:	9d                   	popf   
c000ef14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef18:	89 02                	mov    DWORD PTR [edx],eax
c000ef1a:	61                   	popa   
c000ef1b:	c3                   	ret    

c000ef1c <CPU::AMD_K6_writeback(int, int, int)>:
c000ef1c:	56                   	push   esi
c000ef1d:	53                   	push   ebx
c000ef1e:	83 ec 10             	sub    esp,0x10
c000ef21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef25:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ef2a:	75 5d                	jne    c000ef89 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef2c:	83 f8 08             	cmp    eax,0x8
c000ef2f:	75 09                	jne    c000ef3a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ef31:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ef36:	7e 13                	jle    c000ef4b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef38:	eb 30                	jmp    c000ef6a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef3a:	83 f8 06             	cmp    eax,0x6
c000ef3d:	7c 4a                	jl     c000ef89 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef3f:	83 f8 07             	cmp    eax,0x7
c000ef42:	7e 07                	jle    c000ef4b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef44:	83 f8 09             	cmp    eax,0x9
c000ef47:	74 21                	je     c000ef6a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef49:	eb 3e                	jmp    c000ef89 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef4b:	89 e6                	mov    esi,esp
c000ef4d:	8b 1d 1c 05 02 c0    	mov    ebx,DWORD PTR ds:0xc002051c
c000ef53:	56                   	push   esi
c000ef54:	c1 eb 15             	shr    ebx,0x15
c000ef57:	68 82 00 00 c0       	push   0xc0000082
c000ef5c:	83 e3 7e             	and    ebx,0x7e
c000ef5f:	e8 a0 ff ff ff       	call   c000ef04 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef64:	56                   	push   esi
c000ef65:	6a 00                	push   0x0
c000ef67:	53                   	push   ebx
c000ef68:	eb 12                	jmp    c000ef7c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ef6a:	89 e3                	mov    ebx,esp
c000ef6c:	53                   	push   ebx
c000ef6d:	68 82 00 00 c0       	push   0xc0000082
c000ef72:	e8 8d ff ff ff       	call   c000ef04 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef77:	53                   	push   ebx
c000ef78:	6a 00                	push   0x0
c000ef7a:	6a 00                	push   0x0
c000ef7c:	68 82 00 00 c0       	push   0xc0000082
c000ef81:	e8 62 ff ff ff       	call   c000eee8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ef86:	83 c4 18             	add    esp,0x18
c000ef89:	83 c4 10             	add    esp,0x10
c000ef8c:	5b                   	pop    ebx
c000ef8d:	5e                   	pop    esi
c000ef8e:	c3                   	ret    
c000ef8f:	90                   	nop

c000ef90 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ef90:	55                   	push   ebp
c000ef91:	57                   	push   edi
c000ef92:	56                   	push   esi
c000ef93:	53                   	push   ebx
c000ef94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef98:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ef9c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000efa0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000efa4:	39 05 30 f2 01 c0    	cmp    DWORD PTR ds:0xc001f230,eax
c000efaa:	75 23                	jne    c000efcf <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000efac:	a1 6c 2f 02 c0       	mov    eax,ds:0xc0022f6c
c000efb1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000efb5:	89 06                	mov    DWORD PTR [esi],eax
c000efb7:	a1 68 2f 02 c0       	mov    eax,ds:0xc0022f68
c000efbc:	89 07                	mov    DWORD PTR [edi],eax
c000efbe:	a1 64 2f 02 c0       	mov    eax,ds:0xc0022f64
c000efc3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000efc6:	a1 60 2f 02 c0       	mov    eax,ds:0xc0022f60
c000efcb:	89 02                	mov    DWORD PTR [edx],eax
c000efcd:	eb 3f                	jmp    c000f00e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000efcf:	31 c9                	xor    ecx,ecx
c000efd1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efd5:	0f a2                	cpuid  
c000efd7:	89 06                	mov    DWORD PTR [esi],eax
c000efd9:	89 1f                	mov    DWORD PTR [edi],ebx
c000efdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efdf:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000efe2:	89 10                	mov    DWORD PTR [eax],edx
c000efe4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efe8:	a3 30 f2 01 c0       	mov    ds:0xc001f230,eax
c000efed:	8b 06                	mov    eax,DWORD PTR [esi]
c000efef:	a3 6c 2f 02 c0       	mov    ds:0xc0022f6c,eax
c000eff4:	8b 07                	mov    eax,DWORD PTR [edi]
c000eff6:	a3 68 2f 02 c0       	mov    ds:0xc0022f68,eax
c000effb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000effe:	a3 64 2f 02 c0       	mov    ds:0xc0022f64,eax
c000f003:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f007:	8b 00                	mov    eax,DWORD PTR [eax]
c000f009:	a3 60 2f 02 c0       	mov    ds:0xc0022f60,eax
c000f00e:	5b                   	pop    ebx
c000f00f:	5e                   	pop    esi
c000f010:	5f                   	pop    edi
c000f011:	5d                   	pop    ebp
c000f012:	c3                   	ret    
c000f013:	90                   	nop

c000f014 <CPU::cpuidCheckEDX(unsigned int)>:
c000f014:	83 ec 10             	sub    esp,0x10
c000f017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f01b:	50                   	push   eax
c000f01c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f020:	50                   	push   eax
c000f021:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f025:	50                   	push   eax
c000f026:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f02a:	50                   	push   eax
c000f02b:	6a 01                	push   0x1
c000f02d:	e8 5e ff ff ff       	call   c000ef90 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f032:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f036:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f03a:	0f 95 c0             	setne  al
c000f03d:	83 c4 24             	add    esp,0x24
c000f040:	c3                   	ret    
c000f041:	90                   	nop

c000f042 <CPU::cpuidCheckECX(unsigned int)>:
c000f042:	83 ec 10             	sub    esp,0x10
c000f045:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f049:	50                   	push   eax
c000f04a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f04e:	50                   	push   eax
c000f04f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f053:	50                   	push   eax
c000f054:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f058:	50                   	push   eax
c000f059:	6a 01                	push   0x1
c000f05b:	e8 30 ff ff ff       	call   c000ef90 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f060:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f064:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f068:	0f 95 c0             	setne  al
c000f06b:	83 c4 24             	add    esp,0x24
c000f06e:	c3                   	ret    
c000f06f:	90                   	nop

c000f070 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f070:	83 ec 10             	sub    esp,0x10
c000f073:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f077:	50                   	push   eax
c000f078:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f07c:	50                   	push   eax
c000f07d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f081:	50                   	push   eax
c000f082:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f086:	50                   	push   eax
c000f087:	6a 07                	push   0x7
c000f089:	e8 02 ff ff ff       	call   c000ef90 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f08e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f092:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f096:	0f 95 c0             	setne  al
c000f099:	83 c4 24             	add    esp,0x24
c000f09c:	c3                   	ret    
c000f09d:	90                   	nop

c000f09e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f09e:	83 ec 10             	sub    esp,0x10
c000f0a1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0a5:	50                   	push   eax
c000f0a6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0aa:	50                   	push   eax
c000f0ab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0af:	50                   	push   eax
c000f0b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0b4:	50                   	push   eax
c000f0b5:	6a 07                	push   0x7
c000f0b7:	e8 d4 fe ff ff       	call   c000ef90 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0c0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f0c4:	0f 95 c0             	setne  al
c000f0c7:	83 c4 24             	add    esp,0x24
c000f0ca:	c3                   	ret    
c000f0cb:	90                   	nop

c000f0cc <CPU::CPU()>:
c000f0cc:	83 ec 0c             	sub    esp,0xc
c000f0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0d3:	83 ec 08             	sub    esp,0x8
c000f0d6:	68 39 e1 01 c0       	push   0xc001e139
c000f0db:	50                   	push   eax
c000f0dc:	e8 d7 c9 ff ff       	call   c000bab8 <Device::Device(char const*)>
c000f0e1:	83 c4 10             	add    esp,0x10
c000f0e4:	ba c0 e1 01 c0       	mov    edx,0xc001e1c0
c000f0e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0ed:	89 10                	mov    DWORD PTR [eax],edx
c000f0ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0f3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f0fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f101:	05 78 01 00 00       	add    eax,0x178
c000f106:	83 ec 0c             	sub    esp,0xc
c000f109:	50                   	push   eax
c000f10a:	e8 6b 7f ff ff       	call   c000707a <GDT::GDT()>
c000f10f:	83 c4 10             	add    esp,0x10
c000f112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f116:	05 7c 09 00 00       	add    eax,0x97c
c000f11b:	83 ec 0c             	sub    esp,0xc
c000f11e:	50                   	push   eax
c000f11f:	e8 90 81 ff ff       	call   c00072b4 <IDT::IDT()>
c000f124:	83 c4 10             	add    esp,0x10
c000f127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f12b:	05 7c 11 00 00       	add    eax,0x117c
c000f130:	83 ec 0c             	sub    esp,0xc
c000f133:	50                   	push   eax
c000f134:	e8 97 9a ff ff       	call   c0008bd0 <TSS::TSS()>
c000f139:	83 c4 10             	add    esp,0x10
c000f13c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f140:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f14b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f155:	90                   	nop
c000f156:	83 c4 0c             	add    esp,0xc
c000f159:	c3                   	ret    

c000f15a <CPU::displayFeatures()>:
c000f15a:	c3                   	ret    
c000f15b:	90                   	nop

c000f15c <CPU::detectFeatures()>:
c000f15c:	55                   	push   ebp
c000f15d:	57                   	push   edi
c000f15e:	56                   	push   esi
c000f15f:	53                   	push   ebx
c000f160:	83 ec 30             	sub    esp,0x30
c000f163:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f167:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f171:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f178:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f17e:	6a 0d                	push   0xd
c000f180:	6a 00                	push   0x0
c000f182:	55                   	push   ebp
c000f183:	e8 48 13 ff ff       	call   c00004d0 <memset>
c000f188:	83 c4 10             	add    esp,0x10
c000f18b:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c000f190:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f197:	0f 84 d5 05 00 00    	je     c000f772 <CPU::detectFeatures()+0x616>
c000f19d:	83 ec 0c             	sub    esp,0xc
c000f1a0:	89 ef                	mov    edi,ebp
c000f1a2:	6a 10                	push   0x10
c000f1a4:	e8 6b fe ff ff       	call   c000f014 <CPU::cpuidCheckEDX(unsigned int)>
c000f1a9:	83 e0 01             	and    eax,0x1
c000f1ac:	8d 14 00             	lea    edx,[eax+eax*1]
c000f1af:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1b5:	83 e0 fd             	and    eax,0xfffffffd
c000f1b8:	09 d0                	or     eax,edx
c000f1ba:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1c0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f1c7:	e8 48 fe ff ff       	call   c000f014 <CPU::cpuidCheckEDX(unsigned int)>
c000f1cc:	83 e0 01             	and    eax,0x1
c000f1cf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f1d6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1dc:	83 e0 fb             	and    eax,0xfffffffb
c000f1df:	09 d0                	or     eax,edx
c000f1e1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1e7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f1ee:	e8 21 fe ff ff       	call   c000f014 <CPU::cpuidCheckEDX(unsigned int)>
c000f1f3:	83 e0 01             	and    eax,0x1
c000f1f6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f1fd:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f203:	83 e0 f7             	and    eax,0xfffffff7
c000f206:	09 d0                	or     eax,edx
c000f208:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f20e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f215:	e8 fa fd ff ff       	call   c000f014 <CPU::cpuidCheckEDX(unsigned int)>
c000f21a:	83 e0 01             	and    eax,0x1
c000f21d:	c1 e0 04             	shl    eax,0x4
c000f220:	88 c2                	mov    dl,al
c000f222:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f228:	83 e0 ef             	and    eax,0xffffffef
c000f22b:	09 d0                	or     eax,edx
c000f22d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f233:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f23a:	e8 d5 fd ff ff       	call   c000f014 <CPU::cpuidCheckEDX(unsigned int)>
c000f23f:	83 e0 01             	and    eax,0x1
c000f242:	c1 e0 05             	shl    eax,0x5
c000f245:	88 c2                	mov    dl,al
c000f247:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f24d:	83 e0 df             	and    eax,0xffffffdf
c000f250:	09 d0                	or     eax,edx
c000f252:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f258:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f25f:	e8 b0 fd ff ff       	call   c000f014 <CPU::cpuidCheckEDX(unsigned int)>
c000f264:	83 e0 01             	and    eax,0x1
c000f267:	8d 14 00             	lea    edx,[eax+eax*1]
c000f26a:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f270:	83 e0 fd             	and    eax,0xfffffffd
c000f273:	09 d0                	or     eax,edx
c000f275:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f27b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f282:	e8 8d fd ff ff       	call   c000f014 <CPU::cpuidCheckEDX(unsigned int)>
c000f287:	83 e0 01             	and    eax,0x1
c000f28a:	c1 e0 06             	shl    eax,0x6
c000f28d:	88 c2                	mov    dl,al
c000f28f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f295:	83 e0 bf             	and    eax,0xffffffbf
c000f298:	09 d0                	or     eax,edx
c000f29a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f2a0:	58                   	pop    eax
c000f2a1:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2a5:	50                   	push   eax
c000f2a6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2aa:	50                   	push   eax
c000f2ab:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f2af:	56                   	push   esi
c000f2b0:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2b4:	50                   	push   eax
c000f2b5:	6a 00                	push   0x0
c000f2b7:	e8 d4 fc ff ff       	call   c000ef90 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2bc:	b8 04 00 00 00       	mov    eax,0x4
c000f2c1:	89 c1                	mov    ecx,eax
c000f2c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2c5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f2cb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f2cf:	89 c1                	mov    ecx,eax
c000f2d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2d3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f2d9:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f2dd:	89 c1                	mov    ecx,eax
c000f2df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2e1:	83 c4 18             	add    esp,0x18
c000f2e4:	68 48 e0 01 c0       	push   0xc001e048
c000f2e9:	55                   	push   ebp
c000f2ea:	e8 f1 13 ff ff       	call   c00006e0 <strcmp>
c000f2ef:	83 c4 10             	add    esp,0x10
c000f2f2:	85 c0                	test   eax,eax
c000f2f4:	75 0f                	jne    c000f305 <CPU::detectFeatures()+0x1a9>
c000f2f6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f300:	e9 22 02 00 00       	jmp    c000f527 <CPU::detectFeatures()+0x3cb>
c000f305:	50                   	push   eax
c000f306:	50                   	push   eax
c000f307:	68 55 e0 01 c0       	push   0xc001e055
c000f30c:	55                   	push   ebp
c000f30d:	e8 ce 13 ff ff       	call   c00006e0 <strcmp>
c000f312:	83 c4 10             	add    esp,0x10
c000f315:	85 c0                	test   eax,eax
c000f317:	74 dd                	je     c000f2f6 <CPU::detectFeatures()+0x19a>
c000f319:	50                   	push   eax
c000f31a:	50                   	push   eax
c000f31b:	68 62 e0 01 c0       	push   0xc001e062
c000f320:	55                   	push   ebp
c000f321:	e8 ba 13 ff ff       	call   c00006e0 <strcmp>
c000f326:	83 c4 10             	add    esp,0x10
c000f329:	85 c0                	test   eax,eax
c000f32b:	74 2a                	je     c000f357 <CPU::detectFeatures()+0x1fb>
c000f32d:	50                   	push   eax
c000f32e:	50                   	push   eax
c000f32f:	68 6f e0 01 c0       	push   0xc001e06f
c000f334:	55                   	push   ebp
c000f335:	e8 a6 13 ff ff       	call   c00006e0 <strcmp>
c000f33a:	83 c4 10             	add    esp,0x10
c000f33d:	85 c0                	test   eax,eax
c000f33f:	74 16                	je     c000f357 <CPU::detectFeatures()+0x1fb>
c000f341:	50                   	push   eax
c000f342:	50                   	push   eax
c000f343:	68 7c e0 01 c0       	push   0xc001e07c
c000f348:	55                   	push   ebp
c000f349:	e8 92 13 ff ff       	call   c00006e0 <strcmp>
c000f34e:	83 c4 10             	add    esp,0x10
c000f351:	85 c0                	test   eax,eax
c000f353:	74 48                	je     c000f39d <CPU::detectFeatures()+0x241>
c000f355:	eb 0f                	jmp    c000f366 <CPU::detectFeatures()+0x20a>
c000f357:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f361:	e9 c1 01 00 00       	jmp    c000f527 <CPU::detectFeatures()+0x3cb>
c000f366:	50                   	push   eax
c000f367:	50                   	push   eax
c000f368:	68 89 e0 01 c0       	push   0xc001e089
c000f36d:	55                   	push   ebp
c000f36e:	e8 6d 13 ff ff       	call   c00006e0 <strcmp>
c000f373:	83 c4 10             	add    esp,0x10
c000f376:	85 c0                	test   eax,eax
c000f378:	74 23                	je     c000f39d <CPU::detectFeatures()+0x241>
c000f37a:	57                   	push   edi
c000f37b:	57                   	push   edi
c000f37c:	68 96 e0 01 c0       	push   0xc001e096
c000f381:	55                   	push   ebp
c000f382:	e8 59 13 ff ff       	call   c00006e0 <strcmp>
c000f387:	83 c4 10             	add    esp,0x10
c000f38a:	85 c0                	test   eax,eax
c000f38c:	75 1e                	jne    c000f3ac <CPU::detectFeatures()+0x250>
c000f38e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f398:	e9 8a 01 00 00       	jmp    c000f527 <CPU::detectFeatures()+0x3cb>
c000f39d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f3a7:	e9 7b 01 00 00       	jmp    c000f527 <CPU::detectFeatures()+0x3cb>
c000f3ac:	56                   	push   esi
c000f3ad:	56                   	push   esi
c000f3ae:	68 a3 e0 01 c0       	push   0xc001e0a3
c000f3b3:	55                   	push   ebp
c000f3b4:	e8 27 13 ff ff       	call   c00006e0 <strcmp>
c000f3b9:	83 c4 10             	add    esp,0x10
c000f3bc:	85 c0                	test   eax,eax
c000f3be:	75 0f                	jne    c000f3cf <CPU::detectFeatures()+0x273>
c000f3c0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f3ca:	e9 58 01 00 00       	jmp    c000f527 <CPU::detectFeatures()+0x3cb>
c000f3cf:	51                   	push   ecx
c000f3d0:	51                   	push   ecx
c000f3d1:	68 62 e0 01 c0       	push   0xc001e062
c000f3d6:	55                   	push   ebp
c000f3d7:	e8 04 13 ff ff       	call   c00006e0 <strcmp>
c000f3dc:	83 c4 10             	add    esp,0x10
c000f3df:	85 c0                	test   eax,eax
c000f3e1:	75 0f                	jne    c000f3f2 <CPU::detectFeatures()+0x296>
c000f3e3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f3ed:	e9 35 01 00 00       	jmp    c000f527 <CPU::detectFeatures()+0x3cb>
c000f3f2:	52                   	push   edx
c000f3f3:	52                   	push   edx
c000f3f4:	68 b0 e0 01 c0       	push   0xc001e0b0
c000f3f9:	55                   	push   ebp
c000f3fa:	e8 e1 12 ff ff       	call   c00006e0 <strcmp>
c000f3ff:	83 c4 10             	add    esp,0x10
c000f402:	85 c0                	test   eax,eax
c000f404:	75 0f                	jne    c000f415 <CPU::detectFeatures()+0x2b9>
c000f406:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f410:	e9 12 01 00 00       	jmp    c000f527 <CPU::detectFeatures()+0x3cb>
c000f415:	50                   	push   eax
c000f416:	50                   	push   eax
c000f417:	68 bd e0 01 c0       	push   0xc001e0bd
c000f41c:	55                   	push   ebp
c000f41d:	e8 be 12 ff ff       	call   c00006e0 <strcmp>
c000f422:	83 c4 10             	add    esp,0x10
c000f425:	85 c0                	test   eax,eax
c000f427:	75 0f                	jne    c000f438 <CPU::detectFeatures()+0x2dc>
c000f429:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f433:	e9 ef 00 00 00       	jmp    c000f527 <CPU::detectFeatures()+0x3cb>
c000f438:	50                   	push   eax
c000f439:	50                   	push   eax
c000f43a:	68 ca e0 01 c0       	push   0xc001e0ca
c000f43f:	55                   	push   ebp
c000f440:	e8 9b 12 ff ff       	call   c00006e0 <strcmp>
c000f445:	83 c4 10             	add    esp,0x10
c000f448:	85 c0                	test   eax,eax
c000f44a:	75 0f                	jne    c000f45b <CPU::detectFeatures()+0x2ff>
c000f44c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f456:	e9 cc 00 00 00       	jmp    c000f527 <CPU::detectFeatures()+0x3cb>
c000f45b:	50                   	push   eax
c000f45c:	50                   	push   eax
c000f45d:	68 d7 e0 01 c0       	push   0xc001e0d7
c000f462:	55                   	push   ebp
c000f463:	e8 78 12 ff ff       	call   c00006e0 <strcmp>
c000f468:	83 c4 10             	add    esp,0x10
c000f46b:	85 c0                	test   eax,eax
c000f46d:	75 0f                	jne    c000f47e <CPU::detectFeatures()+0x322>
c000f46f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f479:	e9 a9 00 00 00       	jmp    c000f527 <CPU::detectFeatures()+0x3cb>
c000f47e:	50                   	push   eax
c000f47f:	50                   	push   eax
c000f480:	68 e4 e0 01 c0       	push   0xc001e0e4
c000f485:	55                   	push   ebp
c000f486:	e8 55 12 ff ff       	call   c00006e0 <strcmp>
c000f48b:	83 c4 10             	add    esp,0x10
c000f48e:	85 c0                	test   eax,eax
c000f490:	75 0f                	jne    c000f4a1 <CPU::detectFeatures()+0x345>
c000f492:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f49c:	e9 86 00 00 00       	jmp    c000f527 <CPU::detectFeatures()+0x3cb>
c000f4a1:	50                   	push   eax
c000f4a2:	50                   	push   eax
c000f4a3:	68 f1 e0 01 c0       	push   0xc001e0f1
c000f4a8:	55                   	push   ebp
c000f4a9:	e8 32 12 ff ff       	call   c00006e0 <strcmp>
c000f4ae:	83 c4 10             	add    esp,0x10
c000f4b1:	85 c0                	test   eax,eax
c000f4b3:	75 0c                	jne    c000f4c1 <CPU::detectFeatures()+0x365>
c000f4b5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f4bf:	eb 66                	jmp    c000f527 <CPU::detectFeatures()+0x3cb>
c000f4c1:	50                   	push   eax
c000f4c2:	50                   	push   eax
c000f4c3:	68 fe e0 01 c0       	push   0xc001e0fe
c000f4c8:	55                   	push   ebp
c000f4c9:	e8 12 12 ff ff       	call   c00006e0 <strcmp>
c000f4ce:	83 c4 10             	add    esp,0x10
c000f4d1:	85 c0                	test   eax,eax
c000f4d3:	75 0c                	jne    c000f4e1 <CPU::detectFeatures()+0x385>
c000f4d5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f4df:	eb 46                	jmp    c000f527 <CPU::detectFeatures()+0x3cb>
c000f4e1:	57                   	push   edi
c000f4e2:	57                   	push   edi
c000f4e3:	68 0b e1 01 c0       	push   0xc001e10b
c000f4e8:	55                   	push   ebp
c000f4e9:	e8 f2 11 ff ff       	call   c00006e0 <strcmp>
c000f4ee:	83 c4 10             	add    esp,0x10
c000f4f1:	85 c0                	test   eax,eax
c000f4f3:	74 e0                	je     c000f4d5 <CPU::detectFeatures()+0x379>
c000f4f5:	56                   	push   esi
c000f4f6:	56                   	push   esi
c000f4f7:	68 18 e1 01 c0       	push   0xc001e118
c000f4fc:	55                   	push   ebp
c000f4fd:	e8 de 11 ff ff       	call   c00006e0 <strcmp>
c000f502:	83 c4 10             	add    esp,0x10
c000f505:	85 c0                	test   eax,eax
c000f507:	74 cc                	je     c000f4d5 <CPU::detectFeatures()+0x379>
c000f509:	51                   	push   ecx
c000f50a:	51                   	push   ecx
c000f50b:	68 25 e1 01 c0       	push   0xc001e125
c000f510:	55                   	push   ebp
c000f511:	e8 ca 11 ff ff       	call   c00006e0 <strcmp>
c000f516:	83 c4 10             	add    esp,0x10
c000f519:	85 c0                	test   eax,eax
c000f51b:	74 b8                	je     c000f4d5 <CPU::detectFeatures()+0x379>
c000f51d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f527:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f52c:	0f 86 be 00 00 00    	jbe    c000f5f0 <CPU::detectFeatures()+0x494>
c000f532:	83 ec 0c             	sub    esp,0xc
c000f535:	68 80 00 00 00       	push   0x80
c000f53a:	e8 31 fb ff ff       	call   c000f070 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f53f:	83 e0 01             	and    eax,0x1
c000f542:	c1 e0 06             	shl    eax,0x6
c000f545:	88 c2                	mov    dl,al
c000f547:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f54d:	83 e0 bf             	and    eax,0xffffffbf
c000f550:	09 d0                	or     eax,edx
c000f552:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f558:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f55f:	e8 0c fb ff ff       	call   c000f070 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f564:	83 e0 01             	and    eax,0x1
c000f567:	c1 e0 04             	shl    eax,0x4
c000f56a:	88 c2                	mov    dl,al
c000f56c:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f572:	83 e0 ef             	and    eax,0xffffffef
c000f575:	09 d0                	or     eax,edx
c000f577:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f57d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f584:	e8 e7 fa ff ff       	call   c000f070 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f589:	c1 e0 07             	shl    eax,0x7
c000f58c:	88 c2                	mov    dl,al
c000f58e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f594:	83 e0 7f             	and    eax,0x7f
c000f597:	09 d0                	or     eax,edx
c000f599:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f59f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f5a6:	e8 f3 fa ff ff       	call   c000f09e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5ab:	83 e0 01             	and    eax,0x1
c000f5ae:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f5b5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f5bb:	83 e0 f7             	and    eax,0xfffffff7
c000f5be:	09 d0                	or     eax,edx
c000f5c0:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f5c6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f5cd:	e8 cc fa ff ff       	call   c000f09e <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5d2:	83 c4 10             	add    esp,0x10
c000f5d5:	83 e0 01             	and    eax,0x1
c000f5d8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f5df:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f5e5:	83 e0 fb             	and    eax,0xfffffffb
c000f5e8:	09 d0                	or     eax,edx
c000f5ea:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f5f0:	83 ec 0c             	sub    esp,0xc
c000f5f3:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5f7:	50                   	push   eax
c000f5f8:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5fc:	50                   	push   eax
c000f5fd:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f601:	56                   	push   esi
c000f602:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f606:	50                   	push   eax
c000f607:	6a 01                	push   0x1
c000f609:	e8 82 f9 ff ff       	call   c000ef90 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f60e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f612:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f618:	88 ca                	mov    dl,cl
c000f61a:	83 e0 f0             	and    eax,0xfffffff0
c000f61d:	83 e2 0f             	and    edx,0xf
c000f620:	09 d0                	or     eax,edx
c000f622:	88 ca                	mov    dl,cl
c000f624:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f62a:	c0 ea 04             	shr    dl,0x4
c000f62d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f631:	0f b6 c2             	movzx  eax,dl
c000f634:	83 c4 20             	add    esp,0x20
c000f637:	c1 e0 06             	shl    eax,0x6
c000f63a:	89 c7                	mov    edi,eax
c000f63c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f642:	66 25 3f c0          	and    ax,0xc03f
c000f646:	09 f8                	or     eax,edi
c000f648:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f64f:	89 c8                	mov    eax,ecx
c000f651:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f658:	c1 e8 08             	shr    eax,0x8
c000f65b:	83 e5 3f             	and    ebp,0x3f
c000f65e:	83 e0 0f             	and    eax,0xf
c000f661:	89 c7                	mov    edi,eax
c000f663:	c1 e7 06             	shl    edi,0x6
c000f666:	09 ef                	or     edi,ebp
c000f668:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f66f:	89 fa                	mov    edx,edi
c000f671:	83 e5 c0             	and    ebp,0xffffffc0
c000f674:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f67a:	88 c2                	mov    dl,al
c000f67c:	c0 ea 02             	shr    dl,0x2
c000f67f:	89 d7                	mov    edi,edx
c000f681:	09 ef                	or     edi,ebp
c000f683:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f689:	89 fa                	mov    edx,edi
c000f68b:	83 e5 cf             	and    ebp,0xffffffcf
c000f68e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f694:	89 cf                	mov    edi,ecx
c000f696:	c1 ef 0c             	shr    edi,0xc
c000f699:	83 e7 03             	and    edi,0x3
c000f69c:	c1 e7 04             	shl    edi,0x4
c000f69f:	09 ef                	or     edi,ebp
c000f6a1:	3c 06                	cmp    al,0x6
c000f6a3:	89 fa                	mov    edx,edi
c000f6a5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f6ab:	74 04                	je     c000f6b1 <CPU::detectFeatures()+0x555>
c000f6ad:	3c 0f                	cmp    al,0xf
c000f6af:	75 5c                	jne    c000f70d <CPU::detectFeatures()+0x5b1>
c000f6b1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f6b5:	89 cf                	mov    edi,ecx
c000f6b7:	c1 ef 10             	shr    edi,0x10
c000f6ba:	c1 e7 04             	shl    edi,0x4
c000f6bd:	09 fa                	or     edx,edi
c000f6bf:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f6c5:	0f b6 d2             	movzx  edx,dl
c000f6c8:	66 81 e7 3f c0       	and    di,0xc03f
c000f6cd:	c1 e2 06             	shl    edx,0x6
c000f6d0:	09 fa                	or     edx,edi
c000f6d2:	3c 0f                	cmp    al,0xf
c000f6d4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f6db:	75 30                	jne    c000f70d <CPU::detectFeatures()+0x5b1>
c000f6dd:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f6e3:	c1 e9 14             	shr    ecx,0x14
c000f6e6:	83 e0 3f             	and    eax,0x3f
c000f6e9:	83 c1 0f             	add    ecx,0xf
c000f6ec:	88 ca                	mov    dl,cl
c000f6ee:	c0 e9 02             	shr    cl,0x2
c000f6f1:	c1 e2 06             	shl    edx,0x6
c000f6f4:	09 d0                	or     eax,edx
c000f6f6:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f6fc:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f702:	83 e0 c0             	and    eax,0xffffffc0
c000f705:	09 c1                	or     ecx,eax
c000f707:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f70d:	83 ec 0c             	sub    esp,0xc
c000f710:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f717:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f71b:	50                   	push   eax
c000f71c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f720:	55                   	push   ebp
c000f721:	56                   	push   esi
c000f722:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f726:	57                   	push   edi
c000f727:	68 00 00 00 80       	push   0x80000000
c000f72c:	e8 5f f8 ff ff       	call   c000ef90 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f731:	83 c4 20             	add    esp,0x20
c000f734:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f73c:	76 22                	jbe    c000f760 <CPU::detectFeatures()+0x604>
c000f73e:	83 ec 0c             	sub    esp,0xc
c000f741:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f745:	50                   	push   eax
c000f746:	55                   	push   ebp
c000f747:	56                   	push   esi
c000f748:	57                   	push   edi
c000f749:	68 01 00 00 80       	push   0x80000001
c000f74e:	e8 3d f8 ff ff       	call   c000ef90 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f753:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f75d:	83 c4 20             	add    esp,0x20
c000f760:	52                   	push   edx
c000f761:	52                   	push   edx
c000f762:	68 31 e1 01 c0       	push   0xc001e131
c000f767:	53                   	push   ebx
c000f768:	e8 3d c3 ff ff       	call   c000baaa <Device::setName(char const*)>
c000f76d:	83 c4 10             	add    esp,0x10
c000f770:	eb 67                	jmp    c000f7d9 <CPU::detectFeatures()+0x67d>
c000f772:	50                   	push   eax
c000f773:	50                   	push   eax
c000f774:	68 96 e0 01 c0       	push   0xc001e096
c000f779:	55                   	push   ebp
c000f77a:	e8 81 0e ff ff       	call   c0000600 <strcpy>
c000f77f:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f789:	e8 35 0a ff ff       	call   c00001c3 <is486>
c000f78e:	83 c4 10             	add    esp,0x10
c000f791:	85 c0                	test   eax,eax
c000f793:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f799:	74 1d                	je     c000f7b8 <CPU::detectFeatures()+0x65c>
c000f79b:	83 c8 07             	or     eax,0x7
c000f79e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f7a4:	0f 20 c0             	mov    eax,cr0
c000f7a7:	83 e0 14             	and    eax,0x14
c000f7aa:	83 f8 04             	cmp    eax,0x4
c000f7ad:	75 0e                	jne    c000f7bd <CPU::detectFeatures()+0x661>
c000f7af:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f7b6:	eb 21                	jmp    c000f7d9 <CPU::detectFeatures()+0x67d>
c000f7b8:	83 e0 f8             	and    eax,0xfffffff8
c000f7bb:	eb e1                	jmp    c000f79e <CPU::detectFeatures()+0x642>
c000f7bd:	e8 dc 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7c2:	83 e0 01             	and    eax,0x1
c000f7c5:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7c8:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7ce:	83 e0 fd             	and    eax,0xfffffffd
c000f7d1:	09 d0                	or     eax,edx
c000f7d3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7d9:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f7e0:	74 0e                	je     c000f7f0 <CPU::detectFeatures()+0x694>
c000f7e2:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c000f7e7:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f7ee:	eb 20                	jmp    c000f810 <CPU::detectFeatures()+0x6b4>
c000f7f0:	e8 a9 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7f5:	83 e0 01             	and    eax,0x1
c000f7f8:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7fb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f801:	83 e0 fd             	and    eax,0xfffffffd
c000f804:	09 d0                	or     eax,edx
c000f806:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f80c:	a8 02                	test   al,0x2
c000f80e:	75 d2                	jne    c000f7e2 <CPU::detectFeatures()+0x686>
c000f810:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f817:	83 c4 2c             	add    esp,0x2c
c000f81a:	5b                   	pop    ebx
c000f81b:	5e                   	pop    esi
c000f81c:	5f                   	pop    edi
c000f81d:	5d                   	pop    ebp
c000f81e:	c3                   	ret    
c000f81f:	90                   	nop

c000f820 <CPU::setupSMEP()>:
c000f820:	0f 20 e0             	mov    eax,cr4
c000f823:	0d 00 00 10 00       	or     eax,0x100000
c000f828:	0f 22 e0             	mov    cr4,eax
c000f82b:	c3                   	ret    

c000f82c <CPU::setupUMIP()>:
c000f82c:	0f 20 e0             	mov    eax,cr4
c000f82f:	80 cc 08             	or     ah,0x8
c000f832:	0f 22 e0             	mov    cr4,eax
c000f835:	c3                   	ret    

c000f836 <CPU::setupTSC()>:
c000f836:	0f 20 e0             	mov    eax,cr4
c000f839:	83 c8 04             	or     eax,0x4
c000f83c:	0f 22 e0             	mov    cr4,eax
c000f83f:	c3                   	ret    

c000f840 <CPU::setupLargePages()>:
c000f840:	0f 20 e0             	mov    eax,cr4
c000f843:	83 c8 10             	or     eax,0x10
c000f846:	0f 22 e0             	mov    cr4,eax
c000f849:	c3                   	ret    

c000f84a <CPU::setupPAT()>:
c000f84a:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c000f84f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f856:	74 2c                	je     c000f884 <CPU::setupPAT()+0x3a>
c000f858:	53                   	push   ebx
c000f859:	83 ec 10             	sub    esp,0x10
c000f85c:	68 77 02 00 00       	push   0x277
c000f861:	50                   	push   eax
c000f862:	e8 8b 75 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f867:	83 e2 f8             	and    edx,0xfffffff8
c000f86a:	83 ca 01             	or     edx,0x1
c000f86d:	52                   	push   edx
c000f86e:	50                   	push   eax
c000f86f:	68 77 02 00 00       	push   0x277
c000f874:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c000f87a:	e8 9f 75 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f87f:	83 c4 28             	add    esp,0x28
c000f882:	5b                   	pop    ebx
c000f883:	c3                   	ret    
c000f884:	c3                   	ret    
c000f885:	90                   	nop

c000f886 <CPU::setupMTRR()>:
c000f886:	c3                   	ret    
c000f887:	90                   	nop

c000f888 <CPU::setupGlobalPages()>:
c000f888:	0f 20 e0             	mov    eax,cr4
c000f88b:	0c 80                	or     al,0x80
c000f88d:	0f 22 e0             	mov    cr4,eax
c000f890:	c3                   	ret    
c000f891:	90                   	nop

c000f892 <CPU::allowUsermodeDataAccess()>:
c000f892:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f896:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f89d:	74 03                	je     c000f8a2 <CPU::allowUsermodeDataAccess()+0x10>
c000f89f:	0f 01 cb             	stac   
c000f8a2:	c3                   	ret    
c000f8a3:	90                   	nop

c000f8a4 <CPU::prohibitUsermodeDataAccess()>:
c000f8a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8a8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f8af:	74 03                	je     c000f8b4 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f8b1:	0f 01 ca             	clac   
c000f8b4:	c3                   	ret    
c000f8b5:	90                   	nop

c000f8b6 <CPU::setupSMAP()>:
c000f8b6:	0f 20 e0             	mov    eax,cr4
c000f8b9:	0d 00 00 20 00       	or     eax,0x200000
c000f8be:	0f 22 e0             	mov    cr4,eax
c000f8c1:	eb e1                	jmp    c000f8a4 <CPU::prohibitUsermodeDataAccess()>
c000f8c3:	90                   	nop

c000f8c4 <CPU::setupFeatures()>:
c000f8c4:	53                   	push   ebx
c000f8c5:	83 ec 08             	sub    esp,0x8
c000f8c8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8cc:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f8d3:	74 18                	je     c000f8ed <CPU::setupFeatures()+0x29>
c000f8d5:	83 ec 0c             	sub    esp,0xc
c000f8d8:	68 3d e1 01 c0       	push   0xc001e13d
c000f8dd:	e8 fe ab ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000f8e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8e5:	e8 42 ff ff ff       	call   c000f82c <CPU::setupUMIP()>
c000f8ea:	83 c4 10             	add    esp,0x10
c000f8ed:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f8f4:	74 18                	je     c000f90e <CPU::setupFeatures()+0x4a>
c000f8f6:	83 ec 0c             	sub    esp,0xc
c000f8f9:	68 47 e1 01 c0       	push   0xc001e147
c000f8fe:	e8 dd ab ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000f903:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f906:	e8 2b ff ff ff       	call   c000f836 <CPU::setupTSC()>
c000f90b:	83 c4 10             	add    esp,0x10
c000f90e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f915:	74 18                	je     c000f92f <CPU::setupFeatures()+0x6b>
c000f917:	83 ec 0c             	sub    esp,0xc
c000f91a:	68 50 e1 01 c0       	push   0xc001e150
c000f91f:	e8 bc ab ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000f924:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f927:	e8 14 ff ff ff       	call   c000f840 <CPU::setupLargePages()>
c000f92c:	83 c4 10             	add    esp,0x10
c000f92f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f936:	74 18                	je     c000f950 <CPU::setupFeatures()+0x8c>
c000f938:	83 ec 0c             	sub    esp,0xc
c000f93b:	68 59 e1 01 c0       	push   0xc001e159
c000f940:	e8 9b ab ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000f945:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f948:	e8 3b ff ff ff       	call   c000f888 <CPU::setupGlobalPages()>
c000f94d:	83 c4 10             	add    esp,0x10
c000f950:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f957:	74 18                	je     c000f971 <CPU::setupFeatures()+0xad>
c000f959:	83 ec 0c             	sub    esp,0xc
c000f95c:	68 6b e1 01 c0       	push   0xc001e16b
c000f961:	e8 7a ab ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000f966:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f969:	e8 dc fe ff ff       	call   c000f84a <CPU::setupPAT()>
c000f96e:	83 c4 10             	add    esp,0x10
c000f971:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f978:	74 11                	je     c000f98b <CPU::setupFeatures()+0xc7>
c000f97a:	c7 44 24 10 74 e1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e174
c000f982:	83 c4 08             	add    esp,0x8
c000f985:	5b                   	pop    ebx
c000f986:	e9 55 ab ff ff       	jmp    c000a4e0 <Dbg::kprintf(char const*, ...)>
c000f98b:	83 c4 08             	add    esp,0x8
c000f98e:	5b                   	pop    ebx
c000f98f:	c3                   	ret    

c000f990 <CPU::open(int, int, void*)>:
c000f990:	57                   	push   edi
c000f991:	56                   	push   esi
c000f992:	53                   	push   ebx
c000f993:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f997:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f99b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f9a1:	83 ec 0c             	sub    esp,0xc
c000f9a4:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f9aa:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000f9b0:	50                   	push   eax
c000f9b1:	e8 26 77 ff ff       	call   c00070dc <GDT::setup()>
c000f9b6:	83 c4 0c             	add    esp,0xc
c000f9b9:	6a 00                	push   0x0
c000f9bb:	68 ef be ad de       	push   0xdeadbeef
c000f9c0:	57                   	push   edi
c000f9c1:	e8 4e 92 ff ff       	call   c0008c14 <TSS::setup(unsigned long, unsigned long)>
c000f9c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f9c9:	e8 26 92 ff ff       	call   c0008bf4 <TSS::flush()>
c000f9ce:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000f9d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9d7:	e8 4e 79 ff ff       	call   c000732a <IDT::setup()>
c000f9dc:	b8 00 04 00 00       	mov    eax,0x400
c000f9e1:	0f 23 f8             	mov    db7,eax
c000f9e4:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000f9ee:	e8 a2 80 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000f9f3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000f9f9:	89 30                	mov    DWORD PTR [eax],esi
c000f9fb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fa01:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fa04:	58                   	pop    eax
c000fa05:	5a                   	pop    edx
c000fa06:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fa0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fa10:	e8 e9 a1 ff ff       	call   c0009bfe <VAS::setCPUSpecific(unsigned long)>
c000fa15:	c7 04 24 7e e1 01 c0 	mov    DWORD PTR [esp],0xc001e17e
c000fa1c:	e8 c6 00 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c000fa21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa24:	e8 33 f7 ff ff       	call   c000f15c <CPU::detectFeatures()>
c000fa29:	c7 04 24 a1 e1 01 c0 	mov    DWORD PTR [esp],0xc001e1a1
c000fa30:	e8 b2 00 00 00       	call   c000fae7 <KeSetBootMessage(char const*)>
c000fa35:	e8 7e 58 00 00       	call   c00152b8 <HalInitialise()>
c000fa3a:	a1 10 05 02 c0       	mov    eax,ds:0xc0020510
c000fa3f:	83 e0 10             	and    eax,0x10
c000fa42:	83 f8 01             	cmp    eax,0x1
c000fa45:	19 c0                	sbb    eax,eax
c000fa47:	83 e0 46             	and    eax,0x46
c000fa4a:	83 c0 1e             	add    eax,0x1e
c000fa4d:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa50:	e8 40 d7 ff ff       	call   c000d195 <setupTimer(int)>
c000fa55:	83 c4 10             	add    esp,0x10
c000fa58:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fa5e:	f6 05 10 05 02 c0 20 	test   BYTE PTR ds:0xc0020510,0x20
c000fa65:	74 0c                	je     c000fa73 <CPU::open(int, int, void*)+0xe3>
c000fa67:	83 ec 0c             	sub    esp,0xc
c000fa6a:	53                   	push   ebx
c000fa6b:	e8 54 fe ff ff       	call   c000f8c4 <CPU::setupFeatures()>
c000fa70:	83 c4 10             	add    esp,0x10
c000fa73:	5b                   	pop    ebx
c000fa74:	31 c0                	xor    eax,eax
c000fa76:	5e                   	pop    esi
c000fa77:	5f                   	pop    edi
c000fa78:	c3                   	ret    

c000fa79 <KeDisplaySplashScreen()>:
c000fa79:	55                   	push   ebp
c000fa7a:	bd 05 00 00 00       	mov    ebp,0x5
c000fa7f:	57                   	push   edi
c000fa80:	bf 40 f2 01 c0       	mov    edi,0xc001f240
c000fa85:	56                   	push   esi
c000fa86:	be 0a 00 00 00       	mov    esi,0xa
c000fa8b:	53                   	push   ebx
c000fa8c:	31 db                	xor    ebx,ebx
c000fa8e:	83 ec 0c             	sub    esp,0xc
c000fa91:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fa94:	84 c0                	test   al,al
c000fa96:	74 47                	je     c000fadf <KeDisplaySplashScreen()+0x66>
c000fa98:	80 bb 76 f2 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe0d8a],0xdb
c000fa9f:	75 13                	jne    c000fab4 <KeDisplaySplashScreen()+0x3b>
c000faa1:	0f b6 93 75 f2 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe0d8b]
c000faa8:	83 e2 fe             	and    edx,0xfffffffe
c000faab:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fab1:	75 01                	jne    c000fab4 <KeDisplaySplashScreen()+0x3b>
c000fab3:	46                   	inc    esi
c000fab4:	3c 0d                	cmp    al,0xd
c000fab6:	74 24                	je     c000fadc <KeDisplaySplashScreen()+0x63>
c000fab8:	3c 0a                	cmp    al,0xa
c000faba:	75 0a                	jne    c000fac6 <KeDisplaySplashScreen()+0x4d>
c000fabc:	45                   	inc    ebp
c000fabd:	be 0a 00 00 00       	mov    esi,0xa
c000fac2:	31 db                	xor    ebx,ebx
c000fac4:	eb 16                	jmp    c000fadc <KeDisplaySplashScreen()+0x63>
c000fac6:	83 ec 0c             	sub    esp,0xc
c000fac9:	8d 14 33             	lea    edx,[ebx+esi*1]
c000facc:	55                   	push   ebp
c000facd:	43                   	inc    ebx
c000face:	52                   	push   edx
c000facf:	6a 00                	push   0x0
c000fad1:	6a 0e                	push   0xe
c000fad3:	50                   	push   eax
c000fad4:	e8 43 64 00 00       	call   c0015f1c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fad9:	83 c4 20             	add    esp,0x20
c000fadc:	47                   	inc    edi
c000fadd:	eb b2                	jmp    c000fa91 <KeDisplaySplashScreen()+0x18>
c000fadf:	83 c4 0c             	add    esp,0xc
c000fae2:	5b                   	pop    ebx
c000fae3:	5e                   	pop    esi
c000fae4:	5f                   	pop    edi
c000fae5:	5d                   	pop    ebp
c000fae6:	c3                   	ret    

c000fae7 <KeSetBootMessage(char const*)>:
c000fae7:	57                   	push   edi
c000fae8:	56                   	push   esi
c000fae9:	53                   	push   ebx
c000faea:	81 ec a4 00 00 00    	sub    esp,0xa4
c000faf0:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000faf7:	68 9e 00 00 00       	push   0x9e
c000fafc:	6a 00                	push   0x0
c000fafe:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fb02:	56                   	push   esi
c000fb03:	e8 c8 09 ff ff       	call   c00004d0 <memset>
c000fb08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb0b:	e8 30 0a ff ff       	call   c0000540 <strlen>
c000fb10:	ba 50 00 00 00       	mov    edx,0x50
c000fb15:	83 c4 10             	add    esp,0x10
c000fb18:	29 c2                	sub    edx,eax
c000fb1a:	31 c9                	xor    ecx,ecx
c000fb1c:	83 e2 fe             	and    edx,0xfffffffe
c000fb1f:	01 f2                	add    edx,esi
c000fb21:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fb26:	84 c0                	test   al,al
c000fb28:	74 0a                	je     c000fb34 <KeSetBootMessage(char const*)+0x4d>
c000fb2a:	80 cc 0f             	or     ah,0xf
c000fb2d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fb31:	41                   	inc    ecx
c000fb32:	eb ed                	jmp    c000fb21 <KeSetBootMessage(char const*)+0x3a>
c000fb34:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fb39:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fb3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb40:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fb46:	5b                   	pop    ebx
c000fb47:	5e                   	pop    esi
c000fb48:	5f                   	pop    edi
c000fb49:	c3                   	ret    

c000fb4a <EnvVarContainer::getEnv(char const*)>:
c000fb4a:	57                   	push   edi
c000fb4b:	56                   	push   esi
c000fb4c:	53                   	push   ebx
c000fb4d:	31 db                	xor    ebx,ebx
c000fb4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb53:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fb55:	7e 2b                	jle    c000fb82 <EnvVarContainer::getEnv(char const*)+0x38>
c000fb57:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fb5e:	50                   	push   eax
c000fb5f:	50                   	push   eax
c000fb60:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb63:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fb66:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fb6a:	e8 71 0b ff ff       	call   c00006e0 <strcmp>
c000fb6f:	83 c4 10             	add    esp,0x10
c000fb72:	85 c0                	test   eax,eax
c000fb74:	75 09                	jne    c000fb7f <EnvVarContainer::getEnv(char const*)+0x35>
c000fb76:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb79:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fb7d:	eb 05                	jmp    c000fb84 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fb7f:	43                   	inc    ebx
c000fb80:	eb d1                	jmp    c000fb53 <EnvVarContainer::getEnv(char const*)+0x9>
c000fb82:	31 c0                	xor    eax,eax
c000fb84:	5b                   	pop    ebx
c000fb85:	5e                   	pop    esi
c000fb86:	5f                   	pop    edi
c000fb87:	c3                   	ret    

c000fb88 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fb88:	55                   	push   ebp
c000fb89:	57                   	push   edi
c000fb8a:	56                   	push   esi
c000fb8b:	53                   	push   ebx
c000fb8c:	83 ec 28             	sub    esp,0x28
c000fb8f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fb93:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fb97:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fb9b:	56                   	push   esi
c000fb9c:	e8 9f 09 ff ff       	call   c0000540 <strlen>
c000fba1:	40                   	inc    eax
c000fba2:	89 04 24             	mov    DWORD PTR [esp],eax
c000fba5:	e8 0f 7c ff ff       	call   c00077b9 <malloc>
c000fbaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbb1:	e8 8a 09 ff ff       	call   c0000540 <strlen>
c000fbb6:	40                   	inc    eax
c000fbb7:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbba:	e8 fa 7b ff ff       	call   c00077b9 <malloc>
c000fbbf:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fbc6:	e8 75 09 ff ff       	call   c0000540 <strlen>
c000fbcb:	83 c4 0c             	add    esp,0xc
c000fbce:	40                   	inc    eax
c000fbcf:	50                   	push   eax
c000fbd0:	6a 00                	push   0x0
c000fbd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fbd6:	e8 f5 08 ff ff       	call   c00004d0 <memset>
c000fbdb:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbde:	e8 5d 09 ff ff       	call   c0000540 <strlen>
c000fbe3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fbe7:	8d 48 01             	lea    ecx,[eax+0x1]
c000fbea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbef:	89 de                	mov    esi,ebx
c000fbf1:	e8 4a 09 ff ff       	call   c0000540 <strlen>
c000fbf6:	83 c4 0c             	add    esp,0xc
c000fbf9:	40                   	inc    eax
c000fbfa:	50                   	push   eax
c000fbfb:	6a 00                	push   0x0
c000fbfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc01:	e8 ca 08 ff ff       	call   c00004d0 <memset>
c000fc06:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc09:	e8 32 09 ff ff       	call   c0000540 <strlen>
c000fc0e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fc12:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc17:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fc1a:	40                   	inc    eax
c000fc1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fc1e:	c1 e0 03             	shl    eax,0x3
c000fc21:	5a                   	pop    edx
c000fc22:	59                   	pop    ecx
c000fc23:	50                   	push   eax
c000fc24:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fc27:	e8 79 7b ff ff       	call   c00077a5 <realloc>
c000fc2c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fc30:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fc33:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fc36:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fc3a:	b9 08 00 00 00       	mov    ecx,0x8
c000fc3f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc41:	83 c4 2c             	add    esp,0x2c
c000fc44:	5b                   	pop    ebx
c000fc45:	5e                   	pop    esi
c000fc46:	5f                   	pop    edi
c000fc47:	5d                   	pop    ebp
c000fc48:	c3                   	ret    
c000fc49:	90                   	nop

c000fc4a <EnvVarContainer::deleteEnv(char const*)>:
c000fc4a:	c3                   	ret    
c000fc4b:	90                   	nop

c000fc4c <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fc4c:	55                   	push   ebp
c000fc4d:	57                   	push   edi
c000fc4e:	56                   	push   esi
c000fc4f:	53                   	push   ebx
c000fc50:	81 ec 38 01 00 00    	sub    esp,0x138
c000fc56:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fc5d:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fc64:	68 14 01 00 00       	push   0x114
c000fc69:	e8 4b 7b ff ff       	call   c00077b9 <malloc>
c000fc6e:	83 c4 0c             	add    esp,0xc
c000fc71:	89 c3                	mov    ebx,eax
c000fc73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fc76:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc7d:	50                   	push   eax
c000fc7e:	e8 d3 ad ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c000fc83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc86:	e8 f9 b0 ff ff       	call   c000ad84 <File::exists()>
c000fc8b:	83 c4 10             	add    esp,0x10
c000fc8e:	84 c0                	test   al,al
c000fc90:	75 31                	jne    c000fcc3 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fc92:	50                   	push   eax
c000fc93:	50                   	push   eax
c000fc94:	6a 12                	push   0x12
c000fc96:	53                   	push   ebx
c000fc97:	e8 7a ae ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c000fc9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fc9e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fca1:	89 34 24             	mov    DWORD PTR [esp],esi
c000fca4:	e8 97 08 ff ff       	call   c0000540 <strlen>
c000fca9:	5a                   	pop    edx
c000fcaa:	31 d2                	xor    edx,edx
c000fcac:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fcb0:	51                   	push   ecx
c000fcb1:	56                   	push   esi
c000fcb2:	52                   	push   edx
c000fcb3:	50                   	push   eax
c000fcb4:	53                   	push   ebx
c000fcb5:	ff d7                	call   edi
c000fcb7:	83 c4 14             	add    esp,0x14
c000fcba:	53                   	push   ebx
c000fcbb:	e8 b4 ae ff ff       	call   c000ab74 <File::close()>
c000fcc0:	83 c4 10             	add    esp,0x10
c000fcc3:	56                   	push   esi
c000fcc4:	31 f6                	xor    esi,esi
c000fcc6:	68 00 01 00 00       	push   0x100
c000fccb:	6a 00                	push   0x0
c000fccd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fcd1:	50                   	push   eax
c000fcd2:	e8 f9 07 ff ff       	call   c00004d0 <memset>
c000fcd7:	5f                   	pop    edi
c000fcd8:	58                   	pop    eax
c000fcd9:	6a 01                	push   0x1
c000fcdb:	53                   	push   ebx
c000fcdc:	e8 35 ae ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c000fce1:	83 c4 10             	add    esp,0x10
c000fce4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fcec:	83 ec 0c             	sub    esp,0xc
c000fcef:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fcf1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fcf5:	51                   	push   ecx
c000fcf6:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fcfa:	52                   	push   edx
c000fcfb:	6a 00                	push   0x0
c000fcfd:	6a 01                	push   0x1
c000fcff:	53                   	push   ebx
c000fd00:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd03:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fd07:	83 c4 20             	add    esp,0x20
c000fd0a:	3c 0d                	cmp    al,0xd
c000fd0c:	0f 84 09 01 00 00    	je     c000fe1b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fd12:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd17:	0f 84 ef 00 00 00    	je     c000fe0c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd1d:	3c 0a                	cmp    al,0xa
c000fd1f:	74 13                	je     c000fd34 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd21:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fd26:	74 0c                	je     c000fd34 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd28:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fd2e:	0f 8e d8 00 00 00    	jle    c000fe0c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd38:	83 ec 0c             	sub    esp,0xc
c000fd3b:	8d 78 01             	lea    edi,[eax+0x1]
c000fd3e:	57                   	push   edi
c000fd3f:	e8 75 7a ff ff       	call   c00077b9 <malloc>
c000fd44:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fd48:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd4c:	8d 56 04             	lea    edx,[esi+0x4]
c000fd4f:	89 14 24             	mov    DWORD PTR [esp],edx
c000fd52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd56:	e8 5e 7a ff ff       	call   c00077b9 <malloc>
c000fd5b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fd5f:	83 c4 0c             	add    esp,0xc
c000fd62:	57                   	push   edi
c000fd63:	6a 00                	push   0x0
c000fd65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd69:	e8 62 07 ff ff       	call   c00004d0 <memset>
c000fd6e:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd72:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fd76:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fd7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd7c:	83 c4 0c             	add    esp,0xc
c000fd7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd83:	52                   	push   edx
c000fd84:	6a 00                	push   0x0
c000fd86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fd8a:	e8 41 07 ff ff       	call   c00004d0 <memset>
c000fd8f:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd93:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fd97:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd9a:	e8 a1 07 ff ff       	call   c0000540 <strlen>
c000fd9f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fda3:	89 c1                	mov    ecx,eax
c000fda5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fda7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fdaa:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fdad:	40                   	inc    eax
c000fdae:	83 c4 10             	add    esp,0x10
c000fdb1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fdb4:	85 d2                	test   edx,edx
c000fdb6:	75 0c                	jne    c000fdc4 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fdb8:	83 ec 0c             	sub    esp,0xc
c000fdbb:	6a 08                	push   0x8
c000fdbd:	e8 f7 79 ff ff       	call   c00077b9 <malloc>
c000fdc2:	eb 0c                	jmp    c000fdd0 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fdc4:	c1 e0 03             	shl    eax,0x3
c000fdc7:	51                   	push   ecx
c000fdc8:	51                   	push   ecx
c000fdc9:	50                   	push   eax
c000fdca:	52                   	push   edx
c000fdcb:	e8 d5 79 ff ff       	call   c00077a5 <realloc>
c000fdd0:	83 c4 10             	add    esp,0x10
c000fdd3:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fdd6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fdd9:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fddc:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fde0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fde4:	b9 08 00 00 00       	mov    ecx,0x8
c000fde9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdeb:	31 f6                	xor    esi,esi
c000fded:	50                   	push   eax
c000fdee:	68 00 01 00 00       	push   0x100
c000fdf3:	6a 00                	push   0x0
c000fdf5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fdf9:	50                   	push   eax
c000fdfa:	e8 d1 06 ff ff       	call   c00004d0 <memset>
c000fdff:	83 c4 10             	add    esp,0x10
c000fe02:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe0a:	eb 0f                	jmp    c000fe1b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe0c:	3c 3d                	cmp    al,0x3d
c000fe0e:	74 07                	je     c000fe17 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fe10:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fe14:	46                   	inc    esi
c000fe15:	eb 04                	jmp    c000fe1b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe17:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fe1b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe20:	0f 85 c6 fe ff ff    	jne    c000fcec <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fe26:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fe2c:	5b                   	pop    ebx
c000fe2d:	5e                   	pop    esi
c000fe2e:	5f                   	pop    edi
c000fe2f:	5d                   	pop    ebp
c000fe30:	c3                   	ret    
c000fe31:	90                   	nop

c000fe32 <EnvVarContainer::__loadSystem()>:
c000fe32:	83 ec 10             	sub    esp,0x10
c000fe35:	68 a0 f3 01 c0       	push   0xc001f3a0
c000fe3a:	68 e4 e1 01 c0       	push   0xc001e1e4
c000fe3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe43:	e8 04 fe ff ff       	call   c000fc4c <EnvVarContainer::loadFrom(char const*, char const*)>
c000fe48:	83 c4 1c             	add    esp,0x1c
c000fe4b:	c3                   	ret    

c000fe4c <EnvVarContainer::__loadUser()>:
c000fe4c:	c3                   	ret    
c000fe4d:	90                   	nop

c000fe4e <EnvVarContainer::EnvVarContainer(Process*)>:
c000fe4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fe58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe60:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fe63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe6e:	90                   	nop
c000fe6f:	c3                   	ret    

c000fe70 <EnvVarContainer::~EnvVarContainer()>:
c000fe70:	83 ec 0c             	sub    esp,0xc
c000fe73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe77:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe7a:	85 c0                	test   eax,eax
c000fe7c:	74 1d                	je     c000fe9b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe82:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe84:	85 c0                	test   eax,eax
c000fe86:	74 13                	je     c000fe9b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe8f:	83 ec 0c             	sub    esp,0xc
c000fe92:	50                   	push   eax
c000fe93:	e8 31 79 ff ff       	call   c00077c9 <free>
c000fe98:	83 c4 10             	add    esp,0x10
c000fe9b:	90                   	nop
c000fe9c:	83 c4 0c             	add    esp,0xc
c000fe9f:	c3                   	ret    

c000fea0 <Krnl::getEnv(Process*, char const*)>:
c000fea0:	53                   	push   ebx
c000fea1:	83 ec 08             	sub    esp,0x8
c000fea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000feac:	39 05 d0 37 02 c0    	cmp    DWORD PTR ds:0xc00237d0,eax
c000feb2:	74 04                	je     c000feb8 <Krnl::getEnv(Process*, char const*)+0x18>
c000feb4:	85 c0                	test   eax,eax
c000feb6:	75 0b                	jne    c000fec3 <Krnl::getEnv(Process*, char const*)+0x23>
c000feb8:	a1 70 2f 02 c0       	mov    eax,ds:0xc0022f70
c000febd:	85 c0                	test   eax,eax
c000febf:	75 19                	jne    c000feda <Krnl::getEnv(Process*, char const*)+0x3a>
c000fec1:	eb 27                	jmp    c000feea <Krnl::getEnv(Process*, char const*)+0x4a>
c000fec3:	52                   	push   edx
c000fec4:	52                   	push   edx
c000fec5:	53                   	push   ebx
c000fec6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000fecc:	e8 79 fc ff ff       	call   c000fb4a <EnvVarContainer::getEnv(char const*)>
c000fed1:	83 c4 10             	add    esp,0x10
c000fed4:	85 c0                	test   eax,eax
c000fed6:	75 28                	jne    c000ff00 <Krnl::getEnv(Process*, char const*)+0x60>
c000fed8:	eb de                	jmp    c000feb8 <Krnl::getEnv(Process*, char const*)+0x18>
c000feda:	52                   	push   edx
c000fedb:	52                   	push   edx
c000fedc:	53                   	push   ebx
c000fedd:	50                   	push   eax
c000fede:	e8 67 fc ff ff       	call   c000fb4a <EnvVarContainer::getEnv(char const*)>
c000fee3:	83 c4 10             	add    esp,0x10
c000fee6:	85 c0                	test   eax,eax
c000fee8:	75 16                	jne    c000ff00 <Krnl::getEnv(Process*, char const*)+0x60>
c000feea:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000feee:	a1 74 2f 02 c0       	mov    eax,ds:0xc0022f74
c000fef3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fef7:	83 c4 08             	add    esp,0x8
c000fefa:	5b                   	pop    ebx
c000fefb:	e9 4a fc ff ff       	jmp    c000fb4a <EnvVarContainer::getEnv(char const*)>
c000ff00:	83 c4 08             	add    esp,0x8
c000ff03:	5b                   	pop    ebx
c000ff04:	c3                   	ret    

c000ff05 <Krnl::setEnvSystem(char const*, char const*)>:
c000ff05:	83 ec 10             	sub    esp,0x10
c000ff08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff10:	ff 35 74 2f 02 c0    	push   DWORD PTR ds:0xc0022f74
c000ff16:	e8 6d fc ff ff       	call   c000fb88 <EnvVarContainer::setEnv(char const*, char const*)>
c000ff1b:	83 c4 1c             	add    esp,0x1c
c000ff1e:	c3                   	ret    

c000ff1f <Krnl::setEnvUser(char const*, char const*)>:
c000ff1f:	a1 70 2f 02 c0       	mov    eax,ds:0xc0022f70
c000ff24:	85 c0                	test   eax,eax
c000ff26:	74 15                	je     c000ff3d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000ff28:	83 ec 10             	sub    esp,0x10
c000ff2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff33:	50                   	push   eax
c000ff34:	e8 4f fc ff ff       	call   c000fb88 <EnvVarContainer::setEnv(char const*, char const*)>
c000ff39:	83 c4 1c             	add    esp,0x1c
c000ff3c:	c3                   	ret    
c000ff3d:	c3                   	ret    

c000ff3e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ff3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff42:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000ff48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff4c:	e9 37 fc ff ff       	jmp    c000fb88 <EnvVarContainer::setEnv(char const*, char const*)>

c000ff51 <Krnl::deleteEnvSystem(char const*)>:
c000ff51:	c3                   	ret    

c000ff52 <Krnl::deleteEnvUser(char const*)>:
c000ff52:	c3                   	ret    

c000ff53 <Krnl::deleteEnvProcess(Process*, char const*)>:
c000ff53:	c3                   	ret    

c000ff54 <Krnl::newProcessEnv(Process*)>:
c000ff54:	83 ec 28             	sub    esp,0x28
c000ff57:	6a 0c                	push   0xc
c000ff59:	e8 5b 78 ff ff       	call   c00077b9 <malloc>
c000ff5e:	5a                   	pop    edx
c000ff5f:	59                   	pop    ecx
c000ff60:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff64:	50                   	push   eax
c000ff65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ff69:	e8 e0 fe ff ff       	call   c000fe4e <EnvVarContainer::EnvVarContainer(Process*)>
c000ff6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff72:	83 c4 2c             	add    esp,0x2c
c000ff75:	c3                   	ret    

c000ff76 <Krnl::copyProcessEnv(Process*, Process*)>:
c000ff76:	57                   	push   edi
c000ff77:	56                   	push   esi
c000ff78:	53                   	push   ebx
c000ff79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff7d:	83 ec 0c             	sub    esp,0xc
c000ff80:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ff86:	6a 0c                	push   0xc
c000ff88:	e8 2c 78 ff ff       	call   c00077b9 <malloc>
c000ff8d:	89 c3                	mov    ebx,eax
c000ff8f:	58                   	pop    eax
c000ff90:	5a                   	pop    edx
c000ff91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff95:	53                   	push   ebx
c000ff96:	e8 b3 fe ff ff       	call   c000fe4e <EnvVarContainer::EnvVarContainer(Process*)>
c000ff9b:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff9d:	89 03                	mov    DWORD PTR [ebx],eax
c000ff9f:	c1 e0 03             	shl    eax,0x3
c000ffa2:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffa5:	e8 0f 78 ff ff       	call   c00077b9 <malloc>
c000ffaa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ffad:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ffaf:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ffb2:	c1 e1 03             	shl    ecx,0x3
c000ffb5:	89 c7                	mov    edi,eax
c000ffb7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffb9:	83 c4 10             	add    esp,0x10
c000ffbc:	89 d8                	mov    eax,ebx
c000ffbe:	5b                   	pop    ebx
c000ffbf:	5e                   	pop    esi
c000ffc0:	5f                   	pop    edi
c000ffc1:	c3                   	ret    

c000ffc2 <Krnl::loadSystemEnv()>:
c000ffc2:	53                   	push   ebx
c000ffc3:	83 ec 14             	sub    esp,0x14
c000ffc6:	6a 0c                	push   0xc
c000ffc8:	e8 ec 77 ff ff       	call   c00077b9 <malloc>
c000ffcd:	89 c3                	mov    ebx,eax
c000ffcf:	58                   	pop    eax
c000ffd0:	5a                   	pop    edx
c000ffd1:	ff 35 d0 37 02 c0    	push   DWORD PTR ds:0xc00237d0
c000ffd7:	53                   	push   ebx
c000ffd8:	e8 71 fe ff ff       	call   c000fe4e <EnvVarContainer::EnvVarContainer(Process*)>
c000ffdd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffe0:	89 1d 74 2f 02 c0    	mov    DWORD PTR ds:0xc0022f74,ebx
c000ffe6:	e8 47 fe ff ff       	call   c000fe32 <EnvVarContainer::__loadSystem()>
c000ffeb:	83 c4 18             	add    esp,0x18
c000ffee:	5b                   	pop    ebx
c000ffef:	c3                   	ret    

c000fff0 <Krnl::loadUserEnv()>:
c000fff0:	53                   	push   ebx
c000fff1:	83 ec 14             	sub    esp,0x14
c000fff4:	6a 0c                	push   0xc
c000fff6:	e8 be 77 ff ff       	call   c00077b9 <malloc>
c000fffb:	89 c3                	mov    ebx,eax
c000fffd:	58                   	pop    eax
c000fffe:	5a                   	pop    edx
c000ffff:	ff 35 d0 37 02 c0    	push   DWORD PTR ds:0xc00237d0
c0010005:	53                   	push   ebx
c0010006:	e8 43 fe ff ff       	call   c000fe4e <EnvVarContainer::EnvVarContainer(Process*)>
c001000b:	89 1d 70 2f 02 c0    	mov    DWORD PTR ds:0xc0022f70,ebx
c0010011:	83 c4 18             	add    esp,0x18
c0010014:	5b                   	pop    ebx
c0010015:	c3                   	ret    

c0010016 <Krnl::flushEnv()>:
c0010016:	c3                   	ret    

c0010017 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010017:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001001b:	8b 15 70 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f70
c0010021:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010027:	a1 74 2f 02 c0       	mov    eax,ds:0xc0022f74
c001002c:	8b 00                	mov    eax,DWORD PTR [eax]
c001002e:	03 01                	add    eax,DWORD PTR [ecx]
c0010030:	85 d2                	test   edx,edx
c0010032:	74 02                	je     c0010036 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010034:	03 02                	add    eax,DWORD PTR [edx]
c0010036:	c3                   	ret    

c0010037 <Krnl::getProcessEnvPair(Process*, int)>:
c0010037:	57                   	push   edi
c0010038:	56                   	push   esi
c0010039:	8b 35 70 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f70
c001003f:	53                   	push   ebx
c0010040:	85 f6                	test   esi,esi
c0010042:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010046:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001004a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010050:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010054:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010056:	75 16                	jne    c001006e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010058:	39 c2                	cmp    edx,eax
c001005a:	7c 16                	jl     c0010072 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001005c:	8b 0d 74 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f74
c0010062:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010064:	01 c6                	add    esi,eax
c0010066:	39 d6                	cmp    esi,edx
c0010068:	7e 3c                	jle    c00100a6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001006a:	29 c2                	sub    edx,eax
c001006c:	eb 04                	jmp    c0010072 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001006e:	39 c2                	cmp    edx,eax
c0010070:	7d 05                	jge    c0010077 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010072:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010075:	eb 20                	jmp    c0010097 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010077:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010079:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001007c:	39 d1                	cmp    ecx,edx
c001007e:	7e 04                	jle    c0010084 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010080:	29 c2                	sub    edx,eax
c0010082:	eb 10                	jmp    c0010094 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010084:	8b 35 74 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f74
c001008a:	03 0e                	add    ecx,DWORD PTR [esi]
c001008c:	39 d1                	cmp    ecx,edx
c001008e:	7e 16                	jle    c00100a6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010090:	29 c2                	sub    edx,eax
c0010092:	29 fa                	sub    edx,edi
c0010094:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010097:	8d 14 d0             	lea    edx,[eax+edx*8]
c001009a:	8b 02                	mov    eax,DWORD PTR [edx]
c001009c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001009f:	89 03                	mov    DWORD PTR [ebx],eax
c00100a1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00100a4:	eb 1d                	jmp    c00100c3 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00100a6:	83 ec 0c             	sub    esp,0xc
c00100a9:	68 06 e2 01 c0       	push   0xc001e206
c00100ae:	e8 ac 00 00 00       	call   c001015f <KePanic(char const*)>
c00100b3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00100b9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00100c0:	83 c4 10             	add    esp,0x10
c00100c3:	89 d8                	mov    eax,ebx
c00100c5:	5b                   	pop    ebx
c00100c6:	5e                   	pop    esi
c00100c7:	5f                   	pop    edi
c00100c8:	c2 04 00             	ret    0x4

c00100cb <CPU::current()>:
c00100cb:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c00100d0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00100d6:	c3                   	ret    

c00100d7 <operator new(unsigned long)>:
c00100d7:	e9 dd 76 ff ff       	jmp    c00077b9 <malloc>

c00100dc <operator delete(void*)>:
c00100dc:	e9 f8 76 ff ff       	jmp    c00077d9 <rfree>

c00100e1 <disableIRQs()>:
c00100e1:	fa                   	cli    
c00100e2:	c3                   	ret    

c00100e3 <enableIRQs()>:
c00100e3:	fb                   	sti    
c00100e4:	c3                   	ret    

c00100e5 <lockScheduler()>:
c00100e5:	fa                   	cli    
c00100e6:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c00100ec:	c3                   	ret    

c00100ed <unlockScheduler()>:
c00100ed:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c00100f2:	48                   	dec    eax
c00100f3:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c00100f8:	75 01                	jne    c00100fb <unlockScheduler()+0xe>
c00100fa:	fb                   	sti    
c00100fb:	c3                   	ret    

c00100fc <lockStuff()>:
c00100fc:	fa                   	cli    
c00100fd:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c0010103:	ff 05 a4 37 02 c0    	inc    DWORD PTR ds:0xc00237a4
c0010109:	c3                   	ret    

c001010a <unlockStuff()>:
c001010a:	83 ec 0c             	sub    esp,0xc
c001010d:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c0010112:	48                   	dec    eax
c0010113:	a3 a4 37 02 c0       	mov    ds:0xc00237a4,eax
c0010118:	75 18                	jne    c0010132 <unlockStuff()+0x28>
c001011a:	83 3d a0 37 02 c0 00 	cmp    DWORD PTR ds:0xc00237a0,0x0
c0010121:	74 0f                	je     c0010132 <unlockStuff()+0x28>
c0010123:	c7 05 a0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237a0,0x0
c001012d:	e8 7a 32 00 00       	call   c00133ac <schedule()>
c0010132:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0010137:	48                   	dec    eax
c0010138:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c001013d:	75 01                	jne    c0010140 <unlockStuff()+0x36>
c001013f:	fb                   	sti    
c0010140:	83 c4 0c             	add    esp,0xc
c0010143:	c3                   	ret    

c0010144 <Virt::getAKernelVAS()>:
c0010144:	a1 f0 05 02 c0       	mov    eax,ds:0xc00205f0
c0010149:	c3                   	ret    

c001014a <__not_memcpy>:
c001014a:	57                   	push   edi
c001014b:	56                   	push   esi
c001014c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010150:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010154:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010158:	89 c7                	mov    edi,eax
c001015a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001015c:	5e                   	pop    esi
c001015d:	5f                   	pop    edi
c001015e:	c3                   	ret    

c001015f <KePanic(char const*)>:
c001015f:	c6 05 78 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022f78,0x1
c0010166:	e9 39 50 00 00       	jmp    c00151a4 <HalPanic(char const*)>

c001016b <Krnl::powerThread(void*)>:
c001016b:	83 ec 0c             	sub    esp,0xc
c001016e:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0010173:	48                   	dec    eax
c0010174:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0010179:	75 01                	jne    c001017c <Krnl::powerThread(void*)+0x11>
c001017b:	fb                   	sti    
c001017c:	83 ec 0c             	sub    esp,0xc
c001017f:	c6 05 80 2f 02 c0 00 	mov    BYTE PTR ds:0xc0022f80,0x0
c0010186:	6a 0a                	push   0xa
c0010188:	e8 2f 35 00 00       	call   c00136bc <sleep(unsigned int)>
c001018d:	83 05 c4 2f 02 c0 0a 	add    DWORD PTR ds:0xc0022fc4,0xa
c0010194:	83 c4 10             	add    esp,0x10
c0010197:	eb e3                	jmp    c001017c <Krnl::powerThread(void*)+0x11>

c0010199 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010199:	57                   	push   edi
c001019a:	b9 09 00 00 00       	mov    ecx,0x9
c001019f:	56                   	push   esi
c00101a0:	bf a0 2f 02 c0       	mov    edi,0xc0022fa0
c00101a5:	fc                   	cld    
c00101a6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00101aa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00101ac:	5e                   	pop    esi
c00101ad:	5f                   	pop    edi
c00101ae:	c3                   	ret    

c00101af <Krnl::userIOReceived()>:
c00101af:	c7 05 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022fc4,0x0
c00101b9:	c3                   	ret    

c00101ba <Krnl::handlePowerButton()>:
c00101ba:	83 ec 0c             	sub    esp,0xc
c00101bd:	a1 a0 2f 02 c0       	mov    eax,ds:0xc0022fa0
c00101c2:	83 f8 02             	cmp    eax,0x2
c00101c5:	75 10                	jne    c00101d7 <Krnl::handlePowerButton()+0x1d>
c00101c7:	83 ec 0c             	sub    esp,0xc
c00101ca:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c00101d0:	e8 81 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c00101d5:	eb 11                	jmp    c00101e8 <Krnl::handlePowerButton()+0x2e>
c00101d7:	48                   	dec    eax
c00101d8:	75 11                	jne    c00101eb <Krnl::handlePowerButton()+0x31>
c00101da:	83 ec 0c             	sub    esp,0xc
c00101dd:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c00101e3:	e8 9e 6c ff ff       	call   c0006e86 <Computer::sleep()>
c00101e8:	83 c4 10             	add    esp,0x10
c00101eb:	83 c4 0c             	add    esp,0xc
c00101ee:	c3                   	ret    

c00101ef <Krnl::handleSleepButton()>:
c00101ef:	83 ec 0c             	sub    esp,0xc
c00101f2:	a1 a4 2f 02 c0       	mov    eax,ds:0xc0022fa4
c00101f7:	83 f8 02             	cmp    eax,0x2
c00101fa:	75 10                	jne    c001020c <Krnl::handleSleepButton()+0x1d>
c00101fc:	83 ec 0c             	sub    esp,0xc
c00101ff:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c0010205:	e8 4c 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c001020a:	eb 11                	jmp    c001021d <Krnl::handleSleepButton()+0x2e>
c001020c:	48                   	dec    eax
c001020d:	75 11                	jne    c0010220 <Krnl::handleSleepButton()+0x31>
c001020f:	83 ec 0c             	sub    esp,0xc
c0010212:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c0010218:	e8 69 6c ff ff       	call   c0006e86 <Computer::sleep()>
c001021d:	83 c4 10             	add    esp,0x10
c0010220:	83 c4 0c             	add    esp,0xc
c0010223:	c3                   	ret    

c0010224 <Krnl::setupPowerManager()>:
c0010224:	83 ec 0c             	sub    esp,0xc
c0010227:	c7 05 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022fc4,0x0
c0010231:	68 f0 00 00 00       	push   0xf0
c0010236:	c6 05 80 2f 02 c0 00 	mov    BYTE PTR ds:0xc0022f80,0x0
c001023d:	6a 00                	push   0x0
c001023f:	68 6b 01 01 c0       	push   0xc001016b
c0010244:	ff 35 d0 37 02 c0    	push   DWORD PTR ds:0xc00237d0
c001024a:	e8 3d 2f 00 00       	call   c001318c <Process::createThread(void (*)(void*), void*, int)>
c001024f:	c7 05 a0 2f 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0022fa0,0x2
c0010259:	c7 05 a4 2f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022fa4,0x1
c0010263:	c7 05 a8 2f 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0022fa8,0x3
c001026d:	c7 05 ac 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022fac,0x0
c0010277:	c7 05 b8 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022fb8,0x0
c0010281:	c7 05 b0 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022fb0,0x0
c001028b:	c7 05 bc 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022fbc,0x0
c0010295:	c7 05 b4 2f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022fb4,0x3c
c001029f:	c7 05 c0 2f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022fc0,0x3c
c00102a9:	83 c4 1c             	add    esp,0x1c
c00102ac:	c3                   	ret    
c00102ad:	66 90                	xchg   ax,ax
c00102af:	90                   	nop

c00102b0 <KeResolveCompatibilitySymbol(char*)>:
c00102b0:	83 ec 0c             	sub    esp,0xc
c00102b3:	83 ec 08             	sub    esp,0x8
c00102b6:	68 20 e2 01 c0       	push   0xc001e220
c00102bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102bf:	e8 1c 04 ff ff       	call   c00006e0 <strcmp>
c00102c4:	83 c4 10             	add    esp,0x10
c00102c7:	85 c0                	test   eax,eax
c00102c9:	0f 94 c0             	sete   al
c00102cc:	84 c0                	test   al,al
c00102ce:	74 0c                	je     c00102dc <KeResolveCompatibilitySymbol(char*)+0x2c>
c00102d0:	b8 f8 04 02 c0       	mov    eax,0xc00204f8
c00102d5:	e9 62 01 00 00       	jmp    c001043c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102da:	66 90                	xchg   ax,ax
c00102dc:	83 ec 08             	sub    esp,0x8
c00102df:	68 29 e2 01 c0       	push   0xc001e229
c00102e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102e8:	e8 f3 03 ff ff       	call   c00006e0 <strcmp>
c00102ed:	83 c4 10             	add    esp,0x10
c00102f0:	85 c0                	test   eax,eax
c00102f2:	0f 94 c0             	sete   al
c00102f5:	84 c0                	test   al,al
c00102f7:	74 0b                	je     c0010304 <KeResolveCompatibilitySymbol(char*)+0x54>
c00102f9:	b8 b0 bc 01 c0       	mov    eax,0xc001bcb0
c00102fe:	e9 39 01 00 00       	jmp    c001043c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010303:	90                   	nop
c0010304:	83 ec 08             	sub    esp,0x8
c0010307:	68 33 e2 01 c0       	push   0xc001e233
c001030c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010310:	e8 cb 03 ff ff       	call   c00006e0 <strcmp>
c0010315:	83 c4 10             	add    esp,0x10
c0010318:	85 c0                	test   eax,eax
c001031a:	0f 94 c0             	sete   al
c001031d:	84 c0                	test   al,al
c001031f:	74 0b                	je     c001032c <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010321:	b8 e4 b9 01 c0       	mov    eax,0xc001b9e4
c0010326:	e9 11 01 00 00       	jmp    c001043c <KeResolveCompatibilitySymbol(char*)+0x18c>
c001032b:	90                   	nop
c001032c:	83 ec 08             	sub    esp,0x8
c001032f:	68 3c e2 01 c0       	push   0xc001e23c
c0010334:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010338:	e8 a3 03 ff ff       	call   c00006e0 <strcmp>
c001033d:	83 c4 10             	add    esp,0x10
c0010340:	85 c0                	test   eax,eax
c0010342:	0f 94 c0             	sete   al
c0010345:	84 c0                	test   al,al
c0010347:	74 0b                	je     c0010354 <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010349:	b8 5f 01 01 c0       	mov    eax,0xc001015f
c001034e:	e9 e9 00 00 00       	jmp    c001043c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010353:	90                   	nop
c0010354:	83 ec 08             	sub    esp,0x8
c0010357:	68 4f e2 01 c0       	push   0xc001e24f
c001035c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010360:	e8 7b 03 ff ff       	call   c00006e0 <strcmp>
c0010365:	83 c4 10             	add    esp,0x10
c0010368:	85 c0                	test   eax,eax
c001036a:	0f 94 c0             	sete   al
c001036d:	84 c0                	test   al,al
c001036f:	74 0b                	je     c001037c <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010371:	b8 e7 fa 00 c0       	mov    eax,0xc000fae7
c0010376:	e9 c1 00 00 00       	jmp    c001043c <KeResolveCompatibilitySymbol(char*)+0x18c>
c001037b:	90                   	nop
c001037c:	83 ec 08             	sub    esp,0x8
c001037f:	68 6c e2 01 c0       	push   0xc001e26c
c0010384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010388:	e8 53 03 ff ff       	call   c00006e0 <strcmp>
c001038d:	83 c4 10             	add    esp,0x10
c0010390:	85 c0                	test   eax,eax
c0010392:	0f 94 c0             	sete   al
c0010395:	84 c0                	test   al,al
c0010397:	74 0b                	je     c00103a4 <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010399:	b8 b0 bd 01 c0       	mov    eax,0xc001bdb0
c001039e:	e9 99 00 00 00       	jmp    c001043c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103a3:	90                   	nop
c00103a4:	83 ec 08             	sub    esp,0x8
c00103a7:	68 76 e2 01 c0       	push   0xc001e276
c00103ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103b0:	e8 2b 03 ff ff       	call   c00006e0 <strcmp>
c00103b5:	83 c4 10             	add    esp,0x10
c00103b8:	85 c0                	test   eax,eax
c00103ba:	0f 94 c0             	sete   al
c00103bd:	84 c0                	test   al,al
c00103bf:	74 07                	je     c00103c8 <KeResolveCompatibilitySymbol(char*)+0x118>
c00103c1:	b8 30 bb 01 c0       	mov    eax,0xc001bb30
c00103c6:	eb 74                	jmp    c001043c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103c8:	83 ec 08             	sub    esp,0x8
c00103cb:	68 7f e2 01 c0       	push   0xc001e27f
c00103d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103d4:	e8 07 03 ff ff       	call   c00006e0 <strcmp>
c00103d9:	83 c4 10             	add    esp,0x10
c00103dc:	85 c0                	test   eax,eax
c00103de:	0f 94 c0             	sete   al
c00103e1:	84 c0                	test   al,al
c00103e3:	74 07                	je     c00103ec <KeResolveCompatibilitySymbol(char*)+0x13c>
c00103e5:	b8 fc 04 02 c0       	mov    eax,0xc00204fc
c00103ea:	eb 50                	jmp    c001043c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103ec:	83 ec 08             	sub    esp,0x8
c00103ef:	68 97 e2 01 c0       	push   0xc001e297
c00103f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103f8:	e8 e3 02 ff ff       	call   c00006e0 <strcmp>
c00103fd:	83 c4 10             	add    esp,0x10
c0010400:	85 c0                	test   eax,eax
c0010402:	0f 94 c0             	sete   al
c0010405:	84 c0                	test   al,al
c0010407:	74 07                	je     c0010410 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010409:	b8 fc 04 02 c0       	mov    eax,0xc00204fc
c001040e:	eb 2c                	jmp    c001043c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010410:	83 ec 08             	sub    esp,0x8
c0010413:	68 a4 e2 01 c0       	push   0xc001e2a4
c0010418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001041c:	e8 bf 02 ff ff       	call   c00006e0 <strcmp>
c0010421:	83 c4 10             	add    esp,0x10
c0010424:	85 c0                	test   eax,eax
c0010426:	0f 94 c0             	sete   al
c0010429:	84 c0                	test   al,al
c001042b:	74 07                	je     c0010434 <KeResolveCompatibilitySymbol(char*)+0x184>
c001042d:	b8 fd 04 02 c0       	mov    eax,0xc00204fd
c0010432:	eb 08                	jmp    c001043c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010434:	b8 00 00 00 00       	mov    eax,0x0
c0010439:	8d 76 00             	lea    esi,[esi+0x0]
c001043c:	83 c4 0c             	add    esp,0xc
c001043f:	c3                   	ret    

c0010440 <SysSeekDir(regs*)>:
c0010440:	31 c0                	xor    eax,eax
c0010442:	31 d2                	xor    edx,edx
c0010444:	c3                   	ret    

c0010445 <SysTellDir(regs*)>:
c0010445:	31 c0                	xor    eax,eax
c0010447:	31 d2                	xor    edx,edx
c0010449:	c3                   	ret    

c001044a <SysVerify(regs*)>:
c001044a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001044e:	31 d2                	xor    edx,edx
c0010450:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010453:	c3                   	ret    

c0010454 <SysGetArgc(regs*)>:
c0010454:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010459:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001045c:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010462:	99                   	cdq    
c0010463:	c3                   	ret    

c0010464 <SysTTYName(regs*)>:
c0010464:	b8 01 00 00 00       	mov    eax,0x1
c0010469:	31 d2                	xor    edx,edx
c001046b:	c3                   	ret    

c001046c <SysFormatDisk(regs*)>:
c001046c:	56                   	push   esi
c001046d:	53                   	push   ebx
c001046e:	50                   	push   eax
c001046f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010473:	8b 1d f4 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205f4
c0010479:	eb 28                	jmp    c00104a3 <SysFormatDisk(regs*)+0x37>
c001047b:	83 ec 0c             	sub    esp,0xc
c001047e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010481:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010484:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010486:	51                   	push   ecx
c0010487:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001048a:	51                   	push   ecx
c001048b:	50                   	push   eax
c001048c:	8b 04 85 60 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5a0]
c0010493:	50                   	push   eax
c0010494:	53                   	push   ebx
c0010495:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010498:	83 c4 20             	add    esp,0x20
c001049b:	83 f8 08             	cmp    eax,0x8
c001049e:	75 12                	jne    c00104b2 <SysFormatDisk(regs*)+0x46>
c00104a0:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00104a3:	85 db                	test   ebx,ebx
c00104a5:	75 d4                	jne    c001047b <SysFormatDisk(regs*)+0xf>
c00104a7:	59                   	pop    ecx
c00104a8:	b8 03 00 00 00       	mov    eax,0x3
c00104ad:	31 d2                	xor    edx,edx
c00104af:	5b                   	pop    ebx
c00104b0:	5e                   	pop    esi
c00104b1:	c3                   	ret    
c00104b2:	85 c0                	test   eax,eax
c00104b4:	74 1b                	je     c00104d1 <SysFormatDisk(regs*)+0x65>
c00104b6:	83 f8 09             	cmp    eax,0x9
c00104b9:	74 0b                	je     c00104c6 <SysFormatDisk(regs*)+0x5a>
c00104bb:	59                   	pop    ecx
c00104bc:	b8 02 00 00 00       	mov    eax,0x2
c00104c1:	31 d2                	xor    edx,edx
c00104c3:	5b                   	pop    ebx
c00104c4:	5e                   	pop    esi
c00104c5:	c3                   	ret    
c00104c6:	59                   	pop    ecx
c00104c7:	b8 01 00 00 00       	mov    eax,0x1
c00104cc:	31 d2                	xor    edx,edx
c00104ce:	5b                   	pop    ebx
c00104cf:	5e                   	pop    esi
c00104d0:	c3                   	ret    
c00104d1:	59                   	pop    ecx
c00104d2:	31 c0                	xor    eax,eax
c00104d4:	31 d2                	xor    edx,edx
c00104d6:	5b                   	pop    ebx
c00104d7:	5e                   	pop    esi
c00104d8:	c3                   	ret    

c00104d9 <SysSetDiskVolumeLabel(regs*)>:
c00104d9:	56                   	push   esi
c00104da:	53                   	push   ebx
c00104db:	53                   	push   ebx
c00104dc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00104e0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00104e3:	83 f8 19             	cmp    eax,0x19
c00104e6:	77 2d                	ja     c0010515 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00104e8:	8b 0c 85 60 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd5a0]
c00104ef:	85 c9                	test   ecx,ecx
c00104f1:	74 22                	je     c0010515 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00104f3:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00104f6:	85 db                	test   ebx,ebx
c00104f8:	74 1b                	je     c0010515 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00104fa:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0010500:	85 d2                	test   edx,edx
c0010502:	74 11                	je     c0010515 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010504:	8b 32                	mov    esi,DWORD PTR [edx]
c0010506:	53                   	push   ebx
c0010507:	50                   	push   eax
c0010508:	51                   	push   ecx
c0010509:	52                   	push   edx
c001050a:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001050d:	83 c4 10             	add    esp,0x10
c0010510:	99                   	cdq    
c0010511:	59                   	pop    ecx
c0010512:	5b                   	pop    ebx
c0010513:	5e                   	pop    esi
c0010514:	c3                   	ret    
c0010515:	59                   	pop    ecx
c0010516:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001051b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010520:	5b                   	pop    ebx
c0010521:	5e                   	pop    esi
c0010522:	c3                   	ret    

c0010523 <SysGetDiskVolumeLabel(regs*)>:
c0010523:	57                   	push   edi
c0010524:	56                   	push   esi
c0010525:	53                   	push   ebx
c0010526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001052d:	83 fa 19             	cmp    edx,0x19
c0010530:	77 38                	ja     c001056a <SysGetDiskVolumeLabel(regs*)+0x47>
c0010532:	8b 0c 95 60 2a 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd5a0]
c0010539:	85 c9                	test   ecx,ecx
c001053b:	74 2d                	je     c001056a <SysGetDiskVolumeLabel(regs*)+0x47>
c001053d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010540:	85 db                	test   ebx,ebx
c0010542:	74 26                	je     c001056a <SysGetDiskVolumeLabel(regs*)+0x47>
c0010544:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010547:	85 f6                	test   esi,esi
c0010549:	74 1f                	je     c001056a <SysGetDiskVolumeLabel(regs*)+0x47>
c001054b:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010551:	85 c0                	test   eax,eax
c0010553:	74 15                	je     c001056a <SysGetDiskVolumeLabel(regs*)+0x47>
c0010555:	83 ec 0c             	sub    esp,0xc
c0010558:	8b 38                	mov    edi,DWORD PTR [eax]
c001055a:	56                   	push   esi
c001055b:	53                   	push   ebx
c001055c:	52                   	push   edx
c001055d:	51                   	push   ecx
c001055e:	50                   	push   eax
c001055f:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010562:	83 c4 20             	add    esp,0x20
c0010565:	99                   	cdq    
c0010566:	5b                   	pop    ebx
c0010567:	5e                   	pop    esi
c0010568:	5f                   	pop    edi
c0010569:	c3                   	ret    
c001056a:	5b                   	pop    ebx
c001056b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010570:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010575:	5e                   	pop    esi
c0010576:	5f                   	pop    edi
c0010577:	c3                   	ret    

c0010578 <SysShutdown(regs*)>:
c0010578:	83 ec 0c             	sub    esp,0xc
c001057b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010582:	85 c0                	test   eax,eax
c0010584:	74 18                	je     c001059e <SysShutdown(regs*)+0x26>
c0010586:	83 f8 01             	cmp    eax,0x1
c0010589:	74 38                	je     c00105c3 <SysShutdown(regs*)+0x4b>
c001058b:	83 f8 02             	cmp    eax,0x2
c001058e:	74 24                	je     c00105b4 <SysShutdown(regs*)+0x3c>
c0010590:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010595:	ba ff ff ff ff       	mov    edx,0xffffffff
c001059a:	83 c4 0c             	add    esp,0xc
c001059d:	c3                   	ret    
c001059e:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c00105a3:	8b 10                	mov    edx,DWORD PTR [eax]
c00105a5:	6a 00                	push   0x0
c00105a7:	6a 00                	push   0x0
c00105a9:	6a 00                	push   0x0
c00105ab:	50                   	push   eax
c00105ac:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00105af:	83 c4 10             	add    esp,0x10
c00105b2:	eb dc                	jmp    c0010590 <SysShutdown(regs*)+0x18>
c00105b4:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c00105b9:	8b 10                	mov    edx,DWORD PTR [eax]
c00105bb:	6a 00                	push   0x0
c00105bd:	6a 00                	push   0x0
c00105bf:	6a 01                	push   0x1
c00105c1:	eb e8                	jmp    c00105ab <SysShutdown(regs*)+0x33>
c00105c3:	a1 e0 2a 02 c0       	mov    eax,ds:0xc0022ae0
c00105c8:	85 c0                	test   eax,eax
c00105ca:	74 02                	je     c00105ce <SysShutdown(regs*)+0x56>
c00105cc:	ff d0                	call   eax
c00105ce:	31 c0                	xor    eax,eax
c00105d0:	31 d2                	xor    edx,edx
c00105d2:	83 c4 0c             	add    esp,0xc
c00105d5:	c3                   	ret    

c00105d6 <SysRealpath(regs*)>:
c00105d6:	83 ec 0c             	sub    esp,0xc
c00105d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105dd:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00105e0:	85 d2                	test   edx,edx
c00105e2:	74 07                	je     c00105eb <SysRealpath(regs*)+0x15>
c00105e4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00105e7:	85 c0                	test   eax,eax
c00105e9:	75 0b                	jne    c00105f6 <SysRealpath(regs*)+0x20>
c00105eb:	b8 01 00 00 00       	mov    eax,0x1
c00105f0:	31 d2                	xor    edx,edx
c00105f2:	83 c4 0c             	add    esp,0xc
c00105f5:	c3                   	ret    
c00105f6:	51                   	push   ecx
c00105f7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00105fd:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010600:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010606:	51                   	push   ecx
c0010607:	52                   	push   edx
c0010608:	50                   	push   eax
c0010609:	e8 9e a2 ff ff       	call   c000a8ac <Fs::standardiseFiles(char*, char const*, char const*)>
c001060e:	83 c4 10             	add    esp,0x10
c0010611:	31 c0                	xor    eax,eax
c0010613:	31 d2                	xor    edx,edx
c0010615:	83 c4 0c             	add    esp,0xc
c0010618:	c3                   	ret    

c0010619 <SysReadDir(regs*)>:
c0010619:	53                   	push   ebx
c001061a:	83 ec 18             	sub    esp,0x18
c001061d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010621:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010624:	83 f8 02             	cmp    eax,0x2
c0010627:	76 61                	jbe    c001068a <SysReadDir(regs*)+0x71>
c0010629:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010630:	77 49                	ja     c001067b <SysReadDir(regs*)+0x62>
c0010632:	83 ec 0c             	sub    esp,0xc
c0010635:	50                   	push   eax
c0010636:	e8 fc 8a ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c001063b:	83 c4 10             	add    esp,0x10
c001063e:	85 c0                	test   eax,eax
c0010640:	74 39                	je     c001067b <SysReadDir(regs*)+0x62>
c0010642:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001064a:	83 ec 0c             	sub    esp,0xc
c001064d:	8b 10                	mov    edx,DWORD PTR [eax]
c001064f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010653:	51                   	push   ecx
c0010654:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010657:	51                   	push   ecx
c0010658:	6a 00                	push   0x0
c001065a:	68 10 01 00 00       	push   0x110
c001065f:	50                   	push   eax
c0010660:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010663:	83 c4 20             	add    esp,0x20
c0010666:	85 c0                	test   eax,eax
c0010668:	74 29                	je     c0010693 <SysReadDir(regs*)+0x7a>
c001066a:	83 f8 07             	cmp    eax,0x7
c001066d:	74 1b                	je     c001068a <SysReadDir(regs*)+0x71>
c001066f:	b8 02 00 00 00       	mov    eax,0x2
c0010674:	31 d2                	xor    edx,edx
c0010676:	83 c4 18             	add    esp,0x18
c0010679:	5b                   	pop    ebx
c001067a:	c3                   	ret    
c001067b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010680:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010685:	83 c4 18             	add    esp,0x18
c0010688:	5b                   	pop    ebx
c0010689:	c3                   	ret    
c001068a:	b8 01 00 00 00       	mov    eax,0x1
c001068f:	31 d2                	xor    edx,edx
c0010691:	eb e3                	jmp    c0010676 <SysReadDir(regs*)+0x5d>
c0010693:	31 c0                	xor    eax,eax
c0010695:	31 d2                	xor    edx,edx
c0010697:	eb dd                	jmp    c0010676 <SysReadDir(regs*)+0x5d>

c0010699 <SysIsATTY(regs*)>:
c0010699:	83 ec 0c             	sub    esp,0xc
c001069c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00106a3:	83 f8 02             	cmp    eax,0x2
c00106a6:	76 07                	jbe    c00106af <SysIsATTY(regs*)+0x16>
c00106a8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00106ad:	75 28                	jne    c00106d7 <SysIsATTY(regs*)+0x3e>
c00106af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00106b4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00106b7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00106bd:	85 c0                	test   eax,eax
c00106bf:	74 26                	je     c00106e7 <SysIsATTY(regs*)+0x4e>
c00106c1:	83 ec 0c             	sub    esp,0xc
c00106c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00106c6:	50                   	push   eax
c00106c7:	ff 12                	call   DWORD PTR [edx]
c00106c9:	31 d2                	xor    edx,edx
c00106cb:	25 ff 00 00 00       	and    eax,0xff
c00106d0:	83 c4 10             	add    esp,0x10
c00106d3:	83 c4 0c             	add    esp,0xc
c00106d6:	c3                   	ret    
c00106d7:	83 ec 0c             	sub    esp,0xc
c00106da:	50                   	push   eax
c00106db:	e8 57 8a ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c00106e0:	83 c4 10             	add    esp,0x10
c00106e3:	85 c0                	test   eax,eax
c00106e5:	75 da                	jne    c00106c1 <SysIsATTY(regs*)+0x28>
c00106e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106ec:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106f1:	83 c4 0c             	add    esp,0xc
c00106f4:	c3                   	ret    

c00106f5 <SysSeek(regs*)>:
c00106f5:	53                   	push   ebx
c00106f6:	83 ec 08             	sub    esp,0x8
c00106f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106fd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010700:	8d 50 fd             	lea    edx,[eax-0x3]
c0010703:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010709:	77 34                	ja     c001073f <SysSeek(regs*)+0x4a>
c001070b:	83 ec 0c             	sub    esp,0xc
c001070e:	50                   	push   eax
c001070f:	e8 23 8a ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c0010714:	83 c4 0c             	add    esp,0xc
c0010717:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001071a:	31 db                	xor    ebx,ebx
c001071c:	53                   	push   ebx
c001071d:	51                   	push   ecx
c001071e:	50                   	push   eax
c001071f:	e8 b0 a4 ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c0010724:	83 c4 10             	add    esp,0x10
c0010727:	85 c0                	test   eax,eax
c0010729:	0f 95 c0             	setne  al
c001072c:	31 d2                	xor    edx,edx
c001072e:	25 ff 00 00 00       	and    eax,0xff
c0010733:	f7 d8                	neg    eax
c0010735:	83 d2 00             	adc    edx,0x0
c0010738:	83 c4 08             	add    esp,0x8
c001073b:	f7 da                	neg    edx
c001073d:	5b                   	pop    ebx
c001073e:	c3                   	ret    
c001073f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010744:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010749:	83 c4 08             	add    esp,0x8
c001074c:	5b                   	pop    ebx
c001074d:	c3                   	ret    

c001074e <SysTell(regs*)>:
c001074e:	53                   	push   ebx
c001074f:	83 ec 08             	sub    esp,0x8
c0010752:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010756:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010759:	83 f8 02             	cmp    eax,0x2
c001075c:	76 50                	jbe    c00107ae <SysTell(regs*)+0x60>
c001075e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010763:	76 19                	jbe    c001077e <SysTell(regs*)+0x30>
c0010765:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010768:	31 d2                	xor    edx,edx
c001076a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010770:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010777:	31 c0                	xor    eax,eax
c0010779:	83 c4 08             	add    esp,0x8
c001077c:	5b                   	pop    ebx
c001077d:	c3                   	ret    
c001077e:	83 ec 0c             	sub    esp,0xc
c0010781:	50                   	push   eax
c0010782:	e8 b0 89 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c0010787:	5a                   	pop    edx
c0010788:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001078b:	59                   	pop    ecx
c001078c:	53                   	push   ebx
c001078d:	50                   	push   eax
c001078e:	e8 97 a4 ff ff       	call   c000ac2a <File::tell(unsigned long long*)>
c0010793:	83 c4 10             	add    esp,0x10
c0010796:	85 c0                	test   eax,eax
c0010798:	0f 95 c0             	setne  al
c001079b:	31 d2                	xor    edx,edx
c001079d:	25 ff 00 00 00       	and    eax,0xff
c00107a2:	f7 d8                	neg    eax
c00107a4:	83 d2 00             	adc    edx,0x0
c00107a7:	83 c4 08             	add    esp,0x8
c00107aa:	f7 da                	neg    edx
c00107ac:	5b                   	pop    ebx
c00107ad:	c3                   	ret    
c00107ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107b3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107b8:	83 c4 08             	add    esp,0x8
c00107bb:	5b                   	pop    ebx
c00107bc:	c3                   	ret    

c00107bd <SysSize(regs*)>:
c00107bd:	53                   	push   ebx
c00107be:	83 ec 18             	sub    esp,0x18
c00107c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00107c5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00107c8:	83 f8 02             	cmp    eax,0x2
c00107cb:	76 56                	jbe    c0010823 <SysSize(regs*)+0x66>
c00107cd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00107d2:	76 19                	jbe    c00107ed <SysSize(regs*)+0x30>
c00107d4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00107d7:	31 d2                	xor    edx,edx
c00107d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107df:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107e6:	31 c0                	xor    eax,eax
c00107e8:	83 c4 18             	add    esp,0x18
c00107eb:	5b                   	pop    ebx
c00107ec:	c3                   	ret    
c00107ed:	83 ec 0c             	sub    esp,0xc
c00107f0:	50                   	push   eax
c00107f1:	e8 41 89 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c00107f6:	83 c4 0c             	add    esp,0xc
c00107f9:	8d 54 24 13          	lea    edx,[esp+0x13]
c00107fd:	52                   	push   edx
c00107fe:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010801:	52                   	push   edx
c0010802:	50                   	push   eax
c0010803:	e8 ba a5 ff ff       	call   c000adc2 <File::stat(unsigned long long*, bool*)>
c0010808:	83 c4 10             	add    esp,0x10
c001080b:	85 c0                	test   eax,eax
c001080d:	0f 95 c0             	setne  al
c0010810:	31 d2                	xor    edx,edx
c0010812:	25 ff 00 00 00       	and    eax,0xff
c0010817:	f7 d8                	neg    eax
c0010819:	83 d2 00             	adc    edx,0x0
c001081c:	83 c4 18             	add    esp,0x18
c001081f:	f7 da                	neg    edx
c0010821:	5b                   	pop    ebx
c0010822:	c3                   	ret    
c0010823:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010828:	ba ff ff ff ff       	mov    edx,0xffffffff
c001082d:	83 c4 18             	add    esp,0x18
c0010830:	5b                   	pop    ebx
c0010831:	c3                   	ret    

c0010832 <SysSizeFromFilename(regs*)>:
c0010832:	57                   	push   edi
c0010833:	56                   	push   esi
c0010834:	53                   	push   ebx
c0010835:	83 ec 20             	sub    esp,0x20
c0010838:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001083c:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001083f:	83 fb 02             	cmp    ebx,0x2
c0010842:	0f 86 8c 00 00 00    	jbe    c00108d4 <SysSizeFromFilename(regs*)+0xa2>
c0010848:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001084e:	76 1b                	jbe    c001086b <SysSizeFromFilename(regs*)+0x39>
c0010850:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010853:	31 d2                	xor    edx,edx
c0010855:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001085b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010862:	83 c4 20             	add    esp,0x20
c0010865:	31 c0                	xor    eax,eax
c0010867:	5b                   	pop    ebx
c0010868:	5e                   	pop    esi
c0010869:	5f                   	pop    edi
c001086a:	c3                   	ret    
c001086b:	83 ec 0c             	sub    esp,0xc
c001086e:	68 14 01 00 00       	push   0x114
c0010873:	e8 41 6f ff ff       	call   c00077b9 <malloc>
c0010878:	83 c4 0c             	add    esp,0xc
c001087b:	89 c7                	mov    edi,eax
c001087d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010882:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010885:	50                   	push   eax
c0010886:	53                   	push   ebx
c0010887:	57                   	push   edi
c0010888:	e8 c9 a1 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c001088d:	83 c4 0c             	add    esp,0xc
c0010890:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010894:	50                   	push   eax
c0010895:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010898:	52                   	push   edx
c0010899:	57                   	push   edi
c001089a:	e8 23 a5 ff ff       	call   c000adc2 <File::stat(unsigned long long*, bool*)>
c001089f:	83 c4 10             	add    esp,0x10
c00108a2:	85 ff                	test   edi,edi
c00108a4:	74 14                	je     c00108ba <SysSizeFromFilename(regs*)+0x88>
c00108a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00108aa:	8b 17                	mov    edx,DWORD PTR [edi]
c00108ac:	83 ec 0c             	sub    esp,0xc
c00108af:	57                   	push   edi
c00108b0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00108b3:	83 c4 10             	add    esp,0x10
c00108b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108ba:	85 c0                	test   eax,eax
c00108bc:	0f 95 c0             	setne  al
c00108bf:	31 d2                	xor    edx,edx
c00108c1:	25 ff 00 00 00       	and    eax,0xff
c00108c6:	f7 d8                	neg    eax
c00108c8:	83 d2 00             	adc    edx,0x0
c00108cb:	83 c4 20             	add    esp,0x20
c00108ce:	f7 da                	neg    edx
c00108d0:	5b                   	pop    ebx
c00108d1:	5e                   	pop    esi
c00108d2:	5f                   	pop    edi
c00108d3:	c3                   	ret    
c00108d4:	83 c4 20             	add    esp,0x20
c00108d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108dc:	5b                   	pop    ebx
c00108dd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108e2:	5e                   	pop    esi
c00108e3:	5f                   	pop    edi
c00108e4:	c3                   	ret    

c00108e5 <SysClose(regs*)>:
c00108e5:	53                   	push   ebx
c00108e6:	83 ec 08             	sub    esp,0x8
c00108e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00108f0:	83 f8 02             	cmp    eax,0x2
c00108f3:	76 41                	jbe    c0010936 <SysClose(regs*)+0x51>
c00108f5:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00108fb:	83 fa 01             	cmp    edx,0x1
c00108fe:	76 2d                	jbe    c001092d <SysClose(regs*)+0x48>
c0010900:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010905:	77 2f                	ja     c0010936 <SysClose(regs*)+0x51>
c0010907:	83 ec 0c             	sub    esp,0xc
c001090a:	50                   	push   eax
c001090b:	e8 27 88 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c0010910:	89 c3                	mov    ebx,eax
c0010912:	89 04 24             	mov    DWORD PTR [esp],eax
c0010915:	e8 5a a2 ff ff       	call   c000ab74 <File::close()>
c001091a:	83 c4 10             	add    esp,0x10
c001091d:	85 db                	test   ebx,ebx
c001091f:	74 0c                	je     c001092d <SysClose(regs*)+0x48>
c0010921:	83 ec 0c             	sub    esp,0xc
c0010924:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010926:	53                   	push   ebx
c0010927:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001092a:	83 c4 10             	add    esp,0x10
c001092d:	31 c0                	xor    eax,eax
c001092f:	31 d2                	xor    edx,edx
c0010931:	83 c4 08             	add    esp,0x8
c0010934:	5b                   	pop    ebx
c0010935:	c3                   	ret    
c0010936:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001093b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010940:	83 c4 08             	add    esp,0x8
c0010943:	5b                   	pop    ebx
c0010944:	c3                   	ret    

c0010945 <SysOpenDir(regs*)>:
c0010945:	56                   	push   esi
c0010946:	53                   	push   ebx
c0010947:	50                   	push   eax
c0010948:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001094c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001094f:	85 c0                	test   eax,eax
c0010951:	74 5b                	je     c00109ae <SysOpenDir(regs*)+0x69>
c0010953:	83 ec 0c             	sub    esp,0xc
c0010956:	68 14 01 00 00       	push   0x114
c001095b:	e8 59 6e ff ff       	call   c00077b9 <malloc>
c0010960:	83 c4 0c             	add    esp,0xc
c0010963:	89 c6                	mov    esi,eax
c0010965:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001096a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001096d:	50                   	push   eax
c001096e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010971:	50                   	push   eax
c0010972:	56                   	push   esi
c0010973:	e8 08 a6 ff ff       	call   c000af80 <Directory::Directory(char const*, Process*)>
c0010978:	83 c4 10             	add    esp,0x10
c001097b:	85 f6                	test   esi,esi
c001097d:	74 2f                	je     c00109ae <SysOpenDir(regs*)+0x69>
c001097f:	83 ec 0c             	sub    esp,0xc
c0010982:	56                   	push   esi
c0010983:	e8 b8 a6 ff ff       	call   c000b040 <Directory::open()>
c0010988:	83 c4 10             	add    esp,0x10
c001098b:	85 c0                	test   eax,eax
c001098d:	75 1f                	jne    c00109ae <SysOpenDir(regs*)+0x69>
c001098f:	83 ec 0c             	sub    esp,0xc
c0010992:	56                   	push   esi
c0010993:	e8 aa 84 ff ff       	call   c0008e42 <UnixFile::getFileDescriptor()>
c0010998:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001099b:	83 c4 10             	add    esp,0x10
c001099e:	89 02                	mov    DWORD PTR [edx],eax
c00109a0:	c1 f8 1f             	sar    eax,0x1f
c00109a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00109a6:	31 c0                	xor    eax,eax
c00109a8:	59                   	pop    ecx
c00109a9:	31 d2                	xor    edx,edx
c00109ab:	5b                   	pop    ebx
c00109ac:	5e                   	pop    esi
c00109ad:	c3                   	ret    
c00109ae:	59                   	pop    ecx
c00109af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109b9:	5b                   	pop    ebx
c00109ba:	5e                   	pop    esi
c00109bb:	c3                   	ret    

c00109bc <SysCloseDir(regs*)>:
c00109bc:	53                   	push   ebx
c00109bd:	83 ec 08             	sub    esp,0x8
c00109c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109c7:	8d 50 fd             	lea    edx,[eax-0x3]
c00109ca:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00109d0:	77 2f                	ja     c0010a01 <SysCloseDir(regs*)+0x45>
c00109d2:	83 ec 0c             	sub    esp,0xc
c00109d5:	50                   	push   eax
c00109d6:	e8 5c 87 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c00109db:	89 c3                	mov    ebx,eax
c00109dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00109e0:	e8 b7 a6 ff ff       	call   c000b09c <Directory::close()>
c00109e5:	83 c4 10             	add    esp,0x10
c00109e8:	85 db                	test   ebx,ebx
c00109ea:	74 0c                	je     c00109f8 <SysCloseDir(regs*)+0x3c>
c00109ec:	83 ec 0c             	sub    esp,0xc
c00109ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00109f1:	53                   	push   ebx
c00109f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00109f5:	83 c4 10             	add    esp,0x10
c00109f8:	31 c0                	xor    eax,eax
c00109fa:	31 d2                	xor    edx,edx
c00109fc:	83 c4 08             	add    esp,0x8
c00109ff:	5b                   	pop    ebx
c0010a00:	c3                   	ret    
c0010a01:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a06:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a0b:	83 c4 08             	add    esp,0x8
c0010a0e:	5b                   	pop    ebx
c0010a0f:	c3                   	ret    

c0010a10 <SysMakeDir(regs*)>:
c0010a10:	56                   	push   esi
c0010a11:	53                   	push   ebx
c0010a12:	83 ec 10             	sub    esp,0x10
c0010a15:	68 14 01 00 00       	push   0x114
c0010a1a:	e8 9a 6d ff ff       	call   c00077b9 <malloc>
c0010a1f:	83 c4 0c             	add    esp,0xc
c0010a22:	89 c3                	mov    ebx,eax
c0010a24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a29:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010a2c:	56                   	push   esi
c0010a2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010a31:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010a34:	50                   	push   eax
c0010a35:	53                   	push   ebx
c0010a36:	e8 45 a5 ff ff       	call   c000af80 <Directory::Directory(char const*, Process*)>
c0010a3b:	83 c4 10             	add    esp,0x10
c0010a3e:	85 db                	test   ebx,ebx
c0010a40:	74 32                	je     c0010a74 <SysMakeDir(regs*)+0x64>
c0010a42:	83 ec 0c             	sub    esp,0xc
c0010a45:	53                   	push   ebx
c0010a46:	e8 d5 a7 ff ff       	call   c000b220 <Directory::create()>
c0010a4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a4e:	89 c6                	mov    esi,eax
c0010a50:	e8 47 a6 ff ff       	call   c000b09c <Directory::close()>
c0010a55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010a57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010a5d:	83 c4 10             	add    esp,0x10
c0010a60:	31 c0                	xor    eax,eax
c0010a62:	59                   	pop    ecx
c0010a63:	85 f6                	test   esi,esi
c0010a65:	5b                   	pop    ebx
c0010a66:	0f 95 c0             	setne  al
c0010a69:	5e                   	pop    esi
c0010a6a:	31 d2                	xor    edx,edx
c0010a6c:	f7 d8                	neg    eax
c0010a6e:	83 d2 00             	adc    edx,0x0
c0010a71:	f7 da                	neg    edx
c0010a73:	c3                   	ret    
c0010a74:	59                   	pop    ecx
c0010a75:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a7a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a7f:	5b                   	pop    ebx
c0010a80:	5e                   	pop    esi
c0010a81:	c3                   	ret    

c0010a82 <SysWait(regs*)>:
c0010a82:	83 ec 10             	sub    esp,0x10
c0010a85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a89:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010a8c:	52                   	push   edx
c0010a8d:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010a90:	51                   	push   ecx
c0010a91:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a94:	50                   	push   eax
c0010a95:	e8 3e 2b 00 00       	call   c00135d8 <waitTask(int, int*, int)>
c0010a9a:	83 c4 1c             	add    esp,0x1c
c0010a9d:	99                   	cdq    
c0010a9e:	c3                   	ret    

c0010a9f <SysNotImpl(regs*)>:
c0010a9f:	83 ec 18             	sub    esp,0x18
c0010aa2:	68 b1 e2 01 c0       	push   0xc001e2b1
c0010aa7:	e8 b3 f6 ff ff       	call   c001015f <KePanic(char const*)>
c0010aac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ab1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ab6:	83 c4 1c             	add    esp,0x1c
c0010ab9:	c3                   	ret    

c0010aba <SysPanic(regs*)>:
c0010aba:	83 ec 18             	sub    esp,0x18
c0010abd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ac1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010ac4:	50                   	push   eax
c0010ac5:	e8 95 f6 ff ff       	call   c001015f <KePanic(char const*)>
c0010aca:	b8 01 00 00 00       	mov    eax,0x1
c0010acf:	31 d2                	xor    edx,edx
c0010ad1:	83 c4 1c             	add    esp,0x1c
c0010ad4:	c3                   	ret    

c0010ad5 <SysRmdir(regs*)>:
c0010ad5:	56                   	push   esi
c0010ad6:	53                   	push   ebx
c0010ad7:	83 ec 20             	sub    esp,0x20
c0010ada:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ade:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010ae1:	68 14 01 00 00       	push   0x114
c0010ae6:	e8 ce 6c ff ff       	call   c00077b9 <malloc>
c0010aeb:	83 c4 0c             	add    esp,0xc
c0010aee:	89 c3                	mov    ebx,eax
c0010af0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010af5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010af8:	50                   	push   eax
c0010af9:	56                   	push   esi
c0010afa:	53                   	push   ebx
c0010afb:	e8 56 9f ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c0010b00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b03:	e8 86 a1 ff ff       	call   c000ac8e <File::unlink()>
c0010b08:	83 c4 10             	add    esp,0x10
c0010b0b:	85 db                	test   ebx,ebx
c0010b0d:	74 14                	je     c0010b23 <SysRmdir(regs*)+0x4e>
c0010b0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b13:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010b15:	83 ec 0c             	sub    esp,0xc
c0010b18:	53                   	push   ebx
c0010b19:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010b1c:	83 c4 10             	add    esp,0x10
c0010b1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b23:	85 c0                	test   eax,eax
c0010b25:	0f 95 c0             	setne  al
c0010b28:	31 d2                	xor    edx,edx
c0010b2a:	25 ff 00 00 00       	and    eax,0xff
c0010b2f:	f7 d8                	neg    eax
c0010b31:	83 d2 00             	adc    edx,0x0
c0010b34:	83 c4 14             	add    esp,0x14
c0010b37:	f7 da                	neg    edx
c0010b39:	5b                   	pop    ebx
c0010b3a:	5e                   	pop    esi
c0010b3b:	c3                   	ret    

c0010b3c <SysUnlink(regs*)>:
c0010b3c:	56                   	push   esi
c0010b3d:	53                   	push   ebx
c0010b3e:	83 ec 20             	sub    esp,0x20
c0010b41:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010b45:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010b48:	68 14 01 00 00       	push   0x114
c0010b4d:	e8 67 6c ff ff       	call   c00077b9 <malloc>
c0010b52:	83 c4 0c             	add    esp,0xc
c0010b55:	89 c3                	mov    ebx,eax
c0010b57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b5c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b5f:	50                   	push   eax
c0010b60:	56                   	push   esi
c0010b61:	53                   	push   ebx
c0010b62:	e8 ef 9e ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c0010b67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b6a:	e8 1f a1 ff ff       	call   c000ac8e <File::unlink()>
c0010b6f:	83 c4 10             	add    esp,0x10
c0010b72:	85 db                	test   ebx,ebx
c0010b74:	74 14                	je     c0010b8a <SysUnlink(regs*)+0x4e>
c0010b76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b7a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010b7c:	83 ec 0c             	sub    esp,0xc
c0010b7f:	53                   	push   ebx
c0010b80:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010b83:	83 c4 10             	add    esp,0x10
c0010b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b8a:	85 c0                	test   eax,eax
c0010b8c:	0f 95 c0             	setne  al
c0010b8f:	31 d2                	xor    edx,edx
c0010b91:	25 ff 00 00 00       	and    eax,0xff
c0010b96:	f7 d8                	neg    eax
c0010b98:	83 d2 00             	adc    edx,0x0
c0010b9b:	83 c4 14             	add    esp,0x14
c0010b9e:	f7 da                	neg    edx
c0010ba0:	5b                   	pop    ebx
c0010ba1:	5e                   	pop    esi
c0010ba2:	c3                   	ret    

c0010ba3 <SysGetArgv(regs*)>:
c0010ba3:	83 ec 0c             	sub    esp,0xc
c0010ba6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010baa:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010bad:	85 c0                	test   eax,eax
c0010baf:	78 2c                	js     c0010bdd <SysGetArgv(regs*)+0x3a>
c0010bb1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010bb7:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010bba:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010bc0:	7d 1b                	jge    c0010bdd <SysGetArgv(regs*)+0x3a>
c0010bc2:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010bc9:	85 c0                	test   eax,eax
c0010bcb:	74 18                	je     c0010be5 <SysGetArgv(regs*)+0x42>
c0010bcd:	83 ec 08             	sub    esp,0x8
c0010bd0:	50                   	push   eax
c0010bd1:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010bd4:	50                   	push   eax
c0010bd5:	e8 26 fa fe ff       	call   c0000600 <strcpy>
c0010bda:	83 c4 10             	add    esp,0x10
c0010bdd:	31 c0                	xor    eax,eax
c0010bdf:	31 d2                	xor    edx,edx
c0010be1:	83 c4 0c             	add    esp,0xc
c0010be4:	c3                   	ret    
c0010be5:	b8 01 00 00 00       	mov    eax,0x1
c0010bea:	31 d2                	xor    edx,edx
c0010bec:	83 c4 0c             	add    esp,0xc
c0010bef:	c3                   	ret    

c0010bf0 <SysUSleep(regs*)>:
c0010bf0:	83 ec 1c             	sub    esp,0x1c
c0010bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010bf7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010bfa:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010bfd:	6a 00                	push   0x0
c0010bff:	6a 64                	push   0x64
c0010c01:	52                   	push   edx
c0010c02:	50                   	push   eax
c0010c03:	e8 a8 b0 00 00       	call   c001bcb0 <__udivdi3>
c0010c08:	83 c4 14             	add    esp,0x14
c0010c0b:	50                   	push   eax
c0010c0c:	e8 9b 2a 00 00       	call   c00136ac <milliTenthSleep(unsigned int)>
c0010c11:	31 c0                	xor    eax,eax
c0010c13:	31 d2                	xor    edx,edx
c0010c15:	83 c4 1c             	add    esp,0x1c
c0010c18:	c3                   	ret    

c0010c19 <SysSpawn(regs*)>:
c0010c19:	56                   	push   esi
c0010c1a:	53                   	push   ebx
c0010c1b:	50                   	push   eax
c0010c1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c20:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c23:	85 c0                	test   eax,eax
c0010c25:	75 08                	jne    c0010c2f <SysSpawn(regs*)+0x16>
c0010c27:	59                   	pop    ecx
c0010c28:	31 c0                	xor    eax,eax
c0010c2a:	31 d2                	xor    edx,edx
c0010c2c:	5b                   	pop    ebx
c0010c2d:	5e                   	pop    esi
c0010c2e:	c3                   	ret    
c0010c2f:	83 ec 0c             	sub    esp,0xc
c0010c32:	68 20 07 00 00       	push   0x720
c0010c37:	e8 7d 6b ff ff       	call   c00077b9 <malloc>
c0010c3c:	83 c4 10             	add    esp,0x10
c0010c3f:	89 c6                	mov    esi,eax
c0010c41:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010c44:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c47:	85 c0                	test   eax,eax
c0010c49:	75 33                	jne    c0010c7e <SysSpawn(regs*)+0x65>
c0010c4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c50:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c53:	52                   	push   edx
c0010c54:	50                   	push   eax
c0010c55:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010c58:	53                   	push   ebx
c0010c59:	56                   	push   esi
c0010c5a:	e8 19 21 00 00       	call   c0012d78 <Process::Process(char const*, Process*, char**)>
c0010c5f:	83 c4 10             	add    esp,0x10
c0010c62:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010c69:	75 bc                	jne    c0010c27 <SysSpawn(regs*)+0xe>
c0010c6b:	83 ec 0c             	sub    esp,0xc
c0010c6e:	56                   	push   esi
c0010c6f:	e8 10 26 00 00       	call   c0013284 <Process::createUserThread()>
c0010c74:	8b 06                	mov    eax,DWORD PTR [esi]
c0010c76:	83 c4 10             	add    esp,0x10
c0010c79:	99                   	cdq    
c0010c7a:	59                   	pop    ecx
c0010c7b:	5b                   	pop    ebx
c0010c7c:	5e                   	pop    esi
c0010c7d:	c3                   	ret    
c0010c7e:	31 c0                	xor    eax,eax
c0010c80:	eb d1                	jmp    c0010c53 <SysSpawn(regs*)+0x3a>

c0010c82 <SysGetEnv(regs*)>:
c0010c82:	57                   	push   edi
c0010c83:	56                   	push   esi
c0010c84:	53                   	push   ebx
c0010c85:	83 ec 1c             	sub    esp,0x1c
c0010c88:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010c8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c91:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010c94:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010c97:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c9a:	50                   	push   eax
c0010c9b:	e8 77 f3 ff ff       	call   c0010017 <Krnl::getProcessTotalEnvCount(Process*)>
c0010ca0:	83 c4 10             	add    esp,0x10
c0010ca3:	39 c7                	cmp    edi,eax
c0010ca5:	7c 14                	jl     c0010cbb <SysGetEnv(regs*)+0x39>
c0010ca7:	85 f6                	test   esi,esi
c0010ca9:	75 0b                	jne    c0010cb6 <SysGetEnv(regs*)+0x34>
c0010cab:	83 c4 10             	add    esp,0x10
c0010cae:	31 c0                	xor    eax,eax
c0010cb0:	5b                   	pop    ebx
c0010cb1:	31 d2                	xor    edx,edx
c0010cb3:	5e                   	pop    esi
c0010cb4:	5f                   	pop    edi
c0010cb5:	c3                   	ret    
c0010cb6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010cb9:	eb f0                	jmp    c0010cab <SysGetEnv(regs*)+0x29>
c0010cbb:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010cbf:	52                   	push   edx
c0010cc0:	57                   	push   edi
c0010cc1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010cc7:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0010cca:	51                   	push   ecx
c0010ccb:	50                   	push   eax
c0010ccc:	e8 66 f3 ff ff       	call   c0010037 <Krnl::getProcessEnvPair(Process*, int)>
c0010cd1:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010cd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010cd8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010cdc:	83 c4 0c             	add    esp,0xc
c0010cdf:	85 db                	test   ebx,ebx
c0010ce1:	75 23                	jne    c0010d06 <SysGetEnv(regs*)+0x84>
c0010ce3:	83 ec 0c             	sub    esp,0xc
c0010ce6:	50                   	push   eax
c0010ce7:	e8 54 f8 fe ff       	call   c0000540 <strlen>
c0010cec:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010cef:	89 c3                	mov    ebx,eax
c0010cf1:	e8 4a f8 fe ff       	call   c0000540 <strlen>
c0010cf6:	31 d2                	xor    edx,edx
c0010cf8:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010cfc:	83 c4 10             	add    esp,0x10
c0010cff:	83 c4 10             	add    esp,0x10
c0010d02:	5b                   	pop    ebx
c0010d03:	5e                   	pop    esi
c0010d04:	5f                   	pop    edi
c0010d05:	c3                   	ret    
c0010d06:	83 ec 08             	sub    esp,0x8
c0010d09:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010d0c:	50                   	push   eax
c0010d0d:	56                   	push   esi
c0010d0e:	e8 ed f8 fe ff       	call   c0000600 <strcpy>
c0010d13:	58                   	pop    eax
c0010d14:	5a                   	pop    edx
c0010d15:	68 cb e2 01 c0       	push   0xc001e2cb
c0010d1a:	56                   	push   esi
c0010d1b:	e8 a0 fa fe ff       	call   c00007c0 <strcat>
c0010d20:	59                   	pop    ecx
c0010d21:	5b                   	pop    ebx
c0010d22:	57                   	push   edi
c0010d23:	56                   	push   esi
c0010d24:	e8 97 fa fe ff       	call   c00007c0 <strcat>
c0010d29:	83 c4 10             	add    esp,0x10
c0010d2c:	e9 7a ff ff ff       	jmp    c0010cab <SysGetEnv(regs*)+0x29>

c0010d31 <SysSetFatAttrib(regs*)>:
c0010d31:	57                   	push   edi
c0010d32:	56                   	push   esi
c0010d33:	53                   	push   ebx
c0010d34:	83 ec 1c             	sub    esp,0x1c
c0010d37:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010d3b:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010d3e:	68 14 01 00 00       	push   0x114
c0010d43:	e8 71 6a ff ff       	call   c00077b9 <malloc>
c0010d48:	83 c4 0c             	add    esp,0xc
c0010d4b:	89 c3                	mov    ebx,eax
c0010d4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d55:	50                   	push   eax
c0010d56:	57                   	push   edi
c0010d57:	53                   	push   ebx
c0010d58:	e8 f9 9c ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c0010d5d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010d60:	83 c4 0c             	add    esp,0xc
c0010d63:	0f b6 d4             	movzx  edx,ah
c0010d66:	25 ff 00 00 00       	and    eax,0xff
c0010d6b:	52                   	push   edx
c0010d6c:	50                   	push   eax
c0010d6d:	53                   	push   ebx
c0010d6e:	e8 b5 9f ff ff       	call   c000ad28 <File::chfatattr(unsigned char, unsigned char)>
c0010d73:	83 c4 10             	add    esp,0x10
c0010d76:	85 db                	test   ebx,ebx
c0010d78:	74 14                	je     c0010d8e <SysSetFatAttrib(regs*)+0x5d>
c0010d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d7e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010d80:	83 ec 0c             	sub    esp,0xc
c0010d83:	53                   	push   ebx
c0010d84:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010d87:	83 c4 10             	add    esp,0x10
c0010d8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d8e:	85 c0                	test   eax,eax
c0010d90:	0f 95 c0             	setne  al
c0010d93:	31 d2                	xor    edx,edx
c0010d95:	25 ff 00 00 00       	and    eax,0xff
c0010d9a:	f7 d8                	neg    eax
c0010d9c:	83 d2 00             	adc    edx,0x0
c0010d9f:	83 c4 10             	add    esp,0x10
c0010da2:	f7 da                	neg    edx
c0010da4:	5b                   	pop    ebx
c0010da5:	5e                   	pop    esi
c0010da6:	5f                   	pop    edi
c0010da7:	c3                   	ret    

c0010da8 <SysPipe(regs*)>:
c0010da8:	57                   	push   edi
c0010da9:	56                   	push   esi
c0010daa:	53                   	push   ebx
c0010dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010daf:	83 ec 0c             	sub    esp,0xc
c0010db2:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010db5:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010db8:	6a 20                	push   0x20
c0010dba:	e8 fa 69 ff ff       	call   c00077b9 <malloc>
c0010dbf:	89 c3                	mov    ebx,eax
c0010dc1:	58                   	pop    eax
c0010dc2:	5a                   	pop    edx
c0010dc3:	68 00 50 00 00       	push   0x5000
c0010dc8:	53                   	push   ebx
c0010dc9:	e8 f0 72 ff ff       	call   c00080be <Pipe::Pipe(int)>
c0010dce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dd1:	e8 6c 80 ff ff       	call   c0008e42 <UnixFile::getFileDescriptor()>
c0010dd6:	89 07                	mov    DWORD PTR [edi],eax
c0010dd8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ddb:	e8 62 80 ff ff       	call   c0008e42 <UnixFile::getFileDescriptor()>
c0010de0:	83 c4 10             	add    esp,0x10
c0010de3:	89 06                	mov    DWORD PTR [esi],eax
c0010de5:	31 d2                	xor    edx,edx
c0010de7:	5b                   	pop    ebx
c0010de8:	31 c0                	xor    eax,eax
c0010dea:	5e                   	pop    esi
c0010deb:	5f                   	pop    edi
c0010dec:	c3                   	ret    

c0010ded <SysGetUnixTime(regs*)>:
c0010ded:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0010df2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010df8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dfc:	e9 65 a6 ff ff       	jmp    c000b466 <Clock::timeInSecondsLocal()>

c0010e01 <string_ends_with(char const*, char const*)>:
c0010e01:	57                   	push   edi
c0010e02:	56                   	push   esi
c0010e03:	53                   	push   ebx
c0010e04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010e08:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010e0c:	83 ec 0c             	sub    esp,0xc
c0010e0f:	53                   	push   ebx
c0010e10:	e8 2b f7 fe ff       	call   c0000540 <strlen>
c0010e15:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010e18:	89 c6                	mov    esi,eax
c0010e1a:	e8 21 f7 fe ff       	call   c0000540 <strlen>
c0010e1f:	83 c4 10             	add    esp,0x10
c0010e22:	39 c6                	cmp    esi,eax
c0010e24:	7d 06                	jge    c0010e2c <string_ends_with(char const*, char const*)+0x2b>
c0010e26:	5b                   	pop    ebx
c0010e27:	31 c0                	xor    eax,eax
c0010e29:	5e                   	pop    esi
c0010e2a:	5f                   	pop    edi
c0010e2b:	c3                   	ret    
c0010e2c:	83 ec 08             	sub    esp,0x8
c0010e2f:	29 c6                	sub    esi,eax
c0010e31:	57                   	push   edi
c0010e32:	01 f3                	add    ebx,esi
c0010e34:	53                   	push   ebx
c0010e35:	e8 a6 f8 fe ff       	call   c00006e0 <strcmp>
c0010e3a:	83 c4 10             	add    esp,0x10
c0010e3d:	85 c0                	test   eax,eax
c0010e3f:	5b                   	pop    ebx
c0010e40:	0f 94 c0             	sete   al
c0010e43:	5e                   	pop    esi
c0010e44:	25 ff 00 00 00       	and    eax,0xff
c0010e49:	5f                   	pop    edi
c0010e4a:	c3                   	ret    

c0010e4b <SysOpen(regs*)>:
c0010e4b:	56                   	push   esi
c0010e4c:	53                   	push   ebx
c0010e4d:	81 ec 04 01 00 00    	sub    esp,0x104
c0010e53:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010e5a:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010e5d:	85 c9                	test   ecx,ecx
c0010e5f:	0f 84 b9 01 00 00    	je     c001101e <SysOpen(regs*)+0x1d3>
c0010e65:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e68:	85 c0                	test   eax,eax
c0010e6a:	0f 84 ae 01 00 00    	je     c001101e <SysOpen(regs*)+0x1d3>
c0010e70:	52                   	push   edx
c0010e71:	68 cd e2 01 c0       	push   0xc001e2cd
c0010e76:	50                   	push   eax
c0010e77:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010e7b:	56                   	push   esi
c0010e7c:	e8 2b 9a ff ff       	call   c000a8ac <Fs::standardiseFiles(char*, char const*, char const*)>
c0010e81:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e84:	e8 b7 f6 fe ff       	call   c0000540 <strlen>
c0010e89:	83 c4 10             	add    esp,0x10
c0010e8c:	48                   	dec    eax
c0010e8d:	74 1d                	je     c0010eac <SysOpen(regs*)+0x61>
c0010e8f:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010e92:	eb 0f                	jmp    c0010ea3 <SysOpen(regs*)+0x58>
c0010e94:	80 fa 3a             	cmp    dl,0x3a
c0010e97:	74 0f                	je     c0010ea8 <SysOpen(regs*)+0x5d>
c0010e99:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010e9d:	48                   	dec    eax
c0010e9e:	74 0c                	je     c0010eac <SysOpen(regs*)+0x61>
c0010ea0:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010ea3:	80 fa 2e             	cmp    dl,0x2e
c0010ea6:	75 ec                	jne    c0010e94 <SysOpen(regs*)+0x49>
c0010ea8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010eac:	83 ec 08             	sub    esp,0x8
c0010eaf:	68 d1 e2 01 c0       	push   0xc001e2d1
c0010eb4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010eb7:	50                   	push   eax
c0010eb8:	e8 44 ff ff ff       	call   c0010e01 <string_ends_with(char const*, char const*)>
c0010ebd:	83 c4 10             	add    esp,0x10
c0010ec0:	85 c0                	test   eax,eax
c0010ec2:	74 1d                	je     c0010ee1 <SysOpen(regs*)+0x96>
c0010ec4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ec7:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010ecd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ed4:	81 c4 04 01 00 00    	add    esp,0x104
c0010eda:	31 c0                	xor    eax,eax
c0010edc:	31 d2                	xor    edx,edx
c0010ede:	5b                   	pop    ebx
c0010edf:	5e                   	pop    esi
c0010ee0:	c3                   	ret    
c0010ee1:	83 ec 08             	sub    esp,0x8
c0010ee4:	68 d6 e2 01 c0       	push   0xc001e2d6
c0010ee9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010eec:	50                   	push   eax
c0010eed:	e8 0f ff ff ff       	call   c0010e01 <string_ends_with(char const*, char const*)>
c0010ef2:	83 c4 10             	add    esp,0x10
c0010ef5:	85 c0                	test   eax,eax
c0010ef7:	75 cb                	jne    c0010ec4 <SysOpen(regs*)+0x79>
c0010ef9:	83 ec 08             	sub    esp,0x8
c0010efc:	68 d2 e2 01 c0       	push   0xc001e2d2
c0010f01:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f04:	50                   	push   eax
c0010f05:	e8 d6 f7 fe ff       	call   c00006e0 <strcmp>
c0010f0a:	83 c4 10             	add    esp,0x10
c0010f0d:	85 c0                	test   eax,eax
c0010f0f:	74 b3                	je     c0010ec4 <SysOpen(regs*)+0x79>
c0010f11:	83 ec 08             	sub    esp,0x8
c0010f14:	68 d1 e2 01 c0       	push   0xc001e2d1
c0010f19:	56                   	push   esi
c0010f1a:	e8 e2 fe ff ff       	call   c0010e01 <string_ends_with(char const*, char const*)>
c0010f1f:	83 c4 10             	add    esp,0x10
c0010f22:	85 c0                	test   eax,eax
c0010f24:	75 9e                	jne    c0010ec4 <SysOpen(regs*)+0x79>
c0010f26:	83 ec 08             	sub    esp,0x8
c0010f29:	68 db e2 01 c0       	push   0xc001e2db
c0010f2e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f31:	50                   	push   eax
c0010f32:	e8 ca fe ff ff       	call   c0010e01 <string_ends_with(char const*, char const*)>
c0010f37:	83 c4 10             	add    esp,0x10
c0010f3a:	85 c0                	test   eax,eax
c0010f3c:	0f 85 ef 00 00 00    	jne    c0011031 <SysOpen(regs*)+0x1e6>
c0010f42:	83 ec 08             	sub    esp,0x8
c0010f45:	68 e0 e2 01 c0       	push   0xc001e2e0
c0010f4a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f4d:	50                   	push   eax
c0010f4e:	e8 ae fe ff ff       	call   c0010e01 <string_ends_with(char const*, char const*)>
c0010f53:	83 c4 10             	add    esp,0x10
c0010f56:	85 c0                	test   eax,eax
c0010f58:	0f 85 d3 00 00 00    	jne    c0011031 <SysOpen(regs*)+0x1e6>
c0010f5e:	83 ec 08             	sub    esp,0x8
c0010f61:	68 dc e2 01 c0       	push   0xc001e2dc
c0010f66:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010f69:	51                   	push   ecx
c0010f6a:	e8 71 f7 fe ff       	call   c00006e0 <strcmp>
c0010f6f:	83 c4 10             	add    esp,0x10
c0010f72:	85 c0                	test   eax,eax
c0010f74:	0f 84 b7 00 00 00    	je     c0011031 <SysOpen(regs*)+0x1e6>
c0010f7a:	83 ec 08             	sub    esp,0x8
c0010f7d:	68 db e2 01 c0       	push   0xc001e2db
c0010f82:	56                   	push   esi
c0010f83:	e8 79 fe ff ff       	call   c0010e01 <string_ends_with(char const*, char const*)>
c0010f88:	83 c4 10             	add    esp,0x10
c0010f8b:	85 c0                	test   eax,eax
c0010f8d:	0f 85 9e 00 00 00    	jne    c0011031 <SysOpen(regs*)+0x1e6>
c0010f93:	83 ec 0c             	sub    esp,0xc
c0010f96:	68 14 01 00 00       	push   0x114
c0010f9b:	e8 19 68 ff ff       	call   c00077b9 <malloc>
c0010fa0:	83 c4 0c             	add    esp,0xc
c0010fa3:	89 c6                	mov    esi,eax
c0010fa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010faa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fad:	50                   	push   eax
c0010fae:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010fb1:	52                   	push   edx
c0010fb2:	56                   	push   esi
c0010fb3:	e8 9e 9a ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c0010fb8:	83 c4 10             	add    esp,0x10
c0010fbb:	85 f6                	test   esi,esi
c0010fbd:	74 5f                	je     c001101e <SysOpen(regs*)+0x1d3>
c0010fbf:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010fc2:	89 d0                	mov    eax,edx
c0010fc4:	25 ff 00 00 00       	and    eax,0xff
c0010fc9:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010fcc:	89 d0                	mov    eax,edx
c0010fce:	83 e0 01             	and    eax,0x1
c0010fd1:	f6 c2 02             	test   dl,0x2
c0010fd4:	74 03                	je     c0010fd9 <SysOpen(regs*)+0x18e>
c0010fd6:	83 c8 02             	or     eax,0x2
c0010fd9:	f6 c2 04             	test   dl,0x4
c0010fdc:	74 03                	je     c0010fe1 <SysOpen(regs*)+0x196>
c0010fde:	83 c8 04             	or     eax,0x4
c0010fe1:	f6 c2 08             	test   dl,0x8
c0010fe4:	74 03                	je     c0010fe9 <SysOpen(regs*)+0x19e>
c0010fe6:	83 c8 0a             	or     eax,0xa
c0010fe9:	83 e2 10             	and    edx,0x10
c0010fec:	74 03                	je     c0010ff1 <SysOpen(regs*)+0x1a6>
c0010fee:	83 c8 12             	or     eax,0x12
c0010ff1:	83 ec 08             	sub    esp,0x8
c0010ff4:	50                   	push   eax
c0010ff5:	56                   	push   esi
c0010ff6:	e8 1b 9b ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c0010ffb:	83 c4 10             	add    esp,0x10
c0010ffe:	85 c0                	test   eax,eax
c0011000:	75 1c                	jne    c001101e <SysOpen(regs*)+0x1d3>
c0011002:	83 ec 0c             	sub    esp,0xc
c0011005:	56                   	push   esi
c0011006:	e8 37 7e ff ff       	call   c0008e42 <UnixFile::getFileDescriptor()>
c001100b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001100e:	83 c4 10             	add    esp,0x10
c0011011:	89 02                	mov    DWORD PTR [edx],eax
c0011013:	c1 f8 1f             	sar    eax,0x1f
c0011016:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011019:	e9 b6 fe ff ff       	jmp    c0010ed4 <SysOpen(regs*)+0x89>
c001101e:	81 c4 04 01 00 00    	add    esp,0x104
c0011024:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011029:	ba ff ff ff ff       	mov    edx,0xffffffff
c001102e:	5b                   	pop    ebx
c001102f:	5e                   	pop    esi
c0011030:	c3                   	ret    
c0011031:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011034:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001103a:	e9 8e fe ff ff       	jmp    c0010ecd <SysOpen(regs*)+0x82>

c001103f <KeSystemCall(regs*, void*)>:
c001103f:	53                   	push   ebx
c0011040:	83 ec 10             	sub    esp,0x10
c0011043:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011047:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001104a:	68 e5 e2 01 c0       	push   0xc001e2e5
c001104f:	e8 8c 94 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0011054:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011057:	83 c4 10             	add    esp,0x10
c001105a:	83 f8 31             	cmp    eax,0x31
c001105d:	77 37                	ja     c0011096 <KeSystemCall(regs*, void*)+0x57>
c001105f:	8b 14 85 00 f4 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0c00]
c0011066:	85 d2                	test   edx,edx
c0011068:	74 2c                	je     c0011096 <KeSystemCall(regs*, void*)+0x57>
c001106a:	83 ec 0c             	sub    esp,0xc
c001106d:	53                   	push   ebx
c001106e:	ff d2                	call   edx
c0011070:	83 c4 10             	add    esp,0x10
c0011073:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011076:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001107b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001107e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011084:	80 78 58 00          	cmp    BYTE PTR [eax+0x58],0x0
c0011088:	74 1c                	je     c00110a6 <KeSystemCall(regs*, void*)+0x67>
c001108a:	83 ec 0c             	sub    esp,0xc
c001108d:	6a ff                	push   0xffffffff
c001108f:	e8 3c 2c 00 00       	call   c0013cd0 <terminateTask(int)>
c0011094:	eb 0d                	jmp    c00110a3 <KeSystemCall(regs*, void*)+0x64>
c0011096:	52                   	push   edx
c0011097:	52                   	push   edx
c0011098:	50                   	push   eax
c0011099:	68 f5 e2 01 c0       	push   0xc001e2f5
c001109e:	e8 3d 94 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c00110a3:	83 c4 10             	add    esp,0x10
c00110a6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00110ab:	31 d2                	xor    edx,edx
c00110ad:	83 c4 08             	add    esp,0x8
c00110b0:	5b                   	pop    ebx
c00110b1:	c3                   	ret    

c00110b2 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00110b2:	55                   	push   ebp
c00110b3:	57                   	push   edi
c00110b4:	56                   	push   esi
c00110b5:	53                   	push   ebx
c00110b6:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00110bc:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00110c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00110c5:	8d 6e 01             	lea    ebp,[esi+0x1]
c00110c8:	80 fb 40             	cmp    bl,0x40
c00110cb:	75 1b                	jne    c00110e8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00110cd:	8a 16                	mov    dl,BYTE PTR [esi]
c00110cf:	84 d2                	test   dl,dl
c00110d1:	0f 84 f1 00 00 00    	je     c00111c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00110d7:	8d 46 01             	lea    eax,[esi+0x1]
c00110da:	80 fa 3a             	cmp    dl,0x3a
c00110dd:	74 04                	je     c00110e3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00110df:	89 c6                	mov    esi,eax
c00110e1:	eb ea                	jmp    c00110cd <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00110e3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110e6:	89 c6                	mov    esi,eax
c00110e8:	50                   	push   eax
c00110e9:	6a 40                	push   0x40
c00110eb:	6a 00                	push   0x0
c00110ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00110f1:	50                   	push   eax
c00110f2:	e8 d9 f3 fe ff       	call   c00004d0 <memset>
c00110f7:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00110fe:	31 c0                	xor    eax,eax
c0011100:	83 c4 10             	add    esp,0x10
c0011103:	8a 0f                	mov    cl,BYTE PTR [edi]
c0011105:	84 c9                	test   cl,cl
c0011107:	0f 84 bb 00 00 00    	je     c00111c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001110d:	3d c7 00 00 00       	cmp    eax,0xc7
c0011112:	0f 8f b0 00 00 00    	jg     c00111c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011118:	80 f9 0a             	cmp    cl,0xa
c001111b:	0f 85 98 00 00 00    	jne    c00111b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0011121:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0011126:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001112a:	a8 df                	test   al,0xdf
c001112c:	0f 94 c1             	sete   cl
c001112f:	3c 23                	cmp    al,0x23
c0011131:	0f 94 c2             	sete   dl
c0011134:	08 d1                	or     cl,dl
c0011136:	75 4a                	jne    c0011182 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011138:	8d 50 f7             	lea    edx,[eax-0x9]
c001113b:	80 fa 01             	cmp    dl,0x1
c001113e:	76 42                	jbe    c0011182 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011140:	3c 5b                	cmp    al,0x5b
c0011142:	75 42                	jne    c0011186 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0011144:	80 fb 40             	cmp    bl,0x40
c0011147:	75 39                	jne    c0011182 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011149:	83 ec 0c             	sub    esp,0xc
c001114c:	8d 54 24 65          	lea    edx,[esp+0x65]
c0011150:	52                   	push   edx
c0011151:	e8 ea f3 fe ff       	call   c0000540 <strlen>
c0011156:	83 c4 10             	add    esp,0x10
c0011159:	83 f8 3f             	cmp    eax,0x3f
c001115c:	77 6a                	ja     c00111c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001115e:	50                   	push   eax
c001115f:	50                   	push   eax
c0011160:	8d 54 24 61          	lea    edx,[esp+0x61]
c0011164:	52                   	push   edx
c0011165:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011169:	52                   	push   edx
c001116a:	e8 91 f4 fe ff       	call   c0000600 <strcpy>
c001116f:	58                   	pop    eax
c0011170:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011174:	52                   	push   edx
c0011175:	e8 c6 f3 fe ff       	call   c0000540 <strlen>
c001117a:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001117f:	83 c4 10             	add    esp,0x10
c0011182:	31 d2                	xor    edx,edx
c0011184:	eb 3a                	jmp    c00111c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011186:	80 fb 40             	cmp    bl,0x40
c0011189:	74 06                	je     c0011191 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001118b:	8d 44 24 58          	lea    eax,[esp+0x58]
c001118f:	eb 20                	jmp    c00111b1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011191:	50                   	push   eax
c0011192:	50                   	push   eax
c0011193:	55                   	push   ebp
c0011194:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011198:	50                   	push   eax
c0011199:	e8 42 f5 fe ff       	call   c00006e0 <strcmp>
c001119e:	83 c4 10             	add    esp,0x10
c00111a1:	85 c0                	test   eax,eax
c00111a3:	75 dd                	jne    c0011182 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00111a5:	eb e4                	jmp    c001118b <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00111a7:	8d 50 01             	lea    edx,[eax+0x1]
c00111aa:	80 f9 3d             	cmp    cl,0x3d
c00111ad:	74 1d                	je     c00111cc <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00111af:	89 d0                	mov    eax,edx
c00111b1:	8a 08                	mov    cl,BYTE PTR [eax]
c00111b3:	84 c9                	test   cl,cl
c00111b5:	75 f0                	jne    c00111a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00111b7:	eb 0f                	jmp    c00111c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00111b9:	8d 50 01             	lea    edx,[eax+0x1]
c00111bc:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00111c0:	47                   	inc    edi
c00111c1:	89 d0                	mov    eax,edx
c00111c3:	e9 3b ff ff ff       	jmp    c0011103 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00111c8:	31 c0                	xor    eax,eax
c00111ca:	eb 33                	jmp    c00111ff <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00111cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00111d0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00111d3:	50                   	push   eax
c00111d4:	50                   	push   eax
c00111d5:	8d 44 24 60          	lea    eax,[esp+0x60]
c00111d9:	50                   	push   eax
c00111da:	56                   	push   esi
c00111db:	e8 00 f5 fe ff       	call   c00006e0 <strcmp>
c00111e0:	83 c4 10             	add    esp,0x10
c00111e3:	85 c0                	test   eax,eax
c00111e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00111e9:	75 97                	jne    c0011182 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00111eb:	51                   	push   ecx
c00111ec:	51                   	push   ecx
c00111ed:	52                   	push   edx
c00111ee:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00111f5:	e8 06 f4 fe ff       	call   c0000600 <strcpy>
c00111fa:	83 c4 10             	add    esp,0x10
c00111fd:	b0 01                	mov    al,0x1
c00111ff:	81 c4 2c 01 00 00    	add    esp,0x12c
c0011205:	5b                   	pop    ebx
c0011206:	5e                   	pop    esi
c0011207:	5f                   	pop    edi
c0011208:	5d                   	pop    ebp
c0011209:	c3                   	ret    

c001120a <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001120a:	57                   	push   edi
c001120b:	56                   	push   esi
c001120c:	53                   	push   ebx
c001120d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011213:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001121a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0011221:	53                   	push   ebx
c0011222:	e8 19 f3 fe ff       	call   c0000540 <strlen>
c0011227:	89 34 24             	mov    DWORD PTR [esp],esi
c001122a:	89 c7                	mov    edi,eax
c001122c:	e8 0f f3 fe ff       	call   c0000540 <strlen>
c0011231:	83 c4 10             	add    esp,0x10
c0011234:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0011238:	3d ff 00 00 00       	cmp    eax,0xff
c001123d:	0f 87 d3 00 00 00    	ja     c0011316 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011243:	57                   	push   edi
c0011244:	57                   	push   edi
c0011245:	56                   	push   esi
c0011246:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001124a:	56                   	push   esi
c001124b:	e8 b0 f3 fe ff       	call   c0000600 <strcpy>
c0011250:	58                   	pop    eax
c0011251:	5a                   	pop    edx
c0011252:	68 a6 e5 01 c0       	push   0xc001e5a6
c0011257:	56                   	push   esi
c0011258:	e8 63 f5 fe ff       	call   c00007c0 <strcat>
c001125d:	59                   	pop    ecx
c001125e:	5f                   	pop    edi
c001125f:	53                   	push   ebx
c0011260:	56                   	push   esi
c0011261:	e8 5a f5 fe ff       	call   c00007c0 <strcat>
c0011266:	58                   	pop    eax
c0011267:	5a                   	pop    edx
c0011268:	68 09 e3 01 c0       	push   0xc001e309
c001126d:	56                   	push   esi
c001126e:	e8 4d f5 fe ff       	call   c00007c0 <strcat>
c0011273:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001127a:	e8 3a 65 ff ff       	call   c00077b9 <malloc>
c001127f:	83 c4 0c             	add    esp,0xc
c0011282:	89 c3                	mov    ebx,eax
c0011284:	ff 35 d0 37 02 c0    	push   DWORD PTR ds:0xc00237d0
c001128a:	56                   	push   esi
c001128b:	50                   	push   eax
c001128c:	e8 c5 97 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c0011291:	83 c4 10             	add    esp,0x10
c0011294:	85 db                	test   ebx,ebx
c0011296:	74 7e                	je     c0011316 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011298:	51                   	push   ecx
c0011299:	51                   	push   ecx
c001129a:	6a 01                	push   0x1
c001129c:	53                   	push   ebx
c001129d:	e8 74 98 ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c00112a2:	83 c4 10             	add    esp,0x10
c00112a5:	85 c0                	test   eax,eax
c00112a7:	74 08                	je     c00112b1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00112a9:	83 ec 0c             	sub    esp,0xc
c00112ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112ae:	53                   	push   ebx
c00112af:	eb 5f                	jmp    c0011310 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00112b1:	52                   	push   edx
c00112b2:	8d 44 24 17          	lea    eax,[esp+0x17]
c00112b6:	50                   	push   eax
c00112b7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00112bb:	50                   	push   eax
c00112bc:	53                   	push   ebx
c00112bd:	e8 00 9b ff ff       	call   c000adc2 <File::stat(unsigned long long*, bool*)>
c00112c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00112c6:	83 c4 10             	add    esp,0x10
c00112c9:	89 c1                	mov    ecx,eax
c00112cb:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00112cf:	74 31                	je     c0011302 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00112d1:	83 ec 0c             	sub    esp,0xc
c00112d4:	50                   	push   eax
c00112d5:	e8 df 64 ff ff       	call   c00077b9 <malloc>
c00112da:	89 c6                	mov    esi,eax
c00112dc:	58                   	pop    eax
c00112dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112df:	8d 54 24 20          	lea    edx,[esp+0x20]
c00112e3:	52                   	push   edx
c00112e4:	56                   	push   esi
c00112e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00112e9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00112ed:	53                   	push   ebx
c00112ee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00112f1:	83 c4 20             	add    esp,0x20
c00112f4:	85 c0                	test   eax,eax
c00112f6:	75 0a                	jne    c0011302 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00112f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00112fc:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011300:	74 18                	je     c001131a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0011302:	83 ec 0c             	sub    esp,0xc
c0011305:	53                   	push   ebx
c0011306:	e8 69 98 ff ff       	call   c000ab74 <File::close()>
c001130b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001130d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011310:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011313:	83 c4 10             	add    esp,0x10
c0011316:	31 c0                	xor    eax,eax
c0011318:	eb 3b                	jmp    c0011355 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001131a:	83 ec 0c             	sub    esp,0xc
c001131d:	53                   	push   ebx
c001131e:	e8 51 98 ff ff       	call   c000ab74 <File::close()>
c0011323:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011325:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011328:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001132b:	83 c4 0c             	add    esp,0xc
c001132e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011335:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001133c:	56                   	push   esi
c001133d:	e8 70 fd ff ff       	call   c00110b2 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0011342:	89 34 24             	mov    DWORD PTR [esp],esi
c0011345:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011349:	e8 7b 64 ff ff       	call   c00077c9 <free>
c001134e:	83 c4 10             	add    esp,0x10
c0011351:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011355:	81 c4 20 01 00 00    	add    esp,0x120
c001135b:	5b                   	pop    ebx
c001135c:	5e                   	pop    esi
c001135d:	5f                   	pop    edi
c001135e:	c3                   	ret    

c001135f <Reg::getLine(char*, char*, char*)>:
c001135f:	57                   	push   edi
c0011360:	56                   	push   esi
c0011361:	53                   	push   ebx
c0011362:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011366:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001136a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001136e:	57                   	push   edi
c001136f:	56                   	push   esi
c0011370:	53                   	push   ebx
c0011371:	68 0e e3 01 c0       	push   0xc001e30e
c0011376:	e8 8f fe ff ff       	call   c001120a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001137b:	83 c4 10             	add    esp,0x10
c001137e:	84 c0                	test   al,al
c0011380:	75 10                	jne    c0011392 <Reg::getLine(char*, char*, char*)+0x33>
c0011382:	57                   	push   edi
c0011383:	56                   	push   esi
c0011384:	53                   	push   ebx
c0011385:	68 33 e3 01 c0       	push   0xc001e333
c001138a:	e8 7b fe ff ff       	call   c001120a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001138f:	83 c4 10             	add    esp,0x10
c0011392:	5b                   	pop    ebx
c0011393:	5e                   	pop    esi
c0011394:	5f                   	pop    edi
c0011395:	c3                   	ret    

c0011396 <Reg::readInt(char*, char*, int*)>:
c0011396:	55                   	push   ebp
c0011397:	57                   	push   edi
c0011398:	56                   	push   esi
c0011399:	53                   	push   ebx
c001139a:	81 ec f0 00 00 00    	sub    esp,0xf0
c00113a0:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00113a4:	57                   	push   edi
c00113a5:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00113ac:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00113b3:	e8 a7 ff ff ff       	call   c001135f <Reg::getLine(char*, char*, char*)>
c00113b8:	83 c4 10             	add    esp,0x10
c00113bb:	84 c0                	test   al,al
c00113bd:	0f 84 b3 00 00 00    	je     c0011476 <Reg::readInt(char*, char*, int*)+0xe0>
c00113c3:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00113c7:	80 fa 2b             	cmp    dl,0x2b
c00113ca:	74 0c                	je     c00113d8 <Reg::readInt(char*, char*, int*)+0x42>
c00113cc:	80 fa 2d             	cmp    dl,0x2d
c00113cf:	75 0e                	jne    c00113df <Reg::readInt(char*, char*, int*)+0x49>
c00113d1:	ba 01 00 00 00       	mov    edx,0x1
c00113d6:	eb 0b                	jmp    c00113e3 <Reg::readInt(char*, char*, int*)+0x4d>
c00113d8:	ba 01 00 00 00       	mov    edx,0x1
c00113dd:	eb 02                	jmp    c00113e1 <Reg::readInt(char*, char*, int*)+0x4b>
c00113df:	31 d2                	xor    edx,edx
c00113e1:	31 c0                	xor    eax,eax
c00113e3:	be 0a 00 00 00       	mov    esi,0xa
c00113e8:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00113ed:	75 20                	jne    c001140f <Reg::readInt(char*, char*, int*)+0x79>
c00113ef:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00113f3:	80 f9 78             	cmp    cl,0x78
c00113f6:	75 0a                	jne    c0011402 <Reg::readInt(char*, char*, int*)+0x6c>
c00113f8:	83 c2 02             	add    edx,0x2
c00113fb:	be 10 00 00 00       	mov    esi,0x10
c0011400:	eb 0d                	jmp    c001140f <Reg::readInt(char*, char*, int*)+0x79>
c0011402:	80 f9 62             	cmp    cl,0x62
c0011405:	75 08                	jne    c001140f <Reg::readInt(char*, char*, int*)+0x79>
c0011407:	83 c2 02             	add    edx,0x2
c001140a:	be 02 00 00 00       	mov    esi,0x2
c001140f:	01 d7                	add    edi,edx
c0011411:	31 d2                	xor    edx,edx
c0011413:	8a 1f                	mov    bl,BYTE PTR [edi]
c0011415:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0011419:	80 fb 0d             	cmp    bl,0xd
c001141c:	0f 94 c3             	sete   bl
c001141f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011424:	0f 94 c1             	sete   cl
c0011427:	08 cb                	or     bl,cl
c0011429:	75 3a                	jne    c0011465 <Reg::readInt(char*, char*, int*)+0xcf>
c001142b:	0f af d6             	imul   edx,esi
c001142e:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0011433:	83 fe 10             	cmp    esi,0x10
c0011436:	75 26                	jne    c001145e <Reg::readInt(char*, char*, int*)+0xc8>
c0011438:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001143c:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001143f:	89 e9                	mov    ecx,ebp
c0011441:	80 f9 05             	cmp    cl,0x5
c0011444:	77 06                	ja     c001144c <Reg::readInt(char*, char*, int*)+0xb6>
c0011446:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001144a:	eb 16                	jmp    c0011462 <Reg::readInt(char*, char*, int*)+0xcc>
c001144c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011450:	83 e9 61             	sub    ecx,0x61
c0011453:	80 f9 05             	cmp    cl,0x5
c0011456:	77 06                	ja     c001145e <Reg::readInt(char*, char*, int*)+0xc8>
c0011458:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001145c:	eb 04                	jmp    c0011462 <Reg::readInt(char*, char*, int*)+0xcc>
c001145e:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0011462:	47                   	inc    edi
c0011463:	eb ae                	jmp    c0011413 <Reg::readInt(char*, char*, int*)+0x7d>
c0011465:	84 c0                	test   al,al
c0011467:	74 02                	je     c001146b <Reg::readInt(char*, char*, int*)+0xd5>
c0011469:	f7 da                	neg    edx
c001146b:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0011472:	89 10                	mov    DWORD PTR [eax],edx
c0011474:	88 d8                	mov    al,bl
c0011476:	81 c4 ec 00 00 00    	add    esp,0xec
c001147c:	5b                   	pop    ebx
c001147d:	5e                   	pop    esi
c001147e:	5f                   	pop    edi
c001147f:	5d                   	pop    ebp
c0011480:	c3                   	ret    

c0011481 <Reg::readString(char*, char*, char*, int)>:
c0011481:	57                   	push   edi
c0011482:	56                   	push   esi
c0011483:	53                   	push   ebx
c0011484:	81 ec d4 00 00 00    	sub    esp,0xd4
c001148a:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011491:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011495:	57                   	push   edi
c0011496:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001149d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00114a4:	e8 b6 fe ff ff       	call   c001135f <Reg::getLine(char*, char*, char*)>
c00114a9:	83 c4 10             	add    esp,0x10
c00114ac:	89 c6                	mov    esi,eax
c00114ae:	84 c0                	test   al,al
c00114b0:	74 44                	je     c00114f6 <Reg::readString(char*, char*, char*, int)+0x75>
c00114b2:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00114b9:	31 c0                	xor    eax,eax
c00114bb:	4a                   	dec    edx
c00114bc:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00114bf:	84 c9                	test   cl,cl
c00114c1:	74 0f                	je     c00114d2 <Reg::readString(char*, char*, char*, int)+0x51>
c00114c3:	39 c2                	cmp    edx,eax
c00114c5:	7e 0b                	jle    c00114d2 <Reg::readString(char*, char*, char*, int)+0x51>
c00114c7:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00114ca:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00114cf:	40                   	inc    eax
c00114d0:	eb ea                	jmp    c00114bc <Reg::readString(char*, char*, char*, int)+0x3b>
c00114d2:	83 ec 0c             	sub    esp,0xc
c00114d5:	53                   	push   ebx
c00114d6:	e8 65 f0 fe ff       	call   c0000540 <strlen>
c00114db:	83 c4 10             	add    esp,0x10
c00114de:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00114e3:	75 11                	jne    c00114f6 <Reg::readString(char*, char*, char*, int)+0x75>
c00114e5:	83 ec 0c             	sub    esp,0xc
c00114e8:	53                   	push   ebx
c00114e9:	e8 52 f0 fe ff       	call   c0000540 <strlen>
c00114ee:	83 c4 10             	add    esp,0x10
c00114f1:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00114f6:	81 c4 d0 00 00 00    	add    esp,0xd0
c00114fc:	89 f0                	mov    eax,esi
c00114fe:	5b                   	pop    ebx
c00114ff:	5e                   	pop    esi
c0011500:	5f                   	pop    edi
c0011501:	c3                   	ret    

c0011502 <Reg::readBool(char*, char*, bool*)>:
c0011502:	83 ec 20             	sub    esp,0x20
c0011505:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011509:	50                   	push   eax
c001150a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001150e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011512:	e8 7f fe ff ff       	call   c0011396 <Reg::readInt(char*, char*, int*)>
c0011517:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001151c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0011520:	0f 95 02             	setne  BYTE PTR [edx]
c0011523:	83 c4 2c             	add    esp,0x2c
c0011526:	c3                   	ret    

c0011527 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0011527:	53                   	push   ebx
c0011528:	83 ec 1c             	sub    esp,0x1c
c001152b:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001152f:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011533:	50                   	push   eax
c0011534:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011538:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001153c:	e8 c1 ff ff ff       	call   c0011502 <Reg::readBool(char*, char*, bool*)>
c0011541:	83 c4 10             	add    esp,0x10
c0011544:	84 c0                	test   al,al
c0011546:	74 04                	je     c001154c <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0011548:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001154c:	88 d8                	mov    al,bl
c001154e:	83 c4 18             	add    esp,0x18
c0011551:	5b                   	pop    ebx
c0011552:	c3                   	ret    

c0011553 <Reg::readIntWithDefault(char*, char*, int)>:
c0011553:	53                   	push   ebx
c0011554:	83 ec 1c             	sub    esp,0x1c
c0011557:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001155b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001155f:	50                   	push   eax
c0011560:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011564:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011568:	e8 29 fe ff ff       	call   c0011396 <Reg::readInt(char*, char*, int*)>
c001156d:	83 c4 10             	add    esp,0x10
c0011570:	84 c0                	test   al,al
c0011572:	74 04                	je     c0011578 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0011574:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011578:	89 d8                	mov    eax,ebx
c001157a:	83 c4 18             	add    esp,0x18
c001157d:	5b                   	pop    ebx
c001157e:	c3                   	ret    

c001157f <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001157f:	57                   	push   edi
c0011580:	56                   	push   esi
c0011581:	56                   	push   esi
c0011582:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011586:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001158a:	56                   	push   esi
c001158b:	57                   	push   edi
c001158c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011594:	e8 e8 fe ff ff       	call   c0011481 <Reg::readString(char*, char*, char*, int)>
c0011599:	83 c4 10             	add    esp,0x10
c001159c:	84 c0                	test   al,al
c001159e:	75 1a                	jne    c00115ba <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00115a0:	51                   	push   ecx
c00115a1:	56                   	push   esi
c00115a2:	6a 00                	push   0x0
c00115a4:	57                   	push   edi
c00115a5:	e8 26 ef fe ff       	call   c00004d0 <memset>
c00115aa:	8d 4e ff             	lea    ecx,[esi-0x1]
c00115ad:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00115b1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115b3:	83 c4 10             	add    esp,0x10
c00115b6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00115ba:	89 f8                	mov    eax,edi
c00115bc:	5a                   	pop    edx
c00115bd:	5e                   	pop    esi
c00115be:	5f                   	pop    edi
c00115bf:	c3                   	ret    

c00115c0 <SysEject(regs*)>:
c00115c0:	83 ec 0c             	sub    esp,0xc
c00115c3:	83 ca ff             	or     edx,0xffffffff
c00115c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115ca:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00115cd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00115d2:	83 e9 41             	sub    ecx,0x41
c00115d5:	83 f9 19             	cmp    ecx,0x19
c00115d8:	77 18                	ja     c00115f2 <SysEject(regs*)+0x32>
c00115da:	8b 0c 8d 60 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5a0]
c00115e1:	85 c9                	test   ecx,ecx
c00115e3:	74 0d                	je     c00115f2 <SysEject(regs*)+0x32>
c00115e5:	83 ec 0c             	sub    esp,0xc
c00115e8:	51                   	push   ecx
c00115e9:	e8 8a b5 ff ff       	call   c000cb78 <LogicalDisk::eject()>
c00115ee:	83 c4 10             	add    esp,0x10
c00115f1:	99                   	cdq    
c00115f2:	83 c4 0c             	add    esp,0xc
c00115f5:	c3                   	ret    

c00115f6 <SysExit(regs*)>:
c00115f6:	83 ec 18             	sub    esp,0x18
c00115f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115fd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011600:	e8 cb 26 00 00       	call   c0013cd0 <terminateTask(int)>
c0011605:	83 c8 ff             	or     eax,0xffffffff
c0011608:	83 c4 1c             	add    esp,0x1c
c001160b:	89 c2                	mov    edx,eax
c001160d:	c3                   	ret    

c001160e <SysGetCwd(regs*)>:
c001160e:	83 ec 10             	sub    esp,0x10
c0011611:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011615:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011618:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001161b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011620:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011623:	e8 30 92 ff ff       	call   c000a858 <Fs::getcwd(Process*, char*, int)>
c0011628:	83 c4 1c             	add    esp,0x1c
c001162b:	99                   	cdq    
c001162c:	c3                   	ret    

c001162d <SysGetPID(regs*)>:
c001162d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011632:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011635:	8b 00                	mov    eax,DWORD PTR [eax]
c0011637:	99                   	cdq    
c0011638:	c3                   	ret    

c0011639 <SysGetRAMData(regs*)>:
c0011639:	8b 0d 28 05 02 c0    	mov    ecx,DWORD PTR ds:0xc0020528
c001163f:	69 05 24 05 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020524,0xc8
c0011649:	99                   	cdq    
c001164a:	f7 f9                	idiv   ecx
c001164c:	c1 e0 18             	shl    eax,0x18
c001164f:	09 c8                	or     eax,ecx
c0011651:	99                   	cdq    
c0011652:	c3                   	ret    

c0011653 <SysGetVGAPtr(regs*)>:
c0011653:	55                   	push   ebp
c0011654:	57                   	push   edi
c0011655:	56                   	push   esi
c0011656:	53                   	push   ebx
c0011657:	83 ec 18             	sub    esp,0x18
c001165a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001165e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011661:	e8 6a 21 00 00       	call   c00137d0 <Thr::processFromPID(int)>
c0011666:	83 c4 10             	add    esp,0x10
c0011669:	89 c1                	mov    ecx,eax
c001166b:	b8 01 00 00 00       	mov    eax,0x1
c0011670:	85 c9                	test   ecx,ecx
c0011672:	74 57                	je     c00116cb <SysGetVGAPtr(regs*)+0x78>
c0011674:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c001167a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c001167e:	74 0c                	je     c001168c <SysGetVGAPtr(regs*)+0x39>
c0011680:	83 ec 0c             	sub    esp,0xc
c0011683:	55                   	push   ebp
c0011684:	e8 6e 6d ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011689:	83 c4 10             	add    esp,0x10
c001168c:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001168f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011692:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011697:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011699:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001169c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001169f:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00116a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00116a8:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00116ab:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00116b1:	50                   	push   eax
c00116b2:	50                   	push   eax
c00116b3:	68 4e e3 01 c0       	push   0xc001e34e
c00116b8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00116bb:	05 a8 0f 00 00       	add    eax,0xfa8
c00116c0:	50                   	push   eax
c00116c1:	e8 3a ef fe ff       	call   c0000600 <strcpy>
c00116c6:	83 c4 10             	add    esp,0x10
c00116c9:	31 c0                	xor    eax,eax
c00116cb:	83 c4 0c             	add    esp,0xc
c00116ce:	31 d2                	xor    edx,edx
c00116d0:	5b                   	pop    ebx
c00116d1:	5e                   	pop    esi
c00116d2:	5f                   	pop    edi
c00116d3:	5d                   	pop    ebp
c00116d4:	c3                   	ret    

c00116d5 <SysLoadDLL(regs*)>:
c00116d5:	56                   	push   esi
c00116d6:	53                   	push   ebx
c00116d7:	31 d2                	xor    edx,edx
c00116d9:	51                   	push   ecx
c00116da:	b8 01 00 00 00       	mov    eax,0x1
c00116df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00116e3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00116e7:	0f 84 8c 00 00 00    	je     c0011779 <SysLoadDLL(regs*)+0xa4>
c00116ed:	83 ec 0c             	sub    esp,0xc
c00116f0:	68 14 01 00 00       	push   0x114
c00116f5:	e8 bf 60 ff ff       	call   c00077b9 <malloc>
c00116fa:	83 c4 0c             	add    esp,0xc
c00116fd:	89 c3                	mov    ebx,eax
c00116ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011704:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011707:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001170a:	53                   	push   ebx
c001170b:	e8 46 93 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c0011710:	83 c4 10             	add    esp,0x10
c0011713:	31 d2                	xor    edx,edx
c0011715:	b8 02 00 00 00       	mov    eax,0x2
c001171a:	85 db                	test   ebx,ebx
c001171c:	74 5b                	je     c0011779 <SysLoadDLL(regs*)+0xa4>
c001171e:	83 ec 0c             	sub    esp,0xc
c0011721:	53                   	push   ebx
c0011722:	e8 5d 96 ff ff       	call   c000ad84 <File::exists()>
c0011727:	83 c4 10             	add    esp,0x10
c001172a:	84 c0                	test   al,al
c001172c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001172e:	75 11                	jne    c0011741 <SysLoadDLL(regs*)+0x6c>
c0011730:	83 ec 0c             	sub    esp,0xc
c0011733:	53                   	push   ebx
c0011734:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011737:	83 c4 10             	add    esp,0x10
c001173a:	b8 03 00 00 00       	mov    eax,0x3
c001173f:	eb 36                	jmp    c0011777 <SysLoadDLL(regs*)+0xa2>
c0011741:	83 ec 0c             	sub    esp,0xc
c0011744:	53                   	push   ebx
c0011745:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011748:	58                   	pop    eax
c0011749:	5a                   	pop    edx
c001174a:	6a 00                	push   0x0
c001174c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001174f:	e8 4b 12 00 00       	call   c001299f <Thr::loadDLL(char const*, bool)>
c0011754:	83 c4 10             	add    esp,0x10
c0011757:	89 c1                	mov    ecx,eax
c0011759:	31 d2                	xor    edx,edx
c001175b:	b8 04 00 00 00       	mov    eax,0x4
c0011760:	85 c9                	test   ecx,ecx
c0011762:	74 15                	je     c0011779 <SysLoadDLL(regs*)+0xa4>
c0011764:	53                   	push   ebx
c0011765:	53                   	push   ebx
c0011766:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c001176c:	51                   	push   ecx
c001176d:	e8 5e 14 00 00       	call   c0012bd0 <Thr::executeDLL(unsigned long, void*)>
c0011772:	83 c4 10             	add    esp,0x10
c0011775:	31 c0                	xor    eax,eax
c0011777:	31 d2                	xor    edx,edx
c0011779:	59                   	pop    ecx
c001177a:	5b                   	pop    ebx
c001177b:	5e                   	pop    esi
c001177c:	c3                   	ret    

c001177d <SysRead(regs*)>:
c001177d:	57                   	push   edi
c001177e:	56                   	push   esi
c001177f:	53                   	push   ebx
c0011780:	83 ec 10             	sub    esp,0x10
c0011783:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011787:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001178a:	83 f8 02             	cmp    eax,0x2
c001178d:	77 10                	ja     c001179f <SysRead(regs*)+0x22>
c001178f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011794:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011797:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001179d:	eb 0e                	jmp    c00117ad <SysRead(regs*)+0x30>
c001179f:	83 ec 0c             	sub    esp,0xc
c00117a2:	50                   	push   eax
c00117a3:	e8 8f 79 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c00117a8:	83 c4 10             	add    esp,0x10
c00117ab:	89 c1                	mov    ecx,eax
c00117ad:	83 c8 ff             	or     eax,0xffffffff
c00117b0:	85 c9                	test   ecx,ecx
c00117b2:	89 c2                	mov    edx,eax
c00117b4:	74 28                	je     c00117de <SysRead(regs*)+0x61>
c00117b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00117be:	31 ff                	xor    edi,edi
c00117c0:	83 ec 0c             	sub    esp,0xc
c00117c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00117c5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00117c9:	52                   	push   edx
c00117ca:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00117cd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00117d0:	57                   	push   edi
c00117d1:	56                   	push   esi
c00117d2:	51                   	push   ecx
c00117d3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00117d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00117da:	83 c4 20             	add    esp,0x20
c00117dd:	99                   	cdq    
c00117de:	83 c4 10             	add    esp,0x10
c00117e1:	5b                   	pop    ebx
c00117e2:	5e                   	pop    esi
c00117e3:	5f                   	pop    edi
c00117e4:	c3                   	ret    

c00117e5 <SysSbrk(regs*)>:
c00117e5:	56                   	push   esi
c00117e6:	53                   	push   ebx
c00117e7:	50                   	push   eax
c00117e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00117f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117f4:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00117f7:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00117fd:	85 db                	test   ebx,ebx
c00117ff:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011802:	74 02                	je     c0011806 <SysSbrk(regs*)+0x21>
c0011804:	79 06                	jns    c001180c <SysSbrk(regs*)+0x27>
c0011806:	89 f0                	mov    eax,esi
c0011808:	31 d2                	xor    edx,edx
c001180a:	eb 2a                	jmp    c0011836 <SysSbrk(regs*)+0x51>
c001180c:	83 c8 ff             	or     eax,0xffffffff
c001180f:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011815:	89 c2                	mov    edx,eax
c0011817:	77 1d                	ja     c0011836 <SysSbrk(regs*)+0x51>
c0011819:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001181f:	50                   	push   eax
c0011820:	c1 ea 0c             	shr    edx,0xc
c0011823:	68 07 0c 00 00       	push   0xc07
c0011828:	52                   	push   edx
c0011829:	51                   	push   ecx
c001182a:	e8 f7 81 ff ff       	call   c0009a26 <VAS::allocatePages(int, int)>
c001182f:	89 f0                	mov    eax,esi
c0011831:	31 d2                	xor    edx,edx
c0011833:	83 c4 10             	add    esp,0x10
c0011836:	59                   	pop    ecx
c0011837:	5b                   	pop    ebx
c0011838:	5e                   	pop    esi
c0011839:	c3                   	ret    

c001183a <SysSetCwd(regs*)>:
c001183a:	83 ec 14             	sub    esp,0x14
c001183d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011841:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011844:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011849:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001184c:	e8 d2 95 ff ff       	call   c000ae23 <Fs::setcwd(Process*, char*)>
c0011851:	83 c4 1c             	add    esp,0x1c
c0011854:	99                   	cdq    
c0011855:	c3                   	ret    

c0011856 <SysSetTime(regs*)>:
c0011856:	55                   	push   ebp
c0011857:	31 c9                	xor    ecx,ecx
c0011859:	57                   	push   edi
c001185a:	bd 0c 00 00 00       	mov    ebp,0xc
c001185f:	56                   	push   esi
c0011860:	53                   	push   ebx
c0011861:	31 db                	xor    ebx,ebx
c0011863:	83 ec 10             	sub    esp,0x10
c0011866:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001186a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001186d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011870:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011873:	89 c2                	mov    edx,eax
c0011875:	66 81 ef 6c 07       	sub    di,0x76c
c001187a:	83 e2 1f             	and    edx,0x1f
c001187d:	c1 e7 10             	shl    edi,0x10
c0011880:	42                   	inc    edx
c0011881:	c1 e8 05             	shr    eax,0x5
c0011884:	88 d1                	mov    cl,dl
c0011886:	31 d2                	xor    edx,edx
c0011888:	f7 f5                	div    ebp
c001188a:	89 dd                	mov    ebp,ebx
c001188c:	88 d5                	mov    ch,dl
c001188e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011894:	0f b7 c1             	movzx  eax,cx
c0011897:	31 d2                	xor    edx,edx
c0011899:	09 f8                	or     eax,edi
c001189b:	bf 3c 00 00 00       	mov    edi,0x3c
c00118a0:	89 c1                	mov    ecx,eax
c00118a2:	89 f0                	mov    eax,esi
c00118a4:	f7 f7                	div    edi
c00118a6:	c1 e2 10             	shl    edx,0x10
c00118a9:	09 d5                	or     ebp,edx
c00118ab:	31 d2                	xor    edx,edx
c00118ad:	89 eb                	mov    ebx,ebp
c00118af:	f7 f7                	div    edi
c00118b1:	bf 10 0e 00 00       	mov    edi,0xe10
c00118b6:	88 d7                	mov    bh,dl
c00118b8:	89 f0                	mov    eax,esi
c00118ba:	31 d2                	xor    edx,edx
c00118bc:	f7 f7                	div    edi
c00118be:	bf 18 00 00 00       	mov    edi,0x18
c00118c3:	31 d2                	xor    edx,edx
c00118c5:	f7 f7                	div    edi
c00118c7:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c00118cc:	88 d3                	mov    bl,dl
c00118ce:	53                   	push   ebx
c00118cf:	51                   	push   ecx
c00118d0:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00118d6:	e8 59 9d ff ff       	call   c000b634 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00118db:	83 c4 1c             	add    esp,0x1c
c00118de:	83 f0 01             	xor    eax,0x1
c00118e1:	5b                   	pop    ebx
c00118e2:	0f b6 c0             	movzx  eax,al
c00118e5:	5e                   	pop    esi
c00118e6:	31 d2                	xor    edx,edx
c00118e8:	5f                   	pop    edi
c00118e9:	5d                   	pop    ebp
c00118ea:	c3                   	ret    

c00118eb <SysTimezone(regs*)>:
c00118eb:	53                   	push   ebx
c00118ec:	83 ec 08             	sub    esp,0x8
c00118ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118f3:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00118f7:	75 17                	jne    c0011910 <SysTimezone(regs*)+0x25>
c00118f9:	83 ec 0c             	sub    esp,0xc
c00118fc:	68 58 e3 01 c0       	push   0xc001e358
c0011901:	e8 da 8b ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0011906:	83 c8 ff             	or     eax,0xffffffff
c0011909:	83 c4 10             	add    esp,0x10
c001190c:	89 c2                	mov    edx,eax
c001190e:	eb 20                	jmp    c0011930 <SysTimezone(regs*)+0x45>
c0011910:	83 ec 0c             	sub    esp,0xc
c0011913:	68 6d e3 01 c0       	push   0xc001e36d
c0011918:	e8 c3 8b ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001191d:	58                   	pop    eax
c001191e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011921:	e8 6a 9a ff ff       	call   c000b390 <User::loadClockSettings(int)>
c0011926:	83 c4 10             	add    esp,0x10
c0011929:	b8 01 00 00 00       	mov    eax,0x1
c001192e:	31 d2                	xor    edx,edx
c0011930:	83 c4 08             	add    esp,0x8
c0011933:	5b                   	pop    ebx
c0011934:	c3                   	ret    

c0011935 <SysWrite(regs*)>:
c0011935:	57                   	push   edi
c0011936:	56                   	push   esi
c0011937:	53                   	push   ebx
c0011938:	83 ec 10             	sub    esp,0x10
c001193b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001193f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011942:	83 f8 02             	cmp    eax,0x2
c0011945:	77 10                	ja     c0011957 <SysWrite(regs*)+0x22>
c0011947:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001194c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001194f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011955:	eb 0e                	jmp    c0011965 <SysWrite(regs*)+0x30>
c0011957:	83 ec 0c             	sub    esp,0xc
c001195a:	50                   	push   eax
c001195b:	e8 d7 77 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c0011960:	83 c4 10             	add    esp,0x10
c0011963:	89 c1                	mov    ecx,eax
c0011965:	83 c8 ff             	or     eax,0xffffffff
c0011968:	85 c9                	test   ecx,ecx
c001196a:	89 c2                	mov    edx,eax
c001196c:	74 28                	je     c0011996 <SysWrite(regs*)+0x61>
c001196e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011976:	31 ff                	xor    edi,edi
c0011978:	83 ec 0c             	sub    esp,0xc
c001197b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001197d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011981:	52                   	push   edx
c0011982:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011985:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011988:	57                   	push   edi
c0011989:	56                   	push   esi
c001198a:	51                   	push   ecx
c001198b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001198e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011992:	83 c4 20             	add    esp,0x20
c0011995:	99                   	cdq    
c0011996:	83 c4 10             	add    esp,0x10
c0011999:	5b                   	pop    ebx
c001199a:	5e                   	pop    esi
c001199b:	5f                   	pop    edi
c001199c:	c3                   	ret    

c001199d <SysWsbe(regs*)>:
c001199d:	57                   	push   edi
c001199e:	b9 0b 00 00 00       	mov    ecx,0xb
c00119a3:	56                   	push   esi
c00119a4:	be ac e3 01 c0       	mov    esi,0xc001e3ac
c00119a9:	53                   	push   ebx
c00119aa:	83 ec 30             	sub    esp,0x30
c00119ad:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00119b1:	fc                   	cld    
c00119b2:	83 ec 0c             	sub    esp,0xc
c00119b5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00119b7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00119bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119c3:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00119c9:	8b 06                	mov    eax,DWORD PTR [esi]
c00119cb:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00119ce:	57                   	push   edi
c00119cf:	e8 6c eb fe ff       	call   c0000540 <strlen>
c00119d4:	5a                   	pop    edx
c00119d5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00119d9:	52                   	push   edx
c00119da:	31 d2                	xor    edx,edx
c00119dc:	57                   	push   edi
c00119dd:	52                   	push   edx
c00119de:	50                   	push   eax
c00119df:	56                   	push   esi
c00119e0:	ff d3                	call   ebx
c00119e2:	83 c4 14             	add    esp,0x14
c00119e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00119e9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00119ec:	e8 df 22 00 00       	call   c0013cd0 <terminateTask(int)>
c00119f1:	83 c4 40             	add    esp,0x40
c00119f4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00119f9:	5b                   	pop    ebx
c00119fa:	31 d2                	xor    edx,edx
c00119fc:	5e                   	pop    esi
c00119fd:	5f                   	pop    edi
c00119fe:	c3                   	ret    

c00119ff <SysYield(regs*)>:
c00119ff:	83 ec 0c             	sub    esp,0xc
c0011a02:	fa                   	cli    
c0011a03:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c0011a09:	e8 9e 19 00 00       	call   c00133ac <schedule()>
c0011a0e:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0011a13:	48                   	dec    eax
c0011a14:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0011a19:	75 01                	jne    c0011a1c <SysYield(regs*)+0x1d>
c0011a1b:	fb                   	sti    
c0011a1c:	31 c0                	xor    eax,eax
c0011a1e:	31 d2                	xor    edx,edx
c0011a20:	83 c4 0c             	add    esp,0xc
c0011a23:	c3                   	ret    

c0011a24 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011a24:	55                   	push   ebp
c0011a25:	57                   	push   edi
c0011a26:	56                   	push   esi
c0011a27:	53                   	push   ebx
c0011a28:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011a2e:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011a36:	0f 95 c2             	setne  dl
c0011a39:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011a41:	0f 94 c0             	sete   al
c0011a44:	84 c2                	test   dl,al
c0011a46:	74 34                	je     c0011a7c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011a48:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011a53:	74 27                	je     c0011a7c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011a55:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011a5c:	05 00 10 00 00       	add    eax,0x1000
c0011a61:	89 c1                	mov    ecx,eax
c0011a63:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a68:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011a6e:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011a75:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011a7c:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011a83:	83 ec 0c             	sub    esp,0xc
c0011a86:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011a8c:	6a 01                	push   0x1
c0011a8e:	e8 fa 77 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c0011a93:	83 c4 10             	add    esp,0x10
c0011a96:	89 c3                	mov    ebx,eax
c0011a98:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011a9e:	0f 86 25 01 00 00    	jbe    c0011bc9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011aa4:	c1 ee 0c             	shr    esi,0xc
c0011aa7:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011aae:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011ab2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011aba:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011ac1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ac5:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011acc:	29 ef                	sub    edi,ebp
c0011ace:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011ad2:	0f 83 f8 00 00 00    	jae    c0011bd0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011ad8:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011ade:	76 05                	jbe    c0011ae5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011ae0:	bf 00 10 00 00       	mov    edi,0x1000
c0011ae5:	83 ec 0c             	sub    esp,0xc
c0011ae8:	31 d2                	xor    edx,edx
c0011aea:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011af1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011af3:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011af7:	50                   	push   eax
c0011af8:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011afc:	56                   	push   esi
c0011afd:	52                   	push   edx
c0011afe:	57                   	push   edi
c0011aff:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011b06:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011b09:	83 c4 20             	add    esp,0x20
c0011b0c:	85 c0                	test   eax,eax
c0011b0e:	75 06                	jne    c0011b16 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011b10:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011b14:	74 13                	je     c0011b29 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011b16:	83 ec 0c             	sub    esp,0xc
c0011b19:	53                   	push   ebx
c0011b1a:	e8 9e 7a ff ff       	call   c00095bd <Virt::freeKernelVirtualPages(unsigned long)>
c0011b1f:	83 c4 10             	add    esp,0x10
c0011b22:	31 c0                	xor    eax,eax
c0011b24:	e9 7c 01 00 00       	jmp    c0011ca5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011b29:	fa                   	cli    
c0011b2a:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c0011b30:	e8 60 5f ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011b35:	6a 07                	push   0x7
c0011b37:	89 c7                	mov    edi,eax
c0011b39:	53                   	push   ebx
c0011b3a:	50                   	push   eax
c0011b3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b40:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b43:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b49:	e8 d4 7d ff ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b4e:	83 c4 0c             	add    esp,0xc
c0011b51:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011b58:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b5e:	6a 00                	push   0x0
c0011b60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b65:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b68:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b6e:	e8 21 7c ff ff       	call   c0009794 <VAS::mapOtherVASIn(bool, VAS*)>
c0011b73:	58                   	pop    eax
c0011b74:	5a                   	pop    edx
c0011b75:	68 07 0c 00 00       	push   0xc07
c0011b7a:	55                   	push   ebp
c0011b7b:	57                   	push   edi
c0011b7c:	89 df                	mov    edi,ebx
c0011b7e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011b85:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b8b:	6a 00                	push   0x0
c0011b8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b92:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b95:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b9b:	e8 42 81 ff ff       	call   c0009ce2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011ba0:	b9 00 10 00 00       	mov    ecx,0x1000
c0011ba5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ba7:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0011bac:	83 c4 20             	add    esp,0x20
c0011baf:	48                   	dec    eax
c0011bb0:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0011bb5:	85 c0                	test   eax,eax
c0011bb7:	75 01                	jne    c0011bba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011bb9:	fb                   	sti    
c0011bba:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011bc0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011bc4:	e9 f1 fe ff ff       	jmp    c0011aba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011bc9:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011bd0:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011bd7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011bdd:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011be3:	0f 86 ae 00 00 00    	jbe    c0011c97 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011be9:	fa                   	cli    
c0011bea:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c0011bf0:	c1 ee 0c             	shr    esi,0xc
c0011bf3:	51                   	push   ecx
c0011bf4:	31 ff                	xor    edi,edi
c0011bf6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011bfd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011c03:	6a 00                	push   0x0
c0011c05:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c0a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c0d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011c13:	e8 7c 7b ff ff       	call   c0009794 <VAS::mapOtherVASIn(bool, VAS*)>
c0011c18:	83 c4 10             	add    esp,0x10
c0011c1b:	e8 75 5e ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011c20:	47                   	inc    edi
c0011c21:	6a 07                	push   0x7
c0011c23:	53                   	push   ebx
c0011c24:	50                   	push   eax
c0011c25:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011c29:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c2f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011c32:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0011c38:	e8 e5 7c ff ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c3d:	58                   	pop    eax
c0011c3e:	5a                   	pop    edx
c0011c3f:	68 07 0c 00 00       	push   0xc07
c0011c44:	55                   	push   ebp
c0011c45:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011c4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c4f:	50                   	push   eax
c0011c50:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011c57:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011c5d:	6a 00                	push   0x0
c0011c5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c64:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c67:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011c6d:	e8 70 80 ff ff       	call   c0009ce2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011c72:	83 c4 1c             	add    esp,0x1c
c0011c75:	68 00 10 00 00       	push   0x1000
c0011c7a:	6a 00                	push   0x0
c0011c7c:	53                   	push   ebx
c0011c7d:	e8 4e e8 fe ff       	call   c00004d0 <memset>
c0011c82:	83 c4 10             	add    esp,0x10
c0011c85:	39 fe                	cmp    esi,edi
c0011c87:	77 92                	ja     c0011c1b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0011c89:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0011c8e:	48                   	dec    eax
c0011c8f:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0011c94:	75 01                	jne    c0011c97 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011c96:	fb                   	sti    
c0011c97:	83 ec 0c             	sub    esp,0xc
c0011c9a:	53                   	push   ebx
c0011c9b:	e8 1d 79 ff ff       	call   c00095bd <Virt::freeKernelVirtualPages(unsigned long)>
c0011ca0:	83 c4 10             	add    esp,0x10
c0011ca3:	b0 01                	mov    al,0x1
c0011ca5:	81 c4 2c 10 00 00    	add    esp,0x102c
c0011cab:	5b                   	pop    ebx
c0011cac:	5e                   	pop    esi
c0011cad:	5f                   	pop    edi
c0011cae:	5d                   	pop    ebp
c0011caf:	c3                   	ret    

c0011cb0 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0011cb0:	55                   	push   ebp
c0011cb1:	57                   	push   edi
c0011cb2:	56                   	push   esi
c0011cb3:	53                   	push   ebx
c0011cb4:	83 ec 48             	sub    esp,0x48
c0011cb7:	68 14 01 00 00       	push   0x114
c0011cbc:	e8 f8 5a ff ff       	call   c00077b9 <malloc>
c0011cc1:	83 c4 0c             	add    esp,0xc
c0011cc4:	89 c6                	mov    esi,eax
c0011cc6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011cca:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011cce:	50                   	push   eax
c0011ccf:	e8 82 8d ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c0011cd4:	58                   	pop    eax
c0011cd5:	5a                   	pop    edx
c0011cd6:	6a 01                	push   0x1
c0011cd8:	56                   	push   esi
c0011cd9:	e8 38 8e ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c0011cde:	83 c4 10             	add    esp,0x10
c0011ce1:	85 c0                	test   eax,eax
c0011ce3:	0f 85 47 01 00 00    	jne    c0011e30 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011ce9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011cf1:	83 ec 0c             	sub    esp,0xc
c0011cf4:	6a 34                	push   0x34
c0011cf6:	e8 be 5a ff ff       	call   c00077b9 <malloc>
c0011cfb:	89 c3                	mov    ebx,eax
c0011cfd:	58                   	pop    eax
c0011cfe:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d00:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0011d04:	57                   	push   edi
c0011d05:	53                   	push   ebx
c0011d06:	6a 00                	push   0x0
c0011d08:	6a 34                	push   0x34
c0011d0a:	56                   	push   esi
c0011d0b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011d0e:	83 c4 20             	add    esp,0x20
c0011d11:	85 c0                	test   eax,eax
c0011d13:	0f 85 17 01 00 00    	jne    c0011e30 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d19:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0011d1f:	0f 85 0b 01 00 00    	jne    c0011e30 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d25:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d28:	85 c0                	test   eax,eax
c0011d2a:	0f 84 00 01 00 00    	je     c0011e30 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d30:	31 d2                	xor    edx,edx
c0011d32:	55                   	push   ebp
c0011d33:	52                   	push   edx
c0011d34:	50                   	push   eax
c0011d35:	56                   	push   esi
c0011d36:	e8 99 8e ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c0011d3b:	83 c4 10             	add    esp,0x10
c0011d3e:	85 c0                	test   eax,eax
c0011d40:	0f 85 ea 00 00 00    	jne    c0011e30 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d46:	83 ec 0c             	sub    esp,0xc
c0011d49:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011d4c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011d50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011d54:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011d58:	0f af c2             	imul   eax,edx
c0011d5b:	50                   	push   eax
c0011d5c:	e8 58 5a ff ff       	call   c00077b9 <malloc>
c0011d61:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011d63:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011d67:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d6a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d6e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011d72:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011d76:	0f af c2             	imul   eax,edx
c0011d79:	99                   	cdq    
c0011d7a:	52                   	push   edx
c0011d7b:	50                   	push   eax
c0011d7c:	56                   	push   esi
c0011d7d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011d80:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011d83:	83 c4 20             	add    esp,0x20
c0011d86:	85 c0                	test   eax,eax
c0011d88:	0f 84 a2 00 00 00    	je     c0011e30 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d8e:	31 d2                	xor    edx,edx
c0011d90:	51                   	push   ecx
c0011d91:	52                   	push   edx
c0011d92:	50                   	push   eax
c0011d93:	56                   	push   esi
c0011d94:	e8 3b 8e ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c0011d99:	83 c4 10             	add    esp,0x10
c0011d9c:	85 c0                	test   eax,eax
c0011d9e:	0f 85 8c 00 00 00    	jne    c0011e30 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011da4:	83 ec 0c             	sub    esp,0xc
c0011da7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011dab:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011daf:	31 ed                	xor    ebp,ebp
c0011db1:	0f af c2             	imul   eax,edx
c0011db4:	50                   	push   eax
c0011db5:	e8 ff 59 ff ff       	call   c00077b9 <malloc>
c0011dba:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011dbc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011dc0:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011dc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dc7:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011dcb:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011dcf:	0f af c2             	imul   eax,edx
c0011dd2:	99                   	cdq    
c0011dd3:	52                   	push   edx
c0011dd4:	50                   	push   eax
c0011dd5:	56                   	push   esi
c0011dd6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011dd9:	83 c4 20             	add    esp,0x20
c0011ddc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011de4:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0011de8:	0f 86 80 00 00 00    	jbe    c0011e6e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0011dee:	0f b7 fd             	movzx  edi,bp
c0011df1:	c1 e7 05             	shl    edi,0x5
c0011df4:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0011df8:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0011dfb:	75 6b                	jne    c0011e68 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011dfd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011e00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e04:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0011e07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e0b:	52                   	push   edx
c0011e0c:	31 d2                	xor    edx,edx
c0011e0e:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e11:	52                   	push   edx
c0011e12:	50                   	push   eax
c0011e13:	56                   	push   esi
c0011e14:	e8 bb 8d ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c0011e19:	83 c4 10             	add    esp,0x10
c0011e1c:	85 c0                	test   eax,eax
c0011e1e:	74 17                	je     c0011e37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0011e20:	83 ec 0c             	sub    esp,0xc
c0011e23:	68 d8 e3 01 c0       	push   0xc001e3d8
c0011e28:	e8 b3 86 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0011e2d:	83 c4 10             	add    esp,0x10
c0011e30:	31 c0                	xor    eax,eax
c0011e32:	e9 87 00 00 00       	jmp    c0011ebe <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0011e37:	83 ec 0c             	sub    esp,0xc
c0011e3a:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0011e3d:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0011e40:	50                   	push   eax
c0011e41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011e45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011e49:	56                   	push   esi
c0011e4a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0011e4e:	e8 d1 fb ff ff       	call   c0011a24 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0011e53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e57:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0011e5b:	83 c4 20             	add    esp,0x20
c0011e5e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0011e62:	73 04                	jae    c0011e68 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011e64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e68:	45                   	inc    ebp
c0011e69:	e9 76 ff ff ff       	jmp    c0011de4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0011e6e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0011e72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e7a:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0011e80:	83 ec 0c             	sub    esp,0xc
c0011e83:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0011e89:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e8e:	05 00 10 00 00       	add    eax,0x1000
c0011e93:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e9a:	e8 2a 59 ff ff       	call   c00077c9 <free>
c0011e9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ea2:	e8 22 59 ff ff       	call   c00077c9 <free>
c0011ea7:	58                   	pop    eax
c0011ea8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011eac:	e8 18 59 ff ff       	call   c00077c9 <free>
c0011eb1:	89 34 24             	mov    DWORD PTR [esp],esi
c0011eb4:	e8 bb 8c ff ff       	call   c000ab74 <File::close()>
c0011eb9:	83 c4 10             	add    esp,0x10
c0011ebc:	b0 01                	mov    al,0x1
c0011ebe:	83 c4 3c             	add    esp,0x3c
c0011ec1:	5b                   	pop    ebx
c0011ec2:	5e                   	pop    esi
c0011ec3:	5f                   	pop    edi
c0011ec4:	5d                   	pop    ebp
c0011ec5:	c3                   	ret    

c0011ec6 <Thr::runtimeReferenceHelper()>:
c0011ec6:	83 ec 18             	sub    esp,0x18
c0011ec9:	68 e0 e3 01 c0       	push   0xc001e3e0
c0011ece:	e8 0d 86 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0011ed3:	fa                   	cli    
c0011ed4:	83 c4 10             	add    esp,0x10
c0011ed7:	eb fe                	jmp    c0011ed7 <Thr::runtimeReferenceHelper()+0x11>

c0011ed9 <Thr::getAddressOfKernelSymbol(char const*)>:
c0011ed9:	57                   	push   edi
c0011eda:	56                   	push   esi
c0011edb:	53                   	push   ebx
c0011edc:	31 db                	xor    ebx,ebx
c0011ede:	39 1d 80 37 02 c0    	cmp    DWORD PTR ds:0xc0023780,ebx
c0011ee4:	7e 3c                	jle    c0011f22 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0011ee6:	8b 34 9d 00 37 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc900]
c0011eed:	31 ff                	xor    edi,edi
c0011eef:	39 3c 9d 00 36 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdca00],edi
c0011ef6:	7e 27                	jle    c0011f1f <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0011ef8:	50                   	push   eax
c0011ef9:	50                   	push   eax
c0011efa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011efe:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f00:	03 04 9d 80 36 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc980]
c0011f07:	50                   	push   eax
c0011f08:	e8 d3 e7 fe ff       	call   c00006e0 <strcmp>
c0011f0d:	83 c4 10             	add    esp,0x10
c0011f10:	85 c0                	test   eax,eax
c0011f12:	75 05                	jne    c0011f19 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0011f14:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011f17:	eb 0b                	jmp    c0011f24 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0011f19:	83 c6 10             	add    esi,0x10
c0011f1c:	47                   	inc    edi
c0011f1d:	eb d0                	jmp    c0011eef <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0011f1f:	43                   	inc    ebx
c0011f20:	eb bc                	jmp    c0011ede <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0011f22:	31 c0                	xor    eax,eax
c0011f24:	5b                   	pop    ebx
c0011f25:	5e                   	pop    esi
c0011f26:	5f                   	pop    edi
c0011f27:	c3                   	ret    

c0011f28 <Thr::loadKernelSymbolTable(char const*)>:
c0011f28:	55                   	push   ebp
c0011f29:	57                   	push   edi
c0011f2a:	56                   	push   esi
c0011f2b:	53                   	push   ebx
c0011f2c:	83 ec 68             	sub    esp,0x68
c0011f2f:	8b 35 d0 37 02 c0    	mov    esi,DWORD PTR ds:0xc00237d0
c0011f35:	68 14 01 00 00       	push   0x114
c0011f3a:	e8 7a 58 ff ff       	call   c00077b9 <malloc>
c0011f3f:	83 c4 0c             	add    esp,0xc
c0011f42:	89 c3                	mov    ebx,eax
c0011f44:	56                   	push   esi
c0011f45:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0011f49:	50                   	push   eax
c0011f4a:	e8 07 8b ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c0011f4f:	5e                   	pop    esi
c0011f50:	5f                   	pop    edi
c0011f51:	6a 01                	push   0x1
c0011f53:	53                   	push   ebx
c0011f54:	e8 bd 8b ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c0011f59:	83 c4 10             	add    esp,0x10
c0011f5c:	85 c0                	test   eax,eax
c0011f5e:	74 0a                	je     c0011f6a <Thr::loadKernelSymbolTable(char const*)+0x42>
c0011f60:	83 ec 0c             	sub    esp,0xc
c0011f63:	68 02 e4 01 c0       	push   0xc001e402
c0011f68:	eb 34                	jmp    c0011f9e <Thr::loadKernelSymbolTable(char const*)+0x76>
c0011f6a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011f72:	83 ec 0c             	sub    esp,0xc
c0011f75:	6a 34                	push   0x34
c0011f77:	e8 3d 58 ff ff       	call   c00077b9 <malloc>
c0011f7c:	59                   	pop    ecx
c0011f7d:	89 c7                	mov    edi,eax
c0011f7f:	8d 74 24 34          	lea    esi,[esp+0x34]
c0011f83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f85:	56                   	push   esi
c0011f86:	57                   	push   edi
c0011f87:	6a 00                	push   0x0
c0011f89:	6a 34                	push   0x34
c0011f8b:	53                   	push   ebx
c0011f8c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011f8f:	83 c4 20             	add    esp,0x20
c0011f92:	85 c0                	test   eax,eax
c0011f94:	74 17                	je     c0011fad <Thr::loadKernelSymbolTable(char const*)+0x85>
c0011f96:	83 ec 0c             	sub    esp,0xc
c0011f99:	68 19 e4 01 c0       	push   0xc001e419
c0011f9e:	e8 bc e1 ff ff       	call   c001015f <KePanic(char const*)>
c0011fa3:	83 c4 10             	add    esp,0x10
c0011fa6:	31 c0                	xor    eax,eax
c0011fa8:	e9 31 02 00 00       	jmp    c00121de <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0011fad:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011fb3:	75 e1                	jne    c0011f96 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011fb5:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011fb8:	85 c0                	test   eax,eax
c0011fba:	74 da                	je     c0011f96 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011fbc:	52                   	push   edx
c0011fbd:	31 d2                	xor    edx,edx
c0011fbf:	52                   	push   edx
c0011fc0:	50                   	push   eax
c0011fc1:	53                   	push   ebx
c0011fc2:	e8 0d 8c ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c0011fc7:	83 c4 10             	add    esp,0x10
c0011fca:	85 c0                	test   eax,eax
c0011fcc:	75 c8                	jne    c0011f96 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011fce:	83 ec 0c             	sub    esp,0xc
c0011fd1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011fd5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011fd9:	31 ed                	xor    ebp,ebp
c0011fdb:	0f af c2             	imul   eax,edx
c0011fde:	50                   	push   eax
c0011fdf:	e8 d5 57 ff ff       	call   c00077b9 <malloc>
c0011fe4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011fe6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fea:	89 34 24             	mov    DWORD PTR [esp],esi
c0011fed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011ff1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011ff5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011ff9:	0f af c2             	imul   eax,edx
c0011ffc:	99                   	cdq    
c0011ffd:	52                   	push   edx
c0011ffe:	50                   	push   eax
c0011fff:	53                   	push   ebx
c0012000:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012003:	83 c4 20             	add    esp,0x20
c0012006:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001200e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012016:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001201e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012026:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001202a:	0f 86 aa 00 00 00    	jbe    c00120da <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0012030:	0f b7 f5             	movzx  esi,bp
c0012033:	6b f6 28             	imul   esi,esi,0x28
c0012036:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001203a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001203d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012041:	50                   	push   eax
c0012042:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012046:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001204a:	8b 16                	mov    edx,DWORD PTR [esi]
c001204c:	6b c0 28             	imul   eax,eax,0x28
c001204f:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0012053:	89 d0                	mov    eax,edx
c0012055:	31 d2                	xor    edx,edx
c0012057:	52                   	push   edx
c0012058:	50                   	push   eax
c0012059:	53                   	push   ebx
c001205a:	e8 75 8b ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c001205f:	83 c4 0c             	add    esp,0xc
c0012062:	6a 20                	push   0x20
c0012064:	6a 00                	push   0x0
c0012066:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001206a:	52                   	push   edx
c001206b:	e8 60 e4 fe ff       	call   c00004d0 <memset>
c0012070:	58                   	pop    eax
c0012071:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012073:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012077:	51                   	push   ecx
c0012078:	8d 54 24 40          	lea    edx,[esp+0x40]
c001207c:	52                   	push   edx
c001207d:	6a 00                	push   0x0
c001207f:	6a 1f                	push   0x1f
c0012081:	53                   	push   ebx
c0012082:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012085:	83 c4 18             	add    esp,0x18
c0012088:	68 30 e4 01 c0       	push   0xc001e430
c001208d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012091:	52                   	push   edx
c0012092:	e8 49 e6 fe ff       	call   c00006e0 <strcmp>
c0012097:	83 c4 10             	add    esp,0x10
c001209a:	85 c0                	test   eax,eax
c001209c:	75 0f                	jne    c00120ad <Thr::loadKernelSymbolTable(char const*)+0x185>
c001209e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00120a1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00120a5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120ad:	50                   	push   eax
c00120ae:	50                   	push   eax
c00120af:	68 38 e4 01 c0       	push   0xc001e438
c00120b4:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00120b8:	50                   	push   eax
c00120b9:	e8 22 e6 fe ff       	call   c00006e0 <strcmp>
c00120be:	83 c4 10             	add    esp,0x10
c00120c1:	85 c0                	test   eax,eax
c00120c3:	75 0f                	jne    c00120d4 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00120c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00120c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00120cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120d4:	45                   	inc    ebp
c00120d5:	e9 4c ff ff ff       	jmp    c0012026 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00120da:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00120df:	75 10                	jne    c00120f1 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00120e1:	83 ec 0c             	sub    esp,0xc
c00120e4:	68 40 e4 01 c0       	push   0xc001e440
c00120e9:	e8 71 e0 ff ff       	call   c001015f <KePanic(char const*)>
c00120ee:	83 c4 10             	add    esp,0x10
c00120f1:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00120f6:	75 10                	jne    c0012108 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00120f8:	83 ec 0c             	sub    esp,0xc
c00120fb:	68 40 e4 01 c0       	push   0xc001e440
c0012100:	e8 5a e0 ff ff       	call   c001015f <KePanic(char const*)>
c0012105:	83 c4 10             	add    esp,0x10
c0012108:	31 d2                	xor    edx,edx
c001210a:	50                   	push   eax
c001210b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001210f:	52                   	push   edx
c0012110:	50                   	push   eax
c0012111:	53                   	push   ebx
c0012112:	e8 bd 8a ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c0012117:	5a                   	pop    edx
c0012118:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001211c:	e8 98 56 ff ff       	call   c00077b9 <malloc>
c0012121:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012125:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012129:	31 c9                	xor    ecx,ecx
c001212b:	5e                   	pop    esi
c001212c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001212e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0012132:	55                   	push   ebp
c0012133:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012137:	51                   	push   ecx
c0012138:	52                   	push   edx
c0012139:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001213d:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0012141:	53                   	push   ebx
c0012142:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012145:	83 c4 14             	add    esp,0x14
c0012148:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001214c:	e8 68 56 ff ff       	call   c00077b9 <malloc>
c0012151:	89 c6                	mov    esi,eax
c0012153:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012155:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012158:	56                   	push   esi
c0012159:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001215d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012161:	51                   	push   ecx
c0012162:	52                   	push   edx
c0012163:	53                   	push   ebx
c0012164:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012167:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001216b:	8b 15 80 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023780
c0012171:	83 c4 1c             	add    esp,0x1c
c0012174:	c1 e8 04             	shr    eax,0x4
c0012177:	89 04 95 00 36 02 c0 	mov    DWORD PTR [edx*4-0x3ffdca00],eax
c001217e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012182:	31 d2                	xor    edx,edx
c0012184:	52                   	push   edx
c0012185:	50                   	push   eax
c0012186:	53                   	push   ebx
c0012187:	e8 48 8a ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c001218c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001218e:	31 d2                	xor    edx,edx
c0012190:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012193:	56                   	push   esi
c0012194:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012198:	52                   	push   edx
c0012199:	50                   	push   eax
c001219a:	53                   	push   ebx
c001219b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001219e:	83 c4 14             	add    esp,0x14
c00121a1:	53                   	push   ebx
c00121a2:	e8 cd 89 ff ff       	call   c000ab74 <File::close()>
c00121a7:	5d                   	pop    ebp
c00121a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121ac:	e8 18 56 ff ff       	call   c00077c9 <free>
c00121b1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121b4:	e8 10 56 ff ff       	call   c00077c9 <free>
c00121b9:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c00121be:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00121c2:	8d 50 01             	lea    edx,[eax+0x1]
c00121c5:	89 0c 85 00 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc900],ecx
c00121cc:	89 34 85 80 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc980],esi
c00121d3:	89 15 80 37 02 c0    	mov    DWORD PTR ds:0xc0023780,edx
c00121d9:	83 c4 10             	add    esp,0x10
c00121dc:	b0 01                	mov    al,0x1
c00121de:	83 c4 5c             	add    esp,0x5c
c00121e1:	5b                   	pop    ebx
c00121e2:	5e                   	pop    esi
c00121e3:	5f                   	pop    edi
c00121e4:	5d                   	pop    ebp
c00121e5:	c3                   	ret    

c00121e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00121e6:	55                   	push   ebp
c00121e7:	57                   	push   edi
c00121e8:	56                   	push   esi
c00121e9:	53                   	push   ebx
c00121ea:	81 ec 68 03 00 00    	sub    esp,0x368
c00121f0:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00121f7:	8b 1d d0 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237d0
c00121fd:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0012201:	68 14 01 00 00       	push   0x114
c0012206:	e8 ae 55 ff ff       	call   c00077b9 <malloc>
c001220b:	83 c4 0c             	add    esp,0xc
c001220e:	89 c5                	mov    ebp,eax
c0012210:	53                   	push   ebx
c0012211:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0012218:	50                   	push   eax
c0012219:	e8 38 88 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c001221e:	5e                   	pop    esi
c001221f:	5f                   	pop    edi
c0012220:	6a 01                	push   0x1
c0012222:	55                   	push   ebp
c0012223:	e8 ee 88 ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c0012228:	83 c4 10             	add    esp,0x10
c001222b:	85 c0                	test   eax,eax
c001222d:	0f 85 a7 06 00 00    	jne    c00128da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012233:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001223b:	83 ec 0c             	sub    esp,0xc
c001223e:	6a 34                	push   0x34
c0012240:	e8 74 55 ff ff       	call   c00077b9 <malloc>
c0012245:	5b                   	pop    ebx
c0012246:	89 c7                	mov    edi,eax
c0012248:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001224c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001224f:	53                   	push   ebx
c0012250:	57                   	push   edi
c0012251:	6a 00                	push   0x0
c0012253:	6a 34                	push   0x34
c0012255:	55                   	push   ebp
c0012256:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012259:	83 c4 20             	add    esp,0x20
c001225c:	85 c0                	test   eax,eax
c001225e:	0f 85 76 06 00 00    	jne    c00128da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012264:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001226a:	0f 85 6a 06 00 00    	jne    c00128da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012270:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012273:	85 c0                	test   eax,eax
c0012275:	0f 84 5f 06 00 00    	je     c00128da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001227b:	31 d2                	xor    edx,edx
c001227d:	51                   	push   ecx
c001227e:	52                   	push   edx
c001227f:	50                   	push   eax
c0012280:	55                   	push   ebp
c0012281:	e8 4e 89 ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c0012286:	83 c4 10             	add    esp,0x10
c0012289:	85 c0                	test   eax,eax
c001228b:	0f 85 49 06 00 00    	jne    c00128da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012291:	83 ec 0c             	sub    esp,0xc
c0012294:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012297:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001229b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001229f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00122a3:	0f af c2             	imul   eax,edx
c00122a6:	50                   	push   eax
c00122a7:	e8 0d 55 ff ff       	call   c00077b9 <malloc>
c00122ac:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00122af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122ba:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00122be:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00122c2:	0f af c2             	imul   eax,edx
c00122c5:	99                   	cdq    
c00122c6:	52                   	push   edx
c00122c7:	50                   	push   eax
c00122c8:	55                   	push   ebp
c00122c9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00122cc:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00122cf:	83 c4 20             	add    esp,0x20
c00122d2:	85 c0                	test   eax,eax
c00122d4:	0f 84 00 06 00 00    	je     c00128da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00122da:	52                   	push   edx
c00122db:	31 d2                	xor    edx,edx
c00122dd:	52                   	push   edx
c00122de:	50                   	push   eax
c00122df:	55                   	push   ebp
c00122e0:	e8 ef 88 ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c00122e5:	83 c4 10             	add    esp,0x10
c00122e8:	85 c0                	test   eax,eax
c00122ea:	0f 85 ea 05 00 00    	jne    c00128da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00122f0:	83 ec 0c             	sub    esp,0xc
c00122f3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00122f7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00122fb:	31 f6                	xor    esi,esi
c00122fd:	0f af c2             	imul   eax,edx
c0012300:	50                   	push   eax
c0012301:	e8 b3 54 ff ff       	call   c00077b9 <malloc>
c0012306:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012309:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001230d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012310:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012314:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012318:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001231c:	0f af c2             	imul   eax,edx
c001231f:	99                   	cdq    
c0012320:	52                   	push   edx
c0012321:	50                   	push   eax
c0012322:	55                   	push   ebp
c0012323:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012326:	83 c4 20             	add    esp,0x20
c0012329:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001232d:	0f 86 8a 00 00 00    	jbe    c00123bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0012333:	0f b7 de             	movzx  ebx,si
c0012336:	c1 e3 05             	shl    ebx,0x5
c0012339:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001233d:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0012340:	75 75                	jne    c00123b7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0012342:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012345:	31 d2                	xor    edx,edx
c0012347:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001234b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001234e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012352:	50                   	push   eax
c0012353:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012356:	52                   	push   edx
c0012357:	50                   	push   eax
c0012358:	55                   	push   ebp
c0012359:	e8 76 88 ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c001235e:	83 c4 10             	add    esp,0x10
c0012361:	85 c0                	test   eax,eax
c0012363:	0f 85 71 05 00 00    	jne    c00128da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012369:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012370:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012373:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012377:	31 d2                	xor    edx,edx
c0012379:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001237d:	83 ec 0c             	sub    esp,0xc
c0012380:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012384:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001238b:	50                   	push   eax
c001238c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012394:	52                   	push   edx
c0012395:	50                   	push   eax
c0012396:	55                   	push   ebp
c0012397:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001239a:	83 c4 1c             	add    esp,0x1c
c001239d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00123a0:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00123a3:	50                   	push   eax
c00123a4:	6a 00                	push   0x0
c00123a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123aa:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00123ae:	50                   	push   eax
c00123af:	e8 1c e1 fe ff       	call   c00004d0 <memset>
c00123b4:	83 c4 10             	add    esp,0x10
c00123b7:	46                   	inc    esi
c00123b8:	e9 6c ff ff ff       	jmp    c0012329 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00123bd:	53                   	push   ebx
c00123be:	31 db                	xor    ebx,ebx
c00123c0:	68 00 01 00 00       	push   0x100
c00123c5:	6a 00                	push   0x0
c00123c7:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00123cb:	50                   	push   eax
c00123cc:	e8 ff e0 fe ff       	call   c00004d0 <memset>
c00123d1:	83 c4 0c             	add    esp,0xc
c00123d4:	68 00 01 00 00       	push   0x100
c00123d9:	6a 00                	push   0x0
c00123db:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00123e2:	50                   	push   eax
c00123e3:	e8 e8 e0 fe ff       	call   c00004d0 <memset>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00123f3:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00123fb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0012403:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001240b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012413:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012417:	0f 86 30 01 00 00    	jbe    c001254d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001241d:	0f b7 f3             	movzx  esi,bx
c0012420:	6b f6 28             	imul   esi,esi,0x28
c0012423:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012427:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001242a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001242e:	52                   	push   edx
c001242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012433:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012437:	8b 06                	mov    eax,DWORD PTR [esi]
c0012439:	6b d2 28             	imul   edx,edx,0x28
c001243c:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0012440:	31 d2                	xor    edx,edx
c0012442:	52                   	push   edx
c0012443:	50                   	push   eax
c0012444:	55                   	push   ebp
c0012445:	e8 8a 87 ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c001244a:	83 c4 0c             	add    esp,0xc
c001244d:	6a 20                	push   0x20
c001244f:	6a 00                	push   0x0
c0012451:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012458:	51                   	push   ecx
c0012459:	e8 72 e0 fe ff       	call   c00004d0 <memset>
c001245e:	59                   	pop    ecx
c001245f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012462:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012466:	52                   	push   edx
c0012467:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001246e:	51                   	push   ecx
c001246f:	6a 00                	push   0x0
c0012471:	6a 1f                	push   0x1f
c0012473:	55                   	push   ebp
c0012474:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012477:	83 c4 1c             	add    esp,0x1c
c001247a:	6a 09                	push   0x9
c001247c:	68 5a e4 01 c0       	push   0xc001e45a
c0012481:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012488:	51                   	push   ecx
c0012489:	e8 02 df fe ff       	call   c0000390 <memcmp>
c001248e:	83 c4 10             	add    esp,0x10
c0012491:	85 c0                	test   eax,eax
c0012493:	75 21                	jne    c00124b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012495:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012499:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001249d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00124a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00124a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124a8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00124af:	89 d0                	mov    eax,edx
c00124b1:	40                   	inc    eax
c00124b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124b6:	50                   	push   eax
c00124b7:	6a 09                	push   0x9
c00124b9:	68 64 e4 01 c0       	push   0xc001e464
c00124be:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00124c5:	50                   	push   eax
c00124c6:	e8 c5 de fe ff       	call   c0000390 <memcmp>
c00124cb:	83 c4 10             	add    esp,0x10
c00124ce:	85 c0                	test   eax,eax
c00124d0:	75 21                	jne    c00124f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00124d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124da:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00124de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00124e2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124e5:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00124ec:	89 d0                	mov    eax,edx
c00124ee:	40                   	inc    eax
c00124ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124f3:	50                   	push   eax
c00124f4:	50                   	push   eax
c00124f5:	68 30 e4 01 c0       	push   0xc001e430
c00124fa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012501:	50                   	push   eax
c0012502:	e8 d9 e1 fe ff       	call   c00006e0 <strcmp>
c0012507:	83 c4 10             	add    esp,0x10
c001250a:	85 c0                	test   eax,eax
c001250c:	75 0f                	jne    c001251d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001250e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012511:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012515:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012519:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001251d:	50                   	push   eax
c001251e:	50                   	push   eax
c001251f:	68 38 e4 01 c0       	push   0xc001e438
c0012524:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001252b:	50                   	push   eax
c001252c:	e8 af e1 fe ff       	call   c00006e0 <strcmp>
c0012531:	83 c4 10             	add    esp,0x10
c0012534:	85 c0                	test   eax,eax
c0012536:	75 0f                	jne    c0012547 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012538:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001253b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001253f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012543:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012547:	43                   	inc    ebx
c0012548:	e9 c6 fe ff ff       	jmp    c0012413 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001254d:	31 d2                	xor    edx,edx
c001254f:	50                   	push   eax
c0012550:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012554:	52                   	push   edx
c0012555:	50                   	push   eax
c0012556:	55                   	push   ebp
c0012557:	e8 78 86 ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c001255c:	58                   	pop    eax
c001255d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012561:	e8 53 52 ff ff       	call   c00077b9 <malloc>
c0012566:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012569:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001256d:	31 d2                	xor    edx,edx
c001256f:	58                   	pop    eax
c0012570:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012574:	53                   	push   ebx
c0012575:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012579:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001257d:	52                   	push   edx
c001257e:	50                   	push   eax
c001257f:	55                   	push   ebp
c0012580:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012583:	83 c4 14             	add    esp,0x14
c0012586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001258a:	e8 2a 52 ff ff       	call   c00077b9 <malloc>
c001258f:	31 d2                	xor    edx,edx
c0012591:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012595:	83 c4 0c             	add    esp,0xc
c0012598:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001259c:	52                   	push   edx
c001259d:	50                   	push   eax
c001259e:	55                   	push   ebp
c001259f:	e8 30 86 ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c00125a4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00125a7:	31 d2                	xor    edx,edx
c00125a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00125ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00125b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125b4:	52                   	push   edx
c00125b5:	50                   	push   eax
c00125b6:	55                   	push   ebp
c00125b7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00125ba:	83 c4 20             	add    esp,0x20
c00125bd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00125c5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00125c9:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00125cd:	0f 84 0b 03 00 00    	je     c00128de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00125d3:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00125da:	31 d2                	xor    edx,edx
c00125dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125e0:	c1 e8 03             	shr    eax,0x3
c00125e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00125e7:	51                   	push   ecx
c00125e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125ec:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00125f0:	52                   	push   edx
c00125f1:	50                   	push   eax
c00125f2:	55                   	push   ebp
c00125f3:	e8 dc 85 ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c00125f8:	5b                   	pop    ebx
c00125f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125fd:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012604:	e8 b0 51 ff ff       	call   c00077b9 <malloc>
c0012609:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001260c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012610:	31 d2                	xor    edx,edx
c0012612:	5e                   	pop    esi
c0012613:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012617:	50                   	push   eax
c0012618:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001261c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012620:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012627:	52                   	push   edx
c0012628:	50                   	push   eax
c0012629:	55                   	push   ebp
c001262a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001262d:	83 c4 20             	add    esp,0x20
c0012630:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012638:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001263c:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012640:	0f 8d 7c 02 00 00    	jge    c00128c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012646:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001264a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001264e:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012653:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012656:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001265a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001265e:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012662:	89 d8                	mov    eax,ebx
c0012664:	c1 e8 08             	shr    eax,0x8
c0012667:	89 c6                	mov    esi,eax
c0012669:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001266d:	c1 e6 04             	shl    esi,0x4
c0012670:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012674:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012677:	85 d2                	test   edx,edx
c0012679:	0f 85 bf 00 00 00    	jne    c001273e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001267f:	83 ec 0c             	sub    esp,0xc
c0012682:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012686:	03 06                	add    eax,DWORD PTR [esi]
c0012688:	50                   	push   eax
c0012689:	e8 4b f8 ff ff       	call   c0011ed9 <Thr::getAddressOfKernelSymbol(char const*)>
c001268e:	83 c4 10             	add    esp,0x10
c0012691:	89 c2                	mov    edx,eax
c0012693:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012698:	85 c0                	test   eax,eax
c001269a:	0f 85 9e 00 00 00    	jne    c001273e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00126a0:	83 ec 0c             	sub    esp,0xc
c00126a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00126a7:	03 06                	add    eax,DWORD PTR [esi]
c00126a9:	50                   	push   eax
c00126aa:	e8 01 dc ff ff       	call   c00102b0 <KeResolveCompatibilitySymbol(char*)>
c00126af:	83 c4 10             	add    esp,0x10
c00126b2:	89 c2                	mov    edx,eax
c00126b4:	85 c0                	test   eax,eax
c00126b6:	0f 85 82 00 00 00    	jne    c001273e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00126bc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00126c0:	50                   	push   eax
c00126c1:	50                   	push   eax
c00126c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126c6:	03 06                	add    eax,DWORD PTR [esi]
c00126c8:	50                   	push   eax
c00126c9:	68 6e e4 01 c0       	push   0xc001e46e
c00126ce:	e8 0d 7e ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c00126d3:	58                   	pop    eax
c00126d4:	5a                   	pop    edx
c00126d5:	68 88 e4 01 c0       	push   0xc001e488
c00126da:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00126e1:	50                   	push   eax
c00126e2:	e8 19 df fe ff       	call   c0000600 <strcpy>
c00126e7:	59                   	pop    ecx
c00126e8:	58                   	pop    eax
c00126e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126ed:	03 06                	add    eax,DWORD PTR [esi]
c00126ef:	50                   	push   eax
c00126f0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00126f7:	50                   	push   eax
c00126f8:	e8 c3 e0 fe ff       	call   c00007c0 <strcat>
c00126fd:	58                   	pop    eax
c00126fe:	5a                   	pop    edx
c00126ff:	68 1e e5 01 c0       	push   0xc001e51e
c0012704:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001270b:	50                   	push   eax
c001270c:	e8 af e0 fe ff       	call   c00007c0 <strcat>
c0012711:	83 c4 10             	add    esp,0x10
c0012714:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012719:	0f 84 5d 01 00 00    	je     c001287c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001271f:	83 ec 0c             	sub    esp,0xc
c0012722:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012729:	50                   	push   eax
c001272a:	e8 30 da ff ff       	call   c001015f <KePanic(char const*)>
c001272f:	83 c4 10             	add    esp,0x10
c0012732:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012736:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001273a:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001273e:	80 fb 01             	cmp    bl,0x1
c0012741:	0f 85 88 00 00 00    	jne    c00127cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012747:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001274e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012752:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012756:	01 ce                	add    esi,ecx
c0012758:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001275e:	0f 94 c0             	sete   al
c0012761:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012767:	0f 94 c3             	sete   bl
c001276a:	09 c3                	or     ebx,eax
c001276c:	8b 06                	mov    eax,DWORD PTR [esi]
c001276e:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012773:	74 41                	je     c00127b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012775:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012778:	84 db                	test   bl,bl
c001277a:	75 15                	jne    c0012791 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001277c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012780:	66 83 f8 0c          	cmp    ax,0xc
c0012784:	76 05                	jbe    c001278b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012786:	b8 0c 00 00 00       	mov    eax,0xc
c001278b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001278f:	76 37                	jbe    c00127c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012791:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012795:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001279a:	0f 84 dc 00 00 00    	je     c001287c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00127a0:	83 ec 0c             	sub    esp,0xc
c00127a3:	68 9f e4 01 c0       	push   0xc001e49f
c00127a8:	e8 b2 d9 ff ff       	call   c001015f <KePanic(char const*)>
c00127ad:	83 c4 10             	add    esp,0x10
c00127b0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127b4:	eb 12                	jmp    c00127c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00127b6:	01 c1                	add    ecx,eax
c00127b8:	84 db                	test   bl,bl
c00127ba:	75 0c                	jne    c00127c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00127bc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00127c0:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00127c4:	77 02                	ja     c00127c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00127c6:	01 d1                	add    ecx,edx
c00127c8:	89 0e                	mov    DWORD PTR [esi],ecx
c00127ca:	e9 ea 00 00 00       	jmp    c00128b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00127cf:	80 fb 02             	cmp    bl,0x2
c00127d2:	75 7c                	jne    c0012850 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00127d4:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00127db:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c00127df:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c00127e3:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00127e9:	74 20                	je     c001280b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00127eb:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00127f1:	74 18                	je     c001280b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00127f3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00127f7:	b9 0a 00 00 00       	mov    ecx,0xa
c00127fc:	66 83 f8 0e          	cmp    ax,0xe
c0012800:	77 03                	ja     c0012805 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012802:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012805:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012809:	76 1f                	jbe    c001282a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001280b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001280f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012814:	74 66                	je     c001287c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012816:	83 ec 0c             	sub    esp,0xc
c0012819:	68 bb e4 01 c0       	push   0xc001e4bb
c001281e:	e8 3c d9 ff ff       	call   c001015f <KePanic(char const*)>
c0012823:	83 c4 10             	add    esp,0x10
c0012826:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001282a:	8b 06                	mov    eax,DWORD PTR [esi]
c001282c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012831:	74 13                	je     c0012846 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012833:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012837:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001283e:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012842:	01 c8                	add    eax,ecx
c0012844:	eb 04                	jmp    c001284a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012846:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001284a:	01 c2                	add    edx,eax
c001284c:	89 16                	mov    DWORD PTR [esi],edx
c001284e:	eb 69                	jmp    c00128b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012850:	0f b6 db             	movzx  ebx,bl
c0012853:	50                   	push   eax
c0012854:	50                   	push   eax
c0012855:	53                   	push   ebx
c0012856:	68 d7 e4 01 c0       	push   0xc001e4d7
c001285b:	e8 80 7c ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0012860:	83 c4 10             	add    esp,0x10
c0012863:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012868:	74 12                	je     c001287c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001286a:	83 ec 0c             	sub    esp,0xc
c001286d:	68 e2 e4 01 c0       	push   0xc001e4e2
c0012872:	e8 e8 d8 ff ff       	call   c001015f <KePanic(char const*)>
c0012877:	83 c4 10             	add    esp,0x10
c001287a:	eb 3d                	jmp    c00128b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001287c:	83 ec 0c             	sub    esp,0xc
c001287f:	55                   	push   ebp
c0012880:	e8 ef 82 ff ff       	call   c000ab74 <File::close()>
c0012885:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012888:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001288b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001288e:	59                   	pop    ecx
c001288f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012893:	e8 31 4f ff ff       	call   c00077c9 <free>
c0012898:	5b                   	pop    ebx
c0012899:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001289d:	e8 27 4f ff ff       	call   c00077c9 <free>
c00128a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00128a5:	e8 1f 4f ff ff       	call   c00077c9 <free>
c00128aa:	5e                   	pop    esi
c00128ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128af:	e8 15 4f ff ff       	call   c00077c9 <free>
c00128b4:	83 c4 10             	add    esp,0x10
c00128b7:	eb 21                	jmp    c00128da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00128b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00128bd:	e9 76 fd ff ff       	jmp    c0012638 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00128c2:	83 ec 0c             	sub    esp,0xc
c00128c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128c9:	e8 fb 4e ff ff       	call   c00077c9 <free>
c00128ce:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00128d2:	83 c4 10             	add    esp,0x10
c00128d5:	e9 eb fc ff ff       	jmp    c00125c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00128da:	31 c0                	xor    eax,eax
c00128dc:	eb 33                	jmp    c0012911 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c00128de:	83 ec 0c             	sub    esp,0xc
c00128e1:	55                   	push   ebp
c00128e2:	e8 8d 82 ff ff       	call   c000ab74 <File::close()>
c00128e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128ea:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00128ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00128f0:	58                   	pop    eax
c00128f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00128f5:	e8 cf 4e ff ff       	call   c00077c9 <free>
c00128fa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00128fd:	e8 c7 4e ff ff       	call   c00077c9 <free>
c0012902:	5a                   	pop    edx
c0012903:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012907:	e8 bd 4e ff ff       	call   c00077c9 <free>
c001290c:	83 c4 10             	add    esp,0x10
c001290f:	b0 01                	mov    al,0x1
c0012911:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012917:	5b                   	pop    ebx
c0012918:	5e                   	pop    esi
c0012919:	5f                   	pop    edi
c001291a:	5d                   	pop    ebp
c001291b:	c3                   	ret    

c001291c <Thr::getDriverBaseFromAddress(unsigned long)>:
c001291c:	56                   	push   esi
c001291d:	31 d2                	xor    edx,edx
c001291f:	53                   	push   ebx
c0012920:	8b 1d e0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fe0
c0012926:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001292a:	39 d3                	cmp    ebx,edx
c001292c:	7e 1b                	jle    c0012949 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001292e:	8b 04 95 00 32 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdce00]
c0012935:	39 c8                	cmp    eax,ecx
c0012937:	77 0d                	ja     c0012946 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012939:	8b 34 95 00 30 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdd000]
c0012940:	01 c6                	add    esi,eax
c0012942:	39 ce                	cmp    esi,ecx
c0012944:	77 05                	ja     c001294b <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012946:	42                   	inc    edx
c0012947:	eb e1                	jmp    c001292a <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012949:	31 c0                	xor    eax,eax
c001294b:	5b                   	pop    ebx
c001294c:	5e                   	pop    esi
c001294d:	c3                   	ret    

c001294e <Thr::getDriverNameFromAddress(unsigned long)>:
c001294e:	53                   	push   ebx
c001294f:	31 c0                	xor    eax,eax
c0012951:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012955:	8b 1d e0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fe0
c001295b:	39 c3                	cmp    ebx,eax
c001295d:	7e 22                	jle    c0012981 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001295f:	8b 14 85 00 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce00]
c0012966:	39 ca                	cmp    edx,ecx
c0012968:	77 14                	ja     c001297e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001296a:	03 14 85 00 30 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdd000]
c0012971:	39 ca                	cmp    edx,ecx
c0012973:	76 09                	jbe    c001297e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012975:	8b 04 85 00 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcc00]
c001297c:	eb 05                	jmp    c0012983 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001297e:	40                   	inc    eax
c001297f:	eb da                	jmp    c001295b <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012981:	31 c0                	xor    eax,eax
c0012983:	5b                   	pop    ebx
c0012984:	c3                   	ret    

c0012985 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012985:	53                   	push   ebx
c0012986:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001298a:	53                   	push   ebx
c001298b:	e8 8c ff ff ff       	call   c001291c <Thr::getDriverBaseFromAddress(unsigned long)>
c0012990:	5a                   	pop    edx
c0012991:	31 d2                	xor    edx,edx
c0012993:	85 c0                	test   eax,eax
c0012995:	74 04                	je     c001299b <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012997:	89 da                	mov    edx,ebx
c0012999:	29 c2                	sub    edx,eax
c001299b:	89 d0                	mov    eax,edx
c001299d:	5b                   	pop    ebx
c001299e:	c3                   	ret    

c001299f <Thr::loadDLL(char const*, bool)>:
c001299f:	55                   	push   ebp
c00129a0:	57                   	push   edi
c00129a1:	56                   	push   esi
c00129a2:	53                   	push   ebx
c00129a3:	81 ec 34 01 00 00    	sub    esp,0x134
c00129a9:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00129b0:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00129b7:	56                   	push   esi
c00129b8:	68 fa e4 01 c0       	push   0xc001e4fa
c00129bd:	e8 1e 7b ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c00129c2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00129c9:	e8 eb 4d ff ff       	call   c00077b9 <malloc>
c00129ce:	83 c4 0c             	add    esp,0xc
c00129d1:	89 c3                	mov    ebx,eax
c00129d3:	ff 35 d0 37 02 c0    	push   DWORD PTR ds:0xc00237d0
c00129d9:	56                   	push   esi
c00129da:	50                   	push   eax
c00129db:	e8 76 80 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c00129e0:	83 c4 10             	add    esp,0x10
c00129e3:	85 db                	test   ebx,ebx
c00129e5:	75 3c                	jne    c0012a23 <Thr::loadDLL(char const*, bool)+0x84>
c00129e7:	89 f8                	mov    eax,edi
c00129e9:	84 c0                	test   al,al
c00129eb:	0f 84 d2 01 00 00    	je     c0012bc3 <Thr::loadDLL(char const*, bool)+0x224>
c00129f1:	55                   	push   ebp
c00129f2:	55                   	push   ebp
c00129f3:	68 0b e5 01 c0       	push   0xc001e50b
c00129f8:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00129fc:	55                   	push   ebp
c00129fd:	e8 fe db fe ff       	call   c0000600 <strcpy>
c0012a02:	58                   	pop    eax
c0012a03:	5a                   	pop    edx
c0012a04:	56                   	push   esi
c0012a05:	55                   	push   ebp
c0012a06:	e8 b5 dd fe ff       	call   c00007c0 <strcat>
c0012a0b:	59                   	pop    ecx
c0012a0c:	58                   	pop    eax
c0012a0d:	68 1e e5 01 c0       	push   0xc001e51e
c0012a12:	55                   	push   ebp
c0012a13:	e8 a8 dd fe ff       	call   c00007c0 <strcat>
c0012a18:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012a1b:	e8 3f d7 ff ff       	call   c001015f <KePanic(char const*)>
c0012a20:	83 c4 10             	add    esp,0x10
c0012a23:	51                   	push   ecx
c0012a24:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012a28:	50                   	push   eax
c0012a29:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012a2d:	50                   	push   eax
c0012a2e:	53                   	push   ebx
c0012a2f:	e8 8e 83 ff ff       	call   c000adc2 <File::stat(unsigned long long*, bool*)>
c0012a34:	83 c4 10             	add    esp,0x10
c0012a37:	85 db                	test   ebx,ebx
c0012a39:	74 0c                	je     c0012a47 <Thr::loadDLL(char const*, bool)+0xa8>
c0012a3b:	83 ec 0c             	sub    esp,0xc
c0012a3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a40:	53                   	push   ebx
c0012a41:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012a44:	83 c4 10             	add    esp,0x10
c0012a47:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012a4c:	75 0a                	jne    c0012a58 <Thr::loadDLL(char const*, bool)+0xb9>
c0012a4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012a52:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012a56:	75 3c                	jne    c0012a94 <Thr::loadDLL(char const*, bool)+0xf5>
c0012a58:	89 f8                	mov    eax,edi
c0012a5a:	84 c0                	test   al,al
c0012a5c:	0f 84 49 01 00 00    	je     c0012bab <Thr::loadDLL(char const*, bool)+0x20c>
c0012a62:	51                   	push   ecx
c0012a63:	51                   	push   ecx
c0012a64:	68 0b e5 01 c0       	push   0xc001e50b
c0012a69:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012a6d:	53                   	push   ebx
c0012a6e:	e8 8d db fe ff       	call   c0000600 <strcpy>
c0012a73:	5d                   	pop    ebp
c0012a74:	58                   	pop    eax
c0012a75:	56                   	push   esi
c0012a76:	53                   	push   ebx
c0012a77:	e8 44 dd fe ff       	call   c00007c0 <strcat>
c0012a7c:	58                   	pop    eax
c0012a7d:	5a                   	pop    edx
c0012a7e:	68 1e e5 01 c0       	push   0xc001e51e
c0012a83:	53                   	push   ebx
c0012a84:	e8 37 dd fe ff       	call   c00007c0 <strcat>
c0012a89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a8c:	e8 ce d6 ff ff       	call   c001015f <KePanic(char const*)>
c0012a91:	83 c4 10             	add    esp,0x10
c0012a94:	52                   	push   edx
c0012a95:	6a 03                	push   0x3
c0012a97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a9b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012a9f:	05 ff 0f 00 00       	add    eax,0xfff
c0012aa4:	83 d2 00             	adc    edx,0x0
c0012aa7:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012aab:	50                   	push   eax
c0012aac:	ff 35 f0 05 02 c0    	push   DWORD PTR ds:0xc00205f0
c0012ab2:	e8 6f 6f ff ff       	call   c0009a26 <VAS::allocatePages(int, int)>
c0012ab7:	59                   	pop    ecx
c0012ab8:	89 c3                	mov    ebx,eax
c0012aba:	5d                   	pop    ebp
c0012abb:	50                   	push   eax
c0012abc:	68 d6 d2 01 c0       	push   0xc001d2d6
c0012ac1:	e8 1a 7a ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0012ac6:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ac9:	e8 72 da fe ff       	call   c0000540 <strlen>
c0012ace:	8b 2d e0 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022fe0
c0012ad4:	40                   	inc    eax
c0012ad5:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ad8:	e8 dc 4c ff ff       	call   c00077b9 <malloc>
c0012add:	89 04 ad 00 34 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdcc00],eax
c0012ae4:	58                   	pop    eax
c0012ae5:	a1 e0 2f 02 c0       	mov    eax,ds:0xc0022fe0
c0012aea:	5a                   	pop    edx
c0012aeb:	56                   	push   esi
c0012aec:	ff 34 85 00 34 02 c0 	push   DWORD PTR [eax*4-0x3ffdcc00]
c0012af3:	e8 08 db fe ff       	call   c0000600 <strcpy>
c0012af8:	a1 e0 2f 02 c0       	mov    eax,ds:0xc0022fe0
c0012afd:	8d 50 01             	lea    edx,[eax+0x1]
c0012b00:	89 1c 85 00 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdce00],ebx
c0012b07:	89 15 e0 2f 02 c0    	mov    DWORD PTR ds:0xc0022fe0,edx
c0012b0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012b11:	83 c4 0c             	add    esp,0xc
c0012b14:	89 14 85 00 30 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd000],edx
c0012b1b:	6a 01                	push   0x1
c0012b1d:	53                   	push   ebx
c0012b1e:	56                   	push   esi
c0012b1f:	e8 c2 f6 ff ff       	call   c00121e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012b24:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012b28:	83 c4 10             	add    esp,0x10
c0012b2b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012b30:	0f 85 89 00 00 00    	jne    c0012bbf <Thr::loadDLL(char const*, bool)+0x220>
c0012b36:	89 f8                	mov    eax,edi
c0012b38:	84 c0                	test   al,al
c0012b3a:	74 73                	je     c0012baf <Thr::loadDLL(char const*, bool)+0x210>
c0012b3c:	83 ec 0c             	sub    esp,0xc
c0012b3f:	68 20 e5 01 c0       	push   0xc001e520
c0012b44:	e8 16 d6 ff ff       	call   c001015f <KePanic(char const*)>
c0012b49:	83 c4 10             	add    esp,0x10
c0012b4c:	eb 61                	jmp    c0012baf <Thr::loadDLL(char const*, bool)+0x210>
c0012b4e:	50                   	push   eax
c0012b4f:	50                   	push   eax
c0012b50:	89 e8                	mov    eax,ebp
c0012b52:	c1 e0 0c             	shl    eax,0xc
c0012b55:	01 d8                	add    eax,ebx
c0012b57:	50                   	push   eax
c0012b58:	ff 35 f0 05 02 c0    	push   DWORD PTR ds:0xc00205f0
c0012b5e:	e8 3b 6a ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c0012b63:	83 c4 10             	add    esp,0x10
c0012b66:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b68:	a8 60                	test   al,0x60
c0012b6a:	75 11                	jne    c0012b7d <Thr::loadDLL(char const*, bool)+0x1de>
c0012b6c:	83 ec 0c             	sub    esp,0xc
c0012b6f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b74:	50                   	push   eax
c0012b75:	e8 b9 4e ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012b7a:	83 c4 10             	add    esp,0x10
c0012b7d:	45                   	inc    ebp
c0012b7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b86:	05 ff 0f 00 00       	add    eax,0xfff
c0012b8b:	bf 00 00 00 00       	mov    edi,0x0
c0012b90:	83 d2 00             	adc    edx,0x0
c0012b93:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012b97:	c1 ea 0c             	shr    edx,0xc
c0012b9a:	39 c5                	cmp    ebp,eax
c0012b9c:	89 d1                	mov    ecx,edx
c0012b9e:	89 f8                	mov    eax,edi
c0012ba0:	19 c8                	sbb    eax,ecx
c0012ba2:	72 aa                	jb     c0012b4e <Thr::loadDLL(char const*, bool)+0x1af>
c0012ba4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012ba9:	75 18                	jne    c0012bc3 <Thr::loadDLL(char const*, bool)+0x224>
c0012bab:	31 db                	xor    ebx,ebx
c0012bad:	eb 14                	jmp    c0012bc3 <Thr::loadDLL(char const*, bool)+0x224>
c0012baf:	83 ec 0c             	sub    esp,0xc
c0012bb2:	68 3f e5 01 c0       	push   0xc001e53f
c0012bb7:	e8 a3 d5 ff ff       	call   c001015f <KePanic(char const*)>
c0012bbc:	83 c4 10             	add    esp,0x10
c0012bbf:	31 ed                	xor    ebp,ebp
c0012bc1:	eb bb                	jmp    c0012b7e <Thr::loadDLL(char const*, bool)+0x1df>
c0012bc3:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012bc9:	89 d8                	mov    eax,ebx
c0012bcb:	5b                   	pop    ebx
c0012bcc:	5e                   	pop    esi
c0012bcd:	5f                   	pop    edi
c0012bce:	5d                   	pop    ebp
c0012bcf:	c3                   	ret    

c0012bd0 <Thr::executeDLL(unsigned long, void*)>:
c0012bd0:	56                   	push   esi
c0012bd1:	53                   	push   ebx
c0012bd2:	52                   	push   edx
c0012bd3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012bd7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012bdb:	85 db                	test   ebx,ebx
c0012bdd:	75 10                	jne    c0012bef <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012bdf:	83 ec 0c             	sub    esp,0xc
c0012be2:	68 5b e5 01 c0       	push   0xc001e55b
c0012be7:	e8 73 d5 ff ff       	call   c001015f <KePanic(char const*)>
c0012bec:	83 c4 10             	add    esp,0x10
c0012bef:	50                   	push   eax
c0012bf0:	50                   	push   eax
c0012bf1:	53                   	push   ebx
c0012bf2:	68 85 e5 01 c0       	push   0xc001e585
c0012bf7:	e8 e4 78 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0012bfc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012c00:	89 d8                	mov    eax,ebx
c0012c02:	83 c4 14             	add    esp,0x14
c0012c05:	5b                   	pop    ebx
c0012c06:	5e                   	pop    esi
c0012c07:	ff e0                	jmp    eax
c0012c09:	66 90                	xchg   ax,ax
c0012c0b:	90                   	nop

c0012c0c <userModeEntryPoint(void*)>:
c0012c0c:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0012c11:	48                   	dec    eax
c0012c12:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0012c17:	75 03                	jne    c0012c1c <userModeEntryPoint(void*)+0x10>
c0012c19:	fb                   	sti    
c0012c1a:	66 90                	xchg   ax,ax
c0012c1c:	fb                   	sti    
c0012c1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c22:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012c25:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c2f:	e9 0b d6 fe ff       	jmp    c000023f <goToUsermode>

c0012c34 <changeTSS>:
c0012c34:	83 ec 14             	sub    esp,0x14
c0012c37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c3c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0012c3f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012c44:	c1 e2 15             	shl    edx,0x15
c0012c47:	29 d0                	sub    eax,edx
c0012c49:	50                   	push   eax
c0012c4a:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0012c4f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c55:	05 7c 11 00 00       	add    eax,0x117c
c0012c5a:	50                   	push   eax
c0012c5b:	e8 80 5f ff ff       	call   c0008be0 <TSS::setESP(unsigned long)>
c0012c60:	83 c4 1c             	add    esp,0x1c
c0012c63:	c3                   	ret    

c0012c64 <switchToThread(ThreadControlBlock*)>:
c0012c64:	57                   	push   edi
c0012c65:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c0012c6a:	56                   	push   esi
c0012c6b:	85 c0                	test   eax,eax
c0012c6d:	53                   	push   ebx
c0012c6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c72:	0f 85 90 00 00 00    	jne    c0012d08 <switchToThread(ThreadControlBlock*)+0xa4>
c0012c78:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0012c7b:	80 fa ff             	cmp    dl,0xff
c0012c7e:	0f 84 80 00 00 00    	je     c0012d04 <switchToThread(ThreadControlBlock*)+0xa0>
c0012c84:	81 e2 ff 00 00 00    	and    edx,0xff
c0012c8a:	b8 00 04 00 00       	mov    eax,0x400
c0012c8f:	29 d0                	sub    eax,edx
c0012c91:	d1 f8                	sar    eax,1
c0012c93:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0012c96:	66 90                	xchg   ax,ax
c0012c98:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0012c9b:	e8 fd 25 00 00       	call   c001529d <HalQueryPerformanceCounter()>
c0012ca0:	a3 e8 37 02 c0       	mov    ds:0xc00237e8,eax
c0012ca5:	89 15 ec 37 02 c0    	mov    DWORD PTR ds:0xc00237ec,edx
c0012cab:	89 c6                	mov    esi,eax
c0012cad:	89 d7                	mov    edi,edx
c0012caf:	2b 35 d8 37 02 c0    	sub    esi,DWORD PTR ds:0xc00237d8
c0012cb5:	a3 d8 37 02 c0       	mov    ds:0xc00237d8,eax
c0012cba:	1b 3d dc 37 02 c0    	sbb    edi,DWORD PTR ds:0xc00237dc
c0012cc0:	89 35 e0 37 02 c0    	mov    DWORD PTR ds:0xc00237e0,esi
c0012cc6:	89 3d e4 37 02 c0    	mov    DWORD PTR ds:0xc00237e4,edi
c0012ccc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012cd2:	89 15 dc 37 02 c0    	mov    DWORD PTR ds:0xc00237dc,edx
c0012cd8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0012cdb:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0012cde:	01 c6                	add    esi,eax
c0012ce0:	11 d7                	adc    edi,edx
c0012ce2:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0012ce5:	83 ec 0c             	sub    esp,0xc
c0012ce8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0012ceb:	53                   	push   ebx
c0012cec:	e8 86 d5 fe ff       	call   c0000277 <switchToThreadASM>
c0012cf1:	0f 20 c0             	mov    eax,cr0
c0012cf4:	83 c8 08             	or     eax,0x8
c0012cf7:	0f 22 c0             	mov    cr0,eax
c0012cfa:	83 c4 10             	add    esp,0x10
c0012cfd:	5b                   	pop    ebx
c0012cfe:	5e                   	pop    esi
c0012cff:	5f                   	pop    edi
c0012d00:	c3                   	ret    
c0012d01:	8d 76 00             	lea    esi,[esi+0x0]
c0012d04:	31 c0                	xor    eax,eax
c0012d06:	eb 90                	jmp    c0012c98 <switchToThread(ThreadControlBlock*)+0x34>
c0012d08:	5b                   	pop    ebx
c0012d09:	c7 05 a0 37 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00237a0,0x1
c0012d13:	5e                   	pop    esi
c0012d14:	5f                   	pop    edi
c0012d15:	c3                   	ret    
c0012d16:	66 90                	xchg   ax,ax

c0012d18 <Process::addArgs(char**)>:
c0012d18:	57                   	push   edi
c0012d19:	56                   	push   esi
c0012d1a:	53                   	push   ebx
c0012d1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d1f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012d23:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0012d2d:	85 ff                	test   edi,edi
c0012d2f:	74 43                	je     c0012d74 <Process::addArgs(char**)+0x5c>
c0012d31:	8b 07                	mov    eax,DWORD PTR [edi]
c0012d33:	85 c0                	test   eax,eax
c0012d35:	74 3d                	je     c0012d74 <Process::addArgs(char**)+0x5c>
c0012d37:	31 db                	xor    ebx,ebx
c0012d39:	8d 76 00             	lea    esi,[esi+0x0]
c0012d3c:	83 ec 0c             	sub    esp,0xc
c0012d3f:	50                   	push   eax
c0012d40:	e8 fb d7 fe ff       	call   c0000540 <strlen>
c0012d45:	40                   	inc    eax
c0012d46:	89 04 24             	mov    DWORD PTR [esp],eax
c0012d49:	e8 6b 4a ff ff       	call   c00077b9 <malloc>
c0012d4e:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012d55:	5a                   	pop    edx
c0012d56:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0012d59:	59                   	pop    ecx
c0012d5a:	43                   	inc    ebx
c0012d5b:	52                   	push   edx
c0012d5c:	50                   	push   eax
c0012d5d:	e8 9e d8 fe ff       	call   c0000600 <strcpy>
c0012d62:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012d68:	83 c4 10             	add    esp,0x10
c0012d6b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0012d6e:	85 c0                	test   eax,eax
c0012d70:	75 ca                	jne    c0012d3c <Process::addArgs(char**)+0x24>
c0012d72:	66 90                	xchg   ax,ax
c0012d74:	5b                   	pop    ebx
c0012d75:	5e                   	pop    esi
c0012d76:	5f                   	pop    edi
c0012d77:	c3                   	ret    

c0012d78 <Process::Process(char const*, Process*, char**)>:
c0012d78:	56                   	push   esi
c0012d79:	53                   	push   ebx
c0012d7a:	83 ec 14             	sub    esp,0x14
c0012d7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d81:	05 0c 02 00 00       	add    eax,0x20c
c0012d86:	bb 07 00 00 00       	mov    ebx,0x7
c0012d8b:	89 c6                	mov    esi,eax
c0012d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0012d90:	85 db                	test   ebx,ebx
c0012d92:	78 14                	js     c0012da8 <Process::Process(char const*, Process*, char**)+0x30>
c0012d94:	83 ec 0c             	sub    esp,0xc
c0012d97:	56                   	push   esi
c0012d98:	e8 1f 98 00 00       	call   c001c5bc <ThreadControlBlock::ThreadControlBlock()>
c0012d9d:	83 c4 10             	add    esp,0x10
c0012da0:	83 c6 5f             	add    esi,0x5f
c0012da3:	4b                   	dec    ebx
c0012da4:	eb ea                	jmp    c0012d90 <Process::Process(char const*, Process*, char**)+0x18>
c0012da6:	66 90                	xchg   ax,ax
c0012da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dac:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012db7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0012dbe:	83 ec 0c             	sub    esp,0xc
c0012dc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012dc5:	e8 8a d1 ff ff       	call   c000ff54 <Krnl::newProcessEnv(Process*)>
c0012dca:	83 c4 10             	add    esp,0x10
c0012dcd:	89 c2                	mov    edx,eax
c0012dcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dd3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012dd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ddd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012de6:	a1 c8 f4 01 c0       	mov    eax,ds:0xc001f4c8
c0012deb:	8d 50 01             	lea    edx,[eax+0x1]
c0012dee:	89 15 c8 f4 01 c0    	mov    DWORD PTR ds:0xc001f4c8,edx
c0012df4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012df8:	89 02                	mov    DWORD PTR [edx],eax
c0012dfa:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0012e02:	83 ec 0c             	sub    esp,0xc
c0012e05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e09:	e8 ab 49 ff ff       	call   c00077b9 <malloc>
c0012e0e:	83 c4 10             	add    esp,0x10
c0012e11:	89 c3                	mov    ebx,eax
c0012e13:	83 ec 08             	sub    esp,0x8
c0012e16:	6a 00                	push   0x0
c0012e18:	53                   	push   ebx
c0012e19:	e8 b2 6f ff ff       	call   c0009dd0 <VAS::VAS(bool)>
c0012e1e:	83 c4 10             	add    esp,0x10
c0012e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e25:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012e2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e2f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012e39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e3d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012e41:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012e47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e4b:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012e51:	85 c0                	test   eax,eax
c0012e53:	74 43                	je     c0012e98 <Process::Process(char const*, Process*, char**)+0x120>
c0012e55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e59:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012e5f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012e65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e69:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012e6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e73:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012e79:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e83:	05 0c 01 00 00       	add    eax,0x10c
c0012e88:	83 ec 08             	sub    esp,0x8
c0012e8b:	52                   	push   edx
c0012e8c:	50                   	push   eax
c0012e8d:	e8 6e d7 fe ff       	call   c0000600 <strcpy>
c0012e92:	83 c4 10             	add    esp,0x10
c0012e95:	eb 65                	jmp    c0012efc <Process::Process(char const*, Process*, char**)+0x184>
c0012e97:	90                   	nop
c0012e98:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0012ea0:	83 ec 0c             	sub    esp,0xc
c0012ea3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012ea7:	e8 0d 49 ff ff       	call   c00077b9 <malloc>
c0012eac:	83 c4 10             	add    esp,0x10
c0012eaf:	89 c3                	mov    ebx,eax
c0012eb1:	83 ec 08             	sub    esp,0x8
c0012eb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012eb8:	53                   	push   ebx
c0012eb9:	e8 3c 5a ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0012ebe:	83 c4 10             	add    esp,0x10
c0012ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ec5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0012ecb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ecf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012ed5:	83 ec 0c             	sub    esp,0xc
c0012ed8:	50                   	push   eax
c0012ed9:	e8 bc 52 ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0012ede:	83 c4 10             	add    esp,0x10
c0012ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ee5:	05 0c 01 00 00       	add    eax,0x10c
c0012eea:	83 ec 08             	sub    esp,0x8
c0012eed:	68 a4 e5 01 c0       	push   0xc001e5a4
c0012ef2:	50                   	push   eax
c0012ef3:	e8 08 d7 fe ff       	call   c0000600 <strcpy>
c0012ef8:	83 c4 10             	add    esp,0x10
c0012efb:	90                   	nop
c0012efc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f00:	83 c0 0c             	add    eax,0xc
c0012f03:	83 ec 08             	sub    esp,0x8
c0012f06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f0a:	50                   	push   eax
c0012f0b:	e8 f0 d6 fe ff       	call   c0000600 <strcpy>
c0012f10:	83 c4 10             	add    esp,0x10
c0012f13:	83 ec 08             	sub    esp,0x8
c0012f16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012f1a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f1e:	e8 f5 fd ff ff       	call   c0012d18 <Process::addArgs(char**)>
c0012f23:	83 c4 10             	add    esp,0x10
c0012f26:	83 ec 08             	sub    esp,0x8
c0012f29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f31:	e8 7a ed ff ff       	call   c0011cb0 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0012f36:	83 c4 10             	add    esp,0x10
c0012f39:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012f3d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012f41:	83 f0 01             	xor    eax,0x1
c0012f44:	88 c2                	mov    dl,al
c0012f46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f4a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0012f50:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012f54:	25 ff 00 00 00       	and    eax,0xff
c0012f59:	83 ec 08             	sub    esp,0x8
c0012f5c:	50                   	push   eax
c0012f5d:	68 fc e5 01 c0       	push   0xc001e5fc
c0012f62:	e8 79 75 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0012f67:	83 c4 10             	add    esp,0x10
c0012f6a:	90                   	nop
c0012f6b:	83 c4 14             	add    esp,0x14
c0012f6e:	5b                   	pop    ebx
c0012f6f:	5e                   	pop    esi
c0012f70:	c3                   	ret    
c0012f71:	90                   	nop
c0012f72:	66 90                	xchg   ax,ax

c0012f74 <Process::Process(bool, char const*, Process*, char**)>:
c0012f74:	56                   	push   esi
c0012f75:	53                   	push   ebx
c0012f76:	83 ec 24             	sub    esp,0x24
c0012f79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012f7d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012f81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f85:	05 0c 02 00 00       	add    eax,0x20c
c0012f8a:	bb 07 00 00 00       	mov    ebx,0x7
c0012f8f:	89 c6                	mov    esi,eax
c0012f91:	8d 76 00             	lea    esi,[esi+0x0]
c0012f94:	85 db                	test   ebx,ebx
c0012f96:	78 14                	js     c0012fac <Process::Process(bool, char const*, Process*, char**)+0x38>
c0012f98:	83 ec 0c             	sub    esp,0xc
c0012f9b:	56                   	push   esi
c0012f9c:	e8 1b 96 00 00       	call   c001c5bc <ThreadControlBlock::ThreadControlBlock()>
c0012fa1:	83 c4 10             	add    esp,0x10
c0012fa4:	83 c6 5f             	add    esi,0x5f
c0012fa7:	4b                   	dec    ebx
c0012fa8:	eb ea                	jmp    c0012f94 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0012faa:	66 90                	xchg   ax,ax
c0012fac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fb0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012fb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fbb:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0012fc2:	83 ec 0c             	sub    esp,0xc
c0012fc5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012fc9:	e8 86 cf ff ff       	call   c000ff54 <Krnl::newProcessEnv(Process*)>
c0012fce:	83 c4 10             	add    esp,0x10
c0012fd1:	89 c2                	mov    edx,eax
c0012fd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fd7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012fdd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fe1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012fea:	a1 c8 f4 01 c0       	mov    eax,ds:0xc001f4c8
c0012fef:	8d 50 01             	lea    edx,[eax+0x1]
c0012ff2:	89 15 c8 f4 01 c0    	mov    DWORD PTR ds:0xc001f4c8,edx
c0012ff8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012ffc:	89 02                	mov    DWORD PTR [edx],eax
c0012ffe:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0013006:	83 ec 0c             	sub    esp,0xc
c0013009:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001300d:	e8 a7 47 ff ff       	call   c00077b9 <malloc>
c0013012:	83 c4 10             	add    esp,0x10
c0013015:	89 c3                	mov    ebx,eax
c0013017:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001301b:	25 ff 00 00 00       	and    eax,0xff
c0013020:	83 ec 08             	sub    esp,0x8
c0013023:	50                   	push   eax
c0013024:	53                   	push   ebx
c0013025:	e8 a6 6d ff ff       	call   c0009dd0 <VAS::VAS(bool)>
c001302a:	83 c4 10             	add    esp,0x10
c001302d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013031:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001303b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013045:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013049:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001304d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013053:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013057:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001305d:	85 c0                	test   eax,eax
c001305f:	74 43                	je     c00130a4 <Process::Process(bool, char const*, Process*, char**)+0x130>
c0013061:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013065:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001306b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013071:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013075:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001307b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001307f:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013085:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001308b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001308f:	05 0c 01 00 00       	add    eax,0x10c
c0013094:	83 ec 08             	sub    esp,0x8
c0013097:	52                   	push   edx
c0013098:	50                   	push   eax
c0013099:	e8 62 d5 fe ff       	call   c0000600 <strcpy>
c001309e:	83 c4 10             	add    esp,0x10
c00130a1:	eb 65                	jmp    c0013108 <Process::Process(bool, char const*, Process*, char**)+0x194>
c00130a3:	90                   	nop
c00130a4:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c00130ac:	83 ec 0c             	sub    esp,0xc
c00130af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00130b3:	e8 01 47 ff ff       	call   c00077b9 <malloc>
c00130b8:	83 c4 10             	add    esp,0x10
c00130bb:	89 c3                	mov    ebx,eax
c00130bd:	83 ec 08             	sub    esp,0x8
c00130c0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00130c4:	53                   	push   ebx
c00130c5:	e8 30 58 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00130ca:	83 c4 10             	add    esp,0x10
c00130cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130d1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00130d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130db:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00130e1:	83 ec 0c             	sub    esp,0xc
c00130e4:	50                   	push   eax
c00130e5:	e8 b0 50 ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00130ea:	83 c4 10             	add    esp,0x10
c00130ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130f1:	05 0c 01 00 00       	add    eax,0x10c
c00130f6:	83 ec 08             	sub    esp,0x8
c00130f9:	68 a4 e5 01 c0       	push   0xc001e5a4
c00130fe:	50                   	push   eax
c00130ff:	e8 fc d4 fe ff       	call   c0000600 <strcpy>
c0013104:	83 c4 10             	add    esp,0x10
c0013107:	90                   	nop
c0013108:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001310c:	83 c0 0c             	add    eax,0xc
c001310f:	83 ec 08             	sub    esp,0x8
c0013112:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013116:	50                   	push   eax
c0013117:	e8 e4 d4 fe ff       	call   c0000600 <strcpy>
c001311c:	83 c4 10             	add    esp,0x10
c001311f:	83 ec 08             	sub    esp,0x8
c0013122:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013126:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001312a:	e8 e9 fb ff ff       	call   c0012d18 <Process::addArgs(char**)>
c001312f:	83 c4 10             	add    esp,0x10
c0013132:	90                   	nop
c0013133:	83 c4 24             	add    esp,0x24
c0013136:	5b                   	pop    ebx
c0013137:	5e                   	pop    esi
c0013138:	c3                   	ret    
c0013139:	8d 76 00             	lea    esi,[esi+0x0]

c001313c <taskStartupFunction>:
c001313c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013141:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013144:	c3                   	ret    
c0013145:	90                   	nop
c0013146:	66 90                	xchg   ax,ax

c0013148 <Semaphore::Semaphore(int)>:
c0013148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001314c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013150:	89 10                	mov    DWORD PTR [eax],edx
c0013152:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013156:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001315d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013161:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001316c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013173:	90                   	nop
c0013174:	c3                   	ret    
c0013175:	90                   	nop
c0013176:	66 90                	xchg   ax,ax

c0013178 <Mutex::Mutex()>:
c0013178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001317c:	6a 01                	push   0x1
c001317e:	50                   	push   eax
c001317f:	e8 c4 ff ff ff       	call   c0013148 <Semaphore::Semaphore(int)>
c0013184:	83 c4 08             	add    esp,0x8
c0013187:	90                   	nop
c0013188:	c3                   	ret    
c0013189:	90                   	nop
c001318a:	66 90                	xchg   ax,ax

c001318c <Process::createThread(void (*)(void*), void*, int)>:
c001318c:	57                   	push   edi
c001318d:	31 c9                	xor    ecx,ecx
c001318f:	56                   	push   esi
c0013190:	53                   	push   ebx
c0013191:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013195:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001319c:	89 f2                	mov    edx,esi
c001319e:	66 90                	xchg   ax,ax
c00131a0:	31 c0                	xor    eax,eax
c00131a2:	66 89 d0             	mov    ax,dx
c00131a5:	83 e2 01             	and    edx,0x1
c00131a8:	74 12                	je     c00131bc <Process::createThread(void (*)(void*), void*, int)+0x30>
c00131aa:	d1 f8                	sar    eax,1
c00131ac:	41                   	inc    ecx
c00131ad:	89 c2                	mov    edx,eax
c00131af:	83 f9 10             	cmp    ecx,0x10
c00131b2:	75 ec                	jne    c00131a0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00131b4:	31 db                	xor    ebx,ebx
c00131b6:	89 d8                	mov    eax,ebx
c00131b8:	5b                   	pop    ebx
c00131b9:	5e                   	pop    esi
c00131ba:	5f                   	pop    edi
c00131bb:	c3                   	ret    
c00131bc:	b8 01 00 00 00       	mov    eax,0x1
c00131c1:	d3 e0                	shl    eax,cl
c00131c3:	09 c6                	or     esi,eax
c00131c5:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00131c8:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00131cf:	01 c0                	add    eax,eax
c00131d1:	01 c8                	add    eax,ecx
c00131d3:	8d 04 80             	lea    eax,[eax+eax*4]
c00131d6:	01 d8                	add    eax,ebx
c00131d8:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00131df:	75 0b                	jne    c00131ec <Process::createThread(void (*)(void*), void*, int)+0x60>
c00131e1:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00131eb:	90                   	nop
c00131ec:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00131f2:	83 ec 08             	sub    esp,0x8
c00131f5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00131f8:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00131fb:	01 c0                	add    eax,eax
c00131fd:	01 c8                	add    eax,ecx
c00131ff:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013202:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013205:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001320b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013211:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013215:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001321b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013221:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013228:	89 ca                	mov    edx,ecx
c001322a:	f7 da                	neg    edx
c001322c:	c1 e2 15             	shl    edx,0x15
c001322f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013235:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001323b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001323f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013249:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001324f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013253:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013259:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0013263:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001326d:	53                   	push   ebx
c001326e:	68 c4 37 02 c0       	push   0xc00237c4
c0013273:	e8 e4 90 00 00       	call   c001c35c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013278:	83 c4 10             	add    esp,0x10
c001327b:	89 d8                	mov    eax,ebx
c001327d:	5b                   	pop    ebx
c001327e:	5e                   	pop    esi
c001327f:	5f                   	pop    edi
c0013280:	c3                   	ret    
c0013281:	90                   	nop
c0013282:	66 90                	xchg   ax,ax

c0013284 <Process::createUserThread()>:
c0013284:	83 ec 0c             	sub    esp,0xc
c0013287:	68 80 00 00 00       	push   0x80
c001328c:	6a 00                	push   0x0
c001328e:	68 0c 2c 01 c0       	push   0xc0012c0c
c0013293:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013297:	50                   	push   eax
c0013298:	e8 ef fe ff ff       	call   c001318c <Process::createThread(void (*)(void*), void*, int)>
c001329d:	83 c4 1c             	add    esp,0x1c
c00132a0:	c3                   	ret    
c00132a1:	8d 76 00             	lea    esi,[esi+0x0]

c00132a4 <setupMultitasking(void (*)())>:
c00132a4:	56                   	push   esi
c00132a5:	53                   	push   ebx
c00132a6:	53                   	push   ebx
c00132a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00132ab:	eb 13                	jmp    c00132c0 <setupMultitasking(void (*)())+0x1c>
c00132ad:	8d 76 00             	lea    esi,[esi+0x0]
c00132b0:	83 ec 0c             	sub    esp,0xc
c00132b3:	68 c4 37 02 c0       	push   0xc00237c4
c00132b8:	e8 e7 8f 00 00       	call   c001c2a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00132bd:	83 c4 10             	add    esp,0x10
c00132c0:	83 ec 0c             	sub    esp,0xc
c00132c3:	68 c4 37 02 c0       	push   0xc00237c4
c00132c8:	e8 b3 8f 00 00       	call   c001c280 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00132cd:	83 c4 10             	add    esp,0x10
c00132d0:	84 c0                	test   al,al
c00132d2:	74 dc                	je     c00132b0 <setupMultitasking(void (*)())+0xc>
c00132d4:	83 ec 0c             	sub    esp,0xc
c00132d7:	68 20 07 00 00       	push   0x720
c00132dc:	e8 d8 44 ff ff       	call   c00077b9 <malloc>
c00132e1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00132e8:	89 c3                	mov    ebx,eax
c00132ea:	6a 00                	push   0x0
c00132ec:	68 a8 e5 01 c0       	push   0xc001e5a8
c00132f1:	6a 01                	push   0x1
c00132f3:	50                   	push   eax
c00132f4:	e8 7b fc ff ff       	call   c0012f74 <Process::Process(bool, char const*, Process*, char**)>
c00132f9:	83 c4 14             	add    esp,0x14
c00132fc:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013302:	89 1d d0 37 02 c0    	mov    DWORD PTR ds:0xc00237d0,ebx
c0013308:	50                   	push   eax
c0013309:	e8 e9 50 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c001330e:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013316:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013320:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013326:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013329:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013333:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013339:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001333f:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013349:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0013353:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001335d:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0013363:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013369:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0013373:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013379:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0013383:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013389:	5a                   	pop    edx
c001338a:	59                   	pop    ecx
c001338b:	68 a4 e5 01 c0       	push   0xc001e5a4
c0013390:	50                   	push   eax
c0013391:	e8 6a d2 fe ff       	call   c0000600 <strcpy>
c0013396:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001339d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00133a1:	83 c4 14             	add    esp,0x14
c00133a4:	5b                   	pop    ebx
c00133a5:	5e                   	pop    esi
c00133a6:	e9 be ce fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00133ab:	90                   	nop

c00133ac <schedule()>:
c00133ac:	8b 15 a4 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237a4
c00133b2:	85 d2                	test   edx,edx
c00133b4:	74 0e                	je     c00133c4 <schedule()+0x18>
c00133b6:	c7 05 a0 37 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00237a0,0x1
c00133c0:	c3                   	ret    
c00133c1:	8d 76 00             	lea    esi,[esi+0x0]
c00133c4:	53                   	push   ebx
c00133c5:	83 ec 14             	sub    esp,0x14
c00133c8:	68 c4 37 02 c0       	push   0xc00237c4
c00133cd:	e8 ae 8e 00 00       	call   c001c280 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00133d2:	83 c4 10             	add    esp,0x10
c00133d5:	84 c0                	test   al,al
c00133d7:	75 3b                	jne    c0013414 <schedule()+0x68>
c00133d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133de:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00133e1:	4a                   	dec    edx
c00133e2:	74 38                	je     c001341c <schedule()+0x70>
c00133e4:	83 ec 0c             	sub    esp,0xc
c00133e7:	68 c4 37 02 c0       	push   0xc00237c4
c00133ec:	e8 ab 8e 00 00       	call   c001c29c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00133f1:	c7 04 24 c4 37 02 c0 	mov    DWORD PTR [esp],0xc00237c4
c00133f8:	89 c3                	mov    ebx,eax
c00133fa:	e8 a5 8e 00 00       	call   c001c2a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00133ff:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013406:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013409:	e8 56 f8 ff ff       	call   c0012c64 <switchToThread(ThreadControlBlock*)>
c001340e:	83 c4 10             	add    esp,0x10
c0013411:	8d 76 00             	lea    esi,[esi+0x0]
c0013414:	83 c4 08             	add    esp,0x8
c0013417:	5b                   	pop    ebx
c0013418:	c3                   	ret    
c0013419:	8d 76 00             	lea    esi,[esi+0x0]
c001341c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013423:	83 ec 08             	sub    esp,0x8
c0013426:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001342b:	50                   	push   eax
c001342c:	68 c4 37 02 c0       	push   0xc00237c4
c0013431:	e8 26 8f 00 00       	call   c001c35c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013436:	83 c4 10             	add    esp,0x10
c0013439:	eb a9                	jmp    c00133e4 <schedule()+0x38>
c001343b:	90                   	nop

c001343c <Semaphore::tryAcquire()>:
c001343c:	53                   	push   ebx
c001343d:	83 ec 08             	sub    esp,0x8
c0013440:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013444:	fa                   	cli    
c0013445:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c001344a:	8d 50 01             	lea    edx,[eax+0x1]
c001344d:	89 15 a8 37 02 c0    	mov    DWORD PTR ds:0xc00237a8,edx
c0013453:	8b 15 a4 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237a4
c0013459:	8d 5a 01             	lea    ebx,[edx+0x1]
c001345c:	89 1d a4 37 02 c0    	mov    DWORD PTR ds:0xc00237a4,ebx
c0013462:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013465:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013467:	7c 33                	jl     c001349c <Semaphore::tryAcquire()+0x60>
c0013469:	89 15 a4 37 02 c0    	mov    DWORD PTR ds:0xc00237a4,edx
c001346f:	85 d2                	test   edx,edx
c0013471:	75 0d                	jne    c0013480 <Semaphore::tryAcquire()+0x44>
c0013473:	8b 15 a0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237a0
c0013479:	85 d2                	test   edx,edx
c001347b:	75 6b                	jne    c00134e8 <Semaphore::tryAcquire()+0xac>
c001347d:	8d 76 00             	lea    esi,[esi+0x0]
c0013480:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0013485:	85 c0                	test   eax,eax
c0013487:	74 0b                	je     c0013494 <Semaphore::tryAcquire()+0x58>
c0013489:	8d 76 00             	lea    esi,[esi+0x0]
c001348c:	31 c0                	xor    eax,eax
c001348e:	83 c4 08             	add    esp,0x8
c0013491:	5b                   	pop    ebx
c0013492:	c3                   	ret    
c0013493:	90                   	nop
c0013494:	fb                   	sti    
c0013495:	83 c4 08             	add    esp,0x8
c0013498:	5b                   	pop    ebx
c0013499:	c3                   	ret    
c001349a:	66 90                	xchg   ax,ax
c001349c:	43                   	inc    ebx
c001349d:	89 15 a4 37 02 c0    	mov    DWORD PTR ds:0xc00237a4,edx
c00134a3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00134a6:	85 d2                	test   edx,edx
c00134a8:	75 22                	jne    c00134cc <Semaphore::tryAcquire()+0x90>
c00134aa:	8b 0d a0 37 02 c0    	mov    ecx,DWORD PTR ds:0xc00237a0
c00134b0:	85 c9                	test   ecx,ecx
c00134b2:	74 18                	je     c00134cc <Semaphore::tryAcquire()+0x90>
c00134b4:	c7 05 a0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237a0,0x0
c00134be:	e8 e9 fe ff ff       	call   c00133ac <schedule()>
c00134c3:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c00134c8:	48                   	dec    eax
c00134c9:	8d 76 00             	lea    esi,[esi+0x0]
c00134cc:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c00134d1:	85 c0                	test   eax,eax
c00134d3:	75 0b                	jne    c00134e0 <Semaphore::tryAcquire()+0xa4>
c00134d5:	fb                   	sti    
c00134d6:	b0 01                	mov    al,0x1
c00134d8:	83 c4 08             	add    esp,0x8
c00134db:	5b                   	pop    ebx
c00134dc:	c3                   	ret    
c00134dd:	8d 76 00             	lea    esi,[esi+0x0]
c00134e0:	b0 01                	mov    al,0x1
c00134e2:	83 c4 08             	add    esp,0x8
c00134e5:	5b                   	pop    ebx
c00134e6:	c3                   	ret    
c00134e7:	90                   	nop
c00134e8:	c7 05 a0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237a0,0x0
c00134f2:	e8 b5 fe ff ff       	call   c00133ac <schedule()>
c00134f7:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c00134fc:	48                   	dec    eax
c00134fd:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0013502:	85 c0                	test   eax,eax
c0013504:	75 86                	jne    c001348c <Semaphore::tryAcquire()+0x50>
c0013506:	eb 8c                	jmp    c0013494 <Semaphore::tryAcquire()+0x58>

c0013508 <Semaphore::assertLocked(char const*)>:
c0013508:	83 ec 0c             	sub    esp,0xc
c001350b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001350f:	fa                   	cli    
c0013510:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c0013516:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c001351b:	8d 48 01             	lea    ecx,[eax+0x1]
c001351e:	89 0d a4 37 02 c0    	mov    DWORD PTR ds:0xc00237a4,ecx
c0013524:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013526:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013529:	7c 29                	jl     c0013554 <Semaphore::assertLocked(char const*)+0x4c>
c001352b:	90                   	nop
c001352c:	a3 a4 37 02 c0       	mov    ds:0xc00237a4,eax
c0013531:	85 c0                	test   eax,eax
c0013533:	75 0b                	jne    c0013540 <Semaphore::assertLocked(char const*)+0x38>
c0013535:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c001353a:	85 c0                	test   eax,eax
c001353c:	75 2e                	jne    c001356c <Semaphore::assertLocked(char const*)+0x64>
c001353e:	66 90                	xchg   ax,ax
c0013540:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0013545:	48                   	dec    eax
c0013546:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c001354b:	75 03                	jne    c0013550 <Semaphore::assertLocked(char const*)+0x48>
c001354d:	fb                   	sti    
c001354e:	66 90                	xchg   ax,ax
c0013550:	83 c4 0c             	add    esp,0xc
c0013553:	c3                   	ret    
c0013554:	83 ec 0c             	sub    esp,0xc
c0013557:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001355b:	52                   	push   edx
c001355c:	e8 fe cb ff ff       	call   c001015f <KePanic(char const*)>
c0013561:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c0013566:	83 c4 10             	add    esp,0x10
c0013569:	48                   	dec    eax
c001356a:	eb c0                	jmp    c001352c <Semaphore::assertLocked(char const*)+0x24>
c001356c:	c7 05 a0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237a0,0x0
c0013576:	e8 31 fe ff ff       	call   c00133ac <schedule()>
c001357b:	eb c3                	jmp    c0013540 <Semaphore::assertLocked(char const*)+0x38>
c001357d:	8d 76 00             	lea    esi,[esi+0x0]

c0013580 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013580:	83 ec 0c             	sub    esp,0xc
c0013583:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013588:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001358c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001358f:	e8 18 fe ff ff       	call   c00133ac <schedule()>
c0013594:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0013599:	48                   	dec    eax
c001359a:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c001359f:	75 03                	jne    c00135a4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00135a1:	fb                   	sti    
c00135a2:	66 90                	xchg   ax,ax
c00135a4:	83 c4 0c             	add    esp,0xc
c00135a7:	c3                   	ret    

c00135a8 <blockTask(TaskState)>:
c00135a8:	83 ec 0c             	sub    esp,0xc
c00135ab:	fa                   	cli    
c00135ac:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c00135b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135bb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00135be:	e8 e9 fd ff ff       	call   c00133ac <schedule()>
c00135c3:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c00135c8:	48                   	dec    eax
c00135c9:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c00135ce:	75 04                	jne    c00135d4 <blockTask(TaskState)+0x2c>
c00135d0:	fb                   	sti    
c00135d1:	8d 76 00             	lea    esi,[esi+0x0]
c00135d4:	83 c4 0c             	add    esp,0xc
c00135d7:	c3                   	ret    

c00135d8 <waitTask(int, int*, int)>:
c00135d8:	83 ec 18             	sub    esp,0x18
c00135db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00135e4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00135e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00135eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135f0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00135f3:	6a 07                	push   0x7
c00135f5:	e8 ae ff ff ff       	call   c00135a8 <blockTask(TaskState)>
c00135fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135ff:	83 c4 10             	add    esp,0x10
c0013602:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013605:	85 d2                	test   edx,edx
c0013607:	74 0b                	je     c0013614 <waitTask(int, int*, int)+0x3c>
c0013609:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001360c:	89 02                	mov    DWORD PTR [edx],eax
c001360e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013613:	90                   	nop
c0013614:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013617:	83 c4 0c             	add    esp,0xc
c001361a:	c3                   	ret    
c001361b:	90                   	nop

c001361c <milliTenthSleepUntil(unsigned int)>:
c001361c:	83 ec 0c             	sub    esp,0xc
c001361f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013623:	39 05 cc 2a 02 c0    	cmp    DWORD PTR ds:0xc0022acc,eax
c0013629:	76 05                	jbe    c0013630 <milliTenthSleepUntil(unsigned int)+0x14>
c001362b:	90                   	nop
c001362c:	83 c4 0c             	add    esp,0xc
c001362f:	c3                   	ret    
c0013630:	fa                   	cli    
c0013631:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c0013637:	83 ec 08             	sub    esp,0x8
c001363a:	ff 05 a4 37 02 c0    	inc    DWORD PTR ds:0xc00237a4
c0013640:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013646:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013649:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001364f:	52                   	push   edx
c0013650:	68 b8 37 02 c0       	push   0xc00237b8
c0013655:	e8 02 8d 00 00       	call   c001c35c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001365a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013661:	e8 42 ff ff ff       	call   c00135a8 <blockTask(TaskState)>
c0013666:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c001366b:	83 c4 10             	add    esp,0x10
c001366e:	48                   	dec    eax
c001366f:	a3 a4 37 02 c0       	mov    ds:0xc00237a4,eax
c0013674:	85 c0                	test   eax,eax
c0013676:	75 0c                	jne    c0013684 <milliTenthSleepUntil(unsigned int)+0x68>
c0013678:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c001367d:	85 c0                	test   eax,eax
c001367f:	75 17                	jne    c0013698 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013681:	8d 76 00             	lea    esi,[esi+0x0]
c0013684:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0013689:	48                   	dec    eax
c001368a:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c001368f:	75 9b                	jne    c001362c <milliTenthSleepUntil(unsigned int)+0x10>
c0013691:	fb                   	sti    
c0013692:	83 c4 0c             	add    esp,0xc
c0013695:	c3                   	ret    
c0013696:	66 90                	xchg   ax,ax
c0013698:	c7 05 a0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237a0,0x0
c00136a2:	e8 05 fd ff ff       	call   c00133ac <schedule()>
c00136a7:	eb db                	jmp    c0013684 <milliTenthSleepUntil(unsigned int)+0x68>
c00136a9:	8d 76 00             	lea    esi,[esi+0x0]

c00136ac <milliTenthSleep(unsigned int)>:
c00136ac:	a1 cc 2a 02 c0       	mov    eax,ds:0xc0022acc
c00136b1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00136b5:	e9 62 ff ff ff       	jmp    c001361c <milliTenthSleepUntil(unsigned int)>
c00136ba:	66 90                	xchg   ax,ax

c00136bc <sleep(unsigned int)>:
c00136bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00136c0:	8d 04 80             	lea    eax,[eax+eax*4]
c00136c3:	8d 04 80             	lea    eax,[eax+eax*4]
c00136c6:	8d 04 80             	lea    eax,[eax+eax*4]
c00136c9:	8d 04 80             	lea    eax,[eax+eax*4]
c00136cc:	c1 e0 04             	shl    eax,0x4
c00136cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00136d3:	eb d7                	jmp    c00136ac <milliTenthSleep(unsigned int)>
c00136d5:	90                   	nop
c00136d6:	66 90                	xchg   ax,ax

c00136d8 <Semaphore::acquire()>:
c00136d8:	83 ec 0c             	sub    esp,0xc
c00136db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136df:	fa                   	cli    
c00136e0:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c00136e5:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c00136eb:	8d 48 01             	lea    ecx,[eax+0x1]
c00136ee:	89 0d a4 37 02 c0    	mov    DWORD PTR ds:0xc00237a4,ecx
c00136f4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00136f7:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00136f9:	7d 2d                	jge    c0013728 <Semaphore::acquire()+0x50>
c00136fb:	41                   	inc    ecx
c00136fc:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00136ff:	90                   	nop
c0013700:	a3 a4 37 02 c0       	mov    ds:0xc00237a4,eax
c0013705:	85 c0                	test   eax,eax
c0013707:	75 0b                	jne    c0013714 <Semaphore::acquire()+0x3c>
c0013709:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c001370e:	85 c0                	test   eax,eax
c0013710:	75 62                	jne    c0013774 <Semaphore::acquire()+0x9c>
c0013712:	66 90                	xchg   ax,ax
c0013714:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0013719:	48                   	dec    eax
c001371a:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c001371f:	75 03                	jne    c0013724 <Semaphore::acquire()+0x4c>
c0013721:	fb                   	sti    
c0013722:	66 90                	xchg   ax,ax
c0013724:	83 c4 0c             	add    esp,0xc
c0013727:	c3                   	ret    
c0013728:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001372d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013734:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013737:	85 c9                	test   ecx,ecx
c0013739:	74 4d                	je     c0013788 <Semaphore::acquire()+0xb0>
c001373b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001373e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013744:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013747:	90                   	nop
c0013748:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001374d:	83 ec 0c             	sub    esp,0xc
c0013750:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013753:	68 24 e6 01 c0       	push   0xc001e624
c0013758:	e8 83 6d ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001375d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013764:	e8 3f fe ff ff       	call   c00135a8 <blockTask(TaskState)>
c0013769:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c001376e:	83 c4 10             	add    esp,0x10
c0013771:	48                   	dec    eax
c0013772:	eb 8c                	jmp    c0013700 <Semaphore::acquire()+0x28>
c0013774:	c7 05 a0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237a0,0x0
c001377e:	e8 29 fc ff ff       	call   c00133ac <schedule()>
c0013783:	eb 8f                	jmp    c0013714 <Semaphore::acquire()+0x3c>
c0013785:	8d 76 00             	lea    esi,[esi+0x0]
c0013788:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001378d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013790:	eb b6                	jmp    c0013748 <Semaphore::acquire()+0x70>
c0013792:	66 90                	xchg   ax,ax

c0013794 <taskReturned>:
c0013794:	83 ec 18             	sub    esp,0x18
c0013797:	68 44 e6 01 c0       	push   0xc001e644
c001379c:	e8 be c9 ff ff       	call   c001015f <KePanic(char const*)>
c00137a1:	83 c4 10             	add    esp,0x10
c00137a4:	83 ec 0c             	sub    esp,0xc
c00137a7:	6a 02                	push   0x2
c00137a9:	e8 fa fd ff ff       	call   c00135a8 <blockTask(TaskState)>
c00137ae:	fa                   	cli    
c00137af:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c00137b5:	e8 f2 fb ff ff       	call   c00133ac <schedule()>
c00137ba:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c00137bf:	83 c4 10             	add    esp,0x10
c00137c2:	48                   	dec    eax
c00137c3:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c00137c8:	85 c0                	test   eax,eax
c00137ca:	75 d8                	jne    c00137a4 <taskReturned+0x10>
c00137cc:	fb                   	sti    
c00137cd:	eb d5                	jmp    c00137a4 <taskReturned+0x10>
c00137cf:	90                   	nop

c00137d0 <Thr::processFromPID(int)>:
c00137d0:	57                   	push   edi
c00137d1:	56                   	push   esi
c00137d2:	53                   	push   ebx
c00137d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137d7:	fa                   	cli    
c00137d8:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c00137de:	83 ec 0c             	sub    esp,0xc
c00137e1:	68 c4 37 02 c0       	push   0xc00237c4
c00137e6:	e8 b1 8a 00 00       	call   c001c29c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137eb:	83 c4 10             	add    esp,0x10
c00137ee:	89 c7                	mov    edi,eax
c00137f0:	eb 16                	jmp    c0013808 <Thr::processFromPID(int)+0x38>
c00137f2:	66 90                	xchg   ax,ax
c00137f4:	83 ec 0c             	sub    esp,0xc
c00137f7:	68 c4 37 02 c0       	push   0xc00237c4
c00137fc:	e8 9b 8a 00 00       	call   c001c29c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013801:	83 c4 10             	add    esp,0x10
c0013804:	39 f8                	cmp    eax,edi
c0013806:	74 4c                	je     c0013854 <Thr::processFromPID(int)+0x84>
c0013808:	83 ec 0c             	sub    esp,0xc
c001380b:	68 c4 37 02 c0       	push   0xc00237c4
c0013810:	e8 87 8a 00 00       	call   c001c29c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013815:	c7 04 24 c4 37 02 c0 	mov    DWORD PTR [esp],0xc00237c4
c001381c:	89 c3                	mov    ebx,eax
c001381e:	e8 81 8a 00 00       	call   c001c2a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013823:	58                   	pop    eax
c0013824:	5a                   	pop    edx
c0013825:	53                   	push   ebx
c0013826:	68 c4 37 02 c0       	push   0xc00237c4
c001382b:	e8 2c 8b 00 00       	call   c001c35c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013830:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013833:	83 c4 10             	add    esp,0x10
c0013836:	39 30                	cmp    DWORD PTR [eax],esi
c0013838:	75 ba                	jne    c00137f4 <Thr::processFromPID(int)+0x24>
c001383a:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c001383f:	48                   	dec    eax
c0013840:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0013845:	74 09                	je     c0013850 <Thr::processFromPID(int)+0x80>
c0013847:	90                   	nop
c0013848:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001384b:	5b                   	pop    ebx
c001384c:	5e                   	pop    esi
c001384d:	5f                   	pop    edi
c001384e:	c3                   	ret    
c001384f:	90                   	nop
c0013850:	fb                   	sti    
c0013851:	eb f5                	jmp    c0013848 <Thr::processFromPID(int)+0x78>
c0013853:	90                   	nop
c0013854:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0013859:	48                   	dec    eax
c001385a:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c001385f:	75 07                	jne    c0013868 <Thr::processFromPID(int)+0x98>
c0013861:	fb                   	sti    
c0013862:	5b                   	pop    ebx
c0013863:	5e                   	pop    esi
c0013864:	5f                   	pop    edi
c0013865:	c3                   	ret    
c0013866:	66 90                	xchg   ax,ax
c0013868:	5b                   	pop    ebx
c0013869:	31 c0                	xor    eax,eax
c001386b:	5e                   	pop    esi
c001386c:	5f                   	pop    edi
c001386d:	c3                   	ret    
c001386e:	66 90                	xchg   ax,ax

c0013870 <unblockTask(ThreadControlBlock*)>:
c0013870:	53                   	push   ebx
c0013871:	83 ec 08             	sub    esp,0x8
c0013874:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013878:	fa                   	cli    
c0013879:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c001387f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013882:	85 c0                	test   eax,eax
c0013884:	74 66                	je     c00138ec <unblockTask(ThreadControlBlock*)+0x7c>
c0013886:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013889:	48                   	dec    eax
c001388a:	74 38                	je     c00138c4 <unblockTask(ThreadControlBlock*)+0x54>
c001388c:	83 ec 0c             	sub    esp,0xc
c001388f:	68 c4 37 02 c0       	push   0xc00237c4
c0013894:	e8 03 8a 00 00       	call   c001c29c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013899:	83 c4 10             	add    esp,0x10
c001389c:	85 c0                	test   eax,eax
c001389e:	75 1c                	jne    c00138bc <unblockTask(ThreadControlBlock*)+0x4c>
c00138a0:	eb 5e                	jmp    c0013900 <unblockTask(ThreadControlBlock*)+0x90>
c00138a2:	66 90                	xchg   ax,ax
c00138a4:	83 ec 08             	sub    esp,0x8
c00138a7:	50                   	push   eax
c00138a8:	68 c4 37 02 c0       	push   0xc00237c4
c00138ad:	e8 9a 8d 00 00       	call   c001c64c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00138b2:	83 c4 10             	add    esp,0x10
c00138b5:	85 c0                	test   eax,eax
c00138b7:	74 47                	je     c0013900 <unblockTask(ThreadControlBlock*)+0x90>
c00138b9:	8d 76 00             	lea    esi,[esi+0x0]
c00138bc:	39 c3                	cmp    ebx,eax
c00138be:	75 e4                	jne    c00138a4 <unblockTask(ThreadControlBlock*)+0x34>
c00138c0:	eb 12                	jmp    c00138d4 <unblockTask(ThreadControlBlock*)+0x64>
c00138c2:	66 90                	xchg   ax,ax
c00138c4:	83 ec 0c             	sub    esp,0xc
c00138c7:	68 c6 e5 01 c0       	push   0xc001e5c6
c00138cc:	e8 0f 6c ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c00138d1:	83 c4 10             	add    esp,0x10
c00138d4:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c00138d9:	48                   	dec    eax
c00138da:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c00138df:	75 03                	jne    c00138e4 <unblockTask(ThreadControlBlock*)+0x74>
c00138e1:	fb                   	sti    
c00138e2:	66 90                	xchg   ax,ax
c00138e4:	83 c4 08             	add    esp,0x8
c00138e7:	5b                   	pop    ebx
c00138e8:	c3                   	ret    
c00138e9:	8d 76 00             	lea    esi,[esi+0x0]
c00138ec:	83 ec 0c             	sub    esp,0xc
c00138ef:	68 af e5 01 c0       	push   0xc001e5af
c00138f4:	e8 e7 6b ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c00138f9:	83 c4 10             	add    esp,0x10
c00138fc:	eb d6                	jmp    c00138d4 <unblockTask(ThreadControlBlock*)+0x64>
c00138fe:	66 90                	xchg   ax,ax
c0013900:	83 ec 08             	sub    esp,0x8
c0013903:	53                   	push   ebx
c0013904:	68 c4 37 02 c0       	push   0xc00237c4
c0013909:	e8 4e 8a 00 00       	call   c001c35c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001390e:	83 c4 10             	add    esp,0x10
c0013911:	eb c1                	jmp    c00138d4 <unblockTask(ThreadControlBlock*)+0x64>
c0013913:	90                   	nop

c0013914 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013914:	55                   	push   ebp
c0013915:	57                   	push   edi
c0013916:	56                   	push   esi
c0013917:	53                   	push   ebx
c0013918:	83 ec 1c             	sub    esp,0x1c
c001391b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001391f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013922:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013928:	85 ed                	test   ebp,ebp
c001392a:	7e 24                	jle    c0013950 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c001392c:	31 f6                	xor    esi,esi
c001392e:	66 90                	xchg   ax,ax
c0013930:	83 ec 0c             	sub    esp,0xc
c0013933:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001393a:	46                   	inc    esi
c001393b:	57                   	push   edi
c001393c:	e8 88 3e ff ff       	call   c00077c9 <free>
c0013941:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013944:	83 c4 10             	add    esp,0x10
c0013947:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001394d:	7f e1                	jg     c0013930 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001394f:	90                   	nop
c0013950:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001395a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001395f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013962:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013965:	d3 c0                	rol    eax,cl
c0013967:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001396e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013971:	89 f7                	mov    edi,esi
c0013973:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001397b:	0f 85 77 01 00 00    	jne    c0013af8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013981:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013987:	85 ed                	test   ebp,ebp
c0013989:	74 1d                	je     c00139a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001398b:	83 ec 0c             	sub    esp,0xc
c001398e:	55                   	push   ebp
c001398f:	e8 dc c4 ff ff       	call   c000fe70 <EnvVarContainer::~EnvVarContainer()>
c0013994:	59                   	pop    ecx
c0013995:	5e                   	pop    esi
c0013996:	6a 0c                	push   0xc
c0013998:	55                   	push   ebp
c0013999:	e8 4c 6a ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001399e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00139a1:	83 c4 10             	add    esp,0x10
c00139a4:	89 f7                	mov    edi,esi
c00139a6:	66 90                	xchg   ax,ax
c00139a8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00139ae:	85 c0                	test   eax,eax
c00139b0:	0f 84 b6 00 00 00    	je     c0013a6c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c00139b6:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00139b9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00139bd:	31 c9                	xor    ecx,ecx
c00139bf:	eb 17                	jmp    c00139d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00139c1:	8d 76 00             	lea    esi,[esi+0x0]
c00139c4:	41                   	inc    ecx
c00139c5:	83 f9 10             	cmp    ecx,0x10
c00139c8:	0f 84 9e 00 00 00    	je     c0013a6c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c00139ce:	66 90                	xchg   ax,ax
c00139d0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00139d6:	66 90                	xchg   ax,ax
c00139d8:	31 d2                	xor    edx,edx
c00139da:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c00139e1:	d3 fa                	sar    edx,cl
c00139e3:	83 e2 01             	and    edx,0x1
c00139e6:	74 dc                	je     c00139c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00139e8:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00139eb:	01 d2                	add    edx,edx
c00139ed:	01 ca                	add    edx,ecx
c00139ef:	8d 14 92             	lea    edx,[edx+edx*4]
c00139f2:	01 d0                	add    eax,edx
c00139f4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00139fa:	83 fd 07             	cmp    ebp,0x7
c00139fd:	75 c5                	jne    c00139c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00139ff:	05 40 02 00 00       	add    eax,0x240
c0013a04:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013a07:	83 fd ff             	cmp    ebp,0xffffffff
c0013a0a:	0f 8c f0 00 00 00    	jl     c0013b00 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013a10:	0f 84 ae 01 00 00    	je     c0013bc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013a16:	85 ed                	test   ebp,ebp
c0013a18:	0f 84 92 01 00 00    	je     c0013bb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013a1e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013a20:	75 a2                	jne    c00139c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013a22:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013a28:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013a2c:	01 d0                	add    eax,edx
c0013a2e:	66 90                	xchg   ax,ax
c0013a30:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013a34:	83 ec 0c             	sub    esp,0xc
c0013a37:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013a3d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a40:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013a46:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013a4d:	50                   	push   eax
c0013a4e:	e8 1d fe ff ff       	call   c0013870 <unblockTask(ThreadControlBlock*)>
c0013a53:	83 c4 10             	add    esp,0x10
c0013a56:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013a59:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a5d:	89 f7                	mov    edi,esi
c0013a5f:	41                   	inc    ecx
c0013a60:	83 f9 10             	cmp    ecx,0x10
c0013a63:	0f 85 67 ff ff ff    	jne    c00139d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013a69:	8d 76 00             	lea    esi,[esi+0x0]
c0013a6c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013a72:	85 c0                	test   eax,eax
c0013a74:	74 62                	je     c0013ad8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013a76:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013a7c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013a82:	74 54                	je     c0013ad8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013a84:	83 ec 0c             	sub    esp,0xc
c0013a87:	68 c4 37 02 c0       	push   0xc00237c4
c0013a8c:	e8 0b 88 00 00       	call   c001c29c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a91:	c7 04 24 c4 37 02 c0 	mov    DWORD PTR [esp],0xc00237c4
c0013a98:	89 c7                	mov    edi,eax
c0013a9a:	e8 e1 87 00 00       	call   c001c280 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013a9f:	83 c4 10             	add    esp,0x10
c0013aa2:	84 c0                	test   al,al
c0013aa4:	0f 84 ce 00 00 00    	je     c0013b78 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013aaa:	66 90                	xchg   ax,ax
c0013aac:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013aaf:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013ab5:	85 d2                	test   edx,edx
c0013ab7:	74 0f                	je     c0013ac8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013ab9:	83 ec 0c             	sub    esp,0xc
c0013abc:	8b 02                	mov    eax,DWORD PTR [edx]
c0013abe:	52                   	push   edx
c0013abf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ac2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ac5:	83 c4 10             	add    esp,0x10
c0013ac8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013ad2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ad8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013ade:	85 db                	test   ebx,ebx
c0013ae0:	74 16                	je     c0013af8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013ae2:	83 ec 0c             	sub    esp,0xc
c0013ae5:	53                   	push   ebx
c0013ae6:	e8 d3 5c ff ff       	call   c00097be <VAS::~VAS()>
c0013aeb:	58                   	pop    eax
c0013aec:	5a                   	pop    edx
c0013aed:	6a 14                	push   0x14
c0013aef:	53                   	push   ebx
c0013af0:	e8 f5 68 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c0013af5:	83 c4 10             	add    esp,0x10
c0013af8:	83 c4 1c             	add    esp,0x1c
c0013afb:	5b                   	pop    ebx
c0013afc:	5e                   	pop    esi
c0013afd:	5f                   	pop    edi
c0013afe:	5d                   	pop    ebp
c0013aff:	c3                   	ret    
c0013b00:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b04:	83 ec 0c             	sub    esp,0xc
c0013b07:	68 78 e6 01 c0       	push   0xc001e678
c0013b0c:	e8 4e c6 ff ff       	call   c001015f <KePanic(char const*)>
c0013b11:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013b14:	83 c4 10             	add    esp,0x10
c0013b17:	89 f7                	mov    edi,esi
c0013b19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013b1d:	e9 a2 fe ff ff       	jmp    c00139c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013b22:	66 90                	xchg   ax,ax
c0013b24:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013b2a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013b30:	75 1e                	jne    c0013b50 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013b32:	83 ec 0c             	sub    esp,0xc
c0013b35:	68 e0 e6 01 c0       	push   0xc001e6e0
c0013b3a:	e8 a1 69 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0013b3f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013b46:	e8 5d fa ff ff       	call   c00135a8 <blockTask(TaskState)>
c0013b4b:	83 c4 10             	add    esp,0x10
c0013b4e:	66 90                	xchg   ax,ax
c0013b50:	83 ec 08             	sub    esp,0x8
c0013b53:	56                   	push   esi
c0013b54:	68 c4 37 02 c0       	push   0xc00237c4
c0013b59:	e8 fe 87 00 00       	call   c001c35c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013b5e:	c7 04 24 c4 37 02 c0 	mov    DWORD PTR [esp],0xc00237c4
c0013b65:	e8 32 87 00 00       	call   c001c29c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b6a:	83 c4 10             	add    esp,0x10
c0013b6d:	39 f8                	cmp    eax,edi
c0013b6f:	0f 84 37 ff ff ff    	je     c0013aac <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013b75:	8d 76 00             	lea    esi,[esi+0x0]
c0013b78:	83 ec 0c             	sub    esp,0xc
c0013b7b:	68 c4 37 02 c0       	push   0xc00237c4
c0013b80:	e8 17 87 00 00       	call   c001c29c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b85:	c7 04 24 c4 37 02 c0 	mov    DWORD PTR [esp],0xc00237c4
c0013b8c:	89 c6                	mov    esi,eax
c0013b8e:	e8 11 87 00 00       	call   c001c2a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013b93:	83 c4 10             	add    esp,0x10
c0013b96:	39 f3                	cmp    ebx,esi
c0013b98:	74 b6                	je     c0013b50 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013b9a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013b9d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ba0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013ba6:	75 a8                	jne    c0013b50 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013ba8:	e9 77 ff ff ff       	jmp    c0013b24 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013bad:	8d 76 00             	lea    esi,[esi+0x0]
c0013bb0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013bb4:	83 ec 0c             	sub    esp,0xc
c0013bb7:	68 ac e6 01 c0       	push   0xc001e6ac
c0013bbc:	e9 4b ff ff ff       	jmp    c0013b0c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013bc1:	8d 76 00             	lea    esi,[esi+0x0]
c0013bc4:	8b 36                	mov    esi,DWORD PTR [esi]
c0013bc6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013bca:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013bcd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013bd0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013bd6:	01 d7                	add    edi,edx
c0013bd8:	89 f8                	mov    eax,edi
c0013bda:	e9 51 fe ff ff       	jmp    c0013a30 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013bdf:	90                   	nop

c0013be0 <cleanerTaskFunction(void*)>:
c0013be0:	53                   	push   ebx
c0013be1:	83 ec 08             	sub    esp,0x8
c0013be4:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0013be9:	48                   	dec    eax
c0013bea:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0013bef:	75 03                	jne    c0013bf4 <cleanerTaskFunction(void*)+0x14>
c0013bf1:	fb                   	sti    
c0013bf2:	66 90                	xchg   ax,ax
c0013bf4:	fa                   	cli    
c0013bf5:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0013bfa:	80 3d 8c 37 02 c0 00 	cmp    BYTE PTR ds:0xc002378c,0x0
c0013c01:	8d 50 01             	lea    edx,[eax+0x1]
c0013c04:	89 15 a8 37 02 c0    	mov    DWORD PTR ds:0xc00237a8,edx
c0013c0a:	0f 84 ac 00 00 00    	je     c0013cbc <cleanerTaskFunction(void*)+0xdc>
c0013c10:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0013c15:	85 c0                	test   eax,eax
c0013c17:	75 03                	jne    c0013c1c <cleanerTaskFunction(void*)+0x3c>
c0013c19:	fb                   	sti    
c0013c1a:	66 90                	xchg   ax,ax
c0013c1c:	c6 05 8c 37 02 c0 00 	mov    BYTE PTR ds:0xc002378c,0x0
c0013c23:	fa                   	cli    
c0013c24:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c0013c2a:	ff 05 a4 37 02 c0    	inc    DWORD PTR ds:0xc00237a4
c0013c30:	fa                   	cli    
c0013c31:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c0013c37:	eb 2b                	jmp    c0013c64 <cleanerTaskFunction(void*)+0x84>
c0013c39:	8d 76 00             	lea    esi,[esi+0x0]
c0013c3c:	83 ec 0c             	sub    esp,0xc
c0013c3f:	68 ac 37 02 c0       	push   0xc00237ac
c0013c44:	e8 53 86 00 00       	call   c001c29c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c49:	c7 04 24 ac 37 02 c0 	mov    DWORD PTR [esp],0xc00237ac
c0013c50:	89 c3                	mov    ebx,eax
c0013c52:	e8 4d 86 00 00       	call   c001c2a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013c57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c5a:	e8 b5 fc ff ff       	call   c0013914 <cleanupTerminatedTask(ThreadControlBlock*)>
c0013c5f:	83 c4 10             	add    esp,0x10
c0013c62:	66 90                	xchg   ax,ax
c0013c64:	83 ec 0c             	sub    esp,0xc
c0013c67:	68 ac 37 02 c0       	push   0xc00237ac
c0013c6c:	e8 0f 86 00 00       	call   c001c280 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013c71:	83 c4 10             	add    esp,0x10
c0013c74:	84 c0                	test   al,al
c0013c76:	74 c4                	je     c0013c3c <cleanerTaskFunction(void*)+0x5c>
c0013c78:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0013c7d:	48                   	dec    eax
c0013c7e:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0013c83:	75 03                	jne    c0013c88 <cleanerTaskFunction(void*)+0xa8>
c0013c85:	fb                   	sti    
c0013c86:	66 90                	xchg   ax,ax
c0013c88:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c0013c8d:	48                   	dec    eax
c0013c8e:	a3 a4 37 02 c0       	mov    ds:0xc00237a4,eax
c0013c93:	0f 85 4b ff ff ff    	jne    c0013be4 <cleanerTaskFunction(void*)+0x4>
c0013c99:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c0013c9e:	85 c0                	test   eax,eax
c0013ca0:	0f 84 3e ff ff ff    	je     c0013be4 <cleanerTaskFunction(void*)+0x4>
c0013ca6:	c7 05 a0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237a0,0x0
c0013cb0:	e8 f7 f6 ff ff       	call   c00133ac <schedule()>
c0013cb5:	e9 2a ff ff ff       	jmp    c0013be4 <cleanerTaskFunction(void*)+0x4>
c0013cba:	66 90                	xchg   ax,ax
c0013cbc:	83 ec 0c             	sub    esp,0xc
c0013cbf:	6a 02                	push   0x2
c0013cc1:	e8 ba f8 ff ff       	call   c0013580 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013cc6:	83 c4 10             	add    esp,0x10
c0013cc9:	e9 4e ff ff ff       	jmp    c0013c1c <cleanerTaskFunction(void*)+0x3c>
c0013cce:	66 90                	xchg   ax,ax

c0013cd0 <terminateTask(int)>:
c0013cd0:	83 ec 14             	sub    esp,0x14
c0013cd3:	fa                   	cli    
c0013cd4:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c0013cda:	ff 05 a4 37 02 c0    	inc    DWORD PTR ds:0xc00237a4
c0013ce0:	fa                   	cli    
c0013ce1:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c0013ce7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ceb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cf0:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0013cf3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cf8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0013cfb:	50                   	push   eax
c0013cfc:	68 ac 37 02 c0       	push   0xc00237ac
c0013d01:	e8 56 86 00 00       	call   c001c35c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d0b:	83 c4 10             	add    esp,0x10
c0013d0e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0013d15:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013d1a:	85 c0                	test   eax,eax
c0013d1c:	74 5e                	je     c0013d7c <terminateTask(int)+0xac>
c0013d1e:	83 ec 0c             	sub    esp,0xc
c0013d21:	c6 05 8c 37 02 c0 01 	mov    BYTE PTR ds:0xc002378c,0x1
c0013d28:	50                   	push   eax
c0013d29:	e8 42 fb ff ff       	call   c0013870 <unblockTask(ThreadControlBlock*)>
c0013d2e:	83 c4 10             	add    esp,0x10
c0013d31:	8d 76 00             	lea    esi,[esi+0x0]
c0013d34:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0013d39:	48                   	dec    eax
c0013d3a:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0013d3f:	75 03                	jne    c0013d44 <terminateTask(int)+0x74>
c0013d41:	fb                   	sti    
c0013d42:	66 90                	xchg   ax,ax
c0013d44:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c0013d49:	48                   	dec    eax
c0013d4a:	a3 a4 37 02 c0       	mov    ds:0xc00237a4,eax
c0013d4f:	75 0b                	jne    c0013d5c <terminateTask(int)+0x8c>
c0013d51:	83 3d a0 37 02 c0 00 	cmp    DWORD PTR ds:0xc00237a0,0x0
c0013d58:	75 36                	jne    c0013d90 <terminateTask(int)+0xc0>
c0013d5a:	66 90                	xchg   ax,ax
c0013d5c:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0013d61:	48                   	dec    eax
c0013d62:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0013d67:	75 03                	jne    c0013d6c <terminateTask(int)+0x9c>
c0013d69:	fb                   	sti    
c0013d6a:	66 90                	xchg   ax,ax
c0013d6c:	fa                   	cli    
c0013d6d:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c0013d73:	90                   	nop
c0013d74:	e8 33 f6 ff ff       	call   c00133ac <schedule()>
c0013d79:	eb e1                	jmp    c0013d5c <terminateTask(int)+0x8c>
c0013d7b:	90                   	nop
c0013d7c:	83 ec 0c             	sub    esp,0xc
c0013d7f:	68 dd e5 01 c0       	push   0xc001e5dd
c0013d84:	e8 57 67 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0013d89:	83 c4 10             	add    esp,0x10
c0013d8c:	eb a6                	jmp    c0013d34 <terminateTask(int)+0x64>
c0013d8e:	66 90                	xchg   ax,ax
c0013d90:	c7 05 a0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237a0,0x0
c0013d9a:	eb d8                	jmp    c0013d74 <terminateTask(int)+0xa4>

c0013d9c <Thr::terminateFromIRQ(int)>:
c0013d9c:	83 ec 18             	sub    esp,0x18
c0013d9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013da3:	50                   	push   eax
c0013da4:	e8 27 ff ff ff       	call   c0013cd0 <terminateTask(int)>
c0013da9:	90                   	nop
c0013daa:	66 90                	xchg   ax,ax

c0013dac <Semaphore::release()>:
c0013dac:	83 ec 0c             	sub    esp,0xc
c0013daf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013db3:	fa                   	cli    
c0013db4:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c0013db9:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c0013dbf:	8d 48 01             	lea    ecx,[eax+0x1]
c0013dc2:	89 0d a4 37 02 c0    	mov    DWORD PTR ds:0xc00237a4,ecx
c0013dc8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013dcb:	85 c9                	test   ecx,ecx
c0013dcd:	74 41                	je     c0013e10 <Semaphore::release()+0x64>
c0013dcf:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013dd2:	83 ec 0c             	sub    esp,0xc
c0013dd5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013dd8:	51                   	push   ecx
c0013dd9:	e8 92 fa ff ff       	call   c0013870 <unblockTask(ThreadControlBlock*)>
c0013dde:	a1 a4 37 02 c0       	mov    eax,ds:0xc00237a4
c0013de3:	83 c4 10             	add    esp,0x10
c0013de6:	48                   	dec    eax
c0013de7:	90                   	nop
c0013de8:	a3 a4 37 02 c0       	mov    ds:0xc00237a4,eax
c0013ded:	85 c0                	test   eax,eax
c0013def:	75 0b                	jne    c0013dfc <Semaphore::release()+0x50>
c0013df1:	a1 a0 37 02 c0       	mov    eax,ds:0xc00237a0
c0013df6:	85 c0                	test   eax,eax
c0013df8:	75 1e                	jne    c0013e18 <Semaphore::release()+0x6c>
c0013dfa:	66 90                	xchg   ax,ax
c0013dfc:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0013e01:	48                   	dec    eax
c0013e02:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0013e07:	75 03                	jne    c0013e0c <Semaphore::release()+0x60>
c0013e09:	fb                   	sti    
c0013e0a:	66 90                	xchg   ax,ax
c0013e0c:	83 c4 0c             	add    esp,0xc
c0013e0f:	c3                   	ret    
c0013e10:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0013e13:	eb d3                	jmp    c0013de8 <Semaphore::release()+0x3c>
c0013e15:	8d 76 00             	lea    esi,[esi+0x0]
c0013e18:	c7 05 a0 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237a0,0x0
c0013e22:	e8 85 f5 ff ff       	call   c00133ac <schedule()>
c0013e27:	eb d3                	jmp    c0013dfc <Semaphore::release()+0x50>
c0013e29:	8d 76 00             	lea    esi,[esi+0x0]

c0013e2c <__static_initialization_and_destruction_0(int, int)>:
c0013e2c:	83 ec 0c             	sub    esp,0xc
c0013e2f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013e34:	0f 85 8e 00 00 00    	jne    c0013ec8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013e3a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013e42:	0f 85 80 00 00 00    	jne    c0013ec8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013e48:	83 ec 0c             	sub    esp,0xc
c0013e4b:	68 c4 37 02 c0       	push   0xc00237c4
c0013e50:	e8 b3 87 00 00       	call   c001c608 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013e55:	83 c4 10             	add    esp,0x10
c0013e58:	83 ec 04             	sub    esp,0x4
c0013e5b:	68 90 f1 01 c0       	push   0xc001f190
c0013e60:	68 c4 37 02 c0       	push   0xc00237c4
c0013e65:	68 b8 c5 01 c0       	push   0xc001c5b8
c0013e6a:	e8 2b 65 ff ff       	call   c000a39a <__cxa_atexit>
c0013e6f:	83 c4 10             	add    esp,0x10
c0013e72:	83 ec 0c             	sub    esp,0xc
c0013e75:	68 b8 37 02 c0       	push   0xc00237b8
c0013e7a:	e8 89 87 00 00       	call   c001c608 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013e7f:	83 c4 10             	add    esp,0x10
c0013e82:	83 ec 04             	sub    esp,0x4
c0013e85:	68 90 f1 01 c0       	push   0xc001f190
c0013e8a:	68 b8 37 02 c0       	push   0xc00237b8
c0013e8f:	68 b8 c5 01 c0       	push   0xc001c5b8
c0013e94:	e8 01 65 ff ff       	call   c000a39a <__cxa_atexit>
c0013e99:	83 c4 10             	add    esp,0x10
c0013e9c:	83 ec 0c             	sub    esp,0xc
c0013e9f:	68 ac 37 02 c0       	push   0xc00237ac
c0013ea4:	e8 5f 87 00 00       	call   c001c608 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013ea9:	83 c4 10             	add    esp,0x10
c0013eac:	83 ec 04             	sub    esp,0x4
c0013eaf:	68 90 f1 01 c0       	push   0xc001f190
c0013eb4:	68 ac 37 02 c0       	push   0xc00237ac
c0013eb9:	68 b8 c5 01 c0       	push   0xc001c5b8
c0013ebe:	e8 d7 64 ff ff       	call   c000a39a <__cxa_atexit>
c0013ec3:	83 c4 10             	add    esp,0x10
c0013ec6:	66 90                	xchg   ax,ax
c0013ec8:	90                   	nop
c0013ec9:	83 c4 0c             	add    esp,0xc
c0013ecc:	c3                   	ret    
c0013ecd:	8d 76 00             	lea    esi,[esi+0x0]

c0013ed0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0013ed0:	83 ec 0c             	sub    esp,0xc
c0013ed3:	83 ec 08             	sub    esp,0x8
c0013ed6:	68 ff ff 00 00       	push   0xffff
c0013edb:	6a 01                	push   0x1
c0013edd:	e8 4a ff ff ff       	call   c0013e2c <__static_initialization_and_destruction_0(int, int)>
c0013ee2:	83 c4 10             	add    esp,0x10
c0013ee5:	83 c4 0c             	add    esp,0xc
c0013ee8:	c3                   	ret    

c0013ee9 <Vm::inbv(unsigned short)>:
c0013ee9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013eed:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013ef2:	75 06                	jne    c0013efa <Vm::inbv(unsigned short)+0x11>
c0013ef4:	a0 0c 38 02 c0       	mov    al,ds:0xc002380c
c0013ef9:	c3                   	ret    
c0013efa:	ec                   	in     al,dx
c0013efb:	c3                   	ret    

c0013efc <Vm::outbv(unsigned short, unsigned char)>:
c0013efc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013f00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013f04:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013f09:	75 25                	jne    c0013f30 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0013f0b:	8b 0d 0c 38 02 c0    	mov    ecx,DWORD PTR ds:0xc002380c
c0013f11:	8d 51 01             	lea    edx,[ecx+0x1]
c0013f14:	88 81 20 38 02 c0    	mov    BYTE PTR [ecx-0x3ffdc7e0],al
c0013f1a:	89 15 0c 38 02 c0    	mov    DWORD PTR ds:0xc002380c,edx
c0013f20:	83 fa 20             	cmp    edx,0x20
c0013f23:	75 0c                	jne    c0013f31 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0013f25:	c7 05 0c 38 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002380c,0x1f
c0013f2f:	c3                   	ret    
c0013f30:	ee                   	out    dx,al
c0013f31:	c3                   	ret    

c0013f32 <Vm::realToLinear(unsigned short, unsigned short)>:
c0013f32:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013f37:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013f3c:	c1 e0 04             	shl    eax,0x4
c0013f3f:	01 d0                	add    eax,edx
c0013f41:	c3                   	ret    

c0013f42 <Vm::getSegment(unsigned int)>:
c0013f42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f46:	c1 e8 10             	shr    eax,0x10
c0013f49:	c3                   	ret    

c0013f4a <Vm::getOffset(unsigned int)>:
c0013f4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f4e:	c3                   	ret    

c0013f4f <Vm::mainloop2()>:
c0013f4f:	83 ec 18             	sub    esp,0x18
c0013f52:	fa                   	cli    
c0013f53:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c0013f59:	6a 02                	push   0x2
c0013f5b:	c6 05 05 38 02 c0 01 	mov    BYTE PTR ds:0xc0023805,0x1
c0013f62:	e8 19 f6 ff ff       	call   c0013580 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013f67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f6c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0013f70:	52                   	push   edx
c0013f71:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0013f75:	52                   	push   edx
c0013f76:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0013f7a:	52                   	push   edx
c0013f7b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0013f7f:	50                   	push   eax
c0013f80:	e8 8a c2 fe ff       	call   c000020f <goToVM86>
c0013f85:	83 c4 2c             	add    esp,0x2c
c0013f88:	c3                   	ret    

c0013f89 <Vm::mainVm8086Loop(void*)>:
c0013f89:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0013f8e:	48                   	dec    eax
c0013f8f:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0013f94:	75 01                	jne    c0013f97 <Vm::mainVm8086Loop(void*)+0xe>
c0013f96:	fb                   	sti    
c0013f97:	eb b6                	jmp    c0013f4f <Vm::mainloop2()>

c0013f99 <Vm::mainloop3(unsigned long)>:
c0013f99:	83 ec 18             	sub    esp,0x18
c0013f9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013fa0:	fa                   	cli    
c0013fa1:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c0013fa7:	6a 02                	push   0x2
c0013fa9:	c6 05 04 38 02 c0 01 	mov    BYTE PTR ds:0xc0023804,0x1
c0013fb0:	a3 00 38 02 c0       	mov    ds:0xc0023800,eax
c0013fb5:	e8 c6 f5 ff ff       	call   c0013580 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013fba:	83 c4 1c             	add    esp,0x1c
c0013fbd:	eb 90                	jmp    c0013f4f <Vm::mainloop2()>

c0013fbf <Vm::initialise8086()>:
c0013fbf:	83 ec 0c             	sub    esp,0xc
c0013fc2:	68 80 00 00 00       	push   0x80
c0013fc7:	6a 00                	push   0x0
c0013fc9:	68 89 3f 01 c0       	push   0xc0013f89
c0013fce:	ff 35 d0 37 02 c0    	push   DWORD PTR ds:0xc00237d0
c0013fd4:	e8 b3 f1 ff ff       	call   c001318c <Process::createThread(void (*)(void*), void*, int)>
c0013fd9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0013fe0:	a3 08 38 02 c0       	mov    ds:0xc0023808,eax
c0013fe5:	68 00 01 00 00       	push   0x100
c0013fea:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0013fef:	6a 00                	push   0x0
c0013ff1:	6a 00                	push   0x0
c0013ff3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ff9:	e8 1e 5c ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013ffe:	83 c4 2c             	add    esp,0x2c
c0014001:	c3                   	ret    

c0014002 <Vm::finish8086()>:
c0014002:	53                   	push   ebx
c0014003:	83 ec 08             	sub    esp,0x8
c0014006:	fa                   	cli    
c0014007:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c001400d:	80 3d 04 38 02 c0 00 	cmp    BYTE PTR ds:0xc0023804,0x0
c0014014:	75 15                	jne    c001402b <Vm::finish8086()+0x29>
c0014016:	e8 91 f3 ff ff       	call   c00133ac <schedule()>
c001401b:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0014020:	48                   	dec    eax
c0014021:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0014026:	75 de                	jne    c0014006 <Vm::finish8086()+0x4>
c0014028:	fb                   	sti    
c0014029:	eb db                	jmp    c0014006 <Vm::finish8086()+0x4>
c001402b:	83 ec 0c             	sub    esp,0xc
c001402e:	8b 1d 00 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023800
c0014034:	ff 35 08 38 02 c0    	push   DWORD PTR ds:0xc0023808
c001403a:	c6 05 04 38 02 c0 00 	mov    BYTE PTR ds:0xc0023804,0x0
c0014041:	e8 2a f8 ff ff       	call   c0013870 <unblockTask(ThreadControlBlock*)>
c0014046:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c001404b:	83 c4 10             	add    esp,0x10
c001404e:	8d 50 ff             	lea    edx,[eax-0x1]
c0014051:	89 15 a8 37 02 c0    	mov    DWORD PTR ds:0xc00237a8,edx
c0014057:	85 d2                	test   edx,edx
c0014059:	75 01                	jne    c001405c <Vm::finish8086()+0x5a>
c001405b:	fb                   	sti    
c001405c:	89 d8                	mov    eax,ebx
c001405e:	83 c4 08             	add    esp,0x8
c0014061:	5b                   	pop    ebx
c0014062:	c3                   	ret    

c0014063 <Vm::getOutput8086(unsigned char*)>:
c0014063:	57                   	push   edi
c0014064:	8b 0d 0c 38 02 c0    	mov    ecx,DWORD PTR ds:0xc002380c
c001406a:	56                   	push   esi
c001406b:	be 20 38 02 c0       	mov    esi,0xc0023820
c0014070:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014074:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014076:	a1 0c 38 02 c0       	mov    eax,ds:0xc002380c
c001407b:	5e                   	pop    esi
c001407c:	c7 05 0c 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002380c,0x0
c0014086:	5f                   	pop    edi
c0014087:	c3                   	ret    

c0014088 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014088:	55                   	push   ebp
c0014089:	57                   	push   edi
c001408a:	56                   	push   esi
c001408b:	53                   	push   ebx
c001408c:	83 ec 0c             	sub    esp,0xc
c001408f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014093:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0014097:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001409b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001409f:	fa                   	cli    
c00140a0:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c00140a6:	80 3d 05 38 02 c0 00 	cmp    BYTE PTR ds:0xc0023805,0x0
c00140ad:	75 15                	jne    c00140c4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00140af:	e8 f8 f2 ff ff       	call   c00133ac <schedule()>
c00140b4:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c00140b9:	48                   	dec    eax
c00140ba:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c00140bf:	75 de                	jne    c001409f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00140c1:	fb                   	sti    
c00140c2:	eb db                	jmp    c001409f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00140c4:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c00140c9:	c7 05 0c 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002380c,0x0
c00140d3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00140d7:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00140db:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00140df:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00140e3:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00140e7:	0f b7 ff             	movzx  edi,di
c00140ea:	0f b7 f6             	movzx  esi,si
c00140ed:	50                   	push   eax
c00140ee:	6a 20                	push   0x20
c00140f0:	6a 00                	push   0x0
c00140f2:	68 20 38 02 c0       	push   0xc0023820
c00140f7:	e8 d4 c3 fe ff       	call   c00004d0 <memset>
c00140fc:	5a                   	pop    edx
c00140fd:	59                   	pop    ecx
c00140fe:	57                   	push   edi
c00140ff:	56                   	push   esi
c0014100:	e8 2d fe ff ff       	call   c0013f32 <Vm::realToLinear(unsigned short, unsigned short)>
c0014105:	83 c4 10             	add    esp,0x10
c0014108:	89 c7                	mov    edi,eax
c001410a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001410e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014112:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014114:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0014119:	c6 05 05 38 02 c0 00 	mov    BYTE PTR ds:0xc0023805,0x0
c0014120:	48                   	dec    eax
c0014121:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0014126:	75 01                	jne    c0014129 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014128:	fb                   	sti    
c0014129:	83 ec 0c             	sub    esp,0xc
c001412c:	ff 35 08 38 02 c0    	push   DWORD PTR ds:0xc0023808
c0014132:	e8 39 f7 ff ff       	call   c0013870 <unblockTask(ThreadControlBlock*)>
c0014137:	83 c4 1c             	add    esp,0x1c
c001413a:	b0 01                	mov    al,0x1
c001413c:	5b                   	pop    ebx
c001413d:	5e                   	pop    esi
c001413e:	5f                   	pop    edi
c001413f:	5d                   	pop    ebp
c0014140:	c3                   	ret    

c0014141 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014141:	55                   	push   ebp
c0014142:	57                   	push   edi
c0014143:	56                   	push   esi
c0014144:	53                   	push   ebx
c0014145:	83 ec 2c             	sub    esp,0x2c
c0014148:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001414c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014150:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014154:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014158:	fa                   	cli    
c0014159:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c001415f:	0f b6 35 05 38 02 c0 	movzx  esi,BYTE PTR ds:0xc0023805
c0014166:	89 f0                	mov    eax,esi
c0014168:	84 c0                	test   al,al
c001416a:	75 1d                	jne    c0014189 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001416c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014170:	e8 37 f2 ff ff       	call   c00133ac <schedule()>
c0014175:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c001417a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001417e:	48                   	dec    eax
c001417f:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0014184:	75 d2                	jne    c0014158 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014186:	fb                   	sti    
c0014187:	eb cf                	jmp    c0014158 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014189:	a1 08 38 02 c0       	mov    eax,ds:0xc0023808
c001418e:	c7 05 0c 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002380c,0x0
c0014198:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001419c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00141a0:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00141a4:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00141a8:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00141ac:	50                   	push   eax
c00141ad:	6a 20                	push   0x20
c00141af:	6a 00                	push   0x0
c00141b1:	68 20 38 02 c0       	push   0xc0023820
c00141b6:	e8 15 c3 fe ff       	call   c00004d0 <memset>
c00141bb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00141c2:	e8 f2 35 ff ff       	call   c00077b9 <malloc>
c00141c7:	83 c4 0c             	add    esp,0xc
c00141ca:	89 c3                	mov    ebx,eax
c00141cc:	ff 35 d0 37 02 c0    	push   DWORD PTR ds:0xc00237d0
c00141d2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00141d6:	50                   	push   eax
c00141d7:	e8 7a 68 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c00141dc:	83 c4 10             	add    esp,0x10
c00141df:	85 db                	test   ebx,ebx
c00141e1:	75 0a                	jne    c00141ed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00141e3:	83 ec 0c             	sub    esp,0xc
c00141e6:	68 08 e7 01 c0       	push   0xc001e708
c00141eb:	eb 3e                	jmp    c001422b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00141ed:	50                   	push   eax
c00141ee:	8d 44 24 17          	lea    eax,[esp+0x17]
c00141f2:	50                   	push   eax
c00141f3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00141f7:	50                   	push   eax
c00141f8:	53                   	push   ebx
c00141f9:	e8 c4 6b ff ff       	call   c000adc2 <File::stat(unsigned long long*, bool*)>
c00141fe:	83 c4 10             	add    esp,0x10
c0014201:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0014206:	74 0a                	je     c0014212 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014208:	83 ec 0c             	sub    esp,0xc
c001420b:	68 1c e7 01 c0       	push   0xc001e71c
c0014210:	eb 19                	jmp    c001422b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014212:	51                   	push   ecx
c0014213:	51                   	push   ecx
c0014214:	6a 01                	push   0x1
c0014216:	53                   	push   ebx
c0014217:	e8 fa 68 ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c001421c:	83 c4 10             	add    esp,0x10
c001421f:	85 c0                	test   eax,eax
c0014221:	74 24                	je     c0014247 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014223:	83 ec 0c             	sub    esp,0xc
c0014226:	68 35 e7 01 c0       	push   0xc001e735
c001422b:	e8 2f bf ff ff       	call   c001015f <KePanic(char const*)>
c0014230:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0014235:	83 c4 10             	add    esp,0x10
c0014238:	48                   	dec    eax
c0014239:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c001423e:	85 c0                	test   eax,eax
c0014240:	75 01                	jne    c0014243 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0014242:	fb                   	sti    
c0014243:	31 f6                	xor    esi,esi
c0014245:	eb 58                	jmp    c001429f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0014247:	0f b7 ed             	movzx  ebp,bp
c001424a:	50                   	push   eax
c001424b:	0f b7 ff             	movzx  edi,di
c001424e:	50                   	push   eax
c001424f:	55                   	push   ebp
c0014250:	57                   	push   edi
c0014251:	e8 dc fc ff ff       	call   c0013f32 <Vm::realToLinear(unsigned short, unsigned short)>
c0014256:	5a                   	pop    edx
c0014257:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014259:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001425d:	51                   	push   ecx
c001425e:	50                   	push   eax
c001425f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014263:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014267:	53                   	push   ebx
c0014268:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001426b:	83 c4 14             	add    esp,0x14
c001426e:	53                   	push   ebx
c001426f:	e8 00 69 ff ff       	call   c000ab74 <File::close()>
c0014274:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0014279:	83 c4 10             	add    esp,0x10
c001427c:	48                   	dec    eax
c001427d:	c6 05 05 38 02 c0 00 	mov    BYTE PTR ds:0xc0023805,0x0
c0014284:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0014289:	85 c0                	test   eax,eax
c001428b:	75 01                	jne    c001428e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001428d:	fb                   	sti    
c001428e:	83 ec 0c             	sub    esp,0xc
c0014291:	ff 35 08 38 02 c0    	push   DWORD PTR ds:0xc0023808
c0014297:	e8 d4 f5 ff ff       	call   c0013870 <unblockTask(ThreadControlBlock*)>
c001429c:	83 c4 10             	add    esp,0x10
c001429f:	83 c4 2c             	add    esp,0x2c
c00142a2:	89 f0                	mov    eax,esi
c00142a4:	5b                   	pop    ebx
c00142a5:	5e                   	pop    esi
c00142a6:	5f                   	pop    edi
c00142a7:	5d                   	pop    ebp
c00142a8:	c3                   	ret    

c00142a9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00142a9:	57                   	push   edi
c00142aa:	56                   	push   esi
c00142ab:	53                   	push   ebx
c00142ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00142b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00142b8:	83 e8 06             	sub    eax,0x6
c00142bb:	0f b7 c0             	movzx  eax,ax
c00142be:	50                   	push   eax
c00142bf:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00142c4:	50                   	push   eax
c00142c5:	e8 68 fc ff ff       	call   c0013f32 <Vm::realToLinear(unsigned short, unsigned short)>
c00142ca:	5a                   	pop    edx
c00142cb:	5e                   	pop    esi
c00142cc:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00142cf:	8d 56 fa             	lea    edx,[esi-0x6]
c00142d2:	81 e2 ff ff 00 00    	and    edx,0xffff
c00142d8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00142db:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00142de:	83 c2 02             	add    edx,0x2
c00142e1:	66 89 10             	mov    WORD PTR [eax],dx
c00142e4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00142e7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00142eb:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00142ee:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00142f2:	89 d6                	mov    esi,edx
c00142f4:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00142fa:	66 81 e6 ff fd       	and    si,0xfdff
c00142ff:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014303:	74 07                	je     c001430c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014305:	89 d6                	mov    esi,edx
c0014307:	66 81 ce 00 02       	or     si,0x200
c001430c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014310:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014315:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014319:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014321:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014324:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001432c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001432f:	5b                   	pop    ebx
c0014330:	5e                   	pop    esi
c0014331:	5f                   	pop    edi
c0014332:	c3                   	ret    

c0014333 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014333:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014338:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001433d:	c1 e0 04             	shl    eax,0x4
c0014340:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014343:	c3                   	ret    

c0014344 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014344:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014349:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001434e:	c1 e0 04             	shl    eax,0x4
c0014351:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014355:	c3                   	ret    

c0014356 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0014356:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001435b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014360:	c1 e0 04             	shl    eax,0x4
c0014363:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0014366:	c3                   	ret    

c0014367 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0014367:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001436c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014371:	c1 e0 04             	shl    eax,0x4
c0014374:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014378:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001437b:	c3                   	ret    

c001437c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001437c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014381:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014386:	c1 e0 04             	shl    eax,0x4
c0014389:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001438d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014391:	c3                   	ret    

c0014392 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014392:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014397:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001439c:	c1 e0 04             	shl    eax,0x4
c001439f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00143a3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00143a6:	c3                   	ret    

c00143a7 <Vm::faultHandler(regs*)>:
c00143a7:	55                   	push   ebp
c00143a8:	57                   	push   edi
c00143a9:	56                   	push   esi
c00143aa:	53                   	push   ebx
c00143ab:	83 ec 1c             	sub    esp,0x1c
c00143ae:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00143b2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00143b5:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00143b9:	0f b7 f8             	movzx  edi,ax
c00143bc:	52                   	push   edx
c00143bd:	0f b7 c0             	movzx  eax,ax
c00143c0:	50                   	push   eax
c00143c1:	e8 6c fb ff ff       	call   c0013f32 <Vm::realToLinear(unsigned short, unsigned short)>
c00143c6:	5a                   	pop    edx
c00143c7:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00143ca:	59                   	pop    ecx
c00143cb:	89 c1                	mov    ecx,eax
c00143cd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00143d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143d4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00143d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00143dd:	0f b7 c5             	movzx  eax,bp
c00143e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00143e4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00143e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00143ec:	e8 41 fb ff ff       	call   c0013f32 <Vm::realToLinear(unsigned short, unsigned short)>
c00143f1:	5e                   	pop    esi
c00143f2:	be 06 00 00 00       	mov    esi,0x6
c00143f7:	5a                   	pop    edx
c00143f8:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00143fd:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014402:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014405:	80 fa 9d             	cmp    dl,0x9d
c0014408:	0f 84 2c 02 00 00    	je     c001463a <Vm::faultHandler(regs*)+0x293>
c001440e:	0f 87 91 00 00 00    	ja     c00144a5 <Vm::faultHandler(regs*)+0xfe>
c0014414:	80 fa 66             	cmp    dl,0x66
c0014417:	0f 84 98 01 00 00    	je     c00145b5 <Vm::faultHandler(regs*)+0x20e>
c001441d:	77 47                	ja     c0014466 <Vm::faultHandler(regs*)+0xbf>
c001441f:	80 fa 36             	cmp    dl,0x36
c0014422:	0f 84 80 01 00 00    	je     c00145a8 <Vm::faultHandler(regs*)+0x201>
c0014428:	77 1a                	ja     c0014444 <Vm::faultHandler(regs*)+0x9d>
c001442a:	80 fa 26             	cmp    dl,0x26
c001442d:	0f 84 4e 01 00 00    	je     c0014581 <Vm::faultHandler(regs*)+0x1da>
c0014433:	80 fa 2e             	cmp    dl,0x2e
c0014436:	0f 85 e2 05 00 00    	jne    c0014a1e <Vm::faultHandler(regs*)+0x677>
c001443c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001443f:	31 f6                	xor    esi,esi
c0014441:	41                   	inc    ecx
c0014442:	eb be                	jmp    c0014402 <Vm::faultHandler(regs*)+0x5b>
c0014444:	80 fa 64             	cmp    dl,0x64
c0014447:	0f 84 41 01 00 00    	je     c001458e <Vm::faultHandler(regs*)+0x1e7>
c001444d:	0f 87 48 01 00 00    	ja     c001459b <Vm::faultHandler(regs*)+0x1f4>
c0014453:	80 fa 3e             	cmp    dl,0x3e
c0014456:	0f 85 c2 05 00 00    	jne    c0014a1e <Vm::faultHandler(regs*)+0x677>
c001445c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001445f:	be 01 00 00 00       	mov    esi,0x1
c0014464:	eb db                	jmp    c0014441 <Vm::faultHandler(regs*)+0x9a>
c0014466:	80 fa 6d             	cmp    dl,0x6d
c0014469:	0f 84 ec 02 00 00    	je     c001475b <Vm::faultHandler(regs*)+0x3b4>
c001446f:	77 17                	ja     c0014488 <Vm::faultHandler(regs*)+0xe1>
c0014471:	80 fa 67             	cmp    dl,0x67
c0014474:	0f 84 48 01 00 00    	je     c00145c2 <Vm::faultHandler(regs*)+0x21b>
c001447a:	80 fa 6c             	cmp    dl,0x6c
c001447d:	0f 84 69 02 00 00    	je     c00146ec <Vm::faultHandler(regs*)+0x345>
c0014483:	e9 96 05 00 00       	jmp    c0014a1e <Vm::faultHandler(regs*)+0x677>
c0014488:	80 fa 6f             	cmp    dl,0x6f
c001448b:	0f 84 f4 03 00 00    	je     c0014885 <Vm::faultHandler(regs*)+0x4de>
c0014491:	0f 82 59 03 00 00    	jb     c00147f0 <Vm::faultHandler(regs*)+0x449>
c0014497:	80 fa 9c             	cmp    dl,0x9c
c001449a:	0f 84 2f 01 00 00    	je     c00145cf <Vm::faultHandler(regs*)+0x228>
c00144a0:	e9 79 05 00 00       	jmp    c0014a1e <Vm::faultHandler(regs*)+0x677>
c00144a5:	80 fa ec             	cmp    dl,0xec
c00144a8:	0f 84 14 05 00 00    	je     c00149c2 <Vm::faultHandler(regs*)+0x61b>
c00144ae:	77 7b                	ja     c001452b <Vm::faultHandler(regs*)+0x184>
c00144b0:	80 fa e4             	cmp    dl,0xe4
c00144b3:	0f 84 93 04 00 00    	je     c001494c <Vm::faultHandler(regs*)+0x5a5>
c00144b9:	77 53                	ja     c001450e <Vm::faultHandler(regs*)+0x167>
c00144bb:	80 fa cd             	cmp    dl,0xcd
c00144be:	0f 84 d9 01 00 00    	je     c001469d <Vm::faultHandler(regs*)+0x2f6>
c00144c4:	80 fa cf             	cmp    dl,0xcf
c00144c7:	0f 85 51 05 00 00    	jne    c0014a1e <Vm::faultHandler(regs*)+0x677>
c00144cd:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00144d0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00144d3:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00144d7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00144da:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00144de:	81 ca 00 02 02 00    	or     edx,0x20200
c00144e4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00144e7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00144eb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00144f1:	66 c1 e8 09          	shr    ax,0x9
c00144f5:	83 e0 01             	and    eax,0x1
c00144f8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00144fb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00144fe:	83 c0 06             	add    eax,0x6
c0014501:	25 ff ff 00 00       	and    eax,0xffff
c0014506:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014509:	e9 0c 05 00 00       	jmp    c0014a1a <Vm::faultHandler(regs*)+0x673>
c001450e:	80 fa e6             	cmp    dl,0xe6
c0014511:	0f 84 7f 04 00 00    	je     c0014996 <Vm::faultHandler(regs*)+0x5ef>
c0014517:	0f 82 4b 04 00 00    	jb     c0014968 <Vm::faultHandler(regs*)+0x5c1>
c001451d:	80 fa e7             	cmp    dl,0xe7
c0014520:	0f 84 87 04 00 00    	je     c00149ad <Vm::faultHandler(regs*)+0x606>
c0014526:	e9 f3 04 00 00       	jmp    c0014a1e <Vm::faultHandler(regs*)+0x677>
c001452b:	80 fa ef             	cmp    dl,0xef
c001452e:	0f 84 d1 04 00 00    	je     c0014a05 <Vm::faultHandler(regs*)+0x65e>
c0014534:	77 28                	ja     c001455e <Vm::faultHandler(regs*)+0x1b7>
c0014536:	80 fa ed             	cmp    dl,0xed
c0014539:	0f 84 9f 04 00 00    	je     c00149de <Vm::faultHandler(regs*)+0x637>
c001453f:	80 fa ee             	cmp    dl,0xee
c0014542:	0f 85 d6 04 00 00    	jne    c0014a1e <Vm::faultHandler(regs*)+0x677>
c0014548:	50                   	push   eax
c0014549:	50                   	push   eax
c001454a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001454e:	50                   	push   eax
c001454f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014553:	50                   	push   eax
c0014554:	e8 a3 f9 ff ff       	call   c0013efc <Vm::outbv(unsigned short, unsigned char)>
c0014559:	e9 9f 04 00 00       	jmp    c00149fd <Vm::faultHandler(regs*)+0x656>
c001455e:	80 fa fa             	cmp    dl,0xfa
c0014561:	0f 84 69 01 00 00    	je     c00146d0 <Vm::faultHandler(regs*)+0x329>
c0014567:	80 fa fb             	cmp    dl,0xfb
c001456a:	0f 84 6e 01 00 00    	je     c00146de <Vm::faultHandler(regs*)+0x337>
c0014570:	80 fa f3             	cmp    dl,0xf3
c0014573:	0f 85 a5 04 00 00    	jne    c0014a1e <Vm::faultHandler(regs*)+0x677>
c0014579:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001457c:	e9 c0 fe ff ff       	jmp    c0014441 <Vm::faultHandler(regs*)+0x9a>
c0014581:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014584:	be 02 00 00 00       	mov    esi,0x2
c0014589:	e9 b3 fe ff ff       	jmp    c0014441 <Vm::faultHandler(regs*)+0x9a>
c001458e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014591:	be 03 00 00 00       	mov    esi,0x3
c0014596:	e9 a6 fe ff ff       	jmp    c0014441 <Vm::faultHandler(regs*)+0x9a>
c001459b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001459e:	be 04 00 00 00       	mov    esi,0x4
c00145a3:	e9 99 fe ff ff       	jmp    c0014441 <Vm::faultHandler(regs*)+0x9a>
c00145a8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00145ab:	be 05 00 00 00       	mov    esi,0x5
c00145b0:	e9 8c fe ff ff       	jmp    c0014441 <Vm::faultHandler(regs*)+0x9a>
c00145b5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00145b8:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00145bd:	e9 7f fe ff ff       	jmp    c0014441 <Vm::faultHandler(regs*)+0x9a>
c00145c2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00145c5:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00145ca:	e9 72 fe ff ff       	jmp    c0014441 <Vm::faultHandler(regs*)+0x9a>
c00145cf:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00145d2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00145d6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00145db:	74 30                	je     c001460d <Vm::faultHandler(regs*)+0x266>
c00145dd:	83 e9 04             	sub    ecx,0x4
c00145e0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00145e6:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00145ec:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00145ef:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00145f2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00145f8:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00145fc:	0f 84 15 04 00 00    	je     c0014a17 <Vm::faultHandler(regs*)+0x670>
c0014602:	80 ce 02             	or     dh,0x2
c0014605:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014608:	e9 0a 04 00 00       	jmp    c0014a17 <Vm::faultHandler(regs*)+0x670>
c001460d:	83 e9 02             	sub    ecx,0x2
c0014610:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014616:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014619:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001461d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014623:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014627:	74 05                	je     c001462e <Vm::faultHandler(regs*)+0x287>
c0014629:	80 ce 02             	or     dh,0x2
c001462c:	eb 03                	jmp    c0014631 <Vm::faultHandler(regs*)+0x28a>
c001462e:	80 e6 fd             	and    dh,0xfd
c0014631:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014635:	e9 dd 03 00 00       	jmp    c0014a17 <Vm::faultHandler(regs*)+0x670>
c001463a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001463f:	74 2a                	je     c001466b <Vm::faultHandler(regs*)+0x2c4>
c0014641:	8b 10                	mov    edx,DWORD PTR [eax]
c0014643:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014649:	81 ca 00 02 02 00    	or     edx,0x20200
c001464f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014652:	8b 00                	mov    eax,DWORD PTR [eax]
c0014654:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001465a:	c1 e8 09             	shr    eax,0x9
c001465d:	83 e0 01             	and    eax,0x1
c0014660:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014663:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014666:	83 c0 04             	add    eax,0x4
c0014669:	eb 25                	jmp    c0014690 <Vm::faultHandler(regs*)+0x2e9>
c001466b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001466e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014674:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014677:	66 8b 00             	mov    ax,WORD PTR [eax]
c001467a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014680:	66 c1 e8 09          	shr    ax,0x9
c0014684:	83 e0 01             	and    eax,0x1
c0014687:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001468a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001468d:	83 c0 02             	add    eax,0x2
c0014690:	25 ff ff 00 00       	and    eax,0xffff
c0014695:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014698:	e9 7a 03 00 00       	jmp    c0014a17 <Vm::faultHandler(regs*)+0x670>
c001469d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00146a1:	3c ee                	cmp    al,0xee
c00146a3:	75 10                	jne    c00146b5 <Vm::faultHandler(regs*)+0x30e>
c00146a5:	83 ec 0c             	sub    esp,0xc
c00146a8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00146ab:	e8 e9 f8 ff ff       	call   c0013f99 <Vm::mainloop3(unsigned long)>
c00146b0:	e9 4b 03 00 00       	jmp    c0014a00 <Vm::faultHandler(regs*)+0x659>
c00146b5:	83 ec 0c             	sub    esp,0xc
c00146b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00146bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146c0:	51                   	push   ecx
c00146c1:	50                   	push   eax
c00146c2:	53                   	push   ebx
c00146c3:	e8 e1 fb ff ff       	call   c00142a9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00146c8:	83 c4 20             	add    esp,0x20
c00146cb:	e9 4a 03 00 00       	jmp    c0014a1a <Vm::faultHandler(regs*)+0x673>
c00146d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146d5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00146d9:	e9 39 03 00 00       	jmp    c0014a17 <Vm::faultHandler(regs*)+0x670>
c00146de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146e3:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00146e7:	e9 2b 03 00 00       	jmp    c0014a17 <Vm::faultHandler(regs*)+0x670>
c00146ec:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00146ef:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00146f4:	74 2b                	je     c0014721 <Vm::faultHandler(regs*)+0x37a>
c00146f6:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00146fd:	76 22                	jbe    c0014721 <Vm::faultHandler(regs*)+0x37a>
c00146ff:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014703:	50                   	push   eax
c0014704:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014708:	50                   	push   eax
c0014709:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001470d:	50                   	push   eax
c001470e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014712:	50                   	push   eax
c0014713:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014717:	50                   	push   eax
c0014718:	6a 6c                	push   0x6c
c001471a:	6a 6c                	push   0x6c
c001471c:	e9 b9 01 00 00       	jmp    c00148da <Vm::faultHandler(regs*)+0x533>
c0014721:	83 ec 0c             	sub    esp,0xc
c0014724:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014728:	0f b7 f6             	movzx  esi,si
c001472b:	50                   	push   eax
c001472c:	e8 b8 f7 ff ff       	call   c0013ee9 <Vm::inbv(unsigned short)>
c0014731:	83 c4 0c             	add    esp,0xc
c0014734:	0f b6 c0             	movzx  eax,al
c0014737:	50                   	push   eax
c0014738:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001473c:	50                   	push   eax
c001473d:	56                   	push   esi
c001473e:	e8 24 fc ff ff       	call   c0014367 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014743:	83 c4 10             	add    esp,0x10
c0014746:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014749:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001474d:	74 03                	je     c0014752 <Vm::faultHandler(regs*)+0x3ab>
c001474f:	48                   	dec    eax
c0014750:	eb 01                	jmp    c0014753 <Vm::faultHandler(regs*)+0x3ac>
c0014752:	40                   	inc    eax
c0014753:	0f b7 c0             	movzx  eax,ax
c0014756:	e9 8d 00 00 00       	jmp    c00147e8 <Vm::faultHandler(regs*)+0x441>
c001475b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001475e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014761:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014766:	74 29                	je     c0014791 <Vm::faultHandler(regs*)+0x3ea>
c0014768:	3d ff ff 00 00       	cmp    eax,0xffff
c001476d:	76 22                	jbe    c0014791 <Vm::faultHandler(regs*)+0x3ea>
c001476f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014773:	50                   	push   eax
c0014774:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014778:	50                   	push   eax
c0014779:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001477d:	50                   	push   eax
c001477e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014782:	50                   	push   eax
c0014783:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014787:	50                   	push   eax
c0014788:	6a 6d                	push   0x6d
c001478a:	6a 6d                	push   0x6d
c001478c:	e9 49 01 00 00       	jmp    c00148da <Vm::faultHandler(regs*)+0x533>
c0014791:	0f b7 c8             	movzx  ecx,ax
c0014794:	0f b7 f6             	movzx  esi,si
c0014797:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001479a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001479f:	74 20                	je     c00147c1 <Vm::faultHandler(regs*)+0x41a>
c00147a1:	ed                   	in     eax,dx
c00147a2:	55                   	push   ebp
c00147a3:	50                   	push   eax
c00147a4:	51                   	push   ecx
c00147a5:	56                   	push   esi
c00147a6:	e8 e7 fb ff ff       	call   c0014392 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00147ab:	83 c4 10             	add    esp,0x10
c00147ae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00147b1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00147b5:	74 05                	je     c00147bc <Vm::faultHandler(regs*)+0x415>
c00147b7:	83 e8 04             	sub    eax,0x4
c00147ba:	eb 27                	jmp    c00147e3 <Vm::faultHandler(regs*)+0x43c>
c00147bc:	83 c0 04             	add    eax,0x4
c00147bf:	eb 22                	jmp    c00147e3 <Vm::faultHandler(regs*)+0x43c>
c00147c1:	66 ed                	in     ax,dx
c00147c3:	0f b7 c0             	movzx  eax,ax
c00147c6:	57                   	push   edi
c00147c7:	50                   	push   eax
c00147c8:	51                   	push   ecx
c00147c9:	56                   	push   esi
c00147ca:	e8 ad fb ff ff       	call   c001437c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00147cf:	83 c4 10             	add    esp,0x10
c00147d2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00147d5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00147d9:	74 05                	je     c00147e0 <Vm::faultHandler(regs*)+0x439>
c00147db:	83 e8 02             	sub    eax,0x2
c00147de:	eb 03                	jmp    c00147e3 <Vm::faultHandler(regs*)+0x43c>
c00147e0:	83 c0 02             	add    eax,0x2
c00147e3:	25 ff ff 00 00       	and    eax,0xffff
c00147e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00147eb:	e9 27 02 00 00       	jmp    c0014a17 <Vm::faultHandler(regs*)+0x670>
c00147f0:	8d 46 ff             	lea    eax,[esi-0x1]
c00147f3:	3c 05                	cmp    al,0x5
c00147f5:	77 24                	ja     c001481b <Vm::faultHandler(regs*)+0x474>
c00147f7:	0f b6 c0             	movzx  eax,al
c00147fa:	ff 24 85 a8 e7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1858]
c0014801:	0f b7 fd             	movzx  edi,bp
c0014804:	eb 15                	jmp    c001481b <Vm::faultHandler(regs*)+0x474>
c0014806:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001480a:	eb 0f                	jmp    c001481b <Vm::faultHandler(regs*)+0x474>
c001480c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014810:	eb 09                	jmp    c001481b <Vm::faultHandler(regs*)+0x474>
c0014812:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014816:	eb 03                	jmp    c001481b <Vm::faultHandler(regs*)+0x474>
c0014818:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001481b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001481e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014823:	74 29                	je     c001484e <Vm::faultHandler(regs*)+0x4a7>
c0014825:	3d ff ff 00 00       	cmp    eax,0xffff
c001482a:	76 22                	jbe    c001484e <Vm::faultHandler(regs*)+0x4a7>
c001482c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014830:	50                   	push   eax
c0014831:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014835:	50                   	push   eax
c0014836:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001483a:	50                   	push   eax
c001483b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001483f:	50                   	push   eax
c0014840:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014844:	50                   	push   eax
c0014845:	6a 6e                	push   0x6e
c0014847:	6a 6e                	push   0x6e
c0014849:	e9 8c 00 00 00       	jmp    c00148da <Vm::faultHandler(regs*)+0x533>
c001484e:	0f b7 c0             	movzx  eax,ax
c0014851:	52                   	push   edx
c0014852:	52                   	push   edx
c0014853:	50                   	push   eax
c0014854:	57                   	push   edi
c0014855:	e8 d9 fa ff ff       	call   c0014333 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001485a:	59                   	pop    ecx
c001485b:	0f b6 c0             	movzx  eax,al
c001485e:	5e                   	pop    esi
c001485f:	50                   	push   eax
c0014860:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014864:	50                   	push   eax
c0014865:	e8 92 f6 ff ff       	call   c0013efc <Vm::outbv(unsigned short, unsigned char)>
c001486a:	83 c4 10             	add    esp,0x10
c001486d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014870:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014874:	74 03                	je     c0014879 <Vm::faultHandler(regs*)+0x4d2>
c0014876:	48                   	dec    eax
c0014877:	eb 01                	jmp    c001487a <Vm::faultHandler(regs*)+0x4d3>
c0014879:	40                   	inc    eax
c001487a:	0f b7 c0             	movzx  eax,ax
c001487d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014880:	e9 92 01 00 00       	jmp    c0014a17 <Vm::faultHandler(regs*)+0x670>
c0014885:	8d 46 ff             	lea    eax,[esi-0x1]
c0014888:	3c 05                	cmp    al,0x5
c001488a:	77 1f                	ja     c00148ab <Vm::faultHandler(regs*)+0x504>
c001488c:	0f b6 c0             	movzx  eax,al
c001488f:	ff 24 85 c0 e7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1840]
c0014896:	89 ef                	mov    edi,ebp
c0014898:	eb 11                	jmp    c00148ab <Vm::faultHandler(regs*)+0x504>
c001489a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001489d:	eb 0c                	jmp    c00148ab <Vm::faultHandler(regs*)+0x504>
c001489f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00148a2:	eb 07                	jmp    c00148ab <Vm::faultHandler(regs*)+0x504>
c00148a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00148a7:	eb 02                	jmp    c00148ab <Vm::faultHandler(regs*)+0x504>
c00148a9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00148ab:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00148ae:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00148b3:	74 37                	je     c00148ec <Vm::faultHandler(regs*)+0x545>
c00148b5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00148bb:	76 2f                	jbe    c00148ec <Vm::faultHandler(regs*)+0x545>
c00148bd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00148c1:	50                   	push   eax
c00148c2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00148c6:	50                   	push   eax
c00148c7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00148cb:	50                   	push   eax
c00148cc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00148d0:	50                   	push   eax
c00148d1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00148d5:	50                   	push   eax
c00148d6:	6a 6f                	push   0x6f
c00148d8:	6a 6f                	push   0x6f
c00148da:	68 4e e7 01 c0       	push   0xc001e74e
c00148df:	e8 fc 5b ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c00148e4:	83 c4 20             	add    esp,0x20
c00148e7:	e9 86 01 00 00       	jmp    c0014a72 <Vm::faultHandler(regs*)+0x6cb>
c00148ec:	0f b7 d7             	movzx  edx,di
c00148ef:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00148f2:	0f b7 c6             	movzx  eax,si
c00148f5:	81 e1 00 04 00 00    	and    ecx,0x400
c00148fb:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00148fe:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014903:	74 1d                	je     c0014922 <Vm::faultHandler(regs*)+0x57b>
c0014905:	55                   	push   ebp
c0014906:	55                   	push   ebp
c0014907:	50                   	push   eax
c0014908:	52                   	push   edx
c0014909:	e8 48 fa ff ff       	call   c0014356 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001490e:	83 c4 10             	add    esp,0x10
c0014911:	89 fa                	mov    edx,edi
c0014913:	ef                   	out    dx,eax
c0014914:	85 c9                	test   ecx,ecx
c0014916:	74 05                	je     c001491d <Vm::faultHandler(regs*)+0x576>
c0014918:	83 ee 04             	sub    esi,0x4
c001491b:	eb 21                	jmp    c001493e <Vm::faultHandler(regs*)+0x597>
c001491d:	83 c6 04             	add    esi,0x4
c0014920:	eb 1c                	jmp    c001493e <Vm::faultHandler(regs*)+0x597>
c0014922:	55                   	push   ebp
c0014923:	55                   	push   ebp
c0014924:	50                   	push   eax
c0014925:	52                   	push   edx
c0014926:	e8 19 fa ff ff       	call   c0014344 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001492b:	83 c4 10             	add    esp,0x10
c001492e:	89 fa                	mov    edx,edi
c0014930:	66 ef                	out    dx,ax
c0014932:	85 c9                	test   ecx,ecx
c0014934:	74 05                	je     c001493b <Vm::faultHandler(regs*)+0x594>
c0014936:	83 ee 02             	sub    esi,0x2
c0014939:	eb 03                	jmp    c001493e <Vm::faultHandler(regs*)+0x597>
c001493b:	83 c6 02             	add    esi,0x2
c001493e:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014944:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014947:	e9 cb 00 00 00       	jmp    c0014a17 <Vm::faultHandler(regs*)+0x670>
c001494c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014953:	83 ec 0c             	sub    esp,0xc
c0014956:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001495a:	50                   	push   eax
c001495b:	e8 89 f5 ff ff       	call   c0013ee9 <Vm::inbv(unsigned short)>
c0014960:	0f b6 c0             	movzx  eax,al
c0014963:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014966:	eb 3f                	jmp    c00149a7 <Vm::faultHandler(regs*)+0x600>
c0014968:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001496d:	74 07                	je     c0014976 <Vm::faultHandler(regs*)+0x5cf>
c001496f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014973:	ed                   	in     eax,dx
c0014974:	eb 14                	jmp    c001498a <Vm::faultHandler(regs*)+0x5e3>
c0014976:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014979:	66 31 f6             	xor    si,si
c001497c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001497f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014983:	66 ed                	in     ax,dx
c0014985:	0f b7 c0             	movzx  eax,ax
c0014988:	09 f0                	or     eax,esi
c001498a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001498d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014991:	e9 84 00 00 00       	jmp    c0014a1a <Vm::faultHandler(regs*)+0x673>
c0014996:	52                   	push   edx
c0014997:	52                   	push   edx
c0014998:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001499c:	50                   	push   eax
c001499d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00149a1:	50                   	push   eax
c00149a2:	e8 55 f5 ff ff       	call   c0013efc <Vm::outbv(unsigned short, unsigned char)>
c00149a7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00149ab:	eb 53                	jmp    c0014a00 <Vm::faultHandler(regs*)+0x659>
c00149ad:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00149b0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00149b4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149b9:	74 03                	je     c00149be <Vm::faultHandler(regs*)+0x617>
c00149bb:	ef                   	out    dx,eax
c00149bc:	eb cf                	jmp    c001498d <Vm::faultHandler(regs*)+0x5e6>
c00149be:	66 ef                	out    dx,ax
c00149c0:	eb cb                	jmp    c001498d <Vm::faultHandler(regs*)+0x5e6>
c00149c2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00149c9:	83 ec 0c             	sub    esp,0xc
c00149cc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00149d0:	50                   	push   eax
c00149d1:	e8 13 f5 ff ff       	call   c0013ee9 <Vm::inbv(unsigned short)>
c00149d6:	0f b6 c0             	movzx  eax,al
c00149d9:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00149dc:	eb 1f                	jmp    c00149fd <Vm::faultHandler(regs*)+0x656>
c00149de:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00149e1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149e6:	74 03                	je     c00149eb <Vm::faultHandler(regs*)+0x644>
c00149e8:	ed                   	in     eax,dx
c00149e9:	eb 0d                	jmp    c00149f8 <Vm::faultHandler(regs*)+0x651>
c00149eb:	66 ed                	in     ax,dx
c00149ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00149f0:	0f b7 c0             	movzx  eax,ax
c00149f3:	66 31 d2             	xor    dx,dx
c00149f6:	09 d0                	or     eax,edx
c00149f8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00149fb:	eb 1a                	jmp    c0014a17 <Vm::faultHandler(regs*)+0x670>
c00149fd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a00:	83 c4 10             	add    esp,0x10
c0014a03:	eb 15                	jmp    c0014a1a <Vm::faultHandler(regs*)+0x673>
c0014a05:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014a08:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014a0b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a10:	74 03                	je     c0014a15 <Vm::faultHandler(regs*)+0x66e>
c0014a12:	ef                   	out    dx,eax
c0014a13:	eb 02                	jmp    c0014a17 <Vm::faultHandler(regs*)+0x670>
c0014a15:	66 ef                	out    dx,ax
c0014a17:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a1a:	b0 01                	mov    al,0x1
c0014a1c:	eb 56                	jmp    c0014a74 <Vm::faultHandler(regs*)+0x6cd>
c0014a1e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014a22:	50                   	push   eax
c0014a23:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014a27:	50                   	push   eax
c0014a28:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014a2c:	50                   	push   eax
c0014a2d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014a31:	50                   	push   eax
c0014a32:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014a36:	50                   	push   eax
c0014a37:	52                   	push   edx
c0014a38:	52                   	push   edx
c0014a39:	68 7b e7 01 c0       	push   0xc001e77b
c0014a3e:	e8 9d 5a ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014a43:	83 c4 20             	add    esp,0x20
c0014a46:	83 ec 0c             	sub    esp,0xc
c0014a49:	6a 60                	push   0x60
c0014a4b:	e8 99 f4 ff ff       	call   c0013ee9 <Vm::inbv(unsigned short)>
c0014a50:	83 c4 10             	add    esp,0x10
c0014a53:	3c 1c                	cmp    al,0x1c
c0014a55:	74 04                	je     c0014a5b <Vm::faultHandler(regs*)+0x6b4>
c0014a57:	3c 5a                	cmp    al,0x5a
c0014a59:	75 eb                	jne    c0014a46 <Vm::faultHandler(regs*)+0x69f>
c0014a5b:	3c 5a                	cmp    al,0x5a
c0014a5d:	74 04                	je     c0014a63 <Vm::faultHandler(regs*)+0x6bc>
c0014a5f:	3c 1c                	cmp    al,0x1c
c0014a61:	75 0f                	jne    c0014a72 <Vm::faultHandler(regs*)+0x6cb>
c0014a63:	83 ec 0c             	sub    esp,0xc
c0014a66:	6a 60                	push   0x60
c0014a68:	e8 7c f4 ff ff       	call   c0013ee9 <Vm::inbv(unsigned short)>
c0014a6d:	83 c4 10             	add    esp,0x10
c0014a70:	eb e9                	jmp    c0014a5b <Vm::faultHandler(regs*)+0x6b4>
c0014a72:	31 c0                	xor    eax,eax
c0014a74:	83 c4 1c             	add    esp,0x1c
c0014a77:	5b                   	pop    ebx
c0014a78:	5e                   	pop    esi
c0014a79:	5f                   	pop    edi
c0014a7a:	5d                   	pop    ebp
c0014a7b:	c3                   	ret    

c0014a7c <noCopro(unsigned long)>:
c0014a7c:	c3                   	ret    

c0014a7d <nmiHandler(regs*, void*)>:
c0014a7d:	83 ec 0c             	sub    esp,0xc
c0014a80:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0014a85:	83 ec 0c             	sub    esp,0xc
c0014a88:	50                   	push   eax
c0014a89:	e8 4c 25 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014a8e:	83 c4 10             	add    esp,0x10
c0014a91:	90                   	nop
c0014a92:	83 c4 0c             	add    esp,0xc
c0014a95:	c3                   	ret    

c0014a96 <doubleFault(regs*, void*)>:
c0014a96:	55                   	push   ebp
c0014a97:	89 e5                	mov    ebp,esp
c0014a99:	83 ec 08             	sub    esp,0x8
c0014a9c:	83 ec 0c             	sub    esp,0xc
c0014a9f:	68 d8 e7 01 c0       	push   0xc001e7d8
c0014aa4:	e8 b6 b6 ff ff       	call   c001015f <KePanic(char const*)>
c0014aa9:	83 c4 10             	add    esp,0x10
c0014aac:	90                   	nop
c0014aad:	c9                   	leave  
c0014aae:	c3                   	ret    

c0014aaf <displayDebugInfo(regs*)>:
c0014aaf:	83 ec 1c             	sub    esp,0x1c
c0014ab2:	0f 20 c0             	mov    eax,cr0
c0014ab5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ab9:	0f 20 d0             	mov    eax,cr2
c0014abc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ac0:	0f 20 d8             	mov    eax,cr3
c0014ac3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ac7:	0f 20 e0             	mov    eax,cr4
c0014aca:	89 04 24             	mov    DWORD PTR [esp],eax
c0014acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ad1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014ad4:	83 ec 08             	sub    esp,0x8
c0014ad7:	50                   	push   eax
c0014ad8:	68 f4 e7 01 c0       	push   0xc001e7f4
c0014add:	e8 fe 59 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014ae2:	83 c4 10             	add    esp,0x10
c0014ae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ae9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014aec:	83 ec 08             	sub    esp,0x8
c0014aef:	50                   	push   eax
c0014af0:	68 e5 e7 01 c0       	push   0xc001e7e5
c0014af5:	e8 e6 59 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014afa:	83 c4 10             	add    esp,0x10
c0014afd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b01:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014b04:	83 ec 08             	sub    esp,0x8
c0014b07:	50                   	push   eax
c0014b08:	68 f0 e7 01 c0       	push   0xc001e7f0
c0014b0d:	e8 ce 59 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014b12:	83 c4 10             	add    esp,0x10
c0014b15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b19:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b1c:	83 ec 08             	sub    esp,0x8
c0014b1f:	50                   	push   eax
c0014b20:	68 ff e7 01 c0       	push   0xc001e7ff
c0014b25:	e8 b6 59 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014b2a:	83 c4 10             	add    esp,0x10
c0014b2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b31:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014b34:	83 ec 08             	sub    esp,0x8
c0014b37:	50                   	push   eax
c0014b38:	68 0a e8 01 c0       	push   0xc001e80a
c0014b3d:	e8 9e 59 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014b42:	83 c4 10             	add    esp,0x10
c0014b45:	83 ec 08             	sub    esp,0x8
c0014b48:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b4c:	68 15 e8 01 c0       	push   0xc001e815
c0014b51:	e8 8a 59 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014b56:	83 c4 10             	add    esp,0x10
c0014b59:	83 ec 08             	sub    esp,0x8
c0014b5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014b60:	68 20 e8 01 c0       	push   0xc001e820
c0014b65:	e8 76 59 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014b6a:	83 c4 10             	add    esp,0x10
c0014b6d:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014b72:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b78:	83 ec 0c             	sub    esp,0xc
c0014b7b:	50                   	push   eax
c0014b7c:	e8 76 38 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014b81:	83 c4 10             	add    esp,0x10
c0014b84:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014b89:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b8f:	83 ec 08             	sub    esp,0x8
c0014b92:	68 2b e8 01 c0       	push   0xc001e82b
c0014b97:	50                   	push   eax
c0014b98:	e8 99 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b9d:	83 c4 10             	add    esp,0x10
c0014ba0:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014ba5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bab:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014bb0:	8b 12                	mov    edx,DWORD PTR [edx]
c0014bb2:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014bb5:	83 c2 0c             	add    edx,0xc
c0014bb8:	83 ec 08             	sub    esp,0x8
c0014bbb:	52                   	push   edx
c0014bbc:	50                   	push   eax
c0014bbd:	e8 74 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014bc2:	83 c4 10             	add    esp,0x10
c0014bc5:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014bca:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bd0:	83 ec 08             	sub    esp,0x8
c0014bd3:	68 34 e8 01 c0       	push   0xc001e834
c0014bd8:	50                   	push   eax
c0014bd9:	e8 58 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014bde:	83 c4 10             	add    esp,0x10
c0014be1:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014be6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014bf0:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014bf3:	83 ec 08             	sub    esp,0x8
c0014bf6:	52                   	push   edx
c0014bf7:	50                   	push   eax
c0014bf8:	e8 f3 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014bfd:	83 c4 10             	add    esp,0x10
c0014c00:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014c05:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c0b:	83 ec 08             	sub    esp,0x8
c0014c0e:	68 3c e8 01 c0       	push   0xc001e83c
c0014c13:	50                   	push   eax
c0014c14:	e8 1d 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c19:	83 c4 10             	add    esp,0x10
c0014c1c:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014c21:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c27:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c2b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0014c2e:	83 ec 08             	sub    esp,0x8
c0014c31:	52                   	push   edx
c0014c32:	50                   	push   eax
c0014c33:	e8 b8 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c38:	83 c4 10             	add    esp,0x10
c0014c3b:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014c40:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c46:	83 ec 08             	sub    esp,0x8
c0014c49:	68 44 e8 01 c0       	push   0xc001e844
c0014c4e:	50                   	push   eax
c0014c4f:	e8 e2 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c54:	83 c4 10             	add    esp,0x10
c0014c57:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014c5c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c62:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c66:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0014c69:	83 ec 08             	sub    esp,0x8
c0014c6c:	52                   	push   edx
c0014c6d:	50                   	push   eax
c0014c6e:	e8 7d 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c73:	83 c4 10             	add    esp,0x10
c0014c76:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014c7b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c81:	83 ec 08             	sub    esp,0x8
c0014c84:	68 4c e8 01 c0       	push   0xc001e84c
c0014c89:	50                   	push   eax
c0014c8a:	e8 a7 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c8f:	83 c4 10             	add    esp,0x10
c0014c92:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014c97:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ca1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014ca4:	83 ec 08             	sub    esp,0x8
c0014ca7:	52                   	push   edx
c0014ca8:	50                   	push   eax
c0014ca9:	e8 42 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014cae:	83 c4 10             	add    esp,0x10
c0014cb1:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014cb6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cbc:	83 ec 08             	sub    esp,0x8
c0014cbf:	68 54 e8 01 c0       	push   0xc001e854
c0014cc4:	50                   	push   eax
c0014cc5:	e8 6c 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014cca:	83 c4 10             	add    esp,0x10
c0014ccd:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014cd2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cd8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014cdc:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0014cdf:	83 ec 08             	sub    esp,0x8
c0014ce2:	52                   	push   edx
c0014ce3:	50                   	push   eax
c0014ce4:	e8 07 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014ce9:	83 c4 10             	add    esp,0x10
c0014cec:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014cf1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cf7:	83 ec 08             	sub    esp,0x8
c0014cfa:	68 5c e8 01 c0       	push   0xc001e85c
c0014cff:	50                   	push   eax
c0014d00:	e8 31 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014d05:	83 c4 10             	add    esp,0x10
c0014d08:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014d0d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d13:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014d17:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0014d1a:	83 ec 08             	sub    esp,0x8
c0014d1d:	52                   	push   edx
c0014d1e:	50                   	push   eax
c0014d1f:	e8 cc 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014d24:	83 c4 10             	add    esp,0x10
c0014d27:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014d2c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d32:	83 ec 08             	sub    esp,0x8
c0014d35:	68 64 e8 01 c0       	push   0xc001e864
c0014d3a:	50                   	push   eax
c0014d3b:	e8 f6 39 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014d40:	83 c4 10             	add    esp,0x10
c0014d43:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014d48:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d4e:	83 ec 08             	sub    esp,0x8
c0014d51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d55:	50                   	push   eax
c0014d56:	e8 95 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014d5b:	83 c4 10             	add    esp,0x10
c0014d5e:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014d63:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d69:	83 ec 08             	sub    esp,0x8
c0014d6c:	68 6d e8 01 c0       	push   0xc001e86d
c0014d71:	50                   	push   eax
c0014d72:	e8 bf 39 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014d77:	83 c4 10             	add    esp,0x10
c0014d7a:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014d7f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d85:	83 ec 08             	sub    esp,0x8
c0014d88:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d8c:	50                   	push   eax
c0014d8d:	e8 5e 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014d92:	83 c4 10             	add    esp,0x10
c0014d95:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014d9a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014da0:	83 ec 08             	sub    esp,0x8
c0014da3:	68 75 e8 01 c0       	push   0xc001e875
c0014da8:	50                   	push   eax
c0014da9:	e8 88 39 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014dae:	83 c4 10             	add    esp,0x10
c0014db1:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0014db6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014dbc:	83 ec 08             	sub    esp,0x8
c0014dbf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014dc3:	50                   	push   eax
c0014dc4:	e8 27 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014dc9:	83 c4 10             	add    esp,0x10
c0014dcc:	fa                   	cli    
c0014dcd:	f4                   	hlt    
c0014dce:	eb fe                	jmp    c0014dce <displayDebugInfo(regs*)+0x31f>

c0014dd0 <HalSystemIdle()>:
c0014dd0:	56                   	push   esi
c0014dd1:	53                   	push   ebx
c0014dd2:	83 ec 14             	sub    esp,0x14
c0014dd5:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0014dda:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014de0:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0014de6:	83 e0 04             	and    eax,0x4
c0014de9:	84 c0                	test   al,al
c0014deb:	0f 95 c0             	setne  al
c0014dee:	84 c0                	test   al,al
c0014df0:	74 4c                	je     c0014e3e <HalSystemIdle()+0x6e>
c0014df2:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0014df7:	83 ec 08             	sub    esp,0x8
c0014dfa:	68 e1 00 00 00       	push   0xe1
c0014dff:	50                   	push   eax
c0014e00:	e8 ed 1f ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0014e05:	83 c4 10             	add    esp,0x10
c0014e08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014e0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014e10:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0014e15:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e19:	83 e2 02             	and    edx,0x2
c0014e1c:	89 d3                	mov    ebx,edx
c0014e1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014e22:	83 e2 00             	and    edx,0x0
c0014e25:	89 d6                	mov    esi,edx
c0014e27:	56                   	push   esi
c0014e28:	53                   	push   ebx
c0014e29:	68 e1 00 00 00       	push   0xe1
c0014e2e:	50                   	push   eax
c0014e2f:	e8 ea 1f ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c0014e34:	83 c4 10             	add    esp,0x10
c0014e37:	e8 58 b3 fe ff       	call   c0000194 <doTPAUSE>
c0014e3c:	eb 01                	jmp    c0014e3f <HalSystemIdle()+0x6f>
c0014e3e:	f4                   	hlt    
c0014e3f:	90                   	nop
c0014e40:	83 c4 14             	add    esp,0x14
c0014e43:	5b                   	pop    ebx
c0014e44:	5e                   	pop    esi
c0014e45:	c3                   	ret    

c0014e46 <displayProgramFault(char const*)>:
c0014e46:	83 ec 0c             	sub    esp,0xc
c0014e49:	83 ec 0c             	sub    esp,0xc
c0014e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e50:	e8 8b 56 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014e55:	83 c4 10             	add    esp,0x10
c0014e58:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014e5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e5f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e62:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e68:	85 c0                	test   eax,eax
c0014e6a:	74 21                	je     c0014e8d <displayProgramFault(char const*)+0x47>
c0014e6c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014e71:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e73:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e76:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e7c:	6a 04                	push   0x4
c0014e7e:	6a 0f                	push   0xf
c0014e80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e84:	50                   	push   eax
c0014e85:	e8 1e 39 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014e8a:	83 c4 10             	add    esp,0x10
c0014e8d:	90                   	nop
c0014e8e:	83 c4 0c             	add    esp,0xc
c0014e91:	c3                   	ret    

c0014e92 <gpFault(regs*, void*)>:
c0014e92:	83 ec 1c             	sub    esp,0x1c
c0014e95:	c7 05 50 38 02 c0 a7 43 01 c0 	mov    DWORD PTR ds:0xc0023850,0xc00143a7
c0014e9f:	a1 50 38 02 c0       	mov    eax,ds:0xc0023850
c0014ea4:	85 c0                	test   eax,eax
c0014ea6:	74 1c                	je     c0014ec4 <gpFault(regs*, void*)+0x32>
c0014ea8:	a1 50 38 02 c0       	mov    eax,ds:0xc0023850
c0014ead:	83 ec 0c             	sub    esp,0xc
c0014eb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014eb4:	ff d0                	call   eax
c0014eb6:	83 c4 10             	add    esp,0x10
c0014eb9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014ebd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014ec2:	75 2e                	jne    c0014ef2 <gpFault(regs*, void*)+0x60>
c0014ec4:	83 ec 0c             	sub    esp,0xc
c0014ec7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ecb:	e8 df fb ff ff       	call   c0014aaf <displayDebugInfo(regs*)>
c0014ed0:	83 c4 10             	add    esp,0x10
c0014ed3:	83 ec 0c             	sub    esp,0xc
c0014ed6:	68 7d e8 01 c0       	push   0xc001e87d
c0014edb:	e8 66 ff ff ff       	call   c0014e46 <displayProgramFault(char const*)>
c0014ee0:	83 c4 10             	add    esp,0x10
c0014ee3:	83 ec 0c             	sub    esp,0xc
c0014ee6:	6a 00                	push   0x0
c0014ee8:	e8 af ee ff ff       	call   c0013d9c <Thr::terminateFromIRQ(int)>
c0014eed:	83 c4 10             	add    esp,0x10
c0014ef0:	eb 01                	jmp    c0014ef3 <gpFault(regs*, void*)+0x61>
c0014ef2:	90                   	nop
c0014ef3:	83 c4 1c             	add    esp,0x1c
c0014ef6:	c3                   	ret    

c0014ef7 <pgFault(regs*, void*)>:
c0014ef7:	83 ec 1c             	sub    esp,0x1c
c0014efa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014efe:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014f01:	0f 20 d0             	mov    eax,cr2
c0014f04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014f08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014f0c:	83 ec 04             	sub    esp,0x4
c0014f0f:	52                   	push   edx
c0014f10:	50                   	push   eax
c0014f11:	68 5c e9 01 c0       	push   0xc001e95c
c0014f16:	e8 c5 55 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014f1b:	83 c4 10             	add    esp,0x10
c0014f1e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014f23:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f28:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0014f2e:	0f 20 d2             	mov    edx,cr2
c0014f31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014f35:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014f39:	83 ec 08             	sub    esp,0x8
c0014f3c:	52                   	push   edx
c0014f3d:	50                   	push   eax
c0014f3e:	e8 cf 51 ff ff       	call   c000a112 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014f43:	83 c4 10             	add    esp,0x10
c0014f46:	84 c0                	test   al,al
c0014f48:	75 2e                	jne    c0014f78 <pgFault(regs*, void*)+0x81>
c0014f4a:	83 ec 0c             	sub    esp,0xc
c0014f4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f51:	e8 59 fb ff ff       	call   c0014aaf <displayDebugInfo(regs*)>
c0014f56:	83 c4 10             	add    esp,0x10
c0014f59:	83 ec 0c             	sub    esp,0xc
c0014f5c:	68 96 e8 01 c0       	push   0xc001e896
c0014f61:	e8 e0 fe ff ff       	call   c0014e46 <displayProgramFault(char const*)>
c0014f66:	83 c4 10             	add    esp,0x10
c0014f69:	83 ec 0c             	sub    esp,0xc
c0014f6c:	6a 00                	push   0x0
c0014f6e:	e8 29 ee ff ff       	call   c0013d9c <Thr::terminateFromIRQ(int)>
c0014f73:	83 c4 10             	add    esp,0x10
c0014f76:	eb 01                	jmp    c0014f79 <pgFault(regs*, void*)+0x82>
c0014f78:	90                   	nop
c0014f79:	83 c4 1c             	add    esp,0x1c
c0014f7c:	c3                   	ret    

c0014f7d <otherISRHandler(regs*, void*)>:
c0014f7d:	83 ec 0c             	sub    esp,0xc
c0014f80:	83 ec 0c             	sub    esp,0xc
c0014f83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f87:	e8 23 fb ff ff       	call   c0014aaf <displayDebugInfo(regs*)>
c0014f8c:	83 c4 10             	add    esp,0x10
c0014f8f:	83 ec 0c             	sub    esp,0xc
c0014f92:	68 84 e9 01 c0       	push   0xc001e984
c0014f97:	e8 aa fe ff ff       	call   c0014e46 <displayProgramFault(char const*)>
c0014f9c:	83 c4 10             	add    esp,0x10
c0014f9f:	83 ec 0c             	sub    esp,0xc
c0014fa2:	6a 00                	push   0x0
c0014fa4:	e8 f3 ed ff ff       	call   c0013d9c <Thr::terminateFromIRQ(int)>
c0014fa9:	83 c4 10             	add    esp,0x10
c0014fac:	90                   	nop
c0014fad:	83 c4 0c             	add    esp,0xc
c0014fb0:	c3                   	ret    

c0014fb1 <opcodeFault(regs*, void*)>:
c0014fb1:	55                   	push   ebp
c0014fb2:	89 e5                	mov    ebp,esp
c0014fb4:	83 ec 08             	sub    esp,0x8
c0014fb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fbd:	83 ec 08             	sub    esp,0x8
c0014fc0:	50                   	push   eax
c0014fc1:	68 a1 e8 01 c0       	push   0xc001e8a1
c0014fc6:	e8 15 55 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014fcb:	83 c4 10             	add    esp,0x10
c0014fce:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0014fd3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014fd9:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0014fdf:	84 c0                	test   al,al
c0014fe1:	74 21                	je     c0015004 <opcodeFault(regs*, void*)+0x53>
c0014fe3:	83 ec 0c             	sub    esp,0xc
c0014fe6:	68 ac e9 01 c0       	push   0xc001e9ac
c0014feb:	e8 f0 54 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014ff0:	83 c4 10             	add    esp,0x10
c0014ff3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ff9:	8d 50 19             	lea    edx,[eax+0x19]
c0014ffc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fff:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015002:	eb 2b                	jmp    c001502f <opcodeFault(regs*, void*)+0x7e>
c0015004:	83 ec 0c             	sub    esp,0xc
c0015007:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001500a:	e8 a0 fa ff ff       	call   c0014aaf <displayDebugInfo(regs*)>
c001500f:	83 c4 10             	add    esp,0x10
c0015012:	83 ec 0c             	sub    esp,0xc
c0015015:	68 af e8 01 c0       	push   0xc001e8af
c001501a:	e8 27 fe ff ff       	call   c0014e46 <displayProgramFault(char const*)>
c001501f:	83 c4 10             	add    esp,0x10
c0015022:	83 ec 0c             	sub    esp,0xc
c0015025:	6a 00                	push   0x0
c0015027:	e8 70 ed ff ff       	call   c0013d9c <Thr::terminateFromIRQ(int)>
c001502c:	83 c4 10             	add    esp,0x10
c001502f:	c9                   	leave  
c0015030:	c3                   	ret    

c0015031 <i386SaveCoprocessor(void*)>:
c0015031:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015035:	83 c0 3f             	add    eax,0x3f
c0015038:	83 e0 c0             	and    eax,0xffffffc0
c001503b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001503f:	ff 25 4c 38 02 c0    	jmp    DWORD PTR ds:0xc002384c

c0015045 <i386LoadCoprocessor(void*)>:
c0015045:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015049:	83 c0 3f             	add    eax,0x3f
c001504c:	83 e0 c0             	and    eax,0xffffffc0
c001504f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015053:	ff 25 48 38 02 c0    	jmp    DWORD PTR ds:0xc0023848

c0015059 <x87EmulHandler(regs*, void*)>:
c0015059:	53                   	push   ebx
c001505a:	83 ec 08             	sub    esp,0x8
c001505d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015062:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0015066:	74 10                	je     c0015078 <x87EmulHandler(regs*, void*)+0x1f>
c0015068:	83 ec 0c             	sub    esp,0xc
c001506b:	68 bc e8 01 c0       	push   0xc001e8bc
c0015070:	e8 ea b0 ff ff       	call   c001015f <KePanic(char const*)>
c0015075:	83 c4 10             	add    esp,0x10
c0015078:	0f 20 c0             	mov    eax,cr0
c001507b:	a8 08                	test   al,0x8
c001507d:	74 59                	je     c00150d8 <x87EmulHandler(regs*, void*)+0x7f>
c001507f:	0f 06                	clts   
c0015081:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0015086:	85 c0                	test   eax,eax
c0015088:	74 0e                	je     c0015098 <x87EmulHandler(regs*, void*)+0x3f>
c001508a:	83 ec 0c             	sub    esp,0xc
c001508d:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015090:	e8 9c ff ff ff       	call   c0015031 <i386SaveCoprocessor(void*)>
c0015095:	83 c4 10             	add    esp,0x10
c0015098:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001509e:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00150a2:	75 12                	jne    c00150b6 <x87EmulHandler(regs*, void*)+0x5d>
c00150a4:	83 ec 0c             	sub    esp,0xc
c00150a7:	68 40 02 00 00       	push   0x240
c00150ac:	e8 08 27 ff ff       	call   c00077b9 <malloc>
c00150b1:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00150b4:	eb 10                	jmp    c00150c6 <x87EmulHandler(regs*, void*)+0x6d>
c00150b6:	83 ec 0c             	sub    esp,0xc
c00150b9:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c00150be:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00150c1:	e8 7f ff ff ff       	call   c0015045 <i386LoadCoprocessor(void*)>
c00150c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150cb:	83 c4 10             	add    esp,0x10
c00150ce:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c00150d3:	83 c4 08             	add    esp,0x8
c00150d6:	5b                   	pop    ebx
c00150d7:	c3                   	ret    
c00150d8:	83 ec 0c             	sub    esp,0xc
c00150db:	68 d0 e8 01 c0       	push   0xc001e8d0
c00150e0:	e8 fb 53 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c00150e5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00150ed:	83 c4 18             	add    esp,0x18
c00150f0:	5b                   	pop    ebx
c00150f1:	e9 a6 ec ff ff       	jmp    c0013d9c <Thr::terminateFromIRQ(int)>

c00150f6 <HalInitialiseCoprocessor()>:
c00150f6:	83 ec 10             	sub    esp,0x10
c00150f9:	c7 05 44 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023844,0x0
c0015103:	6a 00                	push   0x0
c0015105:	68 59 50 01 c0       	push   0xc0015059
c001510a:	6a 07                	push   0x7
c001510c:	e8 43 6d ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015111:	e8 9a 65 00 00       	call   c001b6b0 <avxDetect>
c0015116:	83 c4 10             	add    esp,0x10
c0015119:	85 c0                	test   eax,eax
c001511b:	74 1c                	je     c0015139 <HalInitialiseCoprocessor()+0x43>
c001511d:	c7 05 4c 38 02 c0 da b6 01 c0 	mov    DWORD PTR ds:0xc002384c,0xc001b6da
c0015127:	c7 05 48 38 02 c0 eb b6 01 c0 	mov    DWORD PTR ds:0xc0023848,0xc001b6eb
c0015131:	83 c4 0c             	add    esp,0xc
c0015134:	e9 c3 65 00 00       	jmp    c001b6fc <avxInit>
c0015139:	e8 f2 67 00 00       	call   c001b930 <absolutelyNoChanceInHell>
c001513e:	85 c0                	test   eax,eax
c0015140:	74 1c                	je     c001515e <HalInitialiseCoprocessor()+0x68>
c0015142:	c7 05 4c 38 02 c0 48 b9 01 c0 	mov    DWORD PTR ds:0xc002384c,0xc001b948
c001514c:	c7 05 48 38 02 c0 50 b9 01 c0 	mov    DWORD PTR ds:0xc0023848,0xc001b950
c0015156:	83 c4 0c             	add    esp,0xc
c0015159:	e9 fa 67 00 00       	jmp    c001b958 <sseInit>
c001515e:	e8 13 68 00 00       	call   c001b976 <x87Detect>
c0015163:	85 c0                	test   eax,eax
c0015165:	74 1c                	je     c0015183 <HalInitialiseCoprocessor()+0x8d>
c0015167:	c7 05 4c 38 02 c0 91 b9 01 c0 	mov    DWORD PTR ds:0xc002384c,0xc001b991
c0015171:	c7 05 48 38 02 c0 98 b9 01 c0 	mov    DWORD PTR ds:0xc0023848,0xc001b998
c001517b:	83 c4 0c             	add    esp,0xc
c001517e:	e9 1c 68 00 00       	jmp    c001b99f <x87Init>
c0015183:	c7 05 4c 38 02 c0 7c 4a 01 c0 	mov    DWORD PTR ds:0xc002384c,0xc0014a7c
c001518d:	c7 05 48 38 02 c0 7c 4a 01 c0 	mov    DWORD PTR ds:0xc0023848,0xc0014a7c
c0015197:	0f 20 c0             	mov    eax,cr0
c001519a:	83 c8 04             	or     eax,0x4
c001519d:	0f 22 c0             	mov    cr0,eax
c00151a0:	83 c4 0c             	add    esp,0xc
c00151a3:	c3                   	ret    

c00151a4 <HalPanic(char const*)>:
c00151a4:	53                   	push   ebx
c00151a5:	83 ec 10             	sub    esp,0x10
c00151a8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00151ac:	fa                   	cli    
c00151ad:	53                   	push   ebx
c00151ae:	68 e6 e8 01 c0       	push   0xc001e8e6
c00151b3:	e8 28 53 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c00151b8:	83 c4 0c             	add    esp,0xc
c00151bb:	6a 01                	push   0x1
c00151bd:	6a 0f                	push   0xf
c00151bf:	ff 35 44 05 02 c0    	push   DWORD PTR ds:0xc0020544
c00151c5:	e8 80 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00151ca:	58                   	pop    eax
c00151cb:	ff 35 44 05 02 c0    	push   DWORD PTR ds:0xc0020544
c00151d1:	e8 6c 32 ff ff       	call   c0008442 <VgaText::clearScreen()>
c00151d6:	5a                   	pop    edx
c00151d7:	59                   	pop    ecx
c00151d8:	68 88 d3 01 c0       	push   0xc001d388
c00151dd:	ff 35 44 05 02 c0    	push   DWORD PTR ds:0xc0020544
c00151e3:	e8 9a 30 ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c00151e8:	83 c4 0c             	add    esp,0xc
c00151eb:	6a 01                	push   0x1
c00151ed:	6a 0f                	push   0xf
c00151ef:	ff 35 44 05 02 c0    	push   DWORD PTR ds:0xc0020544
c00151f5:	e8 50 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00151fa:	58                   	pop    eax
c00151fb:	5a                   	pop    edx
c00151fc:	68 ff e8 01 c0       	push   0xc001e8ff
c0015201:	ff 35 44 05 02 c0    	push   DWORD PTR ds:0xc0020544
c0015207:	e8 2a 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001520c:	83 c4 0c             	add    esp,0xc
c001520f:	6a 0f                	push   0xf
c0015211:	6a 01                	push   0x1
c0015213:	ff 35 44 05 02 c0    	push   DWORD PTR ds:0xc0020544
c0015219:	e8 2c 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001521e:	59                   	pop    ecx
c001521f:	58                   	pop    eax
c0015220:	68 08 e9 01 c0       	push   0xc001e908
c0015225:	ff 35 44 05 02 c0    	push   DWORD PTR ds:0xc0020544
c001522b:	e8 06 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015230:	83 c4 0c             	add    esp,0xc
c0015233:	6a 01                	push   0x1
c0015235:	6a 0f                	push   0xf
c0015237:	ff 35 44 05 02 c0    	push   DWORD PTR ds:0xc0020544
c001523d:	e8 08 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015242:	58                   	pop    eax
c0015243:	5a                   	pop    edx
c0015244:	68 4c e9 01 c0       	push   0xc001e94c
c0015249:	ff 35 44 05 02 c0    	push   DWORD PTR ds:0xc0020544
c001524f:	e8 e2 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015254:	59                   	pop    ecx
c0015255:	58                   	pop    eax
c0015256:	68 15 e9 01 c0       	push   0xc001e915
c001525b:	ff 35 44 05 02 c0    	push   DWORD PTR ds:0xc0020544
c0015261:	e8 d0 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015266:	58                   	pop    eax
c0015267:	5a                   	pop    edx
c0015268:	68 4f e9 01 c0       	push   0xc001e94f
c001526d:	ff 35 44 05 02 c0    	push   DWORD PTR ds:0xc0020544
c0015273:	e8 be 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015278:	59                   	pop    ecx
c0015279:	58                   	pop    eax
c001527a:	53                   	push   ebx
c001527b:	ff 35 44 05 02 c0    	push   DWORD PTR ds:0xc0020544
c0015281:	e8 b0 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015286:	58                   	pop    eax
c0015287:	5a                   	pop    edx
c0015288:	68 4c e9 01 c0       	push   0xc001e94c
c001528d:	ff 35 44 05 02 c0    	push   DWORD PTR ds:0xc0020544
c0015293:	e8 9e 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015298:	83 c4 10             	add    esp,0x10
c001529b:	eb fe                	jmp    c001529b <HalPanic(char const*)+0xf7>

c001529d <HalQueryPerformanceCounter()>:
c001529d:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c00152a2:	31 d2                	xor    edx,edx
c00152a4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00152aa:	31 c0                	xor    eax,eax
c00152ac:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00152b3:	74 02                	je     c00152b7 <HalQueryPerformanceCounter()+0x1a>
c00152b5:	0f 31                	rdtsc  
c00152b7:	c3                   	ret    

c00152b8 <HalInitialise()>:
c00152b8:	53                   	push   ebx
c00152b9:	83 ec 08             	sub    esp,0x8
c00152bc:	e8 c6 6d ff ff       	call   c000c087 <setupINTS()>
c00152c1:	80 3d c0 2d 02 c0 00 	cmp    BYTE PTR ds:0xc0022dc0,0x0
c00152c8:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c00152cd:	75 07                	jne    c00152d6 <HalInitialise()+0x1e>
c00152cf:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00152d6:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00152dc:	83 e0 01             	and    eax,0x1
c00152df:	a2 40 38 02 c0       	mov    ds:0xc0023840,al
c00152e4:	e8 a7 02 00 00       	call   c0015590 <picOpen()>
c00152e9:	80 3d 40 38 02 c0 00 	cmp    BYTE PTR ds:0xc0023840,0x0
c00152f0:	74 0a                	je     c00152fc <HalInitialise()+0x44>
c00152f2:	e8 e1 01 00 00       	call   c00154d8 <picDisable()>
c00152f7:	e8 26 5d 00 00       	call   c001b022 <apicOpen()>
c00152fc:	bb 0f 00 00 00       	mov    ebx,0xf
c0015301:	50                   	push   eax
c0015302:	6a 00                	push   0x0
c0015304:	68 7d 4f 01 c0       	push   0xc0014f7d
c0015309:	6a 00                	push   0x0
c001530b:	e8 44 6b ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015310:	83 c4 0c             	add    esp,0xc
c0015313:	6a 00                	push   0x0
c0015315:	68 7d 4f 01 c0       	push   0xc0014f7d
c001531a:	6a 01                	push   0x1
c001531c:	e8 33 6b ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015321:	83 c4 0c             	add    esp,0xc
c0015324:	6a 00                	push   0x0
c0015326:	68 7d 4a 01 c0       	push   0xc0014a7d
c001532b:	6a 02                	push   0x2
c001532d:	e8 22 6b ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015332:	83 c4 0c             	add    esp,0xc
c0015335:	6a 00                	push   0x0
c0015337:	68 7d 4f 01 c0       	push   0xc0014f7d
c001533c:	6a 03                	push   0x3
c001533e:	e8 11 6b ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015343:	83 c4 0c             	add    esp,0xc
c0015346:	6a 00                	push   0x0
c0015348:	68 7d 4f 01 c0       	push   0xc0014f7d
c001534d:	6a 04                	push   0x4
c001534f:	e8 00 6b ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015354:	83 c4 0c             	add    esp,0xc
c0015357:	6a 00                	push   0x0
c0015359:	68 7d 4f 01 c0       	push   0xc0014f7d
c001535e:	6a 05                	push   0x5
c0015360:	e8 ef 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015365:	83 c4 0c             	add    esp,0xc
c0015368:	6a 00                	push   0x0
c001536a:	68 b1 4f 01 c0       	push   0xc0014fb1
c001536f:	6a 06                	push   0x6
c0015371:	e8 de 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015376:	83 c4 0c             	add    esp,0xc
c0015379:	6a 00                	push   0x0
c001537b:	68 96 4a 01 c0       	push   0xc0014a96
c0015380:	6a 08                	push   0x8
c0015382:	e8 cd 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015387:	83 c4 0c             	add    esp,0xc
c001538a:	6a 00                	push   0x0
c001538c:	68 7d 4f 01 c0       	push   0xc0014f7d
c0015391:	6a 09                	push   0x9
c0015393:	e8 bc 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015398:	83 c4 0c             	add    esp,0xc
c001539b:	6a 00                	push   0x0
c001539d:	68 7d 4f 01 c0       	push   0xc0014f7d
c00153a2:	6a 0a                	push   0xa
c00153a4:	e8 ab 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153a9:	83 c4 0c             	add    esp,0xc
c00153ac:	6a 00                	push   0x0
c00153ae:	68 7d 4f 01 c0       	push   0xc0014f7d
c00153b3:	6a 0b                	push   0xb
c00153b5:	e8 9a 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153ba:	83 c4 0c             	add    esp,0xc
c00153bd:	6a 00                	push   0x0
c00153bf:	68 92 4e 01 c0       	push   0xc0014e92
c00153c4:	6a 0d                	push   0xd
c00153c6:	e8 89 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153cb:	83 c4 0c             	add    esp,0xc
c00153ce:	6a 00                	push   0x0
c00153d0:	68 f7 4e 01 c0       	push   0xc0014ef7
c00153d5:	6a 0e                	push   0xe
c00153d7:	e8 78 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153dc:	83 c4 10             	add    esp,0x10
c00153df:	50                   	push   eax
c00153e0:	6a 00                	push   0x0
c00153e2:	68 7d 4f 01 c0       	push   0xc0014f7d
c00153e7:	53                   	push   ebx
c00153e8:	43                   	inc    ebx
c00153e9:	e8 66 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153ee:	83 c4 10             	add    esp,0x10
c00153f1:	83 fb 1e             	cmp    ebx,0x1e
c00153f4:	75 e9                	jne    c00153df <HalInitialise()+0x127>
c00153f6:	50                   	push   eax
c00153f7:	6a 00                	push   0x0
c00153f9:	68 3f 10 01 c0       	push   0xc001103f
c00153fe:	6a 60                	push   0x60
c0015400:	e8 4f 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015405:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c001540a:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015414:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001541b:	e8 99 23 ff ff       	call   c00077b9 <malloc>
c0015420:	89 04 24             	mov    DWORD PTR [esp],eax
c0015423:	89 c3                	mov    ebx,eax
c0015425:	e8 2e 09 00 00       	call   c0015d58 <RTC::RTC()>
c001542a:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015434:	5a                   	pop    edx
c0015435:	59                   	pop    ecx
c0015436:	53                   	push   ebx
c0015437:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c001543d:	e8 de 64 ff ff       	call   c000b920 <Device::addChild(Device*)>
c0015442:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015444:	6a 00                	push   0x0
c0015446:	6a 00                	push   0x0
c0015448:	6a 00                	push   0x0
c001544a:	53                   	push   ebx
c001544b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001544e:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0015453:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0015459:	83 c4 28             	add    esp,0x28
c001545c:	5b                   	pop    ebx
c001545d:	c3                   	ret    

c001545e <HalMakeBeep(int)>:
c001545e:	53                   	push   ebx
c001545f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015463:	85 db                	test   ebx,ebx
c0015465:	75 07                	jne    c001546e <HalMakeBeep(int)+0x10>
c0015467:	e4 61                	in     al,0x61
c0015469:	83 e0 fc             	and    eax,0xfffffffc
c001546c:	eb 26                	jmp    c0015494 <HalMakeBeep(int)+0x36>
c001546e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0015473:	99                   	cdq    
c0015474:	f7 fb                	idiv   ebx
c0015476:	89 c1                	mov    ecx,eax
c0015478:	b0 b6                	mov    al,0xb6
c001547a:	e6 43                	out    0x43,al
c001547c:	88 c8                	mov    al,cl
c001547e:	e6 42                	out    0x42,al
c0015480:	89 c8                	mov    eax,ecx
c0015482:	c1 e8 08             	shr    eax,0x8
c0015485:	e6 42                	out    0x42,al
c0015487:	e4 61                	in     al,0x61
c0015489:	88 c2                	mov    dl,al
c001548b:	83 ca 03             	or     edx,0x3
c001548e:	38 c2                	cmp    dl,al
c0015490:	74 04                	je     c0015496 <HalMakeBeep(int)+0x38>
c0015492:	88 d0                	mov    al,dl
c0015494:	e6 61                	out    0x61,al
c0015496:	5b                   	pop    ebx
c0015497:	c3                   	ret    

c0015498 <HalGetRand()>:
c0015498:	31 c0                	xor    eax,eax
c001549a:	c3                   	ret    

c001549b <HalEndOfInterrupt(int)>:
c001549b:	80 3d 40 38 02 c0 00 	cmp    BYTE PTR ds:0xc0023840,0x0
c00154a2:	74 23                	je     c00154c7 <HalEndOfInterrupt(int)+0x2c>
c00154a4:	83 ec 14             	sub    esp,0x14
c00154a7:	6a 1b                	push   0x1b
c00154a9:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c00154af:	e8 3e 19 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00154b4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00154b9:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00154c3:	83 c4 1c             	add    esp,0x1c
c00154c6:	c3                   	ret    
c00154c7:	e9 54 02 00 00       	jmp    c0015720 <picEOI(int)>

c00154cc <HalRestart()>:
c00154cc:	c3                   	ret    

c00154cd <HalShutdown()>:
c00154cd:	c3                   	ret    

c00154ce <HalSleep()>:
c00154ce:	c3                   	ret    
c00154cf:	90                   	nop

c00154d0 <picIoWait()>:
c00154d0:	eb 00                	jmp    c00154d2 <picIoWait()+0x2>
c00154d2:	eb 00                	jmp    c00154d4 <picIoWait()+0x4>
c00154d4:	90                   	nop
c00154d5:	c3                   	ret    
c00154d6:	66 90                	xchg   ax,ax

c00154d8 <picDisable()>:
c00154d8:	83 ec 10             	sub    esp,0x10
c00154db:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00154e2:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00154e7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00154eb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00154f0:	ee                   	out    dx,al
c00154f1:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00154f8:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00154fd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015501:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015506:	ee                   	out    dx,al
c0015507:	90                   	nop
c0015508:	83 c4 10             	add    esp,0x10
c001550b:	c3                   	ret    

c001550c <picGetIRQReg(int)>:
c001550c:	83 ec 10             	sub    esp,0x10
c001550f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015513:	25 ff 00 00 00       	and    eax,0xff
c0015518:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001551f:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015523:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015527:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001552c:	ee                   	out    dx,al
c001552d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015531:	25 ff 00 00 00       	and    eax,0xff
c0015536:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001553d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015541:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015545:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001554a:	ee                   	out    dx,al
c001554b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015552:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015557:	89 c2                	mov    edx,eax
c0015559:	ec                   	in     al,dx
c001555a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001555e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015562:	25 ff 00 00 00       	and    eax,0xff
c0015567:	c1 e0 08             	shl    eax,0x8
c001556a:	89 c1                	mov    ecx,eax
c001556c:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015573:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015578:	89 c2                	mov    edx,eax
c001557a:	ec                   	in     al,dx
c001557b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001557f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015583:	25 ff 00 00 00       	and    eax,0xff
c0015588:	09 c8                	or     eax,ecx
c001558a:	83 c4 10             	add    esp,0x10
c001558d:	c3                   	ret    
c001558e:	66 90                	xchg   ax,ax

c0015590 <picOpen()>:
c0015590:	83 ec 50             	sub    esp,0x50
c0015593:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001559a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001559f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00155a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155a7:	ee                   	out    dx,al
c00155a8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00155af:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00155b4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00155b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00155bc:	ee                   	out    dx,al
c00155bd:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00155c5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00155cd:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00155d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00155d8:	89 c2                	mov    edx,eax
c00155da:	ec                   	in     al,dx
c00155db:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00155df:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00155e3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00155e7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00155ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00155f2:	89 c2                	mov    edx,eax
c00155f4:	ec                   	in     al,dx
c00155f5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00155f9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00155fd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015601:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015608:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001560d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015611:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015615:	ee                   	out    dx,al
c0015616:	e8 b5 fe ff ff       	call   c00154d0 <picIoWait()>
c001561b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015622:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015627:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001562b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001562f:	ee                   	out    dx,al
c0015630:	e8 9b fe ff ff       	call   c00154d0 <picIoWait()>
c0015635:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015639:	25 ff 00 00 00       	and    eax,0xff
c001563e:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015645:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015649:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001564d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015651:	ee                   	out    dx,al
c0015652:	e8 79 fe ff ff       	call   c00154d0 <picIoWait()>
c0015657:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001565b:	25 ff 00 00 00       	and    eax,0xff
c0015660:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015667:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001566b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001566f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015673:	ee                   	out    dx,al
c0015674:	e8 57 fe ff ff       	call   c00154d0 <picIoWait()>
c0015679:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015680:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015685:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015689:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001568d:	ee                   	out    dx,al
c001568e:	e8 3d fe ff ff       	call   c00154d0 <picIoWait()>
c0015693:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001569a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001569f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00156a3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00156a7:	ee                   	out    dx,al
c00156a8:	e8 23 fe ff ff       	call   c00154d0 <picIoWait()>
c00156ad:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00156b4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00156b9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00156bd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00156c1:	ee                   	out    dx,al
c00156c2:	e8 09 fe ff ff       	call   c00154d0 <picIoWait()>
c00156c7:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00156ce:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00156d3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00156d7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00156db:	ee                   	out    dx,al
c00156dc:	e8 ef fd ff ff       	call   c00154d0 <picIoWait()>
c00156e1:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c00156e5:	25 ff 00 00 00       	and    eax,0xff
c00156ea:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00156f1:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00156f5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00156f9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00156fd:	ee                   	out    dx,al
c00156fe:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015702:	25 ff 00 00 00       	and    eax,0xff
c0015707:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001570e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015712:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015716:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001571a:	ee                   	out    dx,al
c001571b:	90                   	nop
c001571c:	83 c4 50             	add    esp,0x50
c001571f:	c3                   	ret    

c0015720 <picEOI(int)>:
c0015720:	83 ec 10             	sub    esp,0x10
c0015723:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015728:	75 22                	jne    c001574c <picEOI(int)+0x2c>
c001572a:	6a 0b                	push   0xb
c001572c:	e8 db fd ff ff       	call   c001550c <picGetIRQReg(int)>
c0015731:	83 c4 04             	add    esp,0x4
c0015734:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015739:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001573e:	25 ff ff 00 00       	and    eax,0xffff
c0015743:	25 80 00 00 00       	and    eax,0x80
c0015748:	74 72                	je     c00157bc <picEOI(int)+0x9c>
c001574a:	66 90                	xchg   ax,ax
c001574c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015751:	75 31                	jne    c0015784 <picEOI(int)+0x64>
c0015753:	6a 0b                	push   0xb
c0015755:	e8 b2 fd ff ff       	call   c001550c <picGetIRQReg(int)>
c001575a:	83 c4 04             	add    esp,0x4
c001575d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015762:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015766:	66 85 c0             	test   ax,ax
c0015769:	78 19                	js     c0015784 <picEOI(int)+0x64>
c001576b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015772:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015777:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001577b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015780:	ee                   	out    dx,al
c0015781:	eb 3d                	jmp    c00157c0 <picEOI(int)+0xa0>
c0015783:	90                   	nop
c0015784:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015789:	7e 19                	jle    c00157a4 <picEOI(int)+0x84>
c001578b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015792:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015797:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001579b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00157a0:	ee                   	out    dx,al
c00157a1:	8d 76 00             	lea    esi,[esi+0x0]
c00157a4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00157ab:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00157b0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00157b4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00157b9:	ee                   	out    dx,al
c00157ba:	eb 04                	jmp    c00157c0 <picEOI(int)+0xa0>
c00157bc:	90                   	nop
c00157bd:	8d 76 00             	lea    esi,[esi+0x0]
c00157c0:	83 c4 10             	add    esp,0x10
c00157c3:	c3                   	ret    

c00157c4 <RTC::open(int, int, void*)>:
c00157c4:	31 c0                	xor    eax,eax
c00157c6:	c3                   	ret    
c00157c7:	90                   	nop

c00157c8 <RTC::close(int, int, void*)>:
c00157c8:	31 c0                	xor    eax,eax
c00157ca:	c3                   	ret    
c00157cb:	90                   	nop

c00157cc <RTC::timeInSecondsUTC()>:
c00157cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00157d6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00157dc:	c3                   	ret    
c00157dd:	90                   	nop

c00157de <RTC::timeInDatetimeUTC()>:
c00157de:	53                   	push   ebx
c00157df:	83 ec 14             	sub    esp,0x14
c00157e2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00157e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00157ec:	50                   	push   eax
c00157ed:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00157f0:	83 c4 0c             	add    esp,0xc
c00157f3:	52                   	push   edx
c00157f4:	50                   	push   eax
c00157f5:	53                   	push   ebx
c00157f6:	e8 99 5e ff ff       	call   c000b694 <secondsToDatetime(unsigned long long)>
c00157fb:	89 d8                	mov    eax,ebx
c00157fd:	83 c4 14             	add    esp,0x14
c0015800:	5b                   	pop    ebx
c0015801:	c2 04 00             	ret    0x4

c0015804 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015804:	56                   	push   esi
c0015805:	53                   	push   ebx
c0015806:	83 ec 14             	sub    esp,0x14
c0015809:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001580d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001580f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015812:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015816:	52                   	push   edx
c0015817:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001581b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001581f:	50                   	push   eax
c0015820:	e8 6f 5e ff ff       	call   c000b694 <secondsToDatetime(unsigned long long)>
c0015825:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015829:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001582d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015831:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015835:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015839:	89 f0                	mov    eax,esi
c001583b:	83 c4 20             	add    esp,0x20
c001583e:	5b                   	pop    ebx
c001583f:	5e                   	pop    esi
c0015840:	ff e0                	jmp    eax

c0015842 <RTC::~RTC()>:
c0015842:	83 ec 0c             	sub    esp,0xc
c0015845:	ba ec e9 01 c0       	mov    edx,0xc001e9ec
c001584a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001584e:	89 10                	mov    DWORD PTR [eax],edx
c0015850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015854:	83 ec 0c             	sub    esp,0xc
c0015857:	50                   	push   eax
c0015858:	e8 bb 5b ff ff       	call   c000b418 <Clock::~Clock()>
c001585d:	83 c4 10             	add    esp,0x10
c0015860:	90                   	nop
c0015861:	83 c4 0c             	add    esp,0xc
c0015864:	c3                   	ret    
c0015865:	90                   	nop

c0015866 <RTC::~RTC()>:
c0015866:	83 ec 0c             	sub    esp,0xc
c0015869:	83 ec 0c             	sub    esp,0xc
c001586c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015870:	e8 cd ff ff ff       	call   c0015842 <RTC::~RTC()>
c0015875:	83 c4 10             	add    esp,0x10
c0015878:	83 ec 08             	sub    esp,0x8
c001587b:	68 60 01 00 00       	push   0x160
c0015880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015884:	e8 61 4b ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c0015889:	83 c4 10             	add    esp,0x10
c001588c:	83 c4 0c             	add    esp,0xc
c001588f:	c3                   	ret    

c0015890 <RTC::get_update_in_progress_flag()>:
c0015890:	83 ec 14             	sub    esp,0x14
c0015893:	6a 0a                	push   0xa
c0015895:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c001589b:	e8 06 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158a0:	83 c4 1c             	add    esp,0x1c
c00158a3:	c0 e8 07             	shr    al,0x7
c00158a6:	c3                   	ret    
c00158a7:	90                   	nop

c00158a8 <RTC::completeRTCRefresh()>:
c00158a8:	55                   	push   ebp
c00158a9:	57                   	push   edi
c00158aa:	56                   	push   esi
c00158ab:	53                   	push   ebx
c00158ac:	83 ec 2c             	sub    esp,0x2c
c00158af:	8b 1d cc 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022acc
c00158b5:	83 ec 0c             	sub    esp,0xc
c00158b8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00158bc:	e8 cf ff ff ff       	call   c0015890 <RTC::get_update_in_progress_flag()>
c00158c1:	83 c4 10             	add    esp,0x10
c00158c4:	84 c0                	test   al,al
c00158c6:	74 0e                	je     c00158d6 <RTC::completeRTCRefresh()+0x2e>
c00158c8:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00158ce:	3b 05 cc 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022acc
c00158d4:	73 df                	jae    c00158b5 <RTC::completeRTCRefresh()+0xd>
c00158d6:	55                   	push   ebp
c00158d7:	55                   	push   ebp
c00158d8:	6a 00                	push   0x0
c00158da:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c00158e0:	e8 c1 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158e5:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00158e9:	58                   	pop    eax
c00158ea:	5a                   	pop    edx
c00158eb:	6a 02                	push   0x2
c00158ed:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c00158f3:	e8 ae 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158f8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00158fc:	59                   	pop    ecx
c00158fd:	5b                   	pop    ebx
c00158fe:	6a 04                	push   0x4
c0015900:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c0015906:	e8 9b 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001590b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001590f:	5e                   	pop    esi
c0015910:	5f                   	pop    edi
c0015911:	6a 07                	push   0x7
c0015913:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c0015919:	e8 88 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001591e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015922:	5d                   	pop    ebp
c0015923:	58                   	pop    eax
c0015924:	6a 08                	push   0x8
c0015926:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c001592c:	e8 75 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015931:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015935:	58                   	pop    eax
c0015936:	5a                   	pop    edx
c0015937:	6a 09                	push   0x9
c0015939:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c001593f:	e8 62 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015944:	83 c4 10             	add    esp,0x10
c0015947:	0f b6 e8             	movzx  ebp,al
c001594a:	8b 1d cc 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022acc
c0015950:	83 ec 0c             	sub    esp,0xc
c0015953:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015957:	e8 34 ff ff ff       	call   c0015890 <RTC::get_update_in_progress_flag()>
c001595c:	83 c4 10             	add    esp,0x10
c001595f:	84 c0                	test   al,al
c0015961:	74 0e                	je     c0015971 <RTC::completeRTCRefresh()+0xc9>
c0015963:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015969:	3b 05 cc 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022acc
c001596f:	73 df                	jae    c0015950 <RTC::completeRTCRefresh()+0xa8>
c0015971:	50                   	push   eax
c0015972:	50                   	push   eax
c0015973:	6a 00                	push   0x0
c0015975:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c001597b:	e8 26 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015980:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015984:	58                   	pop    eax
c0015985:	5a                   	pop    edx
c0015986:	6a 02                	push   0x2
c0015988:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c001598e:	e8 13 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015993:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015997:	59                   	pop    ecx
c0015998:	5b                   	pop    ebx
c0015999:	6a 04                	push   0x4
c001599b:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c00159a1:	e8 00 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00159a6:	5e                   	pop    esi
c00159a7:	88 c3                	mov    bl,al
c00159a9:	5f                   	pop    edi
c00159aa:	6a 07                	push   0x7
c00159ac:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c00159b2:	e8 ef 14 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00159b7:	89 c6                	mov    esi,eax
c00159b9:	58                   	pop    eax
c00159ba:	5a                   	pop    edx
c00159bb:	6a 08                	push   0x8
c00159bd:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c00159c3:	e8 de 14 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00159c8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00159cc:	59                   	pop    ecx
c00159cd:	5f                   	pop    edi
c00159ce:	6a 09                	push   0x9
c00159d0:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c00159d6:	e8 cb 14 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00159db:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00159df:	0f b6 f8             	movzx  edi,al
c00159e2:	83 c4 10             	add    esp,0x10
c00159e5:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c00159e9:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00159ed:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c00159f1:	89 f1                	mov    ecx,esi
c00159f3:	0f 94 c0             	sete   al
c00159f6:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c00159fa:	0f 94 c2             	sete   dl
c00159fd:	21 d0                	and    eax,edx
c00159ff:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015a03:	0f 94 c2             	sete   dl
c0015a06:	21 c2                	and    edx,eax
c0015a08:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015a0c:	0f 94 c0             	sete   al
c0015a0f:	21 d0                	and    eax,edx
c0015a11:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015a15:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015a19:	0f 94 c1             	sete   cl
c0015a1c:	84 c8                	test   al,cl
c0015a1e:	75 29                	jne    c0015a49 <RTC::completeRTCRefresh()+0x1a1>
c0015a20:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015a24:	89 fd                	mov    ebp,edi
c0015a26:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015a2a:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015a2e:	89 f0                	mov    eax,esi
c0015a30:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015a34:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015a38:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015a3c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015a40:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015a44:	e9 01 ff ff ff       	jmp    c001594a <RTC::completeRTCRefresh()+0xa2>
c0015a49:	39 fd                	cmp    ebp,edi
c0015a4b:	75 d3                	jne    c0015a20 <RTC::completeRTCRefresh()+0x178>
c0015a4d:	55                   	push   ebp
c0015a4e:	55                   	push   ebp
c0015a4f:	6a 0b                	push   0xb
c0015a51:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c0015a57:	e8 4a 14 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015a5c:	83 c4 10             	add    esp,0x10
c0015a5f:	89 c5                	mov    ebp,eax
c0015a61:	a8 04                	test   al,0x4
c0015a63:	75 78                	jne    c0015add <RTC::completeRTCRefresh()+0x235>
c0015a65:	b1 0a                	mov    cl,0xa
c0015a67:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015a6b:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015a6f:	83 e2 0f             	and    edx,0xf
c0015a72:	c0 e8 04             	shr    al,0x4
c0015a75:	c1 ef 04             	shr    edi,0x4
c0015a78:	f6 e1                	mul    cl
c0015a7a:	6b ff 0a             	imul   edi,edi,0xa
c0015a7d:	01 d0                	add    eax,edx
c0015a7f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015a83:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015a87:	83 e2 0f             	and    edx,0xf
c0015a8a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015a8e:	c0 e8 04             	shr    al,0x4
c0015a91:	f6 e1                	mul    cl
c0015a93:	01 d0                	add    eax,edx
c0015a95:	88 da                	mov    dl,bl
c0015a97:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015a9b:	83 e2 0f             	and    edx,0xf
c0015a9e:	88 d8                	mov    al,bl
c0015aa0:	83 e3 80             	and    ebx,0xffffff80
c0015aa3:	c0 e8 04             	shr    al,0x4
c0015aa6:	83 e0 07             	and    eax,0x7
c0015aa9:	f6 e1                	mul    cl
c0015aab:	01 d0                	add    eax,edx
c0015aad:	89 f2                	mov    edx,esi
c0015aaf:	09 c3                	or     ebx,eax
c0015ab1:	83 e2 0f             	and    edx,0xf
c0015ab4:	89 f0                	mov    eax,esi
c0015ab6:	c0 e8 04             	shr    al,0x4
c0015ab9:	f6 e1                	mul    cl
c0015abb:	8d 34 02             	lea    esi,[edx+eax*1]
c0015abe:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015ac2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015ac6:	83 e2 0f             	and    edx,0xf
c0015ac9:	c0 e8 04             	shr    al,0x4
c0015acc:	f6 e1                	mul    cl
c0015ace:	01 d0                	add    eax,edx
c0015ad0:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015ad4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ad8:	83 e0 0f             	and    eax,0xf
c0015adb:	01 c7                	add    edi,eax
c0015add:	83 e5 02             	and    ebp,0x2
c0015ae0:	75 14                	jne    c0015af6 <RTC::completeRTCRefresh()+0x24e>
c0015ae2:	84 db                	test   bl,bl
c0015ae4:	79 10                	jns    c0015af6 <RTC::completeRTCRefresh()+0x24e>
c0015ae6:	83 e3 7f             	and    ebx,0x7f
c0015ae9:	b9 18 00 00 00       	mov    ecx,0x18
c0015aee:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015af1:	99                   	cdq    
c0015af2:	f7 f9                	idiv   ecx
c0015af4:	88 d3                	mov    bl,dl
c0015af6:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015afc:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015b02:	77 06                	ja     c0015b0a <RTC::completeRTCRefresh()+0x262>
c0015b04:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015b0a:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015b0f:	31 d2                	xor    edx,edx
c0015b11:	c1 e1 10             	shl    ecx,0x10
c0015b14:	89 d7                	mov    edi,edx
c0015b16:	c1 e5 10             	shl    ebp,0x10
c0015b19:	31 c0                	xor    eax,eax
c0015b1b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015b21:	09 cf                	or     edi,ecx
c0015b23:	89 fa                	mov    edx,edi
c0015b25:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015b29:	88 da                	mov    dl,bl
c0015b2b:	89 f3                	mov    ebx,esi
c0015b2d:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015b31:	88 d8                	mov    al,bl
c0015b33:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015b37:	0f b7 c8             	movzx  ecx,ax
c0015b3a:	09 e9                	or     ecx,ebp
c0015b3c:	89 c8                	mov    eax,ecx
c0015b3e:	51                   	push   ecx
c0015b3f:	51                   	push   ecx
c0015b40:	52                   	push   edx
c0015b41:	50                   	push   eax
c0015b42:	e8 c0 59 ff ff       	call   c000b507 <datetimeToSeconds(datetime_t)>
c0015b47:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015b4b:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015b51:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015b57:	83 c4 3c             	add    esp,0x3c
c0015b5a:	5b                   	pop    ebx
c0015b5b:	5e                   	pop    esi
c0015b5c:	5f                   	pop    edi
c0015b5d:	5d                   	pop    ebp
c0015b5e:	c3                   	ret    
c0015b5f:	90                   	nop

c0015b60 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015b60:	55                   	push   ebp
c0015b61:	57                   	push   edi
c0015b62:	56                   	push   esi
c0015b63:	53                   	push   ebx
c0015b64:	83 ec 30             	sub    esp,0x30
c0015b67:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015b6b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015b6f:	6a 00                	push   0x0
c0015b71:	6a 00                	push   0x0
c0015b73:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c0015b79:	e8 3e 14 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015b7e:	83 c4 0c             	add    esp,0xc
c0015b81:	6a 00                	push   0x0
c0015b83:	6a 02                	push   0x2
c0015b85:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c0015b8b:	e8 2c 14 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015b90:	31 d2                	xor    edx,edx
c0015b92:	89 f9                	mov    ecx,edi
c0015b94:	89 f8                	mov    eax,edi
c0015b96:	c1 e9 10             	shr    ecx,0x10
c0015b99:	0f b6 c4             	movzx  eax,ah
c0015b9c:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015ba0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015ba4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015ba8:	b9 64 00 00 00       	mov    ecx,0x64
c0015bad:	89 f0                	mov    eax,esi
c0015baf:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015bb3:	89 f0                	mov    eax,esi
c0015bb5:	0f b6 c4             	movzx  eax,ah
c0015bb8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015bbc:	89 f0                	mov    eax,esi
c0015bbe:	c1 e8 10             	shr    eax,0x10
c0015bc1:	66 f7 f1             	div    cx
c0015bc4:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015bc9:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015bce:	59                   	pop    ecx
c0015bcf:	5b                   	pop    ebx
c0015bd0:	89 fb                	mov    ebx,edi
c0015bd2:	6a 0b                	push   0xb
c0015bd4:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c0015bda:	e8 c7 12 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015bdf:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015be3:	83 c4 10             	add    esp,0x10
c0015be6:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015beb:	75 74                	jne    c0015c61 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015bed:	b2 0a                	mov    dl,0xa
c0015bef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015bf3:	0f b6 c1             	movzx  eax,cl
c0015bf6:	f6 f2                	div    dl
c0015bf8:	88 c3                	mov    bl,al
c0015bfa:	88 e0                	mov    al,ah
c0015bfc:	c1 e3 04             	shl    ebx,0x4
c0015bff:	09 c3                	or     ebx,eax
c0015c01:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015c06:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015c0a:	f6 f2                	div    dl
c0015c0c:	88 c1                	mov    cl,al
c0015c0e:	88 e0                	mov    al,ah
c0015c10:	c1 e1 04             	shl    ecx,0x4
c0015c13:	09 c1                	or     ecx,eax
c0015c15:	89 f8                	mov    eax,edi
c0015c17:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0015c1b:	0f b6 c0             	movzx  eax,al
c0015c1e:	f6 f2                	div    dl
c0015c20:	88 c3                	mov    bl,al
c0015c22:	88 e0                	mov    al,ah
c0015c24:	c1 e3 04             	shl    ebx,0x4
c0015c27:	09 c3                	or     ebx,eax
c0015c29:	89 f0                	mov    eax,esi
c0015c2b:	0f b6 c0             	movzx  eax,al
c0015c2e:	f6 f2                	div    dl
c0015c30:	88 c1                	mov    cl,al
c0015c32:	88 e0                	mov    al,ah
c0015c34:	c1 e1 04             	shl    ecx,0x4
c0015c37:	09 c1                	or     ecx,eax
c0015c39:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015c3e:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0015c42:	f6 f2                	div    dl
c0015c44:	88 c1                	mov    cl,al
c0015c46:	88 e0                	mov    al,ah
c0015c48:	c1 e1 04             	shl    ecx,0x4
c0015c4b:	09 c1                	or     ecx,eax
c0015c4d:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0015c52:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0015c56:	f6 f2                	div    dl
c0015c58:	89 c5                	mov    ebp,eax
c0015c5a:	88 e0                	mov    al,ah
c0015c5c:	c1 e5 04             	shl    ebp,0x4
c0015c5f:	09 c5                	or     ebp,eax
c0015c61:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0015c66:	75 17                	jne    c0015c7f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015c68:	80 fb 0b             	cmp    bl,0xb
c0015c6b:	76 0c                	jbe    c0015c79 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0015c6d:	80 eb 0c             	sub    bl,0xc
c0015c70:	75 02                	jne    c0015c74 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0015c72:	b3 0c                	mov    bl,0xc
c0015c74:	83 cb 80             	or     ebx,0xffffff80
c0015c77:	eb 06                	jmp    c0015c7f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015c79:	84 db                	test   bl,bl
c0015c7b:	75 02                	jne    c0015c7f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015c7d:	b3 0c                	mov    bl,0xc
c0015c7f:	0f b6 db             	movzx  ebx,bl
c0015c82:	50                   	push   eax
c0015c83:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0015c88:	50                   	push   eax
c0015c89:	6a 00                	push   0x0
c0015c8b:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c0015c91:	e8 26 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c96:	83 c4 0c             	add    esp,0xc
c0015c99:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015c9e:	50                   	push   eax
c0015c9f:	6a 02                	push   0x2
c0015ca1:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c0015ca7:	e8 10 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015cac:	83 c4 0c             	add    esp,0xc
c0015caf:	53                   	push   ebx
c0015cb0:	6a 04                	push   0x4
c0015cb2:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c0015cb8:	e8 ff 12 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015cbd:	83 c4 0c             	add    esp,0xc
c0015cc0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0015cc5:	50                   	push   eax
c0015cc6:	6a 07                	push   0x7
c0015cc8:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c0015cce:	e8 e9 12 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015cd3:	83 c4 0c             	add    esp,0xc
c0015cd6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0015cdb:	50                   	push   eax
c0015cdc:	6a 08                	push   0x8
c0015cde:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c0015ce4:	e8 d3 12 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015ce9:	83 c4 0c             	add    esp,0xc
c0015cec:	89 e8                	mov    eax,ebp
c0015cee:	0f b6 e8             	movzx  ebp,al
c0015cf1:	55                   	push   ebp
c0015cf2:	6a 09                	push   0x9
c0015cf4:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c0015cfa:	e8 bd 12 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015cff:	5a                   	pop    edx
c0015d00:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d04:	e8 9f fb ff ff       	call   c00158a8 <RTC::completeRTCRefresh()>
c0015d09:	83 c4 3c             	add    esp,0x3c
c0015d0c:	b0 01                	mov    al,0x1
c0015d0e:	5b                   	pop    ebx
c0015d0f:	5e                   	pop    esi
c0015d10:	5f                   	pop    edi
c0015d11:	5d                   	pop    ebp
c0015d12:	c3                   	ret    

c0015d13 <rtcIRQHandler(regs*, void*)>:
c0015d13:	53                   	push   ebx
c0015d14:	83 ec 10             	sub    esp,0x10
c0015d17:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015d1b:	6a 0c                	push   0xc
c0015d1d:	ff 35 f8 04 02 c0    	push   DWORD PTR ds:0xc00204f8
c0015d23:	e8 7e 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d28:	83 c4 10             	add    esp,0x10
c0015d2b:	84 c0                	test   al,al
c0015d2d:	79 24                	jns    c0015d53 <rtcIRQHandler(regs*, void*)+0x40>
c0015d2f:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0015d36:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0015d3d:	66 ff 05 54 38 02 c0 	inc    WORD PTR ds:0xc0023854
c0015d44:	75 0d                	jne    c0015d53 <rtcIRQHandler(regs*, void*)+0x40>
c0015d46:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015d4a:	83 c4 08             	add    esp,0x8
c0015d4d:	5b                   	pop    ebx
c0015d4e:	e9 55 fb ff ff       	jmp    c00158a8 <RTC::completeRTCRefresh()>
c0015d53:	83 c4 08             	add    esp,0x8
c0015d56:	5b                   	pop    ebx
c0015d57:	c3                   	ret    

c0015d58 <RTC::RTC()>:
c0015d58:	83 ec 1c             	sub    esp,0x1c
c0015d5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d5f:	83 ec 08             	sub    esp,0x8
c0015d62:	68 cf e9 01 c0       	push   0xc001e9cf
c0015d67:	50                   	push   eax
c0015d68:	e8 75 56 ff ff       	call   c000b3e2 <Clock::Clock(char const*)>
c0015d6d:	83 c4 10             	add    esp,0x10
c0015d70:	ba ec e9 01 c0       	mov    edx,0xc001e9ec
c0015d75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d79:	89 10                	mov    DWORD PTR [eax],edx
c0015d7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d7f:	83 ec 0c             	sub    esp,0xc
c0015d82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d86:	6a 01                	push   0x1
c0015d88:	68 13 5d 01 c0       	push   0xc0015d13
c0015d8d:	6a 08                	push   0x8
c0015d8f:	50                   	push   eax
c0015d90:	e8 37 5b ff ff       	call   c000b8cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0015d95:	83 c4 20             	add    esp,0x20
c0015d98:	89 c2                	mov    edx,eax
c0015d9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d9e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0015da4:	fa                   	cli    
c0015da5:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0015daa:	40                   	inc    eax
c0015dab:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0015db0:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0015db5:	83 ec 08             	sub    esp,0x8
c0015db8:	6a 0b                	push   0xb
c0015dba:	50                   	push   eax
c0015dbb:	e8 e6 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dc0:	83 c4 10             	add    esp,0x10
c0015dc3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015dc7:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0015dcc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0015dd0:	83 ca 10             	or     edx,0x10
c0015dd3:	81 e2 ff 00 00 00    	and    edx,0xff
c0015dd9:	83 ec 04             	sub    esp,0x4
c0015ddc:	52                   	push   edx
c0015ddd:	6a 0b                	push   0xb
c0015ddf:	50                   	push   eax
c0015de0:	e8 d7 11 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015de5:	83 c4 10             	add    esp,0x10
c0015de8:	83 ec 0c             	sub    esp,0xc
c0015deb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015def:	e8 b4 fa ff ff       	call   c00158a8 <RTC::completeRTCRefresh()>
c0015df4:	83 c4 10             	add    esp,0x10
c0015df7:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0015dfc:	48                   	dec    eax
c0015dfd:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c0015e02:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c0015e07:	85 c0                	test   eax,eax
c0015e09:	75 01                	jne    c0015e0c <RTC::RTC()+0xb4>
c0015e0b:	fb                   	sti    
c0015e0c:	90                   	nop
c0015e0d:	83 c4 1c             	add    esp,0x1c
c0015e10:	c3                   	ret    
c0015e11:	66 90                	xchg   ax,ax
c0015e13:	90                   	nop

c0015e14 <HalConsoleScroll(int, int)>:
c0015e14:	83 ec 10             	sub    esp,0x10
c0015e17:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0015e1f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0015e27:	90                   	nop
c0015e28:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015e2d:	0f 8f e1 00 00 00    	jg     c0015f14 <HalConsoleScroll(int, int)+0x100>
c0015e33:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015e3b:	90                   	nop
c0015e3c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0015e44:	0f 8f be 00 00 00    	jg     c0015f08 <HalConsoleScroll(int, int)+0xf4>
c0015e4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e4e:	89 d0                	mov    eax,edx
c0015e50:	c1 e0 02             	shl    eax,0x2
c0015e53:	01 d0                	add    eax,edx
c0015e55:	c1 e0 05             	shl    eax,0x5
c0015e58:	89 c2                	mov    edx,eax
c0015e5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e5e:	01 d0                	add    eax,edx
c0015e60:	89 c2                	mov    edx,eax
c0015e62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e66:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0015e69:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e6d:	89 d0                	mov    eax,edx
c0015e6f:	c1 e0 02             	shl    eax,0x2
c0015e72:	01 d0                	add    eax,edx
c0015e74:	c1 e0 05             	shl    eax,0x5
c0015e77:	89 c2                	mov    edx,eax
c0015e79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e7d:	01 d0                	add    eax,edx
c0015e7f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0015e85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e89:	01 c2                	add    edx,eax
c0015e8b:	8a 01                	mov    al,BYTE PTR [ecx]
c0015e8d:	88 02                	mov    BYTE PTR [edx],al
c0015e8f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015e94:	75 66                	jne    c0015efc <HalConsoleScroll(int, int)+0xe8>
c0015e96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e9a:	83 e0 01             	and    eax,0x1
c0015e9d:	74 39                	je     c0015ed8 <HalConsoleScroll(int, int)+0xc4>
c0015e9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ea3:	83 e0 0f             	and    eax,0xf
c0015ea6:	88 c2                	mov    dl,al
c0015ea8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015eac:	c1 e0 04             	shl    eax,0x4
c0015eaf:	88 d1                	mov    cl,dl
c0015eb1:	09 c1                	or     ecx,eax
c0015eb3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015eb7:	89 d0                	mov    eax,edx
c0015eb9:	c1 e0 02             	shl    eax,0x2
c0015ebc:	01 d0                	add    eax,edx
c0015ebe:	c1 e0 05             	shl    eax,0x5
c0015ec1:	89 c2                	mov    edx,eax
c0015ec3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ec7:	01 d0                	add    eax,edx
c0015ec9:	89 c2                	mov    edx,eax
c0015ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ecf:	01 d0                	add    eax,edx
c0015ed1:	88 ca                	mov    dl,cl
c0015ed3:	88 10                	mov    BYTE PTR [eax],dl
c0015ed5:	eb 25                	jmp    c0015efc <HalConsoleScroll(int, int)+0xe8>
c0015ed7:	90                   	nop
c0015ed8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015edc:	89 d0                	mov    eax,edx
c0015ede:	c1 e0 02             	shl    eax,0x2
c0015ee1:	01 d0                	add    eax,edx
c0015ee3:	c1 e0 05             	shl    eax,0x5
c0015ee6:	89 c2                	mov    edx,eax
c0015ee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015eec:	01 d0                	add    eax,edx
c0015eee:	89 c2                	mov    edx,eax
c0015ef0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ef4:	01 d0                	add    eax,edx
c0015ef6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0015ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0015efc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015f00:	e9 37 ff ff ff       	jmp    c0015e3c <HalConsoleScroll(int, int)+0x28>
c0015f05:	8d 76 00             	lea    esi,[esi+0x0]
c0015f08:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015f0c:	e9 17 ff ff ff       	jmp    c0015e28 <HalConsoleScroll(int, int)+0x14>
c0015f11:	8d 76 00             	lea    esi,[esi+0x0]
c0015f14:	90                   	nop
c0015f15:	83 c4 10             	add    esp,0x10
c0015f18:	c3                   	ret    
c0015f19:	8d 76 00             	lea    esi,[esi+0x0]

c0015f1c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0015f1c:	83 ec 14             	sub    esp,0x14
c0015f1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015f23:	88 04 24             	mov    BYTE PTR [esp],al
c0015f26:	8a 04 24             	mov    al,BYTE PTR [esp]
c0015f29:	25 ff 00 00 00       	and    eax,0xff
c0015f2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015f32:	89 d1                	mov    ecx,edx
c0015f34:	83 e1 0f             	and    ecx,0xf
c0015f37:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f3b:	c1 e2 04             	shl    edx,0x4
c0015f3e:	81 e2 ff 00 00 00    	and    edx,0xff
c0015f44:	09 ca                	or     edx,ecx
c0015f46:	c1 e2 08             	shl    edx,0x8
c0015f49:	09 d0                	or     eax,edx
c0015f4b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0015f50:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0015f58:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015f5c:	89 d0                	mov    eax,edx
c0015f5e:	c1 e0 02             	shl    eax,0x2
c0015f61:	01 d0                	add    eax,edx
c0015f63:	c1 e0 04             	shl    eax,0x4
c0015f66:	89 c2                	mov    edx,eax
c0015f68:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015f6c:	01 d0                	add    eax,edx
c0015f6e:	01 c0                	add    eax,eax
c0015f70:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0015f74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f78:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0015f7d:	66 89 02             	mov    WORD PTR [edx],ax
c0015f80:	90                   	nop
c0015f81:	83 c4 14             	add    esp,0x14
c0015f84:	c3                   	ret    
c0015f85:	8d 76 00             	lea    esi,[esi+0x0]

c0015f88 <HalConsoleCursorUpdate(int, int)>:
c0015f88:	83 ec 20             	sub    esp,0x20
c0015f8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f8f:	89 c2                	mov    edx,eax
c0015f91:	89 d0                	mov    eax,edx
c0015f93:	c1 e0 02             	shl    eax,0x2
c0015f96:	01 d0                	add    eax,edx
c0015f98:	c1 e0 04             	shl    eax,0x4
c0015f9b:	89 c2                	mov    edx,eax
c0015f9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015fa1:	01 d0                	add    eax,edx
c0015fa3:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0015fa8:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0015faf:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0015fb4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015fbc:	ee                   	out    dx,al
c0015fbd:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015fc2:	25 ff 00 00 00       	and    eax,0xff
c0015fc7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0015fce:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0015fd2:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015fd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015fda:	ee                   	out    dx,al
c0015fdb:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0015fe2:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0015fe7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015feb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015fef:	ee                   	out    dx,al
c0015ff0:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015ff5:	66 c1 e8 08          	shr    ax,0x8
c0015ff9:	25 ff 00 00 00       	and    eax,0xff
c0015ffe:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016005:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016009:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001600d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016011:	ee                   	out    dx,al
c0016012:	90                   	nop
c0016013:	83 c4 20             	add    esp,0x20
c0016016:	c3                   	ret    
c0016017:	90                   	nop

c0016018 <FAT::getName()>:
c0016018:	b8 20 ea 01 c0       	mov    eax,0xc001ea20
c001601d:	c3                   	ret    
c001601e:	66 90                	xchg   ax,ax

c0016020 <FAT::tell(void*, unsigned long long*)>:
c0016020:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016025:	75 09                	jne    c0016030 <FAT::tell(void*, unsigned long long*)+0x10>
c0016027:	b8 04 00 00 00       	mov    eax,0x4
c001602c:	c3                   	ret    
c001602d:	8d 76 00             	lea    esi,[esi+0x0]
c0016030:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016035:	75 09                	jne    c0016040 <FAT::tell(void*, unsigned long long*)+0x20>
c0016037:	b8 04 00 00 00       	mov    eax,0x4
c001603c:	c3                   	ret    
c001603d:	8d 76 00             	lea    esi,[esi+0x0]
c0016040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016044:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0016047:	ba 00 00 00 00       	mov    edx,0x0
c001604c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016050:	89 01                	mov    DWORD PTR [ecx],eax
c0016052:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016055:	b8 00 00 00 00       	mov    eax,0x0
c001605a:	c3                   	ret    
c001605b:	90                   	nop

c001605c <FAT::stat(void*, unsigned long long*)>:
c001605c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016061:	75 09                	jne    c001606c <FAT::stat(void*, unsigned long long*)+0x10>
c0016063:	b8 04 00 00 00       	mov    eax,0x4
c0016068:	c3                   	ret    
c0016069:	8d 76 00             	lea    esi,[esi+0x0]
c001606c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016071:	75 09                	jne    c001607c <FAT::stat(void*, unsigned long long*)+0x20>
c0016073:	b8 04 00 00 00       	mov    eax,0x4
c0016078:	c3                   	ret    
c0016079:	8d 76 00             	lea    esi,[esi+0x0]
c001607c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016080:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0016083:	ba 00 00 00 00       	mov    edx,0x0
c0016088:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001608c:	89 01                	mov    DWORD PTR [ecx],eax
c001608e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016091:	b8 00 00 00 00       	mov    eax,0x0
c0016096:	c3                   	ret    
c0016097:	90                   	nop

c0016098 <FAT::~FAT()>:
c0016098:	83 ec 0c             	sub    esp,0xc
c001609b:	ba 6c ea 01 c0       	mov    edx,0xc001ea6c
c00160a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160a4:	89 10                	mov    DWORD PTR [eax],edx
c00160a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160aa:	83 ec 0c             	sub    esp,0xc
c00160ad:	50                   	push   eax
c00160ae:	e8 73 47 ff ff       	call   c000a826 <Filesystem::~Filesystem()>
c00160b3:	83 c4 10             	add    esp,0x10
c00160b6:	90                   	nop
c00160b7:	83 c4 0c             	add    esp,0xc
c00160ba:	c3                   	ret    
c00160bb:	90                   	nop

c00160bc <FAT::~FAT()>:
c00160bc:	83 ec 0c             	sub    esp,0xc
c00160bf:	83 ec 0c             	sub    esp,0xc
c00160c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160c6:	e8 cd ff ff ff       	call   c0016098 <FAT::~FAT()>
c00160cb:	83 c4 10             	add    esp,0x10
c00160ce:	83 ec 08             	sub    esp,0x8
c00160d1:	6a 08                	push   0x8
c00160d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160d7:	e8 0e 43 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c00160dc:	83 c4 10             	add    esp,0x10
c00160df:	83 c4 0c             	add    esp,0xc
c00160e2:	c3                   	ret    
c00160e3:	90                   	nop

c00160e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00160e4:	83 ec 1c             	sub    esp,0x1c
c00160e7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00160ee:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00160f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160f7:	8b 04 85 80 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc780]
c00160fe:	83 f8 ff             	cmp    eax,0xffffffff
c0016101:	75 35                	jne    c0016138 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0016103:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016107:	88 c2                	mov    dl,al
c0016109:	a1 60 38 02 c0       	mov    eax,ds:0xc0023860
c001610e:	01 d0                	add    eax,edx
c0016110:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016114:	8b 15 60 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023860
c001611a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001611e:	89 14 85 80 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc780],edx
c0016125:	a1 60 38 02 c0       	mov    eax,ds:0xc0023860
c001612a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001612e:	89 14 85 00 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc700],edx
c0016135:	eb 19                	jmp    c0016150 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0016137:	90                   	nop
c0016138:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001613c:	88 c2                	mov    dl,al
c001613e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016142:	8b 04 85 80 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc780]
c0016149:	01 d0                	add    eax,edx
c001614b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001614f:	90                   	nop
c0016150:	83 ec 04             	sub    esp,0x4
c0016153:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016157:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001615b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001615f:	50                   	push   eax
c0016160:	e8 ef ec fe ff       	call   c0004e54 <f_getlabel>
c0016165:	83 c4 10             	add    esp,0x10
c0016168:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001616c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016171:	75 09                	jne    c001617c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0016173:	b8 00 00 00 00       	mov    eax,0x0
c0016178:	eb 0a                	jmp    c0016184 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001617a:	66 90                	xchg   ax,ax
c001617c:	b8 01 00 00 00       	mov    eax,0x1
c0016181:	8d 76 00             	lea    esi,[esi+0x0]
c0016184:	83 c4 1c             	add    esp,0x1c
c0016187:	c3                   	ret    

c0016188 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016188:	57                   	push   edi
c0016189:	83 ec 58             	sub    esp,0x58
c001618c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016194:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016198:	b8 00 00 00 00       	mov    eax,0x0
c001619d:	b9 0f 00 00 00       	mov    ecx,0xf
c00161a2:	fc                   	cld    
c00161a3:	89 d7                	mov    edi,edx
c00161a5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00161a7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00161ab:	8b 04 85 80 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc780]
c00161b2:	83 f8 ff             	cmp    eax,0xffffffff
c00161b5:	75 35                	jne    c00161ec <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00161b7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00161bb:	88 c2                	mov    dl,al
c00161bd:	a1 60 38 02 c0       	mov    eax,ds:0xc0023860
c00161c2:	01 d0                	add    eax,edx
c00161c4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00161c8:	8b 15 60 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023860
c00161ce:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00161d2:	89 14 85 80 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc780],edx
c00161d9:	a1 60 38 02 c0       	mov    eax,ds:0xc0023860
c00161de:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00161e2:	89 14 85 00 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc700],edx
c00161e9:	eb 19                	jmp    c0016204 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00161eb:	90                   	nop
c00161ec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00161f0:	88 c2                	mov    dl,al
c00161f2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00161f6:	8b 04 85 80 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc780]
c00161fd:	01 d0                	add    eax,edx
c00161ff:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016203:	90                   	nop
c0016204:	83 ec 08             	sub    esp,0x8
c0016207:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001620b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001620f:	50                   	push   eax
c0016210:	e8 ab a5 fe ff       	call   c00007c0 <strcat>
c0016215:	83 c4 10             	add    esp,0x10
c0016218:	83 ec 0c             	sub    esp,0xc
c001621b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001621f:	50                   	push   eax
c0016220:	e8 80 ed fe ff       	call   c0004fa5 <f_setlabel>
c0016225:	83 c4 10             	add    esp,0x10
c0016228:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001622c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016231:	75 09                	jne    c001623c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0016233:	b8 00 00 00 00       	mov    eax,0x0
c0016238:	eb 0a                	jmp    c0016244 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001623a:	66 90                	xchg   ax,ax
c001623c:	b8 01 00 00 00       	mov    eax,0x1
c0016241:	8d 76 00             	lea    esi,[esi+0x0]
c0016244:	83 c4 58             	add    esp,0x58
c0016247:	5f                   	pop    edi
c0016248:	c3                   	ret    
c0016249:	90                   	nop
c001624a:	66 90                	xchg   ax,ax

c001624c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001624c:	83 ec 2c             	sub    esp,0x2c
c001624f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016257:	83 ec 08             	sub    esp,0x8
c001625a:	68 44 ea 01 c0       	push   0xc001ea44
c001625f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016263:	e8 78 a4 fe ff       	call   c00006e0 <strcmp>
c0016268:	83 c4 10             	add    esp,0x10
c001626b:	85 c0                	test   eax,eax
c001626d:	0f 94 c0             	sete   al
c0016270:	84 c0                	test   al,al
c0016272:	74 10                	je     c0016284 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0016274:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001627c:	e9 b3 00 00 00       	jmp    c0016334 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016281:	8d 76 00             	lea    esi,[esi+0x0]
c0016284:	83 ec 08             	sub    esp,0x8
c0016287:	68 36 ea 01 c0       	push   0xc001ea36
c001628c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016290:	e8 4b a4 fe ff       	call   c00006e0 <strcmp>
c0016295:	83 c4 10             	add    esp,0x10
c0016298:	85 c0                	test   eax,eax
c001629a:	0f 94 c0             	sete   al
c001629d:	84 c0                	test   al,al
c001629f:	74 0f                	je     c00162b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00162a1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00162a9:	e9 86 00 00 00       	jmp    c0016334 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00162ae:	66 90                	xchg   ax,ax
c00162b0:	83 ec 08             	sub    esp,0x8
c00162b3:	68 3c ea 01 c0       	push   0xc001ea3c
c00162b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00162bc:	e8 1f a4 fe ff       	call   c00006e0 <strcmp>
c00162c1:	83 c4 10             	add    esp,0x10
c00162c4:	85 c0                	test   eax,eax
c00162c6:	0f 94 c0             	sete   al
c00162c9:	84 c0                	test   al,al
c00162cb:	74 0b                	je     c00162d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00162cd:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00162d5:	eb 5d                	jmp    c0016334 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00162d7:	90                   	nop
c00162d8:	83 ec 08             	sub    esp,0x8
c00162db:	68 9c ca 01 c0       	push   0xc001ca9c
c00162e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00162e4:	e8 f7 a3 fe ff       	call   c00006e0 <strcmp>
c00162e9:	83 c4 10             	add    esp,0x10
c00162ec:	85 c0                	test   eax,eax
c00162ee:	0f 94 c0             	sete   al
c00162f1:	84 c0                	test   al,al
c00162f3:	74 0b                	je     c0016300 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00162f5:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00162fd:	eb 35                	jmp    c0016334 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00162ff:	90                   	nop
c0016300:	83 ec 08             	sub    esp,0x8
c0016303:	68 42 ea 01 c0       	push   0xc001ea42
c0016308:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001630c:	e8 cf a3 fe ff       	call   c00006e0 <strcmp>
c0016311:	83 c4 10             	add    esp,0x10
c0016314:	85 c0                	test   eax,eax
c0016316:	0f 94 c0             	sete   al
c0016319:	84 c0                	test   al,al
c001631b:	74 0b                	je     c0016328 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001631d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016325:	eb 0d                	jmp    c0016334 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016327:	90                   	nop
c0016328:	b8 08 00 00 00       	mov    eax,0x8
c001632d:	e9 ea 00 00 00       	jmp    c001641c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016332:	66 90                	xchg   ax,ax
c0016334:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001633b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016340:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016344:	8b 04 85 80 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc780]
c001634b:	83 f8 ff             	cmp    eax,0xffffffff
c001634e:	75 34                	jne    c0016384 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016350:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016354:	88 c2                	mov    dl,al
c0016356:	a1 60 38 02 c0       	mov    eax,ds:0xc0023860
c001635b:	01 d0                	add    eax,edx
c001635d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016361:	8b 15 60 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023860
c0016367:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001636b:	89 14 85 80 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc780],edx
c0016372:	a1 60 38 02 c0       	mov    eax,ds:0xc0023860
c0016377:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001637b:	89 14 85 00 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc700],edx
c0016382:	eb 18                	jmp    c001639c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016384:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016388:	88 c2                	mov    dl,al
c001638a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001638e:	8b 04 85 80 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc780]
c0016395:	01 d0                	add    eax,edx
c0016397:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001639b:	90                   	nop
c001639c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163a0:	88 04 24             	mov    BYTE PTR [esp],al
c00163a3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00163a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00163ab:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00163b3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00163b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00163c0:	83 ec 0c             	sub    esp,0xc
c00163c3:	68 00 20 00 00       	push   0x2000
c00163c8:	e8 ec 13 ff ff       	call   c00077b9 <malloc>
c00163cd:	83 c4 10             	add    esp,0x10
c00163d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00163d4:	68 00 20 00 00       	push   0x2000
c00163d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163dd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00163e1:	50                   	push   eax
c00163e2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00163e6:	50                   	push   eax
c00163e7:	e8 a9 ee fe ff       	call   c0005295 <f_mkfs>
c00163ec:	83 c4 10             	add    esp,0x10
c00163ef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00163f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00163f8:	75 0a                	jne    c0016404 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00163fa:	b8 00 00 00 00       	mov    eax,0x0
c00163ff:	eb 1b                	jmp    c001641c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016401:	8d 76 00             	lea    esi,[esi+0x0]
c0016404:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016409:	75 09                	jne    c0016414 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001640b:	b8 09 00 00 00       	mov    eax,0x9
c0016410:	eb 0a                	jmp    c001641c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016412:	66 90                	xchg   ax,ax
c0016414:	b8 01 00 00 00       	mov    eax,0x1
c0016419:	8d 76 00             	lea    esi,[esi+0x0]
c001641c:	83 c4 2c             	add    esp,0x2c
c001641f:	c3                   	ret    

c0016420 <FAT::tryMount(LogicalDisk*, int)>:
c0016420:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0016426:	a1 60 38 02 c0       	mov    eax,ds:0xc0023860
c001642b:	83 f8 14             	cmp    eax,0x14
c001642e:	75 18                	jne    c0016448 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016430:	83 ec 0c             	sub    esp,0xc
c0016433:	68 48 ea 01 c0       	push   0xc001ea48
c0016438:	e8 22 9d ff ff       	call   c001015f <KePanic(char const*)>
c001643d:	83 c4 10             	add    esp,0x10
c0016440:	b0 00                	mov    al,0x0
c0016442:	e9 e9 01 00 00       	jmp    c0016630 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016447:	90                   	nop
c0016448:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001644f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016455:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001645b:	3d 00 02 00 00       	cmp    eax,0x200
c0016460:	74 0a                	je     c001646c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0016462:	b0 00                	mov    al,0x0
c0016464:	e9 c7 01 00 00       	jmp    c0016630 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016469:	8d 76 00             	lea    esi,[esi+0x0]
c001646c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016474:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001647b:	8b 04 85 80 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc780]
c0016482:	83 f8 ff             	cmp    eax,0xffffffff
c0016485:	74 09                	je     c0016490 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0016487:	b0 01                	mov    al,0x1
c0016489:	e9 a2 01 00 00       	jmp    c0016630 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001648e:	66 90                	xchg   ax,ax
c0016490:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001649a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00164a2:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00164a9:	88 c2                	mov    dl,al
c00164ab:	a1 60 38 02 c0       	mov    eax,ds:0xc0023860
c00164b0:	01 d0                	add    eax,edx
c00164b2:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00164b9:	8b 15 60 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023860
c00164bf:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00164c6:	89 14 85 80 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc780],edx
c00164cd:	a1 60 38 02 c0       	mov    eax,ds:0xc0023860
c00164d2:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00164d9:	89 14 85 00 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc700],edx
c00164e0:	83 ec 0c             	sub    esp,0xc
c00164e3:	68 34 02 00 00       	push   0x234
c00164e8:	e8 cc 12 ff ff       	call   c00077b9 <malloc>
c00164ed:	83 c4 10             	add    esp,0x10
c00164f0:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00164f7:	83 ec 04             	sub    esp,0x4
c00164fa:	6a 00                	push   0x0
c00164fc:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016503:	50                   	push   eax
c0016504:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001650b:	e8 ab d5 fe ff       	call   c0003abb <f_mount>
c0016510:	83 c4 10             	add    esp,0x10
c0016513:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001651a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016522:	74 1c                	je     c0016540 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016524:	83 ec 0c             	sub    esp,0xc
c0016527:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001652e:	e8 a6 12 ff ff       	call   c00077d9 <rfree>
c0016533:	83 c4 10             	add    esp,0x10
c0016536:	b0 00                	mov    al,0x0
c0016538:	e9 f3 00 00 00       	jmp    c0016630 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001653d:	8d 76 00             	lea    esi,[esi+0x0]
c0016540:	83 ec 04             	sub    esp,0x4
c0016543:	68 00 01 00 00       	push   0x100
c0016548:	6a 00                	push   0x0
c001654a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016551:	50                   	push   eax
c0016552:	e8 79 9f fe ff       	call   c00004d0 <memset>
c0016557:	83 c4 10             	add    esp,0x10
c001655a:	83 ec 08             	sub    esp,0x8
c001655d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016564:	50                   	push   eax
c0016565:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001656c:	50                   	push   eax
c001656d:	e8 4e a2 fe ff       	call   c00007c0 <strcat>
c0016572:	83 c4 10             	add    esp,0x10
c0016575:	83 ec 08             	sub    esp,0x8
c0016578:	68 56 ea 01 c0       	push   0xc001ea56
c001657d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016584:	50                   	push   eax
c0016585:	e8 36 a2 fe ff       	call   c00007c0 <strcat>
c001658a:	83 c4 10             	add    esp,0x10
c001658d:	83 ec 04             	sub    esp,0x4
c0016590:	6a 01                	push   0x1
c0016592:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016599:	50                   	push   eax
c001659a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001659e:	50                   	push   eax
c001659f:	e8 79 d5 fe ff       	call   c0003b1d <f_open>
c00165a4:	83 c4 10             	add    esp,0x10
c00165a7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00165ae:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00165b5:	85 c0                	test   eax,eax
c00165b7:	74 0b                	je     c00165c4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00165b9:	78 31                	js     c00165ec <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00165bb:	83 e8 04             	sub    eax,0x4
c00165be:	83 f8 01             	cmp    eax,0x1
c00165c1:	77 29                	ja     c00165ec <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00165c3:	90                   	nop
c00165c4:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00165cc:	83 ec 0c             	sub    esp,0xc
c00165cf:	8d 44 24 14          	lea    eax,[esp+0x14]
c00165d3:	50                   	push   eax
c00165d4:	e8 f7 dc fe ff       	call   c00042d0 <f_close>
c00165d9:	83 c4 10             	add    esp,0x10
c00165dc:	90                   	nop
c00165dd:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c00165e5:	74 41                	je     c0016628 <FAT::tryMount(LogicalDisk*, int)+0x208>
c00165e7:	eb 33                	jmp    c001661c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00165e9:	8d 76 00             	lea    esi,[esi+0x0]
c00165ec:	83 ec 0c             	sub    esp,0xc
c00165ef:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00165f6:	e8 de 11 ff ff       	call   c00077d9 <rfree>
c00165fb:	83 c4 10             	add    esp,0x10
c00165fe:	83 ec 04             	sub    esp,0x4
c0016601:	6a 00                	push   0x0
c0016603:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001660a:	50                   	push   eax
c001660b:	6a 00                	push   0x0
c001660d:	e8 a9 d4 fe ff       	call   c0003abb <f_mount>
c0016612:	83 c4 10             	add    esp,0x10
c0016615:	b0 00                	mov    al,0x0
c0016617:	eb 17                	jmp    c0016630 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016619:	8d 76 00             	lea    esi,[esi+0x0]
c001661c:	a1 60 38 02 c0       	mov    eax,ds:0xc0023860
c0016621:	40                   	inc    eax
c0016622:	a3 60 38 02 c0       	mov    ds:0xc0023860,eax
c0016627:	90                   	nop
c0016628:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001662f:	90                   	nop
c0016630:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016636:	c3                   	ret    
c0016637:	90                   	nop

c0016638 <FAT::allocateSwapfile(char const*, int)>:
c0016638:	55                   	push   ebp
c0016639:	57                   	push   edi
c001663a:	56                   	push   esi
c001663b:	53                   	push   ebx
c001663c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016642:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001664d:	83 ec 0c             	sub    esp,0xc
c0016650:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016657:	e8 5d 11 ff ff       	call   c00077b9 <malloc>
c001665c:	83 c4 10             	add    esp,0x10
c001665f:	89 c7                	mov    edi,eax
c0016661:	a1 d0 37 02 c0       	mov    eax,ds:0xc00237d0
c0016666:	83 ec 04             	sub    esp,0x4
c0016669:	50                   	push   eax
c001666a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016671:	57                   	push   edi
c0016672:	e8 df 43 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c0016677:	83 c4 10             	add    esp,0x10
c001667a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016681:	83 ec 04             	sub    esp,0x4
c0016684:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016688:	50                   	push   eax
c0016689:	8d 44 24 18          	lea    eax,[esp+0x18]
c001668d:	50                   	push   eax
c001668e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016695:	e8 28 47 ff ff       	call   c000adc2 <File::stat(unsigned long long*, bool*)>
c001669a:	83 c4 10             	add    esp,0x10
c001669d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00166a4:	c1 e0 14             	shl    eax,0x14
c00166a7:	89 c7                	mov    edi,eax
c00166a9:	89 c5                	mov    ebp,eax
c00166ab:	c1 fd 1f             	sar    ebp,0x1f
c00166ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00166b6:	89 f9                	mov    ecx,edi
c00166b8:	31 c1                	xor    ecx,eax
c00166ba:	89 cb                	mov    ebx,ecx
c00166bc:	89 e9                	mov    ecx,ebp
c00166be:	31 d1                	xor    ecx,edx
c00166c0:	89 ce                	mov    esi,ecx
c00166c2:	89 f0                	mov    eax,esi
c00166c4:	09 d8                	or     eax,ebx
c00166c6:	0f 84 9c 00 00 00    	je     c0016768 <FAT::allocateSwapfile(char const*, int)+0x130>
c00166cc:	83 ec 0c             	sub    esp,0xc
c00166cf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00166d6:	e8 b3 45 ff ff       	call   c000ac8e <File::unlink()>
c00166db:	83 c4 10             	add    esp,0x10
c00166de:	83 ec 08             	sub    esp,0x8
c00166e1:	6a 12                	push   0x12
c00166e3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00166ea:	e8 27 44 ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c00166ef:	83 c4 10             	add    esp,0x10
c00166f2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00166f9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00166ff:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016706:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001670d:	c1 e0 14             	shl    eax,0x14
c0016710:	83 ec 04             	sub    esp,0x4
c0016713:	6a 01                	push   0x1
c0016715:	50                   	push   eax
c0016716:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001671d:	e8 13 ea fe ff       	call   c0005135 <f_expand>
c0016722:	83 c4 10             	add    esp,0x10
c0016725:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001672c:	8b 00                	mov    eax,DWORD PTR [eax]
c001672e:	83 c0 10             	add    eax,0x10
c0016731:	8b 00                	mov    eax,DWORD PTR [eax]
c0016733:	83 ec 0c             	sub    esp,0xc
c0016736:	8d 54 24 24          	lea    edx,[esp+0x24]
c001673a:	52                   	push   edx
c001673b:	8d 54 24 30          	lea    edx,[esp+0x30]
c001673f:	52                   	push   edx
c0016740:	6a 00                	push   0x0
c0016742:	68 00 04 00 00       	push   0x400
c0016747:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001674e:	ff d0                	call   eax
c0016750:	83 c4 20             	add    esp,0x20
c0016753:	83 ec 0c             	sub    esp,0xc
c0016756:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001675d:	e8 12 44 ff ff       	call   c000ab74 <File::close()>
c0016762:	83 c4 10             	add    esp,0x10
c0016765:	8d 76 00             	lea    esi,[esi+0x0]
c0016768:	83 ec 08             	sub    esp,0x8
c001676b:	6a 01                	push   0x1
c001676d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016774:	e8 9d 43 ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c0016779:	83 c4 10             	add    esp,0x10
c001677c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016783:	8b 00                	mov    eax,DWORD PTR [eax]
c0016785:	83 c0 0c             	add    eax,0xc
c0016788:	8b 00                	mov    eax,DWORD PTR [eax]
c001678a:	83 ec 0c             	sub    esp,0xc
c001678d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016791:	52                   	push   edx
c0016792:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016796:	52                   	push   edx
c0016797:	6a 00                	push   0x0
c0016799:	6a 04                	push   0x4
c001679b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00167a2:	ff d0                	call   eax
c00167a4:	83 c4 20             	add    esp,0x20
c00167a7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00167ae:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00167b4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00167bb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00167c2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00167c5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00167cc:	83 ec 0c             	sub    esp,0xc
c00167cf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00167d6:	e8 99 43 ff ff       	call   c000ab74 <File::close()>
c00167db:	83 c4 10             	add    esp,0x10
c00167de:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00167e5:	ba 00 00 00 00       	mov    edx,0x0
c00167ea:	81 c4 3c 04 00 00    	add    esp,0x43c
c00167f0:	5b                   	pop    ebx
c00167f1:	5e                   	pop    esi
c00167f2:	5f                   	pop    edi
c00167f3:	5d                   	pop    ebp
c00167f4:	c3                   	ret    
c00167f5:	90                   	nop
c00167f6:	66 90                	xchg   ax,ax

c00167f8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00167f8:	57                   	push   edi
c00167f9:	56                   	push   esi
c00167fa:	53                   	push   ebx
c00167fb:	81 ec 50 02 00 00    	sub    esp,0x250
c0016801:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016809:	74 0d                	je     c0016818 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001680b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016813:	75 0f                	jne    c0016824 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016815:	8d 76 00             	lea    esi,[esi+0x0]
c0016818:	b8 04 00 00 00       	mov    eax,0x4
c001681d:	e9 36 01 00 00       	jmp    c0016958 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016822:	66 90                	xchg   ax,ax
c0016824:	83 ec 08             	sub    esp,0x8
c0016827:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001682e:	50                   	push   eax
c001682f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016836:	e8 58 dd fe ff       	call   c0004593 <f_readdir>
c001683b:	83 c4 10             	add    esp,0x10
c001683e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016845:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001684c:	83 ec 0c             	sub    esp,0xc
c001684f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016856:	83 c0 16             	add    eax,0x16
c0016859:	50                   	push   eax
c001685a:	e8 e1 9c fe ff       	call   c0000540 <strlen>
c001685f:	83 c4 10             	add    esp,0x10
c0016862:	ba 00 00 00 00       	mov    edx,0x0
c0016867:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001686b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001686f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016876:	25 ff 00 00 00       	and    eax,0xff
c001687b:	83 e0 10             	and    eax,0x10
c001687e:	74 08                	je     c0016888 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016880:	b8 02 00 00 00       	mov    eax,0x2
c0016885:	eb 09                	jmp    c0016890 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016887:	90                   	nop
c0016888:	b8 01 00 00 00       	mov    eax,0x1
c001688d:	8d 76 00             	lea    esi,[esi+0x0]
c0016890:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016894:	83 ec 08             	sub    esp,0x8
c0016897:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001689e:	83 c0 16             	add    eax,0x16
c00168a1:	50                   	push   eax
c00168a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00168a6:	83 c0 10             	add    eax,0x10
c00168a9:	50                   	push   eax
c00168aa:	e8 51 9d fe ff       	call   c0000600 <strcpy>
c00168af:	83 c4 10             	add    esp,0x10
c00168b2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00168b9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00168c0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00168c4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00168cb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00168d2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00168d9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00168e0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00168e7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00168ee:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00168f5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00168fc:	89 c6                	mov    esi,eax
c00168fe:	89 d7                	mov    edi,edx
c0016900:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016902:	89 c8                	mov    eax,ecx
c0016904:	89 fa                	mov    edx,edi
c0016906:	89 f3                	mov    ebx,esi
c0016908:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001690f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016916:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001691d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016924:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001692a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016931:	84 c0                	test   al,al
c0016933:	75 07                	jne    c001693c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016935:	b8 07 00 00 00       	mov    eax,0x7
c001693a:	eb 1c                	jmp    c0016958 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001693c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016943:	85 c0                	test   eax,eax
c0016945:	75 09                	jne    c0016950 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016947:	b8 00 00 00 00       	mov    eax,0x0
c001694c:	eb 0a                	jmp    c0016958 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001694e:	66 90                	xchg   ax,ax
c0016950:	b8 01 00 00 00       	mov    eax,0x1
c0016955:	8d 76 00             	lea    esi,[esi+0x0]
c0016958:	81 c4 50 02 00 00    	add    esp,0x250
c001695e:	5b                   	pop    ebx
c001695f:	5e                   	pop    esi
c0016960:	5f                   	pop    edi
c0016961:	c3                   	ret    
c0016962:	66 90                	xchg   ax,ax

c0016964 <FAT::read(void*, unsigned long, void*, int*)>:
c0016964:	83 ec 1c             	sub    esp,0x1c
c0016967:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001696c:	74 0a                	je     c0016978 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001696e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016973:	75 0b                	jne    c0016980 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016975:	8d 76 00             	lea    esi,[esi+0x0]
c0016978:	b8 04 00 00 00       	mov    eax,0x4
c001697d:	eb 41                	jmp    c00169c0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001697f:	90                   	nop
c0016980:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016984:	50                   	push   eax
c0016985:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016989:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001698d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016991:	e8 52 d4 fe ff       	call   c0003de8 <f_read>
c0016996:	83 c4 10             	add    esp,0x10
c0016999:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001699d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00169a1:	89 c2                	mov    edx,eax
c00169a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169a7:	89 10                	mov    DWORD PTR [eax],edx
c00169a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169ad:	85 c0                	test   eax,eax
c00169af:	75 07                	jne    c00169b8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00169b1:	b8 00 00 00 00       	mov    eax,0x0
c00169b6:	eb 08                	jmp    c00169c0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00169b8:	b8 01 00 00 00       	mov    eax,0x1
c00169bd:	8d 76 00             	lea    esi,[esi+0x0]
c00169c0:	83 c4 1c             	add    esp,0x1c
c00169c3:	c3                   	ret    

c00169c4 <FAT::write(void*, unsigned long, void*, int*)>:
c00169c4:	83 ec 1c             	sub    esp,0x1c
c00169c7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00169cc:	74 0a                	je     c00169d8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00169ce:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00169d3:	75 0b                	jne    c00169e0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00169d5:	8d 76 00             	lea    esi,[esi+0x0]
c00169d8:	b8 04 00 00 00       	mov    eax,0x4
c00169dd:	eb 41                	jmp    c0016a20 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00169df:	90                   	nop
c00169e0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00169e4:	50                   	push   eax
c00169e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00169ed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169f1:	e8 f1 d5 fe ff       	call   c0003fe7 <f_write>
c00169f6:	83 c4 10             	add    esp,0x10
c00169f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a01:	89 c2                	mov    edx,eax
c0016a03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a07:	89 10                	mov    DWORD PTR [eax],edx
c0016a09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a0d:	85 c0                	test   eax,eax
c0016a0f:	75 07                	jne    c0016a18 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016a11:	b8 00 00 00 00       	mov    eax,0x0
c0016a16:	eb 08                	jmp    c0016a20 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016a18:	b8 01 00 00 00       	mov    eax,0x1
c0016a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a20:	83 c4 1c             	add    esp,0x1c
c0016a23:	c3                   	ret    

c0016a24 <FAT::close(void*)>:
c0016a24:	83 ec 1c             	sub    esp,0x1c
c0016a27:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016a2c:	75 0a                	jne    c0016a38 <FAT::close(void*)+0x14>
c0016a2e:	b8 04 00 00 00       	mov    eax,0x4
c0016a33:	eb 3f                	jmp    c0016a74 <FAT::close(void*)+0x50>
c0016a35:	8d 76 00             	lea    esi,[esi+0x0]
c0016a38:	83 ec 0c             	sub    esp,0xc
c0016a3b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a3f:	e8 8c d8 fe ff       	call   c00042d0 <f_close>
c0016a44:	83 c4 10             	add    esp,0x10
c0016a47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a4b:	83 ec 0c             	sub    esp,0xc
c0016a4e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a52:	e8 72 0d ff ff       	call   c00077c9 <free>
c0016a57:	83 c4 10             	add    esp,0x10
c0016a5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a5e:	85 c0                	test   eax,eax
c0016a60:	75 0a                	jne    c0016a6c <FAT::close(void*)+0x48>
c0016a62:	b8 00 00 00 00       	mov    eax,0x0
c0016a67:	eb 0b                	jmp    c0016a74 <FAT::close(void*)+0x50>
c0016a69:	8d 76 00             	lea    esi,[esi+0x0]
c0016a6c:	b8 01 00 00 00       	mov    eax,0x1
c0016a71:	8d 76 00             	lea    esi,[esi+0x0]
c0016a74:	83 c4 1c             	add    esp,0x1c
c0016a77:	c3                   	ret    

c0016a78 <FAT::closeDir(void*)>:
c0016a78:	83 ec 1c             	sub    esp,0x1c
c0016a7b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016a80:	75 0a                	jne    c0016a8c <FAT::closeDir(void*)+0x14>
c0016a82:	b8 04 00 00 00       	mov    eax,0x4
c0016a87:	eb 3f                	jmp    c0016ac8 <FAT::closeDir(void*)+0x50>
c0016a89:	8d 76 00             	lea    esi,[esi+0x0]
c0016a8c:	83 ec 0c             	sub    esp,0xc
c0016a8f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a93:	e8 d9 da fe ff       	call   c0004571 <f_closedir>
c0016a98:	83 c4 10             	add    esp,0x10
c0016a9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a9f:	83 ec 0c             	sub    esp,0xc
c0016aa2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016aa6:	e8 1e 0d ff ff       	call   c00077c9 <free>
c0016aab:	83 c4 10             	add    esp,0x10
c0016aae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ab2:	85 c0                	test   eax,eax
c0016ab4:	75 0a                	jne    c0016ac0 <FAT::closeDir(void*)+0x48>
c0016ab6:	b8 00 00 00 00       	mov    eax,0x0
c0016abb:	eb 0b                	jmp    c0016ac8 <FAT::closeDir(void*)+0x50>
c0016abd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ac0:	b8 01 00 00 00       	mov    eax,0x1
c0016ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ac8:	83 c4 1c             	add    esp,0x1c
c0016acb:	c3                   	ret    

c0016acc <FAT::seek(void*, unsigned long long)>:
c0016acc:	83 ec 2c             	sub    esp,0x2c
c0016acf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ad3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ad7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016adb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016adf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016ae4:	75 0a                	jne    c0016af0 <FAT::seek(void*, unsigned long long)+0x24>
c0016ae6:	b8 04 00 00 00       	mov    eax,0x4
c0016aeb:	eb 33                	jmp    c0016b20 <FAT::seek(void*, unsigned long long)+0x54>
c0016aed:	8d 76 00             	lea    esi,[esi+0x0]
c0016af0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016af4:	83 ec 08             	sub    esp,0x8
c0016af7:	50                   	push   eax
c0016af8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016afc:	e8 fe d7 fe ff       	call   c00042ff <f_lseek>
c0016b01:	83 c4 10             	add    esp,0x10
c0016b04:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b0c:	85 c0                	test   eax,eax
c0016b0e:	75 08                	jne    c0016b18 <FAT::seek(void*, unsigned long long)+0x4c>
c0016b10:	b8 00 00 00 00       	mov    eax,0x0
c0016b15:	eb 09                	jmp    c0016b20 <FAT::seek(void*, unsigned long long)+0x54>
c0016b17:	90                   	nop
c0016b18:	b8 01 00 00 00       	mov    eax,0x1
c0016b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016b20:	83 c4 2c             	add    esp,0x2c
c0016b23:	c3                   	ret    

c0016b24 <fatWrapperReadDisk>:
c0016b24:	53                   	push   ebx
c0016b25:	83 ec 18             	sub    esp,0x18
c0016b28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b2c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016b30:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016b34:	25 ff 00 00 00       	and    eax,0xff
c0016b39:	8b 0c 85 60 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd5a0]
c0016b40:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016b44:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016b48:	ba 00 00 00 00       	mov    edx,0x0
c0016b4d:	83 ec 0c             	sub    esp,0xc
c0016b50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b54:	53                   	push   ebx
c0016b55:	52                   	push   edx
c0016b56:	50                   	push   eax
c0016b57:	51                   	push   ecx
c0016b58:	e8 85 60 ff ff       	call   c000cbe2 <LogicalDisk::read(unsigned long long, int, void*)>
c0016b5d:	83 c4 20             	add    esp,0x20
c0016b60:	83 c4 18             	add    esp,0x18
c0016b63:	5b                   	pop    ebx
c0016b64:	c3                   	ret    
c0016b65:	8d 76 00             	lea    esi,[esi+0x0]

c0016b68 <fatWrapperWriteDisk>:
c0016b68:	53                   	push   ebx
c0016b69:	83 ec 18             	sub    esp,0x18
c0016b6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b70:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016b74:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016b78:	25 ff 00 00 00       	and    eax,0xff
c0016b7d:	8b 0c 85 60 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd5a0]
c0016b84:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016b88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016b8c:	ba 00 00 00 00       	mov    edx,0x0
c0016b91:	83 ec 0c             	sub    esp,0xc
c0016b94:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b98:	53                   	push   ebx
c0016b99:	52                   	push   edx
c0016b9a:	50                   	push   eax
c0016b9b:	51                   	push   ecx
c0016b9c:	e8 ad 60 ff ff       	call   c000cc4e <LogicalDisk::write(unsigned long long, int, void*)>
c0016ba1:	83 c4 20             	add    esp,0x20
c0016ba4:	83 c4 18             	add    esp,0x18
c0016ba7:	5b                   	pop    ebx
c0016ba8:	c3                   	ret    
c0016ba9:	8d 76 00             	lea    esi,[esi+0x0]

c0016bac <fatWrapperIoctl>:
c0016bac:	53                   	push   ebx
c0016bad:	83 ec 28             	sub    esp,0x28
c0016bb0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016bb4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016bb8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016bbc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016bc0:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016bc5:	75 35                	jne    c0016bfc <fatWrapperIoctl+0x50>
c0016bc7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016bcb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016bcf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016bd3:	25 ff 00 00 00       	and    eax,0xff
c0016bd8:	8b 04 85 60 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5a0]
c0016bdf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016be5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016beb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016bef:	66 89 02             	mov    WORD PTR [edx],ax
c0016bf2:	b8 00 00 00 00       	mov    eax,0x0
c0016bf7:	e9 c4 00 00 00       	jmp    c0016cc0 <fatWrapperIoctl+0x114>
c0016bfc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016c01:	75 75                	jne    c0016c78 <fatWrapperIoctl+0xcc>
c0016c03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016c07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c0b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016c0f:	25 ff 00 00 00       	and    eax,0xff
c0016c14:	8b 04 85 60 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5a0]
c0016c1b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016c21:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016c27:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0016c2d:	89 c8                	mov    eax,ecx
c0016c2f:	89 da                	mov    edx,ebx
c0016c31:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016c35:	c1 e0 0a             	shl    eax,0xa
c0016c38:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016c3c:	81 e1 ff 00 00 00    	and    ecx,0xff
c0016c42:	8b 0c 8d 60 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5a0]
c0016c49:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0016c4f:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016c55:	89 cb                	mov    ebx,ecx
c0016c57:	c1 fb 1f             	sar    ebx,0x1f
c0016c5a:	53                   	push   ebx
c0016c5b:	51                   	push   ecx
c0016c5c:	52                   	push   edx
c0016c5d:	50                   	push   eax
c0016c5e:	e8 4d 50 00 00       	call   c001bcb0 <__udivdi3>
c0016c63:	83 c4 10             	add    esp,0x10
c0016c66:	89 c2                	mov    edx,eax
c0016c68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c6c:	89 10                	mov    DWORD PTR [eax],edx
c0016c6e:	b8 00 00 00 00       	mov    eax,0x0
c0016c73:	eb 4b                	jmp    c0016cc0 <fatWrapperIoctl+0x114>
c0016c75:	8d 76 00             	lea    esi,[esi+0x0]
c0016c78:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0016c7d:	75 09                	jne    c0016c88 <fatWrapperIoctl+0xdc>
c0016c7f:	b8 00 00 00 00       	mov    eax,0x0
c0016c84:	eb 3a                	jmp    c0016cc0 <fatWrapperIoctl+0x114>
c0016c86:	66 90                	xchg   ax,ax
c0016c88:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0016c8d:	75 19                	jne    c0016ca8 <fatWrapperIoctl+0xfc>
c0016c8f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016c93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c9b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0016ca1:	b8 00 00 00 00       	mov    eax,0x0
c0016ca6:	eb 18                	jmp    c0016cc0 <fatWrapperIoctl+0x114>
c0016ca8:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0016cad:	75 09                	jne    c0016cb8 <fatWrapperIoctl+0x10c>
c0016caf:	b8 00 00 00 00       	mov    eax,0x0
c0016cb4:	eb 0a                	jmp    c0016cc0 <fatWrapperIoctl+0x114>
c0016cb6:	66 90                	xchg   ax,ax
c0016cb8:	b8 04 00 00 00       	mov    eax,0x4
c0016cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0016cc0:	83 c4 28             	add    esp,0x28
c0016cc3:	5b                   	pop    ebx
c0016cc4:	c3                   	ret    
c0016cc5:	90                   	nop
c0016cc6:	66 90                	xchg   ax,ax

c0016cc8 <FAT::FAT()>:
c0016cc8:	83 ec 1c             	sub    esp,0x1c
c0016ccb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ccf:	83 ec 0c             	sub    esp,0xc
c0016cd2:	50                   	push   eax
c0016cd3:	e8 2a 3b ff ff       	call   c000a802 <Filesystem::Filesystem()>
c0016cd8:	83 c4 10             	add    esp,0x10
c0016cdb:	ba 6c ea 01 c0       	mov    edx,0xc001ea6c
c0016ce0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ce4:	89 10                	mov    DWORD PTR [eax],edx
c0016ce6:	c7 05 60 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023860,0x0
c0016cf0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016cf8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0016cfd:	7f 15                	jg     c0016d14 <FAT::FAT()+0x4c>
c0016cff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d03:	c7 04 85 80 38 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc780],0xffffffff
c0016d0e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016d12:	eb e4                	jmp    c0016cf8 <FAT::FAT()+0x30>
c0016d14:	90                   	nop
c0016d15:	83 c4 1c             	add    esp,0x1c
c0016d18:	c3                   	ret    
c0016d19:	90                   	nop
c0016d1a:	66 90                	xchg   ax,ax

c0016d1c <FAT::fixFilepath(char*)>:
c0016d1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d20:	8a 00                	mov    al,BYTE PTR [eax]
c0016d22:	3c 40                	cmp    al,0x40
c0016d24:	7e 2e                	jle    c0016d54 <FAT::fixFilepath(char*)+0x38>
c0016d26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d2a:	8a 00                	mov    al,BYTE PTR [eax]
c0016d2c:	83 e8 41             	sub    eax,0x41
c0016d2f:	88 c2                	mov    dl,al
c0016d31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d35:	88 10                	mov    BYTE PTR [eax],dl
c0016d37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d3b:	8a 00                	mov    al,BYTE PTR [eax]
c0016d3d:	0f be c0             	movsx  eax,al
c0016d40:	8b 04 85 80 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc780]
c0016d47:	83 c0 30             	add    eax,0x30
c0016d4a:	88 c2                	mov    dl,al
c0016d4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d50:	88 10                	mov    BYTE PTR [eax],dl
c0016d52:	66 90                	xchg   ax,ax
c0016d54:	90                   	nop
c0016d55:	c3                   	ret    
c0016d56:	66 90                	xchg   ax,ax

c0016d58 <FAT::open(char const*, void**, FileOpenMode)>:
c0016d58:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016d5e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016d66:	74 0c                	je     c0016d74 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0016d68:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016d70:	75 0e                	jne    c0016d80 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0016d72:	66 90                	xchg   ax,ax
c0016d74:	b8 04 00 00 00       	mov    eax,0x4
c0016d79:	e9 0a 01 00 00       	jmp    c0016e88 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016d7e:	66 90                	xchg   ax,ax
c0016d80:	83 ec 08             	sub    esp,0x8
c0016d83:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016d8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016d8e:	50                   	push   eax
c0016d8f:	e8 6c 98 fe ff       	call   c0000600 <strcpy>
c0016d94:	83 c4 10             	add    esp,0x10
c0016d97:	83 ec 08             	sub    esp,0x8
c0016d9a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d9e:	50                   	push   eax
c0016d9f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016da6:	e8 71 ff ff ff       	call   c0016d1c <FAT::fixFilepath(char*)>
c0016dab:	83 c4 10             	add    esp,0x10
c0016dae:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0016db6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016dbd:	83 e0 01             	and    eax,0x1
c0016dc0:	74 0a                	je     c0016dcc <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0016dc2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0016dca:	66 90                	xchg   ax,ax
c0016dcc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016dd3:	83 e0 04             	and    eax,0x4
c0016dd6:	74 10                	je     c0016de8 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0016dd8:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0016de0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016de8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016def:	83 e0 02             	and    eax,0x2
c0016df2:	74 08                	je     c0016dfc <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016df4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016dfc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016e03:	83 e0 08             	and    eax,0x8
c0016e06:	74 08                	je     c0016e10 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0016e08:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0016e10:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016e17:	83 e0 10             	and    eax,0x10
c0016e1a:	74 08                	je     c0016e24 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0016e1c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0016e24:	83 ec 0c             	sub    esp,0xc
c0016e27:	68 28 02 00 00       	push   0x228
c0016e2c:	e8 88 09 ff ff       	call   c00077b9 <malloc>
c0016e31:	83 c4 10             	add    esp,0x10
c0016e34:	89 c2                	mov    edx,eax
c0016e36:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016e3d:	89 10                	mov    DWORD PTR [eax],edx
c0016e3f:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0016e46:	31 d2                	xor    edx,edx
c0016e48:	88 c2                	mov    dl,al
c0016e4a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016e51:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e53:	83 ec 04             	sub    esp,0x4
c0016e56:	52                   	push   edx
c0016e57:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016e5b:	52                   	push   edx
c0016e5c:	50                   	push   eax
c0016e5d:	e8 bb cc fe ff       	call   c0003b1d <f_open>
c0016e62:	83 c4 10             	add    esp,0x10
c0016e65:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0016e6c:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0016e74:	74 0a                	je     c0016e80 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0016e76:	b8 01 00 00 00       	mov    eax,0x1
c0016e7b:	eb 0b                	jmp    c0016e88 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e80:	b8 00 00 00 00       	mov    eax,0x0
c0016e85:	8d 76 00             	lea    esi,[esi+0x0]
c0016e88:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016e8e:	c3                   	ret    
c0016e8f:	90                   	nop

c0016e90 <FAT::openDir(char const*, void**)>:
c0016e90:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016e96:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016e9e:	74 0c                	je     c0016eac <FAT::openDir(char const*, void**)+0x1c>
c0016ea0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016ea8:	75 0e                	jne    c0016eb8 <FAT::openDir(char const*, void**)+0x28>
c0016eaa:	66 90                	xchg   ax,ax
c0016eac:	b8 04 00 00 00       	mov    eax,0x4
c0016eb1:	e9 82 00 00 00       	jmp    c0016f38 <FAT::openDir(char const*, void**)+0xa8>
c0016eb6:	66 90                	xchg   ax,ax
c0016eb8:	83 ec 08             	sub    esp,0x8
c0016ebb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016ec2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016ec6:	50                   	push   eax
c0016ec7:	e8 34 97 fe ff       	call   c0000600 <strcpy>
c0016ecc:	83 c4 10             	add    esp,0x10
c0016ecf:	83 ec 08             	sub    esp,0x8
c0016ed2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016ed6:	50                   	push   eax
c0016ed7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016ede:	e8 39 fe ff ff       	call   c0016d1c <FAT::fixFilepath(char*)>
c0016ee3:	83 c4 10             	add    esp,0x10
c0016ee6:	83 ec 0c             	sub    esp,0xc
c0016ee9:	6a 30                	push   0x30
c0016eeb:	e8 c9 08 ff ff       	call   c00077b9 <malloc>
c0016ef0:	83 c4 10             	add    esp,0x10
c0016ef3:	89 c2                	mov    edx,eax
c0016ef5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016efc:	89 10                	mov    DWORD PTR [eax],edx
c0016efe:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016f05:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f07:	83 ec 08             	sub    esp,0x8
c0016f0a:	8d 54 24 14          	lea    edx,[esp+0x14]
c0016f0e:	52                   	push   edx
c0016f0f:	50                   	push   eax
c0016f10:	e8 91 d5 fe ff       	call   c00044a6 <f_opendir>
c0016f15:	83 c4 10             	add    esp,0x10
c0016f18:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016f1f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0016f27:	74 07                	je     c0016f30 <FAT::openDir(char const*, void**)+0xa0>
c0016f29:	b8 01 00 00 00       	mov    eax,0x1
c0016f2e:	eb 08                	jmp    c0016f38 <FAT::openDir(char const*, void**)+0xa8>
c0016f30:	b8 00 00 00 00       	mov    eax,0x0
c0016f35:	8d 76 00             	lea    esi,[esi+0x0]
c0016f38:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016f3e:	c3                   	ret    
c0016f3f:	90                   	nop

c0016f40 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0016f40:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0016f46:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0016f4e:	75 0c                	jne    c0016f5c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0016f50:	b8 04 00 00 00       	mov    eax,0x4
c0016f55:	e9 d6 00 00 00       	jmp    c0017030 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f5a:	66 90                	xchg   ax,ax
c0016f5c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0016f64:	75 0a                	jne    c0016f70 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0016f66:	b8 04 00 00 00       	mov    eax,0x4
c0016f6b:	e9 c0 00 00 00       	jmp    c0017030 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f70:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0016f78:	75 0a                	jne    c0016f84 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0016f7a:	b8 04 00 00 00       	mov    eax,0x4
c0016f7f:	e9 ac 00 00 00       	jmp    c0017030 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f84:	83 ec 08             	sub    esp,0x8
c0016f87:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016f8e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016f95:	50                   	push   eax
c0016f96:	e8 65 96 fe ff       	call   c0000600 <strcpy>
c0016f9b:	83 c4 10             	add    esp,0x10
c0016f9e:	83 ec 08             	sub    esp,0x8
c0016fa1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016fa8:	50                   	push   eax
c0016fa9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016fb0:	e8 67 fd ff ff       	call   c0016d1c <FAT::fixFilepath(char*)>
c0016fb5:	83 c4 10             	add    esp,0x10
c0016fb8:	83 ec 08             	sub    esp,0x8
c0016fbb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016fbf:	50                   	push   eax
c0016fc0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016fc7:	50                   	push   eax
c0016fc8:	e8 58 d6 fe ff       	call   c0004625 <f_stat>
c0016fcd:	83 c4 10             	add    esp,0x10
c0016fd0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0016fd7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0016fde:	85 c0                	test   eax,eax
c0016fe0:	74 0a                	je     c0016fec <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0016fe2:	83 f8 04             	cmp    eax,0x4
c0016fe5:	74 39                	je     c0017020 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0016fe7:	eb 3f                	jmp    c0017028 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0016fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0016fec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016ff0:	25 ff 00 00 00       	and    eax,0xff
c0016ff5:	83 e0 10             	and    eax,0x10
c0016ff8:	0f 95 c2             	setne  dl
c0016ffb:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0017002:	88 10                	mov    BYTE PTR [eax],dl
c0017004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017008:	ba 00 00 00 00       	mov    edx,0x0
c001700d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017014:	89 01                	mov    DWORD PTR [ecx],eax
c0017016:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017019:	b8 00 00 00 00       	mov    eax,0x0
c001701e:	eb 10                	jmp    c0017030 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017020:	b8 02 00 00 00       	mov    eax,0x2
c0017025:	eb 09                	jmp    c0017030 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017027:	90                   	nop
c0017028:	b8 01 00 00 00       	mov    eax,0x1
c001702d:	8d 76 00             	lea    esi,[esi+0x0]
c0017030:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017036:	c3                   	ret    
c0017037:	90                   	nop

c0017038 <FAT::unlink(char const*)>:
c0017038:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001703e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017046:	75 08                	jne    c0017050 <FAT::unlink(char const*)+0x18>
c0017048:	b8 04 00 00 00       	mov    eax,0x4
c001704d:	eb 61                	jmp    c00170b0 <FAT::unlink(char const*)+0x78>
c001704f:	90                   	nop
c0017050:	83 ec 08             	sub    esp,0x8
c0017053:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001705a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001705e:	50                   	push   eax
c001705f:	e8 9c 95 fe ff       	call   c0000600 <strcpy>
c0017064:	83 c4 10             	add    esp,0x10
c0017067:	83 ec 08             	sub    esp,0x8
c001706a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001706e:	50                   	push   eax
c001706f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017076:	e8 a1 fc ff ff       	call   c0016d1c <FAT::fixFilepath(char*)>
c001707b:	83 c4 10             	add    esp,0x10
c001707e:	83 ec 0c             	sub    esp,0xc
c0017081:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017085:	50                   	push   eax
c0017086:	e8 ff d7 fe ff       	call   c000488a <f_unlink>
c001708b:	83 c4 10             	add    esp,0x10
c001708e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017095:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001709c:	85 c0                	test   eax,eax
c001709e:	75 08                	jne    c00170a8 <FAT::unlink(char const*)+0x70>
c00170a0:	b8 00 00 00 00       	mov    eax,0x0
c00170a5:	eb 09                	jmp    c00170b0 <FAT::unlink(char const*)+0x78>
c00170a7:	90                   	nop
c00170a8:	b8 01 00 00 00       	mov    eax,0x1
c00170ad:	8d 76 00             	lea    esi,[esi+0x0]
c00170b0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00170b6:	c3                   	ret    
c00170b7:	90                   	nop

c00170b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00170b8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00170be:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00170c5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00170cc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00170d0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00170d4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00170dc:	75 0a                	jne    c00170e8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00170de:	b8 04 00 00 00       	mov    eax,0x4
c00170e3:	e9 54 01 00 00       	jmp    c001723c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00170e8:	83 ec 08             	sub    esp,0x8
c00170eb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00170f2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00170f6:	50                   	push   eax
c00170f7:	e8 04 95 fe ff       	call   c0000600 <strcpy>
c00170fc:	83 c4 10             	add    esp,0x10
c00170ff:	83 ec 08             	sub    esp,0x8
c0017102:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017106:	50                   	push   eax
c0017107:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001710e:	e8 09 fc ff ff       	call   c0016d1c <FAT::fixFilepath(char*)>
c0017113:	83 c4 10             	add    esp,0x10
c0017116:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001711e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0017126:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001712a:	25 ff 00 00 00       	and    eax,0xff
c001712f:	83 e0 01             	and    eax,0x1
c0017132:	74 08                	je     c001713c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0017134:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001713c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017140:	25 ff 00 00 00       	and    eax,0xff
c0017145:	83 e0 02             	and    eax,0x2
c0017148:	74 0a                	je     c0017154 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c001714a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0017152:	66 90                	xchg   ax,ax
c0017154:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017158:	25 ff 00 00 00       	and    eax,0xff
c001715d:	83 e0 04             	and    eax,0x4
c0017160:	74 0a                	je     c001716c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c0017162:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001716a:	66 90                	xchg   ax,ax
c001716c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017170:	25 ff 00 00 00       	and    eax,0xff
c0017175:	83 e0 08             	and    eax,0x8
c0017178:	74 0a                	je     c0017184 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c001717a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0017182:	66 90                	xchg   ax,ax
c0017184:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017188:	25 ff 00 00 00       	and    eax,0xff
c001718d:	83 e0 01             	and    eax,0x1
c0017190:	74 0a                	je     c001719c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0017192:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001719a:	66 90                	xchg   ax,ax
c001719c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00171a0:	25 ff 00 00 00       	and    eax,0xff
c00171a5:	83 e0 02             	and    eax,0x2
c00171a8:	74 0a                	je     c00171b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00171aa:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00171b2:	66 90                	xchg   ax,ax
c00171b4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00171b8:	25 ff 00 00 00       	and    eax,0xff
c00171bd:	83 e0 04             	and    eax,0x4
c00171c0:	74 0a                	je     c00171cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00171c2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00171ca:	66 90                	xchg   ax,ax
c00171cc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00171d0:	25 ff 00 00 00       	and    eax,0xff
c00171d5:	83 e0 08             	and    eax,0x8
c00171d8:	74 0a                	je     c00171e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00171da:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00171e2:	66 90                	xchg   ax,ax
c00171e4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00171eb:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00171f2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00171f9:	31 d2                	xor    edx,edx
c00171fb:	88 c2                	mov    dl,al
c00171fd:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017204:	25 ff 00 00 00       	and    eax,0xff
c0017209:	83 ec 04             	sub    esp,0x4
c001720c:	52                   	push   edx
c001720d:	50                   	push   eax
c001720e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017212:	50                   	push   eax
c0017213:	e8 e5 da fe ff       	call   c0004cfd <f_chmod>
c0017218:	83 c4 10             	add    esp,0x10
c001721b:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0017222:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017229:	85 c0                	test   eax,eax
c001722b:	75 07                	jne    c0017234 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c001722d:	b8 00 00 00 00       	mov    eax,0x0
c0017232:	eb 08                	jmp    c001723c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017234:	b8 01 00 00 00       	mov    eax,0x1
c0017239:	8d 76 00             	lea    esi,[esi+0x0]
c001723c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017242:	c3                   	ret    
c0017243:	90                   	nop

c0017244 <FAT::rename(char const*, char const*)>:
c0017244:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001724a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0017252:	74 0c                	je     c0017260 <FAT::rename(char const*, char const*)+0x1c>
c0017254:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001725c:	75 0e                	jne    c001726c <FAT::rename(char const*, char const*)+0x28>
c001725e:	66 90                	xchg   ax,ax
c0017260:	b8 04 00 00 00       	mov    eax,0x4
c0017265:	e9 9e 00 00 00       	jmp    c0017308 <FAT::rename(char const*, char const*)+0xc4>
c001726a:	66 90                	xchg   ax,ax
c001726c:	83 ec 08             	sub    esp,0x8
c001726f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017276:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001727d:	50                   	push   eax
c001727e:	e8 7d 93 fe ff       	call   c0000600 <strcpy>
c0017283:	83 c4 10             	add    esp,0x10
c0017286:	83 ec 08             	sub    esp,0x8
c0017289:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017290:	50                   	push   eax
c0017291:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017298:	e8 7f fa ff ff       	call   c0016d1c <FAT::fixFilepath(char*)>
c001729d:	83 c4 10             	add    esp,0x10
c00172a0:	83 ec 08             	sub    esp,0x8
c00172a3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00172aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172ae:	50                   	push   eax
c00172af:	e8 4c 93 fe ff       	call   c0000600 <strcpy>
c00172b4:	83 c4 10             	add    esp,0x10
c00172b7:	83 ec 08             	sub    esp,0x8
c00172ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172be:	50                   	push   eax
c00172bf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00172c6:	e8 51 fa ff ff       	call   c0016d1c <FAT::fixFilepath(char*)>
c00172cb:	83 c4 10             	add    esp,0x10
c00172ce:	83 ec 08             	sub    esp,0x8
c00172d1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172d5:	50                   	push   eax
c00172d6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00172dd:	50                   	push   eax
c00172de:	e8 64 d8 fe ff       	call   c0004b47 <f_rename>
c00172e3:	83 c4 10             	add    esp,0x10
c00172e6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00172ed:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00172f4:	85 c0                	test   eax,eax
c00172f6:	75 08                	jne    c0017300 <FAT::rename(char const*, char const*)+0xbc>
c00172f8:	b8 00 00 00 00       	mov    eax,0x0
c00172fd:	eb 09                	jmp    c0017308 <FAT::rename(char const*, char const*)+0xc4>
c00172ff:	90                   	nop
c0017300:	b8 01 00 00 00       	mov    eax,0x1
c0017305:	8d 76 00             	lea    esi,[esi+0x0]
c0017308:	81 c4 1c 02 00 00    	add    esp,0x21c
c001730e:	c3                   	ret    
c001730f:	90                   	nop

c0017310 <FAT::mkdir(char const*)>:
c0017310:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017316:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001731e:	75 08                	jne    c0017328 <FAT::mkdir(char const*)+0x18>
c0017320:	b8 04 00 00 00       	mov    eax,0x4
c0017325:	eb 61                	jmp    c0017388 <FAT::mkdir(char const*)+0x78>
c0017327:	90                   	nop
c0017328:	83 ec 08             	sub    esp,0x8
c001732b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017332:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017336:	50                   	push   eax
c0017337:	e8 c4 92 fe ff       	call   c0000600 <strcpy>
c001733c:	83 c4 10             	add    esp,0x10
c001733f:	83 ec 08             	sub    esp,0x8
c0017342:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017346:	50                   	push   eax
c0017347:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001734e:	e8 c9 f9 ff ff       	call   c0016d1c <FAT::fixFilepath(char*)>
c0017353:	83 c4 10             	add    esp,0x10
c0017356:	83 ec 0c             	sub    esp,0xc
c0017359:	8d 44 24 18          	lea    eax,[esp+0x18]
c001735d:	50                   	push   eax
c001735e:	e8 49 d6 fe ff       	call   c00049ac <f_mkdir>
c0017363:	83 c4 10             	add    esp,0x10
c0017366:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001736d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017374:	85 c0                	test   eax,eax
c0017376:	75 08                	jne    c0017380 <FAT::mkdir(char const*)+0x70>
c0017378:	b8 00 00 00 00       	mov    eax,0x0
c001737d:	eb 09                	jmp    c0017388 <FAT::mkdir(char const*)+0x78>
c001737f:	90                   	nop
c0017380:	b8 01 00 00 00       	mov    eax,0x1
c0017385:	8d 76 00             	lea    esi,[esi+0x0]
c0017388:	81 c4 1c 01 00 00    	add    esp,0x11c
c001738e:	c3                   	ret    
c001738f:	90                   	nop

c0017390 <FAT::exists(char const*)>:
c0017390:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017396:	83 ec 08             	sub    esp,0x8
c0017399:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00173a0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00173a4:	50                   	push   eax
c00173a5:	e8 56 92 fe ff       	call   c0000600 <strcpy>
c00173aa:	83 c4 10             	add    esp,0x10
c00173ad:	83 ec 08             	sub    esp,0x8
c00173b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00173b4:	50                   	push   eax
c00173b5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00173bc:	e8 5b f9 ff ff       	call   c0016d1c <FAT::fixFilepath(char*)>
c00173c1:	83 c4 10             	add    esp,0x10
c00173c4:	83 ec 08             	sub    esp,0x8
c00173c7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00173ce:	50                   	push   eax
c00173cf:	8d 44 24 10          	lea    eax,[esp+0x10]
c00173d3:	50                   	push   eax
c00173d4:	e8 4c d2 fe ff       	call   c0004625 <f_stat>
c00173d9:	83 c4 10             	add    esp,0x10
c00173dc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00173e3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00173ea:	85 c0                	test   eax,eax
c00173ec:	75 06                	jne    c00173f4 <FAT::exists(char const*)+0x64>
c00173ee:	b0 01                	mov    al,0x1
c00173f0:	eb 06                	jmp    c00173f8 <FAT::exists(char const*)+0x68>
c00173f2:	66 90                	xchg   ax,ax
c00173f4:	b0 00                	mov    al,0x0
c00173f6:	66 90                	xchg   ax,ax
c00173f8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00173fe:	c3                   	ret    
c00173ff:	90                   	nop

c0017400 <isoReadDiscSectorHelper>:
c0017400:	83 ec 2c             	sub    esp,0x2c
c0017403:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017407:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001740b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017410:	83 e8 41             	sub    eax,0x41
c0017413:	8b 0c 85 60 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd5a0]
c001741a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001741e:	ba 00 00 00 00       	mov    edx,0x0
c0017423:	83 ec 0c             	sub    esp,0xc
c0017426:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001742a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001742e:	52                   	push   edx
c001742f:	50                   	push   eax
c0017430:	51                   	push   ecx
c0017431:	e8 ac 57 ff ff       	call   c000cbe2 <LogicalDisk::read(unsigned long long, int, void*)>
c0017436:	83 c4 20             	add    esp,0x20
c0017439:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001743d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017442:	74 0c                	je     c0017450 <isoReadDiscSectorHelper+0x50>
c0017444:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017448:	c1 e0 0b             	shl    eax,0xb
c001744b:	eb 0b                	jmp    c0017458 <isoReadDiscSectorHelper+0x58>
c001744d:	8d 76 00             	lea    esi,[esi+0x0]
c0017450:	b8 00 00 00 00       	mov    eax,0x0
c0017455:	8d 76 00             	lea    esi,[esi+0x0]
c0017458:	83 c4 2c             	add    esp,0x2c
c001745b:	c3                   	ret    

c001745c <iso_kprintf>:
c001745c:	83 ec 0c             	sub    esp,0xc
c001745f:	a1 44 05 02 c0       	mov    eax,ds:0xc0020544
c0017464:	83 ec 08             	sub    esp,0x8
c0017467:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001746b:	50                   	push   eax
c001746c:	e8 c5 12 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017471:	83 c4 10             	add    esp,0x10
c0017474:	90                   	nop
c0017475:	83 c4 0c             	add    esp,0xc
c0017478:	c3                   	ret    
c0017479:	8d 76 00             	lea    esi,[esi+0x0]

c001747c <iso_kprintfd>:
c001747c:	83 ec 0c             	sub    esp,0xc
c001747f:	a1 44 05 02 c0       	mov    eax,ds:0xc0020544
c0017484:	83 ec 08             	sub    esp,0x8
c0017487:	68 cc ea 01 c0       	push   0xc001eacc
c001748c:	50                   	push   eax
c001748d:	e8 a4 12 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017492:	83 c4 10             	add    esp,0x10
c0017495:	a1 44 05 02 c0       	mov    eax,ds:0xc0020544
c001749a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001749e:	83 ec 08             	sub    esp,0x8
c00174a1:	52                   	push   edx
c00174a2:	50                   	push   eax
c00174a3:	e8 48 12 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00174a8:	83 c4 10             	add    esp,0x10
c00174ab:	a1 44 05 02 c0       	mov    eax,ds:0xc0020544
c00174b0:	83 ec 08             	sub    esp,0x8
c00174b3:	68 4d e9 01 c0       	push   0xc001e94d
c00174b8:	50                   	push   eax
c00174b9:	e8 78 12 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00174be:	83 c4 10             	add    esp,0x10
c00174c1:	90                   	nop
c00174c2:	83 c4 0c             	add    esp,0xc
c00174c5:	c3                   	ret    

c00174c6 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00174c6:	b8 08 00 00 00       	mov    eax,0x8
c00174cb:	c3                   	ret    

c00174cc <ISO9660::getName()>:
c00174cc:	b8 cf ea 01 c0       	mov    eax,0xc001eacf
c00174d1:	c3                   	ret    

c00174d2 <ISO9660::closeDir(void*)>:
c00174d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00174d8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00174db:	90                   	nop

c00174dc <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00174dc:	b8 01 00 00 00       	mov    eax,0x1
c00174e1:	c3                   	ret    

c00174e2 <ISO9660::unlink(char const*)>:
c00174e2:	b8 01 00 00 00       	mov    eax,0x1
c00174e7:	c3                   	ret    

c00174e8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00174e8:	b8 03 00 00 00       	mov    eax,0x3
c00174ed:	c3                   	ret    

c00174ee <ISO9660::rename(char const*, char const*)>:
c00174ee:	b8 01 00 00 00       	mov    eax,0x1
c00174f3:	c3                   	ret    

c00174f4 <ISO9660::mkdir(char const*)>:
c00174f4:	b8 01 00 00 00       	mov    eax,0x1
c00174f9:	c3                   	ret    

c00174fa <ISO9660::~ISO9660()>:
c00174fa:	83 ec 0c             	sub    esp,0xc
c00174fd:	ba 20 eb 01 c0       	mov    edx,0xc001eb20
c0017502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017506:	89 10                	mov    DWORD PTR [eax],edx
c0017508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001750c:	83 ec 0c             	sub    esp,0xc
c001750f:	50                   	push   eax
c0017510:	e8 11 33 ff ff       	call   c000a826 <Filesystem::~Filesystem()>
c0017515:	83 c4 10             	add    esp,0x10
c0017518:	90                   	nop
c0017519:	83 c4 0c             	add    esp,0xc
c001751c:	c3                   	ret    
c001751d:	90                   	nop

c001751e <ISO9660::~ISO9660()>:
c001751e:	83 ec 0c             	sub    esp,0xc
c0017521:	83 ec 0c             	sub    esp,0xc
c0017524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017528:	e8 cd ff ff ff       	call   c00174fa <ISO9660::~ISO9660()>
c001752d:	83 c4 10             	add    esp,0x10
c0017530:	83 ec 08             	sub    esp,0x8
c0017533:	6a 08                	push   0x8
c0017535:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017539:	e8 ac 2e ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001753e:	83 c4 10             	add    esp,0x10
c0017541:	83 c4 0c             	add    esp,0xc
c0017544:	c3                   	ret    
c0017545:	90                   	nop

c0017546 <ISO9660::exists(char const*)>:
c0017546:	83 ec 18             	sub    esp,0x18
c0017549:	68 ea ea 01 c0       	push   0xc001eaea
c001754e:	e8 0c 8c ff ff       	call   c001015f <KePanic(char const*)>
c0017553:	31 c0                	xor    eax,eax
c0017555:	83 c4 1c             	add    esp,0x1c
c0017558:	c3                   	ret    
c0017559:	90                   	nop

c001755a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001755a:	56                   	push   esi
c001755b:	53                   	push   ebx
c001755c:	50                   	push   eax
c001755d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017561:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017565:	85 db                	test   ebx,ebx
c0017567:	0f 84 82 00 00 00    	je     c00175ef <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c001756d:	85 f6                	test   esi,esi
c001756f:	74 7e                	je     c00175ef <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017571:	ba 03 00 00 00       	mov    edx,0x3
c0017576:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001757b:	75 77                	jne    c00175f4 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c001757d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017580:	3a 05 60 39 02 c0    	cmp    al,BYTE PTR ds:0xc0023960
c0017586:	74 34                	je     c00175bc <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017588:	83 ec 0c             	sub    esp,0xc
c001758b:	50                   	push   eax
c001758c:	e8 2e f2 fe ff       	call   c00067bf <init_percd>
c0017591:	83 c4 10             	add    esp,0x10
c0017594:	ba 0b 00 00 00       	mov    edx,0xb
c0017599:	40                   	inc    eax
c001759a:	74 58                	je     c00175f4 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c001759c:	80 3d 60 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023960,0x0
c00175a3:	74 10                	je     c00175b5 <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c00175a5:	83 ec 0c             	sub    esp,0xc
c00175a8:	68 08 eb 01 c0       	push   0xc001eb08
c00175ad:	e8 ad 8b ff ff       	call   c001015f <KePanic(char const*)>
c00175b2:	83 c4 10             	add    esp,0x10
c00175b5:	8a 03                	mov    al,BYTE PTR [ebx]
c00175b7:	a2 60 39 02 c0       	mov    ds:0xc0023960,al
c00175bc:	83 ec 0c             	sub    esp,0xc
c00175bf:	0f be 05 60 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023960
c00175c6:	83 c3 03             	add    ebx,0x3
c00175c9:	50                   	push   eax
c00175ca:	e8 f0 f1 fe ff       	call   c00067bf <init_percd>
c00175cf:	59                   	pop    ecx
c00175d0:	58                   	pop    eax
c00175d1:	6a 00                	push   0x0
c00175d3:	53                   	push   ebx
c00175d4:	e8 24 ed fe ff       	call   c00062fd <iso_open>
c00175d9:	83 c4 10             	add    esp,0x10
c00175dc:	ba 01 00 00 00       	mov    edx,0x1
c00175e1:	83 f8 ff             	cmp    eax,0xffffffff
c00175e4:	74 0e                	je     c00175f4 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00175e6:	83 c0 64             	add    eax,0x64
c00175e9:	31 d2                	xor    edx,edx
c00175eb:	89 06                	mov    DWORD PTR [esi],eax
c00175ed:	eb 05                	jmp    c00175f4 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00175ef:	ba 04 00 00 00       	mov    edx,0x4
c00175f4:	89 d0                	mov    eax,edx
c00175f6:	5a                   	pop    edx
c00175f7:	5b                   	pop    ebx
c00175f8:	5e                   	pop    esi
c00175f9:	c3                   	ret    

c00175fa <ISO9660::openDir(char const*, void**)>:
c00175fa:	56                   	push   esi
c00175fb:	53                   	push   ebx
c00175fc:	50                   	push   eax
c00175fd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017601:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017605:	85 db                	test   ebx,ebx
c0017607:	74 76                	je     c001767f <ISO9660::openDir(char const*, void**)+0x85>
c0017609:	85 f6                	test   esi,esi
c001760b:	74 72                	je     c001767f <ISO9660::openDir(char const*, void**)+0x85>
c001760d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017610:	3a 05 60 39 02 c0    	cmp    al,BYTE PTR ds:0xc0023960
c0017616:	74 34                	je     c001764c <ISO9660::openDir(char const*, void**)+0x52>
c0017618:	83 ec 0c             	sub    esp,0xc
c001761b:	50                   	push   eax
c001761c:	e8 9e f1 fe ff       	call   c00067bf <init_percd>
c0017621:	83 c4 10             	add    esp,0x10
c0017624:	ba 0b 00 00 00       	mov    edx,0xb
c0017629:	40                   	inc    eax
c001762a:	74 58                	je     c0017684 <ISO9660::openDir(char const*, void**)+0x8a>
c001762c:	80 3d 60 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023960,0x0
c0017633:	74 10                	je     c0017645 <ISO9660::openDir(char const*, void**)+0x4b>
c0017635:	83 ec 0c             	sub    esp,0xc
c0017638:	68 08 eb 01 c0       	push   0xc001eb08
c001763d:	e8 1d 8b ff ff       	call   c001015f <KePanic(char const*)>
c0017642:	83 c4 10             	add    esp,0x10
c0017645:	8a 03                	mov    al,BYTE PTR [ebx]
c0017647:	a2 60 39 02 c0       	mov    ds:0xc0023960,al
c001764c:	83 ec 0c             	sub    esp,0xc
c001764f:	0f be 05 60 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023960
c0017656:	83 c3 03             	add    ebx,0x3
c0017659:	50                   	push   eax
c001765a:	e8 60 f1 fe ff       	call   c00067bf <init_percd>
c001765f:	59                   	pop    ecx
c0017660:	58                   	pop    eax
c0017661:	6a 01                	push   0x1
c0017663:	53                   	push   ebx
c0017664:	e8 94 ec fe ff       	call   c00062fd <iso_open>
c0017669:	83 c4 10             	add    esp,0x10
c001766c:	ba 01 00 00 00       	mov    edx,0x1
c0017671:	83 f8 ff             	cmp    eax,0xffffffff
c0017674:	74 0e                	je     c0017684 <ISO9660::openDir(char const*, void**)+0x8a>
c0017676:	83 c0 64             	add    eax,0x64
c0017679:	31 d2                	xor    edx,edx
c001767b:	89 06                	mov    DWORD PTR [esi],eax
c001767d:	eb 05                	jmp    c0017684 <ISO9660::openDir(char const*, void**)+0x8a>
c001767f:	ba 04 00 00 00       	mov    edx,0x4
c0017684:	89 d0                	mov    eax,edx
c0017686:	5a                   	pop    edx
c0017687:	5b                   	pop    ebx
c0017688:	5e                   	pop    esi
c0017689:	c3                   	ret    

c001768a <ISO9660::read(void*, unsigned long, void*, int*)>:
c001768a:	53                   	push   ebx
c001768b:	83 ec 08             	sub    esp,0x8
c001768e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017692:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017696:	85 c0                	test   eax,eax
c0017698:	74 25                	je     c00176bf <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c001769a:	85 db                	test   ebx,ebx
c001769c:	74 21                	je     c00176bf <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c001769e:	83 e8 64             	sub    eax,0x64
c00176a1:	52                   	push   edx
c00176a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00176aa:	50                   	push   eax
c00176ab:	e8 f5 ec fe ff       	call   c00063a5 <iso_read>
c00176b0:	83 c4 10             	add    esp,0x10
c00176b3:	89 03                	mov    DWORD PTR [ebx],eax
c00176b5:	09 d0                	or     eax,edx
c00176b7:	0f 94 c0             	sete   al
c00176ba:	0f b6 c0             	movzx  eax,al
c00176bd:	eb 05                	jmp    c00176c4 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c00176bf:	b8 04 00 00 00       	mov    eax,0x4
c00176c4:	83 c4 08             	add    esp,0x8
c00176c7:	5b                   	pop    ebx
c00176c8:	c3                   	ret    
c00176c9:	90                   	nop

c00176ca <ISO9660::seek(void*, unsigned long long)>:
c00176ca:	57                   	push   edi
c00176cb:	56                   	push   esi
c00176cc:	b8 04 00 00 00       	mov    eax,0x4
c00176d1:	51                   	push   ecx
c00176d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00176d6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00176da:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00176de:	85 d2                	test   edx,edx
c00176e0:	74 1c                	je     c00176fe <ISO9660::seek(void*, unsigned long long)+0x34>
c00176e2:	6a 00                	push   0x0
c00176e4:	83 ea 64             	sub    edx,0x64
c00176e7:	57                   	push   edi
c00176e8:	56                   	push   esi
c00176e9:	52                   	push   edx
c00176ea:	e8 cc ed fe ff       	call   c00064bb <iso_seek>
c00176ef:	83 c4 10             	add    esp,0x10
c00176f2:	31 f0                	xor    eax,esi
c00176f4:	31 fa                	xor    edx,edi
c00176f6:	09 d0                	or     eax,edx
c00176f8:	0f 95 c0             	setne  al
c00176fb:	0f b6 c0             	movzx  eax,al
c00176fe:	5a                   	pop    edx
c00176ff:	5e                   	pop    esi
c0017700:	5f                   	pop    edi
c0017701:	c3                   	ret    

c0017702 <ISO9660::tell(void*, unsigned long long*)>:
c0017702:	53                   	push   ebx
c0017703:	83 ec 08             	sub    esp,0x8
c0017706:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001770a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001770e:	85 c0                	test   eax,eax
c0017710:	74 1c                	je     c001772e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017712:	85 db                	test   ebx,ebx
c0017714:	74 18                	je     c001772e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017716:	83 ec 0c             	sub    esp,0xc
c0017719:	83 e8 64             	sub    eax,0x64
c001771c:	50                   	push   eax
c001771d:	e8 1d ee fe ff       	call   c000653f <iso_tell>
c0017722:	83 c4 10             	add    esp,0x10
c0017725:	89 03                	mov    DWORD PTR [ebx],eax
c0017727:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001772a:	31 c0                	xor    eax,eax
c001772c:	eb 05                	jmp    c0017733 <ISO9660::tell(void*, unsigned long long*)+0x31>
c001772e:	b8 04 00 00 00       	mov    eax,0x4
c0017733:	83 c4 08             	add    esp,0x8
c0017736:	5b                   	pop    ebx
c0017737:	c3                   	ret    

c0017738 <ISO9660::stat(void*, unsigned long long*)>:
c0017738:	53                   	push   ebx
c0017739:	83 ec 08             	sub    esp,0x8
c001773c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017740:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017744:	85 c0                	test   eax,eax
c0017746:	74 20                	je     c0017768 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017748:	85 db                	test   ebx,ebx
c001774a:	74 1c                	je     c0017768 <ISO9660::stat(void*, unsigned long long*)+0x30>
c001774c:	83 ec 0c             	sub    esp,0xc
c001774f:	83 e8 64             	sub    eax,0x64
c0017752:	50                   	push   eax
c0017753:	e8 18 ee fe ff       	call   c0006570 <iso_total>
c0017758:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001775f:	89 03                	mov    DWORD PTR [ebx],eax
c0017761:	83 c4 10             	add    esp,0x10
c0017764:	31 c0                	xor    eax,eax
c0017766:	eb 05                	jmp    c001776d <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017768:	b8 04 00 00 00       	mov    eax,0x4
c001776d:	83 c4 08             	add    esp,0x8
c0017770:	5b                   	pop    ebx
c0017771:	c3                   	ret    

c0017772 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017772:	55                   	push   ebp
c0017773:	57                   	push   edi
c0017774:	56                   	push   esi
c0017775:	53                   	push   ebx
c0017776:	83 ec 0c             	sub    esp,0xc
c0017779:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001777d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017781:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017785:	85 ff                	test   edi,edi
c0017787:	0f 94 c2             	sete   dl
c001778a:	85 f6                	test   esi,esi
c001778c:	0f 94 c0             	sete   al
c001778f:	08 c2                	or     dl,al
c0017791:	0f 85 9e 00 00 00    	jne    c0017835 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017797:	85 db                	test   ebx,ebx
c0017799:	0f 84 96 00 00 00    	je     c0017835 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c001779f:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00177a2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00177a8:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00177af:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00177b2:	3a 05 60 39 02 c0    	cmp    al,BYTE PTR ds:0xc0023960
c00177b8:	74 34                	je     c00177ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c00177ba:	83 ec 0c             	sub    esp,0xc
c00177bd:	50                   	push   eax
c00177be:	e8 fc ef fe ff       	call   c00067bf <init_percd>
c00177c3:	83 c4 10             	add    esp,0x10
c00177c6:	ba 0b 00 00 00       	mov    edx,0xb
c00177cb:	40                   	inc    eax
c00177cc:	74 6c                	je     c001783a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c00177ce:	80 3d 60 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023960,0x0
c00177d5:	74 10                	je     c00177e7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c00177d7:	83 ec 0c             	sub    esp,0xc
c00177da:	68 08 eb 01 c0       	push   0xc001eb08
c00177df:	e8 7b 89 ff ff       	call   c001015f <KePanic(char const*)>
c00177e4:	83 c4 10             	add    esp,0x10
c00177e7:	8a 03                	mov    al,BYTE PTR [ebx]
c00177e9:	a2 60 39 02 c0       	mov    ds:0xc0023960,al
c00177ee:	83 c3 03             	add    ebx,0x3
c00177f1:	52                   	push   edx
c00177f2:	52                   	push   edx
c00177f3:	6a 00                	push   0x0
c00177f5:	53                   	push   ebx
c00177f6:	e8 02 eb fe ff       	call   c00062fd <iso_open>
c00177fb:	83 c4 10             	add    esp,0x10
c00177fe:	89 c5                	mov    ebp,eax
c0017800:	83 f8 ff             	cmp    eax,0xffffffff
c0017803:	75 0f                	jne    c0017814 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017805:	50                   	push   eax
c0017806:	50                   	push   eax
c0017807:	6a 01                	push   0x1
c0017809:	53                   	push   ebx
c001780a:	e8 ee ea fe ff       	call   c00062fd <iso_open>
c001780f:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017812:	eb 1a                	jmp    c001782e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017814:	83 ec 0c             	sub    esp,0xc
c0017817:	50                   	push   eax
c0017818:	e8 53 ed fe ff       	call   c0006570 <iso_total>
c001781d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017824:	89 06                	mov    DWORD PTR [esi],eax
c0017826:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017829:	e8 59 eb fe ff       	call   c0006387 <iso_close>
c001782e:	83 c4 10             	add    esp,0x10
c0017831:	31 d2                	xor    edx,edx
c0017833:	eb 05                	jmp    c001783a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017835:	ba 04 00 00 00       	mov    edx,0x4
c001783a:	83 c4 0c             	add    esp,0xc
c001783d:	89 d0                	mov    eax,edx
c001783f:	5b                   	pop    ebx
c0017840:	5e                   	pop    esi
c0017841:	5f                   	pop    edi
c0017842:	5d                   	pop    ebp
c0017843:	c3                   	ret    

c0017844 <ISO9660::close(void*)>:
c0017844:	83 ec 0c             	sub    esp,0xc
c0017847:	b8 04 00 00 00       	mov    eax,0x4
c001784c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017850:	85 d2                	test   edx,edx
c0017852:	74 11                	je     c0017865 <ISO9660::close(void*)+0x21>
c0017854:	83 ec 0c             	sub    esp,0xc
c0017857:	83 ea 64             	sub    edx,0x64
c001785a:	52                   	push   edx
c001785b:	e8 27 eb fe ff       	call   c0006387 <iso_close>
c0017860:	83 c4 10             	add    esp,0x10
c0017863:	31 c0                	xor    eax,eax
c0017865:	83 c4 0c             	add    esp,0xc
c0017868:	c3                   	ret    
c0017869:	90                   	nop

c001786a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001786a:	55                   	push   ebp
c001786b:	57                   	push   edi
c001786c:	56                   	push   esi
c001786d:	53                   	push   ebx
c001786e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017874:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c001787b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017882:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017889:	85 c0                	test   eax,eax
c001788b:	0f 84 96 00 00 00    	je     c0017927 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017891:	85 db                	test   ebx,ebx
c0017893:	0f 84 8e 00 00 00    	je     c0017927 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017899:	83 ec 0c             	sub    esp,0xc
c001789c:	83 e8 64             	sub    eax,0x64
c001789f:	50                   	push   eax
c00178a0:	e8 1c ed fe ff       	call   c00065c1 <iso_readdir>
c00178a5:	83 c4 10             	add    esp,0x10
c00178a8:	89 c6                	mov    esi,eax
c00178aa:	85 c0                	test   eax,eax
c00178ac:	75 18                	jne    c00178c6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c00178ae:	52                   	push   edx
c00178af:	68 10 01 00 00       	push   0x110
c00178b4:	6a 00                	push   0x0
c00178b6:	57                   	push   edi
c00178b7:	e8 14 8c fe ff       	call   c00004d0 <memset>
c00178bc:	83 c4 10             	add    esp,0x10
c00178bf:	b8 01 00 00 00       	mov    eax,0x1
c00178c4:	eb 66                	jmp    c001792c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c00178c6:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00178cc:	8d 68 08             	lea    ebp,[eax+0x8]
c00178cf:	83 ec 0c             	sub    esp,0xc
c00178d2:	55                   	push   ebp
c00178d3:	e8 68 8c fe ff       	call   c0000540 <strlen>
c00178d8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00178e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00178e4:	83 c4 10             	add    esp,0x10
c00178e7:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c00178eb:	75 0a                	jne    c00178f7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c00178ed:	b8 02 00 00 00       	mov    eax,0x2
c00178f2:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c00178f5:	74 05                	je     c00178fc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c00178f7:	b8 01 00 00 00       	mov    eax,0x1
c00178fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017900:	50                   	push   eax
c0017901:	50                   	push   eax
c0017902:	55                   	push   ebp
c0017903:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017907:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001790b:	50                   	push   eax
c001790c:	e8 ef 8c fe ff       	call   c0000600 <strcpy>
c0017911:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017918:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001791a:	31 c0                	xor    eax,eax
c001791c:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017922:	83 c4 10             	add    esp,0x10
c0017925:	eb 05                	jmp    c001792c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017927:	b8 04 00 00 00       	mov    eax,0x4
c001792c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017932:	5b                   	pop    ebx
c0017933:	5e                   	pop    esi
c0017934:	5f                   	pop    edi
c0017935:	5d                   	pop    ebp
c0017936:	c3                   	ret    

c0017937 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017937:	57                   	push   edi
c0017938:	56                   	push   esi
c0017939:	53                   	push   ebx
c001793a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001793e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017942:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017946:	39 35 64 39 02 c0    	cmp    DWORD PTR ds:0xc0023964,esi
c001794c:	75 08                	jne    c0017956 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001794e:	38 1d cc f4 01 c0    	cmp    BYTE PTR ds:0xc001f4cc,bl
c0017954:	74 4a                	je     c00179a0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017956:	83 ec 0c             	sub    esp,0xc
c0017959:	31 d2                	xor    edx,edx
c001795b:	68 80 39 02 c0       	push   0xc0023980
c0017960:	0f be c3             	movsx  eax,bl
c0017963:	6a 01                	push   0x1
c0017965:	52                   	push   edx
c0017966:	56                   	push   esi
c0017967:	ff 34 85 5c 29 02 c0 	push   DWORD PTR [eax*4-0x3ffdd6a4]
c001796e:	e8 6f 52 ff ff       	call   c000cbe2 <LogicalDisk::read(unsigned long long, int, void*)>
c0017973:	83 c4 20             	add    esp,0x20
c0017976:	85 c0                	test   eax,eax
c0017978:	75 0e                	jne    c0017988 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001797a:	89 35 64 39 02 c0    	mov    DWORD PTR ds:0xc0023964,esi
c0017980:	88 1d cc f4 01 c0    	mov    BYTE PTR ds:0xc001f4cc,bl
c0017986:	eb 18                	jmp    c00179a0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017988:	50                   	push   eax
c0017989:	68 00 08 00 00       	push   0x800
c001798e:	6a 00                	push   0x0
c0017990:	57                   	push   edi
c0017991:	e8 3a 8b fe ff       	call   c00004d0 <memset>
c0017996:	83 c4 10             	add    esp,0x10
c0017999:	b8 01 00 00 00       	mov    eax,0x1
c001799e:	eb 0e                	jmp    c00179ae <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c00179a0:	be 80 39 02 c0       	mov    esi,0xc0023980
c00179a5:	b9 00 08 00 00       	mov    ecx,0x800
c00179aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00179ac:	31 c0                	xor    eax,eax
c00179ae:	5b                   	pop    ebx
c00179af:	5e                   	pop    esi
c00179b0:	5f                   	pop    edi
c00179b1:	c3                   	ret    

c00179b2 <ISO9660::tryMount(LogicalDisk*, int)>:
c00179b2:	53                   	push   ebx
c00179b3:	81 ec 0c 08 00 00    	sub    esp,0x80c
c00179b9:	c7 05 64 39 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023964,0xdeadbeef
c00179c3:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00179ca:	8d 58 41             	lea    ebx,[eax+0x41]
c00179cd:	0f be db             	movsx  ebx,bl
c00179d0:	53                   	push   ebx
c00179d1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00179d5:	50                   	push   eax
c00179d6:	6a 10                	push   0x10
c00179d8:	e8 5a ff ff ff       	call   c0017937 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00179dd:	83 c4 10             	add    esp,0x10
c00179e0:	31 d2                	xor    edx,edx
c00179e2:	85 c0                	test   eax,eax
c00179e4:	75 33                	jne    c0017a19 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179e6:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00179eb:	75 2c                	jne    c0017a19 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179ed:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00179f2:	75 25                	jne    c0017a19 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179f4:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00179f9:	75 1e                	jne    c0017a19 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179fb:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017a00:	75 17                	jne    c0017a19 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017a02:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017a07:	75 10                	jne    c0017a19 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017a09:	83 ec 0c             	sub    esp,0xc
c0017a0c:	53                   	push   ebx
c0017a0d:	e8 ad ed fe ff       	call   c00067bf <init_percd>
c0017a12:	83 c4 10             	add    esp,0x10
c0017a15:	40                   	inc    eax
c0017a16:	0f 95 c2             	setne  dl
c0017a19:	88 d0                	mov    al,dl
c0017a1b:	81 c4 08 08 00 00    	add    esp,0x808
c0017a21:	5b                   	pop    ebx
c0017a22:	c3                   	ret    
c0017a23:	90                   	nop

c0017a24 <ISO9660::ISO9660()>:
c0017a24:	83 ec 0c             	sub    esp,0xc
c0017a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a2b:	83 ec 0c             	sub    esp,0xc
c0017a2e:	50                   	push   eax
c0017a2f:	e8 ce 2d ff ff       	call   c000a802 <Filesystem::Filesystem()>
c0017a34:	83 c4 10             	add    esp,0x10
c0017a37:	ba 20 eb 01 c0       	mov    edx,0xc001eb20
c0017a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a40:	89 10                	mov    DWORD PTR [eax],edx
c0017a42:	e8 7a ee fe ff       	call   c00068c1 <fs_iso9660_init>
c0017a47:	90                   	nop
c0017a48:	83 c4 0c             	add    esp,0xc
c0017a4b:	c3                   	ret    

c0017a4c <SoundCard::beginPlayback()>:
c0017a4c:	c7 44 24 04 80 eb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eb80
c0017a54:	e9 06 87 ff ff       	jmp    c001015f <KePanic(char const*)>
c0017a59:	90                   	nop

c0017a5a <SoundCard::stopPlayback()>:
c0017a5a:	c7 44 24 04 80 eb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eb80
c0017a62:	e9 f8 86 ff ff       	jmp    c001015f <KePanic(char const*)>
c0017a67:	90                   	nop

c0017a68 <SoundCard::SoundCard(char const*)>:
c0017a68:	83 ec 1c             	sub    esp,0x1c
c0017a6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a6f:	83 ec 08             	sub    esp,0x8
c0017a72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a76:	50                   	push   eax
c0017a77:	e8 3c 40 ff ff       	call   c000bab8 <Device::Device(char const*)>
c0017a7c:	83 c4 10             	add    esp,0x10
c0017a7f:	ba cc eb 01 c0       	mov    edx,0xc001ebcc
c0017a84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a88:	89 10                	mov    DWORD PTR [eax],edx
c0017a8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a8e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017a95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a99:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017aa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aa7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017ab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ab5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017abf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017acd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ad5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017ada:	7f 19                	jg     c0017af5 <SoundCard::SoundCard(char const*)+0x8d>
c0017adc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ae0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ae4:	83 c2 54             	add    edx,0x54
c0017ae7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017aef:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017af3:	eb e0                	jmp    c0017ad5 <SoundCard::SoundCard(char const*)+0x6d>
c0017af5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017af9:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017b00:	90                   	nop
c0017b01:	83 c4 1c             	add    esp,0x1c
c0017b04:	c3                   	ret    
c0017b05:	90                   	nop

c0017b06 <SoundCard::~SoundCard()>:
c0017b06:	83 ec 0c             	sub    esp,0xc
c0017b09:	ba cc eb 01 c0       	mov    edx,0xc001ebcc
c0017b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b12:	89 10                	mov    DWORD PTR [eax],edx
c0017b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b18:	83 ec 0c             	sub    esp,0xc
c0017b1b:	50                   	push   eax
c0017b1c:	e8 01 3d ff ff       	call   c000b822 <Device::~Device()>
c0017b21:	83 c4 10             	add    esp,0x10
c0017b24:	90                   	nop
c0017b25:	83 c4 0c             	add    esp,0xc
c0017b28:	c3                   	ret    
c0017b29:	90                   	nop

c0017b2a <SoundCard::~SoundCard()>:
c0017b2a:	83 ec 0c             	sub    esp,0xc
c0017b2d:	83 ec 0c             	sub    esp,0xc
c0017b30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b34:	e8 cd ff ff ff       	call   c0017b06 <SoundCard::~SoundCard()>
c0017b39:	83 c4 10             	add    esp,0x10
c0017b3c:	83 ec 08             	sub    esp,0x8
c0017b3f:	68 e8 01 00 00       	push   0x1e8
c0017b44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b48:	e8 9d 28 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c0017b4d:	83 c4 10             	add    esp,0x10
c0017b50:	83 c4 0c             	add    esp,0xc
c0017b53:	c3                   	ret    

c0017b54 <SoundCard::configureRates(int, int, int)>:
c0017b54:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017b58:	31 c0                	xor    eax,eax
c0017b5a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017b61:	75 20                	jne    c0017b83 <SoundCard::configureRates(int, int, int)+0x2f>
c0017b63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b67:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b71:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b7b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017b81:	b0 01                	mov    al,0x1
c0017b83:	c3                   	ret    

c0017b84 <SoundCard::getSamples16(int, short*)>:
c0017b84:	55                   	push   ebp
c0017b85:	57                   	push   edi
c0017b86:	31 ff                	xor    edi,edi
c0017b88:	56                   	push   esi
c0017b89:	53                   	push   ebx
c0017b8a:	31 db                	xor    ebx,ebx
c0017b8c:	83 ec 10             	sub    esp,0x10
c0017b8f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017b93:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017b97:	8d 04 36             	lea    eax,[esi+esi*1]
c0017b9a:	50                   	push   eax
c0017b9b:	6a 00                	push   0x0
c0017b9d:	55                   	push   ebp
c0017b9e:	e8 2d 89 fe ff       	call   c00004d0 <memset>
c0017ba3:	83 c4 10             	add    esp,0x10
c0017ba6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017baa:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017bb1:	85 c0                	test   eax,eax
c0017bb3:	74 1b                	je     c0017bd0 <SoundCard::getSamples16(int, short*)+0x4c>
c0017bb5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017bb9:	75 15                	jne    c0017bd0 <SoundCard::getSamples16(int, short*)+0x4c>
c0017bbb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bbf:	55                   	push   ebp
c0017bc0:	56                   	push   esi
c0017bc1:	50                   	push   eax
c0017bc2:	e8 ed 02 00 00       	call   c0017eb4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017bc7:	83 c4 10             	add    esp,0x10
c0017bca:	39 c7                	cmp    edi,eax
c0017bcc:	7d 02                	jge    c0017bd0 <SoundCard::getSamples16(int, short*)+0x4c>
c0017bce:	89 c7                	mov    edi,eax
c0017bd0:	43                   	inc    ebx
c0017bd1:	83 fb 20             	cmp    ebx,0x20
c0017bd4:	75 d0                	jne    c0017ba6 <SoundCard::getSamples16(int, short*)+0x22>
c0017bd6:	83 c4 0c             	add    esp,0xc
c0017bd9:	89 f8                	mov    eax,edi
c0017bdb:	5b                   	pop    ebx
c0017bdc:	5e                   	pop    esi
c0017bdd:	5f                   	pop    edi
c0017bde:	5d                   	pop    ebp
c0017bdf:	c3                   	ret    

c0017be0 <SoundCard::getSamples32(int, int*)>:
c0017be0:	55                   	push   ebp
c0017be1:	57                   	push   edi
c0017be2:	31 ff                	xor    edi,edi
c0017be4:	56                   	push   esi
c0017be5:	31 f6                	xor    esi,esi
c0017be7:	53                   	push   ebx
c0017be8:	83 ec 10             	sub    esp,0x10
c0017beb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bef:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017bf3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017bf7:	c1 e0 02             	shl    eax,0x2
c0017bfa:	50                   	push   eax
c0017bfb:	6a 00                	push   0x0
c0017bfd:	55                   	push   ebp
c0017bfe:	e8 cd 88 fe ff       	call   c00004d0 <memset>
c0017c03:	83 c4 10             	add    esp,0x10
c0017c06:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017c0d:	85 c0                	test   eax,eax
c0017c0f:	74 1b                	je     c0017c2c <SoundCard::getSamples32(int, int*)+0x4c>
c0017c11:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017c15:	75 15                	jne    c0017c2c <SoundCard::getSamples32(int, int*)+0x4c>
c0017c17:	53                   	push   ebx
c0017c18:	55                   	push   ebp
c0017c19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017c1d:	50                   	push   eax
c0017c1e:	e8 55 03 00 00       	call   c0017f78 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0017c23:	83 c4 10             	add    esp,0x10
c0017c26:	39 c6                	cmp    esi,eax
c0017c28:	7d 02                	jge    c0017c2c <SoundCard::getSamples32(int, int*)+0x4c>
c0017c2a:	89 c6                	mov    esi,eax
c0017c2c:	47                   	inc    edi
c0017c2d:	83 ff 20             	cmp    edi,0x20
c0017c30:	75 d4                	jne    c0017c06 <SoundCard::getSamples32(int, int*)+0x26>
c0017c32:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0017c38:	85 f6                	test   esi,esi
c0017c3a:	75 0f                	jne    c0017c4b <SoundCard::getSamples32(int, int*)+0x6b>
c0017c3c:	84 c0                	test   al,al
c0017c3e:	74 1b                	je     c0017c5b <SoundCard::getSamples32(int, int*)+0x7b>
c0017c40:	83 ec 0c             	sub    esp,0xc
c0017c43:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017c45:	53                   	push   ebx
c0017c46:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0017c49:	eb 0d                	jmp    c0017c58 <SoundCard::getSamples32(int, int*)+0x78>
c0017c4b:	84 c0                	test   al,al
c0017c4d:	75 0c                	jne    c0017c5b <SoundCard::getSamples32(int, int*)+0x7b>
c0017c4f:	83 ec 0c             	sub    esp,0xc
c0017c52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017c54:	53                   	push   ebx
c0017c55:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017c58:	83 c4 10             	add    esp,0x10
c0017c5b:	83 c4 0c             	add    esp,0xc
c0017c5e:	89 f0                	mov    eax,esi
c0017c60:	5b                   	pop    ebx
c0017c61:	5e                   	pop    esi
c0017c62:	5f                   	pop    edi
c0017c63:	5d                   	pop    ebp
c0017c64:	c3                   	ret    
c0017c65:	90                   	nop

c0017c66 <SoundCard::addChannel(SoundPort*)>:
c0017c66:	83 ec 0c             	sub    esp,0xc
c0017c69:	31 c0                	xor    eax,eax
c0017c6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c6f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0017c77:	74 1b                	je     c0017c94 <SoundCard::addChannel(SoundPort*)+0x2e>
c0017c79:	40                   	inc    eax
c0017c7a:	83 f8 20             	cmp    eax,0x20
c0017c7d:	75 f0                	jne    c0017c6f <SoundCard::addChannel(SoundPort*)+0x9>
c0017c7f:	83 ec 0c             	sub    esp,0xc
c0017c82:	68 a5 eb 01 c0       	push   0xc001eba5
c0017c87:	e8 d3 84 ff ff       	call   c001015f <KePanic(char const*)>
c0017c8c:	83 c4 10             	add    esp,0x10
c0017c8f:	83 c8 ff             	or     eax,0xffffffff
c0017c92:	eb 0b                	jmp    c0017c9f <SoundCard::addChannel(SoundPort*)+0x39>
c0017c94:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017c98:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0017c9f:	83 c4 0c             	add    esp,0xc
c0017ca2:	c3                   	ret    
c0017ca3:	90                   	nop

c0017ca4 <SoundCard::removeChannel(int)>:
c0017ca4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ca8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017cac:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0017cb7:	c3                   	ret    

c0017cb8 <SoundPort::SoundPort(int, int, int, int)>:
c0017cb8:	83 ec 0c             	sub    esp,0xc
c0017cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cbf:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cca:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cd2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017cd6:	89 10                	mov    DWORD PTR [eax],edx
c0017cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cdc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ce0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ce7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017ceb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017cee:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0017cf3:	75 13                	jne    c0017d08 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0017cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cfb:	05 a0 0f 00 00       	add    eax,0xfa0
c0017d00:	01 c0                	add    eax,eax
c0017d02:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017d06:	66 90                	xchg   ax,ax
c0017d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d0c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d10:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0017d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d17:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0017d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d22:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017d25:	c1 e0 02             	shl    eax,0x2
c0017d28:	83 ec 0c             	sub    esp,0xc
c0017d2b:	50                   	push   eax
c0017d2c:	e8 88 fa fe ff       	call   c00077b9 <malloc>
c0017d31:	83 c4 10             	add    esp,0x10
c0017d34:	89 c2                	mov    edx,eax
c0017d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d3a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017d3d:	90                   	nop
c0017d3e:	83 c4 0c             	add    esp,0xc
c0017d41:	c3                   	ret    
c0017d42:	66 90                	xchg   ax,ax

c0017d44 <SoundPort::~SoundPort()>:
c0017d44:	83 ec 0c             	sub    esp,0xc
c0017d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d4b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017d4e:	85 c0                	test   eax,eax
c0017d50:	74 1e                	je     c0017d70 <SoundPort::~SoundPort()+0x2c>
c0017d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d56:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017d59:	83 ec 0c             	sub    esp,0xc
c0017d5c:	50                   	push   eax
c0017d5d:	e8 67 fa fe ff       	call   c00077c9 <free>
c0017d62:	83 c4 10             	add    esp,0x10
c0017d65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d69:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017d70:	90                   	nop
c0017d71:	83 c4 0c             	add    esp,0xc
c0017d74:	c3                   	ret    
c0017d75:	90                   	nop
c0017d76:	66 90                	xchg   ax,ax

c0017d78 <SoundPort::unpause()>:
c0017d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d7c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0017d80:	c3                   	ret    
c0017d81:	90                   	nop
c0017d82:	66 90                	xchg   ax,ax

c0017d84 <SoundPort::pause()>:
c0017d84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d88:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017d8c:	c3                   	ret    
c0017d8d:	90                   	nop
c0017d8e:	66 90                	xchg   ax,ax

c0017d90 <SoundPort::getBufferUsed()>:
c0017d90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d94:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017d97:	c3                   	ret    

c0017d98 <SoundPort::getBufferSize()>:
c0017d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d9c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017d9f:	c3                   	ret    

c0017da0 <SoundPort::buffer16(short*, int)>:
c0017da0:	55                   	push   ebp
c0017da1:	57                   	push   edi
c0017da2:	56                   	push   esi
c0017da3:	53                   	push   ebx
c0017da4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017da8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0017dac:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017daf:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0017db2:	74 68                	je     c0017e1c <SoundPort::buffer16(short*, int)+0x7c>
c0017db4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017db8:	85 c9                	test   ecx,ecx
c0017dba:	7e 60                	jle    c0017e1c <SoundPort::buffer16(short*, int)+0x7c>
c0017dbc:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0017dc0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017dc3:	c1 e1 0f             	shl    ecx,0xf
c0017dc6:	8d 70 01             	lea    esi,[eax+0x1]
c0017dc9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017dcc:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0017dcf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017dd2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017dd5:	74 4d                	je     c0017e24 <SoundPort::buffer16(short*, int)+0x84>
c0017dd7:	31 f6                	xor    esi,esi
c0017dd9:	eb 21                	jmp    c0017dfc <SoundPort::buffer16(short*, int)+0x5c>
c0017ddb:	90                   	nop
c0017ddc:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0017de1:	8d 79 01             	lea    edi,[ecx+0x1]
c0017de4:	c1 e3 0f             	shl    ebx,0xf
c0017de7:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0017dea:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0017ded:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0017df0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017df3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017df6:	74 1c                	je     c0017e14 <SoundPort::buffer16(short*, int)+0x74>
c0017df8:	89 c6                	mov    esi,eax
c0017dfa:	66 90                	xchg   ax,ax
c0017dfc:	8d 46 01             	lea    eax,[esi+0x1]
c0017dff:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0017e03:	75 d7                	jne    c0017ddc <SoundPort::buffer16(short*, int)+0x3c>
c0017e05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e09:	8d 76 00             	lea    esi,[esi+0x0]
c0017e0c:	5b                   	pop    ebx
c0017e0d:	5e                   	pop    esi
c0017e0e:	5f                   	pop    edi
c0017e0f:	5d                   	pop    ebp
c0017e10:	c3                   	ret    
c0017e11:	8d 76 00             	lea    esi,[esi+0x0]
c0017e14:	5b                   	pop    ebx
c0017e15:	8d 46 02             	lea    eax,[esi+0x2]
c0017e18:	5e                   	pop    esi
c0017e19:	5f                   	pop    edi
c0017e1a:	5d                   	pop    ebp
c0017e1b:	c3                   	ret    
c0017e1c:	5b                   	pop    ebx
c0017e1d:	31 c0                	xor    eax,eax
c0017e1f:	5e                   	pop    esi
c0017e20:	5f                   	pop    edi
c0017e21:	5d                   	pop    ebp
c0017e22:	c3                   	ret    
c0017e23:	90                   	nop
c0017e24:	b8 01 00 00 00       	mov    eax,0x1
c0017e29:	eb e1                	jmp    c0017e0c <SoundPort::buffer16(short*, int)+0x6c>
c0017e2b:	90                   	nop

c0017e2c <SoundPort::buffer32(int*, int)>:
c0017e2c:	55                   	push   ebp
c0017e2d:	57                   	push   edi
c0017e2e:	56                   	push   esi
c0017e2f:	53                   	push   ebx
c0017e30:	51                   	push   ecx
c0017e31:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e39:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017e3c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017e40:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e43:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017e46:	74 5c                	je     c0017ea4 <SoundPort::buffer32(int*, int)+0x78>
c0017e48:	85 c0                	test   eax,eax
c0017e4a:	7e 58                	jle    c0017ea4 <SoundPort::buffer32(int*, int)+0x78>
c0017e4c:	8d 71 01             	lea    esi,[ecx+0x1]
c0017e4f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017e52:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017e55:	8b 37                	mov    esi,DWORD PTR [edi]
c0017e57:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0017e5a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017e5d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017e60:	74 4a                	je     c0017eac <SoundPort::buffer32(int*, int)+0x80>
c0017e62:	31 f6                	xor    esi,esi
c0017e64:	eb 1e                	jmp    c0017e84 <SoundPort::buffer32(int*, int)+0x58>
c0017e66:	66 90                	xchg   ax,ax
c0017e68:	8d 69 01             	lea    ebp,[ecx+0x1]
c0017e6b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0017e6e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0017e71:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017e74:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0017e78:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017e7b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017e7e:	74 18                	je     c0017e98 <SoundPort::buffer32(int*, int)+0x6c>
c0017e80:	89 de                	mov    esi,ebx
c0017e82:	66 90                	xchg   ax,ax
c0017e84:	8d 5e 01             	lea    ebx,[esi+0x1]
c0017e87:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0017e8a:	75 dc                	jne    c0017e68 <SoundPort::buffer32(int*, int)+0x3c>
c0017e8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017e8f:	90                   	nop
c0017e90:	5a                   	pop    edx
c0017e91:	5b                   	pop    ebx
c0017e92:	5e                   	pop    esi
c0017e93:	5f                   	pop    edi
c0017e94:	5d                   	pop    ebp
c0017e95:	c3                   	ret    
c0017e96:	66 90                	xchg   ax,ax
c0017e98:	5a                   	pop    edx
c0017e99:	8d 46 02             	lea    eax,[esi+0x2]
c0017e9c:	5b                   	pop    ebx
c0017e9d:	5e                   	pop    esi
c0017e9e:	5f                   	pop    edi
c0017e9f:	5d                   	pop    ebp
c0017ea0:	c3                   	ret    
c0017ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ea4:	5a                   	pop    edx
c0017ea5:	31 c0                	xor    eax,eax
c0017ea7:	5b                   	pop    ebx
c0017ea8:	5e                   	pop    esi
c0017ea9:	5f                   	pop    edi
c0017eaa:	5d                   	pop    ebp
c0017eab:	c3                   	ret    
c0017eac:	b8 01 00 00 00       	mov    eax,0x1
c0017eb1:	eb dd                	jmp    c0017e90 <SoundPort::buffer32(int*, int)+0x64>
c0017eb3:	90                   	nop

c0017eb4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0017eb4:	57                   	push   edi
c0017eb5:	56                   	push   esi
c0017eb6:	53                   	push   ebx
c0017eb7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0017ebf:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0017ec5:	39 03                	cmp    DWORD PTR [ebx],eax
c0017ec7:	74 13                	je     c0017edc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0017ec9:	83 ec 0c             	sub    esp,0xc
c0017ecc:	68 f8 eb 01 c0       	push   0xc001ebf8
c0017ed1:	e8 89 82 ff ff       	call   c001015f <KePanic(char const*)>
c0017ed6:	83 c4 10             	add    esp,0x10
c0017ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0017edc:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0017ee2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0017ee5:	74 11                	je     c0017ef8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0017ee7:	83 ec 0c             	sub    esp,0xc
c0017eea:	68 37 ec 01 c0       	push   0xc001ec37
c0017eef:	e8 6b 82 ff ff       	call   c001015f <KePanic(char const*)>
c0017ef4:	83 c4 10             	add    esp,0x10
c0017ef7:	90                   	nop
c0017ef8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0017efe:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0017f01:	74 11                	je     c0017f14 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0017f03:	83 ec 0c             	sub    esp,0xc
c0017f06:	68 37 ec 01 c0       	push   0xc001ec37
c0017f0b:	e8 4f 82 ff ff       	call   c001015f <KePanic(char const*)>
c0017f10:	83 c4 10             	add    esp,0x10
c0017f13:	90                   	nop
c0017f14:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017f17:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0017f1b:	7e 07                	jle    c0017f24 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0017f1d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017f21:	8d 76 00             	lea    esi,[esi+0x0]
c0017f24:	85 f6                	test   esi,esi
c0017f26:	7e 2c                	jle    c0017f54 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0017f28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f2c:	8d 3c 36             	lea    edi,[esi+esi*1]
c0017f2f:	31 c9                	xor    ecx,ecx
c0017f31:	01 d7                	add    edi,edx
c0017f33:	90                   	nop
c0017f34:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0017f37:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0017f3a:	85 c0                	test   eax,eax
c0017f3c:	79 06                	jns    c0017f44 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0017f3e:	05 ff 7f 00 00       	add    eax,0x7fff
c0017f43:	90                   	nop
c0017f44:	c1 f8 0f             	sar    eax,0xf
c0017f47:	83 c1 04             	add    ecx,0x4
c0017f4a:	66 01 02             	add    WORD PTR [edx],ax
c0017f4d:	83 c2 02             	add    edx,0x2
c0017f50:	39 d7                	cmp    edi,edx
c0017f52:	75 e0                	jne    c0017f34 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0017f54:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0017f57:	50                   	push   eax
c0017f58:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017f5b:	29 f0                	sub    eax,esi
c0017f5d:	c1 e0 02             	shl    eax,0x2
c0017f60:	50                   	push   eax
c0017f61:	8d 04 b2             	lea    eax,[edx+esi*4]
c0017f64:	50                   	push   eax
c0017f65:	52                   	push   edx
c0017f66:	e8 75 84 fe ff       	call   c00003e0 <memmove>
c0017f6b:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0017f6e:	83 c4 10             	add    esp,0x10
c0017f71:	89 f0                	mov    eax,esi
c0017f73:	5b                   	pop    ebx
c0017f74:	5e                   	pop    esi
c0017f75:	5f                   	pop    edi
c0017f76:	c3                   	ret    
c0017f77:	90                   	nop

c0017f78 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0017f78:	57                   	push   edi
c0017f79:	56                   	push   esi
c0017f7a:	53                   	push   ebx
c0017f7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017f7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017f83:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017f87:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0017f8d:	39 06                	cmp    DWORD PTR [esi],eax
c0017f8f:	74 13                	je     c0017fa4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0017f91:	83 ec 0c             	sub    esp,0xc
c0017f94:	68 18 ec 01 c0       	push   0xc001ec18
c0017f99:	e8 c1 81 ff ff       	call   c001015f <KePanic(char const*)>
c0017f9e:	83 c4 10             	add    esp,0x10
c0017fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0017fa4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0017faa:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0017fad:	74 11                	je     c0017fc0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0017faf:	83 ec 0c             	sub    esp,0xc
c0017fb2:	68 53 ec 01 c0       	push   0xc001ec53
c0017fb7:	e8 a3 81 ff ff       	call   c001015f <KePanic(char const*)>
c0017fbc:	83 c4 10             	add    esp,0x10
c0017fbf:	90                   	nop
c0017fc0:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0017fc6:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0017fc9:	74 11                	je     c0017fdc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0017fcb:	83 ec 0c             	sub    esp,0xc
c0017fce:	68 53 ec 01 c0       	push   0xc001ec53
c0017fd3:	e8 87 81 ff ff       	call   c001015f <KePanic(char const*)>
c0017fd8:	83 c4 10             	add    esp,0x10
c0017fdb:	90                   	nop
c0017fdc:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0017fdf:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0017fe3:	7e 07                	jle    c0017fec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0017fe5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0017fec:	85 ff                	test   edi,edi
c0017fee:	7e 1c                	jle    c001800c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0017ff0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0017ff7:	31 c0                	xor    eax,eax
c0017ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0017ffc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017fff:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0018002:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018005:	83 c0 04             	add    eax,0x4
c0018008:	39 c1                	cmp    ecx,eax
c001800a:	75 f0                	jne    c0017ffc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001800c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001800f:	50                   	push   eax
c0018010:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018013:	29 f8                	sub    eax,edi
c0018015:	c1 e0 02             	shl    eax,0x2
c0018018:	50                   	push   eax
c0018019:	8d 04 ba             	lea    eax,[edx+edi*4]
c001801c:	50                   	push   eax
c001801d:	52                   	push   edx
c001801e:	e8 bd 83 fe ff       	call   c00003e0 <memmove>
c0018023:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0018026:	83 c4 10             	add    esp,0x10
c0018029:	89 f8                	mov    eax,edi
c001802b:	5b                   	pop    ebx
c001802c:	5e                   	pop    esi
c001802d:	5f                   	pop    edi
c001802e:	c3                   	ret    
c001802f:	90                   	nop

c0018030 <PCI::open(int, int, void*)>:
c0018030:	83 ec 18             	sub    esp,0x18
c0018033:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018037:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001803b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018041:	8b 10                	mov    edx,DWORD PTR [eax]
c0018043:	50                   	push   eax
c0018044:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0018047:	31 c0                	xor    eax,eax
c0018049:	83 c4 1c             	add    esp,0x1c
c001804c:	c3                   	ret    
c001804d:	90                   	nop

c001804e <PCI::close(int, int, void*)>:
c001804e:	31 c0                	xor    eax,eax
c0018050:	c3                   	ret    
c0018051:	90                   	nop

c0018052 <PCI::PCI()>:
c0018052:	83 ec 0c             	sub    esp,0xc
c0018055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018059:	83 ec 08             	sub    esp,0x8
c001805c:	68 6f ec 01 c0       	push   0xc001ec6f
c0018061:	50                   	push   eax
c0018062:	e8 0d 32 ff ff       	call   c000b274 <Bus::Bus(char const*)>
c0018067:	83 c4 10             	add    esp,0x10
c001806a:	ba 18 ed 01 c0       	mov    edx,0xc001ed18
c001806f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018073:	89 10                	mov    DWORD PTR [eax],edx
c0018075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018079:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0018083:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018087:	a3 80 41 02 c0       	mov    ds:0xc0024180,eax
c001808c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018090:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018096:	31 d2                	xor    edx,edx
c0018098:	88 c2                	mov    dl,al
c001809a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001809e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00180a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180a9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00180af:	31 d2                	xor    edx,edx
c00180b1:	88 c2                	mov    dl,al
c00180b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00180bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180c0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00180c6:	8d 50 01             	lea    edx,[eax+0x1]
c00180c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00180cd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00180d3:	31 d2                	xor    edx,edx
c00180d5:	88 c2                	mov    dl,al
c00180d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180db:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00180df:	83 c9 c0             	or     ecx,0xffffffc0
c00180e2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00180e6:	90                   	nop
c00180e7:	83 c4 0c             	add    esp,0xc
c00180ea:	c3                   	ret    
c00180eb:	90                   	nop

c00180ec <PCI::readBAR8(unsigned int, int)>:
c00180ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180f4:	f6 c2 01             	test   dl,0x1
c00180f7:	74 07                	je     c0018100 <PCI::readBAR8(unsigned int, int)+0x14>
c00180f9:	83 e2 fc             	and    edx,0xfffffffc
c00180fc:	01 c2                	add    edx,eax
c00180fe:	ec                   	in     al,dx
c00180ff:	c3                   	ret    
c0018100:	83 e2 f0             	and    edx,0xfffffff0
c0018103:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018106:	c3                   	ret    
c0018107:	90                   	nop

c0018108 <PCI::readBAR16(unsigned int, int)>:
c0018108:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001810c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018110:	f6 c2 01             	test   dl,0x1
c0018113:	74 08                	je     c001811d <PCI::readBAR16(unsigned int, int)+0x15>
c0018115:	83 e2 fc             	and    edx,0xfffffffc
c0018118:	01 c2                	add    edx,eax
c001811a:	66 ed                	in     ax,dx
c001811c:	c3                   	ret    
c001811d:	83 e2 f0             	and    edx,0xfffffff0
c0018120:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018124:	c3                   	ret    
c0018125:	90                   	nop

c0018126 <PCI::readBAR32(unsigned int, int)>:
c0018126:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001812a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001812e:	f6 c2 01             	test   dl,0x1
c0018131:	74 07                	je     c001813a <PCI::readBAR32(unsigned int, int)+0x14>
c0018133:	83 e2 fc             	and    edx,0xfffffffc
c0018136:	01 c2                	add    edx,eax
c0018138:	ed                   	in     eax,dx
c0018139:	c3                   	ret    
c001813a:	83 e2 f0             	and    edx,0xfffffff0
c001813d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018140:	c3                   	ret    
c0018141:	90                   	nop

c0018142 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0018142:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018146:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001814a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001814e:	f6 c2 01             	test   dl,0x1
c0018151:	74 07                	je     c001815a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0018153:	83 e2 fc             	and    edx,0xfffffffc
c0018156:	01 ca                	add    edx,ecx
c0018158:	ee                   	out    dx,al
c0018159:	c3                   	ret    
c001815a:	83 e2 f0             	and    edx,0xfffffff0
c001815d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018160:	c3                   	ret    
c0018161:	90                   	nop

c0018162 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0018162:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018166:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001816a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001816e:	f6 c2 01             	test   dl,0x1
c0018171:	74 08                	je     c001817b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0018173:	83 e2 fc             	and    edx,0xfffffffc
c0018176:	01 ca                	add    edx,ecx
c0018178:	66 ef                	out    dx,ax
c001817a:	c3                   	ret    
c001817b:	83 e2 f0             	and    edx,0xfffffff0
c001817e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0018182:	c3                   	ret    
c0018183:	90                   	nop

c0018184 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018184:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018188:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001818c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018190:	f6 c2 01             	test   dl,0x1
c0018193:	74 07                	je     c001819c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018195:	83 e2 fc             	and    edx,0xfffffffc
c0018198:	01 ca                	add    edx,ecx
c001819a:	ef                   	out    dx,eax
c001819b:	c3                   	ret    
c001819c:	83 e2 f0             	and    edx,0xfffffff0
c001819f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00181a2:	c3                   	ret    
c00181a3:	90                   	nop

c00181a4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00181a4:	55                   	push   ebp
c00181a5:	57                   	push   edi
c00181a6:	56                   	push   esi
c00181a7:	53                   	push   ebx
c00181a8:	83 ec 0c             	sub    esp,0xc
c00181ab:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00181af:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00181b3:	89 f0                	mov    eax,esi
c00181b5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00181b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00181bd:	3c 07                	cmp    al,0x7
c00181bf:	76 10                	jbe    c00181d1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00181c1:	83 ec 0c             	sub    esp,0xc
c00181c4:	68 77 ec 01 c0       	push   0xc001ec77
c00181c9:	e8 91 7f ff ff       	call   c001015f <KePanic(char const*)>
c00181ce:	83 c4 10             	add    esp,0x10
c00181d1:	80 fb 0f             	cmp    bl,0xf
c00181d4:	76 10                	jbe    c00181e6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00181d6:	83 ec 0c             	sub    esp,0xc
c00181d9:	68 a7 ec 01 c0       	push   0xc001eca7
c00181de:	e8 7c 7f ff ff       	call   c001015f <KePanic(char const*)>
c00181e3:	83 c4 10             	add    esp,0x10
c00181e6:	8d 04 36             	lea    eax,[esi+esi*1]
c00181e9:	ba f8 0c 00 00       	mov    edx,0xcf8
c00181ee:	83 c8 f0             	or     eax,0xfffffff0
c00181f1:	ee                   	out    dx,al
c00181f2:	ba fa 0c 00 00       	mov    edx,0xcfa
c00181f7:	89 e8                	mov    eax,ebp
c00181f9:	ee                   	out    dx,al
c00181fa:	83 c4 0c             	add    esp,0xc
c00181fd:	89 d8                	mov    eax,ebx
c00181ff:	66 81 e7 fc 00       	and    di,0xfc
c0018204:	5b                   	pop    ebx
c0018205:	c1 e0 08             	shl    eax,0x8
c0018208:	5e                   	pop    esi
c0018209:	09 f8                	or     eax,edi
c001820b:	5f                   	pop    edi
c001820c:	66 0d 00 c0          	or     ax,0xc000
c0018210:	5d                   	pop    ebp
c0018211:	c3                   	ret    

c0018212 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018212:	57                   	push   edi
c0018213:	56                   	push   esi
c0018214:	53                   	push   ebx
c0018215:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018219:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001821d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0018223:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018227:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001822b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001822f:	83 ff 01             	cmp    edi,0x1
c0018232:	75 3e                	jne    c0018272 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018234:	89 de                	mov    esi,ebx
c0018236:	0f b6 c0             	movzx  eax,al
c0018239:	81 e6 fc 00 00 00    	and    esi,0xfc
c001823f:	c1 e0 10             	shl    eax,0x10
c0018242:	0f b6 c9             	movzx  ecx,cl
c0018245:	09 f0                	or     eax,esi
c0018247:	c1 e1 08             	shl    ecx,0x8
c001824a:	0f b6 d2             	movzx  edx,dl
c001824d:	09 c8                	or     eax,ecx
c001824f:	c1 e2 0b             	shl    edx,0xb
c0018252:	09 d0                	or     eax,edx
c0018254:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018259:	0d 00 00 00 80       	or     eax,0x80000000
c001825e:	ef                   	out    dx,eax
c001825f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018264:	ed                   	in     eax,dx
c0018265:	83 e3 02             	and    ebx,0x2
c0018268:	0f b6 cb             	movzx  ecx,bl
c001826b:	c1 e1 03             	shl    ecx,0x3
c001826e:	d3 e8                	shr    eax,cl
c0018270:	eb 43                	jmp    c00182b5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018272:	83 ff 02             	cmp    edi,0x2
c0018275:	75 2c                	jne    c00182a3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018277:	83 ec 0c             	sub    esp,0xc
c001827a:	0f b6 c9             	movzx  ecx,cl
c001827d:	0f b6 d2             	movzx  edx,dl
c0018280:	0f b6 fb             	movzx  edi,bl
c0018283:	0f b6 c0             	movzx  eax,al
c0018286:	57                   	push   edi
c0018287:	51                   	push   ecx
c0018288:	52                   	push   edx
c0018289:	50                   	push   eax
c001828a:	56                   	push   esi
c001828b:	e8 14 ff ff ff       	call   c00181a4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018290:	89 c2                	mov    edx,eax
c0018292:	ed                   	in     eax,dx
c0018293:	83 e3 02             	and    ebx,0x2
c0018296:	83 c4 20             	add    esp,0x20
c0018299:	0f b6 cb             	movzx  ecx,bl
c001829c:	c1 e1 03             	shl    ecx,0x3
c001829f:	d3 e8                	shr    eax,cl
c00182a1:	eb 12                	jmp    c00182b5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00182a3:	83 ec 0c             	sub    esp,0xc
c00182a6:	68 d7 ec 01 c0       	push   0xc001ecd7
c00182ab:	e8 af 7e ff ff       	call   c001015f <KePanic(char const*)>
c00182b0:	83 c4 10             	add    esp,0x10
c00182b3:	31 c0                	xor    eax,eax
c00182b5:	5b                   	pop    ebx
c00182b6:	5e                   	pop    esi
c00182b7:	5f                   	pop    edi
c00182b8:	c3                   	ret    
c00182b9:	90                   	nop

c00182ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00182ba:	83 ec 18             	sub    esp,0x18
c00182bd:	6a 00                	push   0x0
c00182bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182c4:	50                   	push   eax
c00182c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182ca:	50                   	push   eax
c00182cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182d0:	50                   	push   eax
c00182d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182d5:	e8 38 ff ff ff       	call   c0018212 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182da:	83 c4 2c             	add    esp,0x2c
c00182dd:	c3                   	ret    

c00182de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00182de:	83 ec 18             	sub    esp,0x18
c00182e1:	6a 0e                	push   0xe
c00182e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182e8:	50                   	push   eax
c00182e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182ee:	50                   	push   eax
c00182ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182f4:	50                   	push   eax
c00182f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182f9:	e8 14 ff ff ff       	call   c0018212 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182fe:	83 c4 2c             	add    esp,0x2c
c0018301:	0f b6 c0             	movzx  eax,al
c0018304:	c3                   	ret    
c0018305:	90                   	nop

c0018306 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018306:	55                   	push   ebp
c0018307:	57                   	push   edi
c0018308:	56                   	push   esi
c0018309:	53                   	push   ebx
c001830a:	83 ec 18             	sub    esp,0x18
c001830d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0018312:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018317:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001831c:	6a 0a                	push   0xa
c001831e:	56                   	push   esi
c001831f:	55                   	push   ebp
c0018320:	57                   	push   edi
c0018321:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018325:	e8 e8 fe ff ff       	call   c0018212 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001832a:	83 c4 14             	add    esp,0x14
c001832d:	89 c3                	mov    ebx,eax
c001832f:	6a 0a                	push   0xa
c0018331:	0f b6 db             	movzx  ebx,bl
c0018334:	56                   	push   esi
c0018335:	55                   	push   ebp
c0018336:	57                   	push   edi
c0018337:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001833b:	e8 d2 fe ff ff       	call   c0018212 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018340:	83 c4 2c             	add    esp,0x2c
c0018343:	25 00 ff 00 00       	and    eax,0xff00
c0018348:	09 d8                	or     eax,ebx
c001834a:	5b                   	pop    ebx
c001834b:	5e                   	pop    esi
c001834c:	5f                   	pop    edi
c001834d:	5d                   	pop    ebp
c001834e:	c3                   	ret    
c001834f:	90                   	nop

c0018350 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018350:	83 ec 18             	sub    esp,0x18
c0018353:	6a 08                	push   0x8
c0018355:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001835a:	50                   	push   eax
c001835b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018360:	50                   	push   eax
c0018361:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018366:	50                   	push   eax
c0018367:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001836b:	e8 a2 fe ff ff       	call   c0018212 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018370:	83 c4 2c             	add    esp,0x2c
c0018373:	0f b6 c4             	movzx  eax,ah
c0018376:	c3                   	ret    
c0018377:	90                   	nop

c0018378 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018378:	83 ec 18             	sub    esp,0x18
c001837b:	6a 08                	push   0x8
c001837d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018382:	50                   	push   eax
c0018383:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018388:	50                   	push   eax
c0018389:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001838e:	50                   	push   eax
c001838f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018393:	e8 7a fe ff ff       	call   c0018212 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018398:	83 c4 2c             	add    esp,0x2c
c001839b:	c3                   	ret    

c001839c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001839c:	83 ec 18             	sub    esp,0x18
c001839f:	6a 3c                	push   0x3c
c00183a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00183a6:	50                   	push   eax
c00183a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00183ac:	50                   	push   eax
c00183ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00183b2:	50                   	push   eax
c00183b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00183b7:	e8 56 fe ff ff       	call   c0018212 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00183bc:	83 c4 2c             	add    esp,0x2c
c00183bf:	c3                   	ret    

c00183c0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00183c0:	83 ec 18             	sub    esp,0x18
c00183c3:	6a 18                	push   0x18
c00183c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00183ca:	50                   	push   eax
c00183cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00183d0:	50                   	push   eax
c00183d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00183d6:	50                   	push   eax
c00183d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00183db:	e8 32 fe ff ff       	call   c0018212 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00183e0:	83 c4 2c             	add    esp,0x2c
c00183e3:	0f b6 c4             	movzx  eax,ah
c00183e6:	c3                   	ret    
c00183e7:	90                   	nop

c00183e8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00183e8:	55                   	push   ebp
c00183e9:	57                   	push   edi
c00183ea:	56                   	push   esi
c00183eb:	53                   	push   ebx
c00183ec:	83 ec 28             	sub    esp,0x28
c00183ef:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00183f3:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00183f8:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00183fd:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0018402:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018409:	8d 43 12             	lea    eax,[ebx+0x12]
c001840c:	83 c3 10             	add    ebx,0x10
c001840f:	0f b6 c0             	movzx  eax,al
c0018412:	0f b6 db             	movzx  ebx,bl
c0018415:	50                   	push   eax
c0018416:	51                   	push   ecx
c0018417:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001841b:	57                   	push   edi
c001841c:	55                   	push   ebp
c001841d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018421:	e8 ec fd ff ff       	call   c0018212 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018426:	83 c4 14             	add    esp,0x14
c0018429:	89 c6                	mov    esi,eax
c001842b:	53                   	push   ebx
c001842c:	c1 e6 10             	shl    esi,0x10
c001842f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018433:	51                   	push   ecx
c0018434:	57                   	push   edi
c0018435:	55                   	push   ebp
c0018436:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001843a:	e8 d3 fd ff ff       	call   c0018212 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001843f:	83 c4 3c             	add    esp,0x3c
c0018442:	0f b7 c0             	movzx  eax,ax
c0018445:	5b                   	pop    ebx
c0018446:	09 f0                	or     eax,esi
c0018448:	5e                   	pop    esi
c0018449:	5f                   	pop    edi
c001844a:	5d                   	pop    ebp
c001844b:	c3                   	ret    

c001844c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001844c:	55                   	push   ebp
c001844d:	57                   	push   edi
c001844e:	56                   	push   esi
c001844f:	53                   	push   ebx
c0018450:	83 ec 0c             	sub    esp,0xc
c0018453:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018457:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001845b:	89 f5                	mov    ebp,esi
c001845d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0018463:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018467:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001846b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001846f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018473:	83 f9 01             	cmp    ecx,0x1
c0018476:	75 5d                	jne    c00184d5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018478:	0f b6 c8             	movzx  ecx,al
c001847b:	0f b6 d2             	movzx  edx,dl
c001847e:	c1 e1 10             	shl    ecx,0x10
c0018481:	c1 e2 0b             	shl    edx,0xb
c0018484:	89 f0                	mov    eax,esi
c0018486:	25 fc 00 00 00       	and    eax,0xfc
c001848b:	09 c1                	or     ecx,eax
c001848d:	89 e8                	mov    eax,ebp
c001848f:	0f b6 c0             	movzx  eax,al
c0018492:	c1 e0 08             	shl    eax,0x8
c0018495:	09 c1                	or     ecx,eax
c0018497:	09 d1                	or     ecx,edx
c0018499:	ba f8 0c 00 00       	mov    edx,0xcf8
c001849e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00184a4:	89 c8                	mov    eax,ecx
c00184a6:	ef                   	out    dx,eax
c00184a7:	ba fc 0c 00 00       	mov    edx,0xcfc
c00184ac:	ed                   	in     eax,dx
c00184ad:	0f b7 db             	movzx  ebx,bx
c00184b0:	83 e6 02             	and    esi,0x2
c00184b3:	74 0a                	je     c00184bf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00184b5:	0f b7 d0             	movzx  edx,ax
c00184b8:	c1 e3 10             	shl    ebx,0x10
c00184bb:	09 d3                	or     ebx,edx
c00184bd:	eb 05                	jmp    c00184c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00184bf:	66 31 c0             	xor    ax,ax
c00184c2:	09 c3                	or     ebx,eax
c00184c4:	ba f8 0c 00 00       	mov    edx,0xcf8
c00184c9:	89 c8                	mov    eax,ecx
c00184cb:	ef                   	out    dx,eax
c00184cc:	ba fc 0c 00 00       	mov    edx,0xcfc
c00184d1:	89 d8                	mov    eax,ebx
c00184d3:	eb 41                	jmp    c0018516 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00184d5:	83 f9 02             	cmp    ecx,0x2
c00184d8:	75 45                	jne    c001851f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00184da:	83 ec 0c             	sub    esp,0xc
c00184dd:	0f b6 d2             	movzx  edx,dl
c00184e0:	89 f1                	mov    ecx,esi
c00184e2:	0f b6 c0             	movzx  eax,al
c00184e5:	0f b6 f1             	movzx  esi,cl
c00184e8:	89 e9                	mov    ecx,ebp
c00184ea:	56                   	push   esi
c00184eb:	0f b6 c9             	movzx  ecx,cl
c00184ee:	51                   	push   ecx
c00184ef:	52                   	push   edx
c00184f0:	50                   	push   eax
c00184f1:	57                   	push   edi
c00184f2:	e8 ad fc ff ff       	call   c00181a4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00184f7:	89 c2                	mov    edx,eax
c00184f9:	ed                   	in     eax,dx
c00184fa:	83 c4 20             	add    esp,0x20
c00184fd:	0f b7 db             	movzx  ebx,bx
c0018500:	f6 c2 02             	test   dl,0x2
c0018503:	74 0c                	je     c0018511 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018505:	0f b7 c8             	movzx  ecx,ax
c0018508:	89 d8                	mov    eax,ebx
c001850a:	c1 e0 10             	shl    eax,0x10
c001850d:	09 c8                	or     eax,ecx
c001850f:	eb 05                	jmp    c0018516 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018511:	66 31 c0             	xor    ax,ax
c0018514:	09 d8                	or     eax,ebx
c0018516:	ef                   	out    dx,eax
c0018517:	83 c4 0c             	add    esp,0xc
c001851a:	5b                   	pop    ebx
c001851b:	5e                   	pop    esi
c001851c:	5f                   	pop    edi
c001851d:	5d                   	pop    ebp
c001851e:	c3                   	ret    
c001851f:	c7 44 24 20 d7 ec 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ecd7
c0018527:	83 c4 0c             	add    esp,0xc
c001852a:	5b                   	pop    ebx
c001852b:	5e                   	pop    esi
c001852c:	5f                   	pop    edi
c001852d:	5d                   	pop    ebp
c001852e:	e9 2c 7c ff ff       	jmp    c001015f <KePanic(char const*)>
c0018533:	90                   	nop

c0018534 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018534:	55                   	push   ebp
c0018535:	57                   	push   edi
c0018536:	56                   	push   esi
c0018537:	53                   	push   ebx
c0018538:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001853e:	80 3d 8c 41 02 c0 00 	cmp    BYTE PTR ds:0xc002418c,0x0
c0018545:	0f 85 84 00 00 00    	jne    c00185cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001854b:	83 ec 0c             	sub    esp,0xc
c001854e:	68 14 01 00 00       	push   0x114
c0018553:	e8 61 f2 fe ff       	call   c00077b9 <malloc>
c0018558:	83 c4 0c             	add    esp,0xc
c001855b:	89 c3                	mov    ebx,eax
c001855d:	ff 35 d0 37 02 c0    	push   DWORD PTR ds:0xc00237d0
c0018563:	68 dd ec 01 c0       	push   0xc001ecdd
c0018568:	50                   	push   eax
c0018569:	e8 e8 24 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c001856e:	5a                   	pop    edx
c001856f:	59                   	pop    ecx
c0018570:	6a 01                	push   0x1
c0018572:	53                   	push   ebx
c0018573:	e8 9e 25 ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c0018578:	83 c4 0c             	add    esp,0xc
c001857b:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001857f:	50                   	push   eax
c0018580:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018584:	50                   	push   eax
c0018585:	53                   	push   ebx
c0018586:	e8 37 28 ff ff       	call   c000adc2 <File::stat(unsigned long long*, bool*)>
c001858b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001858f:	40                   	inc    eax
c0018590:	89 04 24             	mov    DWORD PTR [esp],eax
c0018593:	e8 21 f2 fe ff       	call   c00077b9 <malloc>
c0018598:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001859c:	a3 88 41 02 c0       	mov    ds:0xc0024188,eax
c00185a1:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00185a5:	5e                   	pop    esi
c00185a6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00185a8:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00185ac:	51                   	push   ecx
c00185ad:	50                   	push   eax
c00185ae:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00185b2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00185b6:	53                   	push   ebx
c00185b7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00185ba:	83 c4 14             	add    esp,0x14
c00185bd:	53                   	push   ebx
c00185be:	e8 b1 25 ff ff       	call   c000ab74 <File::close()>
c00185c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185c7:	83 c4 10             	add    esp,0x10
c00185ca:	a3 84 41 02 c0       	mov    ds:0xc0024184,eax
c00185cf:	a1 84 41 02 c0       	mov    eax,ds:0xc0024184
c00185d4:	8b 15 88 41 02 c0    	mov    edx,DWORD PTR ds:0xc0024188
c00185da:	89 04 24             	mov    DWORD PTR [esp],eax
c00185dd:	31 ff                	xor    edi,edi
c00185df:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00185e7:	31 f6                	xor    esi,esi
c00185e9:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00185ee:	31 db                	xor    ebx,ebx
c00185f0:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00185f8:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00185fd:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018604:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018608:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001860f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018613:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018616:	0f 8e 6b 01 00 00    	jle    c0018787 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001861c:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001861f:	d4 40                	aam    0x40
c0018621:	d5 39                	aad    0x39
c0018623:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018627:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001862b:	d4 40                	aam    0x40
c001862d:	d5 39                	aad    0x39
c001862f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018633:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018637:	d4 40                	aam    0x40
c0018639:	d5 39                	aad    0x39
c001863b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001863f:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018643:	d4 40                	aam    0x40
c0018645:	d5 39                	aad    0x39
c0018647:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001864b:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001864f:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018653:	3c 56                	cmp    al,0x56
c0018655:	74 45                	je     c001869c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018657:	d4 40                	aam    0x40
c0018659:	d5 39                	aad    0x39
c001865b:	8d 48 d0             	lea    ecx,[eax-0x30]
c001865e:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018662:	0f b6 c9             	movzx  ecx,cl
c0018665:	c1 e1 04             	shl    ecx,0x4
c0018668:	d4 40                	aam    0x40
c001866a:	d5 39                	aad    0x39
c001866c:	8d 58 d0             	lea    ebx,[eax-0x30]
c001866f:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018673:	0f b6 db             	movzx  ebx,bl
c0018676:	09 cb                	or     ebx,ecx
c0018678:	c1 e3 04             	shl    ebx,0x4
c001867b:	d4 40                	aam    0x40
c001867d:	d5 39                	aad    0x39
c001867f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018682:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018686:	0f b6 c9             	movzx  ecx,cl
c0018689:	09 cb                	or     ebx,ecx
c001868b:	c1 e3 04             	shl    ebx,0x4
c001868e:	89 d9                	mov    ecx,ebx
c0018690:	d4 40                	aam    0x40
c0018692:	d5 39                	aad    0x39
c0018694:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018697:	0f b6 db             	movzx  ebx,bl
c001869a:	09 cb                	or     ebx,ecx
c001869c:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00186a0:	80 f9 44             	cmp    cl,0x44
c00186a3:	74 47                	je     c00186ec <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c00186a5:	88 c8                	mov    al,cl
c00186a7:	d4 40                	aam    0x40
c00186a9:	d5 39                	aad    0x39
c00186ab:	83 e8 30             	sub    eax,0x30
c00186ae:	0f b6 e8             	movzx  ebp,al
c00186b1:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00186b5:	c1 e5 04             	shl    ebp,0x4
c00186b8:	d4 40                	aam    0x40
c00186ba:	d5 39                	aad    0x39
c00186bc:	83 e8 30             	sub    eax,0x30
c00186bf:	0f b6 f0             	movzx  esi,al
c00186c2:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00186c6:	09 ee                	or     esi,ebp
c00186c8:	c1 e6 04             	shl    esi,0x4
c00186cb:	d4 40                	aam    0x40
c00186cd:	d5 39                	aad    0x39
c00186cf:	83 e8 30             	sub    eax,0x30
c00186d2:	0f b6 e8             	movzx  ebp,al
c00186d5:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00186d9:	09 ee                	or     esi,ebp
c00186db:	c1 e6 04             	shl    esi,0x4
c00186de:	89 f5                	mov    ebp,esi
c00186e0:	d4 40                	aam    0x40
c00186e2:	d5 39                	aad    0x39
c00186e4:	83 e8 30             	sub    eax,0x30
c00186e7:	0f b6 f0             	movzx  esi,al
c00186ea:	09 ee                	or     esi,ebp
c00186ec:	83 c7 10             	add    edi,0x10
c00186ef:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00186f3:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00186f6:	3c 0a                	cmp    al,0xa
c00186f8:	74 09                	je     c0018703 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c00186fa:	45                   	inc    ebp
c00186fb:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00186fe:	75 16                	jne    c0018716 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018700:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018703:	3c 0a                	cmp    al,0xa
c0018705:	0f 94 c0             	sete   al
c0018708:	0f b6 c0             	movzx  eax,al
c001870b:	01 c7                	add    edi,eax
c001870d:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018712:	75 0c                	jne    c0018720 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018714:	eb 15                	jmp    c001872b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018716:	47                   	inc    edi
c0018717:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001871a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001871e:	eb d3                	jmp    c00186f3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018720:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018725:	0f 85 e8 fe ff ff    	jne    c0018613 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001872b:	80 f9 44             	cmp    cl,0x44
c001872e:	74 0b                	je     c001873b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018730:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018735:	0f 85 d8 fe ff ff    	jne    c0018613 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001873b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001873f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018743:	c1 e1 04             	shl    ecx,0x4
c0018746:	83 e8 30             	sub    eax,0x30
c0018749:	09 c8                	or     eax,ecx
c001874b:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001874f:	0f 85 be fe ff ff    	jne    c0018613 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018755:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018759:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001875d:	c1 e1 04             	shl    ecx,0x4
c0018760:	83 e8 30             	sub    eax,0x30
c0018763:	09 c8                	or     eax,ecx
c0018765:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018769:	0f 85 a4 fe ff ff    	jne    c0018613 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001876f:	50                   	push   eax
c0018770:	50                   	push   eax
c0018771:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018775:	50                   	push   eax
c0018776:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001877d:	e8 7e 7e fe ff       	call   c0000600 <strcpy>
c0018782:	83 c4 10             	add    esp,0x10
c0018785:	eb 15                	jmp    c001879c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018787:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001878e:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018799:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001879c:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00187a3:	81 c4 2c 01 00 00    	add    esp,0x12c
c00187a9:	5b                   	pop    ebx
c00187aa:	5e                   	pop    esi
c00187ab:	5f                   	pop    edi
c00187ac:	5d                   	pop    ebp
c00187ad:	c3                   	ret    

c00187ae <PCI::checkBus(unsigned char)>:
c00187ae:	56                   	push   esi
c00187af:	53                   	push   ebx
c00187b0:	31 f6                	xor    esi,esi
c00187b2:	51                   	push   ecx
c00187b3:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c00187b7:	0f b6 c3             	movzx  eax,bl
c00187ba:	52                   	push   edx
c00187bb:	56                   	push   esi
c00187bc:	46                   	inc    esi
c00187bd:	50                   	push   eax
c00187be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00187c2:	e8 f3 02 00 00       	call   c0018aba <PCI::checkDevice(unsigned char, unsigned char)>
c00187c7:	83 c4 10             	add    esp,0x10
c00187ca:	83 fe 20             	cmp    esi,0x20
c00187cd:	75 e8                	jne    c00187b7 <PCI::checkBus(unsigned char)+0x9>
c00187cf:	58                   	pop    eax
c00187d0:	5b                   	pop    ebx
c00187d1:	5e                   	pop    esi
c00187d2:	c3                   	ret    
c00187d3:	90                   	nop

c00187d4 <PCI::foundDevice(PCIDeviceInfo)>:
c00187d4:	55                   	push   ebp
c00187d5:	57                   	push   edi
c00187d6:	56                   	push   esi
c00187d7:	53                   	push   ebx
c00187d8:	83 ec 1c             	sub    esp,0x1c
c00187db:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00187df:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00187e5:	0f 84 52 01 00 00    	je     c001893d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00187eb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00187ef:	66 81 f9 06 04       	cmp    cx,0x406
c00187f4:	75 2c                	jne    c0018822 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00187f6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00187fb:	50                   	push   eax
c00187fc:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018801:	50                   	push   eax
c0018802:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018807:	50                   	push   eax
c0018808:	56                   	push   esi
c0018809:	e8 b2 fb ff ff       	call   c00183c0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001880e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018812:	0f b6 c0             	movzx  eax,al
c0018815:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018819:	83 c4 2c             	add    esp,0x2c
c001881c:	5b                   	pop    ebx
c001881d:	5e                   	pop    esi
c001881e:	5f                   	pop    edi
c001881f:	5d                   	pop    ebp
c0018820:	eb 8c                	jmp    c00187ae <PCI::checkBus(unsigned char)>
c0018822:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018826:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001882c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018830:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018834:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018838:	88 d3                	mov    bl,dl
c001883a:	85 c0                	test   eax,eax
c001883c:	74 33                	je     c0018871 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001883e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018841:	85 d2                	test   edx,edx
c0018843:	74 28                	je     c001886d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018845:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001884b:	31 ef                	xor    edi,ebp
c001884d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018853:	75 18                	jne    c001886d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018855:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018859:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001885f:	75 0c                	jne    c001886d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018861:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018867:	0f 84 d0 00 00 00    	je     c001893d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001886d:	8b 00                	mov    eax,DWORD PTR [eax]
c001886f:	eb c9                	jmp    c001883a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018871:	66 81 f9 01 06       	cmp    cx,0x601
c0018876:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001887a:	75 19                	jne    c0018895 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001887c:	83 ec 0c             	sub    esp,0xc
c001887f:	68 64 01 00 00       	push   0x164
c0018884:	e8 30 ef fe ff       	call   c00077b9 <malloc>
c0018889:	89 c5                	mov    ebp,eax
c001888b:	89 04 24             	mov    DWORD PTR [esp],eax
c001888e:	e8 47 0e 00 00       	call   c00196da <SATABus::SATABus()>
c0018893:	eb 1e                	jmp    c00188b3 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018895:	66 81 f9 01 01       	cmp    cx,0x101
c001889a:	75 60                	jne    c00188fc <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001889c:	83 ec 0c             	sub    esp,0xc
c001889f:	68 70 02 00 00       	push   0x270
c00188a4:	e8 10 ef fe ff       	call   c00077b9 <malloc>
c00188a9:	89 c5                	mov    ebp,eax
c00188ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00188ae:	e8 cb 02 00 00       	call   c0018b7e <IDE::IDE()>
c00188b3:	58                   	pop    eax
c00188b4:	5a                   	pop    edx
c00188b5:	55                   	push   ebp
c00188b6:	56                   	push   esi
c00188b7:	e8 64 30 ff ff       	call   c000b920 <Device::addChild(Device*)>
c00188bc:	83 ec 1c             	sub    esp,0x1c
c00188bf:	b9 09 00 00 00       	mov    ecx,0x9
c00188c4:	fc                   	cld    
c00188c5:	89 e7                	mov    edi,esp
c00188c7:	89 de                	mov    esi,ebx
c00188c9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00188cb:	55                   	push   ebp
c00188cc:	e8 95 2f ff ff       	call   c000b866 <Device::preOpenPCI(PCIDeviceInfo)>
c00188d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00188d4:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00188d8:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00188e0:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00188e8:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00188f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00188f3:	83 c4 4c             	add    esp,0x4c
c00188f6:	5b                   	pop    ebx
c00188f7:	5e                   	pop    esi
c00188f8:	5f                   	pop    edi
c00188f9:	5d                   	pop    ebp
c00188fa:	ff e0                	jmp    eax
c00188fc:	83 ec 0c             	sub    esp,0xc
c00188ff:	68 58 01 00 00       	push   0x158
c0018904:	e8 b0 ee fe ff       	call   c00077b9 <malloc>
c0018909:	89 c5                	mov    ebp,eax
c001890b:	58                   	pop    eax
c001890c:	5a                   	pop    edx
c001890d:	68 f6 ec 01 c0       	push   0xc001ecf6
c0018912:	55                   	push   ebp
c0018913:	e8 a6 32 ff ff       	call   c000bbbe <DriverlessDevice::DriverlessDevice(char const*)>
c0018918:	59                   	pop    ecx
c0018919:	5f                   	pop    edi
c001891a:	55                   	push   ebp
c001891b:	56                   	push   esi
c001891c:	e8 ff 2f ff ff       	call   c000b920 <Device::addChild(Device*)>
c0018921:	b9 09 00 00 00       	mov    ecx,0x9
c0018926:	fc                   	cld    
c0018927:	89 df                	mov    edi,ebx
c0018929:	89 de                	mov    esi,ebx
c001892b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001892d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018931:	83 c4 2c             	add    esp,0x2c
c0018934:	5b                   	pop    ebx
c0018935:	5e                   	pop    esi
c0018936:	5f                   	pop    edi
c0018937:	5d                   	pop    ebp
c0018938:	e9 29 2f ff ff       	jmp    c000b866 <Device::preOpenPCI(PCIDeviceInfo)>
c001893d:	83 c4 1c             	add    esp,0x1c
c0018940:	5b                   	pop    ebx
c0018941:	5e                   	pop    esi
c0018942:	5f                   	pop    edi
c0018943:	5d                   	pop    ebp
c0018944:	c3                   	ret    
c0018945:	90                   	nop

c0018946 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018946:	55                   	push   ebp
c0018947:	57                   	push   edi
c0018948:	56                   	push   esi
c0018949:	53                   	push   ebx
c001894a:	83 ec 68             	sub    esp,0x68
c001894d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018951:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018958:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001895c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018963:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018968:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001896c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018973:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018978:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001897c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018981:	6a 0c                	push   0xc
c0018983:	57                   	push   edi
c0018984:	53                   	push   ebx
c0018985:	56                   	push   esi
c0018986:	55                   	push   ebp
c0018987:	e8 86 f8 ff ff       	call   c0018212 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001898c:	83 c4 20             	add    esp,0x20
c001898f:	57                   	push   edi
c0018990:	53                   	push   ebx
c0018991:	56                   	push   esi
c0018992:	55                   	push   ebp
c0018993:	e8 6e f9 ff ff       	call   c0018306 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018998:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001899d:	57                   	push   edi
c001899e:	53                   	push   ebx
c001899f:	56                   	push   esi
c00189a0:	55                   	push   ebp
c00189a1:	e8 f6 f9 ff ff       	call   c001839c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00189a6:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00189aa:	83 c4 14             	add    esp,0x14
c00189ad:	6a 3c                	push   0x3c
c00189af:	57                   	push   edi
c00189b0:	53                   	push   ebx
c00189b1:	56                   	push   esi
c00189b2:	55                   	push   ebp
c00189b3:	e8 5a f8 ff ff       	call   c0018212 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189b8:	0f b6 c4             	movzx  eax,ah
c00189bb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00189bf:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00189c3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00189c7:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c00189cc:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c00189d2:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c00189d8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00189dc:	83 c4 20             	add    esp,0x20
c00189df:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00189e4:	74 30                	je     c0018a16 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00189e6:	31 c0                	xor    eax,eax
c00189e8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00189ec:	7e 28                	jle    c0018a16 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00189ee:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c00189f6:	39 cb                	cmp    ebx,ecx
c00189f8:	75 19                	jne    c0018a13 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00189fa:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018a02:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018a06:	75 0b                	jne    c0018a13 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018a08:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018a0f:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018a13:	40                   	inc    eax
c0018a14:	eb d2                	jmp    c00189e8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018a16:	31 d2                	xor    edx,edx
c0018a18:	83 ec 0c             	sub    esp,0xc
c0018a1b:	57                   	push   edi
c0018a1c:	53                   	push   ebx
c0018a1d:	56                   	push   esi
c0018a1e:	52                   	push   edx
c0018a1f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018a23:	55                   	push   ebp
c0018a24:	e8 bf f9 ff ff       	call   c00183e8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a2d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018a31:	42                   	inc    edx
c0018a32:	83 c4 20             	add    esp,0x20
c0018a35:	83 fa 06             	cmp    edx,0x6
c0018a38:	75 de                	jne    c0018a18 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018a3a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018a3f:	83 ec 0c             	sub    esp,0xc
c0018a42:	86 e0                	xchg   al,ah
c0018a44:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018a49:	6a 02                	push   0x2
c0018a4b:	57                   	push   edi
c0018a4c:	53                   	push   ebx
c0018a4d:	56                   	push   esi
c0018a4e:	55                   	push   ebp
c0018a4f:	e8 be f7 ff ff       	call   c0018212 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a54:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018a59:	83 c4 20             	add    esp,0x20
c0018a5c:	57                   	push   edi
c0018a5d:	53                   	push   ebx
c0018a5e:	56                   	push   esi
c0018a5f:	55                   	push   ebp
c0018a60:	e8 eb f8 ff ff       	call   c0018350 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018a65:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018a69:	57                   	push   edi
c0018a6a:	53                   	push   ebx
c0018a6b:	56                   	push   esi
c0018a6c:	55                   	push   ebp
c0018a6d:	e8 48 f8 ff ff       	call   c00182ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018a72:	b9 09 00 00 00       	mov    ecx,0x9
c0018a77:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018a7c:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018a80:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018a84:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018a88:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018a8c:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018a90:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018a94:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018a98:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018a9c:	83 ec 0c             	sub    esp,0xc
c0018a9f:	fc                   	cld    
c0018aa0:	89 e7                	mov    edi,esp
c0018aa2:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018aa6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018aa8:	55                   	push   ebp
c0018aa9:	e8 26 fd ff ff       	call   c00187d4 <PCI::foundDevice(PCIDeviceInfo)>
c0018aae:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018ab4:	5b                   	pop    ebx
c0018ab5:	5e                   	pop    esi
c0018ab6:	5f                   	pop    edi
c0018ab7:	5d                   	pop    ebp
c0018ab8:	c3                   	ret    
c0018ab9:	90                   	nop

c0018aba <PCI::checkDevice(unsigned char, unsigned char)>:
c0018aba:	55                   	push   ebp
c0018abb:	57                   	push   edi
c0018abc:	56                   	push   esi
c0018abd:	53                   	push   ebx
c0018abe:	83 ec 0c             	sub    esp,0xc
c0018ac1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018ac5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018aca:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018acf:	6a 00                	push   0x0
c0018ad1:	56                   	push   esi
c0018ad2:	57                   	push   edi
c0018ad3:	55                   	push   ebp
c0018ad4:	e8 e1 f7 ff ff       	call   c00182ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018ad9:	6a 00                	push   0x0
c0018adb:	56                   	push   esi
c0018adc:	57                   	push   edi
c0018add:	55                   	push   ebp
c0018ade:	e8 63 fe ff ff       	call   c0018946 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018ae3:	83 c4 20             	add    esp,0x20
c0018ae6:	6a 00                	push   0x0
c0018ae8:	56                   	push   esi
c0018ae9:	57                   	push   edi
c0018aea:	55                   	push   ebp
c0018aeb:	e8 ee f7 ff ff       	call   c00182de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018af0:	83 c4 10             	add    esp,0x10
c0018af3:	84 c0                	test   al,al
c0018af5:	79 27                	jns    c0018b1e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018af7:	bb 01 00 00 00       	mov    ebx,0x1
c0018afc:	53                   	push   ebx
c0018afd:	56                   	push   esi
c0018afe:	57                   	push   edi
c0018aff:	55                   	push   ebp
c0018b00:	e8 b5 f7 ff ff       	call   c00182ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018b05:	83 c4 10             	add    esp,0x10
c0018b08:	66 40                	inc    ax
c0018b0a:	74 0c                	je     c0018b18 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018b0c:	53                   	push   ebx
c0018b0d:	56                   	push   esi
c0018b0e:	57                   	push   edi
c0018b0f:	55                   	push   ebp
c0018b10:	e8 31 fe ff ff       	call   c0018946 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018b15:	83 c4 10             	add    esp,0x10
c0018b18:	43                   	inc    ebx
c0018b19:	83 fb 08             	cmp    ebx,0x8
c0018b1c:	75 de                	jne    c0018afc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018b1e:	83 c4 0c             	add    esp,0xc
c0018b21:	5b                   	pop    ebx
c0018b22:	5e                   	pop    esi
c0018b23:	5f                   	pop    edi
c0018b24:	5d                   	pop    ebp
c0018b25:	c3                   	ret    

c0018b26 <PCI::detect()>:
c0018b26:	56                   	push   esi
c0018b27:	53                   	push   ebx
c0018b28:	53                   	push   ebx
c0018b29:	31 db                	xor    ebx,ebx
c0018b2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018b2f:	6a 00                	push   0x0
c0018b31:	6a 00                	push   0x0
c0018b33:	6a 00                	push   0x0
c0018b35:	56                   	push   esi
c0018b36:	e8 a3 f7 ff ff       	call   c00182de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018b3b:	83 c4 10             	add    esp,0x10
c0018b3e:	a8 80                	test   al,0x80
c0018b40:	75 21                	jne    c0018b63 <PCI::detect()+0x3d>
c0018b42:	51                   	push   ecx
c0018b43:	51                   	push   ecx
c0018b44:	6a 00                	push   0x0
c0018b46:	56                   	push   esi
c0018b47:	e8 62 fc ff ff       	call   c00187ae <PCI::checkBus(unsigned char)>
c0018b4c:	83 c4 10             	add    esp,0x10
c0018b4f:	eb 24                	jmp    c0018b75 <PCI::detect()+0x4f>
c0018b51:	52                   	push   edx
c0018b52:	52                   	push   edx
c0018b53:	53                   	push   ebx
c0018b54:	43                   	inc    ebx
c0018b55:	56                   	push   esi
c0018b56:	e8 53 fc ff ff       	call   c00187ae <PCI::checkBus(unsigned char)>
c0018b5b:	83 c4 10             	add    esp,0x10
c0018b5e:	83 fb 08             	cmp    ebx,0x8
c0018b61:	74 12                	je     c0018b75 <PCI::detect()+0x4f>
c0018b63:	53                   	push   ebx
c0018b64:	6a 00                	push   0x0
c0018b66:	6a 00                	push   0x0
c0018b68:	56                   	push   esi
c0018b69:	e8 4c f7 ff ff       	call   c00182ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018b6e:	83 c4 10             	add    esp,0x10
c0018b71:	66 40                	inc    ax
c0018b73:	74 dc                	je     c0018b51 <PCI::detect()+0x2b>
c0018b75:	58                   	pop    eax
c0018b76:	5b                   	pop    ebx
c0018b77:	5e                   	pop    esi
c0018b78:	c3                   	ret    
c0018b79:	90                   	nop

c0018b7a <IDE::close(int, int, void*)>:
c0018b7a:	83 c8 ff             	or     eax,0xffffffff
c0018b7d:	c3                   	ret    

c0018b7e <IDE::IDE()>:
c0018b7e:	83 ec 0c             	sub    esp,0xc
c0018b81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b85:	83 ec 08             	sub    esp,0x8
c0018b88:	68 3c ed 01 c0       	push   0xc001ed3c
c0018b8d:	50                   	push   eax
c0018b8e:	e8 d1 30 ff ff       	call   c000bc64 <HardDiskController::HardDiskController(char const*)>
c0018b93:	83 c4 10             	add    esp,0x10
c0018b96:	ba cc ed 01 c0       	mov    edx,0xc001edcc
c0018b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b9f:	89 10                	mov    DWORD PTR [eax],edx
c0018ba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ba5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018bac:	90                   	nop
c0018bad:	83 c4 0c             	add    esp,0xc
c0018bb0:	c3                   	ret    
c0018bb1:	90                   	nop

c0018bb2 <IDE::prepareInterrupt(unsigned char)>:
c0018bb2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018bb7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018bbb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018bc3:	c3                   	ret    

c0018bc4 <selectDrive(unsigned char, unsigned char)>:
c0018bc4:	c3                   	ret    
c0018bc5:	90                   	nop

c0018bc6 <IDE::getBase(unsigned char)>:
c0018bc6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018bcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018bcf:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018bd7:	c3                   	ret    

c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018bd8:	55                   	push   ebp
c0018bd9:	57                   	push   edi
c0018bda:	56                   	push   esi
c0018bdb:	53                   	push   ebx
c0018bdc:	83 ec 1c             	sub    esp,0x1c
c0018bdf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018be3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018be7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018bea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018bee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018bf2:	80 f9 03             	cmp    cl,0x3
c0018bf5:	77 51                	ja     c0018c48 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018bf7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bfb:	0f b6 f2             	movzx  esi,dl
c0018bfe:	0f b6 db             	movzx  ebx,bl
c0018c01:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018c04:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018c08:	83 ca 80             	or     edx,0xffffff80
c0018c0b:	0f b6 d2             	movzx  edx,dl
c0018c0e:	52                   	push   edx
c0018c0f:	6a 0c                	push   0xc
c0018c11:	56                   	push   esi
c0018c12:	57                   	push   edi
c0018c13:	e8 c0 ff ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c18:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0018c1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c21:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018c25:	ee                   	out    dx,al
c0018c26:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0018c2b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0018c2f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0018c33:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018c37:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018c3f:	83 c4 2c             	add    esp,0x2c
c0018c42:	5b                   	pop    ebx
c0018c43:	5e                   	pop    esi
c0018c44:	5f                   	pop    edi
c0018c45:	5d                   	pop    ebp
c0018c46:	eb 90                	jmp    c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c48:	80 fb 07             	cmp    bl,0x7
c0018c4b:	77 12                	ja     c0018c5f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0018c4d:	0f b6 d2             	movzx  edx,dl
c0018c50:	0f b6 db             	movzx  ebx,bl
c0018c53:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0018c5b:	89 da                	mov    edx,ebx
c0018c5d:	eb 2f                	jmp    c0018c8e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018c5f:	80 fb 0d             	cmp    bl,0xd
c0018c62:	77 13                	ja     c0018c77 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0018c64:	0f b6 d2             	movzx  edx,dl
c0018c67:	0f b6 db             	movzx  ebx,bl
c0018c6a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0018c71:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0018c75:	eb 17                	jmp    c0018c8e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018c77:	80 fb 15             	cmp    bl,0x15
c0018c7a:	77 13                	ja     c0018c8f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0018c7c:	0f b6 d2             	movzx  edx,dl
c0018c7f:	0f b6 db             	movzx  ebx,bl
c0018c82:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0018c8a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0018c8e:	ee                   	out    dx,al
c0018c8f:	83 c4 1c             	add    esp,0x1c
c0018c92:	5b                   	pop    ebx
c0018c93:	5e                   	pop    esi
c0018c94:	5f                   	pop    edi
c0018c95:	5d                   	pop    ebp
c0018c96:	c3                   	ret    
c0018c97:	90                   	nop

c0018c98 <IDE::read(unsigned char, unsigned char)>:
c0018c98:	55                   	push   ebp
c0018c99:	57                   	push   edi
c0018c9a:	56                   	push   esi
c0018c9b:	53                   	push   ebx
c0018c9c:	83 ec 1c             	sub    esp,0x1c
c0018c9f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018ca3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018ca7:	8d 43 f8             	lea    eax,[ebx-0x8]
c0018caa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018cae:	3c 03                	cmp    al,0x3
c0018cb0:	77 43                	ja     c0018cf5 <IDE::read(unsigned char, unsigned char)+0x5d>
c0018cb2:	0f b6 f2             	movzx  esi,dl
c0018cb5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018cb8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0018cbc:	83 c8 80             	or     eax,0xffffff80
c0018cbf:	0f b6 c0             	movzx  eax,al
c0018cc2:	50                   	push   eax
c0018cc3:	6a 0c                	push   0xc
c0018cc5:	56                   	push   esi
c0018cc6:	57                   	push   edi
c0018cc7:	e8 0c ff ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018ccc:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0018cd1:	0f b6 c3             	movzx  eax,bl
c0018cd4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0018cd8:	ec                   	in     al,dx
c0018cd9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018cdd:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0018ce2:	52                   	push   edx
c0018ce3:	6a 0c                	push   0xc
c0018ce5:	56                   	push   esi
c0018ce6:	57                   	push   edi
c0018ce7:	e8 ec fe ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018cec:	83 c4 20             	add    esp,0x20
c0018cef:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018cf3:	eb 49                	jmp    c0018d3e <IDE::read(unsigned char, unsigned char)+0xa6>
c0018cf5:	80 fb 07             	cmp    bl,0x7
c0018cf8:	77 12                	ja     c0018d0c <IDE::read(unsigned char, unsigned char)+0x74>
c0018cfa:	0f b6 d2             	movzx  edx,dl
c0018cfd:	0f b6 c3             	movzx  eax,bl
c0018d00:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0018d08:	89 c2                	mov    edx,eax
c0018d0a:	eb 31                	jmp    c0018d3d <IDE::read(unsigned char, unsigned char)+0xa5>
c0018d0c:	80 fb 0d             	cmp    bl,0xd
c0018d0f:	77 13                	ja     c0018d24 <IDE::read(unsigned char, unsigned char)+0x8c>
c0018d11:	0f b6 d2             	movzx  edx,dl
c0018d14:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0018d1b:	0f b6 d3             	movzx  edx,bl
c0018d1e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0018d22:	eb 19                	jmp    c0018d3d <IDE::read(unsigned char, unsigned char)+0xa5>
c0018d24:	31 c0                	xor    eax,eax
c0018d26:	80 fb 15             	cmp    bl,0x15
c0018d29:	77 13                	ja     c0018d3e <IDE::read(unsigned char, unsigned char)+0xa6>
c0018d2b:	0f b6 d2             	movzx  edx,dl
c0018d2e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0018d36:	0f b6 d3             	movzx  edx,bl
c0018d39:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0018d3d:	ec                   	in     al,dx
c0018d3e:	83 c4 1c             	add    esp,0x1c
c0018d41:	5b                   	pop    ebx
c0018d42:	5e                   	pop    esi
c0018d43:	5f                   	pop    edi
c0018d44:	5d                   	pop    ebp
c0018d45:	c3                   	ret    

c0018d46 <IDE::waitInterrupt(unsigned char)>:
c0018d46:	57                   	push   edi
c0018d47:	56                   	push   esi
c0018d48:	31 f6                	xor    esi,esi
c0018d4a:	53                   	push   ebx
c0018d4b:	83 ec 10             	sub    esp,0x10
c0018d4e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0018d52:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018d56:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018d5a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018d5f:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0018d66:	84 db                	test   bl,bl
c0018d68:	75 33                	jne    c0018d9d <IDE::waitInterrupt(unsigned char)+0x57>
c0018d6a:	52                   	push   edx
c0018d6b:	6a 0c                	push   0xc
c0018d6d:	50                   	push   eax
c0018d6e:	57                   	push   edi
c0018d6f:	e8 24 ff ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c0018d74:	83 c4 10             	add    esp,0x10
c0018d77:	a8 01                	test   al,0x1
c0018d79:	75 2a                	jne    c0018da5 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018d7b:	f7 c6 04 00 00 00    	test   esi,0x4
c0018d81:	75 12                	jne    c0018d95 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018d83:	83 fe 32             	cmp    esi,0x32
c0018d86:	7e 0d                	jle    c0018d95 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018d88:	83 ec 0c             	sub    esp,0xc
c0018d8b:	6a 64                	push   0x64
c0018d8d:	e8 1a a9 ff ff       	call   c00136ac <milliTenthSleep(unsigned int)>
c0018d92:	83 c4 10             	add    esp,0x10
c0018d95:	83 fe 3c             	cmp    esi,0x3c
c0018d98:	74 0b                	je     c0018da5 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018d9a:	46                   	inc    esi
c0018d9b:	eb bd                	jmp    c0018d5a <IDE::waitInterrupt(unsigned char)+0x14>
c0018d9d:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0018da5:	83 c4 10             	add    esp,0x10
c0018da8:	88 d8                	mov    al,bl
c0018daa:	5b                   	pop    ebx
c0018dab:	5e                   	pop    esi
c0018dac:	5f                   	pop    edi
c0018dad:	c3                   	ret    

c0018dae <ideChannel0IRQHandler(regs*, void*)>:
c0018dae:	83 ec 10             	sub    esp,0x10
c0018db1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018db5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0018dbc:	6a 07                	push   0x7
c0018dbe:	6a 00                	push   0x0
c0018dc0:	50                   	push   eax
c0018dc1:	e8 d2 fe ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c0018dc6:	83 c4 1c             	add    esp,0x1c
c0018dc9:	c3                   	ret    

c0018dca <ideChannel1IRQHandler(regs*, void*)>:
c0018dca:	83 ec 10             	sub    esp,0x10
c0018dcd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018dd1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0018dd8:	6a 07                	push   0x7
c0018dda:	6a 01                	push   0x1
c0018ddc:	50                   	push   eax
c0018ddd:	e8 b6 fe ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c0018de2:	83 c4 1c             	add    esp,0x1c
c0018de5:	c3                   	ret    

c0018de6 <IDE::enableIRQs(unsigned char, bool)>:
c0018de6:	57                   	push   edi
c0018de7:	56                   	push   esi
c0018de8:	be 04 00 00 00       	mov    esi,0x4
c0018ded:	53                   	push   ebx
c0018dee:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018df3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018df7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0018dfc:	0f 94 c0             	sete   al
c0018dff:	01 c0                	add    eax,eax
c0018e01:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0018e08:	0f b6 c0             	movzx  eax,al
c0018e0b:	50                   	push   eax
c0018e0c:	6a 0c                	push   0xc
c0018e0e:	57                   	push   edi
c0018e0f:	53                   	push   ebx
c0018e10:	e8 c3 fd ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018e15:	83 c4 10             	add    esp,0x10
c0018e18:	50                   	push   eax
c0018e19:	6a 0c                	push   0xc
c0018e1b:	57                   	push   edi
c0018e1c:	53                   	push   ebx
c0018e1d:	e8 76 fe ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c0018e22:	83 c4 10             	add    esp,0x10
c0018e25:	4e                   	dec    esi
c0018e26:	75 f0                	jne    c0018e18 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0018e28:	5b                   	pop    ebx
c0018e29:	5e                   	pop    esi
c0018e2a:	5f                   	pop    edi
c0018e2b:	c3                   	ret    

c0018e2c <IDE::open(int, int, void*)>:
c0018e2c:	55                   	push   ebp
c0018e2d:	57                   	push   edi
c0018e2e:	56                   	push   esi
c0018e2f:	53                   	push   ebx
c0018e30:	83 ec 1c             	sub    esp,0x1c
c0018e33:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018e37:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0018e40:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0018e49:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0018e50:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0018e57:	0f 85 b0 02 00 00    	jne    c001910d <IDE::open(int, int, void*)+0x2e1>
c0018e5d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0018e63:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0018e67:	83 e0 7f             	and    eax,0x7f
c0018e6a:	3c 05                	cmp    al,0x5
c0018e6c:	74 04                	je     c0018e72 <IDE::open(int, int, void*)+0x46>
c0018e6e:	3c 0f                	cmp    al,0xf
c0018e70:	75 32                	jne    c0018ea4 <IDE::open(int, int, void*)+0x78>
c0018e72:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0018e78:	83 e0 fc             	and    eax,0xfffffffc
c0018e7b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018e82:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0018e88:	83 e0 fc             	and    eax,0xfffffffc
c0018e8b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018e92:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0018e98:	83 e0 fc             	and    eax,0xfffffffc
c0018e9b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018ea2:	eb 14                	jmp    c0018eb8 <IDE::open(int, int, void*)+0x8c>
c0018ea4:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0018eae:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0018eb8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0018ebf:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0018ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018eca:	89 c6                	mov    esi,eax
c0018ecc:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018ed1:	c1 e6 10             	shl    esi,0x10
c0018ed4:	89 e8                	mov    eax,ebp
c0018ed6:	89 fa                	mov    edx,edi
c0018ed8:	c1 e0 0b             	shl    eax,0xb
c0018edb:	09 f0                	or     eax,esi
c0018edd:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0018ee4:	c1 e6 08             	shl    esi,0x8
c0018ee7:	09 c6                	or     esi,eax
c0018ee9:	89 f0                	mov    eax,esi
c0018eeb:	0d 08 00 00 80       	or     eax,0x80000008
c0018ef0:	ef                   	out    dx,eax
c0018ef1:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0018ef6:	89 ca                	mov    edx,ecx
c0018ef8:	ed                   	in     eax,dx
c0018ef9:	c1 e8 10             	shr    eax,0x10
c0018efc:	3d ff ff 00 00       	cmp    eax,0xffff
c0018f01:	0f 84 f5 00 00 00    	je     c0018ffc <IDE::open(int, int, void*)+0x1d0>
c0018f07:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0018f0d:	89 fa                	mov    edx,edi
c0018f0f:	89 f0                	mov    eax,esi
c0018f11:	ef                   	out    dx,eax
c0018f12:	b0 fe                	mov    al,0xfe
c0018f14:	89 ca                	mov    edx,ecx
c0018f16:	ee                   	out    dx,al
c0018f17:	89 f0                	mov    eax,esi
c0018f19:	89 fa                	mov    edx,edi
c0018f1b:	ef                   	out    dx,eax
c0018f1c:	89 ca                	mov    edx,ecx
c0018f1e:	ed                   	in     eax,dx
c0018f1f:	3c fe                	cmp    al,0xfe
c0018f21:	0f 85 a9 00 00 00    	jne    c0018fd0 <IDE::open(int, int, void*)+0x1a4>
c0018f27:	8b 15 f8 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204f8
c0018f2d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0018f34:	74 33                	je     c0018f69 <IDE::open(int, int, void*)+0x13d>
c0018f36:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0018f3c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0018f40:	40                   	inc    eax
c0018f41:	83 ec 0c             	sub    esp,0xc
c0018f44:	0f b6 c0             	movzx  eax,al
c0018f47:	50                   	push   eax
c0018f48:	55                   	push   ebp
c0018f49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018f4d:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0018f53:	51                   	push   ecx
c0018f54:	e8 1f 57 ff ff       	call   c000e678 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0018f59:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0018f5e:	83 c4 1c             	add    esp,0x1c
c0018f61:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018f67:	eb 0a                	jmp    c0018f73 <IDE::open(int, int, void*)+0x147>
c0018f69:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0018f73:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0018f7a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0018f81:	c1 e1 10             	shl    ecx,0x10
c0018f84:	c1 e0 08             	shl    eax,0x8
c0018f87:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018f8c:	09 c1                	or     ecx,eax
c0018f8e:	89 fa                	mov    edx,edi
c0018f90:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0018f97:	c1 e0 0b             	shl    eax,0xb
c0018f9a:	09 c1                	or     ecx,eax
c0018f9c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0018fa2:	89 c8                	mov    eax,ecx
c0018fa4:	ef                   	out    dx,eax
c0018fa5:	be fc 0c 00 00       	mov    esi,0xcfc
c0018faa:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0018fb0:	89 f2                	mov    edx,esi
c0018fb2:	ee                   	out    dx,al
c0018fb3:	89 c8                	mov    eax,ecx
c0018fb5:	89 fa                	mov    edx,edi
c0018fb7:	ef                   	out    dx,eax
c0018fb8:	89 f2                	mov    edx,esi
c0018fba:	ed                   	in     eax,dx
c0018fbb:	0f b6 c0             	movzx  eax,al
c0018fbe:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0018fc4:	74 46                	je     c001900c <IDE::open(int, int, void*)+0x1e0>
c0018fc6:	83 ec 0c             	sub    esp,0xc
c0018fc9:	68 54 ed 01 c0       	push   0xc001ed54
c0018fce:	eb 34                	jmp    c0019004 <IDE::open(int, int, void*)+0x1d8>
c0018fd0:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0018fd9:	75 17                	jne    c0018ff2 <IDE::open(int, int, void*)+0x1c6>
c0018fdb:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0018fe0:	74 07                	je     c0018fe9 <IDE::open(int, int, void*)+0x1bd>
c0018fe2:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0018fe7:	75 09                	jne    c0018ff2 <IDE::open(int, int, void*)+0x1c6>
c0018fe9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018ff0:	eb 1a                	jmp    c001900c <IDE::open(int, int, void*)+0x1e0>
c0018ff2:	83 ec 0c             	sub    esp,0xc
c0018ff5:	68 5c ed 01 c0       	push   0xc001ed5c
c0018ffa:	eb 08                	jmp    c0019004 <IDE::open(int, int, void*)+0x1d8>
c0018ffc:	83 ec 0c             	sub    esp,0xc
c0018fff:	68 8d ed 01 c0       	push   0xc001ed8d
c0019004:	e8 56 71 ff ff       	call   c001015f <KePanic(char const*)>
c0019009:	83 c4 10             	add    esp,0x10
c001900c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0019013:	79 1a                	jns    c001902f <IDE::open(int, int, void*)+0x203>
c0019015:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001901b:	83 e0 fc             	and    eax,0xfffffffc
c001901e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019025:	83 c0 08             	add    eax,0x8
c0019028:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001902f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019035:	89 c2                	mov    edx,eax
c0019037:	83 e2 0f             	and    edx,0xf
c001903a:	66 83 fa 08          	cmp    dx,0x8
c001903e:	75 0a                	jne    c001904a <IDE::open(int, int, void*)+0x21e>
c0019040:	83 e8 02             	sub    eax,0x2
c0019043:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001904a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019050:	89 c2                	mov    edx,eax
c0019052:	83 e2 0f             	and    edx,0xf
c0019055:	66 83 fa 08          	cmp    dx,0x8
c0019059:	75 0a                	jne    c0019065 <IDE::open(int, int, void*)+0x239>
c001905b:	83 e8 02             	sub    eax,0x2
c001905e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019065:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001906c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0019073:	89 d0                	mov    eax,edx
c0019075:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019078:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001907c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019080:	8d 4a 01             	lea    ecx,[edx+0x1]
c0019083:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019088:	0f b6 c9             	movzx  ecx,cl
c001908b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0019092:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019095:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019099:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001909d:	8d 50 02             	lea    edx,[eax+0x2]
c00190a0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00190a5:	0f b6 d2             	movzx  edx,dl
c00190a8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00190ae:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00190b1:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00190b5:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00190b9:	8d 48 03             	lea    ecx,[eax+0x3]
c00190bc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00190c1:	0f b6 c9             	movzx  ecx,cl
c00190c4:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00190ca:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00190cd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00190d1:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00190d5:	8d 50 04             	lea    edx,[eax+0x4]
c00190d8:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00190de:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00190e3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00190ea:	66 85 f6             	test   si,si
c00190ed:	74 5b                	je     c001914a <IDE::open(int, int, void*)+0x31e>
c00190ef:	0f b6 d2             	movzx  edx,dl
c00190f2:	83 c0 05             	add    eax,0x5
c00190f5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00190f8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00190fc:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0019100:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019106:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001910b:	eb 3d                	jmp    c001914a <IDE::open(int, int, void*)+0x31e>
c001910d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0019113:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001911a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019121:	66 05 06 02          	add    ax,0x206
c0019125:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001912c:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0019133:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001913a:	66 05 06 02          	add    ax,0x206
c001913e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019145:	e9 e5 fe ff ff       	jmp    c001902f <IDE::open(int, int, void*)+0x203>
c001914a:	50                   	push   eax
c001914b:	50                   	push   eax
c001914c:	6a 00                	push   0x0
c001914e:	53                   	push   ebx
c001914f:	e8 5e fa ff ff       	call   c0018bb2 <IDE::prepareInterrupt(unsigned char)>
c0019154:	5a                   	pop    edx
c0019155:	59                   	pop    ecx
c0019156:	6a 01                	push   0x1
c0019158:	53                   	push   ebx
c0019159:	e8 54 fa ff ff       	call   c0018bb2 <IDE::prepareInterrupt(unsigned char)>
c001915e:	83 c4 0c             	add    esp,0xc
c0019161:	6a 00                	push   0x0
c0019163:	6a 00                	push   0x0
c0019165:	53                   	push   ebx
c0019166:	e8 7b fc ff ff       	call   c0018de6 <IDE::enableIRQs(unsigned char, bool)>
c001916b:	83 c4 0c             	add    esp,0xc
c001916e:	6a 00                	push   0x0
c0019170:	6a 01                	push   0x1
c0019172:	53                   	push   ebx
c0019173:	e8 6e fc ff ff       	call   c0018de6 <IDE::enableIRQs(unsigned char, bool)>
c0019178:	83 c4 10             	add    esp,0x10
c001917b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0019182:	74 34                	je     c00191b8 <IDE::open(int, int, void*)+0x38c>
c0019184:	83 ec 0c             	sub    esp,0xc
c0019187:	53                   	push   ebx
c0019188:	6a 01                	push   0x1
c001918a:	68 ae 8d 01 c0       	push   0xc0018dae
c001918f:	6a 0e                	push   0xe
c0019191:	53                   	push   ebx
c0019192:	e8 35 27 ff ff       	call   c000b8cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019197:	83 c4 14             	add    esp,0x14
c001919a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00191a0:	53                   	push   ebx
c00191a1:	6a 01                	push   0x1
c00191a3:	68 ca 8d 01 c0       	push   0xc0018dca
c00191a8:	6a 0f                	push   0xf
c00191aa:	53                   	push   ebx
c00191ab:	e8 1c 27 ff ff       	call   c000b8cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00191b0:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00191b6:	eb 38                	jmp    c00191f0 <IDE::open(int, int, void*)+0x3c4>
c00191b8:	83 ec 0c             	sub    esp,0xc
c00191bb:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00191c5:	53                   	push   ebx
c00191c6:	6a 00                	push   0x0
c00191c8:	68 ae 8d 01 c0       	push   0xc0018dae
c00191cd:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00191d3:	53                   	push   ebx
c00191d4:	e8 f3 26 ff ff       	call   c000b8cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00191d9:	83 c4 14             	add    esp,0x14
c00191dc:	53                   	push   ebx
c00191dd:	6a 00                	push   0x0
c00191df:	68 ca 8d 01 c0       	push   0xc0018dca
c00191e4:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00191ea:	53                   	push   ebx
c00191eb:	e8 dc 26 ff ff       	call   c000b8cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00191f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00191f2:	83 c4 20             	add    esp,0x20
c00191f5:	83 ec 0c             	sub    esp,0xc
c00191f8:	53                   	push   ebx
c00191f9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00191fc:	83 c4 0c             	add    esp,0xc
c00191ff:	6a 07                	push   0x7
c0019201:	6a 00                	push   0x0
c0019203:	53                   	push   ebx
c0019204:	e8 8f fa ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c0019209:	83 c4 0c             	add    esp,0xc
c001920c:	6a 07                	push   0x7
c001920e:	6a 01                	push   0x1
c0019210:	53                   	push   ebx
c0019211:	e8 82 fa ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c0019216:	83 c4 0c             	add    esp,0xc
c0019219:	6a 01                	push   0x1
c001921b:	6a 00                	push   0x0
c001921d:	53                   	push   ebx
c001921e:	e8 c3 fb ff ff       	call   c0018de6 <IDE::enableIRQs(unsigned char, bool)>
c0019223:	83 c4 0c             	add    esp,0xc
c0019226:	6a 01                	push   0x1
c0019228:	6a 01                	push   0x1
c001922a:	53                   	push   ebx
c001922b:	e8 b6 fb ff ff       	call   c0018de6 <IDE::enableIRQs(unsigned char, bool)>
c0019230:	83 c4 2c             	add    esp,0x2c
c0019233:	31 c0                	xor    eax,eax
c0019235:	5b                   	pop    ebx
c0019236:	5e                   	pop    esi
c0019237:	5f                   	pop    edi
c0019238:	5d                   	pop    ebp
c0019239:	c3                   	ret    

c001923a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001923a:	55                   	push   ebp
c001923b:	57                   	push   edi
c001923c:	56                   	push   esi
c001923d:	53                   	push   ebx
c001923e:	83 ec 1c             	sub    esp,0x1c
c0019241:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019245:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019249:	8d 50 f8             	lea    edx,[eax-0x8]
c001924c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019250:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019254:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019258:	80 fa 03             	cmp    dl,0x3
c001925b:	77 5d                	ja     c00192ba <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001925d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019261:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019265:	0f b6 db             	movzx  ebx,bl
c0019268:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001926b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001926f:	83 ca 80             	or     edx,0xffffff80
c0019272:	0f b6 d2             	movzx  edx,dl
c0019275:	52                   	push   edx
c0019276:	6a 0c                	push   0xc
c0019278:	53                   	push   ebx
c0019279:	56                   	push   esi
c001927a:	e8 59 f9 ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001927f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019284:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019288:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001928c:	0f b6 c0             	movzx  eax,al
c001928f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0019293:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019295:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001929a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001929e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00192a2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00192a6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00192ae:	83 c4 2c             	add    esp,0x2c
c00192b1:	5b                   	pop    ebx
c00192b2:	5e                   	pop    esi
c00192b3:	5f                   	pop    edi
c00192b4:	5d                   	pop    ebp
c00192b5:	e9 1e f9 ff ff       	jmp    c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192ba:	3c 07                	cmp    al,0x7
c00192bc:	77 10                	ja     c00192ce <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00192be:	0f b6 db             	movzx  ebx,bl
c00192c1:	0f b6 d0             	movzx  edx,al
c00192c4:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00192cc:	eb 2d                	jmp    c00192fb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00192ce:	3c 0d                	cmp    al,0xd
c00192d0:	77 13                	ja     c00192e5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00192d2:	0f b6 db             	movzx  ebx,bl
c00192d5:	0f b6 c0             	movzx  eax,al
c00192d8:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00192df:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00192e3:	eb 16                	jmp    c00192fb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00192e5:	3c 15                	cmp    al,0x15
c00192e7:	77 14                	ja     c00192fd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00192e9:	0f b6 db             	movzx  ebx,bl
c00192ec:	0f b6 c0             	movzx  eax,al
c00192ef:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00192f7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00192fb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00192fd:	83 c4 1c             	add    esp,0x1c
c0019300:	5b                   	pop    ebx
c0019301:	5e                   	pop    esi
c0019302:	5f                   	pop    edi
c0019303:	5d                   	pop    ebp
c0019304:	c3                   	ret    
c0019305:	90                   	nop

c0019306 <IDE::detect()>:
c0019306:	55                   	push   ebp
c0019307:	57                   	push   edi
c0019308:	56                   	push   esi
c0019309:	53                   	push   ebx
c001930a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019310:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019317:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001931e:	0f 85 97 02 00 00    	jne    c00195bb <IDE::detect()+0x2b5>
c0019324:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001932b:	31 f6                	xor    esi,esi
c001932d:	31 ed                	xor    ebp,ebp
c001932f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019337:	89 e8                	mov    eax,ebp
c0019339:	c1 e0 06             	shl    eax,0x6
c001933c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019344:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019348:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001934c:	c1 e0 04             	shl    eax,0x4
c001934f:	83 c8 a0             	or     eax,0xffffffa0
c0019352:	0f b6 c0             	movzx  eax,al
c0019355:	50                   	push   eax
c0019356:	6a 06                	push   0x6
c0019358:	56                   	push   esi
c0019359:	53                   	push   ebx
c001935a:	e8 79 f8 ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001935f:	83 c4 0c             	add    esp,0xc
c0019362:	6a 0c                	push   0xc
c0019364:	56                   	push   esi
c0019365:	53                   	push   ebx
c0019366:	e8 2d f9 ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c001936b:	83 c4 0c             	add    esp,0xc
c001936e:	6a 0c                	push   0xc
c0019370:	56                   	push   esi
c0019371:	53                   	push   ebx
c0019372:	e8 21 f9 ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c0019377:	83 c4 0c             	add    esp,0xc
c001937a:	6a 0c                	push   0xc
c001937c:	56                   	push   esi
c001937d:	53                   	push   ebx
c001937e:	e8 15 f9 ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c0019383:	83 c4 0c             	add    esp,0xc
c0019386:	6a 0c                	push   0xc
c0019388:	56                   	push   esi
c0019389:	53                   	push   ebx
c001938a:	e8 09 f9 ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c001938f:	68 ec 00 00 00       	push   0xec
c0019394:	6a 07                	push   0x7
c0019396:	56                   	push   esi
c0019397:	53                   	push   ebx
c0019398:	e8 3b f8 ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001939d:	83 c4 1c             	add    esp,0x1c
c00193a0:	6a 0c                	push   0xc
c00193a2:	56                   	push   esi
c00193a3:	53                   	push   ebx
c00193a4:	e8 ef f8 ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c00193a9:	83 c4 0c             	add    esp,0xc
c00193ac:	6a 0c                	push   0xc
c00193ae:	56                   	push   esi
c00193af:	53                   	push   ebx
c00193b0:	e8 e3 f8 ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c00193b5:	83 c4 0c             	add    esp,0xc
c00193b8:	6a 0c                	push   0xc
c00193ba:	56                   	push   esi
c00193bb:	53                   	push   ebx
c00193bc:	e8 d7 f8 ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c00193c1:	83 c4 0c             	add    esp,0xc
c00193c4:	6a 0c                	push   0xc
c00193c6:	56                   	push   esi
c00193c7:	53                   	push   ebx
c00193c8:	e8 cb f8 ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c00193cd:	83 c4 0c             	add    esp,0xc
c00193d0:	6a 0c                	push   0xc
c00193d2:	56                   	push   esi
c00193d3:	53                   	push   ebx
c00193d4:	e8 bf f8 ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c00193d9:	83 c4 10             	add    esp,0x10
c00193dc:	84 c0                	test   al,al
c00193de:	0f 84 5f 01 00 00    	je     c0019543 <IDE::detect()+0x23d>
c00193e4:	31 ff                	xor    edi,edi
c00193e6:	50                   	push   eax
c00193e7:	6a 0c                	push   0xc
c00193e9:	56                   	push   esi
c00193ea:	53                   	push   ebx
c00193eb:	e8 a8 f8 ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c00193f0:	83 c4 10             	add    esp,0x10
c00193f3:	a8 01                	test   al,0x1
c00193f5:	0f 85 69 01 00 00    	jne    c0019564 <IDE::detect()+0x25e>
c00193fb:	84 c0                	test   al,al
c00193fd:	78 04                	js     c0019403 <IDE::detect()+0xfd>
c00193ff:	a8 08                	test   al,0x8
c0019401:	75 23                	jne    c0019426 <IDE::detect()+0x120>
c0019403:	47                   	inc    edi
c0019404:	81 ff 17 01 00 00    	cmp    edi,0x117
c001940a:	7e da                	jle    c00193e6 <IDE::detect()+0xe0>
c001940c:	83 ec 0c             	sub    esp,0xc
c001940f:	6a 32                	push   0x32
c0019411:	e8 96 a2 ff ff       	call   c00136ac <milliTenthSleep(unsigned int)>
c0019416:	83 c4 10             	add    esp,0x10
c0019419:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001941f:	75 c5                	jne    c00193e6 <IDE::detect()+0xe0>
c0019421:	e9 3e 01 00 00       	jmp    c0019564 <IDE::detect()+0x25e>
c0019426:	31 c9                	xor    ecx,ecx
c0019428:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001942c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019430:	83 ec 0c             	sub    esp,0xc
c0019433:	68 80 00 00 00       	push   0x80
c0019438:	57                   	push   edi
c0019439:	6a 00                	push   0x0
c001943b:	56                   	push   esi
c001943c:	53                   	push   ebx
c001943d:	e8 f8 fd ff ff       	call   c001923a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0019442:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019447:	89 e8                	mov    eax,ebp
c0019449:	89 d1                	mov    ecx,edx
c001944b:	c1 e0 06             	shl    eax,0x6
c001944e:	01 d8                	add    eax,ebx
c0019450:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0019457:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001945e:	89 f2                	mov    edx,esi
c0019460:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019466:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001946a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019470:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019474:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001947b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0019483:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001948a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0019492:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019498:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001949f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00194a5:	8d 54 24 58          	lea    edx,[esp+0x58]
c00194a9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00194ad:	83 c4 20             	add    esp,0x20
c00194b0:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00194b3:	83 c0 02             	add    eax,0x2
c00194b6:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00194bc:	83 c7 02             	add    edi,0x2
c00194bf:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00194c2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00194c8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00194cc:	75 e2                	jne    c00194b0 <IDE::detect()+0x1aa>
c00194ce:	89 e8                	mov    eax,ebp
c00194d0:	c1 e0 06             	shl    eax,0x6
c00194d3:	01 d8                	add    eax,ebx
c00194d5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00194db:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00194e2:	66 c1 ea 09          	shr    dx,0x9
c00194e6:	83 e2 01             	and    edx,0x1
c00194e9:	84 c9                	test   cl,cl
c00194eb:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00194f1:	75 22                	jne    c0019515 <IDE::detect()+0x20f>
c00194f3:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00194fa:	74 46                	je     c0019542 <IDE::detect()+0x23c>
c00194fc:	83 ec 0c             	sub    esp,0xc
c00194ff:	68 7c 01 00 00       	push   0x17c
c0019504:	e8 b0 e2 fe ff       	call   c00077b9 <malloc>
c0019509:	89 c7                	mov    edi,eax
c001950b:	89 04 24             	mov    DWORD PTR [esp],eax
c001950e:	e8 11 05 00 00       	call   c0019a24 <ATA::ATA()>
c0019513:	eb 17                	jmp    c001952c <IDE::detect()+0x226>
c0019515:	83 ec 0c             	sub    esp,0xc
c0019518:	68 84 01 00 00       	push   0x184
c001951d:	e8 97 e2 fe ff       	call   c00077b9 <malloc>
c0019522:	89 c7                	mov    edi,eax
c0019524:	89 04 24             	mov    DWORD PTR [esp],eax
c0019527:	e8 f0 0a 00 00       	call   c001a01c <ATAPI::ATAPI()>
c001952c:	5a                   	pop    edx
c001952d:	59                   	pop    ecx
c001952e:	57                   	push   edi
c001952f:	53                   	push   ebx
c0019530:	e8 eb 23 ff ff       	call   c000b920 <Device::addChild(Device*)>
c0019535:	8b 07                	mov    eax,DWORD PTR [edi]
c0019537:	53                   	push   ebx
c0019538:	55                   	push   ebp
c0019539:	6a 00                	push   0x0
c001953b:	57                   	push   edi
c001953c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001953f:	83 c4 20             	add    esp,0x20
c0019542:	45                   	inc    ebp
c0019543:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019548:	74 0d                	je     c0019557 <IDE::detect()+0x251>
c001954a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019552:	e9 e0 fd ff ff       	jmp    c0019337 <IDE::detect()+0x31>
c0019557:	4e                   	dec    esi
c0019558:	74 61                	je     c00195bb <IDE::detect()+0x2b5>
c001955a:	be 01 00 00 00       	mov    esi,0x1
c001955f:	e9 cb fd ff ff       	jmp    c001932f <IDE::detect()+0x29>
c0019564:	50                   	push   eax
c0019565:	6a 04                	push   0x4
c0019567:	56                   	push   esi
c0019568:	53                   	push   ebx
c0019569:	e8 2a f7 ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c001956e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019572:	83 c4 0c             	add    esp,0xc
c0019575:	6a 05                	push   0x5
c0019577:	56                   	push   esi
c0019578:	53                   	push   ebx
c0019579:	e8 1a f7 ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c001957e:	83 c4 10             	add    esp,0x10
c0019581:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019585:	80 fa 14             	cmp    dl,0x14
c0019588:	75 04                	jne    c001958e <IDE::detect()+0x288>
c001958a:	3c eb                	cmp    al,0xeb
c001958c:	eb 07                	jmp    c0019595 <IDE::detect()+0x28f>
c001958e:	3c 96                	cmp    al,0x96
c0019590:	75 b1                	jne    c0019543 <IDE::detect()+0x23d>
c0019592:	80 fa 69             	cmp    dl,0x69
c0019595:	75 ac                	jne    c0019543 <IDE::detect()+0x23d>
c0019597:	68 a1 00 00 00       	push   0xa1
c001959c:	6a 07                	push   0x7
c001959e:	56                   	push   esi
c001959f:	53                   	push   ebx
c00195a0:	e8 33 f6 ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00195a5:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c00195ac:	e8 fb a0 ff ff       	call   c00136ac <milliTenthSleep(unsigned int)>
c00195b1:	83 c4 10             	add    esp,0x10
c00195b4:	b1 01                	mov    cl,0x1
c00195b6:	e9 6d fe ff ff       	jmp    c0019428 <IDE::detect()+0x122>
c00195bb:	81 c4 1c 02 00 00    	add    esp,0x21c
c00195c1:	5b                   	pop    ebx
c00195c2:	5e                   	pop    esi
c00195c3:	5f                   	pop    edi
c00195c4:	5d                   	pop    ebp
c00195c5:	c3                   	ret    

c00195c6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00195c6:	55                   	push   ebp
c00195c7:	57                   	push   edi
c00195c8:	56                   	push   esi
c00195c9:	53                   	push   ebx
c00195ca:	83 ec 1c             	sub    esp,0x1c
c00195cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00195d1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00195d5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00195d9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00195dd:	88 c3                	mov    bl,al
c00195df:	84 c0                	test   al,al
c00195e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195e5:	0f 84 81 00 00 00    	je     c001966c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195eb:	83 ec 0c             	sub    esp,0xc
c00195ee:	68 b7 ed 01 c0       	push   0xc001edb7
c00195f3:	e8 e8 0e ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c00195f8:	83 c4 10             	add    esp,0x10
c00195fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195ff:	3c 01                	cmp    al,0x1
c0019601:	74 63                	je     c0019666 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019603:	3c 02                	cmp    al,0x2
c0019605:	75 53                	jne    c001965a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019607:	01 f6                	add    esi,esi
c0019609:	09 ee                	or     esi,ebp
c001960b:	50                   	push   eax
c001960c:	89 f0                	mov    eax,esi
c001960e:	6a 01                	push   0x1
c0019610:	0f b6 f0             	movzx  esi,al
c0019613:	c1 e6 06             	shl    esi,0x6
c0019616:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001961e:	50                   	push   eax
c001961f:	57                   	push   edi
c0019620:	e8 73 f6 ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c0019625:	83 c4 10             	add    esp,0x10
c0019628:	a8 01                	test   al,0x1
c001962a:	74 02                	je     c001962e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001962c:	b3 07                	mov    bl,0x7
c001962e:	a8 02                	test   al,0x2
c0019630:	74 02                	je     c0019634 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019632:	b3 03                	mov    bl,0x3
c0019634:	a8 04                	test   al,0x4
c0019636:	74 02                	je     c001963a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019638:	b3 14                	mov    bl,0x14
c001963a:	a8 08                	test   al,0x8
c001963c:	74 02                	je     c0019640 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001963e:	b3 03                	mov    bl,0x3
c0019640:	a8 10                	test   al,0x10
c0019642:	74 02                	je     c0019646 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019644:	b3 15                	mov    bl,0x15
c0019646:	a8 20                	test   al,0x20
c0019648:	74 02                	je     c001964c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001964a:	b3 03                	mov    bl,0x3
c001964c:	a8 40                	test   al,0x40
c001964e:	74 02                	je     c0019652 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019650:	b3 16                	mov    bl,0x16
c0019652:	84 c0                	test   al,al
c0019654:	79 16                	jns    c001966c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019656:	b3 0d                	mov    bl,0xd
c0019658:	eb 12                	jmp    c001966c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001965a:	3c 03                	cmp    al,0x3
c001965c:	74 0c                	je     c001966a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001965e:	3c 04                	cmp    al,0x4
c0019660:	75 0a                	jne    c001966c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019662:	b3 08                	mov    bl,0x8
c0019664:	eb 06                	jmp    c001966c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019666:	b3 13                	mov    bl,0x13
c0019668:	eb 02                	jmp    c001966c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001966a:	b3 17                	mov    bl,0x17
c001966c:	83 c4 1c             	add    esp,0x1c
c001966f:	88 d8                	mov    al,bl
c0019671:	5b                   	pop    ebx
c0019672:	5e                   	pop    esi
c0019673:	5f                   	pop    edi
c0019674:	5d                   	pop    ebp
c0019675:	c3                   	ret    

c0019676 <IDE::polling(unsigned char, unsigned int)>:
c0019676:	55                   	push   ebp
c0019677:	bd 04 00 00 00       	mov    ebp,0x4
c001967c:	57                   	push   edi
c001967d:	56                   	push   esi
c001967e:	53                   	push   ebx
c001967f:	83 ec 0c             	sub    esp,0xc
c0019682:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019686:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001968a:	0f b6 f3             	movzx  esi,bl
c001968d:	52                   	push   edx
c001968e:	6a 0c                	push   0xc
c0019690:	56                   	push   esi
c0019691:	57                   	push   edi
c0019692:	e8 01 f6 ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c0019697:	83 c4 10             	add    esp,0x10
c001969a:	4d                   	dec    ebp
c001969b:	75 ed                	jne    c001968a <IDE::polling(unsigned char, unsigned int)+0x14>
c001969d:	bb a0 86 01 00       	mov    ebx,0x186a0
c00196a2:	50                   	push   eax
c00196a3:	6a 0c                	push   0xc
c00196a5:	56                   	push   esi
c00196a6:	57                   	push   edi
c00196a7:	e8 ec f5 ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c00196ac:	83 c4 10             	add    esp,0x10
c00196af:	a8 01                	test   al,0x1
c00196b1:	75 17                	jne    c00196ca <IDE::polling(unsigned char, unsigned int)+0x54>
c00196b3:	a8 20                	test   al,0x20
c00196b5:	75 0f                	jne    c00196c6 <IDE::polling(unsigned char, unsigned int)+0x50>
c00196b7:	4b                   	dec    ebx
c00196b8:	74 10                	je     c00196ca <IDE::polling(unsigned char, unsigned int)+0x54>
c00196ba:	84 c0                	test   al,al
c00196bc:	78 e4                	js     c00196a2 <IDE::polling(unsigned char, unsigned int)+0x2c>
c00196be:	a8 08                	test   al,0x8
c00196c0:	74 e0                	je     c00196a2 <IDE::polling(unsigned char, unsigned int)+0x2c>
c00196c2:	31 c0                	xor    eax,eax
c00196c4:	eb 06                	jmp    c00196cc <IDE::polling(unsigned char, unsigned int)+0x56>
c00196c6:	b0 01                	mov    al,0x1
c00196c8:	eb 02                	jmp    c00196cc <IDE::polling(unsigned char, unsigned int)+0x56>
c00196ca:	b0 02                	mov    al,0x2
c00196cc:	83 c4 0c             	add    esp,0xc
c00196cf:	5b                   	pop    ebx
c00196d0:	5e                   	pop    esi
c00196d1:	5f                   	pop    edi
c00196d2:	5d                   	pop    ebp
c00196d3:	c3                   	ret    

c00196d4 <SATABus::close(int, int, void*)>:
c00196d4:	31 c0                	xor    eax,eax
c00196d6:	c3                   	ret    
c00196d7:	90                   	nop

c00196d8 <SATABus::detect()>:
c00196d8:	c3                   	ret    
c00196d9:	90                   	nop

c00196da <SATABus::SATABus()>:
c00196da:	83 ec 0c             	sub    esp,0xc
c00196dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196e1:	83 ec 08             	sub    esp,0x8
c00196e4:	68 f0 ed 01 c0       	push   0xc001edf0
c00196e9:	50                   	push   eax
c00196ea:	e8 75 25 ff ff       	call   c000bc64 <HardDiskController::HardDiskController(char const*)>
c00196ef:	83 c4 10             	add    esp,0x10
c00196f2:	ba 1c ee 01 c0       	mov    edx,0xc001ee1c
c00196f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196fb:	89 10                	mov    DWORD PTR [eax],edx
c00196fd:	83 ec 0c             	sub    esp,0xc
c0019700:	6a 50                	push   0x50
c0019702:	e8 4c e4 fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019707:	83 c4 10             	add    esp,0x10
c001970a:	89 c2                	mov    edx,eax
c001970c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019710:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019716:	83 ec 0c             	sub    esp,0xc
c0019719:	6a 50                	push   0x50
c001971b:	e8 6d fb fe ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c0019720:	83 c4 10             	add    esp,0x10
c0019723:	89 c2                	mov    edx,eax
c0019725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019729:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001972f:	a1 f0 05 02 c0       	mov    eax,ds:0xc00205f0
c0019734:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019738:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001973e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019742:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019748:	83 ec 0c             	sub    esp,0xc
c001974b:	6a 03                	push   0x3
c001974d:	6a 50                	push   0x50
c001974f:	51                   	push   ecx
c0019750:	52                   	push   edx
c0019751:	50                   	push   eax
c0019752:	e8 c5 04 ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019757:	83 c4 20             	add    esp,0x20
c001975a:	90                   	nop
c001975b:	83 c4 0c             	add    esp,0xc
c001975e:	c3                   	ret    
c001975f:	90                   	nop

c0019760 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019760:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019764:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019767:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001976a:	09 c2                	or     edx,eax
c001976c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019770:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019776:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019778:	31 c0                	xor    eax,eax
c001977a:	c1 e9 08             	shr    ecx,0x8
c001977d:	83 e1 0f             	and    ecx,0xf
c0019780:	39 c8                	cmp    eax,ecx
c0019782:	74 0a                	je     c001978e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019784:	f6 c2 01             	test   dl,0x1
c0019787:	74 08                	je     c0019791 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019789:	d1 ea                	shr    edx,1
c001978b:	40                   	inc    eax
c001978c:	eb f2                	jmp    c0019780 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001978e:	83 c8 ff             	or     eax,0xffffffff
c0019791:	c3                   	ret    

c0019792 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019792:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019796:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019799:	89 c2                	mov    edx,eax
c001979b:	c1 ea 08             	shr    edx,0x8
c001979e:	83 e2 0f             	and    edx,0xf
c00197a1:	fe ca                	dec    dl
c00197a3:	75 31                	jne    c00197d6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00197a5:	83 e0 0f             	and    eax,0xf
c00197a8:	3c 03                	cmp    al,0x3
c00197aa:	75 2a                	jne    c00197d6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00197ac:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00197af:	b8 02 00 00 00       	mov    eax,0x2
c00197b4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00197ba:	74 1c                	je     c00197d8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00197bc:	b8 04 00 00 00       	mov    eax,0x4
c00197c1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00197c7:	74 0f                	je     c00197d8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00197c9:	31 c0                	xor    eax,eax
c00197cb:	83 fa 03             	cmp    edx,0x3
c00197ce:	0f 94 c0             	sete   al
c00197d1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00197d5:	c3                   	ret    
c00197d6:	31 c0                	xor    eax,eax
c00197d8:	c3                   	ret    
c00197d9:	90                   	nop

c00197da <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00197da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197de:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197e1:	0f ba e2 0f          	bt     edx,0xf
c00197e5:	72 f7                	jb     c00197de <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00197e7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197ea:	83 ca 10             	or     edx,0x10
c00197ed:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00197f0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197f3:	83 ca 01             	or     edx,0x1
c00197f6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00197f9:	c3                   	ret    

c00197fa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00197fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197fe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019801:	83 e2 fe             	and    edx,0xfffffffe
c0019804:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019807:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001980a:	83 e2 ef             	and    edx,0xffffffef
c001980d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019810:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019813:	0f ba e2 0e          	bt     edx,0xe
c0019817:	72 f7                	jb     c0019810 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019819:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001981c:	0f ba e2 0f          	bt     edx,0xf
c0019820:	72 ee                	jb     c0019810 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019822:	c3                   	ret    
c0019823:	90                   	nop

c0019824 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019824:	55                   	push   ebp
c0019825:	57                   	push   edi
c0019826:	56                   	push   esi
c0019827:	53                   	push   ebx
c0019828:	83 ec 1c             	sub    esp,0x1c
c001982b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001982f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019833:	53                   	push   ebx
c0019834:	56                   	push   esi
c0019835:	e8 c0 ff ff ff       	call   c00197fa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001983a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001983e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019844:	83 ec 0c             	sub    esp,0xc
c0019847:	c1 e5 0a             	shl    ebp,0xa
c001984a:	01 e8                	add    eax,ebp
c001984c:	89 03                	mov    DWORD PTR [ebx],eax
c001984e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019850:	68 00 04 00 00       	push   0x400
c0019855:	6a 00                	push   0x0
c0019857:	50                   	push   eax
c0019858:	e8 73 6c fe ff       	call   c00004d0 <memset>
c001985d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019863:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019867:	01 e8                	add    eax,ebp
c0019869:	83 c4 1c             	add    esp,0x1c
c001986c:	89 03                	mov    DWORD PTR [ebx],eax
c001986e:	c1 e2 08             	shl    edx,0x8
c0019871:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019878:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001987e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019884:	01 f8                	add    eax,edi
c0019886:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019889:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001988c:	68 00 01 00 00       	push   0x100
c0019891:	6a 00                	push   0x0
c0019893:	50                   	push   eax
c0019894:	e8 37 6c fe ff       	call   c00004d0 <memset>
c0019899:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001989f:	01 fa                	add    edx,edi
c00198a1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00198a5:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00198a8:	c1 e7 0d             	shl    edi,0xd
c00198ab:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00198b2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00198b8:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00198be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00198c2:	31 ff                	xor    edi,edi
c00198c4:	83 c4 10             	add    esp,0x10
c00198c7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00198cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198d1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00198d7:	83 c5 20             	add    ebp,0x20
c00198da:	01 f8                	add    eax,edi
c00198dc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00198df:	52                   	push   edx
c00198e0:	68 00 01 00 00       	push   0x100
c00198e5:	6a 00                	push   0x0
c00198e7:	50                   	push   eax
c00198e8:	e8 e3 6b fe ff       	call   c00004d0 <memset>
c00198ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00198f1:	83 c4 10             	add    esp,0x10
c00198f4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00198fa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019901:	01 f8                	add    eax,edi
c0019903:	81 c7 00 01 00 00    	add    edi,0x100
c0019909:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001990c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019912:	75 b3                	jne    c00198c7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019914:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001991b:	50                   	push   eax
c001991c:	50                   	push   eax
c001991d:	53                   	push   ebx
c001991e:	56                   	push   esi
c001991f:	e8 b6 fe ff ff       	call   c00197da <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019924:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001992b:	83 c4 2c             	add    esp,0x2c
c001992e:	5b                   	pop    ebx
c001992f:	5e                   	pop    esi
c0019930:	5f                   	pop    edi
c0019931:	5d                   	pop    ebp
c0019932:	c3                   	ret    
c0019933:	90                   	nop

c0019934 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019934:	55                   	push   ebp
c0019935:	57                   	push   edi
c0019936:	56                   	push   esi
c0019937:	53                   	push   ebx
c0019938:	31 db                	xor    ebx,ebx
c001993a:	83 ec 0c             	sub    esp,0xc
c001993d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019941:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019945:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019948:	f7 c7 01 00 00 00    	test   edi,0x1
c001994e:	74 7a                	je     c00199ca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019950:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019954:	89 d8                	mov    eax,ebx
c0019956:	c1 e0 07             	shl    eax,0x7
c0019959:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019960:	55                   	push   ebp
c0019961:	56                   	push   esi
c0019962:	e8 2b fe ff ff       	call   c0019792 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019967:	5a                   	pop    edx
c0019968:	83 f8 01             	cmp    eax,0x1
c001996b:	59                   	pop    ecx
c001996c:	75 21                	jne    c001998f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001996e:	50                   	push   eax
c001996f:	53                   	push   ebx
c0019970:	55                   	push   ebp
c0019971:	56                   	push   esi
c0019972:	e8 ad fe ff ff       	call   c0019824 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019977:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001997e:	e8 36 de fe ff       	call   c00077b9 <malloc>
c0019983:	89 c5                	mov    ebp,eax
c0019985:	89 04 24             	mov    DWORD PTR [esp],eax
c0019988:	e8 43 0d 00 00       	call   c001a6d0 <SATA::SATA()>
c001998d:	eb 24                	jmp    c00199b3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001998f:	83 f8 04             	cmp    eax,0x4
c0019992:	75 36                	jne    c00199ca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019994:	51                   	push   ecx
c0019995:	53                   	push   ebx
c0019996:	55                   	push   ebp
c0019997:	56                   	push   esi
c0019998:	e8 87 fe ff ff       	call   c0019824 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001999d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c00199a4:	e8 10 de fe ff       	call   c00077b9 <malloc>
c00199a9:	89 c5                	mov    ebp,eax
c00199ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00199ae:	e8 79 10 00 00       	call   c001aa2c <SATAPI::SATAPI()>
c00199b3:	58                   	pop    eax
c00199b4:	5a                   	pop    edx
c00199b5:	55                   	push   ebp
c00199b6:	56                   	push   esi
c00199b7:	e8 64 1f ff ff       	call   c000b920 <Device::addChild(Device*)>
c00199bc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00199bf:	56                   	push   esi
c00199c0:	6a 00                	push   0x0
c00199c2:	53                   	push   ebx
c00199c3:	55                   	push   ebp
c00199c4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00199c7:	83 c4 20             	add    esp,0x20
c00199ca:	d1 ef                	shr    edi,1
c00199cc:	43                   	inc    ebx
c00199cd:	83 fb 20             	cmp    ebx,0x20
c00199d0:	0f 85 72 ff ff ff    	jne    c0019948 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00199d6:	83 c4 0c             	add    esp,0xc
c00199d9:	5b                   	pop    ebx
c00199da:	5e                   	pop    esi
c00199db:	5f                   	pop    edi
c00199dc:	5d                   	pop    ebp
c00199dd:	c3                   	ret    

c00199de <SATABus::open(int, int, void*)>:
c00199de:	83 ec 14             	sub    esp,0x14
c00199e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00199e5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00199eb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00199f1:	52                   	push   edx
c00199f2:	50                   	push   eax
c00199f3:	e8 3c ff ff ff       	call   c0019934 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00199f8:	31 c0                	xor    eax,eax
c00199fa:	83 c4 1c             	add    esp,0x1c
c00199fd:	c3                   	ret    

c00199fe <ATA::close(int, int, void*)>:
c00199fe:	83 ec 0c             	sub    esp,0xc
c0019a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a05:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019a0b:	85 c0                	test   eax,eax
c0019a0d:	74 0c                	je     c0019a1b <ATA::close(int, int, void*)+0x1d>
c0019a0f:	83 ec 0c             	sub    esp,0xc
c0019a12:	8b 10                	mov    edx,DWORD PTR [eax]
c0019a14:	50                   	push   eax
c0019a15:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019a18:	83 c4 10             	add    esp,0x10
c0019a1b:	31 c0                	xor    eax,eax
c0019a1d:	83 c4 0c             	add    esp,0xc
c0019a20:	c3                   	ret    
c0019a21:	90                   	nop

c0019a22 <ATA::powerSaving(PowerSavingLevel)>:
c0019a22:	c3                   	ret    
c0019a23:	90                   	nop

c0019a24 <ATA::ATA()>:
c0019a24:	83 ec 0c             	sub    esp,0xc
c0019a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a2b:	83 ec 04             	sub    esp,0x4
c0019a2e:	68 00 02 00 00       	push   0x200
c0019a33:	68 e9 ee 01 c0       	push   0xc001eee9
c0019a38:	50                   	push   eax
c0019a39:	e8 b0 22 ff ff       	call   c000bcee <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019a3e:	83 c4 10             	add    esp,0x10
c0019a41:	ba 5c ee 01 c0       	mov    edx,0xc001ee5c
c0019a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a4a:	89 10                	mov    DWORD PTR [eax],edx
c0019a4c:	90                   	nop
c0019a4d:	83 c4 0c             	add    esp,0xc
c0019a50:	c3                   	ret    
c0019a51:	90                   	nop

c0019a52 <ATA::flush(bool)>:
c0019a52:	53                   	push   ebx
c0019a53:	83 ec 08             	sub    esp,0x8
c0019a56:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019a5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019a5f:	19 c0                	sbb    eax,eax
c0019a61:	83 e0 fd             	and    eax,0xfffffffd
c0019a64:	05 ea 00 00 00       	add    eax,0xea
c0019a69:	50                   	push   eax
c0019a6a:	6a 07                	push   0x7
c0019a6c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019a73:	50                   	push   eax
c0019a74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a7a:	e8 59 f1 ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a7f:	83 c4 0c             	add    esp,0xc
c0019a82:	6a 00                	push   0x0
c0019a84:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019a8b:	50                   	push   eax
c0019a8c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a92:	e8 df fb ff ff       	call   c0019676 <IDE::polling(unsigned char, unsigned int)>
c0019a97:	83 c4 18             	add    esp,0x18
c0019a9a:	5b                   	pop    ebx
c0019a9b:	c3                   	ret    

c0019a9c <ATA::readyForCommand()>:
c0019a9c:	56                   	push   esi
c0019a9d:	53                   	push   ebx
c0019a9e:	53                   	push   ebx
c0019a9f:	31 db                	xor    ebx,ebx
c0019aa1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019aa5:	51                   	push   ecx
c0019aa6:	6a 0c                	push   0xc
c0019aa8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019aaf:	50                   	push   eax
c0019ab0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019ab6:	e8 dd f1 ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c0019abb:	83 c4 10             	add    esp,0x10
c0019abe:	a8 88                	test   al,0x88
c0019ac0:	74 1f                	je     c0019ae1 <ATA::readyForCommand()+0x45>
c0019ac2:	43                   	inc    ebx
c0019ac3:	83 fb 63             	cmp    ebx,0x63
c0019ac6:	7e dd                	jle    c0019aa5 <ATA::readyForCommand()+0x9>
c0019ac8:	83 ec 0c             	sub    esp,0xc
c0019acb:	6a 0a                	push   0xa
c0019acd:	e8 da 9b ff ff       	call   c00136ac <milliTenthSleep(unsigned int)>
c0019ad2:	83 c4 10             	add    esp,0x10
c0019ad5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019adb:	75 c8                	jne    c0019aa5 <ATA::readyForCommand()+0x9>
c0019add:	31 c0                	xor    eax,eax
c0019adf:	eb 02                	jmp    c0019ae3 <ATA::readyForCommand()+0x47>
c0019ae1:	b0 01                	mov    al,0x1
c0019ae3:	5a                   	pop    edx
c0019ae4:	5b                   	pop    ebx
c0019ae5:	5e                   	pop    esi
c0019ae6:	c3                   	ret    
c0019ae7:	90                   	nop

c0019ae8 <ATA::access(unsigned long long, int, void*, bool)>:
c0019ae8:	55                   	push   ebp
c0019ae9:	57                   	push   edi
c0019aea:	56                   	push   esi
c0019aeb:	53                   	push   ebx
c0019aec:	83 ec 2c             	sub    esp,0x2c
c0019aef:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019af3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019af7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019afb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019aff:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019b03:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019b07:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019b0b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019b11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019b15:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019b1b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019b1f:	c1 e0 06             	shl    eax,0x6
c0019b22:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019b2a:	74 5d                	je     c0019b89 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019b2c:	89 fa                	mov    edx,edi
c0019b2e:	89 f0                	mov    eax,esi
c0019b30:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019b34:	c1 ea 1c             	shr    edx,0x1c
c0019b37:	89 d1                	mov    ecx,edx
c0019b39:	09 c1                	or     ecx,eax
c0019b3b:	74 25                	je     c0019b62 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019b3d:	31 ed                	xor    ebp,ebp
c0019b3f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019b46:	89 fa                	mov    edx,edi
c0019b48:	89 f0                	mov    eax,esi
c0019b4a:	0f ad d0             	shrd   eax,edx,cl
c0019b4d:	d3 ea                	shr    edx,cl
c0019b4f:	f6 c1 20             	test   cl,0x20
c0019b52:	74 02                	je     c0019b56 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019b54:	89 d0                	mov    eax,edx
c0019b56:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019b5a:	45                   	inc    ebp
c0019b5b:	83 fd 06             	cmp    ebp,0x6
c0019b5e:	75 df                	jne    c0019b3f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019b60:	eb 76                	jmp    c0019bd8 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019b62:	89 f0                	mov    eax,esi
c0019b64:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019b69:	89 fa                	mov    edx,edi
c0019b6b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019b72:	0f ac d0 10          	shrd   eax,edx,0x10
c0019b76:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019b7b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019b7f:	c1 ee 18             	shr    esi,0x18
c0019b82:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019b87:	eb 56                	jmp    c0019bdf <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019b89:	6a 00                	push   0x0
c0019b8b:	6a 3f                	push   0x3f
c0019b8d:	57                   	push   edi
c0019b8e:	56                   	push   esi
c0019b8f:	e8 1c 22 00 00       	call   c001bdb0 <__umoddi3>
c0019b94:	83 c4 10             	add    esp,0x10
c0019b97:	40                   	inc    eax
c0019b98:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019b9c:	6a 00                	push   0x0
c0019b9e:	68 f0 03 00 00       	push   0x3f0
c0019ba3:	57                   	push   edi
c0019ba4:	56                   	push   esi
c0019ba5:	e8 06 21 00 00       	call   c001bcb0 <__udivdi3>
c0019baa:	83 c4 10             	add    esp,0x10
c0019bad:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019bb2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019bb9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019bbe:	6a 00                	push   0x0
c0019bc0:	6a 3f                	push   0x3f
c0019bc2:	57                   	push   edi
c0019bc3:	56                   	push   esi
c0019bc4:	e8 e7 20 00 00       	call   c001bcb0 <__udivdi3>
c0019bc9:	83 c4 10             	add    esp,0x10
c0019bcc:	89 c6                	mov    esi,eax
c0019bce:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019bd3:	83 e6 0f             	and    esi,0xf
c0019bd6:	eb 07                	jmp    c0019bdf <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019bd8:	31 f6                	xor    esi,esi
c0019bda:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019bdf:	bf 01 00 00 00       	mov    edi,0x1
c0019be4:	50                   	push   eax
c0019be5:	6a 00                	push   0x0
c0019be7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bee:	50                   	push   eax
c0019bef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019bf3:	e8 ee f1 ff ff       	call   c0018de6 <IDE::enableIRQs(unsigned char, bool)>
c0019bf8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019bfb:	e8 9c fe ff ff       	call   c0019a9c <ATA::readyForCommand()>
c0019c00:	83 c4 10             	add    esp,0x10
c0019c03:	84 c0                	test   al,al
c0019c05:	0f 84 4e 02 00 00    	je     c0019e59 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019c0b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019c11:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019c17:	c1 e0 04             	shl    eax,0x4
c0019c1a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0019c21:	09 c6                	or     esi,eax
c0019c23:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0019c28:	75 05                	jne    c0019c2f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0019c2a:	83 ce a0             	or     esi,0xffffffa0
c0019c2d:	eb 03                	jmp    c0019c32 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0019c2f:	83 ce e0             	or     esi,0xffffffe0
c0019c32:	89 f0                	mov    eax,esi
c0019c34:	0f b6 f0             	movzx  esi,al
c0019c37:	56                   	push   esi
c0019c38:	6a 06                	push   0x6
c0019c3a:	51                   	push   ecx
c0019c3b:	52                   	push   edx
c0019c3c:	e8 97 ef ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c41:	83 c4 10             	add    esp,0x10
c0019c44:	6a 00                	push   0x0
c0019c46:	6a 01                	push   0x1
c0019c48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c4f:	50                   	push   eax
c0019c50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c56:	e8 7d ef ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c5b:	83 c4 10             	add    esp,0x10
c0019c5e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019c63:	75 6e                	jne    c0019cd3 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0019c65:	6a 00                	push   0x0
c0019c67:	6a 08                	push   0x8
c0019c69:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c70:	50                   	push   eax
c0019c71:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c77:	e8 5c ef ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c7c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0019c81:	50                   	push   eax
c0019c82:	6a 09                	push   0x9
c0019c84:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c8b:	50                   	push   eax
c0019c8c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c92:	e8 41 ef ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c97:	83 c4 20             	add    esp,0x20
c0019c9a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0019c9f:	50                   	push   eax
c0019ca0:	6a 0a                	push   0xa
c0019ca2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ca9:	50                   	push   eax
c0019caa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cb0:	e8 23 ef ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019cb5:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0019cba:	50                   	push   eax
c0019cbb:	6a 0b                	push   0xb
c0019cbd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019cc4:	50                   	push   eax
c0019cc5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ccb:	e8 08 ef ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019cd0:	83 c4 20             	add    esp,0x20
c0019cd3:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0019cd8:	50                   	push   eax
c0019cd9:	6a 02                	push   0x2
c0019cdb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ce2:	50                   	push   eax
c0019ce3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ce9:	e8 ea ee ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019cee:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0019cf3:	50                   	push   eax
c0019cf4:	6a 03                	push   0x3
c0019cf6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019cfd:	50                   	push   eax
c0019cfe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d04:	e8 cf ee ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019d09:	83 c4 20             	add    esp,0x20
c0019d0c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0019d11:	50                   	push   eax
c0019d12:	6a 04                	push   0x4
c0019d14:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d1b:	50                   	push   eax
c0019d1c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d22:	e8 b1 ee ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019d27:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d2c:	50                   	push   eax
c0019d2d:	6a 05                	push   0x5
c0019d2f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d36:	50                   	push   eax
c0019d37:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d3d:	e8 96 ee ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019d42:	83 c4 20             	add    esp,0x20
c0019d45:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019d4a:	0f 94 c0             	sete   al
c0019d4d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019d52:	74 09                	je     c0019d5d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0019d54:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0019d5b:	eb 07                	jmp    c0019d64 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0019d5d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0019d64:	0f b6 c0             	movzx  eax,al
c0019d67:	50                   	push   eax
c0019d68:	6a 07                	push   0x7
c0019d6a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d71:	50                   	push   eax
c0019d72:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d78:	e8 5b ee ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019d7d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019d81:	83 c4 10             	add    esp,0x10
c0019d84:	85 f6                	test   esi,esi
c0019d86:	0f 84 ae 00 00 00    	je     c0019e3a <ATA::access(unsigned long long, int, void*, bool)+0x352>
c0019d8c:	50                   	push   eax
c0019d8d:	6a 01                	push   0x1
c0019d8f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d96:	50                   	push   eax
c0019d97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d9d:	e8 d4 f8 ff ff       	call   c0019676 <IDE::polling(unsigned char, unsigned int)>
c0019da2:	83 c4 10             	add    esp,0x10
c0019da5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0019dab:	84 c0                	test   al,al
c0019dad:	74 20                	je     c0019dcf <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c0019daf:	0f b6 f8             	movzx  edi,al
c0019db2:	0f b6 d2             	movzx  edx,dl
c0019db5:	57                   	push   edi
c0019db6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0019dbd:	50                   	push   eax
c0019dbe:	52                   	push   edx
c0019dbf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019dc5:	e8 fc f7 ff ff       	call   c00195c6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019dca:	e9 87 00 00 00       	jmp    c0019e56 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c0019dcf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019dd4:	74 33                	je     c0019e09 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c0019dd6:	31 ed                	xor    ebp,ebp
c0019dd8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0019ddc:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0019de0:	50                   	push   eax
c0019de1:	50                   	push   eax
c0019de2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019de9:	50                   	push   eax
c0019dea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019df0:	e8 d1 ed ff ff       	call   c0018bc6 <IDE::getBase(unsigned char)>
c0019df5:	89 c2                	mov    edx,eax
c0019df7:	89 f8                	mov    eax,edi
c0019df9:	66 ef                	out    dx,ax
c0019dfb:	45                   	inc    ebp
c0019dfc:	83 c4 10             	add    esp,0x10
c0019dff:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0019e05:	75 d1                	jne    c0019dd8 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c0019e07:	eb 23                	jmp    c0019e2c <ATA::access(unsigned long long, int, void*, bool)+0x344>
c0019e09:	0f b6 d2             	movzx  edx,dl
c0019e0c:	51                   	push   ecx
c0019e0d:	51                   	push   ecx
c0019e0e:	52                   	push   edx
c0019e0f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e15:	e8 ac ed ff ff       	call   c0018bc6 <IDE::getBase(unsigned char)>
c0019e1a:	b9 00 01 00 00       	mov    ecx,0x100
c0019e1f:	89 c2                	mov    edx,eax
c0019e21:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0019e25:	fc                   	cld    
c0019e26:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0019e29:	83 c4 10             	add    esp,0x10
c0019e2c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0019e34:	4e                   	dec    esi
c0019e35:	e9 4a ff ff ff       	jmp    c0019d84 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0019e3a:	31 ff                	xor    edi,edi
c0019e3c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019e41:	74 16                	je     c0019e59 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019e43:	50                   	push   eax
c0019e44:	50                   	push   eax
c0019e45:	31 c0                	xor    eax,eax
c0019e47:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0019e4c:	0f 94 c0             	sete   al
c0019e4f:	50                   	push   eax
c0019e50:	53                   	push   ebx
c0019e51:	e8 fc fb ff ff       	call   c0019a52 <ATA::flush(bool)>
c0019e56:	83 c4 10             	add    esp,0x10
c0019e59:	83 c4 2c             	add    esp,0x2c
c0019e5c:	89 f8                	mov    eax,edi
c0019e5e:	5b                   	pop    ebx
c0019e5f:	5e                   	pop    esi
c0019e60:	5f                   	pop    edi
c0019e61:	5d                   	pop    ebp
c0019e62:	c3                   	ret    
c0019e63:	90                   	nop

c0019e64 <ATA::read(unsigned long long, int, void*)>:
c0019e64:	57                   	push   edi
c0019e65:	b8 04 00 00 00       	mov    eax,0x4
c0019e6a:	56                   	push   esi
c0019e6b:	53                   	push   ebx
c0019e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e70:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019e74:	8d 7a ff             	lea    edi,[edx-0x1]
c0019e77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e7b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e7f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019e85:	77 25                	ja     c0019eac <ATA::read(unsigned long long, int, void*)+0x48>
c0019e87:	b8 06 00 00 00       	mov    eax,0x6
c0019e8c:	85 f6                	test   esi,esi
c0019e8e:	74 1c                	je     c0019eac <ATA::read(unsigned long long, int, void*)+0x48>
c0019e90:	50                   	push   eax
c0019e91:	50                   	push   eax
c0019e92:	6a 00                	push   0x0
c0019e94:	56                   	push   esi
c0019e95:	52                   	push   edx
c0019e96:	53                   	push   ebx
c0019e97:	51                   	push   ecx
c0019e98:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e9c:	e8 47 fc ff ff       	call   c0019ae8 <ATA::access(unsigned long long, int, void*, bool)>
c0019ea1:	83 c4 20             	add    esp,0x20
c0019ea4:	85 c0                	test   eax,eax
c0019ea6:	0f 95 c0             	setne  al
c0019ea9:	0f b6 c0             	movzx  eax,al
c0019eac:	5b                   	pop    ebx
c0019ead:	5e                   	pop    esi
c0019eae:	5f                   	pop    edi
c0019eaf:	c3                   	ret    

c0019eb0 <ATA::write(unsigned long long, int, void*)>:
c0019eb0:	57                   	push   edi
c0019eb1:	b8 04 00 00 00       	mov    eax,0x4
c0019eb6:	56                   	push   esi
c0019eb7:	53                   	push   ebx
c0019eb8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019ebc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019ec0:	8d 7a ff             	lea    edi,[edx-0x1]
c0019ec3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019ec7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019ecb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019ed1:	77 25                	ja     c0019ef8 <ATA::write(unsigned long long, int, void*)+0x48>
c0019ed3:	b8 06 00 00 00       	mov    eax,0x6
c0019ed8:	85 f6                	test   esi,esi
c0019eda:	74 1c                	je     c0019ef8 <ATA::write(unsigned long long, int, void*)+0x48>
c0019edc:	50                   	push   eax
c0019edd:	50                   	push   eax
c0019ede:	6a 01                	push   0x1
c0019ee0:	56                   	push   esi
c0019ee1:	52                   	push   edx
c0019ee2:	53                   	push   ebx
c0019ee3:	51                   	push   ecx
c0019ee4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019ee8:	e8 fb fb ff ff       	call   c0019ae8 <ATA::access(unsigned long long, int, void*, bool)>
c0019eed:	83 c4 20             	add    esp,0x20
c0019ef0:	85 c0                	test   eax,eax
c0019ef2:	0f 95 c0             	setne  al
c0019ef5:	0f b6 c0             	movzx  eax,al
c0019ef8:	5b                   	pop    ebx
c0019ef9:	5e                   	pop    esi
c0019efa:	5f                   	pop    edi
c0019efb:	c3                   	ret    

c0019efc <ATA::detectCHS()>:
c0019efc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019f00:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0019f06:	c1 e0 06             	shl    eax,0x6
c0019f09:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0019f0f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0019f19:	c7 44 24 04 40 ee 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ee40
c0019f21:	e9 39 62 ff ff       	jmp    c001015f <KePanic(char const*)>

c0019f26 <ATA::open(int, int, void*)>:
c0019f26:	53                   	push   ebx
c0019f27:	83 ec 08             	sub    esp,0x8
c0019f2a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f2e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f36:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019f3c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019f42:	c1 e0 06             	shl    eax,0x6
c0019f45:	01 d0                	add    eax,edx
c0019f47:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0019f4e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0019f54:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0019f5b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019f65:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0019f6b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019f72:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0019f79:	75 0c                	jne    c0019f87 <ATA::open(int, int, void*)+0x61>
c0019f7b:	83 ec 0c             	sub    esp,0xc
c0019f7e:	53                   	push   ebx
c0019f7f:	e8 78 ff ff ff       	call   c0019efc <ATA::detectCHS()>
c0019f84:	83 c4 10             	add    esp,0x10
c0019f87:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019f8d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019f93:	c1 e0 06             	shl    eax,0x6
c0019f96:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0019f9d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0019fa7:	d1 e8                	shr    eax,1
c0019fa9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0019faf:	6a 04                	push   0x4
c0019fb1:	6a 0c                	push   0xc
c0019fb3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fba:	50                   	push   eax
c0019fbb:	52                   	push   edx
c0019fbc:	e8 17 ec ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fc1:	90                   	nop
c0019fc2:	90                   	nop
c0019fc3:	6a 00                	push   0x0
c0019fc5:	6a 0c                	push   0xc
c0019fc7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fce:	50                   	push   eax
c0019fcf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fd5:	e8 fe eb ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fda:	83 c4 14             	add    esp,0x14
c0019fdd:	53                   	push   ebx
c0019fde:	e8 73 1d ff ff       	call   c000bd56 <PhysicalDisk::startCache()>
c0019fe3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fe6:	e8 ff 2d ff ff       	call   c000cdea <createPartitionsForDisk(PhysicalDisk*)>
c0019feb:	31 c0                	xor    eax,eax
c0019fed:	83 c4 18             	add    esp,0x18
c0019ff0:	5b                   	pop    ebx
c0019ff1:	c3                   	ret    

c0019ff2 <ATAPI::write(unsigned long long, int, void*)>:
c0019ff2:	b8 03 00 00 00       	mov    eax,0x3
c0019ff7:	c3                   	ret    

c0019ff8 <ATAPI::close(int, int, void*)>:
c0019ff8:	83 ec 0c             	sub    esp,0xc
c0019ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a005:	85 c0                	test   eax,eax
c001a007:	74 0c                	je     c001a015 <ATAPI::close(int, int, void*)+0x1d>
c001a009:	83 ec 0c             	sub    esp,0xc
c001a00c:	8b 10                	mov    edx,DWORD PTR [eax]
c001a00e:	50                   	push   eax
c001a00f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a012:	83 c4 10             	add    esp,0x10
c001a015:	31 c0                	xor    eax,eax
c001a017:	83 c4 0c             	add    esp,0xc
c001a01a:	c3                   	ret    
c001a01b:	90                   	nop

c001a01c <ATAPI::ATAPI()>:
c001a01c:	83 ec 0c             	sub    esp,0xc
c001a01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a023:	83 ec 04             	sub    esp,0x4
c001a026:	68 00 08 00 00       	push   0x800
c001a02b:	68 89 ef 01 c0       	push   0xc001ef89
c001a030:	50                   	push   eax
c001a031:	e8 b8 1c ff ff       	call   c000bcee <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a036:	83 c4 10             	add    esp,0x10
c001a039:	ba a4 ee 01 c0       	mov    edx,0xc001eea4
c001a03e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a042:	89 10                	mov    DWORD PTR [eax],edx
c001a044:	90                   	nop
c001a045:	83 c4 0c             	add    esp,0xc
c001a048:	c3                   	ret    
c001a049:	90                   	nop

c001a04a <ATAPI::readyForCommand()>:
c001a04a:	56                   	push   esi
c001a04b:	53                   	push   ebx
c001a04c:	53                   	push   ebx
c001a04d:	31 db                	xor    ebx,ebx
c001a04f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a053:	51                   	push   ecx
c001a054:	6a 0c                	push   0xc
c001a056:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a05d:	50                   	push   eax
c001a05e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a064:	e8 2f ec ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c001a069:	83 c4 10             	add    esp,0x10
c001a06c:	a8 88                	test   al,0x88
c001a06e:	74 25                	je     c001a095 <ATAPI::readyForCommand()+0x4b>
c001a070:	43                   	inc    ebx
c001a071:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a077:	7e da                	jle    c001a053 <ATAPI::readyForCommand()+0x9>
c001a079:	83 ec 0c             	sub    esp,0xc
c001a07c:	68 5e 01 00 00       	push   0x15e
c001a081:	e8 26 96 ff ff       	call   c00136ac <milliTenthSleep(unsigned int)>
c001a086:	83 c4 10             	add    esp,0x10
c001a089:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a08f:	75 c2                	jne    c001a053 <ATAPI::readyForCommand()+0x9>
c001a091:	31 c0                	xor    eax,eax
c001a093:	eb 02                	jmp    c001a097 <ATAPI::readyForCommand()+0x4d>
c001a095:	b0 01                	mov    al,0x1
c001a097:	5a                   	pop    edx
c001a098:	5b                   	pop    ebx
c001a099:	5e                   	pop    esi
c001a09a:	c3                   	ret    
c001a09b:	90                   	nop

c001a09c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a09c:	55                   	push   ebp
c001a09d:	57                   	push   edi
c001a09e:	56                   	push   esi
c001a09f:	53                   	push   ebx
c001a0a0:	83 ec 20             	sub    esp,0x20
c001a0a3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a0a7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a0ab:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a0af:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a0b3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a0b7:	6a 01                	push   0x1
c001a0b9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0c0:	50                   	push   eax
c001a0c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0c7:	e8 1a ed ff ff       	call   c0018de6 <IDE::enableIRQs(unsigned char, bool)>
c001a0cc:	5e                   	pop    esi
c001a0cd:	58                   	pop    eax
c001a0ce:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0d5:	50                   	push   eax
c001a0d6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0dc:	e8 d1 ea ff ff       	call   c0018bb2 <IDE::prepareInterrupt(unsigned char)>
c001a0e1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0e4:	e8 61 ff ff ff       	call   c001a04a <ATAPI::readyForCommand()>
c001a0e9:	83 c4 10             	add    esp,0x10
c001a0ec:	84 c0                	test   al,al
c001a0ee:	75 0a                	jne    c001a0fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a0f0:	bb 01 00 00 00       	mov    ebx,0x1
c001a0f5:	e9 57 02 00 00       	jmp    c001a351 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a0fa:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a100:	c1 e0 04             	shl    eax,0x4
c001a103:	0f b6 c0             	movzx  eax,al
c001a106:	50                   	push   eax
c001a107:	6a 06                	push   0x6
c001a109:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a110:	50                   	push   eax
c001a111:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a117:	e8 bc ea ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a11c:	6a 00                	push   0x0
c001a11e:	6a 01                	push   0x1
c001a120:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a127:	50                   	push   eax
c001a128:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a12e:	e8 a5 ea ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a133:	83 c4 20             	add    esp,0x20
c001a136:	0f b6 c3             	movzx  eax,bl
c001a139:	0f b6 df             	movzx  ebx,bh
c001a13c:	50                   	push   eax
c001a13d:	6a 04                	push   0x4
c001a13f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a146:	50                   	push   eax
c001a147:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a14d:	e8 86 ea ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a152:	53                   	push   ebx
c001a153:	6a 05                	push   0x5
c001a155:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a15c:	50                   	push   eax
c001a15d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a163:	e8 70 ea ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a168:	83 c4 20             	add    esp,0x20
c001a16b:	68 a0 00 00 00       	push   0xa0
c001a170:	6a 07                	push   0x7
c001a172:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a179:	50                   	push   eax
c001a17a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a180:	e8 53 ea ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a185:	83 c4 0c             	add    esp,0xc
c001a188:	6a 01                	push   0x1
c001a18a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a191:	50                   	push   eax
c001a192:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a198:	e8 d9 f4 ff ff       	call   c0019676 <IDE::polling(unsigned char, unsigned int)>
c001a19d:	83 c4 10             	add    esp,0x10
c001a1a0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a1a6:	84 c0                	test   al,al
c001a1a8:	74 23                	je     c001a1cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a1aa:	0f b6 d8             	movzx  ebx,al
c001a1ad:	0f b6 d2             	movzx  edx,dl
c001a1b0:	53                   	push   ebx
c001a1b1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a1b8:	50                   	push   eax
c001a1b9:	52                   	push   edx
c001a1ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a1c0:	e8 01 f4 ff ff       	call   c00195c6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a1c5:	83 c4 10             	add    esp,0x10
c001a1c8:	e9 84 01 00 00       	jmp    c001a351 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a1cd:	0f b6 d2             	movzx  edx,dl
c001a1d0:	53                   	push   ebx
c001a1d1:	53                   	push   ebx
c001a1d2:	52                   	push   edx
c001a1d3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a1d9:	e8 e8 e9 ff ff       	call   c0018bc6 <IDE::getBase(unsigned char)>
c001a1de:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a1e2:	b9 06 00 00 00       	mov    ecx,0x6
c001a1e7:	89 c2                	mov    edx,eax
c001a1e9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a1ec:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a1f0:	83 c4 10             	add    esp,0x10
c001a1f3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a1f9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a200:	85 db                	test   ebx,ebx
c001a202:	0f 84 ec 00 00 00    	je     c001a2f4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a208:	51                   	push   ecx
c001a209:	51                   	push   ecx
c001a20a:	52                   	push   edx
c001a20b:	50                   	push   eax
c001a20c:	e8 35 eb ff ff       	call   c0018d46 <IDE::waitInterrupt(unsigned char)>
c001a211:	83 c4 10             	add    esp,0x10
c001a214:	84 c0                	test   al,al
c001a216:	0f 84 d4 fe ff ff    	je     c001a0f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a21c:	56                   	push   esi
c001a21d:	56                   	push   esi
c001a21e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a225:	50                   	push   eax
c001a226:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a22c:	e8 81 e9 ff ff       	call   c0018bb2 <IDE::prepareInterrupt(unsigned char)>
c001a231:	83 c4 0c             	add    esp,0xc
c001a234:	6a 04                	push   0x4
c001a236:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a23d:	50                   	push   eax
c001a23e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a244:	e8 4f ea ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c001a249:	83 c4 0c             	add    esp,0xc
c001a24c:	89 c6                	mov    esi,eax
c001a24e:	6a 05                	push   0x5
c001a250:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a257:	50                   	push   eax
c001a258:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a25e:	e8 35 ea ff ff       	call   c0018c98 <IDE::read(unsigned char, unsigned char)>
c001a263:	89 f1                	mov    ecx,esi
c001a265:	0f b6 c0             	movzx  eax,al
c001a268:	0f b6 f1             	movzx  esi,cl
c001a26b:	c1 e0 08             	shl    eax,0x8
c001a26e:	09 c6                	or     esi,eax
c001a270:	d1 fe                	sar    esi,1
c001a272:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a276:	83 c4 10             	add    esp,0x10
c001a279:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a27e:	74 41                	je     c001a2c1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a280:	31 c9                	xor    ecx,ecx
c001a282:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a288:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a28f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a293:	75 0a                	jne    c001a29f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a295:	01 c9                	add    ecx,ecx
c001a297:	01 cd                	add    ebp,ecx
c001a299:	4b                   	dec    ebx
c001a29a:	e9 54 ff ff ff       	jmp    c001a1f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a29f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a2a4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a2a8:	51                   	push   ecx
c001a2a9:	51                   	push   ecx
c001a2aa:	52                   	push   edx
c001a2ab:	50                   	push   eax
c001a2ac:	e8 15 e9 ff ff       	call   c0018bc6 <IDE::getBase(unsigned char)>
c001a2b1:	89 c2                	mov    edx,eax
c001a2b3:	89 f0                	mov    eax,esi
c001a2b5:	66 ef                	out    dx,ax
c001a2b7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a2bb:	83 c4 10             	add    esp,0x10
c001a2be:	41                   	inc    ecx
c001a2bf:	eb c1                	jmp    c001a282 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a2c1:	31 f6                	xor    esi,esi
c001a2c3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a2c9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a2d0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a2d4:	75 06                	jne    c001a2dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a2d6:	01 f6                	add    esi,esi
c001a2d8:	01 f5                	add    ebp,esi
c001a2da:	eb bd                	jmp    c001a299 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a2dc:	51                   	push   ecx
c001a2dd:	51                   	push   ecx
c001a2de:	52                   	push   edx
c001a2df:	50                   	push   eax
c001a2e0:	e8 e1 e8 ff ff       	call   c0018bc6 <IDE::getBase(unsigned char)>
c001a2e5:	89 c2                	mov    edx,eax
c001a2e7:	66 ed                	in     ax,dx
c001a2e9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a2ee:	83 c4 10             	add    esp,0x10
c001a2f1:	46                   	inc    esi
c001a2f2:	eb cf                	jmp    c001a2c3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a2f4:	51                   	push   ecx
c001a2f5:	51                   	push   ecx
c001a2f6:	52                   	push   edx
c001a2f7:	50                   	push   eax
c001a2f8:	e8 49 ea ff ff       	call   c0018d46 <IDE::waitInterrupt(unsigned char)>
c001a2fd:	83 c4 10             	add    esp,0x10
c001a300:	84 c0                	test   al,al
c001a302:	0f 84 e8 fd ff ff    	je     c001a0f0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a308:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a30d:	52                   	push   edx
c001a30e:	52                   	push   edx
c001a30f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a316:	50                   	push   eax
c001a317:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a31d:	e8 90 e8 ff ff       	call   c0018bb2 <IDE::prepareInterrupt(unsigned char)>
c001a322:	83 c4 10             	add    esp,0x10
c001a325:	50                   	push   eax
c001a326:	50                   	push   eax
c001a327:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a32e:	50                   	push   eax
c001a32f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a335:	e8 8c e8 ff ff       	call   c0018bc6 <IDE::getBase(unsigned char)>
c001a33a:	8d 50 07             	lea    edx,[eax+0x7]
c001a33d:	ec                   	in     al,dx
c001a33e:	83 c4 10             	add    esp,0x10
c001a341:	a8 88                	test   al,0x88
c001a343:	74 0a                	je     c001a34f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a345:	4b                   	dec    ebx
c001a346:	75 dd                	jne    c001a325 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a348:	bb 02 00 00 00       	mov    ebx,0x2
c001a34d:	eb 02                	jmp    c001a351 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a34f:	31 db                	xor    ebx,ebx
c001a351:	83 c4 1c             	add    esp,0x1c
c001a354:	89 d8                	mov    eax,ebx
c001a356:	5b                   	pop    ebx
c001a357:	5e                   	pop    esi
c001a358:	5f                   	pop    edi
c001a359:	5d                   	pop    ebp
c001a35a:	c3                   	ret    
c001a35b:	90                   	nop

c001a35c <ATAPI::diskRemoved()>:
c001a35c:	53                   	push   ebx
c001a35d:	83 ec 14             	sub    esp,0x14
c001a360:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a364:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a36b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a371:	e8 f2 27 ff ff       	call   c000cb68 <LogicalDisk::unmount()>
c001a376:	58                   	pop    eax
c001a377:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a37d:	e8 2e 31 ff ff       	call   c000d4b0 <VCache::writeWriteBuffer()>
c001a382:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a388:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a38c:	83 c4 18             	add    esp,0x18
c001a38f:	5b                   	pop    ebx
c001a390:	e9 0b 31 ff ff       	jmp    c000d4a0 <VCache::invalidateReadBuffer()>
c001a395:	90                   	nop

c001a396 <ATAPI::eject()>:
c001a396:	57                   	push   edi
c001a397:	b9 03 00 00 00       	mov    ecx,0x3
c001a39c:	53                   	push   ebx
c001a39d:	83 ec 14             	sub    esp,0x14
c001a3a0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a3a4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a3a8:	fc                   	cld    
c001a3a9:	31 c0                	xor    eax,eax
c001a3ab:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a3ad:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a3b2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a3b7:	50                   	push   eax
c001a3b8:	50                   	push   eax
c001a3b9:	6a 00                	push   0x0
c001a3bb:	6a 00                	push   0x0
c001a3bd:	6a 00                	push   0x0
c001a3bf:	6a 02                	push   0x2
c001a3c1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a3c5:	50                   	push   eax
c001a3c6:	53                   	push   ebx
c001a3c7:	e8 d0 fc ff ff       	call   c001a09c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a3cc:	83 c4 14             	add    esp,0x14
c001a3cf:	53                   	push   ebx
c001a3d0:	e8 87 ff ff ff       	call   c001a35c <ATAPI::diskRemoved()>
c001a3d5:	83 c4 24             	add    esp,0x24
c001a3d8:	31 c0                	xor    eax,eax
c001a3da:	5b                   	pop    ebx
c001a3db:	5f                   	pop    edi
c001a3dc:	c3                   	ret    
c001a3dd:	90                   	nop

c001a3de <ATAPI::diskInserted()>:
c001a3de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3e2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a3e9:	c3                   	ret    

c001a3ea <ATAPI::detectMedia()>:
c001a3ea:	56                   	push   esi
c001a3eb:	53                   	push   ebx
c001a3ec:	83 ec 28             	sub    esp,0x28
c001a3ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a3f3:	6a 0c                	push   0xc
c001a3f5:	6a 00                	push   0x0
c001a3f7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a3fb:	56                   	push   esi
c001a3fc:	e8 cf 60 fe ff       	call   c00004d0 <memset>
c001a401:	58                   	pop    eax
c001a402:	5a                   	pop    edx
c001a403:	6a 00                	push   0x0
c001a405:	6a 00                	push   0x0
c001a407:	6a 00                	push   0x0
c001a409:	6a 00                	push   0x0
c001a40b:	56                   	push   esi
c001a40c:	53                   	push   ebx
c001a40d:	e8 8a fc ff ff       	call   c001a09c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a412:	83 c4 1c             	add    esp,0x1c
c001a415:	6a 0c                	push   0xc
c001a417:	6a 00                	push   0x0
c001a419:	56                   	push   esi
c001a41a:	e8 b1 60 fe ff       	call   c00004d0 <memset>
c001a41f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a424:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a429:	59                   	pop    ecx
c001a42a:	58                   	pop    eax
c001a42b:	6a 01                	push   0x1
c001a42d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a431:	50                   	push   eax
c001a432:	6a 00                	push   0x0
c001a434:	6a 12                	push   0x12
c001a436:	56                   	push   esi
c001a437:	53                   	push   ebx
c001a438:	e8 5f fc ff ff       	call   c001a09c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a43d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a441:	83 c4 20             	add    esp,0x20
c001a444:	83 e0 7f             	and    eax,0x7f
c001a447:	3c 70                	cmp    al,0x70
c001a449:	74 15                	je     c001a460 <ATAPI::detectMedia()+0x76>
c001a44b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a452:	75 0c                	jne    c001a460 <ATAPI::detectMedia()+0x76>
c001a454:	83 ec 0c             	sub    esp,0xc
c001a457:	53                   	push   ebx
c001a458:	e8 81 ff ff ff       	call   c001a3de <ATAPI::diskInserted()>
c001a45d:	83 c4 10             	add    esp,0x10
c001a460:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a464:	83 e0 0f             	and    eax,0xf
c001a467:	3c 02                	cmp    al,0x2
c001a469:	75 1b                	jne    c001a486 <ATAPI::detectMedia()+0x9c>
c001a46b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a470:	75 2d                	jne    c001a49f <ATAPI::detectMedia()+0xb5>
c001a472:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a479:	74 24                	je     c001a49f <ATAPI::detectMedia()+0xb5>
c001a47b:	83 ec 0c             	sub    esp,0xc
c001a47e:	53                   	push   ebx
c001a47f:	e8 d8 fe ff ff       	call   c001a35c <ATAPI::diskRemoved()>
c001a484:	eb 16                	jmp    c001a49c <ATAPI::detectMedia()+0xb2>
c001a486:	84 c0                	test   al,al
c001a488:	75 15                	jne    c001a49f <ATAPI::detectMedia()+0xb5>
c001a48a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a491:	75 0c                	jne    c001a49f <ATAPI::detectMedia()+0xb5>
c001a493:	83 ec 0c             	sub    esp,0xc
c001a496:	53                   	push   ebx
c001a497:	e8 42 ff ff ff       	call   c001a3de <ATAPI::diskInserted()>
c001a49c:	83 c4 10             	add    esp,0x10
c001a49f:	83 c4 24             	add    esp,0x24
c001a4a2:	5b                   	pop    ebx
c001a4a3:	5e                   	pop    esi
c001a4a4:	c3                   	ret    
c001a4a5:	90                   	nop

c001a4a6 <ATAPI::open(int, int, void*)>:
c001a4a6:	56                   	push   esi
c001a4a7:	53                   	push   ebx
c001a4a8:	50                   	push   eax
c001a4a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a4ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a4b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a4b5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a4bb:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a4c1:	c1 e0 06             	shl    eax,0x6
c001a4c4:	01 d0                	add    eax,edx
c001a4c6:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a4cd:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a4d3:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a4da:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a4e4:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a4ea:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a4f1:	6a 04                	push   0x4
c001a4f3:	6a 0c                	push   0xc
c001a4f5:	51                   	push   ecx
c001a4f6:	52                   	push   edx
c001a4f7:	e8 dc e6 ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4fc:	90                   	nop
c001a4fd:	90                   	nop
c001a4fe:	6a 00                	push   0x0
c001a500:	6a 0c                	push   0xc
c001a502:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a509:	50                   	push   eax
c001a50a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a510:	e8 c3 e6 ff ff       	call   c0018bd8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a515:	83 c4 14             	add    esp,0x14
c001a518:	68 74 01 00 00       	push   0x174
c001a51d:	e8 97 d2 fe ff       	call   c00077b9 <malloc>
c001a522:	83 c4 0c             	add    esp,0xc
c001a525:	89 c6                	mov    esi,eax
c001a527:	6a 00                	push   0x0
c001a529:	68 ff ff ff 7f       	push   0x7fffffff
c001a52e:	6a 00                	push   0x0
c001a530:	6a 00                	push   0x0
c001a532:	53                   	push   ebx
c001a533:	68 40 f0 01 c0       	push   0xc001f040
c001a538:	50                   	push   eax
c001a539:	e8 76 24 ff ff       	call   c000c9b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a53e:	83 c4 14             	add    esp,0x14
c001a541:	56                   	push   esi
c001a542:	e8 23 25 ff ff       	call   c000ca6a <LogicalDisk::assignDriveLetter()>
c001a547:	5a                   	pop    edx
c001a548:	0f be c0             	movsx  eax,al
c001a54b:	59                   	pop    ecx
c001a54c:	50                   	push   eax
c001a54d:	68 8c ee 01 c0       	push   0xc001ee8c
c001a552:	e8 89 ff fe ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001a557:	58                   	pop    eax
c001a558:	5a                   	pop    edx
c001a559:	56                   	push   esi
c001a55a:	53                   	push   ebx
c001a55b:	e8 c0 13 ff ff       	call   c000b920 <Device::addChild(Device*)>
c001a560:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a566:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a569:	e8 e8 17 ff ff       	call   c000bd56 <PhysicalDisk::startCache()>
c001a56e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a575:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a578:	e8 6d fe ff ff       	call   c001a3ea <ATAPI::detectMedia()>
c001a57d:	83 c4 14             	add    esp,0x14
c001a580:	31 c0                	xor    eax,eax
c001a582:	5b                   	pop    ebx
c001a583:	5e                   	pop    esi
c001a584:	c3                   	ret    
c001a585:	90                   	nop

c001a586 <ATAPI::read(unsigned long long, int, void*)>:
c001a586:	55                   	push   ebp
c001a587:	57                   	push   edi
c001a588:	56                   	push   esi
c001a589:	53                   	push   ebx
c001a58a:	83 ec 1c             	sub    esp,0x1c
c001a58d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a591:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a595:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a599:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a5a0:	74 3c                	je     c001a5de <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a5a2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a5a6:	b9 03 00 00 00       	mov    ecx,0x3
c001a5ab:	fc                   	cld    
c001a5ac:	31 c0                	xor    eax,eax
c001a5ae:	0f ce                	bswap  esi
c001a5b0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a5b2:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a5b7:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a5bb:	89 e8                	mov    eax,ebp
c001a5bd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a5c1:	50                   	push   eax
c001a5c2:	50                   	push   eax
c001a5c3:	55                   	push   ebp
c001a5c4:	c1 e5 0b             	shl    ebp,0xb
c001a5c7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a5cb:	6a 00                	push   0x0
c001a5cd:	55                   	push   ebp
c001a5ce:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a5d2:	50                   	push   eax
c001a5d3:	53                   	push   ebx
c001a5d4:	e8 c3 fa ff ff       	call   c001a09c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a5d9:	83 c4 20             	add    esp,0x20
c001a5dc:	eb 1a                	jmp    c001a5f8 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a5de:	83 ec 0c             	sub    esp,0xc
c001a5e1:	53                   	push   ebx
c001a5e2:	e8 03 fe ff ff       	call   c001a3ea <ATAPI::detectMedia()>
c001a5e7:	83 c4 10             	add    esp,0x10
c001a5ea:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a5f1:	75 af                	jne    c001a5a2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a5f3:	b8 02 00 00 00       	mov    eax,0x2
c001a5f8:	83 c4 1c             	add    esp,0x1c
c001a5fb:	5b                   	pop    ebx
c001a5fc:	5e                   	pop    esi
c001a5fd:	5f                   	pop    edi
c001a5fe:	5d                   	pop    ebp
c001a5ff:	c3                   	ret    

c001a600 <SATA::close(int, int, void*)>:
c001a600:	83 ec 0c             	sub    esp,0xc
c001a603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a607:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a60d:	85 c0                	test   eax,eax
c001a60f:	74 0c                	je     c001a61d <SATA::close(int, int, void*)+0x1d>
c001a611:	83 ec 0c             	sub    esp,0xc
c001a614:	8b 10                	mov    edx,DWORD PTR [eax]
c001a616:	50                   	push   eax
c001a617:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a61a:	83 c4 10             	add    esp,0x10
c001a61d:	31 c0                	xor    eax,eax
c001a61f:	83 c4 0c             	add    esp,0xc
c001a622:	c3                   	ret    
c001a623:	90                   	nop

c001a624 <SATA::powerSaving(PowerSavingLevel)>:
c001a624:	c3                   	ret    
c001a625:	90                   	nop

c001a626 <SATA::open(int, int, void*)>:
c001a626:	56                   	push   esi
c001a627:	53                   	push   ebx
c001a628:	50                   	push   eax
c001a629:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a62d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a631:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a63b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a641:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a64b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a64f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a659:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a65f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a666:	e8 2a d4 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001a66b:	89 c6                	mov    esi,eax
c001a66d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a673:	81 c6 00 10 00 00    	add    esi,0x1000
c001a679:	e8 17 d4 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001a67e:	39 c6                	cmp    esi,eax
c001a680:	74 10                	je     c001a692 <SATA::open(int, int, void*)+0x6c>
c001a682:	83 ec 0c             	sub    esp,0xc
c001a685:	68 d4 ee 01 c0       	push   0xc001eed4
c001a68a:	e8 d0 5a ff ff       	call   c001015f <KePanic(char const*)>
c001a68f:	83 c4 10             	add    esp,0x10
c001a692:	83 ec 0c             	sub    esp,0xc
c001a695:	6a 02                	push   0x2
c001a697:	e8 f1 eb fe ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c001a69c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a6a2:	6a 03                	push   0x3
c001a6a4:	50                   	push   eax
c001a6a5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001a6ab:	ff 35 f0 05 02 c0    	push   DWORD PTR ds:0xc00205f0
c001a6b1:	e8 6c f2 fe ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a6b6:	83 c4 14             	add    esp,0x14
c001a6b9:	53                   	push   ebx
c001a6ba:	e8 97 16 ff ff       	call   c000bd56 <PhysicalDisk::startCache()>
c001a6bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a6c2:	e8 23 27 ff ff       	call   c000cdea <createPartitionsForDisk(PhysicalDisk*)>
c001a6c7:	83 c4 14             	add    esp,0x14
c001a6ca:	31 c0                	xor    eax,eax
c001a6cc:	5b                   	pop    ebx
c001a6cd:	5e                   	pop    esi
c001a6ce:	c3                   	ret    
c001a6cf:	90                   	nop

c001a6d0 <SATA::SATA()>:
c001a6d0:	83 ec 0c             	sub    esp,0xc
c001a6d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6d7:	83 ec 04             	sub    esp,0x4
c001a6da:	68 00 02 00 00       	push   0x200
c001a6df:	68 e8 ee 01 c0       	push   0xc001eee8
c001a6e4:	50                   	push   eax
c001a6e5:	e8 04 16 ff ff       	call   c000bcee <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a6ea:	83 c4 10             	add    esp,0x10
c001a6ed:	ba 58 ef 01 c0       	mov    edx,0xc001ef58
c001a6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6f6:	89 10                	mov    DWORD PTR [eax],edx
c001a6f8:	90                   	nop
c001a6f9:	83 c4 0c             	add    esp,0xc
c001a6fc:	c3                   	ret    
c001a6fd:	90                   	nop

c001a6fe <SATA::access(unsigned long long, int, void*, bool)>:
c001a6fe:	55                   	push   ebp
c001a6ff:	57                   	push   edi
c001a700:	56                   	push   esi
c001a701:	53                   	push   ebx
c001a702:	83 ec 2c             	sub    esp,0x2c
c001a705:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a709:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a70d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a711:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a715:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a719:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001a71e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a722:	7e 10                	jle    c001a734 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001a724:	83 ec 0c             	sub    esp,0xc
c001a727:	68 f8 ee 01 c0       	push   0xc001eef8
c001a72c:	e8 2e 5a ff ff       	call   c001015f <KePanic(char const*)>
c001a731:	83 c4 10             	add    esp,0x10
c001a734:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a73a:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001a740:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a746:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a74a:	89 d0                	mov    eax,edx
c001a74c:	c1 e0 07             	shl    eax,0x7
c001a74f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a753:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a75d:	51                   	push   ecx
c001a75e:	8d 42 02             	lea    eax,[edx+0x2]
c001a761:	51                   	push   ecx
c001a762:	c1 e0 07             	shl    eax,0x7
c001a765:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a769:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a76d:	50                   	push   eax
c001a76e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001a774:	e8 e7 ef ff ff       	call   c0019760 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a779:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a77d:	83 c4 10             	add    esp,0x10
c001a780:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a785:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a789:	0f 84 4f 01 00 00    	je     c001a8de <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a78f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a793:	c1 e0 09             	shl    eax,0x9
c001a796:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a79b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a79f:	74 0e                	je     c001a7af <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001a7a1:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001a7a7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a7ab:	89 c1                	mov    ecx,eax
c001a7ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a7af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a7b3:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a7b9:	8d 42 02             	lea    eax,[edx+0x2]
c001a7bc:	c1 e0 07             	shl    eax,0x7
c001a7bf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a7c3:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7c5:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a7cb:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a7d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a7d5:	c1 e1 05             	shl    ecx,0x5
c001a7d8:	01 c8                	add    eax,ecx
c001a7da:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a7de:	83 e1 01             	and    ecx,0x1
c001a7e1:	89 ce                	mov    esi,ecx
c001a7e3:	8a 08                	mov    cl,BYTE PTR [eax]
c001a7e5:	c1 e6 06             	shl    esi,0x6
c001a7e8:	83 e1 bf             	and    ecx,0xffffffbf
c001a7eb:	09 f1                	or     ecx,esi
c001a7ed:	88 08                	mov    BYTE PTR [eax],cl
c001a7ef:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a7f1:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a7f7:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a7fd:	89 08                	mov    DWORD PTR [eax],ecx
c001a7ff:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a805:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a80b:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a811:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a814:	50                   	push   eax
c001a815:	68 90 00 00 00       	push   0x90
c001a81a:	6a 00                	push   0x0
c001a81c:	56                   	push   esi
c001a81d:	e8 ae 5c fe ff       	call   c00004d0 <memset>
c001a822:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a828:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a82c:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a832:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a836:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a83a:	83 c4 10             	add    esp,0x10
c001a83d:	48                   	dec    eax
c001a83e:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a843:	89 c1                	mov    ecx,eax
c001a845:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a84b:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a850:	09 c8                	or     eax,ecx
c001a852:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a858:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a85b:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a862:	66 25 00 7f          	and    ax,0x7f00
c001a866:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a86a:	66 0d 27 80          	or     ax,0x8027
c001a86e:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a873:	66 89 06             	mov    WORD PTR [esi],ax
c001a876:	19 c0                	sbb    eax,eax
c001a878:	83 e0 f0             	and    eax,0xfffffff0
c001a87b:	83 c0 35             	add    eax,0x35
c001a87e:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a881:	89 e8                	mov    eax,ebp
c001a883:	c1 e8 10             	shr    eax,0x10
c001a886:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a889:	89 e8                	mov    eax,ebp
c001a88b:	c1 e8 18             	shr    eax,0x18
c001a88e:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a891:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a895:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a898:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a89c:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a89f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a8a3:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a8a7:	89 d6                	mov    esi,edx
c001a8a9:	31 c0                	xor    eax,eax
c001a8ab:	c1 e6 07             	shl    esi,0x7
c001a8ae:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a8b2:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001a8b8:	80 e1 88             	and    cl,0x88
c001a8bb:	74 0a                	je     c001a8c7 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001a8bd:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a8c2:	74 0a                	je     c001a8ce <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001a8c4:	40                   	inc    eax
c001a8c5:	eb eb                	jmp    c001a8b2 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001a8c7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a8cc:	75 17                	jne    c001a8e5 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001a8ce:	83 ec 0c             	sub    esp,0xc
c001a8d1:	68 31 ef 01 c0       	push   0xc001ef31
c001a8d6:	e8 05 fc fe ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001a8db:	83 c4 10             	add    esp,0x10
c001a8de:	b8 01 00 00 00       	mov    eax,0x1
c001a8e3:	eb 5d                	jmp    c001a942 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a8e5:	b8 01 00 00 00       	mov    eax,0x1
c001a8ea:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a8ee:	c1 e2 07             	shl    edx,0x7
c001a8f1:	d3 e0                	shl    eax,cl
c001a8f3:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001a8f7:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001a8fd:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001a903:	85 c8                	test   eax,ecx
c001a905:	74 16                	je     c001a91d <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001a907:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001a90d:	0f ba e1 1e          	bt     ecx,0x1e
c001a911:	73 ea                	jae    c001a8fd <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001a913:	83 ec 0c             	sub    esp,0xc
c001a916:	68 3f ef 01 c0       	push   0xc001ef3f
c001a91b:	eb b9                	jmp    c001a8d6 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001a91d:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001a923:	0f ba e0 1e          	bt     eax,0x1e
c001a927:	72 b5                	jb     c001a8de <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a929:	31 c0                	xor    eax,eax
c001a92b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a930:	75 10                	jne    c001a942 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a932:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001a938:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a93c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a940:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a942:	83 c4 2c             	add    esp,0x2c
c001a945:	5b                   	pop    ebx
c001a946:	5e                   	pop    esi
c001a947:	5f                   	pop    edi
c001a948:	5d                   	pop    ebp
c001a949:	c3                   	ret    

c001a94a <SATA::read(unsigned long long, int, void*)>:
c001a94a:	57                   	push   edi
c001a94b:	b8 04 00 00 00       	mov    eax,0x4
c001a950:	56                   	push   esi
c001a951:	53                   	push   ebx
c001a952:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a956:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a95a:	8d 7a ff             	lea    edi,[edx-0x1]
c001a95d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a961:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a965:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a96b:	77 25                	ja     c001a992 <SATA::read(unsigned long long, int, void*)+0x48>
c001a96d:	b8 06 00 00 00       	mov    eax,0x6
c001a972:	85 f6                	test   esi,esi
c001a974:	74 1c                	je     c001a992 <SATA::read(unsigned long long, int, void*)+0x48>
c001a976:	50                   	push   eax
c001a977:	50                   	push   eax
c001a978:	6a 00                	push   0x0
c001a97a:	56                   	push   esi
c001a97b:	52                   	push   edx
c001a97c:	53                   	push   ebx
c001a97d:	51                   	push   ecx
c001a97e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a982:	e8 77 fd ff ff       	call   c001a6fe <SATA::access(unsigned long long, int, void*, bool)>
c001a987:	83 c4 20             	add    esp,0x20
c001a98a:	85 c0                	test   eax,eax
c001a98c:	0f 95 c0             	setne  al
c001a98f:	0f b6 c0             	movzx  eax,al
c001a992:	5b                   	pop    ebx
c001a993:	5e                   	pop    esi
c001a994:	5f                   	pop    edi
c001a995:	c3                   	ret    

c001a996 <SATA::write(unsigned long long, int, void*)>:
c001a996:	55                   	push   ebp
c001a997:	b8 04 00 00 00       	mov    eax,0x4
c001a99c:	57                   	push   edi
c001a99d:	56                   	push   esi
c001a99e:	53                   	push   ebx
c001a99f:	83 ec 0c             	sub    esp,0xc
c001a9a2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a9a6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a9aa:	8d 73 ff             	lea    esi,[ebx-0x1]
c001a9ad:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001a9b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001a9b5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a9bb:	77 3d                	ja     c001a9fa <SATA::write(unsigned long long, int, void*)+0x64>
c001a9bd:	b8 06 00 00 00       	mov    eax,0x6
c001a9c2:	85 ed                	test   ebp,ebp
c001a9c4:	74 34                	je     c001a9fa <SATA::write(unsigned long long, int, void*)+0x64>
c001a9c6:	c1 e3 09             	shl    ebx,0x9
c001a9c9:	01 eb                	add    ebx,ebp
c001a9cb:	89 d6                	mov    esi,edx
c001a9cd:	89 cf                	mov    edi,ecx
c001a9cf:	83 c6 01             	add    esi,0x1
c001a9d2:	83 d7 00             	adc    edi,0x0
c001a9d5:	50                   	push   eax
c001a9d6:	50                   	push   eax
c001a9d7:	6a 01                	push   0x1
c001a9d9:	55                   	push   ebp
c001a9da:	81 c5 00 02 00 00    	add    ebp,0x200
c001a9e0:	6a 01                	push   0x1
c001a9e2:	51                   	push   ecx
c001a9e3:	52                   	push   edx
c001a9e4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a9e8:	e8 11 fd ff ff       	call   c001a6fe <SATA::access(unsigned long long, int, void*, bool)>
c001a9ed:	83 c4 20             	add    esp,0x20
c001a9f0:	89 f2                	mov    edx,esi
c001a9f2:	89 f9                	mov    ecx,edi
c001a9f4:	39 dd                	cmp    ebp,ebx
c001a9f6:	75 d3                	jne    c001a9cb <SATA::write(unsigned long long, int, void*)+0x35>
c001a9f8:	31 c0                	xor    eax,eax
c001a9fa:	83 c4 0c             	add    esp,0xc
c001a9fd:	5b                   	pop    ebx
c001a9fe:	5e                   	pop    esi
c001a9ff:	5f                   	pop    edi
c001aa00:	5d                   	pop    ebp
c001aa01:	c3                   	ret    

c001aa02 <SATAPI::write(unsigned long long, int, void*)>:
c001aa02:	b8 03 00 00 00       	mov    eax,0x3
c001aa07:	c3                   	ret    

c001aa08 <SATAPI::close(int, int, void*)>:
c001aa08:	83 ec 0c             	sub    esp,0xc
c001aa0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa0f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aa15:	85 c0                	test   eax,eax
c001aa17:	74 0c                	je     c001aa25 <SATAPI::close(int, int, void*)+0x1d>
c001aa19:	83 ec 0c             	sub    esp,0xc
c001aa1c:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa1e:	50                   	push   eax
c001aa1f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aa22:	83 c4 10             	add    esp,0x10
c001aa25:	31 c0                	xor    eax,eax
c001aa27:	83 c4 0c             	add    esp,0xc
c001aa2a:	c3                   	ret    
c001aa2b:	90                   	nop

c001aa2c <SATAPI::SATAPI()>:
c001aa2c:	83 ec 0c             	sub    esp,0xc
c001aa2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa33:	83 ec 04             	sub    esp,0x4
c001aa36:	68 00 08 00 00       	push   0x800
c001aa3b:	68 88 ef 01 c0       	push   0xc001ef88
c001aa40:	50                   	push   eax
c001aa41:	e8 a8 12 ff ff       	call   c000bcee <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aa46:	83 c4 10             	add    esp,0x10
c001aa49:	ba 90 f0 01 c0       	mov    edx,0xc001f090
c001aa4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa52:	89 10                	mov    DWORD PTR [eax],edx
c001aa54:	90                   	nop
c001aa55:	83 c4 0c             	add    esp,0xc
c001aa58:	c3                   	ret    
c001aa59:	90                   	nop

c001aa5a <SATAPI::diskRemoved()>:
c001aa5a:	c3                   	ret    
c001aa5b:	90                   	nop

c001aa5c <SATAPI::diskInserted()>:
c001aa5c:	83 ec 18             	sub    esp,0x18
c001aa5f:	68 94 ef 01 c0       	push   0xc001ef94
c001aa64:	e8 77 fa fe ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001aa69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa6d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001aa74:	83 c4 1c             	add    esp,0x1c
c001aa77:	c3                   	ret    

c001aa78 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001aa78:	55                   	push   ebp
c001aa79:	57                   	push   edi
c001aa7a:	56                   	push   esi
c001aa7b:	53                   	push   ebx
c001aa7c:	83 ec 38             	sub    esp,0x38
c001aa7f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001aa83:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001aa87:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001aa8b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa8f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001aa93:	68 ac ef 01 c0       	push   0xc001efac
c001aa98:	e8 43 fa fe ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001aa9d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001aaa3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aaa9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aaad:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001aab3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aab7:	83 c0 02             	add    eax,0x2
c001aaba:	c1 e0 07             	shl    eax,0x7
c001aabd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aac1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aac5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aac9:	c1 e0 07             	shl    eax,0x7
c001aacc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aad0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aad4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aade:	58                   	pop    eax
c001aadf:	5a                   	pop    edx
c001aae0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001aae4:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001aaea:	e8 71 ec ff ff       	call   c0019760 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001aaef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aaf3:	83 c4 10             	add    esp,0x10
c001aaf6:	b8 01 00 00 00       	mov    eax,0x1
c001aafb:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ab00:	0f 84 49 02 00 00    	je     c001ad4f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001ab06:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ab0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab10:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab12:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ab18:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ab1e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ab22:	c1 e1 05             	shl    ecx,0x5
c001ab25:	01 c8                	add    eax,ecx
c001ab27:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ab29:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001ab2f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001ab35:	89 08                	mov    DWORD PTR [eax],ecx
c001ab37:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ab3d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001ab43:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001ab49:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001ab4c:	8d 7b 40             	lea    edi,[ebx+0x40]
c001ab4f:	50                   	push   eax
c001ab50:	68 90 00 00 00       	push   0x90
c001ab55:	6a 00                	push   0x0
c001ab57:	53                   	push   ebx
c001ab58:	e8 73 59 fe ff       	call   c00004d0 <memset>
c001ab5d:	b9 0c 00 00 00       	mov    ecx,0xc
c001ab62:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001ab66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab68:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001ab6e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001ab72:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001ab78:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001ab7c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ab80:	48                   	dec    eax
c001ab81:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ab86:	89 c1                	mov    ecx,eax
c001ab88:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001ab8e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ab93:	09 c8                	or     eax,ecx
c001ab95:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001ab9b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001ab9e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001aba5:	66 25 00 7f          	and    ax,0x7f00
c001aba9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001abad:	66 0d 27 80          	or     ax,0x8027
c001abb1:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001abb5:	66 89 03             	mov    WORD PTR [ebx],ax
c001abb8:	89 d0                	mov    eax,edx
c001abba:	c1 ea 18             	shr    edx,0x18
c001abbd:	c1 e8 10             	shr    eax,0x10
c001abc0:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001abc3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001abc6:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001abca:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001abcd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001abd1:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001abd4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001abd8:	83 c4 10             	add    esp,0x10
c001abdb:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001abdf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001abe3:	31 c0                	xor    eax,eax
c001abe5:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001abeb:	80 e1 88             	and    cl,0x88
c001abee:	74 0a                	je     c001abfa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001abf0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001abf5:	74 0a                	je     c001ac01 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001abf7:	40                   	inc    eax
c001abf8:	eb eb                	jmp    c001abe5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001abfa:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001abff:	75 43                	jne    c001ac44 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001ac01:	83 ec 0c             	sub    esp,0xc
c001ac04:	68 c6 ef 01 c0       	push   0xc001efc6
c001ac09:	e8 d2 f8 fe ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001ac0e:	58                   	pop    eax
c001ac0f:	5a                   	pop    edx
c001ac10:	68 db ef 01 c0       	push   0xc001efdb
c001ac15:	ff 35 44 05 02 c0    	push   DWORD PTR ds:0xc0020544
c001ac1b:	e8 16 db fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001ac20:	59                   	pop    ecx
c001ac21:	5b                   	pop    ebx
c001ac22:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ac26:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ac2c:	e8 c9 eb ff ff       	call   c00197fa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ac31:	5e                   	pop    esi
c001ac32:	5f                   	pop    edi
c001ac33:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ac37:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ac3d:	e8 98 eb ff ff       	call   c00197da <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ac42:	eb 48                	jmp    c001ac8c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001ac44:	be 01 00 00 00       	mov    esi,0x1
c001ac49:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ac4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ac51:	d3 e6                	shl    esi,cl
c001ac53:	c1 e7 07             	shl    edi,0x7
c001ac56:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001ac5c:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001ac61:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001ac65:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001ac6b:	85 c6                	test   esi,eax
c001ac6d:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001ac73:	0f 84 a3 00 00 00    	je     c001ad1c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001ac79:	0f ba e0 1e          	bt     eax,0x1e
c001ac7d:	73 1a                	jae    c001ac99 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001ac7f:	83 ec 0c             	sub    esp,0xc
c001ac82:	68 ed ef 01 c0       	push   0xc001efed
c001ac87:	e8 54 f8 fe ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001ac8c:	83 c4 10             	add    esp,0x10
c001ac8f:	b8 01 00 00 00       	mov    eax,0x1
c001ac94:	e9 b6 00 00 00       	jmp    c001ad4f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001ac99:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001ac9f:	83 f8 0d             	cmp    eax,0xd
c001aca2:	77 0a                	ja     c001acae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001aca4:	83 ec 0c             	sub    esp,0xc
c001aca7:	68 c8 00 00 00       	push   0xc8
c001acac:	eb 28                	jmp    c001acd6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001acae:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001acb4:	83 f8 0d             	cmp    eax,0xd
c001acb7:	77 0a                	ja     c001acc3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001acb9:	83 ec 0c             	sub    esp,0xc
c001acbc:	68 58 02 00 00       	push   0x258
c001acc1:	eb 13                	jmp    c001acd6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001acc3:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001acc9:	83 f8 06             	cmp    eax,0x6
c001accc:	77 10                	ja     c001acde <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001acce:	83 ec 0c             	sub    esp,0xc
c001acd1:	68 dc 05 00 00       	push   0x5dc
c001acd6:	e8 d1 89 ff ff       	call   c00136ac <milliTenthSleep(unsigned int)>
c001acdb:	83 c4 10             	add    esp,0x10
c001acde:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ace2:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001ace5:	75 06                	jne    c001aced <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001ace7:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001aceb:	74 15                	je     c001ad02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001aced:	83 fb 06             	cmp    ebx,0x6
c001acf0:	77 10                	ja     c001ad02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001acf2:	83 ec 0c             	sub    esp,0xc
c001acf5:	68 c4 09 00 00       	push   0x9c4
c001acfa:	e8 ad 89 ff ff       	call   c00136ac <milliTenthSleep(unsigned int)>
c001acff:	83 c4 10             	add    esp,0x10
c001ad02:	43                   	inc    ebx
c001ad03:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001ad09:	0f 85 56 ff ff ff    	jne    c001ac65 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001ad0f:	83 ec 0c             	sub    esp,0xc
c001ad12:	68 00 f0 01 c0       	push   0xc001f000
c001ad17:	e9 6b ff ff ff       	jmp    c001ac87 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001ad1c:	0f ba e0 1e          	bt     eax,0x1e
c001ad20:	73 0d                	jae    c001ad2f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001ad22:	83 ec 0c             	sub    esp,0xc
c001ad25:	68 14 f0 01 c0       	push   0xc001f014
c001ad2a:	e9 58 ff ff ff       	jmp    c001ac87 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001ad2f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ad34:	74 17                	je     c001ad4d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001ad36:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ad3b:	74 10                	je     c001ad4d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001ad3d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ad43:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ad47:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ad4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad4d:	31 c0                	xor    eax,eax
c001ad4f:	83 c4 2c             	add    esp,0x2c
c001ad52:	5b                   	pop    ebx
c001ad53:	5e                   	pop    esi
c001ad54:	5f                   	pop    edi
c001ad55:	5d                   	pop    ebp
c001ad56:	c3                   	ret    
c001ad57:	90                   	nop

c001ad58 <SATAPI::eject()>:
c001ad58:	57                   	push   edi
c001ad59:	b9 03 00 00 00       	mov    ecx,0x3
c001ad5e:	83 ec 18             	sub    esp,0x18
c001ad61:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ad65:	fc                   	cld    
c001ad66:	31 c0                	xor    eax,eax
c001ad68:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ad6a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ad6f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ad74:	50                   	push   eax
c001ad75:	6a 00                	push   0x0
c001ad77:	6a 00                	push   0x0
c001ad79:	6a 00                	push   0x0
c001ad7b:	6a 00                	push   0x0
c001ad7d:	6a 02                	push   0x2
c001ad7f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad83:	50                   	push   eax
c001ad84:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad88:	e8 eb fc ff ff       	call   c001aa78 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ad8d:	31 c0                	xor    eax,eax
c001ad8f:	83 c4 38             	add    esp,0x38
c001ad92:	5f                   	pop    edi
c001ad93:	c3                   	ret    

c001ad94 <SATAPI::detectMedia()>:
c001ad94:	53                   	push   ebx
c001ad95:	83 ec 14             	sub    esp,0x14
c001ad98:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ad9c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ada2:	e8 09 27 ff ff       	call   c000d4b0 <VCache::writeWriteBuffer()>
c001ada7:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001adad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001adb1:	83 c4 18             	add    esp,0x18
c001adb4:	5b                   	pop    ebx
c001adb5:	e9 e6 26 ff ff       	jmp    c000d4a0 <VCache::invalidateReadBuffer()>

c001adba <SATAPI::open(int, int, void*)>:
c001adba:	56                   	push   esi
c001adbb:	53                   	push   ebx
c001adbc:	51                   	push   ecx
c001adbd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001adc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001adc5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001adcf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001add5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001addf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ade3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001aded:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001adf3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001adfa:	e8 96 cc fe ff       	call   c0007a95 <Phys::allocatePage()>
c001adff:	89 c6                	mov    esi,eax
c001ae01:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ae07:	81 c6 00 10 00 00    	add    esi,0x1000
c001ae0d:	e8 83 cc fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ae12:	39 c6                	cmp    esi,eax
c001ae14:	74 10                	je     c001ae26 <SATAPI::open(int, int, void*)+0x6c>
c001ae16:	83 ec 0c             	sub    esp,0xc
c001ae19:	68 29 f0 01 c0       	push   0xc001f029
c001ae1e:	e8 3c 53 ff ff       	call   c001015f <KePanic(char const*)>
c001ae23:	83 c4 10             	add    esp,0x10
c001ae26:	83 ec 0c             	sub    esp,0xc
c001ae29:	6a 02                	push   0x2
c001ae2b:	e8 5d e4 fe ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c001ae30:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ae36:	6a 03                	push   0x3
c001ae38:	50                   	push   eax
c001ae39:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ae3f:	ff 35 f0 05 02 c0    	push   DWORD PTR ds:0xc00205f0
c001ae45:	e8 d8 ea fe ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ae4a:	83 c4 14             	add    esp,0x14
c001ae4d:	68 74 01 00 00       	push   0x174
c001ae52:	e8 62 c9 fe ff       	call   c00077b9 <malloc>
c001ae57:	83 c4 0c             	add    esp,0xc
c001ae5a:	89 c6                	mov    esi,eax
c001ae5c:	6a 00                	push   0x0
c001ae5e:	68 ff ff ff 7f       	push   0x7fffffff
c001ae63:	6a 00                	push   0x0
c001ae65:	6a 00                	push   0x0
c001ae67:	53                   	push   ebx
c001ae68:	68 3f f0 01 c0       	push   0xc001f03f
c001ae6d:	50                   	push   eax
c001ae6e:	e8 41 1b ff ff       	call   c000c9b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ae73:	83 c4 14             	add    esp,0x14
c001ae76:	56                   	push   esi
c001ae77:	e8 ee 1b ff ff       	call   c000ca6a <LogicalDisk::assignDriveLetter()>
c001ae7c:	5a                   	pop    edx
c001ae7d:	0f be c0             	movsx  eax,al
c001ae80:	59                   	pop    ecx
c001ae81:	50                   	push   eax
c001ae82:	68 8c ee 01 c0       	push   0xc001ee8c
c001ae87:	e8 54 f6 fe ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001ae8c:	58                   	pop    eax
c001ae8d:	5a                   	pop    edx
c001ae8e:	56                   	push   esi
c001ae8f:	53                   	push   ebx
c001ae90:	e8 8b 0a ff ff       	call   c000b920 <Device::addChild(Device*)>
c001ae95:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001ae9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae9e:	e8 b3 0e ff ff       	call   c000bd56 <PhysicalDisk::startCache()>
c001aea3:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001aeaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aead:	e8 e2 fe ff ff       	call   c001ad94 <SATAPI::detectMedia()>
c001aeb2:	83 c4 14             	add    esp,0x14
c001aeb5:	31 c0                	xor    eax,eax
c001aeb7:	5b                   	pop    ebx
c001aeb8:	5e                   	pop    esi
c001aeb9:	c3                   	ret    

c001aeba <SATAPI::read(unsigned long long, int, void*)>:
c001aeba:	57                   	push   edi
c001aebb:	56                   	push   esi
c001aebc:	53                   	push   ebx
c001aebd:	83 ec 3c             	sub    esp,0x3c
c001aec0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aec4:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001aec8:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001aecc:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001aed0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aed4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001aed8:	68 4d f0 01 c0       	push   0xc001f04d
c001aedd:	e8 fe f5 fe ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001aee2:	83 c4 10             	add    esp,0x10
c001aee5:	83 fe 04             	cmp    esi,0x4
c001aee8:	7e 10                	jle    c001aefa <SATAPI::read(unsigned long long, int, void*)+0x40>
c001aeea:	83 ec 0c             	sub    esp,0xc
c001aeed:	68 5e f0 01 c0       	push   0xc001f05e
c001aef2:	e8 68 52 ff ff       	call   c001015f <KePanic(char const*)>
c001aef7:	83 c4 10             	add    esp,0x10
c001aefa:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001af00:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001af06:	51                   	push   ecx
c001af07:	50                   	push   eax
c001af08:	83 c0 02             	add    eax,0x2
c001af0b:	c1 e0 07             	shl    eax,0x7
c001af0e:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001af14:	50                   	push   eax
c001af15:	52                   	push   edx
c001af16:	e8 09 e9 ff ff       	call   c0019824 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001af1b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001af1f:	b9 03 00 00 00       	mov    ecx,0x3
c001af24:	fc                   	cld    
c001af25:	31 c0                	xor    eax,eax
c001af27:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001af29:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001af2e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001af33:	83 c4 0c             	add    esp,0xc
c001af36:	6a 00                	push   0x0
c001af38:	6a 00                	push   0x0
c001af3a:	6a 00                	push   0x0
c001af3c:	6a 00                	push   0x0
c001af3e:	6a 02                	push   0x2
c001af40:	8d 44 24 30          	lea    eax,[esp+0x30]
c001af44:	50                   	push   eax
c001af45:	53                   	push   ebx
c001af46:	e8 2d fb ff ff       	call   c001aa78 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001af4b:	83 c4 20             	add    esp,0x20
c001af4e:	85 c0                	test   eax,eax
c001af50:	75 44                	jne    c001af96 <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001af52:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001af56:	b9 03 00 00 00       	mov    ecx,0x3
c001af5b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001af5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af61:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001af66:	0f c8                	bswap  eax
c001af68:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001af6c:	89 f0                	mov    eax,esi
c001af6e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001af72:	50                   	push   eax
c001af73:	56                   	push   esi
c001af74:	c1 e6 0b             	shl    esi,0xb
c001af77:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001af7b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af83:	56                   	push   esi
c001af84:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001af88:	50                   	push   eax
c001af89:	53                   	push   ebx
c001af8a:	e8 e9 fa ff ff       	call   c001aa78 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001af8f:	83 c4 20             	add    esp,0x20
c001af92:	85 c0                	test   eax,eax
c001af94:	74 14                	je     c001afaa <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001af96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af9a:	83 ec 0c             	sub    esp,0xc
c001af9d:	53                   	push   ebx
c001af9e:	e8 f1 fd ff ff       	call   c001ad94 <SATAPI::detectMedia()>
c001afa3:	83 c4 10             	add    esp,0x10
c001afa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001afaa:	83 c4 30             	add    esp,0x30
c001afad:	5b                   	pop    ebx
c001afae:	5e                   	pop    esi
c001afaf:	5f                   	pop    edi
c001afb0:	c3                   	ret    
c001afb1:	90                   	nop

c001afb2 <IOAPIC::close(int, int, void*)>:
c001afb2:	b8 00 00 00 00       	mov    eax,0x0
c001afb7:	c3                   	ret    

c001afb8 <apicGetBase()>:
c001afb8:	55                   	push   ebp
c001afb9:	89 e5                	mov    ebp,esp
c001afbb:	83 ec 18             	sub    esp,0x18
c001afbe:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c001afc3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001afc9:	83 e0 08             	and    eax,0x8
c001afcc:	84 c0                	test   al,al
c001afce:	75 07                	jne    c001afd7 <apicGetBase()+0x1f>
c001afd0:	b8 00 00 00 00       	mov    eax,0x0
c001afd5:	eb 21                	jmp    c001aff8 <apicGetBase()+0x40>
c001afd7:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c001afdc:	83 ec 08             	sub    esp,0x8
c001afdf:	6a 1b                	push   0x1b
c001afe1:	50                   	push   eax
c001afe2:	e8 0b be fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001afe7:	83 c4 10             	add    esp,0x10
c001afea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001afed:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001aff0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001aff3:	25 00 00 ff ff       	and    eax,0xffff0000
c001aff8:	c9                   	leave  
c001aff9:	c3                   	ret    

c001affa <IOAPIC::IOAPIC()>:
c001affa:	83 ec 0c             	sub    esp,0xc
c001affd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b001:	83 ec 08             	sub    esp,0x8
c001b004:	68 c0 f0 01 c0       	push   0xc001f0c0
c001b009:	50                   	push   eax
c001b00a:	e8 a9 0a ff ff       	call   c000bab8 <Device::Device(char const*)>
c001b00f:	83 c4 10             	add    esp,0x10
c001b012:	ba d0 f0 01 c0       	mov    edx,0xc001f0d0
c001b017:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b01b:	89 10                	mov    DWORD PTR [eax],edx
c001b01d:	90                   	nop
c001b01e:	83 c4 0c             	add    esp,0xc
c001b021:	c3                   	ret    

c001b022 <apicOpen()>:
c001b022:	55                   	push   ebp
c001b023:	89 e5                	mov    ebp,esp
c001b025:	53                   	push   ebx
c001b026:	83 ec 34             	sub    esp,0x34
c001b029:	a0 e0 41 02 c0       	mov    al,ds:0xc00241e0
c001b02e:	83 f0 01             	xor    eax,0x1
c001b031:	84 c0                	test   al,al
c001b033:	0f 84 9d 00 00 00    	je     c001b0d6 <apicOpen()+0xb4>
c001b039:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b03d:	a0 c0 2d 02 c0       	mov    al,ds:0xc0022dc0
c001b042:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b045:	0f 83 84 00 00 00    	jae    c001b0cf <apicOpen()+0xad>
c001b04b:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b052:	83 ec 0c             	sub    esp,0xc
c001b055:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b058:	e8 5c c7 fe ff       	call   c00077b9 <malloc>
c001b05d:	83 c4 10             	add    esp,0x10
c001b060:	89 c3                	mov    ebx,eax
c001b062:	83 ec 0c             	sub    esp,0xc
c001b065:	53                   	push   ebx
c001b066:	e8 8f ff ff ff       	call   c001affa <IOAPIC::IOAPIC()>
c001b06b:	83 c4 10             	add    esp,0x10
c001b06e:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b071:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b074:	25 ff 00 00 00       	and    eax,0xff
c001b079:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b07c:	89 14 85 c0 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbe40],edx
c001b083:	a1 a0 41 02 c0       	mov    eax,ds:0xc00241a0
c001b088:	40                   	inc    eax
c001b089:	a3 a0 41 02 c0       	mov    ds:0xc00241a0,eax
c001b08e:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c001b093:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b099:	83 ec 08             	sub    esp,0x8
c001b09c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b09f:	50                   	push   eax
c001b0a0:	e8 7b 08 ff ff       	call   c000b920 <Device::addChild(Device*)>
c001b0a5:	83 c4 10             	add    esp,0x10
c001b0a8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b0ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0ad:	83 c0 08             	add    eax,0x8
c001b0b0:	8b 10                	mov    edx,DWORD PTR [eax]
c001b0b2:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b0b5:	25 ff 00 00 00       	and    eax,0xff
c001b0ba:	6a 00                	push   0x0
c001b0bc:	6a 00                	push   0x0
c001b0be:	50                   	push   eax
c001b0bf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b0c2:	ff d2                	call   edx
c001b0c4:	83 c4 10             	add    esp,0x10
c001b0c7:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b0ca:	e9 6e ff ff ff       	jmp    c001b03d <apicOpen()+0x1b>
c001b0cf:	c6 05 e0 41 02 c0 01 	mov    BYTE PTR ds:0xc00241e0,0x1
c001b0d6:	e8 dd fe ff ff       	call   c001afb8 <apicGetBase()>
c001b0db:	05 f0 00 00 00       	add    eax,0xf0
c001b0e0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b0e3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b0e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0e8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b0eb:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b0f2:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b0f9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b0fc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b0ff:	89 10                	mov    DWORD PTR [eax],edx
c001b101:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b108:	a1 10 2d 02 c0       	mov    eax,ds:0xc0022d10
c001b10d:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b110:	7d 70                	jge    c001b182 <apicOpen()+0x160>
c001b112:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b115:	8b 04 85 20 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd2e0]
c001b11c:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b11f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b122:	8b 04 85 20 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd2e0]
c001b129:	c1 e8 08             	shr    eax,0x8
c001b12c:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b130:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b133:	8b 04 85 20 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd2e0]
c001b13a:	c1 e8 18             	shr    eax,0x18
c001b13d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b140:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b144:	75 37                	jne    c001b17d <apicOpen()+0x15b>
c001b146:	e8 6d fe ff ff       	call   c001afb8 <apicGetBase()>
c001b14b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b14f:	75 07                	jne    c001b158 <apicOpen()+0x136>
c001b151:	ba 60 03 00 00       	mov    edx,0x360
c001b156:	eb 05                	jmp    c001b15d <apicOpen()+0x13b>
c001b158:	ba 50 03 00 00       	mov    edx,0x350
c001b15d:	01 d0                	add    eax,edx
c001b15f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b162:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b165:	8b 00                	mov    eax,DWORD PTR [eax]
c001b167:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b16a:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b171:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b175:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b178:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b17b:	89 10                	mov    DWORD PTR [eax],edx
c001b17d:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b180:	eb 86                	jmp    c001b108 <apicOpen()+0xe6>
c001b182:	90                   	nop
c001b183:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b186:	c9                   	leave  
c001b187:	c3                   	ret    

c001b188 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b188:	55                   	push   ebp
c001b189:	89 e5                	mov    ebp,esp
c001b18b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b18e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b194:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b197:	72 1d                	jb     c001b1b6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b199:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b19c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b1a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1a5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b1ab:	01 d0                	add    eax,edx
c001b1ad:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b1b0:	73 04                	jae    c001b1b6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b1b2:	b0 01                	mov    al,0x1
c001b1b4:	eb 02                	jmp    c001b1b8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b1b6:	b0 00                	mov    al,0x0
c001b1b8:	5d                   	pop    ebp
c001b1b9:	c3                   	ret    

c001b1ba <IOAPIC::read(int)>:
c001b1ba:	55                   	push   ebp
c001b1bb:	89 e5                	mov    ebp,esp
c001b1bd:	83 ec 10             	sub    esp,0x10
c001b1c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1c3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b1c9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b1cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b1cf:	31 d2                	xor    edx,edx
c001b1d1:	88 c2                	mov    dl,al
c001b1d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b1d6:	89 10                	mov    DWORD PTR [eax],edx
c001b1d8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b1db:	83 c0 10             	add    eax,0x10
c001b1de:	8b 00                	mov    eax,DWORD PTR [eax]
c001b1e0:	c9                   	leave  
c001b1e1:	c3                   	ret    

c001b1e2 <IOAPIC::open(int, int, void*)>:
c001b1e2:	55                   	push   ebp
c001b1e3:	89 e5                	mov    ebp,esp
c001b1e5:	57                   	push   edi
c001b1e6:	56                   	push   esi
c001b1e7:	53                   	push   ebx
c001b1e8:	83 ec 04             	sub    esp,0x4
c001b1eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1ee:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b1f1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b1f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1fa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b200:	8b 14 85 00 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd200]
c001b207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b20a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b213:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b219:	8b 14 85 80 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd180]
c001b220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b223:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b22c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b235:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b23b:	89 c6                	mov    esi,eax
c001b23d:	81 e6 ff 00 00 00    	and    esi,0xff
c001b243:	89 d0                	mov    eax,edx
c001b245:	ba 00 00 00 00       	mov    edx,0x0
c001b24a:	89 c7                	mov    edi,eax
c001b24c:	83 e7 ff             	and    edi,0xffffffff
c001b24f:	89 f9                	mov    ecx,edi
c001b251:	89 d0                	mov    eax,edx
c001b253:	25 ff 00 00 00       	and    eax,0xff
c001b258:	89 c3                	mov    ebx,eax
c001b25a:	89 c8                	mov    eax,ecx
c001b25c:	89 da                	mov    edx,ebx
c001b25e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b261:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b264:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b268:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b26c:	83 e0 00             	and    eax,0x0
c001b26f:	09 d0                	or     eax,edx
c001b271:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b275:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b278:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b27e:	8d 50 01             	lea    edx,[eax+0x1]
c001b281:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b284:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b28a:	31 d2                	xor    edx,edx
c001b28c:	88 c2                	mov    dl,al
c001b28e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b291:	83 c2 08             	add    edx,0x8
c001b294:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b298:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b29e:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b2a4:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b2a8:	6a 01                	push   0x1
c001b2aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b2ad:	e8 08 ff ff ff       	call   c001b1ba <IOAPIC::read(int)>
c001b2b2:	83 c4 08             	add    esp,0x8
c001b2b5:	c1 f8 10             	sar    eax,0x10
c001b2b8:	25 ff 00 00 00       	and    eax,0xff
c001b2bd:	8d 50 01             	lea    edx,[eax+0x1]
c001b2c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b2c3:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b2c9:	b8 00 00 00 00       	mov    eax,0x0
c001b2ce:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b2d1:	5b                   	pop    ebx
c001b2d2:	5e                   	pop    esi
c001b2d3:	5f                   	pop    edi
c001b2d4:	5d                   	pop    ebp
c001b2d5:	c3                   	ret    

c001b2d6 <IOAPIC::write(int, int)>:
c001b2d6:	55                   	push   ebp
c001b2d7:	89 e5                	mov    ebp,esp
c001b2d9:	83 ec 10             	sub    esp,0x10
c001b2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b2df:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b2e5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b2e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b2eb:	31 d2                	xor    edx,edx
c001b2ed:	88 c2                	mov    dl,al
c001b2ef:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b2f2:	89 10                	mov    DWORD PTR [eax],edx
c001b2f4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b2f7:	8d 50 10             	lea    edx,[eax+0x10]
c001b2fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b2fd:	89 02                	mov    DWORD PTR [edx],eax
c001b2ff:	90                   	nop
c001b300:	c9                   	leave  
c001b301:	c3                   	ret    

c001b302 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b302:	55                   	push   ebp
c001b303:	89 e5                	mov    ebp,esp
c001b305:	53                   	push   ebx
c001b306:	83 ec 2c             	sub    esp,0x2c
c001b309:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b30c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b30f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b312:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b315:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b318:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b31b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b31e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b321:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b324:	88 d8                	mov    al,bl
c001b326:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b329:	88 c8                	mov    al,cl
c001b32b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b32e:	88 d0                	mov    al,dl
c001b330:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b333:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b336:	25 ff 00 00 00       	and    eax,0xff
c001b33b:	83 c0 08             	add    eax,0x8
c001b33e:	01 c0                	add    eax,eax
c001b340:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b343:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b346:	25 ff 00 00 00       	and    eax,0xff
c001b34b:	83 c0 08             	add    eax,0x8
c001b34e:	01 c0                	add    eax,eax
c001b350:	40                   	inc    eax
c001b351:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b354:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b357:	50                   	push   eax
c001b358:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b35b:	e8 5a fe ff ff       	call   c001b1ba <IOAPIC::read(int)>
c001b360:	83 c4 08             	add    esp,0x8
c001b363:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b366:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b36d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b370:	c1 e0 18             	shl    eax,0x18
c001b373:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b376:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b379:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b37c:	52                   	push   edx
c001b37d:	50                   	push   eax
c001b37e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b381:	e8 50 ff ff ff       	call   c001b2d6 <IOAPIC::write(int, int)>
c001b386:	83 c4 0c             	add    esp,0xc
c001b389:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b38c:	50                   	push   eax
c001b38d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b390:	e8 25 fe ff ff       	call   c001b1ba <IOAPIC::read(int)>
c001b395:	83 c4 08             	add    esp,0x8
c001b398:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b39b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b3a2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b3a9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b3b0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b3b4:	74 09                	je     c001b3bf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b3b6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b3bd:	eb 07                	jmp    c001b3c6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b3bf:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b3c6:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b3ca:	74 09                	je     c001b3d5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b3cc:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b3d3:	eb 07                	jmp    c001b3dc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b3d5:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b3dc:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b3e3:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b3e6:	25 ff 00 00 00       	and    eax,0xff
c001b3eb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b3ee:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b3f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b3f4:	52                   	push   edx
c001b3f5:	50                   	push   eax
c001b3f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b3f9:	e8 d8 fe ff ff       	call   c001b2d6 <IOAPIC::write(int, int)>
c001b3fe:	83 c4 0c             	add    esp,0xc
c001b401:	90                   	nop
c001b402:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b405:	c9                   	leave  
c001b406:	c3                   	ret    
c001b407:	90                   	nop

c001b408 <APICTimer::close(int, int, void*)>:
c001b408:	b8 00 00 00 00       	mov    eax,0x0
c001b40d:	c3                   	ret    
c001b40e:	66 90                	xchg   ax,ax

c001b410 <apicTimerHandler(regs*, void*)>:
c001b410:	83 ec 0c             	sub    esp,0xc
c001b413:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b417:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b419:	b8 10 27 00 00       	mov    eax,0x2710
c001b41e:	ba 00 00 00 00       	mov    edx,0x0
c001b423:	f7 f1                	div    ecx
c001b425:	83 ec 0c             	sub    esp,0xc
c001b428:	50                   	push   eax
c001b429:	e8 a2 1d ff ff       	call   c000d1d0 <timerHandler(unsigned int)>
c001b42e:	83 c4 10             	add    esp,0x10
c001b431:	90                   	nop
c001b432:	83 c4 0c             	add    esp,0xc
c001b435:	c3                   	ret    
c001b436:	66 90                	xchg   ax,ax

c001b438 <APICTimer::open(int, int, void*)>:
c001b438:	83 ec 0c             	sub    esp,0xc
c001b43b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b43f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b441:	83 c0 24             	add    eax,0x24
c001b444:	8b 00                	mov    eax,DWORD PTR [eax]
c001b446:	83 ec 08             	sub    esp,0x8
c001b449:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b44d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b451:	ff d0                	call   eax
c001b453:	83 c4 10             	add    esp,0x10
c001b456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b45a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b45e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b468:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b46c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b472:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b476:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b47c:	83 ec 0c             	sub    esp,0xc
c001b47f:	51                   	push   ecx
c001b480:	6a 01                	push   0x1
c001b482:	68 10 b4 01 c0       	push   0xc001b410
c001b487:	52                   	push   edx
c001b488:	50                   	push   eax
c001b489:	e8 3e 04 ff ff       	call   c000b8cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b48e:	83 c4 20             	add    esp,0x20
c001b491:	89 c2                	mov    edx,eax
c001b493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b497:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b49d:	b8 00 00 00 00       	mov    eax,0x0
c001b4a2:	83 c4 0c             	add    esp,0xc
c001b4a5:	c3                   	ret    
c001b4a6:	66 90                	xchg   ax,ax

c001b4a8 <APICTimer::write(int)>:
c001b4a8:	83 ec 0c             	sub    esp,0xc
c001b4ab:	83 ec 0c             	sub    esp,0xc
c001b4ae:	68 f4 f0 01 c0       	push   0xc001f0f4
c001b4b3:	e8 a7 4c ff ff       	call   c001015f <KePanic(char const*)>
c001b4b8:	83 c4 10             	add    esp,0x10
c001b4bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b4c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b4c9:	90                   	nop
c001b4ca:	83 c4 0c             	add    esp,0xc
c001b4cd:	c3                   	ret    
c001b4ce:	66 90                	xchg   ax,ax

c001b4d0 <APICTimer::APICTimer()>:
c001b4d0:	83 ec 0c             	sub    esp,0xc
c001b4d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4d7:	83 ec 08             	sub    esp,0x8
c001b4da:	68 04 f1 01 c0       	push   0xc001f104
c001b4df:	50                   	push   eax
c001b4e0:	e8 1f 1c ff ff       	call   c000d104 <Timer::Timer(char const*)>
c001b4e5:	83 c4 10             	add    esp,0x10
c001b4e8:	ba 18 f1 01 c0       	mov    edx,0xc001f118
c001b4ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4f1:	89 10                	mov    DWORD PTR [eax],edx
c001b4f3:	90                   	nop
c001b4f4:	83 c4 0c             	add    esp,0xc
c001b4f7:	c3                   	ret    

c001b4f8 <PIT::write(int)>:
c001b4f8:	83 ec 10             	sub    esp,0x10
c001b4fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b503:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b509:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b50d:	a3 e4 41 02 c0       	mov    ds:0xc00241e4,eax
c001b512:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b517:	99                   	cdq    
c001b518:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b51c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b520:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b527:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b52c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b530:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b535:	ee                   	out    dx,al
c001b536:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b53a:	25 ff 00 00 00       	and    eax,0xff
c001b53f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b546:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b54a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b54e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b553:	ee                   	out    dx,al
c001b554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b558:	c1 f8 08             	sar    eax,0x8
c001b55b:	25 ff 00 00 00       	and    eax,0xff
c001b560:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b567:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b56b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b56f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b574:	ee                   	out    dx,al
c001b575:	90                   	nop
c001b576:	83 c4 10             	add    esp,0x10
c001b579:	c3                   	ret    
c001b57a:	66 90                	xchg   ax,ax

c001b57c <pitHandler(regs*, void*)>:
c001b57c:	83 ec 0c             	sub    esp,0xc
c001b57f:	8b 0d e4 41 02 c0    	mov    ecx,DWORD PTR ds:0xc00241e4
c001b585:	b8 10 27 00 00       	mov    eax,0x2710
c001b58a:	99                   	cdq    
c001b58b:	f7 f9                	idiv   ecx
c001b58d:	83 ec 0c             	sub    esp,0xc
c001b590:	50                   	push   eax
c001b591:	e8 3a 1c ff ff       	call   c000d1d0 <timerHandler(unsigned int)>
c001b596:	83 c4 10             	add    esp,0x10
c001b599:	90                   	nop
c001b59a:	83 c4 0c             	add    esp,0xc
c001b59d:	c3                   	ret    
c001b59e:	66 90                	xchg   ax,ax

c001b5a0 <PIT::open(int, int, void*)>:
c001b5a0:	83 ec 0c             	sub    esp,0xc
c001b5a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5a9:	83 c0 24             	add    eax,0x24
c001b5ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5ae:	83 ec 08             	sub    esp,0x8
c001b5b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5b9:	ff d0                	call   eax
c001b5bb:	83 c4 10             	add    esp,0x10
c001b5be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5c2:	83 ec 0c             	sub    esp,0xc
c001b5c5:	6a 00                	push   0x0
c001b5c7:	6a 01                	push   0x1
c001b5c9:	68 7c b5 01 c0       	push   0xc001b57c
c001b5ce:	6a 00                	push   0x0
c001b5d0:	50                   	push   eax
c001b5d1:	e8 f6 02 ff ff       	call   c000b8cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b5d6:	83 c4 20             	add    esp,0x20
c001b5d9:	89 c2                	mov    edx,eax
c001b5db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5df:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b5e5:	b8 00 00 00 00       	mov    eax,0x0
c001b5ea:	83 c4 0c             	add    esp,0xc
c001b5ed:	c3                   	ret    
c001b5ee:	66 90                	xchg   ax,ax

c001b5f0 <PIT::close(int, int, void*)>:
c001b5f0:	83 ec 0c             	sub    esp,0xc
c001b5f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5f7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b605:	6a 01                	push   0x1
c001b607:	68 7c b5 01 c0       	push   0xc001b57c
c001b60c:	6a 00                	push   0x0
c001b60e:	50                   	push   eax
c001b60f:	e8 ee 02 ff ff       	call   c000b902 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001b614:	83 c4 10             	add    esp,0x10
c001b617:	b8 00 00 00 00       	mov    eax,0x0
c001b61c:	83 c4 0c             	add    esp,0xc
c001b61f:	c3                   	ret    

c001b620 <PIT::PIT()>:
c001b620:	83 ec 0c             	sub    esp,0xc
c001b623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b627:	83 ec 08             	sub    esp,0x8
c001b62a:	68 40 f1 01 c0       	push   0xc001f140
c001b62f:	50                   	push   eax
c001b630:	e8 cf 1a ff ff       	call   c000d104 <Timer::Timer(char const*)>
c001b635:	83 c4 10             	add    esp,0x10
c001b638:	ba 68 f1 01 c0       	mov    edx,0xc001f168
c001b63d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b641:	89 10                	mov    DWORD PTR [eax],edx
c001b643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b647:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b64d:	31 d2                	xor    edx,edx
c001b64f:	88 c2                	mov    dl,al
c001b651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b655:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001b65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b660:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b666:	31 d2                	xor    edx,edx
c001b668:	88 c2                	mov    dl,al
c001b66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b66e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001b673:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b677:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b67d:	8d 50 01             	lea    edx,[eax+0x1]
c001b680:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b684:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b68a:	31 d2                	xor    edx,edx
c001b68c:	88 c2                	mov    dl,al
c001b68e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b692:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b696:	83 e1 3f             	and    ecx,0x3f
c001b699:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b69d:	90                   	nop
c001b69e:	83 c4 0c             	add    esp,0xc
c001b6a1:	c3                   	ret    
c001b6a2:	66 90                	xchg   ax,ax
c001b6a4:	66 90                	xchg   ax,ax
c001b6a6:	66 90                	xchg   ax,ax
c001b6a8:	66 90                	xchg   ax,ax
c001b6aa:	66 90                	xchg   ax,ax
c001b6ac:	66 90                	xchg   ax,ax
c001b6ae:	66 90                	xchg   ax,ax

c001b6b0 <avxDetect>:
c001b6b0:	b8 01 00 00 00       	mov    eax,0x1
c001b6b5:	0f a2                	cpuid  
c001b6b7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001b6bd:	74 15                	je     c001b6d4 <avxDetect.noAVX>
c001b6bf:	b8 01 00 00 00       	mov    eax,0x1
c001b6c4:	0f a2                	cpuid  
c001b6c6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001b6cc:	74 06                	je     c001b6d4 <avxDetect.noAVX>
c001b6ce:	b8 01 00 00 00       	mov    eax,0x1
c001b6d3:	c3                   	ret    

c001b6d4 <avxDetect.noAVX>:
c001b6d4:	b8 00 00 00 00       	mov    eax,0x0
c001b6d9:	c3                   	ret    

c001b6da <avxSave>:
c001b6da:	53                   	push   ebx
c001b6db:	52                   	push   edx
c001b6dc:	31 c0                	xor    eax,eax
c001b6de:	48                   	dec    eax
c001b6df:	89 c2                	mov    edx,eax
c001b6e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b6e5:	0f ae 23             	xsave  [ebx]
c001b6e8:	5a                   	pop    edx
c001b6e9:	5b                   	pop    ebx
c001b6ea:	c3                   	ret    

c001b6eb <avxLoad>:
c001b6eb:	53                   	push   ebx
c001b6ec:	52                   	push   edx
c001b6ed:	31 c0                	xor    eax,eax
c001b6ef:	48                   	dec    eax
c001b6f0:	89 c2                	mov    edx,eax
c001b6f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b6f6:	0f ae 2b             	xrstor [ebx]
c001b6f9:	5a                   	pop    edx
c001b6fa:	5b                   	pop    ebx
c001b6fb:	c3                   	ret    

c001b6fc <avxInit>:
c001b6fc:	e8 57 02 00 00       	call   c001b958 <sseInit>
c001b701:	50                   	push   eax
c001b702:	51                   	push   ecx
c001b703:	0f 20 e0             	mov    eax,cr4
c001b706:	0d 00 00 04 00       	or     eax,0x40000
c001b70b:	0f 22 e0             	mov    cr4,eax
c001b70e:	31 c9                	xor    ecx,ecx
c001b710:	0f 01 d0             	xgetbv 
c001b713:	0d 07 00 00 00       	or     eax,0x7
c001b718:	0f 01 d1             	xsetbv 
c001b71b:	59                   	pop    ecx
c001b71c:	58                   	pop    eax
c001b71d:	c3                   	ret    

c001b71e <avxClose>:
c001b71e:	c3                   	ret    

c001b71f <wouldSheSayYes>:
c001b71f:	c3                   	ret    
c001b720:	49                   	dec    ecx
c001b721:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001b725:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001b729:	75 20                	jne    c001b74b <isr0+0xb>
c001b72b:	4e                   	dec    esi
c001b72c:	79 61                	jns    c001b78f <isr7+0x3>
c001b72e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001b733:	66 90                	xchg   ax,ax
c001b735:	66 90                	xchg   ax,ax
c001b737:	66 90                	xchg   ax,ax
c001b739:	66 90                	xchg   ax,ax
c001b73b:	66 90                	xchg   ax,ax
c001b73d:	66 90                	xchg   ax,ax
c001b73f:	90                   	nop

c001b740 <isr0>:
c001b740:	fa                   	cli    
c001b741:	68 00 00 00 00       	push   0x0
c001b746:	68 00 00 00 00       	push   0x0
c001b74b:	e9 44 01 00 00       	jmp    c001b894 <int_common_stub>

c001b750 <isr1>:
c001b750:	fa                   	cli    
c001b751:	6a 00                	push   0x0
c001b753:	6a 01                	push   0x1
c001b755:	e9 3a 01 00 00       	jmp    c001b894 <int_common_stub>

c001b75a <isr2>:
c001b75a:	fa                   	cli    
c001b75b:	6a 00                	push   0x0
c001b75d:	6a 02                	push   0x2
c001b75f:	e9 30 01 00 00       	jmp    c001b894 <int_common_stub>

c001b764 <isr3>:
c001b764:	fa                   	cli    
c001b765:	6a 00                	push   0x0
c001b767:	6a 03                	push   0x3
c001b769:	e9 26 01 00 00       	jmp    c001b894 <int_common_stub>

c001b76e <isr4>:
c001b76e:	fa                   	cli    
c001b76f:	6a 00                	push   0x0
c001b771:	6a 04                	push   0x4
c001b773:	e9 1c 01 00 00       	jmp    c001b894 <int_common_stub>

c001b778 <isr5>:
c001b778:	fa                   	cli    
c001b779:	6a 00                	push   0x0
c001b77b:	6a 05                	push   0x5
c001b77d:	e9 12 01 00 00       	jmp    c001b894 <int_common_stub>

c001b782 <isr6>:
c001b782:	fa                   	cli    
c001b783:	6a 00                	push   0x0
c001b785:	6a 06                	push   0x6
c001b787:	e9 08 01 00 00       	jmp    c001b894 <int_common_stub>

c001b78c <isr7>:
c001b78c:	fa                   	cli    
c001b78d:	6a 00                	push   0x0
c001b78f:	6a 07                	push   0x7
c001b791:	e9 fe 00 00 00       	jmp    c001b894 <int_common_stub>

c001b796 <isr8>:
c001b796:	fa                   	cli    
c001b797:	6a 08                	push   0x8
c001b799:	e9 f6 00 00 00       	jmp    c001b894 <int_common_stub>

c001b79e <isr9>:
c001b79e:	fa                   	cli    
c001b79f:	6a 00                	push   0x0
c001b7a1:	6a 09                	push   0x9
c001b7a3:	e9 ec 00 00 00       	jmp    c001b894 <int_common_stub>

c001b7a8 <isr10>:
c001b7a8:	fa                   	cli    
c001b7a9:	6a 0a                	push   0xa
c001b7ab:	e9 e4 00 00 00       	jmp    c001b894 <int_common_stub>

c001b7b0 <isr11>:
c001b7b0:	fa                   	cli    
c001b7b1:	6a 0b                	push   0xb
c001b7b3:	e9 dc 00 00 00       	jmp    c001b894 <int_common_stub>

c001b7b8 <isr12>:
c001b7b8:	fa                   	cli    
c001b7b9:	6a 0c                	push   0xc
c001b7bb:	e9 d4 00 00 00       	jmp    c001b894 <int_common_stub>

c001b7c0 <isr13>:
c001b7c0:	fa                   	cli    
c001b7c1:	6a 0d                	push   0xd
c001b7c3:	e9 cc 00 00 00       	jmp    c001b894 <int_common_stub>

c001b7c8 <isr14>:
c001b7c8:	fa                   	cli    
c001b7c9:	6a 0e                	push   0xe
c001b7cb:	e9 c4 00 00 00       	jmp    c001b894 <int_common_stub>

c001b7d0 <isr15>:
c001b7d0:	fa                   	cli    
c001b7d1:	6a 00                	push   0x0
c001b7d3:	6a 0f                	push   0xf
c001b7d5:	e9 ba 00 00 00       	jmp    c001b894 <int_common_stub>

c001b7da <isr16>:
c001b7da:	fa                   	cli    
c001b7db:	6a 00                	push   0x0
c001b7dd:	6a 10                	push   0x10
c001b7df:	e9 b0 00 00 00       	jmp    c001b894 <int_common_stub>

c001b7e4 <isr17>:
c001b7e4:	fa                   	cli    
c001b7e5:	6a 00                	push   0x0
c001b7e7:	6a 11                	push   0x11
c001b7e9:	e9 a6 00 00 00       	jmp    c001b894 <int_common_stub>

c001b7ee <isr18>:
c001b7ee:	fa                   	cli    
c001b7ef:	6a 00                	push   0x0
c001b7f1:	6a 12                	push   0x12
c001b7f3:	e9 9c 00 00 00       	jmp    c001b894 <int_common_stub>

c001b7f8 <irq3>:
c001b7f8:	fa                   	cli    
c001b7f9:	6a 00                	push   0x0
c001b7fb:	6a 23                	push   0x23
c001b7fd:	e9 92 00 00 00       	jmp    c001b894 <int_common_stub>

c001b802 <irq4>:
c001b802:	fa                   	cli    
c001b803:	6a 00                	push   0x0
c001b805:	6a 24                	push   0x24
c001b807:	e9 88 00 00 00       	jmp    c001b894 <int_common_stub>

c001b80c <irq5>:
c001b80c:	fa                   	cli    
c001b80d:	6a 00                	push   0x0
c001b80f:	6a 25                	push   0x25
c001b811:	e9 7e 00 00 00       	jmp    c001b894 <int_common_stub>

c001b816 <irq6>:
c001b816:	fa                   	cli    
c001b817:	6a 00                	push   0x0
c001b819:	6a 26                	push   0x26
c001b81b:	e9 74 00 00 00       	jmp    c001b894 <int_common_stub>

c001b820 <irq7>:
c001b820:	fa                   	cli    
c001b821:	6a 00                	push   0x0
c001b823:	6a 27                	push   0x27
c001b825:	e9 6a 00 00 00       	jmp    c001b894 <int_common_stub>

c001b82a <irq8>:
c001b82a:	fa                   	cli    
c001b82b:	6a 00                	push   0x0
c001b82d:	6a 28                	push   0x28
c001b82f:	e9 60 00 00 00       	jmp    c001b894 <int_common_stub>

c001b834 <irq9>:
c001b834:	fa                   	cli    
c001b835:	6a 00                	push   0x0
c001b837:	6a 29                	push   0x29
c001b839:	e9 56 00 00 00       	jmp    c001b894 <int_common_stub>

c001b83e <irq10>:
c001b83e:	fa                   	cli    
c001b83f:	6a 00                	push   0x0
c001b841:	6a 2a                	push   0x2a
c001b843:	e9 4c 00 00 00       	jmp    c001b894 <int_common_stub>

c001b848 <irq11>:
c001b848:	fa                   	cli    
c001b849:	6a 00                	push   0x0
c001b84b:	6a 2b                	push   0x2b
c001b84d:	e9 42 00 00 00       	jmp    c001b894 <int_common_stub>

c001b852 <irq12>:
c001b852:	fa                   	cli    
c001b853:	6a 00                	push   0x0
c001b855:	6a 2c                	push   0x2c
c001b857:	e9 38 00 00 00       	jmp    c001b894 <int_common_stub>

c001b85c <irq13>:
c001b85c:	fa                   	cli    
c001b85d:	6a 00                	push   0x0
c001b85f:	6a 2d                	push   0x2d
c001b861:	e9 2e 00 00 00       	jmp    c001b894 <int_common_stub>

c001b866 <irq14>:
c001b866:	fa                   	cli    
c001b867:	6a 00                	push   0x0
c001b869:	6a 2e                	push   0x2e
c001b86b:	e9 24 00 00 00       	jmp    c001b894 <int_common_stub>

c001b870 <irq15>:
c001b870:	fa                   	cli    
c001b871:	6a 00                	push   0x0
c001b873:	6a 2f                	push   0x2f
c001b875:	e9 1a 00 00 00       	jmp    c001b894 <int_common_stub>

c001b87a <irq1>:
c001b87a:	fa                   	cli    
c001b87b:	6a 00                	push   0x0
c001b87d:	6a 21                	push   0x21
c001b87f:	eb 13                	jmp    c001b894 <int_common_stub>

c001b881 <irq2>:
c001b881:	fa                   	cli    
c001b882:	6a 00                	push   0x0
c001b884:	6a 22                	push   0x22
c001b886:	eb 0c                	jmp    c001b894 <int_common_stub>

c001b888 <isr96>:
c001b888:	6a 00                	push   0x0
c001b88a:	6a 60                	push   0x60
c001b88c:	fb                   	sti    
c001b88d:	eb 05                	jmp    c001b894 <int_common_stub>

c001b88f <irq0>:
c001b88f:	fa                   	cli    
c001b890:	6a 00                	push   0x0
c001b892:	6a 20                	push   0x20

c001b894 <int_common_stub>:
c001b894:	60                   	pusha  
c001b895:	1e                   	push   ds
c001b896:	06                   	push   es
c001b897:	0f a0                	push   fs
c001b899:	0f a8                	push   gs
c001b89b:	66 b8 10 00          	mov    ax,0x10
c001b89f:	66 8e d8             	mov    ds,ax
c001b8a2:	66 8e c0             	mov    es,ax
c001b8a5:	66 8e e0             	mov    fs,ax
c001b8a8:	66 8e e8             	mov    gs,ax
c001b8ab:	54                   	push   esp
c001b8ac:	fc                   	cld    
c001b8ad:	e8 1a 05 ff ff       	call   c000bdcc <int_handler>
c001b8b2:	81 c4 04 00 00 00    	add    esp,0x4
c001b8b8:	0f a9                	pop    gs
c001b8ba:	0f a1                	pop    fs
c001b8bc:	07                   	pop    es
c001b8bd:	1f                   	pop    ds
c001b8be:	61                   	popa   
c001b8bf:	81 c4 08 00 00 00    	add    esp,0x8
c001b8c5:	cf                   	iret   

c001b8c6 <irq16>:
c001b8c6:	fa                   	cli    
c001b8c7:	6a 00                	push   0x0
c001b8c9:	6a 30                	push   0x30
c001b8cb:	e9 c4 ff ff ff       	jmp    c001b894 <int_common_stub>

c001b8d0 <irq17>:
c001b8d0:	fa                   	cli    
c001b8d1:	6a 00                	push   0x0
c001b8d3:	6a 31                	push   0x31
c001b8d5:	e9 ba ff ff ff       	jmp    c001b894 <int_common_stub>

c001b8da <irq18>:
c001b8da:	fa                   	cli    
c001b8db:	6a 00                	push   0x0
c001b8dd:	6a 32                	push   0x32
c001b8df:	e9 b0 ff ff ff       	jmp    c001b894 <int_common_stub>

c001b8e4 <irq19>:
c001b8e4:	fa                   	cli    
c001b8e5:	6a 00                	push   0x0
c001b8e7:	6a 33                	push   0x33
c001b8e9:	e9 a6 ff ff ff       	jmp    c001b894 <int_common_stub>

c001b8ee <irq20>:
c001b8ee:	fa                   	cli    
c001b8ef:	6a 00                	push   0x0
c001b8f1:	6a 34                	push   0x34
c001b8f3:	e9 9c ff ff ff       	jmp    c001b894 <int_common_stub>

c001b8f8 <irq21>:
c001b8f8:	fa                   	cli    
c001b8f9:	6a 00                	push   0x0
c001b8fb:	6a 35                	push   0x35
c001b8fd:	e9 92 ff ff ff       	jmp    c001b894 <int_common_stub>

c001b902 <irq22>:
c001b902:	fa                   	cli    
c001b903:	6a 00                	push   0x0
c001b905:	6a 36                	push   0x36
c001b907:	e9 88 ff ff ff       	jmp    c001b894 <int_common_stub>

c001b90c <irq23>:
c001b90c:	fa                   	cli    
c001b90d:	6a 00                	push   0x0
c001b90f:	6a 37                	push   0x37
c001b911:	e9 7e ff ff ff       	jmp    c001b894 <int_common_stub>
c001b916:	66 90                	xchg   ax,ax
c001b918:	66 90                	xchg   ax,ax
c001b91a:	66 90                	xchg   ax,ax
c001b91c:	66 90                	xchg   ax,ax
c001b91e:	66 90                	xchg   ax,ax

c001b920 <i386GetRDRAND>:
c001b920:	b9 64 00 00 00       	mov    ecx,0x64

c001b925 <retry>:
c001b925:	0f c7 f0             	rdrand eax
c001b928:	72 05                	jb     c001b92f <retry.done>
c001b92a:	e2 f9                	loop   c001b925 <retry>

c001b92c <retry.fail>:
c001b92c:	31 c0                	xor    eax,eax
c001b92e:	c3                   	ret    

c001b92f <retry.done>:
c001b92f:	c3                   	ret    

c001b930 <absolutelyNoChanceInHell>:
c001b930:	b8 01 00 00 00       	mov    eax,0x1
c001b935:	0f a2                	cpuid  
c001b937:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001b93d:	74 06                	je     c001b945 <sseDetect.noSSE>
c001b93f:	b8 01 00 00 00       	mov    eax,0x1
c001b944:	c3                   	ret    

c001b945 <sseDetect.noSSE>:
c001b945:	31 c0                	xor    eax,eax
c001b947:	c3                   	ret    

c001b948 <sseSave>:
c001b948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b94c:	0f ae 00             	fxsave [eax]
c001b94f:	c3                   	ret    

c001b950 <sseLoad>:
c001b950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b954:	0f ae 08             	fxrstor [eax]
c001b957:	c3                   	ret    

c001b958 <sseInit>:
c001b958:	e8 42 00 00 00       	call   c001b99f <x87Init>
c001b95d:	0f 20 e0             	mov    eax,cr4
c001b960:	66 0d 00 06          	or     ax,0x600
c001b964:	0f 22 e0             	mov    cr4,eax
c001b967:	c3                   	ret    

c001b968 <sseClose>:
c001b968:	c3                   	ret    
c001b969:	66 90                	xchg   ax,ax
c001b96b:	66 90                	xchg   ax,ax
c001b96d:	66 90                	xchg   ax,ax
c001b96f:	90                   	nop

c001b970 <value_37F>:
c001b970:	7f 03                	jg     c001b975 <value_37A+0x1>

c001b972 <value_37E>:
c001b972:	7e 03                	jle    c001b977 <x87Detect+0x1>

c001b974 <value_37A>:
c001b974:	7a 03                	jp     c001b979 <x87Detect+0x3>

c001b976 <x87Detect>:
c001b976:	b8 01 00 00 00       	mov    eax,0x1
c001b97b:	0f a2                	cpuid  
c001b97d:	f7 c2 01 00 00 00    	test   edx,0x1
c001b983:	74 06                	je     c001b98b <x87Detect.nox87>
c001b985:	b8 01 00 00 00       	mov    eax,0x1
c001b98a:	c3                   	ret    

c001b98b <x87Detect.nox87>:
c001b98b:	b8 00 00 00 00       	mov    eax,0x0
c001b990:	c3                   	ret    

c001b991 <x87Save>:
c001b991:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b995:	dd 30                	fnsave [eax]
c001b997:	c3                   	ret    

c001b998 <x87Load>:
c001b998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b99c:	dd 20                	frstor [eax]
c001b99e:	c3                   	ret    

c001b99f <x87Init>:
c001b99f:	0f 20 c0             	mov    eax,cr0
c001b9a2:	66 25 fb ff          	and    ax,0xfffb
c001b9a6:	66 0d 22 00          	or     ax,0x22
c001b9aa:	0f 22 c0             	mov    cr0,eax
c001b9ad:	db e3                	fninit 
c001b9af:	0f 06                	clts   
c001b9b1:	d9 2d 74 b9 01 c0    	fldcw  WORD PTR ds:0xc001b974
c001b9b7:	c3                   	ret    

c001b9b8 <x87Close>:
c001b9b8:	c3                   	ret    
c001b9b9:	66 90                	xchg   ax,ax
c001b9bb:	90                   	nop

c001b9bc <__do_global_ctors_aux>:
c001b9bc:	a1 6c c9 01 c0       	mov    eax,ds:0xc001c96c
c001b9c1:	83 f8 ff             	cmp    eax,0xffffffff
c001b9c4:	74 1a                	je     c001b9e0 <__do_global_ctors_aux+0x24>
c001b9c6:	55                   	push   ebp
c001b9c7:	89 e5                	mov    ebp,esp
c001b9c9:	53                   	push   ebx
c001b9ca:	52                   	push   edx
c001b9cb:	bb 6c c9 01 c0       	mov    ebx,0xc001c96c
c001b9d0:	ff d0                	call   eax
c001b9d2:	83 eb 04             	sub    ebx,0x4
c001b9d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b9d7:	83 f8 ff             	cmp    eax,0xffffffff
c001b9da:	75 f4                	jne    c001b9d0 <__do_global_ctors_aux+0x14>
c001b9dc:	58                   	pop    eax
c001b9dd:	5b                   	pop    ebx
c001b9de:	5d                   	pop    ebp
c001b9df:	c3                   	ret    
c001b9e0:	c3                   	ret    
c001b9e1:	66 90                	xchg   ax,ax
c001b9e3:	90                   	nop

c001b9e4 <__divdi3>:
c001b9e4:	55                   	push   ebp
c001b9e5:	57                   	push   edi
c001b9e6:	56                   	push   esi
c001b9e7:	53                   	push   ebx
c001b9e8:	83 ec 1c             	sub    esp,0x1c
c001b9eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b9ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b9f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b9f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b9fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b9fe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ba02:	85 db                	test   ebx,ebx
c001ba04:	0f 88 8e 00 00 00    	js     c001ba98 <__divdi3+0xb4>
c001ba0a:	89 dd                	mov    ebp,ebx
c001ba0c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ba14:	89 d3                	mov    ebx,edx
c001ba16:	85 d2                	test   edx,edx
c001ba18:	79 0d                	jns    c001ba27 <__divdi3+0x43>
c001ba1a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001ba1e:	f7 d8                	neg    eax
c001ba20:	83 d2 00             	adc    edx,0x0
c001ba23:	f7 da                	neg    edx
c001ba25:	89 d3                	mov    ebx,edx
c001ba27:	89 c7                	mov    edi,eax
c001ba29:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ba2c:	85 db                	test   ebx,ebx
c001ba2e:	75 48                	jne    c001ba78 <__divdi3+0x94>
c001ba30:	39 ef                	cmp    edi,ebp
c001ba32:	76 24                	jbe    c001ba58 <__divdi3+0x74>
c001ba34:	89 ea                	mov    edx,ebp
c001ba36:	f7 f7                	div    edi
c001ba38:	89 c1                	mov    ecx,eax
c001ba3a:	31 f6                	xor    esi,esi
c001ba3c:	89 c8                	mov    eax,ecx
c001ba3e:	89 f2                	mov    edx,esi
c001ba40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ba44:	85 c9                	test   ecx,ecx
c001ba46:	74 07                	je     c001ba4f <__divdi3+0x6b>
c001ba48:	f7 d8                	neg    eax
c001ba4a:	83 d2 00             	adc    edx,0x0
c001ba4d:	f7 da                	neg    edx
c001ba4f:	83 c4 1c             	add    esp,0x1c
c001ba52:	5b                   	pop    ebx
c001ba53:	5e                   	pop    esi
c001ba54:	5f                   	pop    edi
c001ba55:	5d                   	pop    ebp
c001ba56:	c3                   	ret    
c001ba57:	90                   	nop
c001ba58:	85 ff                	test   edi,edi
c001ba5a:	75 0b                	jne    c001ba67 <__divdi3+0x83>
c001ba5c:	b8 01 00 00 00       	mov    eax,0x1
c001ba61:	31 d2                	xor    edx,edx
c001ba63:	f7 f3                	div    ebx
c001ba65:	89 c7                	mov    edi,eax
c001ba67:	31 d2                	xor    edx,edx
c001ba69:	89 e8                	mov    eax,ebp
c001ba6b:	f7 f7                	div    edi
c001ba6d:	89 c6                	mov    esi,eax
c001ba6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ba72:	f7 f7                	div    edi
c001ba74:	89 c1                	mov    ecx,eax
c001ba76:	eb c4                	jmp    c001ba3c <__divdi3+0x58>
c001ba78:	39 eb                	cmp    ebx,ebp
c001ba7a:	77 3c                	ja     c001bab8 <__divdi3+0xd4>
c001ba7c:	0f bd f3             	bsr    esi,ebx
c001ba7f:	83 f6 1f             	xor    esi,0x1f
c001ba82:	75 40                	jne    c001bac4 <__divdi3+0xe0>
c001ba84:	39 eb                	cmp    ebx,ebp
c001ba86:	72 09                	jb     c001ba91 <__divdi3+0xad>
c001ba88:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ba8b:	0f 87 97 00 00 00    	ja     c001bb28 <__divdi3+0x144>
c001ba91:	b9 01 00 00 00       	mov    ecx,0x1
c001ba96:	eb a4                	jmp    c001ba3c <__divdi3+0x58>
c001ba98:	f7 d9                	neg    ecx
c001ba9a:	83 d3 00             	adc    ebx,0x0
c001ba9d:	f7 db                	neg    ebx
c001ba9f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001baa2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001baa6:	89 dd                	mov    ebp,ebx
c001baa8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bab0:	e9 5f ff ff ff       	jmp    c001ba14 <__divdi3+0x30>
c001bab5:	8d 76 00             	lea    esi,[esi+0x0]
c001bab8:	31 f6                	xor    esi,esi
c001baba:	31 c9                	xor    ecx,ecx
c001babc:	e9 7b ff ff ff       	jmp    c001ba3c <__divdi3+0x58>
c001bac1:	8d 76 00             	lea    esi,[esi+0x0]
c001bac4:	b8 20 00 00 00       	mov    eax,0x20
c001bac9:	29 f0                	sub    eax,esi
c001bacb:	89 f1                	mov    ecx,esi
c001bacd:	d3 e3                	shl    ebx,cl
c001bacf:	89 fa                	mov    edx,edi
c001bad1:	88 c1                	mov    cl,al
c001bad3:	d3 ea                	shr    edx,cl
c001bad5:	09 da                	or     edx,ebx
c001bad7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001badb:	89 f1                	mov    ecx,esi
c001badd:	d3 e7                	shl    edi,cl
c001badf:	89 eb                	mov    ebx,ebp
c001bae1:	88 c1                	mov    cl,al
c001bae3:	d3 eb                	shr    ebx,cl
c001bae5:	89 f1                	mov    ecx,esi
c001bae7:	d3 e5                	shl    ebp,cl
c001bae9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001baec:	88 c1                	mov    cl,al
c001baee:	d3 ea                	shr    edx,cl
c001baf0:	09 d5                	or     ebp,edx
c001baf2:	89 e8                	mov    eax,ebp
c001baf4:	89 da                	mov    edx,ebx
c001baf6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bafa:	89 d3                	mov    ebx,edx
c001bafc:	89 c5                	mov    ebp,eax
c001bafe:	f7 e7                	mul    edi
c001bb00:	39 d3                	cmp    ebx,edx
c001bb02:	72 18                	jb     c001bb1c <__divdi3+0x138>
c001bb04:	74 0a                	je     c001bb10 <__divdi3+0x12c>
c001bb06:	89 e9                	mov    ecx,ebp
c001bb08:	31 f6                	xor    esi,esi
c001bb0a:	e9 2d ff ff ff       	jmp    c001ba3c <__divdi3+0x58>
c001bb0f:	90                   	nop
c001bb10:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bb13:	89 f1                	mov    ecx,esi
c001bb15:	d3 e7                	shl    edi,cl
c001bb17:	39 c7                	cmp    edi,eax
c001bb19:	73 eb                	jae    c001bb06 <__divdi3+0x122>
c001bb1b:	90                   	nop
c001bb1c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001bb1f:	31 f6                	xor    esi,esi
c001bb21:	e9 16 ff ff ff       	jmp    c001ba3c <__divdi3+0x58>
c001bb26:	66 90                	xchg   ax,ax
c001bb28:	31 c9                	xor    ecx,ecx
c001bb2a:	e9 0d ff ff ff       	jmp    c001ba3c <__divdi3+0x58>
c001bb2f:	90                   	nop

c001bb30 <__moddi3>:
c001bb30:	55                   	push   ebp
c001bb31:	57                   	push   edi
c001bb32:	56                   	push   esi
c001bb33:	53                   	push   ebx
c001bb34:	83 ec 2c             	sub    esp,0x2c
c001bb37:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bb3b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001bb3f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bb43:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bb47:	85 db                	test   ebx,ebx
c001bb49:	0f 88 85 00 00 00    	js     c001bbd4 <__moddi3+0xa4>
c001bb4f:	89 de                	mov    esi,ebx
c001bb51:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bb59:	89 d7                	mov    edi,edx
c001bb5b:	85 d2                	test   edx,edx
c001bb5d:	79 09                	jns    c001bb68 <__moddi3+0x38>
c001bb5f:	f7 d8                	neg    eax
c001bb61:	83 d2 00             	adc    edx,0x0
c001bb64:	f7 da                	neg    edx
c001bb66:	89 d7                	mov    edi,edx
c001bb68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb6c:	89 cd                	mov    ebp,ecx
c001bb6e:	85 ff                	test   edi,edi
c001bb70:	75 52                	jne    c001bbc4 <__moddi3+0x94>
c001bb72:	89 c3                	mov    ebx,eax
c001bb74:	39 f0                	cmp    eax,esi
c001bb76:	76 24                	jbe    c001bb9c <__moddi3+0x6c>
c001bb78:	89 c8                	mov    eax,ecx
c001bb7a:	89 f2                	mov    edx,esi
c001bb7c:	f7 f3                	div    ebx
c001bb7e:	89 d6                	mov    esi,edx
c001bb80:	89 f0                	mov    eax,esi
c001bb82:	31 d2                	xor    edx,edx
c001bb84:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb88:	85 c9                	test   ecx,ecx
c001bb8a:	74 07                	je     c001bb93 <__moddi3+0x63>
c001bb8c:	f7 d8                	neg    eax
c001bb8e:	83 d2 00             	adc    edx,0x0
c001bb91:	f7 da                	neg    edx
c001bb93:	83 c4 2c             	add    esp,0x2c
c001bb96:	5b                   	pop    ebx
c001bb97:	5e                   	pop    esi
c001bb98:	5f                   	pop    edi
c001bb99:	5d                   	pop    ebp
c001bb9a:	c3                   	ret    
c001bb9b:	90                   	nop
c001bb9c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bba0:	85 db                	test   ebx,ebx
c001bba2:	75 0d                	jne    c001bbb1 <__moddi3+0x81>
c001bba4:	b8 01 00 00 00       	mov    eax,0x1
c001bba9:	31 d2                	xor    edx,edx
c001bbab:	f7 f7                	div    edi
c001bbad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbb1:	89 f0                	mov    eax,esi
c001bbb3:	31 d2                	xor    edx,edx
c001bbb5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bbb9:	f7 f7                	div    edi
c001bbbb:	89 e8                	mov    eax,ebp
c001bbbd:	f7 f7                	div    edi
c001bbbf:	89 d6                	mov    esi,edx
c001bbc1:	eb bd                	jmp    c001bb80 <__moddi3+0x50>
c001bbc3:	90                   	nop
c001bbc4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bbc8:	39 f7                	cmp    edi,esi
c001bbca:	76 20                	jbe    c001bbec <__moddi3+0xbc>
c001bbcc:	89 c8                	mov    eax,ecx
c001bbce:	89 f2                	mov    edx,esi
c001bbd0:	eb b2                	jmp    c001bb84 <__moddi3+0x54>
c001bbd2:	66 90                	xchg   ax,ax
c001bbd4:	f7 d9                	neg    ecx
c001bbd6:	83 d3 00             	adc    ebx,0x0
c001bbd9:	f7 db                	neg    ebx
c001bbdb:	89 de                	mov    esi,ebx
c001bbdd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001bbe5:	e9 6f ff ff ff       	jmp    c001bb59 <__moddi3+0x29>
c001bbea:	66 90                	xchg   ax,ax
c001bbec:	0f bd c7             	bsr    eax,edi
c001bbef:	83 f0 1f             	xor    eax,0x1f
c001bbf2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bbf6:	75 24                	jne    c001bc1c <__moddi3+0xec>
c001bbf8:	39 f7                	cmp    edi,esi
c001bbfa:	72 06                	jb     c001bc02 <__moddi3+0xd2>
c001bbfc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001bc00:	77 0c                	ja     c001bc0e <__moddi3+0xde>
c001bc02:	89 e9                	mov    ecx,ebp
c001bc04:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001bc08:	19 fe                	sbb    esi,edi
c001bc0a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bc0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bc12:	89 f2                	mov    edx,esi
c001bc14:	e9 6b ff ff ff       	jmp    c001bb84 <__moddi3+0x54>
c001bc19:	8d 76 00             	lea    esi,[esi+0x0]
c001bc1c:	b8 20 00 00 00       	mov    eax,0x20
c001bc21:	89 c2                	mov    edx,eax
c001bc23:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bc27:	29 da                	sub    edx,ebx
c001bc29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001bc2d:	88 d9                	mov    cl,bl
c001bc2f:	d3 e7                	shl    edi,cl
c001bc31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc35:	88 d1                	mov    cl,dl
c001bc37:	d3 e8                	shr    eax,cl
c001bc39:	09 c7                	or     edi,eax
c001bc3b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001bc3f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bc43:	89 d8                	mov    eax,ebx
c001bc45:	88 d9                	mov    cl,bl
c001bc47:	d3 e7                	shl    edi,cl
c001bc49:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bc4d:	89 f3                	mov    ebx,esi
c001bc4f:	88 d1                	mov    cl,dl
c001bc51:	d3 eb                	shr    ebx,cl
c001bc53:	89 c7                	mov    edi,eax
c001bc55:	88 c1                	mov    cl,al
c001bc57:	d3 e6                	shl    esi,cl
c001bc59:	89 e8                	mov    eax,ebp
c001bc5b:	88 d1                	mov    cl,dl
c001bc5d:	d3 e8                	shr    eax,cl
c001bc5f:	09 f0                	or     eax,esi
c001bc61:	89 f9                	mov    ecx,edi
c001bc63:	d3 e5                	shl    ebp,cl
c001bc65:	89 da                	mov    edx,ebx
c001bc67:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001bc6b:	89 d3                	mov    ebx,edx
c001bc6d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bc71:	89 c6                	mov    esi,eax
c001bc73:	89 d1                	mov    ecx,edx
c001bc75:	39 d3                	cmp    ebx,edx
c001bc77:	72 27                	jb     c001bca0 <__moddi3+0x170>
c001bc79:	74 21                	je     c001bc9c <__moddi3+0x16c>
c001bc7b:	29 f5                	sub    ebp,esi
c001bc7d:	19 cb                	sbb    ebx,ecx
c001bc7f:	89 de                	mov    esi,ebx
c001bc81:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001bc85:	d3 e6                	shl    esi,cl
c001bc87:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bc8b:	89 f9                	mov    ecx,edi
c001bc8d:	d3 ed                	shr    ebp,cl
c001bc8f:	09 ee                	or     esi,ebp
c001bc91:	89 f0                	mov    eax,esi
c001bc93:	d3 eb                	shr    ebx,cl
c001bc95:	89 da                	mov    edx,ebx
c001bc97:	e9 e8 fe ff ff       	jmp    c001bb84 <__moddi3+0x54>
c001bc9c:	39 c5                	cmp    ebp,eax
c001bc9e:	73 db                	jae    c001bc7b <__moddi3+0x14b>
c001bca0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001bca4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001bca8:	89 d1                	mov    ecx,edx
c001bcaa:	89 c6                	mov    esi,eax
c001bcac:	eb cd                	jmp    c001bc7b <__moddi3+0x14b>
c001bcae:	66 90                	xchg   ax,ax

c001bcb0 <__udivdi3>:
c001bcb0:	55                   	push   ebp
c001bcb1:	57                   	push   edi
c001bcb2:	56                   	push   esi
c001bcb3:	53                   	push   ebx
c001bcb4:	83 ec 1c             	sub    esp,0x1c
c001bcb7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001bcbb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bcbf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bcc3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bcc7:	85 d2                	test   edx,edx
c001bcc9:	75 41                	jne    c001bd0c <__udivdi3+0x5c>
c001bccb:	39 f7                	cmp    edi,esi
c001bccd:	76 15                	jbe    c001bce4 <__udivdi3+0x34>
c001bccf:	89 e8                	mov    eax,ebp
c001bcd1:	89 f2                	mov    edx,esi
c001bcd3:	f7 f7                	div    edi
c001bcd5:	31 db                	xor    ebx,ebx
c001bcd7:	89 da                	mov    edx,ebx
c001bcd9:	83 c4 1c             	add    esp,0x1c
c001bcdc:	5b                   	pop    ebx
c001bcdd:	5e                   	pop    esi
c001bcde:	5f                   	pop    edi
c001bcdf:	5d                   	pop    ebp
c001bce0:	c3                   	ret    
c001bce1:	8d 76 00             	lea    esi,[esi+0x0]
c001bce4:	89 f9                	mov    ecx,edi
c001bce6:	85 ff                	test   edi,edi
c001bce8:	75 0b                	jne    c001bcf5 <__udivdi3+0x45>
c001bcea:	b8 01 00 00 00       	mov    eax,0x1
c001bcef:	31 d2                	xor    edx,edx
c001bcf1:	f7 f7                	div    edi
c001bcf3:	89 c1                	mov    ecx,eax
c001bcf5:	31 d2                	xor    edx,edx
c001bcf7:	89 f0                	mov    eax,esi
c001bcf9:	f7 f1                	div    ecx
c001bcfb:	89 c3                	mov    ebx,eax
c001bcfd:	89 e8                	mov    eax,ebp
c001bcff:	f7 f1                	div    ecx
c001bd01:	89 da                	mov    edx,ebx
c001bd03:	83 c4 1c             	add    esp,0x1c
c001bd06:	5b                   	pop    ebx
c001bd07:	5e                   	pop    esi
c001bd08:	5f                   	pop    edi
c001bd09:	5d                   	pop    ebp
c001bd0a:	c3                   	ret    
c001bd0b:	90                   	nop
c001bd0c:	39 f2                	cmp    edx,esi
c001bd0e:	77 1c                	ja     c001bd2c <__udivdi3+0x7c>
c001bd10:	0f bd da             	bsr    ebx,edx
c001bd13:	83 f3 1f             	xor    ebx,0x1f
c001bd16:	75 24                	jne    c001bd3c <__udivdi3+0x8c>
c001bd18:	39 f2                	cmp    edx,esi
c001bd1a:	72 08                	jb     c001bd24 <__udivdi3+0x74>
c001bd1c:	39 ef                	cmp    edi,ebp
c001bd1e:	0f 87 84 00 00 00    	ja     c001bda8 <__udivdi3+0xf8>
c001bd24:	b8 01 00 00 00       	mov    eax,0x1
c001bd29:	eb ac                	jmp    c001bcd7 <__udivdi3+0x27>
c001bd2b:	90                   	nop
c001bd2c:	31 db                	xor    ebx,ebx
c001bd2e:	31 c0                	xor    eax,eax
c001bd30:	89 da                	mov    edx,ebx
c001bd32:	83 c4 1c             	add    esp,0x1c
c001bd35:	5b                   	pop    ebx
c001bd36:	5e                   	pop    esi
c001bd37:	5f                   	pop    edi
c001bd38:	5d                   	pop    ebp
c001bd39:	c3                   	ret    
c001bd3a:	66 90                	xchg   ax,ax
c001bd3c:	b8 20 00 00 00       	mov    eax,0x20
c001bd41:	29 d8                	sub    eax,ebx
c001bd43:	88 d9                	mov    cl,bl
c001bd45:	d3 e2                	shl    edx,cl
c001bd47:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bd4b:	89 fa                	mov    edx,edi
c001bd4d:	88 c1                	mov    cl,al
c001bd4f:	d3 ea                	shr    edx,cl
c001bd51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bd55:	09 d1                	or     ecx,edx
c001bd57:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bd5b:	88 d9                	mov    cl,bl
c001bd5d:	d3 e7                	shl    edi,cl
c001bd5f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bd63:	89 f7                	mov    edi,esi
c001bd65:	88 c1                	mov    cl,al
c001bd67:	d3 ef                	shr    edi,cl
c001bd69:	88 d9                	mov    cl,bl
c001bd6b:	d3 e6                	shl    esi,cl
c001bd6d:	89 ea                	mov    edx,ebp
c001bd6f:	88 c1                	mov    cl,al
c001bd71:	d3 ea                	shr    edx,cl
c001bd73:	09 d6                	or     esi,edx
c001bd75:	89 f0                	mov    eax,esi
c001bd77:	89 fa                	mov    edx,edi
c001bd79:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001bd7d:	89 d7                	mov    edi,edx
c001bd7f:	89 c6                	mov    esi,eax
c001bd81:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bd85:	39 d7                	cmp    edi,edx
c001bd87:	72 13                	jb     c001bd9c <__udivdi3+0xec>
c001bd89:	74 09                	je     c001bd94 <__udivdi3+0xe4>
c001bd8b:	89 f0                	mov    eax,esi
c001bd8d:	31 db                	xor    ebx,ebx
c001bd8f:	e9 43 ff ff ff       	jmp    c001bcd7 <__udivdi3+0x27>
c001bd94:	88 d9                	mov    cl,bl
c001bd96:	d3 e5                	shl    ebp,cl
c001bd98:	39 c5                	cmp    ebp,eax
c001bd9a:	73 ef                	jae    c001bd8b <__udivdi3+0xdb>
c001bd9c:	8d 46 ff             	lea    eax,[esi-0x1]
c001bd9f:	31 db                	xor    ebx,ebx
c001bda1:	e9 31 ff ff ff       	jmp    c001bcd7 <__udivdi3+0x27>
c001bda6:	66 90                	xchg   ax,ax
c001bda8:	31 c0                	xor    eax,eax
c001bdaa:	e9 28 ff ff ff       	jmp    c001bcd7 <__udivdi3+0x27>
c001bdaf:	90                   	nop

c001bdb0 <__umoddi3>:
c001bdb0:	55                   	push   ebp
c001bdb1:	57                   	push   edi
c001bdb2:	56                   	push   esi
c001bdb3:	53                   	push   ebx
c001bdb4:	83 ec 1c             	sub    esp,0x1c
c001bdb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bdbb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bdbf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bdc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bdc7:	89 da                	mov    edx,ebx
c001bdc9:	85 c0                	test   eax,eax
c001bdcb:	75 37                	jne    c001be04 <__umoddi3+0x54>
c001bdcd:	39 df                	cmp    edi,ebx
c001bdcf:	76 13                	jbe    c001bde4 <__umoddi3+0x34>
c001bdd1:	89 f0                	mov    eax,esi
c001bdd3:	f7 f7                	div    edi
c001bdd5:	89 d0                	mov    eax,edx
c001bdd7:	31 d2                	xor    edx,edx
c001bdd9:	83 c4 1c             	add    esp,0x1c
c001bddc:	5b                   	pop    ebx
c001bddd:	5e                   	pop    esi
c001bdde:	5f                   	pop    edi
c001bddf:	5d                   	pop    ebp
c001bde0:	c3                   	ret    
c001bde1:	8d 76 00             	lea    esi,[esi+0x0]
c001bde4:	89 fd                	mov    ebp,edi
c001bde6:	85 ff                	test   edi,edi
c001bde8:	75 0b                	jne    c001bdf5 <__umoddi3+0x45>
c001bdea:	b8 01 00 00 00       	mov    eax,0x1
c001bdef:	31 d2                	xor    edx,edx
c001bdf1:	f7 f7                	div    edi
c001bdf3:	89 c5                	mov    ebp,eax
c001bdf5:	89 d8                	mov    eax,ebx
c001bdf7:	31 d2                	xor    edx,edx
c001bdf9:	f7 f5                	div    ebp
c001bdfb:	89 f0                	mov    eax,esi
c001bdfd:	f7 f5                	div    ebp
c001bdff:	89 d0                	mov    eax,edx
c001be01:	eb d4                	jmp    c001bdd7 <__umoddi3+0x27>
c001be03:	90                   	nop
c001be04:	89 f1                	mov    ecx,esi
c001be06:	39 d8                	cmp    eax,ebx
c001be08:	76 0a                	jbe    c001be14 <__umoddi3+0x64>
c001be0a:	89 f0                	mov    eax,esi
c001be0c:	83 c4 1c             	add    esp,0x1c
c001be0f:	5b                   	pop    ebx
c001be10:	5e                   	pop    esi
c001be11:	5f                   	pop    edi
c001be12:	5d                   	pop    ebp
c001be13:	c3                   	ret    
c001be14:	0f bd e8             	bsr    ebp,eax
c001be17:	83 f5 1f             	xor    ebp,0x1f
c001be1a:	75 1c                	jne    c001be38 <__umoddi3+0x88>
c001be1c:	39 d8                	cmp    eax,ebx
c001be1e:	72 04                	jb     c001be24 <__umoddi3+0x74>
c001be20:	39 f7                	cmp    edi,esi
c001be22:	77 08                	ja     c001be2c <__umoddi3+0x7c>
c001be24:	89 da                	mov    edx,ebx
c001be26:	29 fe                	sub    esi,edi
c001be28:	19 c2                	sbb    edx,eax
c001be2a:	89 f1                	mov    ecx,esi
c001be2c:	89 c8                	mov    eax,ecx
c001be2e:	83 c4 1c             	add    esp,0x1c
c001be31:	5b                   	pop    ebx
c001be32:	5e                   	pop    esi
c001be33:	5f                   	pop    edi
c001be34:	5d                   	pop    ebp
c001be35:	c3                   	ret    
c001be36:	66 90                	xchg   ax,ax
c001be38:	ba 20 00 00 00       	mov    edx,0x20
c001be3d:	29 ea                	sub    edx,ebp
c001be3f:	89 e9                	mov    ecx,ebp
c001be41:	d3 e0                	shl    eax,cl
c001be43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be47:	89 f8                	mov    eax,edi
c001be49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001be4d:	88 d1                	mov    cl,dl
c001be4f:	d3 e8                	shr    eax,cl
c001be51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001be55:	09 c1                	or     ecx,eax
c001be57:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001be5b:	89 e9                	mov    ecx,ebp
c001be5d:	d3 e7                	shl    edi,cl
c001be5f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001be63:	89 d8                	mov    eax,ebx
c001be65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be69:	88 d1                	mov    cl,dl
c001be6b:	d3 e8                	shr    eax,cl
c001be6d:	89 c7                	mov    edi,eax
c001be6f:	89 e9                	mov    ecx,ebp
c001be71:	d3 e3                	shl    ebx,cl
c001be73:	89 f0                	mov    eax,esi
c001be75:	88 d1                	mov    cl,dl
c001be77:	d3 e8                	shr    eax,cl
c001be79:	09 d8                	or     eax,ebx
c001be7b:	89 e9                	mov    ecx,ebp
c001be7d:	d3 e6                	shl    esi,cl
c001be7f:	89 f3                	mov    ebx,esi
c001be81:	89 fa                	mov    edx,edi
c001be83:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001be87:	89 d1                	mov    ecx,edx
c001be89:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001be8d:	89 c6                	mov    esi,eax
c001be8f:	89 d7                	mov    edi,edx
c001be91:	39 d1                	cmp    ecx,edx
c001be93:	72 27                	jb     c001bebc <__umoddi3+0x10c>
c001be95:	74 21                	je     c001beb8 <__umoddi3+0x108>
c001be97:	89 ca                	mov    edx,ecx
c001be99:	29 f3                	sub    ebx,esi
c001be9b:	19 fa                	sbb    edx,edi
c001be9d:	89 d0                	mov    eax,edx
c001be9f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001bea3:	d3 e0                	shl    eax,cl
c001bea5:	89 e9                	mov    ecx,ebp
c001bea7:	d3 eb                	shr    ebx,cl
c001bea9:	09 d8                	or     eax,ebx
c001beab:	d3 ea                	shr    edx,cl
c001bead:	83 c4 1c             	add    esp,0x1c
c001beb0:	5b                   	pop    ebx
c001beb1:	5e                   	pop    esi
c001beb2:	5f                   	pop    edi
c001beb3:	5d                   	pop    ebp
c001beb4:	c3                   	ret    
c001beb5:	8d 76 00             	lea    esi,[esi+0x0]
c001beb8:	39 c3                	cmp    ebx,eax
c001beba:	73 db                	jae    c001be97 <__umoddi3+0xe7>
c001bebc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001bec0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001bec4:	89 d7                	mov    edi,edx
c001bec6:	89 c6                	mov    esi,eax
c001bec8:	eb cd                	jmp    c001be97 <__umoddi3+0xe7>

Disassembly of section .init:

c001beca <_init>:
c001beca:	55                   	push   ebp
c001becb:	89 e5                	mov    ebp,esp
c001becd:	e8 22 42 fe ff       	call   c00000f4 <frame_dummy>
c001bed2:	e8 e5 fa ff ff       	call   c001b9bc <__do_global_ctors_aux>
c001bed7:	5d                   	pop    ebp
c001bed8:	c3                   	ret    

Disassembly of section .fini:

c001bed9 <_fini>:
c001bed9:	55                   	push   ebp
c001beda:	89 e5                	mov    ebp,esp
c001bedc:	e8 a3 41 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001bee1:	5d                   	pop    ebp
c001bee2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001bee4 <Computer::~Computer()>:
c001bee4:	83 ec 0c             	sub    esp,0xc
c001bee7:	ba 98 d1 01 c0       	mov    edx,0xc001d198
c001beec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bef0:	89 10                	mov    DWORD PTR [eax],edx
c001bef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bef6:	83 ec 0c             	sub    esp,0xc
c001bef9:	50                   	push   eax
c001befa:	e8 23 f9 fe ff       	call   c000b822 <Device::~Device()>
c001beff:	83 c4 10             	add    esp,0x10
c001bf02:	90                   	nop
c001bf03:	83 c4 0c             	add    esp,0xc
c001bf06:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001bf08 <Computer::~Computer()>:
c001bf08:	83 ec 0c             	sub    esp,0xc
c001bf0b:	83 ec 0c             	sub    esp,0xc
c001bf0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf12:	e8 cd ff ff ff       	call   c001bee4 <Computer::~Computer()>
c001bf17:	83 c4 10             	add    esp,0x10
c001bf1a:	83 ec 08             	sub    esp,0x8
c001bf1d:	68 70 01 00 00       	push   0x170
c001bf22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf26:	e8 bf e4 fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001bf2b:	83 c4 10             	add    esp,0x10
c001bf2e:	83 c4 0c             	add    esp,0xc
c001bf31:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001bf32 <idleCommon()>:
c001bf32:	83 ec 0c             	sub    esp,0xc
c001bf35:	fa                   	cli    
c001bf36:	ff 05 a8 37 02 c0    	inc    DWORD PTR ds:0xc00237a8
c001bf3c:	e8 6b 74 ff ff       	call   c00133ac <schedule()>
c001bf41:	a1 a8 37 02 c0       	mov    eax,ds:0xc00237a8
c001bf46:	48                   	dec    eax
c001bf47:	a3 a8 37 02 c0       	mov    ds:0xc00237a8,eax
c001bf4c:	75 01                	jne    c001bf4f <idleCommon()+0x1d>
c001bf4e:	fb                   	sti    
c001bf4f:	83 c4 0c             	add    esp,0xc
c001bf52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001bf54 <LinkedList<UnixFile>::~LinkedList()>:
c001bf54:	90                   	nop
c001bf55:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001bf56 <LinkedList<UnixFile>::LinkedList()>:
c001bf56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf64:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf6f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf8f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf96:	90                   	nop
c001bf97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001bf98 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001bf98:	83 ec 0c             	sub    esp,0xc
c001bf9b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bfa0:	75 10                	jne    c001bfb2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001bfa2:	83 ec 0c             	sub    esp,0xc
c001bfa5:	68 f8 d3 01 c0       	push   0xc001d3f8
c001bfaa:	e8 b0 41 ff ff       	call   c001015f <KePanic(char const*)>
c001bfaf:	83 c4 10             	add    esp,0x10
c001bfb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfb6:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfb8:	85 c0                	test   eax,eax
c001bfba:	74 34                	je     c001bff0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001bfbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfc3:	85 c0                	test   eax,eax
c001bfc5:	74 29                	je     c001bff0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001bfc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bfd2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bfd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfd9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bfdd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bfe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfe4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfe7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bfee:	eb 65                	jmp    c001c055 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bff4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bff6:	85 c0                	test   eax,eax
c001bff8:	75 4b                	jne    c001c045 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bffe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c001:	85 c0                	test   eax,eax
c001c003:	75 40                	jne    c001c045 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c009:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c00d:	89 10                	mov    DWORD PTR [eax],edx
c001c00f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c013:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c017:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c01e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c021:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c02c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c02f:	85 c0                	test   eax,eax
c001c031:	74 22                	je     c001c055 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c033:	83 ec 0c             	sub    esp,0xc
c001c036:	68 1a d4 01 c0       	push   0xc001d41a
c001c03b:	e8 1f 41 ff ff       	call   c001015f <KePanic(char const*)>
c001c040:	83 c4 10             	add    esp,0x10
c001c043:	eb 10                	jmp    c001c055 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c045:	83 ec 0c             	sub    esp,0xc
c001c048:	68 24 d4 01 c0       	push   0xc001d424
c001c04d:	e8 0d 41 ff ff       	call   c001015f <KePanic(char const*)>
c001c052:	83 c4 10             	add    esp,0x10
c001c055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c059:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c05c:	8d 50 01             	lea    edx,[eax+0x1]
c001c05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c063:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c066:	90                   	nop
c001c067:	83 c4 0c             	add    esp,0xc
c001c06a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c06c <LinkedList<UnixFile>::getFirstElement()>:
c001c06c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c070:	8b 00                	mov    eax,DWORD PTR [eax]
c001c072:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c074 <LinkedList<UnixFile>::removeFirst()>:
c001c074:	83 ec 0c             	sub    esp,0xc
c001c077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c07b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c07d:	85 c0                	test   eax,eax
c001c07f:	75 12                	jne    c001c093 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c081:	83 ec 0c             	sub    esp,0xc
c001c084:	68 30 d4 01 c0       	push   0xc001d430
c001c089:	e8 d1 40 ff ff       	call   c001015f <KePanic(char const*)>
c001c08e:	83 c4 10             	add    esp,0x10
c001c091:	eb 7e                	jmp    c001c111 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c097:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c09a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c09d:	85 c0                	test   eax,eax
c001c09f:	74 10                	je     c001c0b1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c0a1:	83 ec 0c             	sub    esp,0xc
c001c0a4:	68 7b d4 01 c0       	push   0xc001d47b
c001c0a9:	e8 b1 40 ff ff       	call   c001015f <KePanic(char const*)>
c001c0ae:	83 c4 10             	add    esp,0x10
c001c0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c0ba:	85 c0                	test   eax,eax
c001c0bc:	75 33                	jne    c001c0f1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c0d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c0da:	83 f8 01             	cmp    eax,0x1
c001c0dd:	74 21                	je     c001c100 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c0df:	83 ec 0c             	sub    esp,0xc
c001c0e2:	68 54 d4 01 c0       	push   0xc001d454
c001c0e7:	e8 73 40 ff ff       	call   c001015f <KePanic(char const*)>
c001c0ec:	83 c4 10             	add    esp,0x10
c001c0ef:	eb 0f                	jmp    c001c100 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c0f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0f7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c0fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0fe:	89 10                	mov    DWORD PTR [eax],edx
c001c100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c104:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c107:	8d 50 ff             	lea    edx,[eax-0x1]
c001c10a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c10e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c111:	83 c4 0c             	add    esp,0xc
c001c114:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c116 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c116:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c11a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c11d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c11e <DriverlessDevice::~DriverlessDevice()>:
c001c11e:	ba bc da 01 c0       	mov    edx,0xc001dabc
c001c123:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c127:	89 10                	mov    DWORD PTR [eax],edx
c001c129:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c12d:	50                   	push   eax
c001c12e:	e8 ef f6 fe ff       	call   c000b822 <Device::~Device()>
c001c133:	83 c4 04             	add    esp,0x4
c001c136:	90                   	nop
c001c137:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c138 <DriverlessDevice::~DriverlessDevice()>:
c001c138:	83 ec 0c             	sub    esp,0xc
c001c13b:	83 ec 0c             	sub    esp,0xc
c001c13e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c142:	e8 d7 ff ff ff       	call   c001c11e <DriverlessDevice::~DriverlessDevice()>
c001c147:	83 c4 10             	add    esp,0x10
c001c14a:	83 ec 08             	sub    esp,0x8
c001c14d:	68 58 01 00 00       	push   0x158
c001c152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c156:	e8 8f e2 fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c15b:	83 c4 10             	add    esp,0x10
c001c15e:	83 c4 0c             	add    esp,0xc
c001c161:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c162 <LinkedList<Device>::addElement(Device*)>:
c001c162:	83 ec 0c             	sub    esp,0xc
c001c165:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c16a:	75 10                	jne    c001c17c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c16c:	83 ec 0c             	sub    esp,0xc
c001c16f:	68 f8 d3 01 c0       	push   0xc001d3f8
c001c174:	e8 e6 3f ff ff       	call   c001015f <KePanic(char const*)>
c001c179:	83 c4 10             	add    esp,0x10
c001c17c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c180:	8b 00                	mov    eax,DWORD PTR [eax]
c001c182:	85 c0                	test   eax,eax
c001c184:	74 3a                	je     c001c1c0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c18a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c18d:	85 c0                	test   eax,eax
c001c18f:	74 2f                	je     c001c1c0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c195:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c198:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c19c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c1aa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c1ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c1b4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c1be:	eb 68                	jmp    c001c228 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c1c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1c6:	85 c0                	test   eax,eax
c001c1c8:	75 4e                	jne    c001c218 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c1d1:	85 c0                	test   eax,eax
c001c1d3:	75 43                	jne    c001c218 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c1d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c1dd:	89 10                	mov    DWORD PTR [eax],edx
c001c1df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c1e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c1ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c1f1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c1fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c202:	85 c0                	test   eax,eax
c001c204:	74 22                	je     c001c228 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c206:	83 ec 0c             	sub    esp,0xc
c001c209:	68 1a d4 01 c0       	push   0xc001d41a
c001c20e:	e8 4c 3f ff ff       	call   c001015f <KePanic(char const*)>
c001c213:	83 c4 10             	add    esp,0x10
c001c216:	eb 10                	jmp    c001c228 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c218:	83 ec 0c             	sub    esp,0xc
c001c21b:	68 24 d4 01 c0       	push   0xc001d424
c001c220:	e8 3a 3f ff ff       	call   c001015f <KePanic(char const*)>
c001c225:	83 c4 10             	add    esp,0x10
c001c228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c22c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c22f:	8d 50 01             	lea    edx,[eax+0x1]
c001c232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c236:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c239:	90                   	nop
c001c23a:	83 c4 0c             	add    esp,0xc
c001c23d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c23e <LinkedList<Device>::LinkedList()>:
c001c23e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c242:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c248:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c24c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c253:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c257:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c25e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c262:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c26c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c273:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c277:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c27e:	90                   	nop
c001c27f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c280 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c280:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c284:	8b 00                	mov    eax,DWORD PTR [eax]
c001c286:	85 c0                	test   eax,eax
c001c288:	75 0e                	jne    c001c298 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c28a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c28e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c291:	85 c0                	test   eax,eax
c001c293:	75 03                	jne    c001c298 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c295:	b0 01                	mov    al,0x1
c001c297:	c3                   	ret    
c001c298:	b0 00                	mov    al,0x0
c001c29a:	90                   	nop
c001c29b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c29c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c29c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c2a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c2a4:	83 ec 0c             	sub    esp,0xc
c001c2a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2ad:	85 c0                	test   eax,eax
c001c2af:	75 17                	jne    c001c2c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c2b1:	83 ec 0c             	sub    esp,0xc
c001c2b4:	68 30 d4 01 c0       	push   0xc001d430
c001c2b9:	e8 a1 3e ff ff       	call   c001015f <KePanic(char const*)>
c001c2be:	83 c4 10             	add    esp,0x10
c001c2c1:	e9 92 00 00 00       	jmp    c001c358 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c2c6:	66 90                	xchg   ax,ax
c001c2c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c2cf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c2d2:	85 c0                	test   eax,eax
c001c2d4:	0f 95 c0             	setne  al
c001c2d7:	84 c0                	test   al,al
c001c2d9:	74 11                	je     c001c2ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c2db:	83 ec 0c             	sub    esp,0xc
c001c2de:	68 7b d4 01 c0       	push   0xc001d47b
c001c2e3:	e8 77 3e ff ff       	call   c001015f <KePanic(char const*)>
c001c2e8:	83 c4 10             	add    esp,0x10
c001c2eb:	90                   	nop
c001c2ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2f2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c2f5:	85 c0                	test   eax,eax
c001c2f7:	0f 94 c0             	sete   al
c001c2fa:	84 c0                	test   al,al
c001c2fc:	74 36                	je     c001c334 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c2fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c302:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c30c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c317:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c31a:	83 f8 01             	cmp    eax,0x1
c001c31d:	74 25                	je     c001c344 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c31f:	83 ec 0c             	sub    esp,0xc
c001c322:	68 54 d4 01 c0       	push   0xc001d454
c001c327:	e8 33 3e ff ff       	call   c001015f <KePanic(char const*)>
c001c32c:	83 c4 10             	add    esp,0x10
c001c32f:	eb 13                	jmp    c001c344 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c331:	8d 76 00             	lea    esi,[esi+0x0]
c001c334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c338:	8b 00                	mov    eax,DWORD PTR [eax]
c001c33a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c33d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c341:	89 10                	mov    DWORD PTR [eax],edx
c001c343:	90                   	nop
c001c344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c348:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c34b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c352:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c355:	8d 76 00             	lea    esi,[esi+0x0]
c001c358:	83 c4 0c             	add    esp,0xc
c001c35b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c35c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c35c:	83 ec 0c             	sub    esp,0xc
c001c35f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c364:	75 12                	jne    c001c378 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c366:	83 ec 0c             	sub    esp,0xc
c001c369:	68 f8 d3 01 c0       	push   0xc001d3f8
c001c36e:	e8 ec 3d ff ff       	call   c001015f <KePanic(char const*)>
c001c373:	83 c4 10             	add    esp,0x10
c001c376:	66 90                	xchg   ax,ax
c001c378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c37c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c37e:	85 c0                	test   eax,eax
c001c380:	74 36                	je     c001c3b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c386:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c389:	85 c0                	test   eax,eax
c001c38b:	74 2b                	je     c001c3b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c38d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c391:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c394:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c398:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c39b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c39f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3a3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3ad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c3b4:	eb 6a                	jmp    c001c420 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c3b6:	66 90                	xchg   ax,ax
c001c3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3be:	85 c0                	test   eax,eax
c001c3c0:	75 4e                	jne    c001c410 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3c9:	85 c0                	test   eax,eax
c001c3cb:	75 43                	jne    c001c410 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c3cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3d5:	89 10                	mov    DWORD PTR [eax],edx
c001c3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c3e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3e9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c3f7:	85 c0                	test   eax,eax
c001c3f9:	74 25                	je     c001c420 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c3fb:	83 ec 0c             	sub    esp,0xc
c001c3fe:	68 1a d4 01 c0       	push   0xc001d41a
c001c403:	e8 57 3d ff ff       	call   c001015f <KePanic(char const*)>
c001c408:	83 c4 10             	add    esp,0x10
c001c40b:	eb 13                	jmp    c001c420 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c40d:	8d 76 00             	lea    esi,[esi+0x0]
c001c410:	83 ec 0c             	sub    esp,0xc
c001c413:	68 24 d4 01 c0       	push   0xc001d424
c001c418:	e8 42 3d ff ff       	call   c001015f <KePanic(char const*)>
c001c41d:	83 c4 10             	add    esp,0x10
c001c420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c424:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c427:	8d 50 01             	lea    edx,[eax+0x1]
c001c42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c42e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c431:	90                   	nop
c001c432:	83 c4 0c             	add    esp,0xc
c001c435:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c438 <ACPI::~ACPI()>:
c001c438:	83 ec 0c             	sub    esp,0xc
c001c43b:	ba 24 e0 01 c0       	mov    edx,0xc001e024
c001c440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c444:	89 10                	mov    DWORD PTR [eax],edx
c001c446:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c44a:	83 ec 0c             	sub    esp,0xc
c001c44d:	50                   	push   eax
c001c44e:	e8 cf f3 fe ff       	call   c000b822 <Device::~Device()>
c001c453:	83 c4 10             	add    esp,0x10
c001c456:	90                   	nop
c001c457:	83 c4 0c             	add    esp,0xc
c001c45a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c45c <ACPI::~ACPI()>:
c001c45c:	83 ec 0c             	sub    esp,0xc
c001c45f:	83 ec 0c             	sub    esp,0xc
c001c462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c466:	e8 cd ff ff ff       	call   c001c438 <ACPI::~ACPI()>
c001c46b:	83 c4 10             	add    esp,0x10
c001c46e:	83 ec 08             	sub    esp,0x8
c001c471:	68 64 12 00 00       	push   0x1264
c001c476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c47a:	e8 6b df fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c47f:	83 c4 10             	add    esp,0x10
c001c482:	83 c4 0c             	add    esp,0xc
c001c485:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c488 <LinkedList<Device>::~LinkedList()>:
c001c488:	90                   	nop
c001c489:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c48c <LinkedList<Device>::isEmpty()>:
c001c48c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c490:	8b 00                	mov    eax,DWORD PTR [eax]
c001c492:	85 c0                	test   eax,eax
c001c494:	75 0e                	jne    c001c4a4 <LinkedList<Device>::isEmpty()+0x18>
c001c496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c49a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c49d:	85 c0                	test   eax,eax
c001c49f:	75 03                	jne    c001c4a4 <LinkedList<Device>::isEmpty()+0x18>
c001c4a1:	b0 01                	mov    al,0x1
c001c4a3:	c3                   	ret    
c001c4a4:	b0 00                	mov    al,0x0
c001c4a6:	90                   	nop
c001c4a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c4a8 <LinkedList<Device>::getFirstElement()>:
c001c4a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4ae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c4b0 <LinkedList<Device>::removeFirst()>:
c001c4b0:	83 ec 0c             	sub    esp,0xc
c001c4b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4b9:	85 c0                	test   eax,eax
c001c4bb:	75 17                	jne    c001c4d4 <LinkedList<Device>::removeFirst()+0x24>
c001c4bd:	83 ec 0c             	sub    esp,0xc
c001c4c0:	68 30 d4 01 c0       	push   0xc001d430
c001c4c5:	e8 95 3c ff ff       	call   c001015f <KePanic(char const*)>
c001c4ca:	83 c4 10             	add    esp,0x10
c001c4cd:	e9 92 00 00 00       	jmp    c001c564 <LinkedList<Device>::removeFirst()+0xb4>
c001c4d2:	66 90                	xchg   ax,ax
c001c4d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4db:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c4e1:	85 c0                	test   eax,eax
c001c4e3:	74 13                	je     c001c4f8 <LinkedList<Device>::removeFirst()+0x48>
c001c4e5:	83 ec 0c             	sub    esp,0xc
c001c4e8:	68 7b d4 01 c0       	push   0xc001d47b
c001c4ed:	e8 6d 3c ff ff       	call   c001015f <KePanic(char const*)>
c001c4f2:	83 c4 10             	add    esp,0x10
c001c4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4fe:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c504:	85 c0                	test   eax,eax
c001c506:	75 34                	jne    c001c53c <LinkedList<Device>::removeFirst()+0x8c>
c001c508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c50c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c516:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c521:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c524:	83 f8 01             	cmp    eax,0x1
c001c527:	74 27                	je     c001c550 <LinkedList<Device>::removeFirst()+0xa0>
c001c529:	83 ec 0c             	sub    esp,0xc
c001c52c:	68 54 d4 01 c0       	push   0xc001d454
c001c531:	e8 29 3c ff ff       	call   c001015f <KePanic(char const*)>
c001c536:	83 c4 10             	add    esp,0x10
c001c539:	eb 15                	jmp    c001c550 <LinkedList<Device>::removeFirst()+0xa0>
c001c53b:	90                   	nop
c001c53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c540:	8b 00                	mov    eax,DWORD PTR [eax]
c001c542:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c54c:	89 10                	mov    DWORD PTR [eax],edx
c001c54e:	66 90                	xchg   ax,ax
c001c550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c554:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c557:	8d 50 ff             	lea    edx,[eax-0x1]
c001c55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c55e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c561:	8d 76 00             	lea    esi,[esi+0x0]
c001c564:	83 c4 0c             	add    esp,0xc
c001c567:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c568 <CPU::~CPU()>:
c001c568:	83 ec 0c             	sub    esp,0xc
c001c56b:	ba c0 e1 01 c0       	mov    edx,0xc001e1c0
c001c570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c574:	89 10                	mov    DWORD PTR [eax],edx
c001c576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c57a:	83 ec 0c             	sub    esp,0xc
c001c57d:	50                   	push   eax
c001c57e:	e8 9f f2 fe ff       	call   c000b822 <Device::~Device()>
c001c583:	83 c4 10             	add    esp,0x10
c001c586:	90                   	nop
c001c587:	83 c4 0c             	add    esp,0xc
c001c58a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c58c <CPU::~CPU()>:
c001c58c:	83 ec 0c             	sub    esp,0xc
c001c58f:	83 ec 0c             	sub    esp,0xc
c001c592:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c596:	e8 cd ff ff ff       	call   c001c568 <CPU::~CPU()>
c001c59b:	83 c4 10             	add    esp,0x10
c001c59e:	83 ec 08             	sub    esp,0x8
c001c5a1:	68 94 11 00 00       	push   0x1194
c001c5a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5aa:	e8 3b de fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c5af:	83 c4 10             	add    esp,0x10
c001c5b2:	83 c4 0c             	add    esp,0xc
c001c5b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c5b8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c5b8:	90                   	nop
c001c5b9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c5bc <ThreadControlBlock::ThreadControlBlock()>:
c001c5bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5c0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c5c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5cb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001c5d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5d6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001c5dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5e1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001c5e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5ec:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001c5f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5f7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001c5fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5ff:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001c603:	90                   	nop
c001c604:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001c608 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001c608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c60c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c616:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c61d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c621:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c62c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c632:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c636:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c63d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c641:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c648:	90                   	nop
c001c649:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001c64c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001c64c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c650:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c653:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001c654 <PCI::~PCI()>:
c001c654:	83 ec 0c             	sub    esp,0xc
c001c657:	ba 18 ed 01 c0       	mov    edx,0xc001ed18
c001c65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c660:	89 10                	mov    DWORD PTR [eax],edx
c001c662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c666:	83 ec 0c             	sub    esp,0xc
c001c669:	50                   	push   eax
c001c66a:	e8 3d ec fe ff       	call   c000b2ac <Bus::~Bus()>
c001c66f:	83 c4 10             	add    esp,0x10
c001c672:	90                   	nop
c001c673:	83 c4 0c             	add    esp,0xc
c001c676:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001c678 <PCI::~PCI()>:
c001c678:	83 ec 0c             	sub    esp,0xc
c001c67b:	83 ec 0c             	sub    esp,0xc
c001c67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c682:	e8 cd ff ff ff       	call   c001c654 <PCI::~PCI()>
c001c687:	83 c4 10             	add    esp,0x10
c001c68a:	83 ec 08             	sub    esp,0x8
c001c68d:	68 5c 01 00 00       	push   0x15c
c001c692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c696:	e8 4f dd fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c69b:	83 c4 10             	add    esp,0x10
c001c69e:	83 c4 0c             	add    esp,0xc
c001c6a1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001c6a2 <IDE::~IDE()>:
c001c6a2:	83 ec 0c             	sub    esp,0xc
c001c6a5:	ba cc ed 01 c0       	mov    edx,0xc001edcc
c001c6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ae:	89 10                	mov    DWORD PTR [eax],edx
c001c6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6b4:	83 ec 0c             	sub    esp,0xc
c001c6b7:	50                   	push   eax
c001c6b8:	e8 df f5 fe ff       	call   c000bc9c <HardDiskController::~HardDiskController()>
c001c6bd:	83 c4 10             	add    esp,0x10
c001c6c0:	90                   	nop
c001c6c1:	83 c4 0c             	add    esp,0xc
c001c6c4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001c6c6 <IDE::~IDE()>:
c001c6c6:	83 ec 0c             	sub    esp,0xc
c001c6c9:	83 ec 0c             	sub    esp,0xc
c001c6cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6d0:	e8 cd ff ff ff       	call   c001c6a2 <IDE::~IDE()>
c001c6d5:	83 c4 10             	add    esp,0x10
c001c6d8:	83 ec 08             	sub    esp,0x8
c001c6db:	68 70 02 00 00       	push   0x270
c001c6e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6e4:	e8 01 dd fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c6e9:	83 c4 10             	add    esp,0x10
c001c6ec:	83 c4 0c             	add    esp,0xc
c001c6ef:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001c6f0 <SATABus::~SATABus()>:
c001c6f0:	83 ec 0c             	sub    esp,0xc
c001c6f3:	ba 1c ee 01 c0       	mov    edx,0xc001ee1c
c001c6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6fc:	89 10                	mov    DWORD PTR [eax],edx
c001c6fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c702:	83 ec 0c             	sub    esp,0xc
c001c705:	50                   	push   eax
c001c706:	e8 91 f5 fe ff       	call   c000bc9c <HardDiskController::~HardDiskController()>
c001c70b:	83 c4 10             	add    esp,0x10
c001c70e:	90                   	nop
c001c70f:	83 c4 0c             	add    esp,0xc
c001c712:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001c714 <SATABus::~SATABus()>:
c001c714:	83 ec 0c             	sub    esp,0xc
c001c717:	83 ec 0c             	sub    esp,0xc
c001c71a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c71e:	e8 cd ff ff ff       	call   c001c6f0 <SATABus::~SATABus()>
c001c723:	83 c4 10             	add    esp,0x10
c001c726:	83 ec 08             	sub    esp,0x8
c001c729:	68 64 01 00 00       	push   0x164
c001c72e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c732:	e8 b3 dc fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c737:	83 c4 10             	add    esp,0x10
c001c73a:	83 c4 0c             	add    esp,0xc
c001c73d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001c73e <ATA::~ATA()>:
c001c73e:	83 ec 0c             	sub    esp,0xc
c001c741:	ba 5c ee 01 c0       	mov    edx,0xc001ee5c
c001c746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74a:	89 10                	mov    DWORD PTR [eax],edx
c001c74c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c750:	83 ec 0c             	sub    esp,0xc
c001c753:	50                   	push   eax
c001c754:	e8 25 f6 fe ff       	call   c000bd7e <PhysicalDisk::~PhysicalDisk()>
c001c759:	83 c4 10             	add    esp,0x10
c001c75c:	90                   	nop
c001c75d:	83 c4 0c             	add    esp,0xc
c001c760:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001c762 <ATA::~ATA()>:
c001c762:	83 ec 0c             	sub    esp,0xc
c001c765:	83 ec 0c             	sub    esp,0xc
c001c768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c76c:	e8 cd ff ff ff       	call   c001c73e <ATA::~ATA()>
c001c771:	83 c4 10             	add    esp,0x10
c001c774:	83 ec 08             	sub    esp,0x8
c001c777:	68 7c 01 00 00       	push   0x17c
c001c77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c780:	e8 65 dc fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c785:	83 c4 10             	add    esp,0x10
c001c788:	83 c4 0c             	add    esp,0xc
c001c78b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001c78c <ATAPI::~ATAPI()>:
c001c78c:	83 ec 0c             	sub    esp,0xc
c001c78f:	ba a4 ee 01 c0       	mov    edx,0xc001eea4
c001c794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c798:	89 10                	mov    DWORD PTR [eax],edx
c001c79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c79e:	83 ec 0c             	sub    esp,0xc
c001c7a1:	50                   	push   eax
c001c7a2:	e8 d7 f5 fe ff       	call   c000bd7e <PhysicalDisk::~PhysicalDisk()>
c001c7a7:	83 c4 10             	add    esp,0x10
c001c7aa:	90                   	nop
c001c7ab:	83 c4 0c             	add    esp,0xc
c001c7ae:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001c7b0 <ATAPI::~ATAPI()>:
c001c7b0:	83 ec 0c             	sub    esp,0xc
c001c7b3:	83 ec 0c             	sub    esp,0xc
c001c7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7ba:	e8 cd ff ff ff       	call   c001c78c <ATAPI::~ATAPI()>
c001c7bf:	83 c4 10             	add    esp,0x10
c001c7c2:	83 ec 08             	sub    esp,0x8
c001c7c5:	68 84 01 00 00       	push   0x184
c001c7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7ce:	e8 17 dc fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c7d3:	83 c4 10             	add    esp,0x10
c001c7d6:	83 c4 0c             	add    esp,0xc
c001c7d9:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001c7da <SATA::~SATA()>:
c001c7da:	83 ec 0c             	sub    esp,0xc
c001c7dd:	ba 58 ef 01 c0       	mov    edx,0xc001ef58
c001c7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e6:	89 10                	mov    DWORD PTR [eax],edx
c001c7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ec:	83 ec 0c             	sub    esp,0xc
c001c7ef:	50                   	push   eax
c001c7f0:	e8 89 f5 fe ff       	call   c000bd7e <PhysicalDisk::~PhysicalDisk()>
c001c7f5:	83 c4 10             	add    esp,0x10
c001c7f8:	90                   	nop
c001c7f9:	83 c4 0c             	add    esp,0xc
c001c7fc:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c7fe <SATA::~SATA()>:
c001c7fe:	83 ec 0c             	sub    esp,0xc
c001c801:	83 ec 0c             	sub    esp,0xc
c001c804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c808:	e8 cd ff ff ff       	call   c001c7da <SATA::~SATA()>
c001c80d:	83 c4 10             	add    esp,0x10
c001c810:	83 ec 08             	sub    esp,0x8
c001c813:	68 7c 01 00 00       	push   0x17c
c001c818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c81c:	e8 c9 db fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c821:	83 c4 10             	add    esp,0x10
c001c824:	83 c4 0c             	add    esp,0xc
c001c827:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c828 <SATAPI::~SATAPI()>:
c001c828:	83 ec 0c             	sub    esp,0xc
c001c82b:	ba 90 f0 01 c0       	mov    edx,0xc001f090
c001c830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c834:	89 10                	mov    DWORD PTR [eax],edx
c001c836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83a:	83 ec 0c             	sub    esp,0xc
c001c83d:	50                   	push   eax
c001c83e:	e8 3b f5 fe ff       	call   c000bd7e <PhysicalDisk::~PhysicalDisk()>
c001c843:	83 c4 10             	add    esp,0x10
c001c846:	90                   	nop
c001c847:	83 c4 0c             	add    esp,0xc
c001c84a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c84c <SATAPI::~SATAPI()>:
c001c84c:	83 ec 0c             	sub    esp,0xc
c001c84f:	83 ec 0c             	sub    esp,0xc
c001c852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c856:	e8 cd ff ff ff       	call   c001c828 <SATAPI::~SATAPI()>
c001c85b:	83 c4 10             	add    esp,0x10
c001c85e:	83 ec 08             	sub    esp,0x8
c001c861:	68 84 01 00 00       	push   0x184
c001c866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c86a:	e8 7b db fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c86f:	83 c4 10             	add    esp,0x10
c001c872:	83 c4 0c             	add    esp,0xc
c001c875:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001c876 <IOAPIC::~IOAPIC()>:
c001c876:	83 ec 0c             	sub    esp,0xc
c001c879:	ba d0 f0 01 c0       	mov    edx,0xc001f0d0
c001c87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c882:	89 10                	mov    DWORD PTR [eax],edx
c001c884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c888:	83 ec 0c             	sub    esp,0xc
c001c88b:	50                   	push   eax
c001c88c:	e8 91 ef fe ff       	call   c000b822 <Device::~Device()>
c001c891:	83 c4 10             	add    esp,0x10
c001c894:	90                   	nop
c001c895:	83 c4 0c             	add    esp,0xc
c001c898:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001c89a <IOAPIC::~IOAPIC()>:
c001c89a:	83 ec 0c             	sub    esp,0xc
c001c89d:	83 ec 0c             	sub    esp,0xc
c001c8a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8a4:	e8 cd ff ff ff       	call   c001c876 <IOAPIC::~IOAPIC()>
c001c8a9:	83 c4 10             	add    esp,0x10
c001c8ac:	83 ec 08             	sub    esp,0x8
c001c8af:	68 68 01 00 00       	push   0x168
c001c8b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8b8:	e8 2d db fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c8bd:	83 c4 10             	add    esp,0x10
c001c8c0:	83 c4 0c             	add    esp,0xc
c001c8c3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001c8c4 <APICTimer::~APICTimer()>:
c001c8c4:	83 ec 0c             	sub    esp,0xc
c001c8c7:	ba 18 f1 01 c0       	mov    edx,0xc001f118
c001c8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d0:	89 10                	mov    DWORD PTR [eax],edx
c001c8d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d6:	83 ec 0c             	sub    esp,0xc
c001c8d9:	50                   	push   eax
c001c8da:	e8 5d 08 ff ff       	call   c000d13c <Timer::~Timer()>
c001c8df:	83 c4 10             	add    esp,0x10
c001c8e2:	90                   	nop
c001c8e3:	83 c4 0c             	add    esp,0xc
c001c8e6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001c8e8 <APICTimer::~APICTimer()>:
c001c8e8:	83 ec 0c             	sub    esp,0xc
c001c8eb:	83 ec 0c             	sub    esp,0xc
c001c8ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8f2:	e8 cd ff ff ff       	call   c001c8c4 <APICTimer::~APICTimer()>
c001c8f7:	83 c4 10             	add    esp,0x10
c001c8fa:	83 ec 08             	sub    esp,0x8
c001c8fd:	68 60 01 00 00       	push   0x160
c001c902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c906:	e8 df da fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c90b:	83 c4 10             	add    esp,0x10
c001c90e:	83 c4 0c             	add    esp,0xc
c001c911:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001c914 <PIT::~PIT()>:
c001c914:	83 ec 0c             	sub    esp,0xc
c001c917:	ba 68 f1 01 c0       	mov    edx,0xc001f168
c001c91c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c920:	89 10                	mov    DWORD PTR [eax],edx
c001c922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c926:	83 ec 0c             	sub    esp,0xc
c001c929:	50                   	push   eax
c001c92a:	e8 0d 08 ff ff       	call   c000d13c <Timer::~Timer()>
c001c92f:	83 c4 10             	add    esp,0x10
c001c932:	90                   	nop
c001c933:	83 c4 0c             	add    esp,0xc
c001c936:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001c938 <PIT::~PIT()>:
c001c938:	83 ec 0c             	sub    esp,0xc
c001c93b:	83 ec 0c             	sub    esp,0xc
c001c93e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c942:	e8 cd ff ff ff       	call   c001c914 <PIT::~PIT()>
c001c947:	83 c4 10             	add    esp,0x10
c001c94a:	83 ec 08             	sub    esp,0x8
c001c94d:	68 5c 01 00 00       	push   0x15c
c001c952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c956:	e8 8f da fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c95b:	83 c4 10             	add    esp,0x10
c001c95e:	83 c4 0c             	add    esp,0xc
c001c961:	c3                   	ret    
